&gt; you're looping over every key of the array object (including anything in the prototype chain) It iterates over the iterable properties, and an array has nothing iterable in its prototype.
Seems inferior to doing: window.newGlobal = something
Great answer. At this point, \`var\` should be deprecated and people should only use \`let\` or \`const\`. If you are using \`var\` because you want the variable hoisted or function scoped, then you can just put your \`let\` in the appropriate place in the code and it will solve it.
One does not simply convert js to jquery, you have to refactor everything. And before you do this, you should really consider if this is really what you need
&gt; To me map and reduce are inherently less explicit. Map transforms each item in your collection, filter removes items, reduce combines the whole collection into one result and forEach does something for each item in a collection. A "for loop" is much more general and big ones loops usually a confusing combination of map, filter, reduce and forEach. It's way easier to break it down into individual simple steps. 
\`var\` - function scope and is [hoisted](https://developer.mozilla.org/en-US/docs/Glossary/Hoisting) and can be accessed before the declaration \`let\`/\`const\` - block scoped and cannot be accessed until the declaration is evaluated at runtime.
I understand that, maybe convert isn't the best word to go with. I tried refactoring but it didn't work out.
That's a great analysis!! Thanks! It's clear that omitting the field names is priority. It's still possible on my end to discriminate between object types so I'll try the array approach first and msgpack as the second step. Will report back results
Everyone has been talking about Hooks, but the new Suspense API is going to really change how we build React apps.
All code written with `var` would be more readable or unchanged if it were rewritten with `let` and `const`.
Hmm just tested, you're right. I must not have done a typical for loop like for(const i = 0; i &lt; 10; i++){ console.log(i); //fails with TypeError: Assignment to constant variable. } for awhile and mostly do things like for(const o in obj){ console.log(o, obj[o]); } which does work.
Honestly if you're going to convert it to JQuery from Javascript then why dont you just convert to the superior [Vanilla.js](http://vanilla-js.com/) framework?
[removed]
map and reduce are inherently confusing. The names aren't explicit and the callback pattern is not as simple and well known as the loop pattern. I can use a simple push or math operator to a map or reduce, which is much more common and requires less brain power to understand than a callback and vaguely named array method.
Because I am not really familiar with javascript and jquery at all. But I've worked with jQuery much more and I don't know but I know what to to with jQuery it makes more sense to me &amp;#x200B;
Religiously refer to the [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript) for javascript and you'll pick it up quickly, I promise you that. JQuery is not that necessary anymore.
[removed]
I just want my code to be organised because now it's just all in one file. Since I've worked with gulp.js and jQuery with that I wanted to go that route &amp;#x200B;
If you wanted to break things up into multiple files (which you do) then you'll just be using `export` in other files and `import {} from ''` on the main file. There's really nothing special about JQuery regarding that.
&gt; You're sad and pathetic for faking being nice. That's the general tone of your comments. Just chill bro, people would react nicer to your comments if you didn't get so upset https://i.imgur.com/Uyzdxlu.gif
&gt;but the result is less intuitive, less consistent, harder to refactor, and buggier code. And faster code. Using var makes sense in some cases, I really don't understand all the hate against it. I'm using const/let almost exclusively nowadays, but there are certainly still some use cases in which var beats the others.
I see your point. And I think the specific point you are trying to prove is what I'm disagreeing with. And that's fine, it will be hard for people to agree with certain patterns in programming. However &gt; This lame herd mentality of "never use var" is nothing but superstitious programming. it's not superstitious programming. As other people have mentioned, var as an effect that will throw most people off. variable hoisting is just weird, and it can probably cause bugs or undesired behaviour that can be easily missed.
I'm not saying he is wrong, but aome of his arguments don't really count if you use TypeScript: &gt; Implicit Hazards &gt; &gt;\[...\] &gt; &gt;In all likelihood, developers are going to get bitten by this TDZ "bug", and they'll eventually learn from that bad experience to always put their let declarations at the top of the block. This doesn't happen if you use a type-checker such as TypeScript or Flow. In general, most of his arguments can be countered by "Well, use a typechecker for it." He is basically arguing that `let`\-code can break easily and in ways you don't notice. But my argument against it is that if you refactor that carelessly, you'll also tend to get more subtle bugs - and those are a bigger nightmare. In the end he does make a few good points, but in my company I'll still have tslint fail `var` in the codebases I'm responsible for - the trade-off just isn't 100% worth it in my mind. If you need a function-scoped variable, you can always do that explicitly with a `let` on top of the function, and not implicitly with `var`. As he says: &gt;Generally, developers prefer **explicit mechanisms** rather than **implicit mechanisms**, because usually that makes code easier to read, understand, and maintain. &amp;#x200B;
Snap has been implement! Please check it out: [http://az.ht/ui/build/curr/window.html](http://az.ht/ui/build/curr/window.html) The window sides would snap to peer windows and container edges/corners for precise positioning. Also when dragging the window, the cursor would snap to container sides/corners for 1/2 and 1/4 width/height of the container window, while double click the header bar for full screen. Any suggestion will be greatly appreciated!
No. 6 is a bit vague - how exactly does React make use of the `proxy` attribute in `package.json`
Sure. The problem ``` function a () { const b = 'hi' if (b === 'hi') { const c = 'hello' } console.log(c) // undefined } ``` Normally you would do this ``` function a () { const b = 'hi' let c if (b === 'hi') { c = 'hello' } console.log(c) // prints hello } ``` I prefer to define a variable at the place of assignment instead. ``` function a () { const b = 'hi' if (b === 'hi') { var c = 'hello' } console.log(c) // prints hello } ```
I like GOTO in my PHP code. I find it beautiful, like a throwback to a simpler age. 
`for in` is generally used for objects not arrays.
Var are no longer recommended. Use Let
Using `!= / ==` for `null &amp;&amp; undefined` checks is very common. if (variable != null) instead of if (variable !== null &amp;&amp; variable !== undefined)
`map and reduce are inherently confusing` The problem is that you do not understand what they do, not that they are not more `explicit`, because they are. They explicitly do something where `for` loops are more generalised. You are confusing `being a beginner` with actually writing more readable code. `Callbacks and chainable methods are something not even every programming language commonly uses.` So? Its like saying that you should not learn X feature of a programming language because it doesn't exist in other languages. `chainable methods` can be actually found in many programming languages. Callbacks are pretty powerful as well. Your issue is that you are not adept using functional programming. So I would re-state your opinion as this: `In my opinion for of and for in are much more readable than map and forEach **as a beginner**`
Better yet, learn why people say that so you don't just follow rules blindly and eventually become a slave to things you don't understand. 
Then name the class `Please`
You can do it in two steps: * Find the item in the array that meets your criteria * Return the information from that item that you want. Example: const json = []; // Your big JSON array function getChildrenForName(items, name) { // Step 1: find the right item const item = items.find(item =&gt; item.name === name); // Step 2: return data from that item. return item &amp;&amp; item.children; } // logs [{ "name":"Historian-7.0.29.0-SP5-SIM1.iso", "id":"5.1"}] getChildrenForName(json, "Historian/Proficy_Historian_English_v7.0/\u8865\u4e01"); If you're going to be doing this all the time and your array is bigger than 1000-or-so objects, consider making an object out of that array already. That'll make your lookup constant time, instead of always having to search through the array. Alternatively, consider memoizing the function.
&gt; I'm a senior full-stack developer and I've been working my most recent job as a front-end developer for 4 years mainly using plain JavaScript and jQuery That means you started with jQuery in 2014. That's when Backbone had peaked, AngularJS was about to, and React was beginning to explode and sweep everything away. jQuery was already obsolete. In other words, you started your career with the wrong choice of stack. Did you not read blogs, go to meetups or talk to other devs? Did you not get a whiff of the buzz around these frameworks? Or you did, but you chose to ignore it? Well then it's your fault, sorry. 
It is helpful to think of an array as an object with numeric keys. 
I am assuming `feeditemcontainer` is the card wrapper? If so, you need to do const card = document.querySelector('.feeditemcontainer'); // Inside the loop card.innerHtml = '...';
why are you asking for compsci advice on a subreddit for a high level scripting language?
Which is it? Top of the scope, or right before use? 
You should probably make them plain functions and export them rather than static methods in a class. To answer your question: I'd call it LocalStorageHelper or LocalStorageUtil
Use a linter. It will force you to use let. Friends don't let friends write `var` in javascript in 2018. 
Not especially weird, it just feels kind of weird. I also see a logic to it, like you're saying: `x` will be constant during each individual iteration.
How is this possible ? I mean to say that after every increment of i, its value will be printed right (after settimeout) ? Can anyone explain this to me ??
Intro Csc is java, html and Perl 
What does your function do that the localStorage API does not do? Answering that question will help you name your function.
I'm sorry, I don't understand. The user cannot reassign const, but if there is an array mutation then const can change? In what way does it change?
I am not a fan of CSS-in-JS though this is the first time I have ever heard about it. 
This was the solution to a bug that's been troubling me for a long time in one of my projects. Thank you so, so much. Also, I should have learnt ES6 syntax earlier. What am I even doing with JS in 2018 if I haven't learnt it? Sigh...
const isn't very useful as it's not a real constant. You can still manipulate whatever is in it giving you a false sense for something being truely constant.
I was skeptical at first too. I forced myself to build some projects with it though, and now I can't go back to normal CSS. The developer experience is just unbeatable.
`const` definitively won't work for loops with increments/reassigns.
I am curious since the css is within a js file that would remove it from being render blocking correct? Or is CSS-in-JS only used for certain things? I use Sass a lot and if I had to lose Sass I would hate it. Going back to projects written in normal css sucks already. 
But that's the case for every language, the point is you can't reassign it.
and what does java, html and perl have to do with javascript?
Rule nr 4
If it's an object, you can modify its' properties (arrays are just objects which use numbered properties). You just can't reassign it. This works: const x = {}; x.a = 10; This doesn't work: const x = {}; x = { a : 10 } ;
jQuery is not helping you in organizing code better and you cant simply convert it, you would have to refactor everything by hand. I recommend reading up how you can work with imports, exports, objects, classes etc. in JS. It is not hard to understand and will do more good. I also recommend [http://youmightnotneedjquery.com/](http://youmightnotneedjquery.com/) if you ever wanna see if you can do smth in js rather than jQuery. jQuery may seem easier Syntax-wise, but you force yourself to carry a lot of luggage with you. Bonus: If you can comfortably use JS, you will understand jQuery even more. &amp;#x200B; tl;dr: jQuery will not help in organizing your code, maybe more readable because you are used to jQuery. Learn imports/exports/classes/objects in js and lookup some code organization flows and principles.
Well, there is dojo [https://dojotoolkit.org/](https://dojotoolkit.org/), but I have never in my life seen anyone who said "I love dojo". Most of the people who had to work with it said it's a damn disaster.
as soon innerHTML is assigned a new value, the DOM tree will be updated immediately. so your ```div.feeditemcontainer``` will be closed before you append new Values to innerHTML in your loop. to circumvent this, you have to use a variable that will contain the whole innerHTML string you want to use, and after you are done you assign this variable to ```feed.innerHTML```
Well, use Angular or React then, they are still made by big corps. &amp;#x200B; React just made their framework MIT licensed a few months ago.. &amp;#x200B; The only truly open source framework you should use is Vue.js :-)
I don’t have a filter for which speak of autism you are shouting. Clearly I’m asking help about something I don’t know about. Fucking aspergers 
God stfu you ass hat 
Came here to say this. I'm shocked that no one else commented on not using a for-loop 
I don't know what makes you think that Dojo is not open source, but it is (BSD).
You can't do an empty initialization with const, use let instead. You can modify a property of an object/array, so your second example would work if you const declaration actually had something. const x = [] x[0] = 10 This works.
Thanks for your advice. I didn't mean convert, I meant refactoring. I tried to refactor it with no success. I know how jQuery works because I've "learned" that first.
That's why most languages won't allow a compile time object to be assigned to a constant, only primitives.
But I don't know it well enough, I think we all noticed that lol
I don't know of any way to auto refactor JS to jQuery. Really, give JS a shot, if you understood jQuery, you will get JS too and even understand what jQuery really does.
Based upon your comments, you should read a book or two about professional behavior along with code of conducts. Unfortunately all of my books would be a bit too theory heavy for you at this stage to recommend. But perhaps [Introduction to Algorithms, 3rd Edition (The MIT Press)](https://www.amazon.com/Introduction-Algorithms-3rd-MIT-Press/dp/0262033844) would be a good resource to get at any rate. Even if you don't read it much. Lastly, I would highly recommend to buy books on [https://www.thriftbooks.com/](https://www.thriftbooks.com/) no point paying full price for them when it isn't really needed.
What languages? I know C#/Java allow it
F
Use `const` unless your linter tells you not to, then use `let`.
Thanks, but "document.getElementById('month-list')" is Null. I can see that there is only one command that is "element" and not "elements", so it should work, but perhaps "month-list" is not an id? This is so frustrating. :D 
No they don't. https://www.dotnetperls.com/const &gt; Const is a keyword that indicates a constant. It describes an entity that cannot be changed at program runtime. Instead, the entity must be fully resolved at compile-time. 
That won't even work. You need: ``` for (var i = 0; i &lt; 5; i++) { setTimeout(console.log.bind(console) , 0, i ) } ```
I'm just a beginner, but the second example seems silly to me. Why would you ever want to do that?
Yes. However this code does not select them, the line - let li=document.querySelectorAll("li.collection-item") returns a list of items, and since you query selector is selecting all items in the list,it returns an array with 11 items in it.
Based on your comments* My opinion is* you(should) English isn’t a command language, your position in an office doesn’t extend out of it. The speech time on this thread has been portrayed in absolute terms. Which is immensely flawed. You think I should practice wrapping my opinion in a suit on Reddit as I would in an office? 
It selects all li that has a class of collection-item. If you had li items and some nodes inside them with the class of collection-item, then you could select those with document.querySelectorAll("li .collection-item") Note the space.
Alright if you go by keyword `const` then you are right for C#, that's only an alias for primitives. But that's unique for C#, even C++ `const` doesn't work like that But C#'s `readonly` and Java's `final` work the same way as Javascript `const`, they can be reassigned. 
If you use styled components, it essentially like using sass in js on steroids since your variables are actually dynamic and can change post compile. 
Sure that makes more sense yes. But also the reason I barely use const but do use read-only. 
the contents of li are - NodeList(11) \[li.collection-item, li.collection-item, li.collection-item, li.collection-item, li.collection-item, li.collection-item, li.collection-item, li.collection-item, li.collection-item, li.collection-item, li.collection-item\]
This should work: &lt;html&gt;&lt;head&gt; &lt;script&gt; function myfunction() { document.getElementById("colour").style.backgroundColor = "#" + document.getElementById("red").value + document.getElementById("green").value + document.getElementById("blue").value; } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;h1 style="text-align: center;"&gt;&lt;p onclick="window.alert('Chris Chesno')"&gt;CLICK HERE FOR MY NAME&lt;/p&gt;&lt;/h1&gt; &lt;h2 style="text-align: center;"&gt;CPS 120 JAVASCRIPT LAB&lt;/H2&gt; &lt;p&gt;&lt;p&gt;&lt;/p&gt;&lt;/p&gt; &lt;p&gt;&lt;p&gt;Enter two-digit, hexadecimal numbers for the amounts of red, green, and blue light you want combined to create a color.&lt;/p&gt;&lt;/p&gt; &lt;p&gt;&lt;p&gt;Enter the hexadecimal numbers in the boxes below.&lt;/p&gt;&lt;/p&gt; &lt;p&gt;&lt;input type="text" id="red" /&gt; Red&lt;/p&gt; &lt;p&gt;&lt;input type="text" id="green" /&gt; Green&lt;/p&gt; &lt;p&gt;&lt;input type="text" id="blue" /&gt; Blue&lt;/p&gt; &lt;p&gt;&lt;input type="button" id="btn" value="Click here to see the color you created" onclick="myfunction()" /&gt;&lt;/p&gt; &lt;/body&gt;&lt;/html&gt;
This was a fun read from our future vantage point. 
&gt; What does your function do that the localStorage API does not do? For now, all `save()` and `load()` do is provide a centralised means of saving to / loading from localStorage, where they have `localStorage.setItem('app-name', JSON.stringify({...})` and `JSON.parse(localstorage.getItem('app-name'))` respectively so I don't have to repeat myself and keep track of multiple direct calls to localStorage elsewhere in the codebase. I was thinking in the future of doing some stuff to the data within these methods before saving / loading it, which is another benefit to having direct calls to localStorage in methods.
Ah it seems like this would be used more for apps vs full website builds. At least to me. I could be wrong. 
thanks
I can't think of the last time I actually wrote a for loop...
Really bad arguments from my perspective. But I guess if all you know us JS they can be somewhat valid. 
I got the middle part, didnt understand the first or last sentence though. if you need help with java please ask on one of the java subreddits. java is not the same as javascript.
Thanks, this connected and enabled me to read without experiencing condescension. The first and 3rd was me reacting in frustration, while asking for help the responses were some odd instances of superiority for rightness.
assuming it's really const data = [{name: 'jane', value: 2}, ... ]; then: 1) put them in buckets together by name const buckets = {}; data.map(item =&gt; buckets[item.name] = buckets[item.name]? [item] : buckets[item.name].push(item)); 2) sum their guts Object.keys(buckets).map(key) =&gt; console.log(`${key}: ${buckets[key].reduce( (acc,it) =&gt; acc+it, 0 )}`); You can, and in fact ought to, use map and reduce.
CCS-in-JS is a lot cooler than you would think at first glance. I was not a fan until I tried and loved it.
This was a really balanced and well-researched article. Great work! Since you mentioned Vue's scoping in the CSS-in-JS section, it might also be worth mentioning that Angular also supports CSS scoping out of the box. In fact, it's the default. In Angular, it's called "view encapsulation". Docs here: https://angular.io/guide/component-styles#view-encapsulation
JSON.parse
Well i think you can still make full websites with css in js, however i have noticed when doing it that way it becomes easier to drift away from some theme your building.
Thanks so much, I did put a lot of time into it :) I'll look at adding that for Angular as well 
I lost you at "global variable"
Why are you arguing this? They said === rule *does* have exceptions.
Hi /u/TheConMan1234, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Spilledmychips, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/penukki, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/mex-peters, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/ncubez, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Xazuli, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/FlippyBirb, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/CodeInPotato, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/iBullDoser, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/stayw0kefam, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
cool thanks!
I will have to do some reading up. 
Yea I could see that happening as well.
I'm not tho. I'm reinforcing their argument with an example that's frequently, not only rarely, used.
so if I had to find the color code of lets say a jpg i had on my computer, what would be the best way to do that?
Ah sorry. Doesn't really read like that.
Stop spreading FUD. Both Angular and React have always been open source.
Ah yes, anything *iterable* in the prototype chain. Still, though, I would always use `for (const v of array)` over `for (const i in array)` to avoid having to worry about the prototype chain. If you use an array polyfill that patches the prototype directly (`Array.prototype.includes = function() { /* ... */ }`), your `for ... in` loops would instantly be ruined. Besides, I imagine `for .. of` loops would be easier to optimize for the JS engines.
&gt;I just think you misinterpreted him. That seems probable, I originally read it as "have let work like const, and create a new keyword for let" which seemed like a futile exercise in semantics. If that's incorrect, then I humbly apologize. 
You could probably make use of a fancy ES6 function but lets do a basic for loop. Firstly, your cleaners variable is probably not exactly what you're going to want. Right now it's a single object, only really ready to accept one person's data. I would suggest reformatting it. There's probably two simple best-practice ways to do it, it requires a bit of foresight into what you may be doing with this data, but I'll just choose one for the sake of brevity. `let cleaners = {` `Jane: {},` `Kyle: {}` `}` \--- I was writing an example you can do but I realized your desired end product doesn't make complete sense. The largest challenge of this problem is the data structure itself, I would suggest fixing that before moving on. What do you want to be able to do with this data?
You pretty much just have to be sure to select the correct colour profile when you're opening it in e.g. Photoshop. If you check the info/properties of the file, it often will mention the colour profile it uses (e.g. a selfie I have has the colour profile as `sRGB IEC61966-2.1`, while my screenshots have it as `Color LCD`). Editors like Photoshop will normally pick this up automatically but it doesn't hurt to check and be sure. In addition, you need to be sure the colour profile of the code you get is correct. For instance for the exact same colour, the colour code in Color LCD would be different from the colour code in sRGB. The colour picker tool should let you adjust for that (e.g. on macOS the built-in Digital Color Meter will let you pick what profile the colour code should be in)
It's not the same as type of framework as React, Angular or Vue, but [GreenSock](https://greensock.com/licensing) is a popular animation library that has a non-free license for its paid version. It's more of a "source available" license, with some allowances for private bugfixes.
Ext JS
Your function never runs. You're using this [one](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes) ``` const numbers = [1, 2, 3, 4]; console.log(numbers.includes(4)); function includes(array, searchElement) { console.log("Doesn't run!") for (let i of array) if (array[i] === searchElement) return true; return false; } ``` 
It is only bad if you hyperfocus on it. Most of the internet was build using var, it is not as disastrous as you make it out to be.
The original ExtJS was dual licenced GPL + Proprietary. Later ExtJS was acquired by Sencha... There is now an ExtJS Community Edition (that is sort of open source). Sencha has a number of other products (Sencha Touch, Sencha Test...) all of them under proprietary licences.
i spent too much time upgrading packages and searching for solution than writing code
Do you blah? No. How do you blah? I said I don't, goddammit!
It’s just a couple of examples demonstrating the same behavior with different syntax (i.e. logging 0, 1, 2). For-of allows you to iterate over the values in an array. Typically that array would be defined as a variable elsewhere, but there is nothing wrong with using an array primitive if it suits your use case. In fact, in _Python_ there is no equivalent to the for-with-semicolons. So if you want to iterate over incrementing numbers like that, you need to generate an array of those numbers. 
\&gt;only 1/5 frontend developers have used GraphQL, but a staggering 62.5% of developers have heard of it and want to use it I'm in this camp. Personally, I'm waiting to see a GraphQL client (Apollo?) to become the standard. P.S. Hey, Trey! Hope you're doing well since CH. Go Dawgs!
That quote is ridiculous and proof that he took things way too personally. Code that uses var IS wrong, from the perspective of modern design. Before we had let and const, var was all we had, so it's what we used. But now that we have it, use it in new code. That is NOT elitist, and to say so is really backwards.
Generally you would use the native array methods (forEach, map, filter, reduce). The above isn't wrong just not the way you'd likely want to do it in code (unless you had some really good use case not solved by the native methods but I cannot think of one off the top of my head). 
While it is a bit much sometimes, a lot if it is just people getting wrapped up in trendy stuff. I am not anti-React, but it is a sort of splintered sea of libraries, and the state management stuff is undeniably over-engineered.
oh deamn, right. I think this mistake is the definition of a newbie mistake :D thanks for noticing.
thanks for the info!
others have done that here and got shit on, so no, i'm not going to. this place is full of jerks with very little knowledge.
[removed]
Nicely written but why so many parentheses on your lazy components? ``` const TestComponent = ( lazy(() =&gt; ( import('./TestComponent') )) ) ``` could be ``` const TestComponent = lazy(() =&gt; import('./TestComponent')) ```
Fuck off dick. You already have proven you aren't a nice person, and that's not what happened in the comments here. I started off nice enough, and got shit on for no good reason except herd mentality being stupid. You're right there along with them, and I'm sure you're fine with that.
Just use forEach for side effects and you'll be all good
You could use the array [some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some) function to implement `includes`: ``` const includes = (array, value) =&gt; array.some(v =&gt; v === value) ```
I think the best explanation is that JavaScript compiles on demand. Unlike other languages that compile and are distributed as bytecode, _all_ JavaScript is distributed as source code. You can obfuscate it but that doesn't stop users from reading source code. It just shows them down and makes your code less efficient, in a medium already bogged down by a browser hogging resources. The culture that JS produces simply doesn't encourage proprietary code.
[removed]
[removed]
Kendo UI, AmCharts, TradingView.
I worked many years with dojo before react was a thing, and yes it was indeed frustrating: documentation was incomplete and bad written, and the user-group forum often unhelpful with unfriendly committers. It put me so down I told myself to never use it again. I believe the team recognized and learnt from these errors, and the dojo v2 looks modern and promising – too late, however.
/u/Randdist wrote: &gt;Because js was really bad at the beginning and a lot of its worst parts were fixed later on. Like var vs let, or == vs ===. The old ones exist because lf backwards compatibility but there are hardly any (none) reasons to use them nowadays.
[removed]
[removed]
[removed]
/u/Randdist wrote: &gt;let whatever = [1,2,3,4,5]; let index = whatever.findIndex( v =&gt; v === 3 ) You're welcome. In case you do find a use case that isn't covered by the standard lib, I still prefer version #2, simply because using var easily turns your code into a bug ridden mess. In case #3, for example, you make it look like you're declaring var i inside the for header, which isn't true because it's being hoisted to the beginning of the function and you can already mistakenly use it. Basically, any var that you're not declaring at the beginning of the function is a var declaration that suggests something that isn't true. and to make your example a bit prettier: let i = 0; for(;i&lt;whatever.length;i++){ =&gt; let i; for(i = 0; i &lt; whatever.length; i++){ or even better let index; for(let i = 0; i &lt;whatever.length; i++){ if (whatever[i] === something) { index = i; break; } } [do something else with index (works)]
[removed]
A lot of the tech fervor out there really is just flustered mania. If you keep your cool, think for yourself, and judge frontend technologies from a pragmatic viewpoint, you can choose a concise subset to learn, and it won't take long for it to click. 
Well event-stream had it's source code obfuscated and encrypted...
...and it is horrible...or was, back in 2013 when I last touched it and vowed to never accept another position that uses it.
 You are forgetting a callback in the function geocodeAddress. it should be `var geocodeAddress = (address, callback) =&gt; {...}` then in your main file (app.js) you should have `geocodeAddress(someAddress, (errorMessage, results) =&gt;{...}` the `(errorMessage, results)` is the callback you referred to in the geocodeAddress function. You should ask questions in the channel or direct message me if you need any help. I would be glad to help you. Thanks for taking time to look through my videos bro. I really do appreciate it!
Cool, what will you do with this?
You can await inside a for / of loop :) 
Yeah, fully appreciated. Take care of yourself. All the best :)
[KeyLines](https://cambridge-intelligence.com/keylines/), a library for rendering graphs and maps in the browser, is closed-source and requires a paid license. It's a pretty fantastic library though, and very easy to get up and running with.
HAAAY MATE! I FINALLY FREAKING FOUND IT AND AM SOO HAPPY I DID! Sorry for the caps but I'm pretty excited about using the two together! Website: https://learn-anything.xyz/
How about localJSON?
These are general purpose components. I think they will help to build apps of different types.
Great writeup! I didn’t realize angular is gaining traction, I thought it was losing the battle. I think Vue will gain more popularity than you might think due to its super easy learning curve and better reactivity (imo) than react (without mobx). Can’t wait to see what Webassembly is going todo.
Use "let". Another advantage with "let" is that it works on IE 11. 
What's that? Googling it brings up something about WordPress...
WebAssembly seems promising if you want to use other languages. But my personal opinion is that it will not see much adoption if that remains the case. JavaScript is very mature and getting better everyday and is specialized for the job I am not predicting the future but the only case I can see is WebAssembly being used by IDEs to provide augmented functionality. 
To be honest, I thought the same about Angular when I started the article. Then I started looking at the numbers, and I was totally wrong. I've talked to people that use it professionally and the consensus was that it forced everyone to be aligned on conventions (doing things the Angular way) and they didn't have to put in time keeping their build pipeline up to date 
That used to be the case but it works fine without using `.bind` these days. Not sure when that changed.
Hi /u/TheoKondak, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
&gt; just a week ago I was mandated to use let for whatever the fuck reason That sounds like a silly rule. Both const and let have the purposes. Mandating the use of let when const makes more sense like like mandating for loops over all other loops
Use a linter with husky so you cannot commit code unless you fix your linting problems. Have the linter enforce the use of const and let and never var. You'll quickly get used to not using var after that
i write CSS in JS [1] precisely because SASS is its own language. its loops have specific semantics, mixins, etc. etc. with a pure-JS solution, all i have to do is write regular javascript loops. mixins? just function calls. extending? `Object.assign()`. i don't have to learn any new languages, pull my hair out how to put together stylesheets that i could easily assemble myself if only i had the power of an actual programming language. [1] https://github.com/cssobj/cssobj
Gotcha. I will take a look. Thanks!
This post was removed. Please see our guidelines on job postings and the likes.
Unless your process also does I/O, because processes will be waiting for that (scheduled out). I would roughly double it and check that you indeed have 100% CPU load.
View encapsulation... Of course they're going to call it something incomprehensible. It's the Angular way.
`Object.keys({}).forEach(console.log)` `undefined` Which pitfalls are you referring to? This isn't giving `toString`, etc.
ExtJS wasn't quite acquired by Sencha - Ext changed its company name to Sencha, and hired the developers of Raphael and jqTouch at the same time. I think that's how it went down, anyway. It was a long time ago. :) 
Yes, you're right, more or less... IIRC they (ExtJS, Raphael, and jqTouch) marged and formed Sencha. (Then last year Sencha was bought by someone else)
Hi /u/hanz13579, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
you basically go character by character and build up a new string with the compliment case. There will probably be a "if(char&gt;='A' &amp;&amp; char &lt;='Z')" type conditional in there somewhere.
Loop through the characters of the string, check if letter is upper or lower case then depending on which, offset the character by 26. Characters of a string are just 8 bit integers (256 possible values) and if you google the ASCII table you can see that all the characters can be represented by an integer value. You can also see that upper and lower case equivalents are 26 numbers apart. Sorry for the really rough answer, I'm on my phone. 
you could treat the string as what it actually is - an array of characters and create a function which iterate over each character, checks if it is uppercase or lowercase and toggled and then returns the concatenated toggled string back?
I know you guys get a million of this type of question a day, but I have to ask: Is this actually a reflection of interview questions at the stated levels? I'm planning on looking for an entry level job soon and I feel fairly confident with most of these topics. That seems very suspicious to me, since I'm obviously not a mid-level or above dev. 
Try something like this. &amp;#x200B; `let reverseCase = (str)=&gt;{` `let result = [];` `for(let c of str.split('')) {` `if(c.toLowerCase() == c) { result.push(c.toUpperCase()); }` `if(c.toUpperCase() == c) { result.push(c.toLowerCase()); }` `}` `return result.join('')` `}` &amp;#x200B; reverseCase('AbCd'); // -&gt; 'aBcD'
In vim it would be `viw~` :P
Or use `toUpperCase()` / `toLowerCase()` on the single chars. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase
Yeah I’ve heard from some engineering managers that they pick Angular precisely because it’s super opinionated and comes “batteries-included.” You spend much less time making technology decisions and onboarding new devs. If you hire someone with Angular experience you can hit the ground running, and even if they’re new it doesn’t take long to get them up to speed since there are not many ways to do things. It’s a trade-off for sure (not as flexible) but I can definitely see how it’s valuable. 
I hate these! I can be a very good and productive programmer and also be an architect or mentor some people to do stuff but I don't have to know anything of it instantly when confronted with a formal example. What counts is to get the job done or help someone to get the job done. Debugging one of these things when halfway knowing anything about JS isn't a hard thing. So, I know how and when to use `bind` and I know what hoisting is, but I wouldn't consider myself an expert. What counts is the ability to solve problems of any kind.
For neater code definitely go for this. Though I would always encourage to take the bare bones approach while you're learning, so later on when you use the nice utility functions like this, you understand exsctly whay they're doing.
Yeah of course, right, in terms of learning it is better, in terms of code readability it would be way better to use (or write a function) with a clear name which expresses what it is doing.
Fo sho
&gt; `fullName.bind(person)()` If I was interviewing you and you wrote that shit, you would _very probably_ not like the rest of the interview.
It is horrible. We still have it in our project and it is a constant headache for everyone in the team.
It's a start, but: * You will call `toUpperCase` twice on lowercase letters * You will call `toLowerCase` twice on uppercase letters * Non-cased characters will be added twice Defining the function for a single character instead of a string, and then using built-in features for iteration or building a string version out of it, will make it more reusable and automatically avoid some of the problems above. 
Past week I've killed about 3 days trying to get various apis working without getting CORS errors :(
Just for fun, you can also do this with a bitwise operation (not tested): function flipStringCase(str) { const newChars = []; for (let n = 0, nn = str.length; n &lt; nn; n++) { const char = str[n]; if ((char &gt;= 'a' &amp;&amp; char &lt;= 'z') || (char &gt;= 'A' &amp;&amp; char &lt;= 'Z')) { newChars.push(String.fromCharCode(char.charCodeAt(0) ^ 32)); } else { newChars.push(char); } } return newChars.join(''); }
Don’t forget all the hours you’ve spent configuring or debugging we pack config :p
&gt;const flipStringCase = str =&gt; \[...str\].reduce((acc, c)=&gt;acc+= String.fromCharCode(c.charCodeAt(0) \^ 32), "")
Is stylus add on on Chrome? Thanks
Oh well I would put the caveat that `for .. of/in` is _very_ different than `for (init; cond; next)`. `of/in` essentially builds in all the range/bounds checking, assignment, holey/packed checking/optimizations for you. Whether that's faster or slower for you would need to be profiled for your particular code
Hahahahhahahahaha you wont believe it. But my use of .find and .findIndex was even questioned, or my use of a Nodelist.forEach polyfill. Also I was called out for using a Promises and its polyfill from fucking MDN.
You can still do pretty much what you want and abstain from the included batteries if you so wish. I don’t know why you would want to that though, heh 
Here's an example from another comment: &gt; Here is an example of "custom object" that will surprise you: Object.prototype.yoyo = 1; for (let i in {a: 1}) console.log(i);
GitHub, for one. I have to support like every browser ever conceived of and every time something goes wrong I'm just like, "GitHub". Like the seagulls in Finding Nemo. I think most people here have probably never even heard of GitHub and think my name is GitHub and that I'm like a Pokemon who just speaks by saying his own name.
Big fact
Hi /u/flamedragoon345, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/infoworldnow, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/BoopityBoopSnoot, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/stayw0kefam, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/aftabnack, this post was removed. Please see our rules, and do know that 'Java' !== 'JavaScript'. Thanks for your understanding.
Hey there! It's been a while :) Hope everything is going well.
Typescript. Saved the f\*\*\* out of me on a Node app I built recently where I needed to extract data that came in strange shapes with all sorts of deeply-nested stuff. &amp;#x200B; Then again, maybe if all you're really doing is RESTful service type stuff this isn't as relevant. I don't get to work with Node at work -- I'm in the NYC corporate tech scene so all the backend stuff is .Net. &amp;#x200B; /u/davidmdm what's your vote on TS for non-weirdo Node apps? In general, I think typing systems are not just a phase in the JS world.
I am not sure what you mean by my vote for non-weirdo node apps. I think in some ways typescript does a good job. This is because the task of typing a language like Javascript is incredibly difficult. So that it works as well as it does it beyond me. However I don't think it works well enough. I spend so much time just trying to get integrated correctly with extensions in vscode, or fighting against failed builds due to versions of typescript, or of the imported package. There are times when i write perfectly valid code but the compiler doesn't like it. I just had to rant a little because it is making my work life hell. I worked as a nodejs developer for two years before these 6 months of typescript, and working in node definitely has its challenges when it comes to communicating code intent efficiently with a team, but on a personal level i have never been so frustrated coding in my life. So i vote NO to TS. If you need a static language there are plently of good ones. Golang in particular i think might just be better than sliced bread. I am talking from the perspective of a backend developer. I know in the front end things are slightly more complicated due to browser interoperability, and between using babel or ts i can understand why you make the extra plunge. I wouldn't but that not my problem. On the backend I think TS is more of a nuissance than a help.
&gt; Deleting all your comments for 6 years? Wow you must be a really toxic shit poster. I'm going to follow you around now, just so I can copy your comments. Maybe I'll even automate that just to be as much of a dick as you, and I'll use var to do it. Now that is downright creepy but whatever floats your boat.
smdh. Tell these dictators that you should be allowed to use features of the language that were added to improve readability and understanding of your code. When you're using const, you're explicitly saying that this variable can not be reassigned a new value. That has intention that gets lost if you use let whenever you mean to use const
Can you share the content of the console.log´s? Im sure they force a repaint for the animation
Yeah I hear that. The compiler itself definitely has some flaws and occasionally you have to tell TS you know what type a variable will be because it can't understand the code you wrote to determine whether the value of a variable is, for instance, a string or a number. &amp;#x200B; I'd worked with Angular + Typescript for about a year and a half before diving into the Node app I mentioned and had never really paid much mind to the static typing. I don't really know how to describe the app but I guess the closest thing would be a web crawler using Puppeteer. The variation in the shape of data I'd get from different places was overwhelming and incredibly hard to keep track of. Imagine me sitting there, writing one single function to assess something about a piece of data, running the app, waiting 15 mins for it to reach the point when the function is invoked, and seeing it crash simply because in my effort to assess data several layers deep I'd tried to access something one layer earlier than I was supposed to. As you can imagine I came very close to tossing it out altogether before seeing if mixing in types might help. I was floored by how much code I could write before testing and seeing the results I expected. &amp;#x200B; That said, what I meant by "weirdo" apps is really that I wasn't sure whether this experience was indicative of TS + Node overall or if essentially this just happened to be a prime use case.
I think that types are useful no doubt. If you ended up in a situation when you needed that tool, and there are many that do, that is fine. But ts is not the only static language out there. Many people seem to like ts, and I want them to give me their selling points as they see it. My feeling is everyone knows or likes js, lots of people like types, and now we have typescript. But I find that typescript is a very poor and frustrating tool. I feel like I am insane and can't be the only one who feels this way.
 console.log("AD: ", nodeData.ActionDescription, nodeData.TargetFrame); console.log(nodeData.ActionDescription); are the original lines... I have since changed the messages to: "Why did the chicken cross the park?" and "To get to the other slide." and it still works
Probably not the case but I've sometimes had to just reference stuff in react with mobx in order for it to pickup the observable changes on them (if they are not rendered directly but passed / computed)
Is the project using a bundler? I have noticed that a few times in one of my projects. Sometimes I make a change that surprisingly doesn't get reflected during re-doployment, but inserting a console.log makes it works, like if the bundler had skipped that chunk previously. Weird stuff. 
Why everyone says it’s horrible? It gets the basic work like table done, just not that up to date. Every of my “Excel” buddy likes it.
I actually built a goddamn website in jQuery + Bootstrap almost a year ago and for fuck's sake let me tell you what made me switch to React + Material UI a couple months ago. 1. jQuery sucks shit once you have a lot of moving parts in a single page. 2. jQuery sucks when you're making an SPA. 3. jQuery is shit when you benchmark it. 4. jQuery is visibly shit when low-end devices are a decent fraction of your end-users. 5. jQuery is shit when working with teams. Everyone got their own approach from different stackoverflow posts, in React everyone's code ends up almost the same as written in the docs. You see it's not really about me or how fast I can do something, it's more about how effective it becomes when the project scales, when multiple people are now working on it, and also when you wanna consider performance at the same time. &gt; Did you know you can build all this stuff in plain JavaScript and it will be much more maintainable and futureproof? Oh yeah if that was true, companies like Facebook would've not have to craft things like React. &gt; I think we need to collectively learn how to build a proper, maintainable, micro framework per application in plain JavaScript. Sounds fancy but fuck your ideals.
Hi /u/chefffery, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/ashleyrosehonn, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
I find myself being very productive in ExtJs, but it may be out of necessity as it wasn’t my choice to utilize this framework. What are your pain points when it comes to maintenance?
This doesn‘t answer why it‘s like this.
Kind of lame to remove it once there has already been discussion 
If you have a really solid understanding of functional JavaScript and know how to think in the async environment that is the web, you will never struggle to find a job because of framework churn. It is all the same damn thing. Jquery’s $q, Angular http, then rxjs piping it all like a boss, node wrapped in blue bird, async await, you got data that needs to be passed in an asynchronous chain from A to B. The sugar will come and go and change flavor but the pattern and principles are the same.
That’s very cool, but search should be better. Very cool and useful!
Or it's the name of a pretty important programming concept and one of the 3 pillars of OOP.
&gt; Your issue is that you are not adept using functional programming. Not really. I use higher order functions and currying because those are actually useful. Map and reduce are not since they can be done more explicitly in a for loop.
For anyone curious, this article goes into why. https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/
This post about migration of our frontend JS app from Django rest framework to create React app. Is this JS enough for you?
Sorry, missed. There's also the problem that you posted it as a self-post; can you repost using the 'Submit a new link' option?
If you're trying to do it by index, that's one way. If you want to do it for every character, you'd use the start and end character in the object. Either way, because the string is iterable you'll need to run through it
Okay, thanks, so basically forEach letter in String, Dictionary\[letter\]. That makes a lot of sense. Thank you again. 
var replacedString = myString.split().map(letter =&gt; replaceThese[letter]).reduce((partialString, next letter) =&gt; partialString + nextLetter, "");
Are you by chance using IE to run this code? IE does some strange stuff with console.log where it thinks you are in a development environment and parses the client side script differently. 
Yeah. You may have to do a map instead and then join on the array from that. I don't think you can do a direct setter on the string with the for each? Unless you grab the index also and then operate on the string with its index in conjunction with the dictionary object
let input="Example"; let result="'; for(let c of input) result += dict[c] || c;
Someone needs to learn how to use skip logic. 
front-end is awesome！
Remember that console.log is not necessarily called synchronously. So it might very well be just a red herring.
I'm not with the others, I hate it. It turns into even more of a spaghetti mess then anything else. 
Most likely a significant portion of Vue's download count are lost with those who are not using package managers.
Congrats on your first vid! It takes guts to put yourself out on YouTube, especially with a camera, and you did it! My recommendation is to buy a good mic. It makes a world of difference. Check out the [ATR 2100 USB](https://www.amazon.com/Audio-Technica-ATR2100-USB-Cardioid-Dynamic-Microphone/dp/B004QJOZS4/ref=sr_1_2?ie=UTF8&amp;qid=1544582537&amp;sr=8-2) on Amazon. It's crazy good for the price. Second, show us some code! We only need to see you (and your awesome tats) for a few seconds, then you can cut away to your screen and show us what you got. Or just show the websites you're plugging, etc. Keep up the great work man!
Yeah sure. I'll do that. First time poster on reddit.
Thanks for the advice my dude! Yea I used to have a road mic but I sold it like a year ago I will get a new one soon I just really wanted to get a video up. I think my next video I am going to run through my first complete project and go over the code and my process with it. Hope you subscribed I hope to see you in the comments and spread the word if you can I wanna help as many people as possible
not a good interview question imo
lol'd
Awesome! Yup, I subbed! Looking forward to your next!
Nice answer! But wouldn't a .join('') instead of .reduce be better?
CRA.
Even with the timeout set to zero it throws it off the stack and puts it back on when it's clear, or something like that.
Probably. Iteration is our friend! That was the method I was trying to think of, but I couldn't so I reached for good ol' reduce. Under the hood join is likely similar to how a reduce works. So it comes down to readability, and join takes the cake on that.
highcharts.com
I wish I could tell them lmao. But I'd rather avoid arguments, even if it's professional.
Aysnc functions always return a resolved promise. Without being able to look at your app I would say your best bet is to wrap your entire app in an aysnc function, so you could call const wishlist = **await** someAysncFuncCall().
The whole premise of promises is the idea that they represent values which might not be there yet. &gt; I simply just want to call whats in my AsyncStorage, and use it as a variable. `AsyncStorage.getItem` returns a Promise. It promises that eventually at some point in time (chronos) there will be value. Your application can do nothing with that promise (in a literal sense) other than waiting for it to become true. And that is what `then` or `async` + `await` does: Perform a certain action once the promise has been fulfilled. &gt; I simply just want to call whats in my AsyncStorage, and use it as a variable. You want the whole application to hold/block/wait for `getItem` to resolve. That's pretty inefficient but can be done with a top-level `await` (notice: I am not up-to-date, will this become part of the language or not?). Better than this is an `async` `main` function. You see, future values wrapped inside a promise can only ever be handled inside asynchronous contexts (async functions or the function argument of `then`). Next to async functions, you can define (not necessarily) pure (side-effect-free) synchronous functions which operate on the actual (non-promise) value: Example: `getItem` returns a Promise that is going to contain an alphanumeric key (a string). You defined the sync function `reverseUppercase` (`(id) =&gt; id.toUpperCase().split('').reverse().join('')`). This function can only act on strings not promises! But `getItem` only returns a promise, you need to wait for it. How do I wait? For example, with an sync function: const main = async () =&gt; { const id = await AsyncStorage.getItem('id'); // async const modifiedId = reverseUppercase(id); //sync … // do something with modifiedId }; main().then(console.log, console.error);
If your dictionary has 2-3 values and you want a fast solution, take a look at [this function](https://github.com/localvoid/ivi/blob/f96afea34e86c541963e4f5dec737c18f6fb3610/packages/ivi-ssr/src/escape.ts#L45-L86)
Thanks for the detailed response, to give more context. I’m attempting to use AsyncStorage in VERY simple ways to then set the state of the app based on the data stored. I’ll admit it’s a difficult concept to get my head around. I understand that Async won’t block your app, but it’s these types of implications that really confuse me
If it's not possible to list multiple items for sale at one time then it would be impossible for a person to have 2 items for sale with the same time code, I think this is the direction to go in terms of figuring out which item has been sold.
I could see that. It looks neat for certain states, but I would never write full css in it
Yes, you are able to access and modify properties of an object inside of async function (via `this`). It's true, one needs a dummy value as long as the promises hasn't be resolved yet or it has been rejected even. And everywhere else inside your applications where you use that field, you need to be aware that it might still contain the dummy value. Such a field could be compared to global states in terms of evilness. I suggest restructuring your app getting rid of this situation but that's a pretty vague advice and I cannot help you further.
to get the market place without going to the page, lets say that the market place url is "game.com/market", you can use a network request [using fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) to get the page, I'm going to assume it just returns html and not json data, so get the text response from fetch, then use [DOMParser](https://developer.mozilla.org/en-US/docs/Web/API/DOMParser) to turn the text in to a dom object that you can use getElementById and other methods to do what you are doing in the code you have so far. &amp;#x200B; In short, the network request will load the page without it being rendered to the current page, but it only comes back as text, so you need to use domparser to make it so you can use dom methods to find the things you want easier. You could use this with setInterval, or create a recursive function to have this keep pulling the information. &amp;#x200B; as for figuring out who bought what item from who, there's not really enough information in the picture to give an answer. would need to see the actual game. I would say look at the network request in the network tab of devtools to see if there's any information in there that you could capture using the [chrome webrequest api](https://developer.chrome.com/extensions/webRequest) (note this is used in a background script)
What about transclusion?
Will this work with SSR?
Hm 1. Using a getter a property being printed out on an object via console.log can potentially execute code 2. It’s possible there’s code if you scroll wwwwaay to the right of your editor. Maybe someone accidentally removed a new line and there’s two lines or code on one line. 3. Someone redeclared console with a method log on it somewhere and are animating just to be a jerk. 4. If you’re using a transpiler you may just have found a bug in it 5. Something is depending on a css value to animate and there’s a race condition. A requestAnimationFrame could be blocked by a console.log synchronously executing. It’s rare and bizarre but I bet I could build a proof of concept for it. Especially if the code inside it tightly relies on a timeframe of when it’s executed. Good questions to ask: 1. Is it all browsers or one? 2. What happens if you use debugging and breakpoints? 3. What build steps change your code? What’s actually being executed? 4. Do you use line wrap in your editor?
&gt;Note: flatMap is proposed to be added to the standard library, so you might be able to use it directly: &gt; &gt;const files = fileList.flatMap(group =&gt; group.children.map(file =&gt; file.name)); Yes, this is helpful. Thank you. 
&gt; Everything you’re going to find will be minified and therefore not meant to be human readable Is there a tool to trasform the code from minified into ''normal java script code'' ? 
Do you have a source for this?
Myślę, że może Ci się przydać taki poradnik: https://developers.google.com/web/fundamentals/codelabs/push-notifications/ Pozdrawiam.
If you mean npm packages, I highly recommend going back to LTS carbon (v8.12.0) I tried to be cool a few months back going to the newest version (10.something.something) and all of my projects went to shit. Since rolling back to 8.12.0, everything has been working super smooth.
Hi! How you are find remote work in US? As I understand, there is a plenty of remote jobs in US, but people wants work with US citizens only. I sending my CV, but don't get any reply even refuse.
So all front-end is React, Angular and their ilk? I feel like that is going overboard. Most websites don't need that heavy approach.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
I don't remember the exact place, but IIRC console.log is not standardised and different implementations may opt to write the log asynchronously. See [Issue 50316](https://bugs.chromium.org/p/chromium/issues/detail?id=50316) for Chromium (which is supposed to be fixed by now).
Benefits of regular scoping with SASS?
What would you miss?
when you started stepping through code it was possibly on the page as at that moment. when you uncommented you may have 'rebuilt/reparsed/repackaged' the page, brining in any new updated references/code/libraries etc. now your page will be fine, though if this is what happened, who know what else was 'brought in'.
The exact same applies to the other frameworks. 
That doesn't sound right, these are ancient tools. Gulp turns the build system into a mess. Jquery is the worst possible approach for application design. Juggling with raw dom nodes isn't much better, i assume that's what you're doing. If you want to shed complexity and get lean, expressive code, use webpack, which gives you clean, separated modules without manual chores, and a framework, like React, which gives you re-usable components and an easy path for reactive updates and data exchange.
I think functional compile-to-js languages (ClojureScript, elm, ReasonML and whatever there is now) handle this reasonably well.
Does the browser back button breaks everything? (JSF feelings...)
While I wouldn't ever use them, there are getters and setters that do what you're trying to accomplish. People should be able to instantiate your class normally and when they try to set the property you can validate it then. It's also typical practice to allow someone to pass in instantiating data with the constructor, typically as a simple object. You can check for validation there as well, and it makes it a lot easier to create a class instance in one shot.
I don't know it looks like handy addition, but on the other hand this syntax is so "open" - I mean I like braces and well defined and separated blocks of code. It's like comparing if (){ (...) } else { (...) } with switch() { case 1: (...); case 2: (...); } &amp;#x200B;
So the npm blog will be one of the few blogs that will stay on tumblr after 17.12 lmao.
17.12?
Do you seriously have a job as a software developer? http://lmgtfy.com/?q=Js+flatmap Scan the top few results for a decent looking answer. Understand the answer? Try it. Don’t? Google what you didn’t understand. Repeat. There’s a new invention called google, an old invention called documentation, another thing called source code, and a time tested problem solving method called trial and error. You can leverage these 4 things to solve any of your problems on your own. Quit being childish. 
Depends on what the job is for. Front end javascript only, then no, I wouldn't waste time on a question like that. I'd expect a senior backend person specializing in node to know that question though because they need to know the ins and outs of the event loop.
Cheeky one liner (for the actual logic): let input = "Example"; let dict = {'e': 3, 'a': 4, 'l': 1}; let result = input.split('').map(e =&gt; dict[e] || e).join(''); console.log(result); 
Again... you're using the `(x, y)` syntax, which is errorneous. It's neither an object or an array.
Use this: return (Math.floor(el.StartTime / 86400000) * 86400000) == selectedtime; `86400000` is `24*60*60*1000`.
December 17
Tumblr is shutting down all porn on December 17. This is a rare chance to watch a large website commit suicide, it'll be fun. (also RIP my 80k follower porn blog)
how can this package can access copay data? i thought each app has it own sandbox environment? 
Huh, rip tumblr I suppose
IMO, npm should: - Introduce support for code signing, probably with keys being generated automatically for the user (to reduce friction) but also support importing existing keys - Backport this functionality to older versions of NPM (at least 5.x, but probably also 3.x and 4.x, even if these are not supported anymore) - Right off the bat mandate code signing for all new packages - Specify a timeline to allow people to migrate their existing CI setups for existing packages (6 months tops) - Reject publishes if key is used by a different user (ideally even revoke the key) - Store keys that signed each package on package-lock.json - Upon install, warn about keys that changed since last install - On npm audit, warn about keys thar changed in the last 6 months - Introduce npm install --review and npm-install --review-new that allow you to review (like a git diff) all code changes and all code changes from new code signing keys, respectively. Ideally it should be interactive, like git add -i - On the review repl provide a "report" option - Allow users into opting in to a new "shared/community reviews" mode, where npm sends your approvals to their servers to show how many users have reviewed the package - Allow only installing packages with a minimum number of reviews - Allow only installing packages with specific reviewers approval 
Yes.
I ended up coming to that implementation too. A lot more code to write but more easily understandable. What's your reservation on the getters/setters? I'm abit iffy about it as to how much of a guarantee setters will always be triggered when the constructor is invoked
The way I did it was through Github and none of it was technically “planned”. I open sourced a lot of my own code, wrote many useful utilities and libraries, and showed an interest in contributing code to some projects which belonged to that company. I helped work on their static site generator, their CSS framework, and I used some of their ideas in my own projects as well. Eventually, I flew to Brooklyn for an in-person interview with the CTO. Around a year later, they hired me as a remote developer. In this industry you kinda need more than just your CV. You need evidence that you can code, evidence that you can build a product, evidence that you’re actively interested in their products/services. So that means an active Github and a solid portfolio with recent up-to-date entries. If you’re stuck in the “need experience to get experience” loop, take a look at free courses like FreeCodeCamp. You’ll end that course with a perfectly foundational portfolio.
`flatmap-stream`/`event-stream` was a dependency of copay, and was for a short time compiled into copay releases. It was accessing copay data from within the copay app.
Agree, except the last bullet. &gt; Require this extended validation for all users with access to high profile packages (let's say &gt;1M installs/month). Users matching this criteria would be exempt from paying for EV You may not know when your package can reach 1M or whatever the criteria could be. Yea, it's the maintainer job, but can be a tremendous effort. Or what if it is open source? You can hardly get paid for OSS, but you will pay for maintaining such OSS?
How would signing the package have helped here? Since the package code was in control of the hacker, couldn’t they just sign the package themself? Also when you say only install packages with a certain number of reviews, do you mean have that as an option? With reviews I always worry about people abusing such a system and it hurting more than helping. 
Are you looking for [this](https://stackoverflow.com/a/17793207/263525) ?
Some of these aren't honestly realistic tbh, like the community and EV options but these provide a great starting point.
oic thanks
1. client sends post data 2. server receives post data 3. server generates file 4. server puts file in cache 5. server responds with link 6. client downloads link
Why though? Never understood the sentiment, in my head JS is the only place for styles that ever made sense, styles can be plain javascript object notation. Having a separate file for that with an arbitrary syntax and in order to connect it to the code we need vendors to create backwards incompatible specs for dependency injection, it seems insane to me. Or that we have vendor prefixes. Pretty much all problems that we face with css are solved if it's json or getting interpolated to json, and solved clean: encapsulation, variables and programmatic styles, theming, etc. Things like styled-components or emotion are quite useful, have you tried it?
Still a CS concept but I mostly think they were just fucking with us on that one.
The view is a view component with markup and behaviour in my opinion. Nothing about "view encapsulation" says that it's about CSS and scoping the global nature of styling in the browser.
Profit?
‘Unexpected token export’ means you’re trying to run your code in a browser that doesn’t understand ES6 modules. Take a look at https://jakearchibald.com/2017/es-modules-in-browsers/
I've just stumbled upon FileSaver.js. It might help you.
This was my question as well. This was a social engineering attack and I don't see how signed packages would help. The best prevention here is awareness. Signed packages are going to have to happen eventually though.
I use Chrome version 70
Not really, the difficulty is flat-out wrong, and this repo only includes some specific technos (lot of front-end, C#, ASP.NET, but nothing about Python, C, C++). See my other answer here: https://www.reddit.com/r/programming/comments/a5hpkx/faqguru_a_list_of_more_than_2000_questions_for/ebml1l7/
You wouldn't pay &gt; Users matching this criteria would be exempt from paying for EV They should set a reasonable cutoff that allows for a limited cost on their end, but also allows as many packages as possible to be "covered"
I hate your choice of fonts.
The hacker was a new maintainer of the project. Provided npm doesn't allow for sharing of publish keys across mantainers (which I think they should not allow) if they had a warning in place the odds of someone spotting the new mantainer and looking at the code way earlier would be higher. Keep in mind this is just one case where someone _did_ notice it, there might be more malicious packages that we haven't uncovered yet Yeah reviews would be optional, not required. They could show something like "98% of users approved this change" to help inform your decision. They could also probably weight this by the "impact" of the reviewer measured by how many installs their packages have
They might not be realistic for a V1, but could definitely make their way in later. npm's website already has some 'community' aspects to it, it could be extended to suppor this. npm could even trust a third party to do the EV part (like, say, certisign) npm has excelent technical folks, like kat, who did an unbelievably great job with the newer npm features (like audit). they could definitely get this to work 
To make it ES5 compatible, use `module.exports`
I am not entirely following your problem, but any arbitrary binary can be encoded in a JSON string using base64. It's not the most efficient way to do it, but if you can run `JSON.stringify(window.btoa('foo'))` on anything.
Thanks. In russia, where I live now you you only need to send good CV, then come to interview, often it happen easy, more often they give you some task like at codility, sometimes, just talked with you about what are you know, what are you did before. Usally (almost always) you don't need github. And you don't need to evidence, that you love company and product. The salaries, of course much lower. \&gt; in this industry I think, it applies to people, who outside the US and want to find remote work. I think, if you US citizen and want work offline, you may not have github account. What about evidence, that you interested in their products? I hear, that in US it's important. \&gt; need experience to get experience I have experience, but I work for enterprises, so I can't put projects, over wich i worked to github. Ok, got it, I need some demo project on github.
module make a 'not defined' error
Are you using i again after this loop? Change var to let and check results again.
These are largely good measures, and I generally agree with them. That said, they don't solve the bigger issue: the process to hand off ownership/maintenance of a project needs to be better documented and involve far less friction. As an example, in this case, the problem is that the 'ownership' wasn't really transferred. That event is critical; without that event triggering notifications or any sort of review process, there is no opportunity for a downstream developer to make an informed decision. NPM ties directly to a GitHub repo, and in the process puts the burden of signaling a change on GitHub or the maintainer. GitHub, generally, has no active relationship with NPM, meaning that GitHub has no intrinsic responsibility to ensure that the event is generated, only that it records it properly if the library author generates it. The library author - who is often simply unavailable or busy - is therefore given a heavy burden that they may not understand. They need to coordinate with NPM directly that the repo is changing hands. There IS a process for this with explicit ownership changes - and [dominictarr, the original event-stream dev, did that](https://github.com/dominictarr/event-stream/issues/116#issuecomment-440947083). However, I suspect this is only because it made it easier for the new maintainer to publish; I'm confident many projects don't even go through this. I largely would argue there needs to be an event any time the GitHub repo permissions change - transfer of ownership, adding someone with push access, etc. At that point, NPM needs needs to communicate that event, similar to how [npm audit](https://docs.npmjs.com/cli/audit.html) works. There's another issue too: npm audit doesn't tell you about ownership changes, and nor does [npm update](https://docs.npmjs.com/cli/update.html). (Heck, npm update doesn't even scan child dependencies for updates by default anymore!) But, there's another issue: a downstream dev has to explicitly check against npm for events. So, all told, let me add a few suggestions that MIGHT get annoying, but are critical to understand when things happen: * To publish on NPM, your GitHub repo should allow NPM to have webhooks on the project. * Webhooks should trigger on any GitHub repo ownership or team commit access change. * NPM needs to add a new command to trace ownership changes in your whole dependency tree - perhaps call it npm provinance or npm trust? * NPM needs to hook all npm commands to monitor when npm audit and npm trust were last run. If they were run, say, more than a week ago, they should nag and/or auto run whenever ANY npm command is run. (Be mindful of internet connection state!) * Common platforms like GitHub, Jenkins, TravisCI, etc. need to add support for cron-based running of these things and emailing the results to the owner of a downflow project. (IE, if I own A, A depends on B, and B has a vulnerability or ownership change, it should be TRIVIAL to set up a system to continually monitor this. * These should be well documented - with pictures! - so that both library and application developers easily understand the process. * NPM should - like ICANN requires domain registrars to do - require library authors to report status and ownership of their libraries on a regular basis. Even yearly would be a huge improvement!
If a person had used the `--ignore-scripts` option, would it have prevented this attack? From the description it doesn't seem so
Are you running this snippet in console of Chrome or other browser? If so, the first number is printed is the return value of `setTimeout`. It returns an `id` which you can use to cancel task.
The weird number is probably the result of `setTimeout()`.
Post the code
Geolib
So excited for this! It was a pretty nice feature in Elixir when I was working with it, glad that it's coming to JS
You might need to add &lt;script type="module" src=".." /&gt; in order to use import/exports in your chrome browser. (This is just what I think from not seeing your code..) &amp;#x200B; Though, I'd recommend you to use a tool like ParcelJS or WebPack to properly transpile &amp; compile your ES6 to minifyed ES5. &amp;#x200B; Otherwise, theres a few different syntaxes for importing exporting, though I'd mostly recommend this one. \`\`\` const foo = bar =&gt; 10 + bar export default foo \`\`\` \`\`\` import foo from './foo' foo(10) // 20 \`\`\`
Here's a experiment I did a year ago with ES modules &amp; CSS variables straight in your browser, no need for node.js [https://github.com/imlinus/ES6-Modules-CSS-Variables-Experimental](https://github.com/imlinus/ES6-Modules-CSS-Variables-Experimental)
I said before in another comment thread that I am sure this is great for web apps, but for websites all the css animation I do with keyframes and everything would look like hell.
It appears that it is really setTimeout's id. Thanks!
It appears that it is really setTimeout's id. Thanks!
It was an interview question.
It actually targeted a specific app and it actually made it into said app as well huh. And man, did we make it easy for them, probably did a couple minutes of reverse engineering into their target (aka running `npm ls` once), shot off a couple emails, waited for the first fool to bite, and he merrily immediately released a backdoored version, **taking over 3 months to even get noticed** (and not even by NPM itself initially, of course). Well done hacker, the only ones to blame here are us for having such a ridiculously faulty ecosystem completely based on trust. Yup, this is probably the final straw that's finally gonna make me quit webdev. I hear there are some great opportunities in the information security space right now... 🙃 
module.exports is for Node, not a browser. 
I'm not really very knowledgeable on code signing, but I still don't understand how that would've stopped this? Are you saying that by implementing the code signing, they would then need a man-in-the-loop in case of a new maintainer's key signing the package?
Jest includes Jsdom, so you can access the DOM and WebAPIs. However, you need to create a DOM before accessing it. Use document.body.innerHTML to create it. 
I don't see the contradiction. You can do keyframes just fine in there, as well as queries, special selectors and everything else. Also, web apps, web sites, to me they're the same thing.
In your example, \`switch\` clearly indicates that you're going to be evaluating one of many possible code branches, while the \`if\` could be used alone to handle a singular special case. In that way, they feel different to me. It's just not syntactical differences, but they bear different semantics as well. &amp;#x200B; Ordinary, chained function calls versus using the pipeline operator on the other hand, feels more like syntactic sugar. But sweet, sweet syntactic sugar! &amp;#x200B; Especially with a long function chain, you're gonna have a lot of parentheses on your hands: \`\`\`js finalize(validate(mapToDomainObject(encapsulate(format(parse(readFromFile(json)))))) \`\` as opposed to: \`\`\`js json |&gt; readFromFile |&gt; parse |&gt; format |&gt; encapuslate |&gt; mapToDomainObject |&gt; validate |&gt; finalize \`\`\`
Yeah, I too gave up and went full CRA
Styled components would literally do nothing for me at all. Sure you can do everything you need but it doesn't offer anything over Sass to me. I would have to download a specific library and keep it updated for literally no gain. &amp;#x200B; Not to mention a decent amount of our clients are heavy traffic clients where javascript being disabled has been an issue. &amp;#x200B; I would say web apps and sites differ more than you think. 
&gt;I have no control over this API Op can't change the server.
I'm saying that if the new mantainer published the code to npm themselves, everyone downstream would have been notified. (Because of the key change) I guess it really doesn't help in the case they were using CI to publish. I was assuming in this case the publish was manual.
The pipeline operator is a binary operator so each operand must be a single expression. Braces are useful for cases where multiple statements are allowed, but don't add information in operand positions. As with other operators you can always use parenthesis for grouping if you want to. I do agree that the lack of braces around `case` bodies feels kinda strange even though statement grouping is unambiguous. I personally think that the `match` syntax in Scala and Rust feels like a more natural way to express the same concept.
Good on them for trying to be less gross though. I'd rather that Tumblr disappear than be what it is today.
&gt; - npm Security responded by removing flatmap-stream and event-stream@3.3.6 from the Registry and taking ownership of the event-stream package to prevent further abuse. &gt; - we recommend that you update to a later version as soon as possible. So they're taking the "whack-a-mole" approach. This blog post is missing any information about what npm is doing to prevent another attack like this in the future. Instead focusing on this *specific* incident rather than the general attack vector. Pretty typical response.
when I change the script type I get "Access to script at '.../test.js' from origin 'null' has been blocked by CORS policy: The response is invalid."
There's no code, I was testing it, if I write 'let name = true; export name or export {name};' I get an error
&gt; Yup, this is probably the final straw that's finally gonna make me quit webdev. bye!! hopefully you also quit making inane posts like this when you quit webdev!
The problem is the scope of the variable i. It's value is changed by the for-loop before console.log is called by setTimeout. If you want to show incrementing delayed numbers, you have to move the current value into a new scope. try this: for (var i = 0; i &lt; 10; i++) { (function(i2) { setTimeout(function () { console.log(i2); }, i * 1000); })(i) }
Hi /u/darkhorn, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/DQAhmed, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/TheWizardPrism06, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/CodeInPotato, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Tensokuu, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
&gt;Secure your bitcoin with the open source \- [https://copay.io/](https://copay.io/) &amp;#x200B;
Number three in that list is truly despicable. I approve! Seriously though, setting breakpoints and following it is likely to be revealing in this case. 
This one. Stringify the JSON as value of a hidden input field of a form. When you submit the form, hopefully your api can handle it. If the api returns the file contents, it will download automatically. 
Unfortunately it's possible, I was already thinking of that, same way if this was hours:minutes:seconds instead of just hours:minutes
To może być to, szkoda tylko że ten artykuł jest napisany bardzo technicznie.
uff that is a lot of information, I will try to process all of that slowly and see what I can do.
Thanks for the source. I've actually run into this before. The issue isn't that `console.log` isn't always called synchronously (it is), the issue is that it doesn't always copy or expand references passed into it, especially when the devtools aren't open. This means the value of any object's properties are evaluated when the dev inspects the object in the console. You can repro this by running the following with the devtools closed and then opening it: `javascript:let a = {};console.log(a);a.b=4;console.log(a);` 
As far as I know, download it as Blob is the best solution. my experience, however, this method should work in both Firefox and Chromium. I don't know why it doesn't work in Chromium.
At first I was like "pfft /u/fojiaotu needs to chill" but he's right. The font choice makes the whole thing uninteresting. I can give you some tips off line if you'd like.
Hi /u/idhard, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/smthamazing, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/stockholmthrow, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
I was also going to suggest JSDom. Usually I’ll add a window and document global before importing anything. 
Hi /u/_Midoriya, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/LeeYueLoong, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Ew icky sex on my internet! 
Hi /u/CodeInPotato, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/RespectableCafe, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
With Jest you shouldn't need to add anything. All you have to do is set some content, otherwise the DOM is empty. 
I’m using Mocha, Chai, Sinon, and JSDom (😢) so I don’t get all your fancy Jest setup. 
I meant more that typically I don't use any classes like this, so I wouldn't use the getters and setters features. But yeah it's pretty verbose and takes a lot more code. Not sure your concern about 'when a constructor' is involved? The constructor works when new is called, and the setter whenever the property value is changed? Should work 100% or we got bigger problems :)
Sounds like the important part here is "notify when package maintainers change" not "notify when keys change". The former can certainly be implemented without the latter, not to mention it's probably a lot more user-friendly to ID users by NPM username than by key and would generate fewer false positives.
The server only accepts a valid JSON body. As far as I understand, this approach will send the fields as form data, which is different and won't be successfully read by server's JSON parser.
The problem is, I need to send a normal valid JSON body to the server and *receive and download* a file is response. Serialization is not an issue, but making the browser download the binary response is.
First of all, thank you for your well thought out and through response! Personally I think that uninitialized values are typically a bad choice. I agree that a try block shouldn't be very large for the reason you sited but I think a better solution would be to pass the value off to another function. function maybeFail(json) { try { let result = JSON.parse(json); didNotFail(obj); } catch (e) { console.error('error parsing json', e); } } function didNotFail(obj) { //non-fail stuff } Having written that out, I now disagree with myself. Spending time with languages that have sum types has spoiled me apparently. 
I don't think the app can read form data, it accepts JSON objects in request body and nothing else. As I understand, a form will fail on the server's parser, since FormData format differs from JSON. Or am I missing something?
Cause my validations are in the `setter` methods, `setters` need to be invoked when `new Constructor()` is called. This is not always the case :( class Person { constructor(id) { this.id = id } get id() { return this._id } set id(id) { this._id = id } } Above will work perfectly, i.e. `set id(id)` will be triggered when `new Person(2)` is called. BUT, if I intialize my attribute as `this._id = id` in the constructor, (example below), the setter method won't be triggered. class Person { constructor(id) { this._id = id } get id() { return this._id } set id(id) { this._id = id } } Hence i'm not fully convinced ...
As mentioned in the question, I have no control over the server.
Give it a try. Worst that happens is that it doesn’t work
Give it a try. Worst that happens is that it doesn’t work. 
This is a lot and thus not very realistic. An easier solution would simply be not to automatically update packages to versions that have a maintainer change (consider that a breaking change) and also throw a warning in case a user tries to manually update such a package.
looks like there were 4 console logs.... why are there 5 outputs?
We're approaching 40 years of offsetting code blocks with fixed-width sans-serif font and this site uses bold, italicized non-fixed width. It's a fucking disaster.
you've really gotta love any tutorial that shows how to do something without providing a demo. brilliant!
Have you tried RxDB?
Read about it but its a wrapper around pouchDb which will have the same limitation in speed as pouchDb. Its great for most use cases but the syncing with couchDb api with all the nice conflict managing makes it inneficient for tons of msgs per minutes. Also require lots of db maintenance because otherwise couchdb keeps too many versions of each documents
&gt; if the new mantainer published the code to npm themselves, everyone downstream would have been notified. (Because of the key change) What prevents the old maintainer from giving a new maintainer their key?
The FileSaver.js approach is on the client side, equivalent to what you did with the Blob.
I love apollo so much. I push for it at work whenever I can. Their libraries are so easy to use and well designed. With their client side stuff, you can even dump redux (or whatever state management you are using) and just use apollo. 
I've already tried the same thing manually, which didn't work (got 400 bad request).
Love it. Anything to make js more naturally functional and easier to use that way.
Ah, sorry, I looked at the wrong library. Indeed, it's approach is the same as the one I tried already.
What kind of data will you emit? Redis pubsub with Postgres could be enough to have a fast and reliable stream. The transport is up to you, maybe just a node socket?
The most intensive data of the application is a whiteboard with cursor tracking and live shape dragging/drawing. yep, Redis would be a solution and would not be too hard to implement. I guess i was trying to avoid some of the synchronization problems by using turnkey solutions. Like user with 600ms latency moving object before user with 50ms latency and doing the update in order so that it does not desync. Horizon has versioning and its opensource so I could maybe check that out. CouchDb had the perfect system but its too slow. 
Mandatory device-based 2FA goes a long way on that front. 
Someone should tell him about this reddit website, it has tons of disgusting porn as well
&gt; I have never in my life seen anyone who said "I love dojo" For the record, I actually turned down a job many years ago that used dojo. Turned down another that used mootools as well. But I just wanted to let you know I've changed your life. 
I come from a C++ background, and if i had to implement this in real code I would use my implementation (maybe clarify ```dict[e] || e``` with a ternary or an if statement). Would yours be more acceptable in a professional context? (I have never worked in web dev so I really don't know). If so, why?
This is most likely not a problem with npm itself
haha fuck it https://github.com/davalapar/what-the-pack/
Cool - it looks like babel automatically enables it too. Cool read! 
The problem is that your middleware function is the default export - there’s nothing to stub it on. This is because you can’t stub modules themselves. The best way to get around this is to change your export to an object with the middleware function as a property. 
&gt; Mandatory device-based 2FA Sounds awfully impractical. Is there any public package repository that requires device-based 2FA to publish?
This came up at my last job, where processing both asynchronous and synchronous data simultaneously was a key part of the application. Oftentimes, using `setTimeout(,0)` specifically to push a process to the end of the call stack was important as well.
No, it's code got packaged into the app. Not through a install hook.
You benchmark compared to notepack, but not [`msgpack-lite`](https://github.com/kawanet/msgpack-lite), which as far as I can tell is the most popular pure-JS solution to the problem. Have you benchmarked against that as well?
You'll find this of interest: [https://babeljs.io/docs/en/v7-migration#use-strict-and-this-in-commonjs](https://babeljs.io/docs/en/v7-migration#use-strict-and-this-in-commonjs)
There you go: https://github.com/huytd/scrollreading
Timeouts, even 0ms, are put into a queue that executes only when the call stack has emptied.
The console.log itself returns undefined. If you type `1+2` into your console, you'll see your console spit `3` back out at you, because `1+2` returns `3`. Whatever you enter into your console gets logged, so `console.log(console.log('start'));` will log `'start'`, then it will log the return value of that log which is `undefined`.
Old post, but this might work as a "self hosted firebase": [https://github.com/jprichardson/procbits.com/blob/master/articles/2014/01/poor-mans-firebase-leveldb-rest-and-websockets.md](https://github.com/jprichardson/procbits.com/blob/master/articles/2014/01/poor-mans-firebase-leveldb-rest-and-websockets.md) &amp;#x200B; You might need to do some tinkering to get 5 year old code to work though :-P &amp;#x200B; i totally agree with you, i love RethinkDB in every way, too bad its dead. However, there is a community "fork" maintained by the same people, so you could just keep on using rethink
Also what happens with publishes via an automated build?
It should have been but its actually not. There are some efforts to push the API over fundationDB but its a long shot. I've stayed as long as I could. Thanks for the link! Will look into that. 
If you're talking about making Grandma use her phone to login to see her saved recipes I tend to agree, but this is software developers publishing code to a global public repository. GitHub etc already make it easy to enforce mandatory 2FA on repo access / publishing, and it doesn't really cause any issues that I've seen. To your point though, I don't know off hand if any other package repos enforce that, but it does seem like NPM is fairly unique in the scale of this problem due to the extensive use of weakly coupled upstream dependencies in common use. 
I'd mutate the logs into `{ '1': [ 'A', B', 'C' ], '2': [ 'X', 'X' ] }`, then just search those arrays for the sequence. const sequenceLogs = logs.reduce((newLog, event) =&gt; { if (!Object.prototype.hasOwnProperty.call(newLog, event.user)) { newLog[event.user] = []; } newLog[event.user].push(event.action); return newLog; }, Object.create(null)); Then to search `sequenceLogs`: for (const [ user, actions ] of Object.entries(sequenceLogs)) { // check if errorSequence is in actions } If your environment doesn't support `Object.entries`, do `user of Object.keys(sequenceLogs)` instead and `actions = sequenceLogs[user]`. I don't do the "check if errorSequence is in actions" part, because it should be simpler ("Does [ 1, 2, 3, 4, 5 ] contain [ 2, 3 ]?"), but primarily because the optimal way to make this check depends entirely on the sequence. Are they always letters? Do any ever repeat? ABC doesn't repeat, but if the sequence is actually AABAA, not all algorithms will work. Hope this gets you started.
``` logs.reduce((Data, Current) =&gt; { const Keys = Object.keys(Data); if(Keys.includes(Current.userId)) Data[Current.userId] += Current.value; else Data[Current.userId] = Current.value; }, {}); ```
Just did, got lot of apps open so they're quite lower - still beated it though. what-the-pack encode tiny x 1,204,073 ops/sec ±1.89% (84 runs sampled) what-the-pack encode small x 348,562 ops/sec ±0.89% (92 runs sampled) what-the-pack encode medium x 171,234 ops/sec ±0.71% (93 runs sampled) what-the-pack encode large x 211 ops/sec ±1.39% (79 runs sampled) mlite encode tiny x 274,572 ops/sec ±3.47% (76 runs sampled) mlite encode small x 113,322 ops/sec ±0.88% (88 runs sampled) mlite encode medium x 62,422 ops/sec ±1.11% (89 runs sampled) mlite encode large x 143 ops/sec ±2.32% (67 runs sampled) what-the-pack decode tiny x 1,032,918 ops/sec ±1.10% (90 runs sampled) what-the-pack decode small x 247,826 ops/sec ±0.64% (91 runs sampled) what-the-pack decode medium x 131,921 ops/sec ±1.00% (94 runs sampled) what-the-pack decode large x 203 ops/sec ±0.77% (84 runs sampled) mlite decode tiny x 379,323 ops/sec ±0.82% (91 runs sampled) mlite decode small x 87,608 ops/sec ±0.86% (87 runs sampled) mlite decode medium x 57,619 ops/sec ±0.96% (93 runs sampled) mlite decode large x 130 ops/sec ±0.64% (81 runs sampled)
probably just reduce the logs down to a usersActions map
 const logs = [ { user: 1, action: 'A' }, { user: 2, action: 'X' }, { user: 1, action: 'B' }, { user: 2, action: 'X' }, { user: 1, action: 'C' }, ]; const errorPathsPerUser = {} // Iterate over all the logs logs.forEach((log) =&gt; { // Create new object key if user encountered is new if (!errorPathsPerUser[log.user]) { // Add the action as value to the `user` key errorPathsPerUser[log.user] = log.action } else { // Append action to previous action errorPathsPerUser[log.user] = errorPathsPerUser[log.user] + log.action } }) console.log(errorPathsPerUser) // Output: { '1': 'ABC', '2': 'XX' } 
This is basically a hash table, so you can implement it like this: ``` const reducedUsers = logs.reduce((acc, val) =&gt; { // destructure the user and action const { user, action } = val; // save a temporary copy of the accumulator let temp = {...acc}; // add the user as a key, if it doesn't already exists= if (!temp[user]) { temp = { ...temp, [user]: '' } } // return the temporary accumulator, appending the action to correct user return { ...temp, [user]: `${temp[user]}${action}`, } }, {}); ``` Once you've got that, you can start to figure out which uses have the value of 'ABC'. 
Of course the NPM blog is on Tumblr 🤦
Underrated comment
&gt; const logs = [ &gt; { user: 1, action: 'A' }, &gt; { user: 2, action: 'X' }, &gt; { user: 1, action: 'B' }, &gt; { user: 2, action: 'X' }, &gt; { user: 1, action: 'C' }, &gt; ]; &gt; &gt; const errorPathsPerUser = {} &gt; &gt; // Iterate over all the logs &gt; logs.forEach((log) =&gt; { &gt; // Create new object key if user encountered is new &gt; if (!errorPathsPerUser[log.user]) { &gt; // Add the action as value to the `user` key &gt; errorPathsPerUser[log.user] = log.action &gt; } else { &gt; // Append action to previous action &gt; errorPathsPerUser[log.user] = errorPathsPerUser[log.user] + log.action &gt; } &gt; }) &gt; &gt; console.log(errorPathsPerUser) &gt; // Output: { '1': 'ABC', '2': 'XX' } works beautifully. thank you! 
Your second example doesn't work because you don't have a setter for the property `_id`. The first example works because you are setting the property `id`. The whole `this._id` is necessary to avoid an endless loop (i.e. setting `this.id` in the setter would call the setter again). Here is an example with some contrived validation rules: https://codesandbox.io/s/z3yymnzz94 Personally, I'd avoid doing this and use something like JSON Schema to validate at runtime instead, or use TypeScript if you're authoring a library or just need compile-time validation.
npm can do that for individual packages. `npm access 2fa-required &lt;package&gt;` ([Source](https://blog.npmjs.org/post/175861857230/two-factor-authentication-protection-for-packages)). That feature is still in beta though, at least on the client side.
Okay. Well what is the response then? Is it JSON? application/octet-stream? Something else?
But you always provide a key to your automated build, which is always linked to your specific account. Unless you mean creating a publishing acct, which is probably a bad idea.
"Content-Type" header is set to octet-stream or mime type of the file (if known). The response body is binary file data (just like a regular download url, except that in this case it requires a POST with application/json to retrieve the file).
You aren't a senior dev
Yeah, octet-stream just means binary. Typically the browser handles it as a `UInt8Array`. They are kind of a pain to work with, but not too bad. What is your end goal here? What do you want to do with the file?
Not mine, but how would I convert this to an ES6 module? https://github.com/keithwhor/audiosynth
ReactJS project: [https://github.com/converge/instapy-dashboard](https://github.com/converge/instapy-dashboard)
Well, Bob, first thing you'll want to do is take your hand and make a fist. Then see how far you can put your fist up your asshole. When you can get it in up to your elbow, you're ready to begin.
I want the browser to show the download dialog, just like if the user followed a direct download link. And, well, allow the user to download the file. I know I can read the response to a Blob (or a typed array, as you mention), then apply `createObjectURL`, insert it into `&lt;a href="created url" download="filename.xyz"&gt;`. Unfortunately, there are several issues: - It only works in Firefox for me (and theoretically should in Chrome, but it doesn't). I need to also support IE11. - I wonder if the file size will be an issue. How large a file can be to still be downloaded with `createObjectURL` and `&lt;a&gt;`? - I wonder if CORS will be an issue. This client app and the API are on different hosts, though the API has `Access-Control-Allow-Origin` properly set.
Just googled _"js save file"_, and the top result seems promising: https://stackoverflow.com/questions/13405129/javascript-create-and-save-file Note that a `Blob` and a `Uint8array` are not exactly the same thing. A Blob is a file, the array is just raw binary data. The equivalent to the array in Node.js would be a `Buffer`, and the `bytes` type in Python. I've only used createObjectURL a few times for small files, so I don't know the limitations off the top of my head. CORS should not be an issue. If you are getting back a response in the browser from the API, then it is configured to handle CORS requests. The MIME-type of the response has nothing to do with it.
Its actually a stage 1 purposal, see details https://github.com/tc39/proposal-pattern-matching
This is pretty much what I do now. However, I didn't know about `msSaveOrOpenBlob`. I'll try to experiment with it and check the limitations. Thanks for your help!
https://github.com/AryanJ-NYC/12-weeks-of-greatness Would love some help with Typescript and React.
&gt; first completed open source project. Congrats!
Hey, just wanted to say i love your itro good job
Released my first package (that's more than just a hacky experiment – or so I hope lol) a short time ago, would be glad if you take a look! Interested in all kinds of feedback – code style, docs, tests, README, SemVer, whatever you notice :) Code itself is just one 300-lines file (and all ES5 as I wanted to skip babeling for now): https://github.com/jonaskuske/smoothscroll-anchor-polyfill Essentially it let's you do `&lt;html style="scroll-behavior: smooth"&gt;` and all your `&lt;a href="#id"&gt;`s will automatically use smooth scrolling – though the script doesn't actually perform smooth scrolling itself, it expects you to provide some polyfill for the native `.scroll({ behavior: 'smooth' })`
Looks like a great addition anyway, but I liked the f# proposal better.
I can't speak to anything else, but FYI Feathers is not a database solution, it's a server like Express, but with more features.
gun.db is a realtime database: https://gun.eco/ It's easy to use but for some time the authentication/security hasn't been the best or well documented. Sites like notabug.io use it. There's even modules that let you share data via webrtc p2p and a centralized server to client all working at the same time, so it's quite fast. 
sadly I only did this hoping to see the current survey results at the end... :(
https://english.stackexchange.com/questions/29104/this-weekend-vs-next-weekend
GUN author here. Yes, it is being used in production at the Internet Archive (top 300 global site), [notabug.io](https://notabug.io) (P2P reddit - quarter million monthly visitors), and [D.Tube](https://D.Tube) (decentralized youtube - million+ monthly visitors), and has done TB/day traffic in a decentralized network. It probably is not a good choice if you are wanting to do a traditional centralized SaaS though. So keep that in mind. But if you want to build highly scalable dApps, getting started is easy - fast - lightweight: [https://gun.eco/docs/Todo-Dapp](https://gun.eco/docs/Todo-Dapp) it also has GraphQL adapters for the React &amp; React Native fans out there [https://github.com/brysgo/graphql-gun](https://github.com/brysgo/graphql-gun) ! Thanks for the mention! :) :) :) Our community is super friendly &amp; helpful on the chatroom, and we look forward to hearing about your project!
Have you considered \*not\* syncing the node\_modules directory? I believe it's best practice to just npm install that on each environment instead of trying to sync it because it's such a mess.
Thanks, I ended up creating a config.json file with example values and pushed that to Github. I then cloned my own repo on my VPS and inserted my own data.
Very good read, thanks for sharing. Tldr English is a very opinionated language lol. I do intend to have language alternatives so I will consider this when implementing that.
Good article but I wish they would have emphasized why GraphQL was so good for them (i.e. highly normalized data) a bit more.
Yeah, I teach ESL sometimes and this is probably one of the biggest sticking points. Time is tricky. M - F M-W-F ---- M, F M, W, F both sets of the above mean dramatically different things, but sometimes a misunderstanding can result in someone getting fired from their job.
Oh i know, but it provides a nice API for realtime application. [RethinkDb has a revival?](https://github.com/rethinkdb/rethinkdb/graphs/contributors?from=2018-04-25&amp;to=2018-12-12&amp;type=c)
Yes reading your docs right now :) We're not Saas at all. We're a non profit education organisation that makes learning collaborative tools. We just need it to work!
RebirthDb and the revival of RethinkDb does not appear to have [actually taken off](https://github.com/rethinkdb/rethinkdb/graphs/contributors?from=2018-04-25&amp;to=2018-12-12&amp;type=c). Its just too bad. 
Wow, great article. I didn't know all those nice, useful facts about 'strict mode' that the blog article mentioned. Thanks for posting. Now I feel like I want to try 'strict mode' in my code at least twice to see if it makes me a more conscientious programmer. I also want to try more error handling in the form of try...catch blocks, but that's off this topic.
I'd be interested in this as well
I had read something related recently about how we implicitly order our adjectives, someone would say "small brown cat" but "brown small cat" is weird, so many things we take for granted being native speakers
Yes you are right. So I wonder if there are other solutions
Their key: restrictions put in place to limit one user per key Their login credentials: not really a way to avoid that with code sign
Nice 
Sounds awesome. I believe you might be interested in [this proposal](https://github.com/tc39/proposal-intl-relative-time) that aims to bring the functionality of your project straight into JS.
well done mate!
Thank you, enjoy :)
Agreed, node modules is by design not intended to be committed.
Posts like this are how GraphQL will become mainstream.
Thanks very much :)
Wow that's amazing, didn't realize how commonly this was implemented, I will take a look at the proposal and see if I can help to make something more cross browser
Appreciate it :)
Agreed it is, but people will do it and the situation doesn't improve
\&gt; English is a very opinionated language Opinionated, but unfortunately not consistent! Part of the this/next weekend problem is linked to what people consider the week to be, which varies by where you are. Some consider it to start on Sunday and run to Saturday, some consider it to start on Monday. I'm a Monday-is-the-start person (as are most of Europe and the ISO8601 standard), so for me the Saturday and Sunday following now are then end of *this* week so are *this* weekend. The next Saturday and Sunday are the end of *next* week. If you consider the week to start on Sunday, which is common in the US amongst other places, this is less clear cut.
yea, I saw that. Interesting so that means all of the files under Babel 7 are not going to have strict mode injected unless the plugin is included, right?
I was actually considering making the start of the week configurable specifically for this issue, thanks for sharing
It’s a little hand-wavy. I want to know how GraphQL deals with complex joins and eager loading of associated data. The app I’m working on is displaying data from probably 10 or 12 different associated tables on a page. Then, a different page is showing a similar number of tables, some the same as before but some different, so the JSON we’re returning is super denormalized and specific to that view. It seems way harder than it has to be and we’re fetching the same data multiple times throughout the course of navigating the app. It bothers me to no end, but the queries are also optimized and don’t cause timeouts. So I don’t know what else to do.
other than stored procedures or something, i'm wondering sometimes it just is what it is?
:( I’m still optimistic, but I’m getting old and that just might be the answer.
Associated data is going to be n + 1 by default....better learn some data loader.
They *are* missing a polyfill, so I bet you could reuse your code into making a polyfill implementation!
GraphQL doesn't deal with joins, eager loading, etc. In fact, it doesn't deal with your database at all. That's for you to deal with when you feed GraphQL the data in each resolver. By default, a GraphQL API is rather naïve, since each resolver might call the database once, and a single resolver might be called a hundred times, resulting in n + 1 efficiency. That's where patterns (libraries) like Data Loader come in. Rather than directly fetching data from the database in your resolvers, you fetch the data through Data Loader. Data Loader can then fetch it in a single database call and split the result into batches. If you already have a REST API that's working fine and is only used by a single client, then there's no point in switching to GraphQL. Implementing a GraphQL API is a lot of work, but once you've done it, it's super flexible and scalable, and you'll never have to create a custom REST API endpoint again.
I have used Apollo client that does some smart caching. Shouldn’t it be technically possible to have some GraphQL client middleware that both caches the graph and strips out things from the request that’s already cached? Maybe there’s something that already does this?
Sounds like you essentially have a service per view. That's already pretty optimal. I don't think GraphQL is going to really help you except for maybe typed results but you could roll that yourself. Maybe your code base just needs some loving if it's difficult to deal with. Maybe you have business logic in too many places?
To be honest, I wasn't really thinking in terms of a practical context. It was more to show that it *could* be done in one line. Your method is definitely clearer to someone who doesn't come from a JS background! However, if you wanted to make the most out of the JS array operators, then this is an option. In terms of a more real-world situation, this could be used. I doubt it would come up that often because it uses a decent amount of dot operators within the same line. It definitely depends on the situation and the setup that currently exists within the project/repo that you have. Just a thought experiment/show-off more than anything!
ok so how exactly do I connect to the internet?
Let's hope they don't plan to shut down Flow too. Or maybe they just plan to move to their competitor's VSCode. :)
Oh yea. :)
Ha. You've written too much. [http://www.cs.jhu.edu/\~sam/ccs243-mason.pdf](http://www.cs.jhu.edu/~sam/ccs243-mason.pdf) Good luck. Bob Herns.
Looks like it's a single file that's exporting via these variables \`var Synth, AudioSynth, AudioSynthInstrument;\` so you'd just export those 3 vars at the bottom of the file. &amp;#x200B; &amp;#x200B;
 Very cool. Looking at the source code, it doesn't look like it would work if the result from the case match is "falsy": https://github.com/didierfranc/sweetch/blob/master/index.ts#L15 Such as: ``` const status = 200 const error = sweetch( status, [200, ''], [404, 'not found'], 'unkown code' ) console.log(error) ```
A stage 1 proposal doesn't mean it's definitely coming to JS, it just means that the committee thinks its a proposal worth exploring.
tl/dr TypeScript boilerplates still suck ass at incorporating testing suites.
There is no point in syncing or storing this folder with his contents. All information is saved in your package.json and can easy installed again with `npm install` in that directory
Thanks &amp; good spotting. &amp;#x200B; The \`null\` was intended to show \`console.log\` returns nothing (actually \`undefined\`). &amp;#x200B; Will fix!
Not being a porn addict is understandably unpopular on reddit.
Imagine being on reddit for anything except quick news bites
Contrarian view: Netflix's problems are different than the vast, vast majority of other application's. Very few apps would list network bottlenecks and servicing dozens of heterogeneous clients as issues at all.
That's not a good idea. Setting up everything on Redux is overkill in many cases, there are a lot cases where a local state would be far easier to manage. If you have all the components and all the views of the site in your project you can simply use the `react-router` and `react-router-dom` dependencies to handle the URLs. I've been working for a large development company in my country as a React Developer for almost a year and that's basically how we manage the web apps flow. The "hardest" part in all would be to differentiate what components would do better with local state rather than Redux
Okay I don't know much about redux but 2001 called and they want their cache busting technique back
I will point out that this is not a pattern that the Redux docs encourage. From the [Redux FAQ entry on deciding where state should live](https://redux.js.org/faq/organizing-state#do-i-have-to-put-all-my-state-into-redux-should-i-ever-use-reacts-setstate): &gt; **_Using local component state is fine_**. As a developer, it is _your_ job to determine what kinds of state make up your application, and where each piece of state should live. Find a balance that works for you, and go with it. &gt; Some common rules of thumb for determining what kind of data should be put into Redux: &gt; - Do other parts of the application care about this data? &gt; - Do you need to be able to create further derived data based on this original data? &gt; - Is the same data being used to drive multiple components? &gt; - Is there value to you in being able to restore this state to a given point in time (ie, time travel debugging)? &gt; - Do you want to cache the data (ie, use what's in state if it's already there instead of re-requesting it)? &gt; - Do you want to keep this data consistent while hot-reloading UI components (which may lose their internal state when swapped)? I'd say there's a few big reasons why some people have decided to put everything into Redux: - Some people genuinely want to keep everything in Redux deliberately, usually because they've decided they want _all_ state changes to be traceable, all components to be function components, etc. This is a valid technical choice to make, but I think it's overly dogmatic. - The ["Three Principles" docs page](https://redux.js.org/introduction/three-principles) does talk about Redux being a "single source of truth". To be honest, this has probably been both over-emphasized and over-interpreted. The statement of principle is reasonable, but there needs to be qualifiers on it ("a single source of truth... for whatever data you feel should be global across the app", etc). - A lot of people haven't taken the time to understand Redux on their own, and they've either been told what to do by others, or just sort of assume that's the way it ought to be. FWIW, we [just completely rebuilt the Redux docs site at https://redux.js.org](https://redux.js.org/) with a new build setup and design. Our next step is to [rethink the docs content from the ground up](https://github.com/reduxjs/redux/issues/2590). As part of that, I've created **[a survey asking for feedback on ways to improve the docs content](https://docs.google.com/forms/d/e/1FAIpQLSfzIkY3fXZ8PrQKScYMK0YoEgALfAK2qQ0mOj1_ibKv2qDTuQ/viewform)**. I'd really appreciate it if folks would fill that out and let us know how we can improve things.
[https://github.com/ianwoo/meteor-react-playground/blob/master/imports/ui/tictactoe.js](https://github.com/ianwoo/meteor-react-playground/blob/master/imports/ui/tictactoe.js) This is a fucking shit react version of the stupid tic tac toe game exercise, but I'm still just getting my head around react in my spare time while I work a Blaze/Meteor job (pretty much preparing for the next, and better, job) Can anyone look at this and see if I have any glaring misunderstandings about how to properly code in react? Or, if they can spot any ways I can improve, or could guide me towards ways to get better, perhaps by pointing me to tutorial resources? I also plan on eventually building more practice projects with the Pup boilerplate (Meteor + React + MongoDB + GraphQL) so I can learn GraphQL and stay one step ahead of the game. If anyone can point me to good GraphQL resources, it would be very much obliged.
yo thank you so much &lt;3 that means a whole lot
The ES6 spec guarantees sublinear complexity, but beyond that it would depend on the specific engine's implementation. 
The whole point of redux is that it re renders connected components on changes. Globals don't. Wether you put everything or one thing in redux is irrelevant to wanting to use globals.
 *@ . 
Check out JoinMonster.js
Exactly. Depending on the scope of application GraphQL can seem a gamble at best and an extremely catastrophic idea at worst. &amp;nbsp; Source: I work in the enterprise sector where Oracles with millions of records are considered the run-of-the-mill installation
&gt; an extremely catastrophic idea at worst The usage of GraphQL, or the migration to it?
My experience with GraphQL has been much less sunshine and rainbows. The ecosystem is far from mature, I would have issues with some edge cases of the types or the client libraries too often and the entire backend codebase became about bending over to accommodate gql.
Meteor is still alive and more mature than ever. It is real good and easy to setup [https://www.meteor.com/tutorials/react/creating-an-app](https://www.meteor.com/tutorials/react/creating-an-app)
This seems like a great article but that font...
First and foremost the migration. A db working for 3-4 years with daily use can amass a significant chunk of data. Imagine something simple as even moving this to e.g SQL server or Postgress. Hundreds of man hours to ensure everything will run well, not to mention that if you insert some data manipulation, perhaps some cleaning and what not the cost can skyrocket. And we are talking about something simple, RDBMS to RDBMS. Taking you into consideration schema changes, perhaps radical data transformations that have to take place - and all of that for negligible or dubious gains since we are talking intranet applications and suddenly the whole prospect is either an exercise in futility or a km deep hole that will need lots of cash and time to be filled. 
Todays post in the daily javascript advent calendar at [javascript.christmas](https://javascript.christmas)!
Seems to be blocked for another 5 hours.
If you have everything in the app state, you can serialize the app state really easily. I had a Clojurescript re-frame app set up that way and had a bookmarklet for the testers to dump app state and 50 steps of history to the clipboard.
Any API benefits because flexibility with less code benefits every app.
What? GraphQL has nothing to do with databases...
It’s not a good idea. Not everything is meant to be in redux, especially if it’s ephemeral data only being used internally by one component. Also, that POST-only server sounds like a nightmare. Why??
Sorry, you have to wait a bit longer We're happy to see you're so eager - but you have to waitabout 6 hours. 
What does any of this have to do with GraphQL, though?
Changes to globals are untraceable (which could cause non-obvious bugs in unrelated parts of your system, and make it nigh impossible to understand how your state gets modified) Having everything in redux could actually make your life easier when taking over a project; install redux-dev-tools and if he used decent naming conventions you should easily be able to understand what is in your state and how it changes over time I work on an increasingly big project and very often \*not\* starting with redux everywhere leads me to refactor a lot of state management down the line when I have to raise the state later for use in multiple components. That being said I'm still way too lazy/pressed for time to use redux everywhere, so I take it case by case - I recommend you follow the same approach unless your boss is against it for whatever reason
Oh, sorry about that! We had a timezone issue and the fix wasn't merget yet. I think it should be working now, regardless of your worldy position!
Graphql should be client oriented. Resolvers are used to map the client centric schema to the actual store or stores whether they be a dB, file, api or anything really. Libraries exist for optimising fetching but they’re not part of the standard. It helps solve the service per view anti-pattern by enabling clients to query what they need from a single place. Obviously this can be scaled horizontally. Client side tech like Apollo can be useful for greenfield but might be harder in existing apps. We have built a slack like app using it with good results. We also have a legacy app where we would like to use it as an aggregator for backend services where the clients are other backend services. The abstraction allows us to decouple the data somewhat and solves over/under fetching. As with all things it’s utility depends on the problem you’re solving. Personally I see value in it. 
Redux is bad practice in my mind. You couple your component to the structure of the store which makes it less reuseable. Composition to the redux store should be in another module. Seems silly but will make your code more resuable. Use the context API when possible. You can decomopse some components further but not a big deal. Having a lot of components outside of the components folder seems wrong even though I can get that you want to express pages/layouts. The real issue: you have no tests. Tesable code is key for reusing and avoiding regression. On some cases it can be a drive to architecture. In general I like what I see. 
Because the GraphQL API needs a complete redesign in terms of how the applications request data from their respositories. Most enterprise sector apps are built with RDBMS in mind so migrating to a GraphQL implementation means metric tons of re-engineering.
I see a lot of confusion about graphql and I think people have bizarre expectations from it. The most important thing to remember about graphql is just its name. GraphQL -&gt; Graph Query Language. It's just a way of organizing queries and data updates. It's not a database and it doesn't really affect how you organize your databases
None per se - but you have to take into account that most enterprise sector applications are built with an expectation of RDBMS systems in place and are designed and implemented with this specific mindset. 
The reason is one thing, but I'm not too comfortable with it as it feels error-prone. Why do you personally avoid this approach though? 
You really should make a gist or codepen for code - reddit renders it just about unreadable.
GraphQL is only good for dynamically typed language really, I tried to use it with Go, a statically typed language. I can't say it's not doable, but the lengths you need to go just to make it work... I abandoned it after awhile. I'm still saying that GraphQL would be dead a long time ago if it wasn't for Facebook backing it...
"you're having fun wrong reeee"
Now it's blocked for another seven hours
It's already mainstream
Mostly because I feel like it's a lot to maintain as your codebase grows, and perhaps not as extensive as other tools. Runtime errors are usually something you want to avoid, and there are other ways to handle data validation with less maintenance. I guess it's important to clarify who the validation is for, too. For example, if you're validating form input (i.e. you want to construct an object from a form the user fills in), I would use either use HTML5 validation to prevent them from entering bad data (quick and easy), or JSON Schema validation if I need something more flexible. If you're writing a tool or library for developers, well documented parameters or TypeScript interfaces are a really good way of making your intentions clear. TypeScript is also great in general because it makes your code so much clearer (e.g. you can tell at a glance what a function expects and what it returns). TypeScript and JSON Schema are also a pretty nice match combined. We use JSON Schema to document our APIs, which are converted to Java POJOs for the backend and TypeScript interfaces for the frontend. That allows for compile time type checking and if necessary, runtime validation for user input. HOWEVER, take what I say with a grain of salt and keep working on what you're doing because there is no one right way of doing things. And the best way to learn is to just try things yourself and see how you like it and how it fits into your workflow. Obviously, what I described above is overkill for a simple app, but you get the idea.
[https://github.com/FabienGreard/fakeStoreJs](https://github.com/FabienGreard/fakeStoreJs), trying to resolve a problem when mocking data, love to have some feedback on it:)
You don't need GraphQL, then. I've used GraphQL on software with dozens of micro services. We'd have a Basket service with a list of Products ID's inside, and for each product in order to render it we'd need a new GET request. Sometimes you'd need 30 to 50 HTTP requests to render 1 page. GraphQL concatenated all those requests on the server with minimal latency. An alternative would be to have a dedicated endpoint (and not a micro services architecture) which talks to relational database, joins the tables as necessary, and delivers a perfectly tuned set of results. GraphQL is overhead. It's not the most efficient way of dealing with data, not by a long shot. But it makes some architectural choices easier to deal and work with.
And db password is in the Git repo. And I can't overwrite the onSubmit of a form, it just throws it to the server. And you can't get any url. So every first time load is a 404 that falls back to index.html, which then loads the page. 
Very true. It feels like a tool that's 6 months from being awesome. But it's been like that for 2 years already :D 
Which would totally work. If the previous dev understood how redux works, but he didn't so he edits the state in place in the reducers then returns the state. Preventing you from being able to rewind state. But let me ask you this, should a form have a onSubmit function that you can overwrite, or should it fire a generic form submitted redux action? In the old devs mind you never return the value of a function call. Instead every function ends with a redux action. Even state that has no reason to leave a component, like drawer or dropdown open. 
Which would work really well. But in this app the previous dev edits redux in place. So you can't step through the history. 
I had a dev in my team at some point swearing up and down and making a fuss that a `mouseover` hover style change should absolutely be an action/reducer and Redux state. &gt; "IF YOU USE REDUX YOU SHOULD USE IT!" – Confused developer When I explained to him that CSS is responsible for styling and can do it with a `:hover` he still disagreed. Then there was an accordion thing. You'd have an active item that didn't need to persist at all. Local state was perfect. He insisted in storing it in Redux. Not just for one product but every single product's accordion view's chosen item was stored in Redux. During stress testing the Redux store grew out of control really fast. He stored *everything* in Redux. You absolutely do NOT store everything in Redux. You should ABSOLUTELY use component state for temporary things.
he just mutates the reducer state and returns it? that's a yikes from me dawg as to the form thing I don't really know; I do the former - maybe some people generalize form submissions in a smarter way and reap some kind of benefit, it's probably contextual and yeah I agree that drawer/dropdown/similar things mostly don't need to be redux'd, but there are arguments for why it should be done (not that I agree with them) - it could be a convention thing to make state very explicit everywhere to make an application very ideomatic. My personal philosophy is just do it locally by default unless it's related to API data or I have a hunch it will need to be shared/raised later. but the reducer thing makes me feel like you just inherited a pile of shit, you have my sympathy &amp;#x200B; &amp;#x200B;
GraphQL does *not* make sense for the traditional monolithic enterprise application; don't confuse your (admittedly large) corner of the software engineering world with the whole. GraphQL makes sense if you have a complex data model in the server, and a ton of clients that want to query different parts of it in a performant manner. It's the SQL equivalent. Yes, you would need a ground-app rewrite if you were to migrate to it, and I would laugh in your face and reject it if you came to me with a proposal like that for an existing application.
Funny how Netflix them self used to have a competing library to GraphQL, [Falcor](https://github.com/Netflix/falcor), which seems to have been put to rest. Guess having two so similar library's isn't worth it, when the other has such a grasp on the community. Glad to see more and more joining in hopes to push GraphQL forward!
Rather than 'I think it should be working' ...you should test things you try to fix. You know...to make sure you fixed them.
I must admit, I hate TS with a passion and I wish it would not exist. At the same time I love it when it's been setup the right way. And I'm fully aware that's subjective. Things I've seen when working in Typescript teams: 1. Typescript devs stop adding human readable comments to their code; 2. Coding conventions disappear entirely. Because TS will tell you if `user` is an object, an identifier, or a user name; 3. It's either too strict (nothing can be `any` and everything takes way too much time to setup) or too loose (`any` is allowed and you'll notice that devs are lazy people by nature: everything becomes `any`). Instead of TS I always prefer: 1. Coding conventions: `user` is an object, `userName` is a string, `userId` is whatever identifier you use in your software; 2. Use JSDOC religiously. Since TS still requires JSDOC in order to show human readable comments you might as well type your params and type the returns of your functions in JSDOC to begin with. Keep your JS as vanilla as possible; 3. JSDOC is considered a progressive enhancement. You'd add comments that make sense: describe the why, not the how (the code **is** the how) and if you want to make often used classes/functions/methods/etc. more developer friendly, you could choose to strong-type them. &gt; "But what if you need to provide a `userId` but you send a `user` object instead? Then you're an idiot developer who can't understand basic English, and you'll see your code fail right in front of you anyway. &gt; "But what if you need to refactor things?" Refactoring vanilla JS has absolutely never been an issue for me. TS improves absolutely nothing for me. And I've worked dozens of projects, from startup to corporate, small to humongous... TS has always been a mistake that developers came to regret. The teams I've been in that all eagerly added TS to their projects; most would describe it as something a "real developer" would like. Because it looks so nice and sophisticated. Six months later they'd all leave and reluctantly tell me "never again". Well, all the front-end developers anyway. The back-end boys who love Java and .Net all seem to embrace it. And when that happens, whoa boy, then your front-end starts to become a big `&lt;div&gt;` soup where "accessibility" doesn't exist. Buttons are links, links are buttons, headers are all the same, and the CSS turned sour months ago. Taking up TS into your project is like having a baby. It's not like you can easily get rid of it. You're committed to something that you chose to get yourself into. Stockholm Syndrome is a real thing. That said, there is a great golden middle ground way of implementing and working with TS. In my opinion TS shines bright and beautiful if it's 100% fully optional ALWAYS. And when you choose to use it, you can't use `any`. None of the projects I've worked on had it set up like that.
Put to REST
I don't have a good answer, but I'm wondering why you'd prefer a library over just writing this yourself. How complex is the use case you envision? &amp;#x200B;
There's a ton of libs that can do this. Try searching for json schema.
I could build this my self, but I would prefer if there is an existing well tested solution. There are a lot of places in my app where I do this, usually before I send some data to an API. 
At least in the space I work in (ERP systems), I think you’d be surprised how necessary this sort of technology is becoming. Back when I started my career there was this big push to get all business processes under a single umbrella that was an ERP system. The problem was that these systems would be really good at one thing (say production scheduling) but half assed at the things they bolted on to get everything under their umbrella (CRM, payroll, etc). So over the past decade or so we’ve seen this shift to supplement that ERP with best-of-breed bolt-ons - think like adding Salesforce to SAP. When a bunch of these bolt-ons are added you frequently end up with this complex net of API calls you need to join together to get the whole story and it comes with the exact same issues Netflix describes here - payload bloat, nasty code, etc. 
Well that is most certainly true 
take a look at: http://api.jquery.com/insertafter/
not opening shows # This site can’t be reached
Testing timezones isn't the easiest thing in the world though :)
...uh...and why?
Works for me. Maybe try through [https](https://api.jquery.com/insertafter/)?
Awesome, awesome, awesome feedback. Yes! Tests! I live and die by tests at work but, for some reason, here I am breaking my own rules when I write code by myself. It's not cool. I'll drop the I for interface. Here's the (weak) story behind that: I'm new to TypeScript with React and added TSLint to guide me into the transition. The I rule was on by default. This led me to think that I was used in the TSReact world by default (I know it's looked down upon in React). I guess I was wrong. With respect to the `/pages`, I'm not in love with it either (though I do not really hate it). However, Next.js _is_ pretty magical in that any components in my `/pages` folder is part of a route. So, for example, if I create `reddit.jsx` in my `/pages` folder, that route is added. It's pretty cool stuff. Thanks so much for the review! Any way I can return the favor?
I'm disappointed that HTTP/2 isn't used to solve these kinds of problems. Just use push to send multiple responses for one request that will all the data points you'd be aggregating with GraphQL.
From the article it sounds like they didn't migrate to a Graph DB, they just wrapped their existing REST APIs using GraphQL. It is all about making it easier for the front end to get the exact data it needs without worrying about how.
But GraphQL is mostly used with relational databases. There is nothing to change at database level. 
For simple caching layer to fix selfish resolvers, wonder if they used dataloaders or their own implementation. Also curious whether they used Apollo or not.
Neither jquery nor doing this this stuff with the dom api is advisable, you just get yourself into a mess, mixing state into dom nodes is a recipe for disaster. In all of the modern frameworks your view is just a representation of state, and if state changes, so does the view. It makes such things trivial: https://codesandbox.io/embed/74z50r626
The DOM doesn't repaint until the JS finishes running. 
I don't know if it's viable to call creation of a generator a different way to create a function. Since it doesn't really create a function, it creates a generator - similar to a function, but not the same thing.
It doesn't run first. A browser would not repaint the document straight away. It would update the style internally and continue executing your code.
thank you!
thank you!
This post appears absolute in what its covering: THE 7 ways... when there are a number of kinds of functions not covered. It also gets a little hard to quantify when considering the kinds of modifiers available for many of them (async etc). I'll try to see what I can come up with for variations: // function declaration [async] function [*] &lt;name&gt; () {} // function expression // (in expression context) [async] function [*] [name] () {} // arrow function // (generator [*] stage 1) [async] () =&gt; [*] {} // object initializer shorthand { [async] [get] [set] [*] &lt;name&gt; () {} } // function constructor Function() new Function() GeneratorFunction() new GeneratorFunction() AsyncFunction() new AsyncFunction() // class syntax // (decorator stage 2) [@decorator] class [name] [extends &lt;expression&gt;] { [constructor () {}] } // class method // (decorator stage 2) // (private [#] stage 3) class { [@decorator] [static] [async] [get] [set] [*] [#]&lt;name&gt; () {} } _Note: not all the combinations of identifiers work together, for example `get` and `set` would not be used for the same definition._ Turns out I came up with 7 too :D, just a different kind of 7 from the OP. Worthy mentions: * `bind()` creates a new function from an existing function with unique behaviors for context * `eval()` can create functions from strings, though through strings using the previously mentioned syntaxes
I architected a fairly large and high-traffic app which pushes (almost) all of the State into Redux. We did this for a couple of reasons: 1. A single source of truth. If something happened, there is an associated action. Any developer can trace the chain of actions and make a change, add a feature, fix a bug. 2. Separating our business logic from the app UI. This app is consumed from a larger app as an npm module. That larger app contains business logic, services, etc. Th Redux app doesn’t know anything about analytics, authentication, A/B testing, etc, but, since everything is managed in Redux and everything fires actions, we can use Redux middleware FROM THE LARGER APP to connect actions to business logic and analytics and testing etc. It has worked out quite well for us. Far better than changing globals. 
I architected a fairly large and high-traffic app which pushes (almost) all of the State into Redux. We did this for a couple of reasons: 1. A single source of truth. If something happened, there is an associated action. Any developer can trace the chain of actions and make a change, add a feature, fix a bug. 2. Separating our business logic from the app UI. This app is consumed from a larger app as an npm module. That larger app contains business logic, services, etc. Th Redux app doesn’t know anything about analytics, authentication, A/B testing, etc, but, since everything is managed in Redux and everything fires actions, we can use Redux middleware FROM THE LARGER APP to connect actions to business logic and analytics and testing etc. It has worked out quite well for us. Far better than changing globals. 
Its an optimization. Touching the DOM is "expensive" so the browser batches all potential changes until next "tick". If you want to force it, you can hack it like this: function test2() { document.body.style.backgroundColor = "red" setTimeout(() =&gt; {alert('Hello World 2')},0) }
That's integrating multiple systems though, you'd have that issue whether you were doing graphql or not. In fact, graphql would probably give you benefits right out of the door since you can just hit the APIs you need instead of having to hit them all for every request. 
Basically you have to do all that yourself. It's essentially json-rpc with a standard filtering API that you use to build all the filtering and data gathering yourself. It's worth it if your'e facebook and need to cut requests down to the bare minimum, but for 99% of people it's going to be pre-mature optimization. 
There is [joi](https://github.com/hapijs/joi) from hapi js, can be used independently, very mature and custom rules can implemented. From your example it looks like you may need this on the browser, I would not recommend joi for that, as it is really big in size
add the following in the scripts of your package.json: "version": "echo \"$npm_package_version\"", then call with: npm run --silent version this is all possible because running npm provides a lot of environment gleaned from the package.json 
Works for me.
thanks, that's exactly what I need!
Wow, this is the opposite of my experience on every level. &gt; Then you're an idiot developer who can't understand basic English, and you'll see your code fail right in front of you anyway. Wait...the developer is an idiot for not knowing what type of parameter they're supposed to pass in based on naming conventions? And you say you've worked on large, long-lived codebases? &gt; Refactoring vanilla JS has absolutely never been an issue for me. TS improves absolutely nothing for me. And I've worked dozens of projects, from startup to corporate, small to humongous... TS has always been a mistake that developers came to regret. The teams I've been in that all eagerly added TS to their projects; most would describe it as something a "real developer" would like. Because it looks so nice and sophisticated. Six months later they'd all leave and reluctantly tell me "never again". On all three companies I've worked at, TypeScript became unanimously treated as indispensable, with many devs saying they wouldn't go back to vanilla JS. I don't think it was stockholm syndrome, it's simply not wanting to give up the productivity boost. &gt; That said, there is a great golden middle ground way of implementing and working with TS. In my opinion TS shines bright and beautiful if it's 100% fully optional ALWAYS. And when you choose to use it, you can't use any. This is actually the worst way to use TypeScript IMO - it ensures that you keep all the difficult-to-maintain parts of JavaScript. TypeScript works best when it can infer the types of anything, not just small portions of the codebase. TypeScript with full strict settings (noImplicitAny, strictNullChecks) is how you get the highest possible benefit.
This guy writes bug free code.
https://github.com/epoberezkin/ajv
No one does, thats my point really.
&gt; Wait...the developer is an idiot for not knowing what type of parameter they're supposed to pass in based on naming conventions? Bingo. &gt; And you say you've worked on large, long-lived codebases? Yes. What's your point? Are you the type who sees `userName` and thinks: "Hmm that might be a boolean..."? Are you going to argue that naming conventions are not sensible? &gt; On all three companies I've worked at, TypeScript became unanimously treated as indispensable, with many devs saying they wouldn't go back to vanilla JS. I don't think it was stockholm syndrome, it's simply not wanting to give up the productivity boost. And all the companies I've worked for everyone came to regret it because it was absolutely not a productivity boost. Not even close. I ran tests where TS implementations sometimes took 3 times longer than not using TS. It's a humongous PITA. &gt; This is actually the worst way to use TypeScript IMO - it ensures that you keep all the difficult-to-maintain parts of JavaScript. TypeScript works best when it can infer the types of anything, not just small portions of the codebase. TypeScript with full strict settings (noImplicitAny, strictNullChecks) is how you get the highest possible benefit. And that's exactly where I'd slowly back off and leave. It's too much work and I fail to see *any benefit at all*. And I'm 100% serious. I've worked big projects with and without TS. It was always far (far!) superior without TS. I really don't get the charm of it.
"Our learnings"...
Hi /u/sandy_patel, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
In C, there's JavaScriptCore. If you run macOS, you can find the JavaScriptCore repl at /System/Library/Frameworks/JavaScriptCore.framework/Resources/jsc. &amp;#x200B; [Planck](https://github.com/planck-repl/planck) is a ClojureScript repl and script interpreter for Linux and macOS. It's built on top of JavaScriptCore.
I think that was exactly what he was getting at in response to the contrarian view -- that although Netflix's use cases are totally different, the benefits to the space he works in would be very similar.
a super easy way to make all your state changes immutable - [install immer](https://github.com/mweststrate/immer), and wrap the contents of every reducer with `produce`. 
What about a language being statically typed created additional complications? (Sorry -- only surface level knowledge of GraphQL on my end)
I broke down and followed your method. I could not find a way to match everything prettier did.
No explanation of why? I'm curious why'd they'd drop it like that.
Glad it worked out in the end :)
It bugs me that CRA is considered "vanilla".
Would this work? [https://gist.github.com/ZodiacHammer/8d5161b980021716f634cfe3eb6f9dfc/revisions](https://gist.github.com/ZodiacHammer/8d5161b980021716f634cfe3eb6f9dfc/revisions) &amp;#x200B;
Huh, interesting. I'm not sure how safe this is... Usually, when I build serverless apps out on AWS I use api gateway. I'm not exactly sure what the serverless api they're using here entails, but as long as it has good enough template mapping, I dont see any risk towards security. 
Serverless? Wanna bet?
Small nit: the bindings `GeneratorFunction` and `AsyncFunction` don't actually exist. You can only get a reference to them by grabbing the constructor of the prototype of said functions. There are also a few more obscure ways to create functions through various APIs: - via `WebAssembly.instantiate` - via `new Proxy(target, {apply() {}})` - via `Object.create(fn)` 
No one wants to bet with a pedant
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/u_broughtdought] [Change My View: If you put all of your application state into redux, you might as well use globals](https://www.reddit.com/r/u_broughtdought/comments/a5w5l0/change_my_view_if_you_put_all_of_your_application/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
strict mode twice is called TypeScript 😉
the documentation is here, i've never used it before but it doesn't look like document.createElement does anything https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/js_api_reference.pdf 
Thanks man, what would you do to change this code for making it work in pdf?
I have no idea, i've never touched this API before
You're on a programming forum getting defensive about your porn habit. It's impossible to be overly judgmental toward you.
Please stop spamming your own low quality articles please.
I don't get my porn from Reddit, personally. Seems kind of a weird thing to be against it this much tho.
Thats the normal/correct way to do it. A database is not to store big binary files :-)
Seems more weird to get offended by even casual dissent toward ubiquitous porn.
I think this is really only true when looking exclusively at the node ecosystem. 
I too write software for a living. Have been for 6 years. This, however, is not our living. It’s a voluntary thing we do on our spare time, after our daily work, and instead of spending time with family and friends. I’m sorry you had to wait a few hours for the article we posted, and I’ll make sure to write a few tests the next time I try to tackle this. If you feel up for the challenge, we sure could use your 20 years of experience, and would love a pull request helping us out! The code is available on github.com/selbekk/react-christmas. Thanks in advance ❤️
It was a criticism...of course I understand time constraints ...everyone apparently got up in a tizzy when I suggested testing stuff that gets deployed. Thats reddit I guess...
 setInterval(() =&gt; { getRandomInt(0,999) }, 10000);
&gt;Technically, I would like to do a sort of basic counter to simulate the number of people currently taking plane. So I was thinking about doing: const currentFlyers = setInterval((){ getRandomInt(480000,500000) }, 10000); and then displaying it in React Jsx with: &lt;h4&gt;There are {currentFlyers} in the sky&lt;/h4&gt; But it doesn't work. How would you display such a value?
AFAIK. u need to update the {currentFlyers} value within the function being called by setInterval 
 &lt;h4&gt;There are &lt;span id="currentFlyers"&gt;0&lt;/span&gt; in the sky&lt;/h4&gt; let element = document.getElementById("currentFlyers"); setInterval(() =&gt; { element.innerHTML = getRandomInt(480000,500000); }, 10000); 
practice with objects, try to store and pass it between functions
It is through AWS API Gateway, when the serverless.yml defined event is http. If the author were to go all the way out to apply the so-called "infrastructure as code", they could actually achieve most of the orchestration (not just API Gateway definition) through that one serverless.yml file.
If it;s react you should use state or state with state hooks to store those values.
&gt;Thanks. Eventually, I had to start the setInterval inside another fonction, comparable to window.onload in React. It works, thanks for your help ;)!
Start building stuff. You'll learn far more by doing then you will studying 
Thx!
Just a quick react example. I don't know what js features are usually used nowadays, so this might be kinda old school. constructor() { this.state = { currentFlyers: 0 } } componentDidMount() { setInterval(() =&gt; { const currentFlyers = this.getRandomInt(MAX, MIN) this.setState({ currentFlyers }) }, 10000); } getRandomInt(min, max) { min = Math.ceil(min); max = Math.floor(max); return Math.floor(Math.random() * (max - min)) + min; } render() { return &lt;h4&gt;There are {this.state.currentFlyers} in the sky&lt;/h4&gt; }
same, react is anything BUT vanilla.
If you're using React, you can simply call `setState` inside of your `setInterval` callback. If you use an arrow function, you should have no issues using `this`. `setInterval`'s return value is not the response of the function call but rather an `intervalID` which can be used to cancel the interval via `clearInterval`.
Ask yourself the question: Where do I want to end up? What sort of job do I want? ... Then if you post again with a more specific aim I'm sure there are people who work in these area who are happy to give you a hand :)
https://github.com/tylerxwright/amistillalive
Well I think that would be front end. Honestly that wasn't my first option, but there is a bigger chance to get a job in my country. I also have an average knowledge on HTML,CSS
I’d say there are 3 ways you can progress with. 1st is html, css and all around it like scss, temlate engines etc. 2nd is various JS frameworks like Angular/React/Vue. Pick the one you like and which has more career opportunities for you. The last one is more abstract like algorithms, patterns, other math and general knowledge of what your system/environment is capable of, like how things work under the hood. while first two is the way to get paid quicker, the last one is the one that make you stand out in your field. Hope it helps. 
Author confuses REST with web apis in general and apparently has never heard of keep-alive.
I Scheit tiny cuum pockets into your ashole when I fuuks you in the coont with my hotdog hammer while I slaps you, you tinsey bltch.
To add, I switch between Windows, Mac and Linux, source maps didn't work on Windows, tried a 2nd Windows PC, it worked. Confused, reinstalled node libs, compared versions, still didn't work with the exact versions on each platform, fiddled with network settings to access the faulty Windows machine, it worked for Mac, Linux and Windows#2, tried Incognito mode, didn't work either, disabled Extension, it made no difference. At last I tried a different Chrome user, there it worked. Takeaway: Incognito doesn't provide a clean slate.
The annoying this is I take a time as input, I need to use javascript to convert the time from a string to a date since it's included in the library. I've decided to go with ajax post request and then just clear the input elements from the page and load in new objects​ with javascript. Although the freemarker loop logic might be better for functionality.
&gt; [http://localhost:3000/dashboard#menu-toggle](http://localhost:3000/dashboard#menu-toggle) Dude, why are doing this if you don't even know the basics?
Thanks for a tip 👍
Thank you!
Ahh. That makes sense. I didn't see it explicitly mentioned, so I was a bit confused... Thanks for clearing that up!
@[nutyourself](https://www.reddit.com/user/nutyourself) thanks for the info
Hint: hover over the little blue "i" icon there ;) 
looks right to me.
setInterval(funtion(){ // Can send parameters function(param1, param2); }, 1000);
I’m assuming you’re looking for the time to change when there is... like a change made on an input field or something and in that case you’re going to need to bind that input field to an event like onblur and then update your times. 
Look at the first drop-down of the first link, specifically looking at the "3" in that.
yes, the splice command returned a 3. Since it was a single command the console displayed the returned result (often undefined). When you put in a bunch of commands at once, it displayed the result of the last command (plus your console.log statements which return undefined in single command mode). so as a group you get the 5 element then the 4 element then "undefined" and as individual statements you get a lot of undefined and a 3 (returned from splice). This is more about the console than javascript, your array is indeed \[1,2,4,5\] at the end either way.
Yeah, this is the trick here. In your console, that little arrow to expand your array and view it is evaluated when you click the arrow. So your console.log is correct, but viewing the object after the fact with the arrow can only show you what the object looks like "now" I guess. 
I think OP was concerned that the "original" logging of the array says length 4 even though he printed it before splicing. 
Ah, thx, yah it is showing the current value when you hit the pulldown aparently.
JavaScript does have a string building facility using the backticks `\`\``.
hmm, I look into that, thank you. accordingly, building the string and writing at once should be much more efficient than manipulating the dom, does that sound right?
Hmm, yes that sounds about right. To make this much more clear. 1. [https://prnt.sc/lupjs2](https://prnt.sc/lupjs2) 2. [https://prnt.sc/lupjy9](https://prnt.sc/lupjy9) In the first screenshot I entered the page and the time was calculated automatically for that item, but then while being on that page I have changed the fields values but the time didn't update to the correct value - and this is what I want to do now. 
use `JSON.parse()`, then sort the data however it needs to be sorted, then create a table row for each entry and add them to a table's inners document.getElementById("tableId").innerHTML = JSON .parse(jsonData) .sort(/*compare function*/) .reduce((accumulator, entry) =&gt; ( accumulator + ` &lt;tr&gt; &lt;td&gt;${entry.col1}&lt;/td&gt; &lt;td&gt;${entry.col2}&lt;/td&gt; &lt;td&gt;${entry.col3}&lt;/td&gt; &lt;/tr&gt;`)); 
Wow. Thank you so much
Yes, if you only do it once. Setting innerHTML is better than document.write, though.
Boooooooo
**HTML :** &lt;output id="random-number-output"&gt;&lt;/output&gt; **Javascript:** function updateOutputRandomly(){ const output = document.getElementById("random-number-output"); const randomNo = getRandomInt(480000,500000); output.textContent = randomNo; } setInterval(updateOutputRandomly, 10000); Bish bash bosh.
Keep in mind this won’t work in internet explorer, which an unfortunate percentage of people still use.
The only thing that won't work in IE afaik is the string literal and the arrow function. You can change this by doing the following: document.getElementById("tableId").innerHTML = JSON .parse(jsonData) // assuming the json data is an array .sort(/*compare function*/) .reduce(function(accumulator, entry) { return ( accumulator +"&lt;tr&gt;" + "&lt;td&gt;" + entry.col1 + "&lt;/td&gt;" + "&lt;td&gt;" + entry.col2 + "&lt;/td&gt;" + "&lt;td&gt;" + entry.col3 + "&lt;/td&gt;" + "&lt;/tr&gt;" ); }); &amp;#x200B;
Thinking of this now. Should I get the input values when entering the page and refresh the time everytime the input values change? Is this the correct way, and how do I do that hehe.
Actually, no. The innerHTML API may seem faster than DOM API if you benchmark only js time in Chrome, but that's because Chrome now does repainting in a different thread. innerHTML is actually about twice as slow as the DOM API if you factor in repaint time. There's a very good reason every rendering library (React, Vue, Angular) uses the DOM API for DOM creation.
I’ll keep this very short: Context is stored because whatever values are passed as args or instance variables stored in func need to be accessed, they require the context. The function returning a function is called currying. This is basically wrapping a function in a function. So for example: ``` const sum = function(a) { return function(b) { return a + b; } } const addFive = sum(5) const fivePlusFive = addFive(5) // returns 10 ``` If you click a button N times, the debounce function will be called AFTER the Nth click. 
Takeaway from this post: &gt; In some cases, it might make the overall readability of code much worse. What’s more, if you’re working in a team, you have to keep in mind that such style of writing code might be unfamiliar to others. It doesn't really say why it's better, objectively, it just makes the repeated claim that it's "better". The readability issue and onboarding/hiring for employees who have better things to do is what makes this style DOA.
Nice thread
Is this a joke?
Nope. Just learning 
Just want to double check the “have to do it with vanilla JS” requirement.... why? I recommend looking at React and Webpack. The tl;dr is that you have source code in es2016 (more modern JavaScript) and it runs through a build process that ultimately spits out a single app.js file, which you then include in your HTML. Pretty easy. Might sound like overkill for a small project, but the next person to maintain it will probably thank you. If you’re absolutely set on using vanilla JS, use `fetch` to get the data (if you’re targeting modern browsers. Otherwise use XMLHttpRequest (ignore the XML part. It just makes an http request)), `JSON.parse` to convert the JSON into a real JS object, then use `document.createElement` and `.appendChild` to put HTML elements into the DOM
Here is the onblur event https://www.w3schools.com/jsref/event_onblur.asp Look at the examples, what you want is in there with targeting DOM elements and binding to that event listener 
If you are able to use it, http://slickgrid.net is a very nice tool with a vanilla release.
&gt; “have to do it with vanilla JS” requirement.... why? I agree that React is a perfect fit for the description of the task, so my best guess is that this requirement is supposed to challenge the user to implement something close to React's createElement function, demonstrating good understanding of both javascript and React.
put your code in a code block &amp;#x200B;
thank you so much for all this, a lot of great info in this thread to study. i'm not sure myself why the insistence on vanilla, i just have to do it their way
It's safer and easier to do this with the help of a (small) library like [hyperscript](https://github.com/hyperhype/hyperscript). It's much easier to safely output data and far easier to setup event handlers for buttons, inputs, etc. Bonus: once you're familiar with Hyperscript you're halfway to understanding React and a bunch of other modern front-end libs.
1. Every function declared with the `function` keyword will have their own `this` and `arguments`. These will supercede closures with the same name. By assigning them to `context` and `args` they can be referenced by nested functions. 2. The point of `apply` is to explicitly set the `this` for a function, and to use an array for the arguments. In this case, it is being used to call `func` the exact same way that the wrapping anonymous function was called. 3. The function should not be called more than once per `wait` period. The setTimeout generates a `timeout` id, and the function will not be called as long as this id is set. After the wait period, the id is cleared with `timeout = null`. 4. Correct. If `immediate` is falsey, then the debounced function will not be called until after you stop clicking the button. Each click will reset the wait timer. 5. The last two lines are synchronous, so the order doesn't matter much in this case. The timeout will get added to the event loop, then `func` will be called immediately. You could do it the other way with much the same effect. _However_ if you change the order and `func` threw an error, you would never save the timeout id. You would be able to hammer the debounced function over and over again, stacking up errors. _Learning JS Basics:_ First of all, this is _not_ a simple function. It utilizes a number of esoteric parts of JS syntax you are unlikely to encounter day to day. I had to look up some docs and do some hacking in the console before I fully grokked everything that is happening here. Good on you for trying to pull it apart. Second, pick a project. I find learning in a vacuum to be almost impossible. Think up something simple you want to build, and build it with vanilla JS. Alternatively, find an open-source project to contribute to, look for a "good first issue" and try to submit a PR. Even just doing some toy problems from CodeWars or a similar site will help. Give yourself a reason to code, and then learn by coding.
You probably won't need RxJS
Http://www.stackoverflow.com You will get much better response there.
Paragraphs aren’t valid children of tables, so most modern browsers will push them outside of the table. Also with jQuery, appending to the DOM is expensive. You should append outside of your loops. If you post the dataset, I could probably give a more helpful answer.
&gt; 1)Why need to store this in the context variable, if it's a closure doesn't it has access to all variables of the outer function? Because its "later" that needs access to it, and "later" will have its own "this" otherwise. We need "return function()"s "this". &gt; I dont understasnd for what reason it's called with Apply method, why does it have to has access to arguments of the outermost function It's not the argument of the outer-most function, it's argument of the 2nd funciton. Look at this: function test(argument1, argument2) { } const myDebounced = _.debounce(test, 250); Now, `function test(argument1, argument2) {}` is `func` in your code. An `myDebounced` is `return function()` of your code. When I do `myDebounced('test1', 'test2')` it sets (int your code) `arguments = ['test1', 'test2']`, now doing `func.apply(context, args)` is same as doing `test('test1', 'test2');` &gt; why if it's not gone use them, setTimeout must, ie, have access to "wait" argument. Not clear what you're asking here, setTimeout does use wait in your example. Unless you mean "why does it have to wait if wait = 0", ... Check out https://stackoverflow.com/questions/9083594/call-settimeout-without-delay to understand why you *might* want to do `setTimeout(doStuff, 0)` &gt; IF i click a button with an event listener attached ... Correct! &gt; if immediate the function wont be triggered, but anyway the setTimeout would have waited "wait" miliseconds, so what's the point? &gt; 5) I understand that there's the argument "immediate" that will trigger the function on the leading edge... Those are basically the same question. Sadly I got nothing here :( 
change for (var j = 0; j &lt; standings[0].table.length; j++) { to for (var j = 0; j &lt; standings[i].table.length; j++) { // standings[0] -&gt; standings[i] &amp;#x200B;
FYI, currying is _not_ a function returning a function. The term you are looking for is perhaps "higher order function". Currying is a specific type of higher order function, where the arguments of a function are spread out over multiple function calls, one argument per call. const curriedAdd = function(x) { return function(y) { return x + y; }; }; curriedAdd(2)(3); // 5 // Higher-order, but NOT curried const delayedAdder = function(wait) { return function(x, y) { setTimeout(function() { console.log(x + y); }, wait); } }; const delayedAdd = delayedAdder(1000); delayedAdd(2, 3); // 5 (after 1000ms) Also, the placement of the `if` matters if `func` throws an error.
&gt; 1)Why need to store this in the context variable, if it's a closure doesn't it has access to all variables of the outer function? “this” is a special keyword which refers to the context/environment of a particular object, in this case, the function being returned. Definitely check out JS resources for more information it. It is important to understand. One of the critical parts is how using function(){} sets ‘this’. &gt; I dont understasnd for what reason it's called with Apply method, why does it have to has access to arguments of the outermost function, why if it's not gone use them, setTimeout must, ie, have access to "wait" argument. This is related to the previous question. It’s not getting the arguments of the outermost function, but the arguments given when the function is called. You are returning a function to be used. That’s why the context and arguments are being captured, you don’t know them ahead of time. I’m not sure what you mean with that last statement. The setTimeout will use wait to know how long to delay. &gt; another part i dont understand, if immediate the function wont be triggered, but anyway the setTimeout would have waited "wait" miliseconds, so what's the point? No that’s not true. If immediate is true, it will be triggered. Look at callNow. It’s saying if timeout is null (aka later is now) and immediate is set to true, run immediately. That if check in the later function is testing to see if the function has been called once already. If immediate is true, then it has. If immediate is false, then it should have waited. &gt; 4) IF i click a button with an event listener attached to it and this debounce function as it callback, if i click it multiple times before the "wait" the time out will be reseted because the "clearTimeout", right? Yes. &gt; 5) I understand that there's the argument "immediate" that will trigger the function on the leading edge, instead of the trailing, however shouldn't that if be placed before the timeout in order to be executed immediatly? No, it’s done that way on purpose for callNow to work. Notice that timeout appears after, right?That means the !timeout condition will be true when callNow is set, since it is falsy (undefined). &gt; About learning JS Basics: ​ Some time ago i took the decition not to jump in any framework until i have a deep understanding of js, so i will see what problems framework solve. And understand some "tricky" topics like this, asynchronous JS, promises, generators, etc. But it's being difficult to keep my promise, i feel stupid wasting an entire day trying to understand a simple debounce function. Has anyone felt this way? Dude do not sweat it at all. This function is written in a very tricky, and honestly, terrible way. It is practically designed to put a huge and unnecessary cognitive burden on you. Personally, I think the naming is absolutely horrid. As an example, if I saw a function named debounce, there is no way in hell I could figure out what it was doing without reading the code. Later is not as horrible, callNow is much better. Naming is one of the trickiest aspects of programming though. My second criticism is the use of these negative conditions, like !immediate. We have a much easier time with positives like: if (immediate). It would be even better as isImmediate, because it clues you into the fact that you’re dealing with a boolean straight away. You’re absolutely on the right track thinking that you should learn the foundations before the frameworks. I’d recommend the “You Don’t Know JS” series, or [speakingJS](http://speakingjs.com/), followed by [exploringJS (ES6+)](http://exploringjs.com/). And yes we do all feel that way. The CS world is vast, and basically every time you approach a new aspect of it you are going to feel like a dummy at first. You just have to learn to be ok with that, and it will improve over time since you can relate new ideas to what you’ve learned already.
Sorry but that didn't work for me, keep getting the exact same response. Thank you.
There I uploaded an image.
I came from there xD.
forgot to mention that in my comment. But to add to this, appending to the dom with vanilla js using innerHTML is expensive, which is what I believe jquery is going here. Also that using $('#someId") in a loop is bad practice, store variables of things so you're not traversing the dom every loop looking for the same element. Also store a variable for positions in an array. Here's an example of how this could be done cleaner, I have not changes the appending method to do this all at once. function mostrarTabla8(_comp) { const standings = _comp.standings; const tableOne = $("#tablaOne"); for (var i = 0; i &lt; standings.length; i++) { const standing = standings[i]; tableOne.append("&lt;tr&gt;&lt;td colspan='7'&gt;" + standing.group + "&lt;/td&gt;&lt;/tr&gt;"); // groups A-H for (var j = 0; j &lt; standing.table.length; j++) { const table = standing.table[j]; tableOne.append("&lt;tr&gt;&lt;td&gt;" + table.position + "&lt;/td&gt;" + "&lt;td&gt;" + table.team.name + "&lt;/td&gt;" + "&lt;td&gt;" + table.points + "&lt;/td&gt;" + "&lt;td&gt;" + table.playedGames + "&lt;/td&gt;" + "&lt;td&gt;" + table.won + "&lt;/td&gt;" + "&lt;td&gt;" + table.draw + "&lt;/td&gt;" + "&lt;td&gt;" + table.lost + "&lt;/td&gt;&lt;/tr&gt;"); } } } If your interested in learning vanilla javascript function mostrarTabla8(_comp) { const standings = _comp.standings; const tableOne = document.getElementById("tablaOne"); const frag = document.createDocumentFragment(); for (var i = 0; i &lt; standings.length; i++) { const standing = standings[i]; const groupRow = document.createElement('tr'); const groupCell = groupRow.insertCell(); groupCell.setAttribute('colspan', 7); groupCell.textContent = standing.group; frag.appendChild(groupRow); for (var j = 0; j &lt; standing.table.length; j++) { const teamRow = document.createElement('tr'); teamRow.insertCell().textContent = table.position; teamRow.insertCell().textContent = table.team.name; teamRow.insertCell().textContent = table.points; teamRow.insertCell().textContent = table.playedGames; teamRow.insertCell().textContent = table.won; teamRow.insertCell().textContent = table.draw; teamRow.insertCell().textContent = table.lost; frag.appendChild(teamRow); } } tableOne.appendChild(frag); } All of this code is untested 
Why does this have a help tag? I thought you needed help.
OOpsi! Fixed.
I’m too lazy to create the dataset from your picture by hand. It looks like /u/captain_k_nuckles has a pretty good solution below. However one more tip, if you’re already getting json you might look at using something like Handlebars.js
And my favorite thing is talking about these to someone who isn't familiar with them. When I told my team "Zeit just launched Now, and you can use Next on it" they looked at me like I was having a stroke 😂
[removed]
Is that also with fixing the issue of inserting a &lt;p&gt; tag in to the table?
RemindMe! 2 days
I will be messaging you on [**2018-12-16 05:05:36 UTC**](http://www.wolframalpha.com/input/?i=2018-12-16 05:05:36 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/javascript/comments/a616eo/build_a_chat_web_app_with_private_messaging/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/javascript/comments/a616eo/build_a_chat_web_app_with_private_messaging/]%0A%0ARemindMe! 2 days) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Op said new to JS and you guys throw him into react lol
Thanks for this introduction to FP. You have explained it in very simple terms. I am reading function composition article now from your blog. Pray you start a series on FP, like novice to expert kind of.
&gt;1)Why need to store this in the context variable, if it's a closure doesn't it has access to all variables of the outer function? “this” is a special keyword which refers to the context/environment of a particular object, in this case, the function being returned. Definitely check out JS resources for more information it. It is important to understand. One of the critical parts is how using function(){} sets ‘this’ to refer to the current function's context. &gt;I dont understasnd for what reason it's called with Apply method, why does it have to has access to arguments of the outermost function, why if it's not gone use them, setTimeout must, ie, have access to "wait" argument. This is related to the previous question. It’s not getting the arguments of the outermost function, but the arguments given when the function is called. You are returning a function to be used. The context and args are being captured because each function has its own context and args, so you need to snapshot them like that if you want to use one function's properties in another. (you did in the old days anyway) This could have been avoided using an arrow function instead. I’m not sure what you mean with that last statement. The setTimeout will use wait to know how long to delay. &gt;another part i dont understand, if immediate the function wont be triggered, but anyway the setTimeout would have waited "wait" miliseconds, so what's the point? &gt; &gt;5) I understand that there's the argument "immediate" that will trigger the function on the leading edge, instead of the trailing, however shouldn't that if be placed before the timeout in order to be executed immediatly? Ok, this will be easier to explain by walking through the process. Function executes, context and args are saved for later's use. Later is defined (ignore for now). Then we set callNow to true/false depending on if immediate is set to true and timeout is defined (it's not at first). Then timeout is cleared. (to reset it if we click multiple times) Now timeout is set, and will execute based on the wait argument. Then we check if callNow is valid or not. The variable timeout was undefined, so callNow will be true if immediate is also true, since we already know the value of timeout (falsy). After the specified time, we run the later function, which resets timeout to null and runs func, but only if immediate was set to false. Why is that? Because setTimeout will always run in this code, so we need to have a test to see if it is supposed to or not. Consider the scenario where immediate is true. Well timeout is still set, and yet we are planning to call the function immediately. Should we call it twice? No, we don't want that, so we need to test for it. &gt;About learning JS Basics: &gt; &gt;Some time ago i took the decition not to jump in any framework until i have a deep understanding of js, so i will see what problems framework solve. And understand some "tricky" topics like this, asynchronous JS, promises, generators, etc. &gt; &gt;But it's being difficult to keep my promise, i feel stupid wasting an entire day trying to understand a simple debounce function. &gt; &gt;Has anyone felt this way? Dude do not sweat it at all. This function is written in a very tricky, and honestly, terrible way. It is practically designed to put a huge and unnecessary cognitive burden on you. It's mostly because it's doing things the old way (for compatibility or just because it's an old function) instead of using more modern features. (you don't need to save 'this' like that nowadays) Personally, I think the naming is not great, and the code could be structured better. As an example, if I saw a function named debounce, there is no way in hell I could figure out what it was doing without reading the code. Later is not as horrible, callNow is much better. Naming is one of the trickiest aspects of programming though. My second criticism is the use of these negative conditions, like !immediate. We have a much easier time with positives like: if (immediate). It would be even better as isImmediate, because it clues you into the fact that you’re dealing with a boolean straight away. He has no choice in this case though, due to how it was designed. You’re absolutely on the right track thinking that you should learn the foundations before the frameworks. I’d recommend the “You Don’t Know JS” series, or \[speakingJS\]([http://speakingjs.com/](http://speakingjs.com/)), followed by \[exploringJS (ES6+)\]([http://exploringjs.com/](http://exploringjs.com/)). And yes, ALL of us have wasted a day on a tricky function. I felt stupid just the other day while working on a problem from the Structure and Interpretation of Computer Programs book that should have been simple, but due to a hard to find bug it took me hours instead of minutes. The CS world is vast, and basically every time you approach a new aspect of it you are going to feel like a dummy at first. You just have to learn to be ok with that, and it will improve over time since you can relate new ideas to what you’ve learned already. 
Splice doesn't return the modified array, it returns an array with the deleted items and modifies the input array. You'll need to break your code up into multiple lines due to that: y = x.split(' '); y.splice(0, 0, '('); 
RemindMe! 2h
RemindMe! 2 hours
Splice works in-place. Replace `console.log(y)` with `console.log(x)` and you'll see that it worked.
RemindMe! 6 days 
Ok, by in place, you mean I don't have to initiate it to a separate variable? It mutates the original array? 
Perfect. This makes so much more sense. FCC is a great resource, but they leave A LOT of the details out/don't drill them in enough, IMO.
That's correct.
Perfect, thank you!
Nope.
That's correct. If you didn't care about the original array, you could have done: ``` x = x.split(' '); x.splice(0, 0, '('); ```
I don't know what FCC is, but MDN is my go-to. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice
Free Code Camp
Yes, I was thinking in context of a U.S. phone number validator (I know a regex could accomplish this in 2 lines.). Free code camp challenge (which I've passed) says this cannot be done without regular expressions, but I want to do it without regular expressions for whatever reasons.
RemindMe! 8 days
Remind me! 7 days.
Remind me! 7 days.
I am working through javascript.info right now and am learning a lot. It isn't interactive like fcc but I like using the dev tools (console.table ftw).
I agree. Anytime you have an issue check mdn.
Watch Kyle Simpsons 'Rethinking Asynchronous Programming' course on PluralSight ( Get a free 3 month trial from visual studio community ). Or on Frontend Masters. Its around ~8 hours including problems. Kyle Simpson is the author of "You don't know JS" series that many people recommend. He explains JavaScript like no one else. Practical explanations using problems then a sprinkle of theory to cap your understanding off. I recommend reading the book series as well for other JS basics and more advanced concepts. My JS knowledge was lacking until I read through those and watched the course on async. The books you can read in around ~8-12 hours. So your looking at around 20 hours to up your JavaScript game to a great level.
+1 for joi, I've used it in many projects both on backend and frontend.
Hey, not a direct reply to your function question but in regards to learning JS basics, I am in the exact same boat! I'm spending weeks on Javascript and I feel like I am wasting time because not many people use vanilla JS anymore. However, I really wanted to have a deep understanding of JS and not be that person who cannot debug something due to me lacking JS fundamentals once I go into frameworks. I also thought that front-end interviews would ask the nitty gritty / terminology anyway so it pays to have a thorough understanding of Javascript first. I that person that needs to know why something works before going further and going into React or something before JS didn't make sense to me. However, after talking to my friends in industry, I realised the ones who use React and other frameworks pretty much know nothing about JS and were all forced to learn it on the fly. In industry, you'll never have time to fully master a language and you'll be forced to learn things without knowing the fundamentals. I think if you have the time to gain a deep understanding of JS (if you're on holidays or something), it'll definitely be worth it and make your life a lot easier once you go into frameworks. However, if you are doing this to be industry-ready or create some awesome projects to talk about in interviews later, I've been advised to just go into React as JS is a language that takes a while to master and it will probably be more worth it to learn while doing React. The only issue is that you will probably struggle with terminology and more technical concepts - you'll still be able to build cool things though! Hope this helps and good luck my friend!
Just to encourage you maybe: many JS software engineers do not understand how throttling, debouncing, event listeners and asynchronous code truly works. In a way that's good, abstraction (via Promises, lodash, etc.) is great to solve problems, but when you need to debug something you'll need to figure out what's really happening. Also I just recently went through a battery of phone screens and on-sites with companies like Airbnb, Google, Twitter, etc. and these questions are used extensively to see if you truly understand JS. In the same vein: DOM manipulation using vanilla JS. So not only is it interesting and applicable, it's also very useful for job searching. Keep at it and remember everyone sometimes gets confused about scope, references to functions, event loops, etc. They're like the pointer arithmetic of JS.
Great intro to socket.io, but for actual privacy I'd expect the messages to be encrypted end to end.
Remember that the original array IS modified, and the return value is the deleted items. For this reason, don't assign it to itself or another array unless you actually want the deleted items. "The return value is an array containing the deleted elements. If only one element is removed, an array of one element is returned. If no elements are removed, an empty array is returned."
I also like devdocs.io which is a really cool webapp for viewing documentations (including JS/DOM/HTML from MDN)
"You don't know JS"
Only have one, but I really like it https://github.com/getify/You-Dont-Know-JS
It's a bit easier to think of it in terms of text input, as a common use is to use debounce to throttle live text searches, e.g. google autocomplete. In general, it will always wait WAIT before taking action, every time you type it will reset the WAIT. That said, I think I see a bug in this code, but anyone feel free to correct me if I'm wrong, Javascript is kind of like ESL to me lately. var callNow = immediate &amp;&amp; !timeout; clearTimeout(timeout); timeout = setTimeout(later, wait); if (callNow) func.apply(context, args); On the very first run timeout == null (default value) immediate == true callNow == true &amp;&amp; !(null) == true &amp;&amp; true = (true) setup timer to call in future call it now as well Will this not cause an echo of the intial value? 
I've been a web dev for 6 years now. Mastering JS is the best thing you can do if you want to become a web dev in the modern climate. The thing about JavaScript libraries is that they can only do things that you can do in JavaScript. The more native JS you understand the easier they will be to learn and master.
Does anyone still use Object.assign()? In my code it has become pretty much obsolete with the advent of object spreading.
Like they cannot use a promises. Why make a life so hard?
Another vote for the you don’t know js series. I think there are 5 or 6 in the series. Each book is definitely worth reading 
I agree with everything everyone else has suggested. Another suggestion might be to find a use case for that debounce function, implement it as is, then work through writing your own debounce function from scratch. As previously mentioned, I have always found learning new programming languages to be more engaging while solving a real problem. And keep in mind, I've been told it takes roughly six months to become "proficient" in a new programming language. Fully immersed. My experience has been faster than that, but I've been programming professionally for over 15 years. Point is, don't be discouraged. JavaScript, in particular, has quite a few off the wall quirks to become familiar with. I do think it's valuable to learn what you can about JavaScript before diving into TypeScript (or older js supersets which compile to js). Good luck and I hope you continue to push yourself!
IMO: Don't just "keep it in mind". MDN should be your primary resource for vanilla js functions. It is the best in the biz.
Are the books good for beginners learning how to code, or just learning JS?
I don't know, but of you're using npm I think it has "npm audit" that scans for vulnerabilities (disclaimer: I'm not sure, I stumbled over it these days, while trying to fix other things)
Manipulating innerHTML should not cause repaint for elements not in the document tree (until you append them) or under display: none.
Adding event handlers will be a pain, though.
Regarding the `immediate` argument, look again - the timeout callback will not do anything, the function will be called in the `if (callNow)` block.
These things are so frustrating that I ended up using `cloneDeep` whenever something appears off in the logged object.
Some excellent explanations by other people. In instances like this, you can gain a lot of insight by stepping through the code in a debugger. I’d recommend the Chrome Dev Tools debugger. In case you’re not familiar with it, you can just drop the `debugger;` statement in your code whenever you want a break point, and then step through line by line. You can reveal what the states of the different scopes are at all the points of execution. It’s a really valuable tool for code insight.
For extra points, do have a look over DocumentFragment. Instead of appending each row line by line (which can lead to performance issues depending on the browser and the number of rows), you can create a DocumentFragment in which you append the rows and then you insert that fragment into the page. PS: Some years ago (during "jQuery era") this was a common question during interviews.
Professional JavaScript for Web Developers, 3rd Edition, by Nicholas C. Zakas. Even if the book was released a long time ago, in 2012, and it only addresses ES5, I found that it really opened up the Javascript world to me. The writing style is excellent, and the information provided sets up a healthy base for your JS knowledge. I read this book while using Anki for some concepts, in order to make use of the learning benefits provided by spaced repetition. After I read this book, I found it easy to understand more advanced works, such as the ones from the You don't know JS series or the treasure that is Eloquent Javascript. &amp;#x200B;
I would say they’re aimed at people who are ready to take a deep dive into JS. For a beginner there are much more accessible starting points.
There was a similar question yesterday: https://www.reddit.com/r/javascript/comments/a5sv5f/how_to_prepend_anything_with_jquery/ebp3jsk If this is a real world task, doing this by hand is silly. Use React. Or hyperscript or whatever. These libraries treat the view as a representation of state. If this is a test, then you'll basically end up re-writing React with createElement functions. This is also what they've done with todoMVS "vanilla": https://github.com/tastejs/todomvc/tree/gh-pages/examples/vanillajs
[Eloquent JavaScript](https://eloquentjavascript.net/) and [You Don’t Know JS](https://github.com/getify/You-Dont-Know-JS).
I went a bit overboard with this on my recent page. All html elements inserted are document.createElement(tagName) via an object that holds all tags that I need once, then when I need them they get accessed and cloned via cloneNode() and inserted via document.createFragment(). Cloning them is faster than recreating and the fragment itself adds to performance too obviously. Also having native DOM Manipulation feels a lot better than throwing concatenated strings around. Since users are recreating elements somewhat often , the browser engine adds even more to this because of internal optimizations. 
Until 10-12 years ago (maybe less) there was only *one* Javascript book that was particularly good: Flanagan's "Definitive Guide". One idea I remember getting from it and using over 15 years ago, was to pass an object as a function argument, when otherwise there would have been too many individual arguments. For the most part I've been disappointed in everything in the meantime though I haven't read nearly everything. I've scratched the surface on a couple of Zakas' books and they seem pretty good, including the one on ES6. I didn't like the one book in the "You Don't Know JS" series that I tried -- IMO he went *way* too deep into minutiae that you are almost never going to encounter in the wild.
Thanks. Can you suggest a beginner book?
Don’t know a book but I’m currently learning JavaScript from Colt Steele and its 10/10 currently recommending 
Use cases are different though
But `document.write` has more letters, and more is always better.
When you say &gt; writing a table of records to the window what do you mean _exactly_? Is this as part of an existing application? A website? A blank page? What tools, if any, are available already? If you want to avoid exposure as "a complete novice", make your solution fit into whatever you're working with.
Hi, author here. I think I'm pretty clear about advantages of pointfree style in the summary section: &gt; In general, it makes your code more concise and eliminates the boilerplate of anonymous functions. More importantly, it forces you to think about your program as a composition of small, generic building blocks (functions).
Thanks! You can take a look [here](https://codewithstyle.info/functional-programming/) for the full list of topics related to FP on my blog. Lots of beginner stuff covered there.
I have a distaste for books for two reasons: 1.) hard to search when I need something fast, 2.) info in epub / pdf / hardcover / softcover easily gets outdated compared to online resources. http://exploringjs.com/ - esx separated by years, author got good examples. https://developer.mozilla.org/bm/docs/Web/JavaScript - covers everything about vanilla javascript nodejs docs webpack docs babel docs
I just read MDN.
blank page, the backend is there, even and index.html with a script element that conjures an app.js thats also already there. but the app.js file is blank and i need to hit the api end point get the data and output it to the index.html according to the spec. the spec is contrived 
Using `innerHTML` could introduce XSS issues. I would recommend writing a simple function like: ```javascript function html(tag, attrs, ...children) { const element = document.createElement(tag); Object.entries(attrs || {}).forEach(([key, value]) =&gt; { element.setAttribute(key, String(value)); }); children.forEach((child) =&gt; { if (typeof child === 'string') { const text = document.createTextNode(child); element.appendChild(text); } else if (child) { element.appendChild(child); } }); return element; } ``` and then use it like: ```javascript document.body.appendChild( html('main', {}, html('h1', { class: 'headline' }, 'Hello'), html('a', { class: 'link', href: 'https://www.google.com/' }, html('span', {}, 'World'), html('span', { style: 'color: red;' }, '!') ) ) ); ``` https://jsfiddle.net/cdL8qpw6/ If you will need more features, you can always add them into `html` function. Or use an existing library (I've created a simple [one](https://github.com/alexanderby/malevic) for my purposes). This way you will not introduce security issues and will stay independent from always changing 3rd party APIs. But be prepared for bugs.
I love JavaScript Allongé.
Then you should definitely go with `document.documentElement.getElementsByTagName('body')[0].appendChild`
Because it works like this: splice(index, \[deleteCount, \[elem1, elem2\]\]); The specification says that if you set deleteCount to 0 an empty Array will be returned. Thats why you end up with an empty array.
Yup. Legit. They run some pre-set scans on a URL and give you the results. The free scan is to get traction, it’s a new company. 
Anyone got ideas if it it's usable with webpack / react?
Design Patterns: [https://github.com/strdr4605/tum-ipp-labs](https://github.com/strdr4605/tum-ipp-labs)
While I agree the "You don't know JS" series goes way overboard with programming pedantry, IMO the one good book in the series worth reading cover to cover is "this &amp; Object prototypes". That one's was a proper gem when I still felt hazy about what "this" means in different JS contexts.
Do you have tutorials which you could recommend which teach how to build chrome extensions?
I’m at a loss here, can you elaborate as to why using string interpolation makes event handling a pain?
4. The setTimeout call returns an id number, which is stored in timeout. The clearTimeout call uses the id stored in timeout to tell JS which timer to cancel. But note that it uses the timeout variable's value; it doesn't change it. So even if you click many times, timeout will not have been reset to null, because no code was run that explicitly set it to null. 5. The setTimeout call doesn't just call the function later; it also resets the timeout variable. This means that even when the function is called immediately, it won't be called again until after that timeout has triggered and reset the timeout variable. Don't feel too bad for not understanding the code. This code was written to run fast, rather than to be human-readable. That applies to a lot of framework code, unfortunately.
JavaScript: The Good Parts by Douglas Crockford.
Some of the people in this sub think React is the “perfect fit” for literally every webdev problem. Not only does React not work with this project’s requirements, no matter the reason, but it is an absurd amount of overkill for what OP is trying to achieve. Building a table from JSON data is something any novice ought to be capable of without having to resort to a library. This is pretty basic stuff. Anyone who thinks React is the best way to tackle this needs to re-educate themselves.
At my last job I wrote Javascript with five characters; those guys were a hoot
This is life changing.
Honestly this implementation of denounce is old school and difficult to read. Here’s what I use these days, sorry about formatting I’m on my phone: const debounce = (fn, time) =&gt; { let timeout return (...args) =&gt; { clearTimeout(timeout) timeout = setTimeout(() =&gt; { fn(...args) }, time) } }
Ugh. I hold him responsible for \`use strict\` prohibiting the use of \`with\`. In can be useful especially in the context of template frameworks. Don't just take my word for it, AFAIK John Resig thinks so too.
Thanks
Learning React may get you a React job. Learning vanilla JS can get you a React job, a Node.js job, an Angular job, a Next Hot Thing The Replaces React job. Learning a new framework is pretty trivial if you have a strong understanding of the fundamentals.
Correct. A Promise would not be useful here.
Nicolas C. Zakas has a great writing style only those who truly understand a subject can communicate it with such simplicity and elegance. Any book by him is golden, some are even available for free: https://leanpub.com/understandinges6
Wow thats really cool dude, congratz!
Ebooks are easily searchable, and some stay relevant for more than a year, especially if they’re talking about the platform (JavaScript) as opposed to tooling (React/Angular).
Congratulations! I’m going to check your project out.
Great job by you and the contributors, congratulations!
Yea much easier to read
Does this Javascript subset have a name? Can its name be WATscript?
Yes! The 7th edition is coming. Stay tuned with this link - [https://davidflanagan.github.io/jstdg7/](https://davidflanagan.github.io/jstdg7/)
Happy days mate!!
Your hard work payed off, Good job dude! 
"You can write basically any JavaScript program on the planet without using any more than these characters: \[\]()!+ " OK then! Lets start with something dead-simple: alert('hello'); Now you...
Thank you so much!
Thanks a lot!
Thank you so much!
Thank you, feel free to contribute too!
Thank you!!
As others have said, Chrome is evaluating the current value. To get around this with the lowest possible effort, you can use the [Spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) to clone the object: console.log( [ ...myArray ] ); console.log( { ...myObject } );
[It has a name, and its name is JSFuck](https://en.wikipedia.org/wiki/JSFuck).
Here's roughly how it works. I tried to make it use as few extra features of JS as possible, to concentrate on just how splice works. Of course, take this with a pinch of salt. In reality, this will all be done in a much smarter way beyond JS. Array.prototype.splice = function(start, delete_count /*, new items...*/) { var tail = []; // will hold items after those deleted while (this.length &gt; start + delete_count) { tail.unshift(this.pop()); } // The array contains items before start // and those that are to be deleted. var removed = []; // Will hold the items that have been removed while (this.length &gt; start) { removed.unshift(this.pop()); } // The array contains items before start. // Add new items from arguments for (var i = 2, l = arguments.length; i &lt; l; i++) { this.push(arguments[i]); } // Add tail back onto the end while (tail.length &gt; 0) { this.push(tail.shift()); } return removed; }; Just a bit of fun. Hope you found it interesting.
FWIW, someone wrote a JSFuck transpiler: https://jscrew.it/ - https://github.com/fasttime/JScrewIt
I recently messed about with this stuff too. Check out Google's [Getting Started Tutorial](https://developer.chrome.com/extensions/getstarted). It's way over-complicated and doesn't really explain what each part is doing. But it's somewhere to start. Then you have to just use the docs to actually do what *you* want to do.
OP said: &gt;I have to do it with via vanilla JS &amp;#x200B;
Any chance on a epub?
What does your setInterval look like? Where are you calling it from?
You might wanna have a look at http://todomvc.com They have examples on how to structure your code using the MVC pattern with Vanilla JS.
Nice! Going to check this out.
Nice. Congrats!
Basically, I don’t want people to abuse my endpoints from another app/url since I’m using an API key in my server
[You need to enable CORS and only whitelist your application](https://expressjs.com/en/resources/middleware/cors.html)
That's interesting. Here in South Africa, it is similar in that they only really care about your CV. Qualification is only important for serious computer science jobs (like the ones in the finance industry) but not so important for getting a job at a web shop. I think the hiring might be stricter in Russia though - here very little companies care about the quality of their software, they just want things coded and finished. It's one of the reasons that I prefer working for companies overseas, because I like investing time into test suites and making sure everything is stable - here, especially at enterprise level, doing so is considered a waste of time. There are some exceptions though. Our salaries are also very low. The same work I got paid $5000 a month for in the US, I would get paid $800 a month here. \&gt; What about evidence, that you interested in their products? I hear, that in US it's important. Yes, for the most part (at least in my experience) it is. Companies in the US like to ensure that you are a good culture fit - their employees all have a certain job-specific "culture" to them regarding how they work and co-exist. They want to make sure that you can "fit in" to this culture easily, and one of the best ways of knowing is seeing that you're passionate about solving the same problems that they are solving. \&gt; I have experience, but I work for enterprises, so I can't put projects Every developer has these projects that cannot be put in a portfolio. In such a situation, just invent your own projects. Make them demonstrate the same kind of programming you do day-to-day, and work on them in your spare time. It is better to have fake (but functional) projects on your portfolio than no projects at all. It also doesn't necessarily have to be on Github. Github would just demonstrate that you can code - try having live versions of those projects hosted somewhere, referenced in your portfolio as evidence that you can build a product.
You need to load in jQuery to the page. The code seems to require it. Try adding this to the top: `var s = document.head.appendChild(document.createElement("script")); s.onload = function() {` And this to the bottom: `}; s.src="`[`https://code.jquery.com/jquery-3.3.1.min.js`](https://code.jquery.com/jquery-3.3.1.min.js)`";`
Ahh I see, thanks!
I’ve never deployed a react native app. Do I get to set an address for my app?
Sorry, but this comment is just so that I will remember to check this out later. But, IMHO, if it's a big application and you won't split it later, then it can be a good idea to use HMVC. But I am not an advanced programmer, so I just wanna hear also the rest of the people what they think.
I'm afraid I'm not sure either. I've only had a cursory glance at RN, but the backend will always be the same. You can figure out where it's coming from on your server though. Before the `cors` call, you can add a piece of middleware to express to log where the request is coming from.
You can’t. I can always construct a request that looks like it’s coming from your app but is actually coming from a script that I wrote instead. You have to create a backend that protects itself from abuse.
MDN is for front end JavaScript, which is great for the overlap. The Node documentation would be the equivalent for back end. It's not very accessible as far as casual reading or easily finding information, but it is well-documented in that everything is covered.
CORS helps browsers but it doesn’t protect backends.
That makes sense. What’s the best practice then?
Cool, I've used MDN before, I just like w3schools layout more. I'll stop being picky, and switch since so many recommend it haha.
So what you're saying, is only use .splice() with an assignment, if I want to return the DELETED items. Otherwise, use it in-line (in 2 steps), to modify the array its working on?
Congrats!
Thank you so much! My next project is to write all off these built-in functions myself, to REALLY understand them, and the magic before I head off to learn HTML/CSS better. Putting things in this context, is the most helpful thing to me.
Am I the only one that dislikes these giant collections of links? I get really discouraged when I click on a topic and it takes me to a list of 15 links about the topic. I prefer one link where the topic is explained well over 15 articles. I just don't know where to start.
Thank you!
Thank you!
Congrats! It's really interesting, especially for me as a student in development!
I think that it could be turned into an epub, but it would require a lot of work. It would require to organize topics and explain it, not get together links and articles. Maybe in the future yes, it can be done. Thanks for the feedback.
Well, personally I think that it really helps because you can easily find a lot of articles about a specific concept.
Thank you!
Fair enough, I know there a open source software called calibre that I think helps with this but have not used in years
It's literally a link farm. It would likely violate copyright of at least a dozen of them to repackage it.
There’s a large variety of things you can do depending on what type of attack you’re protecting against.
I agree. I mean, I'm sure some people will find it useful, but I could literally take his list of titles and search google for each one of them and find all of the articles that are linked.
Yeah, don't get me wrong! This is a great source of information. It's just that personally I dont like this many options as I don't know where to start.
I got it, I appreciate your feedback!
I don’t understand why an interviewer would ask a question that relies on a somewhat obscure and utterly stupid feature of JS, that blurs the line between function and value for god knows why. Is there at least a good reason for valueOf to exist?
"Can I copy your homework?" "Yeah just change it up abit so it doesn't look obvious you copied." 
Yeah—you go for it! I did a similar thing a while back. If you’re looking for fun little tests of your knowledge, I’d recommend Codewars.com too.
I came to recommend the same book - it's thorough without being dry or overwhelming, filled in all the gaps for me.
What does that mean? It means you have to configure whatever is serving the pages to send that content-type header for the manifest (.appcache) files. This will depend on what you are using to server the data. If it's apache, for instance, you can create a .htaccess file in the appropriate directory with this in it: AddType text/cache-manifest .appcache You should probably read more in depth into how headers work.
My favorite part: &gt;The facebook codebase has thousands of !important statements, despite being written by competent engineers with solid engineering practices
This is great project! I am going to share this with friends.
Hyperscript is vanilla JS. If they absolutely cannot use any libraries for some weird reason then I would probably implement a hyperscript-like helper function myself.
Hyperscript is written in JavaScript, but it would be a library or framework, not vanilla JavaScript. If "vanilla JavaScript" meant "written in JavaScript," then all libraries would be vanilla JavaScript, including jQuery and Hyperscript.
It spreads the result of the function call. Given the context, these functions would be returning an array. Its the same as const sortedLeftArray = quickSort(left); const sortedRightArray = quickSort(right); return [...sortedLeftArray, pivot, ...sortedRightArray];
Hi /u/DecentThePower, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/ashayM, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
Hi /u/captainsnarr, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/ashayM, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
Hi /u/ZodiacHammer, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/sharang_d, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
Hi /u/Fit_Inflation, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Trying to learn JS so definitely saving this for later. I personally don't mind the link layout - when I make notes for myself I usually copy a bunch of links to important pages anyways so they are all in one place. 
So this: "appcache must be served with a Content-type: text/cache-manifest header" crap ? Is something that has to be done on the server side and not on the html file and the appcache am I correct to say that ?
But yeah—I think they want OP to write it themselves, so they have complete control and can maintain it easily. I’d probably do the same as you.
Correct, the web server is what handles the headers and nothing in the html or .appcache file will change that. Like I said, you should study much more in depth how entity headers work. But in short, the headers contain information about the entity/resource. Specifically, the \`Content-Type\` header indicates what type of media some resource is. This allows the browser to know what to do with the info being handed to it. For example, if you have a JSON API the webserver will be sending out \`content-type: application/json;\` in the headers of the JSON response so that the browser knows what to do with it. Another example would be that a webserver sends out \`content-type: image/png\` when serving PNG images. If you were to look in the \`Network\` portion of your chrome dev tools, you will see all of the headers when you click on a resource. So in your case, you should be able to see \`content-type: text/cache-manifest\` in the headers for the .appcache file when it is correctly configured. 
&gt; innerHTML is better than document.write Yeah, these days there's pretty much no reason to ever use `document.write`. As for innerHTML, IIRC the overhead comes from parsing the HTML string plus having to actually construct the DOM in memory (whereas w/ the DOM API, most of that cost is already reflected in the js time and the cost of parsing HTML is zero). I say to consider repaint time not for the repaint time itself (since as you said, it can be affected by things like display:none), but because that's where it's easiest to see the perf impact. Another place you can look at is the time it takes for the runtime to yield back to the js thread, but the mechanism required to measure it is kind of a hack (`setTimeout(fn, 0)`).
I like it for that reason only. It has everything, and I just have to dig deep enough.
Awesome man, well done!
No need for assignment unless you want the deleted items. var a = [1 , 2]; a.splice(1, 1); // a now is [1] var b = [1 , 2]; b = b.splice(1, 1); // b now is [2] 
https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment I'm really partial to this. Ty. 
Congrats man, I can see this being a huge help to tons of new devs starting with JS. I have a suggestion tho; I think it would make it alot better if the core idea of each concept was summarized and shown within the project itself, with the links following. That would also make it alot more quick-reference friendly imo. 
With this link you can put just one link in bookmarks and never look at it again, otherwise you'd have 15 links in your bookmarks and never look at them again
&gt;The funny thing is that I hate dependencies (hence the custom class) but when I looked at what is required to implement upload progress, it was just clear as day “fuck it, we’re bringing in axios”. Sometimes if an app has only one request I still write out the xhr even. Axios is one of only two dependencies I use in js. &amp;#x200B; I wrote the article to let people know fetch can do everything your 3rd party HTTP lib does. \*Maybe not always as simply\*, and you might still prefer using Axios if you often need progress updates. &amp;#x200B; The main point is fetch is now a far better developer experience than XmlHTTPRequest ever was. And many use cases I previously assumed were in the domain of 3rd party libraries are actually well supported - if not well documented. &amp;#x200B; &amp;#x200B;
Maybe he thinks link farm itself as epub Can links be opened from epub?
Right on. But fetch does NOT do everything...it doesn’t do upload progress. That was my point. 
Did you read the article? Several of those use cases I covered. &amp;#x200B; Let me know specifics &amp; I'm happy to address or add them. They still might not be 'pretty' - so you may still want axios, but I want to at least demonstrate a functioning pattern for each case. &amp;#x200B; Some of the things like default cookie handling is silly but security related. Cookies are easily added with the opt-in \`{credentials}\` param (granted it's the worst name for cookie stuff) but it works.
This has been posted on Reddit today - it provides links to resources that explain the key concepts behind JS: [https://www.reddit.com/r/javascript/comments/a64shs/my\_project\_was\_considered\_by\_github\_as\_one\_of\_the/](https://www.reddit.com/r/javascript/comments/a64shs/my_project_was_considered_by_github_as_one_of_the/)
&gt;fetch is also not supported on the backend with node and perhaps other uses of JS where I think axios is?(there is also node-fetch for node users). There is a rather long issue about it on nodes github about adding fetch and it doesn't seem like it'll happen. Sooo... in this case it can just be use axios frontend or backend, remember how to use just that and not bother about switching between the two. &amp;#x200B; There's a handy package called \`node-fetch\` - it's [mentioned in the compatibility section.](https://danlevy.net/you-may-not-need-axios/#compatibility) of my article. It's no worse than having to install any other 3rd party lib, however you get symmetry between front-end and back-end code.
Yep, use the `node-fetch` package - it's mentioned in the compatibility section at the end: https://danlevy.net/you-may-not-need-axios/#compatibility It's no 'worse' than having to install any other 3rd party lib, the bonus, however, is you get symmetry between front-end and back-end code. 
Thank you ! But...when you add to home screen...which is what 99.9% of what people who create appcache is doing for...in the end it is the phone and the local stored htmls...what the hell does it have to do with how the server sees it ? Is this a stupid question ? I am sorry if it is.
&gt; Not sure what if it can do it now. It wasn't been able to do it in clean way earlier like 8 months ago. And obvious option was Axios. If had to do something new ground up, I would maybe check it. However, I'm doubtful it's on par, though. Exactly, Axios is just an API wrapper around XmlHTTPRequest. I wrote the article to demonstrate the many use-cases which used to have me reaching for Axios.
I was really surprised that it actually does - maybe it's not elegant. This was the main Use Case that prompted me to write this. I was also convinced it couldn't be done because of the Promise-based design. Here's a direct link to the section: https://danlevy.net/you-may-not-need-axios/#download-progress-helper
My bad. I initially disregarded it because it says download progress and I needed upload progress. And are you bringing in a dependency to do that?
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
I ♡ it.
I have added LICENSE file
I’ve never heard this complaint before about strings in JS. They have quite a few methods you’d find on arrays (length, indexOf, slice, etc), some useful helper methods of their own (toUppercase, toLowerCase, charAt, replace, match, etc) and for anything else you can always just split into an actual array and manipulate as you see fit. As for mutability, I’m not sure I understand what you’re getting at.
Perfect thanks for this. 
Spreading need a callable @@iterator method (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Iterables). Functions don't have; but Arrays do, for instance.
Yep it's a similar pattern &amp; I'll add it soon. I'm just running into a bug in Firefox - still trying to verify if it's me or not.
Study the type of each object I call spread on: ```js const add = a =&gt; b =&gt; a+b console.log(...add(1)) // add(1) is a function, spreading will fail! console.log(...[1,2,3].map(add(1))) // result is an array, no worries! ```
what are your plans if any of the links/sites go kaput? it'll be great if, at least on the file you have the concepts in brief and expand further with the links.
I'm not sure I totally understand your question, but I will try to answer it. One thing to note is that it seems that you don't have a strong grasp of how HTTP works, which is going to make this stuff a little hard to explain. I would suggest reading stuff like [https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper.htm](https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper.htm) and [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers) to try to get a stronger grasp of the interactions involved here. As for your question, the server needs to send the correct content-type header with the appcache manifest file so that the clients (e.g. phone/browser/endpoint) know how what to do with the data. Let's take a much simpler example first. Say your server is serving somefile.jpg. If you were to send the data to the client without the \`content-type: image/jpeg\` header, the client will just see a stream of data and not know to render it as an image. Therefore somefile.jpg would not appear on the webpage. In your example, if the client see's the appcache file data but doesn't know that it's \`text/cache-manifest\` it won't know to treat as such. As an metaphor of this concept, imagine that I give you all the material and tools to build a suspension bridge. But I don't tell you that the stuff is meant to build a bridge, and I don't offer you any instructions. In that situation, you have all of the parts to build a bridge but you won't know that you *should* be building a bridge. You just have a bunch of stuff and no instructions. In this metaphor, the \`content-type\` header would be the instructions that tell you to build a bridge with the materials. 
Most probably a performance thing, because ruby is actually trying to also make strings immutable. [https://bugs.ruby-lang.org/issues/11473](https://bugs.ruby-lang.org/issues/11473) [https://wyeworks.com/blog/2015/12/1/immutable-strings-in-ruby-2-dot-3](https://wyeworks.com/blog/2015/12/1/immutable-strings-in-ruby-2-dot-3) &amp;#x200B; But I do prefer it that way anyway. You know what you're working with, you set a variable to something and then it stays like that. You know that `let name = "jimmy"` will always be a string of jimmy, unless you reassign the variable name entirely. I'd also personally not use let for this also, so I'd use `const name = "jimmy"` and know that name will always be jimmy, and it can't be reassigned. 
Fix merged @moocat! https://github.com/justsml/dans-blog/pull/20 Gave you credit in the Pull Request! But I wanted to know if you wanted to be cited in the article? If so, please message me &amp; include how I should address you (spelling, website link, etc).
For one, you have to search for element you want to attach the handler to our resort to hacks with event target.
Interesting. I'll have to check it out.
Browsers are pretty good at parsing HTML :-) anecdotical evidence, but I did see a huge performance win when moving the construction of a 10000-row table into innerHTML once.
Thank you for the feedback, I think that would be awesome too. Maybe in the future, we can make it.
Thanks for the feedback!
I bookmarked this a while back and have been visiting it occasionally to learn! Great stuff and thank you!
Super interesting...
Strings aren't arrays in JavaScript, so they aren't treated as arrays. They aren't arrays in plenty of languages. They are mutable.
That’s awesome! I’m a pipefitter doing mechanical rooms but I’m looking to learn some other skill sets like JavaScript to broaden my abilities. Hopefully I can start a company one day and apply coding to create a website etc. I’ve always been good with computers but never dove into the coding side of things. I’m very intrigued and enjoy learning code for some reason. I will be sure to check this out tonight. 
Congrats! Well deserved 
You would have to have a webserver running on the server to listen to a request from the webpage. If you want to use JS for that, you can use NodeJS. Or you can do that in Golang. 
I'm very curious what your benchmarking methodology was. I did something very similar specifically in a benchmarking context (I was literally benching innerHTML vs Stephan Krause's benchmarking suite) and initially I too saw numbers that suggested that innerHTML was performing way better than using the DOM API, but upon closer inspection, it turned out that it was because my methodology was only measuring synchronous js time and leaving out the actual rendering time. This was a couple of months ago. I'd recommend running yours w/ a `setTimeout(() =&gt; console.timeEnd('foo'), 0)` for a quick sanity check. This is how I came up with the twice-as-slow figure.
Man, you made my day with this comment! I created this repo to help those who are starting with JavaScript as you and I really hope this repo could help you, don't give up and continue learning JavaScript, if you learn it and understand it, you can create a website with any JavaScript framework/library as React, Vue, Angular, etc. &amp;#x200B;
It was already starred on my GitHub. Thank you! Learnt a great deal from it. It was super helpful in learning JavaScript.
Thank you so much, I'm really glad that it helped you! 
I think you're missing something in your understanding of string interpolation and/or event handling. 
No, thank you! I'm glad you made it easy for people to learn and understand JavaScript :)
starred it just now :)
Yeah you could, but now you don't have to.
To be honest, I’ll never think about this repo ever again. If google returns it for a search that I’m interested in some day, so be it, but since it’s actually bereft of original content, it never will.
My JavaScript books are targeted at programmers (most of them are free to read online): http://exploringjs.com
Dude, a list of links is not an open source project. You should be embarrassed trying to tout this around the way you are.
Congrats !!!!
When people say "library", it's generally understood that it's published somewhere, versioned, etc. A inline helper function is just that, just a helper function. A basic hyperscript is just this: function h(tag, props, children) { var el = document.createElement(tag); for (var prop in props) el[prop] = props[prop]; for (var i = 0; i &lt; children.length; i++) { if (typeof children[i] === 'string') el.appendChild(document.createTextNode(children[i])) else el.appendChild(children[i]) } return el; }
strings in javascript are Immutable
It means to apply the spread operator to the function's return value. Here's a way to help you see that: First, I assume you understand what the spread operator does (if you don't please review the spread operator): let pre = [1, 2, 3]; let post = [4,5, 6]; let combined = [...pre, ...post]; // combined = [1, 2, 3, 4, 5, 6]; Okay, now let's refactor how `pre` and `post` are initialized. Result is still the same because `pre` and `post` still have the same value: function getPre() { return [1, 2, 3]; } function getPost() { return [1, 2, 3]; } let pre = getPre(); let post = getPost(); let combined = [...pre, ...post]; // combined = [1, 2, 3, 4, 5, 6]; Finally, let's do a last refactor where we drop the temporary variables: function getPre() { return [1, 2, 3]; } function getPost() { return [1, 2, 3]; } let combined = [...getPre(), ...getPost()]; // combined = [1, 2, 3, 4, 5, 6]; 
I think the idea with the link collections is that most beginners don't know what they don't know, and therefore don't know what to search for. These lists are helpful in this case because it's like, "here, you would benefit from these topics, and here are some good articles on them".
I like the “awesome-X” repos.
ahhhh okay, thanks for the help !
Does `[...string]` not work for you?
wow, thanks for this explanation. Weird to say, but I fully understand the concept. Thanks !
Definitely going to have a play with this over the weekend.
When you say "array of chars", do you mean char in the data type width sense? One major reason why that doesn't work is unicode, since the vast majority of unicode characters take more than one byte to represent. Javascript also has some extra legacy baggage because it represents codepoints as surrogate pairs. Generally speaking, immutable strings are the norm in almost every language (Java, PHP, Haskell, etc) as they let runtimes do a bunch of optimizations. They also tend to be easier to reason about and help prevent classes of problems such as buffer overflows. If you're looking for something more akin to buffers, Javascript has typed arrays (Uint32Array and friends) and the Buffer API in Node.js. For truly memory-intensive stuff, Node's streaming APIs are all built around Buffers, in fact.
No numbers / benchmarks involved, I was dealing with a noticeable (from the user perspective, eye-benchmark) page hang.
I see. Well, that would work. The thing you linked looked a whole lot more complicated than that; a lot more "library"-like. But yeah. They could easily roll themselves something like this. Or for their purpose, strings should be fine too.
I don't think so, maybe there's a communication breakdown. If you're creating the elements using the DOM API, you have the elements at hand to attach the handlers. When using innerHTML, you have to explicitly find that element you just created, since you don't have a handle.
Yep, writing a markdown with links is considered an open source project 
I always read this repo. Congrats man!
Formatted properly for you: const debounce = (fn, time) =&gt; { let timeout; return (...args) =&gt; { clearTimeout(timeout); timeout = setTimeout(() =&gt; { fn(...args); }, time); }; };
Thank you :)
I was looking at this the other day, great work and congrats 
The polyfill ([@babel/polyfill](https://babeljs.io/docs/en/babel-polyfill)) is missing. However, according to the package.json, regenerator-runtime is installed so that should work too. Are you sure you're requiring/importing it correctly, as documented [here](https://www.npmjs.com/package/regenerator-runtime)?
Seems like a pretty wwll curated list of links which probably took quite some effort to gather. It's basically documentation... What's wrong with sharing that?
Cool thanks :)
I love the title "Javascript for Impatient Programmers".
Answering my own question... I found my own cool resource. Has some beginner stuff, but a lot of best practices. [http://jstherightway.org](http://jstherightway.org) 
😀 Thanks!
Are the links for each sorted in any way? I too feel a giant list of links ends up being less useful than typing the topic into Google and going from there. Maybe if the links we're at least starred or something indicating your favorite link on the topic it would give learners more of a place to start. If I wanted to learn about 'Call Stack' for example, which link should I go to? MDN is in the middle of the links, but generally seems like a solid place to reference, should that be closer to the top? I've saved your repo, will come back to it and see if I can find it helpful when I want to deep dive on a topic. Thanks for your work. 
You have to insert those elements somewhere, the container is already the most logical place to handle any event handling needed for it. There is no good reason to have more than one event listener for a single table, anyway, but even if you wanted to add one to every element in a table for some dumb reason, you can still easily access every element using the DOM API. I’d far rather build out a large table of data using string interpolation then go back and add hooks than build out a table using the DOM just to have those hooks right up front.
It's a list of links in a readme? This puts all people who work on actual open source projects to shame.
 let MyBlockchain = new Blockchain();
Awesome, thanks.
&gt; My project was considered by GitHub as one of the top open source projects of 2018! That's what. That's a stretch at best, deliberately disingenuous and self aggrandizing imo.
Why would people want to create blockchains?
Not enough information to answer the question. 
We've come full circle. the first internet "search" wasn't one at all, it was a directory (Yahoo): a list of links. That's what started it all. 
You have your mind made up. Thanks for sharing. 
ya, that's exactly what catch statements are for. You may think of it as a special if case or default cause, but its a little more than that because you have an error object to play with. So you can use that for improved logging, or maybe implement retries, or default values. Its really up to you how you want to recover from failed state.
Can you give some examples? If you're still using `charAt()`, that's no longer necessary—you can access each character using and indexer (e.g. `let o = "hello"[4]`) in all modern browsers. You could also simply convert a string to an array with each element having one character via `"mystring".split('')`. Also, while strings are mutable in C++, having immutable strings is certainly "the norm" in managed languages.
How so? What's the pay off in this scenario tho?
Interesting concept and good way to learn? 
&gt; but then there’s things like npm, yarn, node, react, flow, babel, etc. In addition, it seems like I need to have at least a rudimentary understanding of css as well. The basics are easy, but you gotta think of it in terms of a developer stack i.e. start from the low level and build up through it so you can figure out the dependency structure, so in order (from lowest) : 1. node is a standalone JS environment (REPL), not dissimilar to python/ruby. 2. npm is the default package manager bundled with node (equivalent of pip / rubygems). On the same level as npm, Yarn is a facebook re-engineered package manager that (initially) was "better" (faster) with installs and package re-use (it was more aggressive with caching), npm has (~roughly) reached parity with that level of perf. 3. Babel is a transpiler that's quite useful for transforming your code, ill give you an example, older browsers (and/or versions) are only compatible with ES5... but lets say you want to write ES6 or ES7 (because muh syntax sugar is sooo sweet). Well in that case you can still do that, just run it through babel before you deploy it to production and it will convert it to ES5. 4. Flow is a static type checker. Rather then learning an abstract language (such as typescript / elm) to implement data types, instead flow is sort of like a test library. 5. React (i'm assuming reactJS), is a front-end library to manage web page state via the functional concept of immutability (though as everyone knows nothings immutable in JS, so grain of salt). 6. CSS is... a pain in the ass. It's essentially about how to make websites look pretty, but seriously a PITA. Mostly because especially when you have to consider compatibility (cross-browser / backwards) it becomes frustrating to deal with. Also how you structure things from the start can make a big difference on maintainability later on. There isn't a front-end developer alive who hasn't seen this : Note: Something confusing is that npm is the package manager, but it's also the name online repository (npmjs) where modules may be pushed to, sorta like git vs github. P.S. One thing you haven't mentioned is version control (git) and i'd imagine you'd need to understand that as well. Regarding the relation of git to the "developer stack" i'd preferrably keep it off the to the side as it's more about project/code management over all your work then any individual stack. Failing that i'd insert it between 2/3 in the above list.
Text change animation - feels like a hacker [https://github.com/eviusIndustri/animatext](https://github.com/eviusIndustri/animatext)
Your post is light on details, contains no code for what you've tried before or anything, so it's difficult to provide help. But it's possible jsPDF doesn't support what you're trying to do. If you have no choice but to generate PDFs from the client side javascript, you can try this: [https://www.api2pdf.com/convert-html-to-pdf-with-client-side-javascript-and-jquery/](https://www.api2pdf.com/convert-html-to-pdf-with-client-side-javascript-and-jquery/)
Thanks for replying. Here is my code https://jsfiddle.net/najmi1995/z3Ltvy1e/1/ What i try to do is to convert to PDF the whole form that i put in &lt;div id="RPHContent"&gt; by keeping its format
I didn’t mention git since I’m already familiar with it. It’s just the JS stack that’s new to me. Your post is very helpful though, so thank you. :)
Below is a very good course that helped me coming to the new JavaScript ecosystem. It covers ES2015 basics and the required tooling around it. [https://laracasts.com/series/es6-cliffsnotes](https://laracasts.com/series/es6-cliffsnotes)
recognition is the credit here, it’s not always about money .
Not a direct answer to your question, but it helps to play around with the debounce function. Try this: https://css-tricks.com/the-difference-between-throttling-and-debouncing/
I wouldn't worry about it. Most programming language arguments come down to people liking/not liking a language and then coming up with "good reasons" to justify their opinion. There are legitimate points of criticism for the language but programming is about solving problems and not nit picking the tools. I personally prefer writing Clojure, Swift, OCaml, and Rust to writing JS/TS but the latter pays the bills.
Step one might be to stop treating it as something that needs defending. People are allowed to not like the programming language you like, even for "vague" and "subjective" reasons like "I just don't like its name". Ask yourself why you keep bringing it up and why it's so important that this particular conversation keeps going. Step two might be to actually listen to why they don't like it. I get the feeling their reasoning is not as vague or subjective as you're making out, seeing as there's quite a lot to not like about JS. And then there's the laundry list of things one might like about JS: - good for rapid prototyping, - is currently still the only language that runs in the browser with full access to all exposed APIs, - large ecosystem, for what it's worth - can bolt on fairly expressive static typing with TypeScript (technically a different language) - easy to build a bunch of simple data structures in - fairly metaprogrammable
I learned it’s best to accept that haters going to hate and that you aren’t going to change their mind. Their hate relies on old arguments against JS along with various faults that are thought to be JavaScript’s but do not realize are faults of popular standards that JavaScript follows (e.g. NaN issues, 0.1+0.2 !== 0.3, etc). These people mistake javascript’s magic as quirks. Let them use whatever language they are biased towards to and just tell them one day maybe they will understand. 
RemindMe! 60 days
I will be messaging you on [**2019-02-13 05:36:45 UTC**](http://www.wolframalpha.com/input/?i=2019-02-13 05:36:45 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/javascript/comments/a64shs/my_project_was_considered_by_github_as_one_of_the/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/javascript/comments/a64shs/my_project_was_considered_by_github_as_one_of_the/]%0A%0ARemindMe! 60 days) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
This looks GREAT! Thanks!
&gt; the bonus, however, is you get symmetry between front-end and back-end code. Well for the most part yes. There are [some differences](https://github.com/bitinn/node-fetch/blob/master/LIMITS.md). Not really seeing how that's a different argument vs using axios which works on both front-end and back-end code too though?
How is this a project? It's nothing more than just a wiki?
&gt; This was the main Use Case that prompted me to write this. I was also convinced it couldn't be done because of the Promise-based design. There is no mention about the progress being used for uploads only downloads? There is mention of uploads prior but not related to progress %. Your article should point out that it's usable for uploads if it works with uploads as well?(Haven't gone over it yet, but it didn't look like it'd work to me) There is [this StackOverflow](https://stackoverflow.com/questions/52422662/how-to-get-file-upload-progress-with-fetch-and-whatwg-streams) which points out why upload progress isn't usable with fetch(but is fine with downloads afaik), an answer links to two github issues that can resolve it, one of them is about ReadableStream which you use(so presumably upload progress with fetch works now?), yet the issue is still open. According to [this issue](https://github.com/whatwg/fetch/issues/577), it's not suitable for HTTP1 servers only HTTP2(H2)? &gt; It requires chunked encoding which pretty much limits it to h2. (You can't negotiate chunked encoding in h1.1 until after request has been sent, which is too late.) Also browser support seems [a bit flakey still](https://caniuse.com/#feat=streams)(no good for IE, [experimental in FF](https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Using_readable_streams)). The spec seems to still be [under development](https://streams.spec.whatwg.org/)? But the ReadableStream uploading part was [merged into spec almost 2 years ago](https://github.com/whatwg/fetch/pull/425)... so still seems to be handled better atm via axios.
[removed]
&gt; There's a handy package called `node-fetch` - it's mentioned in the compatibility section of my article. Uhh... I know you copy/paste dropped that response around a bit on this thread, but my comment that you're responding to that with literally mentions `node-fetch`, see the final paragraph. Also note that with axios as frontend and backend,you just import axios and use it the same way on both ends, it's an abstraction api so you get that nice benefit. With fetch on the backend, node-fetch has differences, your code isn't isomorphic in certain areas, like your progress helper that uses ReadableStream, in node-fetch you use native node js stream instead: &gt; The data encapsulated in the Body object. Note that while the Fetch Standard requires the property to always be a WHATWG ReadableStream, in node-fetch it is a Node.js Readable stream. So your code for such things needs to be adjusted, I'd argue it's a better dev experience with axios.
There are two kinds of languages. The ones everyone complains about, and the ones no one uses.
This looks amazing for my various use cases. Will play with it tonight.
Any thoughts how to make the formatting prettier-compatible? I love the idea but I'm afraid it won't look any readable after prettier.
JS has a bad history, it's much better these days. But I can imagine people who had sour experiences in the past or just retained the bad impression of it from long ago still hold onto it. It's true it's not great for performance vs other languages, but there are plenty of use cases where the performance is plenty for the task at hand. In Node.js you can just offload to a systems language like C/C++/Rust etc via FFI when you need to do performance critical stuff like number crunching large datasets, the same is done with Python(TensorFlow, openCV, numpy, etc). There is benefits to both. I really enjoy Rust but web technologies and JS are much nicer for certain projects, especially with dev speed. There isn't much you can say to someone who's stubborn on their opinions, beyond showing/proving where it's worthwhile. I remember a few years ago, a startup I joined had spent several months building this C# Xamarin UI app for mobile devices. It has some weird problems, long build times even if you just made a minor change, a third-party API on the server end communicated with JSON responses and I think websockets which wasn't a smooth experience. There's only about a week to go before we needed something working to show off, so I whip out React-Native(still fairly new at the time) and have a visually nicer interface, that I can easily adjust the layout or style and get instant feedback upon saving on the mobile devices for testing, there's no performance issue here, just good functional UI, a nice component structure where I can re-use parts, quick updates/builds onto the mobile devices(iOS iPhone/iPad and Android phone), websockets/json interaction was much better too. Even was able to add some extra features that the C# UI didn't have. I did that in a week vs 3 months(granted that was being built by a comp sci intern alone). Convincing might not be worth the effort though, especially if you don't have much say in what to use. No amount of convincing would have me bother with C/C++ again, my needs are mostly meet with Rust for anything I'd use those for, and I'll cut my losses for anything it doesn't meet well as the time investment isn't worth it to me from the amount of frustration of trying not to shoot my foot among other problems isn't worth the hassle for the gain. Python, I don't like either, but will resort to for certain projects as it's libraries/community is fairly dominant in those domains it excels at, it's difficult not to go with Python in those situations. Likewise there are plenty of other niche languages that I'm sure is great but I'm not likely to care about them, maybe you feel similar and can relate? That's probably what these people that don't like JS feel like about it, even if you're open-minded about it, it can be a hard sell(not that the language isn't good, just why is it good/valuable to them vs what they are currently comfortable and happy with). If it can solve a problem they have, or make something they're doing much easier, like I discussed above vs C# Xamarin, you can perhaps justify it. Furthermore, with WASM, there can be even less reason to bother with JS. 
My friend had this as a css class homework assignment, so my friend and I have been trying to create this as complicated as possible. The topics that have come up so far are React, Backbone, C# Api, SQL, NOSQL, etc. The posts I'm hoping to receive will probably go way above the teachers head, so don't worry about academic dishonesty. If you don't feel like typing out the text then just use a placeholder - it's the thought that counts.
Hi! That looks really cool. Would you be interested in a French translation of it? 
Gg monkey dumb kid
Yeah, seems like op is blatantly lying in their title. Kudos to them for helping people learn js, but this isn’t really comparable to an actual open source project, they barely wrote any original content or code. 
Thanks for the reply. I'm new to reddit... :) Still learning my way around. &gt; ... I'd argue it's a better dev experience with axios. If you need upload progress, Axios might be still inarguably better. Honestly I still use Axios, just less and less (as compatibility gets better.) I included the pattern to let people know it's possible (most devs I talked to were surprised to find download progress was possible w/ fetch - myself included). I will include more compatibility info - and general guidance: I only used it in a project which had already been built on native fetch, adding a 3rd party library for progress updates was something I wanted to avoid... 
I'll add compatibility info. I found some of those links as I failed to get the upload version work in any convincing way. Uploads are still a work-in-progress, and probably deserving of a stronger warning of it's compat...
adonisjs maybe? [https://adonisjs.com/](https://adonisjs.com/)
It's embarrassing how proud he is for putting together what's really a page of links. No educational write-ups whatsoever.
It's not radically different. A benefit is being able to omit a 3rd party http lib in the browser bundle saves Kbs. We now have a good-enough-in-many-cases option that is **browser native**, and using it on the server adds no more overhead than Axios. It's ok if this doesn't motivate you. The `fetch` interface isn't as clean in an absolute sense. However it's not nearly as bad as I once thought. (I'm hoping to promote &amp; share better `fetch` patterns than I was initially aware of. Some of the patterns I'm still working on - specifically timeouts, and upload progress. The interface design isn't quite right yet...) Some people may want to move to modern &amp; standard APIs. Eventually `fetch` might be easier to teach &amp; find hobbyists with prior experience. (Meaning it'll be used from docs to framework examples.)
You start at the first link. Then if you don't understand it still you go to the second link. The problem is that "explained well" can be pretty subjective. Depending so heavily on your current level of knowledge and experience. Heck that's why people are still making learning materials for the basics.
Nest.js
But... GitHub literally did write that. If you follow the link that's exactly what they say. Why the hell are so many people in this thread being so awful? Yeah it's not code but so what? Lots of people clearly found it useful enough for it to gain some popularity. Why do we have to bad mouth the efforts of someone else? If you don't like it then why not create your own open source project that you consider worthy of the title and then try and get that into next year's one. Ya know, use it as some encouragement to do something useful rather than sitting and complaining.
Good lord, what's wrong with being proud of something you've achieved? Especially when a pretty big name is actually the one doing the mentioning and recognising of it and you're now just proud that they mentioned it too. Which is exactly what happened here. And what's wrong with encouraging that? Why are you spitting on someone else's work at all? Especially one that literally showed up in a "Best of 2018" blog post by a pretty big name in open source.
No, Github literally wrote it as one of the top 2018 projects. Follow the link, read the article. OP here is obviously just very proud that it's been mentioned by literally the biggest name in open source.
It's what the article says
Every browser is different and some support features others don't. You'll have to join the developer git communities for each browser
Very practical way to explain FP with some theory added. Thanks for the article
&gt; It's not radically different. Well, your code on backend/frontend for the upload progress has to have some slight changes, so it's no longer copy/paste snippet, you need to keep two versions around or some extra lines to decide what environment it's running in. &gt; A benefit is being able to omit a 3rd party http lib in the browser bundle saves Kbs. [Just a little over 4KB](https://bundlephobia.com/result?p=axios@0.18.0). Sure if shaving off such a small amount is that important to you, go with fetch. Personally I prefer the convenience of not having to use different code slightly differently for backend/frontend. A few KB isn't going to trouble users, especially after the first time once caching is utilized. &gt; We now have a good-enough-in-many-cases option that is browser native, and using it on the server adds no more overhead than Axios. &gt; It's ok if this doesn't motivate you. [77% general availability](https://caniuse.com/#feat=streams) for Streams by browsers. That number falls down to about 57% for India and China regions, so if you're interested in those markets, that's even less of a reason to go with your approach. Maybe in a few more years, less boilerplate needed to implement without third party dependencies for a few KB, no concerns about API breakage from changes too(as the spec still seems to be in development?). &gt; The fetch interface isn't as clean in an absolute sense. However it's not nearly as bad as I once thought. I'm not against fetch btw. I'm clearly making a case against it here over a certain use-case, in many projects sticking to fetch will probably be fine and make sense. Though for some they're not going to want to juggle/switch between fetch and some similar library, so you'll get people that just use something like axios full stop, or they'll stick to fetch and do the extra effort for things like upload progress when they need it or keeping the differences in mind between backend and frontend, can't blame either :) &gt; (I'm hoping to promote &amp; share better fetch patterns than I was initially aware of. Some of the patterns I'm still working on - specifically timeouts, and upload progress. The interface design isn't quite right yet...) Yeah that's cool :) Don't let me get you down, references like that are really nice to come across, if I was set on using fetch your article would be a great resource for figuring out how to do things(plus when I was getting my links in one of my comments to you, your article came up on the first page of a google query!). &gt; Some people may want to move to modern &amp; standard APIs. Eventually fetch might be easier to teach &amp; find hobbyists with prior experience. (Meaning it'll be used from docs to framework examples.) Yep, probably :) I'm sure in due time I'll switch to fetch myself, but when it comes to things like upload progress, I'd be a bit wary of using a browser JS feature that is still fairly "new". 
&gt; adding a 3rd party library for progress updates was something I wanted to avoid... Yep, totally understand that. If I'm not doing anything that something a library like axios would make easier, native APIs make plenty of sense. Though I guess many of us can be lazy to use more than one approach when we're comfortable with one we've been using for so long, so it's usually a switch or stay choice :\
&gt; Uploads are still a work-in-progress, and probably deserving of a stronger warning of it's compat... (Assuming I can get it reliably working) Ah ok, your comment to someone else suggested that the download snippet you linked to in your article was usable for upload progress too, and I gathered from the links I sourced that it kind of works(at least in Chrome), not sure about Firefox, that seems a bit iffy atm.
I haven't done web dev for some time, only getting back into it. In the past I just used express JS and added the routes myself. I do recall HAPI.js being quite a good one for APIs, but also was more of an investment(longer to get same sort of API going)?
This doesn't go into all features of Web Components, I would've loved to also mention properties, light vs shadow dom, etc but the purpose of this video is to introduce people to Native Web Components, then refactor it and use lit-html (next week) and finally refactor it and introduce lit-element (the week after) I hope you enjoy it ❤️
Can you provide a link to your repo?
[removed]