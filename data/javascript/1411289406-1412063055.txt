This is a great comment.
You should be using Browserify, webpack, or another tool to grab NPM modules for front-end use. This way you get updates as they are made (eg if the author patches a bug or adds new features) rather than having to rely on the old school "cut and paste scripts" approach. It also means that you end up with a smaller bundle size since you aren't just duplicating a bunch of code into your library. 
Pretty awful advice. Npm handles versioning and dependencies for a reason. 
OP doesn't want a library. OP doesn't need versioning, dependencies or npm. OP just wants a fucking function to parse a string containing a defined subset of English words.
 &lt;a href="URL_of_invoice" target="_blank"&gt;Invoice&lt;/a&gt; Done. Opens a new (empty) window with the invoice in it. This might seem a simplistic answer, but the basic takeaway is there's no such thing as a "clear screen" command in JavaScript. That kind of thing is for applications. Applications that ran in DOS in the 80s.
OP should learn to use npm, so that next time they "don't want a library" they can just require a function or module instead of trying (and failing) to reinvent the wheel. Or, you know, let's just not give the OP any advice that might actually help him become a better JS developer in the long run...
Hi... again, I've been trying to get a grasp out of JavaScript-objects and (among other sources) been reading the free book from eloquent but I still can't get my head straight in how I'm suppose to structure a deck into an object. Is each card an object? Or shall I create one object for the deck? I tried, based on funkymonks suggestion, building an array of objects but I can't get the syntax right I end up overwriting the properties values :&lt; Would really appreciate a gentle push in the right direction so I can progress further with my application.. What I want (and I think is the best approach) is an object (deck1) containing 4 arrays, representing each suit, with each card within. So that I can access them the way funkymonk suggested: myDecks[0][0].numericValue, myDecks[0][0].name Thanks for any help
First, you have to get the current scroll position, debouncing the listener for the scroll event and scaling the value in a way that makes sense for your page. Then, from the scroll event listener, you have to map that value into the time domain of the video you want to control, and set its currentTime (in seconds). To optimize it, you should decouple the scroll listening (reading) and the update logic (writing), moving the latter inside a requestAnimationFrame callback.
true, good point.
it still won't work in the client side and alone as things like module are undefined.
[Coming to an ES6 near you!](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Proxy)
Not too shabby, runs pretty decent on an old iPad2 with Chrome
Great contribution! I suck at detecting XSS vulnerabilities, but luckily there was nothing that could be hijacked or tampered with at the time (correct me if I'm wrong), since the site didn't contain server-side code or perform external/internal HTTP requests.
Yeah, just include all the things. That's how you develop nowadays. Who cares how it works, if there's a bug just file it and let someone else sort it because you won't have a clue how to fix it yourself and it can't possibly be your problem anyway. Perhaps you'd like a point and click interface to just call in stuff while we're at it as that's all a real developer needs.
It's totally dependent on how much text is processed, because I don't think the processing itself can be optimized much further.
Does this help?.... http://jsbin.com/lenohimewiwe/1/edit
Thanks about your comment :-D. - Number.prototype.isDivisibleBy = .. Why not? I've seen it in others katas and I thought it was a great idea. I find it very expressive. - Code duplication Mmmmm. If you take a look to the commits, I've added the rules objects after refactor when I had all my tests in green. I duplicated the rules because I thought they can change separately and, maybe, do different things. Anyway, it's overkill. I also thought about add another object: DivisibleRule with only the code that checks if a number is divisible... But probably it was go to far... - Unit testing Which dependencies? I guess you mean the rules. You are right. I didn't do TDD to code the rules. About mocking dependencies, until some months ago I always mocked every dependency but after I read this post: http://blog.8thlight.com/uncle-bob/2014/05/10/WhenToMock.html I started to only mock external dependencies. But It's true that sometimes, when I introduce a bug, I have to check several tests instead of only one. I have to think about it... - _.each Yeah. It's overkill. I came from Java and I really like the foreach loops. Anyway, in this case, probably it's better to use a simple for. - Object.create Mmmm, I didn't know that function. Very interesting! I'll modify my code to use it. - no package.json and there is a node_modules folder I'm new in modern javascript development. Can you show me an example of a project/kata with package.json? I really thought that using node modules was the way to go. And I don't understand what do you mean with "don't store your variables in the windows object". Where I did it?
I've used node modules. Anyway, I found this: http://stackoverflow.com/questions/18641899/difference-between-bower-and-npm Probably I'll try bower in my next kata :-) 
`module = {};`
It is not a good practice to include a versioning system in your application's bundled code when that code needs to be sent to a browser and processed and that versioning system exists to pull in a single file for a single method. Sometimes you don't need versioning. There are no silver bullets. Good practice is using your brain.
Package managers, versioning, and dependency management are pretty fundamental aspects of modern software development. These concepts work just the same in JavaScript. npm is a breath of fresh air compared to the "wild west" of copy/paste. Maybe one day you will see the light. ;) 
Right, it's not a big problem for your demo, it's a potential problem for someone using your library on their site with untrusted content. :)
I guess the `clean` function I added could be run just one once on `content` instead of on each word. That might make it faster I'd think, whoops.
Maybe some day you will recognize that software development is not a one-size-fits-all discipline. Maybe one day you will learn not to condescend, and that you likely don't know of my, or others, software development practices. Maybe.
I am not trying to condescend. But I am curious; why do you think that copy + pasting large chunks of code from GitHub is more secure or maintainable, or in *any way* better or even *easier* than `npm install package`?
When/if ES6 becomes default in Node, it will make a lot more sense to use a browserify transform for es6ify. Then the whole process can be writte in the `browserify-transform` field of package.json -- no need for gulp or grunt. This way other front-end code depending on the ES6 module will also know to transform it. At the application level (outside of all your ES6 modules), you could still use gulp or just put `browserify` / `beefy` commands in `npm scripts` since they are so minimal.
Be advised that you're really close to getting banned by reddit, since your account is indistinguishable from a spammer's account. Please read up on reddit's rules @ http://reddit.com/rules, specifically point #1 of rule #1 regarding _spam_. Our [guidelines](http://www.reddit.com/r/javascript/wiki/index) also have more information regarding promotion &amp; self-promotion. **Consider this your only warning.** If you continue to post _only_ your site to /r/javascript, we'll be forced to ban both you and your site from /r/javascript, as well as reporting you to /r/spam for an account ban. Thanks for your understanding.
where are the solutions available?
same here.
[iOS 7.1 &gt;90ms](http://m.imgur.com/bDl9ZZp) 
A few things: - Did you include the javascript in your document (either directly in a &lt;script&gt; tag or linked from one)? - did you include a link to jQuery? For instance, in the jfiddle, if you delete the js part, you also will just see a rectangle. This would be equivalent to you not including the javascript file from the html file. For the second point, if you choose 'No-library (pure javascript)', it also just shows a tan rectangle. This is because if jQuery is not included, your jQ call ($(document).ready(...)) will not work. If you didn't add a &lt;script&gt; tag. So in short, the following should be in your html file when you store it locally: &lt;script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"&gt;&lt;/script&gt; &lt;script src="path/to/your.js"&gt;&lt;/script&gt; 
47000ms on iPhone 4S with iOS 8. I need a faster phone…
Can you try [this jsfiddle](http://jsfiddle.net/1c4kb0og/1/)?
Tried it out a few times. Mostly between 20 and 50ms. That's already much better.
This is reassuring, thanks. Still going to wait the next iOS8 release to update, btw. The file upload bug is a deal breaker.
Number.prototype.isDivisibleBy - [Dont modify objects you don't own](http://www.nczonline.net/blog/2010/03/02/maintainable-javascript-dont-modify-objects-you-down-own/) I was actually wrong about _.extend, it's not good for inheritance. Package.json It's easier to use a single file instead of uploading/downloading thousands (node_modules), also keeps your repository cleaner. I meant the global variables after looking in your js files and not seeing modularization. I guess the test runner is wrapping everything in a closure so it's like nvm aswell.
Thank you, this is exactly what I was looking for. So there *has* been a dramatic slowdown.
Just got 18200ms on iOS8, so there is definitely something. Maybe post this on the apple developer forum
JavaScript / HTML5 is a viable option for both android and iOS. Here's the advantages: 1) you can develop on any machine 2) desktop browsers are much easier to debug than mobile browsers 3) on a good day, you'll be able to to use the same code on any OS. 4) modern HTML5 is capable of mobile input including touch and tilt input 5) the latest mobile browsers are quite capable. 6) with a tool like phonegap, you can convert a web site to an installable app It's not perfect, though. 1) performance is not quite as good as the native formats. 2) it can be difficult to monetize a mobile game 3) nothing's ever perfectly cross-platform 4) the standards are emerging, so it's kind of a moving target. I've written a book on cross-platform HTML5 Game Development, and you can see all my examples here: http://www.aharrisbooks.net/h5g/ I've also got a course on Udemy if you're interested. Here's a game engine designed to be extremely simple to learn: http://aharrisbooks.net/h5g/documentation.html and here's a practice tool using the engine: http://aharrisbooks.net/h5g/simpleGamePractice.html 
You put the semicolon inside the quotes. That is incorrect punctuation.
return Bro(isSomethingTrue).foReal()
You're right. Corrected.
Great article. I've done this before as well. Here's a gulp file snippet that also handles watchify. var gulp = require('gulp'), browserify = require('browserify'), es6ify = require('es6ify'), source = require('vinyl-source-stream'), watchify = require('watchify'); gulp.task('build', function () { var bundler = browserify({ basedir: __dirname, extensions: ['.js'], debug: global.isDevelopment, cache: {}, packageCache: {}, fullPaths: global.isWatching }).add(es6ify.runtime) .transform(es6ify) .require(require.resolve('./index.js'), {entry: true}); // This has to come outside the options... var bundle = function () { return bundler .bundle() .pipe(source('dist.js')) .pipe(gulp.dest('./')); }; if (global.isWatching) { bundler = watchify(bundler); bundler.on('update', bundle); } return bundle(); }); gulp.task('setWatch', function () { global.isWatching = true; }); gulp.task('setDevelopment', function () { global.isDevelopment = true; }); gulp.task('default', ['setDevelopment', 'build']); gulp.task('watch', ['setDevelopment', 'setWatch', 'build']); gulp.task('release', ['build']); **Edit** Seems there is an issue with browserify adding the $traceurRuntime if you put source: ['./index.js'], inside the browserify options. Use: .require(require.resolve('./index.js'), {entry: true});
Just be "affraid" of spelling...
Well, I am specifically concerned with what happened on Safari between ios7 and ios8. On ios7 it runs in 90ms, on ios8 it jumps to nearly 10000ms.
Either store `document.bob.elements.length` in a variable or use a reverse for-loop. `document.bob.elements` a live node list (`HTMLFormControlsCollection`) which can theoretically change with each iteration. Doing a comparison with its `length` property is expensive.
Well this is JavaScript not java and you are asking about domain logic dealing with your specific problem and no programming concept. We don't know what those integers mean. They can't be hours worked in the last four days as you have 25 listed. But I'm not sure what they could mean that they would output the equivalent in weeks time of a full time employee. The best I can help is that a full time employee often means that employee works forty hours a week. Since you don't have any programming questions it sounds like the problem is find out how much this person works and how many weeks time that would be for a full time employee. 
No i don't believe I am, that is the instructions i was given. =/
Removed, please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
If you need ordered data you should use arrays... Or use existing solutions for comparing objects. Trying to order dictionary keys is a very bad idea. 
After reading through the docs...I'm kind of confused why models would need to have listeners attached to them. Seems weird.
http://www.reddit.com/r/javascript/comments/2gxjob/brototypejs/cko7k2p
To be notified when they change?
Whatever floats your boat, we're sharing with the open source community how we develop things so everyone can learn some lessons: https://github.com/flightjs/flight/blob/master/ADOPTERS.md
Isn't that the part you program in yourself?
Hmm, probably a good place to start would be looking up the model-view-controller pattern to get an idea of how that might work. 
I sort of disagree with you in the performance cost, but I wholeheartedly agree on the "use the name of the thing"! 
In 1.1, is that self-invoking method using "!" on a named function actually best-practice for any case?
I think it was a great start but frameworks like Ember and Angular have improved on its original formula to the point that it's a bit outdated. I don't like that : * BB models can't have nested sub-objects without an additional plugin. * models are built to work only with RESTful endpoints out of the box -- not nearly all APIs are RESTful * the amount of boilerplate you have to write to do simple things like display a list in a select element the "Backbone" way (model, view, collection, collectionview) 
Here's another way of doing it using a the revealing module pattern: http://jsfiddle.net/dumzqc0g/10/ This gives you a nice little API for your quiz so you can make calls like: Quiz.score() or Quiz.goto(3) Read more about it here: http://addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript
I have no idea how exercise thingies work: https://cloudup.com/crbkx0DwdV2 :/
I appreciate the tip. It shouldn't be 10000ms worth of expensive though... should it?
I stopped reading here. It's not a good practice anywhere, as experienced by fat and Crockford in their little hissy fit over semicolons in the bootstrap project.
Also... not sure if you're aware: if(document.bob.elements[x].value == "checked") This isn't going to accomplish much -- lacking a defined `value`, the `value` defaults to `"on"`, and checking the box does not change that. You can of course assign a value with an HTML attribute or via JS. Instead, you probably want: if(document.bob.elements[x].checked) Again, I recognize that you probably know better, but thought it was worth mentioning at least.
Yeah, reading further, I get the impression it's more of a "JavaScript Crossword Puzzle" type of exercise than a "Tips Tricks and Gotchas"-based challenge set.
Yeah but harmony mode only has some of es6's features. Most notably missing are classes.
It gets a lot flack these days, but it's still a decent framework. Most notably, it's one of the most **un**opinionated frameworks out there. An _opinionated_ framework is one in which there's usually only 1 way to carry out each specific task (or set of tasks), whereas an _unopinionated_ framework gives you a lot of flexibility to carry out your task(s). Each style has their own strengths and weaknesses, and it really just depends on your situation which would be more appropriate (and might even boil down to personal preference). The point of this rambling though, is that since BB is so flexible, I've seen it used recently more as a foundation framework, providing an environment for other frameworks (either published or in-house) to build off of. My last big project consisted of retrofitting a framework to a legacy application, which tentatively had to support legacy IE (7/8). Angular, Ember, etc. couldn't support that requirement -- either because they technically didn't support it and/or because it required tons of polyfills and performance was so poor. The legacy app also had a tremendous amount of different use-cases, which the opinionated frameworks didn't support very well; I spent more time trying to bend and break the framework than I did implementing functionality. While Backbone generally requires more code overall, it's exceptional flexibility let me retrofit it with relative ease.
It's not necessarily a reason to avoid it, but something we should be conscious of. If performance matters, and you're creating and binding closures as part of some tight loop - then an early refactor that involves creating a reference outside of the closure would reduce the overhead of binding by &gt;30x (http://jsperf.com/bind-vs-closure-setup/6). How much that speeds things up would depend on how heavily you rely on closure creation. For a great majority of scripts, and web apps in particular, this won't matter. For an async or promise library: it might. Given the thread, I think it's fair game. If you've got some tight loops creating these closures for some program that's CPU bound, then I'd certainly avoid bind. But we probably shouldn't be creating/binding any closures in a tight loop - I've never seen an algorithm that can't be written without closures. I guess my 2 point list could be reduced to a single item. You're right that performance isn't generally an issue. I mostly despise the use of bind on large function expressions. It's like "Surprise! Just when you thought you had figured out this code". I feel like avoiding bind is good form, just like exiting early out of functions. Makes things easier to read, and means less context to juggle. 
I found them in github repo https://github.com/tcorral/javascript-challenges-book
Genuinely curious...what's the benefit of using gulp? This looks just like a gruntfile.
Nexus 4: ~ 20000 ms... 
This feels quite amateurish. I mean things like using `.toValue()` on a `Boolean` but still keeping the `!!` make it look like things are there but not completely understood. Or confusing `x |= y` with `x = x||y` when it's actually `x = x|y` (and the *solution* to that one is just gibberish, not simply bad grammar). Or multiple other examples.
You can also just use the native forEach/map/reduce/etc. They lead to cleaner and tighter code and can just be polyfilled for old browsers. Your "clone" method will get unwieldy as you add more members to the player object. I would suggest [deepcopy](https://www.npmjs.org/package/deepcopy) or something, and making increment its own function. This way you can choose whether to increment-in-place or increment a copy. Example: var deepcopy = require('deepcopy') function increase(p) { p.points++ return p } function total(a, b) { return a + b.points } var t = deepcopy(array) .map(increase) .reduce(total, 0) EDIT: `forEach` would probably be better than a `map` here. It's a bummer you can't chain it.
keep on going! if id be learning js now it would be for sure from that blog! everything well organized there! good job!
This is a very well written and entertaining intro to JS functional programming. My only suggestion would be to focus on the built-in forEach, map, and reduce. Every browser that matters, and Node of course, support them natively.
You need to format your code properly. To make it appear properly formatted, put four spaces in front of each lines. If that's too much of a pain, share the code using jsfiddle.net Code should look like this: // A comment function () { … }
[unorthodox performance](https://www.youtube.com/watch?v=NthmeLEhDDM) - fascinating talk from the creator of lodash. Native forEach / map / reduce actually have low performance relative to a lot of github/npm modules that i use in projects daily. But it's not all about performance , there's increased cross-browser compatibility, as well as functional composition that leads to more maintainable code. The 'native' functions are just one of countless implementations of a relatively simple for-loop pattern with some checks. And i'm not convinced that the native API has any benefits relative to what I'm using now.
it looks like they're trying to start an NPM vs bower-duo war O_O Although I agree with Matt's position on client-side code, and how one package manager (NPM) shouldn't dominate the industry, bower is terrible. NPM is the largest module db in the world, with a great backend infrastructure and version management. It complements github. Github is not built as a component db version managing system, that's what NPM is for. It's actually counter productive to compete with NPM and browserify. Browserify is absolutely insane, maintained by some of the most prolific developers I am aware of at the moment. There's already such an amazing plugin ecosystem with browserify / gulp /grunt, and browserify is completely modularized. Instead of combining forces with bower, which brings nothing to the table in terms of technological benefits (heroku, http, really??). NPM, browserify, they are modularized, they can be remade, or at least inspiration. Creating a better search algorithm for NPM, recreate / reuse the commonjs modules in browserify, makes more sense to me. I think duo sounds amazing, and I'm sure that the creators of bower are amazing people, but it just seems wrong unless you guys come together and recreate something that's fully composable with NPM / browserify. 
I tried in OSX Chrome and it took 1500 ms.
jQuery UI, Foundation, twitter bootstrap are the main ones.
Out of interest, what issues have you had with `js-beautify`?
That would be a 0.1% chance...
Underscore usually uses native methods when available though (as seen on the commented source code http://underscorejs.org/docs/underscore.html). Also I guess Lo-Dash is better nowadays, but I like Underscore doc design better ...
Have a look at https://github.com/rdio/jsfmt
You can also use uglifyjs (the newer one, v2) from the command line (installed using npm). Not sure that it will provide the exact results you need, because formatting of source code is of course highly subjective.
Gulp is a newer and similar build system to Grunt, with some added benefits. 1. Streaming - no need for intermediate tmp files in builds 2. Code vs Over-Configuration 3. Concurrency Gulp's concurrency lets you typically build projects in a fraction of the time it takes Grunt, which is achieved through [Orchestrator](https://github.com/orchestrator/orchestrator). If I recall though, Grunt 1.X is going to adopt Orchestrator so then it will likely be Code vs Configuration. Both build systems can achieve the same thing, so it does boil down to personal preference. Forewarning, Gulp is still in it's infancy and there are quite a few 'gotchas', but the documentation has gotten better and the community has tutorials all over the place.
Anyone have any experience with this?
Last commit was 9 hours ago so probably not.
Looks like it's probably a fun little project for the developer, but I can't imagine using it over something with a bit more history and community. Zepto.js, say.
This is literally my first alpha release. So it's new. At my job, we aren't really ready to stop supporting IE8, but I'm trying to get this ready for when we do, which should be soon. I'm releasing this now so that the community that may end up using it can weigh in early on what sucks or what should be included.
I'm going to do my best to get to that point. 
You have probably not seen ki.js: https://github.com/dciccale/ki.js Also, for older browsers, I have created m².js: http://atk.github.io/m2.js/
Wow that's mighty small. You should convert your QSA nodelist to an Array and add delegation to your "on" method. Would make a big difference and not add to much size.
There's a version of jQuery that strips away support for legacy browsers and uses ES5 features. It's not as lightweight but you should know about it.
You know, it's not just about stripping support away or using the es5 stuff and new browser API's. It's also about size and performance. My each() uses for instead of forEach because of that. I'm doing my best to not only use the new hotness, but use the old hotness if it's faster. 
ki.js has an ie8 version. m².js is meant to work even on older ie versions if neccessary. But even IE8 has a problem with conversion from DOMNodeCollection to Array.
You really need to add promises. Perhaps building on when.js or D.js would be a good place to start. http://malko.github.io/D.js/ https://github.com/cujojs/when
m^2 sports the cool dream feature (optionally selecting compatibility and functionality) I mentioned in my other post... *This is really cool.* Nevermind OP, I won't make my dream library, it looks like /u/a-t-k may have beat me to the punch ;)
Feel free to fork it and improve it. Or if you have feature requests / ideas...
Great call, thanks!
IMHO own jQuery implementation is a nice programming exercise but not something that everyone should release and push for others to use.
Is there something in the source you see that you don't like? 
Did you click the link? This basically wraps modern vanilla JS with the jQuery syntax that everybody already knows. If you prefer document.querySelectorAll() over $(), by all means continue to write it that way.
I did click the link, and I get the point, however no matter how efficient the conversion, it can't be faster than simply using the JavaScript features directly. jQuery has been a crutch, and for many years a necessary one. Why, now that we don't need it, do we insist on still using its syntax?
This is as fast as the vanilla js equivalent. Because it wraps the vanilla js equivalent. In some cases faster, like my each method for example. Native forEach isn't as performant as a regular for loop, so my each uses a for loop instead. http://jsperf.com/for-vs-foreach/37
I agree with you about the syntax, but the performance differences between calling document.querySelector and wrapping that in a differently named function are so negligible that you are splitting hairs. You're much more likely to see bottlenecks in the DOM manipulation before you see any measurable bottlenecks in the wrapper/API around it. 
This is the reason it is still my go to. I can add what I need, when I need it and the rest of the time it gets out of the way. It also eases folks into the SPA world with limited learning curve which is great when trying to delegate tasks to entry-mid level engineers or seasoned devs new to the paradigm. For complex use cases I'd still argue that you will be offroading with all the other "comprehensive" frameworks and Backbone's predictability would have me sleeping better at night in most situations. Granted, my opinion is clearly skewed. 
Thanks man
Nothing in the source. I just don't see why to create jQuery again and again (except for practice).
Well , a couple reasons really. I want to use things like querySelectorAll and matchSelector/matches, but writing document.querySelectorAll and then converting the result to an array is not easier than writing $(). So this basically allows you to use those, but with the jQuery syntax that everybody already knows. I'm focusing on size and performance too. At the end of the day, you could write plain Vanilla JS, but if you do something like siblings() more than once, you are gonna write a utility method for it. Pretty soon you'll have a utility library. What separates the utility library you will undoubtedly end up writing, from doing something like this?
&gt; the performance differences between calling document.querySelector and wrapping that in a differently named function are so negligible Yea, doing some wrapping in JS-land is virtually free when you talk about DOM interactions. Interacting with the DOM (and the recaluclations/reflows/repaints it causes) is the expensive part.
Since Promises aren't related to DOM operations, couldn't you just have a separate library for that? Reinventing a new promise lib doesn't seem like a good idea when there are already several good implementations. 
Agreed. Great for the author to write, but not for anyone to use. If really like your other work, specifically Slick is amazing, and you're obviously a really smart guy, but I really question the potential cost of something like this over such a tiny gain. Would you really let someone implement a marginally smaller/faster version of jQuery at the cost of being completely untested and mostly undocumented? If it was my business and livelihood, I never would. Businesses want stability, not the extra 15k and 30ms.
There are unit tests, but they aren't 100% done so this is 0.0.0.1, when they are introduced, it will hit 0.0.1. I'm not aiming for 100% jQuery compat, but I wanted to cover the most used stuff. Any recommendations on something it doesn't do, that you think it should?
As far as dropping animation or other things go, you can always do a custom build of jQuery. Getting the file from a CDN is very overrated. I'm not sure how the extra 25k of jQuery is such a problem when the average page size is 1MB or more. 
The average DOM collection has what, maybe 10 elements on average? Given that, it doesn't seem that any of those methods are too slow.
These are (mostly) just global variables and not singletons. If global variables aren't mutated, then they are no worse than a constant or a function definition. Singletons provide two features "guaranteed single item", "global access". Global item is harder to test, but sometimes simplifies things significantly, but you may give up some modularity and may introduce hard dependencies in the process. And "guaranteed single item" is sometimes necessary to protect resources. As usual, it depends... Basically, unless you can formulate the pros and cons of using Singleton in a particular place, then don't use it.
I like them, especially in JavaScript. They are difficult to test, though.
browserify is your friend
If you mean "learning how to make everyone who tries to make sense of my code hate me" by "improving Javascript skill", you are on the right track.
At my shop, we stay away from singletons, because like egonelbre said, they do two things: they are globally accessible, and mandate that your application only have a single instance. In almost all cases I think you will find that you don't need both of those, and almost always, it's the guaranteed single instance. You might think that it would be useful for your application's database access class, because you only have one of those... but that's really unnecessarily restrictive. What if you need to talk to two databases someday? You just locked yourself in, and now need to rewrite quite a bit of code. Basically before you use a singleton, make sure you need both of its features.
...and yet here I am... just brogramming along. 10/10
*average != good.* I like my web pages to weigh less than half a megabyte.
It's not just the speed of the CDN that's beneficial, it's also that Google's CDN jQuery is surely already cached by any user's browser.
Yup that was the issue didn't do a &lt;script&gt; tag for the jquery. Wow! Thanks a ton guys!
I don't think that's the point with this code...
JQuery's biggest problem is the absolutely horrible API. It's full of good ideas hacked together horribly. Now you're taking the best of those ideas and replicating the bad parts too. Nobody needs a smaller jQuery when jQuery is right there, cached on several CDNs. In those rare situations that I do care to have jQuery very small (security, for example) the costs are probably not significant enough to warrent research into smaller jQuery clones, let alone the testing needed to check integration. 
You can check Webix (http://webix.com/), a lot of widgets for sure and all of them can be initialized without markup. 
The biggest problem - IMO - with Singletons is that it makes it hard to write unit tests. Writing code such that there is only ever a single instance that gets passed around solves the same problem, makes it easier to unit test - you can pass a mocked version in for the tests instead - but does make the code a bit more verbose. 
In that case I highly recommend lodash, or that you at least read the source code of underscore.
As a matter of fact, it was
I still stay clear of using them simply because they tend to tie your hands on changing functionality later if needed. The popular example is designing a game world. If you think to yourself, "There's only one world... I'll just make it a singleton and things will be easier." You limit yourself from being able to put in other dimensions or doing nifty things with time shifting the world and whatnot. There are very few, if any, times that I find a singleton beneficial.
one key point about jQuery is that it always works, even if you pass it undef/null/emptyarray/etc... from what i see in the implementation of this, it's pretty strict on what it expects.
This is on purpose. jQuery doesn't "work", it fails silently. Thats not good. Allowing it to fail will result in a smaller codebase, and also knowing that your code actually works, rather than having your end result be skewed by silent errors.
you have a point, to certain extent. I think it's pretty cool to do this: $(myImplementation.unselectedItem()).hide(); Knowing that unselected item in the implementation could be undef.
O_o This refactor is very common in this kata... Anyway, I'll practice with a more complex kata where it makes sense to apply design patterns.
I don't think the idea is "replace jQuery with this, because I say so!" vs. a new possible tool that could be used. jQuery was once an alpha with a small community. As was Dojo. And MooTools. And Prototype. This is a beginning - just because "Simpsons did it" does not mean it's not worth pursuing as both a personal project and a professional endeavor.
Blah blah blah - beating the dead horse in the comments :) I like it. Both as a personal programming exercise, and as a potential alternative. Keep it up! But do take the comments to heart - especially the ones talking about duplicating bad jQuery code (I don't have any examples at hand, I'm going from the comment thread), and improving testing/support/documentation.
When it comes to a library I adopt for my stack, I care about roughly the following things: * Speed (of running, writing new code, etc) * Reliability (i.e. Test coverage , activity level and bug fix speed) * Browser share (Arguably a form of reliability, but crucial enough to be promoted to a first order concern) * Ease of use (correctness, intuitiveness, consistency) * Popularity (So I know I can hire or contract, so I know that one person leaving won't orphan the library, and also for the social signaling) * Size of the library To only talk about library size (which is an issue on the first page load, and then on reliability by way of complexity) is an "engineering smell." It suggests that this is a thought experiment that focuses on over optimizing one of the important metrics of total cost of use. It suggests that you solved "A problem" but you didn't really solve "The problem" - a difference that is akin to "The truth" and "The whole truth."
If you read it, you would see that I'm actually more focused on using native browser functionality as well as performance. Relying on those, and not supporting the older browsers, just happens to result in a small code base. Plus I wrote this in jQuery style, so that everyone already knows how to use it. So the only point of yours that isn't met would necessarily be reliability, which I'm working on right now. It's in alpha. As in 0.0.0.1.
Totally. I'm not looking to duplicate any bad code, and I'm currently working on the tests. Testing this is special, because browserless unit tests only go so far. This needs to work on a bunch of different engines, and phantomjs isn't going to cut it for all my testing. I'm working on a solution that will allow me to load a test page on each device and get feedback on individual unit tests.
Have you tried RazorFlow dashboard framework @ https://razorflow.com? It lets you build all those charts as well as full dashboards that work across devices. And the licenses are unlimited - websites, SaaS apps, on-premise products.
I agree that it's awesome. FYI, Wikipedia has articles on every one I've looked up.
I've used this in a production app and have to say that it took me less than 10 minutes to incorporate it. Very good &amp; simple documentation and very little boilerplate needed. I just wish there were an option to allow for diagonal movement through 2 corners. I know that it doesn't make sense in reality, but it is necessary for getting mobs of monsters to behave in sensical ways. I ended up editing the source to get it to work.
Angular also does this. 
I wish everyone would stop writing plugins that build off jquery (e.g. bootstrap). Makes removing it as a dependency impossible.
For good reason.
Good write up, seems like a nice intro for beginners, but this post has some inaccuracies: - `i` is leaking in those `for` loops. - `sort` sorts lexicographycally by default, if you want to sort numbers, you'd have to pass a sorting function: `xs.sort(function(x,y){return x-y})` - The DOM doesn't return arrays (I wish), but array-like objects; these are objects that have numeric keys, and a `length` property, but don't share any array methods. - And a note on `this`, -- *"What is happening here is the function is making special use of the this keyword, it informs the program that we are dealing with this particular instance of the object. This is how each object is able to associate the correct data to it."* -- That seems a bit misleading, there's nothing special about `this`, and how it works. `this` is one more implicit argument, that depends on how the function gets called, it has nothing to do with instances of objects.
Somewhat hard to decipher exactly what you are trying to do from your post... a jsfiddle would help. I hacked together this thing that might be close to what you are looking for? [jsfiddle](http://jsfiddle.net/n83qf0nb/1/)
It is a lot more OO than static methods.
I read your marketing copy. I saw "zorg small" and a bit of native browser functionality. What you know as the author and what your writing conveys to readers are not 1==1. * Speed of using jquery syntax is covered. * Performance testing vs jquery is not there as far as I can tell. You're assuming that by using native calls your library will be faster. That's a reasonable assumption but 1) that insight requires a moderately high level of knowledge of how your library works and 2) that is an assumption that could and should be tested. * Reliability, we agree. * Browser share is absolutely completely and definitely not covered -- You say modern browsers but don't define what that means. Nor do you have a test report or an a/b/c list of browsers. * Ease of use is covered implicitly by JQ syntax, but since you've only covered "some of JQ," you only get so many points there. A chart of "JQ features vs cash features" would help get you fuller points. Also, is it 100% jq syntax or "mostly JQ syntax." From what you've written it isn't clear. * Popularity is currently a zero, and this one will take time. There's not much you as an author can do to move this needle. A "used by X in production" and a "core team of 5+" statement would help allay the concerns before you get to popularity. * Size wise, you don't currently say how big JQuery is. Why would I have that knowledge on the top of my head? Is 6.8kb minified and gzipped or raw? (you need to show both) Jquery is 19KB, Minified and Gzipped so the primary value prop you're putting out there is a savings of less than 20 KB on an initial page load. To be clear, this is feedback not criticism. I think you've got something potentially interesting. Potentially because so many of my questions weren't and aren't answered yet -- marketing copy is a key feature of an OS software project in 2014. I see 5-20 new open source libraries a week. If it takes longer than 5 minutes to smell test yours, I'm probably going to dismiss it for now unless the pain you felt as the dev is exactly a pain point that is sore for me right now. 
&gt; Performance testing vs jquery is not there as far as I can tell. You're assuming that by using native calls your library will be faster. That's a reasonable assumption but 1) that insight requires a moderately high level of knowledge of how your library works and 2) that is an assumption that could and should be tested. I actually opt for non native where it has proven via perf tests to be faster. &gt;Browser share is absolutely completely and definitely not covered -- You say modern browsers but don't define what that means. Nor do you have a test report or an a/b/c list of browsers. I'm still on the fence between ie9+ and ie10+. Right now, it's ie10+, but this is alpha so I'm still figuring this out. &gt; Ease of use is covered implicitly by JQ syntax, but since you've only covered "some of JQ," you only get so many points there. A chart of "JQ features vs cash features" would help get you fuller points. Also, is it 100% jq syntax or "mostly JQ syntax." From what you've written it isn't clear. Great call on the chart. &gt; Size wise, you don't currently say how big JQuery is. Why would I have that knowledge on the top of my head? Is 6.8kb minified and gzipped or raw? (you need to show both) Jquery is 19KB, Minified and Gzipped so the primary value prop you're putting out there is a savings of less than 20 KB on an initial page load. It's 6.8kb minified, 2.1kb gzipped. jQuery 1.11 is 98kb minified, 33kb gzipped
Do either of these things allow event delegation to children? I didn't see them mention it. OP's code does mention child event delegation.
Agree! I've done some changes: - Added package.json - Ignored node_modules directory But I've read about modularization and... I think is a an overkill for a kata. For example, if I want to use browserify with karma (test runner), I have to follow this link: https://www.npmjs.org/package/karma-browserify I don't know if there is a simple way.
I would much rather it was adopted as standard syntax. It makes more sense, and is more concise.
not exactly, i want MORE parameters: in your jsfiddle-example i want the possibility to select/deselect all food (like working in you example) OR i want the possibility to select/deselect all items with a state of origin e.g. from england, china, usa ... OR i want to select/deselect all items with are owned by "billgates" something like: &lt;input type="checkbox" name="sports" country="england" owner="billgates" value="football"&gt;Football&lt;br&gt; &lt;input type="checkbox" name="food" country="england" owner="donald" value="Butter"&gt;Butter&lt;br&gt; how could this be done? thx
I was surprised they didn't at least link to them.
Well its all about how the idea is presented, isn't it? Calling something a "jQuery alternative" vs "Hey I have this idea I'm exploring, help me out" is different. Presenting it as an alternative suggests that its production ready, and I think that isn't being honest. After rereading the page it says that its only for closed projects, but I missed that on first read, and lots of other people probably do too. I'm just weighing in on the non-speed reasons that people use jQuery, which are ignored in the marketing, but are actually very important.
Not yet, but that's a nice feature request.
While I understand improving upon alternatives, im just baffled by the number of these types of lightweight jquery replacement libraries with the only virtue of pretty much being lighter weight. Is it really a concern nowadays that a library is 6kb or 20kb or even 100kb? jquery is so frequently found in a browser cache that I just dont get it.
I didn't understand the point about 'leaky arguments'. It's hardly explained. Otherwise, good article :)
Only until I have implemented it... :)
Some things just work well as a singleton. For example, getting the current frame in a render loop. The problem with passing such a variable around to all objects that need the current frame is that it takes a lot of human work to pass the variable through the call hierarchy. However having singleton access hurts testability. A good compromise is to allow the singleton reference to be overriden for a class of objects during testing. This can be achieved by using a class-level static variable that when set essentially overrides the singleton access: class Foo { static A* s_a = NULL; static A* get_a() { if(s_a) return s_a; return A::Singleton(); } }
you can add multiple classes to an HTML element: &lt;input type="checkbox" class="class1 class2 class3..." /&gt; If you were in an HTML5 environment only, you could also use the data attribute.
you could prefix the attributes with data-* so something like &lt;input type="checkbox" name="food" data-country="england" data-owner="donald" value="Butter"&gt;Butter&lt;br&gt; and then use those attributes in the selector... Check out the updated [fiddle](http://jsfiddle.net/n83qf0nb/2/) if this doesn't do the trick you will have to make a fiddle further demonstrating. 
You could try building a rough waveform like SoundCloud, and then match `video.currentTime` to the waveform. If you allow the user to zoom in/out you may need to re-build the waveform with more detail. 
There are lots of better ways of doing it. The one I suggest is writing in CommonJS and using a tool like Browserify to bundle everything together. You can just run `watchify main.js -o js/bundle.js` and the bundle will constantly get updated when you save your JS code. If you have a bit of extra JS code for multiple pages, I wouldn't sweat it. The browser will cache it after the first HTTP request, anyways. If you're finding your code is getting really massive (like 1-2mb+) then you might want to consider webpack or a browserify plugin to split it into smaller bundles.
think that one is working perfect: thank you very much!!!!!!!
Not really... once you start working with smaller modules and moving away from large frameworks like jQuery it makes more sense just to expect simple functions. [Examples](https://github.com/npm-dom)
Btw, if you haven't already seen it, you might be interested in [npm-dom](https://github.com/npm-dom) which has a similar focus of small code and (mostly) modern browser compatibility. 
All valid points! I personally prefer the native functions since they don't require an additional library, are easier to write, and easier to read. And it's very true that they're not that performant now, but hopefully that will improve overtime. If performance is important then by all means lodash is great!
5 times that fast is quite a difference. For ten elements it wouldn't matter of course, but I frequently deal with thousands of elements.
You know, I don't get the whole 'static methods are bad/not-OO/whatever'. If a method doesn't need to interact with state, what benefit is there in forcing the client to allocate memory just to call it? Now, static methods that mutate global/static state? That's usually pretty icky.
We're talking about syntax here. Also, I'll throw in talking about chaining. None of vanilla's collection methods chain, and that makes jquery 100% more useful and more succinct.
I actually considered that and made a [proof of concept](http://jsfiddle.net/daofw1g3/8/) and it seemed to work. However, when I started testing it with larger files I ran into a few snags. If I give it a 600meg video/20minute video file it was able to create the waveform. However, when I attempted to load a 1.6GB 90minute video reader.readAsArrayBuffer(file); throws an error. I suspect there is some limit on how large a file the File API can work with. So then I tried just giving it a 80min 35mb MP3 to and the file API works but audioContext.decodeAudioData(....) never calls it's callback function so I suspect I hit another limit in the Web Audio API. It's strange though because &lt;audio&gt; and &lt;video&gt; have no problem handling either of these clips on their own. 
if you mean for your own code. Using A* for example, it would be a matter of your function that determines valid surrounding tiles to test against.
It is perfectly fine as a thought exercise, don't get me wrong. Debugging and testing gets harder as the complexity increases, though. I would personally prefer reading something like this: var fizzBuzz = function(idx) { var fizz, buzz; fizz = ((idx % 3) === 0); buzz = ((idx % 5) === 0); if (fizz &amp;&amp; buzz) { console.log('FizzBuzz'); return; } if (fizz) { console.log('Fizz'); return; } if (buzz) { console.log('Buzz'); return; } console.log(idx); }; var idx = 1; while (idx &lt; 101) { fizzBuzz(idx); idx++; } 
https://news.ycombinator.com/item?id=8351567
What's your testing strategy? I know a prior employer implemented cucumber to test the front end (with some success) and I can't recall the front end framework that another developer used - perhaps it was mocha?
&gt; Some things just work well as a singleton. For example, getting the current frame in a render loop. Until you need to get two frames for two different render loops.
Yep, I'll frequently use jQuery just for event binding/delegation/unbinding.
jQuery is 0kb if they already have it cached from a cdn.
People love looking at the wrong points of their code for performance improvements. The only time the size of jQuery matters is in a single page app that stupidly doesn't use a cdn.
Mocha-phantom but I need something more robust for IE and the rest
I see developers who are new to JS do it all too often, especially if they come from PHP, where the so-called 'associative array' behavior *appears* to work the same in JS, but actually doesn't.
&gt;Every browser that matters Many big websites still have to support IE8, but not for much longer.
Until? You mean "if". And "if" that happens you'd have to pay the cost to refactor the code to implement that feature.
Bootstrap is just a css framework. You still have to write your own html code using there css to style it. 
Looked up firebase: could hack up a clone in a day or two. Totally unimpressive. Extremely expensive for what they offer. 0/10
What are you waiting for? 
Thanks, I'll take a look at this. 
There are dozens of versions of jQuery. Which ones are cached? 
It's useless when you have a database yourself. NodeJS really makes it a breeze to stream data. Except for what they call a rule based security thingy (it's actually based around JSON and eval) there's not much more than a send/subscribe interface.
I hope not too many junior devs are working on big websites. But if they are, QA will catch the incompatibilities.
I'd be interested in seeing the code where you're manipulating thousands of DOM elements per second. In general the DOM is so slow that whatever overhead there is in the loop doesn't matter. And any reflow from manipulating thousands of elements is going to be killer. Note that I'm talking about the *DOM collection being manipulated* and not the total number of elements in the document.
Here's a [link](http://www.reddit.com/r/learnjavascript/comments/2gwodm/build_a_simple_javascript_application_with/) to the referenced post. :)
Using separate function for try-catch, to make an engine happy/ier seems like a bad idea to me. _Except in rare cases when that would make really big difference._ And in general, making code less readable, to gain a bit(?) of performance isn't good idea. Edit: typo.
Both of those statements seem wildly optimistic to me.
 See: event.target (event.srcElement for IE6-8) If you want event delegation, you don't need a library.
[Bluebird uses this method](https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments), see here: * [ast_passes.js](https://github.com/petkaantonov/bluebird/blob/master/ast_passes.js#L175-L255) * [Gruntfile.js](https://github.com/petkaantonov/bluebird/blob/master/Gruntfile.js#L400-L417).
Not that I'm aware of, although purescript-yesod might be worth looking into, if serving the compiled JS from a Yesod site. It's also possible to set up grunt to watch the source directory and rebuild. Note though that Elm does something even cooler: not only is the code rebuilt, but the signals in the application retain their values, and their history over a restart while debugging (I think).
i'm also a JS noob. From what I can tell, you set the variable for i (step) to 4. So it won't change if you declared that variable because it's 4.
All of the jQuery versions on any website the user has visited in the past are probably cached. So long as you're not using some obscure, antiquated, or extremely new jQuery version, you've got nothing to worry about ;)
But it should be changing the src of the original photo to whatever images[step] is. That is why I have it for 4. That's correct, right?
From what I can tell when declaring a variable, you're stating that the variable "step" is equal to the numeric value 4. Not your array object [4]. ~~That would be something like this: var step = images[4], I think.~~ I think for this instance, you'd want to create a for loop that determines the length of the array and cycle through the images. This [stackoverflow](https://stackoverflow.com/questions/8810927/showing-an-image-from-an-array-of-images-javascript) may help 
Yeah, but you... have to... implement that. In a stupid round about way that is impossibly dumb to get working on collections, and guess who already did it? jquery.
 Singletons also make unit testing extremely difficult, if you're into unit testing. 
/r/java ? Also, you're better off asking help questions on stackoverflow.com. Your luck on this site may vary.
1. JavaScript isn't related to Java. 2. Learn how to use Markdown. Indent your code snippet or use fenced code blocks. 3. Capitalize your text properly. 4. Maybe you shouldn't include your real name and (student?) ID. :P
&gt; Testing needed to check integration? How are you doing web development without automatic regression? With the tooling available for the web only laziness is keeping you from automated testing.
Put this code into an event handler that fires when the form is submitted. [Here's an example](http://jsfiddle.net/ybf91kd6/) of an event handler that just pops up an alert
You're invoking your functions in your setInterval calls -- drop the parenthesis from changeImg1 and changeImg2. Also, you'll either need to move your function declarations up or change it to var changeImg1 = function()... Something else I noticed: why are you using setInterval inside another set Interval? This is bad as it'll create an infinite number of intervals that'll keep going. Either set your intervals outside the functions or use setTimeout instead.
1. don't use requirejs for angular projects* 2. profit * async, on-demand module loading is a red herring that always comes up in newbie angular discussions. use a build system such as gulp or grunt to concat and minify your code. 
True enough. If they can't do what you need for a given situation, obviously they aren't useful. I see a lot of unwarranted criticism for use of statics in situations where they work just fine. Edit: You know what? I _just_ realized i was in r/javascript and not r/programming. I'mma shut up now. I make less sense here. 
(Full disclosure: I've worked for Firebase and make my entire living writing Firebase powered apps) I've heard this argument about Firebase being too simple and expensive a few times and way back in the day, I would have agreed. But now, every time I hear this it reminds me of the original discussion of [Dropbox on HackerNews](https://news.ycombinator.com/item?id=8863). Here is a direct quote from the second most upvoted comment in regards to why Dropbox lacks any utility. &gt; you can already build such a system yourself quite trivially by getting an FTP account, mounting it locally with curlftpfs, and then using SVN or CVS on the mounted filesystem. From Windows or Mac, this FTP account could be accessed through built-in software. This user was correct and I suspect that if you wanted you could spend a day, hack up something like Firebase and it would perform just as well as this man's homemade Dropbox competitor. So yeah, you're probably right, you could get something that looks a little like Firebase without much effort. Just like you could make your own Dropbox or Heroku or Youtube or EC2 (heck, I've got a few desktops right here next to me, just as good as Amazon's, right?). The moral here being that "hacked up" versions of products, just about any product, are not that hard to create. Determining the value of a product or service based on whether or not you can hack up a copy of the software is a bit short sighted - after all, there is a lot more to running Firebase than hacking up some NodeJS/Mongo/Socket.io code. Firebase, Parse, Heroku, EC2 - any of these *AAS providers are exactly that, they're "services". They're premium, luxury services and like any luxury service you're paying mostly for convenience. As a developer, lets say you make $50/hr. A common rate in most of the US and coincidentally the monthly price of Firebase's candle plan. If you step away from looking at engineering as something you can do and instead as an investment you start to see why Firebase and other services make sense. If you spent 2 days (i.e. 16 hours) building your Firebase clone you would have spent the same amount of money as if you had just worked on something else for two days and then paid for 16 months of Firebase. That 16 months of Firebase would be 16 hassle-free months with no late-night server crashes or emergencies while you're out to dinner. This is in contrast to your homebrew solution which would *probably* crash, especially if you get a lot of traffic. This is nothing personal, it's just what quickly written code does. So over 16 months running your homebrew solution, lets say it crashes 4 times and each time requires 3 hours of work to patch and set up again. Well that's another $50*12hrs spent and another year you could have just paid for Firebase. I assure you, Firebase hires a lot of very intelligent engineers who work diligently to ensure that not only does Firebase stay fast, stay up, and stay compatible with browsers - but are also willing to stop dinner, put down the fork and fix the servers when things happen. I don't know about you, but knowing that I don't have to worry about DDOS, server crashes, server maintenance, scaling, distributing my system, or - worst of all - having dinner interrupted is pretty darn valuable. I pour everything I got into my code, so spending a little cash to decrease development time and ensure my apps stay up hassle-free, for the world to enjoy is easily worth $50/mo to me. But again, that's just my opinion.
I wrote my own reddit site. Would you mind posting this comment there?😋
There are 3 exceptions to that rant. 1. You're writing for fun. 2. You're writing to learn. 3. Who cares, do what you want. 
How do I use it? like, should I go to google source page and edit the form id? I use Fiddler's built-in script editor(runs on JScript .NET), and I'm not familiar with Javascript.
lol. i didnt realize that either.
IntelliJ does it for me. Extremely customizable.
This is a great explanation. But how does Javascript know how to discriminate between `{}` as a statement and `{}` as an object literal?
Wow. I can't thank you enough. You have no idea how much you have helped me. Thank you a thousand times!
Just one use case (the simplest one): I use MutationObservers to check newly added elements (loaded via AJAX, generated in a template etc.) are select items, and then enhance them with chosen. With a few dozen, sometimes hundreds, of resources on one page (everything is loaded via Turbolinks) and each consisting of about 100-400 elements (displayed information is configurable by the user). You will start thinking about loop optimization then :) Most of the time I don't do anything at all (because only a part of the elements are selects), so the overhead really matters.
Excellent reply. I've found firebase to be an incredible tool that just works. 
I don't see the point of this thing... why not just use an array to store the path? Call stack size would not be an issue then.
Once upon a time, I stumbled upon the code that JSBeautifier couldn't format. I don't remember the source now and I can't reproduce the bug
Requires Java. Too heavy. 
It's actually interesting, on Chrome on a Macbook Air from 2012 the maximum call stack is 1500, but when I run it on my iPhone the limit is never reached. Are the browsers' optimizations that different? Traversal is a recursive operation and hence I thought why not test the limits of JavaScript recursion.
Read about getters/setters in javascript. I think right now it's not supported but in the future you should be able to use your own getters and setters and some native javascript objects have them implemented right now. Another one example would be document.cookie
So, what is the story behind PureScript? I've never heard of it before. It seems to have come out of the Haskell community. Is it a hobby project or something bigger? Looking on github, it has attracted quite a few contributors. Even if they are small fixes, it is still 30 odd people who cared enough to download the source and mess with it. 
Sadly i can't give you +2
it will act weird because you are incrementing the step in both methods. You will skip image after 12000 miliseconds because step will get incremented twice. I would probably do something like this: var images = [ "../Pics/placeholder1.jpg", "../Pics/placeholder2.jpg", "../Pics/placeholder3.jpg", "../Pics/placeholder4.jpg", "../Pics/placeholder5.jpg", "../Pics/placeholder6.jpg" ]; function changeImg(identifier, source) { var img = document.getElementById(identifier); img.src = source; }; function loopImg(identifier, timeout, step) { if (!step || step &gt; 5) step = 0; return setTimeout(function() { changeImg(identifier, images[step]); loopImg(identifier, timeout, step + 1); }, timeout); }; // you can call clearTimeout(timeout1) to stop var timeout1 = loopImg('img1', 6000, 4); var timeout2 = loopImg('img2', 4000, 5); 
The problem with your typical singletons is that they assert something about the global context, namely that they are the only instance of their type. There's nothing wrong with objects that just happen to be instantiated once but don't rely on this as an invariant.
It's a host object. Those can do whatever they want. ES5 added getters and setters, which means that you can now also do something like that. You can do things when an object's property is set and you can also do something when it's retrieved. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/get https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/set
Good write-up, demystified a few things for me. Thanks!
The takeaway is that you need to do this string manipulation only after the form is submitted. How you do that in JScript is outside of my wheelhouse.
Does anyone know how to go about converting a Rails asset pipeline with hundreds of files to Browserify? Can I wrap each file in a module.exports and just start requiring them?
The DOM (document object model – i.e. the HTML element tree, window object etc.) is a host object, i.e. an object provided by the web browser. These don't (have to) work the same way as normal JS objects, as you've seen – the same happens when you set properties of HTML elements in your code. That's part of why jQuery was invented, to provide a more idiomatic, JS-like syntax for doing things. (and of course to abstract away all the awful complexity of making things cross-browser compatible)
The anwser is no, but keep in mind that the user can leave the page in a lot of ways (form submit, localtion.*, ...). Maybe you have a bug in your form submit handler that doesn't prevent the default action.
I started the project about a year ago since I couldn't find a compile-to-JS language which did what I wanted (small generated code, Haskell-like syntax and types). Since then quite a lot of people have started working on the compiler, which is great, since I think the code uses relatively simple Haskell.
Is this a project to do just because it is interesting, or is this something more serious, something you would want to use in the future to develop apps in? 
 Are you familiar with Google Search API? If so, How do I make use of it? Thank you. **Notice**: In bing, when you click submit button, *submit* parameter is generated www.bing.com/?search?q=reddit&amp;go=Submit&amp;qs=bs&amp;form=QBRE Is there any thing similar in Google?
I'm assuming this is the same reason document.cookie is treated as a string, even though it doesn't act like one?
No prob! Keep learning!
http://www.syncfusion.com/content/downloads/ebook/AngularJS_Succinctly.pdf try this one
Perhaps... Give me a little bit
Originally it was just for fun, out of some slight frustration with TypeScript. Then I started using it in production and it allowed me to tidy up some code using sum types, which was quite nice. Now there is at least one company that I know of which writes its entire front-end in PureScript, so there's no backing out now :)
Oh, I would like to point out also the opportunities. Some interesting sub projects from the top of my head: - write some schema converters: JSON Schema -&gt; tcomb -&gt; tcomb-form (working on it) SQL Table Schema -&gt; tcomb -&gt; tcomb-form and get automatically the UI for interacting with data - as explained in [JSON API Validation In Node.js](http://gcanti.github.io/2014/09/15/json-api-validation-in-node.html) if you share the domain between client (SPA) and server (Node.js) you get the server validation for free - write a **generic frontend** to interact with all the JSON APIs: it's sufficient to describe the structure of the payloads as a domain model, plug it in the generator and you get the UI automatically - use it as an engine for products like form builders - a tool for designers to produce mockups in a breeze 
Virtually every fanboy that exists. Apple = shit.
Thanks bruh
jQuery's Wordpress based CMS was compromised, libraries safe. If you haven't visited jQuery.com in the last few days you should be alright. /thread.
Thank you.
&gt; Users who have visited the site **on or around September 18** are advised to check whether they have been compromised by the malware. The researchers recommend immediately re-imaging of the system, resetting passwords for user accounts that have been used on it, and checking whether suspicious activity has originated from it (data exfiltration, etc.). Unfortunately the article doesn't specify what browsers and operating systems may be vulnerable. Edit: Googling "Rig Exploit Kit" reveals it targets IE (duh) but also Flash, Silverlight, and Java. * http://www.symantec.com/connect/blogs/rig-exploit-kit-used-recent-website-compromise * http://blogs.cisco.com/security/rig-exploit-kit-strikes-oil/
Slashdot....now, that's a domain I've not seen in a long time. A long time.
Does the syntax deviate from Haskell at all? From what I've read it looks the same, though my Haskell is a little rusty. I understand that it will be semantically different (e.g. strictness) though.
There are some fairly minor differences, but the gap will probably close over time.
Here's how I would write this: function SlideShow(element, images, timeout){ var timer = null, step = 0; var next = function(){ step = (step + 1) % images.length; element.src = images[step]; }; return { start: function(){ if(timer){ window.clearInterval(timer); } timer = window.setInterval(next, timeout); }, stop: function(){ if(timer){ window.clearInterval(timer); timer = null; } } }; } var ss = SlideShow(document.getElementById("slides"), [ "../Pics/placeholder1.jpg", "../Pics/placeholder2.jpg", "../Pics/placeholder3.jpg", "../Pics/placeholder4.jpg", "../Pics/placeholder5.jpg", "../Pics/placeholder6.jpg" ], 4000); ss.start(); Also, I suggest using [Eloquent Javascript](http://eloquentjavascript.net/) for learning JS.
I'm finna cut a bitch over this shit. Next one of you jabronis that talks about "for loops are faster than Array#forEach" gets a nuclear wedgie.
Just a little performance tip :) You should cache your selectors that are hit more than once so you don't have to keep looking them up in the DOM every time. In your code - you have: $('#one').append(..); | jQuery looks it up in the DOM first then applys the .append every time you call setup1(). If you had a cached selector: var $one = $( '#one' ); outside your setup1() function jquery wouldnt need to relocate the #one again in the DOM https://eamann.com/tech/selector-caching-jquery/ Hope this help! Keep it up 
Okay, fanboy.
Yup, I'm a total fanboy... . . . . . 
I'm happy to hear that. I was worried it would go the other way and become yet another brand new AltJS language (many of which look great, but I'd prefer to invest the time in something that's more of a proven quantity).
nice tool, will come in handy when trying to match a brand. Although not much work involved in getting the hex from the actual brand site. 
&gt; jQuery's Wordpress based CMS was compromised Imagine that 
Hi. JavaScript &lt;&gt; Java, not even a little. Try [/r/java/](https://www.reddit.com/r/java/)
I know this isn't JavaScript, but since they probably didn't know that I'll answer. You should take in two inputs as firstName and lastName and then print them out in whatever order you like. 
Thanks! "Although not much work involved in getting the hex from the actual brand site." Can you explain what you mean with this? 
If they had a good API why did they need language specific libraries? Also: this is also not hard.... See how I wrote it's useless above? Making client libraries for something useless really isn't any help. "sudo apt-get install mysql" and get a client library for any platform in the world. Use MongoDB if you're hot for modern features (sometimes referred to as "gimmicks", but it depends on the application).
Here's a javascript answer `"Doe, John".replace(/^(\w+),\s(\w+)$/, "$2 $1")`
Some day, some day, I'll get the heart to understand how Java works with classes and all. Until that day, I'll keep enjoying life. 
Node is just JavaScript. I haven't found any especially wonderful JavaScript tutorials. To learn Node I originally just watched an introductory talk from Ryan Dahl. That and a knowledge of HTTP, other languages (including some JS), and the code samples made for a good enough tutorial for me. It's pretty simple, and pretty bare. The docs: http://www.nodejs.org/documentation/api/ are good too. Don't be scared, just jump in! Grab the RFC's, the Node docs, maybe a few simple sample apps. No point being scared of water when you want to swim :) (Sorry for being so absolutely useless)
You can do the same thing with user scripts (Greasemonkey) and/or user styles (Stylish), but it requires being able to write JavaScript or CSS stylesheets, respectively, to implement whatever changes you want to see. 
Java – CVE-2012-0507, CVE-2013-2465 IE 7/8/9 – CVE-2013-2551 IE 10 – CVE-2013-0322 Flash – CVE-2013-0634 Silverlight – CVE-2013-0074 http://www.kahusecurity.com/2014/rig-exploit-pack/
jQuery.com suggests otherwise: http://blog.jquery.com/2014/09/23/was-jquery-com-compromised/
Guess where I was today and last week.
nice try. you click it first...
I... did? It's perfectly fine, at least right now anyway.
It really depends on what you want to do with the data and if there's anything more to it than just the number of offices. It's perhaps simpler to represent each building as an array [o1, o2, o3, ..] with oN being the number of offices on the Nth floor. The length of the array is then the total number of floors. Then have an array of buildings to get the structure you described. Your question is not javascript related though.
Removed, this is obviously a recruiting tool.
Basic concatenation doesn't scale with large apps that have complex dependency graphs. Requirejs is a great tool for managing dependencies, especially when unit testing, and the rjs optimizer can build a perfectly concatenated/minified file for production.
To use Angular with RequireJS, you'll need to manually bootstrap your app. To do this, remove `ng-app` from your HTML, and include this code in your main module's callback function: angular.bootstrap(document, ['myapp']); This ensures that all of the dependencies required by your app (including angular-ui) have been loaded when your app is run.
Yeah, I know about those, but it's not as simple as "Customize Your Web" which is what I was hoping for. It's so I can implement it at work and allow others to utilize it - I don't want to have to "support" it so to speak.
Cookies?
You would either need to use some kind of client-side persistent storage, like a cookie or DOM Storage, or else store the value server-side. 
Removed as off-topic, you might try in /r/FireFoxAddons and/or /r/Firefox.
With as many visitors as jquery.com gets I would have expected Twitter to blow up with people complaining about viruses way before RiskIQ said anything. Hm...
You can check GitHub for this - https://github.com/search?l=JavaScript&amp;q=data+binding&amp;type=Repositories&amp;utf8=%E2%9C%93 and use sth like http://rivetsjs.com . Regards.
I know I'm totally late, but I figured I'd chime in with a few things (disclaimer: I'm totally biased toward GreenSock)... - I'm 100% positive that you CANNOT do all of those things in CSS animations/transitions. There are fundamental limitations in the spec itself that prevent it. For example, you cannot animate individual transform components like scale, position, rotation and skew with different easing or start/end times. This is *essential* for most animators. You cannot get an Elastic ease (or several other types of eases). You cannot timeScale things on the fly or seek() to certain spots, etc. You cannot get physics effects or animate along a curve. CSS is fine for simple stuff. It's a nightmare for more advanced tasks. - In terms of performance on mobile devices, in every...single...real-world test (except for 3D transforms on iOS) on every mobile device (I tried 7 of them, from android to iOS to Windows Phone), GSAP was FASTER than CSS transitions. The difference was drastic in some cases. Try for yourself. - Animation workflow is TERRIBLE in CSS. Seriously, I challenge anyone to try GSAP for a few weeks, then attempt a moderately complex animation sequence in both GSAP and CSS and see how it feels. Experimentation is much easier, you can modularize your animation code and nest timelines within timelines, and generally have fun building it rather than pulling your hair out calculating percentages, etc. - There are timing and synchronization problems with CSS animations/transitions in many browsers. GSAP is always 100% synchronized across the board. Most people that I've heard argue that CSS animations are better than GSAP haven't actually taken the time to learn GSAP before drawing their conclusion. There is a ton of misinformation out there. See http://css-tricks.com/myth-busting-css-animations-vs-javascript/ and http://greensock.com/css-workflow/ martimoose and _KGB_, thanks for chiming in with your experience and opinion. We hear from real-world animators like yourself quite often who come to the same conclusion after trying CSS animations and several other frameworks and get utterly frustrated (unless they're doing simplistic stuff), and end up loving GSAP. wiseaus_stunt_double, I totally understand why you'd advocate for learning the open standards spec rather than a 3rd party library. It makes perfect theoretical sense. But many things about the spec are...well...broken and/or incredibly cumbersome, so real-world animators in the trenches need tools that give them the control they need and let them accomplish their goals quickly - I'd humbly propose that GSAP is a far better real-world solution. 
I added Data binding to one of my projects recently. Not sure how you would apply ot to yours, but I was looking on feedback on mine. I put the code for how I have roughly done it on [codereview](http://codereview.stackexchange.com/questions/63266/pubsub-and-two-way-data-binding) As far as I know I have the data binding setup correctly, but im not sure if the way I have implemented it is completely correct ...
Ubuntu Firefox car run Flash, Java and PipeLight :-)
Buildings should be an array of objects, each building object should have a floors property. The floors property should be an array of objects, each object contains details pertaining to the floor. Each floor object should have an office property, which should be an array of objects. Each office object should contain the details for the office. I'm on my phone so this example might be messy: var buildings = [ { foo: 'bar', floors: [ { baz: 'quux', offices: [ { height: 15, width: 12, unit: 'meters' } ] } ] } ];
Is [hood.ie](http://hood.ie/) what you're looking for?
Then I guess i was kinda lucky the other day.. kek
http://zeptojs.com/
That article seems to share a lot in common with this one: https://github.com/petkaantonov/bluebird/wiki/Optimization-killers (also referenced by /u/jcready)
&gt; but I don't want to use an entire MVC framework like Angular or Ember because combining those apps into one html file Can you explain what you mean by this? There's no requirement for a single html file with those frameworks. 
Most of my columns contains only one value except for the first column as there is quite a lot information I would need to place in the table. I have chosen to do this for easy viewing and design purpose. Here is a screenshot of the data in the first column. http://i.imgur.com/cil9TrC.png
I suppose you're right, but the issues I came up against were: * The combination of client-side templating and server-side templating confused the whole page, especially since the {{ braces are used by both Angular and Jinja2 (my server-side templating language) * Having each app as a separate page seems to negate the benefits of a client side framework. You have to wait for the whole page to be sent from the browser each time you change page even though most of it is the same as what you already have (header, footer, stylesheets, scripts) 
VueJS is simply outstanding. It has all the benefits of Knockout but without that whole annoying wrapping/unwrapping of objects that you need to do. It is also one of the fastest frameworks around. Really deserves a lot more credit: http://vuejs.org 
http://addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript Use either the object literal notation (which is what your first example is) or the module pattern if you require private variables. Your second example is just a class pattern, and you said this code of yours isn't a class, so don't use that one.
As for private variables, they are usually by naming convention (although some prefer closures). Group.privateVar_ = 0; For your second example (using "this"), you'd still have to use "new" and you would need to do that only once to fit your criteria which means you'd have to do it in a closure. So, I wouldn't recommend that. 
It looks clever, if not vague. However, what's a good use case for this?
 var name = "Doe, John"; var exessiveArray = name.split(","); var tempArray = []; var abundantIndex=exessiveArray.length; for(var what=abundantIndex;what&gt;=0;what--) { tempArray.push(exessiveArray[what]); } var result = tempArray.join(" "); console.log("and the results are in - ",result); or .. errr .. what /u/bwaxxlo said studentName.split(",").reverse().join(" "); 
Local or session storage would work.
&gt;One of the main benefits of frameworks like Angular is that you don't have to load a whole page every time you change pages. Right but that's exactly my point. The reason you use Angular is to *avoid* entire page reloads right? But if I make my website several single-page apps, then I *have* to reload the entire page whenever you change page. See what I mean? Also it's not that I don't want Jinja to process the templates, because I do (for example to add my shared &lt;head&gt; elements), but the problem is that jinja tries to interpret the Angular braces as its own. Of course if you can define bindings in the tag then that's not an issue. I'll look into it (or possibly Knockout)
Just use an object literal: var group = { func1: function (){}, func2: function (){} }; or, if you need private vars: var group = function (){ var private = 23; this.public = function (a){ return private * a }; return this; }.call({}); wrapping the immediately invoked function expression in parens, if you feel like (not necessary, just a convention to make it clear from the first line that you are assigning the result of the IIFE).
This is exactly what I was looking for - thanks a bunch
Could anyone explain what this line is doing? var child = fn.bind.apply(fn, [this].concat(args)); So it's calling the `apply` method on the `bind` method of the partially applied `fn`, which sets `fn` as the value of `this`. It supplies as the arguments to pass to the function a list consisting of `this` and the arguments passed to the currified function. But stepping through the function, it appears as if `this` is `window` at this point. I'm really confused. I need coffee.
it's a handy way to apply arguments to a function before it get's called. Eg: var alertHi = alert.bind(window, 'hi'); alertHi(); // alert 'hi' var log1 = console.log.bind(console, 'log', 'these', 'args'); var log2 = console.log.bind.apply(console.log, [console,'log', 'these', 'args']) log1(); // log, these, args log2(); // log, these, args The cool thing is it can be attached to any function so this works: 0..toString.bind.apply(console.log, [console,'log', 'these', 'args'])() // that's a zero Date.toString.bind.apply(console.log, [console,'log', 'these', 'args'])()
If you liked this, you should read Javascript Allonge!
Suppose you have a function that takes 5 arguments, and you're going to call this function over and over with the same first four arguments. Rather than: doThing(1,2,3,4,'a') doThing(1,2,3,4,'b') doThing(1,2,3,4,'c') You can instead: thinger = curry(doThing)(1,2,3,4) thinger('a') thinger('b') thinger('c') Of course you could do that example with only bind. But curry gives you a general-purpose wrapper around bind.
You can do "things like tabs where one button click shows a div and hides another" just using CSS. 
[Knockout](http://knockoutjs.com/)
anyone still care about IE6 today?
[UPDATE] loaded on GitHub new version with: - bootstrap add-ons (before + after) - horizontal forms and column sizing - disabled &amp; readOnly inputs - inputs size 
Checked it out &amp; the page has an application error: " An error occurred in the application and your page could not be served. Please try again in a few moments. If you are the application owner, check your logs for details."
http://html9responsiveboilerstrapjs.com/
So, the original article was just click bait?
If your target audience is in China, then yes.
I see what you're saying but there isn't any need for the server side templating here, unless your JS games are already making heavy use of it. Bare bones angular concept here (obviously I don't know the details of your site, I'm assuming it's all games for ease of writing): App has three elements: header-element (includes list of all games) content-element (starts blank) footer-element all css and template html for the above is loaded once on initial page load. data is then loaded (a list of games in this case) and the DOM is altered by angular to reflect them (ie in the example the header is formatted into a clickable list). When you click a game name angular downloads the relevant game html and replaces the contents of content-element with the DOM elements for the game. The header and footer DOM elements never get destroyed, although their contents can be changed to reflect the new client state. I don't think the above is how you were imagining things working, which is why I'm saying I'm not trying to convince you to use a framework (in the short term it'll likely be more difficult for you than going with what you know).
We write internal software for other companies.. "legacy" is going to be stuck on IE6/7 for a long time.
Awesome. Thanks!
I don't really understand the fascination with currying. It rarely seems practically useful to me.
I'm posting this again because I wrote it quickly and it didn't make much sense. I just came here from api.jQuery.com. I was looking at the documentation for `.append()`. Then I wanted to look at the documentation for `.each()`. I searched for `forEach` in the search bar on api.jQuery.com. I was then served a plaintext page with a message along the lines are "Uhhh.. are you guys fucking serious this is still here?" and then he went on to explain it was an iframe injection and he was looking for a job and served no malware. He provided his PGP public key. I'm about to email jQuery about it. I'm kicking myself for closing the page without getting a screenshot. EDIT: Just spoke to s5fs and gnarf on the #jQuery IRC. They confirmed it and they're working on it.
I can't access this domain 2ality.com why?
Another option - var points = coordinates.keys.map(function(k) { return utils.toPoint(coordinates.get(k)); }); // assuming there's a keys property on your collection var meters = utils.getDistance.apply(utils, points); var distance = metersToNauticalMiles(meters); Or purely functionally var distance = metersToNauticalMiles( utils.getDistance.apply(utils, coordinates.keys.map(function(k) { return utils.toPoint(coordinates.get(k)); }) ) ) A lot of my code winds up looking like the second. It's not my favorite, or the best, but it's easy to iteratively develop algorithms like that in a JS console.
Jesus. I was on there on the 18th and today. I got the earlier version of that text page with slightly different content: "I'm looking for a new job, I'm so sorry for this experiment with **iframe**, no one was injured, all files was permanently deleted. Greetz: Umputun...etc. etc." I hope this was all just some stunt to get a job and not what the "experts" are claiming it to be. I'm currently in the middle of a deep av scan and will most likely run a malwarebytes scan as well. What a fucking waste of both my and my employer's time.
Just to clarify, funcName.length does *not* give you the number of arguments. It gives you the number of formal parameters. For instance: function foo(a, b) { console.log(foo.length); // =&gt; 2 // This is the number of formal parameters (a &amp; b). console.log(arguments.length); // Depends on how many arguments were supplied to the function // foo(1, 2, 3, 4) would result in arguments length of 4 }
Can you suggest a tool to use to check myself? I just talked to the jQuery guys on #jQuery (see my edit above).
Are you in control of how that particular column is being compiled? What I would do is make that column's data only the date you wish to filter by, and then use the 'fnRowCallback' function to format the row's data into what you want it to be displayed as. If your court, booked_for, booked_on, and confirmed_on are all passed as separate items in each row's data set then this should be pretty simple to achieve. The 'fnRowCallback' will not affect sorting or filtering, only what the data is being displayed as, so it should preserve your ability to filter with a simple date. Just let me know if you have any more questions!
It serves a different purpose than jQuery, so no
I'm just using Avast to do a deep scan followed by a scan with Malware Bytes. I'll probably hit some other sites for more information on to how to dig even further assuming that jQuery was actually serving up malware. It's such a pain in the ass. Thanks for posting that btw.
Well, it depends on how you arrange your code. As a bunch of functions that never mutate data or as a classes whose internal state is used by methods on its prototype. If you use the former, you will find this auto currying behaviour quite useful as it lets you generate thunks(amongst other things). Think of thunk as a unit of async execution or as a prefilled function which when called with its last required value, like a callback for fs.readFile, calls the internal function and returns the value (gives err/value to callback in the case of fs.readFile). Now these thunks can be sent to other functions and they can execute these async bits only when they want thus preventing the nesting of the function depending on the data inside the callback given to the original async function. Basically, you now have the means to do lazy evaluation of async bits and the ability to run async operations on demand and only when required. This is just one use case. There are many more. It has quite a few uses even when used in a tradition OOP scenario. Things like not having to return a functions from other functions based on conditions, not having to write wrappers, not having to write different versions of the same function based on no of params and/or options etc. Excuse the formatting. Posting from phone. 
Ext 5 has a tree grid, and grid columns can nest anything they like. Not jQuery, and full disclosure Ext doesn't play well with others, but it's an answer.
 var distance = metersToNauticalMiles( utils.getDistance.apply(utils, [0, 1].map(coordinates.get.bind(coordinates)) .map(utils.toPoint.bind(utils)))) 
OK, that sounds pretty cool. But currying is hardly the interesting part of that, or at least it seems that way to me. Currying is just taking a function and returning another one with fewer arguments, or pre-filling in arguments if you like. I dunno, maybe it's more interesting than I give it credit for
There is nothing fancy about currying. The reason it's in the spotlight nowadays is because of the sudden interest in functional programming where all functions auto curry by default. It is a useful pattern though. Well maybe not a pattern but a tool. 
In the future, we'd prefer that you link directly to the project. https://github.com/knoldus/ScalaJs_Weather_Report There's no reason to link to dzone.com, which transparently forwards you to blog.knoldus.com, which then has an inline link to github... there's nothing of value at either of those sites, so just link directly to the source.
[Here](https://gist.github.com/zeusdeux/5b8ade23e9f551ae03f7) are a few examples. There is also a method to enabled function composition that gist. 
I like to space things out and use the indent level of the left edge to represent the structure of the expression, as per OP's first example in jsStyle.md. I find it easier/quicker to skim the code that way, but I know it's very much a personal preference. Here's how I would write those two code examples. var distance = metersToNauticalMiles( utils.getDistance.apply( utils, [0, 1] .map( coordinates.get.bind(coordinates) ) .map( utils.toPoint.bind(utils) ) ) ); var distance = metersToNauticalMiles( utils.getDistance.apply( utils, [0, 1].map( (k) =&gt; utils.toPoint( coordinates.get(k) ) ) ) ); There's a few basic rules I follow. Functions are called like this: foo(bar, baz) If an argument is a nested function call then I'll add an extra space around the inner call: foo( bar(baz) ) If the arguments get longer or more complicated, then each argument is listed on a separate line: foo( bar(baz), qux( wam(bam), wiz(woz) ) ) A similar set of rules for dot ops. Simple things can be chained. foo.bar.baz foo.bar(a).baz(b) If it gets more complicated then I'll stack the dots underneath. foo .bar( a(b) ) .baz( wam(bam), ham(jam), ) 
Use canvas.toBlob() to generate jpeg, then send it with xhr as usually.
Looking at your code, I'd do something like the following. var point = { x: coordinates.get(0), y: coordinates.get(1) }; var meters = utils.getDistance(point.x, point.y); //preferably utils.getDistance would accept a single point object var miles = metersToNauticalMiles(meters); If this was not at the top of the enclosing function, the var statements would be omitted as the variables would be declared at the top.
It's hard to see what you're trying to do, because your code needs a lot of work. Don't use `document.write`. Create elements and append them. write a function you can reuse. It's better to use `myArray = [];` instead of `myArray = new Array();`. A lot of your code is repeating the same pattern over and over again, this is what functions and loops are for. Don't Repeat Yourself (DRY). Your `ribbonImage` array has 71 lines of code. It could be written a lot shorter. var ribbonImage = []; (function fillRibbonImageArrayMuchFasterButWithAnUnnecessaryLongFunctionName() { var url = "http://www.afpaa.af.mil/shared/media/document/AFD-"; for (var i = 27; i &lt; 55; i++) { ribbonImage.push(url + "140804-0" + i + ".jpg"); } ribbonImage.splice(8,0, url + "140814-074.jpg"); ribbonImage.push(url + "140804-066.jpg"); // Repeat this pattern for the rest }());
it is very unclear what you are trying to achieve, and I think you are making your life as a developper complicated. For one you can declare your arrays as such: var name = [ 'Air Force Aerial Achievement', 'Air Force Civilian Achievement', ... ]; That would make it easier to maintain. Same for your images. The url seems to be consistent, so why not store the major part in a variable "urlImages" and then concatenate to the actual path of the file. That would make your life nicer. I am dubious about your ternary tests, and as to why you repeat each of them 4 times, once is enough. You're already there so you don't need to reassign your variable in the true segment: randomnumber1 = cond ? Math.floor(Math.random()*(nameLength)) : randomnumber1; I do not have time to look that up, but I'm pretty sure there's a simpler way to generate 4 random numbers that aren't equal, especially when you then have as many chance to hit one of those already generated number again when reassigning the value. Also, why do you write HTML from your script? Is it really needed or can't you have an HTML file holding your structure next to it? You are writing a style markup, but you don't take advantage of CSS when you space your document with &lt;br/&gt; and &amp; nbsp; Last but not least, can you detail what you are trying to achieve with this buttons? It seems that for now you want us to write it for you, but you don't explain at all what it is you are expecting from this buttons. I assume, that inline event is what you are looking for: onclick=""
It's going to be slow as crap compared to Java.
This. Highly recommend this book.
NOTE: Looping through dictionaries is not guaranteed to be in the order you think it will be.
Crockford, then [Effective Javascript](http://www.amazon.com/Effective-JavaScript-Specific-Software-Development/dp/0321812182), then the Resig above, then you branch out into your interests.
I would recommend JavaScript Patterns by Stoyan Stefanov, Effective Javascript by David Herman and Functional JavaScript by Michael Fogus. And of course every serious JS dev should take a stab at "the Rhino"...
Even if I use things like PhoneGap? PS. Do you have experience devloping with both of them? If so, could you please give me a hint on if it's "easier" to use Java than it it would be to use HTML5/JS/CSS for an Android app.
It was, what phone are you using and what's the issue?
It is all about readability and reusability. To borrow an example from Angus Croll: http://javascriptweblog.wordpress.com/2010/10/25/understanding-javascript-closures/ function converter(toUnit, factor, offset, input) { offset = offset || 0; return [((offset+input)*factor).toFixed(2), toUnit].join(" "); } var milesToKm = converter.curry('km',1.60936,undefined); var poundsToKg = converter.curry('kg',0.45460,undefined); var farenheitToCelsius = converter.curry('degrees C',0.5556, -32); milesToKm(10); // returns "16.09 km" poundsToKg(2.5); // returns "1.14 kg" farenheitToCelsius(98); // returns "36.67 degrees C" vs: function converter(toUnit, factor, offset, input) { offset = offset || 0; return [((offset+input)*factor).toFixed(2), toUnit].join(" "); } function makeConverter(toUnit, factor, offset) { return function(input) { return converter(toUnit, factor, offset, input); }; } var milesToKm = makeConverter('km',1.60936,undefined); var poundsToKg = makeConverter('kg',0.45460,undefined); var farenheitToCelsius = makeConverter('degrees C',0.5556, -32); milesToKm(10); // returns "16.09 km" poundsToKg(2.5); // returns "1.14 kg" farenheitToCelsius(98); // returns "36.67 degrees C" Which do you believe is a cleaner approach? 
async and defer only work on external scripts. [With exceptions apparently:](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script) &gt; in Gecko 1.9.1 even inline scripts are deferred if the defer attribute is set. &gt; Since Gecko 1.9.2, the defer attribute is ignored on scripts that don't have the src attribute
It blocks onload just as any DOMContentReady handler would. There are some browser inconsistency issues around exactly when defer is executed, see https://github.com/h5bp/lazyweb-requests/issues/42
Someone reported this comment, but I don't think it merits moderation. While the tone of the comment is a little harsh, we're not here to moderate tone -- that's what votes are for. Mainly, the types of comments we'll moderate are personal attacks (which I don't believe this qualifies as), and obviously off-topic, troll, and spam comments. So, if you see a comment that you believe fits one of those criteria then please report it. 
Hmm. I was using "reddit is fun." I just tried in chrome, and it works there. Usually they show the same. Strange.
I had to take over someone's first Ember app in the middle of development and I, too, had never used ember before. So I was and still am in a similar situation. As mentioned in the article, one big mistake was working around "the Ember way" by using jQuery for Highcharts and other widgets resulting in DOM state conflicts and a big mess. We didn't use extra views or components everywhere we should have, which would have saved us a lot of headache. It also resulted in some non-DRY code. But being a framework-virgin in general I must say that I was really impressed with how well thought-through Ember is and with how much it helps in getting stuff done. It was very easy to dive in. A big advantage was that I had an app that was already properly set up. Everything was in its place and it was easy to figure out where a problem was when one arose, or how to build something and where to put things.
[JavaScript: The Definitive Guide](http://www.amazon.com/JavaScript-Definitive-Guide-Activate-Guides/dp/0596805527/ref=sr_1_1?ie=UTF8&amp;qid=1411594864&amp;sr=8-1). It's long, but very thorough.
The problem with the var name = [ 'Air Force Aerial Achievement', 'Air Force Civilian Achievement', ... ]; is that I have to have the numbers to use them in a randomizer / comparing them. There are 3 buttons each looking like a different ribbon that will show up differently each time. function show_alert0() { if (name[randomnumber0] == randomname[randomnumberAgain]) alert("Sorry."); } function show_alert1() { if (name[randomnumber1] == randomname[randomnumberAgain]) alert("Sorry."); } function show_alert2() { if (name[randomnumber2] == randomname[randomnumberAgain]) alert("Sorry."); } Is what I have now. I tried keeping it simple just to get any pop up but I can't do that. I have edited the code a lot and need to make a ton of adjustments. 
I am reading this. It's the first of a series. Quite a deep look at how the language works. http://shop.oreilly.com/product/0636920026327.do
I know it needs a ton of work, and I don't exactly understand everything you are saying. If i renamed my images how would they be able to correlate with the name to see if there is a match between the printed text and the image? Can I call variable from a function it isn't in? 
If there is any way like skype or IM we could talk, I could explain what "I think" is going a lot better. Maybe a reddit PM?
I've done both. html performance is typically very poor, I would not use it for a game. I haven't made any games in Java so I can't speak to that, but I found the switch to Java relatively painless coming from daily Javascript. Try some of the getting started tutorials on the android dev site and see if you like it.
I applaud the sentiment. There is always merit in using smaller components rather than throwing a toolkit at a problem. However, providing an alternative would be helpful.
In your second example it's typical to pass in a sentinel value that's not curried, so that future calls can fill in the blanks. Any worthwhile curry function would include a way to do that.
You're confusing currying and partial application. Partial application closes once and then the next call is the actual function with the partials passed in. Currying returns a function that you use to partially apply out to N-arity.
[Professional JavaScript for Web Developers](http://www.wrox.com/WileyCDA/WroxTitle/Professional-JavaScript-for-Web-Developers-3rd-Edition.productCd-1118222199.html)
Thanks, TIL. (not that I write *obtrusive* JS).
Dynatree allows for lazy loading and customizable nodes, might be up your alley: http://wwwendt.de/tech/dynatree/ Currently using for a sidebar menu.
Yes, there is no reason to bring in an entire framework for such a thing -- especially a super heavy one like ExtJS.
In my opinion your design is a bit strange because it relies on a popup blocker being off; that said it can work in the way that you describe: http://pastebin.com/zVZdi3Ek - My modified version of the original html http://pastebin.com/0QrBP6Pv - The file for the popup A couple of things you should know though: I don't recommend trying to make a sleep function work in javascript. It will lock up the browser for the time period you ask it to "sleep" which means you cannot do anything on the page until that particular loop is finished (including events or switching tabs). It is much better to use a combination of setInterval and setTimeout to accomplish the same thing that a sleep does, which requires a bit of different thinking than standard "C/C++" practices. The resizeTo function is barely functional, and only works for popup windows. If you call resizeTo on a tabbed browser window, it just wont do anything. I think this would be much easier for you if you performed this all on the same browser window and just used the html "div" or something within the window to simulate a popup. That way you wouldn't force people to disable popup for your site and you don't have to deal with the resizeTo function not working. 
Pass it in the url.?
I code like garbage, so take this with a grain of salt, but I prefer this: https://gist.github.com/anonymous/eb4eeded9cb710ec2094
Also, I feel that this is particularly readable, even if your tab key learns to hate you: var distance = metersToNauticalMiles( utils.getDistance( utils.toPoint(coordinates.get(0)); utils.toPoint(coordinates.get(1)); ); );
I need to pick up chaining, really.
Updating my browser history on scroll should be added to your list of bad ideas; since I scrolled to the bottom of your document I had to click on "Back" 20 times just to come back here. Not nice. Should only update history on click.
Right there, perfect progression.
Dat nigga D-Crock keep droppin dat good good
Good thing I check comments first. How was the advice? 
Reddit is fun's google fonts bug strikes again 
markdown ;) [marked](https://www.npmjs.org/package/marked)
Can't say I'm a student, but I purchased IntelliJ IDEA a week ago and it is just one bad ass IDE. Previously, I would split work between Eclipse for Java and SublimeText for JS, but there's really no need for either of those anymore. Don't get me wrong, SublimeText is awesome... Eclipse is a bit awful. Working with a single editor is just more organized and easier.
If you don't like mixing presentation with logic maybe u should try [EmberJS](http://emberjs.com/)
Can't recommend this book enough.
Does anyone even use JSLint anymore? And was half this presentation a response to @fat?
That would explain it.
I use jslint. I think jshint's default settings are too lax and I don't want to have to go through 800 different settings to pick some more reasonable rules. jslint is already like 99% in agreement with how I would configure jshint anyway.
Dynatree looks pretty good! The "large nodes" example looks promising. I'll probably have to hack it to remove the icon for leaves having the nested content, but that's probably doable using some jQuery. Thanks man.
I'm using the same app on a nexus 5 (4.4.4) and it looks fine.
@vincenzoampolo I just checked out EmberJS and read [this article](http://www.airpair.com/js/javascript-framework-comparison) comparing Ember, Angular, and Backbone, but I'm still hesitant to adopt any of them, since they all require very significant, library-specific changes to the HTML code. I can't imagine how much work it would be to migrate to another framework if needed.
If you want an easier way of doing this, have a look at [zombiejs](http://zombie.labnotes.org). 
You may consider assembly.com to manage the project and find people interpreted in collaborating.
&gt; assembly.com This is a really cool platform. Just signed up and have been looking around the projects. Thanks for the share.
The design of your blog looks [way too much like polymer-project.org](http://www.polymer-project.org/) - it's confusingly similar.
my best guess is that reddit is fun uses the android webview wich in versions before 4.4 had a pretty crappy version of webkit, it's not the same as the chrome app which does support modern features
Here's a small, standalone and extension library I just finished. Tested in IE6+! :)
that doesn't work, the spaces in the script get turned into '%20' when I try and make it into a bookmark.
This was my first question after reading this which it really should have addressed in the article; "Does this mean I can't reliably use window.onload in my scripts anymore?"
This one is great. Learnt a lot with it.
The browser gives no access to the source of external js files. It would be a security issue. 
Some interesting points. I like to mix both. Required parameters are named, everything optional is in an object. var person = New Person(name, options);
It's fixed now.
I've got no idea why URL encodings would get in the way of your bookmarklet. Bookmarklets are as simple as saving a JS snippet prefixed with 'javascript:' as the URL. Anyways, the bookmarklet surely needs more work, I can still think of various scenarios under which it fails ;)
Object creation is kind of spendy. https://www.youtube.com/watch?v=px_n1pNzEwI#t=101
I don't like it, but only because its a bad mix of paradigms. I would much prefer that the idea of classes be removed at that point when you've moved to passing objects back and forth. In my own practice, I treat major object construction as a thing where all required parameters are parameters, and whatever goes in the options object at the end are purely optional and will be pushed through _.defaults or $.extend
Why make using "new" optional? What's the benefit?
Since the topic is how to pass arguments to constructors, though, we're already talking object instantiation. So the difference between passing individual arguments to a constructor and passing an object as an argument is the difference between making one object (the object instantiated by the constructor), and making two objects (the object you're instantiating, plus the arguments object). The argument object will almost certainly be very short-lived, though, so that could be a GC issue in a performance critical app. My point is, though, if performance is that critical, you probably shouldn't be instantiating so many objects that the difference between passing arguments to your constructor individually and passing them as an object becomes problematic. You should probably be using an object pool, in which case all of the extra costs of using an argument object (and hopefully the GC event that's likely to occur) could just be tacked on to the initialization period. I guess that does bring up the question about retrieving objects from the pool. You would absolutely not want to use an argument object at that point, so your pool fetch method would need to use individual arguments. I guess what I'm getting at is that if you're doing something really, really performance critical, then yeah, you're probably going to want to steer clear of using argument objects entirely just on general principle. But unless you're doing a lot of other things wrong, the amortized cost of using them is likely to be very low.
Thanks, that's exactly what I needed!
log takes a variable number of arguments, it's necessary to specify which version you're using, otherwise the curry doesn't know how to finish the application. I agree though that concrete examples are missing from most explanations of what and why you would use curried functions. 
There is a demo on http://gajus.com/demo/wholly/demo/
Mainly; it hides the internal implementation details for your end user, and overall leads to more standard/consistent APIs and modules. It also allows you to instantiate a class with a CommonJS require statement, like so: var blah = require('foo')(opts) [An example of that.](https://github.com/mattdesl/gl-vignette-background/blob/master/demo/index.js#L6)
Although this is a nice simple way to do currying, it does have one disadvantage: The curried function does not properly report its arity: var f = curry(function(a, b, c, d) {return a + b + c + d;}); var g = f(1, 2); g(3, 4); //=&gt; 10, correct g.length; //=&gt; 0, unfortunate, should really be 2 There are ways around this, but they don't lead to code as simple as this. This is something a user would have to weigh for herself. Most of the time it's not an issue, but it can interfere with other tools that try to do further currying or other forms of partial application.
I think making "new" optional is an anti-pattern that encourages lazy/forgetful programming. You should pick one way to instantiate your objects and stick with it (with or without "new"). Consistency is way more important, especially on teams.
I'm personally against it. As OP put it: &gt; [It's] more verbose, but code is read more than written.
This approach is fine for games and other "performance critical" applications... if you are instantiating thousands of objects per second then I would argue there is a larger problem at play. Using options objects for methods is a different story, since it can definitely lead to garbage in games/etc. 
This might explain a bit of how it makes easier a certain style of coding: [Favoring Curry](http://fr.umio.us/favoring-curry/).
 ENGINE.Soldier = function(args) { utils.extend(this, args); }; I only wish there was a native __extend__ method already.
I understand the argument against putting JS in HTML. With Angular I think of the HTML as the view code. I do not consider it html. On the down side, logic in the html is annoying to test. However you do not NEED to use any logic in the HTML. Once you have prototyped a stable application, you can move nearly all the logic out of the html into a controller where it will be easier to test.
My problem with this is that it's a bit of a code-smell. A constructor, like all functions, should take a list of parameters that are needed for it to operate - known data in, known result out. This is just kind of throwing your hands up and saying "no idea what's gonna happen here, you're just gonna have to figure it out." It's harder to read than an explicit argument list, and just looks like magic (or python's `*args` / `*kwargs`).
[Here's a JSPerf that agrees with you](http://jsperf.com/1arity-constructors-vs-vanilla) in Chrome on a Mac.
[Cross-commenting](http://www.reddit.com/r/webdev/comments/2hezep/six_reasons_to_define_constructors_with_only_one/cks4l1b) this cross-post: &gt;The author should try using a slightly less stupid editor. A good one will tell you which arguments are expected. &gt;Also, ES6 has optional named arguments with default values. &gt;"Option objects" are a workaround which results in extremely shitty tooling. They are very inconvenient to use. You'll always have to check the source or the docs to figure out which options exist. 
Glad to help! If you would like to be able to filter by an additional column, I would again put that set of dates in their own column, but then keep it hidden with the bVisible option for the column. This will hide the column on the page, but the data will still exist in the background and you will be able to filter using it. Then to filter by either column specifically, you can use the dTable.fnFilter function in a separate (on click/change) event, you just need to specify which column number to search within. Are you trying to filter the results by a specific date or a whole range? The afnFiltering you mentioned seems to be used to handle ranges, but I've found sending the desired date range with an ajax call and then parsing that into the query to be the most effective. I have no experience with laravel but it sounds like it probably needs to be accessed with an ajax call from datatables, so this may be an option for you!
[Also it's slower](http://jsperf.com/1arity-constructors-vs-vanilla)
[Yup](http://jsperf.com/1arity-constructors-vs-vanilla)
This approach completely hides the constructor's API. How would you know what the conductor expects, and how would the IDE help you out if all it knows is that the constructor takes a single argument?! Why create an inline object to send to numbers, when you could just send two numbers?!
Correct... Also so you can reuse your code... And code separation.
IMHO, still cleaner would be var converter = curry(function(toUnit, factor, offset, input) {/* ... */}); //... var milesToKm = converter('km', 1.60936, undefined); var poundsToKg = converter('kg', 0.45460, undefined); var farenheitToCelsius = converter('degrees C', 0.5556, -32); The curry function described here would allow that, and still allow you to do converter('furlongs per hogshead, highway', 504, undefined, 31.5); //=&gt; "15876.00 furlongs per hogshead, highway" // doesn't that sound better than mi/gal or km/li ? 
Overall, good advice. :+1:
About 4 of these 6 reasons apply to all functions, not just constructors. 
Really, you think a list of arguments is more readible? Take this example from GSAP docs: ``` tl.staggerFrom(myArray, 1, {left:100}, 0.25, 2); ``` Please explain what that does without looking it up. And then compare that with an object of explicitly named arguments. tl.staggerFrom(myArray, { duration: 1, css: {left:100}, stagger: 0.25, position: 2 }); Am I a magician? And is it that crazy to throw errors (or use defaults) if you don't get required properties?
&gt; None of these 6 reasons make sense. What is your viewpoint on having a "single point of maintenance" (one of the reasons)? Note, that it could apply to all languages: not just Javascript. 
Still makes the code less readable, which is always a big loss...
Except that defeats the V8 optimization to avoid expando-based objects. I supect that is also true for `Object.assign` as well. It's similar to the [problem V8 has](https://github.com/petkaantonov/bluebird/wiki/Optimization-killers) with sending `arguments` to any method. 
One more point to add. The single-argument constructor makes it easy to "hydrate" an array of POJOs into Person objects. For example, you have this API endpoint: function Person(obj) { if (!(this instanceof Person)) { return new Person(obj); } this.name = obj.name; this.surname = obj.surname; } $.get('/nearby-people', function(nearbyPeopleData) { var nearbyPeople = nearbyPeopleData.map(Person); });
Just released....you mean like [a year ago](http://www.reddit.com/r/javascript/comments/122fpp/show_rjavascript_nimbusbase_a_html5_backend_for/)? This is pretty close to simple advertising, but I guess since there's a "free" plan we can let this post stay.
&gt; Still makes the code less readable [Bummykins comment](https://www.reddit.com/r/javascript/comments/2hezdw/six_reasons_to_define_constructors_with_only_one/cksa0z6) shows that the code can be just as readable.
oops wrong link, will reset the link
As I said, this is already caught by linters. This improves nothing.
**Do not do this.** For years, it's been considered bad practice to do this in PHP (and other languages), so why would it be acceptable in JavaScript? If anything, it's *worse* in JavaScript because we don't have types. Here are many discussions on the topic. https://www.google.com/search?q=related%3Astackoverflow.com%2Fquestions%2F10185634%2Fphp-function-arguments-use-an-array-or-not%20don%27t%20use%20array%20of%20arguments%20for%20method%20php&amp;rct=j **Maintenance** Maintenance is harder. You need to ensure that any operations on your `obj` argument support any and all forms of that object. You need to revisit all callers of the constructor and ensure the objects they are passing in are supported by your changes. **Usage** Usage is unclear. What parameters does this object take? Where are these parameters ultimately used in the code? Yes, you can document it, but how will my IDE assist with that? What if it doesn't support your particular flavor of method documentation? A list of parameters is something any IDE, and even many editors, can pick up. **JSON deserialization for free** I don't even understand what the author is saying here. You can't just take JSON and pull keys out of it, no matter what syntax you're using. You have to parse the JSON first, and then you can pull out keys. **Better management of optional parameters** If a parameter is optional **don't make it part of your constructor**. Assign it to your object as an instance property and give it a default value. **Named parameters** &gt; JavaScript hasn't named parameters You're right. And objects are not a replacement for named parameters. Just don't do this. Your code will be less readable, less human-parseable, harder to maintain, and more error-prone.
If you're coding JavaScript without as-you-type linting you're doing it wrong.
Chrome 37.0.2062.120 32-bit on Windows Server 2008 R2 / 7 64-bit &gt; new VanillaPerson 24,800,546 ±5.24% &gt; new Person 3,146,337 ±1.15% These are no where near equal. The other browser runs tell the same story.
Your suggestion is different from the article's, though. Personally, I'm fine with your second code snippet because all but the first argument feel like optional configuration. However, tl.staggerFrom({ array: myArray, duration: 1, css: {left:100}, stagger: 0.25, position: 2 }); which is what the blog post suggests, feels much cruder to me.
You could also write one hydrate function, and avoid having to duplicate that logic in every constructor.
You can make your method call more clear without affecting your code if this is actually a concern. t1.staggerFrom(myArray, /* duration */ 1, /* css */ {left:100}, /* stagger */ 0.25, /* position */ 2 ); A better point to consider is that maybe GSAPs API isn't that great if people frequently have issues understanding the function arguments.
I love this comment. Glad to see a voice of reason in here.
There isn't actually a "single point of maintenance." It's a disingenuous idea, especially because a change anywhere is likely to affect something else.
This is in my opinion the best way to go. var instance = new Object(required, required, { options }); The python in me goes YUP 
Couldn't a lot of what this guy is talking about be solved via factories anyhow? 
The point you are making is with regards to altering the external behavior of an algorithm: [https://xkcd.com/1172/](https://xkcd.com/1172/). The context of (D) "single point of maintenance" is with regards to the syntactical interface of the algorithm itself: if an algorithm requires additional data to execute, you can do so without changing the interface to the algorithm. It is equivalent in Javascript to (A) adding an additional parameter to an existing function: that parameter would simply be unknown when called by code already using the function and you can use that to your advantage to, hopefully, not alter the algorithms behavior for existing users of that algorithm. It is also equivalent to (B) default parameters. You can use this to your advantage to, hopefully, not alter the algorithms behavior for existing users of your algorithm. (C) Or you could just make a new function all together. If the algorithm of an existing function needs additional data to execute, then tools like (A), (B) and (C) have already been around to solve that. 
This answer is a bit confusing because it's conflating stuff that executes tests, and stuff that runs tests. From my personal experience, I like Jasmine. It offers up everything needed to run unit tests and its syntax is quite nice and plays well with the ecosystem (in my case, Grunt for building and Istanbul for reporting). Their documentation is just absurdly laid out though, but with their nice and predictable syntax you almost forgive them for writing it in such an asinine way.
Do you understand XML? The DOM is just an XML document.
 var audio = new Audio(); audio.src = "some.m4a"; audio.play();
That's funny as I always thought XML was modeled after HTML.
I actually got pretty far down the path of writing up a "composable" dialect of Javascript that generalized this to ALL functions taking only one parameter (an object), and returning one value (also an object). I still haven't started working on the project that would have used it, so I don't actually know whether the hypothesized benefits would actually have materialized.
It's also worth noting that a separate function will be far more flexible (if you need to normalize the data before instantiating objects, for example.)
It was, but you seem to have more of a server-side background, so I figured you might be familiar with XML. They're basically the same thing, and you can do most of the same transformations to them, etc. For instance, `appendChild`, `removeNode`, `cloneNode`, etc are all in both markup sets.
I always thought XML was a Microshaft thing. I didn't think non-IE browsers would work with it.
You're missing the point :) If you understand XML at all, you can treat the DOM like an XML document, both as far as understanding it and interacting with it. If you aren't familiar with XML, this line of conversation is pointless.
Can't hear anything. Do I need any plugins or anything else? Also, this is on a web page and supposed to run on smartphones as well. EDIT: Alright so I did get it working, but only on the computer. No sound on my iPhone using Safari. Any ideas?
Oh, well I get that then. 
&gt; IDEs will not support option objects, because they simply can't. &gt; you'll need some kind of annotations which explain to your tools what's going on Visual Studio, as just one example, already has just such an IDE. You are expected to provide annotations to your classes and properties (to name a few) for usage purposes. This does take **a lot** of additional effort on the part of maintainers and creators of frameworks. I'm guessing all of this effort is "accepted" because, as you say, you would need a highly advanced artificial intelligence to guess what any given algorithm is expected to do.
How do these solutions apply to the author's proposed solution of using an object as a replacement for named parameters and default arguments? It sounds like you're agreeing with me, in which case I don't understand the purpose of your original comment.
That's what is supposed to happen. Technically, the bookmark is a URL and should be "URL Encoded". The browser does it for you when you paste the code in. 
Sorry for replying so late - games I had to state clearly in the post that I was not referring to games (or very, very performance critical apps). My bad. - mixed solution var instance = new Object(required, required, { options }); I don't understand the mixed solution, it's not logical: if having an hash as an argument is an anti-pattern then I shouldn't have an `option` hash argument at all. Otherwise if it's fine to have an hash as an argument, I'd make a step further and have all the arguments in a hash. Thus the logical conclusion is using a tuple (i.e. positional arguments). Good luck with: new Person('Giulio', 'Canti', null, null, 40, true); - `new` operator If you don't like optional `new`, use always `new` or don't implement that snippet. Personally I use always `new` because, as someone pointed out, makes more clear in the code the intent of instantiate a new object. However I wanted to show a way to make `new` optional, if someone is fine with that or need it. - JSON deserialization Obviously the `json` variable contains an object (via JSON.parse). What I'm referring as "free" is avoiding to write a `deserialize` function for all your models (and to be clear I write a ton of models in my code, so for me it's a huge benefit). Besides, the generic function `struct` can be easily modified to hydrate arbitrary nested structures (showed in a post a few days ago). - Positional and named arguments Theoretically I don't see differences. Tuples and hashes are two ways to express the same concept: a cartesian product of sets (A x B x C x ... ) where an optional parameter is represented by a set containing `null` and `undefined`: optional string = {all the strings} U {null} U {undefined} In the case of tuples you access by index, in the case of an hash by name. In math we use always tuples but we have also short definitions. In the real world, when you have to tackle dozens of properties (some of which optionals) and nested structures I prefer hashes. However if you are fine with tuples, go with it. - Readability Agree with Bummykins comment - "Don't make optional parameters part of your constructor" I like to work with immutable objects and usually I add an `Object.freeze` at the end of the constructor to make the object a value object: all the informations must go through the constructor, no setters. - **Documentation and IDE support** In the last code snippet I used an array var Person = struct(['name', 'surname']); to keep the article short, but a better solution would be an hash (again! :) name -&gt; type var Person = struct({ name: Str, surname: Str }); and then store that hash in such a way that runtime code, documentation tools and IDEs can retrive the meta info, and implement static or runtime type checking. This is what the tcomb library is trying to achieve.
Also, as we are comparing x to "test", shouldn't we use the === operator?
Well, the good news is that ES6 and Dart fixed this. ES6: function foo (x, y, {a, b}) { console.log(x, y, a, b); } foo(1, 2, {b: 4, a: 3}); Dart: foo(x, y, {a, b}) { print('$x $y $a $b'); } main() { foo(1, 2, b: 4, a: 3); }
First, 3 million operations a second is way more than you would ever need. You're more likely to exhaust memory than you are to choke up the CPU. Any CPU hogging is likely to come from what is performed in the constructor, not the overhead of retrieving the parameters. Second, here are my benchmarks for FireFox 33.0: &gt; new VanillaPerson &gt; 1,038,672 &gt; ±3.04% ---- &gt; new Person &gt; 1,042,198 &gt; ±1.83% This is most certainly not going to come close to being a bottleneck in either browser.
There are tons of testing frameworks. Some of them are very complex and lead to a lot of boilerplate (i.e. setting up HTML pages). Others don't integrate as well with Node or the browser. I think for most tests you really don't need anything more than [tape](https://www.npmjs.org/package/tape). It's small and to the point, doesn't need any boilerplate, and runs in node and the browser. So you can write a test in tape, and then just do: `node test`. And/or you can run it with beefy/browserify/etc to test in a browser. And since it uses TAP, it integrates well with git hooks and other toolchains. [More info.](http://www.macwright.org/2014/03/11/tape-is-cool.html)
Objects for named parameters are great for *configuration*. So, if your constructor (or any other function) expects a complicated config, pass it in as an object. In jQuery imagine calling `$.ajax()` without a named settings object. That's nasty. But you can also call `$.ajax()` with just a URL string as the first parameter. This works because jQuery maintains a *default configuration* object for all AJAX requests. So if you just need a GET with nothing special, `$.ajax("/my/consumable/")` is very, very handy. However, imagine I have an `Account` object that requires a `Customer` object to alter said customer's account settings. I'm going to make that clear up-front by requiring a separate customer constructor argument. Why? Because there's no default `Customer`. An `Account` object is pretty much useless without a `Customer` to work with. Use separate function arguments to declare dependencies to anyone using your code. 
I think you should try using web audio api. It's a bit more advanced than using audio tag but is a real implementation. There are som good demos out there and it works for most browsers. 
So the previous solution wouldn't work in Safari on an iPhone in some way? Because this is basically the only thing it needs to support.
Apple finally getting their act together did seem a bit too good to be true...
Glad to help, the element structure is pretty well defined so you shouldn't have a problem there. Cheers!
http://ternjs.net/ WebStorm does this stuff out of the box.
Since you're getting some ups, I'd like to hear more about this, a few parts didn't make sense to me. Maintenance: What is "any and all forms of that object"? I don't get how an object would be different than a non-object in terms of changes. And on that topic, if you're using comma separated arguments and you want to add a new one, does it always have to go to the end, even if it logically belongs next to another item? Like if you have a `sphere(x,y,radius)` and you want to add a z, would it go `(x,y,radius,z)` to not break things? or break everything and add it where it fits `(x,y,z,radius)`? Thats where I see objects as more flexible—order doesn't matter. Usage: How is `sphere(100,100,200,250)` more clear about what its doing? I can see perhaps how many arguments it takes, but nothing about that will tell me what they do, and I'll have to look it up. The object would be very clear here, but I get what you mean about not knowing how many other options there could be. Is this just a tooling/IDE restraint and not a reading issue? One unmentioned downside to objects is the constant threat of typos. I ran into this in grunt that had me spinning for awhile. AssetDirs and AssetDir look pretty similar. And when you merge an object with defaults, a typo will not fail and instead gives you unexpected results with no warning.
never mind. It was the capitalized property name. Go fig.
&gt; This is most certainly not going to come close to being a bottleneck in either browser. While I agree with you, it is surprising to see how much worse Firefox performs in this area. It is on-par with mobile browsers.
umm could be a multitude of things. For mobile devices you need a user interaction to play audio/video, so you can't just autoplay. Or try messing with the output settings. You should really list what you tried, what didn't work, and what you've done to try and make it work. This is just a blackbox guessing game that sounds like it could be solved by a simple google search.
&gt; Why create an inline object to send to numbers, when you could just send two numbers?! I believe the article gives 6 reasons why.
&gt; Any and all forms of that object. I think I regret this choice of words. I'm not even sure what I meant with this any more, to be honest. &gt; Thats where I see objects as more flexible—order doesn't matter. If I need to add a Z argument to this method, I would create a new method, or add it to the existing constructor and update all the callers. Depending on the "class" I might add Z as a property on the object that has a default value. &gt; How is sphere(100,100,200,250) more clear about what its doing? ... but nothing about that will tell me what they do, and I'll have to look it up. This is true even with "1-arity." I'll have to look up what parameters that object takes. Otherwise, I can look at the function signature, and the parameter names are right there. If I'm lucky, there might even be documentation on the parameters right about the function signature. Better yet, I can use an IDE to hint at the parameters for me.
&gt; IDEs will not support option objects, because they simply can't. While I'm against using an object for constructor arguments, this is already possible. Here's a JSDoc example. /** * @param {Object} obj * @param {String} obj.requiredParam * @param {Number} [obj.optionalParam] * @param {String} [obj.optionalParam="withDefaultValue"] */ function doStuff(obj) {}
Because we should always walk down the sidewalk with a helmet, right?
Thank you for the welcome and the comment. Sorry, and I will make sure to follow the rules and guidelines. Cheers!
You could try Buzz: http://buzz.jaysalvat.com
He's talking about not using `for` loops anymore, how would he deal with nodelists? The ones returned from for example `document.getElementsById`, as they don't natively implement `forEach`.
To be honest though, I think he has a point. The `extend()` method is very useful for numerous cases, and has become ubiquitous in some contexts. Re: v8....while I really love how fast it is, I'm not at all comfortable making API design decisions based upon the impermanent, internal implementation of a single vendor.
IE natively displays them better while the other browsers tend to need plug-ins for some inexplicable reason, so I can see why you'd think so. But all the browsers have supported AJAX for quite some time now. Honestly, while we're on the topic, I'm still sad XML (or JSON) hasn't blossomed into a plethora of standards used to store all manner of information. It seemed so promising to me when it first came out.
This approach is garbage. Please nobody actually do this. 
For loops it is :)
I need to call bullshit on this. First of all, optional new is an antipattern, so that doesn't count. Either way you need an assignment of each instance field. So the only actual extra maintenance is the adding the argument to the argument list. Um...let's see, I could write shit code and save six keystrokes every six months, or I could just write normal code and have to suffer the inhumanity of argument list maintenance. Choices choices...
Visual studio already does this. I'm always completely floored at how thorough and pervasive its auto complete, hints, and hover-overs are when working with the IDE in coding mode or debug mode, to provide context sensitive help for every object type thrown at it) . Even with JS and external JS files from the one you're working on (hello .references.js) It's an amazing tool if you can get your hands on it. The VS team are doing a good job. /where's my money, MS?
Why not just use an IDE instead of a text editor? Intellij IDEA has this built in.
I naturally settled on this pattern as well.
did you do the javascript course on codeacademy? and then do jquery for DOM manipulation.
Same can be said for 640kB of RAM, right?
That's a pretty good SO answer. Here's my personal recommendation: **[Karma](http://karma-runner.github.io/0.12/index.html)** for cross-browser testing. Karma needs a test runner. Some people prefer Jasmine, but I use... **[Mocha](http://visionmedia.github.io/mocha/)** to run the tests. Mocha needs an assertion framework, and I like... **[expect.js](https://github.com/LearnBoost/expect.js/)** (if you need to test on IE 8) or **[Chai](http://chaijs.com/)** (if you don't). I have a essay going into more detail here: [The Let's Code JavaScript Tool and Module Recommendations](http://www.letscodejavascript.com/v3/blog/2014/03/dependency_recommendations)
This isn't the same. Unless you're doing particle effects, there's absolutely no reason I can think of to have 1 million instances of a class, let alone 1 million all being created **within a single second**, which is what this benchmark is testing. You're targeting client computers, not your home gaming rig, so if you're doing this, you're doing something wrong. And even if you somehow had a reason to create that many instances, what the constructor is actually doing will be a much bigger bottleneck than the overhead of a few property lookups on the passed in option object.
Safari on IOS is my least favorite browser to code for nowadays. IE is still crap but less so than it was.
It's just very convenient. Get a linter plugin and you get some instantaneous squiggly lines whenever you do something silly. A linter can at least catch the really simple mechanical bugs. Personally, I prefer more extensive static code analysis like you get with Dart or C# and so forth.
Given the tradeoff between analysis time and speed, it seems unlikely that future JIT implementations will look into function calls and optimize these cases. So it's not just a V8 issue. Things like asm.js intentionally write dumb-ass obvious low-level code for that very reason, to make it easier to optimize. It seems to look pretty bad across the board, but maybe I've messed up the test: http://jsperf.com/explicit-vs-loop-constructor The unknowns are IE11 and the IE Preview. That said, even the slow case is fast enough for objects that aren't used hundreds of times a second, so this is mainly important to games.
&gt; I'm still sad XML (or JSON) hasn't blossomed into a plethora of standards used to store all manner of information. It seemed so promising to me when it first came out. What do you mean? Both have standards, and have been used for everything under the sun.
Does this advice apply to single-page-apps? It seems like if you have a single html page, and several script files, you'll actually increase load times, due to the overhead of multiple headers for each http request.
&gt; I certainly hope Google isn't actively making decisions like this Sometimes computers are too slow to use instant search. It happens. Therefore, they have a version that has most of the JavaScript stripped out to improve compatibility with older PCs. It's a very well-informed decision, and it opens up the internet to people who can't afford newer computers.
Of course you can... Although I wouldn't inline it, even if it was a one page app. There are no benefits of doing so. 
Yes, the articles did list 6 ways to use a screwdriver to put a nail into a wall...
 var hasNumber = /\d/; hasNumber.test("ABC"); // false hasNumber.test("Easy as 123"); // true
I guess I haven't used one that isn't horribly bloated, crusty and slow. Haven't tried Intellij or Webstorm.
What?! That ugly and unnecessary boilerplate doesn't whet your appetite?
 var string = "..."; for (var i=0; i &lt; string.length; i++) { switch (string.charAt(i)) { case "0": case "1": case "2": case "3": case "4": case "5": case "6": case "7": case "8": case "9": alert("string contains a number"); } }
I added an important couple test to your jsperf: [here!](http://jsperf.com/1arity-constructors-vs-vanilla/2) It's common to already have json for the constructor as mentioned in the OP, so I added a Vanilla version where it has to unpack, and a Person test where you can pass pre-allocated json in (since the json is a sunk cost associated with parsing the service response). Results were interesting on my machine/browser. I wasn't expecting VanillaPerson with json unpacking to be faster than your existing vanillaperson test with baked constructor parameters.
Here's a way to do it without regex, abusing array methods and operators: var hasNumber = function(str) { return !![].filter.call(str, isFinite).length }
What the hell is wrong with you?
Hey all right, thanks! I had actually thought that these would be worthwhile, good to see the results. 
A few years ago back I had the same idea as the author. Used it everywhere. Backfired on me big time. I never knew what parameters any function took, which parameters mattered, which did not. Pass the whole user or session object, come back to this code later and you have to spend 20 minutes to figure out what the function actually needs, instead of just being able to scan the parameter list. 
No offense, but this is not what you would like to have in your app. If you want to use array methods, just split: function hasNumber (str) { return str.split('').some(function (ch) { return parseInt(ch) }); }
Honestly, this isn't that bad. So many people just look at the simple interface of regex or array methods/operators and never bother with the order of growth of the underlying algorithm or the computational complexity it brings. With this, you can clear see the O(n) nature of what is happening. Ugly, yeah. But it's the devil you can see.
I came here to mention the lodash-contrib _.getPath() but you've covered that! Will definitely be trying this out! 
+1 for TypeScript. Although it's not perfect, it's eons ahead of JavaScript and seriously highlights the need for static typing in languages.
Six bad reasons.
What is the value of ditching the capitalized-constructor + lint solution for optional new? So you don't have to lint?
This won't work if you have only the number 0 in your string.
Also debuggex.com is fantastic when learning regex. 
People are downvoting you, but I would much rather have that in my codebase than some of the hacky examples here. Just because a language CAN do something, doesn't mean things should be done that way.
So if you have a string input that is 40,000 characters long, the code above will continue to alert the user for each digit in the string. Even if the first goddamn character is a digit. I'm going to have to agree with /u/Bel-Shharoth -- what the hell is wrong with him!!?!?!?
Nice catch. So, function hasNumber (str) { var num = str.split('').some(function (ch) { return parseInt(ch) }); return num || num ==='0'; //? }
When did a simple digit regex token (2 lines of code) become hacky?
I checked out React. Not sure how I feel about it yet (their JSX examples embed HTML into the JavaScript, which I'm not a huge fan of)
That's easily fixed. But do you know the order of growth for a simple regex operation on a 40k string? It's a lot more than O(n). There's no need to overcomplicate the question of "is there a number in this string".
But you are bikeshedding the small detail of the `alert`, which is obviously (to me) just for example/debugging. It's not that challenging of an exercise for the reader to fill in the blanks and make it into a function that returns a bool... function hasNumber(str) { for (var i=0; i &lt; str.length; i++) { switch (str.charAt(i)) { case "0": case "1": case "2": case "3": case "4": case "5": case "6": case "7": case "8": case "9": return true; } } return false; }
Documentation is a forth point of maintenance, thanks for pointing out. I'll update the article.
On Chrome 37 new Person is 91% slower than new VanillaPerson
re. backend languages: Node is basically backend using Javascript so you're fine. Avoid PHP. As for frameworks, the correct and unsatisfactory answer is: It depends. What kind of project are you doing? If you're making something small, Backbone is simple enough to get the job done. Big? Angular keeps everything organized. Fast? React outperforms everything else. You'll have to find the right tools for the job (which also involves personal preferences eg I'm biased towards functional programming, which React uses). Eventually, you'll learn that there is nothing to master except for having good judgment on what to use for a given problem/circumstance (and, of course, learning how to learn). Disclaimer: I haven't gotten around to making a non-trivial webapp from scratch (yet) so feel free to disagree with me.
You may want to take a look into http://todomvc.com/ which has implementations for a TODO app with many frameworks and decide what works best for you.
Don't want to nitpick, but you could've clean up that function before posting.
can you put the text behind the ad?
We are using Backbone for a complex/large project for quite some time, had to extend with some of the things other frameworks already have, but overall we are happy with our decision. In retrospect we might have been better off using Marionette with it.
It's because you've put the script tag inside Google's ad tag which causes a race condition that likely means Google eats your test tag before the script to test for its existence gets run. Thus, it doesn't exist anymore and the test thinks it never existed. To be more specific: &gt; &lt;ins class="adsbygoogle" style="display:inline-block;width:160px;height:600px" data-ad-client="ca-pub-7056919003312795" data-ad-slot="9901449349"&gt;&lt;script type="text/javascript" src="advertisement.js"&gt;&lt;/script&gt;&lt;/ins&gt; With the advertisement.js script inside the &lt;ins&gt; tag, the tester div gets put inside there too. Google may completely replace all content in that &lt;ins&gt; tag at its discretion.
But wouldn't that also replace it in my test environment along with the live version?
Not necessarily. It depends on what ad it gets replaced with and, most importantly, it becomes a race condition between page execution and ad load. Edit to add: If your test environment is on your box then maybe Google won't load ads that cause it to malfunction, or maybe the time it takes to execute the page is different. I've disabled AdBlock and refreshed the page several times. Sometimes it works correctly, sometimes it doesn't.
Weird, well, I moved to the solution /u/speaks_good posted about just hiding text under the ad and I figured that out. So now I don't have to mess around with that code. Thanks for explaining that to me though. I'll remember it for the future.
I've written two large JS applications with Backbone, a realtime backend with socket.io, and a RESTful backend in Geddy. Vanilla Backbone gives you very little structure. This is a blessing and a curse. I work at a startup, so the software is always evolving to meet the needs of the business. Backbone is very un-opinionated, which makes it very easy to adapt it to our purposes. (Take the following with a grain of salt as I've only used Meteor for hacking around) There's very little magic going on in Backbone, unlike frameworks like Meteor and Angular. If something blows up in a magical framework, it's really, really hard to track things down. Also, the reactivity in Meteor makes it hard to test things, and it does weird stuff like bundling a (last i checked, obsolete) node executable. Wat. That said, the lack of structure in Backbone also means that we made plenty of bad decisions early on that we're still dealing with. If I were starting over today, I would probably go with an opinionated Backbone framework like Marionette. They've already made the mistakes for you. As for backend, I'm going to be slightly biased as a contributor to GeddyJS, the original MVC framework for node. Geddy is great if your app is going to be really heavy on business logic. If you're doing realtime stuff, a lighter framework like Express would be better and more flexible. I haven't used the newer frameworks (seems like a new one comes out every month!), but Hapi and Restify have been getting positive reviews. Good luck learning JS!
I use [Backbone](http://backbonejs.org/) + [Backbone.Marionette](http://marionettejs.com/) to develop **[Streamus](https://streamus.com/)** / https://github.com/MeoMix/StreamusChromeExtension Streamus is a music player I've developed for Google Chrome with ~135,000 users. I've put Backbone through its paces and know it well. Reasons Backbone is awesome: * Learning curve is not steep. It doesn't do everything for you which means there isn't as much documentation to learn. Additionally, you can learn Backbone without Marionette and then, once comfortable, easily convert to Marionette. * Does enough! It's no Angular/Meteor, but still provides an event-driven architecture, intelligent event hooks for everything, and out-of-the-box support for persisting models to a RESTful server. * It still feels like I'm writing JavaScript. My main complaint about Angular is that once you're in it... you're **in** it. If you want to move your application away from it in the future -- good luck.. probably easier to re-write it. Not as true with Backbone because it's not forcing you to do things 'its way' as much as other frameworks. * The development team for Marionette is super approachable. I chat with them all day on https://gitter.im/marionettejs/backbone.marionette and actively contribute to the decisions being made in the development of the application, neat! You won't get that with Angular/Meteor, I bet. :) Not so awesome: * Easy to feel like you're writing good code when you're actually writing bad code. Since it doesn't hold your hand as much you can tie yourself into crazy knots by with bad practices. * Easy to render your views inefficiently especially if you're following the practices laid out by TODO MVC and even more especially if rendering large amounts of ordered collections. * Doesn't support nested models out of the box. If you have parent objects which children who have even more children -- expect to do a bit of work getting everything going. * A handful of not-so-obvious gotchas such as accidentally sharing references to a single array between multiple models when you intended to instantiate a new instance of the array for each model. Lots of ways to fix this, but not easy to see what's happening at first. Feel free to ask any more specific questions you may have. Other libraries worth considering: * [RequireJS](http://requirejs.org/), [Browserify](http://browserify.org/), or other AMD module pattern libraries. * [UnderscoreJS](http://underscorejs.org/), [Lo-Dash](http://lodash.com/), or other utility belt libraries. Mandatory if you use Backbone, but worth considering even if you do not. Regarding overall stack choices: * If you're still just learning the ropes then using pretty much anything is going to be better than trying to figure out what works best to solve problems you don't have yet. The nuances of an RDBMS such as MySQL compared to those of a JSON data store such as MongoDB aren't going to make or break your "Hello, World" app. * Don't get caught up with the hype. Following the MEAN stack will certainly get you off the ground, but trendy tools come and go. * You can treat localStorage as your 'database' for getting started. This obviously has a TON of limitations (most notably the fact that writes are synchronous where as sending data to a database is asynchronous), but, again, you're trying to get off the ground and get your feet wet first. 
Yeah the only part you're missing here is implementation; js is interpreted, usually on top of C and then wrapped in a "read-eval-print-render" loop in the browser. So the interpreter's implementation of the function is always going to be slower than a well written and compiled parseInt or string.match.... unless the interpreter is just that piss poor. Your point stands but there's usually a good reason for a base language method.
I also love http://regexr.com/
Ok, we can talk frameworks and libraries. So, there I was in my *Dojo* when the corner started to *Glow*, I put down my glass of *Midori* and picked up my *Kinetic* knife to sever its *Backbone*. They moved out of the shadow, their eyes were the colour of *Ember* and it looked like it had an epic *Knockout* punch. I pulled the *Chaplin* and ran around him swinging wildly. It was no use, it split into *Three* of itself and produced an *Angular* sword that was far superior to my knife. I was scared, I had never seen anything like them, as they moved they created an *Echo* of themselves - it smelled like *Jasmine*, looked alien but with a *Handlebar* *Moustache*. I *Cascade* into the next room in a *Spry* fashion, as I ran I slipped and woke up sat in a chair with my *Cappuccino*. "*YUI*" I yelled, "*J'Queryin'* me?" There was no answer because I've run out of libraries and frameworks...
I think you're right and there isn't a framework more worth learning than the others. I use Backbone + Marionette because I had to make a choice and a friend of mine was using it and wrote books to learn how to use it. I think in a few years the job market will define which one is better for your carreer (sadly, it's not always the best), but for now I encourage you to choose the one you like the most or just pick one and go with it if you're in a hurry. Also, looking at the link in /u/RobotFood83's comment (http://todomvc.com/) and the documentation of each framework may help. Don't use a framework if you don't like its documentation, you're going to need that.
Have you seen `i18n-js` ruby gem? Specially, the https://github.com/fnando/i18n-js/blob/master/app/assets/javascripts/i18n.js
 if (!isNaN(input)) { /* contains a number */ }
&gt; [].some.call(str, isFinite) Neat.
Is `[].some.call(str, isFinite)` the one you're talking about? It's not the option I'd use myself but there is nothing hacky about it. It's just using a couple of less commonly used, but entirely valid, features of the language.
The benefits is one less HTTP request, speeding things up.
OK, well, either way, nothing happens when I click on it :) 
In case anyone was curious... http://jsperf.com/contains-digit
Yes the answer is still relevant. It's kind of complex, but testing JavaScript is hard. You need a runner (Karma, Testem...), a testing lib (Jasmine, QUnit, Mocha...), something to make assertions (Chai, Expect...), and something to spy/stub/mock (Sinon). If you really want to do Unit testing, and not functional testing, I strongly advice using QUnit, which is way faster than Mocha or Jasmine if you use it with the built in asserts.
no hang on, I think it does work. It doens't update the domain url beside the post title omn the front page, but it does atually affect the url if I click on them. I was expecting it to change all instances on the page. thanks
[Did it (with a little clean up)](http://jsperf.com/contains-digit)
Actually, there is more than one way to achieve this. One off the top of my head: ... .some(function (ch) { return ch === '0' || parseInt(ch) }) Or simply using isFinite: ... .some(function(ch) { return isFinite(ch) })
Go with Angular.
Thanks for this answer, I'm really trying to figure out what is happening in js testing ::)
While I understand the notion, TODOMVC only gives you a perfect case scenario and doesn't accommodate for difficult situations that may arise. Some frameworks allow for really easy integration with external tools and others don't. Some frameworks require that you use their interconnects and others let you more easily use your own. Use this to see if you like the style, but further research is needed to understand if it will actually work with your task. Like any benchmark, the competition will always try to game it.
It's all down to personal preferences in the end, but maybe I can share my experience. The first thing to understand (if you want to master javascript and need a backend) is you will learn node.js. It's not front end but it's going to be a strong influence on how you're going to value front end technologies, trust me. I've tried backbone, angular, and now React. I would say the more you learn on each of them, the more you're able to weight strengths and forge opinion. There is no shortcut or leap of faith which will give you the insight you'll learn by implementing each of those. In the end, the only good bet is Node. I personally recommend React as I found it the best to structure my code and keeping things simple and modular. Angular is nice but have too much magic in it, which will end up wasting you a good amount of time when it's not behaving as expecting. Also coupling a document database (Mongo) with a key value store (redis) is neat, you'll be able to do whatever you want easily 
So everyone seems to be saying "it depends on what your project is". What if the goal is employment? 
So apparently everybody's idea of "framework" is backend? I don't use Javascript in the backend, so I'm only interested in frameworks for the frontend (=for browser). Any idea for those?
So in server side programming, we actually have a lot of patterns/practices that can be used to minimize the your applications dependency on a framework. The bad news, those patterns add extra work.. Generally that entails creating interfaces and instances that support the framework. This also helps with unit testing as well. Somehow, in programming we always treat the front end as some special case. * Unit testing late to the game * MVC patterns late to the game * DI is still a new concept in UI development Yet we see with the creating of these frameworks that frontend isn't really different from the backend. So we should be able to reduce the framework dependency to a minimum, by moving the "business" logic out of code that interacts with the frameworks into an abstraction. Realistically we should be able to write stand along javascript code that can then be plug in any framework with minimal effort by connecting the logic to the framework in an abstraction. Just a programmers ramble. Not like i have gone and done this.. Work timelines don't account for developer curiosities. 
Down votes for this? Really? Why?
Every simple application starts small and grows out of Hand. Use a framework like ember or angular since they force constraints on your code and design patterns to help them scale. Unless you are a cowboy and are fearless, the do what ever the he'll you want.
&gt; Does enough! no, not in the million years. &gt; If you want to move your application away from it in the future -- good luck.. probably easier to re-write it This is same for Backbone and any other JS framework. &gt;You won't get that with Angular/Meteor Another BS, they are all open source projects, if you have a feature request/pull request which makes sense, you can get it into master no problem.
you should just rewrite the whole thing in Angular and save yourself lot of time, money and headache.
Creepiest part is when I double tap on mobile, I can see text in the background of the trippy frog image for a split second. Edit: phone typo
I don't know how to explain it exactly. I guess it's just making things pretty and interactive that I have issues with. As others have said, I know plenty about server side and making things happen as the page loads. I just don't get how people make all these beautiful interactive applications. Its like my brain hits a wall getting past if, then, while, for...
Nope. Marionette solves these problems nicely with regions. It handles recursively closing nested views, which is the main source of headaches in naked Backbone. Of course you must also use `listenTo` instead of `on` to avoid lingering event handlers in either Marionette or Backbone, which is a very old and solved problem. Also, much of the boilerplate is removed with Marionette, `ui` gets handles on DOM nodes, `template` puts the HTML in the view's element, and CollectionView/CompositeView does all of the "forEach" stuff you had to do by hand in Backbone. If you have a very large SPA written with Backbone, it's much easier to start writing new modules with Marionette, then when you get the hang of it, start refactoring the more important modules *if* it would be helpful to do so (vanilla Backbone and Marionette play nicely, of course).
&gt; I thought perhaps Meteor was it, but it relies solely on MongoDB for now
Probably because jQuery isn't a really good way to learn the programming language it self. It however might help naviathan to learn how Javascript manipulates DOM.
Angular looks terrible and has bad SoC imo.
Best answer award! Haha!
Outstanding response. I'm going for maturity of library and backbone keeps getting mentioned as a solid choice. Regarding databases, I am lacking an embarrassing amount of knowledge wiring up either RDBMS or Document stores in apps so, like you said, I've got to just get my feet wet and DO. I'm sensitive to learning a db paradigm that in the end may not be the right answer for 90% of situations. (I'm more involved in developing internal enterprise web apps and everyone internally just happens to understand (and love) SQL.)
One of the nice bits about Marionette is that it takes a very piecemeal approach to its use. By that I mean, you aren't either using Marionette or not, but rather can include it and slowly migrate individual objects over. I did this once on a personal project, having implemented something with Backbone before knowing about Marionette. Just start with your basest views, the ones that render a model (or not even that) and are entirely called by other views. Make those into instances of Marionette.ItemView. Then, convert the views that call and control them. You can then migrate up the chain at your own pace. **Edit:** You also get to enjoy watching your project LoC start shrinking precipitously and your business logic emerge from amidst the boilerplate.
&gt; I haven't used the newer frameworks (seems like a new one comes out every month!)... Tell me about it! I'm definitely working in a business logic heavy environment. I'll check out backbone+marionette+geddy Thanks! 
Excellent breakdown. Thanks. Angular has been nice but when something goes wrong I've had a hell of a time figuring out what it hates about my code. Just plain hard to debug (but I just started a few months ago so perhaps I'm making rookie mistakes)
Recent PHP (5.6) is practically a different language than PHP 4, which is the last PHP that most people who dislike the language seem to have looked at it. Granted that it's a bit late to the game in having things like interfaces and a good module system (Composer), but don't discount it. That said, I agree with OP's statement about sticking with just JS for now. Better to master your first language before branching out in any significant way.
*This* is exactly what I *expect* to happen when I type something like the [Konami code](http://namuol.github.io/cheet.js/) on a website.
I was thinking getting really good at pure vanilla JavaScript would be best because that's what all these other frameworks are based on.
That's some nice waves.
found one that might work: https://jsplumbtoolkit.com/demo/home/dom.html
I've been building webapps with Backbone for 40+ hours a week over the last couple of years. If you want to "get it done faster", Backbone is not the right choice, especially if you currently have no experience with it. Sure, an experienced Backbone dev /may/ be able to get something done just as quickly as an AngularJS dev but as I said, it requires experience. This is because Backbone has practically no opinions on how to build and manage your views, this is arguably the most complex part about building the frontend of a webapp. This means that you have to build a lot of shit with BB before you've hung yourself enough to be proficient with it. I'd like to compare Backbone vs (Angular/Ember/etc) to C vs (C++/Java/Python/etc). In C, there is some low level stuff you have to do manually, e.g., allocate and deallocate your own memory, stuff closer to the hardware; this is abstracted in higher level languages. In Backbone, you have to manually define how your views render and you have to make sure to properly tear them down so that you don't get a memory leak, your code has to be closer to the DOM. Modern frameworks abstract this stuff away from you and are more prescriptive. With all that said, there is nothing wrong with coding in C if you want to be closer to the hardware, there are performance benefits; make sure you know what you're doing. Also, there is nothing wrong with using Backbone if you want to manually manipulate the DOM, there can be /some/ benefits but again, make sure you know what you're doing. AngularJS will probably be your best bet. React is really cool too but it's the almost the opposite of BB in that it's opinionated about views but not data. Good luck. 
Marionette solves many of your problems with Backbone. In fact I would say it is pointless to compare Angular to Backbone in the absence of Marionette.
Ok then, what do you think is the most employable skill set. Angular and bootstrap maybe? And I wasn't trying to impart wisdom, I was asking a question. I feel that I'm right at that point where I need to concentrate on employable skills. Also, is there certifications I should get or is that even necessary if I put together a portfolio of finished products. Edit - expanded answer
While I applaud your desire to learn a framework and master a language, you're missing one very basic point. You don't need to master any of these frameworks or libraries. You need to master the language. Trying to shoehorn everything you do in to one specific language or one specific library/framework will cause you untold amounts of stress and headache trying to make things work. "Use the right tool for the right job." There's a reason people say that all the time. I primarily code in .NET and C#, but there are times where I need to use PHP, or JS with Node, or jQuery, or Angular, or Backbone, etc... My point is, don't focus on the library or framework, focus on the language and how to use it.
Yes, it is possible. [Howler.js](http://goldfirestudios.com/blog/104/howler.js-Modern-Web-Audio-Javascript-Library) is one library for doing it.
It did not, but it is the first one which supports it outside the box.
Eh? No. You have to write *more* documentation if you use an option object. A good editor/IDE can parse the head of a function and can then tell you in a tool-tip which arguments are expected. With an option object, you *must* add doc comments to get a similar effect. However, this isn't standardized and not part of the language. Inferior tooling is a *huge* downside of option objects. It adds a lot of friction.
&gt; To help illustrate, you'd never use more than one framework on a given project Nitpick: you could use Ruby on Rails + Ember.js, or Express.js + AngularJS. I.e. you can use multiple frameworks in a project if they do completely different jobs.
What website are you talking about?
I frequently use these: [mediaelement.js](http://mediaelementjs.com/) [soundmanager2](http://www.schillmania.com/projects/soundmanager2/) They include flash fallbacks for outdated browsers
I work for a consultant company, so my answer is only one view of the world. The companies that i've been working with lately are mostly .NET and there seem to gravitate to knockout.js. Knockout isn't a framwork, its just a data-binding library that will help facilitate MVVM. Another client wanted to move to Angular from knockout but was worried about the ramp up time of getting their entire dev staff (50+) to embrace Angular for their current project. They stayed with knockout. From my experience, you cannot go wrong with learning Angular. More and more enterprises are starting to take a serious look at it and will be looking for competent devs to help pave the way. With that said, if your goal is to be immediately employable, I suggest going to indeed.com or some other job search place and play bingo to see which library is most popular in the requirements.
I'm just trying to defeat this attitude angular advocates seem to have that everything sucks *because* angular is great. Sure it's great, but that has no bearing at all on whether or not other frameworks get the same job done and often excel in most of the same areas as angular.
To add to this question, what then would be the suggested way to initiate an arbitrary number of objects? **edit** to the down voter this question is to illustrate `for` loops still have a place.
cool. and your reasonings?
Whichever meme website has Overly Attached Girlfriend with the creepy eyes that follow the cursor around. I haven't seen it in a while though.
Is that built into Jasmine? I just tried it and it didn't seem to work
of course. JavaScript is something I think we're all mastering, but practically speaking large projects get done with useful tools. I'm asking about these tools and how others are leveraging them.
Thanks! Good stuff
Whens the last time you used non chrome dev tools? http://i.imgur.com/gVuu8ln.png http://i.imgur.com/UzheOYb.png http://i.imgur.com/COlQBEm.png
Point, but I'd counter with those are running on completely different execution environments. RoR handles HTTP requests and responses and doesn't know anything about this "browser" thing that consumes the documents that it generates or sends it new requests. Meanwhile, Ember.js is running on a completely different computer, manipulating a document, and making calls to some external service (RoR) for more information as needed. So, nitpicked back at you. ;)
Nicely written. One of my current projects is actually maintaining, extending, and yes, modernizing a legacy PHP app written by at least one person such as you describe. Its... bad. Really bad. But, it won't be by the time I hand if off to whoever my eventual successor on that code-base will be.
Yeah, it took a while, but IE11's tools are neat, for sure.
Hi guys, Since many people were telling me that `npm` is good only for server side, I made this screencast to show one possible way of using npm for front-end. PS: This is my second screencast I ever made. Would really love to hear your feedback and recommendations!
Using regex here is like using a nuclear bomb to swat a fly. It's not "hacky" because the interface abstracts away the nasty, nasty guts of what is going to happen. But, hey, what should I expect from /r/javascript but way, way overcomplex tools for simple problems, right?
No, it's not a bikeshed of alert, it is a complete failure to recognize that looping through 40,000 characters when you could know the answer on the first character is a stupid stupid thing to do. Learn the `break` keyword.
Seem neat. Constantly crash on me though. Also their emulation features are pretty shit. They don't really come close to proper emulation for IE7/8. This being said, they have improved tremendously. 
Cheers, you got the right path!
Nice, I'm also using npm for front-end and it's a great experience. I'd suggest allowing your class to be instantiated without `new` so that you can just write: require('looker-on')(document.body) I'd also recommend beefy for development if you haven't heard of it. Often you'll never need to write any HTML when developing small front-end modules. Your repos end up cleaner as well. The trickiest part of the workflow is CSS. Tools like parcelify and insert-css help a bit, but there's still more to be desired..
You keep stating opinion as fact. It's frustrating.
+1 for Mocha + Chai + Sinon. We also use rewire to help with mocking on the Node.js side. For the frontend tests we use use Karma (for AngularJS midway testing) and Selenium/Protractor for integration testing.
To be honest, I wouldn't use a properietary framework. It's too risky, and the business model is old-fashioned. You shouldn't pollute the global namespace with functions. Anyway, I tried to take decent a look at the source, but apparently the (.coffee) source files are removed from the public GitHub repository. So no more technical comments from me..
But my dear, constantly crashing *is* proper emulation of IE7/8!
I'm terrible at explaining things sometimes, haha. Basically, I don't have access to the contents of the page inside the frame (different website), but when someone clicks any link within the frame, I'd like to scroll my website to the top of the page. This is because sometimes the iframe will take you really far down, and when someone clicks a link inside of it, the iframe refreshes, but my parent page keeps you at the bottom of the page.
Replace line 50 flake.append("&lt;img src='" + snowsrc + "'&gt;"); with the following: for (i = 0; i &lt; snowsrc.length; ++i;){ flake.append("&lt;img src='" + snowsrc[i] + "'&gt;"); }
Microshaft? Really?
Awesome level: one thousand!
In that context, the original results weren't rendered before the form submission anyway though. I agree that various forms of progressive enhancement are a good thing.
Yes, really. It's not uncommon for people in the industry to refer to Microsoft in such a way.
Try not to think in terms of one new feature of an entire scripting language "the future". Will this vastly improve JS frameworks like Angular/Ember/Knockout that use databindings to update content/layout? Yes. Will it make all of your other libraries and frameworks completely obsolete? No. The need for data observation in JS is just another part of the natural evolution of the web. All of those frameworks do it "manually" today; browsers will soon have it natively. It may reduce the need for frameworks in smaller applications, but larger systems with complicated business logic are still likely to require any number of tools to accomplish the task. Browsers are also now just supporting observe; if you have to support anything other than the latest and greatest, then "future" is realistically 5 or more years away.
Even IE9 isn't properly emulated though 
Thank you for your input, it's definitely been very hard for me think of it on such a low level, but I guess I'm just in an area where it's really over-hyped 
For me it was fine if I navigated to my page and then pressed F12 but if I opened IE and then pressed F12 immediately it hung. Turns out the default msn homepage was doing it. I set my homepage to about:blank and it was fine. Pretty sure that's some form of irony.
Haha yeah, I know. Thankfully IE7-11 virtual machines are available from Microsoft for free. It's an inconvenience but I'm glad to see has made such a big leap in its dev tools.
I should have been more descriptive. In our case there is no server component. The app is served out of a static folder and uses the public API. Most all the text is entered by the user and so there are very few headings and menu items to translate.
 Interesting, I'm getting a syntax error "missing ) after for-loop control: (on column 43)" 
What error are you getting?
Sry, just edited it in above :)
Try changing `++i` to `i++`.
Hey, the javascript is effectively open sourced, but we'll look into putting the coffee files in.
Still getting the error... hmm
If that syntax really bothers you, you could always use a library such as Underscore or Lo-Dash. _.each(nodeList, fn); // where fn is some function executed on each element _.forEach(nodeList, fn); // alternate syntax
Removed, please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Do you mean "If the string represents a number" or "if the string contains a representation of a number?" In other words, does "This string contains 1 number" pass or fail? You might also want to be more explicit about what *kind* of numbers you want to accept. If it's a telephone number or social security, you almost certainly want to accept "punctuation" like spaces or dashes. If it's an amount, you may want to accept decimals and commas. I'm sure this seems very pedantic, but in programming, is is often far more valuable to be strict about what you want done, than to be strict about how you do it.
And http://txt2re.com/
I'd look at this http://www.w3schools.com/html/tryit.asp?filename=tryhtml5_video_js_prop Then use myVideo object in some way - maybe myVideo.currentSrc or something along those lines.
That jokes never get old :)
Sorry, here is the fixed file: https://gist.github.com/AustinDizzy/eecc0d3517d1855ec554. I added the for loop in the incorrect place and I didn't test that it worked before telling you the solution. The file above works fine and I tested it properly this time.
it works!! but, there is one little thing: it places the last image in the set statically in the top left corner. &lt;script type="text/javascript"&gt; $(function() { $(document).snow({ SnowImage:[ "img1.gif", "img2.gif", "img3.gif", "img4.gif"] }); }); &lt;/script&gt;
Ha that is very ironic! Guess it might've been the pages I was testing. Still the FF and Chrome consoles could debug them fine..
Well played sir. Well played 
Oh I wish we could drop IE7/8 unfortunately banks and gov. agencies use our services and tend to be stuck in the middle ages of web browsers. 
Ok, the problem was that I had more objects than the script was told to allow. var settings = $.extend({ SnowImage: undefined, Quantity: 5, HideSnowTime: 10 }, options); So, I upped the quantity and it works fine. Thanks so much /u/AustinDizzy !!
It is a dependency injection container. It helps you manage internal dependencies in your applications and cleans up your global scope. For example, say you have a module that validates a form, sends data to the backend via ajax, and displays a message to the user. You could just put all of this code together in a script, or you could: * Separate your code into three modules: validation, http, and rendering. * Register all of the separate modules with bottleJS. * inject the three different modules into your main module constructor, and use those to complete the task. Doing it this way keeps your code uncoupled and easy to manage. This example is trivial, but if you have twenty little modules that have interdependencies between each other, Bottle helps you register them once and manages the dependency tree for you.
I'm stuck on not being able to console.log out objects or HTML elements and expand or inspect them, respectively. Until that gets fixed, I only delve into IE's tools when I need to.
I also tried this - http://jsfiddle.net/znspx9fe/
I'll just quote Addy Osmani from Google (who created todomvc.com) on the use of frameworks (being a bit tongue in cheek). &gt; "We refer to the current state of new frameworks frequently popping up as ‘Yet Another Framework Syndrome’ (or YAFS). Whilst innovation is of course something we should welcome, YAFS can lead to a great deal of confusion and frustration when developers just want to start writing an app but don’t want to manually evaluate 30 different options in order to select something maintainable. In many cases, the differences between some of these frameworks can be very subtle if not difficult to distinguish." ... &gt; "Know what flavor you’re after as there are plenty of frameworks available which provide one or the other. Opinionated frameworks lock (or suggest) you to do things in a specific way (theirs). By design they are limiting, but place less emphasis on the developer having to figure out how things should work on their own." He provides a fairly good overview of when to use angular, ember, knockout, yui, backbone and others. It's a pretty good read (albeit somewhat out of date now.) There's also some good advice on when to avoid frameworks from Derick Bailey (author of Marionette): &gt; "While a good portion of problems can be decomposed into JavaScript MVC, there are some which simply cannot.For example, an application consumes a third party API at runtime, but is not given any information as to how the data will be structured. I spent almost a year trying to solve that very problem, but eventually I came to the realization that shoehorning it into MV* was not a viable solution. I was dealing with an “amorphous model” and that’s where it all fell apart. **In other words, if you don’t have a well-defined model, most modern JavaScript frameworks can’t help you.**" Reference: http://www.smashingmagazine.com/2012/07/27/journey-through-the-javascript-mvc-jungle/
FWIW Angular has plans to switch to Object.observe instead of the current dirty-checking mechanism for the version 2.x releases. The dirty-checking mechanism increases in time to complete, regardless of the number of changes, as more items need to be watched. Object.observe, however, only triggers for the specifically changed models, and so stays at a constant performance level regardless of the number of items watched (only affected by actual # changed). THAT is why Object.observe is so widely hailed.
Angular.js. I put that on linkedin and I get so much recruiter spam...
Safari's still suck though
Not quite. There's no manual memory management in JS; it's garbage collected. Memory is automatically allocated, and automatically freed some time after it's no longer needed. A memory leak occurs when an object is no longer needed, but a reference to it still exists that prevents it from being GC'd. This is a pretty good overview: https://www.youtube.com/watch?v=LaxbdIyBkL0
There are several issues 1. You load your script on window load, then also wrap it in document ready. One of it is unnecessary (window load). 2. You are nesting &lt;p&gt; elements, which is invalid markup. Each &lt;p&gt; closes previously opened &lt;p&gt;, so the text content of the first p (p.copyright) is actually empty. 3. You use querySelectorAll which returns NodeList, not string, so it doesn't have match method. You may want to use `var content = $("p[align]").text()` 4. Regarding the regex - idk what are your requirements, but the simplest regex that will match the phone number would be `alert(content.match(/\(\d{3}\) \d{3}-\d{4}/))` http://jsfiddle.net/5o6qo2ab/
This is basic javascript 101 stuff, read a damn tutorial
One thing to come out of it is that you no longer have annoying trade-offs when considering whether or not to use two-way data binding. For example Backbone, Ember, and Angular all take different approaches to keeping the UI in sync with the data. In Backbone, you use .set() on your models to change their properties, and you can tie into events associated with it. It's very verbose, but it's also pretty straight forward. In Ember (haven't really used it, frankly), you can declare bindings. I'm not sure how it's implemented, but the point is that not everything is under observation, just specific objects/properties. Angular goes all the way by dirty checking everything it knows about, nonstop. The trade-off you see here is in code complexity/verbosity vs. performance. But with Object.observe() the debate is over. There's no good reason NOT to use it. I'd like to see a framework/library with a simplicity level similar to that of Backbone (just the basics, essentially) that uses Object.observe for data binding. 
Not sure. Sawtooth pattern is what you see in the memory usage graph is there's a leak. There's no sawtooth here though 
The problems I mentioned are just some of the things that don't come out of box. I'm familiar with Marionette and the constructs it has to offer. Marionette is still not prescriptive from architectural perspective, it just gives you all this "best practice" boilerplate. It's definitely helpful but at a large scale, architecture and organization become a much bigger issue. For example, lets say your UI depends on many RESTful APIs, some are needed immediately to load the UI but others can be loaded lazily after a certain actions take place. You also want to make sure you're not trying to fetch a resource that you previously fetched, how do controllers know of all the resources that have already been fetched, assuming you're using controllers. Also, when you have views listening to all these objects (models, event mediators/aggregators, etc.), code complexity can be hard to maintain because there are cascading changes that can occur, e.g., views action occurs, model gets modified, other listening views do stuff, another model gets changed, and so on. It gets to the point where the only way to confidently make a change to the system is to grok all the nodes and edges so figure out how changes propagate. Sure, all this is solvable with Backbone + Marionette + Chaplin + custom stuff but it takes time to develop a framework and conventions to help mitigate these issues, it's very non trivial. As your app grows and your team grows you need to establish constraints in your framework to make sure everyone is on the same page without needing to write a book on how your system works. So my point is, in the world of EmberJS, AngularJS, React, Mithril, etc. I find it hard to believe that we're still telling people, "yeah, backbone and marionette, you'll be fine.". It's like telling people, "Need a web server? All you need is C and socket.h, you'll be fine." Really smart people are solving the pain points that we've discovered through jQuery spaghetti and Backbone, we should take advantage of that. IMO, EmberJS is the best and most complete KVO MVC framework out there, there is a wrong and right way to do things. To be fair, it all really comes down to choosing the right tool for the job but that is my 2 cents.
&gt;I definitely see how Object.Observe() can make things more efficient but I feel I will still use AngularJS Future versions of Angular (2.x) will make use of Object.observe. https://docs.google.com/document/d/10W46qDNO8Dl0Uye3QX0oUDPYAwaPl0qNy73TVLjd1WI
Ahh ok gotcha! :( Unfortunately... if its not on the same domain and you don't have access to that site you are setting in the iFrame then the browser wont let you attach an event listener to it for security reasons. http://softwareas.com/cross-domain-communication-with-iframes/
Thanks for the answer and video. I thought memory was automatically allocated and deleted so I was confused about memory leaks. I'll definitely check out that video. 
So what? People use jQuery all the time to manipulate the DOM. And I'm guessing that those that down voted me didn't bother to see if the resource I linked to would be helpful or not in understanding how to manipulate the DOM. I'm a newbie, and I found it helpful.
&gt; type="text/JavaScript" &gt; document.writeln &gt; prompt Looks like you're using some dated resource to learn JavaScript. "text/JavaScript" was never correct, by the way. Mime types are lower case. Here is how that kind of thing is supposed to look like: function Foo (text) { this.text = text; } Foo.prototype.print = function () { console.log(this.text); }; var foo = new Foo('asdf'); foo.print(); // asdf
Seems like the regexp you would want is: /\(?([0-9]{3})\)?([ .-]?)([0-9]{3})([ .-]?)([0-9]{4})/ Not sure why you were using a backreference, unless there is something I am missing.
No arguments there.
Another somewhat obscure way to do it: const CHAR_0 = '0'.charCodeAt(0); const CHAR_9 = '9'.charCodeAt(0); function containsDigit (s) { return [...s].some(x =&gt; { let c = x.charCodeAt(0); return c &gt;= CHAR_0 &amp;&amp; c &lt;= CHAR_9; }); } LOL. But seriously, just use `/\d/`.
It's pretty sawtooth-y. Sawtooth doesn't indicate a leak, though, unless the peaks are getting progressively higher. Sawtooth is actually what you would expect from a normal, non-leaky program. However, if you have a very short period to your sawtooth wave, this means that a lot of GC events are occurring, so that might be indicative of a problem. To quote this page: https://developer.chrome.com/devtools/docs/javascript-memory-profiling &gt; The profile for a healthy application should look more like a sawtooth curve as memory is allocated then freed when the garbage collector comes in. There’s nothing to worry about here – there’s always going to be a cost of doing business in JavaScript and even an empty requestAnimationFrame will cause this type of sawtooth, you can’t avoid it. Just ensure it’s not sharp as that’s an indication a lot of allocations are being made, which can equate to a lot of garbage on the other side.
I know what you mean. I really like the readability of the matching opening and closing tags, but XML is just too verbose for systems that need to do everything they can to shrink their bandwidth. And also, it's how Javascript/Node defines object literals. XML has some weird stuff though. I mean, what makes something an attribute instead of a child? It's sort of arbitrary. Plus, nodes can have a single text value, though only if it doesn't also have children, so if you want to add children later, you're stuck. And if it has this text value and attributes too, then, it's rather weird to say the parent of these attributes has a value of its own. With JSON, everything has to have a name (besides root) and all children are treated the same.
The second part of the addEventListener method is called a 'callback' method: function (e) { keysDown[e.keyCode] = true; } This is a common pattern in programming, especially in JavaScript. It is basically saying "Give me a function, and whenever an event happens I'll call that function of yours so that you can decide what to do with the event." So basically 'e' represents the event. What exactly you have accessible in 'e' depends on the code you are calling, so you'll have to refer to their documentation (in this case, jquery). Or, inside your function method you could say console.log(e); Then when you test it out, press F12 in your browser and click on Console to see what gets printed. More on callback functions: http://javascriptissexy.com/understand-javascript-callback-functions-and-use-them/
Comments section is for opinions. If you take any comments as a fact, I really feel sorry for you. That must be tough browsing reddit...
Features and productivity. Just read a few articles and you should be sure which one to pick. Try this one for starters: http://swizec.com/blog/i-was-wrong-about-angularjs/swizec/6602
in kenman's example though, return eliminates the need for a break. 
Nice! Great Job! Who did this?
"e" is only a short default name for your average event object. As long as you only support browsers newer than IE8, this code is going to add every key code pressed to an object keyDown. For example, if you pressed the ESC key, keyDown[27] would be set to true. If you want to know what is done with this information, search the further uses of keyDown.
Yeah this one isn't bad.
Is this what you are looking for? http://jsfiddle.net/qzLLwdf5/
Tell me if this helps function TheCaller(callback){ callback("argument!!"); } TheCaller(function(e){ console.log(e); }); Will log a "argument!!"; It looks strange at first, that's why long explicit names are for
What's lacking in Firefox's Dev tools? I prefer them, but I'm usually only in console or inspector.
Oh, thanks, that's a nice feature, because "window.parent.foo instanceof window.parent.Array" yields true, which could be a pain, but completely makes sense. Thankfully that's not my area of work, for now, but it is something to look out for. Thanks again
Is it broken? I just get some giant text obnoxiously blocking the page.
instanceof is usually code smell. As in, there is probably a better way to achieve the same thing. For numbers and strings, `typeof` is a good option. For functions, duck typing is often a better choice than instanceof. So your code might look like this: if (typeof obj.dispose === 'function') obj.dispose() `constructor` is unreliable and can be overridden easily. You should never rely on it to be a particular value.
I think you should move from back to front. Start with the basics of MVC before you get into fancy front ends. The division between frontend and backend developers needs to end, you need both and a good Web developer is great at both. I'm a huge fan of Rails, since 3.2. Check out RailsScript, it's a Javascript framework for Rails that is super simple and gives you all the control that the big name front-end frameworks. Making the front end look pretty but not being able to do something with form data is pretty useless, and vice versa. 
I really do like IE's JS profiler
Love this reply. Thanks man.
I'll check rails script out. Back end is a totally different game for me. I have some experience with PHP and python but that's it. In the back end space what matters most to me right now is ease of deployment since my primary dive is on front end mastery. That being said my gut tells me to avoid PaaS like firebase. I feel intuitively that I need to know how to set everything up on a standalone box before leaning on a "let them do it" service.
&gt; (5).constructor === Number or ("").constructor === String Kinda obvious: &gt; ''.constructor String() Kinda weird: &gt; 5..constructor Number() Less weird: &gt; 5.0.constructor Number() Anyhow, I kinda agree with /u/mattdesl, I guess. Doing things depending on what something is is a code smell. You shouldn't flip-flop types. Your functions should expect specific types and they should return one specific type.
Chrome offers: CPU profiling (with the option of a nice flame chart view); heap snapshots and heap allocation profiles for memory profiling; timeline panel, which gives insight into events, percentage of time taken by scripting|rendering|painting|other|idle both per frame and over arbitrary time periods, memory usage patterns over time, insight into GC event frequency, etc. Plus (experimentally) per frame canvas profiling, and probably some other neat stuff. As far as I can tell, Firefox mostly just provides CPU profiling, and it doesn't seem offer much if anything in the way of memory profiling, or anything comparable to the timeline panel. I also just find that, for me, the Chrome dev tools has a much friendlier UI. I also prefer the Chrome 'Elements'/DOM tools. It has a lot of small features that are nice. Like scroll over a selected/highlighted numerical CSS property to increment/decrement, shift-click a color to change how it's represented (RGB, HSL, hex, etc.). What it boils down to is that, at least for me, I find that I am able to get a much better idea of how my JavaScript is performing with the Chrome dev tools, in terms of both raw performance and memory usage.
JavaScript has first-class functions. That means you can store functions in variables, you can pass them to other functions, and functions can also return other functions. The example above can be also written like this: var keyDownHandler = function (e) { keysDown[e.keyCode] = true; }; el.addEventListener("keydown", keyDownHandler, false); In your example, instead of storing that anonymous function in a variable, it was directly declared where it was needed.
Nyan cat reporter also makes me smile. 
Yes, but many times I wanted to have some utility code, like the isNumber or isString, moreover, to have a method which would use a index or value, string, or even evaluate a function and use the output. But I get both of your points, this should, if at all, used with extreme caution. Thanks for the clarification :)
I was interested until I saw it was a jQuery only plugin. No thanks. edit: I stand by what I said. I don't have the option of using jQuery in many of my projects and getting so heavily downvoted from jQuery fanboys is exactly the sort of toxic community I'd like to avoid. 
Memory is allocated and initiated when a property or method needs it. When that property loses its reference, it's deleted since there is no longer any use for it. Memory leaks can happen when you have two properties with a strong pointers to each other so that neither can be deleted using the auto reference counter (arc). 
If you don't submit this to chromium, your soul will never find peace in the afterlife. 
Seeing these presentations over the years, and noting his evolving opinions, is like watching Crockford, very slowly, learning Lisp...
Pretty sawtooth-y? :-D Sorry for asking but have you ever seen sawtooth in your life? :-D 
https://stackoverflow.com/questions/336859/var-functionname-function-vs-function-functionname
Thanks for looking into this. Because I have no life I tweaked your example a bit... * instead of one sample string ("adfklaj;lkjr2adfklaj;lkjr"), I have each test run through a list of 1,000 random sample strings (generated once, so that each test gets the same list). * I added a new test, *indexof*, that I thought would be faster than *Loop* but is actually pretty crappy. * In [rev 2](http://jsperf.com/contains-digit/2) when the input string length is 20, *Regex* is slightly faster. * In [rev 3](http://jsperf.com/contains-digit/3) when the input string length is 10, *Loop* is slightly faster. I may have screwed something up, but if not the results are a little surprising. I feel bad because the author of *Loop* caught some flack but given the right input conditions it can be faster (though regex way is the most straightforward way to go, in my opinion).
Check out one of my [riffs](http://jsperf.com/contains-digit/3) on your test. If you change up the sample set it doesn't perform too badly. 
the first one looks like an object property (or method), the second is a function declaration. A method is just a function that belongs to an object, such as the toString() method belongs to the String object. 
Methods and functions are like squares and rectangles. All methods are functions. A method is just a function that you call on an object like `array.join()`. A regular function would be `function joinArray (array, separator) { ... }`, but as a method it's `['a', 'b', 'c'].join()` (or `Array.prototype.join`). So technically the first example *is* a method since it's defined within an object and would thus be called on the object. var foo = { method: function () { // When foo.method() is called, `this` === foo } };
Too good for jquery? It's used on like 90% of all websites, why wouldn't you make a plugin for it? 
I wonder how much of each iteration under this approach is taken up by the overhead of `.forEach(function(){})`?
Yeah that's a good question. I wouldn't be surprised if it's a significant portion, so I (tried to) factor out that element by making sure that each test used the same "strings.forEach()" outer-block. Incidentally I should note that my results are browser-specific. For example I fired up IE11 instead of Chrome and it appears that *Loop* is much slower regardless which rev you go with.
Has anyone actually got this working?
And PHP has a huge market share of all websites built. What's your point?
Your argument is directed at yourself op. :3
Its always a good idea to do authentication on the serverside. If you do it clientside anyone can see ur code. I also dont think its that easy for a "hacker" to generate a correct user token and inject it into your api call.
http://en.wikipedia.org/wiki/Method_(computer_programming) &gt;A method (or a member function) in object-oriented programming (OOP) is a subroutine associated with an object of a class In the first, 'example' is associated with the object it is contained within -- consider the following: var foo = { bar: 'baz', baz: function() { console.log(this) // {bar:'baz', baz:function(){...}} } } In the second however, there is no object the function is associated with.... in such a function, `this` (unless set by call or bind, or being associated with an event handler) would be window.
Op got lost replying to the sawtoothy thread
Object,prototype.toString.call(whatever) FTW. 
Yeah, the authentication token you get from Facebook will be unique to your app and that user and significantly difficult to guess/generate otherwise. Integrating with the Facebook login system on the front-end then passing the generated authentication token to your backend for storage is a fairly standard way of doing things. Facebook is doing all the heavy lifting for you - storing passwords, user verification, etc. 
The referrer of the request to facebook is checked by facebook iirc. 
This caught me out at the start, still can be tricky sometimes if there is no real documentation around the code it can be hard to know what is passed into the call back function 
I know you're new to Javascript, but if you're interested this is a perfect case for [Handlebars.js](http://handlebarsjs.com/). Instead of using that big string blob in your JS to create the stock entries you can declare a Handlebars template in your HTML and then fill it with the appropriate data in your JS: http://jsfiddle.net/q743q7mh/1/
The first one won't work except in an object assignment, like p = { example : function () {...}, data: 3 }; It usually serves to assign properties (and, with functions, methods) to an object or to the prototype of an object. Then you get the same effect as someObject.example = function() { ... }; which makes example a method of someObject, and which is an example of a third form: example = function () {...}; This has pretty much the same effect as your latter snippet, except the function itself has no name (which is only meaningful for debugging). 
Yeah I did, never drink and reddit. Anyway, this is sawtooth: http://i.imgur.com/KREZXO9.png
This is sawtooth: http://i.imgur.com/KREZXO9.png
OpenAuth can be linked with a server session. Not handling sessions yourself is always a security issue.
The analogy between programming languages and natural languages is misleading. I am not a native english speaker and I have never been in a country where english is the first language. I care a lot about the quality of my code. I just don't use linters to enforce it. Your perfectly linted code can be badly broken. My un-linted code can be bug free (even if not conforming to any coding standard, except mine). There are no silver bullets.
Unfortunately he's right. There was a AMA with the Excel developers and the plans are to move to a multi platform capable scripting language, and that is probably going to be javascript based because they want to push Office 365 / web based apps. They could have done so much with office, but it has languished for quite some time IMO. I'd have loved to see .NET ported in but that would cannibalize their other product lines IMO.
This kind a posts are the ones that sometimes make me kill myself.
Nope, sorry. It is as speaks_good says elsewhere on this page. The association of a method with its object happens purely at invocation time in JS. How the function was defined and which objects it is in, is not relevant. 
Note that there is also /r/learnprogramming/ which is an excellent place to ask these kinds of questions. 
Here is the same effect without javascript/jquery: http://codepen.io/chrisgiggles/pen/yrtps/
Thank you very much! I now know how to do it myself :)
Touche.
Looks like facebook may have changed how this works recently enough, but there's more information [here](https://developers.facebook.com/docs/facebook-login/access-tokens) wrt people having the client change the token, facebook will have signed the response to stop this happening (well, to let you detect that it happened).
I thought facebook gives you back a guid? If so "significantly difficult" is more like "statistically impossible".
What is important is that your application server validate the token with an api call to the authoritative server (Facebook or Twitter) as an authentication procedure. Security is always touchy, I recommend you to use a strongly tested server side library :)
Exactly. Declaration means nothing. Invokation is the key. 
Well sure, but don't feel obligated. 
This doesn't really answer what the OP asked.
The big problem with instanceof also exists in other languages with poor type inspection: that you create code branches based on an identity when what you want is behavior. Alright, lets say you want a system for handling children's toys. So you think: I'll make a base constructor that is this Play interface and everything else has to Inherit its prototype. Then you make a class that is a TeddyBear which adheres to it. Next you have a class that is BarbieDoll. And then a GIJoe class. Next you realize that BarbieDoll and GIJoe have common posing behaviors and make a class of that and have BarbieDoll and GIJoe inherit that. Then you realize that a TeddyBear and a BarbieDoll can attend a TeaParty but GIJoe can't. Your system of using inheritance has failed you because unrelated behaviors are demanding control of the base class. Prototypical inheritance is good in instances of shared behavior, but poor for inspecting. The problems of common behavior can be handled easily via Mixins, I.e copying behavior to a prototype object. But instanceof doesn't reflect that information. The solution is Duck Typing. The analogy is that the best way to know if something is a duck is to check if it can Quack. With our toys, you check if the toys have a Play function. 
Have you used Polymer? It's not yet quite clear to me how to build app-level structure with it. So far my feeling is that Polymer is an appropriate solution for views, but you need a little more than just that for structure. It seems like Polymer and React are somewhat looking at the same problems. 
Disagree. The association that is important for a method is merely where the function is stored and what the programmer intention is. It's a notational distinction only (not syntactic or semantic). In the case /u/tswaters mentions, baz is associated with foo whether or not baz is called because baz is a property of foo. That is what makes baz a method. To illustrate, consider the following jquery code: function print(x) { console.log(this) }; $.each([1,2,3], print); Would you say print is a method now? Or a method of 1, then 2, then 3, each for only as long as print is called? I would say no to both cases, print is just a function declaration that is called with a particular this binding. It doesn't help to think about print as a method in this case. There is not the essential association of print with some particular object or prototype. Or, another example: var obj = { length: 1, 0: "hello" }; Array.prototype.join.apply(obj); You would say that join is a method of obj (at least as long as join is executing with obj as its this value). I don't think this is really a useful way to look at it. Join is clearly an array method regardless of how you call it, but you can apply array methods to other objects. Or, consider another example: var dog = { bark: function() { console.log('bark'); } }; bark = dog.bark(); bark(); You are saying that in this example bark is never a method because the this value is not set to dog. I disagree, I think it's very clear and perfectly proper to refer to bark as a method of dog because it is clearly associated with dog and the programmer intent is clear.
From JavaScript's point of view there are no methods. There is just some funky stuff going on with 'this' which depends on how you call a function. Regarding what the programmer intended and how we should think about the function/method involved, then yes, I agree with what you are saying. 
You are correct that JS doesn't have the concept of a 'method' as some semantically distinct entity. Method (as wikipedia corroborates) is not necessarily a semantic distinction, and since JS doesn't have a 'method' as a semantic entity, it's pretty clear in context that we must be talking about method as a concept. So, in JS, you can make things you can call methods. Typically, but not always, methods differ from other functions in a few ways - they are often called with a receiver, they are usually defined using a function expression, they typically use this in the body, etc. but these are not essential qualities of methods in JS. As you say, methods aren't really a thing in the language. In JS, method is merely a useful way to describe a function that is conceptually associated with a particular object or prototype. That is all.
[You're in for a treat, then](https://hacks.mozilla.org/2014/09/webide-storage-inspector-jquery-events-iframe-switcher-more-firefox-developer-tools-episode-34/) Changing color representation is a global setting, unfortunately, but AFAIK Chrome devtools doesn't have a color picker for css styles. I'd argue Firefox's devtools are far from severely lacking, but it really depends on your workflow. Better sourcemap support and hot code replacement are primarily why I'd choose to use Chrome devtools. 
reading the code examples on that site is very difficult.
If it is a Google Ad it would be iframed in, no?
http://www.codeshare.io/mxlWk Go here, if you want to edit the script. It's live.
You can change the color representation globally, but you can also change rules individually by shift-clicking a color in the styles sidebar (although I don't think this is saved, so it will revert if you refresh the page or view a different DOM element). And chrome has a color picker, too. The events thing is really cool. Opera had this a while ago, but for some reason I think they might have gotten rid of it when they moved to blink. The jQuery event thing is also MASSIVELY awesome. It's not very helpful to view an event only to see some the jQuery eventHandler function. The performance tools look pretty good, but they still don't look to be on par with Chrome for me. Plus no memory profiling (that I can tell), and they're 2 versions out from stable (v34). I'll look forward to trying all of this stuff out. It's a pretty nice time to be a web developer.
Backbone doesn't give you anything when it comes to architecture. It gives you a set of base classes, and you must figure out how to put everything together. It leaves tons of room for making poor decisions when it comes to DOM engineering and listener setup.
&gt; It still feels like I'm writing JavaScript. My main complaint about Angular is that once you're in it... I think it's the other way around. Angular lets me write my application code as plain JavaScript, like I would if the browser had been designed for writing web applications. I don't want my application code to care about listener setup or inherit from Backbone.Model to get listener functionality. Listener setup and DOM manipulations are hard to reason about, and the application code becomes much simpler when that logic are completely separated out (into directives in Angular).
Thank your for replying, but i get an error (Unknown identifier: 'Math'.) Thanks.
ahh, didn't realize this was Unity... try now?
alhenaworks.github.io shows an example of this in action, let me know if the source or my explainging it can help
This is my library, and one of my first -- I'm still a noob :) Feel free to ask me any questions. Thanks!
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**String interning**](https://en.wikipedia.org/wiki/String%20interning): [](#sfw) --- &gt; &gt;In computer science, __string interning__ is a method of storing only one copy of each distinct [string](https://en.wikipedia.org/wiki/String_(computer_science\)) value, which must be [immutable](https://en.wikipedia.org/wiki/Immutable_object). Interning strings makes some string processing tasks more time- or space-efficient at the cost of requiring more time when the string is created or interned. The distinct values are stored in a __string intern pool__. &gt;The single copy of each string is called its 'intern' and is typically looked up by a method of the string class, for example String.intern() in Java. All compile-time constant strings in Java are automatically interned using this method. &gt;String interning is supported by some modern [object-oriented](https://en.wikipedia.org/wiki/Object-oriented) [programming languages](https://en.wikipedia.org/wiki/Programming_language), including [Python](https://en.wikipedia.org/wiki/Python_(programming_language\)), [Ruby](https://en.wikipedia.org/wiki/Ruby_(programming_language\)) (with its symbols), [Java](https://en.wikipedia.org/wiki/Java_(programming_language\)) and [.NET languages](https://en.wikipedia.org/wiki/List_of_CLI_languages). [Lisp](https://en.wikipedia.org/wiki/Lisp_(programming_language\)), [Scheme](https://en.wikipedia.org/wiki/Scheme_(programming_language\)), and [Smalltalk](https://en.wikipedia.org/wiki/Smalltalk) are among the languages with a [symbol](https://en.wikipedia.org/wiki/Symbol_(programming\)) type that are basically interned strings. The library of the [Standard ML of New Jersey](https://en.wikipedia.org/wiki/Standard_ML_of_New_Jersey) contains an atom type that does the same thing. [Objective-C](https://en.wikipedia.org/wiki/Objective-C)'s selectors, which are mainly used as method names, are interned strings. [.NET languages](https://en.wikipedia.org/wiki/List_of_CLI_languages), [Lua](https://en.wikipedia.org/wiki/Lua_(programming_language\)) and [JavaScript](https://en.wikipedia.org/wiki/JavaScript) string values are immutable and interned. &gt; --- ^Interesting: [^Hash ^table](https://en.wikipedia.org/wiki/Hash_table) ^| [^Flyweight ^pattern](https://en.wikipedia.org/wiki/Flyweight_pattern) ^| [^Symbol ^\(programming)](https://en.wikipedia.org/wiki/Symbol_\(programming\)) ^| [^Hash ^consing](https://en.wikipedia.org/wiki/Hash_consing) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cku86z9) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cku86z9)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Will check it out, what is the standard process for single page app auth 
Marionette brings all of that together. It handles rendering the template, binding event listeners, binding DOM nodes, properly destroying child views, unbinding DOM and custom even listeners, iterating collections and inserting views for them. It comes with an Application/Module system and an event bus, which hasn't disappointed so far. It doesn't force you to do it their way. For example, I don't care for REST and I don't use sync, but it isn't shoved down my throat. I use RequireJS to handle dependencies. It helps keep components isolated and lets me compile the entire project into a single JS file. And if you design your components not to depend on shared components, it's testable.
&gt; it is much more future proof Could you elaborate on this? I'd imagine React would still be more future proof, as its implementation is more or less an abstraction layer over the DOM.
As part of my goal to improve my JavaScript skills I've built this JavaScript Tetris game. I'd be really keen to hear what you guys think and get some constructive criticism!
try linking to jsfiddle.net next time? Useful tool. Also, mind posting sample input/output? 
Sounds very interesting. Similar to window 8 Modern/Metro apps.
If you take your time to learn the Cocoa, Foundation and whatever frameworks may exist in ios/osx, just take some more and learn Objective C. Doesn't hurt to know other languages than JS. 
Thanks. Can I ask why it seems like I wouldn't want to learn Objective-C? I know a lot of languages and by building the examples for and writing this post, I have a pretty solid handle on the core concepts of Objective-C and Cocoa.
Sorry to be dense, but could someone help me call it with jQuery instead of pure JS? The original (touchTouch) is called by jQuery, like so: $(function(){ // Initialize the gallery $('.thumbs a').touchTouch(); }); baguetteBox (which does just what I'm looking for) is slightly different language baguetteBox.run('.gallery') and I'm not savvy enough to make the switch :-\ Because of the IT that I'm working with, I cannot call this from window.onload, so I'd like to be able to call it from jQuery $(document).ready(function() Any help would be appreciated!! 
[async](https://github.com/caolan/async) is a pretty handy library. [Try this](http://jsfiddle.net/1aqew87p/1/).
I wasn't targeting you, sorry if it came out like that :) I think that there is already a solution for every platform. Javascript is the language for web and it should stay like that. I don't believe in hybrid apps, titanium framework or javascript for metro apps. The final result will always affect the user experience somehow if you don't choose the right tools. 
There are websites like PasteBin and gist.github.com which are great for uploading code snippets http://pastebin.com/ https://gist.github.com/
I was facing problem in executing code for Animating ng-view but after checking the code given in the post, I have figured out where the problem was in the code which I was using. 
Oh...
You might also go for Swift now :)
If you consider your time a finite resource, you might prefer to learn open languages with many applications instead of one that is intentionally crippled to only work on approved applications and hardware. The only way it hurts to learn new things is if you could have learned something more useful with the same energy. Right now if you master JavaScript the world is yours to command. It seems like every company has decided the software lowest common denominator is DHTML. Learning apple programming will only help you write software for Apple devices. I would only learn apple programming if I wanted to do something that was hard or impossible in DHTML. When I was done with my js application I could port to android, windows, chromeos, Apple and even things I don't know about yet.
Thank you!
Facebook dumped "DHTML" and went native. Just one of many examples.
It's definitely the no auto play thing, there are hacks floating around on stackoverflow but I haven't tried any of them myself. 
Object.observe won't obsolete AngularJS - but it will help improve the performance of it. There is more going on in Angular than just the data binding. 
It's hard to convey this kind of thing sometimes to non-technical people. I'll give an example of a project we have at work and an example of how one form field can dramatically change the application. I work for a computer manufacturer. One of our projects is a tool to let distributors configure a computer and request a quote. Seems simple enough. The computer is based on the Intel C606 dual socket platform using Intel Xeon E5-26xxV2 generation processors. One of the caveats of this configuration is that half of the PCI Express slots are not activated unless both CPUs are installed. Half of the RAM capacity is unavailable unless two CPUs are installed. Also, due to bandwidth constraints, some PCI-E I/O cards simply can't be used together without both CPUs populated (for example, two 56 Gb/s Infiniband adapters). To do this the right way, the form should reject invalid configurations. To simplify things greatly, we require both CPU sockets to be populated. Fortunately this is what everybody agreed upon. But I can foresee a time in the future when the question comes up: "Why can't we have a low-end option with one CPU? It's a viable configuration. Why didn't you design the system to allow for that?" With two CPUs, only the most extreme configurations would cause concern (all I/O slots populated with top end I/O adapters). We can show all RAM options (instead of greying out options with only one CPU) and they can use the same part for all configurations, which helps a lot for stocking field replaceable parts. The sales people know to ask the engineers whether it's viable when an extreme RFQ comes in, and it's high value and rare enough where that's okay. But low end options are quite popular and allowing for one CPU, a significant number of configurations would be broken. It would take a lot of engineering time to review a lot of low-value orders, so designing the form to strictly constraint options would be vital. Right now the forms and the database reflect the simplified requirements. But if we allow for a single CPU configuration, we have to calculate bandwidth, dependency or exclusively constraints, make the form dynamic to indicate invalid configurations, etc. It's not above our heads to do this - but it's more work than the project merits. We have in the past and shall in the future make new generations of this product. The complexity of queries, forms, validation and other concerns will increase tremendously when population rules that granular must be considered so that the generation of product selected affects which database views and procedures, and form behaviors must be used. To a naive sales person, this is all techno babble and excuses. To them, we've really just told them it's too much work to add an `&lt;option&gt;` to a `&lt;select&gt;` box. Their kid learned HTML in high school, and told them that we're a bunch of idiots, and he could do it in 5 minutes.
 I'd probably use nodewebkit if I were going to write desktop apps for OSX with javascript. It would run on Windows and Linux too.
Yeah that's the thing for me. Angular lets me write javascript without thinking too hard about the DOM. 
Awesome. Stack is such a valuable community for webdevs. 
read this: https://github.com/petehunt/webpack-howto
A coworker linked me to this a couple days ago when some changes were requested on a project. http://xkcd.com/1425/
= assigns, == compares
Use "===" for equality instead the assign operator "=". Also, you should format the code like this: if (a) { // } else { // } Also, you should end lines with ;. I recommend the book JavaScript: The Good Parts. It would've solved all these issues. In addition, you should use jslint or jshint and fix all the problems it reports.
"===" is better than "==". I never use "==". EDIT: Downvoted? Heh. Fun trivia: At one point it was considered that "==" would use the modern JavaScript's "===" semantics, as "==" was considered unnecessary. JSLint warns against "==" too.
Alright. I'll look for that book and try what you said. Thanks!!
I'm not sure why you're downvoted. For me, it's situational when to use which.
So true! Goodbye to all the links to jsbin, jsfiddle etc.. 
If you don't get an answer here maybe try /r/LearnJavascript. 
How is this relevant? Node WebKit only provides a browser and some basic functionality to access the OS via nodejs. There is no tie in with any of the native os x frameworks.
&gt;if (choice1 = "blue") Your editor should have warned you. Check if there is a JSHint plugin/addon for the editor you're using.
The `==` operator was planned to be removed by *Brendan Eich*, but it was not feasible because if something goes out to the web, its very hard to remove existing parts, since it would brake a lot of code. So instead of removing `==`, `===` was added to the language, and since then, it is discouraged to use `==`. Even in cases like `obj == null`, which not only means to test if object is null, but it tests if obj is undefined. So implicit conversion happens, but you can literally make such thing by hand, so there is no need to rely on *JavaScript* implicit conversions, thus, `===` is **always** a better choice, even if that means + x characters of code.
Aww yeahh.
This is dumb. `diff` has been around for decades. http://en.wikipedia.org/wiki/Diff_utility#History There are many many diff utilities out there. Git uses one of them. &gt; $ git difftool --tool-help &gt; 'git difftool --tool-&lt;tool&gt;' may be set to one of the following: &gt; vimdiff &gt; vimdiff2 &gt; The following tools are valid, but not currently available: &gt; araxis &gt; bc3 &gt; codecompare &gt; defaults &gt; deltawalker &gt; diffuse &gt; ecmerge &gt; emerge &gt; gvimdiff &gt; gvimdiff2 &gt; kdiff3 &gt; kompare &gt; meld &gt; opendiff &gt; p4merge &gt; tkdiff &gt; vim &gt; xxdiff &gt; Some of the tools listed above only work in a windowed &gt; environment. If run in a terminal-only session, they will fail.
#####&amp;#009; ######&amp;#009; ####&amp;#009; Section 1. [**History**](https://en.wikipedia.org/wiki/Diff_utility#History) of article [**Diff utility**](https://en.wikipedia.org/wiki/Diff%20utility): [](#sfw) --- &gt; &gt;The diff utility was developed in the early 1970s on the Unix operating system which was emerging from [Bell Labs](https://en.wikipedia.org/wiki/Bell_Labs) in Murray Hill, New Jersey. The final version, first shipped with the 5th Edition of Unix in 1974, was entirely written by [Douglas McIlroy](https://en.wikipedia.org/wiki/Douglas_McIlroy). This research was published in a 1976 paper co-written with James W. Hunt who developed an initial prototype of diff. The algorithm this paper described became known as the [Hunt–McIlroy algorithm](https://en.wikipedia.org/wiki/Hunt%E2%80%93McIlroy_algorithm). &gt;McIlroy's work was preceded and influenced by [Steve Johnson](https://en.wikipedia.org/wiki/Stephen_C._Johnson)'s comparison program on [GECOS](https://en.wikipedia.org/wiki/GECOS) and [Mike Lesk](https://en.wikipedia.org/wiki/Mike_Lesk)'s proof program. proof also originated on Unix and, like diff, produced line-by-line changes and even used angle-brackets ("&gt;" and "&lt;") for presenting line insertions and deletions in the program's output. The [heuristics](https://en.wikipedia.org/wiki/Heuristic) used in these early applications were, however, deemed unreliable. The potential usefulness of a diff tool provoked McIlroy into researching and designing a more robust tool that could be used in a variety of tasks but perform well in the processing and size limitations of the [PDP-11](https://en.wikipedia.org/wiki/PDP-11)'s hardware. His approach to the problem resulted from collaboration also with individuals at Bell Labs including [Alfred Aho](https://en.wikipedia.org/wiki/Alfred_Aho), Elliot Pinson, [Jeffrey Ullman](https://en.wikipedia.org/wiki/Jeffrey_Ullman), and Harold S. Stone. &gt;In the context of Unix, the use of the ed line editor provided diff with the natural ability to create machine-usable "edit scripts". These edit scripts, when saved to a file, can, along with the original file, be reconstituted by ed into the modified file in its entirety. This greatly reduced the [secondary storage](https://en.wikipedia.org/wiki/Secondary_storage) necessary to maintain multiple versions of a file. McIlroy considered writing a post-processor for diff where a variety of output formats could be designed and implemented, but he found it more frugal and simpler to have diff be responsible for generating the syntax and reverse-order input accepted by the ed command. In 1985, [Larry Wall](https://en.wikipedia.org/wiki/Larry_Wall) composed a separate utility, [patch](https://en.wikipedia.org/wiki/Patch_(Unix\)), that generalized and extended the ability to modify files with output from diff. Modes in [Emacs](https://en.wikipedia.org/wiki/Emacs) also allow for converting the format of patches and even editing patches interactively. &gt; --- ^Interesting: [^Pretty ^Diff](https://en.wikipedia.org/wiki/Pretty_Diff) ^| [^Kompare](https://en.wikipedia.org/wiki/Kompare) ^| [^Revision ^Control ^System](https://en.wikipedia.org/wiki/Revision_Control_System) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ckv0fpn) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ckv0fpn)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I'd like to see their traffic stats after this.
thanks, glad you like them!
I'd like to see their traffic stats **before** this...
I'd like to see their traffic stats **before** and **after** this....
Why does the triangle one give different results every time from the same settings? Is it randomizing something?
 var a=1, b=2, c=3; if (a==2) alert('nope'); else if (b==3) alert('nope'); else if (a==1 &amp;&amp; b==2 &amp;&amp; c==4) alert('nope'); else alert('yup'); 
Glad to see StackOverflow implement this. The only thing missing is an easy console outout so that you don't have you open your browser's console to see logs.
Awesome, this is really huge for them, and for web developers in general.
&gt; OP clearly needs a general solution that also detects (for example) Arabic–Indic digits like ٠ (0) and ١ (1), not to mention digits in the Nko script, Devanagari, Telugu, etc. Clearly not. 
Thanks, I'll see if I can snag an e-book copy of that first. My professor/advisor highly recommended the book he gave me so I'll probably read both. It sounds like yours would be better to read first as the one I'm reading presumes you have the basics down. I enjoy reading so I'll look into checking that out. Does it come with sample problems for you to work on or is it more focused on just teaching you the basics?
[Normal desktop link](http://blog.stackoverflow.com/2014/09/introducing-runnable-javascript-css-and-html-code-snippets/)
It progressively walks you through developing a very simple game of Battleship. It is a very good learning tool.
That's awesome. It was pretty fun connect four game in java and later making scrabble with an ai in C#. I was actually just thinking of making a battleship game for fun just a few days ago so doing it in Javascript sounds like the way to go. Hopefully Amazon has a good price on the book. My advisor was pretty awesome and lent me the book I have on Javascript.
The Battleship game is **very** basic, but it is a good start.
So was the Connect four one :P Scrabble was a different story. That had to be the most frustrating thing I have had to do. Making the AI work was the tough part. I spend the last 5 hours before the project was due staring at my code wondering why the hell my ai didn't play any moves only to realize I had accidentally typed a &lt; sign instead of a &gt; sign. Once I changed that it went from not working to completely working. I only had 30 minutes left when I figured this out :P
I've worked with both require and browserify. While I do enjoy browserify more (I like CommonJS style better than AMD), I can't recommend migrating a large codebase that currently works with require. The benefits of browserify are not substantial enough to justify a large refactor, especially without testing it out on smaller projects first. **Pros**: * CommonJS syntax is cleaner than AMD syntax * Browserify works with npm modules^1 * Constant builds make it easier when it comes to deployment^2 **Cons**: * Build process can be slow as your project increases in size, and you have to continuously build/bundle in order to debug. * Documentation is lacking^3 1: You need to be careful with npm modules, as some can depend on different versions of the same library (e.g. jQuery/underscore), and this will increase the size of your bundle. 2: This is arguably insignificant if you already have a structured build process with require. 3: This is getting better with time, but require definitely has better documentation at the moment.
I'm not interested in their traffic stats.
If I didn't have to use it, I wouldn't. Unfortunately Windows is too damned ingrained in the industry.
This has a lot of possibilities! It would be interesting to combine this with a logging tool like LogStash or Splunk to help you formulate questions for SO when you are troubleshooting a problem that you need help from the larger community.
Biggest issue I find is debugging. Browser dev tools are getting awesome these days but some of the most handy tools become impossible to use as soon as you start needing to build the source during development. Live code editing is my big one. Source maps are great but you can no longer make small changes right in the browser just to try it out - a whole code re-build is needed and then a refresh just to try the smallest things.
That sounds like a pain in the ass. I'm also a C# dev and switching between the two I hate that I can't do quick tweaks in .net while I'm debugging. I don't think I will ever intentionally do that to my js workflow.
Now I don't need jsfiddle
This is fantastic. I'm pretty excited to see how much better and interactive answers could be with this.
Amen! Pretty excited for this!
Im a fan of your work, but on unrelated note, why do [old chirp songs](http://chirp.rezoner.net/player/522cd0056cc1017f3d00000b) not play anymore? :(
I have two issues with this: - I don't use coffeescript, so... - The syntax of a _templating language_ should not have unnecessary compiler language tokens in it (`-&gt;, [ ], """`, etc...) I like that you're trying to build a template language straight into coffeescript, I think it's a rather neat idea and it doesn't look _that_ bad. However, it is _so ridiculously simple_ to add a compiler step that the unnecessary syntax over something like jade just isn't worth it to me, even if I used coffeescript. Neither is the difference between 2ms and 50ms to render a template.
I'm moderately interested in their traffic stats.
in your function to set up a question `setup` you get the questionIndexAnswers and then check it with a statement like `if (questionIndexAnswers) {` which will be false if the index is 0 since 0 is [falsy](http://designpepper.com/blog/drips/truthy-and-falsy-values-in-javascript.html). Your problem happens whenever the first answer is selected. Change the if statement to check for null or undefined instead of just falsy-ness. `if (questionIndexAnswers !== undefined) {`
Wow that's exactly it. Thanks for the quick response!
sorry to bother you again, but do you happen to know why if you click "david cameron", then click "next", then click "back", then click "next" again, the "John" radio button is selected for you for Question 2? I think it's because the buttons aren't loaded yet when you click "next" the second time, so the browser thinks the user is clicking "john" when he is actually clicking "next". Would you know a fix for this?
Legit!
The spacing in your code examples makes it almost impossible to read. I like the Twit package though. I wrote a Twitter SwearOMeter with it and React a while ago. http://madole.github.io/SwearOMeter
Hiya, thank you. Well - I've migrated from Node.js to PHP as after a year the donations did not paid even one month of hosting :) I still have access to mongodb and I think I shall be able to rescue the tunes - however saving now stays client-side.
Why not just allow jsfiddle, codepent, or jsbin embeds? Seems like reinventing the wheel to provide yet another snippet editor.
I'm indifferent about their traffic stats.
Does anyone else feel like this is just nodobjc ripped off from Apple? The actual API is almost identical. And nodobjc has been around quite a while.
Why not just **not** use a "templating" system? I fail to see why its a good idea. You can template within the model that already exists in the DOM. Theres no reason to step outside of it unless you don't want to learn the DOM.
If you're interested in doing web (vs. backend) type stuff, learn quite a bit about debugging with Chrome Dev Tools in addition to DOM principles (its effectively the only SDK you'll have access to in a browser).
Alternatively you can add .npmignore to keep other files out from package: https://discuss.atom.io/t/how-to-use-the-npmignore/9208
I am not interested to see their traffic stats either before or after this....
yep. haven't yet figured out how to remove randomness without making the result look weird. i haven't touched the code in some time, but i think what happens is: the script does an edge detection on the image and uses random points to generate the triangles.
The snippets are hosted on their own domain, so there aren't any vulnerabilities with that - pretty much the only thing you can do is maybe CSRF a weak site from that, but that would not be a vulnerability caused by StackOverflow.
I wasn't interested until you said you weren't interested. Your reverse psychology worked. You devil you.
I think you need to make another attempt at explaining what it is. Is it an OS? a browser? what? 
From your example, it looks like you're mutating the original chain object, adding new steps to it via the `next` function. (I might be misunderstanding your intent, but this does severely cripple the utility of a promise library) Futures/Promises generally should be treated as immutable, and calling then/next/flatMap/etc should instead return a new instance containing the result of that operation, leaving the original untouched. This is especially important if you want to stack APIs of promises together - you don't want an outer layer mutating a promise momoized by an inner layer. Also, think about what happens if you want to work with an intermediate value - i.e. perhaps you want to perform two separate concurrent calculations on an intermediate value and combine them later. i.e. var fa = Future( 1 ); var fa1 = fa.then(function(x){ return x + 1 }); var fa2 = fa.then(function(x){ return x * 2 }); var result = Future.all( f1, f2 ).then(function(a,b){ return f1 + f2 }); If I understand your implementation correctly, this would not yield the result the user is expecting. 
Objective-C is an open language that can be used on any platform. It's not an Apple specific language, they just happened to have popularized it. Cocoa is a proprietary API that is Apple specific, regardless of whether you use Objective-C or Javascript to access it. Javascript for the most part can only realistically be used to make HTML5 apps. Which are great for small simple things, but really don't scale well. They also have a massive UX 'uncanny valley' when a user is expecting native widgets. As far as "cross platform" is concerned, it's a constant nightmare game of whackamole trying to make code work across every browser variation. There's a reason native apps are still king - because they offer a better user experience, and are easier to make. Objective-C can be used to make native applications that will run natively on virtually any device you can get your hands on, from an embedded microcontroller to a supercomputer. I'm not making any claims about one languages being better than the other either way (I not a fan of either, but write a shit-tonne of Javascript in my day job), but the former has much more viability as a cross platform language than the latter, which barely works for the purpose.
the underlying mechanisme of node-webkit is indeed a browser engine, but that doesn't make it a less viable option for a desktop app. The gap between web apps and desktop apps will only become smaller in the future. Just look at windows 8 apps, chrome apps, chrome os,... . The era of the native desktop app, written in it's native language, will fade away imo.
This is the best I can find right now. https://github.com/StepDub/JSFunctionGraph I have currently started working on a project that allows you to do these kind of things ( but to a more accurate levels! ). This requires a very robust Type Inference Engine - which is why I am building one. All contributions are welcome. Its in pretty early stages right now - but we have a couple of people who are starting on this. The idea is to build a well-thought out open, distrubuted, type inference engine. https://github.com/dhi-/know @OP : You cannot use this yet. But - hey, it might be the solution for the next large codebase you inherit ;) 
ah ok :)
Honestly I would have expected the following: tests (as in Browser compatibility tests) and benchmarks (as in jsperf tests). It's great that your library is faster and smaller than React but React offers dom-diffing which allows you to have your view changed and maintain its state (eg: a focused dom element will remain focused). http://lhorie.github.io/mithril/ is another small and fast library but it offers more info on these selling points If you really want to see this get more traction, lower the entry barrier and ditch coffescript
how is any of this relevant to what OP posted? He was talking about using native OSX frameworks. NOT yet another HTML app pretender. And fyi since you troll about this nonsense - web browser content is a far cry from a native application. We've heard the same exact story 15 years ago - "Java will save the world! Write once run everywhere" they said... 
Just the temptation I needed! Thank you for the advise! I think python is an amazing language - but in this case perhaps I will leave it to do the donkey work in the background. I have looked into the sockets.io in various ways, even a messily thrown together PHP version. It is quite good, my only hesitation would be the lack of browser support currently for web sockets. Unless Node.js battles this using sockets.io ? Perhaps I should read the documentation a little more carefully
Hey that's really on the spot, thanks :). BTW what are you trying to do with the type inference engine? 
[JSONStream](https://www.npmjs.org/package/JSONStream) is *just* a streaming json parser. oboe has a lot of other stuff going on, which I personally don't find as useful for the same reasons as [this rant](https://github.com/dominictarr/rpc-stream#rant).
Good point! People forget that often. `npm publish` will publish what ever is not in `.npmignore` ("node_modules" is ignored by default) regardless of whether the files are tracked by git. So it's important to clean out temporary stuff (logs and such) before publishing or putting them in `.npmignore`. Also somebody who installs a package won't need things like artwork unless it's used by the package.
But thank you for the comment; I'll include a dialog on the page to help guide people!
That's pretty interesting, too. Can it be implemented in the browser, though, or it's just for Node..?
Sure, it was ep. 118 of JavaScript Jabber, [Web Developer Skills](http://javascriptjabber.com/118-jsj-web-developer-skills/)
I am planning to create a type inference engine which will allow people like you to ask questions about a js codebase :) I want to create something that uses quite a few of the open source modules available out there ( esprima, ast-types etc.. ) - This helps people / contributors to understand the code base a lot better than implementing all on our own ( the way www.ternjs.net did! ). 
OP is talking about filling the gap between javascript and the native desktop environment. Just like node-webkit does. Just in a different way. So yeah, it's relevant. Google decided to build an OS and Chrome apps ecosystem around the idea of hybrid web&lt;-&gt;desktop apps. Microsoft invests heavily in JavaScript apps with Windows 8, TypeScript, WinJS,... . But I'm sure your view of the future is more accurate than Google's and Microsoft's.
&gt; s commented out maybe that's it? (Just rem Thanks for your comment. No that's not it. It works fine, but it corrupts with the theme we're using somehow. In our website it looks like this: http://studentlens.nu/shop/testproduct/testproduct/ As you can see there, the checkbox is not working (dropdowns below the checkbox are still clickable when checkbox is unchecked).
Do you use the angular full stack generator file structure as is or do you delete the folders and create something different?
For someone whos not good with compilers etc, do you have some design / doc for this? Project seems very interesting :)
Can you tell us anything more about what the files are and what they do? Do you have a git repo someplace we can look at? As with most things, the most appropriate answer depends upon a number of specific factors.
It works in the browser just fine because it exposes an abstract streaming interface instead of bundling in a bunch of assumptions about where it will be run for convenience. Just use it with browserify and everything works in the browser. Then just pipe a streaming transport like a websocket into JSONStream.parse()
You probably aren't aware of the state of Internet malware. They don't try to attack a website, they attack your browser and it's plugin. If you don't have the latest version of Flash, Java, etc. they will try to exploit known vulnerabilities to install nasty stuff on your computer (ex.: ransomeware). For that it doesn't mater where the iframe is hosted as long as it can execute JavaScript it will work.
I've been converting some of my old answers to use these snippets. See: [HTML5 Audio API - “audio resources unavailable for AudioContext construction”](https://stackoverflow.com/questions/14958175/html5-audio-api-audio-resources-unavailable-for-audiocontext-construction/14962764#14962764). I just wish there was a way to hide the code by default but show the runnable demo, and/or have the runnable demo sit above the code. Also, being able to hide unrelated CSS/HTML used the snippets would be ideal.
Socket.io uses like a thousand different polyfills such as long-polling to make it usable in older browsers. Exact versions you should find in their documentation. Also, as far as I am aware, it is not available for PHP, so you may have seen something else.
Yes, I agree. It's pretty terrible. I made some changes to my site and that part went to shit. It should be fixed tonight or tomorrow! The SwearOMeter looks pretty nice, although I apparently don't swear nearly enough!
Question: why go from JS to native code? It seems that where we are going is the other direction. The goal of many is to leverage the vast resources which have been created in static systems. What is the rationale for your experiments? Please note: you don't have to have one of course. Just doing something to see what happens is awesome in and of itself. However, if you did have a motivation, I was curious about it.
They will still get a BUNCH of traffic from past answers, that will still show up higher on google. I think it will take a long while before their traffic drops too much.
Cool.. starred it
Would it be safe to say that this could be compared to Go?
I have ceased to exist.
Heya, My motivation behind dopple is to take an advantage of both worlds and push JavaScript further: 1) JavaScript: web target, fast iterations and testing ability 2) Native: high throughput both in memory and power, use features that otherwise would not be so accessible So in the sence dopple does go with current direction. Just adds tools to port and optimize your JavaScript application further. Also, there are multitude of exciting opportunities, for example, compile JavaScript to ASM.JS. Thank you for your interest!
Thank you!
So I'm still very much learning JavaScript and was wondering if this is a good thing to tinker around with or is still better to use something else like jsfiddle and the like or even just use firebug within firefox?
Re: syntax, I found that the "sugar" syntax of require worked better for me and was way more clear/easier to maintain http://requirejs.org/docs/whyamd.html#sugar I don't often see people in examples using this, but its the only thing I used on several projects with zero issues. Not sure if I'm just lucky or if people don't know about it. I'm curious if you or anyone else has any specific experience with templates and browserify? In require I was able to choose my template engine and load in templates with the text plugin, but I haven't seen much talk in the browserify camp about that (or forced underrscore). That could be a big plus for require.
&gt;but it appears to be for publishing entire apps No, small modules are fine. In fact, there's lots of "micro packages" which consists of only a single file. It's really simple to publish something on npm. You simply create a [package.json](http://browsenpm.org/package.json) in a folder with your client.js and server.js and then type npm publish. However, you should set your username and email to npm before publishing. It's also a good practise to host your code on GitHub, which is linked to from npm. That way the users of your package can submit issues and bug fixes easily. And remember to add a license (I prefer the MIT license)!
True, I wonder if their usage stats would take a hit then.
Seems like typescript would be a better source language -- that is, it is javascript, but if the program has type annotations, it makes your static analysis job a lot easier and more reliable.
What kind of module loader does the compiler use? I see no exports or requires.
Heya, Not that familiar with GO language, but guess in a sense compiled C result could be compared to it. Though, it will be quite different. If we go into technical details, dopple, for example, will use variation of ARC with pooled memory and will simulate dynamic variables only as last resort.
Without a JIT, how will you handle a scenario like this? function add (a, b) { return a + b; } add(1, 2); add(1.5, 2.5); add("hello", "world");
Heya, It would, indeed! Though, I choose JavaScript because of currently available libraries that are written in it, also multitude of my personal projects. One of the goals is to parse JSDocs annotations to guide the compiler.
Allow me to not join the "fan boys" and say this is the bigges load of elitist bs I've read recently. Granted, my surroundings are probably different, but I find this article is for those who have a limitless supply of money, time and manpower. I've seen very few of those, but again, I can only see till the horizon lets me. I shouldn't use a framework, but read source of frameworks, and also evaluate frameworks to see which one is best for me. But don't use them! The frameworks are poorly documented, but look how nice Ember.js is documented, but oh no, look how vague Ember.js documentation is! And Knockout.js, grr, they only do one type of templating! But they are brilliant! Yeah, and the documentation for the Company.js framework that I'm gonna code from scratch is going to be exceptionally accurate and easy to read, because I have all the time in the world in my pocket-universe where I do all these things without having to be concerned with time. I could go on, but I don't want to get flamed too much, I'm a delicate little flower.
Heya, Compiler will see "function add" as a template function and will generate all use cases found in the code. In the worst case scenario, compiler will create tuple struct as argument to pass around.
Nice. Will look into that.
That font brings me back to the good ol' CGA monitor days. Who needs more than 25 lines of text on a screen? Actually, I just counted and it's 26. Progress!
I don't agree with everything in this article. However we took this approach with our architecture at my current company. We had an overall list of what we wanted to accomplish and the things we needed to support. Based off that, we evaluated a bunch of different frameworks and chose the one that fit in with what we wanted. No framework is perfect and we had to build stuff on top of our framework of choice but it helped to figure out what we wanted/needed first.
Removed, /r/javascript is not a job board.
I'm with you. I thought the general process devs took is: 1. Determine what you need to be able to do. 2. See if existing stuff you are already using does this or not. 3. Check out some frameworks and see if they will help you solve x, y and z. 4. Find solution for x and y, extend framework to handle z. I don't see anything wrong with this approach.
Some of the most I've grown and learned as a developer was when I dug into the implementation of things I had been using. 
Heya, Actually, it's not that hard to implement after work on static analysis done for parsed AST. So LLVM generation can be expected too after a few months.
Yup, there's a `window.getSelection` and the [DOM Range API](http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html) which allows you to get that (&gt;=IE9, otherwise you'll need something like Rangy to normalize it), you'll need to capture the mouseup event and see if there's a selection. We do that on [Annotator](http://annotatorjs.org/).
[check this out](http://json-schema.org/) for JSON documents What you're describing would be awesome and many have had the same thought, but for some reason it never materializes. 
/r/learnprogramming /r/learnjavascript /r/bemorespecific
Check out [rangy](https://code.google.com/p/rangy/) used it before and it works really well.
10 years of running a small web dev company, fewer than 10 at any one time, and we have yet to use a framework. I thoroughly agree with the article.
Thank you, for future references is there a handy site for just generic tips like this that you happen to know of?
cool
&gt; I'm gonna code from scratch is going to be exceptionally accurate and easy to read There's an inverse "not in my backyard" that goes through the heads of many devs. Dunning-Kruger Effect coupled with hubris perhaps: "I can do that better! It's easy!" 
Do you have any idea how to prevent null returns on the printed query?
Rangy is the typical suggestion. If you want to write it yourself and you don't care about older browsers then you can use [this code](https://github.com/holloway/doctored/blob/master/doctored/js/app-util.js#L328) from [Doctored.js](http://holloway.co.nz/doctored/) if you want. 
the way it works any JavaScript code is also valid TypeScript code, that means you would have to implement the JavaScript compiler anyway, plus the TypeScript part on top of that 
What is google realtime? Is there a link to understand google realtime please? 
Google realtime is basically something like firebase https://developers.google.com/drive/realtime/reference/ NimbusFoundry allows you to create objects on top of it that updates the data model to everyone involved at the same time, so you don't have to necessarily learn the API.
there is a vast difference between web technologies and using native frameworks. Capabilities of web don't come very to the native look and feel nor performance. Go read his article - right in the first paragraph OP is explicitly stating using automation and Native Frameworks. Why is it that every topic needs to be hijacked by unrelated things? As for your comments about writing real "desktop class" software in a web browser: its nonsense. * no native look &amp; feel. Yes you can "simulate" some of it and make it look like it fits in - but it doesn't. There will always be idiosyncrasies. Issues like fonts not rendered the same, do not respect system settings (things like accessability, themes / colour palettes), OS update can leave app looking bizarrely alien, ... * performance is nowhere near as smooth or fast as native * capabilities are severely limited. nodejs can overcome some issues I am sure. Such as file system access, networking, but nevertheless many features of native APIs are inaccessible. Yes you can do "Apps" in a web browser and use some browser chrome and pretend to be native, but this is usually garbage. I will not argue with the point that perhaps in time web apps will "catch up", but for now its a pipe dream. Just like Java was. Your samples: Windows 8 - is a catastrophic failure for Microsoft. Nobody likes their Metro nor Windows Mobile phone. Perhaps they will improve who knows... Don't their JS apis wrap native SDKs anyway? Google Chrome - who really uses it? I don't think it is even meant as a desktop machine so to speak. It just a browser with some arguably useful web apps. (Google docs are great - I use them all the time, but they do not compare to Office suite) 
I don't mind using a framework, but I am wary of adding unnecessary complexity. e.g. using jQuery exclusively to achieve what querySelectorAll and a polyfill can do.
I agree that native apps have, and probably always will have, the upper hand when it comes to performance and look &amp; feel. And there are certainly more than enough apps that shouldn't/couldn't be made in JavaScript today. But for relatively simple apps, it really isn't as bad as you think. I'll give an example: Wunderlist (the popular todo app). They have both a native Mac OS X app and a JavaScript Chrome app. I encourage you to install both versions and compare them. They are almost identical in every way.
I do not really consider to-do apps and other similar types as "Desktop class Software" you know. Sure some simple and perhaps some more complex software can be developed in web and might even be usable. Perhaps even enjoyable to use. In time I am sure both browser engines will improve and computers will get so much faster that all these layers of abstraction will go completely unnoticed. This I do not consider to be such a good thing - for developers. Lot of these technologies however are dumbing down and overly simplifying. If you work in software industry you might have noticed how many developers these days are utter rubbish - Not bad people individually - just that their skills are lacking. They have no understanding of algorithms, data structures or even something so basic as data types in statically types languages.
Writing stuff "natively" with javascript for OSX locks the program in to only working on one platform. I know Apple users are used to that, but you're not doing yourself or anyone any favors by keeping it locked-in to Apple's platform. I know Microsoft did that with .NET, but then Mono was born because fuck writing multiple versions of the same program. Nodejs and webkit have a huge amount of useful APIs built in, tons of libraries, and plenty of code written in javascript for them already. Tons of help on the internet for them too. 99.9% of all desktop programs won't need access to the OSX low-level APIs and will be easily implemented in node-webkit. The article is basically showing how to do the same thing as .NET - write javascript using a low-level system-specific API to write desktop applications. Javascript has worked with .NET for many, many years and that hasn't been popular. This won't be either. People don't want to write 3 versions of the same program for 3 different platforms. It's not maintainable.
Totally on board with this. Love the idea of extending the framework to handle z, and even more kudos when those developers make a pull request to merge that feature in - this is exactly the approach that illustrates you understand the framework and will be able to debug appropriately in an emergency.
read up my thread with Brazilll. this is all besides the point and hijacking the thread which was about explicitly using native APIs using JavaScript. Not everything needs to be cross platform and run on every bloody device and your grandma's toaster just for the sake of it. There are some legitimate uses for native API's. For example - you might want to explore Core Image filters. Sure some can be done with CSS or manually in canvas tag, but time required and poor performance ... There are numerous downsides to using browser window for desktop software. Things do not look nor behave native. Even if you fake it with CSS there will still be issues. For instance fonts not rendered the same, system settings ignored (accessibility, themes, color palettes, ...), OS update can leave app look native. Performance is not on par with native code. 
I got it up and running through howler.js but now it crashes after a few seconds of playing, almost as if it keeps starting the sound and crashing due to lack of memory. Any ideas?
I wonder what the intent of this is. how many js engines does a company need?
http://www.reddit.com/r/javascript ?
I wrote vanilla PHP and Javascript for a long time too, so I too know how it feels to waste a ton of time and lose money.
Another project that seems similar: [echo-js](https://github.com/toshok/echo-js)
Yes, I'm doing homework and I believe I'm supposed to do the Sprite class like this. &gt; Provide a constructor that takes an Image object defining the sprite The only way I can understand this is making a constructor but I've been at this for some time now and I'm not finding solutions to this problem.
&gt;Provide a constructor that takes an Image object defining the sprite If that's all your homework says on the subject, then my approach would be perfectly valid. There's nothing here about what you *do* with the Image object in the constructor, only that the constructor takes one and that what is eventually drawn should reflect the Image object used.
Yeah maybe, it's mostly the "defining the sprite" part I'm a bit iffy on. That feels like you should do more than just set a property for Sprite.
You should leave the question up and the original fiddle with the broken code. That way others can learn from the question and answer.
Amateurs have that problem. That's why there are frameworks. So they can let others do the work for them when they aren't smart or good enough to do it themselves. We learned how to code at the beginning. So we don't need other people's boxed in code. It's also why last year's billings were $x.x million.
I highlight text with the mouse while reading. 
Listen on body for click, append an absolutely positioned element to the body element with its coordinates matching the mouses position attributes. I'm on a phone otherwise i would provide a jQuery version. 
I think I like the other annotator, the kind that generates jsdoc for your code.
I don't want to be bigger. I'm perfectly content where we are. But using other people's work would not make us stand apart. People look at our work and never mistake it for a Wordpress site, or any other site. You look at our sites and immediately step back and admire them, right from the first page. You can't do that using other people's work anymore than an artist could copy others and claim it as their own unique work. As an old client of ours used to advertise, we still care about quality.
I didn't know about the sugar syntax, that boosts require up in my book. I still do prefer CommonJS syntax, especially when I can use the same syntax for the backend. Browserify does not have built-in support for templates/text, but there are libraries out there that will do it, such as [stringify](https://github.com/JohnPostlethwait/stringify). Browserify transforms are actually really cool (I use and love [deamdify](https://github.com/jaredhanson/deamdify)).
I don't do that myself, but I've seen it enough in user studies that I'm leery of anything that interferes with it.
Create a HTML element, set its dimensions to be the size of the dot you want, set the position of the newly created element using the mouse position attributes.
Are you after something like this? http://jsfiddle.net/j8n962w5/ (Uses jQuery)
The constructor should probably look more like this: function Sprite(image) { this.image = image } And then you would just call `drawImage(this.image, ...` Generally you shouldn't try to "extend" JavaScript's built-in objects, since it can lead to some obscure browser bugs and headaches. 
I believe most of you may be misunderstanding the post. It's not about avoiding frameworks and rolling your own thing. Not at all. It's about proper application planning and having more tools in your development toolkit than a single framework.
I'm not sure what you are asking. Try posting to http://codepen.io/pen/ or http://jsfiddle.net/ with an explicit example to help get feedback.
"I can make something that works better for my particular application" is very different from "I can make a better general purpose framework". As in all engineering it is about judgement when to pick one from from the shelf and when to build your own wheel.
Doesn't work for me until I engage the console, then console is showing a LOT of 404's and the game is moving quite fast. Chrome 37.0.2062.124 m I got it to work, the window needs to be larger to slow the game down, needs a lot of finessing, maybe blocking or intercepting input for a few seconds to stop the player from twitching away the infoboxes. Mario sometimes gets stuck going left on an infobox.
Please read up on reddit's rules @ http://reddit.com/rules, specifically point #1 of rule #1. Our [guidelines](http://www.reddit.com/r/javascript/wiki/index) also have more information regarding promotion &amp; self-promotion. **Consider this your only warning.** If you continue to post _only_ your site, we'll be forced to take action. Thanks for your understanding.
yeah this is the solution I'm going with, it feels weird to me somehow but it's the best choice I can see.
&gt; I don't want to be bigger. I see. So you purposely avoid a more efficient process to keep from growing too large. Brilliant. &gt; we still care about quality Almost guaranteed your in-house code is of less quality than the code included within a well-written framework that has thousands of contributors.
Thank you for your questions, since i don't really need character precision but word precision, i will go for a &lt;span&gt; around every word, and some special spans dragdropeable with markers.
Yea, like I say if you're in control of the code it's no problem unless of course there are 5 year olds on your team... The only time you need to code defensively and avoid things like this is when you are developing a library of sorts that other people are using -- if you say your function does this and it doesn't because of something out of your control, that's no good.
Plus it performs only about 2-5% slower the naive regex: [http://jsperf.com/contains-digit/6](http://jsperf.com/contains-digit/6) It's OK guys: don't all upvote me at once. I can wait.
what's the field 'main' do? It appears to want either an app.js or some sort of script...
That's kinda the least efficient way to do it. Serious extra overhead, there.
I think this is a huge part of it. I "rolled my own" animation library recently because I didn't need all 30k of Greensock. If I had, I would have loaded it, but for the needs of the project, simple CSS classes, an easing method, and a few well placed timers were all I needed.
I use it as is for the most part.
feed the code back and forth between [asm.js](http://kripken.github.io/mloc_emscripten_talk/#/) and this and you have a code [tranlation party](http://translationparty.com/)
The fact that he brings up Wordpress in a discussion about frameworks tells me he's probably not really clear on what we're talking about.
It's the "entry point" file that is loaded when someone `require()`s your module. Oh, forgot to mention that you can run `npm init` to have it automatically generate the package.json for you. That makes things a lot easier, and only makes you worry about the important settings.
This. I've very leery of 'general purpose' libraries and frameworks for this reason. The value they tend to add is both dubious and difficult to quantify -- yet they come with a very clear expense. I stick with special purpose libraries, where the value they add for the cost is clear and unambiguous. As a bonus, I get to skip all of the "Using [framework x] with [framework y] for [simple task]" style articles.
Don't they also have the Nashorn JS engine in JDK8 now?
my favorite reference text website: [devdocs.io](http://devdocs.io/javascript/) really useful place to look stuff up.
http://www.reddit.com/r/javascript/comments/2hi3mm/can_we_talk_javascript_frameworkslibraries/
&gt; So you purposely avoid a more efficient process to keep from growing too large. What a stupid assumption on your part. I'm not surprised. This is reddit. Where being led around by the crowd noise is the norm. &gt;Almost guaranteed your in-house code is of less quality than the code included within a well-written framework that has thousands of contributors. Another stupid comment. You must think tract homes in the surburbs exemplifies beautiful home living, too. The projects are ideal and everyone should live the same way. Me, too, is your goal. As I said, I'm a small dev shop and we're very happy and profitable, and all booked up. We don't need advice from the likes of you who are obviously happy toiling at cranking out widgets cause he couldn't get a job at the auto plant working on the line.
Mods: Might it make sense to sticky and / or put something on the sidebar regarding the different frameworks? There seem to be many, many posts asking "what framework should I use?"
The actual pixel data isn't a property. `Image`s are host objects. They are magical. It's only some sort of interface which lets you interact with them. To get to the actual pixels, you'd have to draw that image onto a canvas and then get the pixels from there (same origin policy applies!). But that's not what you want. You should just hand the `Image` over to your "Sprite" class. Create an `Image`, add an "onload" listener, load the image... and once that's done (onload), you can do something with it.
You dont need a library for every trivial thing.
very cool. Bugs I found: 1. when I kill multiple bad guys at a time (or right after each other), the gameplay freezes. (let those squid guys stack up on top of each other for a good example of this) 2. the end loops the messages. This was played on chrome, with the browser window maximized on my laptop.
I searched the web and I think Fiddler cannot do "getElementById" or "getElementByClass", but it can add,remove,replace any string in HTML. Any ideas?
Sorry guys. This is more proof of concept in very experimental phase. I know that there are many bugs.