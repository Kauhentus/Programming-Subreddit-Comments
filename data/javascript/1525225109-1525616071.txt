es6 fizzbuzz lol [https://twitter.com/bitwiselover/status/984538769788424197](https://twitter.com/bitwiselover/status/984538769788424197)
&gt; 1) Why you guys love Javascript over another language ? (like C++, C#, Java, Python etc) I never get people obsession with languages being better or worse than other, the only ground to compare languages is the adequation to solve your problem and the system running it. Js is far from perfect, compared to python it's not as consistent. But it get the job done, it's limitations are somewhat easy to work around and it's the only tool we can use to make web applications. So it's not like we have much of a choice. Regarding nodejs, again while far from perfect I get less headaches running express servers than I had with Apache &amp; PHP or setting up rails. &gt; 2) Do you guys feel the language as become slowly bloated with time ? Quite the contrary, es6 &amp; more seems to push towards a good direction so far. Each new version does indeed come with new grammar but it's manageable and the bulk of the changes comme from execution environnement specifics (browser API/capabilities) which are inherent to those systems. Js is not as "pure" as python or C, we need those integrations to build apps. &gt; 3) Is it possible to not make a language bloated "or a mess" with the addition of new librairies, new features, or extending a standard like C++ did... ? by bloat I mean syntax wize too.. like many programmers complains about the way the syntax look in C++ template for example ... A similar situation in js was with promises, they were plugins at the beginning and now they're fully integrated into the language itself. You can still write async code without promises, so I don't see the downside to those kind of additions. &gt; 4) Do you guys think the language will keep evolving fast ? Yes until we'll hit the "good enough" plateau. The recents developments in js come from the fact that js was pretty barebone and needed to be assisted by a ton of plugins to be practical, the intent is to perk the language enough so it solve most of the previous and current issues. &gt; 5.1) What's your opinion about frameworks fragmentations and can it be solved 1 day ? We can see 2 main trend in framework, big and small. Big frameworks like angular are well fitted to entreprise need and smaller like react for smaller teams. This schism also exists in back-end solutions so I don't see how it'll be different for front-end. The status quo won't change if the HTML/CSS/JS trinity is kept as is. I hope one day we'll have more mobile-like environnements with tighter constraints. &gt; 5.2) like do you feel there is too many frameworks or different way of doing the exact same things 10 different way etc Absolutely, but the point is not much on "doing the thing" but more on how we do it (see my previous point). TL;DR Js is not perfect but improving, language bloat is an argument for purists and frameworks is only relevant for the team building the product. 
this or Three.js ?¿ Ah!
It is an OSS project supported by Microsoft. We have a dedicated team of developers working exclusively on Babylon.js 
Good for you!
Well we shipped first version in 2012 (here is an announcement blog from 2013: https://www.eternalcoding.com/?p=323) Based on Babel.js website they created it in 2014(https://babeljs.io/blog/2016/12/07/the-state-of-babel#some-history) but not under babel name. It was renamed in 2015
I use es6 modules! same industry as you, boss targeting small to medium businesses with my own simple apps. Here's an example code import I have &lt;script type='module'&gt; import { addToPage } from '../scripts/dash.js' import { customers, populateCustomersTable, getCustomers, addCustomer, createCustomerReceipt, customerHistory } from '../scripts/customers.js' import { receipts, getReceipts } from '../scripts/receipts.js' import { getRevenue } from '../scripts/revenues.js' document.customers = customers document.addCustomer = addCustomer document.createCustomerReceipt = createCustomerReceipt document.customerHistory = customerHistory addToPage() getCustomers() getReceipts() getRevenue() &lt;/script&gt; 
Seems more like "language-level dependency defaults", but it's a neat trick to know default parameters don't have to be just literals, anyway.
It’s a little unclear to me what problem this is solving. Would someone mind giving a different example?
I almost forgot Babel had a different name when it started
Ah didn't realize, thanks for the clarification.
JIRA
It's for getting started; you probably will be bundling it yourself with webpack or etc. You probably will not be using it in prod.
 while(cowLength.length &lt; 6) { cowLength = '0' + cowLength; } You're starting with the string `'7'`, and as long as that string has fewer than 6 characters, you append a `'0'` in front of it, then check again. There's no reason to think that this code would add more 7s to the `cowLength` string. [Here](https://codepen.io/dsdyer/pen/xjddWX) is a fork of your fiddle that gives the output `'070707'`. Is that closer to what you're trying to do?
That question is the whole point of the repo :D
Best interview question you can possibly ask: "Can I see your GitHub profile please?". Then hire based on what you find there. But if you MUST ask technical gotcha questions, my favorite is always: "What's 0.1 + 0.2 in JS?". People rarely get it right ;) 
Also see WTFJS: https://github.com/denysdovhan/wtfjs
Some problems: * `Function` should not be capitalized. That will result in a syntax error. * So-called "smart" quotes will break your code. That will result in a syntax error. Use straight quotes instead. * What is `rdrd`? It's never defined. The first line returns a string concatenated with a number. The second line returns a string concatenated with an array with a single element.
The code runs fine, it might be formatted incorrectly because I just wrote it in my phone😂 Thanks for straight quote advice though.
What's the name of the theme if you don't mind?
\+1 Would love if you could share the theme!
Not that I would ask this in an actual interview, but since you asked for "the nastiest question I can think ok": find a bug in a Javascript parser such as Babel, V8, etc. (and yes, I know a few answers).
Arguments from conspiracy notwithstanding, but I read an extensive article on this a while back. Apple’s Safari has historically been relatively aggressive on implementing new, not-yet-standardized features. They were one of the first, if not the first, to implement the first generation web app features, such as WebSQL and Appcache, both of which have since been, or are being removed from the official web standard platform. Apple probably felt burned on implementing new or upcoming standards only to have those things get unstandardized out from under them. So they focused on only implementing things for which the standards are reasonably unchangable and finalized. Note that it was Safari with the first 100% ES6 implementation. Service workers are relatively new and various issues with them are still being worked out. Apple’s strategy is different from Chrome’s, which has seen them remove features after implementing them and encouraging everyone to use them right now! They even removed a standard feature of events just to get smoother scrolling, breaking many sites.
Imagine you want to unit test a function that makes a request via an http object. If you do this trick with the default param you can use the actual http object in production but just pass a mock during testing. 
It's just a tickle above 0.3 because of floating point nonsense. I think there's probably a way to calculate how far above, but I'd have to read up on the floating point standard to say for sure. And I 100% agree about the best question, but I was given a "study guide" by the hiring manager that included "you should know one language inside and out", and implied that *anything* about that language is fair game (yes I know that the correct answer there is to explain the concepts and then say "I'd have to check the docs for the details", but still). I'm probably being paranoid, but I still want to make sure I really know JS inside and out. I've been a junior/mid level dev for about five years, and this interview is for a senior level position, hence the paranoia.
&gt; Set up one or two-way data binding Um... Vuex is, by design, one way binding only. Why break the paradigm? 
Nobody's said otherwise... which is one of the reasons you hardly see pure OOP in JS apps, which was my original point
Dependency injection is not the same thing as dependency inversion though.
Put 4 spaces at the beginning of a line and then Reddit will display the rest of the line exactly as is (right now it seems like it's turning your *'s into italics)
Hi u/tim246. In your original code, the original value of cowlength is '7'. It passes the while gate, and gets a '0' added to the front, making it '07'. It passes the while gate again, and gets another '0' added to the front, making it '007'. It will continue this until it doesn't pass the gate, which will be when it is '000007', because at that point it is no longer cowLength.length is now equal to 6, not less than six. At that point, the while code kills and goes to console.log. In u/ithinktoo 's code, his/her code actually ends up as '7707700'. That is because cows starts as '7'. Cowslength += cowslength + '0' can be translated as Cowslength = cowslength + cowslength + '0' (or, Cowslength = '7' + '7' + '0', which equals '770'. Then, it passes the while length, and now Cowslength = '770' + '770' + '0" (or, Cowslength = '7707700'). At that point, Cowslength.length no longer passes the while loop, killing it and moving to the console.log u/daytodave has the right answer. In his, Cowslength starts as an empty string, ''. As long as Cowslength.length is less than six, it will add '0' + '7' to itself meaning it goes from '' to '07' to '0707' to '070707'. At that point it no longer passes the while loop gate, and will go to console.log. I hope this helps!!! (My guess is that the variable naming is what messed you up. Since cows have nothing to do with this function, variable Cowslength has nothing to do with the variable cows, and Cowslength.length just looks really awkward. I would have swapped cows to int, and CowsLength to counter... But that's just me! Moo!!!!!
I remember playing with this a year a go, too. If I remember correctly, you can create whatever object key you want inside the config object of HTMLWebpackPlugin. But the special thing was, that in pug templates you have to access them with `htmlWebpackPlugin.&lt;your data key&gt;` since the whole object get's passed through.
Your original point was nothing, but babbling your favourite buzzwords. There are many teams that successfully implement SOLID principles in their JS apps. Nothing in the language prevents it. Using higher-order functions does not make your OOP `inpure` in any way, and lack of explicit declaration of interface doesn't make ISP impossible (or even hard), because the language has duck-typing for objects - it's literally the same as many other object-oriented, duck-typed languages, like say Ruby. Prototype-based inheritance completely covers functionality of class-based inheritance, and language even has features to support the pattern as of ES6. Interface and class are both _abstract concepts_, you don't need keywords for that.
I'm very sorry for this, I've only hoped to get more attention with this. That won't happen again!
While this is correct I think the cause of that in the OP is markdown formatting
I'll use imports for bigger things, like plugins (custom or third party), but initialising those things and for simple smaller Dom manipulation things, I want them all in the same file. This approach is doing what I wanted to avoid, where for each new module I have to add 2-3 additional lines of code in different files. What I tried to do was make a system where you just write the module and it gets called automatically when it's needed in the Dom.
I'd be very reluctant to take any job where the interviews are based on JavaScript quirks. It doesn't reflect the reality of what you'll be doing day-to-day (well hopefully not!)
&gt; Your original point was nothing, but babbling your favourite buzzwords I stopped reading there. Oh - and go fuck yourself, sanctimonious twat
The best way to prepare is to read the free books "You don't know Javascript" on github
&gt; I've been a junior/mid level dev for about five years A loto of people would consider that seniore level :-) The difference between junior and senior IMHO is not inside out knowledge of JS, but architecture / performance / security / delivering a product
There are different reasons why you may want to do it, the main thing is you should be aiming to create programs that are easy to reason about. Without a clear mental picture it becomes very hard to know you are doing the right thing, and to debug problems. There are different ways to pass parameters into functions, for example by reference or by value. If I pass in any primitive it'll be by value, objects however are by reference. If you pass an object inside a function where it gets modified-in-place (e.g. obj.foo = obj.foo + 1), you lose a lot of the reasonability. You may have 5 functions modifying the same object asynchronously, and your mental model becomes a mess. Instead a lot of people will suggest using return values over mutation of the parameters, and a lot of people would argue creating new variables for them. The performance tradeoff is generally acceptable, and overwriting a variable would just be overwriting the reference. It is trading it for a whole class of bugs that modifying in place causes, some languages pass-by-value as a default or exclusively!
It was not clear from my message, but by creating a new const I did mean using object.assign. I think we are in agreement.
There's a couple of points I find... delicate. You say that modules are initialized automatically but also that one module should be able to initialize another module or that modules should be "re-initialized". I find two things here that I don't particularly like. One might just be the use of the word "initialize", or it might not. I mean, I would think that in the more general case, a module may require some _initialization_ and it may require application over some DOM elements. I would differentiate these two aspects because I think that by "re-initialization" you probably mean "re-applying" it over the DOM, but not necessarily actual _initialization_. I consider "initialization" the phase where the module does whatever it needs to do to be ready to start doing anything. This could be setting up some internal variables, loading some configuration or environment values, calculating something generic, etc. These tasks generally shouldn't need to be re-done, so you shouldn't need "re-initialization" but you might still need "re-applying on the DOM". The other part depends a bit on how many modules you have, but it is that a module should neither _initialize_ nor _re-apply_ another module directly. This produces a quite nasty coupling of modules, because it's not so much about one module calling another but about one module messing with the life-cycle of another. I mean, I understand this _might_ not be too much of a problem is you have a small amount of modules and they are always the same modules. But if you start having a large-ish (not really that large) number of modules, you might want to look into introducing something that decouples them. The general idea is that: - initialization is either something the module does on its own and nobody else can tell it when to do it, or there is a _central_ unique entity that tells tells a module that it should initialize itself now (and only once). - it is a good idea to have some intermediary entity whose responsibility is to keep track and tell modules to re-apply. This decouples modules from one another.
You do not want to use parenthesis multiplication in javascript. Always do x*y than x(y). x[y] in JS means the index/key of the variable `x` denoted by `y`. That is different to x(y).
It removes any character in the string (which you're not showing) if it is a "non-word character" or an underscore. More explanation: * `\w` represents any character in the set of `a-z`, `A-Z`, `0-9` and `_`. If you want to do the opposite of that (if you want to exclude all characters except `a-z`, `A-Z`, `0-9` and `_`), you make it capital, like this`\W`. * If you want to replace all characters in `\W` **and** `_`, you can glom them all together into a character set, like this: `[\W_]`. Now the expression will just ignore `a-z`, `A-Z` and `0-9`. * by default, `String.prototype.replace` will only replace the first instance of a match. If you want to replace *all matches* of an expression, you have to have a `g` modifier at the end of your regular expression. 
Hello, yes, my name really is Albert Zero Width Non-Joiner.
The author is the same.
That's not a dependency I would not want in any project knowing their business model of EEE. Its sort of like how DirectX came about to lock games into the Windows platform. If DirectX was never made, games would be made in openGL and be very easy to port to other OSs.
&gt; This is mostly wrong. Yes, JS does lack interfaces because that's about static type checking, and JS is a dynamic loosely typed language. JS _does not lack interfaces_. JS doesn't have _explicit declaration of interfaces_, because it would be useless, as it doesn't make any type checks anyway. But interface is _an abstract concept_, and JS, as any OO language, makes _extensive use of it_. Literally the [first random link from MDN documentation is an interface]( https://developer.mozilla.org/en-US/docs/Web/API/AbstractWorker)
I've been toying around with Cloudinary for my personal site. Seems decent for uploading to, and provides all those transforms via URL parameters. 
There is no indication this is a "lock in attempt", stop spreading FUD.
It's literally their business model. Its how they're getting away with Windows 10, people are locked in. If it was another company you could give them the benefit of the doubt, but Microsoft's history does not allow this. https://en.wikipedia.org/wiki/Embrace,_extend,_and_extinguish
We shouldn't tolerate these attacks from Microsoft. A free product from Microsoft positions you as the resource. If they gain popularity and students are learning babylon we'll end up with a worse lock in that Microsoft Office, which today dictates the cost of business. 
If you want to go for **nasty** questions, probably one of the nastiest is: _"Why isn't my code working? I tried to make it work but it simply isn't working."_ and, of course, don't show any code. A second close would by: _"Why isn't my code working?"_ accompanied by a few hundred lines of code, but not all the code involved, and not giving a hint about what it is supposed to do or what it does instead. But, fortunately, _most_ people won't do this in an interview...
Three.js It is not another lock-in attempt by Microsoft.
So?
Why is it a bad name?
The code is under Apache License 2.0. If you cannot bear the Microsoft money behind it, feel free to fork it and use your own fork. Enjoy FOSS :\)
Been Using it for a year. The Community is amazing, its well documented, the playground an interactive demo sharing place is great. Easy to undetstand, straight forward featureset. Huge recommendation
[Here](https://github.com/Klathmon/Babylon.js). That's a fork hosted by me, nobody from microsoft can ever change it, they can't extinguish it, they can't prevent me from changing it or modifying it, or improving it. Thanks to OSS and the Apache 2 license, EEE is a thing of the past. If MS decides to do something you don't like, fork the project and continue on your merry way.
Is it better now?
Actually, being a PWA has nothing to do with performance, but everything to do with experience; * Reliable - Load instantly and never show the downasaur, even in uncertain network conditions. * Fast - Respond quickly to user interactions with silky smooth animations and no janky scrolling. * Engaging - Feel like a natural app on the device, with an immersive user experience. ~ https://developers.google.com/web/progressive-web-apps/ The code is still javascript running in the same sandbox as it does in the browser and so there's no performance benefits to be gained. Handling offline situations gracefully, and having a full-screen basis is native-experience, not native-performance.
You got some stuff wrong and at least two people pointed it out. Why not just learn from it?
Take a look at Angular and you'll see dependency inversion. Once you have dependency injection, inversion is trivial. And with first class functions, it was easier in JS for a long time until Java got first class functions. You're either being hard-headed about what you initially got wrong, or you're learning something new. Hopefully it's the latter.
You're saying the same thing as me in different words.
As an aside, the first parameter is a regular expression (you can do a web search for tutorials). `.replace()` is explained here: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace
None of those were open source. You are worried that MS is going to do the same thing to something they legally can't. If it doesn't have the markeshare, it will just die. If it does have the markeshare, it will be forked and maintained. There's no way around it, they literally can't EEE a FOSS project.
And it's also worth emphasizing that the regex is (probably) about to get [a major facelift](https://mathiasbynens.be/notes/es-regexp-proposals) in a coming release of JavaScript. So if you think you will use regexes in your code, keep an eye out for changes in Mozilla's [regex page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions) and their compatibility table. I am super excited about finally having lookbehind assertions and `matchAll`. This is such a niche thing, but it really sucks when you are used to using them in other languages and it's not available in JS.
Because the Babylon parser.
Yes, I'm not argueing with you, I just wanted to make that point stronger, for sake of anyone who would read that thread in the future, wondering if SOLID can be applies in JS.
Edge is being used to try to force people to upgrade to Windows 10. They nearly pulled it off with IE4, it supported all sorts of stuff Mozilla didn't and for about a decade every javascript script had to have fixes and hacks to retain compatibility, that was on purpose by Microsoft. They tried to make the internet a Microsoft only product, they tried the same thing with Win Modems. They successfully pulled it off with Java. I suspect when they have a lot of people using it the plan will be to rename and re-license. The only issue there is if they accept commits from people who are not property of Microsoft.
Yes, that's what I meant by "native-like performance" - i.e. it performs as if it was a native app, maybe it wasn't clear enough
Are you serious or just trolling? You are completely muffing licenses/products and ecosystems not to mention business models. Hey, let's hate all google products, just because they are google products (or maybe they are not entirly google? are they?) ...
Rule #1 of JavaScript package development: choose a confusing and seemingly unrelated name. If devs don't need to google it to know what it does, it's not a good package name.
They share a lot of the same faults, but not the 30 year legacy of fucking with developers.
So let me bring some info into this discussion so you can decide if this is shit or not. I created Babylon.js on my spare time even before joining Microsoft. I work for Microsoft since 6 years now but Babylon.js remains my personal project for more than 5 years. Microsoft offered me to support the project (by paying me to keep maintaining it to make sure it will stay alive and keep evolving) because several 1st party projects were using babylonjs as their 3d engine. Also Microsoft is investing in 3d a lot (mixed reality headsets, paint3d, hololens) and having an OSS (apache 2 license so literally the "do whatever you want with it" license) 3d framework that people can use is definitely a good idea to make sure there is a good developer story for people wanting to use 3d with Ms devices. A vibrant ecosystem for 3d is all that Microsoft wants here.
For future regex questions, I always use https://regex101.com/ It'll tell you what the regex means on the right side.
&gt; A vibrant ecosystem for 3d is all that Microsoft wants here. For now. You are a trojan horse.
I won't compare it against three as I will be obviously biased but you can certainly create get with it (or b2c apps as well)
&gt; Edge is being used to try to force people to upgrade to Windows 10. I disagree, but either way it's not EEE... You can't just say everything you don't like is EEE... &gt;They nearly pulled it off with IE4 Over 20 years ago, and it wasn't even the bad part, IE6 was with the ActiveX controls, that... you guessed it, FAILED! There's a reason EEE isn't used any more, because it doesn't work in the long run. It's a short-term gain for ruining long-term profits. &gt;They successfully pulled it off with Java. Again, how!? They created .NET, And Java is still owned by Oracle, maintained by oracle, runs on all platforms, doesn't integrate with Windows really at all. Windows did nothing to Java, never Embraced Java, never Extended Java, and sure as fuck didn't Extinguish Java. &gt;I suspect when they have a lot of people using it the plan will be to rename and re-license. They can't. They can re-license NEW code that they make going forward, but the old code is out there and the license can't be revoked or changed for code already released. If they change it going forward, they can't prevent others from taking the last open and free version of the code and improving it. That's all spelled out in the Apache 2 license. &gt;Until they make their OS completely open and free any talk of them engaging with FOSS should be assumed hostile. And yet every time they make something FOSS people like you complain that they are just trying to EEE. And that's a ridiculous demand. MS has made fantastic strides in FOSS software over the last few years, and they don't show any signs of stopping. &gt;Just think how far we would be now if Microsoft never existed. In my opinion, significantly behind where we are now. Windows didn't become the powerhouse it is today because of some shady business practices. It's a great OS, and it solves and solved real problems. Linux is fantastic, and I personally use it wherever I can, but it's not perfect, and having multiple options is always better than one, no matter how free or useful that one is.
Nice! This is one of those projects you could build out quite a bit if you wanted to
ActiveX was another attempt. Java was cross platform until Microsoft extended it with their incompatible Java VM. Java is still around but its main advantage of being cross platform is gone. &gt; They can't. They can re-license NEW code that they make going forward, but the old code is out there and the license can't be revoked or changed for code already released. If they change it going forward, they can't prevent others from taking the last open and free version of the code and improving it. That's all spelled out in the Apache 2 license. Are you sure? I believe that is the reason they did not use the GPL license. &gt; In my opinion, significantly behind where we are now. Windows didn't become the powerhouse it is today because of some shady business practices. It literally did from day one. They sold a product (DragonDOS) they did not create or own to IBM fraudulently. That is where MS started. 
That's so fucking awesome for you! I have a hard enough time convincing my employer to open source small tools and utilities that we make in-house, I can't imagine how good it must feel to not only be paid full-time to maintain a project you created, but be given resources beyond your own self! Do you feel Babylon.js had a significant impact on your hiring at MS? And if you don't mind me asking, how much of your personal time did you really sink into Babylon.js before having it be part of your day-job? I love working on open-source utilities and projects, but I'm finding more and more often that I just don't have the time in the day to do it anymore. I've go so many ideas of things I want to create, but just can't find time for it. I'm not even sure what i'm trying to say, but I guess do you have any pointers for how to have this become part of your day job?
Yes an Edit options Would be good if u make a typo or need to change the data.
&gt;Java is still around but its main advantage of being cross platform is gone. [Uh... Java is still massively cross-platform.](https://java.com/en/download/manual.jsp) I don't know what you are talking about here, but Java hasn't lost any cross-platform ability at all. &gt;Are you sure? I believe that is the reason they did not use the GPL license. Yes, 100% sure. A snippet of the license text: &gt; [Apache 2] grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. Note the "perpetual" and "irrevocable" parts. All FOSS licenses include clauses like this, as being given a revocable license isn't FOSS. &gt;It literally did from day one. They sold a product (DragonDOS) they did not create or own to IBM fraudulently. They used the money from that sale to buy DragonDOS or whatever it was called at the time. That is where MS started. Yes, but you can't tell me that MS didn't provide anything of use. I agree that MS has done some really shitty things, and in many ways they have held the industry back, but I'd still argue that in the long run and overall they have contributed more toward computing than removed it.
I can't force you to believe me but I honestly gave you facts here
What is it supposed to do? What context is it running in? What output is it giving that's not expected?
I put together this tutorial that I am hoping to present at a local JS meetup. It will be a couple of months still before the next available meeting so I thought I would post it here. Any feedback is welcome! 
I don't think it was the reason to hire me because my first 5 years was in the evangelist team:) (yeah for IE and then edge..it was..interesting :)) My luck here was that 3D started to become really popular at Microsoft when IE11 was shipped with webgl support. As a web evangelist I had connections with many web developers that mentioned many times that they would love to have a 3d engine for the web that could be simpler. Furthermore TypeScript was also released at the same time which helped me a lot as it provided the structure and rigor that could have be missing for large projects It was a lot about luck:)
One last thing I can try to convince you at least about Babylon.js: you can go to our forum and just other users: http://www.html5gamedevs.com/forum/16-babylonjs
&gt;We shouldn't tolerate.. a free **library ** from Microsoft.. about doing 3D in Javascript... somehow... we'll end up with a worse lock in than Microsoft Office, which today dictates the cost of business. Not sure if trolling or genuinely psychotic. 
I heard from a friend of a friend that James Hetfield was learning JS and wanted to help with the website XD ^jk
Babylonjs was originally intended for video games and its authors post a lot about its game capabilities on Twitter. It’s also heavily maintained and supported by Microsoft. twitter.com/deltakosh twitter.com/davrous Threejs was originally built as a 3D experience tool, not necessarily games.
if selecting the value is what you mean by "click and select" `document.querySelector('textareaId').addEventListener('focus', e =&gt; e.target.select());`
Without seeing the code, I can't really tell what's going on here. You should put an example on CodePen or something.
I'm pretty lazy so the first thing I wanted to see was a live demo. I went to your repo for Hello World and the live demo link is broken. I like the approach though. Best of luck with your talk.
I'm V E R Y new to this, most of it is make do on what I know, thank you for the help.
Why do I care what a "marketing expert" thinks about web frameworks? 
So you can see, hello and goodBye are ID's in my HTML. But i never declared them in JS. But it still knows what Im trying to reference. So im wonder if it just defaults to ID if nothing else is written??
Ah, I see. Thanks for your help!
&gt; I might be being totally dumb but when you say obvious methods, do you mean the two loops? Well you could go that way. I would name in the inner functions though. Modules.forEach(locateElement) 
Having just read it, it's a unusually high-effort blog spam that's advertising KeyUA's services with Angular and React to a technically unsophisticated audience. It should not be here. On the other hand, it is unusual to find a "blog" of any kind that has an automatic pop-up chat window with an *Engagement Manager*, asking, "How can I help you?" "Um, yeah, 'Alina'.... Why does your "image of Angular code," have code that says `wp_get_attachment_image()`. 
"Fix the big in this code:" where the big is that one of the semicolons has been replaced with a Greek question mark (they're identical in appearance, but the Greek question mark will cause an error.
That's what I was afraid of! I tend to have a knack for being unlucky ;) And how was that web evangelist job? I'm sure being on the IE and Edge teams wasn't easy! Edge seems to be doing a great fucking job lately! They/you are kicking Chromes ass in initial-render speeds and resource usage in a lot of areas! Re all your time: I've done that too, but I just have found it difficult to maintain that kind of commitment for longer than a few months, and I am afraid of starting a project only to let it languish and die the second I don't want to spend every night on it. Still, Best of luck to you and congrats on the new release! I'm probably going to be doing some 3d work in the browser soon so I'll absolutely be checking it out! The docs look top notch!
Try supporting people like investment banks. One of our clients is the biggest in the UK and we not only have to support IE11 for most of their users, a fair few are still on IE8. Some use Chrome, but very few.
Sorry about that, I am fixing it now. Here is the live demo https://freemasen.github.io/wasm_tutorial/steps/08.1-live-hw.html
Where does the redux go?
https://stackoverflow.com/ Also, this is not how you ask a question. You haven't explained what your code is attempting to do so they obviously can't tell you why it's not working as intended.
What are the pros and cons of prototype based inheritance?
To me it's how you work in a team, how good you are at improving the work of the whole team. Giving useful feedback and help to team mates, noticing problems before they've cost a lot of time, showing how to deal with impossible demands placed on a team and also when to complain and when to just get shit done. That sort of thing.
I’m horrible with this sort of stuff but I think you could just add the arrays together and see what sum is closest to your input values sum if there is no weight involved 
How about opening websites in their own windows, with their own app icons like Chrome? I'd be a lot more inclined to use Edge if it could do that. Most web apps I want to use as "apps" don't even need service workers.
Cool man, I'll check it out.
How many times do you need to query this data structure after loading it from disk? Is it stored in memory for many requests? If not, a linear scan might be the best option. “Closest” needs to be defined. Is one dimension more important than another? Are the columns all normalized, using the same scale? Typically, this closeness is called an error function, and your query is to find the result with the least error. If it is stored in memory, then you need to find a pattern either in the data or the queries that you can use to precalculate position. The problem you are running into is the same one a lot of machine learning people run into when querying output. Some tricks are to use Kd-trees, Ball trees, etc. or to allow for some level of incorrectness.
Hmm "closest".. I don't think any of the dimensions are more important than the others. Closest I think I would define as the nearest match between var.floor(var/10)*10 and var.ceil(var/10)*10. This is something I grabbed when looking for nearest neighbor list functions.
Wow, this seems like a really smart idea. I'll give it a try!
Ah got you now
You could try Mithril (without JSX) or maybe Elm
Congrats on your first published module! I’ll definitely check it out.
You have a couple of very valid points there. When I say initialise, I basically mean run their init methods, though I can see how reinitialise and reapply should differ. One of the solutions to the last requirement would be to create a separate function to reapply Dom else, etc, if I need it, instead of running init again. Then I could get other functions to call that when needed. The point about decoupling as the codebase gets larger is valid. I'm not sure how I would go about reducing this. If I had an Ajax module that had to reapply a masonry module after loading new content, I don't think there's a way around that I can think of, and these may be solved on a per module/project basis. Is there a particular way you'd rather do it that isn't much more verbose?
We currently use Postman (create collection and tests with it) and small shellscript which runs the newman command against the exported collection. We run the tests inside docker-compose environment so it has real db and services that our api needs, no need to mock anything. Sure it takes a little bit longer but not too much IMO (about 15 secs to launch, run tests and stop services). Atleast with CircleCI it was easy to add. Maybe downside is that you need Postman to update the tests as modifying them by editing the exported json file is not pleasant :) But Postman as a tool to create them in the first place is not too shabby.
How will that work out for a FREAKING LIBRARY which has a very fringe, niche market and is open source under Apache License? I do remember Frontpage btw, as a horrible site generator that produced shitty sites and that faded into obscurity because no one used it. 
Its the same with their Bash for windows. They want windows only scripts made. For this they will want scripts that perform well on Edge only.
Elm is pretty amazing. Super helpful compiler errors, and very easy to reason about especially if you're already familiar with React/Redux.
Thanks for the doc! We put a lot of energy in it:) My evangelist work was really interesting because it was really required! Evangelizing the #1 product is too easy:) it is easier to be a hero when there is war. Edge also suffer from anti-MS attitude and this was tough to deal with. Regarding time and pet project I can't agree more: it is hard because you have to have a military grade motivation to make sure your project stays alive
There are various ways in which you can decouple your modules. All of them have some cost, so it will really depend a lot on your project's size. My main concern with coupling is that you may easily end up with a situation where that _ajax module_ you mention ends up having to call not only the _masonry module_ but also the _scroller module_ and the _whatever module_, but if this or that condition then not the _scroller_ but yes to the _whateverelse module_. One "fairly simple" idea is to use a _message bus_, a Pub/Sub system. Note that it is much simpler than it sounds. You can write a perfectly fine one in 20-25 lines of code and it shouldn't add much complication. Then, your _ajax module_ would simply publish a message saying "this thing is available", and then any module that has subscribed to that event will get notified and can do whatever it needs to do.
Nice, i think the time to learn elm has come... What do you think of ReasonML?
You are really good at this you know. I didn't follow the rest of the discussion apart from replies to my posts, tho. 
I had thought about an event system. I'll see what I can find about that though. Cheers.
Ok, That’s what so I thought. But why does it work?
Ok, thank you. But how can I make the parentheses work? Thank you so much
No
For example: I put (4, 8) and I’m supposed to get 301.44. Just like The Surface Are Cylinder fórmula But with 3.14 instead of the extended version of pi.
True! Named capture groups are a favorite of mine. Unicode property escapes will also be nice to have. As an aside, [the feature set of ES2018](http://exploringjs.com/es2018-es2019/toc.html) is already final: All features we have mentioned here will definitely be in it.
Take a look at https://github.com/TTLabs/EvaporateJS
"It is said that Vitalik Buterin’s desire to create Ethereum came about after Blizzard made a change in the famous MMORPG World of Warcraft game which he deemed unfair. It was at that moment that Vitalik truly realized what horrors centralized services can bring." Warlocks nerfed? This is good for Bitcoin.
Hard pass
thanks, will have a look
don't you think its relevant to mention through and through2 when talking about iterating over streams? 
&gt;Gimmefoogimmefiegimme**alert**hatidesire underrated comment!
dont import it live with jquerycsv, store it in a JS file like you have in your comment, ``````data=[ ... ];` sort it first, that will help speed: then you can just exit your search when you have inputs that dont match for (row in data) { if (input1&gt;row1[0]) break; //stop the search sooo early cuz your data was presorted skip 10 every i++ until your search row is not matching your data, to find your starting point (slight optimization) var starting_point = 0 for (i = 0; i&lt;data.length;i+=10) if (data[0][0] &gt; input1) { starting_point = i - 10; break } to find closest all average inputs you (its not average you want probably but median or other, but the steps are roughly the same): - get an `average()` function from stack overflow, ex `average(1,5,10) // 5.2` - take Absolute values of differences of your items ex `Math - average them together, or compare them - if they are within your range of acceptance then keep the row in a temp results array - sort and print temp results array // guessing at this tolerance = 5 // close to row isvalid = (row,input,tolerance=5) =&gt; Math.abs(average(row[0],row[1],row[2])-average(input1,input2,input3) &lt; 5 //true or false possible_matches = [] for (row in data) // use a real forloop if isvalid(row,input,tolerance) possible_matches.push(row) possible_matches.sort( (a,b) =&gt; a[0] &lt; b[0] ? 1 : -1 ) // some sorter func needed for output results? (so they are organized by column 0? Optional) console.log(possible_matches) you could make an api to query it, ex mysite.cgi/search?data5=123.123 and keep the data in memory at all times, if loading times are the slowdown this may be the solution theres professional search algorithms, this is how id start tho. 
I really like the looks of this. I'll try to actually work through the tutorial in the next few days and let you know what I think. I'm really eager to try out Rust with WebAssembly. Even though I have quite a bit of experience with C++, Rust just looks like so much for fun, but I'm not a systems programmer so I haven't really had anything to do with it. 
i'm not stuck i just came across this exercise and thought it would make a good interview question. Did you see the answer in the comment?
They're most likely looking for use of Array.map()
Hi /u/hashscorp, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Glad to hear! Rust is so much fun to work with. I am also not a systems programmer but that shouldn't stop you from playing around with rust! While it is as fast as a systems language requires, it really is an all purpose language these days. About a year ago, Nodejs was my go to for building scripts and utilities. Now I very rarely reach for node but instead build them in rust. I find it to be a lot nicer to have an executable instead of a script file. 
agreed, `mainmenu;` should be `mainmenu();` too at the end. javascript uses `()` to run a function
Looks good. But your Babel config targets Node 8.11, which has pretty much big coverage of ES6. Is there anything so specific feature of ES6 that you use that isn't possible in that LTS (8.11)? If so, you might just remove Babel and use the `esm` package. The only thing you need to do is to add `index.js` which uses the `esm` package as described in its readme and rename the other files to `.mjs`. Then for your `main` field in package.json you will point to that `index.js` and for the `module` field will point to the `index.mjs` file. Also it seems that you have thoughts that it would be used in browsers, because you have minify for env production. You might be better to use `browsers` target instead, like `"browsers": "&gt;= 1%, not ie 11"` for example.
Ok, this has been bugging me all day. Mainly why the square brackets work, rather than why the parens don't, since I assumed that was a typical syntax error. I have solved it! **TL;DR `valueOf()` and `toString()` are magic and turn single value arrays back into single values** relevant codepen with examples and rambling: https://codepen.io/anon/pen/XqgJew?editors=0012 First of all, your error causing it to not work is just the `2(r*rd)*h)` bit. the `2(` is a syntax error; you mean `2*(`. That should get your parens version working; it does in the codepen with only that change (see equationCylinderFixed). Secondly, the square brackets. As others have noted, square brackets denote arrays in JavaScript; they can't be used as mathematical grouping notation. So why does doing a bunch of math on a bunch of arrays work? Because JavaScript has type inference and magically attempts to make meaningful things happen when you try to do math on objects, is the short answer. The long answer is in the codepen, but the gist of it is that when you do `2 * [5]` the brackets disappear (through the use of `valueOf()`) and it becomes simply `2 * 5`. Your function just nests that behaviour a bunch of times. Light bedtime reading: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf Between them, those two functions make all your square brackets disappear, meaning even though it looks they should break your code, they actually don't affect it at all. JavaScript, ladies and gentlemen.
New text editor for atom is being built with rust -&gt; https://github.com/atom/xray Also thanks to web assembly we can write small libs for the web where high performance is a requirement -&gt; https://hacks.mozilla.org/2018/01/oxidizing-source-maps-with-rust-and-webassembly
&gt; What is this? An interview for ants!? I guess it's a good interview question in terms of "do they have basic programming skill", but it's far from an "advanced" question.
i've been using javascript for 20 years and never come across this stuff in your average codebase.
I posted a detailed answer below, but it's due to the fact all the arrays only contain one value. Then when you do math on them JS conveniently guesses you meant to do the math on the single value inside the array, so the brackets just disappear.
Thanks. I released an Atom version today: [https://github.com/Relaxed\-Theme/atom\-relaxed\-syntax](https://github.com/Relaxed-Theme/atom-relaxed-syntax)
Still waiting for Brackets! 
I've used Cloudinary in the past to host images. It does all the transformations you're looking for and more. Here's a tutorial: [https://www.turbo360.co/tutorial/image\-uploading\-with\-react](https://www.turbo360.co/tutorial/image-uploading-with-react)
I actually have pretty early, kinda. In my case I had some objects that would be dynamically created depending on user's input. And for each input, (which was number of people, type of services, etc...) there had to be generated different text which is displayed to the user. For example: `{ adults: 2, room: 'DR', children: [6] }` would be generated into `"Two adults, one, six years old child in a Double room"`
what kind of app was that for? i've never run across this before building guis for rest apis.
That was a great explanation. Thank you a lot😊
For example: I put (4, 8) and I’m supposed to get 301.44. Just like The Surface Are Cylinder fórmula But with 3.14 instead of the extended version of pi. If I used the one with the parenthesis I would get ~100 instead of the correct answer.
it was indeed inside GUI layer which was in front of API
The frameworks these days... its like evryone is trying to build their own... Who cares about any other than the most popular that get you jobs. You know which i mean.
Oh heck that's a good point. I remembered reading [this](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type): &gt;According to the ECMAScript standard, there is only one number type: the double-precision 64-bit binary format IEEE 754 value (numbers between -(2^53 -1) and 2^53 -1). There is no specific type for integers. In addition to being able to represent floating-point numbers, the number type has three symbolic values: `+Infinity`, `-Infinity`, and `NaN` (not-a-number). a long time ago and going "Okay, so just floats and the three extra ones then." But that's not technically true. Thanks!
So anyway, i found a solution: using the implicit authentication flow for oauth2 apps there is no need for client secrets. Therefore with a local app there shouldn't be any problem. Beware though, because there is a little bit of hacking needed to make this work without electron or another client application to capture the access token.
I've only played with reasonml a bit but I really like it
Angular grows faster and provides more features on its own. Id still say it depends on the needs of a project. Vue is neat. I dont think its a framework for hobbies. If someone says that they must justify the statement.
Great job Sitepen team for getting this delivered! I'd be interested to see a comparison page (similar to https://vuejs.org/v2/guide/comparison.html) that explains how the Dojo 2 stack differs from other popular frameworks.
Lol. Dojo has been around for a *long* time. It was one of the first things in the early js ecosystem to introduce many of the concepts we take for granted today (e.g. modules). Show some respect ;)
Why isnt it as popular then? By now i didnt see one job in my country rquiring knowledge of dojo framework.
https://helpx.adobe.com/animate/how-to/export-webgl.html
Actually, there is a us based Flash runtime called Gordon. https://github.com/tobytailor/gordon However, given that the reason flash is being decommissioned is because of its deep, security-issue-laden integration into the browser and os with minimal sandboxing, I suspect its support will be a minefield of missing features and incompatibilities. Give it a shot though. It probably renders to a canvas which you could use as a texture in a webgl context.
The Kardashians are popular, but most people can't name even a single semiconductor expert. Despite that, scientists and engineers build on each others' work and that's how we can transmit messages instantaneously across the globe through the internet. Same here. In the "standing in the shoulder of giants" quote, Dojo would be one of the giants.
Yes :)
It’s in another chapter of the upcoming book!
"rise from your grave"
Nice try _javascript recruiter_ ;-)
That is simply not true, if you looks at the landscape of serverside framwerowks you have many examples like: Rails, Django, Symfony, Laravel, Spring, Express, Hapi... many frameworks, many languages - there is no one "best"?
Would `publicPath` solve this issue for you? https://webpack.js.org/guides/public-path/ Something like module.exports = { output: { publicPath: '../' }, };
^The linked tweet was tweeted by [@maybekatz](https://twitter.com/maybekatz) on May 01, 2018 19:10:49 UTC (26 Retweets | 83 Favorites) ------------------------------------------------- Hot \#npx protip of the day: I like using npx to quickly try out things in the Node.js repl on different versions without having to use a version manager. I also do this sometimes when trying different versions of a tool, if I run into a bug or incompatibility. I use this a lot! [Attached photo](https://pbs.twimg.com/media/DcIkAcRVMAA6vdP.jpg:orig) | [imgur Mirror](https://i.imgur.com/gN5ZVMg.jpg) ------------------------------------------------- ^^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •
📅 01/05/2018 ⏰ 19:10 [(UTC)](https://www.timeanddate.com/worldclock/converter.html?iso=20180501T191049&amp;p1=1440) &gt;Hot \#npx protip of the day: &gt;&amp;nbsp; &gt;I like using npx to quickly try out things in the Node.js repl on different versions without having to use a version manager. I also do this sometimes when trying different versions of a tool, if I run into a bug or incompatibility. &gt;&amp;nbsp; &gt;I use this a lot! &gt;— too gay for this shit ([@maybekatz](https://twitter.com/maybekatz)) 🔁️ 26 💟 83 📷 [image](https://i.imgur.com/NlQaT0A.jpg) &amp;nbsp; ^(I'm a bot and this action was done automatically)
`npx node@6 ./index.js` should also work, BTW
=P
Apparently the answer, 0.30000000000000004 (3, fifteen zeros, 4) is a [pretty famous value](https://0.30000000000000004.com/) in circles where IEEE 754 floating point values can be famous.
Dojo was actually my first experience in webdev! I haven't touched it in a while, but I'm glad the team finally got dojo 2 out :\)
[Safari has been the new IE for years now](https://nolanlawson.com/2015/06/30/safari-is-the-new-ie/)
Wow, I had no idea this existed
It's nice to see a javascript framework that can be leveraged with actual javascript code. ;)
Just went through this. Try this code instead: https://medium.com/@danny.pule/export-json-to-csv-file-using-javascript-a0b7bc5b00d2
I just pasted your fixed function with parentheses above and I get 301.44. var r = 3.14; function equationCylinder(rd, h) { return("The Answer is "+ (2*(r*(rd*rd)) + 2*(r*rd)*h)); } equationCylinder(4, 8); The Answer is 301.44 What are you using to run this? Your browser console? Node?
This question is likely dependent on location as well. If you look at China, Vue is used by some very large companies.
For Node code https://glebbahmutov.com/blog/unit-test-node-code-in-10-seconds/ and for end-to-end testing web apps just use our Cypress.io test runner
Try out Reason. You can keep using React but you can get a new syntax and powerful type system.
I don't really understand. This is all one dimensional, right, so a loop, a circle and a range are all the same thing, they are just an arbitrary length starting at some position. The difference is in the topology - a range stops at either end, whereas the loop's ends connect. This is what the modulus operator will do, it will connect the ends of your loop. Use it where, for a range, you have used clamping, and thereafter all the other math is identical. You shouldn't need to handle any edge cases like negative values, things being out of range etc. Assuming you have verified, sensible inputs (like input and output ranges with mins strictly less than maxes), you won't need a single if statement or conditional to perform these calculations.
Hey Dojo team! Just a heads up, when you’re on mobile and try to go to the docs it closes the menu and leaves you on the CLI page and there is no indication (that I noticed) that the menu needs to be opened again to see the rest of the docs. Was kind of confused until I realized where it was. Anyway, excited to check this out!
What's interesting is that you can actually get two different answers in c++. If you declare both numbers as a float and then add them during the output, the answer is the same as in JS. If you add them to a third flloating point viariable and output that, it gives you 0.30000001192092896. This is likely just some quirk with the gcc compiler. I don't want to remember how to use clang or MS to see if they're more accurate, but I think D also gives the second answer. 
Technically this downloads the node version and runs in it. Isn't NVM better?
I’m running the script on the Chrome console.
I am so looking forward to this finally. Having BigInt is nice on its own, but I am pretty sure I've run out of precision only once in my career. But having *logical bitwise support* beyond 32-bits is going to be liberating because in game programming I run into this limitation almost constantly. One of the incredibly annoying things about JS is that you get Integer precision up to 53 bits, but almost half those bits are useless when you want to use bitmaps.
You can also use `nvm run 6` if you use nvm, and avoid downloading it.
How does nvm not download the binary? It sure does.
First, frameworks like React and Vue can all be used with vanilla JavaScript. Second, this dojo 2 release, according to their documentation, actually uses TypeScript extensively.
Thanks for the feedback! I opened an issue on the site repo to track this. https://github.com/dojo/dojo.io/issues/431
We know.
I mean if you have it installed through nvm, which is likely if testing a particular version is important. This trick is cool though.
Then I don’t understand your original comment - tongue in cheek?
Very cool! Feel free to send me a message if you run into any issues with the Vimeo API and I can help get it resolved.
Got it, I’m guessing npx cache those binaries anyway :) I’m not a fan of nvm because of the way it mucks with the shell
Anyone know if this has made it's way into the Node engine yet?
Not to sound like an ass but `nvm` would need to download too if there isn't one already.
I know this post is a little old, but VS Code has extremely granular syntax highlighting. "Object," for example, is detected as: * support.class.builtin.js.jsx * meta.class.js.jsx * source.js.jsx If it's inside an arrow function, it also gets: * meta.block.js.jsx * meta.arrow.js.jsx * meta.field.declaration.js.jsx Meaning that if an "Object" is inside an arrow function, a block statement, etc., you can style it differently if you want. I'm in a React project right now and I don't feel like creating a new project just to check the ES5 keywords you mentioned, but for ES6, this line: `const thisFunction = (args) =&gt; {}` get these definitions, in order from left to right: * storage.type.js.jsx, meta.var.expr.js.jsx * entity.name.function.js.jsx, meta.definition.variable.js.jsx, meta.var-single-variable.expr.js.jsx * keyword.operator.assignment.js.jsx * punctuation.definition.parameters.begin.js.jsx, meta.parameters.js.jsx * variable.parameter.js.jsx, meta.parameters.js.jsx * punctuation.definition.parameters.end.js.jsx, meta.parameters.js.jsx * storage.type.function.arrow.js.jsx * punctuation.definition.block.js.jsx And that's not including the wrapping definitions like meta.arrow.js.jsx, meta.var.expr.js.jsx, meta.block.js.jsx, source.js.jsx Anyway, I love making syntax themes for all of my editors and this one was by FAR the easiest to style every little nuance exactly the way I wanted it. I even have my strings in green and the quotation marks surrounding them in the same green, but half opacity, so the actual content of the string stands out more.
According to the article, it should be this preview version of Node.js: [https://github.com/v8/node/tree/vee\-eight\-lkgr](https://github.com/v8/node/tree/vee-eight-lkgr) 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [v8/node/.../**8a3c087d57f124869d35ebe489594659d9a157a8** (vee-eight-lkgr → 8a3c087)](https://github.com/v8/node/tree/8a3c087d57f124869d35ebe489594659d9a157a8) ---- 
Nvm is not always an option. On Windows, for example. 
There is a separate project aptly called nvm-windows that works well with similar functionality to nvm on Windows. But I also agree that this is good to know.
Yep, once though 
And npm downloads each time?
That's the oddest looking fiddle I've ever seen, looks more like a, uh, codesandbox? :P
Or: be wary of premature generalization. It can introduce coupling between two or more concepts making them harder to change and evolve independently. Among other things, this is why bounded contexts are used in DDD.
Didn't want to scare anybody ;)
Titef - Tiny Test Framework. Five time faster than Mocha, three time faster than Jest in only 2.9Kb. There's still work to do, so contributors are well accepted https://github.com/shikaan/titef
This article describes the relationship between async functions &amp; generators and promises, Any feedback is appreciated. 
Forgive me if this is ignorant, but what do you mean by "container"? 
Look into Node.cloneNode() and Node.appendChild() You would make a clone of the element you want, then find the container you want to add to. 
Clickable.addeventlistener( ‘click’, ()=&gt; { Destinationcontainer.innerHTML = elementtoclone.outerHTML }); Thats probably the route one way to do it without any further info. You could also use a combination of element.cloneNode and element.appendChild depending on your use case and wether wiping the innerhtml of the destination is a problem
I do agree that URL ends up in logging (for this project I do not have access to the logs since I use Github Pages). The problem with others methods to store data locally (cookies, localstorage) is that it's not easily shareable between devices and I needed a portfolio accessible on my laptop and my phone. Or maybe I missed something.
And by the way for the portfolio security I added the password protection feature so even if someone has access to the logs he won't be able to access the portfolio. 
Understand what you are saying but having 0 control over the servers and logging config is exactly the situation you don’t want to be in if you are promoting privacy. For all we know github outsources log reviews to 3rd parties and your private data ends up in system backups all over the place. 
You are 100% right, I will rework the homepage in order not to be privacy centric and emphasis that I have no access to the logs but Github has. Thanks for the constructive comment.
I've done that... sometimes, and in a limited fashion. There are two main problems. One, the limitations you've already mentioned. The second one is the _volatility_ of the system. There's no other way but for the user to store the URL somewhere, otherwise the data is lost. Just look at what you did with your sample: you used a URL shortener to _store_ your data. And it's actually this second circumstance the one that should put a harder limit on usage of this technique, not the technical one. Whether it is appropriate or not, should depend on how much you can justify dropping this responsibility on the user. Sometimes this can be reasonable. Sometimes not so much. It depends a lot on the intention. There are some common usages for this, surely. The Babel REPL uses it, IIRC, and there are various _online generators_ (for buttons, template based images, diagrams and such stuff) that use it too. In the case of these generators, there's an added advantage _for the service provider_: it _may be_ cheaper to re-build the result from initial data, than storing the result and associating it with an identifier. (This is not always true and some of them end up opting for a mixed approach where they store generated results for a certain amount of time.)
I like this technique a lot. I know several website using it. [tio](https://tio.run/#) is the first in my mind.
As far as I remember, Davrous was looking to learn more about 3D and Deltakosh suggested to do it by building a whole 3D engine. Deltakosh already made an engine for Silverlight (called Babylon!) before. They are nerds is the best kind of way. They are full of inspiration. Back then, I enjoyed a lot their work. still do by the way.
I don't really now Vue only looked at it but of what I heard. No? I don't think vue is for hobby projects only. However it's valid to say that Vue or any other framework didn't fit the requirements for the company or the project so we picked something else like angular. Bashing on a framework because you don't like it or because it didn't fit your specific project is just bullshit.
The only code path I see where `game` can return undefined is when `player === myApp.ai` is false, so we take the else branch (line 149). There `moves[i].score &lt; bestScore` is false for all `moves[i]` (line 153), so `bestMove` is never set before being returned. I tried checking what the minimum value of `moves[i].score`, but it turns out `moves[i].score` is undefined for all moves in the last loop before the error (and `undefined &lt; Number` is always false). The only place you can get an object in the moves array with an undefined score is at line 119, where you create an empty object for the move. It needs a default score to avoid this particular error. 
It’s just the “node” package on npm. The npm/npx CLI isn’t doing anything special to make it work. https://www.npmjs.com/package/node
And what would happen and why it would happen if the following line of code were executed: X[4] = 0;
Did you perhaps mean to post this in /r/java? The code you provided isn't javascript
Y would be 0 since you put the ++ after it. If you put it before ++Y it would be 1 before starting the loop.
Everything behind the hash # is not send in the http-request.
Java or JavaScript? They're different
oh, my bad. Just Java
Java is not JavaScript I suggest you do a search for this question either on Reddit or Google, as it is one of the most common questions asked in programming communities My two cents, if you’ve never ever programmed before start with codecademy
&gt;aScript &gt; &gt;I suggest you do a search for this question either on Reddit or Google, as it is one of the most common questions asked in programming communities &gt; &gt;My two cents, if you’ve never ever programmed befor cheers, i'll look into it
I don’t think this is useful at all. Also, leaving empty holes in arrays like that is very bad for performance as the compilers can’t optimize that. 
Main use case I see is when you're looping over an array and just want the index, which people use an underscore for typically arr.map((_, i) =&gt; {}) arr.map((, i) =&gt; {}) 
So you'll save a single keystroke?
2 if you need to hold shift Also, you might have a global/outer variable that is `_` (lodash) which gets overwritten. Not exactly common at all, but still something.
Have a look at SoloLearn. They've got a good app and loads of free lessons
Context? Your business critically depends on free third party API's?
Don't post an image of a piece of code. Post the code itself. As **text**. Indent every line with 4 spaces.
Thanks to the blockchains currencies, there is many applications for BigInt now :-) 
I hope you never ever have to spend hours tracking a bug where someone simply didn't see an extra comma or a missing one. I find this idea one which primotes sloppy syntax. No offence meant, but if you really find yourself wishing for such an option often, your functions are probably not well designed.
Certinaly not here.
I am sorry to hear.
Seems to use libui under the hood. [https://github.com/parro\-it/libui\-node](https://github.com/parro-it/libui-node) [https://github.com/andlabs/libui](https://github.com/andlabs/libui)
Does CLI work with node 10 yet? Been trying to do the tutorials for like a week now.
Just use a hash instead of the url path itself? It never gets sent to the server if I'm not mistaken (but still ends up in the browser history).
Oh oh oh, you are right, I completely forgot about that. That a great news. Thanks for the reminder.
You will save a single keystroke and later a variable assignment. It could be more that just syntax.
This feature is already part of the array uses, I am only asking to make it usable for function too. And is also about the use of other API. arr.map((, i) =&gt; {})
Thank you. it worked
Yeah I agree, in fact I initially did the project using esm and then changed to babel to just learn my way around it and eventually be able to just change the settings for browsers. Thanks for the feedback :)
It's called URL Variable technique https://afourtech.com/
Care to explain how this kills your business? I don't have the old pricing table memorized. I was planning on using Google Place autocomplete &amp; static maps for a project.
Which features were you going to be leveraging? I recognize you'd have to rewrite your code but there are others, which might help you off the ground? Or Mapstraction might give you the opportunity to switch between Map suppliers? Such as: Bing OpenStreetMap http://mapstraction.com/ http://leafletjs.com/
/r/learnjavascript
Seems the free usage Tier is still enough to get a prototype up and running. If you are making more calls then that, you have to find a way to monetize your traffic to pay the extra fees.
Or link to a codepen or something similar. 
It's hard to tell without seeing the full context, but it's possible that the code is being run in an iframe or wrapped in an IIFE, in which case it wouldn't be globally available. 
Don't use JS if you don't like verbose syntax rituals. In ML family languages like Elm there's a convention to use underscores: myFunc _ _ arg3 _
`arr.forEach((el, i) =&gt; {})` is appropriate, not `.map`
You assign `a.x()` to `y` property when `a` object is not defined yet. If you wrap it in a function it doesn't care what's inside it's code until something calls it. Could you please not make the [same threads](https://www.reddit.com/r/learnjavascript/comments/8gpl51/thiscos_is_not_a_function/) over and [over](https://www.reddit.com/r/learnjavascript/comments/8gpxvl/assign_function_return_value_to_object_property/) in a span of 2 hours? I'm sure they would respond to you there.
Hey, you can create react application is only JavaScript and Jsx (html element). You need to use nodejs with webpack 🤓
I think a good way to find a project you'll enjoy working on for a long time is to find something to bridge your other hobbies. If you like playing games, see if you can make a tool for that. If you like collecting TV shows or are a data hoarder or whatever maybe you can make a tool for that. 
Yeah, you're not going to run into this verbatim, but the process `map` and `conditional logic` should be straightforward. 
Thanks for the answer. And sorry for making those threads, I am so curious :)
And btw. What do you mean by object is not defined yet? 
There does seem to be an issue with the build commands in Node 10. We're looking into it's being tracked at https://github.com/dojo/cli-build-app/issues/93 and https://github.com/dojo/cli-build-widget/issues/22. Thanks for the feedback!
Consider this snippet: let x = 10; // from now on x is defined let a = x; // now a equals x, so 10. let a = y; // now a equals y, but what does y equal? Hell if I know, since y is not defined. You will get a ReferenceError here. Similarly with objects: let a = { x: 10, y: a.x // but we are defining `a` right here, therefore it's not yet defined. ReferenceError }; but we can assign `a.x` to `y` after it's defined: let a = { x: 10 }; // from now on a is defined a.y = a.x // a is defined here, so a.y equals 10 // and the whole object a now equals to {x: 10, y: 10} It gets a lot messier with all the [hoisting](https://developer.mozilla.org/en-US/docs/Glossary/Hoisting) `var` keyword makes so consider using `let` instead. 
My two cents: if lint nags at `arr.map((unused, i) =&gt; i)`, lint tool shoud be fixed I'm a bit torn on the consistency argument. On the one hand, I do like consistency, but on the other, the spec is already all over the place (see, for example, the grammar for setters and catch arguments) and because of that, this proposal ends up feeling like a in-and-out quick fix rather than a thoroughly thought out one.
Thanks for sharing! I am a big fan of Phaser CE (have not used Phaser 3 yet) and I have been wanting to try some other HTML5 game engines out. Anyone have experience with both Impact and Phaser that can comment on comparing the two?
Hi /u/enkideridu, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Someone might be wondering why this posted _now_ on reddit. After all, Impact is hardly new. [This blog post](http://impactjs.com/blog/2018/05/impact-is-now-free-open-source) may help clarify things. tl;dr: Lack of maintaining and evolution, made the author re-licence Impact as Open Source (MIT licence).
- Games - Simulators for physics or other things - WebGL - Data set viewers/visualizers - Games (seriously, they use a lot of JS) - Encryption... kind of... stuff? (IDK, I made [a steganography web app](https://github.com/dblspk/web-app) and it's so JS heavy that I had to split some off into [a library](https://github.com/dblspk/lib))
Progressive web app is next big thing for web application world. please have a look at this repository [https://github.com/Atyantik/react\-pwa](https://github.com/Atyantik/react-pwa) . 
Stupid question but are we including `index.mjs` just for engines that support ES Modules already? Wouldn't `esm` module alone suffice here since it supports both CJS and ESM?
Looks like a 404
Kind of amusing to see attempts like this to graft behavior on top of Marionette. Back in 2015, I started playing around with trying to build a sort of `Marionette.VirtualDomView`, based on a couple existing VDOM libs, a JSX parser, and a couple other pieces I found. I eventually stopped working on the idea when I decided I should really just go ahead and give this "React" thing a shot after all, which turned out to be one of the best decisions of my career :) Having said that, the main app I work on is still at least 80% Backbone, and we're progressively refactoring it to React as we have time. I wrote [a post talking about our approach to showing React components inside Backbone views](http://blog.isquaredsoftware.com/2017/07/react-redux-backbone-integration/). In that post I referenced a `viewFromComponent()` function I'd swiped from another library and modified. I still need to add a link to it in the post, but [here's a gist with the code and some example usage](https://gist.github.com/markerikson/fe53bf4c4eb3a040a0007c16e043b322). That lets us write React components that we can hook into our Backbone views, allowing us to swap out pieces of the UI as we go along.
Just one more quick question: I basically finish defining an 9bject after I close it with }?
yeah, you don't have to do that; if you run npm init esm or yarn create esm and look at the set up code it'll become pretty clear
Works for me. 
No. It uses GPU processor, so possibly you can't see it on mobile or tablet. It works fine the other way. 
Individual span tags for every word
Seem to have finally fixed it out, I was reassigning the index and reset values incorrectly. I just find it so hard to debug recursive functions, I've had to put counters in to stop at a certain point to prevent infinite loops
Looking forward to giving this a whirl, thanks!
Fine on op3t
Query strings.
Well, that's great. Possibly newer operating systems support such higher processing code.
Backed this badboy
Just keep in mind that BigInts are immutable heap-allocated objects, so every operation is an allocation. That said, I am unreasonably excited about doing bitwise operations on N bits with a single &amp; or | character, too.
Is this the "spam vaguely related link for clicks" technique? Or are you offering your consulting services? What do you specialize in? Pattern naming? 
Express is still the most popular, as far as I know. My coworkers just adopted [Koa](http://koajs.com/) and it's treated us very well so far.
&gt; If you find yourself using map that way often, then you should probably rethink what you're doing. He just needs the key, what's there to rethink. You could say "well make it arr.keys().map" but doesn't rethink the problem, it just substitutes the intended solution with an unintended solution (i.e. the map function may be a reusable one intended to be passed to arr.map() as is). I agree that needing this feature *often* is a sign of a bad API. But there are plenty of cases addressed by it too, especially in standard APIs. If you ask me, the whole concept of positional arguments is messed up in languages. There's a reason why in Objective-C and Swift you can have a function with 10 arguments and everything is clear regardless. Positional arguments suck. They're poor design. But that's how the language works, and we have to deal with them.
Hi /u/DevPassion12, For javascript help, please visit /r/LearnJavascript. Thank you!
I'll give you two perspectives. My previous job was at an agency that did work for startups (basically, the client provided the idea and capital, and we provided the tech team to actually build it). We were a Node shop, so naturally the stack was Node, Postgres via Sequelize (or Mongo via Mongoose, depending on how far back you want to go), Express, the usual suspects. We dabbled with Hapi and that was mostly fine, and we dabbled in Sails, and basically threw it away. If you want a strictly RESTful layer, you may want to consider restify instead of Express, or something like postgrest. Another related project worth mentioning is Koa, which is basically TJ's new take on servers after his experience w/ writing express. At my current job (at Uber), we use Node too, but only for frontend services, i.e. to do things like server-side rendering and to glue data from several backend microservices. The microservices themselves are mostly written in Go or Java because scalability etc. I think we still have some really old microservices in Python, but none in JS. We use Thrift to provide typing at the transport layer, though I hear other SF tech companies use Protobuf. The integration surface area between those typed systems and the JS layer is currently a bit of a pain point that various projects are in the process of trying to alleviate (e.g. thrift2flow). As far as the current framework landscape goes, React is very dominant, and with it, Webpack and Babel. Naked Express doesn't really gel with that more modern paradigm, and there are various projects making inroads into making dev experience better. Next.js is probably the most famous of the bunch. My team recently released another one called Fusion.js, which aims to be more flexible and more capable wrt server-side concerns, through a plugin-based architecture.
Sorry to ask: Did you make sure the image was loaded before you draw it?
Hi /u/brodap0p, For javascript help, please visit /r/LearnJavascript. Thank you!
Express is the goto for many. Its a good thing as its stable and has lots of docs/support. Coming from Java you could really enjoy typescript. I do all my JS programming with typescript and so far it has been a pure joy.
Update: I'm on an iPhone, and when I try to open the link in the Apollo app, I get the GitHub 404 page. When I open it in safari, it works just fine. 
Maybe you could give an example that is _common_ where you use `map` and only need the _index_ but not the _value_?
I very commonly implement sets as objects, where the value is always bool true and the only thing of relevance is the key.
Anyone have examples of solid games made with Impact?
One way to go about this is to pass handlers to the props from the parent component. So in your parent component with the map call you can pass in a handler bound to each todo that has it's own pure function to update parent state.
But with the introduction of actual `Set`s is this still a relevant example?
I read a comment here about positional arguments being lame. What about using object destructuring instead. Define the function as an object with all of the potential arguments and use it with whatever properties you need. You can use default arguments with object destructuring to avoid errors too
Yes, because: - IE10 and IE11 are still in my support matrix, and same goes for many developers (including major apps, like by Google etc.). - You can't directly initialize a Set literal, you can only do it through an array literal. There's no performance benefit to using sets. I mean, maybe it's in theory better in some edge cases, but overall - no (same for Map etc.) - You can't directly JSON serialize or deserialize Sets. So if incoming or outgoing content contains sets, this means you need an extra transform step both ways. Pointless overhead. Also this is just one example, based on an example that didn't even originate from me. Let's face it, sometimes you want to skip a parameter here and there. It's not brain surgery to figure out this occurs in practice. Should we implement it by allowing multiple commas for skipping, or maybe a token to mean "default value"? Who knows. I'm not arguing how the syntax should look, I'm saying the use case is there.
There is also [NVS](https://github.com/jasongin/nvs), which works for me (and also supports node-chakracore).
One that comes up for me from time to time is `string.replace(/(foo).*?(bar)/g, (dontCare, foo, bar) =&gt; {...})`
&gt; IE10 and IE11 are still in my support matrix, and same goes for many developers (including major apps, like by Google etc.). If your environment doesn't support `Set` then you're probably not going have this new proposal anyways. In an environment where `Set`s exist I would prefer to use the appropriate type, unless hacks are absolutely needed for performance reasons. &gt; I mean... Set doesn't even have a method `map()`. const mySet = new Set([1, 2, 3]); mySet.values().map(); I don't necessarily agree with this proposal, but I don't think your use case is a great example
looks good. I'm also making a framework for canvas games but probably not so good like this. It started as a learning project but now have 3-4 years passed since the first commit. Hope I will publish it this year :D
You probably can assuming the chrome book can run the tools you need, I don’t recall can the chrome book run anything other than android store apps? 
http://www.williammalone.com/articles/create-html5-canvas-javascript-sprite-animation/
Express for back end, React for front end. They're the most popular: http://www.npmtrends.com/express-vs-hapi-vs-koa-vs-sails http://www.npmtrends.com/react-vs-@angular/core-vs-vue I've used React and I like it.
Thanks so much for replying, you helped me with my question about styling in react too i believe. Gosha's article on making dynamic form inputs is exactly what I was looking for, I appreciate the help.
i've started diving into it but i can't find any tutorial on yt... do you have any tutorial to suggest?
You can, but only up to a certain point. Once you start getting into command line tools to help with your development, you'll feel the pinch of chromebooks limitations (unless you go full hacker). Good news is, you can get a surface pro for $500 right now (might be today only?)... if you can find one. https://www.officedepot.com/a/products/725734/Microsoft-Surface-Pro-Tablet-123-Touch/ 
If I'm using the Linux for Windows subsystem, do I just install regular NVM in the terminal or do I still need to use a Windows specific solution for NVM?
&gt; Compilers like Babel and TypeScript will actually provide this new proposal to me, but they don't implement Set (or other classes like it). Babel offers polyfills that will provide the new types from ES6. &gt; Well I wasn't trying to tell you what to use. I know, I just don't see your use case as a very common one. Even if it were a common one it seems to me that there are better ways to handle it. Why create an object where only the keys are important at all? As to your last line, how do you get that object then? You're just storing an object in the db as a makeshift set and passing it straight through? If so, why?
this is exactly why i rarely post anything on the programming subreddits because the point ends up getting lost in the argument fairly often IMHO. im not arguing against the usefulness of a white board to help diagram or as a visual-aid, nor am i arguing for a total ban of whiteboards during a programmer interview process. i simply stated thus "i always think whiteboarding code is not a very good indicator of a programmers ability" - and i stand by my point. So in essence you are disagreeing with something you've completely misconstrued on an old comment which is frankly annoying 
I would not recommend. For 500 dollars you can get pretty decent Windows PC, you don't need a gaming beast to code, especially in javascript, since you don't don't have wait it to compile. Also it has much more tools for development than chromebook can ever have and you can install linux on it, if it is your sort of thing.
Wait, so it's no longer 100$?
This or Phaser?¿
I had a Chromebook maybe 5-6 years ago. I don't know how much, if any, they'e changed, but at the time you could only install apps from the chrome store. I had a terminal emulator that wasn't really a terminal at all. I doubt you could really install the command line tools that you'll probably eventually want for JS. I think I was able to download a separate SSH app from the Chrome Store. They didn't have an FTP client, so I had to use a web-based one that wasn't free. I can't remember what type of text editor I used, but it was pretty basic. I'd suggest buying a $500 Windows laptop instead. When I had a Chromebook, it wasn't very good for web development stuff. 
Chruton or Chrubuntu will let a Chromebook dualboot an instance of Linux alongside ChromeOS, you can use anything you would normally use on Linux that way
I bought a Lenovo refurbished Flex 5 with NVIDIA graphics for only $800. I’m sure you could get a better laptop for that price, if you either build it yourself or pick up a refurb off of Amazon.
Your question has been answered, so I’m just going to say that I fucking hate Java. I’ve yet to see a Java server that takes less than a week to set up locally. I’ve never seen a Node server take longer than the time to npm I stall. I’m a bit biased, considering my JavaScript background, but I can’t wait for the day that Node is the most commonly-used back end.
Your quote and the comment I responded to are... let me check... yes, completely different. You wrote an analogy about a blacksmith and a hammer and left it at that. Maybe you wrote a comment somewhere else on this thread that better explained your thinking but I replied to what I saw. You certainly seemed like you were saying there wasn’t any value in it. So, in essence, you either forgot which comment I was replying to or just threw out a random analogy and assumed that somehow anyone who read it would gather a ton of context from I don’t know where and totally get what you meant. Maybe the reason you don’t like posting on this subreddit is because you lack communication skills, because I certainly didn’t cherry pick something out a broader comment and go on a diatribe. As far as I can tell you posted what you thought was a clever little analogy and I responded with a polite, well reasoned disagreement with specific examples to back up my case. Is this different from how you think programmers should interact with each other? Does it “annoy” you when you’re at your job and you throw out a one sentence argument with no backing and someone politely responds with a different argument? Face it, our field is new and there is a lot of dissension on what tools to use and how best to advance the field going forward. We don’t have thousands or even hundreds of years of prior art to build on like other engineering fields do. Disagreeing with each other and presenting reasoned arguments is how we grow as both engineers individually and as a field as a whole. I’m sorry if you feel “annoyed” by participating in a discussion you chose to initiate. But maybe you oughta step back and examine what’s underpinning that annoyance, because I certainly didn’t do anything wrong, hostile, or nasty. The bad blood is all on you. Cheers. 
I use EaselJS rather than working directly with the canvas.
While it's true you need a command shell for a lot of stuff, especially tooling (webpack, etc) for larger projects, you can get pretty far with a chromebook and codepen.io to learn of of the core stuff. Good luck!
I'm really puzzled by the idea that it takes a week to setup a Java server. You can literally spin up a whole Java application in a matter of minutes with any of a dozen popular frameworks (DropWizard, Spring Boot, Play, Spark Framework, etc.). Actually deploying into a user-facing production environment is also very painless. Last week I made a DropWizard app and put it on an AWS EC2 instance in an afternoon and the reason for the "afternoon" part was that it was only my second time using AWS for anything and my first time ever using EC2 so I had to do a bunch of meta-stuff like create the IAM user and so on. I've also put Spring Boot apps into Azure and Heroku with minimal fuss. Here at work we run a set of five services built with Servlets and Jersey and deployed on Tomcat. It takes about twenty minutes to run a vagrant script and have an entire development environment for these five services in a virtual box.
You made a project with the name Samba? Do you realize that name is already used for a very, very popular file system tool?
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
Thanks for the suggestion. I'll stick with the name.
Personally I'd prefer Koa as it's a lot leaner and better designed for building REST APIs. If you're looking towards the horizon then you should definitely get familiar with GraphQL \(the next evolution of web services\) and it's most robust implementation, Apollo Server \(which can be used with Express or Koa\).
https://github.com/vramana/awesome-reasonml
If your budget is $500, I wouldn't limit yourself to a Chromebook. Look at Dell laptops or old Thinkpads! (just my recommendation) If you're set on Chromebooks for some reason, I highly suggest GalliumOS. You can install [GalliumOS](https://galliumos.org/) which is a linux distro optimized for Chrome book's limited hardware. I'm not super advanced with computers but I'm comfortable with them, I didn't find it difficult to install at all. I run sublime text and node servers, no problem. I also got it used for $80 (Acer C720). It was a great introduction to the Linux environment, but it is not a great dedicated work station. It is now just a really neat hyper-portable Linux book. I love it - but it's a better as a side piece.
What? No. I'm just saying something nice about it.
Hey man I’m trying to have a polite conversation with you and you keep responding with escalating levels of anger. Let me buy you a virtual beer and we can just be two guys (or a guy and a gal) having a friendly conversation about our art. Try not to perceive everything as a personal attack - because it’s not. 
I second vue. Great framework 
I can see that one. It's not `map`, but I have encountered that one some number of times. I still prefer writing an explicit name for the unused `match`, though. I don't think it justifies introducing this "feature" in the language. I could even accept introducing an "ignored name placeholder" (a la `_`), but not simply leaving it empty.
Yeah I'm not interested in anything with a UI. Just thinking of a service with a JSON object in the response body. Thanks for the restify and postgrest suggestions.
After a few months of learning rust the I found the borrow checker fight almost disappears. While the initial code writing might have a lower mental overhead in node, maintenance and debugging has a much lower mental overhead in rust. I personally prefer the latter, especially when there is the bonus of not needing to have the node run-time where I am going to be using it or writing .sh/.bat files to get them to run without `node [script].js`. 
*extremely* amazing? I guess if you don't know how to program it, it might be amazing, but *extremely*? Did you just get on the internet for the first time yesterday?
You don't need to listen for keyup, you can listen to 'change' on the form itself
Ah, well, I explicitly pointed out `map`. But anyway, I _do_ see the use case of "skipping a parameter". I never said I didn't. However I do find that, for one, the proposed syntax is sloppy and error prone; I might concede the usefulness of having an "ignored token" or similar, but not having _empty space_ between commas. Also, I find that `map` is a bad example.
Won't this break things like Sentry?
I agree and wish I would have asked them to clarify in the interview.
[Still getting error messages on rest unfilled fields](https://jsfiddle.net/6646da38/4/)
Well, tbh I was just excited that how close it looks like to an actual murmuration. Also, putting the word extremely don't question my inter-web presence, it just explains the absurdity of enthusiasm. 
&gt; I still prefer writing an explicit name for the unused match, though Yeah, same. It's such a minor thing, that I tend to think of it as a "if it aint broken don't fix it" sort of thing IMHO, as far as language features go, if a proposal doesn't change the way I express code in some semi-fundamental way, it's probably cruft. With that said, between this proposal and a new symbol, I'd take this proposal. *BUT* if the rationale is to make function args consistent with array destructuring, then fix inconsistencies across the board
Breaks all Angular 5 projects? :D
https://github.com/bberak/react-native-game-engine
Waiting for all the JD's from recruiters seeking 5 years with Angular 6
My globally installed Angular CLI went from 1.7.4 to 6.0.0. That was oddly satisfying. 
So would this lead to a sudden influx of common sense in the npm community or we'll keep downloading hundred of one-liner packages from random authors in our projects?
You might as well just drop out now considering you don't even know the difference between JAVA and JAVASCRIPT.
Hi /u/MatiasMGS, For javascript help, please visit /r/LearnJavascript. Thank you!
Yes I know that's not how it works. 
Hi /u/eekoggi, For javascript help, please visit /r/LearnJavascript. Thank you!
Try uppy or fine-uploader...
This is a quick and dirty I came up with in a few minutes that seems to echo most other people's input. Not super efficient (could store the keys) but should get the point across. const greetings = { a: 'Excellent job', b: 'Nice job', c: 'Well done', d: 'What happened', f: 'Not good', } const studentFeedback = studentGrades.map(student =&gt; { const letterGrade = Object.keys(greetings)[9 - Math.floor(student.grade / 10)] return `${greetings[letterGrade]} ${student.name}, you got an ${letterGrade}` }); console.log(studentFeedback) 
We both already know the answer to that.
We should assume it happens often. Apple's iOS compiler toolchain is heavily static (aids static analysis), guarding against use of internal APIs, using AI algorithms for detecting suspicious behavior, and they have literally thousands of people running manual tests on every submitted app. And ***still***, sometimes malware that steals people's data sneaks in (albeit rarely, compared to Android). NPM does almost none of that, and the heavily dynamic nature of JavaScript makes *robust* static analysis of arbitrary JS code nearly impossible. Not to mention NPM packages also can (and do) contain binary files that will be executed on your platform with no sandboxing (unlike iOS apps). There have been ***dozens** of known situations where malware goes undetected on NPM for weeks. We should assume there are also many unreported situations where malware is never detected. It's no different than going around the web, downloading executable and running them. Now to pull back from all the scary stuff I'm saying, when you really trust a vendor (say Microsoft's `typescript` package) and that vendor is a big, reliable company, or at least a well-known trustworthy FOSS developer, then the chance these types of vendors will feed you malware is practically none. However ***everyone** can upload a package to NPM, and most of those who do shouldn't receive your trust by default. TL;DR; Using random NPM packages is no safer than running random EXE files on Windows, or running random Android apps on your phone. Stick to high-value dependencies provided by trustworthy vendors.
Out of curiosity, can you give me some reasons why you went from Express to Koa? I just switched from a job that used Express to one that used Koa and I've yet to see any benefits of Koa. I don't think Koa is worse, but it's slightly different and with Express having such high adoption, I don't really understand why people would choose Koa over Express.
I think the next logical step in the node/npm/bower community is to introduce an authority that would regulate these modules. This will soon become a common practice and a huge security issue if left unguarded. 
Do you read the problem and start coding away? I usually write out pseudo code via comments or pen and paper and then start programming it. That way I get the logic down and start focusing on the programming part.
https://i.imgur.com/HvCMF6T.jpg
&gt; Dude just pay attention to what you install Given the number of dependencies and frequency of updates, I don't think that's feasible
Dude it's your fault if you install a ton of stuff without knowing. For instance, I install create\-react\-app. It comes with 80000 dependencies but I trust Facebook and I trust that if anything ever went wrong with one of it's packages it would be caught pretty quickly. Now if you just google for crap and install random things off github which have 80000 dependencies it's a completely different story. 
The problem is, that's an eggshell.
Hey, thanks for noticing. I post stuff I find interesting and think others would as well. Glad you're in this camp.
Who trusts Microsoft? And why? 
I can attest that CrossCode is amazing.
OK, how about this: don't trust Microsoft, and spare me the rant.
I do something similar. Add a comment for each step of the solution I believe will work, Build out the basic logic, Refine, Refactor. 
_padding intensifies_
Trusting Microsoft for software quality is like trusting Facebook for privacy protection.
npm is dumb and the CEO is a racist 
You couldn't help yourself.
I've used several Java servers, and there's always a problem. Maybe making one for something small is easy, but when using it for a gigantic enterprise application, there are so many hoops to jump through. I've used JRebel, JBoss, and a couple other things, and it always has issues. Every. Single. Time.
hmm this sounds like the better way to do it. Yeah I'll try that.
Just amazing. 60fps easy 
Love this response; thank you.
This just in -- signed packages to abolish racism! More at 11!
itshappening.gif I wonder how long before one of these slips into the dependency chain of a popular electron desktop program and infects thousands of users? Maybe Spotify? VSCode? Atom? Slack?
[itshappening.gif](http://i.imgur.com/Hf1yqgr.gif) --- ^(*Feedback welcome at /r/image_linker_bot* | )[^(Disable)](https://www.reddit.com/message/compose/?to=image_linker_bot&amp;subject=Ignore%20request&amp;message=ignore%20me)^( with "ignore me" via reply or PM) 
You did great man. That guy is a sorry sack of arrogant nothingness. You are talented
There's still potential problems: * A trusted publisher's GitHub credentials are compromised, malicious code is inserted into a popular library * A trusted publisher pulls in a package which relies on untrustworthy code * An untrustworthy publisher becomes trusted * Etc.
Will there be updated polyfills that prevent style bleed in IE?
Yep... instant payoff for zooming in!!
If you're running Node in the subsystem then you use the normal nvm that you installed within the subsystem.
 Give [https://play.google.com/store/apps/details?id=gamesmint.com.jsone](https://play.google.com/store/apps/details?id=gamesmint.com.jsone) a try :\) 
I was more inclined to ranking system on packages instead of publisher., but i guess it would have many problems to be a viable option.
\&gt; procures popcorn
Facebook makes bugs just like everyone else. Just not as often. You can't just "trust facebook" if you're actually auditing code for compliance/security reasons.
I think you mean npm install -g popcorn
*rolls eyes*
As long as JavaScript continues to be a barebones language, we're going to continue with the one-liners.
Reminds me of [this article](https://hackernoon.com/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5?gi=5156a6b53c6b) from not too long ago.
To find the answer use my new package `npm install dontCheckTheSourceCode`
I'm currently on my 4th year... According to my resume
You're right, it doesn't break all 5 of the Angular projects in the wild.
I'm currently making the switch from angularjs to Angular, and my God. I feel like I'm relearning programming all over again. Can't wait to see all the new stuff in Ng6 I don't get already.
If I may ask, where do you find this stuff?
Pretty cool! I don't know of you are looking for feedback but catching and re-throwing errors without doing anything is pointless.
Seems like a losing battle to try to regulate anything on the internet The best thing I've seen against malware is transparency of statistics, author, code. People will still get infected if they are not careful, but people will still get infected even if you are careful, just it costs you more money and time and potentially user experience (eg, approval periods or rejections for misunderstandings)
This guy(?) sarcasms.
Not who you were asking, but Npm released a blog post about it. Also, I subscribe to a node newsletter and they reported on it as well. 
Pretty sure that book is for intermediate developers, I remember it ramping up quickly in complexity. If you like the teaching style and pace of the book you cannot do much better. It is not too out is date at all, what little your missing you'll be able to catch up on in a week.
Ohh he's racist against white people. 
I've known folks who do those iOS app manual reviews. Trust me, 99.99% of the time they are not looking for stuff like that. 
Not OP but if you're trying to stay in the know, Hacker News remains one of the best sources for aggregating this kind of stuff (for better or worse...).
Impact has Ejecta, which translates the JS canvas calls into native OpenGL: http://impactjs.com/ejecta
So can it scaffold for c64 asm, Cobol, Fortran, qbasic, etc? 
Huh?
&gt; So would this lead to a sudden influx of common sense in the npm community or are we gonna keep downloading hundred of one-liner packages from ~~random authors~~ **Jon Schlinkert** in our projects? 
https://www.barbarianmeetscoding.com/blog/categories/javascriptmancy/
I pretty much ONLY use well established libraries. I haven't worked with any team that's all willy-nilly about installing just any old package.
And waste a shit ton of time trying to be macho to satisfy 1% of coders who think that's something to beat their chests about? Just because you can doesn't mean you should also applies to this kind of bullshit.
Is that accually a new concept? I mean people have been installing random WordPress plugins on their site like crazy. I've seen sites with 30 to 40 plugins at the same time. I guess nobody really looked after backdoors in those plugins, and it accually happend in the past.
Hey, Weboyster, just a quick heads-up: **happend** is actually spelled **happened**. You can remember it by **ends with -ened**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Everyone knows right-pad is the future of JavaScript.
“A little duplication is better than a little dependency”. Different language, different community... but I think it’s words to live by. 
It's a good enough source to learn from... It's mostly correct. There is a bit of a negative bias against it, dont worry about that. Just practice what you learn, If somthing in w3schools is incorrect you will soon find out.
&gt; Stick to high-value dependencies provided by trustworthy vendors. Hahah, nope.. https://github.com/ChALkeR/notes/blob/master/Gathering-weak-npm-credentials.md
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [ChALkeR/notes/.../**Gathering-weak-npm-credentials.md** (master → b26f7b3)](https://github.com/ChALkeR/notes/blob/b26f7b30037bcf200b82467f7d8f8a630ccfc44e/Gathering-weak-npm-credentials.md) ---- 
This is generally my feeling. I've had to install DLLs in my old .NET job that were completely opaque. The only thing I knew was that it was popular in the .NET community and came highly recommended by anyone trying to solve the same problem. That was the best I could do. All these people whining about blindly trusting [insert author here] have no actual solution to that problem; they also just install things the community burps up as popular and trusted. At least with NPM we *can* see into our dependency tree. Might be a lot of work to audit a giant dependency tree but if you're using popular packages the likelihood of the community unearthing these kinds of issues goes way up. It's open source. We don't need a gatekeeper to regulate things. All we need is an active community, which we have. I mean, just look how many bloggers we have out there analyzing everything and helping us all inform our decisions. This very post is an example of the community finding the bullshit and exposing it. It's a constant battle between security and freedom and I feel like at the moment we're doing pretty alright and I doubt it will ever be perfect.
Anybody care to shed some light about what goes on behind the scenes of a npm package. Specifically what happens in your node modules folder? 
You don’t know JS. Read that book
React-natives expo translates three.js to native GL. Now three isn’t exactly a game engine but a good abstraction anyway to use it for games.
You couldn't be less correct, but you sound SO edgy!
Typically a great idea is to ask people from older classes if they have, or remember, test problems from year before, and practice on that.
Oh boy my AdWords friend is gonna dig this :)
Head first javascript 
just scrolling through this pdf its amazing ty. 
[MDN JavaScript tutorials](https://developer.mozilla.org/en-US/docs/Web/JavaScript) are a good place to start. You should get familiar with MDN as the docs(HTML/CSS/JS/WebApi) are something you will be using a lot when you start being serious javascript or web dev in general.
The point the article tries to make is that even well\-established libraries, such as mailparser, may contain bad apples deep inside its dependency tree.
The You Don't Know JS Series is quite good and [freely available to read online](https://github.com/getify/You-Dont-Know-JS). Secrets of the JavaScript Ninja by John Resig(jQuery creator) and others is also really good. There is a book summary [here](https://medium.com/of-all-things-tech-progress/secrets-of-a-javascript-ninja-book-summary-dc194b0e91d0).
/Users/johnzhu/Desktop/E32F49CE-5749-4C89-97E7-A8B425062193.png 
1.Professional javascript for web Developers 2.Secrets of the JavaScript Ninja 3.Build-your-own-angularjs ..... http://dmitrysoshnikov.com/ecmascript/javascript-the-core actually,I think Build-your-own-angularjs is a great book.TDD style makes it nice to read and almost complete the whole Angularjs core.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [sindresorhus/code-point-at/.../**index.js** (master → f8f21c8)](https://github.com/sindresorhus/code-point-at/blob/f8f21c8df2d40248fef1b36ca9076e59c0c34791/index.js) ---- 
I noticed that people dont like it, i gues becase of missleading name, but actually i think its poretty nice, especially for basics. They have good and eas to understand examples, so nothing wrong it. Another great place to learn is mdn, mozila developer network...
Yeah I like it too =\) It has a nice approach to programming and javascript
Vue is perfect for you.
I am just waiting until someone creates a proxy package like `lodash.sortBy` or `lodash.cloneDeep`, let's it sit there without doing any harm. Once enough people start using it instead of `lodash.sortby`/`lodash.clonedeep`, he'll publish a patch with a backdoor and voila!
I do. My point was that a lot of packages add left-pad (and similar one-line micropackages, like is-number, is-array, is-even, is-odd, etc.) instead of just writing the one line themselves.
Npm install answers 
code-point-at is made by sindresorhus. I think we are fine.
Yeah, that package is probably fine, but the point is that chains of dependencies in a lot lf NPM packages get worryingly long. You don't just have to trust the author of the package you're using, but also the author of the dependencies your dependencies are using, and the authors of the dependencies of the dependencies of the dependencies you are using, etc. If your dependency has a dependency which added a dependency by an author A who is just a little less thorough than they should've been, and A adds a dependency because it offers useful features without carefully judging the trustworthiness of the author, the entire chain breaks down and your server suddenly runs untrusted code from a person whose intentions might just be to suddenly add malware to their package once enough people have it installed (or the package might be sold or given away to someone with those intentions down the line).
+1 for passport js
Looks like it's still using Webpack 3.
What makes you think JavaScript Allongé might be outdated? Just the date?
Mainly just the date. But I am not convinced it is out of date. Have you read the book?
Yes sure and I agree. Just to say that I have more trust for sindresorhus than a code I wrote myself with a spec not so clear, some random explainations from a tutorial and two answers from SO. Smaller the package easier is it to read it. The problem wont exist if JS come with a proper standard library.
Yes, I've read it. It's a good book and I don't think it's outdated. (Which is why I asked, because while I understand your concern it felt somewhat weird to base the suspicion on just the date)
But 3.2.18 introduced popcorn.butter()
&gt;but don't depend on left-pad, which has 349 dependents (and way more recursive dependents) yet is literally one line to reimplement You phrased it as if the fact that it has 349 dependents means you shouldn't depend on it; that makes no sense. If anything, a lot of dependents is probably an indicator that it's safe to depend on it. On a related note, it's built into the [String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart) prototype now.
+1 Vuejs
It was meant as "don't do like the x packages which depend on left-pad", not as "don't depend on left-pad because it has x dependents". I apologize if I was unclear.
Yea. You are not the one I was replying to. And you missed my point. What I meant is don't complain when you want to depend on others' libraries/frameworks plus you don't even check the source, anything can happen. 
Well... when I say trustworthy that implies things like: - Author is trustworthy enough not to use password "cocacola" and similar. - Author is trustworthy not to use password from another service. - Author is trustworthy not to use other non-trustworthy dependencies in the package. 
Good thing you can't use capital letters in package names. 
Are you talking about Mongo? Or schema-less DBs in general? To me, this seems like an insanely ignorant thing to say.
Oh..just install typescript, start creating useless classes everywhere and start pre-optimizing them with extends and a solid pseudo-inheritance chain. Then start adding dependency injection mechanism and completely disregard middleware. Finally, never use a function because it's hard to understand, instead use new () everywhere. Happy transition ! /rant.
You should probably also set `configurable` to `false`.
Guide: https://medium.com/webpack/webpack-4-migration-guide-for-plugins-loaders-20a79b927202
Also, npm doesn't allow you to publish packages with too similar names to existing packages. Which is absolutely infuriating when your perfect name collides with some random documentationless package with 8 downloads.
Yes, that is how racism works. You marginalize someone based on their race.
Check out https://github.com/nestjs/nest
Do you really understand why you have certain lines of code? I feel like you are just repeating a pattern. Why redefine the same types under different names? type IsStrike = (rolls: number[]) =&gt; boolean; type IsSpare = (rolls: number[]) =&gt; boolean; And why do the types and implementations need to be defined separately? Seems like a lot of boilerplate and repetition: type IsSpare = (rolls: number[]) =&gt; boolean; const isSpare: IsSpare = rolls =&gt; sum(take(2)(rolls)) === MAX_PINS; Replace with: function isSpare(rolls: number[]): boolean { return sum(take(2)(rolls)) === MAX_PINS } 
&gt; It comes with 80000 dependencies but I trust Facebook and I trust that if anything ever went wrong with one of it's packages it would be caught pretty quickly. I'll put this calmly: * You can't just trust one author; you'll have to trust *every single publisher in every single dependency tree*. You're off your rockers if you any think author, however trustworthy, is going to manually analyze thousands of deeply nested packages for credibility. * The [2016 `left-pad` fiasco](https://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/) already broke some of the biggest and most credible npm packages when one random dude unpublished his 11-line function. One of those packages was Babel, *which Facebook uses*.
5s on Google: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode
i think in the 1st code snippet the part .then((data) =&gt; { return data; }) is useless so it's getData = () =&gt; { fetch('http://api.github.com') .then((response) =&gt; return response.json()) .catch((error) =&gt; { //do something alert(error); }); } vs getData = async () =&gt; { try { let response = await fetch('https://httpstat.us/500'); return await response.json(); } catch(error) { //handle the error alert(error); } }
You have to target the elements if you want to write clear idiomatic and effective code. lets say you want to target the root container, you can have ```&lt;div id="root"&gt;&lt;/div&gt;``` in your HTML then in the JS, you have ```var root = document.getElementById('root')``` Then you can do root.addEventListener('keydown', function(event) { switch (event.key) { case value: //logic break; default: break; } }) Your switch case is also wrong, you don't need ifs in switch, the conditionality is already built in with the case keyword, look the [switch statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch) up and make sure you understand it. I'm not exactly sure what you are trying to do there, where is the "x" and "y" coming from? you are just passing numbers to the cases in numeric order, which I think is not what you want to do.
Why are you using IIS during development rather than Webpack dev server?
The first feedback was not about logic, I didn't even look at that. It is about redefining the same `(rolls: number[]) =&gt; boolean` type (and a few others) under a bunch of different names, one for every function. Why do that? 
must check this: http://exploringjs.com
I'm not saying that whoever did this isn't a horrible person, but if you are so stupid that you can't work with browser cookies yourself using plain javascript (to be honest, how hard is it to work with simple strings?), you deserve to get this kind of shit...
It doesn't matter, at least people without common sense would get fired pretty fast.
I hate this bot
If it's really so fucking hard to use pure javascript when it comes to browser cookies then maybe you should try some other jobs, say, janitor.
Allongé doesn't go into deep features of the language. If this is what you're seeking, then go for exploringJS, exploringES6 or You don’t know JS . If you want to learn really code code pattern than you can do in JS and improve your overall computer science skilln Allongé is a must read.
That book is solid.
The fact that you are still using the same example from 2016 that caused problems for less than a day. And no you don't need to trust every single author. You trust that the one you are directly interfacing with didn't install bs they didnt understand. Then that works recursively down the tree. Use popular packages from well known developers you will be fine. 
The problem with security is that you don't know what's wrong until it's too late to fix it. And it's very easy to point the fingers. "Those NPM assholes, not my fault!" Or how about the evergreen excuse "but everybody does that!"
Nah, string manipulation is too hard for JavaSkids.
[removed]
You must be new here, in projects of these skids, I bet 100 dependencies are bare minimum and best case scenario.
??? I thought being programmer is knowing npm commands, reeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
That's a very nihilist view of the situation. When you add DDLs to a C# project or .frameworks to an iOS project you are trusting microsoft and apple. Are you saying you can't ever build security compliant C# or Swift apps because "you can't just trust a tech giant". Dispite the fact that they have the best engineers in the world and a reputation to maintain. 
I'd understand if that was a big dependency and needed a lot of time to be rewritten from scratch. 3 Simple functions is what we are talking about right now though.
Facebook engineering is different from the part of Facebook that broke the public's trust.
Most of the web page is ASP.NET MVC.
That quote isn’t saying “don’t use dependencies”. It means, essentially, “rather than adding a small dependency (like left pad), just implement it yourself. But if a dependency is large enough to make that difficult, it’s a worthwhile dependency.”
My thoughts exactly.
You complain about cookies? What about the ton of one\-liners that even the absolute beginner should know about? I mean, there's a 'is\-odd' package in active use. I'm sure one it's somewhere in your node\_modules too. It's literally more work to add such a dependency than it is to write your own code, which would be tailored for your specific needs.
Don't worry 3.1.58 backportes this fuction. Or you can install webpack-butter-popcorn then you can simply import butter straight into your popcorn. 
Github stars are about as good as any other ranking system will get. There is no perfect solution. 
main benefit is that middleware is an async function. Async functions are very useful and it's a shame you can't use them directly in express. Express middleware is a regular function which signals via a callback. You can mitigate this problem by plugging in a simple middleware which evaluates a promise but it's a little hacky solution for something koa has out of the box.
[https://pragprog.com/book/ves6/rediscovering\-javascript](https://pragprog.com/book/ves6/rediscovering-javascript)
It takes the heat for the civilized among us.
Forgive me, are you prime minister?
Eloquent JavaScript. It's been updated
Project Manager
JavaScript animation created using p5js. "May the 4th, be with you" To celebrate Star Wars day I created a short animastion in JavaScript using p5js. Taken from the original film, it recreates of the famous Death Start battle from the X-Wing HUD. Source code: https://github.com/owenmcateer/Motus-Art/blob/master/src/week_13/main.js
Yes, that’s a possible thing. Racism is the discrimination against someone based on their race – this doesn’t imply any power structure, or institutional issue. A different thing is institutional racism, that’s when a powerful group discriminates based on race, not just a single person. But depending on country, this also can happen against "white people". In fact, there were entire wars fought over one society of "white people" discriminating against another group. Racism against "white people" is possible, and even institutional racism against "white people" is possible (although the second is basically nonexistent in the US)
the company I work at has a feature called context that does something very similar to that https://www.getguru.com/ I haven't found any extensions that do something similar, most of our competitors are just coming out with chrome extensions
And when did I agree that never using dependencies is a good idea? I don't use them only when I can't write something on my own, e.g. entire imaging library or something like that you know.
It's not in my node_modules because I don't use JavaScript for backend, and for everything frontend, I build shit from scratch, try again.
Be grateful if your life doesn't involve one, good PMs are few and far between.
*JavaScript* is a bare bones language?
We just merged a fix for Node 10, so it should be working in the next version, very soon!
This! The middleware came out much shorter and much more readable in the Koa project than in the Express projects.
Can confirm this :)
I happend to like it!
Hey, katzeklo, just a quick heads-up: **happend** is actually spelled **happened**. You can remember it by **ends with -ened**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
I updated the post, thank you for your feedback.
I guess that my previous reply to WTF Wednesday was too late, so I'll try once more:) I have developed a tool for js testing called [BaseT](https://github.com/Igmat/baset) - it's still in progress (only ~40% of planned features are ready), but it already could be useful in some cases. There is also [an article](https://github.com/Igmat/baset/blob/master/docs/Is_TDD_wrong.md) that explains motivation and some ideas behind this tool. I would love to hear any kind of feedback:)
General sentiments of these comments are: "Don't reinvent the wheel unless you're using Javascript and x,y shit languages." I hardly ever see these types of comments in regards to python or Go...
We should add Typescript typings for this thing :D
If left-pad is that easy to write, it's that easy to audit too. What's not easy to audit is when my code has thousands of little side-quests that run off into the wilderness to re-implement functionality that's only peripherally related to what I'm actually trying to accomplish. I know none of them are malware, but why should anyone else trust me? Cross-package code duplication just forces the next person in the dependency chain to audit every other developer's buggy, slow, poorly-documented special-snowflake implementation of left-pad.
&gt; A big thank you to all the great people who have made JavaScript the ecosystem it is today, I’m honestly in awe of what you have accomplished. Maybe there is something to the infinite monkeys with typewriters..
TL;DR?
thanks! was curious for the same reason :)
Ah! I see! You're exactly right with those big clunky Java EE servers. Luckily those are considered failures and dead by most people in the Java world today. I haven't run across a Java EE server in quite awhile. Look, you can do amazing things now with much lighterweight servers like Tomcat or even embedded Jetty \(which is what most of the frameworks like Spring Boot and DropWizard bundle with\). Where I work right now our three main Tomcat\-based services run across a total of 62 servers and serve billions of requests monthly.
Hi /u/applehasnofeelings, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/saviolaxx, this post has been removed for being off-topic. You might try /r/chrome instead. Thank you.
&gt; That's not really enough though. I would consider Babel a pretty well established project, but installing just babel-cli installs 118 packages from 84 different authors. And how many packages/authors are in a standard install of any given flavor of Linux? What makes that implicitly more secure? This is the nature of OSS. There is a dependency on larger packages to audit their shit. This is not a problem unique to node. Python is include happy. PHP has a shit ton of copypasta and external libraries you can use too.
Hi /u/AnonymousPerson202, For javascript help, please visit /r/LearnJavascript. Thank you!
Bad bot
Reply with "Bad bot". Another bot keeps track of the popularity of all the bots using such posts as votes.
This isn't Ruby on Rails, guy. This isn't some hold your hand &amp; drink our kool\-aid framework. Go back to Rails. Stay there with your ignorant opinions and crawl very slowly to your death as a player of any sort in this industry.
Its easier to use than OpenGL. It exists to be depended on and get people into using Microsoft tools for development. I've been watching them dig their claws into open source. I think their motives are plain to see. 
The framework my team supported prior to this one (a proprietary one) reached deprecation status because it was difficult to do the things we want to do nowadays (e.g. code splitting). There's a strong incentive for other teams at Uber to adopt Fusion.js, so it'll be alive for the foreseeable future, unless some other fundamental paradigm shift makes it too difficult to support via continuing incremental feature addition as opposed to a rewrite.
Ah, yes. I should have said "Java EE" instead of Java. I always forget there's a specific difference. Yes, I hate it. Ha ha Good to know there are much, much better alternatives! I wonder why I've never been somewhere that has adopted any of them.
The way V8 works, in C terminology, is that a value of the sort that goes into a register or on the stack (so not requiring any malloc or later garbage collection, ie automatic free) is either a number (64-bit double-precision floating point) or a pointer. The values true, false, null, and undefined are also effectively true primitives in the sense that they correspond to certain bit patterns in a register and don’t require any allocation (though technically they are represented as pointers, it’s just there is only one, canonical pointer for each; I don’t think of them as pointers, in my head they are like tagged values). Capital-N Number in JavaScript is a whole different thing, it is a class representing a “boxed” number that is rarely used. The typeof of a Number instance is “object.” A real, primitive, on-the-stack number has typeof “number.” Reading and writing to typed arrays (before bigints) absolutely does not allocate any memory! This is why C code compiled to JavaScript with Emscripten can be so fast, for example. BigInts exist in the same category as strings: at a language level, they are primitives, eg they are typeof “bigint”, not “object.” Implementation-wise, they are heap-allocated immutable objects.
Just wait till you try typescript :)
&gt; I think their motives are plain to see. Having more open source projects and creating better tools because of it? Microsoft has been very clear that open source was a good move and that the community contributions are good. I really don't how that can be used against us in any way other than making the competition look bad.
Dude, if you think that's copypasta, you don't know what the fuck copypasta is. What part of that looks copy/pasted you fucking troll?
great read. although you could still use php and jQuery and do all the same things. it's arguably a matter of personal preference. with that said, the industry is definitely headed more towards React and NodeJS ecosystem, especially since NodeJS gives us front end developers more control over the whole stack.
It comes and goes. Not long a go people tried anything to avoid JS wherever possible. Now we're back at the point where even the most basic things require Javascript for not being completely broken. In a few years maybe we're all hyped for HTML 5 and CSS 3. We'll see.
&gt; I am using a flash widget that hosts a video stream. There are still people doing this ... wow. I've never seen a Flash-based stream player since ages. And no, this is not possible. You should get rid of Flash.
to be fair that's your screenshot, not theirs.
ReactJS is one of those libraries that provides a lot of flexibility with how you structure things. Unlike Angular (which is a full fledged framework that dictates how your project should be structured) ReactJS gives you more freedom with how you implement things...point being a lot of this is personal preference... With that said, this article does a good job of recommending a certain implementation 
I agree on PHP side. With jQuery you have to do a lot more to manage the code &amp; app state in a sane way. React tends to give you nicer conventions. There are performance benefits as well. Though I'd say the major short coming feature wise with PHP would be if you needed react server side rendering. It's possible when your server is in another language, it's just much more difficult.
this makes sense. Totally agree that jQuery is a huge pain compared to React and even Angular. It's almost trade off between simplicity and code organization. While libraries like React serve to better organize your code, it also requires more of a learning curve (that is adjusting to the build tools and environment needed to make things happen). JQuery you can just run in the browser and the syntax is pretty easy to pick up. With ReactJS you have to adjust to JSX etc. But yeah...ultimately provides a huge organizational advantage over jQuery 
HTML6 hype `&lt;h1.5&gt;`, `&lt;mainbutnotthemainmain&gt;`, `marquee2themarqueeening`
Use dev server as middleware
Good performance and electron do not go together. 
The level of curation and oversight for, say, Ubuntu's "main" package archive is extremely high. The transitive dependencies are largely harmonized so that you don't get as much duplication and cruft and there is a vendor who is taking responsibility for auditing the code, doing release management, signing packages, and issuing security updates. Even Ubuntu's community-driven "universe" repository is curated significantly better than npm. And while PyPi has exactly the same problems as npm (and has also seen the same consequences, with malicious packages) Python benefits from a much richer "batteries-included" standard library and is not afflicted with the "small module" cargo cult, which means that the attack surface in Python applications is vastly smaller than in many node applications.
Snyk finds vulnerabilities that are known and documented. It's not going to detect a zero-day. It can't proactively protect you from exposure to an attack like the one described here.
I just wish they'd get rid of the "You can remember it by" part. It always just boils down to "You can remember it by remembering how to spell it right, ya jagaloon!"
So insightful
What specific performance issue are you experiencing? You can research performance best-practices for JavaScript, Node.js and even Sass if, for example, you're handling some animations that could be offloaded to the GPU by using Translate3D transforms, etc. Assuming the performance isn't *that* terrible, you shouldn't be shy to open source it, ideally with a README.MD listing points of where you aim to see improvements. You could even start your own issue tread concerning specific performance issues that others could join in on the conversation, or better yet, where others could open a pull request.
"""""Angry""""" you're angry because you are retarded and couldn't write 3 functions to deal with cookies even if your life depended on it, which is basically the TL;DR of what I said.
Thanks!!
Oh, I misunderstood your original comment. Rereading it now with this comment I now see what you were originally saying, and agree with your comment ;) 
Did anyone say that or are you just projecting?
&gt; Finally, an added bonus to all of this is that back ends have become more bare bones. Servers can finally be focused on serving APIs and handling raw data, largely giving up the need to run all the extra logic required to render user specific HTML through a template on every network request. This is a good point I think about a lot.
File structure isn't a problem just do what works for you. 
It's just more code with it's own dependencies. It's very likely that a good chunk of it is dormant and never even gets called, but it's still a good idea to go with packages that have TONS of eyeballs and users which is the only way OSS can be secure.
What do you use for the front end? Bootstrap with some shit template? Lol out of touch much? No js dev worth anything needs your approval fyi. 
That's the biggest benefit in my opinion
I already know react mongodb. I have created small full stack project. Just want to know steps
I just started a new job and we're moving a PHP stack to Node and React, it's honestly a great feeling to be constantly learning new skills and making sure you stay up to date on industry trends. That's the beauty of being a programmer, technology is ever changing and evolving and so should we to keep up
I’m not sure about the most effective method but for me I usually draw a map of how the front and back will “talk” to each other and what I will need to handle it all. 
Before spamming more incoherent thoughts, try reading my reply. Cheers. 
Can you take some partof it?? Curious to know
Couple of issues: The following isn't valid js (missing `{}` around function body) (response) =&gt; return response.json() Normally people do `.then(r =&gt; r.json())` instead to minimize the visual size of the boilerplate Also, I feel that async/await don't always improve readability and this is one of those cases. If you're not doing anything interesting with the return value, there's little value in replacing then/catch with try/catch. In fact, in the context of requests, promises have a leg up on async/await when dealing with rejections: you usually _don't_ want to catch in the same scope you are fetching (usually you want to update the UI to reflect an error or do downstream logic in a different way), so typically, the code would be more like this: getData = fetch('/foo').then(r =&gt; json()) // later getData().catch(displayError) And, again, if you are doing something interesting with the response _then_, that's where async/await can come in to improve readability: async getProjects() { const data = await getData() return await Promise.all(data.map(item =&gt; getProject(item.projectId))) }
Again, here I am trying to save a life, by saying... replace react with vue..
&gt; Totally agree that jQuery is a huge pain compared to React and even Angular. jQuery is anything but pain. I never want to write ```document.getElementById()``` or a custom implementation of array.includes again.
You definitely have more of a learning curve with something like React or Vue or Angular or whatever the flavor of the day is, but I always felt like jQuery was hard to read and hard to follow along with. Even knowing how to use it (I think), I'd look at the code and it would just look like a garbled mess of spaghetti code to me. 
Author should try graphql when is at it.
I have to say that I think laravel solves a lot of these new modern problems for people still using php. It's no more about Have to go to nodejs to get out of the website rending paradigm but rather to leave the existing frameworks and move to something which focuses it's attention to SPA workflows. SPA = Heavy JS Client-Side + API Centric systems.
https://github.com/TryGhost/Casper/issues/340 It's a bug in an experimental chrome feature for users who have the "Experimental Web Platform Features" enabled in chrome://flags, windows only, I heard upgrading chrome fixed it.
So I saw [chalk](https://github.com/chalk/chalk)'s tagged template syntax and decided to recreate it (in its simplest form, 8 colors for text, 8 colors for background, and underlining) for browser consoles, then re-implemented it for terminals/cmds for completeness. 
Copypasta is also a derogatory term meaning your post is worthy of being copy-pasted as a joke response to something.
This is my copypasta now.
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;business as usual
Why? 
No, it’s a question on what you think about the hypocrisy. That’s why it has a question mark. 
I did not miss the point, I just think that any declaration of jQuery being "a huge pain" is a statement made by someone who never had to write JS for IE6.
I think both React and Vue are fantastic frameworks and can accomplish anything we need on the frontend. I'd even say they're almost on the same level. I have never been sad working in a Vue app, nor have I been in a React app. That being said, I prefer React over Vue.
hallelujah, love me some dat graphql kool-aid.
Lol.
I definitely enjoy programming in dynamic languages more (note: typescript is still more dynamic than most staticall type languages). I also enjoy drinking but don't enjoy the hangover
I prefer Scratch
Laravel sucks and bloated 
I mean its flowchart or some sort of simple word document? Can I take a look at it?
A comment about everything: start small. frameworks, DevOps, technologies, and more important: scope. 
Haha fair enough. I just gotta these obligatory 'you gotta try typescript' posts an obligatory 'giving crap to the typescript guy' post ;)
A lot of Front-End Devs today don't remember the days where jQuery was literally the only way to sanely create cross-browser sites without a mountain of wheel reinvention and code bloat. Been doing this and not a big fan of jQuery today, but in its time and place it was goddamn indispensable. 
Is reading other people’s dynamic code the parallel here?
Absolutely agree. However the view layer is still tricky and in a lot of ways moving that to the client can still be kinda messy
Very useful read. Thanks. 
Yes the question comes from the book "Eloquent Javascript." It is just part of the question. I used the variables from the book. Thanks a lot for your help. Yes I can see it now: cowLength = '0' \+ cowlength; so: 0 \+ 7 = 07 0 \+ 07 = 007 et cetera 
Good recommendations. I didn't know about import cost. It looks quite useful. 
It's definitely faster to write the code for dynamic languages, but the biggest challenge with coding isn't writing the code: it's reading it. It's coming back to the code in a month, a year, 5 years, and still being able to know exactly what it does. It's having other developers in your organization be able to pick up your code and immediately understand exactly what is going on. That is where static typing becomes hugely valuable. My only problem with TypeScript so far has been clashes with some VanillaJS libraries. A great example is Vuex, I tried implementing a Vuex store in TypeScript, and by the end of the process I just wanted to shoot myself. It's doable, but it is incredibly more complex because the object literal approach for building a Vuex store isn't immediately easy to map to TypeScript types. tl;dr - static typing is more readable and more maintainable, however TypeScript doesn't always drop in nicely with all existing JavaScript codebases.
I think we can agree to disagree.
I haven't worked with React yet, although I probably will in the near future. It's the only major framework I haven't tried. Even though looking at JSX code just makes me cringe, I've heard good enough stuff from people who use it to want to give it a try.
I used to be you. Ts is like a zombie and I got bit a few months ago after posting here
The code belongs to /u/e-oj so he'll probably know more about it but try/catch is required with async/await in ES6. The rest of it seems like style choices. A single function for both filters could get pretty long.
If people don't bother to add documentation to their JS, what makes you think switching to Typescript will change that? it's all optional after all...
I would put your constants as exports export const MY_CONST = 5; Then when you need it you can just import that constant with import { MY_CONST } from 'path/to/file.js';
If that button hits 10.000.000 I'll upvote this post.
You are right! This is purely personal preference. I've done production work with React and \*insert\-react\-framework\-here\*, and I vastly prefer Vue.
Code sample please
The key to good sarcasm is to not lay it on so thick. 
Use most of these extensions but Gitlens looks good. I would also like to add [Code Outline](https://marketplace.visualstudio.com/items?itemName=patrys.vscode-code-outline) which is great if you come from IDEs like Aptana/Netbeans.
Well this is just based from my personal experience. 3 years working with react and didn't feel the love for it. 2 days trying Vue and immediately fell in love with it! Another thing was, 9 out of 10 developers that I know that came from react \(or angular\) and tried Vue, they never looked back.
The goal is to add the number `b` to the number `a` one digit at a time. When `b === 0` you are supposed to return `a` because there are no more digits in `b` to add to `a`.
It not only accounts to '__proto__' but also to all Object.prototype methods.
In short - sanitise ALL user input! NEVER do lazy checks! NEVER!
You forgot the ones who spout bullshit based on their tiny worldview.
Typing is way easier to enforce than documentation. Typing also provides direct benefit to developers with things like refactoring and autocomplete and parameter insight. The benefits of typing are felt much more quickly than comments.
You can also fix this issue by creating objects using `Object.create(null)`. That generates an object without a parent (it doesn't extend Object.prototype), and more or less without any of the default behaviours. It can't even be stringified unless you add a toString explicitly.
&gt;It's definitely faster to write the code for dynamic languages Evidence?
From PHP to JavaScript. Way to modernize, eh?
Your mom.
What are you trying to zoom in on? Is this for mobiles or desktops?
It does look weird at first. But I've come to prefer it over the logic-in-html approach of Vue or Angular. I think JSX flows better with the JavaScript around it.
More info, please?
`JSON.parse(JSON.stringify(what_is_this_thing_even_anymore_I_cant));`
The mixin allows me to add functions to underscore so I added a method overload for isEmpty to check more indepth within an object to see if it's actually empty
Just my opinion. I'm a strong pro-static typing guy btw, but that's just been my experience with them.
For the most part, the things that improve performance for your app are going to be the same things that improve performance in a regular browser - and there's lots of ways to do that, I would start by measuring the things you think are slow in the Timeline tool. That being said, there are a few things that help in Electron: * Reduce the number of modules that you load on startup as much as possible. This has a pretty big impact on startup time, especially for people using a mechanical hard drive as opposed to an SSD. * Avoid the `remote` module at all costs. Anytime you use that, you're sending at least one (sometimes more) synchronous IPC messages to the main process, which takes at least a few milliseconds. For your app, you could instead send an async IPC message to the main process, and then have a listener in the main process that calls the actual function.
I don't like logic in HTML, but I tend to write it with just bindings in the HTML. So even if it's a short JS expression, I'll still just bind the HTML to something in my Vue instance rather than put it in the template. Seems cleaner that way. Anyway, at some point I'll give react a try and then see what I think then.
It really depends what you mean by "faster". Faster to physically type out the code, or faster to arrive at something that works correctly? For the latter case, statically typed code has fewer defects on average.
return 1: addIt(2, 3) // 2 * addIt(2, 2) addIt(2, 2) // 2 * addIt(2, 1) addIt(x, 1) // 1 addIt(2, 3) == 2 * ( 2 * ( 2 * 1 ) ) // 8 return 0: addIt(x, 1) // 0 addIt(2, 3) == 2 * ( 2 * ( 2 * 0 ) ) // 0 Addition instead of multiplication, return 0: addIt(2, 3) // 2 + addIt(2, 2) addIt(2, 2) // 2 + addIt(2, 1) addIt(x, 1) // 0 addIt(2, 3) == 2 + ( 2 + ( 2 + 0 ) ) What part are you confused about?
It looks pretty....
[removed]
After a year of experience with react, I find most of that gobbledygoolk in the render method is the result of doing too much in the component. Make your component as small and dumb as possible, and give it whatever it needs as a prop dependancy. Do your side effects like network requests, in actioncreators. Use a container module to map your state and dispatch actions to your dumb component. This is also where you do any data wrangling that you need. Basically all the glue goes here. Now you can test each part separately with ease, and the code is much simpler.
Generally, I'd start by creating the REST API and configure a front end to work with it. Then you set groundwork for the front- and back-ends to communicate. Only then do I start to think about UI/UX. Here's an example with many more like it here: https://www.turbo360.co/tutorial/dog-sitting-website
Enforcing JS docs in linting is trivial and I would highly encourage it in JS *or* TS.
That helps explain the return 0 part.... but I'm confused because of the function? 2 \* addIt\(2, 2\) = ? How can the function be a number? I just see: addIt\(2, 2\); How does addIt\(2, 3\) become 3?
Reactive data, great docs, easier to adopt, official router, and official reactive store. Vue is not perfect, but those are the main reasons IMO why someone would chose it over React.
Just use import * as constants from './constants.js'; if you want to avoid polluting the scope with all the imported constants.
... until, of course, you have a user with username `hasOwnProperty` :)
 addIt(a, b-1) decrements B each time the function calls itself until it reaches b === 0
please take a look at my work in progress: https://codepen.io/mejingjard/pen/pVPmmb/ try clicking on the books that are at the edge of the screen you will see the screen navigating to them and zooming
It doesn't. `addIt(a = 2, b= 3)` recursively calls `addIt(a = 2, b = 2)` because b != 0. It'd be better if we could draw the call stack, as things pass down the list to the base case, then back up again.
I have difficulty with this as well. I currently set transform:scale, adjusting the scroll position, and changing the width &amp; height to zoom in on the correct position. There's a bit of calculation involved for that to work well. It works, but the disadvantage is that zooming is difficult to get smooth as the combination of these properties do not play well with a transition or animation.
Well, the trick is to never stop drinking.
This is a great time to upgrade to using Map! 
yeah it is D: I wonder if on mobile native they have a better way to do that
You should use `new Map()` for this. Then use its get method to read all values safely.
in other languages this is good advice but javascript doesn't have real constants. js constants are mutable. if you're using node, the .env module is handy.
Yep. One server to serve front end, another for the API. The way I’ve always done it. Though server side rendering would remove the need for all the Ajax calls and etc, which can sometimes be a headache. 
I heard that if you don't get recursive stuff right away, you'll never get it... Rascal said: The goal is to add the umber b to the number a one digit at a time... but I don't see or understand that? I don't see anything being added together? I guess where I am lost is when addIt\(2, 3\-1\) is returned \(so the first return, what is that? I just see addIt\(2, 2\). I don't see 2 or 2\+2 or 2\*2. I just see \(2, 2\). Maybe it is doing something to make it a 2? 
jQuery is significantly less painful than what came before it, but still a pain as the primary library in an app of significant size.
Ah I see now, you're missing the `-1` on the `a` variable and you're not supposed to be adding a with the returned addition, just returning `addIt` itself. function addIt(a, b){ if(b === 0){ return a; }else { return addIt(a + 1, b-1); } } Tracking the variable values looks like this for `addIt(2, 3)` a, b = 2, 3 a, b = 3, 2 a, b = 4, 1 a, b = 5, 0 ***** Don't beat yourself up, I also sometimes struggle with recursion, helps to un-wrap it by following it with a debugger or something. 
&gt; You can also fix this issue by creating objects using Object.create(null). Just use [maps](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map).
I made that move after 1.5 years
I'm not near any of my doodles right now. But just picture something like a UML diagram but I usually will sketch the layouts of the forms/pages that the user will use.
JavaScript is not compiled, so yeah you can do it faster. Maybe not much faster, but faster.
It’s a never ending cycle. Green screens = server, Client Server windows app = client, ASP.net and PHP = server, Angular / React = client, Better internet and 5G will shift it back to server again only a matter of time.
Primitives are effectively "traditional" constants when declared as `const`.
Apparently the extension had a pretty bad memory leak at some point. Not sure if its resolved or not
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://www.w3schools.com/cssref/css_units.asp) - Previous text "ems" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
Good advice
Exactly this - the context here is that you're running a node server, and all supported versions of node have full support for Map, so still using object as a dictionary/hashmap kind of data structure is great to avoid for exactly the kind of reasons this article references. https://kangax.github.io/compat-table/es6/#test-Map https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
That's true, but there's still significant value and security in using it. Once your zero day is reported for example it will be added to their registry and will be caught. Meanwhile, you should be using lock files that keep you on known safe versions anyway. So long as you aren't struck with latest versionitis or prone to installing unpopular packages without reviewing them those two factors and disabling install scripts are very effective at protecting from dependencies.
If we were free to toss out backwards compatibility it would be nice to turn all of the builtin properties on the Object prototype into symbols so objects would be "clean" by defaulting
at least have the decency to pretty-print it... or say what you're hoping it'll do... or translate some of the strings to English for context
I think there's either a syntax error or something that was used and no longer works because of browser updates. The script is supposed to allow the user to set a time when he wants a button to be pressed, and it has to be quite exact (can not miss by more than 10-20ms, and it uses internet time, which has to be syncronized). This is the core function that it has to have, the rest is pretty much just allowing the user to select the time directly on the page where the script is run. Sorry for not providing that much insight, but the code is not written by me, I`m just interested in using it.
https://youtu.be/fP7NkXh7HbA
why react over angular or vue? (not biased, just curious)
pardon my ignorance, what's the advantage over a standard sql db? 
but all your assets are dumped in the same directories, like, i thought the whole point of spa architecture was to make sub domain/directories more modular?
On mobile they are zooming the rendering engine itself, not the page’s data.
`'use really strict this time' ;`
Assuming contactInfo and education are objects, you can return them like this and they will have their respective name at least in current browsers. function createApp(contactInfo, education) { if (typeof contactInfo === ‘object’ &amp;&amp; typeof education === ‘object’) return { contactInfo, education }; } createApp({name: ‘foo’, hometown: ‘bar’}, {degrees: [‘computer science’]}); // or w/e (Replace my quotes, typed it out on phone so they’re not clean)
do you have any examples of that working? I don't think this way I can focus the zoom on a specific item of the grid
Since you want to do something that's highly position specific, and do animations between arbitrary scales and transforms, you probably need to bite the bullet and learn how to construct the pan and zoom matrix functions yourself, then it's just a matter of animating between two different matrix3d values. https://franklinta.com/2014/09/08/computing-css-matrix3d-transforms/ You may get better results by animating the scale and positioning values separately first, then combining them into a matrix each frame. Also consider doing your scaling transform origin from the current mouse position, not the element's position. That's what's zooming in mobile: where your fingers are.
Why don't you just post your question here?
man thanks a million for this answer!!! that sounds extremely good! I'll study that, also a great tip to have transform origin from the current mouse position, that's a big trick to avoid losing the origin because when scaling the element's position will change
Thanks for your help! There actually are more questions before #10, so I have created few variables and I have to use them. I have edited my post by adding them. Could you take a look??
The recursion section blew all our minds at work haha 
There's no methods to manipulate the OS/browser's native zoom functionality. (Desktop browsers can zoom with Ctrl+Scroll.) You're going to have to adjust scroll position to center the desired element. [Here is a website I made](https://cs.foothillstemclubs.org/) that scales to the browser window using my method. Every element on the page is sized in ems, and I [adjust the font size on the &lt;body&gt; element](https://github.com/FoothillCSClub/FoothillCSClub.github.io/blob/03ac9c797702f14a6eda745cdb2b4cf43e7258b1/breakout.js#L88) whenever the viewport size is changed.
Might want to do some validation.... some of your data looks suspect....
My big 4: 1) Live server 2) Bracket Pair Colorizer 3) ES6 code snippets 4) Live Sass compiler I haven't found a need for anything else.
I like strongly typed languages with encapsulation. I feel dirty without them but I still love JS
Rryyežhhyrurtc 
[nice try, David.. I'm on to you.](https://hackernoon.com/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5)
[removed]
Much better solution: Use a [Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map)
lol I actually read that article a while back.
[“Did you really name your son `Robert'); DROP TABLE Students;--`?”](https://xkcd.com/327/)
No. SPA = Single Page Application. A SPA friendly framework gives you all the build processes necessary without having to configure the whole thing out of the box. It's literally a create new project and start with what ever application type you want, it works out of the box with vuejs, which is an insanely powerful SPA framework.
I just started learning rust a couple days ago, and this is my first attempt at making something useful. Here's a simple example that generates some data in rust, modifies it in-place in JavaScript, then consumes the modified data back in rust. // rust_example.rs mod js_data; // This function will generate some data to send to JavaScript #[no_mangle] pub fn generate_bytes() -&gt; *mut js_data::TypedArrayData { let data: Vec&lt;u8&gt; = vec![1, 2, 3]; js_data::TypedArrayData::new(data) } // JavaScript can modify our data, then call this function with the pointer. // It just checks if we've changed the vector data to [4, 5, 6]. #[no_mangle] pub fn consume_bytes(ptr: *mut js_data::TypedArrayData) -&gt; bool { let data: Vec&lt;u8&gt; = js_data::TypedArrayData::to_vec(ptr); (data[0] == 4 &amp;&amp; data[1] == 5 &amp;&amp; data[2] == 6) } &amp;nbsp; // ts_example.ts import { pointerToTypedArray } from 'helper.ts'; WebAssembly.instantiateStreaming(fetch('./rust.wasm')).then(obj =&gt; { const { memory, generate_bytes, consume_bytes } = obj.instance.exports; const bytePointer = generate_bytes(); const bytes = pointerToTypedArray(bytePointer, memory.buffer); console.log(bytes); // [1, 2, 3] bytes.set([4, 5, 6]); console.log(consume_bytes(bytePointer)); // true }); To get it running, you basically just have to compile `rust_example.rs` using the [wasm32-unknown-unknown](https://www.hellorust.com/news/native-wasm-target.html) target. I can set up a complete repo using my current build setupt if there's any interest.
I'm aware. putting the logic in the page rather than the server allows to to built multiple "sites" from only a few directories or subdomain. or is this not common knowledge?
Mostly based on the amount of resources available, what I and the other dev have prior experience with and personal preference
Feel free to install these Node core modules! * [https://www.npmjs.com/package/os](https://www.npmjs.com/package/os) and * [https://www.npmjs.com/package/vm](https://www.npmjs.com/package/vm) Hmm wait a second... those aren't [OS](https://nodejs.org/dist/latest-v10.x/docs/api/os.html) and [VM](https://nodejs.org/dist/latest-v10.x/docs/api/vm.html). NPM won't do anything about them.
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://nodejs.org/dist/latest-v10.x/docs/api/os.html) - Previous text "OS" [Here is link number 2](https://nodejs.org/dist/latest-v10.x/docs/api/vm.html) - Previous text "VM" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
I'm getting confused here. You've set this multiple times now, subdomain/directories. Laravel uses something called a router, and that normally lives in the public folder as public/index.php, nginx/apache will point to this specific file, and pass all paths to it, if they exist on server they serve data, if not, they are referenced via the defined routes. An SPA Framework also has it's own router and it will check to see if these routes exist as well. Subdomains / directories have nothing to do with this. technically, www.domain.com is a subdomain of domain.com, but it's very common, but it holds no significance as far as I can tell. Building SPA is often just the app.domain.com, which may point to a set of server-side routes as `app.domain.com/api/&lt;path-name-here&gt;` and any other route, will usually be handled by a wildcard route such as `GET /{all}` defined after all the `/api/*` routes, then they always point to the SPA index which then activates the SPA router, and that brings you to the correct page. But the SPA deals with all the logic of the routes.
While C# has NuGet, which does pull in dependencies (and their dependencies), it typically only requires trusting maybe 20 packages, tops, and usually they’re by large names with a serious interest regarding protecting their own credibility. I find out of all platforms, I rely on third-party dependencies the least with .NET. And honestly, it’s a testament to how solid their standard library is. Node could use better, but to some degree I suspect it’s a consequence of the language itself, and how varied it can be in how developers use it, on top of some just generally bad language design (most notably, it’s type system). 
I think this is mostly because of trend, and somehow the PM said, lets move to that, seems popular, can't go wrong with the new trendy popular stack. Having to do this is absolutely not required. I think if you're going to build a real-time application though, I do think that nodejs has some more streamlined workflows for realtime, but you can do them just as competently with php. Laravel has a framework called echo which works with socket.io.
I think you can not get it at first and still eventually get it. Just break down the steps. So your first call is `addIt(2, 3)`. Because `b` isn't `0`, it returns `2 * addIt(2, 2)`. That second call is `addIt(2, 2)`. Your `b` still isn't `0`, so it returns `2 * addIt(2, 1)`. Third call, and `b` still isn't `0`, so it returns `2 * addIt(2, 0)`. Fourth call, and `b` is finally `0`, so it returns `1`. At this point the recursion has ended, and the functions will start returning with the values they received from the inner calls to `addIt`. That third call is now returning `2 * 1`, which is `2`. The second call is now returning `2 * 2`, which is `4`. And the first call is finally returning `2 * 4`, which is the `8`, the value you're getting on your console log. Maybe [this pen](https://codepen.io/anon/pen/odGXGz?editors=0012) with the calls logged just before returning will help it make sense?
The spec says that they're arrays. What it's supposed to do is something like this (which seems really dumb to me, but whatever, it's not a real-world problem): ``` const createApp = (contactInfo, education) =&gt; ({ fullName: contactInfo[0], github: contactInfo[1], email: contactInfo[2], linkedIn: contactInfo[3], phone: contactInfo[4], city: contactInfo[5], campus: contactInfo[6], university: education[0], fieldOfStudy: education[1], yearOfGraduation: education[2] }) ```
[Professor Frisby's Mostly Adequate Guide to Functional Programming](https://github.com/MostlyAdequate/mostly-adequate-guide)
I heard you liked build configurations, so I made some build configurations for your build configurations so you can configure your build while you configure you build. 
It reminds me of pug.
&gt; how can i do so in a json style not java script You can't. The JSON format does not support that. 
It regularly hung VSCode on my machine. It was so bad I had to disable it completely.
Thank you :)
well this can be a great solution !! Thanks for sharing. 
Projects on that scale have their own repos with better control over dependencies. 
Anytime you see parentheses, that's a clue that function execution is happening. So it's not the function being added, but the return value of that function. E.g. 2 + alwaysReturnsThree(); // -&gt; 5
Symbols live in their own namespace separate from regular strings and string must be explicitly symbolicated, so you can't have unwitting conflict between user input (strings) and symbols. And objects can be keyed with both stings and symbols. 
Basically, you can only access a property with a Symbol key if you have the corresponding Symbol object. You can't access a property with a Symbol key with `someObject.someProperty` or `someObject['some property']` notation. You can only access it with `someObject[someSymbol]`, where `someSymbol` is a variable containing the appropriate Symbol object. Certain Symbols are called "well-known symbols" and are available as static members of the global `Symbol` object. These are mostly used to poke and prod at the internals of JavaScript and change how things work. For example, `someObject[Symbol.iterator]` references the iterator that would be used to iterate over its keys in a `for... in...` loop; `someObject[Symbol.toPrimitive]` is the function that is used to convert that object to a primitive value when required. /u/GameFreak4321 is saying that they'd prefer if the properties on `Object` had well-known symbol keys instead of string keys. So instead of Object.keys(someObject).map(...) You'd use Object[Symbol.keys](someObject).map(...) 
You have logic in your html with Vue, i mean literally. Without it you wouldn't have dynamic components. The view and its presentational logic are one, and should be one. React just doesn't create artificial separations there. Why would you want to write presentational code in a limited pseudo language when you have javascript? Why would you want to rip your template from scope just to inject everything back into with dependency injection? Why would you want to register components to re-use them instead of simply using them? You see, these are problems we've been fighting with ever since knockout and angular were around. React solved these problems, which is why it is where it is today.
Sorry, I should have been clear. I'm not using Node, so while this looks cool, I don't think it will do. Thank you
\({}\).hasOwnProperty\('hasOwnProperty'\) // false
the same with will be more productive...
Also, to enforce usage of your constants across the application you can use [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) This ensures all usages have to compare against your exported constant, and can't use the value itself. This obviously doesn't work for data based constants.
We use Map and Set in our node code but had to pull back on clients as we received so many errors from IE11 users even with polyfills in place. 
How is this an issue if you use prepared statements?
How about Object.prototype.hasOwnProperty.call(users, username); 
It's been working for me, not sure how long ago you tried.
Honestly it's not a simple as saying Node &gt; PHP . I found Laravel to be far more mature and organized compared to Node + Express and your typical MEAN Stack . On the other hand I think is Node and JS aren't optional languages anymore. Because of things like headless chrome or the npm ecosystem you really need to know Node and JS in general because there is so much stuff that Node can do in 3 lines of codes that other languages can't do or are too verbose like Java. If a customer need a blog or MVC style app honestly I would prefer Laravel / Wordpress etc ... But for anything that is related to API , platforms or advanced back-end in generals , Node all the way.
I might be missing something but why/how are clients running your node code? 
Damn you Bobby Tables
Sorry, by 'client' I mean web apps that run in the browser. The server node apps are fine.
I love TypeScript for work but don’t use it on my personal projects. I like the freeness of JavaScript, but that freeness on a team can be detrimental, so TypeScript helps with that.
100% agree with you about React. That’s the main reason I don’t use it. That, and it was written by Facebook devs, and Facebook’s UI is shit.
Is that momo? 
But `{}.hasOwnProperty('hasOwnProperty')` is `false`.
Interesting idea, but why should people use this library over something like this; const styles = [ 'font-weight: 700; font-size: "12px"; color: "red";', 'font-weight: 300; font-size: "16px"; color: "red";' ]; const styleLetters = (myStr, styles) =&gt;{ return myStr.split('').map((x,i)=&gt;{ return `&lt;span style="${styles[i]}"&gt;${x}&lt;/span&gt;`; }).join(''); }; Sure, it's not got length checking (and so if the string length is not the same length as the length of the styles array, it'll cause an error, but much less code. It does use inline styling, but it also allows you to customise the styles without actually touching the CSS (which has use cases if you're changing things at runtime).
When someone comes to you with a fairly simple idea and you are 95% confident that you sit down and code it without googling "how to do X", you're probably either delusional or intermediate. For example, given the rules to Conway's Game of Life, could you write it in Javascript, including an interface to turn the cells on and off and start and pause the simulation? If not, you're not intermediate. https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life 1. Any live cell with fewer than two live neighbors dies, as if caused by under population. 1. Any live cell with two or three live neighbors lives on to the next generation. 1. Any live cell with more than three live neighbors dies, as if by overpopulation. 1. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.
If you have a user called 'hasOwnProperty' then you'll have something like const users = { 'hasOwnProperty': { /* userData */ } }; users.hasOwnProperty('hasOwnProperty'); // TypeError: users.hasOwnProperty is not a function
Thanks for this great explanation! O don't think I am an intermediate yet :D
Don't worry about classifying yourself as a beginner or intermediate, you will always have things to learn, we never stop learning. Just take your computer and build things while learning 
Honestly you'll know . Learning a language is not just about "loops" , "variable declaration" , and syntax it's much deeper than that. If you are able to differentiate the different JS Ecosystem and how they work ( Node , Browser , Common, ES6 VS ES5 ) , create your own simple frameworks rather than relying on npm you probably have reached a pretty decent level in javascript. Also being familiar with concept like Polyfill etc.. is a sign of experience in my opinion. Has pointed by others , if you are able to build an application without googling "How to make [insert application type]" and design the architecture in your mind it means you'll probably have some level of expertise. It's important to keep in mind that "coding" is just a tiny part of being of web developer. Being developer is also about Architecture , Source Control , Collaboration , UI , UX etc..
You're correct. A fat client page pulling from an API does not follow the MVC pattern. You backend is simply just models and controllers. There not really any magic to it. You make a folder called Models and stick your models in it, then you arrange your controllers in any way you feel is best.
Don't forgot to extract common tasks into Services that can be used in various controllers too. 
You have to write a html page and include your script. You can use dropdown input and gez. the value of this with your js. Just look take a look at w3 schools it will help you a lot 
Perfect, thank you!
One more question if you don't mind: in this [example](https://github.com/expressjs/express/tree/master/examples/mvc) there is no folder for 'Model'. I would expect to find db.js in there or anything related to the database. Any reason db.js is located at the root?
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [expressjs/express/.../**mvc** (master → 3ed5090)](https://github.com/expressjs/express/tree/3ed5090ca91f6a387e66370d57ead94d886275e1/examples/mvc) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dyhj8ok.)
It's not connecting to a DB, it is the DB.
Ask N developers and you will find N+1 versions of "MVC". This three-letter acronym tells you very little about how a system is (or should be) built. Just as an example, here are some questions I've seen different answers to from people who were all claiming to be doing "MVC": * Do the views know about the controllers, or vice-versa (or neither, or both)? * Does the view observe the model and update itself, or does the controller act as a go-between? * Does the view have any state of its own? Some might say that there is one true "MVC", and that other flavors should be called "MVP", "MVVM", or something else. They are missing the point. The *important* part is *the goal* - the separation of data from presentation, to facilitate reuse and testability. Your frontend will probably have models. That's what "state" and "props" in React are. The structure returned by your API is the caller's "view" of the actual data, but I'm not sure if I'd call it a view in the MVC sense.
I dont know if its this but try x. onclick = () =&gt; alert("asdf") ;
Where did you put that code? Put it below all html but above &lt;/body&gt; and test again.
Thanks for the reply, I’m getting closer. x.onclick = () =&gt; alert("test"); } The console reads: *unexpected token ‘}’*
I wrote a NPM package called billygoat. [billygoat](https://www.npmjs.com/package/billygoat) While working on an app using Google Cloud Firestore, I tried to find something similar to mongoose to help structure the database. I couldn't find anything, so I rolled my own. 
[removed]
The code was in a separate JS document. After moving it into the HTML document and placing it into &lt;script&gt; the console reads: *TypeError: null is not an object (evaluating 'x.onclick = () =&gt; alert("test")')* And when the button is clicked it reads: *unexpected ‘}’*
you have a trailing `}`. it should be: x.onclick = () =&gt; alert('test');
Would you mind showing everything via some site like jsfiddle.net?
Strange, I removed the trailing ‘}’ and tried again but it still read out the same Syntax error. I proceeded to remove all curly braces and still received the same issue. This is one phantom curly brace 
Hold up, I deleted my past reply about the phantom curly brace. I located one just chilling right in the middle of the code for some reason
 x.onclick = alert("test"); is assigning the return value of `alert()` to `x.onclick` what you're trying to do (it won't work) is: x.onclick = alert; this will assign `x.onclick` the function `alert`. but that won't work because click handlers pass in `Events`, so on click would call `alert(clickEvent)` and it would say something like `[object Object]` what you want to do is a create a function that gets called on click that calls `alert("test");` x.onclick = function() { alert("test"); }; 
 &lt;form class="example"&gt; &lt;input name="sel5" type="button" value="Button" /&gt; &lt;/form&gt; &lt;script&gt; window.onload = function() { var x = document.getElementsByClassName("example"); x.onclick = () =&gt; alert("test"); } &lt;/script&gt; *No more Syntax errors, just nothing seems to happen when the button is clicked.*
System software packages don't typically have hundreds of obscure dependencies, and their inclusion is preceded by a vetting process.
The blog post makes it appear that it is very easy to build insecure code.
It was “Heartbleed”, not “Bleeding Heart”.
var obj = bjdocument.getElementById("htmlElementId"). This will get an HTML element by it's id, &lt;input type="text" id="myid" value="some text" /&gt;. It gets the element as an object and depending on the HTML element use obj.value, obj.innerHtml, or obj.text set get or set the string. You can use a buttons onclick event as a trigger. 
I like this one too https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow
W3 is where it all started for me 8 years ago. 
I ended up using: https://webpack.js.org/configuration/watch/
W3 schools should be avoided at all cost
Who is sindresorhus?
That's good, but IMO a much better practice would be to use a `Map` object, or `Object.create(null)`, just to make _sure_ that your code behaves consistently regardless of any username. Plus it would look better.
In {"a": 1, "a": 2} when any runtime parse that JSON String back to an object will **always** see only ONE "a". Duplicate keys are overriden. Depending on the runtime and how it guarantees or not data iteration ordering, if you pick value of a, you'll only get 2 as value. 1 won't be seen.
I use SailsJs, which is mvc. You could also use an Orm like knex tied with ejs.
Yep. I keep mine in a folder called “helpers”
Well done!
Not any more, I have been a professional web developer almost 19 years now, and am finding lots of good stuff on there lately
To be fair it’s been a long time since I’ve been in there... 17 years in the game now so not really needed it! Glad to hear they’ve improved it though
Mozilla Developer Network has all the info you'll need, and is far far more up to date than W3 School. Do not use W3 School for anything. What you will be doing is making a small html file and injecting your JS into it. Your JS will be using some native (premade) functions to show off what you want. The `document` API is what does this and JS has access to it when running in an HTML document. Go look it up on MDN and have some fun. And if any HTML trips you up, MDN has all that written up as well! Feel free to PM me if you get stuck, or are not sure where to look. Sorry for no links, I'm on mobile.
That's the joke...
Beware of numeric variables beginning with 0, they can be treated as octal (base 8), this was one of the first serious bugs I ever had to address, in an HTML/Javascript grid about 17-18 years ago, before we had the debugging tools we have today. Luckily I had a copy of Flanagan's "Javascript: The Definitive Guide" which was the only decent book on Javascript at the time. Back to my point though, see this page, what I'm warning you about is documented here -- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Numbers_and_dates: "Note that decimal literals can start with a zero (0) followed by another decimal digit, but if every digit after the leading 0 is smaller than 8, the number gets parsed as an octal number."
Trust me, there's stuff on there you don't necessarily know, it covers various frameworks and stuff now, and how can we be versed in all of them?
JSON isn't a programming language. It stands for "JavaScript Object Notation". It's just a data format like yaml or xml
How do you expect to hold a job if you're not willing to learn the simple operations of a language?
Backend MVC has nothing to do with your frontend mvvm framework, they are two things.
You don't want an MVC application. You want a RESTful api that you react act can communicate with.
I think you are missing some of the points about interactive web applications. Would you also say that apps are redundant? I'll try to summarize my thoughts on some of your other points here: 1\) There's 4 different supersets, and yes, they have each of their pros and cons. Just like frameworks. Use them if you want, don't if you don't want to. TypeScript seems to be dominant, but that's really only adding types to JavaScript. Calling it a dialect seems disingenious. Trying to flame JavaScript for having something like TypeScript is ridiculous. 2\) Correct, packages does depend on others which depends on others again. While this does pose a problem in terms of what breaks if something gets pulled back, it's a problem with npm, not JavaScript. Don't conflate the two if you only want to criticize one. 3\) Do you know whether or not your \(pre\-compiled\) libraries for C# / Java / C / PHP / has any malicious code? Do you read through every source file? No? Well then you have the same problem, except you're disillusioned about not having it, which to me seems more scary. It's not unique to JavaScript and comes down to dependency management, which is in itself a difficult problem, as it's typically a trade\-off. 4\) What? I don't understand what you are saying. JavaScript existed since 1995 and JSON is a data format specifically created for JavaScript that is suited very well for it since XML and other such data formats were obtusely verbose, leading to a ridiculous file size when making requests. Dragging IPO and other things into this is just laughable. 5\) State will almost always be what breaks your application. Your point about validation is fine, but you don't NEED to have validation in your client side application, that's really more of a help to the user. You could just throw whatever error when your server side validation fails. If not, then what you're criticizing is actually helpful to your user experience, and that seems a little weird that you would be criticizing that. Look at GraphQL. It does some of what you are asking. 6\) We don't **NEED** anything. What do you mean with Native development? React Native? Nativescript? Electron? Node.js with native dependencies? It's unclear. And again, this sounds like you're not doing proper dependency management, which, as I pointed out earlier,** I**S difficult.
You need to use [JavaScript DOM](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction) for doing this.
A dangerous simplification of props.... 
___________________ don't typically have hundreds of obscure dependencies, and their inclusion is preceded by a vetting process. Fill in the blank with whatever you want... perhaps "Well established Node dependencies." This is an arbitrary goalpost. Anyone can PR into the kernel. Anyone can PR into just about anything. That's the nature of OSS. It doesn't matter if it's node, PHP, C, Python, Ruby or whatever. The code is only as good as the vetting and auditing.
If your front end is going to be a React app (served as bundled static content files), you should use your node.js server to expose REST endpoints which can be called client-side by your React code. If you introduce an additional view layer beneath React you'll only be overcomplicating things. TLDR; rather than thinking MVC, think server side model+api and client side controller/view.
Well I'm against having an object with all the users in memory, I think you should load from the db everytime. But if you're really need it there's always `Map` or `users = Object.assign(Object.create(null), users);`. The article's solution is just as abusable
That's nice, but I've noticed that in my sass editor, code blocks are automatically highlighted. It's super helpful, but I don't know where it's coming from. I wish I could get it to apply to my js and html files. 
You are very clearly misunderstanding both the question and JavaScript, and it feels like you're doing it somewhat intentionally. There's also Object.freeze.
Been fleshing this approach out for about three years now. MVC can mean different things depending on the context. For me, Node mvc is... Model: guidance on where to access polo (database info, structure, how it relates to other models) View: how to represent the models requested. Do we turn that pojo into json or XML? Controller: ok, so this is where the magic happens. How do I link together different models. How do I call to the database(s). How do I manage security. This is all handled there. Any logic shared across controllers become services. Usually I have a factory to interact with models that spins up routes for a controller. 
Thanks for the question, I'm very exited about this technology and I convinced my team lead to use it in current app. So graphql is a protocol you use to communicate with your server, much like REST, but intended to alleviate some of the shortcoming (like overfetching and round trips )of REST, wich was invented in different time. Its very powerful in a way that gives client applications much more power the then what you would typically have when using REST, is performant, self documenting and network efficient. REST `api/user/3` -&gt; you get user info back but now you need to know its posts `api/posts/USERID` -&gt; Finally you get posts of the user id 3. Graphql `api/graphql` This is what is the request might look like, its string that you are sending to the server, that's why we are saying graphql is stack agnostic. ``` { user(id: 3) { name posts { name } } } ``` This translates: Hey server, give me information about **user id 3**, only name and his posts, in posts give me only name of the post. You are very 'precise' or declarative of what you need to create that one specific interface in one go.
I mentioned Java once in the entire post.
I'm inclined to say it's actually the opposite (a gross simplification of the model concept), but maybe you could elaborate?
No, you called Java*script* "Java" three times in your first "point."
Had that too 
I have built some incredible things with Node and JavaScript. At no point did I ever want dependency injection. 
JSON encode it on the server, then JSON.parse in Javascript.
Just like most of the GoF design patterns, DI solves a problem that basically goes away when you don’t use cumbersome statically typed languages. There’s a reason why these are popular in .net and java, but almost unheard of in JavaScript. Angular had a super low learning curve, but DI was the only piece people never really understood and mostly hated. Work with the grain of the wood, not against it. 
The example you gave is fine, I'm more worried about things like `foo[Symbol.proto]` or `foo[Symbol.toString]` And I'm not sure if I think that I would like it better as much as it thinking that if symbols were a thing from the start it would have been wiser to segregate things like that to avoid the class of bugs described above.
I had to move to some kind of dependency injection to resolve some circular dependencies. If not DI what patterns do you use to resolve circular dependencies?
I had to move to DI to resolve circular dependencies. If not DI, what patterns do you use to resolve those?
&gt; I'm conveying that the claimed type system and object oriented nature of Typescript is trying to sell you the features of Java Oh, I see. That's not what TS is actually about, but you're of course welcome to believe that. If you don't believe that the typing features TS brings to JS are worthwhile, you're free not to use it. Plenty of people do find those features, and all the others, quite useful indeed. 
sadly this is a project for the university and they specified we should encode in base 64 on the server. 
Well then you have your answer: base64 decode it.
Almost, the last part of the spec says "Make their property names the same as their variable names" { ...contactInfo, ...educationInfo } \(This syntax works with objects or arrays as inputs\)
Yeah. I guess what bugs me is JSON more than anything. I constantly have to write hacks because our NoSql data is nested, so sometimes I try to access items in JSON objects that aren't there. I'd honestly guess a solid 70% of the bugs that occurred in production were issues like this, because we were making assumptions on the production data that wasn't true, and we couldn't access production data because of security reasons. There are good ways to protect against it, but they end up resorting in a lot of boilerplate. I would like a type system to understand JSON as a monad, like in Haskell, where the boilerplate is hidden and "nice" things happen if you access a property of an undefined object, but so far I haven't seen that in TypeScript.
Oh, so the responseText does not contain converted data ? It will just contain a string of zeros and ones. Sorry for the inconveniance, I didn't think it was that way thank you for clarifying !
responseText should be whatever you output from the server. Try it and see and I think you'll be fine.
Have you used sails 1.0? How is it?
This seems like a fun library. What's the intended goal for this lib? To make playful text or solve some pain point? 
&gt; This is an arbitrary goalpost. ... and one side of it is better vetted than the other. Agreed or not? I find it completely irrelevant that it is arbitrary if one thing leads to good, working software, and another leads to the absolutely trite, awfully maintained transient dependencies that end up in any node project that only explicitly pull in a few popular modules. &gt; Anyone can PR into the kernel. The kernel isn't accepting pull requests. You send in a patch to the mailing list, and it discussed publicly for everyone involved in kernel development to see. The people that yay/nay the patch have been given that responsibility because of their experience and expertise, not because they were the first to create a Github repo with a fitting name. Ultimately there's *one* guy that can veto everything, a person that has consistently shown a deep interest in the quality of the kernel to the point that he'll berate people for submitting bad patches. &gt; That's the nature of OSS. It doesn't matter if it's node, PHP, C, Python, Ruby or whatever. So you don't acknowledge that there is a difference between having code reviewed by known experts centrally and downloading 1500 pieces of software that are maintained by random github users that figured out how to use `npm --publish`? You're absolutely right that it has nothing to do with the language. It's all about attitude and culture. &gt; That said, the Linux Kernel does have hundreds of dependencies, they just don't look like the thing that matches your arbitrary goalposts. What are these hidden dependencies? You mean each openly reviewed line of code that goes into it, or the development dependencies? Yes, you need a bunch of tools to build an incredibly complex piece of software. Webapps are not that. Throwaway web services are not that. Compare with something similarly complex instead.
Made this with the help of /wdg/ over at 4chan. A batch image downloader for any thread, to be run with Node. First time using Node for something so forgive me if my language seems wrong here ;). `npm install 'node-fetch'` and then `node &lt;filename&gt;.js`. const fs = require('fs'); const fetch = require('node-fetch'); const http = require('http'); const readline = require('readline'); const rl = readline.createInterface({ input: process.stdin, output: process.stdout }); const writeToFile = async (board, tim, ext) =&gt; { fetch('https://i.4cdn.org/'+board+'/'+tim+ext, { timeout: 3000 }) .then(res =&gt; { console.log('&gt;&gt; Downloading '+tim+ext) const dest = fs.createWriteStream('./'+tim+ext); res.body.pipe(dest); }) .catch(err =&gt; console.log(err)) } rl.question('What board? ', (board) =&gt; { rl.question('What thread number? ', (thread) =&gt; { fetch('https://a.4cdn.org/'+board+'/thread/'+thread+'.json') .then(res =&gt; res.json()).then(body =&gt; { body.posts.forEach(function(item) { if (item.tim !== undefined) { writeToFile(board, item.tim, item.ext); }; }); rl.close(); }).catch(() =&gt; { console.log('Invalid board / thread input.'); rl.close()}); }); });
That doesn't really have anything to do with JSON.. that's just Javascript. &gt; I would like a type system to understand JSON as a monad, like in Haskell, where the boilerplate is hidden and "nice" things happen if you access a property of an undefined object It sounds like you like using JS when it lets you do things like automatically create objects out of nothing (the JSON data), without you having to go define the object structure somewhere first (as you would have to do in most languages, including Haskell), but you don't like the price that comes with it -- not knowing until runtime if the property you're trying to access actually exists. You can't really have it both ways though. If you want to get rid of the problems those assumptions caused you, the solution is simple. Don't directly use the JSON data (or any data) as an object. Create an object that has the properties you want, and only those properties, `seal()` it, and then assign values to it that you get from the data. Exactly as you'd do in any other language. This *will* throw a nice error if you try to access a property that doesn't exist.
If I have circular dependency issues I usually take a step back and pull the pieces that are creating a circular dependency out into a separate module. Circular dependencies are most often a code smell indicating something wrong with the way modules are organized. I feel like using DI to solve circular dependency is a hamfisted solution to compensate for poor code structure.
No
Okay so. In in this instance your API endpoints are still going going to have controllers and models. React will handle the views, as well as do some controller type logic (depending on how you roll it put) but this pattern could loosely follow MVC. I don’t have enough experience to comment fully but this is how our Go product is written, and we use vue.js to do the front end stuff. 
&gt; I'm going to stop reading because the whole point of it being arbitrary is that your definition of "good" is going to shift to make your point without acknowledging my definition of "good" which is vetted by lots of eyeballs, tried and true; something most teams can't offer for anything over 1000 lines of code that does a common task that has been solved and audited by thousands of eye balls. Have you ever audited all the dependencies of a Node project you're working on? If not, what makes you think the people you depend on to do that would? This is not a big problem if you have a flat dependency graph, but if you have dependencies with dependencies with dependencies with dependencies you're going to end up with bad software. &gt; Motherfucker, you're not reading my comments, you're projecting. This whole fucking time I've been saying it's about vetting. End of discussion. Yes, you say that it's about vetting and I agree. My point is that the review and vetting process for the kernel is much more sophisticated than any one of your top 1000 favorite node modules. Also, that's not projection. Projection would be if I attributed my beliefs to you. It seems that we fundamentally disagree with each other. &gt; Linux depends on 1500 pieces of software and has been exposed to vulnerabilities because of it. No it doesn't. Yes, there have been vulnerabilities in the kernel, but that is true of any sufficiently complex piece of software, and the Linux kernel, if anything, is tried and true. &gt; I've said, just as a common sense rule of thumb, you don't import the shit that isn't heavily maintained or reviewed, which excludes your fucking strawman of some library uploaded by some random person that published some code. Welp, what am I going to do with all those transient dependencies? My network of trust has to be *huge* for me to depend on software built with hundreds of dependencies hundreds more authors to be good, by what at least superficially looks like the same definition as yours. &gt; THIS IS NOT SOMETHING UNIQUE TO NODE YOU DENSE MOTHERFUCKER. I haven't ever said that it's unique to node. There's plenty of software that's worse than most dependencies in the npm based javascript projects I'm working on. That doesn't mean we end up with absolutely stupid stuff. So far nothing malicious has come up, but plenty of shitty, half broken, buggy software maintained by people that don't respond to github issues or accept pull requests. In a way it's an absolutely amazing testament to the good will of people that you don't end up with worse attacks with the js "ecosystem". I also believe that it can and will be improved, but right now the whole `npm install scratch-butt` is kind of an unprecedented wild west of open source software design. &gt; I'm blocking you. This is a simple case of same shit different dumbass that thinks it's new. So you won't see this, cool.
I upvoted - but there is one thing W3 is pretty good for - SQL queries. Pretty comprehensive.
 var keys = ['fullName', 'email']; // Make an array containing the names of the variables var values = ['John Smith', 'johnsmith@johnsmith.com']; // This is your contactInfo array function createObject(keys, values) { var object = {}; var index = 0; while (index &lt; keys.length) { object[keys[index]] = values[index]; index++; } return object; } createObject(keys, values); This isn't a copy paste answer for the coding challenge but you can plug in variables and names of variables and it will return an object. I think what your missing which is making this confusing to you is the idea of creating two separate additional arrays containing the names of the variables for education and contactInfo. var contactInfoKeys = [ 'firstName', 'lastName', 'fullName', 'github', 'email', 'linkedIn', 'phone', 'city' ]; educationKeys = [ 'city', 'campus', 'year' ];
Depends on the scale of the app and they’re quite open about this - does it really need reduxing? If your components are swelling up massively, then I guess yes. But it is possible to extract your api and and most of you functions to create much cleaner components, without any need for all that redux boilerplate.
[AdonisJS](https://adonisjs.com) is an MVC framework for node which can be used to build restful APIs as well. It's heavily inspired by Laravel (PHP MVC framework). It does not have built-in support for mongodb though, but there are npm packages for it. 
[https://www.google.com/search?q=introduction\+to\+functional\+programming\+in\+javascript&amp;ie=utf\-8&amp;oe=utf\-8&amp;client=firefox\-b\-ab](https://www.google.com/search?q=introduction+to+functional+programming+in+javascript&amp;ie=utf-8&amp;oe=utf-8&amp;client=firefox-b-ab) Might be more efficient to just link to one of the existing posts on this topic. Chances are that someone else wrote the same thing mere days ago.
I guess I meant faster to physically type the code. Especially when generics/type parameters become involved, type declarations can become quite lengthy. I strongly support static typing over dynamic, though, just because it produces more readable and stable code.
how come I dont hear about DI in the JS world? I am only familiar with it from the PHP world.
Take a look at the Date Object for you times instead of e.e.g 0845. As someone mentions ITT that numbers starting with 0 may be interpreted as octal: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date
DI has nothing to do with typing. It's a concept that applies to pretty much any language. Here's a simple JavaScript/HTML example of *not* using DI: // JS file function createWidget() { var parentNode = document.getElementById("widget-container"); // create a whole bunch of stuff under parentNode } &lt;!-- HTML file --&gt; &lt;div id="widget-container"&gt;&lt;/div&gt; ... &lt;script&gt;createWidget();&lt;/script&gt; And here it is using DI. Instead of createWidget finding its dependency (the parent node) itself, we inject it as an argument: // JS file function createWidget(parentNode) { // create a whole bunch of stuff under parentNode } &lt;!-- HTML file --&gt; &lt;div id="widget-container"&gt;&lt;/div&gt; ... &lt;script&gt;createWidget(document.getElementById("widget-container"));&lt;/script&gt; There are a lot of problems with non-DI architecture that will start showing up as things get bigger. When you see a function call or object creation you don't know about all the global state it requires to work, unless you look at its code, and the code of everything it calls, and of everything *they* call, all the way down. You can't do basic things, like trying to move an element from one page to another, without breaking everything because you violated the hidden graph of dependencies that was never made explicit (and because it was never made explicit, it's most likely a horrible rat's nest where everything depends on almost everything else). But if you consistently write in DI style, it'll always be clear what changes you can safely make.
DI is a pattern often ascribed to enterprise-y development. While DI does exist in JS, it is not always fashionable. 
I didn't know JavaScript software design was free of dependencies. Thanks Oracle of Incorrect
I don't get why a lot of beginners make this kind of mistakes. Just remeber that every expression which is not wrapped in a function is **evaluated**. In case of `X = ***` statement, `X` has no idea about what is written on the right hand side. `X` just receives the result value of evaluating the entire right hand side expression.
Okay this all helps but while working on try to understand recursion through this example in the book, I ran into another question outside of recursion.... and that is in your "this pen" the second console.log says this: "addIt\(2, 1\) = 2" but how does addIt\(2, 1\) = 2? Shouldn't the book used an example that said something like: n \* addIt\(n\-1\)? The 2 variables in the addIt function are confusing the s\*\*t out of me.
Dependency injection's usefulness only becomes painfully apparent to LARGE software applications... especially when refactoring, abstracting, and/or writing tests. The place I've used it in Javascript is in an internal JavaScript framework that allows declarative dependency declarations, dynamic service identifier generation, and automatic async module loading. Again, this is in a JS project that is megabytes in size uncompiled. Thousands of files. Millions of lines. I'm not surprised most of the JS community says "what's DI for?". I didn't get the benefit over the upfront cost either when I first started working with it in Java years ago. The benefits were even more subtle in JS but opened up a world that was near impossible previously.
Ok thanks alot
thx
How do you write unit tests without DI?
I used this http://unminify.com/, do you think it's a decent tool?
It looks more obfuscated than minified.
is there a way to deobfuscate?
I deminified it but it still looks pretty much the same, only with more spaces and alignment now. Do you know how I can understand what the numbers mean in the script? It's full of them.
&gt; controllers No because the controllers are meant to be the middle man between the model and the view. I guess with a restful API you just need routes and maybe services . . . . . wait I guess what you call it doesn't matter. 
Agreed. Try to find the unminified version. If you can't, you can always pretty print, then copy pasta into vim, or your IDE, and start refactoring the objects, variables, and constants into useful names. Can be a bit of work, but it will give you a lot of insight, too. 
By hand. Copy pasta into your code editor of choice and start reverse engineering. I usually start by renaming single and two character variables into real world names like apple and book, or even Charlie and Dianne. Those names are easier to think about as having a purpose or job. Then read the code and start renaming those variables with what they do, make comments everywhere, and before long you have code that is readable. 
That might be true to some extent, but far less so with languages that have type inference.
One topic articles about functional programming rarely discuss is how do you organize code in big project. For me it totally make sense to program something like data processing in functional style, but I have no idea how to write "normal" application code using functional programming. Can MVC pattern be implemented using functional programming style and now it can be done. OOP has very clear idea how to define objects with states and state modifiers. I can define object or class `player`, make methods: `player.load(content)`, `player.play()`, `player.pause()`, `player.stop()`, etc. I have no idea how to make it in functional style, I don't understand why state of that object should be immutable, when real player application's states are mutable. What is a basic component in functional programming? Do I define data structure and bunch of methods which can generate new version of the data types? How I keep main scope from polluting it with endless functions which don't belong to any particular object/class/type? I understand that with FP I still can use objects, but than how is it different from OOP? 
but I mean this code only has numbers like x65, x32 etc. how can i even begin to understand what each means? Also there is alot of code this is from an IO game Im trying to get a console command to change value but cant read anything
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
SPA client/server architecture is totally different than server side MVC. The fact that there is still logic on the backend of a REST API doesn't mean that it's a "controller" or a "model." We don't call every data class a "model" and every service providing business logic a "controller." These are terms that almost always refer to a specific kind of UI server-side programming, i.e. MVC.
It did \- that's why I asked the question. I just misread/understood the sentence: "We use Map and Set in our node code but had to pull back on clients" I read that as 'we were using these features in our node code, but then had to stop using them because of errors on our clients'
Agreed -- if the object has an obvious business key, like a unique username, it probably doesn't belong in memory, since coordinating eviction across processes isn't a simple thing. However, we do use in memory caching for some things like idempotent network requests, but always with computed keys, never something that could has to "__proto__" or whatever. 
Because that's how it is in strict mode. https://stackoverflow.com/questions/9822561/why-is-this-in-an-anonymous-function-undefined-when 
I might be misreading it. Every time I read it, I change my mind. The steps are poorly written; they have unclear antecedents and complete nonsense, at various points. Steps 10 and 11 are nonsense. You can assign a `value of type` to a variable or lift a variable into `type`, but you *cannot* assign a variable *to* a type. Step 12 refers to "their properties," which implies properties *of* the function arguments, not properties of the return object containing the values of the function arguments. If the text read "Make __*the*__ property names the same as __*the*__ variable names", it would be a lot easier to assume your interpretation. Maybe your interpretation was the intent, and I'm being way too literal (and literate), but if there's anywhere that being literal counts, it's programming. Computers *literally* only do literal.
Would you mind explaining what you mean by services?
Also: const createObject = (keys, values) =&gt; keys.map( (val, idx) =&gt; ({ [val]: values[idx] || '' })) .reduce( (acc, val) =&gt; ({ ...acc, ...val }), {}) 
Easy. Asked before 5 years and it was quite challenging. As of today... Even when we have class and more OOP fetures.. Just don't use it. There is quite more awesome and meaningful things, here in javascript, not "just because of that" kinda things - battle-tested architectures and ideas. The thing you always need is at least REST API - start with it first, design it carefully. Then structure of the code (and some more backend?) and then React. If you are more adventurous, try to built GraphQL API, it is phenomenal improvement over REST.
well, this is exactly why they would obfuscate the code; to void having people dive in to the game to manipulate it. The "math" you see, is probably just normal javascript code changed in a way to use obscure language features to make it look like that, and make it really hard to read, understand and manipulate.
An easy way to get answers to these questions is to start learning a functional language and building things with it. Maybe [Elm](http://elm-lang.org/) or [ReasonML](https://reasonml.github.io/).
Ok but is it actually complicated? Or does it just look complicated but understandable with a converter or something?
These are all excellent questions. For me, functional programming's major selling point is the notion of pure functions: functions which take their arguments as parameters rather than as internal state, always return the same output if given the same input, and don't mutate state as a side effect. Consider this session service class I've run into (TypeScript): class SessionService { private loadedSession: ISession private config: ISessionConfig; private httpService: HttpService; public construct(httpService: SessionHttpService) { this.httpService = httpService } public setConfig(config: ISessionConfig): void { this.config = config; } public initialize(): Promise { // make http request, using some config options this.loadedSession = sessionData; // return Promise resolve/reject as needed } public getSession(): ISession { return this.loadedSession; } public destroySession(): Promise { // relies on internal state } } There is too much ambiguous state here. You cannot call `initialize()` until you've first called `setConfig()` with the appropriate config. If this were an Angular app, then SessionService would be a singleton, so `setConfig` could have happened literally anywhere at any time (or no where, at no time) in the module that declares it. You also cannot call `getSession()` until `initialize()` was called. Well... you can, but then you'd be scratching your head why you'd be getting null or undefined as the response. Further `initialize` is async, and `getSession` is sync, so now you have to be careful about when you call `getSession()`. And what about `destroySession()`? What if you want to destroy a different session that might be loaded? You first have to find a way to change that session state in the SessionService, and then call destroy. This sucks! Here's a more functional refactor: class SessionService { private httpService: HttpService; public construct(httpService: SessionHttpService) { this.httpService = httpService } public loadSession(config: ISessionConfig): Promise { // make http request, using some config options // return Promise resolve/reject as needed } public destroySession(session: ISession): Promise { // doesn't rely on internal state } } Boom. No more state. No more ambiguity. One downside is that you're making an HTTP request every time you call `loadSession()`. The other design let you load it once and then you no longer have the performance hit. While that's true, what's important here is that the SessionService is now 100% idiot proof. It's easier to reason about, and you can't accidentally use it incorrectly. If performance is indeed a big concern, then it's trivial to memoize the response. So even when you're doing OOP, you can still apply some FP concepts to it to make it better. Now, in fairness, the first example is bad OO design, but it's also an example of some real world code to illustrate how easy it is to do OO badly. OOP is fantastic when it's done right but doing it right is harder than even casual FP. As such, I often prefer to leverage FP principles for my OO classes and objects. One could make the argument that the `SessionService` at that point is totally pointless. Why not go all the way and just make each method a pure function? Sure. Go for it. The point of this illustration is that sometimes you don't have the luxury to create a pure FP architecture, and that if you're doing OOP, you can still leverage FP to make your OO code easier to reason about.
Firebase Auth 
Solved this myself after some further searching, ended up using JQuery to modify it. $('body').toggleClass('ng-animate star-wars-theme');
The source code is human legible and of course written by humans. They ran that code through a program which Obfuscates the code so someone can't steal it.
&gt; WARNING: this is a WIP &gt; Phreatic &gt; In many frameworks across languages, exists the implementation of this well known design pattern, like Spring MVC, Angular, .NET, etc. &gt; Well, the idea of this was not to create just another IoC based dependency injector. The main motivation was the lack of a DI that resolves circular dependencies without messing too much with runtime, reflection, or overcomplicating the solution. ..... at this point, i vow to never use another project that has a completely illegible README, unless I'm being paid to understand it. If you can't write an intro paragraph that even legibly explains what your thing is, I'm going to assume you also can't write the thing.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
Try it with: $.ajax({ url: “/something“, type: “post“, data: { “name“: “test“, “foo“, “bar“ }, success: function(response){ console.log(response); } });
Does it support feet and inches including fractional inches, i.e. 3'-5 3/4" ?
Third line should be as : const recipe = $("#recipe").val(). You should invoke jQuery .val function.
What line is the error occurring on? Something you are trying to access doesn’t exist. Figure out what that is and work back from there. 
Sure. You tend to move any common useful code out into areas grouped by function. A common name for these is a 'service'. They allow for reuse of code and therefore reduce code bloat and copy / pasting. Examples of services might be authentication, user management, external service usages etc. Services are often used as an interface to microservices. A way to extract the actual service out so it isn't running with the your mvc code and on another host somewhere. 
Yes!
Good questions. A functional approach to what you would like to do would be that you would have these methods take the `player` object as an an argument and they would return copies of the player with the require properties changed. The original player would never be mutated. Doesn’t sound very efficient does it? Especially for games where large mutable objects are the bread and butter. Functional programming isn’t the right solution for every problem, OOP still has its place and will always be more performant. It’s about a trade off between performance and safety. In most web applications, the browser’s Js engine is fast enough to make the safety benefits outweigh performance gains. However, this might not be the case for something like a game. Always use the right tools for the job rather than follow dogma imo. 
Dr. Frisby's [Mostly Adequate Guide to Functional Programming](https://github.com/MostlyAdequate/mostly-adequate-guide) is great and doesn't require learning a new language (for JavaScript programmers). I'd recommend that absolute FP beginners maybe punch out when he gets to functors (and definitely monads), and then come back after the basics have had some time to sink in.
Might as well go for broke with async/await const fs = require('fs'); const fetch = require('node-fetch'); const http = require('http'); const readline = require('readline'); const rl = readline.createInterface({ input: process.stdin, output: process.stdout }); const writeToFile = async (board, tim, ext) =&gt; { try { const res = await fetch('https://i.4cdn.org/'+board+'/'+tim+ext, { timeout: 3000 }); console.log('&gt;&gt; Downloading '+tim+ext); const dest = fs.createWriteStream('./'+tim+ext); return res.body.pipe(dest); } catch (err) { console.log(err); } } try { const board = await rl.question('What board? '); const thread = await rl.question('What thread number? '); const res = await fetch('https://a.4cdn.org/'+board+'/thread/'+thread+'.json'); const body = await res.json(); body.posts.filter(Boolean).forEach((item) =&gt; { writeToFile(board, item.tim, item.ext); }); } catch (err) { console.log('Invalid board / thread input.'); } await rl.close(); 
DI is used extensively in Angular
&gt;I can define object or class &gt; &gt;player &gt; &gt;, make methods: &gt; &gt;player.load\(content\) &gt; &gt;, &gt; &gt;player.play\(\) &gt; &gt;, &gt; &gt;player.pause\(\) &gt; &gt;, &gt; &gt;player.stop\(\) &gt; &gt;, etc. I have no idea how to make it in functional style, I don't understand why state of that object should be immutable, when real player application's states are mutable. The way I've come to understand this \(and please bear in mind, I am fairly new to these concepts myself\) is as follows. Rather than trying to design your software top\-down, you work your way up from the bottom, starting with the smallest functionality \- e.g. a predicate that validates a condition. When you can rely on these predicates to always predictably return a boolean \(true or false\) you can, for example, compose them together to form validators, the results of which may or may not be changed along the way with good old map/filter/reduce. The function will then typically return a container that holds either your value, or an explanation of what went wrong \(later used for debugging or providing the user with feedback\). This container is now a single value that you can pass into something else, that will operate on it also, and return an equally reliable value \- always a boolean, or always a maybe, or an either... it shouldn't throw an error, but simply pass the message along if something went wrong, causing all the other functions to simply skip their operations and pass it along. Everything gets bubbled up to the point where things require some side effect, which we try to separate as much as possible from the rest of our code, at the end of this pipeline. The beauty of this approach is that your code is extremely safe up to the point of user input or server data \- it will simply pass predictable value containers along, possibly mutating the contents along the way. The container has a value? That means we operate on it and pass along the value. It doesn't? We just pass it along, potentially along with a message. You can do a lot more with this than simply modifying some blurb of data \- in e.g. Redux and Rxjs we read the state, operate on it, and return/broadcast the next state \(rather than modify the existing one!\). Doing this means we are safe from a variety of errors that can occur with concurrency and operating on a mutable state with multiple actors. A UI element that receives the next value will simply display the new information. As for how to structure your components, a common one I come across is to have functions that compose into microservices that compose into larger services which may be modularized at the point where I/O and other side effects happen. Both Angular and React with Redux seem to encourage this approach, even though at first glance they may not seem to. A click on the UI would trigger an action, probably passing along details about the click event \(e.g. what was clicked\). The action would trigger the service to put the necessary information into the pipeline, and at the end you get the container with the expected value \(which can be used to update the UI\) or the message that it failed, and why \(after which we can handle it accordingly\). For some examples and much better explanations I'd like to recommend [Professor Frisby's Mostly Adequate Guide to Functional Programming](https://mostly-adequate.gitbooks.io/mostly-adequate-guide/ch06.html#a-flickr-of-functional-programming) or the fantastic [documentation of Folktale](http://folktale.origamitower.com/docs/v2.1.0/overview/) which is a FP library that can help you begin incorporating these concepts in a meaningful way. I think the [guides ](http://jessewarden.com/2016/08/beginners-guide-to-functional-programming-part-1.html)and [youtube videos](https://www.youtube.com/user/jesterxl/videos) by Jesse Warden are a great introduction as well.
 await rl.close(); ^^^^^ SyntaxError: await is only valid in async function 
 const board = await rl.question('What board? '); ^^^^^ SyntaxError: await is only valid in async function
I'd settle for command-query separation.
I use to wrote a userscript/plugin that suits nicely the reddit redesign. Using **css filters**. Settings can be saved in local storage. If using the userscript, this settings come back at next reload. It allow theming from the soft to the highly contrasted, differently for any domains: [https://github.com/webdev23/ponyFilters](https://github.com/webdev23/ponyFilters) . Please guys, do some reviews, give advises, star, participate, ban me, or spreed the world! 
Something to keep in mind is that you can do functional programming without purity. There's no hard-and-fast definition of "functional programming," which kind of leaves the common definition at "programming with first-class functions." You probably already do this, if you're using JavaScript. Pure functional programming just makes this so much more predictable, since you know that for input X, function Y will always return value Z. Easier to reason about, easier to test, and you'll have fewer errors. As far as "what does MVC look like in our functional programming," I think that's the wrong question. A real-world application will have state (probably an object), functions that take a state and return a modified version of that state, and functions that take a state and produce some kind of side effect (or, if you're really staying pure, functions that take a state and return functions that produce a side effect). The rest is just functions that take arbitrary values and return predictable results based on their inputs. The way you'd update your global state is by abstracting the mutations, which is what something like Redux does, but could be as simple as a global state object that you *only* change via a `setState` function. // Global state let state = { hp: 100 } // Impure function const setState = (fn) =&gt; state = fn(state) // Pure function const playerTakesDamage = (damage) =&gt; (state) =&gt; ({ ...state, hp: state.hp - damage }) // Update state when player takes damage setState(playerTakesDamage(10)) Forgive any mistakes or omissions, typing code on a phone is rough. Id highly recommend checking a look at [Dr. Frisby's Mostly Adequate Guide to Functional Programming](https://github.com/MostlyAdequate/mostly-adequate-guide) if you really want to learn this stuff. It's can be a bit of a mindfuck at first, but totally worth the effort.
Cool, but while in node, wget can easily mirror all images \(or any filetypes\) in just one line. It would be nice if we can use this in browser client javascript. *Won't be possible for anything not CORS.*
then wrap it in an async function
W3 is a lot better than it used to be, but I don't see the point when you have MDN. Sometimes W3 can be a bit faster for a quick syntax refresher, due to the way they lay out information (the straight syntax tends to be above the fold often), but for actually learning how to use a feature, MDN is a better, more complete reference.
BAD MOVE! jquery \-\&gt; high speed ecma6 | Php \-\&gt; high speed Php
That's awesome to hear. Thank you for sharing the detailed example, I really appreciate it.
DI (IoC container specifically) is a strongly-typed OOP concept. In languages that are OOP and strongly-typed, it is your best option to do full decoupling. In JavaScript, you don't have to follow OOP pattern - a lot of frameworks these days avoid forcing OOP on user. And even if you do use OOP, you can easily do decoupling via duck-typing. Culturally, JavaScript got influx of developers from many backgrounds (C/C++, Java, .Net, Python, Ruby, PHP, Ocaml, etc). Some of those backgrounds has strong anti-OOP culture. The option of using DI pattern or IoC frameworks is there in JS if you choose to. As users have mentioned, Angular has DI. 
Forgive me if this is messy, typing on my phone: When you call addIt(2, 1), b !== 0, so it returns 2 * addIt(2, 0). addIt(2, 0) returns 1, because b === 0. So, after addIt(2,0) returns, addIt(2, 1) is returning 2 * 1, which is 2.
Traversy media 
Maybe a more simple recursive function would help. Let's say you want a function that adds 5 to a number and keeps adding 5 until the number is more than 20. const addFive = (x) =&gt; x &gt; 20 ? x : addFive(x + 5) Or without the arrow and ternary, which might be more clear (but a pain to type on phone). function addFive(x) { // return the number we got if it's greater than 20 if (x &gt; 20) { return x } // if the number we got isn't greater than 20, we call this function again with the value we got plus 5 return addFive(x + 5) }
I 2nd Fun Fun Function, DevTips too.
I couldn't seem to get it to work when I was playing around with it..
I'm not sure I can bring myself to actually read this article, because I kind of check out when he suggests that "imperative" and "functional" are opposites, but from skimming, he doesn't seem to have a great great on the concepts. (VBA is imperative AF, and lacks first-class functions, anonymous functions, and closures, but an argument could be made that it supports "functional" programming. I don't know that I'd bother with making that argument, but it wouldnt be completely without merit.) I really wish people, if they *absolutely* *__have__* to go post about something they just learned, would just go "hey guys, here's a thing I just learned that seems really cool, and check out this link to it!" instead of writing yet another awful blog post. The blog post they originally read was probably awful too, and that's how JavaScript tutorials become awful all the way down. At least by not piling on a half-baked understanding of a half-baked understanding, just linking the original (probably awful) source would short circuit the awful a little bit sooner.
The Coding Train
Use Google Maps API?
First off, var and let are both mutable definitions. This meaning that at runtime other code can change the value of these definitions. The more global, the more shared scope a variable is the more opportunity for other code to change and mutate the value at runtime causing unexpected behavior. Therefor var is prone to far more bugs cause by unexpected mutations from else where in your code. The limited block scope of let gives you insurance that it can only be mutated by code in that block definition. 
Thank you for the reply. I understand your point. it makes great sense. So i have follow up questions now. Even with the risk of var being prone to more bugs, would it be considered a bad move to utilize var in majority of instances instead of let or is that a noob kind of move? Also could I use the same let item in multiple different blocks of code where the items would be similar or should i just use a var for that instance? for example let x =10; then in another block of code using the same let x = 10; 
Modern javascript code style generally avoids the use of `var` in favor of `let` and `const` The "let x = 10" example would be easier to clarify with a code example.
kev i appreciate you. That just answered all my questions. I will focus more on let. Seriously thank you.
well, good luck debugging minified code. Dont you have developer version?
ffs put a fiddle up at least.
I see completly no reason of using let in favor of var. var hoists which gives sense. code would have to be very cumbersome if you would need variable defined only in some part of function or some block... let is hipster thing imho.. lets use it because it is new... while creating whole lot of incompatibilty issues...
This snippet made me use `let`: for (var x = 0; x &lt; 5; ++x) { setTimeout(() =&gt; { console.log(`${x * 1000} seconds passed`); }, x * 1000); }
it's the only thing I have any tips on making it readable? 
yeah i had the same reaction lol
looks good
Yup. I basically made this thing to help me bootstrap new projects and it does. I hope it'll help someone else too. It _could_ also be improved upon since it's a really simple abstraction. [I just added multiselect + autocomplete of popular environments to illustrate this point.](https://github.com/TejasQ/add-gitignore/blob/master/demo.gif)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [TejasQ/add-gitignore/.../**demo.gif** (master → c6b5b6e)](https://github.com/TejasQ/add-gitignore/blob/c6b5b6e1bcb6044057095001f87e1c7617dedbe2/demo.gif) ---- 
Thank you! I hope it's helpful!
Isnt that more work than 'touch .gitignore'?
Cool, I thought about I'd need this for my own project where I intend to archive cooking recipes from the Web, and normalize the ingredients. https://github.com/renoirb/archivator-demo Not that I wanted to promote my own pet project, I guess the original purpose of yours was possibly about food and grocery management. Was it?
It prepopulates the file for you with all possible things to ignore. [Here's a demo](https://github.com/TejasQ/add-gitignore/blob/master/demo.gif). 🙂
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [TejasQ/add-gitignore/.../**demo.gif** (master → c6b5b6e)](https://github.com/TejasQ/add-gitignore/blob/c6b5b6e1bcb6044057095001f87e1c7617dedbe2/demo.gif) ---- 
Just cuz it doesn’t suit you doesn’t mean it won’t be helpful to someone else. And more importantly - OP had an idea to help their workflow and decided to share. This sub doesn’t need this condescension/toxicity.
well i guess you are right... they wouldn add it if it was completely useless... but i have never actually used it in 10 years of coding thou... 
well, DevTips is the same as FFF. :\)
It’s minified, dogg. No one got time for deciphering that.
Thanks for sharing that! Yes I've been developing a real-time website/app for keeping your life organized and one aspect of that is the grocery lists, what's in your pantry, and your recipes as well as a global list of recipes (which can have substitution alternatives). The kind of functionality I needed revolved around what can I make and what do I need to make something.
Well it's more productive than arguing about it like this? What's your pony in this race?
3rd party or your own code? Splitting things out into another module solves almost all of your issues, and let’s you manage versions better, which is the really painful problem in JS right now.
You may also be interested in gitignore.io
So it's a tiny CLI script that only needs node.js and seven packages to fetch a file from an online API so you can write `add-gitignore android` instead of `curl https://www.gitignore.io/api/android &gt; .gitignore` every time you start a new repository? I don't really see the point, but thanks for sharing.
What do you suggest to improve the readability of the README ?
Thanks!
someone should tell op about global gitignore great beginner project for learning programming though
This is awesome! Great work. 
I disagree. You only made a constructive argument once someone else had to pull it out of you. Your initial comment was the opposite of productive.
It actually uses gitignore.io.
If you peek at the source, you’ll notice This really simple script quickly fetches a .gitignore file from gitignore.io based on your needs and adds it to your project.
Downside of global is they normally don’t get checked in. So if you are on a team it’s not a good approach. But for personal dev it’s nice (especially when you have a bunch of similar projects going)
&gt; Though I disagree that getting FP right is easier than getting OOP right. yes, "callback hell" is pure functional style :)
Leveluptuts, academind and ipennywis are some good ones traversy media is my favorite though and for a general tech I'd recommend level1techs they have a great podcast that's on Mon, Wed and Fri great for keeping up with tech topics.
&gt; The original player would never be mutated. It will because user click stop button - player is real. What a point to have immutable representation of mutable state? I can understand if you are dealing with concurrency (but in that case immutability is just a trick, like locks, maybe a better one). 
You can’t, unless you find the original
Good bot
&gt; which kind of leaves the common definition at "programming with first-class functions." than Python is functional programming language, it has "first-class functions" About the code example. Global scope polluted now with `playerTakesDamage`, `setState`. There are only few functions which make sense to have in global scope: `map`, `reduce`, `filter`, `length`, ... Why state of player separated from player (and where is a player?), why it is good? State of player may be changed by itself without `setState`, when playback finished, crashed, paused by user. If you need to know programmatically state of a player, you have to ask player about it's state. &gt; recommend checking a look at Dr. Frisby's Mostly Adequate Guide to Functional Programming I already looked up that book, maybe it explains good FP, but I don't see any guidelines how to write a project on FP. How you separate code to modules (I don't want player, its state and related methods in global scope)? Why conceptually `class` is not a same thing as closure? Lets say I start do design web application in OOP style. I have player, some ways to load list of video, audio contents... So I am saying myself, I will need a `class PlayerHandler` it will interact with build-in player, read it states, maybe something else, whatever player's API give to us. Than I need `class PlayList` for obvious reasons. Nice thing that I don't need to worry how my classes/objects will interact with each other, also I don't need to think about purity, immutability and other staff. But then yes, I need my classes to interact and the user may click on something, we need navigation on different pages. So I do need more, so I can decide to connect everything with events or use some kind of "controller" or adopt framework which is taking care of that... So how FP programmer thinking? 
Change your usage instructions to use it via npx instead. It avoids the need to install it globally, and then it will always run the latest version. This is especially useful since most people will not run it very frequently.
LOL ok, well, like any good engineer, let's break our big problem into smaller ones. So, first, why on Earth are you trying to comprehend this code? What is your goal?
You may also find this useful: [https://github.com/github/gitignore](https://github.com/github/gitignore)
every token wrapped into span and its classnames generate from its AST node.
So what have you done lately? Anything worth even mentioning? I agree this bit doesn't meet any of my needs but it's a good attempt by OP and it really solves certain use cases. Stop being completely useless keyboard warrior, and try to appreciate work done by others.
Java !==JavaScript
I like the selection mechanic. 
System level tool, you only need to generate .gitignore once (per project)
Could you elaborate on this line - 'I am trying to add a tool tip on Name without also adding it to the * because it looks stupid'. I dont understand what you are intending to do ?
Dude's run out of content. I enjoyed his `proto` descriptions but I had to unsubscribe when his new hair colour became the only interesting thing in the videos.
[removed]
I guess it is now. 
Majestic bot
Hi! Thanks for replying. I want to be able to have tool tip available when the user hovers over the word "name" in between the &lt;nobr&gt; and &lt;span&gt; tags. Granted the code above shows .find(span).after("&lt;/div&gt;"); i've also tried substituting the after for before() My thought process on this is to create a div around the string "name" and then trigger the tooltip method to add the necessary tooltip on the page. I also set the position for the tooltip to be different than default, but that's not really an issue. So i'm trying to inject the starting &lt;div&gt; and closing &lt;/div&gt; before and after the string "name". Assuming this would work, but my code doesnt do what i expect it to do. Does that answer your question?
Looks a great tool, **HOWEVER** node tty interactive on windows is pretty much broken on some versions of node. Is there a way I can do non-interactive quickly append a list of arguments/flags? Something like `--macos --wordpress` etc?
I've been using rxjs here and there but I'm not feeling confident yet. Articles like this helps a lot.
You literally just run: npx add-gitignore It automatically downloads and runs the script, skipping the step of having to manually install it first. npx is included with recent versions of npm.
How does it compare to socketcluster.
Yeh it was build because of socketcluster, socketcluster is too heavy, libraries across Android, Ios and javascript too different and sometimes do not have some functionality, which was cousing us alot of problems, after checking socketcluster we have found alot of redundant code. We do not have real world benchmarks yet but panning to do it soom to be able to say exactly how different it is.
I jus wrapped the 'Name' text in a span element as: &lt;span class="name"&gt;Name&lt;/span&gt; $('#foo').tooltip({ items: '#foo .name', content: 'Tooltip text over here', position: { my: "left+15 center", at: "right center"} }) 
RIP
This is good I could see myself writing an oh my zsh alias to set up a new project directory using this and a bunch of mkdirs and the gitkeep trick below: Fun fact if you build a folder structure with empty files the won’t show up in git add You can touch an empty file into each folder to make them show up call it something like touch .gitkeep 
Refer my code over here: https://codepen.io/anudeepd/pen/NMazwM
Titef - Tiny Test Framework Five time faster than Mocha, three times faster than Jest in less than 3kb. CLI, programmatic approach, pluggable reporters and much more https://github.com/shikaan/titef
http://unminify.com/
I'm not talking about "names", I'm talking about proper input data validation.
A dictionary object? I can't seem to find one.
Awesome ! Nice to hear that
I dked one as a text file. Oxford English is I think. But then just loaded into my program as key/value for pairs. The key was the entry and the value the definition. I'll pass on my github acc when I am on my machine and you can use it. 
Thank you, sir!
Great idea! I just updated the README. Thank you for your contribution!
Thank you very much!
Glad you like it!
Why thank you, sir!
Or madam!
I actually really \_was\_ interested in [gitignore.io](https://gitignore.io). 
Minified and contains the string `window.ScheduleAttack` ? Eh, no thanks.
I wrote a CLI that [generates a .gitignore for you based on your needs](https://github.com/TejasQ/add-gitignore). I often start new projects at work and either have to write them by hand, _or_ go somewhere on the web and copy/paste them in. This simplifies my whole workflow.
I made a [snake game using html5 canvas](https://github.com/MarcoLucidi01/snakejs). I'm looking for code reviews [here](https://www.reddit.com/r/learnprogramming/comments/8h93a5/review_request_snake_game_made_with_javascript/?ref=share&amp;ref_source=link).
I like to combine both conundrums by coding something that is so shit that it is genius.
ye
No it will not be mutated. The copy will be returned and it will be the one with the mutation. The point is that functional programming prefers pure functions and eschews mutations for greater security. It also makes testing, composition and interoperability with other code easier. It is by no means a “trick”. 
Everytime ;-)
Adding IDE or OS specific excludes to a project's gitignore is a pretty big antipattern for git users. Just add them to you global gitignore once, instead of adding them to each project.
🔍
Thats what we all needed but never specifically wanted. Good Job Yo!
But what if you’re working on an international team spread across the world and not everyone has the same global config?
Thanks, yo! 🙌🏾
https://github.com/sindresorhus 
Developers should know not to commit the project workspaces. If they do, and Dobby even notice, they can leave my team. 
[The Road to learn React] is up to date with the latest React version. If you are good with learning by reading, doing exercises and implementing an application on the side, it might be something for you.
I just assume that what I've coded is shit
I'm a big fan of egghead.io
Maybe I'm weird, but why would anyone really care how big the testing framework they use is, its not like they have to distribute it to users, the features used for testing seem to be a lot more important than its size.
as you gain experience you start understanding the trade-offs you made and why you made them. i'd consider you a junior developer if you can't.
Well, its size is more a selling point when it's time to add it in your existing project. Let's say you are developing your testing library, ad-hoc for your project, you might find in Titef a good starting point with almost no impact on the overall bundle size.
 npx lice
Solution without jQuery: document.body.classList.toggle("ng-animate"); document.body.classList.toggle("star-wars-theme");
Isn't this just functional programming?
You'd missed the word "real", some operations have to have side effects. If bank account is 0, user shouldn't be able to withdraw money from it (even if makes testing easier). 
Search on YouTube...many videos dedicated to explaining this part.
Because I don't want incompetent colleagues? You can continue to make up the shake for those people for the rest of you life of you wish but I'd prefer to work with smart people. 
I learnt that lesson, and I am writing functions without side effects when it is possible. But there is a limit to it, some of the code have to deal with side effects because they exist, FP have special `Maybe` type for it. 