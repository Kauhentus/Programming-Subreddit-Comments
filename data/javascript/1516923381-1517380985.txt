Sure it can! ``` for await (let solution of generateStackOverflowAnswers(problem)) { eval(solution); } ``` In fact, this very snippet was at the core of the proposal motivation from the very beginning.
That's great! But why does the author write like a fanboy? A more professional and concise tone would work better.
I'ts strange to compare monoliths like angular to react, but ok. Just think more about it... Both ways have advanteges, but i can't understans comparing them.
Gaaaahhhh, I knew it was something silly. I thought the style transforms were part of the problem with the original, so I was trying to avoid using them. As far as the accel function, I can understand that you're taking *t* (time?) subtracting the largest integer from it, then taking the remainder of that, raising it to a power of 15, and then adding that back to the largest integer. I'm not completely sure how that formula is doing so, but it looks like the exponent is defining the curve of the animation.
This is interesting. Do you have any more complex examples? * How do you query indexed types (‘blog/1’ instead of just ‘blog’)? * How do I define queries I want to run in the client, is it just imperative calls to get(key)? * How would I handle universal rendering?
Just a website nitpick but I'm getting some serious frame drops when scrolling past the hero header.
Damn I’m still on webpack 1 
It's a website in a browser, not a video game. Not exactly important.
Perhaps some blatantly over the top stress test?
p.s. ive heard you also need a exe installer
Regarding your title, Java is not JavaScript :) Regarding your question, if you are asking how to wrap JavaScript in a binary executable, then you should look into [Node.js](https://nodejs.org/en/) and [pkg](https://npmjs.com/pkg).
I wonder how [protobuf](https://auth0.com/blog/beating-json-performance-with-protobuf/) compares to this.
This could be done. You would have the following javascript file called makeDancingBabyMyLogo.js: const { exec } = require('child_process'); exec('eRepLogo dancingBaby.jpg'); And store your dancing baby image in a file called dancingBaby.jpg in the same directory. And a batch file called runjs.bat with this code: node makeDancingBabyMyLogo.js Then make the a file called makeExe.sed with the following: [Version] Class=IEXPRESS SEDVersion=3 [Options] PackagePurpose=InstallApp ShowInstallProgramWindow=0 HideExtractAnimation=1 UseLongFileName=1 InsideCompressed=0 CAB_FixedSize=0 CAB_ResvCodeSigning=0 RebootMode=N InstallPrompt=%InstallPrompt% DisplayLicense=%DisplayLicense% FinishMessage=%FinishMessage% TargetName=%TargetName% FriendlyName=%FriendlyName% AppLaunched=%AppLaunched% PostInstallCmd=%PostInstallCmd% AdminQuietInstCmd=%AdminQuietInstCmd% UserQuietInstCmd=%UserQuietInstCmd% SourceFiles=SourceFiles [Strings] InstallPrompt= DisplayLicense= FinishMessage= FriendlyName=- PostInstallCmd=&lt;None&gt; AdminQuietInstCmd= UserQuietInstCmd= AppLaunched=cmd.exe /c "runjs.bat" TargetName=.\makeADancingBabyMyHPLogo.exe FILE0="something.bat" [SourceFiles] SourceFiles0=.\ [SourceFiles0] %FILE0%= Then from the command line, run: iexpress /n /q /m makeExe.sed And you should have your executable in makeADancingBabyMyHPLogo.exe which makes your logo the dancing baby.
Actually people have already been able to freeze the last frame of a video by tapping. Wouldn't that suggest that it stores the data somewhere so it should also be possible to reverse the last bits of the video?
This just moves it back. It doesn't reverse it.
Yeah sounds like it. Did they share their script? That might be a good start.
Recommend r/NodeNoobs for these questions 
There are some versions of it popping here and there but I don't consider myself capable of altering it to do what I want lol
It can, in output set target library umd.
Just catch the change event, take the event.target.value and feed it back to the element’s value with the stripped characters. 
If you link me to it, I might be able to help
I follow this sub because I just started a 2nd degree program in CS, in an Intro to CS course based on Java right now, and the fact I have no idea what anyone is saying in this thread let’s me know I have a LONGGG way to go. 
really nice post.
https://facebook.github.io/react-native/
AFAIK, react native doesn't have support for win32 or macos; it's mainly targeted at mobile OSs (Android and iOS).
I like to live in dangerous way
https://www.reddit.com/r/SnapLenses/comments/7qrp7j/tutorial_how_to_add_freeze_frame_works_on_all/ Here ya go!
You could make an object that has all your functions: let myFunctions = { draw: function(args){ //Code }, otherFunction: function(args){ //Code }, } Then you can call each function like so: myFunctions['draw'](argsValue); Then to randomly select which function, start by getting all the function names in your object: let listOfFunctions = Object.keys(myFunction); This will give you an array that will contain all your function names. It will look like `[ "draw", "otherFunction" ]` in our example. To randomly select from this array: let myRandFuncName = listOfFunctions[Math.floor(Math.random()*listOfFunctions.length)] This now has one of the functions you defined stored in it as a string (e.g. "draw" or "otherFunction"). You can now call it as we did above myFunctions[myRandFuncName ](argsValue);
Ohh... yeah, whoops. Hmm...
Java or JavaScript? Just checking as they are two totally different things.
I would guess a "core maintainer" might be a bit of a fan.
I’m not an ES6 expert but I think the big reason is It let’s you write more maintainable code (and you won’t have to transpile forever)
The benefit of ES6 and later revisions of the language isn’t performance, it’s improved language features that make it easier to write code.
I agree with both of your points, especially the second one. Makes total sense that *eventually* we won't have to transpile, but does that mean that ES6 in today's web development is no better than ES5 besides the fact that it does help write more maintainable code?
Wow. This answered every question I had! Cheers, friend. Is there any good reading you recommend on the ES6 spec, besides what is available in this subreddit? 
There may be optimization benefits but those are likely fairly negligible in performance gains since `const` means `cannot be reassigned` rather than `cannot be changed`.
If your objects are looking like `{x: 1245, y: 3455, name: 'myObj1'}` you can use `myObjectList.find(obj =&gt; obj.x === 1245 &amp;&amp; obj.y === 3455).name` or you can use filter method that will return an array and access the name property of obj at 0 index. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter
Transpiring let’s you use newer features sooner. 
This is a fair question. If performance was the only consideration in code, we'd all be writing assembly every day. ES6 is designed to provide ergonomics, and make it easier to digest and understand what is being executed. Most language features are designed around this, as opposed to straight up performance, which is the job of the runtime and/or compiler. I content that good language ergonomics encourage the programmer to write performant code, but that's a separate discussion altogether. That said, I highly recommend learning pure ES5, if you really want to understand JS. My job requires me to write ES3 in some situations. Understanding the "old magic" highlights why the current standards exist to begin with, and will make you a better developer, FWIW. 
For me, by the time ES6 came out, all I had to do was read over the docs and say 'About time!' and I had it. I already understood all of the concepts. Me.. I'm a very visual learner and I found that listening to JavaScript talks on YouTube with samples really makes things click for me. I don't have a curated list, but if you need I'll go digging for something that I like. YMMV.
&gt; does that mean that ES6 in today's web development is no better than ES5 besides From the browser's perspective, that's correct. But to us humans, it's much nicer to work in ES6.
Very fair! Honestly using the CLI's options you can get fairly close; just not *as* 0cfg as Parcel, but certainly a great achievement! Thanks for the hard work Sean
Thanks a lot for going through all that trouble! I have time to test it tomorrow or day after tomorrow and I'll let you know the results. 
Idk about best practices, but insofar as performance: Let's say you're storing N objects in a coordinate space that is W by H. If N is substantially smaller than W*H, you'll want to use a map -- something like: let myObjectList = {} let x = 100; let y = 302; myObjectList[[x, y]] = { "name": "Jake" }; console.log(myObjectList[[x,y]].name); // print 'Jake' 
use lodash, lodash has `get` and `has` and `at`, and they have better errorhandling &amp; default values: `_.get(object, 'a[0].b.c', 'somedefaultvalue'); 
"We have also removed CommonsChunkPluginand enabled many of its features by default. In addition, for those who need fine-grained control over their caching-strategy, we have added optimization.splitChunks and optimization.runtimeChunk with a richer, more flexible set of capabilities" For me, this is the highlight.
If you already have the coordinates why do you need to search the array? Don't you already have what you need to index into it?
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [getify/You-Dont-Know-JS/.../**es6%20%26%20beyond** (master → 3f9efe8)](https://github.com/getify/You-Dont-Know-JS/tree/3f9efe8aefb6d2b8ff9db983802acf62f7905edb/es6%20%26%20beyond) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dt9hhf2.)
...pretty close to everyone nowadays is running an evergreen browser that can run ES6 code. I really don't think the transpiling step is even necessary in most cases. Just 13% are still running IE, and if sites started just turning off features for IE users, that number would bottom out to zero quicker.
https://www.npmjs.com/package/pkg
That's only true if you need to support IE11. All the other modern browsers support (most) of ES6 already. And the performance differences are not that noticeable. If performance is vital then yes, by all means, use ES5 (but if it is _that_ important you may as well look into WASM) So what are you going to do, sit around and use an obsolete version of the language until IE11 finally dies in 2022 or so? 
You'll likely use [babel-env](https://github.com/babel/babel/tree/master/packages/babel-preset-env) and target your lowest environment, the plugin tracks specs closely and tries to only transpile what has to be transpiled to fulfil your target environment. If you are allowed to throw out IE11 for instance, it won't transpile anything, unless you're using newer specs, es6 is years old after all, but there will always be upcoming specs. As for performance, browser vendors do their best to cover completed specs, then lots of these features are just sugar anyway that wouldn't mean any downgrade. Either way, i couldn't imagine writing stuff in es5 just because some browser (mostly just IE11) isn't going to update. It made javascript a living hell to write decent stuff in. IIFE's, fake-module patterns, pretty glad this is all gone.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [babel/babel/.../**babel-preset-env** (master → ca18ea5)](https://github.com/babel/babel/tree/ca18ea5e797b6da53854b93cd7b590cfd26a4886/packages/babel-preset-env) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dt9ipe3.)
http://gist.cs.berkeley.edu/ now you need to implement it in your special case...
You are talking to people who use the babel stage 0 preset. Compared to that, a beta is incredibly stable. 
Still it doesn’t justify the amount of exclamation points and abuse of emoji.
As an example, i have 10.000 players with position x and y. Every player have to see each other and around each player things can spawn. The distance to the player could be really high. Now it make no sence to emit to every player the postions of every other player. But loop through all players and check the distance and send only to near by is to heavy load for the server. Now my idea is to make "zones". Like one zone hast x=100, y=100. Now a player could have x=100,2486 and y=100,2189. So i know, that this player is in the zone with coords 100 and i put im to the list zone[100][100]. At the end i have to loop only thourgh this list with a few players and execute logic from npcs etc. from this zone. So i know where a player is and i want to put them through a "group" without any looping. But important is that the zone is a class with spawn logic etc.
I'm not really following. Can you post a snippet of what the data looks like currently? Most likely the issue is it needs to be in a different format but without more information that's just a guess.
I'm so guilty of using too many exclamation points. In terms of the emoji, this is a "marketing tactic". Do I think it looks a bit tacky sometimes? Sure. Does it also win the attention of 20,000 more eyes, yes. 🤷‍♂️🤷‍♂️🙇‍♂️🙇‍♂️😍😍
It hardly adds any features. Rather its a layer that sits on top of javascript designed to give it the look and feel of a more hardcore programming language such as java. It fools you into believing that it has classes when in reality the "class" system ES6 has to offer is really syntactic sugar wrapping a prototypal object cloning and referencing system. In a real class system, classes are used to make children and are actual clones of the parent and are thus independent of them. In javascripts class system, objects are bound to their parents and inherit any changes the parent may undergo during runtime. You also, in some cases can go up the prototype chain and affect the parent class. This is a very dangerous feature for obvious reasons. But its also very reminiscent of the __prototype__ property that would let you traverse the prototype chain. Pretty flaky and shaky at that. 
We've been contemplating this a lot. So much that I have spec'd out a alternate webpack =&gt; webpack consumer version of this. However, we have ESM library target on our v4.x-5 roadmap. Problem is, you have to be pretty strict to take most projects that mix CJS, ESM, AMD deps (even assets) together and then try and distil it and the runtime down to an ESM module. https://github.com/webpack/webpack/issues/6386
I dont`have mostly any code yea. As an example: You are in the usw with a gps coords lat and lon. I`m in germany with a different lat and lon. I don`t need to send you my position, because we are not close. But if we are like 200m near to each other i want you can see me. If 100.000 players around i need a solution how to know who is close to each other. I can`t loop through all players every fews secons to check it. And around you you can interact with objects based on your postions. If we stay close to each other we see the same, but of course you in usa don`t need to know whats going on near to me. So my idea was to create "zones". I will cutting a few digit away from the cords. Like my position is 50.053033255074375. A zone1 could be 50.05, next zone2 50.06 and so one. Of course for lat and lon (x and y). So i know that you are in zon1 with this positions. And the object zone1 have a list of a players which are inside at the moment. zone[50.05][8.4].playerlist
We still have a migration guide for 1=&gt;2/3 which is found on webpack.js.org/guides/migrating &lt;3 
i think you should take a look at [quad trees](https://gamedevelopment.tutsplus.com/tutorials/quick-tip-use-quadtrees-to-detect-likely-collisions-in-2d-space--gamedev-374)
I understand what you are trying to do but you keep saying you already have a 2 dimensional array of these latitude and longitude coordinates so indexing into an array is a constant time operation. I don't understand why you need to search when you already have the values in a 2 dimensional array. You just index into that and iterate through all the items there. That's why I asked you to post an example. Because it seems like it's already optimized as much as it can be.
I mentioned NervJS in the article, just like I mentioned the other major React alternatives such as Dio.js, Inferno.js and Preact. But most React libraries will simply "import React from 'react'" and this is something that I think that could be improved to allow those React alternatives to better compete one with the other.
I've been using both Dio.js and Inferno.js in the past few months, and all tests I've done so far haver worked perfectly with inferno-compat. It wasn't a hassle to set-up, just a few lines added to Webpack config. Since Dio.js hasn't support for synthetic events, Material UI doesn't work with Dio.js. That's perfectly fine. My point wasn't to suggest any changes to React itself. I don't think it has to change anything. My point is to introduce a new, independent package, where we could set up which React implementation we'd like to use. Then, UI authors could be able to write their libraries on top of the common features defined by such package. It's perfectly fine if some library decides to support React only, but I think lots of them could switch to the new package to make their audience wider. For example, muicss already works with Dio.js out of the box. They don't use synthetic events. They could switch to "react-like" as easy as replacing any imports to 'react' and 'react-dom' to 'react-like' and it's done. And it would work with React, Dio.js, Inferno.js and possibly (I haven't tested) Preact and NervJS. Then, if Material UI would like to increase its audience it could provide fallbacks for implementation lacking synthetic events, for example. Or maybe stop using synthetic events and use another strategy. My point is that there's a minimal interface that allows us to build apps in the React way that is not hard to be implemented by competitors. When I mentioned Component in the article, I didn't suggest getting rid of the lifecycle. In fact, all React alternatives implement that Component interface like in React, with all those lifecycles (or at least the most fundamental ones). It's practical. If you give those alternatives a try, specially "inferno-compat" and "dio.js" (when not relying on synthetic events), you'll see they just work and work fine. And they are lightweight. That allows us to improve the experience in mobile apps, for example. An application delivered with Dio.js and muicss can be way more responsive in some mobile devices than another with React and Material UI, for example. Maybe, with competition, even React might have to rethink itself to compete with the others by trying to reduce its overhead, for example. It all depends on whether the community would embrace such a common interface.
I don't think you should bundle your lib at all. Normally you'd just run babel over it, but you let imports and exports stand so that the distributable is a real es-module. It's the endusers full responsibility to cope with it, usually by bundling it in. Modern browsers aren't nearly ready to handle real-world modules with npm imports, imports without extensions, non-js-imports and so on, even if they begin to wet their feet. I doubt this will change so quickly.
They were forced to rewrite it in Polymer to help push Google's framework.
I think it's better for them to compete in performance and payload size, not features, which would fragment the eco system. If they're react-like, then react is the standard they should adhere to and users should import react if they want to partake in the eco system, neither preact nor inferno. I only mentioned nerv because that is the direction they follow: dev in react, publish by alias.
I didn't really compare the libraries themselves only. I was more interested on discussing the available approaches for web applications development with JavaScript. Knockout.js, for example, is just a library, and so is Vue.js. When discussing the approaches, Knockout.js, Vue.js and Angular share so much in the approach level that I'd put them in the same boat, approach-wise. They all try to come up with extensions to HTML, using some sort of HTML templates, while some prefer declarative templates and others, such as Knockout.js, allow plain JavaScript to be used for control-flow for example. But they are still very similar with regards to the approach. Of course, Ember and Angular provide a broader scope, but my point in the article was trying to see our options when dealing with the model-view sync problem and how we manage state in JavaScript apps and propagate them to the view. I wasn't much interested in the implementation details or how broad each alternative is. I was trying to explain why React was so successful in my opinion. Knockout.js is as focused as React, but Knockout.js didn't get that much traction. Why is that? This is what I was trying to explain. But, of course, people have different programming styles and I can certainly understand why someone would prefer something like Vue, Knockout or Angular over React. But it seems most people tend to prefer the React approach, and I'm one of them. And I have worked with Knockout before. I know one can be productive with Knockout, or Angular, or Vue, or Ember. All those libraries/frameworks allow us to write modular code with easy. Some will prefer a full-featured solution such as Ember or Angular, while others would prefer a more focused one such as Knockout or Vue. I was just mentioned that React offered not just another alternative library, but a completely different approach. Ember, Angular, Vue and Knockout are all variations of the same approach. React's approach was completely different and a game changer in the front-end development world. Of course, not everyone will prefer the React way, but no one can deny it was an innovation over the state of the art. That's what the comparison was all about. The way we build client-side applications. Nothing prevents a full-feature React alternative to come up, that would provide an opinionated full set of features, such as client-side routing and so on, the way Angular and Ember provide. But this won't change the basic blocks in which such apps are built. One approach uses HTML special templates while another approach will embed HTML in JavaScript using the virtual-dom concept. They are completely different from each other, conceptually.
It is a pile of shit. It takes 10 seconds for all my subscriptions to be added to the sidebar. Also the loading behavior is terrible and glitchy and sometimes outright breaks and you're left with the previous title on a new video, or no related items.
To explain this, I need to give you a fact : An array is an object. An object with integer as key and a length property. Here we are. When you use `Array(n)` : you are now creating an array with a length of `n`. But only the `length` property is set to `n`. There is no keys and no elements in this array. Now, step 2, when using `[...Array(n)]` : you are creating an array with a length of `n` and no values. But, you are iterating over each suposed value (that do not exist) and then concat it to the new array. But you are not iterating over values but over supposed keys : 0....n-1. So, you are trying to find `Array(n)[x]` value but if the key/value is not set on an object it return `undefined`. So, you have at the end a new array with undefined values of the `Array(n)` length.
This is a "broadphase search". This works well if objects don't move too much because you have to do zoning cell housekeeping for every movement. Also consider a sparse map like /u/you-get-an-upvote suggested. Or if you have dense limited grid don't use a nested array but single width*height size array and use offsets to index cells. cell = cells[x * width + y] 
Oh, I am not fully answering to the OP question. `map`, `reduce`, `filter`, `forEach`, etc... iterate over values/keys, an as I said there is no values/keys in the `Array(n)` array, because only the length property is set.
Thank you! But when you say there are no keys in `Array(n)`, why does `[...Array(n).keys()]` give me [0,...,n-1]?
You can serve es6 to browsers that have implememted modules, and es5 to older browsers. One huge advantage with serving es6 is the size.
You didn't say es6 module... But yea, you're right. I think of webpack as just for browser bundling final build only. If I wanted to export for npm/node or as a complete es6 module I'd use plain babel or rollup.
Thanks!
And.. I thought only one browser has support for es6 modules and the syntax requires full file name with extension and no cool stuff like aliases or the easy ability to export your dependencies for the browser.
`Array(n).keys()` return an Array Iterator that return each keys from 0 to length. Using the spread operator you are concatening using this iterator. That do not represent the real key but the excepted ones.
To me, because its has so many syntactic sugars. Look at these http://exploringjs.com/es6/ch_core-features.html
The gain is not performance for const. It is a lot easier to reason about things that won't change elsewhere in the code. (Disclaimer, objects can be muted with const, you have to be careful with that :)) Also, let and const are block scoped where var was function scoped which could lead to horrible behavior.
I just use Number.isNaN(Number(val)). Which seems awfully convoluted, now that I look at it. 
Three things: 1) Autocomplete in the editor. With a good type system you get dang-near perfect auto complete which makes the mental load a LOT easier. 2) Refactoring. Imagine having a code base of some 800 functions and you add a new feature to your software. In regular JavaScript you'd have to go through all 800 functions and manually figure out where you would have to change the function signature. With Typings, you change the method you need to change.. compile, fix errors. Repeat. 3) Learning a new code base. It is amazing to simply be able to see a function you have no idea what it is. Hover over it, see its call. What values go in, what value is returned. In regular JavaScript you'd have to either set up a break point or track down the function declaration.
I looked at the specs and think I got the correct answer. But I might be wrong. The `keys` method returns an *ArrayIterator* via CreateArrayIterator(O, "key"). Let's look at its `next` method: &gt; 1. Let O be the this value. &gt; 6. Let index be O.*[[ArrayIteratorNextIndex]]*. The *[[ArrayIteratorNextIndex]]* defaults to 0 in CreateArrayIterator: &gt; 4. Set iterator.*[[ArrayIteratorNextIndex]]* to 0. Back to `next`: &gt; 9. Else, Let len be ? ToLength(? Get(a, "length")). &gt; 10. If index ≥ len, then &gt; Set O.*[[IteratedObject]]* to **undefined**. &gt; Return CreateIterResultObject(**undefined**, true). &gt; Set O.*[[ArrayIteratorNextIndex]]* to index+1. This means, **[[ArrayIteratorNextIndex]]** is solely dependent on the length of an array regardless whether keys/values exist**!**. At the end: &gt; 12. If itemKind is "key", return CreateIterResultObject(index, false). So itemKind is indeed "key" as seen at the beginning of my post. As point 12 states, index is returned. *ES2017* Spec links: * [`Array.prototype.keys()`](https://tc39.github.io/ecma262/#sec-array.prototype.keys) * [CreateArrayIterator](https://tc39.github.io/ecma262/#sec-createarrayiterator) * [*%ArrayIteratorPrototype%*`.next( )`](https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next) 
The need to transpile depends on the project. I'm currently working on a company project where all users use the company browser which is currently Chrome 61 (and updated with chrome releases). So no need to say that in our context, we don't need any transpilation. Also for personal projects, I don't bother maintaining old browser. If you want to run my projects, you have to have a up-to-date browser. Not having transpilation in your build really simplifies the whole build process of your application and reduces quite a lot your node_modules folder :)
You have the scientific answer, I had the hacker one. Great job. I hate reading specs :/
I've been using `Array(n).fill(null)`
Other options: 1) _.isNumber(value) https://lodash.com/docs/4.17.4#isNumber 2) function IsNumeric(val) { return Number(parseFloat(val)) === val; } https://stackoverflow.com/a/16655847 3) typeof value === 'number'
Can you explain the side effects false part about more? It’s intriguing but I don’t quite understand 
It's easier than having to track proposals by hand, also allows testing against upcoming specs. We put projects into sandboxed test environments sometimes to see how they fare against new tools and drafts. But either way, doesn't always mean you'd use come what will, all the strange and unsupported drafts that may never be.
Just a heads up. The rule you triggered, `no-restricted-properties`, [is a rule that takes custom property matches and allows you to set your own error message](https://eslint.org/docs/rules/no-restricted-properties). The rule you're triggering is not a default ESlint rule and ESlint doesn't care whether you trigger `window.isNaN` or `Number.isNaN`. Whoever added that custom rule to your config cares and you should discuss this with them. ESlint is just the messenger here. I highly suggest reading through the documentation on ESlint whenever a rule rubs you the wrong way. Their docs are quite good and provide tons of examples to help you pinpoint the issue so you can discuss with your team(s) in detail whether the ruleset should be changed or not.
This is /r/JavaScript and every comment is focused on a single runtime environment. JS can run in more places than the browser. There’s many cases where developers can write in ES6 without needing a transpiler for backwards compatibility.
Its a major pain in the ass for the spec writers because if they change their draft (as they should. - that's part of what the tc39 process is there for) they will trigger a shitstorm from people who are using their WIP draft in production even though it's clearly not intended to be. Testing out new stuff and contributing feedback is fine, depending on the current draft in your production app and thus preventing necessary changes to the draft thereby interfering with the spec's development is not
I noticed that minify has not been updated for 4.0. But I wonder: is it still as necessary as before? Is Webpack + Uglify better at tree shaking? 
I follows spec writers, they're all mostly ok with it preliminary tests and in some cases real-world usage. Through babel it's going smoother than ever, hence they're always part of the meet-ups now, and it's actually feeding both sides with proper feedback. They still maintain full rights to change specs if they see fit, while babel will do it on their part or even cast proposals out, leaving your app functioning as long as you don't update. You can pull this into the dirt or talk down on devs wanting to test ahead - but it's all good in practice.
I see. I guess it's only really a problem when a huge library like angular depends on unfinished specs because then millions of applications that depend on outdated specs so be written. And that causes millions of man hours when the six changes. I still think it should be avoided for any production app, though.
Sigh..... You’re in the JAVASCRIPT subreddit pushing a paid coarse for JAVA. If you’re going to try and market something at least know who the hell you’re marketing to. HINT: They’re not even the same language 
Interesting, and nothing to note directly of code, however I feel a little sad that at first glance, it looks like I'd have to restart the process every time I updated something in my "server"-side code (ie. Electron). Otherwise nice setup, good coding style and nothing major to detract from the main focus.
Hi /u/nasif08, this post was removed. Please see our rules, and do know that 'Java' !== 'JavaScript'.
I've been using [jq](https://github.com/stedolan/jq) for a while, which is written in C (I think). I wonder how these libs compare in terms of speed.
Can you first cite what the performance benefits of ES6 are?
The spread operator is a new JavaScript feature. I'm guessing req is an object, in which case Node doesn't support it. Either compile your code with Babel or try something like `Object.assign({}, req, {otherProperty: 444})`. If req isn't an object upgrading to a newer version of Node may be enough. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator#Browser_compatibility
You-Dont-Know-JS books - https://github.com/getify/You-Dont-Know-JS
Not a pro, but... My path: Codecademy Sololearn mobile apps FreeCodeCamp (read on MDN while going through) Continue reading MDN Algorithm challenges on sites like Hackerrank, Codewars, Coderbyte, etc. WesBos JavaScript30, Dave Geddes Flexbox Zombies, etc. (specific little tutorial stuff) Meetups Apply for jobs (learn from interviews).. work.. learn.
Glad to see it is on the roadmap, I'll definitely be following that issue closely!
Not to forget maps, destruct/spread, async/await, generators, and the list just goes on and on.
Destructuring is god tier for cleaning up code. 
Interesting thread! I always ask myself, whether the code examples of my library are written friendly enough for javascript beginners. Maybe someone can give me feedback: https://github.com/justadudewhohacks/opencv4nodejs/tree/master/examples
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [justadudewhohacks/opencv4nodejs/.../**examples** (master → 3dc0511)](https://github.com/justadudewhohacks/opencv4nodejs/tree/3dc05110e01ec4927d180a9ec860279481a9df72/examples) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dt9vdh4.)
Worst way to promote a framework ever. If the company that made it can't keep it from being a clunky, buggy mess then what are normal developers supposed to do? Also what's up with "promoting" a framework, are consulting fees really that lucrative? 
I could only imagine the amount of obscure bugs that could arise with the majority of those patterns. 
I think it will be jq vs nodejs compare as fx powered by nodejs.
&gt;We have also removed CommonsChunkPluginand enabled many of its features by default. In addition, for those who need fine-grained control over their caching-strategy, we have added optimization.splitChunks and optimization.runtimeChunk with a richer, more flexible set of capabilities For me, this is the highlight.
Clicks don't work on Reddit mobile in browser
I agree, but I think the original [electron-react-boilerplate](https://github.com/chentsulin/electron-react-boilerplate) also suffers from this. Correct me if I'm wrong.
I had this same thought. And started working on a repo for it too. I called it Common React and split it into multiple stages. This would help pick components that are API compatible. Stage 0 - Only Component Stage 1 - Full React API Stage 2 - Unique library specific features Sounds like you're interested in the same thing, team up?
I'm not sure this kind of move starts from an implementation point of view. For example, if React library authors don't buy the idea, it would be wasted effort from my perspective. The first step seems to be to discuss the subject and see if there are enough people interested in making it happen, specially library authors. Once we confirm there's interest on going that route, then it would be a good time to discuss the specific details on how common React specs would look like and how such package could be created. But I understand people have different picks on how to approach a problem and some people prefer a concrete implementation before discussing it, and if that's you, than go ahead and let us know how to use the package. If I happen to create any library for React I'd be happy to build it in top of it. Good luck to us :)
My thoughts as well. But for Node the object inspector is not as good.
Probably not because each additional event listener isn’t causing the browser to run more code for each event but if you’re curious then you can always test the performance differences. Browser performance tools have gotten much better over the years.
A callback is a function that is given to another function as an argument, and that other function will call the callback at some point. For example, function myKeyUpCallback(e){ console.log("You pressed " + e.key); } document.addEventListener("keyup", myKeyUpCallback);
I wrote a lot a programs. For example, when I first heard of React several years ago I decided to learn it by first making a decently sized site without it and then made a similar one with it to compare.
I use the browser tools a lot. I happened to run into the other problem, where I found all the elements from the DOM and then rendered stuff. This method was very slow, especially in IE. So i wondered how it worked the other way around.
or `console.dir`
So, does this allow you to distribute a single number crunching task over mutiple frames? E.g., i have a task that takes 50ms but I want to maintain a framerate of 60fps. Can I now do an async iterator that processes the task 2ms at a time and lets other callbacks execute inbetween? 
That shows edge, chrome and safari all support it without a flag. I've tested them, they work fine. If by "dont load" you mean that they throw CORS errors when you try to open the html file in a browser (instead of serving it) - that is the correct behavior as defined by the spec. If you dump the following two files into a folder and serve them (python simple serve, static-http, anything), all three browsers will work: -- index.html &lt;script type="module"&gt; import app from './script.js'; app.init(); &lt;/script&gt; -- script.js export default { init() { console.log('hi'); } } I was mistaken that firefox supported it out of the box, it currently needs a flag.
So how does this work with webpack dev server? Are there any changes required?
This course is just Java, but courses later in the program include JavaScript and other languages. So I was just commenting that I’ve barely scratched the surface on learning programming languages in general. 
Are you trying to do something illegal?
imports are nice I’ll give you that and I’ll argue that the only really useful that that was an actual improvement rather than a lateral move was let block scoping with if statements. Everything else is sugar.
All well and good if you don't have to support IE11 -___-
What did I just watch :)
Also, it’s worth mentioning that it’s not *completely* necessary to transpire ES6 to ES5 anymore as most modern browsers support most ES6 features. Transpilation becomes required when your application needs to support a userbase that are not using the latest browsers.
No, not all.
I'm creating an A/B test, so I don't have access to the actual code of the website, and I need to understand how the price is being sent, because I'll need to change it in a specific part of the site. The product I'm trying to get the price from is this one: https://www.betterskintoday.com/products/cristalles-at-home-microdermabrasion-treatment/. So, it's not using AJAX, it's just a form and using submit to send data. I found out the form data and I'm able to use this form in another part of the site and simply send it to the cart. However, I need to change the price and send the product, with this new price, to the cart. Maybe the price comes from back end and I'll not be able to change it, but I'd like another eye on this to see if it's actually the case. Thanks!
I love js
Polymer is based on web components so follows the"use the platform" philosophy that promotes Chrome. It's not much fun to code in but there's no reason it should lead to problems on a simple UI like YouTube.
You need to try locus. It pauses state whereever it's called so you can inspect everything at that point in time.
Number.isNaN was added specifically to replace window.isNaN because of window.isNaN's unintuitive behavior. The problem seems to be that you're relying on that behavior. Neither isNaN or Number.isNaN are, or were ever intended to be for checking it an arbitrary value is a number or numeric string. They're for checking if a value is the specific special value `NaN`. You need a special function for that because NaN is defined such that NaN !== NaN (all comparisons with NaN return false). I can't quite tell what the intent from that screenshot is, but my guess is that your trying to use isNaN to tell if that value is a number or numeric string. The global isNaN has additional behavior that adds to the confusion and makes it seem like it works to check if a value is numeric or a numeric string. Before checking if its argument window.isNaN it tries to coerce its argument to a number. This uses the same sort of coercion rules JS does in other places like `n - str`. It doesn't just coerce numeric strings to numbers it also converts other things. window.isNaN(null) -&gt; false window.isNaN([]) -&gt; false window.isNaN("") -&gt; false If you really want this behavior, it might be clearer to write `Number.isNaN(Number(value))`. Otherwise you should use one of the other methods for checking if a string is numeric mentioned in this thread.
That's functionally the same as `window.isNaN`. If you really want the same coercion behavior as `window.isNaN` then `Number.isNaN(Number(Val))` seems like a good choice as it's much clearer what's happening. If what you really want is to check if a value is a numeric string (and not `null`, `true`, `false`, `""`, `[]` or other values that coerce to numbers) then you should use a different method.
...kind of like the standard `debugger` keyword?
looks cool!! will def. check it out when i have more time later
Thanks!
Looks like a very cool experiment! There's a lot of potential in webtorrent and P2P - it will be interesting to see where this tech goes in the next five years and how it shapes content delivery 
You are probably using eval/function constructor. You should write/download a parser that accepts only arithmetic binary and unary operations and accepts a limited set of mathematic functions. 
Writing 2 lines of code instead of 20 lines that work much slower.
Virus link? Post code in desc
Everyone uses pastebin, Idk how to correctly format code on reddit
- `this.price` and `this.type` are declared as arrays, but you treat them as numbers. For instance, `this.type === 2` will never evaluate to true, because an array can not be cast into a number. Make sure you're using the right data type. - _Assuming `this.price` is meant to be a number,_ `this.price + 5;` does not actually do anything. You need to assign the _result_ of that computation somewhere. Ex: `this.price = this.price + 5;` - If you're actually trying to use them as arrays, you need to use `.push` instead of the `+` operator. Check out the [MDN docs on Arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array). 
Isn't there option to debug node in chrome debugger?
Interesting read. It is annoying when your code doesn't output what you expect it to, but this post helped clear up the issue a bit.
 if (this.post.mentions('jQuery')) { while (true) { this.post.downvote(); } }
It actually has a specif situation that this A/B test will work on. However, nevermind, we're waiting an answer from the client to clarify this. But thanks for taking a look at my problem!
No I need an npm package so I can make an important meeting to improve code stability and security with locus! God damn millennial trying to be productive...
Use aliases, it will save you a lot of time and prevent headaches in the long run. I don’t know why you think it’s weird.
Nice this looks great will try this out!
The [`unhandledrejection`](https://developer.mozilla.org/en-US/docs/Web/Events/unhandledrejection)-Event is supposed to do that, but only Chrome has implemented it.
Exactly :)
Let isDragging = false; // drag start isDragging = true // click event if(isDragging) { isDragging = false } else { // do somethings } 
Every one. But I’m really trying to wean myself off of it.
Why do ppl hate jQuery so much? Cornerstone of modern web dev
Well we don't, we've just moved on to contemporary web dev. Modern web dev was circa 2005-2015
Wes Bos has a pretty good project driven Node, Express, and Mongo course: https://learnnode.com/
Cornerstone of webdev 4 years ago. Encourages bad practices, spaghetti code, monolithic library, most core functionality replaced by modern native functionality, etc.
I beta-tested this course and, even as a React developer, learned a ton. The webpack section alone is worth the price of the course. Scott Hanselman recommended! https://twitter.com/shanselman/status/956599802099253248
I personally would use vue
Only because I was using DataTables.
The best Node/Express Course is Andrew Mead's, the best Mongo course is Stephan Grider's . 
It encourages DOM traversal e.g. with `find()` Also try comparing native JavaScript functions with jQuery functions execution time, then you will see how slow jQuery is. Originally it was compatible with IE6, but if you develop for IE6, then you have a problem
Static pages with a little ajax? Native DOM methods and fetch.
Looks fine.
This is great! I got 4. I kept doing 32bit for the first 3 questions. 
Nope. Its old.
`this`
We do, our boss is a Bootstrap &amp; jQuery fanboy
I'm curious to see how others feel about this concept. There is definitely a special attraction in the idea of decentralization, and I really look forward to seeing the future of this tech.
People who hate on jQuery likely never experienced the web that existed for which jQuery was a savior. It smoothed over so many x-browser issues. It’s what got me started in and development. I suspect like me, many people owe their start in JS development to jQuery.
I hadn't heard of it before so I had a look. To be fair, it seems it doesn't involve attaching a debugger, you just add in the statement to your js and you get a console-like experience at that point. Doesn't look like you can step through the program though. Seems like it's much less than a debugger but could have its use if you a debugger is difficult to attach. 
Huh, looks interesting, especially since torrent/block chain/other forms of decentralized data is already popular, why not apply the same logic to other data on the web? I'd be interested to see how something like this would be used on a larger scale
There are a few ways to do this, but here is one possible way. This should be performed after you have sorted the list in chronological order. You might have to change some field names around and I haven't actually executed this code -- but the basic idea is to use the reduce function to sequentially count the instances and generate a new list. There are a few optimizations you can do, here, but it should be okay for small/medium lists. const { eventsWithCount } = apiData.reduce((accumulator, currentEvent) =&gt; { //retrieve the event's count in the accumulator.eventsCounter object, with the currentEvent's name as the key. If this is the first instance of this name, then we are adding a new key to the object. const previousCount = accumulator.eventsCounter[currentEvent.name]; //Iterate the event count. Note that if the event name was not in the accumulator.eventsCounter, we will instantiate that field with a value of 1 const currentCount = (previousCount) ? previousCount + 1 : 1; //update the accumulator with the new count value. accumulator.eventsCounter[currentEvent.name] = currentCount; //Spread the original event into a new object that also has an eventCount field -- the eventCount field holds the current event count. const modifiedEvent = { ...currentEvent, eventCount: currentCount }; //Update the accumulator's eventsWithCount field. Note that when we return the reduce function, we're only interested in the eventsWithCount field. accumulator.eventsWithCount = accumulator.eventsWithCount.concat(modifiedEvent); }, {eventsWithCount: [], eventsCounter: {}) 
It's a solid plugin and hasn't gone stale. If they eliminate jQuery dependency, I imagine it will have many years ahead of it.
Semantics. Static assets are not js modules to me. So treating them as such seems confusing. But if it's the webpack way then so be it. Better to work with your tools and not against them.
I really like this course by Colt Steele: https://www.udemy.com/the-web-developer-bootcamp/learn/v4/overview I skipped all of the HTML/JS sections and went straight to the start of Express. He does a really good job of teaching the concepts and then walking you through applying them in an overarching site-build from the ground up. Includes Node, Express, Mongo, as well Passport for authentication.
So to get the executable to bring up a jpeg image i type in 'eRepLogo?
Slick slider is the only reason I ever use it.
When I first JavaScript and started to learn JQuery it was amazing. What is wrong with using JQuery?
In a web application, which would you rather do: 1. Maintain data 2. Update DOM when data changes Or... 1. Maintain data
I'm not that experienced so right now I have to go with what is readable. I dislike the 100+ methods JQuery has to do one thing but when it come to manipulating the DOM it's quicker and easier to understand to me. If there is an alternative that is better than JavaScript and JQuery that handles both well and more intuitive I'd use it in a heartbeat.
Well, imagine what will happen if you stagnate and never learn new things because “I already know x”. Why not learn 2016/2017’s most valuable tech skill, React? You can be up and running with a React app in literally 30 seconds using create-react-app. It even makes sense to use for tiny projects. It wouldn’t even take you two weeks to get down, and you’ll have a skill that took me from $11 an hour to a $130k startup job in less than three years.
No, TypeScript is not required for React. I recommend joining https://www.reactiflux.com/ if you plan to learn React. It's an incredibly helpful community.
Why
People who insist on supporting IE at all are the very reason IE is believed to need to be supported.
How about native Fetch or Promises?
They're heavily animation focused and rendering libraries don't really mix well (dom changes screw stuff up). jQuery offers a safe way to make dom changes.
I've heard a lot of good things about Wes Bos, I'll check it out, thanks!
Why not use vanilla js and css?
Sometimes I do, but when the interactive has drag and drop and a few other things its simpler to just pull in jQuery. The client doesn't care - these interactives are built and never modified for its entire life. They just want it done quickly.
This looks pretty cool! I believe this has a lot of potential. I would love to see this applied in large scale. 
Only at work, never at home.
In my experience, the client dictates what browsers and versions they want supported or a percent of the market - and you don't have much of a choice.
I think in today’s JavaScript ecosystem, no one thinks jQuery and JavaScript are synonymous except for the most novice programmers. There are stack overflow answers to JavaScript written with jQuery because it made sense 5 years ago. Do you know what bloatware is? Or are you just speaking in hyperbole?
&gt; No reason to pull in, what like 80kb I mean in all fairness, that's about the download speed/sec of even the slowest internet connections these days.
I'll be honest, I find learning React or other new frameworks extremely demotivating because of the short lifespan of JavaScript frameworks. Like, by the time you can do anything cool with it, FlamingUnicorn.js^^tm just came out and took away every ounce of cool factor of what you implemented using the framework.
I know that's a common meme, but it's _vastly_ overstated. React has been around since 2013, and has been top dog for quite awhile. It won most desired skill in 2016 and 2017 Stack Overflow's employee survey, and has a massive community. 5 years is plenty of length, and it really shows no signs of stopping.
!redditgarlic
Yeah I got 1. Womp womp.
Can you include a readme file if your repo is intended to be viewed by random internet users?
I’ve started shipping native es6 code, with fallback to es5. Es6 is no as or more performant than es5, especially considering the reduced parse time.
Would this be recommended for beginners of Angular/Angular JS in general? 
Nice. Now I just need one of those "works best in Internet Explorer" batches from the mid-90s, but for Chrome instead, so that I can just write with all the new features and ditch the transpiler. Lol.
It seems to me that you’re trying to “reinvent” classes and inheritance with closures. Also, ‘getProp’ and ‘setProp’ are not specific/related to humans, so not having a clear focused API is probably getting in the way of thinking about these things. Abstractions are good—but this is too abstract. Functional programming often separates behaviors (methods) from structure (properties). So let’s thing of a behavior that’s more specific to humans, like ‘celebrateBirthday.’ And instead of attaching this to an object, let’s make it a behavior that anything could use. const celebrateBirthday = ageAble =&gt; { ageAble.age += 1; } Now it doesn’t matter what we pass in (scientist, human, a tree, the universe) as long as it has an age, it can have a birthday. We didn’t “inherit” this functionality, we just used it. JavaScript is a bit funny in that it’s loosely typed, so it’s not hard to share this behavior around. In a statically typed language we’re gonna have to work harder. The only thing we’re missing now is that we can’t affect the _way_ that things age from context. And this gets back to composition. We’d want to _compose_ a scientist with a human as such: const scientist = name =&gt; ({ carrying: ‘nothing’, humanProps: human(name), }); (Again, our API isn’t ideal, because the ability to carry something isn’t exclusive or unique to scientists). But now we want to age a scientist and our ‘celebrateBirthday’ function isn’t doing much for us, because age is a nested prop. We can instead define it as a method like so: const scientist = name =&gt; ({ carrying: ‘nothing’, humanProps: human(name), celebrateBirthday() { this.humanProps.celebrateBirthday(); } }); And now you’re like, but this is just OOP, whaaat? And it’s similar. Again, dynamic typing in JS kind of muddies the waters here. In a language like Haskell or Rust, these sorts of traits are carefully tracked for you by the type system. And it’s not like inheritance, because these behaviors can be selected piecemeal. The human example is still also very classic OOP, which makes it maybe not a great example. Instead you want to think in, what data do in need to represent this thing, and what can it do? When you find commonalities in behaviors, you can use the same method interface, and then one can be replaced for the other seamlessly. This is a pretty tough subject—as such, I’m not sure I’ve given great answer. Feel free to ask questions and I’ll do my best to answer.
Can you provide more information about what you are trying to do? Are you looking for a JavaScript solution?
Good 
If you don't already know Angular and don't have a job where you need to migrate an existing code base, I'd say you're better off just learning the new Angular stuff and not bothering with AngularJS.
I still use it for small projects, or for first drafts where I'm not quite sure what I'm making yet. 
BONJOUR DAVID À À À DE
When to youtube to learn about [ES2018](https://youtu.be/s-G_RZ4RJLU) .
Goddammit u
I just submitted version 1.0.3 to the App Store which includes drag and drop for rearranging currencies. I'd imagine it's accepted into the App Store by Sunday, so look for it around then : )
What frameworks did you have this experience with?
Fetch is [only supported for 77% of users](https://caniuse.com/#search=fetch), fyi. 
I think everyone agreed they will do SSR for SEO. This makes your website faster, more accessible (I'm not sure text readers can process dynamically modified DOM) and compatible with noscript and legacy browsers (at least partially). I don't think we'll ever see JS being used too much for SEO ranking (not positively anyway) simply because evaluating scripts is slow and dangerous and static analysis doesn't get you very far.
The dot-syntax is what got me I was like no this can’t be real.
First solution would be to use whatever the database host has for viewing and editing the data. Usually these are really poor since it's expected you use a management tool. Never use 3rd party management web services for databases. If they exist, which I'm not sure they do, you still have to give them the credentials with full/partial control to your database. That's a security big no-no. Second solution would be to install a management tool for the database on his computer. Some can be quite technical so make sure the GUI is not very complicated if you go this route. For a third solution, go with a CMS generator for your website. This will generate some pages for the management of your database and you attach them to your existing website. Then you give his admin account access to those pages and that's it. This is a bit more involved but it guarantees nicer UX. I usually roll my own CMS-es but you could try something like Cody CMS for NodeJS (never tried it myself though).
I can already imagine the debugging !fun!
There are many different views, but the real difference is the idea that a framework _calls your code_, while you _call the code_ of a library. This can be stated in various ways, but the underlying idea is always similar. A framework gives _structure_ or adds _architecture_ to your code. This means that you have to code in a certain way ("write classes", "write functions", "write objects with this interface"... "and pass them to this function/constructor/whatever") to work with a framework. The idea is the same: That some parts of the framework will be in charge of how or when to run your code. Some people erroneously focus on other aspects, such as size or scope, but it is generally accepted that neither of those really mean much (i.e. there are huge libraries, both in size and scope, and small frameworks, both in size and scope).
Woah that global variable thing sounds horrible. Why not give the ability to explicitly reference a global for example, like PHP: ```$GLOBALS['a']```. Because sure, now people won't accidentally redeclare globals, but what if a library wants to change it's global variables? As soon as they release an update it breaks everyone else's project who used those variables thinking they were safe, which they were, until they were not.
Is this what you're trying to do? // -- Human.js -- const Human = name =&gt; { this.properties = { name, health: 100, energy: 100, hunger: 0, age: 30 }; // Let's wiggle the age a bit so we're not fabricating clones { this.properties.age = Math.round(Math.random() * (65 - 16) + 16); } this.changeProp = pair =&gt; { this.properties[Object.keys(pair)[0]] = Object.values(pair)[0]; }; this.getProp = key =&gt; { return this.properties[key]; }; return this; }; const scientist = name =&gt; { Human.call(this, name); // inheritance let properties = { carrying: 'nothing', }; this.properties = Object.assign(this.properties, properties); // add new properties return this; }; const Joe = scientist('Joe Mazzini'); console.log(Joe.getProp('health')); console.log(Joe.getProp('carrying')); I must mention, this is not OOP. Since you're using ES6, wouldn't it be easier to just use correct class syntax? Like this: class Human { constructor(name) { this.name = name; this.health = 100; this.energy = 100; this.hunger = 0; this.age = 30; } // properties get name() { return this.name; } set name(newName) { // do whatever, but don't set this.name // since it will call this function again // =&gt; infinite loop } // regular methods talk() { console.log("Hello there, I'm a " + this.constructor.name); } // you get the point } class Scientist extends Human { constructor(name) { super(name); this.carrying = 'nothing'; } } let Joe = new Scientist("Joe Doe"); Joe.talk(); 
The big problem here is javascript execution. Crawlers dont execute js (very well, i will talk about it later). So if you want page to be indexed, you have to render it server side somehow. Google somewhat execute javascript, but its not even nearly to be as reliable as you would want. If you want to rely on this, you would better to test intensively to what google exactly sees on your js page. And even then, they can change this feature in every moment. Imho, not worth it yet, better do server rendering if seo matters for your page. (disclaimer: i am doing mostly internal spa apps, where seo isnt important)
os-js is super overkill, interactjs is very barebones and not really window/popup-related, jqueryUI looks interesting and I'll check that one out :) I guess doing a little more research I'd say the term I'm looking for a "non-modal" windows/dialogs
Just as an FYI, that video is an April Fools joke. Those are all horrible ideas in the video.
When does Nodejs 9 switch to v8js v6.4?
&gt; Is this what you're trying to do? Well, yes, but not really. That's one way of getting the job done, but not what I'm really asking. Don't get me wrong but it's in the title and the OP that I'm trying to get the whole composition/concatenative inheritance right :P &gt; I must mention, this is not OOP Well, it's not functional programming now, is it? Haha. Jokes aside, your first snippet it is indeed OOP. I have the feeling though, especially with your next comment &gt; Since you're using ES6, wouldn't it be easier to just use **correct** class syntax? that you believe `OOP === classes`. OOP is **a** way of thinking about programs, a paradigm. And using classes is just **a** syntax for working OOP. I'm adopting composition as yet another classless way to code in JS for a project. I don't like classical OOP as a whole, especially for the taxonomical problem. But particularly in ES6, that problem is added by some other issues that stem from the fact that ES6 classes are just sugar. Even if they'd done right (like I think they are doing in next releases), mmnah.
Firebase has an editor but you will give your client full access to everything that way
You can already implement that yourself: const conflict = true { const conflict = false console.log(conflict) // false } Fixed by: const conflict = true const globals = { conflict } { const conflict = false console.log(globals.conflict) // true }
Not planned yet it seems: https://github.com/nodejs/node/pull/17489#issuecomment-358586071
Oh, I missunderstood what you were trying to do. The way you spoke about inheriting properties sounded like OOP-talk to me :D. But I'm still confused about what exactly you mean through composition and aggregation. Do you intend to build something like mixins or maybe typeclasses? What properties do you expect out of your composable elements? I agree OOP !== classes but the de facto is that most environments have them pretty closely tied.
That was great, thank you. It seemed like weird concepts, but seeing those tweets by high profile JS developers convinced me that I've wanted those new features for years and that I should refactor all of my code ASAP.
On my personal projects - I stopped transpiling last week. Chrome, Firefox and even Edge continue to work fine directly with ES6. Obviously business users will need to cater for older browser users for a while, but "eventually" isn't as far off as some may suggest.
&gt; include some polyfills... it's just dumb. Side note, I see websites still including Polyfills for IE5. At some point, damn, people need to move forward and drop support for certain things. I'll guarantee half those websites don't actually work in IE5.
[removed]
Google claims that by mid this year their crawling engine will have no problem indexing SPAs site, and you won't need a static version anymore https://webmasters.googleblog.com/2017/12/rendering-ajax-crawling-pages.html Of course, OtherSearchEngines&amp;trade; are available
Is there a jQuery plugin for that?
Because DOM sucks hard and Crappy Style Sheets suck even harder.
You could do that with Vue.
&gt; There are many different views, but the real difference is the idea &gt; that a framework calls your code, while you call the code of a library. This is oversimplification. Libraries like jQuery or Rx also call your code when you pass callbacks to them, but does it mean they are frameworks? Redux? The same principle. You create reducers and then Redux calls them. React also call your code when rendering component but does it mean it is framework? Maybe. Maybe not. It depends. I think it's not really important to draw sharp line between library and framework... it's very subjective. For me answer to question "whether X is framework or library" lies in "how much your app is dependent of given technology" or "can you safely remove X and replace it with Y?". If your app heavily depends on X and it would be hard to switch from X to Y, then X is probably a framework. Sometimes very same tool can be used as a library or framework. For example React. If you keep all app state in components, make AJAX calls from components, put business logic in components - then React is definitely a framework for you. You can free of "frameworkness" by separation of concerns. So instead keeping all in React you could delegate many parts of your app to other layers. This is flux libraries are for (including Redux) So instead of using React as a complete **framework**, you could use it only as rendering/GUI **library** and delegate all other tasks outside the React realm. On the other hand if you use Redux for everything - i.e. you keep state in Redux store, make AJAX calls from its middleware, put logic in reducers or thunks, use Redux Saga for complex flow - then your app depends heavily on Redux and its ecosystem, thus Redux is your framework. Is it bad? It depends. Frameworks are not always "bad". More often than not if you're doing something larger you're not using some kind of framework, you end up with half baked in-house frameworkish solution anyway. Because there is a need for **some kind** of structure. When I write alone I prefer glue libraries together or make some kind of "framework" myself but when I jump in existing project made by someone else I would prefer jump into well established framework than into some kind of in-house solution with poor documentation. 
I fixed a few more bugs in [json-dry](https://github.com/skerit/json-dry) and released v1.0.1. I'm kind of surprised about how "many" stars I got for this project, compared to my other project [janeway](https://github.com/skerit/janeway) (Which took more work and I find a bit cooler, but anyway :)) Oh, should anyone have any thoughts about [issue #2](https://github.com/skerit/json-dry/issues/2), do share!
April fools video.
Just vague description that change in meaning every once in a while. I wouldn't break my head over it. The current understanding is that a framework denotes a toolbox of some sort with utilities and implements that are supposed to get the job done while a library is more like a pattern or basic structure that you have to fill out with implements that aren't baked in. In the real world it mostly doesn't matter one bit. Even the biggest "do it all" frameworks have so many open gaps that you fill by pulling in third party dependencies. It's just a matter of preference in the end. People call Angular for instance a framework because it ships all kinds of abstraction for data fetching and so on. They call React a library because it basically defines a view, while you'd either use browser api (fetch) for requests or third party helpers (axios?). But again, even in Angular many people load things on top, like redux or ng-redux, because they're unhappy with the presets they get.
I think the bigger problem with it is how much people used to like it. If you develop for IE 11+ there really isn’t a good reason to use jquery over vanilla js anymore. It’s benefits WERE amazing, but it is way overused today imo. That’s why people dislike it.
If you develop for IE 11+, why use it?
Er, Bootstrap isn't a JavaScript framework. Not sure why you're comparing them. I also don't really see how it changes things that you're using Python on the backend, but I'll say that [Vue](https://vuejs.org/) is generally considered the easiest to learn of the modern frontend frameworks. 
As someone who has experience with both Python and JavaScript (and love them equally) I'd never want to develop web front-end with Python.
Part of this problem is legacy tools from the days when Chrome and Firefox didn't even exist, and others from that transition period between 2006 and 2011 where the web we know today was just being born. Unfortunately, most clients wouldn't take kindly to being told that they need to update their systems for more reasons than being able to use systems that are being created today.
Sometimes you walk into a project that is for modern browsers and already well established, and it uses something like backbone. A project can be well organized with jQuery. I wouldn’t use it in a brand new project but it’s not terrible to work with.
I tried doing something similar about a year ago (as I was planning on mapping official road speeds to contribute to open-source mapping projects) and found the same. I believe that it used to return a value, but no longer does. I think most developers use their own calculations to work out speed now by periodic polling of current lat,lng. One such function that might assist you along the way is the Pythagoras Equirectangular function; // Used to calculate distance between 2 locations public PythagorasEquirectangular(lat1, lon1, lat2, lon2) { lat1 = this.Deg2Rad(lat1); lat2 = this.Deg2Rad(lat2); lon1 = this.Deg2Rad(lon1); lon2 = this.Deg2Rad(lon2); let R = 6371; // km let x = (lon2 - lon1) * Math.cos((lat1 + lat2) / 2); let y = (lat2 - lat1); let d = Math.sqrt(x * x + y * y) * R; return d; } This is 'as the crow flies' in that it calculates the straight distance between 2 locations. From this, you could poll every second by storing the lat1,lng1 as their current location as a (*shudder*) global variable and then each time you poll, pass those values as lat2,lng2.
You could just use the same image that was used for onload detection, instead of creating a new one: https://jsfiddle.net/ha3L125p/6/
I would say that depends upon what browsers you have to support.
If you’ve been around the block a few times, I agree. But if you are just starting out it still simplifies a lot of stuff and makes it approachable in my opinion. I don’t use it personally but I can still see it being really nice for newbies.
https://carbon.now.sh
That is because the minute hand updates every minute once you open the page. You mean it should update at :00s mark? That's a bit of work for not much.
Looks to me like they're merging code in and working on it. Only time will tell, but it looks like it will be merged in.
appending an image to the body like that will throw off the layout, this code is meant to be used as a library in Reactjs I just re-wrote it in vanilla JS so it's easier to debug
I will delete it here I guess since I don't think I did a good job explaining it in vanilla JS and re-ask it in reactjs section
Ended up watching it all.. 
As long as you don't have to support IE8 (and why the hell would you need to, it isn't even supported by Microsoft anymore. Supporting 9 and 10 is also increasingly questionable) you can rely on having a good base of ES5 features, and as such you can use Babel with confidence. Maybe add eslint-plugin-compat for extra safety. jQuery was an amazing resource but really, there isn't a good reason to keep using it now, it has been superseded by better tooling and you would be missing out on so much of that by continuing to use it.
It really doesn't matter what your ultimate implementation is. The issue can be avoided. If you're using `new Image()`in React then once it loads, instead of having the new image have the styles applied immediately, only apply them upon an `onLoad` event... ? Or just entirely avoid using `new Image()` and just use onLoad on the actual &lt;img /&gt; in JSX, and create CSS that hides it until necessary.
Here's a fiddle of a react version https://jsfiddle.net/jk1732hsu/69y7agoo/1/ Please show me what you mean 
IE9+ I would say even. For me that is the point when jQuery's killer feature, offering a unified and predictable API across browers, because less essential.
Why would someone starting out want an abstraction that prevents them from learning the underlying mechanics of the language? This is kind of like newbs learning React instead of Javascript itself, except React encourages useful design patterns. They would just need to re-learn the fundamentals anyway, and IMO Javascript is friendly enough on its own these days (as long as you have aggressive linting to keep you away from the bad bits).
It honestly sounds like something along the lines of Google Web Designer might be a better fit for your use case.
Just out of curiosity, what about Python turns you off for the frontend?
Frameworks call your code, libraries are called by your code.
&gt; https://jsfiddle.net/69y7agoo/5/ Problem is that this is supposed to be a simple library wrapper around an image element, i.e. it just displays an image nothing else, this allows the user to give it a className and style object and expect it to work just like a regular image and if I use div's this would mess up the layout. 
This is oversimplification. Libraries like jQuery or Rx also call your code when you pass callbacks to them, but does it mean they are frameworks? Redux? The same principle. You create reducers and then Redux calls them. React also call your code when rendering component but does it mean it is framework? Maybe. Maybe not. It depends. I think it's hard to draw a sharp line between library and framework... it's very subjective. For me answer to question `whether X is framework or library` lies in `how much your app is dependent of given technology` or `can you safely remove X and replace it with Y?`. **If your app heavily depends on X and it would be hard to switch from X to Y, then X is probably a framework.** Sometimes same tool can be used as a library or framework. For example React. If you keep a state in components, make AJAX calls from components, put business logic in components - then React is a framework for you. You can free of "frameworkness" by separation of concerns. So instead keeping all in React you could delegate many parts of your app to other layers. This is flux libraries are for (including Redux) So instead of using **React** as a complete **framework**, you could use it only as rendering/GUI **library** and delegate all other tasks outside the React realm. On the other hand if you use Redux for everything - i.e. you keep state in Redux store, make AJAX calls from its middleware, put logic in reducers or thunks, use Redux Saga for complex flow - then your app depends heavily on Redux and its ecosystem, thus Redux is your framework. Is it bad? It depends. Frameworks are not always "bad". More often than not if you're doing something larger and you're not using some kind of framework, you end up with half baked in-house frameworkish solution anyway. Because **there is a need for some kind of structure**. When I write alone I prefer glue libraries together or make some kind of "framework" myself but when I jump in existing project made by someone else I would prefer jump into well established framework than into some kind of in-house solution with poor documentation. 
&gt; If your app heavily depends on X and it would be hard to switch from X to Y, then X is probably a framework Sorry, that's a terrible definition. For instance most web games depend on WebGL and it would be impossible (not just hard) to switch to anything else (largely because nothing else exists in that niche) but it would be ridiculous to call the WebGL API a framework. Like /u/ugwe43to874nf4 mentioned, the distin And speaking of APIs, you're also misrepresenting what inversion of control means. Libraries (and frameworks, since they consist of a library or libraries) expose an API that you code against. The fact that JavaScript is a language that treats functions as first-class objects does not change the fact that those callbacks are simply arguments you pass when _you_ call a method from jQuery's or Rx's API. You calling the code also doesn't mean that libraries are completely unopinionated about the way you write that code (on the contrary, even the simplest function is opinionated in the arguments you can pass to it when you call it). Let me point to an actual, clear-cut framework (perhaps the quintessential framework): Rails. If you'd ever used Rails (or a JS framework like Ember or Meteor), there would be no need to point out the distinction between a framework and a library. But I'll do that anyway. 1) **Rails is opinionated as _fuck_**, all the way down to _where_ you can put code. This isn't a stylistic convention. Your models go in `app/models`. Your controllers go in `app/controllers`. Your views go in `app/views`. Your routes go in `config/routes.rb`. Your _view_ helpers go in `app/helpers`, and are different from _controller_ helpers, which go in `app/controllers/helpers`. Sass files go in `app/assets/stylesheets`. Coffeescript goes in `app/assets/javascripts`. And so on. If your code is not in those folders your app literally doesn't work. If you put a JS file in `app/assets/javascript` it doesn't exist as far as Rails is concerned. As you might have gleaned from the folder names, it forces you to write your code in a certain way - MVC (and tons of other design/architectural patterns, like the facade pattern) or bust. 2) **Rails does a lot of "magic" around the code you write**. This is what people mean when they say Rails _calls your code_. It's far, far from the same thing as passing a callback to a library's function that it executes at some point in the future. When you write a Rails app, you never actually connect all the code you've written up together. There are gaps you don't fill, things you don't write code for. Things like importing, for instance - Rails automatically imports everything in its predefined folder structure everywhere else. Declare a model class and you can use it anywhere without `require`ing it. Or how the MVC architecture is handled - declare an instance variable in a controller class and it's immediately available in the ERB template for the associated view - which _you_ never actually associate with the controller apart from giving them the same name. And so on. So here's (IMO) a better test: **If Y exposes the exact same API that X exposes (functionality wise), and is aliased to X, would that break your app? If yes, X is definitely a framework. If no, it's most likely a library.** React is not a framework, as evidenced by all the React copies with drop-in pragmas for `React`. Neither is jQuery or Redux (which is honestly a deliberately very simple library with a very simple API).
I almost had a heart attack. I thought I was keeping up with JavaScript then realised it's fake.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [mystikkogames/voodoo/.../**tests** (master → 3d17db9)](https://github.com/mystikkogames/voodoo/tree/3d17db9192264a2b302239053d3376e8593d14ae/tests) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dtbmo0z.)
I am in the same situation, but refactoring everything that uses jQuery will takes months of not years, and it can’t stall new feature development in the mean time. We take our wins where we can, by replacing parts with React, but using marionette and react at the same time in the same page can introduce extra challenges of keeping the view and model in sync.
If you need a dead simple all in one frontend framework, then you really can't get any easier than Bootstrap. If you're going to be doing a lot of complex stuff on the client/frontend, then probably be best to go with one of the SPA frameworks like Angular or Vue. Could give the React library a shot as well.
I work with a team of senior devs who all say “when I say I know JavaScript I mean what most developers actually mean: I know jquery” They exist
First project, maybe. But why not just point a starter to a Wes Bos JavaScript 30 Esque course and teach them the right way?
soo.. are you gonna start using `&lt;script type="module"&gt;&lt;/script&gt;`? or bundling is just way more convenient?
Yes, the minute had is supposed to update when seconds get set back to 00... So your telling me, that if you bought a watch, and the minute hand updated from, lets say the 35 seconds mark, and you had no way to adjust it to change at the 00 marker, like all clocks do "are supposed to", that you would be completely fine with that? It's not that much work, when creating the clock first sync it up as close as possible. [HERE](https://codepen.io/seanroche/pen/oEvjgW) is a fiddle to do just that, it's not going to be 100% precise, because it's not running at every 1 millisecond, we give it a bit of a buffer, and this way we are at least only milliseconds off, not seconds.
He writes PHP, that's all the context we need.
It's still very much useful, especially on projects where there's no JavaScript framework present. For instance if you're using a CMS to handle templating, fetching / looping over data, and creating components. jQuery gives you a bunch of cross browser methods like slideToggle, add/removeClass, closest/find. Those prevent you from reinventing the wheel. 
I've found modules nicer during development
Lol!
&gt; syndicating the contents of the site What does this even mean?
&gt; Before that it was inflated imperatively by code (Jquery, Android, Win32, Gtk, Qt) Eh... You have a misunderstanding of MVC. You can implement an MVC design pattern in any graphical toolkit. Just use callback functions and keep your implementation details away in other headers/files. MVC is a style of programming. It's not really unique to any toolkit.
What you are looking to do fits the class pattern and trying to achieve the same without classes is going to be needlessly complicated. Obviously, you can do whatever you want but I wouldn’t expect redditors to get super psyched on pushing you further in that direction
I mean, I get what you're saying - every second matters because what if the page already takes 5 seconds. But isn't this really an argument for not using frameworks, at all, and instead just using the DOM/BOM and native JS functions?
We get content added to our DB, every 5 mins server will check if new content has been added, if there is new content it gets pushed to x, y, and z sites.
These are all built into vanilla js and are super simple to use.
I wish there was more in the post about why Jest is “too opinionated”, I use Jest in many non-React projects and have never found that to be the case. After all, it’s just Jasmine and Istanbul under the hood, no? Am I missing something?
Pretty sure you could a-la-carte. 
&gt; when it come to manipulating the DOM it's quicker and easier to understand to me. This is true, but it's exactly why people hate jQuery. Directly manipulating the DOM an anti-pattern. It is better to manipulate data and use a framework which updates the DOM in response to data changing. That will allow you to write code that's declarative rather than imperative and it will be much more readable and easy to maintain.
When I first started programming I used declarative and strongly typed languages. I like those paradigms better. What frameworks do you perfect? React is one that someone else's suggested to me.
I'm also a fan of React. You'll need a state-management framework as well such as Redux. I'd recommend watching Dan Abramov's egghead.io video tutorials.
Online publishing site, yes?
React library authors are definitely in favor of this, which is why they are refactoring their tests so that they don't rely on internals. This allows other developers to run the React test suite on their own libraries. I've also directly asked two core devs and gotten their approval for the idea. I don't think we need to create any libraries for React to accomplish a standardization path. What sort of library/package are you thinking of?
I worked as an intern in some company... As far as I learned online publication sites have this thing where they make the /feed (ie www.xyz.com/feed) to spit out thier articles in XML (i think).
This isn’t real 
It seems to me the terms get used interchangeably because it can be hard to nail down proper framework *names* anymore due to the growing popularity of modular tech stack frameworks as opposed to traditional monolithic frameworks. People often refer to React as a framework because (as far as I know) there is no proper name for the Webpack, Babel, React, Redux, etc stack, so people just call it "React".
I recently had to deal with a CORS issue using a .net web api 2 project. I tried attacking this problem from any and all angles. Checking headers, http method, the code in the web api config and nothing worked. It turned out to be a configuration issue with IIS and my app pool. My point is this problem can stem from a lot of different things not just the probable ones like missing headers etc 
So I modified your code just a bit to turn it back into a normal function because it's easier for me to understand, but I think it should have the same result. However, I'm getting a syntax error on line 5: function getQuote(myTicker, myExpiry, myStrike){ myTicker = encodeURI(myTicker); var response = UrlFetchApp.fetch("https://query2.finance.yahoo.com/v7/finance/options/" + ticker); const result = response.optionChain.result .find((o) =&gt; o.options).options //syntax error on this line, but Google's script editor is not specific on what the error is .find((o) =&gt; o.calls).calls .find((calls) =&gt; calls.expiration === myExpiry &amp;&amp; calls.strike === myStrike); if (typeof result === 'undefined') { throw new ReferenceError('could not find a corresponding ask-value'); } else { return result.ask; } } Any idea what I could be doing wrong? 
jQuery doesn't prevent anyone from learning the underlying mechanics of the language. It's a DOM manipulation library, not a replacement for JavaScript. 
So if it turns out that `find` isn't defined either, use this polyfill: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find#Polyfill or just a simple `for` loop.
Apologies if I came off as critical—certainly there is some criticism in there, and all is intended to be helpful with as little edge as possible. I think the exercise and the question is great. Trying things is the best way to learn. I think “fixing” the code is likely a case of the X Y problem https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem The issue with the code is much more about how closures work than about composition and js without classes. All that said, I can only encourage experimentation as it really is the best way to learn.
Of course. The more terse my code can be, the better. I'm realizing now that it doesn't really fit in JS but lots of language use shortforms of keywords. Lots of languages uses very short syntax for common keywords.
I write a lot of things. PHP was just the first that came to mind for this topic. I shouldn't have commented I guess, I forgot how toxic some of the dev community is.
What was the configuration in IIS called? From what I hear you saying, it seems like this setting would be looking for the Origin header and actually doing a kind of server-side CORS validation, like since it sees the Origin header it knows the browser supports CORS, so it imposes some policy you have to configure on the app pool in IIS?
The idea is interesting, but I think it's over-engineered compared to the alias approach which works fine. Library authors are already publishing *-compat libraries (like preact-compat), shouldn't the standard follow the community? Any feedback on the stages proposal, I think it solves the problem you're describing as to which API surface area is compatible.
Arrays in JavaScript are objects at their core. In JavaScript you can get/set a property on an object using bracket notation. So you're mixing array access with dynamic property access. The properties of an array are not included in the length. Only the actual elements with a numeric index are included.
Because JS doesn't see `fancy` in this example as an array index, it's just a property of `arr` - setting `arr["fancy"]` is the same thing as setting `arr.fancy`. Array elements, on the other hand, are basically just properties with numeric indexes. And this is what `.length` counts, so only the first three count.
For the same reason why `arr['lenght']` is not included, duuh
I'm trying to figure out if Google Scripts supports arrow functions or not but can't make heads or tails of what I'm finding. Here's a question about [Rhino](https://stackoverflow.com/questions/6701489/which-javascript-ecmascript-version-does-javas-rhino-implementation-implement) and which JS implementation it corresponds with. From what I've read Rhino is the engine that Google Scripts uses. I was able to compile the code by swapping out the arrow functions for normal functions, as you suggested: function getQuote(myTicker, myExpiry, myStrike){ myTicker = encodeURI(myTicker); var response = UrlFetchApp.fetch("https://query2.finance.yahoo.com/v7/finance/options/" + myTicker); const result = response.optionChain.result .find(function (o) {return o.options; }).options .find(function (o) { return o.calls; }).calls .find(function (calls) { return calls.expiration === myExpiry &amp;&amp; calls.strike === myStrike; }); if (typeof result === 'undefined') { throw new ReferenceError('could not find a corresponding ask-value'); } else { return result.ask; } } Now, when I use it in my spreadsheet by using the formula: `=getQuote(=getQuote(A2,Y2,J2)`, I get a type error: TypeError: Cannot read property "result" from undefined. (line 4). If you don't mind, I'd like to talk out what is happening in the code, as I'm trying to learn. If you could just confirm if I'm thinking of it correctly, that would be greatly appreciated! In line 1, I'm defining a function `getQuote` with input parameters `myTicker`, `myExpiry`, and `myStrike`. Then, I'm taking the `myTicker` input and converting it to URI (not sure if this is even necessary, but in my journey in googling everything I found that it may be). In line 3, I create a variable, `response` and I obtain the JSON from the API, which is stored in that variable (as an array?). After that, I implement the code you wrote out. So in line 4, you created a constant `result` which looks at the variable `response` for the `optionChain` nest, followed by the `result` nest. The `result` const then becomes a reference to this data. After that it becomes kind of hazy, as I'm not able to google for how exactly `.find' works since it's an ambiguous keyword with a ton of unrelated results. I'm thinking that lines 5 and 6 are narrowing down what is being searched to `options` from the JSON, followed by `calls`, and then finally looking for the nest matching `myExpiry` and `myStrike` and returning it, which is what `result` then references. Finally, the if/else statement is just saying that if the result is undefined, throw the error, otherwise return the `ask` entity from `result`. Am I thinking about this properly?
In 2012 I found out about socket.io and created a game which I posted about here: https://www.reddit.com/r/javascript/comments/12n725/nodewars_a_silly_js_multiplayer_gameexperiment_to/. Because I was getting a bored with the webapps I was creating with React, I wanted to see if I could recreate that with React, Redux and some other stuff I have been wanting to try out for a while. Source: https://github.com/nextminds/warx Any feedback/suggestions welcome.
Not sure, but I'll look into it.
Python.... Sorry, I couldn't resist :P. I'm a big fan of JS, and don't really like python myself. That being said, once we get to WASM all the things, I'm assuming doing web dev in languages like python might become more common...
So how did you like the dev experience? Was flow more of a help or a hindrance? If you've tried typescript before, how did it compare? How did you like working with RxJS? Was flow complaining when you wrote epics?
There is so much context to solving a programming problem. There could be 1000 different things causing your issue. Architectural issues, API reference issues, typos... Each time you submit a programming problem on the internet you have to include to code you are working with. Otherwise no one can help you.
Currently not behind my computer, that is why I can't provide the code
When you get to your computer you could try posting the JSON response and whatever code is processing it.
I hate on jQuery and have been developing for the web since '97.
Hi man a question i'm a beginner in this site so how i can add help tag to my question Thank you;
It is automatic but you can press on "flair" and select Help
It is automatic but you can press on "flair" and select Help
Good questions. Creating the game with react/redux felt very natural. I definitely experienced flow as a hindrance. I felt it slowed me down more than it should have and introduced a bunch of extra cognitive load. I'm not convinced of it yet, so I'll probably try typescript on a next project. I've only ever typed JS with the google closure type annotations (in comments) in a distant past, this experience wasn't much better. The source is not fully typed (by far) because of this. I'm not giving up on it yet though. It did prevent some bugs and it made me think about things differently. I guess habituation will help there. Figuring out RxJS was fun. I still have a lot to learn there, but will def use it again. Though the large api surface/many possibilities can make it a bit of a timesync when starting out. https://www.learnrxjs.io/ was a great source. Can't remember having any special problems with flow and RxJS.
If you go to this link https://developers.google.com/youtube/v3/docs/playlists/list#usage You can see execute without OAuth. The json you get there is also the json that I get but with other YouTube video links 
Still no. A stack is not a framework. None of those is a framework, and while a framework contains libraries simply putting a bunch of libraries/tools together does not a framework make. Plus Webpack and Babel are parts of a toolchain. A framework is/provides a pre-defined skeleton that you plug your code into to complete an application. A library is something you plug into your application.
Is ES2018 made for programming golf challenge?
IIRC IIS doesn't handle the OPTIONS verb/method by default
It's been a minute since I last configured IIS but the default was only allowing POST and GET
 formData.append('data', data) 
You should use `playlistItems` instead of playlists to get the contents of the playlist. Hope this helps!
We know. But it’s the first of only 2 JavaScript related things when you [search ES2018 on YouTube. ](https://www.youtube.com/results?search_query=es2018) 
Yes, aliasing is simpler but it's also more limited: - it only works with bundle builders supporting them, such as webpack; - it doesn't allow an SPA application, with client-side route and code splitting to have different parts of the application using different implementations, while one of them is React. What I proposed isn't a perfect solution, but it would allow a few more options; - it favors React, which is bad for competition. The package could have a simpler API by the way. Something like: import cr from 'common-react'; import dio from 'dio.js'; cr.assign(dio); The code above happens only once in the application, it works like the configuration we currently must add to webpack. Then, using it could be as simple as: import rc from 'react-common'; export default class Greeter extends rc.Component { render(){ return &lt;h1&gt;Hi&lt;/h1&gt;; } } It doesn't look like over-engineering to me, but the alias approach looks like a hack to me.
Nearly everything you wrote is correct. I guess I found the bug: The `fetch` function does not return what you expect. I am talking about this line: var response = UrlFetchApp.fetch("https://query2.finance.yahoo.com/v7/finance/options/" + myTicker); The result is a `HTTPResponse` object [as can be read here](https://developers.google.com/apps-script/reference/url-fetch/url-fetch-app). To retrieve its content, use [.getContentText()](https://developers.google.com/apps-script/reference/url-fetch/http-response#getContentText()). This method returns a string (the JSON data). In this state, the string is worthless, you have to *parse* it into a JavaScript object. You do that by executing `JSON.parse`. Fixed line: var response = JSON.parse( UrlFetchApp .fetch("https://query2.finance.yahoo.com/v7/finance/options/" + myTicker) .getContentText() ); Does it work now? :D
Detailed answer here: https://stackoverflow.com/questions/874205/what-is-the-difference-between-an-array-and-an-object
For/of just requires less “code” if you’re doing a regular for loop along the full length of an array. Less code means less opportunities for errors like flipping a sign or using commas instead of semicolons or putting a semicolon after the incrementor. That said, whether or not it’s more readable is your preference. You don’t have to use it and ES6 isn’t an all or nothing deal. You can mix and match features. A lot of people are using Babel now which transpiles into ES5 syntax anyway. 
The reason of your confusion is justified: This page does not use the actual generator syntax. With the new syntax, there is a large difference between ES2015 (ES6) and ES5. Example from the page (simply not normal): let fibonacci = { [Symbol.iterator]() { let pre = 0, cur = 1; return { next () { [ pre, cur ] = [ cur, pre + cur ]; return { done: false, value: cur }; } }; } } Actual ES2015 code: function* fibonacciGenerator() { let pre = 0; let cur = 1; for (;;) { [ pre, cur ] = [ cur, pre + cur ]; yield cur; } } const fibonacci = fibonacciGenerator();
Thank you for your reply. I meant the bits that include `next:` and `*[Symbol.interator] ` (are they called be generator functions?). Sorry for the lack of clarity 
I made a second edit. I think you didnt catch it: The site you learn from actually teaches generators: http://es6-features.org/#GeneratorFunctionIteratorProtocol
Ah ok, thank you I will take a look. Thank you so much for clearing that up
&gt;If the server does not respond with specific headers the subsequent GET or POST request will still be send, the data still received but the browser will not allow JavaScript to access the response (if you explicitly want to add cookies etc. and the server does not respond properly, the request will not be sent!). Can you provide a source for this? That sounds like a tremendous security hole. If this is true, rogue JS should be able to send an AJAX request to my bank to transfer money out of my account, even if it can't access the response. 
I think you could be a bit clearer about what the underlying cause of the issue is (the same origin policy), and that CORS is a mechanism to solve that in a somewhat safe/flexible way. Also a small typo: rouge -&gt; rogue
Not sure why this is downvoted. The length property demonstrates clearly the difference between numeric slot and property.
For what it's worth, I think a lot of people tend to have a similar initial impression when they start working with type systems. I think they really shine however, when it comes down to refactoring or working with others.
Yes, it is possible. What is the problem you’re having?
WASM. Give me strength. I’m just getting to grips with JS...
Thanks. It worked. Now I can play with more functions.
This is an [old project](https://alahmadiq8.github.io/S3-Routing-Rules-Builder/) I worked on while exploring [drafjs](https://github.com/facebook/draft-js). the project simply converts routing rules in netlify format into S3 xml format. I needed this to write routing rules for S3 in an easy format for the rest of my non tech team at the time. 
Doesn’t that last bit mean that the rogue JS won’t have access to your account though? Since you’d need cookies to access your session, the request wouldn’t be sent.
 undefined The declaration of `var a` is hoisted, so the call to `console.log` doesn't throw an error. Declaring a function wraps the next call and won't get any output without calling the function. If you were to make it an IIFE you would see the set value.
I still feel confused about the whole concept. I’ve read every MDN page and article about CORS, and I already get all the definitions I just don’t understand *why* each header/rule/etc is required. I really feel like I’d need real example attacks against which these mechanisms defend.
that's what CSRF tokens are made to prevent.
Off the top of my head it was managed pipeline mode set incorrectly and something else on the same section 
Thanks for the resource! As for the code, still no dice. :( Now I'm getting the following error: `TypeError: Cannot find function find in object [object Object]. (line 8).` Line 8 referring to the one that starts with `const result`. I'm *assuming* this means that the `find` function is not supported which means I'm going to have to try the alternative polyfill method you suggested a few comments ago, but that's going to take me a while to understand. I'll let you know once I make some progress, thank you for your help!
To put it in a more accurate way, &lt;code&gt;a&lt;/code&gt; is saved into memory during the creation phase. This means &lt;code&gt;a&lt;/code&gt; will output &lt;code&gt;undefined&lt;/code&gt; first. Then, if you were to call the function, you would get 1. Answer: undefined 1
Jsonp
You can of course look into the polyfill but it is "spec compliant" which means it has many checks and additional stuff which is not really necessary to the core functionality of `find`. Just a quick mockup for replacing `find` with `for` loops: // const e = a.find((p) =&gt; p.x === 0 &amp;&amp; p.y === 0).z; var e; for (let i = 0; i &lt; a.length; i += 1) { if (a[i].x === 0 &amp;&amp; a[i].y === 0) { e = a[i].z; break; } } Now of course, your code becomes very bloated. You could either use the polyfill or define your own find function which uses a loop like demonstrated above or ultimately a hacky and dirty solution: // const e = a.find((p) =&gt; p.x === 0 &amp;&amp; p.y === 0).z; var e = a.filter((p) =&gt; p.x === 0 &amp;&amp; p.y === 0)[0].z; Using the `filter` method and accessing the first element of the result with `[0]`.
So no need to look into Server Side Rendering?
Don't worry about it. WASM is the new Flash. It is a closed sandbox as a compile target, except your source language can be any language that compiles to WASM bytecode. For people who desperately cannot figure out JS they are hoping WASM is a JS replacement since it can be a compile target from any language. The only problem with that reasoning is that WASM is isolated from the page that contains it. When you are desperate enough though, the hope of a replacement is worth more than understanding why that won't ever be a replacement.
I've actually never thought about extending an array by adding fields to it. I don't think it would be very pretty, but is that functionality ever used?
Onload and readyState only work for page loads, not for Ajax calls
I'm in mobile and that's the first onprogress usage i found. Here's the direct link: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onprogress
From what I understand from the part I quoted, even if the actual request doesn't match the preflight response, it will be sent anyway. 
Did you by any chance put .env file in root folder of the project on your machine?
The .env file is in the api/ folder, which is the root of the express app. As you can see there's a sample.env file there too.
Understood. The contents of my .env file are those same values however. Everything pointing to my local mysql setup. Wonder why its defaulting to Sqlite3
Same happened with me but using java app, and i solved it in tomcat configuration. 
Sorry I made a mistake but I did use playlist item. Copied the wrong URL 
Yes. Cors does not stop this. I’ve tested it myself. The initial request is made. The server accepts it unless it has csrf guards. It’s the browser that can’t read the response. 
By defeul, you don't need the rules - you only need them to protect your users. If you deal with sensitive data, or don't plan on making the API public, you should probably implement an secure CORS setup with ACA-Origin pointing to your only domain.
Sure. Open your console right now, and type: fetch('https://example.com') You will see Failed to load https://example.com/: No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'https://www.reddit.com' is therefore not allowed access. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled. Now, assuming you are using Chrome, you will see the Response tab empty (this is a recent change!) but still see content-encoding:gzip content-length:606 content-type:text/html in the response headers. Firefox will also show the response in the Response tab. This is technically OK because you're making a call with no credentials (unless you shot yourself in the foot and pass any credentials in the URL, not header) - the server is not able to authenticate you and should not perform any dangerous actions.
You really should use a better naming scheme for your variables. Also look into using `const` instead of `let`.
#1 &gt; https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS &gt; the specification mandates that browsers "preflight" the request, soliciting supported methods from the server with an HTTP OPTIONS request method, and then, upon "approval" from the server, sending the actual request with the actual HTTP request method #2 &gt; Servers can also notify clients whether "credentials" (including Cookies and HTTP Authentication data) should be sent with requests. #3 Servers can check the referrer on the request to ensure it's in the whitelist before executing the request. #4 CSRF tokens should also be used.
You might try asking this on [Stack Overflow](https://stackoverflow.com/) and tag it with the `adobe-javascript` tag. I did a lot of work on Acrobat's JavaScript implementation when I worked at Adobe and would help if I could, but that was 15 years ago, so I don't remember too much of it.
The explanation of what CORS is and why it exists is wrong. Its purpose is not to prevent "rogue JS" calling malicious APIs. In fact CORS does not add any extra security to any web site. CORS is a actually a relaxation of the same origin policy, while still giving any server/API a naive way of controlling what websites can access it.
Thanks, I'll update accordingly to make that more apparent. I would however agrue that it provides some added security over not having Same Origin and CORS at all :)
I've figured it out. const env = process.env.NODE_ENV || 'development' const knex = Knex(knexConfig[env]) const db = bookshelf(knex)
Well, there was a way... JSONP. But it was a hacky workaround.
Yeah, I believe this as well. I will push through.
Typical rookie error. The problem is that "associative arrays" is a confusing term. In JS, Arrays are better used as C arrays, i.e. ONLY use them with numeric indices. If you want an "associative" array, use a plain object. Yes, you can add other properties but - DON'T. It's not idiomatic JS and nobody does it. I mean, you can add properties to all non-primitives in JS var a = new Boolean(true); a.what = 'wat?!?'; console.log(a.what); //wat?!? but that's even crazier. 
If you only care about Google, and you believe what they say, and you were only looking at SSR for SEO, no.
Thank you for the tip! I'll post it over there and see what happens. Have a good one and thanks again!
Okay I now got the chance to test the script and unfortunately it isn't working. It throws the following syntax error: "unterminated statement (line 40) at [anon] (Anim:40) internal". And nothing happens in the preview when I tried to replace the original freeze screen script with this one.
In our current project we found it's easier to write shell script cloning "template repository" and doing basic configuration than write Yeoman generator doing the same. 
Thanks for the article, I recently started programming and ran into this issue while making a chatroom. Very enlightening!
 var url = 'http://example.com'; var a = document.createElement('a'); a.href = 'http://example.com'; a.appendChild(document.createTextNode(url)); document.body.appendChild(a); More secure *and* easier.
Testing the limits of my memory here... But I had similar issues and believe it ended up being that WebDAV or some other module was intercepting all of the verbs except GET and POST. So for me or was as simple as disabling the"offending" modules for the site. (The not so simple part of course was identifying them in the first place)
Babel is not Webpack. Use a boilerplate, or learn how to use Webpack.
You're not looking for babel, webpack is the only tool that makes sense in your case. You do use babel, but only as a loader. Webpack is simple, especially in the beginning where your config is just a few lines. 
But this just appends a URL, it doesn't replace the text, right? 
Thank you for sharing the code! Yeah, putting the Pythagoras function will make this prototype way more complicated to code than I originally thought, but I think I have no option. :)
Go ahead buddy! You can do it!)
Yeah, exactly. Yeoman generators are just like any other piece of software: they need to be maintained, which has a cost.
Does that actually help anything? Can a hacker not just fake the domain when sending requests to the API? 
The trick here is in finding valid links withing a `textarea` that will also contain plain text. Yours would work find if you had a dedicated url input that you could directly assign as a variable.
The client is the one who pays you. If he wants to support Netscape Navigator, and he's willing to pay, you just do.
&gt; Its purpose is not to prevent "rogue JS" calling malicious APIs It's to prevent malicious JS calling legitimate APIs and executing procedures on your behalf.
Ugh, yeah, I missed that. That's even worse. Displaying a user's input directly like they're doing is *riddled* with security issues. To do this properly, they'd have to split the text into chunks, linkify only the links, and then properly add the rest of the input in text nodes. Again, while the code would work, it's horribly, horribly unsecure.
please never use this, awful UX
Your browser will not allow you to overwrite the `Origin` header, so he's only able to mess with your requests if he's able to inject code into the original domain. If he has your credential (e.g. session cookie) he can still fake the calls by not using browser at all.
You should never need to use cy.wait. By default Crypress will wait for elements for 4 seconds. Since you need to wait up to 10 seconds, you should adjust the timeout. cy.get("#expected-message-from-bot", {timeout: 15000}) Put the timeout longer than 10 seconds because it can take some time for the bot to respond and send a message to the UI. The maximum time acceptable is up to you. 
Are decorators finally production ready?
Just remember, if you use decorators in code that matters, you will 100% have to change it in the future as the spec changes.
Not sure if it will help but u can use babel-node, so your “start” script would be “babel-node index.js” so you wouldnt need the “dist” for development. You would still need to run the build and use “dist” for production. DONT use babel-node in production!
They kinda became production ready at the moment popular framework authors started using them. These things go as their communities go you know. But yeah they are still in Stage-2 so not really, so the real answer I think is it's up to you. 
Thank you for the quick answer, it works perfectly now!
Released a new version of the [walt-webassembly-compiler](https://github.com/ballercat/walt) v0.2.9 This version marks a big leap in functionality for the alternative syntax for WebAssembly as it introduced basic lambda support, via a customizable plugin system. If you like WebAssembly, JavaScript compilers and working on the bleeding edge web technologies, [the project is always looking for more help](https://github.com/ballercat/walt/issues)! 
Assuming he sticks to using normal browsers. HTTP clients like Postman don't care. 
I’m keeping them out of code until the spec settles down. The spec already changed once and added a bunch of required compat dependencies for people who had already adopted them. 
Exactly. I never rely on yeoman because they are either outdated after a month or they end up shoveling some unnecessary dependency you don't need...like in this case, slack support?
How is this not just subclassing?
it is very different from sub classing. this is generating new classes on the fly by making use of the fact that classes are expressions in javascript. Also notice that we do not extend pre-defined behavior with new our class in the lambda, we are extending our class with the pre-defined behaviour.
Just wondering, what's the drawback of using babel-node in production? I've used ts-node for some smaller projects and it's worked fine. The sources compile once on startup then after that it should run normally.
Various Comments: 1. WARNING: Don't do this. Seriously, don't. 2. If you pass the task, do I get hired too? [Running example](https://jsfiddle.net/x70anu1q/2/)
The book "JavaScript Promises Essentials" by Rami Sarieddiene, published by Packet is a very good read. It also contains a simple implementation.
You could look into Parcel. Point it to src/index.html, and it’ll transpile and bundle everything up for you. It has a development server, or you can just use it strictly as a bundler and use your current node server.
Are you learning how to use Promises? 
there are a bunch of good videos on youtube about javascripts event loop. i think code school and team treehouse had some good vids on it too
I've just started looking into CORS. Will it allow me to access files from a file server as opposed to another site?
It is very powerful and really good at scaffolding. I picked it to write a few internal generators. It got complex very fast and "hard" to add features to. That had more to do with the complexity of my generator than yeoman. In the end I personally ended up with "skeletons" with a few todo's to replace. Personally it works great for me but it doesn't really scale when you want to share with others. I think in the end with the latest and greatest tools/ practices constantly updating it is easier to take an existing project and turn it into a skeleton/boilerplate. Tools like plop can be used along side to enforce code structure and reduce code boilerplate. 
Ahh learning React. Feel free to PM me if you have specific questions or need help. I currently work with React for work and have been for about a year now. 
The mechanics may be different, but this achieves all the same effects as multiple inheritance. For example, multiple inheritance in Python: class Flying: def fly(self): print("I flied!") class Tweeting: def tweet(self): print("I tweeted...") class Bird(Flying, Tweeting): # multiple inheritance def doBirdyStuff(self): self.fly() self.tweet() awesomeBird = Bird() awesomeBird.doBirdyStuff() And multiple inheritance in C++: class Flying { public: auto fly() { cout &lt;&lt; "I flied!"; } }; class Tweeting { public: auto tweet() { cout &lt;&lt; "I tweeted..."; } }; class Bird : public Flying, public Tweeting { // multiple inheritance public: auto doBirdyStuff() { fly(); tweet(); } }; Bird awesomeBird; awesomeBird.doBirdyStuff();
Using nodejs would really help. 
Or use a code mod when that happens. There are tons of options. Refactoring is pretty much life nowadays.
My suggestion is to start by creating a website. Have set goals you want the website to do and what interactions you want it to be able to do. Alternatively, think of a program you'd like to create, and create it in node. If the application needs a GUI take a look at electron.
yea, exactly. purpose here is achieving a similiar effect in javascript in a neat way. only big difference is chain being upside down in this one, but that's part with the 'birdiness' class is about. 
I am also a hobbyist programmer. I belive the best way to teaching yourself another language is to give yourself a project and work on it. Right now I am learning Javascript by using Django to make my own website. So far I've leaned about async functions and promises very well by doing this. Give yourself a project to work on and I'm sure you'll learn very quickly since you already know the logic of programming. Here's the Github repo that I am currently working on: https://github.com/Jarmahent/PLayingWithDjango
Thanks
I have ran into huge snags using type definitions with sequelize, but I haven't ever had a problem writing SQL queries. Next step for me is GraphQL
Languages like C++ and Java require compilers to run, so they require a build time process. JavaScript on the other hand runs more in the model of JIT (just in time). Think of node as your compiler. It will be the middle man between your computer and the code you write. Though node is more like a console application, no GUI... Where electron adds the GUI part. Think of a web browser... Likes take Chrome. There are many layers to chrome to make a website work, but the main 2 parts are the JavaScript engine, and the DOM engine (don't know proper name for this... But think of this as the GUI). The JavaScript engine inside Chrome is called V8 (this is what node is based on actually)... So by taking just the JS engine, and giving it COM abilities, you've basically got a universal language (JavaScript) that can now run on all OS that node supports, without the overhead of 1 beneficiary (most languages have 1 main beneficiary... For example, .net is mainly controlled by Microsoft, even though huge parts have now been open sourced, no one really can successfully produce their own .net). I digress... Like with the age of computing, console applications have a limited use and limited appeal, hence why you need a pretty GUI. [Based on my limited knowledge, as I haven't tried building desktop applications with JS yet] Electron is like having the whole Chrome renderer and JS in one, but without all the Chrome goodness (like bookmarks and password manager, etc.). So you can render whatever UI you want, and have a supporting JS code under it. However, electron is also an executable application, so when you release your application using it, you would then be packaging per OS.
I'm not a huge fan and I would be very wary of using this for three reasons. First, BDD test cases should not be tied to the implementation of how the test runs. e.g., the test step "I pause for 1000ms" should never have a place in your tests. All of that should be abstracted away. Here's a good read about that: https://cucumber.io/blog/2015/03/24/single-source-of-truth Second, you don't gain much from adding this GUI to your automated regression testing but you lose a lot. Personally, I think it would be a lot easier to type: await browser.navigate('homepage.com'); expect(browser.getTitle()).to.eventually.equal('Expected Title') AND, most importantly, you get to decouple your test steps from your implementation even more by utilizing something like a page object. For example, if you write a dozen tests around the behavior of a search bar, then change an ID attribute, you'll have to go in and modify it by hand in *dozens* of places, as opposed to in *one* place. Lastly, you might reach a point where you need to do something more complex, for example taking an action based on some information displayed on the page. You'd be SOL - you either have to extend the software or use something else. And there's no escape hatch to export your tests from this application into its own project where you can edit your code.
This looks amazing.
You can’t. Node.js is what reads your code and executes it. It’s not a compiler to make native executables. At that point you need to bundle node w/ your app if you wanted to share it. And create a shortcut that starts node w/ your script. But why do you need to do this?
IMHO sequelize is trying to be a little bit like mongoose. It has the same style of where queries and similarities don't end there. This is what I dislike about it. That style of API just doesn't fit to SQL.
Hahaha no wonder I picked up mongoose easy as hell. I did notice some similarities. Once I figured out how to set up associations properly in sequelize all of the magic was available to use. Love it so much. I've only slightly touched bookshelf but didn't like collections and everything 
I like mongoose and it's API, but it's designed to work well for mongo, not for SQL dbs.
I'm not sure what else you could need that sequelize doesn't give you. It's highly opinionated so if you like raw SQL you'd hate it. But I haven't found something I couldn't do with it 
Sure you can do anything with it. I just inherited a project where instead of using ORM features of sequelize, they were doing raw SQL queries using sequelize. Resulting code is not readable, not testable and very verbose. I might have a grudge against it :D
Lmfao they must have butchered their schema definitions and associations. The new sequelize cli is fantastic. Loading models is ridiculously easy 
Is this 2013?
This doesn't handle the "track pre existing requests" requirement
You didn't answer my question. &gt; If I home brew ruby on rails using a handful of independent ruby libraries, is it not a framework? I didn't ask "If I home brew ruby on rails without inversion of control or strong opinions about its intended use, is it not a framework".
1) The best way to learn is building projects. Consider Free Code Camp for project ideas. 2) It is completely okay to rely on old projects and copying code over. It is also completely fine to Google how to do stuff. It will take a long time and a lot of people active before you can just write whole programs from scratch without any help (and it is often unnecessary to do so). 3) The deeper you get, the more you will become involved with the standard tooling involved with front-end JS development (frameworks, bundlers, linters, transpilers, etc.). This is referred to as JavaScript fatigue. Do not let this stop you from continuing to improve. You will understand everything with time but you must persist. I hope this helps, and good luck. 
I will, thanks!!
I will thanks for looking!!!
If you have a way to make it better by all means submit a pull request 
1 + 1 = 3; quick maf
Well usually the rule is never copy a line of code that you don’t completely understand. If you have a project that contains code you do not currently understand, I suggest you go find out what it’s doing. You can find plenty of projects you can code along with with a google search (scotch.io comes to mind). But in my opinion, following something along defeats most of the fun. You will learn the most if you adequately describe the problem that your project is trying to solve, then lay out very detailed steps that will get you there, all while using Google and any other resources you like (including looking at how other similar projects do the thing you’re trying to do). I highly recommend Free Code Camp for a fairly structured approach. 
As a games developer turned web developer and having dabbled with WebGL, this is really cool. I also really loved shader forge, I remember when it first came out it was a game changer in Unity. Look forward to seeing the final product.
I use render prop, easier to manage and also test.
Most efficient way is through a mentor. Doing projects is absolutely necessary. When I was learning I made games cause that's what I was into. PhaserJs is a great JS game engine with 100s of examples. 
I used codecademy for my initial learning of JavaScript. It's a slow burn, and sometimes you can feel like you're not learning stuff that will take you somewhere. However, get the basics as well as you can before going forward. After that - even before, actually - I used a lot of jQuery to manipulate elements on the page. Nowadays, it's a world of APIs and one page applications, so there are frameworks and libraries for that. Maybe you should consider learning to code server side as well - maybe Node.js, but I'm a PHP guy myself. That said, jQuery is still a valid tool that will get some stuff done when you need it the most - stuff like sliders, wisiwyg editors and such. Again, get the basics as well as you can before moving forward, and you'll have a smoother time learning the other stuff. The JavaScript community is really accepting of newbies, and you'll probably find most of your answers on stack overflow. Coding is hard at first, but as you get better at it, you'll feel awesome doing it, so don't give up.
That's not helping me out.
&gt; What makes a framework more than a collection of libraries used together to build an application? That question has already been answered. With a framework there's inversion of control and (less importantly) opinionation. That's what makes it a framework, not the number of libraries in it. The plural of library is not framework.
"Development environment" for node apps? Install node and run it. Why is this guide necessary?
A callback function is just a function that you pass to and called by another function function outerFunction(callbackFunction) { callbackFunction(); // call the callback function } function cb() { // this is the function that we will pass to outerFunction } outerFunction(cb) // we pass cb to outerFunction We passed cb to outerFunction then outerFunction invoked/called cb. That is all there is to callback functions.
Personally I gain most insight into why/when to use something only once I fully understand how it works internally. Unfortunately I have to fight this urge and rely on a more general, higher level understanding with more stuff otherwise I’d never get anything done.
Build something you would use. Or build something other people would use. You can use JavaScript to build websites, web apps, progressive web apps, mobile apps, desktop apps, and even program IoT devices and robots. Also, start looking for tools when you find something is being redundant or a pain to set up. Lots of useful tools out there.
I tried looking into games but it just doesn't seem JavaScript has any places where you can find game development apart from snake.
I Will look him up tomorrow, I was trying to find someone who makes programming tuts as some people makes them boring for me personally 
Sorry! Totally forgot to mention I was using Google. So I changed the script to match the range.sort and I was able to run it without any errors but the sheet isn't using the script. I set up the trigger **run OnChange --&gt; from Spreadsheet --&gt;On Change** but still no luck. Is that the correct trigger?
Out of curiosity, why Babel instead of Typescript? TS doesn't add any more overhead or complexity than Babel, and the type assertion really does save a shitload of development time.
I did a bit of php for inputting stuff into database but that's about it. I'm going to try and master JavaScript side of things first then move to php and get the basics sorted there. People advised me to learn JavaScript before using tools like jQuery so I don't become stuck. I got the most of the basics set up to be honest main problem for me when I see a function and it has about 200 if statement and it really confused me so I must learn what every line getting run in the if statement does. 
Yeah a few suggested that. I already tried udemy but it's really not my way of learning I don't think. 
I didn't realise JavaScript did a lot of those, thought c++ and all that stuff are for apps, robots? How would be the way to approach it from that angle because I only have seen it on website 
Phaser is fairly straight forward and you can make pretty much anything short of a multi-player game with the core libraries. I have used impact previously but it's for pay and it's really similar anyways. If you have an idea I can give you guidance about what steps to take. 
&gt;type definition Ehmm we are talking about JS here bud
I did code academy free stuff then started trying to build websites. Listen to Douglas Crockford talks on YouTube even though you don’t understand them. Read up on MDN JavaScript for reference, avoid W3 schools. Try to apply “functional JavaScript” style. Read up on functional style and try to do that. 
Also note that there is a whole sub devoted to learning JavaScript: /r/learnjavascript 
Sorry, but I'm not familiar with Google Apps scripting.
Oh I know, I wrote the current Babel transform :) Just never hurts to mention since there will eventually be a time where it won't work on the newest Babel version.
This seems unnecessary as it's fairly pain-free already. It's should be npm install --save express to be pain-free in the future...
Plus they are stage 2 and all the current transforms for them still use the stage 1 version of the spec.
Yup! Experimental stuff is awesome, but I feel like a lot of the time users don't stop and think what that can mean for their codebase in the longer term.
If you're starting now, you literally never need jQuery. * If it's simple enough that you don't need any libraries, native ES6+ is good enough. * When you get into needing a little extra, libraries like React are the for you, with options like Preact once performance becomes a priority.
 const orderedArray = []; for (let id of idOrder) { orderedArray.push( person.filter(person =&gt; person.id == id)[0] ); } Things to note: - a new array is created - a `for ... of` loop is used to iterate over each id in the id array - on each iteration, a filter (looking for matching ids) is applied to the persons array - the double = `==` is used in order to coerce types so that numbers (id array) and strings (persons array) can be compared
Web Developer Bootcamp by Colt Steele on udemy is decent. Wait for sales though. 
Okay I get it now, thanks 
If you have some spare money to spend, I have been watching courses on Udemy which typically are tutorials on building some pretty sweet applications. Some udemy courses can be expensive but if you check frequently , quite often they have sales where you can courses for like $20. Even free content on youtube is very helpful. A channel I would reccomend is Traversy Media. I am a person that learns by seeing and doing so watching these tutorials and having what is being done explained and also then doing really helps me learn.
Just started myself too! Looking forward to all the replies :)
Spec should be fairly settled down when it reaches stage-2, we're just waiting on the babel transform to be finished.
All you have to do is a simple string concatination var url = window.location.toString() + '&amp;autoplay=0'; if (url.indexOf('www.youtube.com') !== - 1) { window.location = url.replace(/youtube.com/, 'hooktube.com'); } else if (url.indexOf('www.youtu.be') !== - 1) { window.location = url.replace(/youtu.be/, 'hooktube.com'); }
Well, that disables autoplay for all Youtube videos. I just want it disabled for embedded Youtube videos and enabled for ones that are shown everywhere else.
Don't. They get given out at virtually every Dev meet or con
i have learned javascript about two months ago, so i can say that books are best way to learn javascript.. ydkjs book series was my first book and it gave me really big knowledge! also i have read couple of books, especially packt publishing javascript books and o'reilly so check them out! about video courses, i was searxhing them for a long time, and i fount that thenetninja and derek banas had best videos for javascript.. 
You can buy github ones on their website https://github.myshopify.com/ but as viscountsj pointed out, you end up getting them at conferences in handfulls. So if you can make it to any webdev conference you'll get plenty.
Fair enough. I haven’t made it to any conferences yet but you make a good point.
https://www.unixstickers.com
Ok I should have read your question more thoroughly. You want to replace 'youtube.com' and 'youtu.be' with 'hooktube.com' and then if the url has '/embed' in it then put '&amp;autoplay=0' on the end of the url. let url = window.location.toString() ['youtube.com', 'youtu.be'] .filter(str =&gt; url.includes(str)) .forEach(str=&gt; url = url.replace(str, 'hooktube.com')) if (url.includes('/embed')) { url += '&amp;autoplay=0' } window.location = url 
While that will work that is really inefficient. That's O(n**m). It's not a bad solution if the code doing this operation isn't run often or on large lists. But if performance matters instead I would reduce the array of desired id orders to a map like let index = 0; let indexMap = idOrder.reduce((map, id)=&gt; { map[id] = index; index++; },{}); let sorted = person.reduce((res, per)=&gt; { res[indexMap[per.id]] = per; }, new Array(idOrder.length)); return sorted; Something like that. Didn't run it so I might have missed something small. But that gives you a big O of n*m instead if n**m at the cost of some memory.
Yeah I though "but, but.. function pointers" the moment he said they were non-existing in C++ Tho FPs are more prominently used in C, whereas C++ developers often nurture a much cleaner OOP style unless they're dealing with low-end and performance critical code.
how do you bootstrap your projects?
I mean, chances are the person you responded to has never actually written a line of C++ in their life I can't lie, reading this sub is a bit hilarious sometimes because of stuff like this.
"Why spend years learning something that can be looked up in a matter of seconds?" -Someone smarter than me. Sorry for not answering your question but I want to stress the point that looking something up on old projects or google something is perfectly fine when you write code. Even senior developers sometimes google the basic things because they forgot or just don't have it perfectly memorized. And to be honest, how often do you write code while disconnected from the internet? But if you want to learn more javacript just write javascript. Do hobby projects, write funny things. Make a tic tac toe game. Also codeacademy is good. Their is also daily programming challenges easy to find if you google ;) Good luck and keep coding
 I haven’t had a chance to dive deep &amp; try it but there are some peculiarities that stick out. At the bottom of your gulp file you’re calling gulp watch a few times where each call is creating\returning a never-ending stream that is waiting for file changes to call the respective series of tasks you provided. Try commenting them out and running again as a quick test to be sure. If that happens to be it then it may be helpful to create separate watch tasks that return those calls to g up.watch.
That means for every user, your server will be creating new videos on the fly? Wouldn't that be extremely expensive? 
In a house a framework would for example be the water pipes. Want to install a dishwasher? The water pipes already built in supports that and all you have to do is use it the way it's supposed to be used. A library on the other hand might be anything that doesn't really have to be tied to the house. Like a coffe machine. The coffe machine brings functionality to the house (making coffe) but doesn't really affect anything else. Doesn't tell you where to store your milk or even that you need a fridge. It does one thing and that is making coffe. Regarding of what house/room/apartment it is in. A framework tells you how to do things and in what way. Like telling you where to put the dishwasher and even decides if the house have support for the dishwasher. A library is often independent of everything else and should not really effect or depend on other parts of the project.
sometimes the line is vague. React for example is often called a library since it does one thing and one thing only (fronet-end view part) regardless of your backend or other things. However it's tempting to call it a framework since it's telling you how to do things and how to structure things. 
it's a buzzword bonaza!
We aight ur Google! First rule of programming: Google that shit. 
TypeScript is very easily adoptable when you know Java Script. It’s got a lot of features from ES6/7 bundled in. I’d suggest taking a quick glance at the TypeScript setup. Most jobs that use TypeScript will also use Angular 2 onwards (in terms of using frameworks) but don’t be surprised if they use React or something alternative. 
Its actually React that they use TypeScript for. So TS is more or less like ES6/7 with types and few extra features like interfacess?
Just print them in near printing service. Fast and easy.
Yepp! React will become even more popular to use with TypeScript when Babel 7 hits in my opinion with @babel/preset-typescript Interfaces, Enums, Modules etc.. 
Yes, you can find lots of materials, tutorials and scaffolding around Typescript for beginning with. I suggest actually building up a build-run process for yourself to see how it goes. It can be painful in the beginning with all the configuration and trying it out, but very rewarding later. Typescript as I see it is another layer of safety for your code, plus a different cost on maintenance (you don't have to think about javascript details, but just fix the type errors, and you're pretty much good to go). If you're writing throwaway code for a home project, probably not worth the effort, and you'll not feel that it's useful, and you'll deem it useless. But try working with a team, involving people from all seniority levels, it'll pay out in days. 
That's what I heard 2 years ago re: object/rest spread...
Either use one of the standard tools like create-react-app or ng-cli, or clone an existing project
Typescript is a superset of JavaScript. Any valid line of js is a valid line of ts. The differences boil down to: 1. Some things that are possible to do in js are hard / impossible to create proper typing for. For those things, if you actually use any of them, you can always fall back to giving a type of "any" and then you lose any benefits ts gives. Like autocomplete. Basically, you won't normally run into those areas but if you do your no worse off than you were using vanilla js. 2. Typescript has some added features. As mentioned above decorators are one of them. Some others are namespaces and enums. It's pretty simple. You aren't *required* to use any of those. So if you don't feel comfortable using a construct that vanilla js doesn't have natively then... just don't use them. Typescript won't force you to use anything you don't want to.
Typescript is a typed superset of Javascript. So you can think of it as: All Javascript is valid Typescript. Typescript is best for teams of devs working in the same codebase to more clearly define how your code is meant to be run. What I like about the compiler is that it can produce very readable Javascript after compilation - this makes a switch to and from Typescript very easy in my opinion.
[removed]
Can someone please help this old-timer and tell me what a "dev sticker" is? Given the subreddit, is it something I need to put on my computer that licenses me to develop JavaScript code? Normally the first thing I do when I get a new computer is to take off any stickers, like the horrible "Intel Inside" that scrapes against my hand on the palmrest. I did make one exception: when I converted my MacBook Pro into a WinBook Pro (meaning I was mostly using it to run Windows instead of macOS), I put [this Windows logo sticker](https://www.amazon.com/dp/B014I1ICX8/) on it to make the conversion official. Is that something like a "dev sticker"? Help me out here please.
&gt; It could potentially lead to a job, so I just wanted to know if typescript is something that I can just jump into and build something Learning Typescript takes like an hour if you are familar with JS type system, but it takes a bit longer to get used to the fact that you can no longer pass freeform objects around.
No, it's not. Every dependency in your `package.json` has it's own dependencies. So total amount of 200+ sub dependencies is pretty much nothing.
&gt; "I was told that's a little too much" By who? Are those people node developers? Did they look at the project? 
Pedant mode: All ES6 is valid typescript, ES5.1 not so much unless you're talking about "strict mode" es5.1. ... for example, the "with" keyword will not work in typescript.
By a colleague with much more software development experience than I have, but one who doesn't work with node, at least professionally.
OK so they were just talking out of their ass: they don't know what is normal and are just reacting to the large number. 
I've seen a couple React projects with TypeScript. It seems that people are adopting it more and more. The other comments already explained the relation between JS and TS, so I'll just add that it's very easy to learn if you're experienced in JS. There are *hundreds* of questions on StackOverflow, so you're likely to have good support too. [This is a good starting point.](https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html)
I'd suggest a different landing page, it is pretty useless for mobile users. 
1) https://watchandcode.com/ - Best Pactise for JS Coding, Debuging JS code with Google Chrome console, Using TodoList as example which is good way to learn programming (saving data, display data, choose data to display, edit/delete data..etc) 2) FreeCodeCamp #JS main theme here, very well structured and good community support.
Man the only person I’ve seen who had more than a couple stickers on their laptop was this guy who thought he was the absolute shit. He thought he was the guy from Mr Robot or something but he was just a shit front end developer who could only do HTML and CSS. He was such an ass as well, like he would put people down to make himself look better and he just stared at other people’s monitors. He even had this stupid Github hoodie that he wore every single day, but his Github page was empty apart from a few forks of popular CSS repos. I never minded the idea of stickers now I just associate them with try-hard tossers who taught themselves basic web dev and now think they’re l33t h4ck3rz. More on topic, just wait until you get given stickers. Usually people have more than they ever want simply from being around tech events and products. Also if you buy a ton just to stick on your laptop you’ll look like a try-hard.
&gt;What the above sort method of the Array object does is just to compare the first element of the array members with each other which will result in the above strange outcome. This is wrong, and doesn't even make sense. By default `Array.prototype.sort` sorts elements based on their *string value*. To sort numbers, you pass in a compare function. var numbers = [8, 94, 1, 10, 3]; console.log(numbers.sort((a, b) =&gt; a - b)); // output [1, 3, 8, 10, 94] I don't usually say this, but [RTFM](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).
Actually sort is not for numbers
2018 - Get good at JavaScript, then learn whatever framework you need for the job you want.
Well now that you explain it, it does. But the site doesn't say pinch zoom and tap, it says mouse wheel and keyboard arrows. 
`Array.prototype.sort` is a generic sort function that works for **anything** as long as you provide a proper compare function. The link I posted explains (in detail!) exactly how to do that.
Because it's significantly easier to program in than any of the other proprietary UI shizzle if you want to go multi-platform. Oh, and we don't condone shitposting. This post has been removed. Thanks for your understanding!
Agree it is not very obvious, normally I wouldn't have figured it out. But for some reason the application intreaged me.
Learn that the language is in a sea change and any search results older than a month are out of date.
Oh look. Another one. 
&gt;css grid
ok sorry
I think that the case of GraphQL is diferent. Lacks some libraries but i think that its the near future
You’re right. I forgot about function pointers. I should have worded that better. I’ll edit my comment.
C++ was actually my first language. I haven’t written it in years though and I completely forgot about function pointers and the like.
You can use type definitions in JS, too. E.g. WebStorm and VS Code can load them. Either way, you need them to make ES3/5-style option objects usable. Without them, you always have to check the source or the docs if you want to know which properties can be used, what their types are, and what their default values are.
Pretty much this. Learn the base language's features, get good with it. The frameworks aren't a long-term commitment, everything can shift in a matter of months. Not so long ago, every damn JS job around here was Angular.lol
this should be in /r/reactjs , much biased
The HTML version is much better. The of the major things when deciding what to use is **readability**. The second approach is much more readable. 
yep I agree, you should know the implications of your decisions before you make them, much thanks for the reminder.
Programming.
Learn how to not give a shit what you "should" learn and lean more towards what interests you.
That's interesting! If I opened this up to user input, would it be possible to inject bad html into an image src? I guess like this: q.png'/&gt;&lt;/div&gt;&lt;script&gt;alert('You should sanitize your input');&lt;/script&gt;&lt;div&gt;&lt;img src='' That makes: "&lt;div class='content'&gt;&lt;img class='item' src='image/q.png'/&gt;&lt;/div&gt;&lt;script&gt;alert('You should sanitize your input');&lt;/script&gt;&lt;div&gt;&lt;img src='' '/&gt;&lt;/div&gt;"; But running this in Chrome and Firefox actually doesn't execute anything. I remember there was a JS function to force execution of script after the page loaded though, so I guess it's not totally safe.
/u/AliceInWonderplace you can also use string interpolation (ES6) to make it cleaner. It also frees up the use of either quotation marks const new_html = `&lt;div class='content'&gt;&lt;img class='item' src='image/${images[i]}'/&gt;&lt;/div&gt;`;
&gt; Tho FPs are more prominently used in C, whereas C++ developers often nurture a much cleaner OOP style unless they're dealing with low-end and performance critical code. Most of the C++ coding I've done has been in an older "C with classes" style, so I've used function pointers a lot in that context. I'm not as familiar with the more modern C++ idioms but I assumed function pointers show up at least a little.
If you need good SEO it boils down to: * SSR SPA * Non SPA * Regular SPA with a non SPA mirror website for robots
Bootstrap uses jQuery. This is probably your easiest choice.
Learn all the popular ones, have example repos for each job you apply for. They're mostly the same aside from syntax. (one exception would be Angular 4's RxJS)
Electron. I love that we're finally able to use html and javascript to write desktop software. It's even got Web Workers, which make it a tad more usefull than nodejs.
Try and explain the similarities of Vue and React to a recruiter. Being "very familiar" I would say is knowing things like events, routing, redux, lifecycle, slots/ng-templates/multiple children in React. Which are all pretty similar across the three front runners (Angular, Vue, React)
These are some juicy features. Looks like all big modern desktop browsers support everything but the regex additions already.
Nice 8+ second page load. Maybe you should learn a remedy for *that* in 2018.
Absolutely. I wish someone would tell me this a few months ago. I’m new in front-end and because of all these frameworks I started ‘learning’ Angular. Didn’t understand most of the things. Now I decided to learn JS from beginning and I’m learning a lot more. Hopefully I’ll start to learn React after some months.
Ugh I was really tired when I wrote that. That should be O(n**2) for the first solution and O(2n) for my solution.
Hi /u/Spanyon, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/joeysanders80, &gt; Note: This post was originally posted at https://dev.to/remojansen/the-most-important-lesson-that-the-success-of-javascript-has-taught-us-4ike Then post the original source. Thank you.
Go on Indeed, type "javascript" and see what is employable in your area.
141 requests. 7.2 MB. And that's with uBlock Origin having blocked a pile of other garbage. I have no idea where all those bytes went. I see about 300 KB worth of content.
Good, however I think this will be old news for most if not all of the readers of this sub.
Oops, my bad!
&gt; All Javascript is valid Typescript. Really? Lots of JavaScript code won't compile. const x = { a: 1 }; x.b = 2; // ERROR: Property 'b' does not exist on type '{ a: number; }'
The HTML one is definitely not the answer. It’s a messy string. The first one means we can easily update the class or other properties of the DOM element (for instance swap out class names for variables), avoid code injection, and promote reusability.
The DOM api was created for a reason :)
You will need to use JavaScript polyfills to make it work tho
That's a good point! I learned something, thanks!
1 - did you try? It will compile just fine, but give you an error to let you know that it can't figure out the type (at least that is what happens on my machine). 2 - you can change your code and annotate it with a type to hint to the compiler that you want to add arbitrary information to the x object like so: const x: any = { a: 3 } x.b = 4; There are better ways ofc that will work once you convert your project to typescript like interfaces etc. Also I might add that learning proper JS is way more important than learning typescript, at first. A static typing system, properly used, can enhance your team productivity though....
No, I just like stickers. Nice try though 
Sure, but why would I write that code? It's in my best interest to use some library for it and not reinvent the polyfill world 
Is it react js ? Or something different...
[vertibar] (https://www.npmjs.com/package/vertibar) - most often used JS "helper" methods. I reviewed code I wrote during last 4 years and put all features/utils I'm missing if I stop using lodash / underscore. Just 3kb not gzipped. 
Which in turn uses that godawful cjs module pattern.
1) Find some good you tube channels that you can enjoy and follow along - and try to do so something in parallel, but just a little different. I like "Fun fun function". 2) As others have said, love the debugger! There are videos about how to use it effectively. 3) A mentor can be invaluable - when you're stuck, you just don't know where to look. It can help to have a real person show help train you to see what you're missing. I find people here on reddit to be a lot friendlier than places like stack overflow - but you'd still want to be able to paste the broken code somewhere you can share it (js fiddle or something), and be able to explain what you want it to do, why you think it should work, how it isn't working, and what you've tried. That just gives any responders context for where exactly your understanding is breaking down. I use the site "Codewars" - you can do little programming problems in graded difficulty - and besides the practice of struggling through to find the solution, you can compare your answers to other people's once you're done. I've learned a lot that way. Of course, there are good examples and bad ones there! But you'll develop the sense of what's good - usually "Oh, that is easier to understand than mine, and isn't as complicated."
Basically what you'd like to do is: - add `hidden` class to second navbar - append event listener that when desired button is clicked (in this case it's button with id `link`) toggles `hidden` class on second navbar Methods that will allow you do so: [classList](https://developer.mozilla.org/pl/docs/Web/API/Element/classList) [addEventListener](https://developer.mozilla.org/pl/docs/Web/API/Element/addEventListener) [querySelector](https://developer.mozilla.org/pl/docs/Web/API/Document/querySelector)
Not necessarily. Our app is used only in chrome, so we ship without transpiling most features. Native async/await is awesome!
the js world has become a react circlejerk lately
FreeCodeCamp is cool. Another is to find a project that you *know you can't do* and then figure out how to do it. I'm helping my friend, Dale, learn JS this way, and he's created a *damn slick* React application. 
&gt; Our app is used only in chrome You mean Chrome OS or Electron?
Thank you I will try that now I will message you if I go wrong :)
I'm pretty sure no one moderates this sub, because in /r/programming these posts get massive downvotes yet here the blogspam continues to get upvoted. At least get a spellchecker.
Callbacks are really, really difficult. But the best way, I've found, to understand them, is to take away the javascript and just focus on what they do. Have you ever done algebra and saw something like this? g(n) = n^2 h(m) = m * 2 f(x) = g(x) + h(x) Basically, you take the x value, plug it into the other functions and return the result. So if x = 7, you'd figure: f(7) = g(7) + h(7) = 49 + 14 = 63; So you know how functions work. What you need to know now is how higher order functions work. So, let's say that you have j(x, y, z) = x + z(y); WTF is going on here? Well, in this case, "z" must be a function that takes "y" as a variable. So, let's say we were asked what j(2, 3, f) is... j(2, 3, f) = 2 + f(3) = 2 + g(3) + h(3) = 2 + 9 + 6 = 17. Javascript allows you to send in functions *as parameters*, unlike, say, the C language. There, you have to use pointers to get the same effect. In C, you have to say: j(2, 3, the memory address of where the function f lives); Now, here's an interesting thing about callbacks. Because you can send in functions as variables, you can use functions to retrieve the value of something that takes a while to execute. const getItemFromDatabase = (query, callback) =&gt; { let WillEventuallyBeData = databaseCaller(query, function() { // this anonymous function is the databaseCaller's *own* callback. })
I cannot agree with you. We have template strings, which can provide a better look what is going on. What OP wanted was to only add src to the image. There is completely no reason to create dom tree with 10 lines. You have to use a proper solution to a specific problem. If OP wanted to manipulate other stuff, like classes, event handlers, then you are completely right. The first solution would be a better choice
&gt; internal enterprise app Electron has caveats of its own. Why not just tell everyone in the company to use Chrome? It's surprisingly common practice...
Sure. As a learning tool, the HTML solution works. I will stress that again: the HTML solution should only ever be used for learning. Never in production. Never for anything besides a one-pager “my first web app”. I even hesitate to suggest as a learning tool, best not to start bad habits early.
Always a great and worthwhile read Dr. Rauschmayer, thank you.
I might be misunderstanding what they are saying but it sounds like it could be said this way: &gt; Given a selector or some other identifier that an Element is loading, call a cb when there is no selector in the DOM. So to do that, we need two things: A dummy DOM and an interval: &lt;div id="app"&gt; &lt;div class="loading"&gt;&lt;/div&gt; &lt;div class="not-loading"&gt;&lt;/div&gt; &lt;/div&gt; with `.loading` being what they are talking about here: &gt; As such we often have to detect for when elements of the page imply they are loading (for instance a loading notification with text or a loading gif). You could walk the DOM tree instead of `querySelectorAll` there or not. However they need you to do it. Next, we write the "If I have a loading element" check: const handleLoading = (selector = '.loading', cb = () =&gt; {}) =&gt; { window.addEventListener('load', () =&gt; { const findLoading = () =&gt; document.querySelectorAll(selector) const loop = setInterval(() =&gt; { const loadingEls = [].slice.call(findLoading()) if (!loadingEls.length) { // content loaded console.log('No loading idicators') stoploop() cb() } else { // content not loaded console.log('loading indicators') } }, 500) // check that our logic works in the future setTimeout(() =&gt; document.querySelector(selector).remove(), 1500) const stoploop = () =&gt; clearInterval(loop) }) }
I learned a bit of C but haven't touched C++ yet, so I for all I knew using pointers for callbacks wasn't a thing. 
cjs got us this far! I feel bad for `node` that all of a sudden the Front-end people are yelling shit about `cjs` because TC39 finally added `modules` to a system that has been hacking them ( cjs, System, require, etc ) together. I like `cjs` far more than `ems` if simply for the "This works in Node with 0 overhead".
Also there are JavaScript polyfills for CSS features. One example would be the :focus-visible pseudo selector. https://github.com/WICG/focus-visible
Some places require IE. I work at an office that has to have IE set and used for this application to work. If you were to use Chrome/FF/anything else, it doesn't have ActiveX and won't work. It's awful.
You _can_ use template strings, but let's face it, even an half-assed solution looks horrible, let alone a proper one: const sanitize = (parts, ...interpolations) =&gt; { if (interpolations.find(i =&gt; i.match(/'/))) throw new Error('Invalid HTML') } // ... main.innerHTML += sanitize`&lt;div class='content'&gt;&lt;img class='item' src='image/${images[i]}'/&gt;&lt;/div&gt;`; // safe in this case, but not generically because HTML sanitization is a b*tch. Don't blindly copy-paste! One can also do a hybrid thing: main.innerHTML = images.map(i =&gt; html`&lt;div class='content'&gt;&lt;img class='item' /&gt;&lt;/div&gt;`); [...main.querySelectorAll('.content img')].slice(-images.length).forEach((img, i) =&gt; {img.src = images[i]}); // use DOM API to avoid risk of HTML injection 
I mean we are in a position with our stakeholders to say “you have to use Chrome” and that isn’t a problem. It stays up to date automatically and we can ship with the latest browser features whenever we’re ready. 
I agree, it's super nice to have just one ultra-modern "browser" to support when you're building an Electron app. If it works in development, it works for all your users. 🎉 However, given that Electron can do so many more things that can be done on the browser (having Node bundled in), I'd classify it as more than a "head fake": * Native menus * Filesystem access * Global keyboard shortcuts * (More) straightforward notifications * Windowless, system tray applications * etc.
Minor nit, "licensed to clients" is not "internal". Internal means only your own company uses it. You probably mean it's an intranet app. &gt; We cant just tell some of the largest banks Ah, banking clients. My wife works with these guys. I'm afraid they're going to say Electron is not an authorized executable on the grounds of some IT/security/logistics objection :(
I struggled to come up with the right word. "Political maneuver"? "Bait and switch"? halp pls.
Nah I'm just a hobbyist with regard to game development and my degree was in games. I like prototyping things and never finishing them haha. [This](https://www.youtube.com/watch?v=Lgx9Tqn_2ss) was my last substantial project a few years back, kinda like a modern version of robocode.
Typescript. 
Huh—when commenting out my watches, it works just fine! Thank you! &gt; If that happens to be it then it may be helpful to create separate watch tasks that return those calls to gulp.watch. What exactly do you mean here?
Chrome is the new IE6
It's a "I can't believe it's not butter" butter.
Because you ain't mr. IT
https://gtmetrix.com/reports/jsdiaries.com/1TwqP7cJ lmao look at this
Basically just wrap the call to gulp.watch in a task so it only runs when desired: &amp;nbsp; gulp.task('watch:js', () =&gt; { return gulp.watch(paths.src.files.js.all, gulp.series('js:lint', 'js:transpile')); }); Then you can run `gulp watch:js` in your terminal to start the watcher &amp; keep it running.
According to reddit's self-promotion rules, which are linked in this sub-reddit's section of rules on self promotion, this post would fall under that. https://www.reddit.com/r/javascript/wiki/index http://www.reddit.com/wiki/selfpromotion &gt; You should submit from a variety of sources (a general rule of thumb is that 10% or less of your posting and conversation should link to your own content), talk to people in the comments (and not just on your own links), and generally be a good member of the community. Looking at the OP's posts its obvious he's just posting his blog regularly to subreddits. And frankly, a lot of the posts in /r/javascript are the same. 
Yes boys, the blog is a sorry state of affairs performance wise. Plugins are a mess and image optimization is rough. Fear not, theres a headless WP API React version coming along. 
there are 5 ways to make money with web dev/javascript . 1) do work for someone else that pays you . 2)make a web site that is so useful that people will donate money to support . 3)make a website that lots of people use with ads on it . 4)make a web site that lots of people use that has affiliate links on it . 5)teach other people to use Javascript in a medium that pays you to do so . 
Your condition is wrong. You’re only comparing `periodicityColor` with `’grey’` You need to compare each operand, not chain them all together with `&amp;&amp;`. It would probably be nicer in a method to keep your code concise. ``` if (valueColor === ‘grey’ &amp;&amp; nameColor === ‘grey’) { // … } ```
When is someone good at JS? 
this reminds me of the Flash Player. For all Flash's hiccups it sure was nice to get a guarantee all your content will look exactly the same no matter the browser.
That's some deal you have going on there.
We provide two versions to the browser based on user agent info (if you know enough to screw with that, you know enough to deal with ES6 code). In addition to being a bit better on the client (smaller code for faster parsing plus faster than some of the workarounds), it's great for development. Breakpointing transpiled generators sucks.
I think there are only a handful of object properties that are “reserved”. All others are fair game. Because these are not keywords it should work (but don’t do it, that’s not cool man).
I'm trying to understand, but it's not really clear what you need, especially the part about setState. Just looking at your code though it looks a bit garbled and the first condition isn't going to work that way. If you have many props, better have them in an array, or at least in a collection. class Something extends Component { propTypes = { style: PropTypes.object, whatever: PropTypes.func, valueColor: PropTypes.string, nameColor: PropTypes.string, lastNameColor: PropTypes.string, // ... } handleClick = () =&gt; { const { style, whatever, ...colors } = this.props if (Object.values(colors).every(color =&gt; color === 'grey')) { // ? } else { // ? } } render() { // ... } } The part where you set `thos.errorMessage.message` also looks odd. If `errorMessage` is something the component displays, it would be better if it could react to state and switch between `none` and `block` inside the render function.
Any String of Symbol is [legal](http://www.ecma-international.org/ecma-262/6.0/index.html#sec-property) as a property name. To be more precise: &gt; [All String and Symbol values, including the empty string, are valid as property keys.](http://www.ecma-international.org/ecma-262/6.0/index.html#sec-object-type)
good and free course for junior js developers, thanks
That plus the fact that for instance there is a ton of code reuse in teh slack web app and the electron app. It's like 1 codebase that runs everywhere.
I like to share [this](https://github.com/kamranahmedse/developer-roadmap) roadmap to programmers asking for suggestions. The boxes highlighted in yellow are usually a suggestion I agree with.
&gt; [2017-02-28] Should be noted that this article was posted almost a full year before the current top post from Twitter that has basically the same information.
Java or JavaSceipt?
Next time `return` with a better joke or the event of your undoing will hoist.
You’ll want a sub for Java then. JavaScript is a very different language.
Alright, thank you for your help man, really appreciate it!
&gt; A survey of developers by technical recruiter HackerRank, conducted in October, found no gap between languages employers want and what developers actually know, with JavaScript barely edging out Java. I found this a bit hard to believe. Java is taught in most CS programs. Java is the go to language of professional institutional education. On the other hand experienced (competent) JavaScript developers are hard to find. To me this indicates that people either claim to be knowledgeable in writing JavaScript but prefer not to for business or that many developers are falsely (or inflatedly) claiming to know JavaScript.
Until someone manages to send a specially crafted SMS to your internal server that sends internal information to the internet. Seriously, it's never a good idea to ignore security.
It’s a project that only runs locally, inside a docker container, and its server reads templates from the file system, with no api exposed.
This conversation is so adorable and wholesome☺️ Also this conversation would've gone much differently over at the Java sub.
Too bad most people are doing their web browsing on mobile devices. * I don’t have any data to back that up, but, anecdotally and from what I’ve read in passing, it feels true. 
I thought iOS safari was the new ie6. 
you can probably just jump in. i use ts on the daily &amp; most of the code i write doesn't even use type annotations; actually, it looks fairly indistinguishable from regular js, with the vast majority of types inferred (you can even typecheck regular js code now with the compiler)
By generating source maps, you can see exactly what you wrote on the inspector ... even with pretty much everything enabled ;) Granted, for a while last year, the source maps did not work in all Chrome versions properly ... but those problems should be in the past now (knocking on wood;)
I don't get it. All the overhead of Wordpress just so it can function as an API? What's the benefit? Why not just build a simple API?
Yes, in theory. For some reason, the stuff I see in web inspector is the version after babel, which has only a passing resemblance with my code when I use stuff like async/await or for/of. In addition to that, the whole think broke one or two months back, where the inspector showed the right code, but all variables in the console were the minified versions, which I couldn't look up. Disabling minification for development builds “fixed” that.
Not sure why you got down voted. You're 100% right.
Why not just use feature detection? Btw you can also set environment configs with babel-preset-env, so it doesn't really matter what you support in production.
I’m guessing most people here never worked with Flash and even fewer worked with AS2 based Flash. 
We build a tool that’s used internally by a select group of people, and they pretty much do their whole job in our tool. It’s a good deal for both parties — we can ship the best app possible by only needing to support the browser we do our development in, and they get features faster with better stability because we know exactly what their environment is like. 
He didn't claim it was common. 
I haven't inspected it or anything, but my guess is that they're overlaying the entire thing with a canvas and then using the spritesheet while modifying the globalCompositeOperation (https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation) ... that's how I've done these sorts of things in the past, anyway...
&gt; I think MacOS is the reason most Electron apps exist. You are really underating having a node process aviable in the same envirment as the browser. 
The sheer number of "trying o understand react?! help me!" posts I see here and other online communities tells me that a serious understanding of javascript and programming principles in general is hard to come by outside of the established professional community. To say it differently, javascript seems to be a lot harder for people to grasp than it should be, but I think that's more of a fractured landscape issue than one of concept and principles.
The part that's a terrible practice is modifying an already defined prototype. This can lead to all kinds of unexpected behavior. If you want to override methods you can always extend your class and then call the superclass' method.
So basically I should just create a different greet method no? Like a greet2: function(){}
Basically this is what you want. It can be done with function/prototype too, but the Class syntactic sugar makes it a lot more obvious what you're trying to do class Foo { greet () { return "Hi" } } class Bar extends Foo { constructor() { super() } greet () { return super.greet() + " yall" } } const bar = new Bar() console.log(bar.greet())
That's the new IE5
So? I'm only explaining why I asked.
Well, no I use it quite a bit for kiosks and similar projects. But for distributing an application like slack, I don't see much advantage except to get around some fairly specific MacOS limitations.
Is super() a native class method? I'm not knowledgeable about the Class syntax at least for now
Call me old-fashioned, but I find a for-loop far more readable :)
I know I don't speak for every developer, but I definitely don't want Python
May the force be with you
Hi /u/TemJaw, this post was removed. Please see our rules, and do know that 'Java' !== 'JavaScript'.
The point in this case isn't really readability, but rather reducing the need for mutations. I don't use for loops anymore because they're a lot less predictable than a simple `arr.map(x =&gt; ...)`
Cool stuff! Thanks for the input
No problem. Definitely look into how ES6 classes work. They save a lot of headache.
The problem is our clients suck IE/Edge wieners. We really can't use most of ES6 at the moment.
That's what transpilers are for :) babel and typescript are your friends
I would solve this with routing and ideally reusing one component, where the routes are used to control the data source, ie `images/dogs/labradors` is associated with a component that uses the path to fetch the data and uses to render. 
like it
That depends on what information you would like about the element. The dollar sign variable is a function. You are passing 'element' to it as a parameter. The output of that function is the jQuery object you are logging, it isn't available directly in vanilla Javascript. That object provides a lot of quality of life properties and methods. However, a lot of new features have been added to Javascript since jQuery was created. As older browsers lose their userbase, we can start using these new features to write succinct code without jQuery's help. There are many websites offering the equivalent of jQuery's features using only vanilla Javascript, ['You might not need jQuery'](http://youmightnotneedjquery.com) is one such website. You could also use a Javascript compiler such as [babel](https://babeljs.io/) to support legacy browsers without writing extra code.
I honestly had no idea AngularJS and Angular were two different things. 
Ditto, I like JavaScript these days, es6 and a nice babel stack has made it a lot better to code in. Also coding clientside and serverside in the same language is pretty nice.
We do use babel-preset-env with different es5 and es6 configurations. We then do server-side detection and inject the correct script tag. Reducing load times is critical to reducing bounce rate (resulting in higher sales). Feature detection isn't a great solution here IMO. Syntax parsing is all or nothing, so you **must** download the correct code version. By the time we finish downloading the feature detection script, parsing it, running your entire suite of tests on the browser, inject the new script tag, and start downloading, the server-side solution will have already be executing code for the client.
Continuing education and networking is hugely important in our field. If you have to convince your boss, you need a new boss.
Not to mention the absolute crazy amount of community support and libraries/modules, and being to render your views client or serverside to tweak performance.
90%+ is mobile for us. It depends on what kind of business you’re in entirely.
Yup. It really does beat Python out in every way except for the small amount of libraries that Python has for data science that people have been too lazy to port to JavaScript. But even there node does have some pretty great libraries
I think it’s the second. I am an experienced JS dev and I’ve literally interviewed hundreds of applicants claiming to be experienced in JS and I could count the number who understood basic concepts on one hand.
I've done Python in the past and it wasn't a great time. The language is pretty complicated, the standard library is bloated, the documentation was either needlessly long or lacking important details or examples, the tools aren't very useful (aside from debugging), the 2 vs 3 divide still exists, and the package community is kind of stagnant. I really tried to get into it but at the end it was painful to work with and I had to move on.
Same. I find JS and ES much more useful.
Another interesting thing in this space is that companies *claim* to want devs experienced in JS and React but their interview practices show that what they’re actually looking for is devs proficient in Java.
I like both.
Not to mention how shitty a job they did with the Python 2 to Python 3 migration. The ecosystem is so fragmented.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [tc39/proposals/.../**inactive-proposals.md** (master → 789be90)](https://github.com/tc39/proposals/blob/789be90615ede1a5e05b45634567a005762ac55a/inactive-proposals.md) ---- 
They could, but they would be contributing to a web browser monoculture and actively harming the health of the web. To suggest "Electron" is to give the commenter the benefit of the doubt
Wut
I can handle the truth!
https://github.com/getify/You-Dont-Know-JS/blob/master/README.md
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [getify/You-Dont-Know-JS/.../**README.md** (master → 3f9efe8)](https://github.com/getify/You-Dont-Know-JS/blob/3f9efe8aefb6d2b8ff9db983802acf62f7905edb/README.md) ---- 
Wut
JS and Python are sufficient alike that it's almost like comparing Ruby vs Python back in the day.
Alike? Hmmm 
Their biggest differentiation is ecology, and not the language ergonomics &lt;=&gt; performance trade-off as due to syntactical or philosophical differences.
[This is what your site looks on my s7. ](https://i.imgur.com/nTrbJnb.png) Absolutely unusable. 
You can't feature detect syntax very easily. Many projects require CSP and don't want spurious errors in the console for their users or auto-error reporting systems.
I guess they are saying that JS is not an important language for AI, in the same way that you don't use Perl for your webservers
Obviously if you have two bundles you wont load both. You can also catch errors.
The commenter is delivering the functionality that their customer needs in a platform that is appropriate to them. https://www.reddit.com/r/javascript/comments/7tsszx/the_tc39_has_spoken_new_features_in_es2018/dtfcb03/ They don't need the "benefit of the doubt".
You can use `console.dir` to log all properties of the HTML node. 
thank you for the help, i will take a look at those already small buttons and make it smaller
Lol I didn't manage to get that at all. But he's correct in a way. The libraries for AI just aren't there in node yet. But Python is only a good language for AI because that's what the AI community decided to use, there's nothing about Python that makes it any better at AI than any other language
AngularJS is Angular 1.x Angular is Angular &gt; 1.0. Currently on 5.1 The (biggest) difference being the core structure of the program, AFAIK 
Literally anything JS related. What is this and how does it work? Describe bind, apply, and call. What is prototypal inheritance? It's not that the questions are in depth or fancy, it's just that lots of people "know JS" because they've used it on a few projects here or there. It seems to be quite rare to actually find someone who knows JS in depth and can cover a wide range of features and concepts. Also functional programming; I would expect any dev with significant JS experience to at least be familiar with the basic idea. 
Don't forget about lack of asynchronicity caused by Global Lock.
Oh that's next level stupidity. Most HRs make this abominable mistake.
Well actually the fact that you're asking that question is much better than many of the things I hear. Mostly I get some messed up variation on OOP when I ask if they can describe functional. Personally I'd say that functional and procedural are not very different *at their core*, but with functional you try to isolate as many chunks of logic into fully self contained functions as possible and then your main program is fundamentally just procedural but with appropriate calls out to the abstracted functions. 
Your answer just made 100x more sense than the articles I read upon reading your original comment. I always thought anything not OOP is procedural. And in Javascript it just turns out you use separate functions to sweeten your procedural code. Turns out it really is like that. Thanks for the response.
u/squili is trying to be cool by leaving off semi-colons and trusting the computer will know where to insert them, and it's getting it wrong because his code is now ambiguous. Try: let url = window.location.toString(); ['youtube.com', 'youtu.be'] .filter(str =&gt; url.includes(str)) .forEach(str=&gt; url = url.replace(str, 'hooktube.com')); if (url.includes('/embed')) { url += '&amp;autoplay=0'; } window.location = url; As an aside, this is why we write proper, unambiguous code instead of relying on error-handing in the interpreter to make our code work.
u/squili is trying to be cool by leaving off semi-colons and trusting the computer will know where to insert them, and it's getting it wrong because his code is now ambiguous. Try: let url = window.location.toString(); ['youtube.com', 'youtu.be'] .filter(str =&gt; url.includes(str)) .forEach(str=&gt; url = url.replace(str, 'hooktube.com')); if (url.includes('/embed')) { url += '&amp;autoplay=0'; } window.location = url; As an aside, this is why we write proper, unambiguous code instead of relying on error-handing in the interpreter to make our code work.
This article is not at all about React.
Sounds like a bad webpack config.
Long live AngularJS
Neither do many recruiters / HR drones. It's worse than Java === JavaScript...
This is one of those "2018 is the year of Web Assembly" moments.
Ant design is pretty fantastic. The api is nice and I can usually quickly do exactly what I want. That being said, I would not use it, or any library, if I would need to stick to a tight design or have absolute control over styling. It's just tradeoffs. If you are satisfied with few theme tweaks then it's a huge time saver.
Well, what the jQuery wrapper provides are the jQuery methods. So, that would those within the `$.fn` object. You can inspect it, but you can't do that unless jQuery library has been loaded. If you're trying to do what jQuery does, without jQuery, you should refer to the DOM methods. i.e. methods from the prototypes of `Node`, `Element`, `HTMLElement`, `Document`, and `Window`. For example, when you pass a string to the `$()` method (e.g. `$("#theElementId")`), it would be eventually same as calling `document.querySelectorAll("#theElementId")`. Here, the `querySelectorAll()` method is part of the `Element` prototype. i.e. document.querySelectorAll === Element.prototype.querySelectorAll
Why is God’s name would you have all these social shares on your site. I closed it instantly. 
While this may or may not be the best place to ask, what I'm sure is that that is not the best _way_ to ask. You need to show the relevant parts of your code -in this case, at least the menu's HTML, the backstopJS config and whatever you're doing with ChromyJS-. Even better if you can put up a demo online somewhere, but if not, at least you'll have to show the code.
I agree, but I'll also add that TypeScript and React is quite a lovely combo. Even moreso than with Angular 2, in my opinion.
It took me several hours of staring at people's "OMG FUNCTIONAL PROGRAMMING IS SO AMAZING" to figure out that it's exactly what I've always done my entire life since moving on from BASIC that used line numbers. There's a lot of concepts that I implicitly understand, and use, but don't even know that I understand, I think. 
Multi-threading and all its synchronization problems and solutions is a giant pita with so much potential for fuckups, I don't think you want it in JavaScript. 
 let p = new Promise((resolve, reject) =&gt; { tc39.propose('a really useful feature for promises', (response) =&gt; { return response.isPositive() ? resolve(response) : reject(response); }); }); p.finally(cheerLoudly);
&gt;* The way it did Unicode (string concat can throw!) Are you talking about concatenating bytestrings and unicode strings? &gt;* Having multiple string types and number types as primitives (having to worry about accidental integer division, yay!) As opposed to not having the option to do math without a rounding error? The default behavior of '/' is to do float division, you only get integer division with '//' &gt;* The module system (export by default, no circular references) I agree with the first but why would you ever want circular references? They're hacks that inevitably give you headaches. &gt;* Really awkward syntax for classes What do you find so awkward? Explicit self? I can agree with that. &gt;* Globally installed packages by default / having to use `virtualenv` It leads to less confusion for someone starting out. Virtualenv is pretty easy to learn and you know if you need it. 
? Is there some substance with this?
That's a shame. I put a lot of thought into how things should feel and what the interaction should be like. 
// and the Node way util.promisify(tc39.propose)('a really useful feature for promises').then(response).catch(response).finally(cheerLoudly);
In my experience the go to subject of ultimate discrimination is **scope**. For me personally this is perhaps the most important subject of the language, because if it were better understand people wouldn't do half the stupid crap they actually do. There seems to be a lot of developers who read an article about it once and understand the concept (kind of) in theory, but in practice they come up with all kinds of excuses and bullshit avoidance.
State management with React hasn't quite worked out for me yet... I feel your library is much closer to my preferences. I have starred the repo and look forward to watching it flourish!
Mjah, maybe some will, but there will also be a ton of randoms mucking about with stuff they don't really understand and make a huge deadlocked mess of it and post rants about it here.
There's a bit more to it than that. It's probably better to say "[imperative](https://en.wikipedia.org/wiki/Imperative_programming) code" rather than [procedural](https://en.wikipedia.org/wiki/Procedural_programming) as functional code is procedural. They come from the same daddy. Imperative code can have side effects caused my state where as functional code will always return the same value for any given input (purity) is one example. But you're right, it's just different ways of assembling the same components. This is why you can write functional style code in languages that are not strictly functional.
it's not that straightforward - sure you're assembling your code from functions, but that's just good code organization. Fp is more about creating functions from other functions. 
The digest cycle is the hackiest way to do change detection of any framework.
Very interesting library. How big is it minified?
This
Considering Flow is most often used for React apps, you should consider a different name.
They're using a combination of Pixi.js + greensock.js + canvas, it's right in the source.
In my experience, the issue is that many of those struggling with Javascript are people who are self-taught and have come from a HTML/CSS background. Javascript is their first proper dev language and they're not just struggling with JS, but also the fundamental concepts of an actual programming language.
Heresy!
... ... ... Blockchain....? GIVE ME MONEY!
Some more ideas: - Make a single "Share" button which shows all the other buttons only when clicked - Make them non-sticky and move to the bottom of the page after all the significant content - Delete them, if someone wants to share, he can just post a link to your page
We can detect a dozen or so browsers. We run a business. Any other browser is such a small percentage that we don't care (plus we don't support any version of ie that Microsoft has abandoned). That aside, it's not really hurting anyone. If you are on a whitelisted browser, you get ES6. Otherwise you get ES5. If you are on some marginal browser, you get the slower, but most compatible code we offer. I don't know how a better compromise that doesn't break the bank.
Or they might be delivering it to a known environment e.g. an internal system and therefore testing on other browsers is a waste of money.
Except Google actually update Chrome
JavaScript’s name is deceptive. It’s neither Java nor script. Some say it’s the Assembly of the web, but we don’t need to exaggerate it, let’s just say it’s today’s C, plus the challenges of present time. And few people do realize that, much less have the basic skills or programming fundamentals to write decent code. Java programmers will get frustrated and most likely fail because the protective environment provided by Java won’t prepare them to the wilderness of JavaScript. Web developers are usually in an even worst situation because they tend to go knee-deep into the magical world of frameworks and have absolutely no clue when things ultimately go wrong. Until people get a grip and recognize they desperately need to brush up their skills, they will be miserable in JavaScript. And it’s no big deal, just make sure you can write basic C first, then understand async programming and callbacks, then for everything that is holy’s sake, do study object-oriented programming and only then try some JavaScript.
5k,😄
Most of your finer points ring hollow to me. I'll give you that the documentation can be crappy from time to time, but it's generally good enough and series like Python Module of the Week can fill in gaps. Your point about tools is confusing to me, as aside from some wonkyness with setuptools, tooling seems just fine to me. Tox in particular is fantastic. The 2/3 divide isn't really a thing anymore unless you're a holdout for some reason or stuck in Py2 (me, womp womp). On the other side, Javascript has: * A busted packaging system that has toppled over multiple times due to poor management * Multiple, partially compatible implementations that are supported by shims * A woefully incomplete standard library * Tooling that is confusing * Floats as the only numeric type * Multiple, competing module systems * Confusing semantics with `this` even if you know what is going on * Bizarre type coercion, to the point where it's hardly worth calling type coercion * Confusing semantics for inheritance, even if you understand prototypical inheritance
The frameworks exist to make updating the UI *easier*. Or do think you think that every company works only at blog-level site scalability? (inb4 "Most of them do")
No, !*this*
As a self-taught developer whose first language was JavaScript, they aren't struggling with fundamental concepts. They're struggling work ethic. 90% of concepts you need to learn are out there in a blog post somewhere, easily digestible. Instead of browsing Reddit or Amazon, if they'd spend that time reading dev blogs or other educational outlets they would be in a much better place. Even information you don't fully understand is worthwhile to go over, eventually you'll run into something that will connect the dots and give you that ah-hah moment (see monads / functors in FP). I'm not saying these less skilled devs should dedicate time off work to reading / learning, but spending any and all downtime at work to educating yourself will go much further than messing around online and truly wasting time.
This is why I get paid so much $$$. I love JavaScript and have lots of experience with react and node. 
For real?
In retrospect, yes
That feeling of power when you manually start a digest cycle though. 
Man this is so true. I used to have horrible work ethic and figured I could never be a developer because I didn't start in high school or didn't major in it. Now that I've actually applied myself I have picked up so much in such a short amount of time.
*And every function has to be pure. This is a HUGE concept that most people don't understand about FP. 
This remimds me the joke where two Soviet cigarette brands talk to each other. One asks another: what are you made of? That answers: oh, you know, half tobacco, half manure… The first one goes: ohh, I should ask to add some tobacco too…
I agree with you but I don't think JavaScript is the problem. It's just that the ecosystem built around JavaScript has devolved into a framework fiesta. Who writes web apps in pure ES6 from scratch with no helper libraries? That's just the way it has evolved.
Same. Just pass fucking objects around and be done with it sometimes
Never actually understood the point of it, though. With IE11 still being around, will it not always point to IE11 as the lowest target? I wish there'd be sure a way to decide which bundle to load depending on user-agent, but i'm scared to even touch it.
I just got my first fullstack js gig for $100k. Where can I expect to start capping out with growth? $150k?
It doesnt matter what code the browser is running. We will always need bundlers even with esm. The point of babel is just to let you write better code and have it run on any environment. A use case for needing multiple bundles is when you require many polyfills. This is why I believe feature detection is the way to go. Now of course you could still rely on user agent sniffing to be more robust. I wouldn’t waste your time unless your business depends on it, which is unlikely.
Feature detection happens at runtime, you'd need to know ahead of time which syntax the browser supports so you can deliver the right build, which you can't do unless you look at the user agent. Even if you wanted to "feature detect" es6 support you'd still need to send some es5 code to test it.
If you have a mostly stable AngularJS product right now, and in 3 years all you do is bugfix, can you expect it to be perfectly usable and stable well beyond the 3 years?
Guys come on, its not hard to load some JS. We’ve doing feature detection with modernizr dir YEARS. And you make it seem like its a bad thing to send es5 to test it? God forbid you use var once or twice lol
You don't have to learn or use typescript with ng2+. I made probably 3-5 projects without it. Then I realized how stupid it was to go without learning typescript, and now I use it for everything.
Yes thats true but how they are doing it is the question..
&gt; As a self-taught developer whose first language was JavaScript, they aren't struggling with fundamental concepts. They're struggling work ethic. Blog posts are no substitute for a degree. In my experience, self-taught people tend to have a big hole in their knowledge, where everything becomes a magical black box.
I taught my self, and been writing software for 20 years, currently run a team of 13 engineers. We hire not degree engineers all the time. One thing I can tell you is that most self taught people I have worked with are usually anything but lazy. They are passionate and will often know more about lots of concepts cause they never stop learning. Most of the self taught engineers I know learn stuff on the side at home and do it as a hobby cause they enjoy it. Where often a lot of the degree engineers never write a line of code outside work. 
Yes! this is a code smell to me these days since it can be so problematic
I recommend this course by Jonathan Mills. https://www.pluralsight.com/courses/javascript-practical-design-patterns
thank you very very much for your advice, now lets concentrate on the coding part
Read the source.
I suspect it's going to be more like a "year of REST" type thing. It's good, but not as good as some people will tell you. WASM is great, but I don't think it's ever going to be ideal for data science. There's a reason a huge amount of that sort of stuff still has FORTRAN components, and it's not that nobody's got round to changing it yet. Node can work for data science with the ability to use compiled code via FFI-type stuff, but people aren't building the libraries for it, so it's not really going to happen. Python, on the other hand, has had the libraries since forever, they're sturdy as can be, and it's even adding additional syntax to support that paradigm (e.g the `@` operator for matrix multiplication). The syntax is pretty obvious ("interpreted pseudocode") and it's quite popular in these areas already. In most cases, it doesn't necessary need to run a huge amount faster, because the tightest inner loops are running as fast as they can in some of the most efficient code that can be written right now. WASM is going to solve one major problem, and that's allowing scripts in browsers to run faster and be smaller, giving browsers more access to native speeds for web-based applications. In other situations (desktop, for example), the tools to get that speed and size already exist, and are much more well-featured.
Nothing personal, but I find this sentiment a little bit BS. I've worked with people who had masters in CS who had huge gaps in their knowledge as well. They knew a ton of data structures but as engineers they wrote code that was hard to reason about and poorly engineered. There are some specialties that I do feel need degrees (machine learning, OCR, etc) I'll agree with that. But for 90% of applications having this CS / math specific knowledge isn't necessary. Being able to gain a deep understanding of the tools you use is a much more useful skill in my opinion.
Doesn't functional suppose *immutable state!* and the such? I believe procedural doesn't assume that.
As a senior working with a mix of both I have to disagree. They tend to have different skill sets when it comes to stress. CS grads excel in a structured work environment or doing heavy lighting, while self taughts are better dealing with death marches sudden changes and clients from hell. Fresh off the boat they all see everything as a screw, just one has a Philips the other a flathead.
Its always been this way... its really sad. Ultimately I think people are gonna try to morph the language into Java.
Let's not base design choices off of randoms mucking about though?
I fail to see how npm is particularly better or worse than pip (or easy_install)
I thought angularjs was new and trendy, its going away now?
That’s because software engineering and computer science in practice are quite different. Just because you have a PhD in some subset niche of machine learning doesn’t mean you can architect a scalable large application. 
&gt; What do you find so awkward? Explicit self? I can agree with that. Using ES6 classes works this way, too. Pretty much every class based language but java does.
Guess I am better than you.¯\\\_(ツ)\_/¯
I think that’s because those engineers are quite junior. I really doubt any senior dev who’s worked on a large React application won’t understand lexical scope and closures. 
you should probably avoid Angular and Vue then
Angular (at 5.1 now) is the trending Framework. AngularJS is the version before the name switch iirc.
That's a distinction without a difference. In OOP you split up functionality into methods that self-contain as much of the logical burden of your code as you can. You even tend to separate that functionality logically by file. `var _ = require('lodash')` is not even that functionally different from `var _ = new Lodash()` (which isn't a thing I'm pretty sure, and is just meant to illustrate this point). 
&gt; Fp is more about creating functions from other functions. Go on...
Depends on where you are. $130-$150 is probably pretty accurate if you're east coast, USA. If you're on the left coast, triple that.
ha this just reminded me of an old flash website. http://www.dontclick.it
Depends on where you are and what path you take. I’m in NYC and senior full stack devs typically make between 130k and 175k salary id say. If you learn enough about devops and all that good stuff you can move into a director role and make 200-250k after a good 5-7 years in the game. 
No but if you think your average self-taught developer will be able to do it better than your average PhD comp sci grad you're in cloud cuckoo land. This sub is full of self-taught front end developers getting their panties in a twist over simple truths. Don't believe me? Try and apply to a developer position at any big company: big 4s won't take you, banks won't take you, nearly every FTSE 100 won't take you. It's just the way it is.
The point is that companies are increasingly targeting developing only with Chrome &amp; failing to ensure the products they build work well with any other browser.
&gt; Coming out a degree you should understand networking, infrastructure, data structures, algorithms, all the little bits that are essential but often get left out by self taught devs. What CS degree teaches networking or modern infrastructure to anything like the level of detail where you could hit the ground running in a new job? You learn most of this stuff in your first few years in industry, and then you have to keep up with relevant developments and learn to filter out all the hype and noise as well as you can to avoid overload. The same is true of many programming techniques. Sure, someone with a formal background is probably going to have more awareness of fundamentals like data structures and algorithms, but they're unlikely to enter the professional field truly understanding things like how to structure larger projects effectively.
yes, the name "switch"
&gt;Almost every dev I see has JavaScript on their resume somewhere. Most of them did some jQuery for a web site once. Honestly, that's probably a good thing. They probably aren't overconfident (if they are, you can call their bullshit easily) and if they're a good candidate all around, can probably be taught good JS.
This. I taught myself HTML/CSS when I was 10, and would program even if I wasn't getting paid for it. I've been a nerd all my life. I'm currently developing an enterprise Angular app for a company doing KYC/AML, I built the front end of a social selling web app that went on to become acquired, I built a symptom checker for a Nigerian-based healthcare company... and many other things over the years, but if you ask me to regurgitate knowledge questions, you might think I'm an idiot. A lot of this becomes muscle memory after a while. I know how to find the answers I need, but I can't regurgitate everything about JS.
It was also actually one of the major reasons why I stopped using Angular and primarily use Vue now. It is so frustrating trying to find search results for Angular and getting a bunch of Angular.js.
... I’m reminded of the cliche; If it’s not broken, you don’t need to fix it. You know how the community is, though. If it’s not active, it’s stale. RIP Angular.
[Law of triviality.](https://en.wikipedia.org/wiki/Law_of_triviality) A good waste of everybody's time.
I think the main problem with no mutation is that most cases where you want to use vector math you can't afford all of the extra GC work. gl-matrix gets it right for maximum interop and webgl compatibility, but still can't really work with libraries that use their own class-based implementations (nor can they work with each other unfortunately.)
Thanks, I'll keep improving it until it's better and more stable.
Job specs are getting smart enough to know there is a difference now. Although the majority of new projects we recruit for are not React. 
We can joke about Angular 2/4/5 being a shambles of a reinvention, but AngularJS was a big innovator. 
Happy to see this Developers are getting started early. More than a quarter of developers surveyed wrote their first code before age 16. 
Go read my post again. Software engineering and computer science are two different streams. Nothing in my post said anything about self taught developers. &gt; try and apply to a developer position at any big company: big 4s won't take you, banks won't take you, nearly every FTSE 100 won't take you. It's just the way it is. No but Google and Facebook and a host of other tech unicorns will take you if you’re competent enough to pass their interviews. Every engineer I’ve known have hated working at retail or investment banks because the environments are quite toxic. But you probably don’t even work at any of those places. To be fair, I have a degree in comp sci and I do believe my degree was well worth the money but that’s not to say a self taught developer can’t learn what I’ve learned in my undergrad through online resources/textbooks. 
thank you for such a wonderful explanation, really appreciate that
Except you get twngible benefits from coding in the same language client and serverside.
It has always been happening. This is how ES6 got classes and why people occasionally propose public/private without realizing the language already has this implicitly from scope.
No disagreements on my end. Its sad seeing it happen to such an expressive language.
Just a shot in the dark here, but from my extremely limited experience with programming, functional programming is splitting up most of the logic/formulas/what-have-you into different functions or methods that you call when needed. Whereas procedural I imagine is more "straight down the code" logic? Now I am having flashbacks from my into to compsci course. It was awful.
Absolutely. It always comes down to an absence of practice. &gt; I'm not saying these less skilled devs should dedicate time off work to reading / learning I will say that. If they suck that bad they need more practice.
Looks neat. Curious to see where this goes.
I'm always surprised by how many people I run into that have never heard of conditional breakpoints. Hoping to spread the love and make some people's lives a little easier.
There is absolutely no reason why these two languages can't be used together, this is actually my preferred combo - Python for backend, JS for UI. I'm not a big fan of node, as Python is much more efficient, but I also see good things being done with it all the time. 
And also triple your rent/cost of housing.
This isn't really relevant to the topic but just wanted to say that I love the headline font choice on your (?) site, Formidable. Looks very 1970s Subway panel-esque. Looks like the font-family is one called 'Sharp,' is that available in a font library or did you purchase it? Because the name of it is so ubiquitous it's tough to pin down in Google. Thanks for sharing the resource, will follow the development of this.
Now you know this exists, so you can research in on your own, write another blog post and maybe even get some social shares. I'm not sure why it works exactly like this, but my guess is that it thinks it got a collection of length 8, then iterates through its elements (which don't exist, and this is why first argument of callback will be undefined at each iteration).
I have two simultaneous careers in unrelated industries. I sometimes get the impression people don't fully read my resume as it is, so I have little motivation to pad it with additional fluff. This very likely puts me into a tiny minority.
It taught the community a lot, however. I dislike angularjs now, but without it we'd be in a worse position.
What's React got to do with it? 
You mean multiply that by ten
&gt; Are you talking about concatenating bytestrings and unicode strings? I am. I actually have a funny story about this. I had completed a smallish web application and everything was working great. Then my design partner made an account with a username that contained a "ü". Now every page crashed for him. Why? In a important function I combined the user's username with a string literal. Since I was using Python 2 the string literal was a bytestring. &gt; As opposed to not having the option to do math without a rounding error? The default behavior of '/' is to do float division, you only get integer division with '//' This changed with Python 3 (thankfully), prior to that the division operator would do different things whether you were working with integers or real numbers. Also "having the option to do math without a rounding error" is false, while JS numbers are all floating point you can still do integer math with no rounding error (at least up to 52-bit integers). Floating point is actually really powerful once you understand how it works, which is why it's a good default number type for a language. I think the larger problem is that there's always uncertainty and doubt. Every time something returns a number you have to wonder if it's returning an integer or a real number. Sometimes a function will return either depending on how it's called. And you can't really tell without digging deep into the function because there are no visible types anywhere! If a language has no visible types there should be one number type. Same with strings; does this function return a bytestring or a unicode string? I remember working with libraries that would return bytestrings some times and unicode other times. None of this was documented, naturally. &gt; I agree with the first but why would you ever want circular references? They're hacks that inevitably give you headaches. If something is exported from a module it should be importable from any another module. Period. Stuff shouldn't just be arbitrarily off limits because it happens to be in a module that happens to be importing stuff from this module already. I want to organize my code in the way that makes the most sense, which might even have circular references. I should have the freedom to do so. &gt; What do you find so awkward? Explicit self? I can agree with that. Explicit self, old-style vs new-style, __methods__, that absolutely awful `super` call you have to do to make multiple inheritance work, having multiple inheritance to begin with, classes and objects being weird special corner cases of the language rather than applied versions of more general constructs (as in JS and Lua). &gt; It leads to less confusion for someone starting out. What's confusing about having packages be installed into projects? Isn't it more confusing installing packages in some opaque location far away where I can't see them? &gt; Virtualenv is pretty easy to learn and you know if you need it. It's not hard to learn, it's just annoying. And what if I want to run two Python projects in one command?
thank you again for you kind reply, goodnight
Good programming isn't about saving characters, it's about communicating to the people who come after you ... and when you consider the fact that after a year or so your own code almost looks like someone else wrote it, those "people" could include you. An `if` statement communicates very clearly what you are trying to do, while `condition &amp;&amp; action()` makes it less clear in order to save a few characters. You should always opt to communicate more (meaningful) information with your code, not less. Now all that being said, the `&amp;&amp;` and `||` operators can still be used in a clear way, if they're part of another boolean expression. There's nothing unclear (to most developers anyway) about: `if (a &amp;&amp; a.foo)`
I moved from Python to Javascript. I prefer modern Javascript.
Meant to say majority of new projects are React. 
Getting into webdev currently, and I love a good UI. It frustrates me to no end to see a bad interface on an otherwise good site or tool.
The East coast *is* the left coast, if I am facing South.
Is there a good way to get type checking on your templates in Angular 2 yet? IIRC that was the main selling point of React+TS for me
It's pretty much done now. I've only had to use python2.7 to support legacy project for at least 12 months.
I'm the same way. I have a gaming background where I spent a lot of time optimizing collision testing and etc on hundreds of objects 60 times second. When it comes to reading it, I just can't stop my brain from having to interpret each "map","filter","reduce" as a for loop anyway, so when it comes down to it I just find it easier to see it as 1 big loop instead of separate loops. const totalJediScore = personnel .filter(person =&gt; person.isForceUser) .map(jedi =&gt; jedi.pilotingScore + jedi.shootingScore) .reduce((acc, score) =&gt; acc + score, 0); const totalJediScore = 0; for(var i=0; i&lt;personnel.length; i++){ totalJediScore+=personnel[i].isForceUser?personel[i].shootingScore:0; }
&gt; .you can run python in the browser? That is our tragedy... that is our tragedy. 
A language that still paying by its very bad genetics.
Hello World! Im a bot that detects spammers. 100.0% out of the 1 submissions from /u/GGLaura appear to be for Udemy affiliate links. Stop spamming &gt;:( Bye ;)
IIRC, eslint will complain if you use the former.
&gt; experienced (competent) JavaScript developers are hard to find. As an experienced developer myself (20+ years), including Javascript, my take on this is the following: One reason is that experienced developers often are into backend development (in general, backend has higher pay). And for backend, experienced developers will often avoid Javascript (Node.js in particular). Reasons for this, to be succint: - Experienced developers don't feel comfortable at all with the ecosystem. They don't like that invoking one lib means installing *thousands* of micro-packages behind. They are aware of the recent, serious problems with this library ecosystem. - Experienced developers know they can do async development in many languages, and that this isn't the magic bullet, nor an advantage exclusive to Node. - And a particular criticism to Javascript, the lack of strong typing. No strong typing is a serious fault that so far has not been addressed. Typical answer is "use Typescript!" but... - Experienced developers don't really use static typing for safety or for catching errors, *unless they are using a typing system is as full-featured as in ML languages (Ocaml, F#, Haskell, etc)*. The real reason experienced developers would make the effort of use static typing is the added execution performance. Typescript asks of them extra effort without bringing extra performance, compared to C/C++/Rust/etc. Javascript under V8 is significantly slow to those. Thus, we're left with the experienced *frontend* developers, and due to reason (1), those are scarce and will (rightly so) ask for high pay. 
I am not spamming, I am asking for help. Jesus. If anybody knows any better online courses feel free, these are just the ones I know of and am looking into.
You said it, man.
Nope. Came from Java. Used AOP, it was impossible to follow
If the condition is actually logical, I'd use 'if (condition) { action(): }`; On the other hand, I regularly use &amp;&amp; as the idiomatic null safety check: so I always do 'obj.optionalFunc &amp;&amp; obj.optionFunc()'. 
So is this for a event condition action that you are trying to use?
Another medium rant. Thanks for comparing COBOL to JS.
For the a comparison a slightly tidier (although probably too complicated) way of handling it would be, ``` if([ valueColor, nameColor, lastNameColor, emailColor, cardColor, cvvColor, cpfColor, dateColor, periodicityColor ].every(color =&gt; color === 'grey')) { // ... } ```
I recommend this book by Addy Osmani https://addyosmani.com/resources/essentialjsdesignpatterns/book/
same here, I usually use &amp;&amp; as null safety check for callbacks
I bought the first one for 10€ in December and it's really well explained. Sometimes a bit slow but you really get to understand the weird parts. Bit of a downside is that it's not too much about ES6 but he talks about it here and there. Can't say exactly how many changes in weird parts there are between ES5 and ES6. I'd recommend it, wait until the next udemy sale and check it out!
I believe the point is not to compare?
It would also not be surprising if most people dealt with concurrency at the level of a popular library. Community consensus will be the curation tool of most people.
I'm not sure I like this counter argument. There is no reason a seasoned developer should not go back and relearn / update their knowledge once in awhile. Would you go to a doctor who hasn't read a journal for the last 15 years? I found myself the other day going through a css course on treehouse. CSS has always been on my resume, but when I became a programmer it was the wild west. Shit didn't work on half the browsers. But going through that css course I realized how much I'd missed over the years. So now I'm working through some other mainstays like javascript, although I know it a lot better already, there are still some things I've learned. I think a lot of people are fooling themselves about how much they think they know... I certainly was.
Common tip for this is to search with -angularjs Example: "angular dynamic styles -angularjs"
Probably to Chicago and straight into the kitchen of the Winslow household, if history is any indication.
/u/thekenwheeler does it again. Thanks, you magnificent badass
If I remember correctly, they did something like that in a recent update, but I'm not 100% sure
That's fair. My experience has been more around people who give non-Chrome browsers a static page that says "please install Chrome".
I also like [this tweet convo](https://twitter.com/kentcdodds/status/957613270667378690) regarding ternaries, `&amp;&amp;`, and JSX. (but not necessarily specific to JSX) Biggest point is that using a standalone `condition &amp;&amp; action()` can invite inconsistent/unwanted behavior if `condition` is allowed to be falsey, but defined. Like Kent, I use ternaries almost exclusively now, as the standalone `AND` has the above mentioned behavior, the `AND/OR` pattern is not explicitly visible when just seeing the `&amp;&amp;` operator, (meaning readability is that much less clear) and ternaries offer security in readability while using the same logic patterns, since the `x ? y : z` syntax *has* to be complete, else an error is thrown. That said, if you are not using an inline ternary in JSX (which Ben Ilegbodu actually [doesn't use at Eventbrite](https://twitter.com/benmvp/status/957646568500297733)) or assigning a conditional value to a variable, it's almost always better to explicitly use an `if/else` pattern.
https://www.w3schools.com/graphics/canvas_text.asp
Whoops, guess my credibility as a developer is dead 😂😂😂 😲😆ecksdee`11111 who did this?? 😂😂😂 It was me! I killed it! #killingit
Most of the educated developers I know try to program JavaScript exactly like they were programming Java. They claim otherwise, but their code is structured in exactly the same way and they cannot rationalize the difference.
``` const is = R.curry((pred, val) =&gt; pred(val)) const not = R.curry((fn, val) =&gt; !fn(val)) const even = is((val) =&gt; val % 2 === 0) const notEven = not(even) const alu = R.curry((op, a, b) =&gt; op(a, b)) const multiply = alu((a, b) =&gt; a * b) const add = alu((a, b) =&gt; a + b) multiply(2, 3) // 6 add(2, 3) // 5 const by3 = multiply(3) by3(5) // 15 const inc = add(1) inc(3) // 4 const triple = R.map(by3) const increment = R.map(inc) const sample = [1, 2, 3, 4, 5] triple(sample) // 3, 6, 9, 12, 15 const onlyOdd = R.filter(notEven) const example = R.pipe( triple, increment, onlyOdd )(sample) // 7, 13 ``` at first glance, wrapping such simple stuff in functions seems like overkill - but think of the wrapping exercise simply as a means to enable these logical units to snap together like lego. This makes imperative code look like one of those lego kits that can make only one model, rather than old skool lego which you'd use to make anything you wanted.
&gt;Since I was using Python 2 the string literal was a bytestring. You just found one of the biggest reasons that Python3 can't be backwards compatible. The way Python2 handled strings was simply wrong, Python3 is unicode by default and handles conversion between bytestrings and unicode the right way: explicitly. &gt;This changed with Python 3 Yes it did. Python2 is getting discontinued in 2 years, it's a dead language. I realize that you were frustrated when you had to use it but it's no longer valid to criticize Python based on Python2 specific annoyances. &gt;Also "having the option to do math without a rounding error" is false, while JS numbers are all floating point you can still do integer math with no rounding error (at least up to 52-bit integers). You can have 52bits mantissas. But you're going to have a hard time ensuring that you get 0 rounding error. &gt;If a language has no visible types there should be one number type. In Python you can optionally write type hints, which you can statically check. You can also use language features to ensure that you're using integers. I don't disagree with using floating point as default, I disagree with not having other options. &gt;I want to organize my code in the way that makes the most sense, which might even have circular references. I should have the freedom to do so. The way that makes the most sense is never circular references. Or can you provide me with an example that isn't just a brittle piece of code? &gt;Explicit self, old-style vs new-style, __methods__, that absolutely awful `super` call you have to do to make multiple inheritance work, having multiple inheritance to begin with, classes and objects being weird special corner cases of the language rather than applied versions of more general constructs (as in JS and Lua). It sounds like lots of your complaints are about Python2. I don't consider them valid criticisms, Python3 is like 10 years old at this point. If you don't want multiple inheritance you don't have to use it. Classes and objects aren't weird special cases, they're all objects. &gt;What's confusing about having packages be installed into projects? It forces a new user to set up a project before getting started. They may even just want to do some scripting. If you're starting a new project you create your virtualenv and install packages in the project scope. &gt;And what if I want to run two different Python projects in one command? I shouldn't have to inject a bunch of stuff into my shell environment just to run some code. Valid criticism. This could definitely be improved. 
This is way cleaner, IMO. class Superhero { constructor(name) { this.name = name; } getName = () =&gt; this.name; }
this is actually a very important concept. 
Think about how easy it is to get a package into the npm repository as opposed to how bloody difficult pip is. With pip you're forced to deal with wheel and setuptools and you have to compile your code into an egg, with npm is super simple.
Yup
Oh I've only ever consumed pip I've never published
You have to reorient up
I use short circuiting all over the place with conditional rendering. { // is the data valid dataValid &amp;&amp; &lt;Component data={data} /&gt; } { // is data being fetched dataFetching &amp;&amp; &lt;Spinner /&gt; }
Thanks for posting this! I use chrome’s debugger daily and has no idea. This will save me a ton of time.
Win what? The title is nonsense.
I released postcast v1. It's a react component that turns your markdown posts into a video-like / presentation so you can watch them. It also let's you pause, select &amp; copy any content. repo: https://github.com/postcast/postcast demo/playground: https://postcast-app.now.sh I have deployed a version for nextein guides: http://nextein.now.sh/guides/01-getting-started 
Thanks. It works as intended. Is it possible for it to prevent the buffering of embedded videos? If so, please make it do that.
Stoyan Stefanov's book, JavaScript Patterns, really opened me up to JS patterns. While it is ES5-ish-oriented, it's still a good read for getting core patterns under your belt: https://www.amazon.com/JavaScript-Patterns-Better-Applications-Coding/dp/0596806752
I like your example as it demonstrates very good that intermediary variables aren't only good for readability but also for documentary purposes. The explicit naming of the partial boolean expressions `isFoo` and `isLoggedIn` clearly documents the intent and allows developers who have never read your code a much faster and clearer understanding of it.
You're very welcome!!
I see Python like **[this](https://mic.com/articles/95260/how-the-music-industry-is-brainwashing-you-to-like-bad-pop-songs)** (only tangentially related). To paraphrase, Python isn't popular because it's better, it's popular because people don't stop talking about it. In other words: How do you know somebody uses Python? They'll tell you about it ^^ad ^^nauseam.
&gt; Is it possible for it to prevent the buffering of embedded videos? Ooof - not a clue, sorry. Check HookTube's API documentation to see if there's a parameter for that, and try adding it after the autoplay one?
Waiting for the first “did I do that?” in the bug tracker. 
This looks really interesting. I’m not sure what I would do without Redux and Redux-Logic, but I love seeing growth in this community. 
Depends on which style guide you use (if at all)
Javascript won over Flash. However a carpenter would never only have one single tool in his toolbox claiming it is the best and it won over all the other tools
In react nested in jsx I would use &amp;&amp; becuase it's short and simple. Looks more clean. However in pure javascript an if statement if more readable for the next poor guy that have to read my code. I use both
Any of them worth the tuition fees. Computer networks are one of the most fundamental parts of computing today, we had a networking module every year for 3 years in my undergrad. As for infrastructure you’re not going to learn AWS itself obviously, but you’ll learn the things AWS is doing and how it does what it does, which is half the battle. Even after I mentioned we specifically require degrees for backend and full stack roles people are still upset. It’s like none of the people downvoting me have ever looked on a job board. Heck, big 4 companies even require a degree for their front end devs. Not sure why people are getting their panties in a twist over the reality.
Wouldn’t it be clearer in the render of the react method to make a ShowIf component that displays the children based on some condition? This would seem more explicit to me, and easier to understand.
Ah, calling one's own work "interesting insight" is a shortcut to failure
WRT your original question, you should look at [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) for your purposes.
These are not equivalent choices down to a simple matter of style. --- `condition &amp;&amp; action();` is an expression that yields a value. `if (condition){ action(); }` is a statement. If you are thinking functionally, you want to be composing values. Using the statement doesn't really make sense. Of course you don't have to approach Javascript "functionally".
Functional programming is dumb. Why in the world *wouldn't* your programs behaviour be determined by the state? I would argue that at least in game development, imperative programming allows for emergent behaviors to develop naturally. But I suppose if you weren't making games, emergent behaviour is the last thing you want. It's like mathematicians wanted to program, but didn't want to learn how to imperatively tell a computer what to do, they just want a declarative way to juggle some data and get a result.
&gt;left coast i chuckled
I think you need Babel for this to work, but this is how I write all classes assuming Babel/TS is transpiling.
I use condition &amp;&amp; action() all the time in JSX.
couldn't you say the same about anything? JavaScript is an important language for blockchain, in the sense that a blockchain tutorial in JavaScript helps people to decide if they would like to work with more real-world blockchains in Solidity for smart contracts or C++ for new cryptocurrencies
Ok, i bought 6... :D. I hope it’s not scam ;D. 
you'd be surprised how few packages you actually need with Node. I think web pack gives people the wrong perception. But I agree with you on strongly typed languages make code so much more readable, IMO Rails is probably one of the hardest to read coming in with a fresh pair of eyes. 
I wish SpaCy would come to Node, I mean it's essentially a python wrapper over a bunch of C modules, which is something JS can do. 
Yup, and something it does more easily tbh. All someone needs to do is take the time to port it.
You might be surprised. There are a lot of senior or principle engineers with ~20 years of experience that worked with Java the whole time and now have been using React for ~1 year and it's amazing how hard it is for them to break old OOP habits and embrace a new paradigm. But you're also not wrong, plenty of the people I'm talking about are very junior as well. There just seems to be an overall attitude that if you've written a few lines of JS at some point, you can now list it as something you're experienced with even though you barely know anything about it.
I think you are arguing against a strawman here. FP isn't about eliminating statefulness from a program, but about encapsulating that state and making changes to it explicit. The result of this is that rather than have to deal with the effects of statefulness throughout your program - which makes testing difficult, reasoning about your code difficult, composing functions difficult - you have to deal with state in a small, well-defined part of your program. You are then free to enjoy the pleasure that is writing small, pure, composable functions in the rest of your codebase. It isn't just about eliminating state either. For me, FP is more a paradigm about how we view programs. At their core, programs take some data (from user input, database, http or wherever), transform that data, then represent it to the user. FP makes explicit that your program is transforming data, and provides means of doing so in efficient and understandable ways.
I use a component I wrote called IfRender for this &lt;IfRender statement={isTrue} trueRender={&lt;p&gt;I’m true&lt;/p&gt;} falseRender={&lt;p&gt;I’m false&lt;/p&gt;} /&gt; It’s readable for small bits of logic, but I don’t nest it as it can be confusing to read.
Wow, your website is amazing. 
I've seen this done before, but I've seen the other way done much more. In the React docs they mention using the conditional for rendering conditional content so it's what I and my team used and are used to at this point. I can see benefits to the more declarative route of using a component for boolean/conditional logic as well. 
Then just mention you are not an expert in that language. This is all completely subjective though. Consider the following example. People in here will tell you that you can never get a JS job if you aren't an expert with *bind*, *call*, and *apply*. That is complete bullshit. First of all those methods are new with ES5 around 2010, so that aren't essential to the language like many people cry about. Secondly, I believe they are hacky shit and will say as much during an interview. That question came up in my last interview. They wanted to know the difference between those three methods. My answer was something like: *I don't know because I deliberately don't use them. They all exist to modify the "this" reference in a function and I prefer to avoid "this".* Many people on here will quickly tell you how disqualified you are, but that answer helped get me hired. Interviewers like no bullshit answers.
doesn't python have global interpreter locking? 
What part of "pure, composable functions" screams OOP to you?
&gt; you'd be surprised how few packages you actually need with Node. Yes, you *directly* need few packages, but each of those packages needs a few (say, 10) packages and so on and so on. This means every of your dependencies will load even thousands of packages as well. The size of this "tree" in Node is orders of magnitude bigger that what happens in other platforms. It all boils down to - culture; the community prefers micro-libraries (there are even many packages in NPM that are effectively one or a few lines of code). This is alien to what happens in other communities. - javascript lacking a comprehensive, "batteries-included" standard library. 
I do that, but a lot of angularjs results will still come up because people don't use the names properly. 
In the real world nothing is ideal or pure.
Neither. Personal preference: `if (condition) action()`
Yes, but it isn't the devil. I think this is the best lecture I've seen on [issues of concurrency in Python](https://youtu.be/9zinZmE3Ogk) and how they relate to the GIL.
Interesting. What's the size (kb, not gzipped) of Urql once imported into a project?
True I never use bind or apply, but I am always sure to practice things I never use like inheritance ES5 style just incase they ask . . . which they will since if you google JS questions, it comes up. 
I didn't say I was struggling I was just stating a complexity that arises with OOP. 
True lol. Seems like theres a lot more jobs for Unity VR than WebVr. However, I decided I will learn both. I'm learning three.js 1.5hrs a day and Unity Vr 2hrs a day. This way I will know both when a certain project or job calls my name!
No, it is more straightforward. Functional programming, is about you're functions not having side effects. That is a thing that I have been doing forever. That is straight up how I learned to write code
Your job is to write clear code. Your mini fire's job is to compress code. Don't forget you're the human. 
Having functions as variables doesn't really have anything to do with functional programming. We've been passing around functions as variables, as pointers, as whatever for many years now. But functional programming itself has only become really popular recently. That's not to say that it's a concept that people haven't been using it for decades. It's just something that a large number of people have only recently become aware of
&gt; but I am always sure to practice things I never use like Unless you are doing this for your personal education stop. Stop right now, because you are wasting your time. If you really want to become a better developer focus on the product more than its minutia of tooling. Practicing writing original applications and making hard decisions about architecture or product management. Practice solving hard software problems. I have been doing this a really long time and there is no value in somebody who can articulate bad ideas well. A large part of getting a job is demonstrating value and competence. It isn't about blinding answering questions on a checklist.
Yes , the if() self-documents the intent of the author. 
I know what you said, and I said "no it's not"
I feel like this is a bad troll attempt.
Usually too much nesting of components indicates a need for a new component that groups the logical children together. I think it's often neater to let the component itself decide whether it should render or not, it keeps the parent far cleaner: &lt;SomeComponent /&gt; &lt;SomeOtherComponent /&gt; vs &lt;ShowIf condition={...} &gt; &lt;SomeComponent /&gt; &lt;/ShowIf&gt; &lt;ShowIf condition={...} &gt; &lt;SomeOtherComponent /&gt; &lt;/ShowIf&gt; It obviously depends on the component, but I often find the condition of displaying the component fits nicely with the component itself. For example, on a profile page with several sections, it's neater to have the parent component contain children for each section, and no other logic. Each section then decides whether it should render or not. The code is more modular, and the logical grouping males better sense. 
&gt; Also you have an unused symbol meaning in your flair There, happy? :P
I use both but I prefer if (... If I am lazy I'll sometimes use -&gt; expr &amp;&amp; expr else -&gt; if (... Whatever gets the job done is good.
Sigh... It's not. What makes something a good troll attempt, btw? Because back in my day, if people respond to you and take you seriously, that means it was a good troll. So if I was trolling, it would be a good one. But, no, I'm not trolling, I just have a problem with trends that come in and force me to change my code style.
They are as opposed as imperative vs declarative. But you bring up a good point. The "functional" programming usually used in Javascript isn't *truly* functional programming. Real functional programming is declarative, so someone in this thread is using the term "functional programming" wrong. 
Didn't read the article
There's no parameter for that (yet).
Is this where I'm supposed to shill Vue for having this out of the box
Yeah it doesn't help people starting out that js has gone from primarily DOM manipulation, a bit of animating, and an AJAX call if you're hella fancy to all of that plus data handling/routing/build tools/the SPA suite. I'd be only semi-confident calling myself an intermediate and I know most of my problems are the ones that come with data handling as opposed to playing with the DOM
IMO it should always be: if ( condition ) { action(); } The other form should be: action &amp;&amp; action();
I prefer the second option, sans the curly braces: if (condition) action();
I'd definitely do that with a Sonic Screwdriver.
Maybe not in the real world, but in the abstract world of programming there is lots that is pure. There are many advantages to be had by isolating these pure parts from the necessarily impure.
Always code as if the person who ends up maintaining your code is a violent psychopath who knows where you live. I know where I live and I've written code that makes me look like a violent psychopath.
Side-effects from expressions are really a bad idea. :-(
I don't really know how to describe it, I only know how to *do* it. 
Hey thanks for the response. What is the "..." for before currentEvent?
Have you ever actually looked at functional code
same
And that's a good thing tbh
But urself 1 month subscription of front end masters. Then go through Kyle Simpsons videos while also reading his books. Better than anything ull find on Udemy.
No. Never trust any input on the web. If you need to make sure the thumbnails match the image you will have to generate them yourself on the server which is what you control. You do not have full control over the client at any point. 
Sorry, there has been a steady improvement in languages in tools. And there is also a point in competition: it results in better code for less effort. And cobol is dead, the corpse may have momentum, but it is dead for good reason. Not all thing are equal. You are just wrong whippersnapper
`dict['2'].lad('hello');`
&gt; var dict = { "1" : wew, "2" : lad }; &gt; &gt; function wew() { &gt; console.log("foo"); &gt; } &gt; &gt; function lad(message) { &gt; console.log(message); &gt; } &gt; &gt; dict["1"].call(); //prints "foo" VM406:1 Uncaught TypeError: dict.2.lad is not a function at &lt;anonymous&gt;:1:11
I've built a remote control for me to control players on the web without having to get out of my bed. Fun project. Useful for when I'm watching TV shows through my computer. https://github.com/diessica/clicker
Ah, okay, the ... before currentEvent is called a spread operator: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator I forgot that it might not work in browsers (I'm used to using babel transpilers or running on the server). You can use assign instead: const modifiedEvent = Object.assign({}, currentEvent, {eventCount: currentCount); This paradigm is called functional programming and I greatly prefer it, it just means you create new objects rather than modify existing objects, whenever possible. The other way you could do this might be more familiar would just be to modify currentEvent instead of creating the modifiedEvent object: currentEvent.eventCount = currentCount accumulator.eventsWithCount = accumulator.eventsWithCount.concat(currentEvent); Also note that when I use "..." before eventsWithCount.map at the bottom, I was just using "..." as a placeholder to represent where you will probably put other unrelated code -- sorry if that was confusing. 
The first one is gross. You know what I like, to be super crazy obvious is: ``` if (typeof e === 'cube') { // do nothing } else { doSomethingWith(e) } ``` It's super obvious, and avoids gross a !().
`dict.2` is not valid syntax. Numeric keys must be accessed with brackets and not with dot notation.
I think you've either read what I wrote with a stronger message than I intended, or you've misunderstood. I'm not arguing against going back and relearning things, and certainly not against updating your knowledge (I never even hinted at that). I'm simply saying that my current working knowledge is a tiny subset of all things i've ever known, and that if excessively bias your assessment of me towards facts I can quickly recall, you're going to be overlooking a huge amount of latent knowledge and experience. There is little reason for me to go and refresh my knowledge on IE6 bugs, unless I find myself in an unexpected situation where I need it. Likewise, there are parts of the JavaScript language that (for some reason) are still actively asked about in interviews, but aren't a major aspect of many people's modern coding patterns. Again, it wouldn't take me long to look it up and restore my understanding, but i'm not going to do that unless I have a reason to know it right now. This is something i've read about when it comes to interviewing practices by the big tech companies. They expect fresh computer science graduates to have a much greater ability to recall specific algorithms and data structures than people with a decade of coding experience. But if you can assume a certain level of experience, there are much better ways to assess someone than simple programming trivia questions.
This thread is a good example of why you let a senior person on the project set up a longing rule set that makes sense and just have the other devs adhere to it. Otherwise people will bikeshed about it all day. I’m not saying any specific version listed in this thread I wrong, but there are many ways to get the job done and the only right answer is consistency.
This was an experiment, the essence is using document fragments to convert string to HTML, then cloning the node, and creating a diff changelog, only updating what's needed using a single function/class, and the actual parser is just a one (or three) liner.
Only briefly skimmed through it, seems alright. My one nitpick, and this may just be a personal issue that others prefer is seen in this line in the example: this.outputTarget.textContent = As far as I can see `outputTarget` is a generated name from "output" in the targets. I'm not fond of that sort of naming switcharoo happening, I'd rather it be what I called it and wysiwyg, even if it means stuffing them all under a "bindings" property or something, e.g. `this.bindings.textContent =` 
Thanks for the interesting link. After updating and uploading **[http://ai.neocities.org/MsIeAi.html](http://ai.neocities.org/MsIeAi.html)** I went and looked at the *Poor Man's Artificial Intelligence* but I could not tell what any typical inputs and outputs would be. If you point Internet Explorer at **[MsIeAI](http://ai.neocities.org/MsIeAi.html)** you can now input something like "mary is woman" and watch the MsIeAi engage in automated reasoning with logical inference. The **[MsIeAi](http://ai.neocities.org/MsIeAi.html)** will ask you "Does Mary have child" and then it will go back and adjust the knowledge base (KB) depending on whether you answer "yes" or "no" -- all before your very eyes, in a display of True AI and true Natural Language Understanding (NLU). 
Man just today I was adding an if statement with a debugger in it just to solve a bug. I’m going to try using this next time I have this issue. Thank you, have my upvote.
sorry i miss typed - i did what you suggested, did not work - dict["2"].lad("hello")
No, a JavaScript blockchain tutorial would presumably be different code than a real-world blockchain (lots of mathematics). The **[MsIeAI](http://ai.neocities.org/MsIeAi.html)** JavaScript AI Tutorial is actually the same thinking AI program as its siblings MindForth in Forth and ghost.pl in Perl. 
The syntax is pretty awkward but you can assign a function to a pointer variable and pass it around like any other pointer. So you can do a number of the things that are often claimed to be the exclusive domain of functional languages. 
Well this *is* /r/JavaScript...
Correct, but I still stand by my statement about testing hocs
Depends on the course. For most of Kyle's videos, he'll usually explain the concepts and then give a buncha examples and a couple small quizzes here n there. &amp;nbsp; You can go through his books to get an idea of his teaching style. They are free and can be found [here](https://github.com/getify/You-Dont-Know-JS). He takes a super deep dive into Javascript, and his books are widely considered as the modern day JS bible. &amp;nbsp; Maybe its just a matter of preference but I have never found any of the courses from Udemy to be super useful, unless you are suuuuuuper new to web dev. Stephen Grider is prolly the only instructor on Udemy I use. But yeah, check out either [FrontEndMasters](https://frontendmasters.com) or [egghead.io](https://egghead.io/). Egghead might be a bit advanced if you are still kinda new though. &amp;nbsp; Lastly, Udacity also has some web dev + JS related courses / classes. Some of are even developed by Google, and they are free! Might be worth taking a look. GL! 
Alright, so give it a couple more years in NYC and go to West Coast, eh?
You have to think in a bit other way - you can't control what "the client" really is and how he came from (is it a form submitted by website, manual API request, maybe some crawler app?), but you can enforce specified requests (you can filter server-side what you want to handle). So to have a little control over *form flow* you probably have to implement some kind of user authentication (eg. JWTs) and do some math to verify what you send to user and what you get back (calculate some checksums etc.). If you want to have a different version of one image it definitely should be generated on the server. However if they will be different in some way (cropped, resized etc.) you can add some visual tool to achieve that, but it also should be generated and saved to file on the backend - so you pass from front to back only parameters of the operations that should be done (eg. /crop?x=10&amp;y=0&amp;width=120&amp;height=100).
i personally prefer `if (condition == !(()=&gt;'')())`it's more readable 
&gt; Computer networks are one of the most fundamental parts of computing today, we had a networking module every year for 3 years in my undergrad. Wow, three whole modules? :-) &gt; As for infrastructure you’re not going to learn AWS itself obviously Exactly. A CS degree isn't there to teach you the details of the current tools *du jour*. That's what industry experience and vocational training are for. I know some places offer a SE undergraduate course that is aimed more in that direction, but at least here in the UK, those are mostly not the top-tier universities and the syllabus is often more like CS Lite anyway. Bottom line, I wouldn't expect a new CS or SE graduate from any UK university to be competent with either network-related programming or using platforms like AWS without several months of relevant experience in addition to their undergraduate studies. You can't teach this stuff to someone who's never even encountered the concepts before in just a few hours while they're also studying dozens of other unrelated subjects. 
&gt; .... and Dunning-Kruger makes sure that they never address it. You think more people who have been motivated enough to teach themselves how to program and figure everything out on their own tend to have more of an inflated opinion of their own level of skill and knowledge than people who have just graduated with a CS degree?
&gt; Maybe its just a matter of preference but I have never found any of the courses from Udemy to be super useful, unless you are suuuuuuper new to web dev. Stephen Grider is prolly the only instructor on Udemy I use That's the problem, it seems like most of their classes are beginner classes. I am trying to learn React from Stephen Grider right now and that's how I realized I never learned JavaScript well enough. I actually enrolled in Web Development and Responsive Web Design on Udacity at least a year ago, I don't even remember but I just logged in and there I was, LOL. "You are on Lesson 1 - How the Web Works" so it must have been something I did and then got distracted by another class. Anyways thank you, I will definitely be spending time on Frontend Masters. 
It’s amazing when used right 
Oh, one more suggestion for it is that it should use ?autoplay=0 when there's no parameters being specified in the embedded video's URL and use &amp;autoplay=0 when there are parameters being specified in it.
IMO a component which sometimes renders to null is code smell and always a bad idea. This kind of decision should be lifted to parent to prevent calling constructor and mounting when the component is not needed.
For the love of bacon and all things delicious, please use the latter.
You can use a shared secret key. When sending a request to your API, the payload or part of the payload should be combined with the shared secret key to calculate a digest which is sent as an additional header. The server will also compute the digest when it receives the request. If digest matches, it will let the request proceed.
Pass it through r.DankMemes(*your JSON*) it should de-normie-fy it for you
Or your clone, who'd ask "If I'm not me who am I" 
Here you go https://codesandbox.io/s/61wxvn88ln
Yuck
That's just removing the good parts of both versions
To each their own, I guess lol
thank you!
Amen
My mistake at reading. The function is assigned to the key `2` rather than that key pointing to another dictionary. It should be `dict['2']('hello');`
after currentCount -- that one's easy to try and test, please don't make me spoonfeed
Ok thanks for the help, I appreciate it.
Even just having good IDE tooling around auto-completion in templates is a life saver. Typescript is so forgiving, even with the strict flags. I honestly cannot understand why anyone wouldn't use TS for greenfield in 2018.
`string2.includes(string1);`
I don't understand...
Thanks for the response but includes doesn't evaluate by spaces or anything. So "aa" will match from "aaa", which is not my intended solution.
This looks suspiciously like homework so I won’t give you working code. But I’ll say you might want to check out the string 'split’ function. 
Not a homework. I'm creating a hierarchical list of objects and I have them categorized into group names. All I did was oversimplify my problem in the reddit post. The split function will do wonders, but it's a bit hacky and I'm looking for a short solution. Thank you for the response
 regex = new RegExp('^'+string1+'\\b'); regex.test(string2)
Titles are supposed to be meaningful on their own. 
Ah, I see what you mean now with the updated examples. I think the solution given by /u/doqob might do the trick.
You've got a bit of the correct idea, but it looks like you missed out [in the Handbook](https://stimulusjs.org/handbook/managing-state#persisting-state-in-the-dom) where they show how you can use `get`/`set`method prefixes, like you would in a pre-ES5 "class". I made a simple ToDo app using Stimulus prior to the 1.0 launch, and probably a few minor versions before that; in those docs [they demonstrate](https://github.com/stimulusjs/stimulus/blob/3d19264a387380ef7661b34329ac3316324f0dc4/handbook/03_building_something_real.md#implementing-the-copy-action) how to explicitly use `get`/`set` to find, define, and return targets. Note that this API may have changed during version bumps/development, especially since I had to dig a little bit to find the example. I don't see why this would change dramatically, but just a disclaimer nonetheless. I'm not sure how to address your other problems, which seem fair and valid.
Really curious what you think is hacky about using split
Are we supposed to know what CVE means?
[I think this is the biggest lesson I've learned in programming](https://jrlburke.files.wordpress.com/2015/10/could-should.jpg?w=620). Be it over-compacting code, over-abstracting code, over-engineering code, or over-optimizing code, that message applies in all situations. You should print it, frame it, and hang it on your wall.
Here's a link to the website https://cve.mitre.org
It does. Amazing
I agree, but saying javascript shouldn't have multi threading because the average developer doesn't know how to use such tools properly is a bit odd I think.
 Reverse engineering and https sniffing could relatively easy break both approaches, clients are should never be trusted.
Thirded
Same. For values too. Obj.data &amp;&amp; obj.data.foo
OOP has even less to do with how computers actually work. So we should definitely abandon that too, right?
That's creating something worse than the thing it's addressing. Having to define custom get / set functionality, per target, purely to avoid a dislike of the automatic naming is not exactly ideal. That said, `this.targets.find` looks like it would do the trick on it's own, so that's something. Thing is, it's not that the other syntax isn't the preferred way to go, I'd just prefer they not name things the way they do and feel it makes things more complicated than they need to be. Do you know of any decent quick start / hello world sample projects I could download? I'm spoiled by create react app and don't have the interest in setting up webpack / babel directories / whatever to do a few quick tests. 
Why?
I see. I don't watch much television...