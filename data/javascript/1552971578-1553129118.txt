Bitwise operators will convert Number which is 64-bit precision IEEE-754 to 32-bit signed integer. So you will lose precision if your number is over 2\*\*32, and will get -ve value if your number is between 2\*\*31 and 2\*\*32. I think that's why Airbnb eslint rules forbidden bitwise operators.
Enable firefox's built in "Do Not Track" feature, use UBlock Origin, and Decentraleyes, and you've got everything you want. Still allows session cookies and everything, but prevents all ways to track you.
Yeah, this site has been around for ages. I was actually going to ask if it's maintained anymore 
"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN Batman!"
I like this one a lot, I use it regularly
Google now tracks via the injected JavaScript, meaning that they’re no longer third party cookies and also not on the CDN. I'm sure others do as well.
WTF kind of languages are 1-indexed‽
It'll barf on circular references unfortunately.
I've been finding myself needing to shallow copy and filter large, normalized objects quite a lot and have developed a handy little chain that gives you quite a fine grain of control over what you can do with it: const obj = { ... }; const fliteredObj = Object.keys(obj) .filter(key =&gt; ( obj[key] === 'someCondition' || key !== 'somestring')) .reduce((newObj, key) =&gt; ({ ...newObj, [key]: obj[key] }, {}); If any of you folks have a different way of doing this, I'd be interested to see it!
Matlab
setTimeout(()=&gt;{debugger},5000) To keep dropdowns opened, menu hovered and so on. All things that disappear after losing focus
const sum = arr.reduce((accumulator, currentVal) =&gt; accumulator += currentVal); Super useful whenever you need to sum all the array’s elements. 
`import _ from 'lodash';`
The Set object in JavaScript preserves insertion order. So if you create a Set from an array, it will preserve the order when you spread it back out (but without duplicates).
I like this one, very clever
Visual Basic (pre-dot-Net) and some other old BASIC languages (shudder)
 &gt; String.fromCharCode(...Array.from({length: 12}, _ =&gt; Math.random() * 25 + 97 | 0)) "niapavvsjdfb"
Just make sure your linter reminds you to dedebugger...
Yea, the distribution is garbage. Use Fisher-Yates instead. It's faster, too.
Oh, wow. You are totally correct. I was under the impression that, because sets (the data structure) do not have an order, you wouldn't be able to guarantee order when you spread it, but that to totally wrong.
Ooh, nice!
Julia
Don't worry the number will just wrap around if gets too big. Jk once it hits max number it will stop incrementing 
Mathematica/Wolfram Language
That's the mathematically correct thing to do, it's actually a pretty fundamental mathematical principle. [Vacuous truth](https://en.wikipedia.org/wiki/Vacuous_truth)
Hm that's interesting how do u structure urs? I love looking at different code styles I find it's not a huge issue and u can create a src/pages dir to solely focus on views, create separate dir with files with utility functions.. Like specific for api fetching , for biz logic I think react is really suited for this dry clean architecture, separation of concerns, functions not doing too many things, reusable.. There are definitely bad ways of code splitting but done right it works really well and is just Good, Nonsmelly code I feel like most source code I see is organized like this, some creating a dir for common files like layout header footer, maybe creating subdirectories in /components that only hold a profile. Js and profile. Css 'Clean code' is a really great guide!! I am still trying to figure out my style in node, I will make bin dir with executables but also write sql queries with just node-pg, no orms, for no real reason. I separate my express app file from my server file, separate routes under a routes dir.... But I've seen ppl organizing like User/ with a user db model, the user api.. So I struggle bc there is just so many different things happening across the entire app 
Thank u so much! Do u draw out diagrams or use something online to actually visualize the components?
Math.sum(...arr)
That sounds like something useful I seriously need to write on a post it in my line of sight lol
`const demethodize = Function.prototype.bind.bind(Function.prototype.call);`
would be nice to add "function signature", but not sure if it's possible in the strict sense without type-ifying. could add a doc-block with @param and @return declarations and call that the signature, a the expense of some clarity. ``` /** * example of basic @param usage * @param boolean foo * @return mixed */ ```
If we're going there, why not: `const sleep = (ms) =&gt; (data) =&gt; new Promise(resolve =&gt; setTimeout(()=&gt; resolve(data), ms));` Which gives you a nice thing like: `makeApiCall().then(sleep(1000)).then(processData)`
You'd love Haskell: `all (&gt; 5) array`, `for array print`, `takeWhile (any (&lt; 3)) arrayOfArrays`.
That's really smart to make it harder to get lost when you have a roadmap. Thanks!! 
const clamp = (number, min, max) =&gt; Math.min(max, Math.max(number, min)) It’s a good clamp for when you need a number x to stay within the bounds of min and max! 
Lua
Sass
Chrome dev tools - select element, right click on the element in the inspector, select "Break on" &gt; "subtree modifications". Then you can click on the element and see it's focused state attributes in the inspector.
Seconding Tone.js. I don't particularly care for the way they use strings to handle timing and pitches, but it does provide a great starting point for what OP seems to be looking to do. 
Definitely!! I used to really struggle bc I would just skip red green and try to go right to refactor but yes I just have not felt my backend and database structure is clean enough, just using postgres sql queries running on an executable, I don't know if that's better than using sequelize or something. I used to use rails backends so the lack of 'convention over configuration' makes me 2nd 3rd 4th guess myself
ColdFusion
`const value = (statement) ? true : false` A few of these stacked at the start of the function, then some basic logic, keeps code very clean.
The maximum value you can have in a Javascript number is 1.7976931348623157e+308, but doing `a++` will stop incrementing after 2^53.
 const csvToJson = R.pipeP( readCSV, R.tail, R.filter(R.nth(2)), R.map(R.slice(2, 6)), R.over(R.lensIndex(0), R.map(R.replace(/\s/g, "-"))), writeJSON("../src/data/copy.json") ); Pulled from an actual production codebase. Currying lets you define pure pipelines like this that are just waiting for data. In this case: 1. We're waiting for a path to a file (sent to `readCSV`) 2. We read the CSV from disk 3. We grab just the tail of the CSV as a JS array 4. We filter out any entries who have a falsy value at the 2nd index. 5. We map over all entries, and slice between indices 2 and 6 6. Over the 0 index, we map over the array replacing whitespace with dashes. 7. We write the result to disk at the path provided. All of this only works because we are working with curried functions. We provide the predicate in advance to filter (`R.nth(2)`), we provide the write path to `writeJSON`, etc. Because these functions are all just sitting there waiting for their data, and because they are all pure. It makes for an EXTREMELY predictable and testable application that, in this case as a bonus, is also point-free. It may not be for everyone, but once you adopt a data-last approach rather than a data-first approach, it allows for some extremely powerful, clean, and semantic code.
Even if it did make sense, what's the point of having a "director" class when a simple function will do in JS? `createPopularProfile()` could live in the global scope, a plain namespace object, a module... it doesn't need a class.
It's not the equivalent of Math.floor(). Math.floor() rounds towards negative infinity while integer truncation rounds towards zero. &gt; -2.3|0 -2 &gt; Math.floor(-2.3) -3
just `copy(yo)` ;) (in Chrome DevTools)
Yeah, this is the pre-ES6 version. I used it a lot when I had to. It's just not as clear about what it's doing.
So the intersection of an array with itself, for the resulting unordered pair cartesian products of D x D ? I wonder what the big O of such a function is.
It will have issues with anything non-serializable, and explicitly set `undefined`s will disappear (if that matters).
console.log("should be printed")
woa that is hack!
Don't we all
ABAP
Ruby (considered a pretty "English-readable" language) for comparison: array.all?(&amp;:finite?)
English
I agree it's not really readable and why splitting it out over a few lines is better. Just for the sake that the thread was about one-liners is the reason it was all on one line.
R
I get why it's a problem, can I get a reference or ELI5 on why that solution is any safer?
Hi /u/sinaj54, this post was removed because your title included a URL. Please use the `submit a new link` option with a descriptive title. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Hi /u/sinaj54, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I despise articles that present barely-any-rewrite of existing code as some sort of thought experiment or learning process. &amp;#x200B; There is ZERO value in this: \&gt; const any = (arr, fn = Boolean) =&gt; arr.some(fn); &amp;#x200B; Stop it.
Oh shit, I guess I have to do no work today while I read about hooks and refactor some components
Man, gane code would've been so much nicer if our vector implementations could overload operators.
&gt;(((n % 360) + 360) % 360) Wraps all values to within 0 - 360 (pattern can be applied to any range).
Dangerous with unexpected falsy values like 0
Have you ever been in prison for making love to a chicken? ✓
You don't need to do it in a try...catch. If you add .catch() to the end of .json(), that will do exactly the same as what you've done there and is what I originally posted.
I'm more astounded by the aggressive "marketing" of this website.
Not a thing in JS.
Getting the last element of an array: `array.slice(-1)[0]`
`log = (val) =&gt; (console.log(val), val)`
There is a [full section on Axes](https://www.chartjs.org/docs/latest/axes/) in the documentation. It's all there.
Careful with syntax! You need a set of parens around the object: this.setState(({toggle}) =&gt; ({toggle: !toggle})) Even worse, it's still valid syntax because `toggle:` is interpreted as a [label](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label)
https://reactjs.org/docs/state-and-lifecycle.html#state-updates-may-be-asynchronous
With the latest version of ES that second one becomes: list.flatMap(({sub}) =&gt; sub)
Chrome dev tools. 
This actually turns the number into a 32 bit integer. It is *not* the same as Math.floor. test it on some large numbers to see the dramatic difference. 
[removed]
Engines that support asmjs use |0 as a backwards compatible type annotation. It means "this value is a 32 bit integer". It is not the same as Math.floor, although with integers that fit into 32 bits it will behave like it. 
I can't think of a use case where I'd want to materialize an array of numbers equivalent to their index - I'd just use the map function directly.
Due to the same fact, if you want to log a variable at any given point, you can just add a conditional breakpoint with console.log(variable) and I'll log without stopping execution 
Clever. But gross.
Holy shit, done are the days of adding curly braces just to log shit. Thank you so much.
 [...Array(10)].map((_, i) =&gt; i) I always use the array methods when iterating through arrays, and never for-loops. Sometimes you don't have an array with data, but you know the length of it. This snippet spreads an empty array with values, if you don't spread it, you just get an array with the length of 10, which you can't iterate with the array methods. 
Discouraged by a lot of linters, but: ```!!~[1,2,3].indexOf(2); // true``` Polyfill for `Array.prototype.includes()`
Note that `$` already functions as an alias for `querySelector` in the Chrome (and I believe Firefox?) console, assuming it's not already defined as something else.
const iota = n =&gt; [...Array(n).keys()]
...arrayVar
In reality you'd probably never use that line in your last snippet like that; you're handling potential network and JSON parse errors, but completely ignoring the response status (since we should all know by now that non-2xx statuses don't reject the promise). And as a lazy one-liner `const data = await fetch(URL).then(r =&gt; r.json())` reads better IMO.
I wrote a little piece using environment variables that turns debugger on locally as well as different levels of logging in my code. It's been very helpful.
Use environment variables and leave it in. 
Incidentally, that's the only construct involving Array's `filter` method that Flow understands. They hard-wired it. All other `filter` functions don't do any type refinement. Ironically, Flow does not understand if you really feed boolean values into this filter, I forgot which one but either false or true is not understood (by Flow, of course the actual JS works). Instead, this works to filter `null` and `undefined` - as type refinement, meaning the result type is an array that no longer includes Maybe types.
Use something like config/configly to setup your config variables.
Hi /u/islandnoregsesth, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
You can do some funky stuff with logical operators, like: Default values: `val = val || 42; // Set "val" to 42 if it's non-truthy` (Note that there's [syntactic support for default parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters) values in modern JS versions) &amp;#x200B; Null checks: `myObj &amp;&amp; myObj.myMethod(); // Call myMethod only if myObj is truthy`
I prefer this form, with `||` you have to remember the fact that `console.log` returns `undefined` (I'm sure if you use it enough it becomes idiomatic though).
Dev-tools is the context of the conversation
If we're going there, why not: `const sleep = ms =&gt; data =&gt; new Promise(resolve =&gt; setTimeout(resolve, ms, data))` 😉
Right, it doesn't make the method "weird", but it is something you have to keep in mind regardless.
I'm very new to javascript but this seems pretty cool! Thanks
If it's not, you can do: array.length &amp;&amp; array.every(Number.isFinite)
When you want to create a sprite animation from images in an array this is the way you achieve that. 
debugger;
Wow, you are right. `Math.sum is not a function`. I'm confusing it with Math.min/max and was extrapolating it would exist for sum.
/r/iamverysmart
Worth noting that if there were duplicates in the original array, the position for an element will be based on its first occurrence.
console.log
First of all, you could move that decision into the _retriever_ and then you'd only have _one_ of those. It would be the retriever the _only_ place where you would care about which type of email to produce. The tests don't need to know which environment they are in or that different environments will use different emails. But also, instead of making it depend on which environment you're on, why not _explicitly_ set up a configuration flag to mark if that environment should or shouldn't do the action? Not only it's easier, but it's also more **flexible**. In the same way that you have your configuration in the .env file with some entry saying `email: ...`, you can have another saying `createAddress: true`. Then you pass that flag to the _"retriever"_ and there you check the flag and do what is appropriate.
What'd the comment say? It was deleted
Possibly stretching the definition of a one liner, but it can be handy: ``` const parms = location.search.substr(1).split("&amp;").map((x) =&gt; x.split(/=/)).reduce((acc, [key, value = true]) =&gt; (acc[key] = value, acc), {}) ```
(removes all falsy values from an array)
There's a SVG drawing .
That's a space ship.
It's very cool, but I still prefer `console.log` I think, since they can be commented out and uncommented at any point later during development. Generally a production build will automatically strip out logging won't it?
My lord almighty
My apologies, apparently noone gets a joke...
This is so simple and delicious...
So, if each slide displays for 1 second, we are good for 285 427 017 years.
ughhhhh i try to forget those days
I am doing a job application challenge and I have to show a list of products. They didn't provide images, but I want to use stock photo images to give the page a nicer look. Some categories have 5 products, some have 1, others have 20. So I downloaded about 10 stock photos I like and now I can iterate that array by using the product's iterator.
I've already commented that on some previous post like that, and it's not exactly one-liner but the "Group By" implementation: var groupBy = function(xs, key) { return xs.reduce(function(rv, x) { (rv[x[key]] = rv[x[key]] || []).push(x); return rv; }, {}); }; and using ES6 syntax: const groupBy = (xs, key) =&gt; xs.reduce((rv, x) = &gt; { (rv[x[key]] = rv[x[key]] || []).push(x); return rv; }, {}); and if you really want a one-liner **I think** that should work: (**not tested!**) const groupBy = (xs, key) =&gt; xs.reduce((rv, x) =&gt; (rv[x[key]] = rv[x[key]] || []).push(x) || rv , {}); &amp;#x200B;
I hadn't seen this! Amazing!
The compiler/minifier can deal with it too, but your colleagues will still hate you.
\`console.log(somethingHere)\` because that's the best way to debug code, isn't it? :)
First line, "One of my *past* times is writing compilers"... not a good start :)
Action script
Just put the module outside the deployment path. If they change a lot, have your startup script use sftp with a certificate to grab them from a secure location at startup. Set an environment variable in bashrc (or whatev) so the script knows if it should grab prod or test.
Shouldn’t everything be opt in after gdpr?
Pascal/delphi
Of course. It's not a one size fits all solution, but per the topic, it's a useful one liner. The onus is on the dev to know their own dataset.
Where'd yearsFromNow come from?
\`Array**.**from({ length: 5 }, (**\_**, i) **=&gt;** i);\` for unused variable
Do we really need *more* literature describing JavaScript fundamentals on the web these days? There's already a huge swathe of articles out there
I used to use it all the time. Now I only use it when I have no sourcemaps (which is very rare). Other times I just add a breakpoint, which is why easier to manage.
Why the `@`?
Should've been (and is now) pastimes
Agreed.
$$ is querySelectorAll in DevTools, except it returns the nodelist as an array, which is nice. Example: $$('.ad-container').slice(-1)[0].remove();
Ooooooooooo...
&gt; const {abs, floor, random} = Math; How's this work?
Two of my favorite Chrome console commands: debug(funcName()); That sets a breakpoint on a function of interest. $$('.ad-container').slice(-1)[0].remove(); The $$ mnemonic in DevTools is equivalent to querySelectorAll, except it returns the nodelist as an array, thus quickly and easily making array methods available. The above line removes the last result in the set from the document.
Object deconstruction. It's new in ES6. Eg: ``` const obj = {a: 5, b: 6, c: 7}; const {a:aaa, b} = obj; alert(aaa); alert(b); alert(c); // Hasn't been created. ``` Basically, you can pull variables from objects easier. Instead of ``` const obj = {a: 5, b: 6, c: 7}; const aaa = obj.a; const b = obj.b; alert(aaa); alert(b); alert(c); // Hasn't been created. ``` Since Math is an object, you can do the same. Read the MDN in it. It's pretty useful.
`!#this`
Is this how that one linker works with Math? const {abs, floor, random} = Math; What's the technique called?
console.log(...blah, blah, blah) ;
What does that do? Isn't it identical to : const value = (statement);
Basic
It will implode on `undefined`, circular references, and most appallingly, objects with different key orders. People really need to stop using the JSON trick.
Heck, I'd hate my self if I left them in
yes. this should work. it's called Destructuring. check the link below &amp;#x200B; [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring\_assignment#Basic\_assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Basic_assignment)
This one wins for me. Thank you!
`const { abs } = Math;` Is basically shorthand for: `const abs = Math.abs;` It's called destructuring and was introduced in ES2015. Here's a good reference: https://hacks.mozilla.org/2015/05/es6-in-depth-destructuring/
It makes no sense because the purpose is to give UI based on state.
/r/LearnJavascript
 console.log=(()=&gt;{var a=console.log;return(...b)=&gt;{a(...(!(b.length&gt;&gt;1)&amp;&amp;b[0].charAt?['%c'+b[0],'font:1em Comic Sans MS']:b))}})(); This will change the font of your console.log statements to Comic Sans. I don't know what I would do without it.
To add to this, I found out recently that you can rename the variable you're destructuring to (not sure if that terminology is correct) &amp;#x200B; `const { foo: prettyName } = { foo: 1 };` &amp;#x200B; I find it useful with things like axios which puts the response data in a \`data\` prop and you need to do a few of them: cost { data: users } = await axios.get('/users'); cost { data: comments } = await axios.get('/comments'); &amp;#x200B;
Seriously what's the point of abstracting this into a utility function? It serves no purpose whatsoever. It honestly baffles me
Hi /u/ValuecoderOffical, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Ada and Smalltalk. Erlang indexes tuples and lists starting from 1
// HACK
Destructure from 'loadsh-es' so you can tree shake! &amp;#x200B; `import { values, clone } from 'lodash-es';`
Gonna have to run that past the client 
I usually write a tap helper or if I'm using lodash it has it. const tap = (fn, tapper =&gt; (...args) =&gt; { tapper(...args); return fn(...args); };
It's a shortened if-else statement. It's a shortened "if else" statement. You can use it to do such things in small snippets, for example: function doSmthng(input) { let limitedInput = (input &lt; 0) ? 0: input; limit input to 0 if less console.log(`[i] Input: ${limitedInput}`); } doSmthng(4); doSmthng(-123);
Whoops changed a variable name halfway through the example hoping it would make more sense. 
This is the first server side language I learned back in the early 2000s
GitHub Pages doesn't support git lfs unfortunately
Not needed anymore! [https://developers.google.com/web/updates/2019/01/devtools#logpoints](https://developers.google.com/web/updates/2019/01/devtools#logpoints)
Also note the counterpart, `Array.prototype.some`. Returns true if one or more items match the condition. const arr = [1, 2, 3]; arr.some(n =&gt; n &gt; 2) // true arr.some(n =&gt; n &gt; 0) // false 
Some IDEs have syntax highlighting for `@TODO`
No way. Such elegance!!
This is not what I meant when I wanted to become a hacker as a kid.
Please never do this.
I agree with AirBnB, don't use them unless you're building something really different/special that might call for some fancy bitwise operations (like emulating a CPU in JS or something like that) But also, when is your average CRUD app going to hit a number as high as 2**31? Maybe in high level finance or sites with above average traffic (like reddit)
Yea... that is *completely* unreadable...
I sort of wish I could define what constitutes equality with a Set (random PTSD flashback of hashCode and equals in Java) er maybe I don't...
The text overlaps on mobile. 
You’re telling me I’ve learned what the second arg in console.log for nothing?! It’s nice for inspecting objects (readably) in test suites too—quick,… someone tell me the smarter way to do that too
Yes, but I have seen more violations of that part than compliance.
From a career stand point I see far more jobs looking for React than Vue. I personally like VueJs more but if your looking to add value to your career you might find learn ReactJs. &amp;#x200B;
The title is a bit misleading as the article focuses only on the hosting side of things (there's a [link](https://softwareontheroad.com/continuous-integration-s3-cloudfront) in the conclusion to another article which talks about automated deployment though)
 Am in mobile so not sure what effect you are seeing. But surely you can view source
Becouse onclick event is used for a **mouse** click. On mobile you need to use the [touch](https://developer.mozilla.org/en-US/docs/Web/API/Touch_events/Using_Touch_Events) events.
When you scroll down, the navbar hides When you scroll back up, the navbar shows again. I know how to implement this, but I want the smooth behavior that the Material component has (without using the material library for this project) I can't see the source because they are using their material library
so I understand what's going with this with integers, `23|0` will always return `23` because you're comparing `10111` with `00000` so it will always return `10111`. So I assume this just casts the float to an integer and does the comparison, effectively doing a pseudo math.floor. Like /u/rcfox pointed out, it doesn't work for negative integers: Math.floor(-21.12) === -22 // but -21.12|0 === -21
oh god this is so obvious now that I feel stupid for not doing this lol
`// TODO`
&gt; In order to *avoid* duplicate code If you have to ask how to avoid duplicate code, my advice to you would just be to write duplicate code first. Then you can see how those two instances of whatever have overlap / differ, and then you can abstract those details. If you're insufficiently experienced, there's no point in premature abstraction, because you have no idea what the requirements for the abstraction are. For your use case however I'd recommend that you conditionally export from a wrapper module which switches on the staging type, like so: First define your retrievers: ### `retriever/localRetriever.js` ``` module.exports = "email[at]example.com : password1"; // this can be a string, function, whatever ``` ### `retriever/devRetriever.js` ``` module.exports = "realemail444.id[at]mailosaur.com : randompass"; // same here ``` Switch on them in the wrapper module: ### `retriever/index.js` ``` const localRetriever = require("./localRetriever"); const devRetriever = require("./devRetriever"); switch(process.env.STAGING_ENV) { case "local": { module.exports = localRetriever; } break; case "dev": { module.exports = devRetriever; } break; default: { module.exports = null; } } ``` Then just call the wrapper in your test logic: ### `test/some.test.js` ``` const retriever = require("../retriever"); // do something with retriever ``` That should work
console.log(this);
Something like, “I like to convert strings to ints using the urinary operator” 
A bit more of debugging: console.log('%cI am a big fat red log record', 'color: red; background-color: yellow; font-size: x-large') — css formatted console logs, note the '%c' before the logged value //# sourceURL= 'whatever.js' — let the devtools (at least Chrome) know the name of a dynamically loaded script (loaded for example by jquery's $.load(path)). This allows direct modification of such script inside devtool's 'sources' tab (for the current browser instance - not physical file, of course). Without this the script will be referenced as 'WM#####' and non-modifiable. Note this marker must be inserted on the last row of the script and the script must not be minified (it can, but then you have to do edits on the minified single row. As soon as you use the 'prettify' feature of the devtools it will become unmodifiable again). Then you can save your changes by Ctrl+S without need to reload the page. This actually saves me huge amount of time per day as I am a maintainer of SPApp and each such rebuild&amp;reload takes quite a while
``` rm -rf $(which node) ```
Good to know there’s a native version of this; I’ve usually just grabbed it from Lodash
I'm _aware_ that you can catch. What that _won't_ do is direct control away from the happy path once the awaited promise is complete. I _want_ to not go down the happy path upon error, since _my code is no longer happy_.
That's how I mass unfollowed everyone on my old Twitter, I hadn't used it in a few years and previously I had just followed a lot of random people because they had followed me first, ended up with 1000+ I didn't care about, I wanted to start over without losing the follower count so I just iterated over and clicked all the unfollow buttons
No disagreement here.
Inspect the source and you'll see that the top bar is fixed position. As you scroll, the 'top' value is changed via JavaScript. It just never goes above 0 or below -128, the height of the bar.
Are you using `onclick="TheNameOfYourFunction()"` in a HTML element?
`'#' + Math.random().toString(16).substr(2,6)
When i dont want to include a lib with function utilities, i like to access a object property with this function: &amp;#x200B; const pluck = (...keys) =&gt; obj =&gt; keys.reduce((result, key) =&gt; result &amp;&amp; result\[key\], obj) const getC = pluck('a', 'b', 0, 'c') const test1 = getC({a: {b: \[{c: 1}\]}}) // 1 const test2 = getC({a: {}}) // undefined
Can you give a concrete example?
Is the data going to be accessed in a separate component? If not you probably don't need to use react redux. If you're going to access the options in more than one component then I would use react redux.
Debugging is embarrassing?
WAT
.sort(() =&gt; Math.random() &lt; .5) does, I think?
fml, webpack is old-fashioned now, too?
This is neat. I've usually done: new Array(5).fill().map((\_,i) =&gt; i) &amp;#x200B; I like your way better.
Configuring webpack takes weeks for a new developers. And even after that its so confusing
In FF $ is indeed like .querySelector, and also $$ is like .querySelectorAll, except that it (helpfully) returns an actual array, not NodeList.
Hi /u/theamazingspartan, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle). Please just no. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/FragileStudios, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/TheArduinoGuy, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/safaribrowserram, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/magic_alf, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
That's beatiful. I've always done array\[array.length-1\], which is blech because you ahve to write array twice. The humanity!
Hi /u/jsloverr, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Can somenone tell me how to implement in react app?
Hi /u/little_LLT1, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/symplareN1, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/alexmesro, this post was removed. Job and job-related posts are prohibited * Job postings: Please post to /r/remotejs, /r/forhire, etc. instead of here. * Job/Career advice: Please post to /r/cscareerquestions instead of here. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/bigorangemachine, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/tearzgg, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/a_antoci, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Neon46, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Copying your entire data structure twice to remove duplicates is good to you?
Hi /u/santypk4, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Well maybe configuring webpack is not a task for a junior dev with two weeks of bootcamp experience? Webpack is quite explicit in it's configuration...
Tbh webpack is a hassle and I'd be happy to get ride of it from my workflow. Don't care if new alternatives are "kiddies' play" or whatnot. As long as they get the job done... There's a reason for why new frameworks keep poping up.
Hi /u/Extracted, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Webpack has a lot less sense right now than a couple of years ago. The nature of Webpack is package the source code "polyfillying" through tools like babel. But, why do you use babel? You use because you need to transpile to ES5 due to lack of ES6 browsers support. &amp;#x200B; The point is you don't need ES5 support anymore (mostly) because all the popular browsers out there supports ES6+. So, what's the logic behind creating a giant ES5 bundle for browsers that can run directly the original code?
Shouldn't be just moved to the other forum? I think it should be kept.
Asset bundling, JS minification, tree shaking, code splitting, hot module reloading, support for exotic languages (Pug, JSX, Handlebars, Sass, etc.), bundle analysis, asset versioning, sprite generation, image optimization, ...
We can't move posts.
I know Webpack is supposed to be great when it works, but for something that applauds itself on "no config", I sure do spend a lot of time confused about configuration. It makes me feel really dumb.
It's Elixir code :)
Is there a similar term for \`.some()\` always returning \`false\` on empty arrays? I suppose it's still "vacuous", right? So maybe "Vacuous Falsity"?
Nope, but close. Math.random() &lt; .5 is either true (1) or false (0). sort() expects a function with return value -1, 0, or 1 (or just -1 / 1, if you're just trying to shuffle things)... so `Math.random() &lt; .5 ? -1 : 1` would do it. Probably be a bit faster than the floating point math, too.
In addition to the reasons stated in the post below, Babel can be used for any new JS feature that doesn’t yet have browser adoption. A new spec is put out every year.
I’m ashamed to say it but it is still console.log()
So you mean webpack should ben used only in teams with multiple people? Then its useless. FYI I use nodejs since 2012 and 20years of web experience 10+ years at google and it even makes me bad. For me its gradle 2.0
Ooo I will look into that! Does it ship w a lot of packages? I started using parcel but I'm always looking to see what nice shit ppl r building 
...gzipping, css modules, env-specific logging, source-mapping... 
Since webpack 4 was released with tuned default options, its quite easy to setup basic webpack config for simple project. Its not production ready, but no junior can be expected to handle production infrastructure level of problems, right?
`debugger` statements went out of style once chrome dev tools became awesome &amp; no one wanted to eff up production by forgetting to remove `debugger`s before shipping Dev tools is overpowered &amp; cumbersome for most debugging problems though IMO—drop a `debugger` in, realize you misspelled a var &amp; move on
&gt; "When you have enough money, hire a Webpack expert" ...and now you have to port your whole project over to Webpack. I don't know why Webpack as such a reputation for being "scary" since v4: It comes with a bunch of totally sensible, no-config default "modes". Basically all you have to do to get started is add your loaders on top of those. Your config's complexity can grow over time with your project's. Webpack is complex because it's powerful, and we need a powerful tool in this space because, for better or worse, we now serve fully-fledged software programs to the browser (rather than just "websites"). But in the interest of full disclosure: I was lucky enough to have the opportunity to do a month-long deep-dive into Webpack for my employer this year, and it was one of the most rewarding "level-up" experiences I've had lately. It forced me to develop a deeper understanding of performance, browsers, and our app, all of which are good things to be forced to understand. If you're just making a website with some es6, skip it. But if you're making a complex web _app,_ I think Webpack is worth the time investment.
A quick way to have only unique values inside an array (Don't know if works with objects). const uniqueArray = Array.from(new Set(arr));
But, NodeList has forEach... if you example used map or reduce it would make more sense 
Oh c'mon it was funny guys
I personally have found that webpack is fairly easy to setup. I don't use it with CSS anymore, since I delegate that to npm scripts. Being able to import/export files in a project that isn't library/framework based is nice. 
Webpack gives users control and granularity, which does require setting up and configuring based on that project requirements. Just like any tool, it may take time to configure but is worth it on the long run. 
Webpack is amazing...
One thing I've wondered is how developers can rely on all these dependencies and be confident in the security of their application.
Native ESM modules? Great, unless you're still stuck to supporting IE (and some other old browsers).
`console.log()` And THANK GOD for it
&gt; Since version 4.0.0, webpack does not require a configuration file to bundle your project, nevertheless it is incredibly configurable to better fit your needs. https://webpack.js.org/concepts Often misquoted, but yes it is very notorious for being a _pain_ to do anything really.
I can't find any single mention to actual performance numbers comparing it against webpack. Just "it is faster because http/2" is not enough, sorry.
[removed]
+1, I feel the exact same way. I don’t think that that makes us dumb :) That’s a big part of why this project exists and what the article is trying to communicate: - bundling used to be optional - it became a requirement to use npm packages on the web - @pika/web also accomplished this for you with much less complexity - therefore, you can now use a bundler like webpack because you genuinely want to, not because you are absolutely required to. The last section of the article explains how you can skip bundling and still build a fully complex web app.
RemindMe! 3 days
It crashes on search
Project Page (?): https://github.com/dlcnine/TypeWriter *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
CSS
I'm not sure if you've been living under a rock, but large enterprises aren't willing to risk their apps failing in a potential customer's browser on the off chance that it might have es6+ support.
I released the version 0.9.5 of the blop language: https://github.com/batiste/blop-language
nice, but would be much cooler if it could analyze diffs, so I could send it two text versions and it does the morphing by typing/erasing 
Since i discovered parceljs i have never felt the need to use webpack again. Is there an argument to be made against parceljs? 
Not true: good tools don't require configuration out of the box, they use intelligent defaults to get most people working "out of the box". The fact that Webpack didn't use to do this is a *huge* factor in why so many people have switched to its competition.
Or simply a doubtful future
And I'm out here just starting to learn webpack smh
Even being configurable, pray you don't need to configure Webpack ¯\\\_(ツ)\_/¯
In typical Reddit fashion, we're all talking about the title (Webpack) and not the article (which is about @pika/web). As someone who teaches an intro to web dev class with React, and has to deal with student after student (who all just learned HTML/CSS/JS only a few weeks prior) having real difficulty getting React to work. But it's not React that's the problem, it's Babel and the command line. The @pika/web approach eliminates all that hassle, and seems extremely promising to me. As they even admit, when your site gets more pro you still might want a bundler, but it completely shifts the burden from "you need a bundler to code" to "you need a bundler if you want a slight performance optimization."
Ofcourse. Recently, Parcel was found to be slower than webpack 4. Devon Govett, the founder of Parcel, agreed to the validity of the stats. [Here is a link to the original thread.](https://mobile.twitter.com/bukharim96/status/1099049693290680321)
cartesian products are pretty simple shit, I'm dumb at this that's why I'm asking the question. Don't see why some of you have to be so negative
Max and min numbers in an array: ``` Math.max(...foo); Math.min(...foo); ``` 
So true, I'm coding a crypto-related webtool and I am extremely cautious when adding new packages.. 
They sure put in a lot of effort to make it more easier to use from the start, I remember the days of v1+, now that was a pain to configure. 
It is worthy to note that such defaults are at times *'guesses'* of what loader should handle certain file types. In the real world, not only is it against your project's standards, it causes a significant build time overhead (especially in projects that require a lot of loaders, plugins, optimizers, etc) which will increase the likelihood of not serving a **deterministic build** to your end users. This is, to say, judging from webpack's core.
Yeah, but CSS doesn't have loops, so this isn't as bad.
You still have minify, and not every libraries is in "module" format. And you still need some kind of compilation for most front end toolkits: Sass, JSX, etc. In order to not run into speed bumps, surprise non-working libraries, perform compilation, and half a hundred other things, you end up with webpack anyway. 
I've genuinly never heard of "you need a bundler to code" notion. Regardless, I assume the topic of dicussion steered towards webpack instead of the article because of the title. To claim "a future without webpack" is just click-bait, and we all fell for it :D
I've tried it. What I don't like about it is that it's inflexible when it comes to the location of output files. It even has or had a bug that resolved assets incorrectly in certain situations, so images, fonts etc. were referenced with the wrong path. And there's no way to change that.
Welcome to the world of nodejs and npm.
`parcel index.html` always keeps me away from `webpack` to test anything right away
I wasn't good at Maths in school so the first sentence sounded pretentious.
Webpack is used in Gatsby so technically I've been using it for a year or so without ever touching a config. I guess that's a testament for its use in a system where it's pre set up for a specific purpose and works pretty well for it. I did run into issues running across different deployment platforms/servers which seemed to be related to Webpack so it's obviously not a "perfect" config but it seems to work on 75% of them which isn't bad. I wonder if they just need to invest more in docs and developer education. 
Same here. Try doing anything webpack does without webpack and suddenly you appreciate it much more. 
&gt;I don't use it with CSS anymore, since I delegate that to npm scripts Care to elaborate? I really wonder what you mean.
Ive been able to change the location of the output files. I haven't had bugs so far with any assets. But I believe that was the case. I just feel that parcel really does accomplish the no configuration necessary goal. 
Also I write docs and examples professionally and I've been trying more and more to do them without dependencies on bundlers or frameworks. Like there are a lot of APIs where all the examples are written in jQuery or require Webpack, which makes them a lot less flexible/reduces the audience. &amp;#x200B; &amp;#x200B;
It's mainly a React thing: React relies on JSX, and while technically that only means a dependency on Babel, in practice doing things with just Babel is awkward. Also, it's not how 99% of the code you'll find online does it: virtually all online code uses `require` or `import`, so if you're trying to learn React without a bundler it's challenging.
Cool idea, worth the read and good things to learn here, but I'm struggling to see a use case where I would want this over GA. Maybe in the instance of tiny websites that don't do anything - like this guy's 3 page site. Even then I'd probably prefer the wealth of functionality from GA. 
But it's really really not.
This is the same with some other webpack competitors, they cannot back their claims of better performance and speed with testable/verifiable benches. A good example that comes to mind is parceljs. They still maintain the same false and outdated benches on their site since their conception upto this very day. &lt;img src="[https://i.imgur.com/UsO7jaP.png](https://i.imgur.com/UsO7jaP.png)" title="source: [imgur.com](https://imgur.com)" /&gt;
Possibly just copying CSS files in to the build directory.
set theory is a lot more intuitive than calculus and geometry, and applies well into programming. Read up on it, I was never "good" at math, but in a programming sense this scope of math came easy
Indeed. My reply was simply meant to contribute, not dispute. Pick any other array-only method to use with my example instead. =)
I really like Webpack - it gets the job done and works. The only caveat is that it took me a week to fully understand what I was doing with it. If I could go back, I'd take the front-end masters webpack course before starting. That alone would've saved me 3-4 days.
I'm not sure if it's gotten easier or if I've just become accustomed to its ways.
React does not 'rely' on JSX. It is just syntactic-sugar to simplify development with it in a practicle sense. It can work perfectly fine without JSX, although this is not advised nor anywhere near desired in most cases.
Should we throw anything away that's difficult for new developers, even if it allows us to accomplish good, complex things?
I'd do something like this: ```` const loggingFn = fn =&gt; function (...args) { const ret = fn.apply(this, args); console.log(fn, this, ...args, ret); return ret; }; ```` https://jsfiddle.net/2fhm8ot5/
You can define scripts in your package.json file. Then do stuff like `npm run wach-scss` With just npm, node-sass, and nodemon you can auto-compile your css files.
I'm about to end this man's whole career [...Array(5).keys()]
I don't have webpack handle anything related to CSS. I instead use npm scripts w/ the appropriate packages to bundle, compress, prefix, and build my CSS. I do this because I don't believe in using webpack for CSS, as it's adding content that can be dealt with elsewhere. I can show my package.json if you still have questions.
+1 to the FEM course on Webpack. It helped me understand exactly what Webpack is doing, and realize that it isn't really as complicated as I thought it was.
Parcel is great until you need to configure something that isn't yet covered by the base configuration. Once you have to start configuring things yourself, there's little benefit over Webpack's v4-style default configs, with the added detriment that Webpack is the industry standard. For me, that means using `parcel` on personal projects or small static sites and using `webpack` for professional work or complex apps.
Hi /u/ny_gramps, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
 new Date().getFullYear()
&gt;I've genuinly never heard of "you need a bundler to code" notion. &gt; &gt;It can work perfectly fine without JSX As long as you want to make everything harder and slower to develop, while also never using anything off the shelf nor be able to reference examples and tutorials—then yeah, sure, React doesn't "rely" on JSX. Stop being pedantic.
What's really annoying is that I end up learning it for a greenfield project - but I seem to start new projects at about the same rate as they release versions.
\`// TODO:\`
`break outerLoop;`
\`// TODO\`
` // TODO `
Most of my projects that use GA are SaaS-based or just web apps in general - I realized that I really don't use much beyond the generic traffic variables and system info for my projects. I really only value the device information, browser info, and aggregate numbers with some basic events tracking. Most of the events tracking I have sent to another report silo anyway, so its usually just UI/UX event collection and making sure I am putting the right elements in place. The other mountain of info is just extra paralysis and adding some "cool factor" to my workflow. YMMV though since I did have to use a LOT of functionality for marketing fronts and ecomm sites where flow and such is critical.
TIL: about extra parameters for setTimeout. Thanks!
const $ = (selector, startNode = document) =&gt; \[...startNode.querySelectorAll(selector)\];
You mean how quick is it to generate the web modules part? Because it doesn’t do any bundling of the rest of the code so I’m not even sure if it is comparable 
JS Minification: you can do it using a module for that. You don't need Webpack. Hot module reloading: what the heck this has to do with final browser support? bundle analysis: look out there, you can pick a standalone one. For tree shaking, code splitting, and the rest, you have a valid point. However, you can just use Rollup with the same benefits and still serving ES6+ code.
Why on Earth would anyome use Web pack instead of Parcel
 (((n % 360) + 360) % 360) === (n % 360 % 360 + 360 % 360) % 360 === (n % 360 % 360 + 0) % 360 === n % 360 % 360 % 360 === n % 360 &amp;#x200B;
coming from a humanities background, i like flowery language and cute writing as much as anybody. but why is most web-related coding material written like some cute little blog? I don't think it helps JS's image to have articles starting with "The year is 1941. Your name is Richard Hubel". No it's not you damn clown. I understand that web-design and JS is a younger demographic, and I'm not advocating for a return to stodgy-ass techno-babel like some C documentation or something like that.... but come on. I'm reading an engineering blog not teen vogue
&gt; stodgy ass-techno-babel *** ^(Bleep-bloop, I'm a bot. This comment was inspired by )^[xkcd#37](https://xkcd.com/37)
i'm up for some ass-techno
https://www.pikapkg.com/packages/?q=react Looks like React doesn't really play nicely. That's a bit of a dealbreaker.
How fast is for the browser to download and execute hundred (thousands?) of small files over http/2 vs a few big bundles. Not a synthetic test, but measured with real traffic from users, with real-world cache-hit ratio, network latencies, CPU power etc. Generating the modules quickly is the wrong problem to solve IMO, because is a problem that can be solved by throwing money at it (eg: spin up a big ass EC2 instance and bundle everything there)
I was merely pointing out the unnecessary restrictions you were imposing on React. This is a common thing among newbies.
&gt; Dev tools is overpowered &amp; cumbersome for most debugging problems though IMO ...what? Dropping in a debugger statement and pointing in a break point where you would drop your debugger statement is the exact same thing.
find / some are pretty useful as well. 
Just serve ES6+ for modern browsers and ES5 for older ones. Why you should to put apps on risk? The point isn't that. The point is that you don't need to use Webpack for every app you build.
Because of these performance differences. Check out this [benchmark clip](https://twitter.com/bukharim96/status/1099049693290680321?s=20).
I’ve not tried pika yet so I’ve not checked whether it keeps all the dependencies of each package as a separate file or it bundles the dependcies together after accounting for common dependencies So modules that are only used in one main package and bundled with that but modules that are used in more than one are bundles into more common groups 
Hi /u/stoned_phillips, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
If you think Webpack is bad, take a look a Kubernetes configuration! Like at least Webpack doesn't have to be in whitespace-sensitive YAML. Unfortunately, config pain is unavoidable when we have complex systems with lots of abstractions (and knobs to turn).
Hi /u/nochitchirlock, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Collection.map(x =&gt; x.SomeProp)
You can also use `console.table()` instead of log for improved readability.
It depends. If I've got a list of 10 items, this is totally fine. Sure it's I'm using more space than I need, but it's pretty negligible. If I've got a list of two million items, of course this is stupid. One liners often trade performance for terseness, which is what this does. If you're writing JS code where literally every single byte counts, more power to you, but most people aren't. This is perfectly acceptable for small arrays.
`collection.map(x =&gt; x.someProp)`: Good way to list out properties of a collection `Array.map(Number)`: Sometimes I get IDs as string, quick way to convert them
Right, so basically it relies on it :-P No need to get pedantic.
Yep. I still use gulp because I could never get my head around how to config webpack for what I wanted. I still have problems with gulp now and then but that's just because I'll need to use a specific lib or package with no helpful documentation.
Yes, If there is an easier alternative that also can accomplish those things
&gt;const splitBy = (fn, arr) =&gt; arr.reduce( (\[ l, r \], c) =&gt; fn(c) ? \[ l.concat(c), r \] : \[ l, r.concat(c) \], \[\[\],\[\]\] ) // eg const \[ odd, even \] = splitBy( (x) =&gt; x % 2, \[ 1, 2, 3, 4, 5 \] ) FTFY: const splitBy=(c,t)=&gt;t.reduce((\[t,e\],n)=&gt;c(n)?\[t.concat(n),e\]:\[t,e.concat(n)\],\[\[\],\[\]\]),\[odd,even\]=splitBy(c=&gt;c%2,\[1,2,3,4,5\]);
But there isn't yet, hence the comments.
YOU GO TO YOUR ROOM AND THINK ABOUT WHAT YOU DID, YOUNG `$genderPronoun`.
&gt;as someone who teaches an intro to web dev class I respect that you teach React, but perhaps this might be where you're oversimplification of the matter stems from. This might be great for beginners, but in the real world, let's be factual.
The future is now old man
Right, I was making more of a broad response, personally I like webpack.
I've also lead multiple teams developing major web applications: I am very much aware of what the "real world" of React development is, and I *guarantee* it is not a bunch of coders writing out createElement statements. I repeat: A) 99+% of React developers use JSX, they don't write out the equivalent Babel-generated code by hand, and B) you're being a pedant. Since you don't seem to understand what that is, look it up.
Im struggling to grasp why it matters? My page still refreshes basically the exact moment i hit ctrl+s
Oh I see now, thanks. Yes I'd like to see your npm scripts. 
&gt;you don't seem to understand what that is, I recommend you look it up So besides being a React teacher, you're a part-time english teacher? :D Com'on man, all I'm saying is don't oversimplify the matter. In no way have I opposed the use of JSX (infact I like it, and use it all the time), so where are you getting these non-existent sideline arguments from?
Alright, I never thought of compiling scss that way, thanks. 
I recently found "console. table()" and now I'm using it almost every day. 
I also feel like Webpack is being relegated more and more to be the plumbing that's hidden away from the casual developer. As far as I'm aware the majority of new Angular, Vue and React projects all use Webpack without their developers every touching its configuration - much like Babel.
Reporting in: webpack actually brings a looot of sanity.
What about create react app. You can get a long way without ejecting these days.
It displays "Exist" for values 0 to 9. `in` is for objects, so it looks like it's checking for the index numbers that are present, rather than the values in the array itself.
So basically intelligent guesses aren't possible? Except that's exactly what parcel and roll-up do (one moreso than the other).
If you don't mind me asking, what is the solution to this? I have been searching high and low and weirdly nothing can be found for such a simple task. 
I am trying this for loop as well and it still doesn't seem to work. function checkifto() { let yolo = document.querySelector(".fname").value for (var l = 0; l &lt; listtt.length; l++) { if (listtt[l] === yolo) { return pp.textContent = "True" } else { return pp.textContent = "False" } } } &amp;#x200B;
Dude, just stop.
It sounds like you're not debugging the test suites in Chrome DevTools. you should do that instead ;) just add `--inspect-brk` when running the node process and follow the instructions.
Console.log yields undefined which is falsy. Therefore 'b' gets returned by the expression 
```console.log('a') || 'b'``` Will log ```'a'``` to the console and return ```'b'```
Former Literature major, but close enough. That's hardly relevant though ... let's recap shall we: Ghostfacedcoder: Bundling is hard but essentially necessary for React, so this new approach is great Bukharim96: I've genuinly never heard of "you need a bundler to code" Ghostfacedcoder: React relies on JSX, which technically only requires a transpiler but in practice (for reasons I gave) requires a bundler too Bukharim96: Makes an obvious but meaningless point "React does not 'rely' on JSX" (this is where you're being a pedant: you're chiming in with a fact that is irrelevant to the argument, but technically true) Ghostfacedcoder: Calls out your pedantry and points out that while it's technically true that React doesn't *require* JSX, essentially all mainstream React development is done with JSX bukharim96 : Attempts to insult the fact that I teach, while making a claim without any support ("This might be great for beginners, but in the real world, let's be factual.") Ghostfacedcoder: Points out the flaw in trying to insult Internet strangers based only on what you know of them (ie. I've actually lead entire React teams), repeats original assertion and original claim of pedantry Bukharim96: "where are you getting these non-existent sideline arguments from?" Ghostfacedcoder: WTF is wrong with this guy?
Have you tried running it? It will print 'a' and then since the return value of a console log is undefined (falsey) it will evaluate and return the next expression, 'b' (truthy) It's a very hacky way to do this
Yea I‘d love to see your npm scripts too!
ah...sneaky bastard... made me question whether all functions returned falsy... thanks!
let's rewrite your function: func() { var temp = console.log('a'); if (temp) return temp; else return 'b' } console.log returns `undefined` but still logs a to the console. so `undefined || 'b'` will return `'b'`
Tried your edit as well function checkifto() { let yolo = document.querySelector(".fname").value var answer = listtt.includes(yolo) console.log(answer) if (answer == true) { pp.textContent = "True" } else { pp.textContent = "False" } Only giving back false. 
Have you tried using [Parcel](https://parceljs.org)? It's not exactly the same, but it's a pretty decent experience.
Try this JS. I also added semicolons because please always use semicolons. Basically, if you want to compare properly, use strings for the numbers in the array. var pp = document.querySelector('p'); var listtt = []; for (var i = 0; i &lt; 10; i++) { listtt.push(Math.round(Math.random()*100).toString()); } var listh = document.getElementById('list') listh.textContent = listtt; document.querySelector('#as').onclick = function() {checkifto()}; function checkifto() { let yolo = document.querySelector(".fname").value; if (listtt.includes(yolo)) { return pp.textContent = "Exist"; } else { return pp.textContent = "Nope"; } }
Even if they employed Machine Learning, the guesses are not perfect unless they appear to be in a declarative form i.e. a config, CLI flags, etc.
Replied to the wrong comment. See https://www.reddit.com/r/javascript/comments/b30tsj/recently_got_into_javascript_and_as_a_test_i/eiwcyoo/
Yeah, I have a love/hate relationship with Create React App. On the one hand it does make things easier, but on the other hand any real dev can't produce using Create React App alone: ultimately they need to understand how to use tools like Babel. So as an instructor do I teach two ways, the easy way then the hard way, or do I just teach the skills they'll need as developers (and only those) ... ie. teach Babel first? The choice I made for the course was to teach Babel, and just mention Create React App as "if you're having trouble with Babel, here's an alternative" ... but after two quarters I'm starting to wonder if it's just too much/too hard for some new learners, and I'm considering either throwing a bundler (or the non-bundler that this article is about) in, or adopting Create React App.
Still giving me nope. This is infuriating!
This is incoherent. What price are you speaking of? There’s an initial setup cost, but HMR helps development time hugely, and tree shaking makes your bundles smaller and more performant. There’s a reason people still use Webpack even though it can be a pain to customize — it’s because it does a damn good job at what it does.
You're missing the entire point: you're saying something is impossible, and ignoring the direct proof (ie. other libraries) that show it is possible.
Have you tried reaching it via "Pizzicato. context"? 
I tested on CodePen here and it works for me, where are you testing? https://codepen.io/Fzzr/pen/MxqjEG
better, more reliable, better docs, huge community, frequent updates, used in all major js frameworks,...
Great advice, I'm bored anyways.
I am learning on scrimba. Could it be the platform issue? 
So what's creating the different ES6+ and ES5 bundles? Probably some sort of bundler right...
I don’t think that work for negative numbers, and negative numbers lower than -360.
I feel like Webpack gets hate because it's an unsuspectingly challenging problem that isn't a primary issue to most developers. You CAN crank out a simple build script, but most place actually require very complex build and deployment process that Webpack simplifies greatly. Webpack help with: * A common, community support pattern for build scripts * Run a light weight webserver * Incremental builds with hot reloads * Transpiling * Easy integration of advance features like PostCSS and inline image extraction * Easy integration of linting and code quality tools * Easy ability to make a application manifest * Code splitting and file size optimization * Injection of select environment variables at build time * Automatic calculation of CSP * Handling of crazy edge cases that I have no interest in dealing with It takes time to read the docs for all of that stuff, but that's trivial compared to the value you're getting. 
I don't know how Scrimba runs the code on changes, so I don't know. Try some other way to guarantee it's running your code, like leaving and returning to whatever page you're using to edit.
1: You are pushing **numbers** into the array "listtt", and comparing it against **string** content from the input ".fname". Even though you mark the input element as type=number, all this does is change how the control behaves, however html input element values are strings. &amp;#x200B; 2: `if (yolo in listtt)` is not a good way to check items in array. The comparison should probably be changed to either `if (listtt.includes(yolo))` or `if (listtt.indexOf(yolo) &gt; -1)` &amp;#x200B; See the two array methods I mentioned below. [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\_Objects/Array/includes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes) [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\_Objects/Array/indexOf](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf) There are additional array methods that will help with this kind of task too. [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\_Objects/Array#](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#) &amp;#x200B; &amp;#x200B;
I'm truly impressed. You've summerized the whole discussion in a message. :D It's amazing how people see things differently. My only argument is based on your claim "React relies on JSX". Why blow this out of proportion? And in no way have I insulted you being a teacher, infact I complimented this. How did you arrive at a whole different story? BTW: I could also summerize you're points subjective to my own understanding, but how would that help besides escalate this single argument into unrelated sub-arguments?
I also created an html file and JS file in notepad++ offline to test and it still isn't working. Any reason why? Also thanks for your help! I guess I will try practicing in codepen. 
You don't have much control if you use multiple input files at once. Unless you orchestrate multiple separate Parcel "instances" using Gulp or something like that. https://github.com/parcel-bundler/parcel/issues/1801 &lt;- this was the issue. It's closed, so it seems it got fixed by now. Maybe I'll give it another shot in my next project.
The `range` function is a glaring omission from JS, but you can get it with this little one liner: const range = len =&gt; Array.apply(null, Array(len)).map((_, i) =&gt; i); And of course, in the post-ES6 era it’s even easier: const range = len =&gt; [...Array(len).keys()];
Do your best and don't give up! It's ok to find easy problems hard at first, that's how you learn.
Thanks man! Would love your answer on this - &gt; I also created an html file and JS file in notepad++ offline to test and it still isn't working. Any reason why? &amp;#x200B;
How are you running that? Opening local html file with browser? I tried that as well (opening with Chrome) and it worked there too.
We're talking about build time decisions and not bundling from a greater angle. If you've not experienced this with Parcel, then that should reflect you competency with the tool. I've used Parcel and I can tell you that not only does it cause a significant build time overhead (I'm talking about projects with a larger scope) to decide which plugins should process which file type, it decreases *any* (not exclusive at all to their latest RFC on supporting .parcelrc optional configs) likelihood of deterministic builds.
I've been trying to configure an npm-based method of processing my LESS for a while now. I'd also be interested in seeing your package.json!
so you have run webpack and that script simultaneously? Why not just get webpack to do that then? 
If your entire contribution to the discussion was a meaningless fact that wasn't at all relevant to the discussion ... then (once again), you're a pedant, and both of us, as well as Reddit at large, would have been better off if you had not contributed your one pedantic fact.
You're right it won't. Sorry I thought "%" was equivalent to modulo in math. Your original comment is the correct way to calculate a mod in javascript. Never knew that before
But you can also transpile JS down with a separate script, why is CSS special?
Yea I deleted my code and pasted yours and it worked fine. Maybe something was missing on my end. Well I am glad it finally worked, cause now I will be able to sleep. Thanks for your help!
To learn more deeply, I recommend deleting the whole JS file and writing it again from scratch without looking at my code, so you know you really understand why each line is there.
I was just thinking of doing that, although I think Scrimba might be causing issues. So one thing I noticed you didn't have this line document.querySelector('#as').onclick = function() {checkifto(listtt)} And from my tutorials it is also not needed since html function() calls it directly and yet Scrimba forced me to include that line. Any other online editors you think I can try? I like online editors cause I can practice at home and then continue at work when I have free time. If you don't know any it's fine, just thanks for your help!
I haven't tried it but it looks pretty similar. 
Most of the time, if you're using any kind of popular framework that depends on webpack, the framework boilerplate will include some custom configuration of webpack that works right out of the box for most use cases. Usually the framework will provide a standard build script that will edit the configuration if needed. &amp;#x200B; But if you \*must\* configure webpack on your own, I highly recommend walking through the setup guide on webpack's documentation. It's actually not that hard to configure most of the time. It took me about 3 hours going from square one to getting a correctly bundled app, hosted on a development server with hot module reloading enabled.
Related: using destructuring to swap items in an array without a temp variable. Given `a = [1,2,3,4]`: `[a[0], a[3]] = [a[3], a[0]] // =&gt; [ 4, 2, 3, 1 ]`
CodePen has been my goto. In a future time where you hate your life and learn regex https://regex101.com/ is great for testing regex, seeing how it works, and seeing exactly what the matches are. For resources, https://devdocs.io is my favorite place to get docs because you can choose which docs to include and typing in one search box will search them all live, no need to load a page every time.
`console.log(‘should never happen’);` 
What new frameworks? The javascript ecosystem has been stable for more than half a decade.
you have an interesting definition of "stable"
If a function doesn't explicitly return anything, it will be `undefined`
Because with every change it would trigger a new build. If you're not using webpack, however, you can save another build on save. There are more reasons but that's a big one for me. I'm on an older MBP and I don't want to test my luck since this is the only computer I have available to me at the moment.
My Man! Wrote everything from understanding and still not resulting correct var rList = [] for (var i = 0; i &lt; 10; i++) { rList.push(Math.round(Math.random()*100)) } var listPid = document.getElementById("list") listPid.textContent = rList var pp = document.getElementById("answer") function inputCheck() { var inputted = document.getElementsByClassName("fname").value if (rList.includes(inputted)) { return pp.textContent = "Found It" } else { return pp.textContent = "Not Found" } } Can you just highlight what I am doing wrong? I am checking if rList includes the inputted number, if it does return found it else return not found. &amp;#x200B;
 { "name": "something", "version": "1.0.0", "description": "", "main": "index.js", "scripts": { "watch:sass": "node-sass src/sass/main.scss dist/css/main.css -w", "dev": "live-server --port=8080", "cssStart": "npm-run-all --parallel dev watch:sass", "compress:sass": "node-sass --output-style compressed -o dist/css src/sass", "compile:sass": "node-sass src/sass/main.scss dist/css/style.comp.css", "concat:css": "concat -o dist/css/style.concat.css dist/css/style.comp.css", "prefix:css": "postcss -u autoprefixer -r dist/css/*", "build:css": "npm-run-all compile:sass concat:css prefix:css compress:sass", }, "devDependencies": { "autoprefixer": "^9.1.0", "concat": "^1.0.3", "live-server": "^1.2.0", "node-sass": "^4.9.2", "npm-run-all": "^4.1.3", "postcss-cli": "^6.0.0", }, "keywords": [], "license": "MIT", } This should work. I removed some of the webpack stuff (I use a custom boilerplate with webpack and this config) but if it doesn't let me know and I'll just share the entire thing.
 { "name": "something", "version": "1.0.0", "description": "", "main": "index.js", "scripts": { "watch:sass": "node-sass src/sass/main.scss dist/css/main.css -w", "dev": "live-server --port=8080", "cssStart": "npm-run-all --parallel dev watch:sass", "compress:sass": "node-sass --output-style compressed -o dist/css src/sass", "compile:sass": "node-sass src/sass/main.scss dist/css/style.comp.css", "concat:css": "concat -o dist/css/style.concat.css dist/css/style.comp.css", "prefix:css": "postcss -u autoprefixer -r dist/css/*", "build:css": "npm-run-all compile:sass concat:css prefix:css compress:sass", }, "devDependencies": { "autoprefixer": "^9.1.0", "concat": "^1.0.3", "live-server": "^1.2.0", "node-sass": "^4.9.2", "npm-run-all": "^4.1.3", "postcss-cli": "^6.0.0", }, "keywords": [], "license": "MIT", } This should work. I removed some of the webpack stuff (I use a custom boilerplate with webpack and this config) but if it doesn't let me know and I'll just share the entire thing.
I'm going to watch this course now.
And what's unstable exactly? What new "frameworks" of any relevance you can point to? Most recent major change was ES6 which came out 4 years ago. And it stabilized ecosystem even more. We have 4 major browsers which all maintain around same standard browser API's. We have 3 major view libraries, one of which takes lion share of the market. More than 2/3 if not mistaken. There is superset of language which has been steadily growing and is easy to incrementally implement in the existing language without breaking anything. We have standard build tool chain. Babel + webpack for apps, babel + rollup for libraries and stayed unchanged for the most part. We have been seeing steady grow of web standartization in terms of web components for cross framework reusability. Such projects like Rawact are even more interesting. So where is that lack of stability? Little johnny releasing his new NPM package no-one gives a flying f about other thanm some freelancer is not mark of unstable ecosystem.
Yeah. I'd much rather make a boilerplate for react than use CRA, but since one of the more recent CRA changes, it seems to handle things much better.
Parcel is much better in this regard. You just point it in the direction of your index.html and it figures out the rest on its own. It even works with several style preprocessors out of the box. Pretty much the only config I have is babelrc (I like to use the latest language features).
 { "name": "something", "version": "1.0.0", "description": "", "main": "index.js", "scripts": { "watch:sass": "node-sass src/sass/main.scss dist/css/main.css -w", "dev": "live-server --port=8080", "cssStart": "npm-run-all --parallel dev watch:sass", "compress:sass": "node-sass --output-style compressed -o dist/css src/sass", "compile:sass": "node-sass src/sass/main.scss dist/css/style.comp.css", "concat:css": "concat -o dist/css/style.concat.css dist/css/style.comp.css", "prefix:css": "postcss -u autoprefixer -r dist/css/*", "build:css": "npm-run-all compile:sass concat:css prefix:css compress:sass", }, "devDependencies": { "autoprefixer": "^9.1.0", "concat": "^1.0.3", "live-server": "^1.2.0", "node-sass": "^4.9.2", "npm-run-all": "^4.1.3", "postcss-cli": "^6.0.0", }, "keywords": [], "license": "MIT", } This should work. I removed some of the webpack stuff (I use a custom boilerplate with webpack and this config) but if it doesn't let me know and I'll just share the entire thing.
Same problem again &amp;#x200B; for (var i = 0; i &lt; 10; i++) { rList.push(Math.round(Math.random()\*100)) } // **NUMBER VALUES** &amp;#x200B; var inputted = document.getElementsByClassName("fname").value // **STRING VALUE** if (rList.includes(inputted)) { // **COMPARING STRING AGAINST NUMBER HERE WILL FAIL** 
Thanks, I‘ll try it out tomorrow!
NP. Again, if something doesn't work, just let me know and I'll see if I can help out.
&gt;`for (var i = 0; i &lt; 10; i++) {` `rList.push(Math.round(Math.random()*100) + "")` **//converted to string with +""** `}` you can change the source list to strings **or** change the comparison code &gt;`function inputCheck() {` &gt; &gt; `var inputted = parseInt(document.getElementsByClassName("fname").value, 10)` **// CONVERT TO INT** &gt; &gt; `if (rList.includes(inputted)) {` // Now comparing int to int !!!!! &gt; &gt;`return pp.textContent = "Found It"` &gt; &gt; `} else {` &gt; &gt;`return pp.textContent = "Not Found"` &gt; &gt; `}` &gt; &gt;`}` &amp;#x200B;
Hey! So my question is how is your if (listtt.includes(yolo)) Different from my if (rList.includes(inputted)) I understand the logic, That one is string and the input is number so thus it should always give false. But what I am not able to understand how your - list.includes(number) works and mine doesn't? In your codepen I don't see anywhere you convert that value to a number. Same with OP in this thread, The conversion isn't happening and I am using the includes and thus giving an error. Any idea why please? 
If you would've asked me a few months back, I would've fully agreed. But now I think CRA reached a point where you can write production ready apps without ever ejecting. Especially since we now have babel macros. We use CRA a lot in our company, even on very large projects and it works like a charm. Sure, eventually most devs should have at least a grasp of whats going on under the hood, but I think its absolutely not necessary for beginners. I would probably rather start teaching them advances react concepts, the new hooks API or even redux and a few different side effect middlewares (or styled-components...). That way they can get up to speed with the eco system and build something meaningful instead of digging through config files. Don't get me wrong, I think your approach is absolutely viable. But that's how I would probably do it.
Because mine used String Conversion in the Source Array &gt;for (var i = 0; i &lt; 10; i++) { rList.push(Math.round(Math.random()\*100) + "") **//converted to string with +""** } &amp;#x200B; the +"" is subtle
**NOTE:** I deleted my original reply, as it came out way too harsh (I wrote it quickly before a meeting). Look, all I'm trying to say is this. Imagine two people are having a conversation, and the first one says "the Earth is flat", then the second one says "no, the Earth is a sphere". You could chime in with evidence of how the earth is round, or you could throw something else useful into the conversation. OR, you can chime in with "well *technically* the earth isn't a perfect sphere, it's an ellipsoid." But doing that doesn't help the conversation at all: it actually distracts from the person making the correct point (that the Earth is round) with a meaningless fact which, however true, isn't really relevant to the current conversation. That's pedantry. Whether you mean to or not, it's all about telling others how smart you are for knowing facts, while revealing that you weren't really paying attention to the conversation other people were having. So what I'm trying to say is, when I say React essentially requires bundling (because of JSX), when you try to argue that technically React doesn't need JSX, you're being pedantic, and that's bad because it detracts from the main conversation (and, in this case, led us to misunderstand each other multiple times).
The problem is `rList.push(Math.round(Math.random()*100)`. That's making an array of _numbers_, but yolo and inputted are _strings_ because they come from an html input. chrisux gives two ways to make the types of the array and the inputs match.
Not everyone cares about build time overhead. Not everyone needs plugins. Your making wild assumptions that everyone has the exact same needs as you, when they don't.
First of you guys are awesome! Second using tostring var rList = [] for (var i = 0; i &lt; 10; i++) { rList.push(Math.round(Math.random()*100).toString()) } var listPid = document.getElementById("list") listPid.textContent = rList var pp = document.getElementById("answer") function inputCheck() { var inputted = document.getElementsByClassName("fname").value if (rList.includes(inputted)) { return pp.textContent = "Found It" } else { return pp.textContent = "Not Found" } } Now that I am converting the numbers to string it still isn't giving me the damn right answer! I also tried with + ""). I am so sorry man! I don't even know the issue anymore. I am just lost in this mess of a world at this point!
Better: const data = (async () =&gt; await Response.prototype.json.call(await fetch('url')).catch(console.log));
&gt; But now I think CRA reached a point where you can write production ready apps without ever ejecting. Especially since we now have babel macros. We use CRA a lot in our company, even on very large projects and it works like a charm. I honestly was not aware this was a thing: I thought CRA was purely a learning tool. I'll definitely keep this in mind as I figure out what I'm doing next quarter, thanks!
The stability of JS/ES is not the same thing as the "javascript ecosystem", nor is the long-overdue standardization of the DOM in various browsers. Just look at the build tools themselves. We haven't been working with webpack for "more than half a decade". Grunt &amp; Gulp are not builders/task runners of choice for new applications, but they are still very much out there in "legacy" systems. Angular and React are relatively stable, though Angular 2+ is only about 2 1/2 years old. And there have been 5 "major" releases of Angular since then (though backward compatibility appears to certainly be much better). But the pace of new releases and the potential breaking-change that come with both of these (I primarily use React) belies the term "stability". If you want to say the state of Javascript in 2019 is much more stable and a more predictable future than in 2014 that's very much a true statement. But a Javascript coder from 2014 (half a decade ago) would be pretty far behind if they were thrust into a 2019 role. That's not "stability" IMHO.
Try giving the input field an id instead, and get the value with `document.getElementById("fname").value`.
Oh wow! That worked! Thank you thank you so much! .. What was so wrong with class name?
Also check it out. My first working cool javascript code. Thanks to you guys - https://271029.playcode.io/
A synchronous blocking sleep variation: const sleep = ms =&gt; { const desired = Date.now() + ms; while(Date.now() &lt; desired) {} };
getElementsByClassName returns all the elements with that classname, using an `HTMLCollection`. This means you were trying to get `value` the HTMLCollection instead of the element itself. The result was `undefined`, so the comparison will always fail. https://devdocs.io/dom/element/getelementsbyclassname
Because document.getElementsByClassName returns an array of HTML Elements &amp;#x200B; check `var inputted = document.getElementsByClassName("fname")` `console.log(inputted);` **// HTMLCollection \[input.fname\]** so inputted.value would not have anything
Oh wow.. One 's' was the reason why it created so much havoc. I knew about this concept, maybe I just selected it wrong or something. Fml. Thanks for all your help man! Really appreciate it. 
Welcome to JS. Additional debugging trick: check `typeof` things you compare to make sure they're the types you expect. In this case, if you had done `typeof inputted` you would get `"string"`, but `typeof` any of the elements of the array would have returned `number`. Javascript variables don't enforce the types of things, so it's easy to get tricked like this. https://devdocs.io/javascript/operators/typeof
[removed]
This is quite nice, but I disagree with the use of lambda. 1) the startup time is going to be an issue; you need an immediate response from the server to ensure you are able to receive the data from the XMLHttpRequest. 2) Your costs are going to be huge if you suddenly get a large amount of traffic.
// I DON'T KNOW WHAT THIS DOES, SO DO NOT MODIFY
Congrats!
Close = it's actually more like `const value = !!statement`.
Thanks a lot! This is great. 
Thanks a ton guys, but I have to admit. In this region python is just easier and better. Straight up line errors and easy conversion to strings and integars. Maybe I forgot about that since there is so much to do in Javascript. 
freecodecamp.com Wes Bos (Javascript30) 
But that gives you all css in a single bundle no? if you want to actually use the features of webpack like lazy loading components you wont get to that with a scss compile npm script.
&gt; It's a shortened if-else statement We know what the ternary operator is - the problem is that the code is wasteful and redundant when you could just use type-coercion to get the same result. Writing `(statement) ? true : false` is redundant, since the expression `statement` already has to ervaluate to truthy or falsey in order for the ternary operator to work. If `statement` already evaluates to truthy or falsey you can just use `!!statement` to get the same effect in a fraction of the code (or `Boolean(statement) if you don't like implicit conversions for some reason). Any time you find yourself writing the equivalent of: if(conditional) { return true; } else { return false; } ... you're doing it wrong - just convert `conditional` into a boolean with `!!` and return the result.
This, too, is part of the love and hate of JS. The main reason to use JS is that practically every computer in the world can run it without installing anything. This kind of issue with types is why the big projects are moving toward using things like TypeScript and Flow, which extend JS to have types like most languages and can warn you of this kind of mistake. I recommend not looking into those just yet, as they'll overwhelm you with features and concepts and require a bunch of infrastructure to use.
Along with checking typeof as Fzzr mentions: you should reference MDN/DevDocs/Etc **often** when using DOM or JS methods, especially while learning. There are a lot of tricky things/bugs that you will avoid by really understanding the built in methods you are using. &amp;#x200B; For example, just simple array methods can be confusing as to what their side effects can be. Some array methods Mutate the source array, while others return a Copy of the array. Small things like this can be the source of many bugs. &amp;#x200B;
Yup won't be jumping into anything else anytime soon. I intent to work towards building my own tiny scrapers for work. The reason why I had to switch from Python, even though it is suppose to be better in this regard was because I don't like doing stuff in console. So before I got into even node.. I want to be clear on basic fundamentals. 
[removed]
Yeah this is more in line with what sleep usually means in other languages I mentioned, i.e. preventing the thread from running any other operation for a given duration.
I do and I did. It was just a bunch of really small mistakes on my end that I have not understood so couldn't recognize but with your help I now understand a fundamental concept. So tomorrow I will try and make it little bit better, hopefully adding enter push as button click. Thanks for all your input and help man! 
Yeah it's a fav of mine too. Just need to be careful.
&gt; I always use the array methods when iterating through arrays, and never for-loops. What's the benefit of that? Array methods are great for iterating through values, but they're less efficient and less readable for numbered iteration. Use array methods for iterating over a specific array's keys or values, but if you need to "do something X times" then for god's sake just write `for(i=0; i&lt;X; i++) {...}` like a normal person instead of wasting time and memory (and writing less readable code!) by reserving and allocating memory for an entire array just ot iterate a few numbers and then throw it away again. Good code is not jamming in the hottest new features into every requirement regardless of their applicability - good code is expressing the solution to a problem in the *simplest and/or most efficient way possible*. By either of those metrics `for` wins for simple numerical iteration.
By that measure, I think the only things that are truly stable are dead or dying technologies.
I never understand why people feel the need to populate an array with a sequence of consecutive values. I've spent over 20 years writing javascript and never once encountered a legitimate use-case for doing it. If you need to iterate over numbers, use a `for loop - what point is there in defining an entire array just to hold numbers just so you can iterate over them and then throw the entire array away again afterwards?
Cool beans!!!! Good luck and keep making stuff!!!!
That's fine! Thanks for sharing. Learned something new today.
Looks cool, may take a closer look. But I really wanted to say that your tiny baby wendigo logo is amazing(ly cute)
 I'm sorry you had to experience cold fusion. I hope that you are able to have better experiences in the future.
I've had a lot of success with [https://www.pikapkg.com/packages/?q=preact](https://www.pikapkg.com/packages/?q=preact)
Author here; thanks for the read! Just wanted to follow up on this: 1) I'm only using XMLHttpRequest as a fallback for when web beacon isn't available (mostly iOS). While you're right, a restful endpoint would be more reliable for that edge case, I'm willing to trade off a tiny bit for the ease and scalablity of a serverless endpoint. 2) This post spent half a day on the front page of HN and has gone somewhat viral (20k reads). It's still well within the free tier limits. For Netlify, that's 125k sessions / month (since 1 request per session). I could switch to AWS and up that to 1m / month. For reference, reddit.com's monthly traffic using this setup on AWS would cost about $300 (1.5b sessions / 1m * $.2).
What if I need to configure it so that every index under a folder named `/\d+x\d+/` is it's own 'root'? I deal a lot with different sized banner ads unfortunately, and [webpack's ability to create multiple render contexts](https://github.com/webpack/webpack/tree/master/examples/multi-compiler) each with their own entry point is extremely beneficial. I can share whatever assets I need in each of these banners and webpack will not render out stupid things like `src="../../../shared/images/logo.png"` because the root context is the root index file. I can use/import `../../../shared/images/logo.png` in my project and Webpack will copy that file to the appropriate folder because my loader is setup to copy all images into `/images/[name].[ext]` so each banner will get it's own standalone copy, but I can use shared resources and code for every one.
Eloquent JS You dont know JS &amp;#x200B; Youtube: Traversy Media freecodecamp
Yes, the `statement` is wrong in this context. At this point `condition` should be written, so that it also makes sense. Do you agree with me? And yes, your ifelse code is pointless\^\^ Anyway, I think that wasn't the core of zayelion's *statement* ( xP ) : &gt;A few of these stacked at the start of the function, then some basic logic, keeps code very clean. 
I see things like this and I just feel so stupid at the code I would have wrote to do the same thing. But if I \*keep\* seeing things like this, maybe I'll be clever too one day.
There are plenty of reasons to get away from GA mainly being to reduce Google's ever growing reach on the internet.
CRA has quite a few sane defaults in its configuration. The predefined npm scripts work for a lot of common use cases. E.g. CRAs `npm build` does all necessary transpiling, code splitting and minifying. CRA also has sass compilation, a builtin service worker and typescript integration is super smooth. It is by no means just a learning tool. It is absolutely meant to be used as a scaffolding tool in production. And if shit really hits the fan you can always eject and have a well documented babel/webpack/etc. setup. Glad I could help :)
I think you're missing the point - it doesn't matter if you call it "statement", "conditional" or "wibblebumfart" - it's that taking a truthy expression and using that in a conditional to explicitly return `true` or `false` is a waste of time. These are both equally pointless: `anything ? true : false` and if(anything) { return true; } else { return false; } In either case you should be writing `!!anything` instead. They're both as redundant as writing `if(thingy == true)` instead of `if(thingy)`.
What you're are referring is stagnation. Not stability. Lack of stability implies compromise on backwards compatibility. And that's simply not the case. Although even the supposed changes in tools we use are heavily overblown in your description. ES6 imports are universally supported by all modern browsers. And modern browsers are anything which is not IE 11 and below. Coming of ES6 imports also did not disrupt the way require works, so it's release and wide spread adoption haven't broke anything in the ecosystem. AngularJS lived for 7 years. That's more than majority of modern day frontend developers have total work experience. And that's probably the last really "revolutionary" thing in javascript world we had which essentially reshaped how we think and do UI's. Next came flux architecture and virtual dom as a way of learning from AngularJS mistakes and that's where we are now and associated build tools etc. But these were just incremental improvements and nothing chagning in drastic measure. Hell at this point nothing will even drastically change with WASM. If you've been keeping track of how some WASM front end frameworks look (although WASM's goal is not to do work with DOM, but outsource heavy lifting requiring code to client side) it mimicks all the same patterns we do with React, Preact, Vue you name it. There isn't much difference in all these tools really. And from that point onward nothing really changed. Browser is incrementally growing platform. That however doesn't imply any kind of instability. &gt; But a Javascript coder from 2014 (half a decade ago) would be pretty far behind if they were thrust into a 2019 role. Far behind in what? It's just different tools but the principals are absolutely the same. Nothing changed. We used to have ES5 modules and all the joy that entailed dealing with IIFEs now we don't, we have declarative import exports to control scope / visibility. We have package manager which handles dependencies for us. State management at the front-end is easier than ever with things like Redux, or Observables. We have build tools which takes care of all browser incompatibilities and help to manage all the assets from one single place. Often times, depending on the app with minimal configuration. Like just month ago I've needed to implement browser level caching in one of apps I'm working. It just took to read some documentation and I've nailed under 3 hours just by reading documentation on the tooling which is easier to use than ever. IndexedDB + redux form + material UI. Barrier of entry is all times low, but if you aren't happy with it you can always move to PWA's, WASM modules etc. So I really can't understand what are people complaining about.
Not the speed that matters, but webpack lets me deal with some very complex configurations we deal with in an agency on a day to day basis... I need a build that treats every folder named `/\d+x\d+/` as it's own "root" static site? Done. I need a fairly simple web page? Done. (I don't need to grab something else) . I need a email compiled to inline all styles because working in emails is like shoving a hot knife through your eyeballs... that works too. It gives me one tool that can do everything I need and some things I haven't found a need for.
first grunt, gulp and now webpack :)
Shooting yourself in the foot with a main reason like that is a bit silly. Yes they're heading into, or are already in, dangerous territory but that does not stop them having one of, if not the best analytical platform on the market. Especially with any use case even a little bit more complex than this articles example. I take it you don't buy kellogs or nestlé brand products either, due to their ever growing monopoly on the cereal and snack industry? 
I remembered! Copy/paste this into your browser console: ``` function listGen() { return [1,2,3,4,5,6,7,8,9,10]; } var aggregator = {}; for(var l=0;l&lt;listGen().length;l++){ aggregator[`${l}`] = {}; } for (var i=0;i&lt;1000;i++) { var list = listGen(); list.sort(() =&gt; 2*(Math.random() - 0.5)); for(var l=0;l&lt;list.length;l++){ aggregator[`${l}`][`${list[l]}`] = (aggregator[`${l}`][`${list[l]}`] || 0) + 1; } } aggregator ``` It runs that sort on a previously sorted list 1000 times and aggregates for each index how often a given number was in that spot. This'll give you an idea of the distribution. Ideally every index has each number roughly 100 times. I just ran it and got: ``` 0: {1: 199, 2: 67, 3: 111, 4: 133, 5: 65, 6: 77, 7: 106, 8: 118, 9: 62, 10: 62} 1: {1: 130, 2: 143, 3: 91, 4: 136, 5: 86, 6: 84, 7: 92, 8: 117, 9: 57, 10: 64} 2: {1: 82, 2: 129, 3: 92, 4: 100, 5: 81, 6: 106, 7: 89, 8: 93, 9: 89, 10: 139} 3: {1: 88, 2: 138, 3: 103, 4: 97, 5: 62, 6: 100, 7: 91, 8: 98, 9: 92, 10: 131} 4: {1: 77, 2: 119, 3: 102, 4: 93, 5: 117, 6: 103, 7: 83, 8: 94, 9: 103, 10: 109} 5: {1: 66, 2: 99, 3: 110, 4: 83, 5: 142, 6: 111, 7: 87, 8: 96, 9: 138, 10: 68} 6: {1: 92, 2: 105, 3: 114, 4: 119, 5: 125, 6: 80, 7: 78, 8: 104, 9: 128, 10: 55} 7: {1: 83, 2: 102, 3: 104, 4: 104, 5: 119, 6: 92, 7: 79, 8: 100, 9: 100, 10: 117} 8: {1: 87, 2: 73, 3: 93, 4: 79, 5: 107, 6: 112, 7: 124, 8: 84, 9: 131, 10: 110} 9: {1: 96, 2: 25, 3: 80, 4: 56, 5: 96, 6: 135, 7: 171, 8: 96, 9: 100, 10: 145} ``` As we can see 1 ended up in the first position 199 times out of 1000. There are some worryingly low numbers in there too. Maybe our sample size just isn't big enough. Luckily this is fast, so let's do 10,000: ``` 0: {1: 2002, 2: 726, 3: 997, 4: 1283, 5: 814, 6: 892, 7: 950, 8: 1144, 9: 562, 10: 630} 1: {1: 1353, 2: 1408, 3: 952, 4: 1242, 5: 827, 6: 885, 7: 998, 8: 1073, 9: 602, 10: 660} 2: {1: 925, 2: 1326, 3: 980, 4: 945, 5: 791, 6: 1034, 7: 854, 8: 975, 9: 927, 10: 1243} 3: {1: 706, 2: 1241, 3: 1035, 4: 1028, 5: 790, 6: 1069, 7: 790, 8: 928, 9: 1129, 10: 1284} 4: {1: 661, 2: 1234, 3: 1044, 4: 955, 5: 1032, 6: 985, 7: 832, 8: 925, 9: 1080, 10: 1252} 5: {1: 747, 2: 1198, 3: 1167, 4: 1051, 5: 1240, 6: 945, 7: 876, 8: 1028, 9: 1136, 10: 612} 6: {1: 801, 2: 1074, 3: 1152, 4: 1042, 5: 1249, 6: 880, 7: 911, 8: 1053, 9: 1209, 10: 629} 7: {1: 838, 2: 859, 3: 1022, 4: 916, 5: 1144, 6: 961, 7: 929, 8: 960, 9: 1118, 10: 1253} 8: {1: 973, 2: 663, 3: 871, 4: 854, 5: 1128, 6: 1065, 7: 1153, 8: 933, 9: 1116, 10: 1244} 9: {1: 994, 2: 271, 3: 780, 4: 684, 5: 985, 6: 1284, 7: 1707, 8: 981, 9: 1121, 10: 1193} ``` Nope, we see the same distribution. 1 appears first far more often than 4 (20% vs 7%), for example. I encourage you to try it yourself. Now the question is "why". This has to do with the sorting algorithm that's being used. https://v8.dev/blog/array-sort https://bugs.chromium.org/p/v8/issues/detail?id=90 I gotta go, but those are good starting places for learning why.
It's not about jamming in the new hotness, it's about not mutating any data, to make the code more predictable and easier to read. It might be a bit slower, but readability and less error prone code is more important than speed. If its slow you can always optimize it later when you know it works. Not mutating objects/arrays and not assigning new values to variables (const only, no var or let) saves you from a lot of bugs. 
This is not unique to Javascript at all.
I have spent nearly a month exploring Webpack for React apps. Tried different configs, digging into some starters and also config of CRA. I was getting familiar with it using their documentation. Now I'm able to config custom server side rendered React app with lazy loading, code splitting, Redux, styled-components and more features... The reason I wrote all of this above is that a result of this effort really worth it, just trust me. Now I feel like a god. It seems hard at first but never stop trying Webpack! 
Post a small code example of what you want and we might be able to help you
Every [try reading bug reports](https://github.com/parcel-bundler/parcel/issues/2804)(rando pick) in Parcel's github? It'll make you want to throw chairs. Everything has little emoticons in front of it and this is [mimicked throughout the webpage for it](https://parceljs.org/) as well. It's like everything needs to have an icon associated with it.
Thank god for tools like Angular CLI and create-react-app
I think people are being a tad overdramatic. The most irretating issues i’ve had has always been due to a 3rd party plugin or loader trying to play ball with external configurations. Everything else is a google away at worst. Typescript can also be your friend here supplying you with a types webpack config.
Roll-up is where it's at
Agree 100%. Just stick to well maintained, top hit 3rd party plugins/loaders in production. Their docs are easy to understand. YAGNI always helps
That’s fine in the context of not building a SPA or a set of components with any modern library or framework. But i don’t understand what you mean by ”i dont believe in using webpack for css”.
What do you mean exactly? I just don't like using webpack doing this particular job. I know it can, and I've used it before. But I personally don't like to use it for CSS or CSS related tasks.
You can serve your styles a single file or in a controlled matter with multiple files (you know what you use). Personally it makes little sense to me to use a BUNDLER for the scripts but not the related styles. Unless you’re not aiming for either encapsulation or effective and small style sizes.
Does this reload css in the page without refresh like webpack-dev-server does?
If the Set uses hashing, then it's O(n). It will iterate through the list and add each item to the set. Adding an item requires checking for uniqueness which can be O(1) assuming the underlying data structure is some kind of hash table. If it's not, then it would have to iterate through the current items. This would be O(n^2).
This [bug](https://github.com/parcel-bundler/parcel/issues/1165), as I rely more and more on css vars.
I dont agree with your last sentances at all. Unless we’re talking about an angularjs hugger or jquery dev. If you know javascript, and you take programming seriously. Then you have little to fear. Libraries and frameworks change over time. But they all build on the same patterns. Javascript is very stable. Its your fear of a fast paced community that clouds that fact.
Whenever I try to bundle any third party lib I essentially have to use `expose-loader` because webpack loses the global namespace (or something) it's usually a massive pain in the ass to bundle without knowing about all the different kind of loaders you need. 
They can't. Couple months ago a package was pretty much hijacked by a hacker who added crypto-stealing code to a popular dependency. 
Which course do you recommend? I can see 2 differents on fem. Thanks :) 
console.table()
&gt;A perfect Test-Driven Development approach The author doesn't have any idea of what TDD is and didn't use the power of it to help develop the code. He wrote 12 failing tests instead of using one test to drive the next step of the implementation in a red/green/refactor cycle. Golfing in the refactoring step after you write the code like this is much safer, faster, and allows the author to understand better the boundaries of the problem to come up with better and more efficient golf ideas. He probably missed a lot of opportunity here. See also [You Don't Know TDD](https://medium.com/@fagnerbrack/you-dont-know-tdd-691efe670094?source=friends_link&amp;sk=7f27be4ca2b20a8597bedd820c8b4e84) for an example of TDD in JavaScript (not code golf per se, but you can easily refactor to it). &amp;#x200B; &gt;We’re not done yet because our function is currently returning the number, but it has to return a TRUE or FALSE value Another part that clearly shows the author did not use the test to drive the [interface](https://medium.com/@fagnerbrack/why-do-you-need-to-know-interface-fundamentals-a129ac6ab0c3) (output) of of the function. At this step he made a random decision to switch the output to a different type without having a test to drive him to do it. &amp;#x200B; Before saying it's a "perfect" TDD approach, make sure you know what you're talking about in the first place or edit the post to avoid misleading other people. It's because of posts like this that newbies believe learning TDD is a waste of time.
React has negligible market share, with around 4% of websites profiles using it. https://www.datanyze.com/market-share/frameworks-and-libraries/react-market-share The market leader by sheer adoption is jQuery by an order of magnitude. 
I think this is a cool project and I'm sure the way we build fronted apps will look different in a couple of years. But I disagree that we were "forced" to use webpack because we wanted stuff from npm. Webpack (and commonjs before that, and requirejs before that) helped us split source code into modules in a sane way. That's the main thing that was missing from the language. Now that we're finally near the time when native es modules are supported everywhere, we still need webpack because it gave us so much more: a way to "import" non-js assets. I hope this will be native in browsers, too, some day. 
Yes.
That's not really relevant. https://en.wikipedia.org/wiki/Pareto_distribution 
Well, I for one, am glad we're almost on the same page. There's definitely a communication barrier. TBH, I did not mean to offfend anyone by stating that minute. yet technically and reasonably valid hint. Howabout we call it a day? :D
Webpack configurations are just javascript, which I feel is something that people don't fully appreciate when complaining about it. &amp;#x200B; Don't like writing a configuration every time? Write one once, wrap it in a function that supports arguments that mutate the configuration for your own use cases, and publish that as an npm package. Done. Anytime I need to use webpack, My webpack.config.js just looks like this: const { WebpackConfig } = require('@benzed/dev') module.exports = new WebpackConfig() In this particular case, `@benzed/dev` also has all the loaders, babel presets and whatnot as dependencies. This does mean I sometimes install dev dependencies that I don't always need, but I don't really care about that. 
Hi /u/soundhog41, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/tintinnabulate78, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/1c4us, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/stupidarg, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
it's not just that. some companies want to own their own data and not have any 3rd parties involved. rolling your own analytics let's you ensure the data is completely yours without being in a legal grey area.
Then again, you could use an array and get the properties like const [, , ...rest] = colors (assuming you don't need the first two colors)
Honestly, one of the biggest pain points for me for the existing clipboard usage is that IE has to respect a group policy that disables it. The other is that not all browsers allow programmatic copying in the same way. Otherwise my Stockholm Syndrome tells me it’s not too terrible of an API to work with.
Infra as code is what the cool kids do. I mean, you could always do it in JSON if you don’t mind the double quotes haha. 
Server side rendering and a lot of cache.
Well, I'm currently in the process of migrating parts of my web app to WASM (written in Rust).
Thank you for this.
I’m curious about what that process looks like for you. How much of your code base can feasibly be migrated to WASM? Are you using a rust/WASM library to replace small JS operations with WASM? Are you using a smart transpiler? I don’t know a whole lot about WASM, but it’s something I would like to get into with some of my personal projects.
A lot of my code right now is dedicated to rendering WebGL, which can be transferred to WASM quite easily. I will keep the UI parts (handling forms, buttons etc) in JavaScript, because the support for that is much better obviously (Rust is just getting started on gaining a web development ecosystem).
Its not pretty, but it does what you want with minimal repetition const purple = (({yellow, green, ..._}) =&gt; _)(colors); I know there has been a few discussions/proposals about having a language-level pick supported in JS (ex: https://github.com/rtm/js-pick-notation). Not sure if any of those also support omit variations - at first glance the one above does not.
If you think those are cool, wait until you see what else ES6 has to offer!
because the javascript communit is really saturated with frameworks galore
We are already here?
Looks like this is built on ES Modules. Has anyone used them yet? Any opinions on them? 
/s?
Promise.then(console.log)
Yes, just keep in mind that they don't have the arguments variable.
Browser support. That, and a lot of technologies that let you do frontend in other languages actually compile to Javascript.
Agreed, jesus just give me the why and how. I dont need to know about your feelings when im trying to learn how to set up a reverse proxy node server. 
Can't you just use Webpack vendor bundles to essentially get the best of both worlds?
 **@pika/web** installing...Error: 'Component' is not exported by node\_modules/react/index.js
Yep agree, webpack-dev-server is what makes me keep using webpack. Sure it has a learning curve but it’s great. Plus being able to proxy your dev site is a great help. I just recently was able to get mine to reload with php changes without browsersync. 
This is really dependent on the order of properties. I think that it's very strange to have code dependent on the order of properties in a object.
I'd agree that we should avoid allocating memory if we could. I too don't use this form in production code. It's better to use just an iterator \`Array(n).keys()\` not an allocated array. The only reason I'd require an array is when the function I call doesn't accept an iterator but only an array. I often use array.map, and it's handy to have an allocated array, mostly for tooling not production code. iota usually take the second and third arguments, and without it, the usage is limited.
&gt; it's about not mutating any data, to make the code more predictable and easier to read. Either you're defining a disposable array of integers to iterate over, or you're defining a single integer to count iterations with. Honestly I don't really see either one of those as significant amounts of state to worry about. &gt; It might be a bit slower, but readability and less error prone code is more important than speed. You're not wrong, but if you think [...Array(10)].map((_, i) =&gt; i).forEach(i =&gt; { ... }) if more readable than for(let i=0; i&lt;10; i++) { ... } ... then i genuinely don't know what to tell you. ;-) &gt; const only, no var or let I see your angle now, but honestly that sounds like a triumph of estoeric ideology over reasonable pragmatism.
Meanwhile scripting remains in contradiction with the principle of the web. Obfuscating the semantics that the web intended to standardize.
Cause and effect are probably backwards there.
Ideally sets would have some useful methods so you could work with them directly more often. See proposals: [1](https://github.com/tc39/proposal-collection-methods) [2](https://github.com/tc39/proposal-set-methods). But for now it's acceptable for my use cases.
Instantiating a copy of an iterator function is probably a slightly better solution than allocating an entire array just to throw it away again, but you didn't answer the core question - why bother instantiating any whole object (either an array or an Iterator), instead of using a simple `for` loop with a single integer counter? I'm still unclear how iota(5).forEach(i =&gt; {...}) is clearer, or more efficient, or more readable, or more maintainable than for(let i=0; i&lt;5; i++) {...} ... let alone if you want to do something weird like start from a non-zero number or count up in 2s. All those things are possible using your iota method, but every single one is more complex or fiddly and less readable than a simple `for` loop. What do people have against just using `for`?
I’m a lot faster navigating my files &amp; lines in my editor, and I’ve usually already got them open
+1
Ooo, thanks!
That does do what I want it to do but I'd be able to grep what I originally wanted it to do after coming back to maintain this code a few months from now. What I really like is for all my code to look like it's about 2 degrees away from being json.
Can i ask, why this worry you? I mean, reason why there are several languages its because some are better than others considering some aspects whether they might be worst looking some others capabilities. And ofc, im not talking about the syntaxt (which can be cosidered irrelevant at some point) but the implementation. Having two or more languages suported by browsers will just make no sense, cause internal implementation ( browser script engine and optimizer ) will be in the end identical for all of them, and thus pointless 😜
Jesus, and you’re teaching others?
&gt;a lot of technologies that let you do frontend in other languages actually compile to Javascript. Chicken and egg. Do they compile to javascript because that is objectively the best conceivable way to hypothetically do things in the frontend, or do they compile to javascript because they have to if they want to do things in the frontend?
Yeah, so the sensible thing to do would be for the browser to expose a bunch of language-agnostic OS-like bindings to which any language/ runtime could be bound. Which is what WASM is for.
This is a serious issue that far too few people understand the tradeoffs around. Everyone loves client-side code (and understandably so) for the power and flexibility it brings, but very, very few people adequately understand the costs and drawbacks of locking your nice, easily-consumable declarative data away behind nasty, difficult-or-impossible-to-consume imperative code that are required to make a qualified, informed decision on whether that tradeoff's definitely worth it. Happily isomorphic javascript promises to substantially reduce that issue, by allowing routing an static HTML-generation on the server-side followed by spinning up imperative code on the client-side for clients that can consume it, but even when frameworks make it as simple as possible to do devs still have to understand the non-obvious reasons for enabling it and the hidden costs of not doing so.
Nonsense. The Javascript ecosystem is stabilizing; I was disagreeing with the assertion made that it was "stable for more than half a decade". Anybody who has been part of the Javascript community for the last decade knows that's bollocks. 
I think it’s just everyone’s preference whether to use array.forEach or for-loop. My programming background is something that doesn’t have loops and I even tend to avoid array.forEach. This is an extreme case but I understand some people prefer arrays to loops. 
I've been using React since before CRA even existed, and somehow that makes me unqualified to teach it?
I think it’s just everyone’s preference whether to use array.forEach or for-loop. My programming background is something that doesn’t have loops and I even tend to avoid array.forEach. This is an extreme case but I understand some people prefer arrays to loops. 
If you’re giving out incorrect information yeah
So you get an error in Chrome, you switch back to your IDE, find the error line (told to you by chrome if it broke on a specific line), type debugger, relaunch / refresh, and hit the debug statement or you get an error in Chrome, it tells you where it failed, add a break point there, refresh. One is significantly less steps to me. 
Because Java is what gets the kids in the van nowadays, easy to learn, easy to use, a little too easy. 
It would be, but remember, back in the days Java tried kind of the same with their “Applets” and it failed greatly, so we have to see 😁
Let's say you want to sort an array without modifying it. Well you can't, but you can do something close: ``` function sortIndexes(arr) { return [...new Array(arr.length).keys()].sort((a, b) =&gt; arr[a] - arr[b]) } ``` Now you haven't modified the original array, but you have an array of indexes in the right order. Manipulating indexes rather than the original array can be a very useful technique.
I always kind of take for granted how nice Ember's test helpers are. https://guides.emberjs.com/release/testing/acceptance/ test('should add new post', async function(assert) { await visit('/posts/new'); await fillIn('input.title', 'My new post'); await click('button.submit'); assert.equal(this.element.querySelector('ul.posts li').textContent, 'My new post'); }); https://github.com/emberjs/ember-test-helpers Might want to poke around in there for ideas.
Can’t you also use 3 digit hex for some colors?
I think you're heavily downplaying the amount of change that has occurred in the world of Javascript over the last decade in large part because you've been up close and personal to it - so every move has seemed incremental and sensible. The barrier of entry for a JS app is significantly higher than it was during the days of jQuery. If for no other reason that it has forced developers to actually understand that Javascript is much more powerful and capable than was conventional wisdom in the 00s. Again, I'm not saying it's currently unstable or that it's not powerful, nor am I saying I'm unhappy with it. But from any outside observer the last 6-8 years have seen such explosive growth and variation in the tools used to build and maintain JS apps, the growing adoption of server-side Javascript (a concept that a web developer in 2008 would have found confusing), and the pervasiveness of transpilers for syntaxes like JSX (that doesn't even get into loaders/etc. for SCSS/SASS/LESS/etc.) .. I mean, I just don't see how you can look at this and think "yeah we've been stable for 6-8 years". Hell 7-8 years ago I was at well-attended conferences for jQuery celebrating the release of jQuery 2.0. That seems like a lifetime ago. The way we develop apps with Javascript now compared to 5-8 years ago is completely different. Not bad, but different. And the path it took to get here has been frenetic. There's a reason why JS fatigue was and is a thing. Because the pace of change has been tremendous. And no, I'm not afraid of the pace of change. But this isn't my first rodeo either. Saying the JS ecosystem has been stable for the better part of a decade is just inaccurate.
&gt; Its your fear of a fast paced community that clouds that fact. LOL no. I have no fear of a "fast paced community". But pretending that being frenetically fast paced, using and discarding build tools every few years, eventually coalescing around a few main frameworks over the course of a decade, while blowing out support for server-side javascript and mixing in transpilers and syntax extensions _all at the same time_ amounts to "stability for the better part of a decade" shows a lack of context and history of development beyond the JS community.
Math.abs(n) % 360
I spent yesterday doing this for a react Wordpress theme... fun.
Using the webpack-cli to generate a basic version really makes it so much easier, and then adding config on top
Java?
Yup, so technically not _all_ values 0xFFFFF and below will be invalid. There will be a range within 0x100 and 0xFFF that will be OK. But these are also not representative of their random values. The 3 digit hex for colors is shorthand for `#RGB` -&gt; `#RRGGBB`. So if `#100` popped out, its hex value would really be `#110000` and not the actual random value of `#000100`. This means you're also increasing the odds of `#RRGGBB`-formatted colors to be hit ;)
48% after 278 clicks. Yes! 
What is this course they talk about? Do you have a link?
I definitely drop breakpoints in if I’m responding to an obvious surface level bug,… it’s when I’m digging into an unknown problem below the surface that I start using debuggers. &gt; WTF is causing this weird async bug breakpoint in chrome to find the line of the error &amp; see if it’s obvious,… if not &gt; WTF is causing this function to error sometimes you gotta go to the methods of whatever class, and litter debuggers all over the effin place to see which one is called first &gt; oh shit,… of course it’s the fucking `setMoarState` method git blame &gt; fuck, why did I write it this way again?—Probably a good reason
Yeah, no kidding. I love K8s for the most part, but a certain point (read: Helm charts) I’d much rather just have a well-documented DSL.
This has been on my mind for a while. I remember first getting into NPM and browsing their endless list of packages and seeing so many packages for things like, taking advantage of mobile free-to-win games. I thought to myself.. is this really what we’re getting mixed up in? Then there were the reports of popular packages getting compromised by random minor dependencies.. and my tinfoil hat really came on. My question is, I’m using these tools to do simple things. Sass transpiring, css minification and prefixing, js bundling, Babel compiling and ejs for prototyping. At the end of the day, in this scenario how high is the security risk? If I’m wiping out node modules on my devops build, all I’m left with is my source code and compiled code. The only thing I can think of as a real concern, is one of these transpilers/compilers “sneaking in” something into my output code.. but what? If I’m sticking to Babel, and a basic webpack setup how high is that risk really? To me the “real” stuff is being handled by .NET - I’m just building a front end. I’m asking this sincerely, not as an argument. 
Forgive my ignorance but I don’t understand what you mean by declarative data behind imperative code. Can you give some examples? 
Webpack has to bring everything into JS which slows the whole SASS pipeline down a lot. Compiling SASS with webpack involved SASS &gt; CSS &gt; JS &gt; Extract Plugin &gt; File System. Using node sass directly gets you SASS &gt; CSS &gt; file system.
And what incorrect information am I giving out?
In your analogy the JVM would be a better example of exposed bindings. Java was the first to use it, but Scala, jruby and a dozen others also use the same idea. 
I think if you're using dependencies only for front-end stuff you would be limiting the risk. But packages for mongo, things that get into your data, thats where i see this getting dangerous. Node.js reminds me of Wordpress right now.
Its not really chicken and egg. That phase of the internet (startup) has been done over 25+ years now. Its because of the browser
Yeah, anyone who didn't start out on Python 1st iteration has an easy go of it picking up Java, especially with all this "maker" and "Stem" shit in every Walmart anywhere worth being. 
Ooof this is rough. The weird pedo metaphor, the conflation of Java and JavaScript, and the dismissive attitude... dude, you might want to take some time offline for some self-reflection
*sigh* casual static typing propaganda.
Yeah I figured as much. Minus sneaking in malicious JS or the CSS keylogging trick (lol) I can’t imagine there being much damage. If you’re using something as popular as Babel, issues would get caught in a pinch. Just rambling now, but a big reason I’m against FEDs trying to take on the role of building full applications themselves. There’s already a plethora of new material for us to worry about, back end security should be left to back end devs imo. This is coming from someone spoiled in a .NET ship I suppose.
This is a good thing IMO. It's the same as saying... why are we only using "XML for HTML markup instead of JSON???" It's standard, widely accepted to be good enough, and we can build clients like Google Chrome without having to worry about fuck all extensions... imagine the cancer of JavaScript frameworks except now you have 100's of languages and even more frameworks on top of that. Chrome debugging tools for all those other languages as well as JavaScript? Inheriting a website now you need to know multiple scripting languages on top of even more frameworks for what benefit? What benefit does it bring instead of improving JavaScript architecture? 
Learn ES6 features. Learn flexbox, will make layouts much simpler. Sass/Scss is like CSS but with much better organization and mixins. Probably good to learn a bit of any of the major frameworks (Angular, React, Vue). Also, Typescript is the tits so I'd highly suggest learning that and setting up tooling to transpile it. Which brings me to my next point, learn some different tooling infrastructure such as gulp/grunt/webpack/systemjs. NPM will be your friend but do your homework before just including the world in your project. Utility libs like Lodash, Moment (for dates) are useful. RxJs is pretty sweet especially combined with websockets. (Sorry for the unorganized brain dump)
I'm going to enjoy dogging JavaScript til the day I die, the OP's question and analysis were original and well steeped, but JavaScript, nor Java is the end all be all. There's a whole world out there of wifi enabled FPGA boards, industrial control, and CnC, while some are java influenced, none are JavaScript, or HTML even. Just feel FPGA and automation is underplayed sometimes. 
delet this
They said parcel is much better in regards to "zero config". Webpack is heaps more powerful. Parcel really is a shit-ton easier to get up and running though.
No.
The end is near. Soon, there will be a Universe Wide Web browsed with a browser of browsers and it will only support Scala. Repent - code monkeys. \~octococto 2v1-2
&gt;Complexity Stockholm Syndrome More like Flexibility Stockholm Syndrome amirite fellas Fuck me i love some webpack holy shit, catch me importing .graphql here and .png there while code splitting my app for a UX-mindful loading experience and have the best chunks for that automatically output
I think it's really hard to do dynamic content which also dynamically updates. So much content is dynamic on complex sites these days that it's an easy pitfall to fall into. We *should* returned a functioning and rendering site a user makes a get for our site, then have handle updates with xhr, IMHO 
&gt; writes up a complaint about how too many websites require JavaScript &gt; posts it on a website that requires JavaScript to display properly I see no contradiction here, officier!
Definitely because they have to.
HTML is declarative. It doesn't "run", it just states what should be rendered. This is pretty appropriate for a web page, which is essentially a document. The data -- the words on the page, the images, etc -- is all right there or, in the case of media, represented by tags that make their content obvious. Javascript is imperative code (at least in the most general sense as it's also functional, object-oriented, etc), i.e. algorithmic. It churns data through a sequence of steps. You need to reason out the logic to know what will happen to the data. I think the point being made is that using Javascript to write HTML hides a lot of the clarity of the document.
Exactly.
This might seem obvious to some but I see a lot of jr devs rely on a css frameworks like bootstrap too much. So, I would add; know how to code a layout without a css framework. Also if you go down the TypeScript route don’t be lazy and use &lt;any&gt;. Love me some RxJS. If you’re on a team all agree to a linter setup like Tslint and stick with it!
One benefit of bringing CSS into Webpack though is that you can pair js + css together and code split that module. For example in one of our projects we code split the date picker and only import it if on desktop. **app.js** if (! supportsTouch()) { import(/* webpackChunkName: "flatpickr" */'./flatpickr').then((module) =&gt; module.default); } **flatpickr.js** import 'flatpickr/dist/flatpickr.min.css'; import flatpickr from 'flatpickr'; export default flatpickr;
I’d like to wait until all browsers are on the same page with one language before introducing another language to slowly decide to support
https://frontendmasters.com/courses/webpack-fundamentals/
getRide_Uber is a promise since you've marked it with the async keyword. You'll need to wait for it's response: ``` uberData = await getRide_Uber("Dallas, TX", "Arlington, TX"); ```
I couldn't agree more. Bootstrap is a lot to pull in for smaller scale applications. And that same lesson should be applied everywhere for just relying on third party support.you might be adding a shit ton of bloat for a tiny little thing that could easily be rolled yourself if you take a tiny bit if time figuring out the problem. You never want you application to die a death by a 1000 NPM deps. 
I would like to take a stab at a reply as an old grey beard: It worries me because: 1. Content based pages do not need it. Have you tried loading reactive applications over a 3rd world connection? You get spinning GIFs. That's all. Refresh. Spinning GIFs. Just wait till Car or BCI/mind connect. 2. Javascript being run from the client has the potential to mitigate client side security of even the most secure sever/network side protocols, such as TOR. So adapting the entire web to a slower, more spy enhanced version of itself undermines anonymous publishing. 3. Unnecessarily takes the power away from the user (ie, the client) and returns it to the server. 4. Adds a metric shitton of unneeded complexity of tools (and size) to create. Have fun with webpack vs if you just want to compile SASS with compass vs some simple HTML which actually looks just fine (ie craigslist). I'm all down with the direction (and growing pains) of where we're going and think it's needed, but I wish some noobs would take a second and listen to the aging before jumping balls first into refactor in 5 yearsville. 
I disagree. HTML is doing the same thing but it’s complexities are hidden inside the browser kernal.
Caching, server side rendering, code splitting, files minifying, reducing critical render path rendering, using newer image standards to reduce size and so on and so forth
Doesn't that get compiled to (a subset of) JS that can be highly optimized by the browser's JIT shenanigans? Or am I thinking of something else? Never used WASM. 
Java??
You're thinking of asm.js I believe
What you're thinking of is asm.js, which is a precursor to WASM. WASM is machine code for a virtual machine that's usually implemented within the JavaScript runtime (but doesn't have to be). There's also a text format defined (explained [here](https://developer.mozilla.org/en-US/docs/WebAssembly/Understanding_the_text_format)) that looks a lot like LISP. However, that format usually is only used by compiler developers. That means that it's a binary file you can load and execute from within JavaScript. It can call JavaScript functions and be called by them, and gets assigned a static block of memory it can use for internal operations. It does not have access to anything else and so is just as sandboxed as the JavaScript it can call. It has the advantage over JavaScript that it is more compact and can be streaming compiled, meaning that the download doesn't have to be completed for the process to start.
And with JavaScript the complexities are hidden in both the JS _and_ the browser's rendering engine. 
Thanks for chiming in! I get an error when trying this because I am calling an await outside of an async function. How do I handle this?
[removed]
Why do you prefer sass over css in js libraries?
If it's the top level of your app, you could do something like: ``` (async function() { const uberData = await getRide_Uber("Dallas, TX", "Arlington, TX"); console.info(uberData) })(); ``` otherwise ``` const res = await getRide_Uber("Dallas, TX", "Arlington, TX"); res.then(console.info); ```
Ok, so it has to be in an async function! That helps. How would I export the values into another file? I guess I am not understanding how to get the data out as usable values to plug into a website or something.
That’s how async works. You can call it in an async anonymous function or resolve it as a promise. 
It's not generically useful, but it's my favourite. `public static getIncreasinglyExcited(date: Date, futureText = ".", tomorrowText = "!", todayText = "! 🎉") {`
You'd use your function the same way you'd use axios or any other async/promise library. I recommend looking for examples of async requests for whatever you're working on because usage varies (react vs express for example).
Will do! Thanks again
No problem friend 👍
Yep, of the 50 million or so lines of code my project depends on, the ~10k lines of Javascript in my `node_modules` are just a tiny blip.
Webpack 1 was a royal bitch to setup. I probably should have just waited a while before using it since I put so many days into it. Webpack 4 is a lot easier.
https://motherfuckingwebsite.com
Thanks, this is a pretty well explained introduction..
&gt; This is pretty appropriate for a web page, which is essentially a document. HTML without JS is just funky PDF. JavaScript exists and is so widespread because people want interactivity and functionality, not static documents. When they want documents they use PDF. Now, I get the point of using HTML + CSS just to display information, it's nice and flexible. But even Wikipedia uses JavaScript for improved interactions. If you think the web should be more like ~newspapers~ dead-tree documents you are vastly outnumbered by people who want interactivity. And I'll also remind you PDF also has JavaScript. Because it's what people want. Interactivity.
&gt;Adds a metric shitton of unneeded complexity of tools (and size) to create. I'm going to disagree on this one. What's more complex: one language with a bunch of tools or the dozens of modern server side programming languages, hundreds of frameworks, and thousands of libraries? Size is an often cited reason for why js sucks, but I think this is more of a problem with how visible \`node\_modules\` is compared to other languages. One python package (numpy) can be 40mb in size. Why does no one complain about that? Because it is hidden from the developer. Want to use C#? Download 14GB and be forced to use one IDE. \&gt; Have fun with webpack vs if you just want to compile SASS with compass vs some simple HTML which actually looks just fine (ie craigslist). Have fun with python vs go vs js vs php vs ruby vs ... To me this is a classic language flame war.
that's impressive, actually.
&gt;HTML is declarative. React is declarative as well. It is a composition of functions that return data. I don't see a meaningful distinction between the two beyond one is a programming language.
I personally think that we should differentiate JS as some UI/UX enhancement from the JS that "build" the pages... Back in the days, do you remember what was the first use-cases of JS? Yep, blinking stuffs, alerting messages, animations and transitions, etc. In conclusion everything to bother the user (past the first 10 seconds of wow).. Then JS potential for DOM manipulation brought more serious usages. But since HTML and CSS become more mature and many things we used to do with JS are now simply possible to do with regular Hy While the first category should be a progressive enhancement (the website should still be useable without JS) 
You shouldn't use `arguments` anyways. Use rest instead. It behaves less weird, there are no random performance pitfalls, and the function's signature clearly communicates that this is a variadic function.
I use it for debugging like `console.log('function name', ...arguments);` and passing all the parameters to another function like `function(arg1, arg2) { console.log(arg2); otherFunction.apply(null, arguments); }`
You remind me of the recruiter the other day that got me an interview with a java company even though I listed JavaScript as my strength. 
I personally think that we should differentiate JS as some UI/UX enhancements from the JS that "build" the pages... Back in the days, do you remember what were the basic use-cases of JS? Yep.. Blinking stuffs, alerting with pop-up windows, animations and transitions, etc. In conclusion everything to bother the user (past the first 10 seconds of wow).. Then JS potential for DOM manipulation brought more serious usages. But since HTML and CSS became more mature and many things we used to do with JS are now simply possible to do with regular HTML (form validation, date picker, color picker etc.) and CSS (transformation, transitions, animations, etc.) While it was possible to disable JS and still having a completely functional website, it simply became more and more difficult to maintain that over the time. I remember that I always developed AJAX alternatives with regular client/server round trips in case of disabled JS. But let's be honest, for some kind of usage, it's still almost mandatory to have JS enabled. Okay, now regarding the second part of the JS as building our websites _(and I think that the author is talking more about this stuff)_, I simply see JS as an automation tool since it's a "programming language".. I mean we all have sophisticated editors that are helping us to write our codes (code snippets etc..)? Well, I saw all that "modern" JS as helping tools for writing HTML (with the associated styles and webpage scripting). At the end of the day, the building blocks are still HTML for the content and CSS for the styling, right? You can still have a team member that will design the content as static HTML, another member that will design the associated CSS, and you as a front end developer that will use some "tools" in order to end up to what those two members wanted, right? You can do that by copying/pasting everywhere or you can go with some kind of components based "tooling" that will help you structure your code and be DRY at the same time.. A couple of years ago, when JS fatigue was coined for the first time, I was really "fatigué" _(I mean confused to what I should learn etc. particularly for a back end guy)_ but now I can see how the JS world managed to become somehow mature and stable. I remember a talk from Eich when he ended up saying "always bet on JS". So I think that it can only be better in the future.
Use WebAssembly if you want something more performant. C, C++, and Rust all compile to it. Other languages will surely follow when wasm gains more features such as GC.
Yea... you shouldn't pass `arguments` around. That prevents the function from getting optimized. https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments
It's funny, if the article was about some great feature or use case for webpack, the top-voted comment would undoubtedly be a complaint about how overly complicated webpack makes things. But on an article that suggests an alternative to webpack, it's totally the opposite. This field truly is full of people who just love to argue.
WebAssembly is only "more performant" in certain use cases. The latency to transfer data to and from the WebAssembly context is often more overhead than most common tasks would be if they were just done in JavaScript.
That page says &gt; STRICTLY `fn.apply(y, arguments)` is ok, nothing else is, e.g. `.slice`.
20k reads isn't a lot of traffic though. I run a website with a few million visitors per day and lambda turned out to be more than 10 times more expensive than a load balancer and a few small servers.
I've recently tried to use es6 modules natively, and page loads were painfully slow on localhost. So, am I missing something, or does this article suggest to use es6 modules without any bundler at all? 
Is there a point hidden in your comment somewhere? They compile to javascript because that the medium they are targetting runs javascript. If this is a critique to javascript. Then i can tell you that you will never find a language that doesn’t have any trade offs. Frontend is also a very broad term, keep that in mind. 
It’s also up to you what tools you choose to introduce and with that comes the extra complexity. 
#Frappe-latte #macchiato #with #2 #sugars
When people cite size for why JS sucks, they are talking about the JS payload that is sent to the browser.
Yes, but it also depends what kind of project that you are working on. 
Your Wikipedia example of a newspaper dead-tree document with a sprinkle of JS for interactivity is what people like me want. It's the way these technologies were intended to be used. What I don't want is this insane world where my browser needs to download a gigantic blob of JS, which then needs to fetch data from an API, and then render HTML to a screen before I see anything. It's a terrible strategy for most pages on the internet.
We do a lot of things that contradict with the principles of 1000 years ago. Thankfully we evolve, and so do things like the web. 
There are many of them, example: [w3school.com](https://w3school.com) . There's also a youtube user called Hitesh Chaudhary. He has uploaded all the tutorials for js on youtube. 
You don't need to create an arrow function each time you want to call only one function. This works: `[ ... new Set(arr.map(JSON.stringify) ].map(JSON.parse) ]`
....that's the same for all other methods though? map, filter, reduce.... 99% of the cases this isn't an issue 
No one wants to install java, everyone already has a browser. Today, all major browsers support wasm out of the box. Its going to become ubiquitous for the same reason that javascript ate the web.
But then also things come and go and some things remain the same. JavaScript, HTML, HTTP, CSS, C, URL, PHP, TCP/IP, relational databases are 20+ year old technologies still remaining strong. Then technologies like XML-RPC, SOAP, Flash, Silverlight came and withered away. What is the evolution and what is the hype?
Well, you cited some reasons, and while i could replay and start a never ending disscusion, i would like to take a wider approach. The point that im making is: ofc Javascript might not be perfect, but please name another lang that it is... If js has some flaws, like security, having another one ( Flash - action script, or java applet and servlets ) will not be better, why we dont just improve it? As i said before, the lang itself is not worst or better than any other lang, is it’s implementation what makes it good or bad, and for the browser the implementation will be the same, unless we want to go back to propietary plugins nedeed to be installed in orther to execute page content, and we all konw that approach didnt end up any well, or did it?
What does your Firestore scheme look like?
same For HTML and CSS please
Why on earth would you use an FPGA to render a web app?
So without JS web would run slower? Care to explain?
Not the case in firefox anymore. FFI call overhead will be eventually solved in other browsers too. WASM is simply too powerful tool to be ignored.
Thanks i've been looking for something like this to fill up the extra time I have before work everyday. Good brain trainer.
&gt; And no, I'm not afraid of the pace of change. But this isn't my first rodeo either. Saying the JS ecosystem has been stable for the better part of a decade is just inaccurate. Instability means lack of backwards compatibility. Or at least, in soft terms, constant shift in development paradigms. And no that simply wasn't the case. Tools we use rapidly improved. But we were solving all the same problems in relatively all the same ways. Except from SPA explosion which was brought by AngularJS. Framework, which I've mentioned existed since 2009. And that was great improvement. People mistake frontend for "html, css and javascript", which I'm sorry, but web design. Bigger companies were doing quite complicated things in jQuery + Backbone back in the day too, when most of others "front-end" developers did `addClass`|`removeClass` type of thing. Which I can hardly call frontend-development even 10 years ago. It's trivial. So maybe yeah if you compare modern day to "spicing up" html with javascript I suppose it looks very big. But what actually happened that the tools got so proficient that people who could never dream to do big frontends, can now do it on their own without much hassle. As I've mentioned front end got easier. Not harder. Which empowered anyone to do amazing things, which were only available for highly skilled developers working in teams. 
Same reason C took over in th 80's, it was there already, even though there were plenty of better languages.
Wouldn't work correctly for negative numbers. -10 should become 350. Using abs would bring it to 10.
I don't see any problems with the original, it's nowhere near the point when it needs refactoring. If I were to read someone's code and see `var { yellow: undefined, green: undefined, ...purple } = colors` , I'd definitely WTF for a few moments. &amp;#x200B; Btw, `const purple = Object.entities(colors)` is broken, did you mean Object.entries?
`var unique_id; while(document.getElementById(unique_id = "id_" + Math.random()));` or `var unique_id; while(document.getElementById(unique_id = "id_" + Math.random().toString().substr(2)));` Generates a DOM ID that doesn't exist within the document.
@.@
What is that adding it *to*? Would it not just create an object within that conditional?
&gt; I think it’s just everyone’s preference whether to use array.forEach or for-loop. It's not just preference though - instantiating an array costs time and memory that's completely unnecessary, *and* is code that's non-idiomatic and confusing. Arrays are for holding and iterating over values. `for` is for iterating over numbers. Abusing arrays and constructing/garbage-collecting objects in memory just to do what a simple `for` loop could do more cheaply and readably is *objectively* bad code. It sounds like you're just saying "I have no real reason for taking this sub-optimal path other than I don't understand the trade-offs involved and don't like `for` loops for no good reason". If that's the case then I would strongly advise you concentrate on learning to write *idiomatic* code in a new language, or you're basically missing half the benefit of learning one.
Good to bear in mind, though, that every time you .slice(), you create an entirely new array which has to be garbage collected.
That is *an* example of a scenario, but honestly it seems a pretty tortured one. Why wouldn't you simply shallow-clone the original and use `Array.sort()`?
Another way of doing this: `[1,2,3].indexOf(2) + 1` If nothing is there, indexOf returns -1. If you add 1, it becomes 0, and any value other than -1 becomes a negative or positive number--which are all truthy.
Also of possible interest to people is Reddit's very own /r/dailyprogrammer
A build system shouldn't take up so much time to set up. I prefer writing Makefiles to webpack.
Use as much JavaScript as is needed to do your stuff. But be aware that shit hadplens. And maybe use a checklist, like this one: [https://kryogenix.org/code/browser/everyonehasjs.html](https://kryogenix.org/code/browser/everyonehasjs.html) &amp;#x200B; &amp;#x200B;
If theres anything like this that is for free I would love to know about it. I'm currently applying/griding SO hard trying to get interviews and I want to really nail anything they throw at me.
\[ Click to reload the whole page, and read my answer to your question\]
Doesn't look like JavaScript to me.
Dunno... all of MDN, maybe? XD I think the doc site is just broken on mobile. I used Chrome on an iPhone to look at it, and the links and menu button didn't work. So I was just stuck on the home page with nothing actually explained. Looks like there's more actual content if the menu works though. I'd probably suggest the default page give some real information to the reader rather than simply how to install it. If someone comes to the site, they want to know what they're looking at before they decide to install it, I would say.
The advantage of HTML is that you don't *have* to be a browser to consume it... and even browsers can consume it faster and more efficiently than data that's expressed as the evaluated value of imperative code. You should read up on declarative and imperative data to really understand the difference, but by example, say I want to communicate to you my phone number: "Take 3, double it and append the result. Now take the last number and subtract 4 and append that. Double the entire number so far, subtract 2^7 and append the result to the end. That's my phone number." "My telephone number is 364600". Both of those require you to take in audio information, parse and interpret it, but one is parsing *declarative* data that *directly* encodes the answer, while the other is parsing *and then executing* imperative code that *evaluates to* the answer. One can be extracted and used directly. The other requires you to have math skills, execute numerous computational steps requiring additional mental cycles and numerous discrete values to be stored in memory, and may even require you to go and get a calculator just to be able to evaluate it. As the hypothetical user-agent for a simple communication like "my phone number" which of those was easier to consume?
Nobody's arguing pages shouldn't *use* JS - we're arguing they should return static HTML containing the raw data that's then *modified* by JS if and when the user or their device wants to. That makes the date accessible, discoverable, automatically aggregatable and navigable and a host of other benefits to the web as a whole. The alternative is delivering an essentially empty HTML page with no data, then *requiring* JavaScript to be executed just to go and retrieve the actual data from one or more external sources in varied and nonstandard formats. That demands additional functionality in the client merely to comprehend simple data from the server, and worse those endpoints aren't accessible or discoverable, and they're inherently unnavigable which makes it difficult or impossible to aggregate that data. From the perspective of a perfectly-abled, intelligent human being with a good network connection using a graphical display and pointing device running a modern desktop/mobile browser to access the information, it makes no difference. If *even one* of those adjectives doesn't apply, however, the data becomes unnecessarily difficult to access at best, and impossible at worst.
I guess that's true enough, assuming that engines aren't more clever that we think. Still, it's an array with a single element that needs to be garbage collected, hardly what I'd be optimising for. Accessing the last element with `array.length - 1` is, of course, [much faster](https://jsperf.com/last-array-element2) and is usually what I'd go for, even if it often requires the declaration of an extra variable. However, sometimes you just want that quick dirty trick for a neat one liner coming out of an arrow function. ;)
Almost as bad as recipe blogs. Jesus christ show me how to make a biscuit already.
For interviews maybe not but check the excellent [CodeWars](https://www.codewars.com/)
So not worse than webpack in this aspect. Thanks for sharing this, it's great!
Meh, no tests? Eh, ok I suppose the solution segment is nice few those with little experience. &amp;#x200B; I like codewars. The prepared and easily excutable tests and reasonable interface are nice. Sometimes a notch sluggish, but overall kind of fun.
Shit is fast as fk.
The bitwise operator is faster. I admit I could lose the boolean coercion, but this was it has a boolean return type, rather than relying on truthy/falsy
I might be wrong, but I don't think it has to do with the sorting algorithm being used. Sorting algorithms usually require that the function being used to compare elements be deterministic: i.e. if `a &gt; b` and `b &gt; c`, then `a &gt; c`. This simply isn't true with the provided function, which will most likely confuse the algorithm. I would *guess* that the following would produce a better distribution (in the spirit of the original code, though not a one-liner anymore): function shuffle(array) { const map = new Map(); return array.map(n =&gt; { const r = Math.random(); map.set(r, n); return r; }).sort().map(r =&gt; map.get(r)); }
Image processing, e.g. to repeat a texture. Also lot's of other graphics programming stuff.
The main issue is people who are building simple web pages are using tools meant for web applications and not understanding the trade-offs. At work we build web applications for complex domains. Think WebGL visualizations for seismic data, graph exploration tools, real time dashboards, etc.. These are places where frameworks are actually useful and loading speed isn't the most important metric. That being said we still do server side rendering for the initial render, we cache aggressively, tree shaking, lazy load modules, etc.. 
Thanks, there are some interesting utilities there
React has a declarative API. The code it generates is still imperative. 
You are conflating backward compatibility with stability. By nature frameworks/ecosystems with a high rate of change are not *stable*, as evidenced in your reference to debugging a jQuery + backbone app - an app (or rather a part of an app) I suspect was written around 5 years ago. The assertion made was that the JS ecosystem has been stable for over half a decade. If that was so, code written 5 years ago would follow similar design and build principles to what is done today for new applications, and debugging that code would not be such a chore. **THAT** is stability. One of the webapps I've been working with has covered almost the last 9 years (Sept 2010). When I inherited it there was very little JS, no jQuery. Over the last 9 years we have gone from having a heavy reliance on jQuery, through backbone and underscore, to gulp and grunt, now to npm and webpack on top of React for new components. We're regularly porting jQuery widgets to React components, and have spent substantial time dealing with quirks of npm dependencies (mostly from previous versions). We have largely kept up with the industry to help deliver the best user experience. This period of maturation is pretty typical. That's pretty much what you've seen the last 6-8 years in this space: a maturation of tools and frameworks bending towards a stable ecosystem where best practices are established and solidified for more than a year or two. But that maturation process is often messy and necessarily UNSTABLE. Therefore contending that the above is an example of ecosystem stability to me is laughable. I'm not complaining about progress - it's absolutely better in 2019 than 2010 - but JS dev has not been stable "for the better part of a decade". Contrast this with for example Spring, which is the Java web framework we use. Over the last 8-9 years there has been a LOT of improvements made to the framework, and Spring Boot is a very nice evolution of the framework in the age of containers especially. But code that I wrote back in 2010 is largely recognizable and more readily maintainable than any JS code I wrote in the same timeframe. I would probably write many things differently to take better advantage of new features, but the basic approach to developing within Spring has been *stable* for the last decade. Stability in the JS ecosystem sounds like a claim made by someone who has operated exclusively in the JS/UI space for a decade and has no basis for comparison. Having been a web developer for almost 20 years, experiencing a decade prior to the explosion of the JS stack, sorry it's not been "stable". It may *be* stable, or at least mature and stabilizing. But if you're writing apps completely different in 2019 than you did 5-8 years ago, which clearly you are if you're debugging jQuery/backbone, well..... Stable is not the word I'd choose. The JS dev community is very defensive on these points.
Presumably you're spreading it into an object with other properties already existing 
😂
Yeh seriously I mean WASM looks great but the industry can't even handle core feature support across browsers, let alone a NEW adoption. 
Having a well architected 'universal' application, i.e. SSR can achieve that. Even multiple passthroughs of rendering can take place in the event of user centric data. But I rarely come across an implementation that does it justice, unfortunately. Where that might become more difficult is form handling, which can be mitigated by providing a service which handles both JSON payloads and/or form data. The jury's out on that one.
I neglected to touch on your point with Angular. You keep mentioning it being around "since 2009", which is pretty misleading. It was completely rewritten with 2 (released in 2016), and not backwards compatible at all. So angular written in 2014 for example is stuck in 2014. Moving from Angular 1.x, which was coupled to the DOM, to 2 which was not, shows the tectonic paradigm shift that has gone on in the JS ecosystem over the last decade that I alluded to earlier with JS no longer being a browser-bound language. If you can't see it ... I dunno man.
You assumed correctly 
No, I understand what you're trying to say, but I interpret that line just as I wrote.
Checkout [https://learnersbucket.com/examples/topics/algorithms/](https://learnersbucket.com/examples/topics/algorithms/), I have posted 50+ solved algorithms in javascript which should keep you occupied for some time. &amp;#x200B;
[learnersbucket.com](https://learnersbucket.com) I write about [es6](https://learnersbucket.com/tutorials/es6/es6-intro/), [datastructures](https://learnersbucket.com/tutorials/topics/data-structures/) and [algorithms](https://learnersbucket.com/examples/topics/algorithms/) in javascript. &amp;#x200B;
What Plourde is complaining about is that nowadays you can't browse the web with JavaScript turned \*off\*, yet JavaScript isn't part of the original web specification. It was bolted on years afterward to differentiate Netscape from the competition. Apart from the web's "true applications" (e.g. GMail, Google Docs), Plourde doesn't see why JavaScript is a necessity. I think that's a useful thought exercise.
A key property of Weak Maps is the inability to enumerate their keys. This is necessary to prevent attackers observing the internal behavior of other systems in the environment which share weakly-mapped objects. Should the number or names of items in the collection be discover-able from the API, even if the values aren't, WeakMap instances might create a side channel where one was previously not available. 
Most likely this.dash\_board\_orders\_for\_confirmation is undefined. You should try to use debugger for these kind of issues.
Make sure the variable `this.dash_board_orders_for_confirmation` is a number, not a string that pretends to be a number. That is the most common mistake that can be made. That's my guess, because you didn't provide any context for this code.
Hi /u/know_prashant, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Love this one when using pipe or compose
Hi /u/AnecD, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
[https://leetcode.com](https://leetcode.com) has &gt;1000 problems, they add about 3 a week
Most of that isn't specific to JS though - it would be true of any language. No matter what language (or bindings with a family of languages) ended up winning out you would still have the problem of people wrapping three lines of useful content in several megabytes of code that is then harder to maintain than the simpler approach would have been. Those "good \[deity\] why did we think this was a good idea a few years ago" refactoring exercises are with us to stay and would be if other languages/frameworks/tools had won out up to this point. People like playing with shiny &amp; new, and things are changing rapidly ATM so there is a lot of new &amp; shiny to play with.
You could do this without reloading the page: https://twitter.com/keithamus/status/1098260366017134592?s=21
They have roles in both Bristol (UK) &amp; Porto (Portugal) &amp;#x200B; &amp;#x200B;
Yes, of course you can. But that means that you have to meeelions of those forms etc, in all the pages from the start ready to be un-hidden on the off chance that anyone will ever need them. &amp;#x200B; So if the page displays 100 comments, you will need 100 hidden repy-forms, and 100 hidden report-forms, and 100 hidden share-forms, and ... , and ... , and ... , and ... , and ... , and ... 
Not mentionned on the post, but worth a shot: [https://cdn.polyfill.io/](https://cdn.polyfill.io/)
More popular -&gt; easier to hire devs -&gt; cheaper in the long run
Yes, I wrote almost exactly that in the article I linked. :)
Long shot here but happen to be in the GTA?
More popular not only equals more devs to hire but also more open source projects if you can leverage them and more search results for any given dev topic. So there is a case for it even if you are not going to hire more developers in the near future.
A new website I came across that might be useful; https://mentors.codingcoach.io/
Thank you very much! I'll be checking that out! :D
``` /** Generates an array with all values from `start` to `end` (not including `end`) */ const range = (start, end) =&gt; Array.from({ length: end - start }, (_, i) =&gt; start + i); ```
The post I responded to said that javascript is the right choice to use for WWW because all of our tooling targets JS. I said that the *reason* all our tooling targets JS is because we *started out* locked to JS. The causality is important when discussing future steps.
3rd world connections aren't compatible with the 1st world. Fix your 3rd world situation before dragging the 1st world down to lower standards.
&gt; very few people adequately understand the costs and drawbacks of locking your nice, easily-consumable declarative data away behind nasty, difficult-or-impossible-to-consume imperative code that are required to make a qualified, informed decision on whether that tradeoff's definitely worth it On the flipside, I think the scope and use of web technology has expanded to the point where the common definition of a website no longer applies. While browsers are very much still used for the purpose of navigating public documents that should be semantic and easily indexable, they also act as a shell to download and run all kinds of sandboxed software for both creating and managing arbitrary private data. It's fair to say a Wikipedia article should be so simple and semantic it's accessible by anything that can render or understand HTML, but that same philosophy can't be applied to the entirety of web applications. And to some extent the accessibility of simple public information is enforced/encouraged by both search engines and users. Say you make an online store to sell your products, abandoning all web standards and implementing everything in your own black-box software. It's a massive blob of code to load and parse, only to make additional requests for the actual content that doesn't even have direct URLs. The content isn't going to be well indexed so you'll get less traffic. The moment your competition offers near-instant server-side rendering of complete documents with direct links, they'll steal the few customers you may have. So there's real incentive to follow standards. At the same time, if you want to make Blender for web, it makes perfect sense to just distribute a blob of JS/WASM for the software, makes no real sense to render your toolbars as semantic HTML server-side.
Hi /u/eZ1Shot, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/sicilian_najdorf, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/form_follows_fx, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Linux_is_awesome, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/LLCoolioVanillaIceT, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Ventrux15, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ClojureWorks, this post was removed. Job and job-related posts are prohibited * Job postings: Please post to /r/remotejs, /r/forhire, etc. instead of here. * Job/Career advice: Please post to /r/cscareerquestions instead of here. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/PK-110, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/KIRAvenousLion, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/bigsido, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/acklavidian, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/top_secret_code, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/GreenKreature, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
* Popularity - Huge number of prebuilt open-source libraries and components means that you'll often save time, which brings financial benefit to clients * Availability - Dev's have adopted react really well so hiring them is often easier than finding an Angular dev and because of the availability of them, there's more room to negotiate salary and interview more candidates * Consistency - Though there have been changes over the years, the core way you write react code is similar now to what it's been since the start (i.e. component based design) * Native options - Once your devs know React, they know most of the core caveats that also affect react-native. This means that given some time to learn RN-specific functionality, they can look at building a native mobile app for clients too. This brings huge value to clients in what is one of the biggest platforms in the modern world * Support - React is heavily supported by some huge tech organisations and there's no signs of that stopping * Cross platform - This ties into the native options point above, but you can target all major platforms (i.e. web, iOS, Android, Windows, OS X) with react code, though you'll have to do some adaptation if transitioning to target a native platform. Either way, that's huge time savings when you can reuse potentially 80% of your code
Do you think we could be writing the app-ish things in Rust (e.g. video players, charts, VR) and leave javascript to document stuff (e.g. displaying text and images, submitting forms)? Do you see that happening?
\&gt;From the perspective of a perfectly-abled, intelligent human being with a good network connection using a graphical display and pointing device running a modern desktop/mobile browser to access the information, it makes no difference. \&gt;If *even one* of those adjectives doesn't apply, however, the data becomes unnecessarily difficult to access at best, and at worst impossible. You're taking a lot of web accessibility for granted and seemingly place all of the responsibility on top of JS. A webpage that serves a static HTML files instead of loading data dynamically has the exact same accessibility concerns. Most of the problems you described are not fixed simply by serving static initial pages, but rather good webpage design on both backend, frontend and UX side, of which Server Side Rendering is but one good aspect. A good website requires a lot of other features, many of which have a lot more impact and thus a higher priority. A unfortunate truth is that people want webpages that feel snappy and responsive, and having dynamic content is tremendously effective way of achieving that. When you consider the workload of having SSR working and weigh it against releasing the website to the users two weeks earlier, the winner is pretty clear. When I was writing the server code with non-JS language, the hurdle was even greater. If I had to write the dynamic rendering code in JS anyway, writing the server side rendering code in a different language felt like a wasted effort of code duplication.
(self post)
I also send this opinion Mead being much more succinct in his explanations. About Grider, read in a few places that his updated React course is the best there is. Working on Node now, but will start with React soon and the two teachers I'll turn to will be Mead and Grider.
Yes, definitely. There’s also wasm-bindgen for Rust, which allows accessing all APIs available to JavaScript by generating the interface code automatically. It’s possible to write everything in Rust with this. There just aren’t good frameworks for web apps like React or Vue available yet, which makes this rather inconvenient, so I still use JavaScript for those parts (with ember).
Hey /u/BenAffleckInPhantoms, founder of AlgoDaily here. PM me your email address after you've signed up and I'm happy to hook you up with a beta access account. We'd never want money to be the reason not to have access to this material, especially as we're still creating content daily.
Leetcode is great, but too often I found myself reading their explanations and not knowing what was going on. AlgoDaily is essentially a step-by-step tutor for JS developers, self-taught, or nontraditional folks to better understand often complicated CS material by making it compelling and fun.
Interesting, what would you like to see here with regards to HTML and CSS?
Yes, big fan of dailyprogrammer! AlgoDaily was built in the same vein-- these are hard problems that can take 1-2 hours to fully grok, and I found one a day (esp in the morning before school/work) to be a great cadence to building up algorithm thinking skills.
This is great point and will be addressed in the next few weeks! Thanks for your feedback!
When it comes down to var fn2 = (x,y) =&gt; { x = 3; y = foo(x + 1); return [x,y]; }; What are you really saving yourself? It's even one character longer than function fn2 (x,y) { x = 3; y = foo(x + 1); return [x,y]; } and, I think, harder to visually parse as being a function because it starts with `var` (or some other variable declaration) which requires scanning beyond that first keyword to see what is really being assigned (function? object literal?).
&gt;It was possible to include either or both VBScript and JScript on the same web page. However, developers that used VBScript in their web pages were marrying their websites to Internet Explorer, since VBScript was a language proprietary to Microsoft. VBScript was even supported all the way to IE11, although Microsoft would have preferred that to not be the case. Believe it or not, VBScript was even supported all the way to IE11, although Microsoft would have preferred that to not be the case. You got the last sentence with little variation twice in your text. Informative article. Thanks.
I personally agree with you entirely. Some folks really dislike the hoisting capability of \`function\` functions, so they prefer to prevent that with the variable-function-expression pattern.
&gt;take 1-2 hours to fully grok and &gt;before school/work So how's sleep deprivation treating you?
Haha, if you're trying to convince people to give you $$, doesn't hurt to put in a few hours :-)
I've been trying to research readability (and related concepts like skimability) for years but have struggled to find much material. (At least, material that isnt uninformed or clearly situationally biased). Do you have any sources to recommend?
I think I saw some kind of virtual DOM framework for C# with some (if not all) of the host bindings made available to C#. I’ll have to look for it. Either way, that’s actually something I would love to work on at some point, and Rust would be a cool language with which to do it. I’ve been building a virtual DOM framework in vanilla JavaScript, and I don’t *think* it would be terribly difficult to migrate it. However I’m not very experienced with Rust or WASM.
Arrow functions for callbacks Regular functions for everything else
Hi /u/zoltantoth, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Wasm doesn't yet have Dom access
Just off the top of my head: For html you can test people on proper semantic use of elements like "you have an image and you want to include it on the page but also provide different sizes depending on screen size and resolution, how was you do this in html only" or "you have a list of question and answers (like an faq), what is the best semantic way to write this in html" etc etc For CSS maybe you provide some raw un-styled HTML and you show an image of what it should look like and describe and non-obvious interaction (like hover/focus/etc states or maybe fancy form input+pseudo-element "hacks") Stuff like that. Testing all of this is not as easy as unit testing functions of course 
The main issues with that project are: 1) You have the manually select your polyfills, as opposed to babel-polyfill which can auto-include them for you when you use `useBuiltIns: 'usage'`. 2) It's an external request. &amp;#x200B; I use a similar approach to the one mentioned in the post, but instead of using `browserslist-useragent` which checks for user-agents in order to decide which build to serve, I simply check for the availability of certain HTML API's (fetch and Promise are good one's).
Well, the only way to get experience with a programming language is to actually use it! Anyways, there’s already a project working on such a thing called [Percy](https://github.com/chinedufn/percy), but I haven’t tried it yet.
[HackerRank](https://www.hackerrank.com/) as well is pretty good
I don't mind putting in a few hours outside of work, but I'm more of an evening person. I don't even think my brain could handle algorithms at 6 a.m.
What is considered a large amount of code? The web apps I build are large and complex and anything over 7 mb is considered big. That doesn’t sound like much to me. Go to your favorite App Store and look at those app sizes and tell me 7 is a lot.
No, I appreciate the different perspectives. For sure, if you're logging each event as a separate request, as most analytics do, then lambda costs will skyrocket. I'm just doing it on exit, which is another tradeoff, as I don't catch 100% of sessions. But given the enormity of cost savings, IMO it's worth it. &amp;#x200B; Obviously everyone's setup and needs are going to be different. So finding what works for you is half the fun. Doing custom analytics gives you that freedom.
Couldn’t you argue the same for HTML? To the end developer it is the same.
If you are interested in talking at [ITNEXTsummit2019](https://www.itnextsummit.com/), please [submit your talk](https://sessionize.com/itnext-summit-2019/) * PS. I would like to thank all the moderators of /r/javascrip
Running a busy loop is much less efficient that calling setTimeout, which likely invokes `sleep` syscall
I think you could effectively enforce that with a combination of the existing rules, but I'll have to think about whether or not this specific should be its own explicit rule/mode. :)
You can check your conditions in the componentDidUpdate lifecycle method which runs on prop and state changes. This would likely be better than getDerivedStateFromProps which isn't really meant for that.
Oh, that looks very impressive. I see they are trying to imitate React, and there is even a feature request for “hooks.” Looks promising! I might just try to build a web app with that sometime soon.
Might as well use java if you want static type overhead. Applets on the client plus spring for the server. It's got oodles of static typing everywhere. 
Thank you for pointing me in the right direction. I look forward to learning Javascript and being able to contribute relevant code, content to /r/javascript
Static type overhead? TS doesn’t impose additional runtime type checking. It’s all at “compile” time. Plus your argument can be reducto ad absurdium all the way down to “you might as well use machine code”.
That's awesome, I will read more about it later, thanks
It's overhead of the cognitive type. It often results in slower code ultimately as well, because it encourages poor design patterns.
Hmm, so what is the advantage of checking the HTML API’s as opposed to the user-agents?
Um what? *Static typing* encourages poor design patterns. I'm going to need some examples. As much as I hate to rain on the JavaScript parade, I'd definitely argue the opposite.
How does static typing encourage poor design patterns?
Are you insane? Or is JS just the first language you learned? Static typing is dramatically *less* cognitive overhead and typically results in much *faster* execution. 
i get what you're saying, but these aren't equivalent cause the first one is an expression and the second one is a declaration. there are subtle differences between those two functions. i think you meant var fn2 = function (x,y) ... 
Hi /u/brandondurham, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/DRogue1337, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Try it out and upvote on Producthunt: [https://www.producthunt.com/posts/datash](https://www.producthunt.com/posts/datash)
Interesting what would that code look like?
I'm in the same boat rn and I really recommend Triplebyte and Pathrise. Pathrise is a fellowship that sets you up from the ground up, you'll need to know a bit about data structures/ algos but they do professional development and technical workshops throughout the week. It's nothing upfront and 9% after you get a job you're happy with. &amp;#x200B; Triplebyte for frontend has been pretty pleasant for me so far. You have to pass an online assessment first (covers tons of things from how the event loop works, hashing + salting, this semantics etc, and then you do a 2 hour interview with one of their guys who will give you a review/feedback and from there you basically have an advocate who will pitch you to companies. I'm finding that last part really really helpful for people like us who have low response rates for resumes from lack of experience.
This feels like one of those "\[insert technology\] considered dangerous" type posts. One of the great benefits of the web standards we use today has been accessibility. Authors are able to create their content in a variety of ways and still serve it to consumers through a generally agreed upon interface; The browser. 99.9999%+ of people using the web are doing just that; Opening their browser on their desktop, laptop, tablet, or phone and going to a webpage that renders HTML, CSS, JavaScript into something meaningful for them. Some percentage of users may also have applications that assist them in various ways to interpret or interact with the output, like screen readers, braille devices, screen pokes, etc. Then you're going to have developers and hobbyists who are learning and exploring. They're going to want to look at the source or as close to what they can as possible. They might do a "View Page Source", but more than likely today they'll use the browser's built-in development tools or download additional extensions to help in that discovery process. Using JavaScript to create your pages doesn't halt this type of exploration. People can view what has been rendered in the Element browser, see the CSS both as source and its computed output. Then they can dig into how it was rendered by going back into the JavaScript. Likewise people who are mining data from pages and doing screen scraping can write automation and parsers that either wait for the render to occur and pull that data from the DOM or parse the JS itself and try to pull information that way. The problem as I see it isn't so much JavaScript obfuscating the data as it is the same old problems with HTML... Poor semantics on output. Just like when developers used JSP, PHP, or ASP to output "clean" HTML, developers using JavaScript are rendering similarly bad code. For example, I was going through a candidate's portfolio the other day and saw an instance where their React application produced list items but forgot the parent element in an unordered list. Twenty minutes later I'm looking at another candidate and see the exact same error. I regularly see developers wrapping table rows in divs, putting block elements inside inline elements, adding an attribute that works on one tag onto another tag that doesn't use that attribute, and a host of other incorrect uses of HTML. I've seen projects that define headings in terms of classes instead of tags and ignore heading or content hierarchy in favor of just a bunch of boxes of copy with seemingly no relation to one another. This is NOT an issue specific to JavaScript development. Part of the democratization of the web is that anyone can get out here and become an author. The tools for web development are now meeting up with that ideal. You no longer only have the choice of using notepad or a half-assed wysiwyg editor. There are dozens of options for authoring now. The downside to that is that you are going to see huge differences in the quality of code that is being put on the web. Some people are coding for a hobby, some for learning, some for a job, and even within those you'll find a range of experience, motivations, and outcomes. That's not he fault of technology and I'm not even convinced it is entirely a bad thing. Sometimes we want to boil the ocean down to one thing being the problem and one thing being the solution. That's not how any of this works.
It has a use... If you use an arrow function, 'this' has different behavior. But for the most part I find it best to just use 'function'.
It's been a month but wanted to tell you this was the most helpful, realistic answer. I can't quit my job, I'm not going to start getting up at 5am, etc. But this is doable and is something I'm currently starting to do. Thanks!
Sheesh the fanboys are really out in force. I like JS myself but this questions was entirely justified to receive all those down votes. Maybe it hit too close to home and theres no answer thats liked. Anyway with webassembly we are no longer building such a world. The fact that Javascript is still involved means little. If you don't have to write it then its not a javascript world ( cor example Blazor with C# is getting really close) . many frameworks rely on C in the background and no one says that of C.
[Blazor](https://blazor.net/) is probably the C# framework you saw. 
You can't rely on user-agent as it can be spoofed and UA's change with browser updates, so you'll need to constantly update it. Also, it's one dependency less: `browserslist-useragent` is a whopping 200kb minified.
So a lot of UI type stuff? That would be interesting.
Java applets failed greatly *eventually,* but they were pretty widespread for a while. I made some friends in Java applet based chatrooms back in 1997/98 who I still talk to today. So those crappy old applets will always have a special place in my heart. 
despite the downvotes yes thats correct BUT for technical reasons ONE language had to be chosen a the time and like it, hate it or love it JS was that language that won out .
There's a testing tool out there that can take a snapshot of a web page and compare it pixel by pixel to a previous "passing" snapshot. We use it for our branded component library. 
Hi, sorry to bother, but in case you liked this experiment, can you share the link? I'm a software engineer undergrad and I need to get an "on site" internship in order for me to graduate, I'm trying to get some attention. Thanks.
How do you use this subreddit? If i sort by newest then I see the newest post is from 6 days ago and the next post is from 1 month ago and so on. That doesn't seem very "daily". Am I doing something wrong? 
I'm not saying you are wrong, but I am saying that you're making some classic mistakes that make it hard to engage your argument. First, you are mistaking "it's easy for me" for a universal truth. Hopefully the following bits can show how someone else might view it differently. To Getify's point in the article, some readability items are truly subjective, and others are generally objective (but require study rather than gut feel). Like the best version of a song, many people end up preferring what they experienced first, and consider it "best". Second, you are conflating a number of items. For example, when you say "requires scanning beyond that first keyword" you are talking about function expressions. Fat arrow functions require function expressions (for reuse, at least), but not all function expressions are fat arrow functions. So what are you actually arguing against? Third, you are creating false distinctions. " to see what is really being assigned" - You don't have this argument about declaring variables. A function statement creates and assigns a variable in a manner completely different than any other variable declaration. I prefer to use function expressions REGARDLESS of whether I'm using fat arrow functions or the function keyword, because it makes the assignment of all of my variables consistent (and skimmable, see below). I only use function statements when I have a particular need/desire to use hoisting, which is relatively rare. Fourth, you create a false question. "What are you really saving yourself". You are focusing on character length rather than visual patterns (See my point #3) and/or visual noise, even though you yourself refer to the visual noise in your point about having to skim inward to find "what is really being assigned". "function" is a large word, the presence of it harms skimming. (A very valid point can be made that fat arrow functions are TOO dense, also harming skimming - like I said, my goal here is not to say that fat arrows are the right answer, but rather that there are better arguments to discuss them). Skimmability of code is a huge deal, and is sadly under-discussed when it comes to code readability. You want your eyes to be drawn to the important parts of code as you skim over it, and to not have the important parts lost in the visual noise of other things. This is why whitespace matters. This is why I prefer function expressions - they emphasize the name I assign the function to, rather than the fact that I'm declaring a function. 
Site doesnt work. No "CMD" key on my keyboard, trying various other keys nothing seems to happen. Even when i put a working solution in the box, no feedback to say if it worked on not. very buggy seeming site. 
Hell no. It reduces the cognitive overhead.
Glad to hear it. As you work on your project, consider writing about it. Ups and downs. It doesn't matter. Writing about mistakes is great. It can help keep your head clear, too. Putting your design decisions down in writing will help you make better ones. When it's time and you've outgrown your current job, having those kinds of artifacts will help you punch a little higher than your work experience weight class. Something self-driven in a portfolio to show that you care. Something to demonstrate your communication skills. If you need a little nudge, consider posting in this sub. There's a weekly "Showoff Saturdays" thread. It's generally really positive, and you can get some constructive criticism. Don't be afraid to show your work. It's a great way to accelerate your learning. And as you get better, try to teach people, too. Having to explain stuff really solidifies your understanding. It can be as simple as sitting in a programming Slack channel and answering newbie questions once in a while, or answering questions on Stack Overflow. Good luck. Feel free to send me a message if you need any advice on your projects.
&gt; Applets on the client What year is it?
Thanks for letting us know, [cm9kZW8K](https://www.reddit.com/user/cm9kZW8K)! The team is working the ability to have ways to execute code that should ship today. With regards to feedback, please make sure you're \`console.log()\`-ing your results -- but we'll get a fix for that too. Thanks for the feedback!
 cost fn2 = (x,y) =&gt; { ... } This is better because you cannot override fn2. Also, you have lexical scoping of `this`. 
Cool! Next time you should probably include a link or some other info... unless you're trying to avoid getting this flagged for self-promotion/advertising. In either case, here's the info in case anyone is curious (saved you a Google search): [https://www.assertjs.com/](https://www.assertjs.com/) SEPTEMBER 12, 2019 TORONTO
&gt; Plus your argument can be reducto ad absurdium all the way down to “you might as well use machine code”. I think the argument is that in this case the overhead doesn't provide enough advantages to justify the cost of it's disadvantages; not that overhead can never be justified. 
Sweet summer child...
I see shanita10's point, static typing is not that great of a feature in TypeScript. I never was plagued with typing related issues when I used JavaScript.
I don't install multiple mobile applications every day. 
Static typing is not *that* great of a feature in TypeScript. I never was plagued with typing related issues when I used JavaScript. It has other benefits that I like more.
I guess it must have slowed down a bit. When I used to use it regularly a couple years ago, it still wasn't daily (lol) but it was regularly three times a week
Hi /u/99Kira, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Earhacker, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I do agree in general. TS is a bandaid that in some cases makes it worse, and using a real server side language is better than using TS in Node. That said, I’d rather use TS than JS, if I had to use Node on the server. 
https://github.com/wesselbaum/class-sort
We did it! We solved the problem! What problem? Oh just the one I invented.
Train it to handle them at 6am so that it can handle them any other time. I think the best state of mind for us humans is in the early morning. 
Ok, it's a shit-post but honestly sometimes it's a struggle not to refactor someone else's shit code when it's not priority. I'm in the middle of reviewing some 3rd party developers' code and it's hard to draw the line somewhere some times... Moral of the story is don't let non-engineers make suggestions about what helps accelerate a project timeline (even if they say it's just an experiment and we don't have to keep their contact for long or it satisfies someone outside of your department)
&gt;Pathrise thank you for sharing this I think this might be something I've really needed.
https://github.com/NinthAutumn/theta
https://github.com/motocru/curse-bot
Well my CLASS values get really messy if I dont use this. 
AngularJS officially came out at 2010, not 2014. In our company we have code which is from 2011 written in AngularJS. I'm not sure where are you getting the figures. Angular 2 was a new framework under the same name. And for a while both there developed at parallel, AngularJS going Into maintenance only security updates since last year july. That's almost 8 years without breaking changes. Yes. The platform expanded. Again that has nothing to do with instability 
Aren't you glad that these sorts of arguments were ignored when it was assembly programmers making them? And again when C programmers were making them? And again when Java programmers were making them?
That's not really what happened, though. It wasn't a case of "which of these thoughtfully-designed, well-regarded languages shall we implement in the browser?": it was more "Shall we let people do some scripting in here? That sounds cool, let's slap together something forgiving and dynamic, they're only going to be writing a couple of lines. Oh SHIT, they're actually building complicated applications, better try to build a proper language out of this".
I love it when newbs who are still attached to static types accuse me of being a newb. Makes me nostalgic for the time before I realized what a waste they are. Static types are training wheels. If you keep working on it, maybe one day you will learn how to take them off.
You can use arrow functions to preserve lexical scoping if say your function is called from the event loop. 
Looks like PLAYER is an array so you'd have to set a new variable for players then loop through that: `var players = item.PLAYER;` `players.forEach(player =&gt; {});` You may also want to look into using ES6 syntax instead of jQuery for these loops.
Yes, pg is the module you need. Just look at the sample code. The examples are pretty clear. 
Fair enough. I think people should learn a lesson from all the efforts to make a system to transmute web code to native mobile, and realize you cannot just make frontend technology universal because you figure, naively, it would be easier to just port web code into all things. It ends up being harder in the long run, and all you really learn is how to fight systems, not code.
Webpack is great, but since I've started using Parcel, I haven't looked back
Thank you so much for your quick response. I will give this a spin and let you know how it goes. Much appreciated!
No problem. Feel free to PM me with other questions if you have any.
Cidewars is great but God it's a slow site lately 
Good point, for sure. 
I'm looking to process the data and track if the website content change over time. I'm looking for changes in numerical values of a website so I'm planning to use Regex in PostgreSQL to determine this. I have over 15k urls to process from 5k different sites, so my thinking is a database would be easiest to handle this.
https://github.com/relativityboy/dw-backbone
[https://github.com/jimMartin4321/MarketZoom](https://github.com/jimMartin4321/MarketZoom) (junior dev react side project)
https://github.com/user9747/GR-system
Hexnut is a middleware based, express/koa like framework for web sockets. [Github link](https://github.com/francisrstokes/hexnut)
Fair enough, but for anonymous functions the declaration isn't nearly as long, especially for one liners: arr.filter(function() { ... }); arr.filter(() =&gt; ...); And regardless, it stands to reason that people who use anything ubiquitously *just for the sake of it* are doing the wrong thing. The lambda syntax is expressly for lexical scoping of `this` so it has valid reasons for existing.
https://github.com/ccfcet/karma
Don't presume. I'm not part of "js community". Neither am I a "front-end" developer. Now since we have those out of our way, I can answer the points you've raised: \&gt; You are conflating backward compatibility with stability. It pretty much is. It means that you can be sure that the code you wrote yesterday will continue to work tomorrow. And if your code which you write yesterday is just as good as anything written tomorrow is stagnation. However at times you do not want things moving too fast. \&gt; as evidenced in your reference to debugging a jQuery + backbone app - an app (or rather a part of an app) I suspect was written around 5 years ago. Around 7 as indicated by gitblame. \&gt; Over the last 9 years we have gone from having a heavy reliance on jQuery, through backbone and underscore, to gulp and grunt, now to npm and webpack on top of React for new components. Yeah, and that's the shift I was talking about, which happened around the time AngularJS was released. Other than that, there was no shifts in paradigm at all. There was just improvements to the problems we were already solving, like state management for example. So new tools appeared, and that's great. It makes things EASIER. \&gt; But that maturation process is often messy and necessarily UNSTABLE And past 2013 we already figured out what to do and what not to do when designing UI and managing state at client side. \&gt; Over the last 8-9 years there has been a LOT of improvements made to the framework, and Spring Boot is a very nice evolution of the framework in the age of containers especially. AngularJS lived for 8 years of active development. React is as recognizable as it was. Currently the patterns are so ingrained that any UI "framework" will now be recognizable provided they've done some React. Like my mentioned C# Blazor or Rust's Yew. It's settled. And it has been settled half a decade ago. The tooling is just catching up to help us solve problems we were already solving. \&gt; I would probably write many things differently to take better advantage of new features, but the basic approach to developing within Spring has been *stable* for the last decade. And that's why Java is no longer expanding anymore. And actually losing influence in past decade. It's too slow to keep up. C# seems to be doing just the right amount though. \&gt; a maturation of tools and frameworks I'm not sure what you mean by this. Because I can agree if by tools you mean like good router component library. Or good serialization library. If you're talking about something like Ruby Rails, like old school monolith frameworks, when those days are gone. It doesn't scale. I mean you might still use it to make a trivial app for third party small business client, but that's not really relevant. \&gt; Stability in the JS ecosystem sounds like a claim made by someone who has operated exclusively in the JS/UI space for a decade and has no basis for comparison Well, someone might find benefit in investigating their own prejudices. \&gt; Having been a web developer for almost 20 years, experiencing a decade prior to the explosion of the JS stack, sorry it's not been "stable". That might have been interesting times. Whole browser wars and all. And ES4 political struggle. If not for Microsoft and Google perhaps we would have stable javascript since 1999. \&gt; It may *be* stable, or at least mature and stabilizing. But if you're writing apps completely different in 2019 than you did 5-8 years ago But we really aren't. Tools are better, and allow us to solve same problems more effectively. We had problems with state management with BackBone and we had that with AngularJS. Tools like Redux solved it. That's not mark of "instability" that's simply progress. And if you are professional programmer, you generally have no issue in adopting to new tools. I mean, it's part of your job description. &amp;#x200B; &amp;#x200B;
Hi, I am now getting undefined when using this sample. Am I doing something wrong? &amp;#x200B; var players = response.PLAYER\[0\]; console.log(players); console.log(players.firstName); &amp;#x200B;
[https://github.com/adventurer-hexed/HexedVisualizer](https://github.com/adventurer-hexed/HexedVisualizer) A web based Spotify visualizer and player that me and a couple of colleagues did as a fun side project. (Junior to mid-level developers) Always interested in feedback
Hackerrank is great, just not super digestible for noobz. I need a little guidance with my learning at this stage.
Will also check this out, thanks!
Los Angeles!
Gonna look at this today too thank you!
Check out sequelize 
&gt;sequelize Nice! This opens up to any SQL db.
&gt; it was more "Shall we let people do some scripting in here? That sounds cool, let's slap together something forgiving and dynamic Nothing is wrong with that for an interim solution if no one else came up with nothing else. Javascript has easy operability with HTML. Its taking webassembly to have other languages. I think I see why you are getting so many downvotes. You are just whining to no end. &gt;Oh SHIT, they're actually building complicated applications, better try to build a proper language out of this". Things evolve and grow. The argument Javascript was created for this or that therefore it is deficient no matter how it evolves is just hating - not common sense.
&gt; You're taking a lot of web accessibility for granted and seemingly place all of the responsibility on top of JS Not at all. I'm just pointing out that *no matter* how good your HTML markup is once it hits the DOM, if you get your architecture wrong then you can undo most or all of that good work. No part of what you quoted implied that accessibility was *solely* dependent on not abusing client-side JS - just that not abusing client-side JS was *a* requirement for good accessibility. There's an enormous difference between "this is a factor that can absolutely ruin X" and "this is *the only* factor that impacts on X". I was arguing the first one, not the second. &gt; A unfortunate truth is that people want webpages that feel snappy and responsive, and having dynamic content is tremendously effective way of achieving that. When you consider the workload of having SSR working and weigh it against releasing the website to the users two weeks earlier, the winner is pretty clear. This is a client-education problem at worst, and a non-factor at best. For many clients you shouldn't have to even go into this kind of low-level architectural detail because they're neither inclined nor equipped to make decisions. For those that are you still have to educate them and ensure they (and you!) carefully consider *all* aspects off the design/UX and *all* significant use-cases, rather than lazily assuming it's only ever fully-able human users (... etc, etc, etc). Moreover, with isomorphic JS becoming more and more prevalent it's increasingly becoming a non-issue, as aside from a relatively fixed amont of setup, the cost of supporting SSR as well as CSR is negligible.
Have a look at the documentation. Try [this provided example](http://api.iscorecentral.com/samplejson.html). Press the submit button and notice how the results are returned. Each player does **not** directly have a `firstName`, `lastName`, etc. Instead they have an `"@attributes"` property and that's where all the data actually is. For further problems, please visit /r/LearnJavascript and post your issues there.
15k is nothing. Just keep it in an array. Save it to disk as json periodically. 
Hi /u/lysyfacet, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/TeslaMecca, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/dedsechackr5, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Looks cool, but \`Invalid token scopes.\` :(
I'm not whining, I'm pointing out factual inaccuracies ("browsers chose to support an existing language, javascript") and logical errors ("tools for building web apps compile to javascript, therefore browsers chose to support javascript"). I'm not even criticising javascript! I'm literally just pointing out flaws in arguments.
https://github.com/kwyoung11/react-selectable-simple
Are you aware there exists a well known cipher produced by an Enigma Machine also know as the Enigma Cipher?
7 MB is a behemoth when you have to send it over the wire to your poor 3G users. Are you measuring your repo size or the actual payload you deliver to your users? If it's the payload you're talking about then you should seriously consider taking measures to reduce it. I'd be curious to see a [webpagetest](https://www.webpagetest.org/) of such an application.
I did that a while back using [image-diff](https://github.com/uber-archive/image-diff) (which requires ImageMagick) and Phantomjs (this was before Puppeteer existed). But yeah that's a good idea to test if a user built the UI to the exact spec. 
I guess so, right? I mean, what else would you test for with HTML and CSS? 
oh yeah, I definitely like your approach, very informative
Are you sure you didn’t add an extra zero to that? That over 11000/week!
Ha, this may actually be the solve to one of my biggest pet peeves in my personal code
Yeah, I'm positive.
A while ago I made a Discord bot that leaves any server it's added to, essentially making it pointless. [https://github.com/cyber28/i\_will\_leave](https://github.com/cyber28/i_will_leave) &amp;#x200B;
Sent you a DM
Hi /u/coolrivers, this post was removed. Job and job-related posts are prohibited * Job postings: Please post to /r/remotejs, /r/forhire, etc. instead of here. * Job/Career advice: Please post to /r/cscareerquestions instead of here. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/starguest2018, this post was removed. Job and job-related posts are prohibited * Job postings: Please post to /r/remotejs, /r/forhire, etc. instead of here. * Job/Career advice: Please post to /r/cscareerquestions instead of here. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/starguest2018, this post was removed. _"It's perfectly fine to be a redditor with a website, it's not okay to be a website with a reddit account." - Confucius_ * If you advertise or promote a paid product or service, or a site which you would in some way benefit financially, then please [buy a sponsored link](http://www.reddit.com/advertising). * It's ok to promote your own projects or content, as long as that's not all you do. See ["What constitutes spam?"](http://www.reddit.com/wiki/faq#wiki_what_constitutes_spam.3F) for more information. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
&gt; This is better because you cannot override fn2. If you redeclare a function, your linter or TS' compiler will complain anyways. I never understood this supposed pro argument. It's completely irrelevant in practice. But even without the tooling in place, I've never seen anyone accidentally redeclare some function. There shouldn't be that many functions in scope anyways. How do you end up using the same name for two of them?
oh brother. The web is not just a bunch of documents anymore.
&gt; This is why I prefer function expressions - they emphasize the name I assign the function to, rather than the fact that I'm declaring a function. In car analogies, this is like saying that the color of a car is more important than something being a car.
Doesn’t matter, it’s usually cached and even then the business requirements demand it.
&gt; for anonymous functions the declaration [...] If the function is anonymous, it isn't declared. A function declaration isn't an expression. The name is part of the declaration.
7mb would be total size not gzip. Furthermore not all web apps are intended for mobile so it’s a non issue.
https://github.com/bailinhuang/bestbai-shop I would like to have the code under the folder "bestbai" reviewed. It's a react project. 
I'd rather make it possible to it impossible to override it then to say I'll never wont mess up and override it. 
order actually matters though...
I use CSS Comb all. The. Time. I don't see this being that much different. And they're quite a few who advocate for an absurd amount of HTML classes. So, like, whatever floats your boat!
Yup definitely. Most people are not building complicated apps. the vast majority of the web is basic text, images, and some animations/simple JS interactivity. Yet somehow we're in this spot where even pages like that default to using industrial-strength tools when they are not necessary. I think a lot of the bootcamp factories are churning out devs that only really know how to make webpages with react/JS and it's making the web a shitty experience, especially for users with slow internet or low-end devices. I often think about all of the electricity that we devs are wasting by having each and every device download a blob of JS to render HTML when instead we could have the server render it once, cache it and serve it to every client. I'm sure it's astronomical. And again. I know this isn't the case for **every** page. But it is for the vast majority of them.
Just don't write code in Notepad then? This really isn't a real-world problem.
So it's more important to know something is a function than to know what it is named? No, you need both. Ditto for other variables. So why treat functions different than the other variables? In car analogies, this is like saying that you describe every car in Make-model-chassis order, but inexplicably list BMW's as Chassis-model-make order. I'm advocating for consistency AND emphasizing names. Neither of these seem to be trivializing more important matters as you suggest. 
Why would I depend on tooling, and rely on myself and other developers to not mess up, when I can just solve the problem with one keyword that is built into the language? 
&gt; Why would I depend on tooling Are you using a dumb editor? Do you not get some squiggly lines if you write garbage like this? https://i.imgur.com/B7RXASB.png You can catch all kinds of issues if you use better tooling. You could catch even more issues by using a language with static types. Also, have you ever actually made that mistake in the past?
Everything your readme says in a few lines, and Jess charters then the package.json: ``` function classSort( target = document, sortFn = (a,b) =&gt; String(a).localeCompare(b)) { Array.from(target.querySelectorAll('*[class]')) .forEach(el =&gt; { el.className = el.className.split().sort(sortFn).join(' ') }); } ``` I wrote this on my phone, there's probably a syntax error somewhere
but there are no flaws my man. Anyone could have come up with something to work in the browsers. If you have been online less than ten years then you probably don't know that lots of companies tried to do so through proprietary plugins. It was generally a mess because users had to install the plugins (flash is the last of them - dead most places and dying fast in others ). Javascript rules today because developers could add the functionality through server side references in html - no download process. Silverlight was C# and getting pretty good but again - plugin installation required - and MS pulled the plug. Now Blazor from MS is starting to take shape and C# will most likely be a thing in the browser through webassembly later this year (server side in a few months). But give JS its due. Its added a lot of features we use everyday when other technologies were not ready and today although I HATE some of the syntax and quirkiness its a matured language that can do A LOT and not just a scripting language. Will I bolt like lightnin after seeing C#'s Blazor framework workflow? Yep. Just get it stable. I already like MS implementation ten times more than any of the the top JS frameworks but then I always thought C# was a better language. I am just not willing to rain all over JS
&gt; So it's more important to know something is a function than to know what it is named? If you're looking for a car, you'd look in the parking lot, right? &gt; So why treat functions different than the other variables? Being able to differentiate between different things is useful. It's kinda like HTML has things like headings, paragraphs, lists, tables, and images. Those are your building blocks. In programming languages you have things like variables, functions, classes, methods, etc. You can declare variables, functions, and classes. So, why would you obfuscate what it is by declaring it as a variable? I declare this variable called "foo". It's value shall be... psyche! It's a function! Got you good. Hahahahaha. Yea, I don't see a point in doing that. Why do it in a roundabout fashion when you can be upfront about it?
Yes, I use tooling. You missed the point though. I don't want to have to depend on something when I don't have to, especially if there is a very easily solution to solves the problem (even more so for a solution that is solve by the language itself in literally in one word). Besides, you should be using arrow functions for lexical scope of `this`. If you're using an arrow function then you need to declare a variable with either `var`, `let` or `const`. You should never use `var` and you should *only* use `let` for a variable who's value will change. 
\&gt; why would you obfuscate what it is by declaring it as a variable? \`\`\`function foo() { }\`\`\` as a statement DOES declare a variable. A variable called \`foo\`. 
That's not a variable declaration. That's a function declaration.
A function is an object. There's a symbol table with definitions, and when you declare a function statement, that table is filled with the value just as when you use a function expression. When you pass values around, it might be a function, or it might be another kind of value. They are all values referenced by variables. 
Yes, that's nice, but we differentiate between function declarations and variable declarations. When someone says "function declaration", it's something like this: function foo() {} https://www.ecma-international.org/ecma-262/8.0/#prod-FunctionDeclaration When someone says "variable declaration", it's something like this: let foo; https://www.ecma-international.org/ecma-262/8.0/#prod-VariableDeclaration
I've been building JavaScript single page RIA's since 2007.
Ah, I didn't understand that's what you wanted. Why should -10 be 350?
Definitely a known issue on the login page, doesn't affect functionality but should have been on the issue tracker. thanks!
You should run the code and try it.
By your OWN definition, angular 2 losing backwards compatibility made it "unstable" as of 2016. It was a total rewrite. Just.... Wow.
https://github.com/zerobias/effector/tree/develop
``` case ADD_TO_CART: newCart = [...action.cart]; return Object.assign( {}, state, { cart: newCart }); case DELETE_FROM_CART: newCart = [...action.cart]; return Object.assign( {}, state, { cart: newCart }); ```
Both of which give a value to a BindingIdentifier. Care to say what we commonly call those binding identifiers? Regardless, I'm not sure what you are trying to accomplish. You clearly care more that a value is a function than I do, while I want to emphasize the name of the function. I won't convince you, and I'm going to continue to pass values around in variables, both those values that are functions and those that are not. &amp;#x200B; I believe I've expressed my viewpoint, and while you might not agree, you have everything to understand it. Is there anything you think I don't have to understand your viewpoint, regardless of whether I agree? If not, I think we've reached the "agree to disagree" part of the discussion. OTOH, if there is something you've not shared, feel free, and we can then agree to disagree. 
😂😂
The values are meant to wrap around. So if you go off the end beyond 360, it should start counting again from 0. And if you go down from 0, it should count down from 360. So start at 0, and go down 10. It should loop back up to 360, and continue counting down, to 350.
The only odd thing that struck me was that line 12(13?) of index.js was way longer than 80 characters so that hurt the readability. 
You can practice on [codewars](https://www.codewars.com/) , it's a good site.
grasshopper app :D
You are not an idiot. Since you are just getting into this, there is a lot of stuff you'd have to (initially) take on faith and/or memorize. You will most certainly understand why it is that way, just a little bit later. 
Have you tried codecademy.com? You learn the concepts interactively, and have to complete mini exercises for each chapter. This was great for me when i started to learn coding because video lessons are so boring for me.
&gt; You clearly care more that a value is a function than I do No, it's about the area where the function is created to look like an area where a function is created. That's what you're obfuscating if you make it look like the creation of a variable. That function declarations require the `function` keyword in JS shouldn't really distract you from the name. The name is right there. I mean, you're literally suggesting that "function foo ..." deemphasizes the name while "const foo ..." does the opposite. How? How does that keyword add sparkles and glitter to that identifier?
Freecodecamp.com. They're on YouTube. You are not an idiot. You are good enough. You are hard working enough. The only person that's gonna stop you is yourself. 
The biggest application for Javascript is in building websites, so most of the educational material you find will be centered around that. That will also include the technologies HTML and CSS since they are central to web design. If you just want to get a feel for coding, and aren't in particular attached to the idea of making web sites, you might want to look at taking on a different language. I'd suggest Python, actually, as a language that is commonly used, easy to learn, and useful for small projects. I can't say that I have any particular educational references to suggest to you, but there are a slew here that are supposed to be aimed at non-programmers: https://wiki.python.org/moin/BeginnersGuide/NonProgrammers
Sorry - I missed the `.sort()` when I was scrolling horizontally on mobile. My bad. Fair point that it's actually doing the sorting, but as I said: why not just do `[...arr].sort()` to get a shallow copy of the actual array that is sorted, instead of mucking about with the indices in a separate array?
`&lt;p class="a b"&gt;` vs `&lt;p class="b a"&gt;` isn't any different though...
A lot of good resources here, but I just wanna say - that confusion you feel is the learning process.
I can't figure out if the WTF moment is the app itself, or the fact that you destroyed the browser's back-button functionality...
Wow discord bots are made with JS? I keep finding stuff that's made with JS and I love it
I would extract more components into subcomponents. You have a lot of components that contain multiple groups of the same Html. Use the reusability of components
I second Python as a great language to learn on. JavaScript is extra-quirky.
Generally people do not code this way. Instead you'd write your code with normal variable names then run it through a minifier which is a program or script which will go through and convert the variable names to something smaller to save space. Functionally, the code works the same, though it ends up taking a lot less space (and loads faster) because of the reduction in characters.
Dude I'm 29 in a LaunchCode class being taught by 21-23 year olds and I have trouble grasping basic concepts of Java. Feels real bad man. All of these links that everyone posted I'm gonna have to check out myself. Much luck man!
Thank you very much. Honestly, at work everything is auto minified by webpack build. I guess I have just never sat down to look at minified JS file in the production version. Thanks again! 
It isn't unusual for things like loop counters to not get too creative, or in a very small functions with few variables, or in fortran.
if you want to get serious, take this course: https://codewithmosh.com/p/javascript-basics-for-beginners "Mosh" explains how things work pretty good :)
There’s no need to feel bad. Everyone is different, doesn’t matter how old you are. You’re trying to learn a skill, you’re doing it. Don’t worry about any one else. Keep it up pal
Fair, honestly hadn't noticed the issue going back once logged in. Logging the issue and will get it fixed. 
https://github.com/leolabs/json-autotranslate This is my first CLI tool I have written in TypeScript. It can be used to automatically translate multiple JSON files (for example from i18next) into multiple languages using different providers. I wanted to make the code as extensible as possible so more providers can be added in the future. I'd greatly appreciate any feedback.
To start using JavaScript immediately, just use your browser's developer tools. On Chrome for example, that's your breadcrumbs menu -&gt; More Tools -&gt; Developer Tools, or Ctrl + Shift + I. That will take you to your console where you can start writing and executing whatever you want. &amp;#x200B; I wouldn't worry too much about grasping online lessons. There's probably one out there that's just perfect for you. But for now just focus on becoming comfortable with the idea of typing input and understanding the output. It'll feel like driving a car for the first time, you'll always be second guessing yourself and wondering if you're doing anything right. But don't worry about making mistakes, just go and start calling functions, printing to the console, and storing variables. Eventually, those tutorials will become easier to grasp, and it won't take so much effort to follow along.
Dadgummit I'm good looking too! Oh wait, sorry! Not for me although I'm going to check that out now so thank you!
Yo I’m doing the same i just finished and AI that plays tic tac toe. 
So here are a few points: 1. Separating your UI ( vanilla JS ) and your API/server is very common. Look up JAMStack for more references to that very same architecture choice. That being said be sure to make your API endpoints accept requests from your UI app or else you'll get CORS errors because the origins don't match up. 2. JWT's are basically a single part of an authentication system. You can take a look at another answer I gave in this sub about the basics of an auth system: [https://www.reddit.com/r/javascript/comments/aid8sh/what\_is\_the\_best\_way\_to\_create\_user\_registerlogin/eemzcg4/?context=3](https://www.reddit.com/r/javascript/comments/aid8sh/what_is_the_best_way_to_create_user_registerlogin/eemzcg4/?context=3) Depending on what you're trying to accomplish, there are a few libraries that can help with auth. Just always to be sure to salt-hash your passwords, standard security procedure. 3. Since you're using MongoDB, it would be good to store the purchases of each user within the same user document. Typically you want to nest data with MongoDB rather than do references as Mongo works faster with nested data.
The code could have been minified before and at some point had to be salvaged/borrowed from a live environment using Prettify.
If you're set on JavaScript, try focusing on web development courses rather than just JavaScript. It's a weird language that people either love or hate, and it's never used by itself in real applications. Plus, I'm certain you get much more satisfaction out of web development over pure JavaScript.
Second this! You can add and follow people to to hold each other accountable feel free to follow me: mpwester. Also codefights let's you actually challenge people
WTF How about a JavaScript sorter to sort your JavaScript?
Yeah as other people have said JS is only one slice of the web development pie. Try learning HTML and CSS before moving into JS. 
yes.
This is a minified version of the code, which, in most cases, you'll see the entire code in 1 line. It makes the code way lighter to download
Thanks! 
Could you explain this? 
Sometimes it's not you who needs the training wheels but the cheap labor you hire when you're trying to grow your company. Not everyone is a savant, and most people suck at programming on teams even if they think their mid.
I learned so much about JS. Building a bot!
A few web-based places you can go to test out JavaScript practically include: * [FreeCodeCamp](https://learn.freecodecamp.org/) (Practical Learning) * [JSFiddle](https://jsfiddle.net/) (Javascript + HTML and CSS) * [Scrimba](https://scrimba.com/) (Mainly Javascript) * Browser Dev-Tools can also run JS (Hit F12 for chrome) If you want to start getting used to IDE (Integrated Development Environments) basically programs you download to code locally without needing internet access. * [Visual Studio Code](https://code.visualstudio.com/) is an amazing IDE with tones of extensions * [Brackets](http://brackets.io/) is a very simple down to earth IDE, a bit limited but very user friendly. PS: In order to set up an environment locally you need to have at least one HTML file and one JS file. The HTML file can just be named something like *index.html* and needs to contain something like this &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; &lt;script src="YOURJSFILEHERE.js"&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; Where you replace the filename to whatever you named your JS file. I usually just go for *index.js* in practice and testing environments. My personal advice is to first get used to data types and console.logs and alerts if you are just starting out :) Good luck out there my dude! 
I'm not sure why I'm having such trouble conveying my point. At this rate I do think you are approaching this in bad faith and now just trying to nit pick the words I used to score some "I'm right about this" points. I've said that Angular 2 wasn't a rewrite, but a separate framework. And I make that claim based on the fact that both of them were developed in parallel for 2 years after Angular 2 was released. That's not a rewrite. However, even if that was, Angular stood as a framework without breaking changes for 8 years. That's a lot. So again, I'm not sure what kind of "instability" people are referring too. When we get down to the crux of the matter, is just people being lazy to learn new tools to solve problems which were around the same since around 2012. &amp;#x200B; &amp;#x200B;
I see PRIDE!, I see POWER!, I see a bad mother who don't take nothing....
I agree; the hordes of java-reared grads who aren't into programming but do it as a job, they feel more comfortable with types. Even Microsoft admits that is the primary use case for ts. I always know how to get easy downvotes by reminding them of this, but someone has to speak up. If people keep repeating the false mantra, some useful person will waste untold years toiling with weaker languages and tools. 
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/u_slacker1386] [Coding for idiots?](https://www.reddit.com/r/u_Slacker1386/comments/b3j40r/coding_for_idiots/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
I believe he's talking about development overhead of dealing with static types. It's funny because static types help _teams_ build products. It's really only excessive overhead if you're the only one working on it. Even then it's not that much overhead, having an IDE and it just plugs all the types for you.
I, too, am curious how types encourage poor design patterns.
I've started using Nest recently and the only big complaint is community support is split between gitter and discord. Should choose one or the other so the community can grow and help each other out. Additionally the docs on passport and oauth being expanded to include examples of integrating oauth providers (with the built-in guards) will be great.
I’m currently using codecademy and I’m hoping you can clear some things up for me. How far were you able to get into your education with codecademy? Do you feel that it gives you all of the coding skills necessary to enter the work force? I’m finding that it does a great job of introducing concepts and syntax, as well as how the language works itself, but I wonder if I’m learning the critical thinking or application skills necessary to like... build something!
Take a look at angular2+. Absolute train wreck.
Just relax. Coding is hard and just stick with it and you will see results. 
Oh I completely agree with the fact most college grads can't see past what their IDE and teacher told them to do. I've experienced it professionally enough to know that good engineers will program how they program whereas unexperienced engineers will be dead in the water when a real challenge hit them. They think transactionally where given x they must return y. Getting from x to y is the only thing they have to think about. However, that doesn't mean types are bad in _all_ cases. Sometimes having good IDE integration is actually less context switching for the developer. At least in my experience I don't need to read the other source file to figure out what's going on. So it's a tradeoff, IntelliJ has amazing integrations with angular already and nest using essentially the same organization makes it a breeze to switch in between the two projects. Could I build it all myself with no types? Sure. 
so some feedback: - I've personally never directly used webpack just for bundling. in bigger projects I tend to utilize a framework that masks webpack completely (for example angular) and for small projects, I prefer to keep the development and deployment pipeline as minimal as possible, I simply don't use it (or anything else for that matter, maybe just rollup for small packages I want to share). so I couldn't really sympathize with "we shouldn't be forced to use webpack" - the tool proposed here REALLY looks like a pseudo bundler that is just pretty opinionated and hence doesn't/can't be configured much beyond the default functionality it provides. I cannot see how that's a benefit over webpack, which is already pretty thin and interoperable. like perhaps that's why it can seem difficult to configure webpack properly for your needs, as it is a really general purpose and thin layer in the beginning of your building/bundling/optimizing/transpiling pipeline. perhaps decomposing those different functionalities from one tool (like webpack) into several independent ones would be more beneficial than trying to replace the tool with a simpler and much much more limited one.
I use Angular, I think it's fine. It was definitely a stupidly rough start, but at least I wasn't stuck using react with a horrible license (I do know they changed it). Like I said before, these frameworks aren't for you to hack something together. They're highly organized so you learn it once and you don't need to relearn how a specific company does x or y. It's all about lowering ramp up time and increasing productivity across a team, not an individual. It's also not that unpleasant to work with Angular when you actually understand what's going on under the hood.
IDE integration may perhaps be the only clear benefit. If you don't make a myriad of types with custom members and method, and spaghetti import them all, it seldom matters ime. The bad behaviors of insufficient unit coverage, over use of oop, and non generic programming are exacerbated by types, while pure js doesn't give you the rope to hang yourself. Making generic interfaces which don't know the type of what they are hooked up to, using functional types, and opaque types allows code to simply be cleaner, easier to refactor, and more generic. Even for newbs, I would rather break the bad habits them provide tools that reinforce them. 
True, Python is easier to learn and has lots of applications, but Istill feel that Javascript is better for beginners because all you need is to open devtools in chrome or firefox. Also, most real world mini applications beginners can think of will be web applications.
Try this free and interactive book: https://eloquentjavascript.net
for Browser, but sometimes to us devs it's better and more objective when things comes in alphabetical order (although I think that it should be done at development, not when debugging)
Yeah codecademy is meant for absolute beginners. After completing the codecademy courses, you can take on imtermediate courses like the freecodecamp curriculum or, if you could pay $10-$15, udemy bootcamp courses. Then you need to start building things on your own. Once you have 2-3 solid projects in your portfolio you can apply for entry level jobs.
Van Gogh didn't start painting until his late thirties IIRC. I wouldn't fret at all - just work at your own pace, and for reasons that appeal to *you*. Forget everything else.
Thanks for the intel! The hardest part for me is deciding which path to take and I keep stalling and trying different stuff lol. Any recommendations for udemy courses? I tried Traversy Media’s courses but for the projects he seems to just do them while you follow along... not sure if that’s helpful. Also, should I do the whole Web Developement pathway in its entirety?
The stuff you learn there is very basic. To be in a position to actually be able to land a job, you have to learn much more. One post mentioned codewars.com. The challenges there are closer to real life tasks than on codecademy.
Java !== Javascript
Thanks, I’ll definitely check it out!
I'm aware. Just sharing my situation. 
There are a few benefits to Typescript in general which involve adoption of new JS features before node even has them. Decorators for example a **huge** benefit that I feel are pretty messy to do otherwise in JS. I think though the issue you're referring to isn't actually with types as much as with the abundance of shitty programmers who use types as a crutch. You can have types without strictly following OOP design patterns, just look at Haskell for example. 
&gt; that same philosophy can't be applied to the entirety of web applications That's very true, which is why I talked about *tradeoffs* rather than just *drawbacks* of SPAs. &gt; At the same time, if you want to make Blender for web, it makes perfect sense to just distribute a blob of JS/WASM for the software, makes no real sense to render your toolbars as semantic HTML server-side. That's absolutely true, with the caveat that even then there's often benefit in making the *data* in your web-app accessible and indexable because it's *amazing* how often people want to extract, parse, transform, mash-up, remix or otherwise consume the data they generate in your application in ways you never even conceived of. But yeah - it's a spectrum of use-cases, where on one extreme you've got an online JS game (which usually has little or no usefully-parseable data contained within it), and on the other extreme you've got something like wikipedia (which is almost nothing *but* useful data with some trivial UI code on top of it), and somewhere in the middle you've got something like Google Docs, which is a complex web app with a rich UI, but might also still benefit profoundly from that raw data being easily accessible, even if people typically conceptualise it as a "web app" that doesn't need to be accessible.
[JavaScript for Kids](https://nostarch.com/javascriptforkids)
I mean callbacks are gonna stop him for a while. And then he'll be fine. 
https://github.com/hamzaouiii/n26-clone
Links on additional packages are broken (missing `/packages`, maybe when changed into monorepo). Btw cool project.
If you want a way where you can write inline JS like PHP, there are a lot of templating engines out there which work for example with express.js. I'd recommend taking a look at EJS: https://ejs.co
Seems like they have a bug, I can’t get it to start. But this looks awesome- been looking for something fun for the kids to learn on, thanks for sharing!
You may want to check out /r/learnJavascript to get/give help. 
Decorators are negative imo, especially when used as annotations. We already have higher order functions in native js, it's not something ts adds. And if you want experimental features, you can get them from babel without ts.
And that stays server-side correct? If you just found a solution to this you're my favorite person. 
Yup, EJS renders server side, just like PHP ^^ 
+1 Scrimba would be good for this. I just found it a few weeks ago and tried the neural network tutorials.
I dont think they do, just the signup is a little weird looking. You have to complete the basic first one to really sign up. Try again and just be diligent looking at it.
I recommend [this](https://www.youtube.com/playlist?list=PL46F0A159EC02DF82) series of tutorials. [JSFiddle](https://jsfiddle.net/) is a great place to practice and experiment. I've been coding since I was 15. I'm 24 now. I can assure you that you are not an idiot and you are not the only one struggling. Learning to code takes time and practice. Just keep trying and practicing, and you'll get it.
I’ve had a positive experience with these two: [Swiper JS](https://idangero.us/swiper/) [Owl Carousel](https://owlcarousel2.github.io/OwlCarousel2/) 
I learned programming when I was a teenager 20 years ago and now I'm a professional independent contractor working on React Native apps. Here's the biggest secret I've learned in all of that time: &gt;!No one knows what they're doing. We all struggle. We're all idiots who stumble around until things start to make sense. Take everyone's advice here, but most importantly keep with it. You're doing great! (and please don't tell people that we don't know what we're doing, we don't want that getting out)!&lt;
I worked with Javascript for years before I really "got" it. My fav resources are: \- Codeacademy (full disclosure used to work there), their new [Phaser](https://www.codecademy.com/articles/phaser-intro) course looks really good \- simple projects at [Glitch.com](https://Glitch.com) (full disclosure I work there), you can browse them and pick one that looks cool and edit the code and run it. Like [here](https://drink-water.glitch.me/) is something fun/simple I made. I think a lot of JS is hard/not very fun because it's stuff geared towards people who use it at work. 
I second this - this book is insanely good.
I can give you 2 hints: 1. It always feels like you have no idea what is going on and will never understand, and then at one point you just get a lightbulb moment of understanding a lot in a short period 2. There are some very good courses on udemy, for JS. One is ‘Understanding the weird parts’ . It littrally shows you how some of the main concepts work. Good luck
second EJS for php/jsp/asp style templates.
I’m in my first year of SoDv (at community college lmao), but I’ve worked with c++, c#, and JavaScript now. Everyone says similar things about JS, but as a beginner I really like it. It lets me fuck up a lot, but JS still does it’s best to work with me, where c# has a aneurysm over one syntax error. Just food for thought, but I think JS is really good for beginners 
If you repeat classes often this could provide a significant latency improvement by better gzipping.
Few things that caught my attention: - Might not want to release your Source Maps to prod - Auth isn't using the state param for xsrf protection (but this is being used else where) - When in the visualizer, the only ways out are to click the track itself (not intuitive), or having to re-navigate to the root page via url (back button broken - noted in another comment) - Config webpack to remove console.logs in prod builds - Manifest isn't loading correctly (looks to be validating as the index.html page) - Consider reducing the number of return statements used in methods for readability - Consider using the fetch api instead of additional libs (axios) - unless you're aiming for more browser compatibility - Throttle browser resize events for performance If I find some more I'll make you aware of them. Good work nonetheless.
[https://github.com/blackwright/ltly](https://github.com/blackwright/ltly) &amp;#x200B; This is an audio visualizer written in React, using a Node.js back-end to stream audio. I'm mostly using it to experiment with canvas and learning three.js. It's been fun to relax after work and listen to some music while coding. Have been working on this in my free time for the last couple weeks, any feedback would be awesome!
Khan academy should have some basic stuff. 
Hi /u/Jetking27, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.