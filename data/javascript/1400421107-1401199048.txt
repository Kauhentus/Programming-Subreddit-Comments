Are you referring to the "=" instead of "=="? EDIT: sorry I just noticed the two "paper"s. Thank you.
yes, and also the logic says "if choice1 is paper, and choice2 is paper, then paper wins". that's wrong.
It works now. Thanks for your help.
no problem!
**battery-status** Information: Author: hemanth Description: Custom Polymer element for dispalying battery status. Main Language: CSS Number of Forks: 0 Number of Watchers: 0 Number of Stars: 0 
Keep it up bot.
It's more about automated namespacing. And the ability to apply styles to components from top to bottom, without thinking about complex inter-file dependencies. Inspired by: https://suitcss.github.io 
The ember inspector is awesome and super helpful. And it is only getting better. They have recently added performance information and added a promises tab so you can see the state and other useful information about the promises in your app. Also of note that there is an inspector for chrome and firefox.
Another thing that might be improved with this code is that there is no need to use an "else" clause when the result of the if statement is to return out of the function. In other words, this: if(choice1==choice2) { return "The result is a tie!"; } else if(choice1=="rock") { if(choice2=="scissors"){return "rock wins";} else{return "paper wins";} } else if(choice1=="paper"){ if(choice2=="rock"){return "paper wins";} else{return "scissors wins";} } can be simplified to this: if(choice1==choice2) { return "The result is a tie!"; } if(choice1=="rock") { if(choice2=="scissors"){return "rock wins";} return "paper wins"; } if(choice1=="paper"){ if(choice2=="rock"){return "paper wins";} return "scissors wins"; }
Can you tell us for which site this bookmarklet is meant for?
I disagree that this chart is shows JS is #3. Comparing the top three (C#, Java, and JS) you'll find similar amounts of questions on stack overflow (~640k). But for lines of code changed on GitHub, JS has *seven times* more lines changed than C# and over twice that of Java (14bn -- JS, 6bn -- Java, 2bn -- C#). Not to mention the relative scale of the two metics -- billions vs less than a million. A billion anything is usually a significant number, especially concerning things that require human effort. 
You can also just run the apps as regular webapps, so anything with a web browser can use them. And if you want to, you can have a link for FFOS and FF for Android users to install it as a native app. Coolest thing ever IMO.
ember core dev here. This is not correct. We will aim to provide inter-opt with polymer components, but will not be using polymer. We hope to embrace native web components as they land, but as our clients must ship to many browser we will continue to layer our own compatibility abstraction on top.
Inspired by this post I've written a rock paper scissors function that doesn't use if/else : function RPS (c1, c2) { if (c1 === c2) { return 'tie';} return (({ 'r':'p', 'p':'s', 's':'r' })[c1] === c2 ? c2 : c1) + ' wins' ; } console.assert( RPS('r', 'r') == 'tie', 'failed r vs. r'); console.assert( RPS('r', 'p') == 'p wins', 'failed r vs. p'); console.assert( RPS('r', 's') == 'r wins', 'failed r vs. s'); console.assert( RPS('p', 'r') == 'p wins', 'failed p vs. r'); console.assert( RPS('p', 'p') == 'tie', 'failed p vs. p'); console.assert( RPS('p', 's') == 's wins', 'failed p vs. s'); console.assert( RPS('s', 'r') == 'r wins', 'failed s vs. r'); console.assert( RPS('s', 'p') == 's wins', 'failed s vs. p'); console.assert( RPS('s', 's') == 'tie', 'failed s vs. s');
It just checks 5 different checkboxes by the looks of it. 
Angular is a good frontend framework for enterprise minded developers who are used to piles of abstractions in the name of solving problems their application doesn't have yet (and might never have)
What? How can you remove if? 
i trust more in tiobe index that this
firefox 30.0. doesn't work for me
Based on that metric ruby is more popular that c#. I think languages that are more often used to do open source development will score more highly on this metric as open source code is often stored on GitHub.
But that's much much much slower? 3 extra functions per use.
Learn how to - make hyperlinks - use developer tools in chrome or firefox, know at least what breakpoints are and how to step through code. - name your variables. Is currentTab the text in currently visible tab? The ID? The DOM element itself? 
The Youtube API: sometimes has null or undefined part of the way down the tree.
What's a good way to manage new projects? I've used ember app kit in the past but I never really liked using it. Preferably something that comes with some basic files and a gulp/grunt task config set up...
1. It iterates through 5 elements with the ids: stats_table_15_datum_1, stats_table_15_datum_2...stats_table_15_datum_5 2. Sets their 'checked' property to false 3. Clicks each of the elements 
What would a monad for my error soaking code look like? Did I do it properly in (5)? The original title for this was "Implementing Monads in JS". All I really wanted was a Maybe monad. But I couldn't find an implementation that looked nice. Have any help you could give?
Check out ember-cli. Have used it on two projects already and its been great. https://github.com/stefanpenner/ember-cli
cd with nothing switches to a subdirectory called cd
I'm on tablet so I can't really look at this now, but I made [this](http://deviouschimp.co.uk/cmd/) a while back. I've started to rewrite it and I'm [releasing the source code](https://github.com/mrchimp/cmd) for each bit as I go.
Thanks man. Also your verge module has been incredibly useful for a number of my projects; really appreciate your work.
 Yes, it's not necessarily something you would *want* to do in Javascript in everyday use, but it illustrates the concept of how you can remove "if". In a pure functional language everything is a function and function application is very fast. There's no need to build keywords like "if" and "for" into the language because you can implement any control structure you like using functions. So why would you want to do this? Asynchronous requests are one example. You don't write code like this: if (make_a_server_request(url)) { // Yay! we got some data from the server } else { // Oh noes! } because it requires the code to block until `make_a_server_request(url)` has completed and returned a true/false value. Instead you have a function which encapsulates the concept of an if/else control like this: make_a_server_request( url, function() { // success function }, function() { // failure function } ); It makes a request to some `url` and then it calls the first function if the request returns a successful response. Otherwise it calls the second function. In cases like this, the argument about whether it's more or less efficient than an if/else is immaterial. You can make millions of function calls in the time your code would otherwise spend waiting for a response across the network. 
Damn, two Ember core team members hanging out in /r/javascript? Please stick around y'all, we could do with a little variety from the regular angular/jQuery stuff 
Nested optional properties.
Rule #1: Never trust data, even if you can trust data.
I disagree. You never know how someone might (incorrectly) call one of your functions. You should either throw an exception if a particular scenario is not allowable or you should explicitly allow it. If you do neither (leave the code to throw an unhandled exception), then people reading your code have no idea what the desired result of your code is (whether it is supposed to throw an error or if it is supposed to ignore it and move on). That ambiguity makes your code harder to read and understand.
Pretty late to the party but wanted to add a couple of things: In most "normal" cases for apps you can get a mobile web application to perform as well as native. The problem is, youve got to understand and study a whole bunch of stuff to get this to happen about numerous different web views on different phones. You've really got to get into the implementation details of the browsers to get the most bang for your buck. However, it is possible, and based on what I've seen from the newest Samsung and Iphones we are probably looking at being just fine for the most common uses cases by the next generation imo. That being said, one major issue is that (while I hate to admit this) I find the IPhone 5s stills beats the Samsung galaxy s5 when it comes to rendering any remotely complex css 3 transforms (obviously with their respective dominant browsers). But then there is a further caveat: when you install a home screen app on Android you get the full chromium browser. On ios you get a significantly worse web view than safari with 4x slower performance (based on recent tests). It's definitely still possible to match native and that is my main focus in my work but it takes a lot of work. I still wholeheartedly believe the browsers and hardware will get to a point where none of this matters in the next 2 to 3 years and the Web platform will become the default development stack for all apps at that point. We just aren't quite there. Especially after the Oracle situation, I wonder if Google may start using even harder for this. Also, Microsoft is adding Cordova support directly to visual studio and I think that is a good sign winjs is going to become less important (kind of weird they went a separate route to begin with).
Here is a quick fix: http://codepen.io/anon/pen/jpFsv
A lot of cool things seem possible with THREE.js: http://learningthreejs.com/blog/2013/04/30/closing-the-gap-between-html-and-webgl/. It allows rendering of DOM elements to planes, which can be rendered in a 3D space. Also: very nice project. I'm impressed by a lot of the functionality, but mainly by the speed and responsiveness of the GUI. It's difficult to tell that the whole WM and the applications are running in a browser!
Thanks this looks cool, sold.
This looks great!
I'm using [Ember.js Generator](https://github.com/yeoman/generator-ember). Generating new files isn't that great, but the initial grunt setup is very good.
Give http://yeoman.io/ a try https://github.com/yeoman/generator-ember
meanwhile angular-batarang is still broken as hell :/
Yeah. Lots of cool stuff to do with THREE.js. I've been messing around with it now and then :) Maybe I should fork the WM-application and create an experimental package to choose from... hmm! Thanks! One of the goals was to make it really responsive and feel like a normal WM.
Nice, this is really well done :)
Thanks for checking it out! I'm not quite happy about the syntax though. Would rather not abuse a property to pass CSS to the component. Perhaps a mixin solution would make it more practical to use. Also the performance penalties are unknown. Guess I should create a more complex demo with thousands of nodes to find out.
All the browsers that you probably care about support it. But not all browsers support it because time. 
Nice effort. The coolest online command prompt I have seen is [cmd.fm](cmd.fm)
Great, I believe it checks through 4 only, but now I understand it all. Thanks
WebAPI?
Figured semantics wouldn't be an issue (Unless there is a instanceOf?). Edited the post to have proper syntax.
I've never heard of instanceOf. Just tried it and its throwing a javascript error. What does it do?
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof var s = new String("a,a") s instanceof String // true var a = 'A' a instanceof String //false Looks like instanceof only works if you go through the constructor. Doesn't work for literals. More info: http://stackoverflow.com/questions/203739/why-does-instanceof-return-false-for-some-literals/203757#203757 
 &gt;&gt;&gt; '' instanceof String false &gt;&gt;&gt; new String() instanceof String true &gt;&gt;&gt; 5 instanceof Number false &gt;&gt;&gt; new Number() instanceof Number true The problem is that JavaScript exposes some of its wrapper machinery. That was clearly a mistake. There is no point in doing that. Well, it's way to late to fix that. It was already way too late 10 years ago. Other languages (e.g. Dart) completely avoid this problem by making everything an object. From the user's side, everything looks and behaves like an object. It's a lot simpler that way. Here is another popular example: &gt;&gt;&gt; var x = 'asdf' undefined &gt;&gt;&gt; x.foo = 'bar'; "bar" &gt;&gt;&gt; x.foo undefined &gt;&gt;&gt; var y = new String('asdf'); undefined &gt;&gt;&gt; y.foo = 'bar'; "bar" &gt;&gt;&gt; y.foo "bar" The "x.foo = 'bar'" is actually a no-op. Essentially, it's the same as: (new String(x)).foo = 'bar' That is, a new `String` (wrapper) object is created, its "foo" property is set to "bar", and then this wrapper object is discarded. That's why "x.foo" in next line is `undefined`.
&gt; List of completely unrelated jQuery plugins we posted so we can generate ad revenue FTFY
Thanks, how would I make this code check through stats_table_15_datum_X first the apply the c.checked = false and c.click(). Since sometimes there will be more than 4 elements.
One more thing. How would I make this code check through stats_table_15_datum_X first the apply the c.checked = false and c.click(). Since sometimes there will be more than 4 elements.
That is an awesome answer with a great explanation. Thank you for the knowledge.
Thanks for the reference. This is a slightly confusing little caveat.
Agreed. I didn't believe it at first. I've never used instanceof though. Look for Crockford's recommendation on testing object type, I think he's got some model code on his site somewhere. 
Strings is an object where is "string" in JS native string data type. Read more here https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#Distinction_between_string_primitives_and_String_objects And thanks OP for asking this question, I could guess the reason but was not very much sure. :-)
&gt; I love javascript but not in the least for it being kind of horrible in it's design. Not a JS Ninja but looking at current state of JS this is wrong statement to make. 
and we are talking about jQuery plugins after all, so 80% are guaranteed not to work or have crippling bugs. 
Well another perspective is that JavaScript strings aren't objects. &gt; typeof "a,a" "string" &gt; typeof new String() "object" 
Been holding off on learning EmberJS until I read this article, and the fact that it was posted by a core member. 
Hi everybody. I'm the guy that wrote the tutorial. If you have any comments/recommendations then please feel free to create issues on the GitHub issue tracker (or just reply to this comment). GH issue tracker is located here: https://github.com/LeviBotelho/LearnAngular
Demo URL http://hemanth.github.io/web-components/about-me/index.html
Yup, I actually figured it out a bit after posting. There were two problems, as it turned out. The one you pointed out affected both `CSSTransitionGroup` and `TransitionGroup`. The other was that with `TransitionGroup`, the very next level element will be the one with the `componentWill`/`componentDid` functions, regardless of what's actually being added or removed. So when my list component maps the state data and returns return &lt;div onClick={this.handleDel.bind(this,i)}&gt; &lt;item key={i}&gt;{t}&lt;/item&gt; &lt;/div&gt;; The next child is a `&lt;div&gt;`, not the `&lt;item&gt;` that I'm looking to transition. Thanks for taking a look!
This thread has been linked to from elsewhere on reddit. - [/r/Meteor] [Why don&amp;#x27;t I see meteor.js everywhere? : javascript](http://np.reddit.com/r/Meteor/comments/25xapt/why_dont_i_see_meteorjs_everywhere_javascript/) *^Respect ^the ^rules ^of ^reddit: ^don't ^vote ^or ^comment ^on ^linked ^threads. ^Questions? [^Message ^me ^here.](http://www.reddit.com/message/compose?to=%2Fr%2Fmeta_bot_mailbag)* 
Actually I think scoped indeed does the same, but the browser support for scoped isn't great.
I've been really into Meteor for a while, was all "why don't everyone use it for everything?" about it. But when making real things with it you'll run into roadblocks. Like any complex and magical framework, if you step outside of what it's meant for you're fucked. You have A LOT of complexity to deal with then. Adding authentication is easy as a command and 2 LOC, but if you wanna have something that has not been created, and have it work in the Meteor way, you're in for a world of trouble. This is the problem with frameworks in general. I used to be a framework fanboy when I was less experienced, because with them I could make things I otherwise was unable to. But after being burned in the borders of frameworks, I've come to realise you'll get more done in the long run if you learn to really write code, and to use libraries giving you small, stable functionalities. So if I was about to start making a big web app project now, I'd skip Angular, Ember and Meteor. They give a lot of nice things, but if you try to make your own things you're screwed. I'd go with React.js (or om) to get the reactivity of Meteor. Designing models and controllers is really something you can do yourself, it's not magic! Then just set up a database, hook a node.js app to it (the backend can be really small - it just has rest or web socket endpoints). More work upfront, but you'll be much more free. It really pays off, and you will have a deeper understanding of what's going on. But have to admit the data synchronisation in meteor is pretty sweet...
did I miss the point where the language got a sound namespace system, cross-browser fast arrays, class-based inheritance, non-landmine usage of "this"?
If you wanted to check for more than 4 elements, you could: 1) Increase the number 5 to something a lot higher (say 999) - not the most ideal solution as it could be quite slow. 2) Apply a class to the elements so that you can more easily get at those specific elements, then you'd be able to use document.getElementsByClassName
This isn't even Javascript. The whole thing is rife with syntax errors. You might want to take a look [at this tutorial](http://www.codecademy.com/) and work from the top. Also, don't post this sort of borderline-homophobic stuff.
&gt; What is wrong with my code? Everything.
Sorry, inside joke with friend.
How do you reduce the servers on aws? Don't sticky sessions make transferring users between servers messy? 
I think you're being a little over-sensitive, it's pretty obvious it's a joke. If anything you should be mentioning the fact that this is some of the worst Javascript ever.
I think what you want is: var aString = "Lars is gay"; var bString = "Lars is gay"; if (aString == bString) { document.write("Lars is definitely gay."); }
Well to JS's defense I think it improves a lot performance to get ints/strings unboxed and I'm not sure how hard it would be to do unboxing analysis on that.
Ummmmm. Its a bit hard to share data between different models/controllers. The default directory structure has you dump all of your controllers, models, views etc into the same place, so you can group them. You can get around that though by using Modular Extensions or something like that, google it and you should be able to find it. I find that the Caching in it, basically doesnt work. The whole framework is not even supported anymore. I have used Symfony2 aswell and theres just no comparison. I swear CodeIgniter almost has no DependendencyInjection or notion of services. Actually you can use hooks, but they do just feel a bit hacky and not very powerfull. They feel pretty isolated from everything else.
Yeah, sorry, that's my bad. I haven't updated the README in a long time; I'll do so right now. Thanks for the nudge. ;) *EDIT*: Updated! https://github.com/emberjs/data
Could you provide some code to help us see what the issue might be? What framework are you using, phonegap/cordova? 
Thank you!
No framework, the site is built on Rails and jquery mobile. there is just one of these bad boys in there: &lt;link rel="apple-touch-startup-image" href="splash-screen-320x460.png" media="(device-width: 320px) and (device-height: 480px) and (-webkit-device-pixel-ratio: 1)" /&gt; and a jquery get request in the form of: $('#index').on("pageshow",function() { $.get("/reservations/index", function(data, status) { $('#cnt').html(data).trigger('create'); if (status == "success") { $('#loading').hide(); } }); });
Is it a pure webapp (webpage added to homescreen) or is it with cordova? Have you tried wrapping the ajax function in document.ready? If it's a webapp you can look into using a cache manifest to store static resources on the client (ios device) to speed up the loading a bit.
Have you tried to use ready instead of pageshow?
Number 2 seems like it would still require number 1 and the loop to use document.getElementById("stats_table_15_datum_X").className = " MyClass"; then use document.getElementsByClassName etc. I have implemented 1) and it seems to be working fine for now. Thanks
So, you're explicitly hiding the loading screen (which I assume is the "splash screen") until all of the resources have loaded. Isn't it therefore working as designed? If you want to hide the screen earlier why not do `$('#loading').hide()` before the `get`? And stick a little throbber inside the `#cnt` element. It'll have exactly the same latency but it'll be perceptually less.
Thanks for the answer, it's not the answer I wanted but I appreciate. Even though you've tollen me there's no way of get #2, is there any way of trigger an event to simulate a physical interaction?
Oops, that loading.hide hides a progress bar type thing, unrelated to the splash screen. 
Funny issue is that when you remove the splash screen from the site, everyone who already has saved it to their homescreen seem to keep a cached copy of it, thus rendering its removal ineffective. Also somewhere between loading javascript and executing asynchronous calls would be nice....
String primitives are immutable and not an instance of any class. They are coerced into objects for the purposes of calling String.prototype methods (e.g., .replace(), .indexOf(), etc.). When you coerce the primitive into an object, it uses the String constructor which is why you see [object String].
Unfortunately the best workaround for #2 was in the link you provided. Basically you listen for any touch event on the document body and queue up the audio you want to play later.
Thanks! That was really the only hard part. There's already an Oculus Rift effect available that takes care of the stereoscopic rendering and distortion.
Fluxbox is [already a window manager](http://fluxbox.org/).
I am guessing you don't really use Meteor much. The 'official testing framework' is partially being pushed off because they would love to see something come from the community. There is a new package called velocity which is creating a test runner that all the frameworks can utilize and standardize around. Meteor now has jasmine-unit, mocha-web, cucumber, laika, etc. Perhaps I am biased, though, as I am writing the http://testingmeteor.com book.
I think the biggest problem right now is that it isn't 1.0. Most people are hesitant to get involved in something early, it usually requires you to really roll up your sleeves and dig into code because docs might be sparse. The docs for meteor are pretty good. I imagine you will start hearing a lot more about Meteor.js this week, let's just call that a hunch that I have *now*
&gt; Like tying everything to mongo for instance. Time, or the community, will change that. Mongo was a starting point, and I think it is a great one for doing RAD.
The meteor command is just a wrapper, it is still node + fibers.
We've built around 25 apps for customers using Meteor.js and all of they have been happy with it so far.
React is probably taken too:) Disclaimer, am not the author.
It's the default at work, and it gives me the flying irrits. 
http://eloquentjavascript.net/
It seems like an odd choice for a default workplace WM. Is there a reason behind the decision?
To be quite honest, I am dubious of accepting any proclaimed generic solution from a company like Facebook whose day-to-day realities are so different from the rest of the industry. For example, Facebook has invested significant energy into optimizing and improving PHP, which works terrifically for them I'm sure, but is not something I would ever use. React is the same way. React is clearly optimized for the case where you have many different teams working on features and you have to consume an API that you have no control over. People like React because it is very easy to learn, but it isn't solving any novel problems. It was the same with Backbone; think about how much people loved Backbone and thought that Angular/Ember were too monolithic/confusing. The same will happen to React soon enough as people realize how limited it is.
Ahh yes of course. I never really made up my mind about that syntax. Is it really a best practice? I've heard arguments for and against.
I recommend **Head First JavaScript Programming** by Eric Freeman and Elisabeth Robson. I just read it, and it is excellent for newbies. I'm so glad that I read it.
I've been keeping a very close ear on the Angular community, attending ng-conf and a few other conferences, reading blogs, listening to Javascript Jabber and taking courses on Pluralsight, and the consensus lately is that everyone has switched to teaching and using it that way. I honestly am not 100% sure or sold on the why, but if the top guys are saying it's the way to go I'm starting to implement it on my newer projects and seeing if I can figure out the benefits!
I forgot to mention that it is a good idea to learn the fundamentals of HTML and CSS before learning JavaScript. **HTML and CSS: Design and Build Websites** by Jon Duckett is a great introduction. Although I haven't read it, **Head First HTML with CSS &amp; XHTML** got great reviews on Amazon, and it is also by Eric Freeman and Elisabeth Robson. Their JavaScript book was so good that I'm guessing that their HTML/CSS book is excellent as well.
&gt; Taking the chat module example, you click on it, and not only does it update the chat module controller but it also must update the unread notifications. Therefore your chat module controller is either reaching out the other controller or, more likely, the other view to update it. This is the crazy flow of data they were talking about: data flowing both in and out of components. This is false...the way to properly handle one controller needing to speak to another is via a message bus. [Postal.js](https://github.com/postaljs/postal.js) is one such library I use to great success on many different projects for just this purpose. Some libraries include a message bus out of the box, like Angular and Ember (although sometimes they are a bit limiting). But my point is there are many options and ways of decoupling controllers that need to 'speak' to one another. I need to take a closer look at react, I am not writing it off...but facebooks reasoning behind why MVC is broken has been ill-informed and mostly incorrect from what I have seen. Sure, pure MVC doesn't map to real world applications these days..but no one uses a pure MVC implementation.
&gt; For example, Facebook has invested significant energy into optimizing and improving PHP, which works terrifically for them I'm sure, but is not something I would ever use. They are running all of the popular frameworks and their unit tests through the new runtime. If it can gain enough maturity and prove its reliability (in addition to the speed improvements), then I think it would be prudent to take a look and see if it is worth deploying. &gt; React is the same way. React is clearly optimized for the case where you have many different teams working on features and you have to consume an API that you have no control over. Honestly that doesn't sound too far off from a normal developers day-to-day. Other than the no control over the API aspect...and in reality that isn't what makes react worth looking at. &gt; People like React because it is very easy to learn, but it isn't solving any novel problems. It was the same with Backbone; think about how much people loved Backbone and thought that Angular/Ember were too monolithic/confusing. The same will happen to React soon enough as people realize how limited it is. The problems react is *trying* to solve is an ongoing issue...building complex apps in a maintainable manner. Also, people still regularly use backbone. As far as react being limited...have you built a large app with it? How do you know? **Note:** I honestly am not really a fan of react, although I havent tried to use it in any serious manner...however I feel it is important to take a balanced view until I have given it a fair try. I can't tell you the number of times I have hated something initially...only to find out I liked it after giving it a fair shot...I would urge you to hold off on your prejudices.
Thanks a lot, gonna definitely take a look at those
Event delegation is certainly a way to solve this issue. While I've never seen it implemented very well in Angular, as $watch can be really expensive and not something you want throw around willy-nilly, or Ember, though I must confess I haven't combed through many projects, this is a very common and well used paradigm in Backbone. You're correct that you can get around these issues that Facebook has identified using some varying techniques; I simply wanted to give some context of what Facebook made those assertions and why Flux could be a valid direction to go in.
Are you using the Ionic Framework by chance? I've been using it doing prototypes lately and it seems pretty good. Still in "Beta" though so maybe not good for production apps.
Looking at the source code for some of the examples bring me to the question of... what is jsx, and the answer is straightforward when I Google it, but how common is this, and how new? 
The project has been renamed and all the links updated. I should do better research ahead of time in the future. :)
http://facebook.github.io/react/docs/jsx-in-depth.html
nice - I have bumped up against this before. Wonder if there is a way to run v8 without cutting out variables in any functions for debugging
So it's pretty much taken off with react? I found a similar page via google, I just wasn't sure if this was a react specific thing (the first google result is a page with no apparent ties to react), or if it's used in other libraries/frameworks - I've only personally used Backbone, Angular and Knockout, and react does look interesting. edit: Found this quote: &gt;React and JSX are independent technologies, but JSX was primarily built with React in mind. Interesting, the site [here](http://jsx.github.io/) doesn't seem to even have mention of react. Anyway, thanks for the link. edit2: I dug a bit, but it looks like these are two [different projects](https://github.com/jsx/JSX/issues/305). Interesting to learn about DeNA though, pretty large company. 
No, I am not but now I am thinking to give it a try. Thank you for pointing me at it.
This is happening because the buttons click event is not waiting for the onsuccess event to complete. Meaning, the click event already fired (hence, the localUser var is empty). Set a console.log() inside the click event and the onsuccess event, you'll notice the order in which they are called. Edit: http://jsfiddle.net/VZK3N/3/ Edit2: besides, if you read [this bit here](http://www.html5rocks.com/en/tutorials/indexeddb/todo/#toc-transactions) it says: "*In the majority of cases where you are using Indexed Database you will be using the Asynchronous API. The Asynchronous API is a non-blocking system and as such will not get data through return values, but rather will get data delivered to a defined callback function.*"
&gt; React is the same way. React is clearly optimized for the case where you have many different teams working on features and you have to consume an API that you have no control over. Having actually built things with React, I have to say - it makes creating rich interfaces an absolute pleasure.
The "bible" of javascript is typically considered to be the Crockford book "Javascript: The Good Parts", but it is mostly a reference. If you already know C it may be good enough, otherwise try the other recommendations first.
&gt; People like React because it is very easy to learn, but it isn't solving any novel problems. It was the same with Backbone; think about how much people loved Backbone and thought that Angular/Ember were too monolithic/confusing. The same will happen to React soon enough as people realize how limited it is. Another important point is that Backbone was not revolutionary in terms of the programming paradigms it espoused when it came out, whereas React brings many original ideas to the traditional posse of template-based, data-binding oriented frameworks. I don't quite understand what you mean by "limiting developers". If anything, React imposes less limits and restrictions something such as Ember (which is clearly opinionated in many areas). &gt; To be quite honest, I am dubious of accepting any proclaimed generic solution from a company like Facebook whose day-to-day realities are so different from the rest of the industry. As much as I dislike Facebook as a corporation, some of Facebook's open source projects (hhvm, React) are well-thought out and a joy to use. It's also prudent to point out that React is widely used at Instagram as well, which maintains some level of autonomy from Facebook.
I believe that the general recommendation for serving static assets in a production app is to use nginx or something similar, along with node for anything dynamic/apis. Never deployed a node backend before, however, so I can't speak from experience.
What javascript framework would you recommend to a newbie like me? There are tons of frameworks and I'm confused what to choose.
It's just about semantics. Under the hood, the engine can do whatever it wants. So, if there is a line like "int x = 5", it doesn't actually need to create an object. What makes this stuff messy in JavaScript is the ability to add/remove properties of objects at any time and in any place. In Dart, all objects are "[sealed](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal)" and ints/strings/etc are "[frozen](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze)". This makes optimizations a lot easier and it also makes runtime performance more predictable since there aren't any clever heuristics you can break. Object.seal() and Object.freeze() are unfortunately rather recent additions (ES5). So, it wouldn't have made much sense if "primitives" behaved like that. Well, hindsight is 20/20. Anyhow, as Dart has shown, making everything an object (from the user's point of view) can be easily just as fast as whatever the heck JavaScript is doing. https://www.dartlang.org/performance/
Can't wait to download JavaScript! This article is garbage.
[JavaScript Garden](http://bonsaiden.github.io/JavaScript-Garden/) is a great overview of the language and talks about many of JavaScript's "gotchas". It's similar to (but less in depth than) Crockford's [The Good Parts](http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742).
I wouldn't suggest any yet. You need to get comfortable with the language before you load a framework on top of it. If you start adding them on before you understand how they work on top of JavaScript, you'll only become confused and frustrated. For example, take the following code: &lt;!doctype html&gt; &lt;html lang="en"&gt; &lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Stuff&lt;/title&gt; &lt;script type="text/javascript"&gt; function displayArrayInfo () { var newArray = [1, 2, 3, 4, 5, 6, 7]; var displayElement = document.getElementByID('textDisplay'); for(var i = 0; i &lt; newArray.length; i++;) { if(newArray[i] === 4) { displayElement.innerHTML = newArray[i]; } else { displayElement.appendChild(newArray[i]); } } } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;button onclick="displayArrayInfo();"&gt;CLICK ME&lt;/button&gt; &lt;div id="textDisplay"&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; If you are capable of understanding exactly what that code will do, without needing to break it down completely line by line, then I'd say you're fairly close to understanding JavaScript enough to start incorporating frameworks. If that's the case, I would suggest jQuery due to its enormous user base and the millions of resources out there to learn more about it.
Oh really? Really good to know in that case! Maybe I'll get around to changing the lessons to adopt the "as" pattern at some point in time...
This looks really interesting. Do you have any experience using it? What were your opinions on it? I'm gonna check it out but I found it ironic that they are trying to teach good Web design but their own Web page wasn't responsive on my phone. 
I guess, not sure why you would want to do that, there are better servers, like nginx, for that. 
That's quick! 
I'm actually an employee of the company. With that being said my experience with the framework is not too extensive... I mostly work on tooling and automation. That being said I can get the developers of the framework itself in here to answer any questions
Awesome, and thank you very much for contributing to the community by doing this course, without people like you, I and many others would not only be scrambling trying learn things, we would also probably be making less money. Much appreciated!
Not that I've built anything big with React, but I've studied its methodology thoroughly. I think the one thing that makes their approach unique and pleasant, is the fact that when you embed one component in another simply by writing a tag in JSX, you're *really* embedding the component including all its templating, event handlers and state logic. It percepts and feels just like a simple DOM insertion, but hidden in that elegance are much more possibilities... Without complex wires back and forth all over the place. No, just top-down.
Thanks for the information. I don't really know too much about most of the platforms you mentioned (Ember, Backbone, etc.) so I'll have to check it out.
Perfect, thank you!
I've been developing a widget for it, and I like it a lot. Before actually using it I was like, yeah this is probably great for games and phonegap apps but I might not end up using it with regularity. But after actually playing with it, I realized it is WILDLY powerful. Their structure keeps everything pretty neat, and the Context-&gt;Modifier-&gt;Surface pattern is lovely. The input and event systems are really nice too, and they take care of a lot of the bullshit that makes writing performant, impressive UI a pain in the ass. I can't wait to give the angular integration a spin. Looks bananas.
Am I the only one who thinks the scroll bounce-back even on desktop is a bit much? I mean, I get the point on iPhones, but on my desktop it was not very smooth, and just seemed like a 'hey we can do this' thing. 
Head over to http://www.reddit.com/r/learnjavascript where you can get started with a study group (there's one going on right now with assignments/reading material, etc). There's a great help network over there too, for anything you have trouble with. 
Scroll is pretty janky on iPhone 5s. Opening the menu and closing it makes the inner frame go white. Scroll bar cuts off header text. Otherwise.. Good to see it open source. 
It'd be great to see a repo containing a sample app with some of these ideas.
I'm sure it's possible to write a standalone Flux implementation. ~~I'd love to see it as well.~~ edit: so Fluxxor *is* standalone. Maybe 2014 will be the year of Flux frameworks! Fluxular, Backflux, Fluxber. So much wow, can't wait.
indeed. I just pulled up this thread because I'm making a chat bot with a bunch of commands, I'd rather not have a gigantic switch to have to deal with later
The mixins take React as a parameter, but otherwise the library works fine without React. I should make this clearer in the docs. [Edit] I've updated the installation page and the FAQ to mention explicitly that React is not required.
Wow, that scrollbar replacement is terrible. It adds acceleration on top of native acceleration, effectively deciding to jump to the bottom of the page if I scroll too fast. The bounce-back effect throws the content off-screen - far exceeding any "momentum" I had scrolling - then makes me wait for it to animate back in. And they even show me a fake scrollbar that is utterly unresponsive to clicks. Really not a good first impression for that framework.
I would give it a chance. I started rebuilding a plugin using famo.us and it really is wildly powerful. That scrolling either shouldn't be a scrollview, or should have its physics tweaked.
It's a lot of fun to develop with, but I've found it tricky to actually deploy. It's also a bit of a chicken and egg thing - without any big, complex, proven apps running Meteor, it's hard to feel confident enough in it to invest the time developing big and complex apps. I'd definitely like to though, and hope to soon.
You can, but it's overkill.
I think most beginners find it easier to learn in the browser simply because you can use the debugger to see the code execute without any additional hoops to jump through. But I think you will learn more about JS by building your own apps using little components instead of a monolithic framework. I'm self-taught, and I learned the most from building applications from the ground up than with a framework.
`typeof` is the better operator, but if you are using `new String()` objects for some ungodly reason, see how lodash detects them: https://github.com/lodash/lodash/blob/2.4.1/dist/lodash.compat.js#L2899 ...but yes, Javascript is drunk.
You may want to look at "Express Static Middleware". It's very easy to setup and you can add other middleware to control things like compression, caching, and CORS headers.
Even without syntax errors, this code doesn't really work.
Take the Javascript route on Code School. In order.
Even if ithat variable (in this case `thing`) is used throughout the code, if it's not used in the optimized function (in this case `go`) then you won't be able to access
You're right, I shouldn't judge the whole based on one module. I guess I'm just speaking from the perspective that if I made a framework and wanted to promote it, I'd be embarrassed if my website weren't perfect. But I never do understand JS-controlled scrolling. Scrolling is messy as hell - every mouse wheel spaces clicks differently, some don't click at all, then you have touchpad scrolling and swiping on phones. You even have freaking scrolling with your eyes. And we've dealt with it by giving users (per-device) driver configuration of speed and acceleration, OS configuration of speed and acceleration, *browser* configuration of speed and acceleration and other even fancier factors ... it's a long, messy chain of configuration, and all of it is meant to seek to an arbitrary position on a page, *not* to pass a command to a script. Controlling scrolling with JS is outright fighting with the user's input methods. Edit: edited my comment to be clear I'm talking about controlling scrolling, not reacting to it. I don't see anything wrong with reacting to the scroll position.
I'm on Chrome in Linux and attempting to use this website is so frustrating. Between the JS-based scrolling on the landing page that doesn't respond to click events, the janky bounce-back animations at the bottom and top of the page, and the complete lack of any scrollbars for some of the other pages, it's a bit of a turnoff to the framework. If you hijack tried and true user input methods, they should be much better than the native implementation. Otherwise, what's the point?
Mobile menu breaks when you click in more than 2 times. Looks like no one even attempted to do responsive styles as it is all clipped at mobile height. Can barely scroll due to the hijacking. After 15 seconds I've now lost interest in famous.
http://famo.us/integrations/angular/
You know, the way that this has been balyhoo'd for the last two years, that they'd completely reimplemented *everything* and revolutionized *everything* and discarded the DOM for their own home brewed approach -- well, this first public demo is pretty unimpressive. I'm sure it has qualities and I'm sure it's developer friendly. But the demos aren't particularly hot. And for all I've heard over the last two years, I expected them to be amazing.
are you out of your mind? bleeding-edge hipster tech is not what a beginner should be working on.
You can use node.js for desktop apps! https://github.com/atom/atom-shell/releases
don't bother. ignore everything in this guy's post. go learn some plain vanilla JS in the browser.
Hi jmatjs, this library shows lots of real promise, effort, and a lot of bugs! I'm not sure how open you are to bugfixes considering there are no tests. I'll try and send you a patch soon, but here's some of the issues I'm having difficulty figuring out from my notes: Jmat.Complex.doSummation: i is not defined Jmat.Complex.doProduct: i is not defined Jmat.Complex.polylog: final return: 'return Jmat.Complex(NaN);' is unreachable due to an if else chain ending with an else containing a return. I am unsure how you wish to proceed there. Jmat.Complex.gamma_inv: 'x' may not have been initialized before the first expression. &lt;- JSHint missed this one or regards it as acceptable. Jmat.Complex.incbeta: Room for refactoring in my opinion. Variables r and result are declared but uninitialized, but n is declared and initialized n to 0, *then within the loop*, checking if n == 0 (which only happens once), assigning r and result, then checking if n == 0 29 more times to default to else when it cannot happen. Maybe move the n=0 action outside of loop and start loop at n=1 if r.eqr(0) is false.
I recommend writing in parallel, C &amp; JavaScript . Write a random number function in C, the write it in JavaScript. So on and so forth. You'll hit road blocks, but it maybe a good exercise
I was wondering, where are the credits for the applications you copied in the demos ?
I would recommend doing katas on codewars.com first. It's free and you can learn a lot from solutions by other, advanced users. Edit: I will provide you with a link that will give me fake internet points on this site: www.codewars.com/r/6hs8bQ Enjoy ;)
Maybe you can find some pointers here [http://wiki.s5project.org/HTML_slideshow_tools](http://wiki.s5project.org/HTML_slideshow_tools)
Also [http://meyerweb.com/eric/tools/s5/](http://meyerweb.com/eric/tools/s5/)
Haven't looked at the source but the load time is crazy. I reckon if you put all the pngs in a sprite you'll greatly improve the experience for users :)
I personally have used the slider called Flexslider. It is open source and has many options. http://www.woothemes.com/flexslider/
There's actually an example of this in the main React repository: https://github.com/facebook/react/tree/master/examples/todomvc-flux/
You are being really patronizing to the original poster. He or she asked about the best platforms to get started with—you are like a grandparent who comes in the night and wants to warm the baby up with a blanket but instead smothers it to death.
Mootools is awesome. I much prefer it to jQuery. ...it's too bad I never get a chance to use it. So many things depend on jQuery, or are compatible with jQuery that I can rarely justify using Mootools over it. :(
Substack likes to keep the API simple (which i support). The new plugin interface is more than powerful enough for tools like minifify. Also, minification is slowish, and adds a pretty big dependency (uglify) to browserify.
You're the type of person who'll drop a baby into the middle of the ocean via helicopter to teach it how to swim...
Nice! I tried it out, and it had that addictive "I have to get all of the things" quality to it. Only thing i found for polishing were a couple of typo's, or at least I assume so. I'll list the ones I found here. The achievement to "Sell exactly 500 Seal Crystals." says seal instead of sea. When selling all the basic ores the button does not say it excludes diamonds, even though it does. Also, the donation list includes someone who donated a grand total of zero crystals, though I think that might be you, so maybe it's intentional. Anyways, nice stuff, and the code seems quite clean, it was at least fairly easy to console cheat:)
Agreed. Chrome on linux here. Scrolling was awful, closed the tab after 10 seconds of laggy, jumpy content. Lost conversion here. First impressions last.
A web server or cordova? It's just a javascript library.
ahah it's all client side so I can't control cheating :P Thanks for playing :)
ahaha ruin the fun much :)
Yeah, It isn't really what I expected. I have been skeptical about it for a long time, but I still expected to be somewhat impressed by the demos. Remains to see what people build with it.
I haven't touched MooTools in 8 years. I assume it has changed a lot. What do you like about it?
If you want to make a simple static website with a node backend, I'd recommend using express, jade, and node-sass. Obviously none these are *needed*, but if you are going to the trouble of making a node backend you might as well learn these easy/common tools. Express is a simple webserver framework for node that really simplifies the process of handling requests and serving files. Jade is a language that compiles into html. It's usually shorter to write, gets turned into valid, minified html code, and is pretty easy to learn. node-sass is a node module that compiles .scss files into .css files you can use on your website.
The scrolling was so slow for be I gave up trying to get to the bottom of the page. Attempting to grab the handle manually just selected the whole page as text.
Are there any demos that can actually show me what this is all about and convince me it as any utility? I'll be honest, at this point I've seen a couple of very simple examples that ran slow with lots of rendering errors and might have been moderately interesting as a graphics demo 25 years ago on my Amiga - if they actually worked properly. As an example, the scrolling on your homepage barely worked. Moving my mousewheel resulted in the page moving very slowly a few pixels, and then occasionally jumping all over the place. I couldn't grab the scroll bar itself to drag, and attempting to so resulted in the entire page being selected as text - after which it completely stopped responding to input. After two years of hype and self promotion I was expecting something that was at least polished. If you can't make your *homepage* work using this platform, why should I? I want to believe, but I simply cannot see this as anything but a buggy useless layer of bloat that adds nothing. Convince me why I should use this instead of writing native code? 
This is worth reading if you want to get into nodejs https://www.paypal-engineering.com/2013/11/22/node-js-at-paypal/, tl;dr, paypal moved to nodejs from Java. So yes, you can have nodejs fir everything. But your problem might have some other easy solution.
Effective Javascript is the book to get, but only after you've done a bit of JS coding. Focus on understanding this/that, closures/callbacks, IIFEs, and prototypal inheritance. Those are most of the big gotchas. The syntax is ugly at first but it grows on you. 
I recently used slick, a jquery plugin that is responsive and works on mobiles/touch events. 
Same here. I wasn't able to scroll at all though. Not even one pixel. I tried everything too, including trying to "select-drag-scroll".
I'd suggest that you notify the user that the current page is not a YouTube video, and therefore, it doesn't know how to redirect you to a "youtube-mp3.org" page. It's good UX.
I was going to suggest the down arrow or space, but it looks like their JS doesn't handle that. Edit: it's because the script puts the page (which is as high as its content) in a viewport element that is sized to the page and given `position: absolute; overflow: hidden;`. Moving the page is actually done with a CSS 3D transform.
Wow! Just in time. What a terrific release cycle!
This is what I see too. Node.js is not ideal for pumping static bytes (it totally can if you stream the files but you're wasting performance). And I know a guy who uses node.js as outer server without nginx but hosts all his static content on a CDN service (dirt cheap). His node.js service has a static servr to but it works as the CDN's source. He says it saves him from managing nginx.
I already got the answer in another thread that they are going to have it soon. They talked about some cloud service for wrapping apps that would compete with phonegap.
It really is a shame. I sometimes use Zepto to handle the Jquery packages I'm using and then use Mootools for the rest.
This was my first javascript framework, and I used to love working with it. But does MooTools have any relevancy in 2014? Honest question.
Was this all custom or did you use a framework to build it? 
A++ would Ember again.
I'd love to find out what this is all about but I can't even browse the website on my phone. Its pretty cleat that I'm no longer interested.
custom, notepad++ and a keyboard. :)
In my opinion, events are really the only way to approach this in a clean way. It decouples views from one another, and simply allows the model (or another view) to fire an event that says, "Yo, a message was read. Here is its ID... If you're listening, update yourself."
I couldn't have said it better myself. Sometimes I think that replacing OS scrollbar behavior is the most horrible UI/UX decision anyone can make. Beyond that, I tried a few demos: * The first never loaded anything into the virtual iPhone. * The second worked very poorly, and wasn't smooth at all, on a desktop computer (Mac Pro) smushed into a tiny window. * The third was much smoother, but looked like any CSS demo from Codrops. It didn't actually *do* anything, either. * Fourth doesn't work on FF, it won't even load, yet again. What's the point, if there's no fallback? * Fifth demo looked OK, but it was designed for touch only. Had a lot of visual bugs where things were ending up with the wrong z-index. * Etc. The few demos that worked on FF are so simplistic, I don't see how they are improving anything. (The flipping page one is a great example. I was designing photo flip books—with multiple photos and text per page—using pure CSS in 2012. It looks pretty much the same here.) They have yet to impress me with the tech. :-\
I've been following you all for the last two years and all I can say is... meh.
Shhiiiittttt. They "famo.us"
I use it everyday as my workplace picked MooTools years ago and has built too big of a codebase to switch to something else, even though everyone would prefer jQuery. 
I started learning how to program several years ago with CSS; once I got the hang of it; I went on to Javascript for about a year -- I must have watched Crockford's "Functions the Ultimate" video about 18 times, now. (I am as excited as anyone about the es6 draft). Having said that; it is only more recently that I'm addressing learning Node. Also, the last thing you want on your plate is comprehending Monads. Trust me; you'll burn, yourself out! 
varCoinsAmount = 999999999999 I'm the king baby :)
I find it funny that the title says ".. in 20 minutes", then the length of the video is 32. I realize the 32 minutes include his introduction, so it is understandable. It is still a bit funny though.
Bet it isn't the community or devs.
I was viewing it on alien blue and every time I tried to drag down (to scroll up) it ended up switching to the alien blue text mode for the site. Also, the page scrolls for me without me specifically asking it to. I mean, I nudge it a little and it goes off in its own world. Ended up leaving after spending a few minutes there and reading nothing because of the usability issue. 
Very cool. Scrolling was a little difficult on Android 4.4.2 chrome latest. 
First of all, read the "formatting help" link -- prefix your code with four spaces to make it readable and prevent it from being mangled by markdown. Also, consider posting a jsfiddle or codepen that demonstrates the problem, as it's much easier to help if we have something we can actually see and edit. Why are you calling `.text("")` on the links? That's removing their text, which seems antithetic to the idea of wanting to see the text. 
We use Meteor at https://pintask.me/ — it's a great fit for application like ours. We did run into some roadblocks, but there were resolved rather easily. I guess the reason people don't use Meteor much is because of "bad first impression". It launched on Hacker News without having security, authentication, and many other crucial things. So people looked at it, tried it, and then ditched because it didn't do this or that. Right now, Meteor has really matured. All issues are solved — and solved better than in other frameworks. Yet people still remember that "Meteor is insecure", which has been true in the past, but already isn't. So, if you're willing to build a large application in Meteor, go for it. I have done it, and I have no regrets.
Well, mistakes happen. I just hope they fix it soon. Also, why is there a scrollbar that I can't interact with? [wat](http://i.imgur.com/6nZECrw.jpg)
Highlights what in the text? If it's for usernames, url and stuffs like that, they have they own library open source: https://github.com/twitter/twitter-text-js
Its from an older talk, basically it was talking about how Netscape was loosing the browser battle and making a good language wasn't an option since they didn't have to do that.
Yes. It does. I use it all the time. As a framework alone, it blows jQuery out of the water. Using jQuery after mootools feels like playing with a bunch of cheap fisher price toys, and I always go running back. I had to use it when I do contract work a lot and it just ends up pissing me off most of the time. Mootools feels like a well-written language extension over javascript. jQuery is this strange wrapper around javascript that tries to almost hide the javascript underneath it, except the API itself just feels dirty to me. There are some things that piss me off about Mootools, however. For instance, I recently opened a pull request on their github to introduce a feature to support sending File objects through the Request (XHR) class. The response was more or less "I can't think of a use case for this so I won't merge it." So yes, parts of the project feel like it's stuck in 2007. However, the alternatives aren't really alternatives, in my opinion.
I don't use this framework myself, but it takes all sorts and I'm glad it's still kicking! I used it a long time ago when I was learning. I'll give it a spin sometime and see how I like it now.
Doesn't look that busy, but I'll try . Thanks!
Look up the modulus operator.
"and 25% faster than GNU libc strftime" you mean the libc implementation in either c or asm is so slow that you have a chance to find a faster algorithm in **js**? seriously?!
Microsites. Usually ones that you own. For example, I've made in the past an online christmas gift for friends of mine overseas. To house the media (gift), I wrapped it in an over-the-top web page using CSS and JS I wouldn't normally be able to use, because I knew the audience was on the latest browser. It means you get to practice using what you've learnt without the pressure of deadlines and compatibility kludges.
Either I just read a lot about something and then try them out at work or I make a little test in my tests folder (it's full of tests).
I can understand your view on the developers but the community was and is still amazing, if you ever joined #mootools on freenode or took a look at the mailing list you would had seen by yourself, there's always someone answering any sort of questions even if not mootools related.
yep loads of 'em often in a NodeJS servable directory so I can interplay between the two.
You should check out the "the rise of worse is better" essay, which is exactly about what benefits can be gotten from being objectively "bad". http://www.jwz.org/doc/worse-is-better.html
Hey amexudo, Being in a similar situation such as yourself, I wanted to brush up/put into practice snippets and concepts I've absorbed from the web and books, more specifically with JavaScript and jQuery. So, I thought it would be smart to consume a free weather API (openweathermap.org), using JavaScript and jQuery. This has been really helpful for me as it covers a lot of JS and jQuery - using JS objects and dynamically creating content, plus I'm using it to take advantage of HTML5 and CSS3 capabilities. I think that this (or something similar) would be a good project for you as you might be able to get it done in a week or two. Good luck! www.masterwebdevelopment.com
Why are you not interested in trying out [stackoverflow.com](http://stackoverflow.com/questions/tagged/javascript). IMO, you would get much more help there. It's not that reddit is bad for this purpose but stackoverflow has much more experts there along with giving quicker answers.
No free work, sorry.
Having worked with Meteor for a couple of months now, I am still in love with it. I *love* adding a package that adds often a complete feature for me both server- and client-side. However, in addition to the frustrations mentioned elsewhere, I find the following really annoying: - Defensive programming. I try to use Iron Router's waitOn, wait for collections to respond that they are ready and whatnot and I still find that I need to check if an object is null when querying. Often times it works to just return because the function will be called again when the data is ready but this makes me uncomfortable because I don't like relying on magic. - Glitches and flickering. Working locally, everything loads really fast so you don't notice it but then when you deploy, delays are noticable. And hard to debug, because they are not really bugs and don't print anything in the console. But I just find that oftentimes, the screen or a part of it flickers while something is loaded or updated. Often twice or more. I have no idea why and it's hard to trace what triggered the redraw. - Flux. This is to be expected with such a young thing but it's hard to deal with all the same. Every time I update something I get nervous because something else is likely to break. And given the lack of maturity in some areas (testing being my primary concern at the moment), you really want to update when they come out.
What browser/OS are you using? And did you try my replacement that uses `.textContent`?
I am using Chrome Version 34.0.1847.137 m on windows 7 ultimate 64 bit and I am using your exact code. 
If you look closely at Flux, it uses a message bus at either end of the dispatch loop. In "traditional" MV* apps - you bind an event handler to the view. A user interacts with the view, it taps a model to refresh it's state from the server. Over time, however, your app creeps out of it's box, views need to know about the state of several models - so one model needs to be tied to several views (and vice versa). Suddenly. your M's and V's are doing a lot of work, and having to propagate state out to other components that might be interested. In this system, state has a habit of aggregating along breaks in the message bus, and out at the leaves of your app. The flux pattern is interesting in that the models handle actions (rather than events requesting updates from the model). If you fire an error action into your dispatch loop, any store that exposes a suitable hook will get invoked. Moreover, because the whole shebang is wrapped in a dispatcher - you can enforce a synchronous update across several views (i.e. don't update from the model, update from the dispatch complete signal). This makes it easier to keep your state lined up, as state implicitly travels to the "center" of the system rather than out to your MVC triads. It's not a magic bullet, it's just a (clever) variation on MVC, but it's got some interesting properties worth investigating. I've seen pubSub turn into an absolute rat's nest of ad-hoc signals - it's not the best solution (which is why we're all still looking for new ones). 
Nope, nothing. Thanks for your help though. I will attempt a few of the other things I have already tried but instead I'll use .textContent this time and see if I can find another way around this. 
Sorry, I edited my last comment with a probable solution. You probably didn't see it.
Not an answer for your question, but what I do when I run into problems with coding something: 1. Google it. 2. Seriously, Google it some more. 3. Look at github pages for the libs I'm using and resolved issues in particular. 4. Write a minimal test that does only what I'm having trouble with. If test works and main code does not, figure out why. If test does not work, try to figure out why. 5. By now we actually have a problem. Are there other ways to do this or other libraries that makes my coding more time efficient or should I stick to what I've got? 6. Do something else. Work on some other parts. Go for a walk. Have a good night sleep. 7. Go at it the next day. If I reach step 7, I have usually figured out what was wrong subconsciously, or already decided if I should go for another solution. If I'm sticking to what I've got, I Google it some more. By now I've tried it several times in different ways and read the documentation and examples multiple times. I start looking for a related chat where I can ask causally and progress to forums. Now I'm pretty certain it's something wrong happening, so I begin considering to filling an issue or mailing the developer if no other means are available. Hth. 
Step 8. Post on a forum. Ask someone more experienced. That's where I'm at. The program runs perfectly in IE and FF; it crashes on Chrome and Safari. I have no idea why, and haven't been able to find anything on Google that can help me. I expect that it's because I'm a newb, and I'm doing animations by trial and error and not using any standard framework. I know I can rebuild it using standard JS animation tools, but that still will not tell me why this particular implementation has problems on different browsers. That's what I want to know, not necessarily fixing the problem. The 'why'. 
Thank you! That was the problem, I have changed my notepad++ to encode with UTF-8 for now on instead of UTF-8 without BOM which seemed to be the issue. Thanks man.
If anyone ever asks, jQuery won the library wars of the 2000's not because it was a better library, it was because of John Resig. People want vision, not attitude from their software devs.
why is this tagged nsfw?
Toggle a className. And use css (:before) to show your stars. 
jQuery is not a framework.
I write small games in JS -- you'd be surprised how taxing game development is on your skills as it'll push your boundaries. And, even if you don't finish it, getting it to a working prototype will at least expand your skills and open you to a new way of thinking.
I try to spend and 1/2-1 hour a day everyday on one particular new area, say design patterns. Rinse and repeat until it finds it's way in to the work you create and then move on. Also remember it's ok to forget things as long as you know what it is you have forgotten, everything is but a google search away if you know what you are looking for. 
That's weird you say it runs in IE &amp; FF but crashes in Webkit. BTW, when you say crashing, what do you mean? Unless your browser stops being responsive or it closes because of a memory error, Web Inspector is your best friend as the console will tell you if you're getting an error that's not being spit out onto the page. Also, try running the profiler inside Web Inspector to see if you have any function calls that are taking a long time to execute.
Yup. The thing is, JS is functional, and you can JIT yourself a highly specialized function. While in C you're always parsing format strings, albeit very fast. So the JS version just does less work per iteration.
What's the "formula" for determining which group a postcode is in? Is it simply "if the last two letters are between AA and KK (i.e. AA-AZ, BA-BZ, CA-CZ, ... JA-JZ, KA-KK) then it's group 1, else it's group 2"?
Isn't TypeScript pretty much ES6? E.g. [see this SO question]( http://stackoverflow.com/questions/22260978/which-es6-features-are-implemented-in-typescript)
Why not just do something new? Regardless of the quality, this is dead on arrival for every developer I know.
Can you not just parse it to an object? var myZip = //get zip here var zips = { "1000AZ": 1, ... } var myGroup = zips[myZip]
Just a minor correction: Erik is using [Ember CLI](http://iamstef.net/ember-cli). Will add that the scope of Ember is such that you will generally want these sorts of scaffolding and build tools, to accommodate your project as it grows. For one-off things that are more proof of concept and you just want to take advantage of Ember's CPs and binding, the Ember JSBin is great. edit: Added link to Ember CLI.
Do you mean Cordova? I believe Cordova just puts your web application into an Android web view. That's something you might want to consider, if you haven't already, as I think there's a noticeable performance hit by running in a web view. I can't speak for Ionic.
Does anyone tried to do this? I've installed ember-cli, and even after that "trick" initializing a controller for the album I'm getting a "No model was found for 'album'" any help?
Use an array of RegExp to match the groups (given the variable "zipcode"): var zip_groups = [/1000([A-J][A-Z]|K[A-K])/, /1000(K[L-Z]|[L-Z][A-Z])/, ...]; for (var i=0; (zip_groups[i] || {}).test &amp;&amp; !zip_groups[i].test(zipcode); i++); // now i+1 is your group. That will be a lot faster than direct comparisons. If you need help with the regexp, just ask on here.
Honestly not even sure what this sub is for, seems to be having a bit of an identity crisis at the moment. There are usually more than a few *very* basic questions that should be in /r/learnjavascript or SO mixed in with somewhat advanced articles on esoteric topics, all topped off by a series of personal projects &amp; rambling blog posts on Angular.
Previous release (1.4.5) was February 2012? That's a little scary. Like many others have said already, I used MooTools YEARS ago, but just assumed it was dead and irrelevant by now.
Your problem isn't clear.. &gt; I made the list into a comma seperated file and am trying to write a script to split the postal codes in the list in 3 parts(4 numbers, first letter, second letter) Why? If you're just checking to see if the code is in one of two groups this isn't necessary. &gt; and then also split the input postal code the same way What type of postal code? USA? They have 5 digits while your group numbers have 6 (and letters). &gt; if("postalcodenumbers" &gt; "CSV column 1 numbers" &amp;&amp; "postalcodenumbers" &lt; "CSV column 2 numbers") This doesn't make any sense -- the result will always be false because you've excluded both groups? I feel like there is more to this problem but you're not explaining yourself correctly. &gt; they want to be able to enter a postal code and the group number comes out so: [1000BB] results in: The postal code 1000BB belongs to group 1. If this is really all you want then /u/e13e7's answer will work for you. If your problem is actually parsing the codes(in the csv) into your javascript then you should try restructuring your data as json. Using json you can add properties to each code "object" and just give it a group property.
the good folks over at /r/datasets would love this
No I haven't really, I've been learning so much with just notepad. Do you think it's worth it?
Depends where you can source the URLs from. VS2012 and up have fairly good support for *.debug.js vs *.js. I haven't used it but you should look into using the build system that way. e.g. dev URLs in config.debug.js, production URLs in config.js.
I don't think the "worse-is-better" essay sufficiently explains the history of Javascript. Today's Javascript is significantly worse than "worse" as defined by the essay, the essay applies better to C. The last part of the essay explains why agile is better than waterfall BTW.
Yeah, I mean Cordova. But I beleive Cordova makes an app, not only an Android web view, eventhough, I'll check it. Ionic is another framework which is based on AngularJS and also makes apps.
I don't know, but basing on what I've read, you only need one of them to make an app.
&gt; John Resig TIL of [Processing.js](http://processingjs.org/), thanks!
I love the ToDoMVC's as a primer, but this doesn't cover many application requirements: interface to the server for data persistence and routing, being a couple. Has anyone seen a full stack sample application?
Its all about marketing and marketshare. For a back story read up about what the founders of Netscape had to go through just to convince people that the internet (and by proxy the web) were not going to instantly fail. After you have read about that then read about the browser wars of the '90s. In marketing and marketshare it is always about capturing the widest possible audience. This means appealing to the LCD (least common denominator or least competent developer). As a result the web is filled with sloppy shit, because they are trying to appeal to as many uneducated coders as possible instead of targeting a small strong educated corporate coding culture. The idea is that web technologies tolerate so much asinine bullshit that anybody could be a coder. This behavior still exists today with the rise of frameworks.
This is the JavaScript subreddit, if you are looking for Java help you want to post in /r/java. If, however you meant JavaScript, mapper.js seems to work with imagemaps, so if your images have imagemaps it should work automatically.
I wasn't aware that you could do this similar to web.config. Is there a process to get that up and running, or simply create the files with that naming convention?
I can't read this very well either, but it does seem like you are only seeing the text for a certain duration because your JavaScript hasn't fully loaded yet. Remove: $(a_cat_link).text(""); If you still can't see the text afterwards, then try to see what is the z-index on a_cat and a_cat_links. a_cat_links should have an higher z-index. It doesn't seem like you've put the elements in position absolute, however, so the only way this could be an issue is if you have css affecting the elements elsewhere.
Yessir! Usernames, URIs, Hashtags. I'll check this out, I appreciate your help!
* Data already written in the HTML of the page * inside HTML5 data attributes (for small amounts of string data) * inside a script tag with variable declaration or function/JSONp call * Dynamical JS generated by PHP (&lt;script src="php-generated.js"&gt;&lt;/script&gt;): * to set variables * to call a predefined function * to make a JSONp call * Data sent by PHP via AJAX call * as XML * as JSON * as plain text It all depends on how much data of which format you want to send before/after the page load.
Fair enough, do you use a different taskrunner?
I practice, test, explore, experiment, learn using code sandboxes: http://jsfiddle.net/user/BloodyKnuckles/fiddles/ http://codepen.io/bloodyKnuckles/ http://requirebin.com/
Personally, I think that almost always, if you need to have PHP generate anything directly into JS for you, you're doing something wrong. AJAX is almost always, in 95% of the cases, the way to go.
I looked for this, and wasn't able to find any instance of this functionality being implemented. http://stackoverflow.com/questions/23245067/can-different-configurations-manage-files-other-than-web-config-in-visual-studio
Agreed. However I've seen projects like http://synthjs.com inject data directly in to a script tag when serving a page to the user. Its a good idea but crosses the lines between backend and frontend. Linking them in this implementation in that if something goes wrong its just another piece to debug. Ajax calls are easier to debug for me. Especially if the data is very large and not pretty printed in to the script tag.
thank you for taking the time to write this, first of all it's dutch postal codes that always consist of 4 numbers then 2 letters, also there is no formula or algorithm for determining which postal codes belong to which group. also it's not always AA-KK and KL-ZZ it can literally be any range. and there are also over 300 ranges and they can change on a weekly basis so I can't type it all out in code. It needs to be editable in excel which can then be turned into CSV. if("postalcodenumbers" &gt; "CSV column 1 numbers" &amp;&amp; "postalcodenumbers" &lt; "CSV column 2 numbers") it needs to be more than the first number and less then the second number so that it's in between the 2 numbers. so 1000AA-1000ZZ includes 1000AA, 1000AB, 1000AC, 1000AD, ... 1000 ZX, 1000 ZY, 1000 ZZ. that's why I want to seperate the input and make the letters into numbers so A=1 B=2 C=3 etc.. so I can check first if the 4 numbers are within a range then if the first letter is in that same range then if the second letter is in that same range. If all 3 are true for a specific postal code range then it writes the groupnumber of that range. I hope this clears my problem up a bit, sorry for bad punctuation and formatting. 
it's a list of over 300 ranges and every range consists of around 500 codes so your way would take insane amounts of time and it will be nearly impossible to update it
Dumping the JSON data directly into the initial payload is faster than making yet another HTTP call to retrieve it, especially if said data is needed to render the page. This is becoming common practice among major websites (Facebook, Google, etc).
this looks like it could solve my problem but I'm not entirely sure what regexp is and what your piece of code actually does. would you mind breaking it down for me?
Cordova does make an "native app" but the native app is really just a webview wrapper that displays your angular app. chazzlabs is correct that there is an impact on performance, but from my experience it is not noticeable while using it. YMMV depending on the type of app you are writing. If you want a "native" angular app you really can't avoid Cordova. I highly suggest this article: http://www.ng-newsletter.com/posts/angular-on-mobile.html#native. Once you are done with the exercises in that article you will be able to quickly make build cordova apps. Once you are comfortable with Cordova it is a simple task of choosing a front-end framework. The Angular specific choices I know of are: http://ionicframework.com/ and http://onsenui.io/. However, you could comfortably use http://goratchet.com/, http://getfri.es/, or even Twitter Bootstrap 3. 
Forget Cordova or any HTML/JS mumbo jumbo framework for mobile app development. I'm speaking from a few years of experience, go native if you want a well built, responsive mobile app. I love JS and HTML5 but they are not quite there yet.
Model-View-Controller is an architectural pattern in which AngularJS is based on. You don't end up writing "Angular", you end up with an MVC architecture in JavaScript, or at least a close equivalent for client-side. [MVC](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller)
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Model–view–controller**](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller): [](#sfw) --- &gt;__Model–view–controller__ (__MVC__) is a software [architectural pattern](https://en.wikipedia.org/wiki/Architectural_pattern) for implementing [user interfaces](https://en.wikipedia.org/wiki/User_interface). It divides a given software application into three interconnected parts, so as to separate internal representations of information from the ways that information is presented to or accepted from the user. The central component, the *model*, consists of application data, business rules, logic and functions. A *view* can be any output representation of information, such as a chart or a diagram. Multiple views of the same information are possible, such as a bar chart for management and a tabular view for accountants. The third part, the *controller*, accepts input and converts it to commands for the model or view. &gt;==== &gt;[**Image**](https://i.imgur.com/TM99tli.png) [^(i)](https://commons.wikimedia.org/wiki/File:MVC-Process.svg) --- ^Interesting: [^Hierarchical ^model–view–controller](https://en.wikipedia.org/wiki/Hierarchical_model%E2%80%93view%E2%80%93controller) ^| [^Web ^application ^framework](https://en.wikipedia.org/wiki/Web_application_framework) ^| [^Presentation–abstraction–control](https://en.wikipedia.org/wiki/Presentation%E2%80%93abstraction%E2%80%93control) ^| [^Model–view–adapter](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93adapter) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+chmovy2) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+chmovy2)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Eh, it really depends. I like using it for config options so I can manage both front and back end in the same place.
If your requirements dictated that you have to build Android, iOS, and Windows Phone would you still choose native?
It really depends on how fluid and responsive you want your UI to be. Programs like Cordova, Sencha, PhoneGap all wrap your UI/Code around a webView. Apple/Android design each component (navigation, top bar, clicking, buttons) such that the performance is really good. Each component is separate. When you use webView it puts all those components under a single view. Another issue is that every manufacturer uses a different webKit. Samsung uses a Mozilla webKit. Google decided to make a new webKit. iOS uses a different webKit. So all these phones can run HTML5 apps, but they will all react differently because they all have different webKits. 
Most of the innovation in Javascript -- whether V8, or ASMjs, or the multitude of frameworks and cross-compilers -- have come as a result of how bad Javascript is at its core. If it had been better designed, all these ancillary tools would never have been invented.
/10(0[0-9]|10)[A-Z][A-Z]/
You can definitely use Bootstrap (including it's grid framework) with React, in fact, there's a [React Bootstrap](https://react-bootstrap.github.io) components library. Check out the [Grid](https://react-bootstrap.github.io/components.html#grids) component. (*should note that it's still under heavy development, APIs may change)
Oh yes, Grunt all the way. It is not the sexiest architecture but it is extremely effective (like the hog in the logo).
Interesting read, thanks!
Ah, I see the argument now. I would say that any talk about the future of all computing, set 40 years in the future, is probably going to be at least a little specious :P, but his deadpan delivery is pretty great.
Any reference to which older talk that would be? I am curious.
This is brutal (And a good example of why you shouldn't hype your product into the sky before launching it and setting everyone's expectations higher than you can possibly meet)
Any good references going over the browser wars? &gt;This behavior still exists today with the rise of frameworks. What do you mean by this?
Unfortunately i can't remember, it might be a Douglas Crockford or Nicholas Zakas talk and I'm pretty sure its from before 2012.
Ionic is more an extension of Angular than just a handler of CSS. They've written a ton of mobile specific directives that make Angular work like a native mobile app would. Cordova is both the wrapper for your hybrid app as well as the library that exposes the hardware to your native app. For example, Cordova lets you access the phone's camera. You use Cordova's build tools to package your app up so that it can be loaded onto a phone or distributed to an app store.
Here's a rule of thumb: if you think it's kind of a simple/noob-ish (as you put it) question then it's probably answered on stackoverflow already. What is your question btw?
Have you also set the charset in the head of your html? &lt;meta charset="UTF-8"&gt;
do you have an album.js in your models folder?
So you aren't looking for a framework, you are looking for a library.
There was no release for two years, but if you check the commit history there has been no lack of contributions to the code base, that's why there have been about 240 commits leading to this release. 
Even though he does not add it I've tried also.. but it does not work (with or without extending a model on the project) :S have you tried it?
Without seeing the book it's impossible to know for sure, but the odds are that it's terribly out of date, and far behind current best practices. JavaScript had a sort of renaissance around 2008, partially due to [JavaScript: The Good Parts](http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742) being released, and things have changed a lot since then. I learned it bit by bit over time, so I'm not sure what the best introductory resource to recommend is. I do suggest avoiding w3schools like the plague. The [Mozilla Developer Network](https://developer.mozilla.org/en-US/) is a better resource in every way. Here's their [intro to JavaScript guide](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide). Hope this helps!
The book is going to be near useless . Buy a more current book or try code academy again . You don't really want to learn JS without learning some Jquery too ...
Only up to 30x faster so I open sourced it https://github.com/petkaantonov/fast-strftime It's within 60% of the speed of GNU libc using clang and -O3
Try this: http://juliepagano.com/blog/2014/05/18/javascript-debugging-for-beginners/
Okay, still trying to wrap my head around the scope of your problem. Let me see if I have the definitions for postal codes and sets correct: * A postal code is made up of 4 numbers and 2 letters, EX 1000AA * There are an arbitrary number of sets that contain N postal codes * Each set of postal codes is arbitrary -- meaning there is no algorithm you can use to determine which set a postal code belongs to * Each set contains an arbitrary number N of postal codes * The postal codes a set contains are not fixed -- meaning postal codes can change sets Is this right? Now for your source: &gt; and there are also over 300 ranges and they can change on a weekly basis so I can't type it all out in code. It needs to be editable in excel which can then be turned into CSV. So right now you are determining each set by creating a separate column in excel, yes? How are the sets determined, are they generated somehow or is it done by hand? I still think your best bet is /u/e13e7's solution but by reading in a JSON document. You can use something [like this](http://shancarter.github.io/mr-data-converter/) to convert csv into JSON, just use the column name as the property(for the set aka "group") Either way you're going to have to read all that data in as an object or dictionary/array.
It will serve you well. There are a cubic shit-tonne of plugins for it, and it is very easy to rig some custom ones if you need to. Gulp is very nice if you just need to transform some text files (minifying etc) but lacks the versatility of Grunt that does.. anything you want with just some plain JS. It is extremely hackable.
"Good" doesn't have to mean "identical to broken languages like Java."
Cool stuff. Is there a github repo/website for the theatre.js library? A cursory google search revealed none. 
I am sure you can find some better sources from doing a search, but here it is at a very high level: https://en.wikipedia.org/wiki/Browser_wars &gt; What do you mean by this? From roughly 2002 to 2008 there was a huge push in the web development community for "standards" and "standards compliance". This movement was largely replaced by activity around frameworks. This indicates a couple of things: * this energy is largely a selfish attempt to mitigate frustrations in cross-browser coding * for many people any packaged solution is more important than figured it out themselves * standards are not as important as people indicated prior to the rise of frameworks * for many people standards are good, but framework code that does it for you is better
There's #javascript on freenode (IRC)
What's the github link to theatre.js?
With either option you'll need Cordova. Ionic is just a UI framework built on Angular and still requires Cordova to run on a phone.
Read the console error message and type that into google. In 7 years of programming I've never had to ask a question because someone else already has.
You seem confused about a few things. Cordova and Phonegap are the same thing (Cordova is apaches name, Phonegap is adobes). Sencha is a JavaScript framework, not an hybrid app environment. When you use a webview it doesn't use the native components (though a phonegap application can include native components outside the webview). A webview uses the HTML/CSS/JS that it is supplied either remotely or locally. Samsung does not make it's own version of webkit, nor does mozilla, you might be referring to [servo](http://en.wikipedia.org/wiki/Servo_(layout_engine\)) which has not been used in any customer facing browser. Google uses the layout engine Blink from android 4.4 onward (which is forked from webkit but is not webkit). So far the differences between the engines in up-to-date android and up-to-date iOS aren't huge and should be easy for a seasoned webdev to smooth over. For most smaller applications the performance difference between native and hybrid will be barley noticeable. For larger or more complex applications a native solution should be recommended.
http://www.nospec.com
When was the last time you tried it? What frameworks did you try it with? Many devs just drop in jquery mobile and "call it a day", which absolutley kills performance. One problem with it is that many webdevs build their hybrid applications just like they build their webpages, when there are separate issues to consider.
If you use [the csv -&gt; json converter](http://shancarter.github.io/mr-data-converter/) I mentioned above you can get your input data close to what you need. Using this data (which I copy -&gt; pasted straight out of excel) Group 1 Group 2 Group 3 1000AB 1011AA 1999AE 1000AC 1023AV 1000BC 1002BF 1044AN 1223KB input it into the converter, then change the output option to "JSON - Column Arrays". You get this { "Group 1":["1000AB","1000AC","1002BF"], "Group 2":["1011AA","1023AV","1044AN"], "Group 3":["1999AE","1000BC","1223KB"] } Now just loop through every column object and use [indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf) to check if the postal code exists in that column, if so output the column name. If the work is being done from the server you can use [requirejs](http://stackoverflow.com/a/18060563) to get the json file locally. If it's going to be done by the client you can use jquery's [getJSON](http://api.jquery.com/jQuery.getJSON/) to get and parse the file automatically. At that point all the person maintaining the data has to do is run the excel(or csv) data through the converter and then save that as a .json file in the correct place.
"considered harmful" considered harmful.
I never suggested webview uses native components. Like I said, it really depends on how fluid and interactive you want your application to be. When we were building our iOS/Android app we intially experiments with PhoneGap, but it wasn't too much. We built a fully functional application using Sencha Touch(you can deploy to native). iOS/Android are not the same performance. Even for a seasoned developer. Samsung S3 won't handle interactions the same as S2 or S4.Currently, iOS is much better for html5 applications. I'm speaking from experience, still learning. 
It's a browser problem - works in IE and FF, not in Chrome or Safari. I've made a /r/learnjavascript post [here](http://www.reddit.com/r/learnjavascript/comments/260j19/browser_problems_with_moving_objects/).
I use Bootstrap with React (including grid layout), without even using React Bootstrap. It's just css classes?
[dnode](https://github.com/substack/dnode) - turtles all the way down rpc. [php sdk](https://github.com/bergie/dnode-php). sockets. --- I consider 'web apps' self-contained entities, all the backend converted into client-side javascript. If the internet shut off - the app would still work. The only exception would be if your app streams information or calls 3rd party APIs. 'AJAX' - should be standard in WEBSITES, it doesn't make your site a app if you load parts of the page without refreshing the entire HTML doc. edit: on my phone originally so only one of the answers showed up -- my response was to 'second best' answer, specifically his definition under 'Am I writing a website or an application?' 
I also found interesting to take a look at the framework they built on top of express called [Kraken](http://krakenjs.com/). I think I can learn a few tricks from the way they solved the common problems.
this looks really neat and interesting, but this would still result in my typing out every single combination. the data I have is the first code and the last code and there is like hundreds of thousand total codes
Your book might be good for the introductory material, but it's entirely likely that the in-depth material in your old book will be outdated by new techniques. It's hard for me to think of a language whose techniques have changed more than JavaScript over the last 10 years. You're more likely to find on-line resources for leaning JavaScript that are better than your book. You're going to need to know about JavaScript libraries, OOP in JavaScript, the new JavaScript debugging tools, and newer techniques &amp; best practices in JavaScript. You'll find none of this in your old book. It might be useful as a reference on the basic stuff, but even with that you're probably better served by an O'Reilly pocket guide.
So, I shouldn't do something I already wasn't planning on doing? Good to know.
Can anyone TL;DL this? I'm at work and can't sit through a video. Is there a written transcript somewhere?
I think you misunderstood my point - sorry for not being clear. Wether you use React or Angular, you will use the MVC pattern. But I feel, after using Angular for 1+ year, that you always end up writing "angular code", with $scope and $apply all over the place, angular services, etc. I guess you have used angular as well, and might understand better what I was talking about.
Great stuff, but would it hurt to run a spell-check on the landing page? ...sorry to be 'that' guy. 
Ah! So you are saying the source of your list literally looks like this? 1000AA-1000KK = group 1 1000KL-1000ZZ = group 2 if not, can you give an example of what the raw data looks like?
He's only looking at hard load times in the network inspector. I'm curious how 'perceived' page load is affected (think to heavy social-plugin sites where the page is visibly loaded &amp; rendered, but not interactive to mouse or scroll because of immense, blocking javascript).
Kind of awesome, but it doesn't close out at the end of the video/tutorial. I'm stuck looking at a dark gray background. It should minimize back to the starting page - similar to what they do around 14 seconds in.
This is a really good answer, and the OP should follow this advice. However, it's worth noting on a theoretical level that if this was a really well written book, it's possible that it could be an incredibly good guide and not really out of date. The formal specification of the language (known as ECMAScript) has only had *one major upgrade* since 1999. This upgrade (ECMAScript 5) was in 2010, and many work places still don't let you use any of the new features from ECMAScript 5 due to needing to support older browsers (though this need is really starting to fade in the modern world for more and more work places). Additionally, this upgrade really wasn't that big of an upgrade. It expanded the built-in library to provide better reflection and security functions and added a few additional syntactic forms. It also added getters and setters. But the changes between 1999 and 2010 were really not so big. (The upcoming ECMAScript 6 changes are much larger by comparison.) Having said that, while the language itself hasn't changed a lot, as others have mentioned, a lot of recommended best practices have undergone some change. There are a *lot* of new libraries and patterns out there, and the DOM has undergone a lot of updates (though whether you can use those changes of course depends on browser support needs).
if you'd bothered to read it the article shows how you can do it right to get a performance boost, but thanks for your useful comment.
yup 300 lines of those
so when you say &gt; I won't be the one maintaining/updating the excel file some1 else is responsible for that and has to do it by hand I need some clarification. Is turning the list into an excel spreadsheet a one time action, followed by changes to the excel sheet on a weekly basis? Or is it that the original list will be changing? Follow up question: Do the ranges have a pattern? As in, will they *always* increase in alphabetical order. Or numbers will increase before letters? or anything? There must be some kind of consistency for the ranges, even if the groups don't have a pattern.
Where online would ou suggest learning instead?
OMG!, My first ever web javascript framework, i can believe hearing of it again.
Neither this one, but i like to call it that way as Laravel devs like to call proxies facades.
It would be helpful if you explained how the group code worked. But I would set the knowns to whatever and have the values of the unknowns be undefined, and then run some functions that identify unknowns and react accordingly. As a note, you sound exactly like my boss's boss xD 
(Someone else here) Could try codeschool? Although not entirely sure how in depth you are wanting it but if you are a beginner then its good. I did the javascript path on it the other day to see what it was like (as I like to try things out before recommending them) and it seemed to teach everything you needed to know to get you going. Either way the first course is free and doesnt take very long so if I were you id give it a look. If you already know Javascript basics (ie how to do most things - not neccessaraly the best way) then I'd suggest the book ["Effective Javascript"](http://www.amazon.com/Effective-JavaScript-Specific-Software-Development/dp/0321812182/ref=sr_1_14?s=books&amp;ie=UTF8&amp;qid=1400627374&amp;sr=1-14). I personally found that book to be very good and made a lot of good points which made me understand how javascript really worked a lot better.
Pretty much prototyped the portion of app in node, performed really well with less effort and people, convinced other developers to join the bandwagon, some were skeptical about making this move but eventually everyone is a happy camper.
 { 'r':'p', 'p':'s', 's':'r' } ^ Will never change. No need to construct the object every call. Sexy solution nonetheless. :) var a = { 'r':'p', 'p':'s', 's':'r' }; function RPS (c1, c2) { if (c1 === c2) { return 'tie';} return (a[c1] === c2 ? c2 : c1) + ' wins' ; }
Awesome! And a polyfill: https://github.com/jdarling/Object.observe
The reason for doing async script injection isn't to drop total load time, it is to drop perceived load time. Sites that need to load fast are supposed to have a small javascript shim to make sure everything is well formed and to kick of the remainder of the loading process. Another thing to point out, those times for CSS loading are pretty crazy. Very rarely should you be generating any CSS, it should pretty much be a straight dump from the server.
Stop, please just stop promoting unnecessary things for the sake of it.
No, it doesn't worth the time.
The best is back.
Is not like magically is going to give you application native performace if that what you meant.
https://github.com/AriaMinaei/theatrejs
Looks interesting.. does the unification library handle recursive object graphs? 
There's a great online book called [Eloquent JavaScript](http://eloquentjavascript.net/).
Which makes me wonder why anyone bothers with programming books in the first place.
It does, but you have to traverse the result lazily resolving variables on your own.
Wow. Such edge. So rebel. Any more biting sarcasm you'd like to throw into the blogosphere?
V8....is a javascript engine? asm.js....is just javascript. It was made so people could either a) port existing c++ code to the browser with what is basically a build step or b) continue to write games in c++ while targeting the browser because...it beats plug ins and thats what game devs like to do. Frameworks exist in every language if you are referring to the mvc frameworks. The only language thay "natively" supports mvc is ruby and thats because...that's not what a programming language is for. If you mean libraries...such as jquery...those exist because of dom inconsistencies and browser incompatibility which has nothing to do with Javascript *as a language*. Peop p e seem to judt forget entirely that javascript is just a language, no more no less. Its entirely independent of the dom. Nearly every problem people have with javascript stems from the apis browsers make available to javascript not the language itself. It's always that or the fact that it's an interpreted language but so is perl, python, ruby, php...read...Most of the web languages and thus, yup...It's not statically typed but we all do just fine with them. 
&gt; The Mozilla Developer Network[2] is a better resource in every way. A good tip I picked up somewhere is to include "mdn" in your Google searches when looking up JavaScript stuff to make sure you get the Mozilla Developer Network over w3schools for your first result.
Something about tdd and use whatever works for you and Martin fowler. Thanks for asking! What's really entertaining is I've seen talks from Ilya (author of the most recent considered harmful post) preaching the virtues of the very thing he know considers harmful. Oh what a world you damn computers. 
Dammit. I got really excited because I thought I was going to get to make some lame joke about escaping qoutes. You good little web developer you.
No, I was going by the way you want to piece-meal your framework together. Your "include a script if you need it" mentality is exactly that of the anti-framework crowd. There isn't anything wrong with it but you seem to be confused. Look at the big "frameworks" in other languages (PHP, Python, etc). Most of them have things like scaffolding.
I don't follow the argument here. You don't want to participate, for whatever reason – it's fine, don't. But there are people, me included, that actually enjoy doing things, participating in contests, hackathons and other activities like this. (My Reddit posts are mostly related to various such projects.) Do you really like the idea that everyone has to be like you? I'd hate it, being a boring prick is bad, m'kay.
Parsing happens just once per format string in JS, vs. every time in libc. Typically there's a finite number of format strings that are reused (in logging function, there's just 1 format string per thousands of calls). This is where JS does less work. I do have the code and benchmark that shows this is not, by any means, "bullshit". And I, too, find this very interesting – variations of "{C,Fortran} is faster than everything else" became such a conventional wisdom, I have never seriously doubted it for a practical use case.
Cool! Too bad you don't want to submit it.
But considering things harmful is a valid activity. Many things may cause harm, even in JS articles. Especially in JS articles. Think of the children. If we abstain from considering harmful things, our kids will grow up and think everything is completely harmless!
Turns out "considered harmful" is just pretentious shit referring to an memorable historical title.
Another possible solution would be to transform the zip codes to base34 to allow a numerical comparison. However, such a code would probably be even more difficult to comprehend, so I'd go with the regexp as long as the performance was sufficient.
I'm attempting to replicate their flux architecture with Parse -- which is just backbone.js -- which handles server interface and routing. The dispatcher registers actions in the Store which is a modified backbone model. My next goal is to use an event-stream library - like bacon.js - to handle all of the events and promises, so that the app actually *flows* and I don't get lost in callbacks. 
how about injecting scripts with an inline script... with async attribute. Like this: &lt;script&gt; var script = document.createElement("script"); script.async = true; script.src = "http://somehost.com/awesome-widget.js"; document.getElementsByTagName('head')[0].appendChild(script); &lt;/script&gt;
Yeoman is currently more developed / usable out of the box - with tons pre-built scaffolds already within the ecosystem. They're even [exploring the use of gulp](http://yeoman.io/blog/gulp-explore.html) within their build system. Slush is moreso an extension of gulp. You could actually roll your own version of slush within a gulp.js file if you wanted to. The more I learn about streams, the less I rely upon plugins for core functionality, and the more confident I become in creating my own project builds. Gulp/Slush is the 'node way' - and yeoman is the 'rails way'. With gulp you'll have to write more code, but it'll be much easier to customize for your specific needs.
I went full circle and now again use a custom inline Grunt task to hook together streams if I need them. Nice thing is that you still can use all those Grunt plugins that are impossible in Gulp while keeping the power of streams. This also works nice with custom browserify setups.
You can easily solve this problem by wrapping all of you code in a single [IIFE](http://en.wikipedia.org/wiki/Immediately-invoked_function_expression). You can achieve this by adding a build step to your workflow with Grunt or Gulp, or doing it by hand (but who wants to do that?) before each deploy. Check out their respective code concatenation plugins.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Immediately-invoked function expression**](https://en.wikipedia.org/wiki/Immediately-invoked%20function%20expression): [](#sfw) --- &gt;An __immediately-invoked function expression__ (or __IIFE__, pronounced "iffy") is a [JavaScript](https://en.wikipedia.org/wiki/JavaScript) design pattern which produces a [lexical scope](https://en.wikipedia.org/wiki/Scope_(computer_science\)) using JavaScript's [function scoping](https://en.wikipedia.org/wiki/Function_scoping). Immediately-invoked function expressions can be used to avoid [variable hoisting](https://en.wikipedia.org/wiki/Variable_hoisting) from within blocks, protect against polluting the [global environment](https://en.wikipedia.org/wiki/Global_variable) and simultaneously allow public access to methods while retaining privacy for variables defined within the function. This pattern has been referred to as a __self-executing anonymous function__, but Ben Alman introduced the term IIFE as a more semantically accurate term for the pattern. &gt; --- ^Interesting: [^Scope ^\(computer ^science)](https://en.wikipedia.org/wiki/Scope_\(computer_science\)) ^| [^JavaScript](https://en.wikipedia.org/wiki/JavaScript) ^| [^Lisp ^\(programming ^language)](https://en.wikipedia.org/wiki/Lisp_\(programming_language\)) ^| [^JavaScript ^syntax](https://en.wikipedia.org/wiki/JavaScript_syntax) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+chncyn1) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+chncyn1)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
[Indeed](https://github.com/jrburke/requirejs/blob/master/require.js#L1825)
The parsing in this case is extremely trivial in C and not what takes any time, I would be surprised to see perf improve even by 5% if GNU libc JITtted specialized functions for format strings. The challenge qualifications are impossible to reach, plain and simple.
["'considered harmful' considered harmful" considered harmful.](http://mort.coffee/considered-harmful/)
Complaining about stupid little fads is completely pointless. It just adds noise. It doesn't accelerate their decay.
'"'Considered Harmful' Essays Considered Harmful" Essays Considered Harmful' Essays Considered Harmful
Passive voice considered douchy
&gt; Isn’t it great? No we need a module system built into the language, help us ECMA6 @_@ Pretty neat interop between requirejs and node tho
I'm pretty sure this existed before. But nice anyway. Some tests would be in-order maybe?
Some people tried to do the same, but I think this is the first library aiming to mimic require.js syntax to make their modules work out of the box. The author has some testing reference in Github https://github.com/arqex/amdrequire
If you changed the contest to award the people with the top three speed improvements, that would be one thing. But you are asking for an absurd 50x improvement which means that even if the best improvement offered was 30x you A) would not have to award any prize money and B) would likely still merge that into your codebase.
Well, maybe. But if you are serious about your module then tests should be included. It is a convention that gives some trust. package.json says: "test": "echo \"Error: no test specified\" &amp;&amp; exit 1" Also you can setup Travis to run in on commit and badge to show it actually works as claimed.
So since browserify can output a [UMD](https://github.com/ForbesLindesay/umd) via the standalone flag its usually like 1000 times easier to just write stuff in browserify and then yell at people that don't provide [UMDs](https://github.com/ForbesLindesay/umd)
FTR, here's proof that the requirements are impossible: http://jsperf.com/cheating-cheating Even a function that does nothing but read cache is not enough to be 50x faster, let alone a real implementation (which wouldn't do caching since it doesn't make sense)
We [just had an article yesterday](http://blog.mikie.iki.fi/2014/05/innerhtml-vs-appendnode-vs.html) telling us that the method used really doesn't matter at all until the number of nodes reaches the tens of thousands. Well, it doesn't matter *on mobile*, but since desktop systems are so much faster than mobile, if you're worried about performance you're probably worried about mobile. That article also explains a common benchmarking fallacy of ignoring the repaint times and coming to incorrect conclusions. 
Interesting. Some thoughts... - you still need a browserify build step if you want to require() any npm modules for the browser. Will the require patching here work alongside browserify? - if you start writing multiple reusable modules with this, you might start running into conflicts between your require configs - monkey patching the require() method is [really dangerous](http://blogs.msdn.com/b/oldnewthing/archive/2005/06/07/426294.aspx)
Ugh it is frustrating! xD
I will look into this ! Thank you
He wouldn't get any prize money for it so why bother?
DocumentFragment's are one of the best techniques I've used in scaling massive views, and it's especially effective in older browsers with poor rendering engines (IE6-8). However, I'm always sure to credit /u/jeresig's excellent post from nearly 6 years ago where I learned of the technique: [DOM DocumentFragments](http://ejohn.org/blog/dom-documentfragments/), which contains all you need to know.
While DOM fragments are handy for doing some more advanced computation that is non-impactful to the current document this SO answer is just about avoiding rendering until you have finished building. You can get the exact same benefit by removing the targeted element, in that case a table, from the DOM (removeChild method) and then build it out with as many nodes as you want. When done add it back to the document, which is still just a single change to the DOM and a single re-rendering.
I wrote a blog post on how to use observe recursively http://kolodny.github.io/blog/blog/2014/05/21/object-dot-observe-nested-objects/
Felt the same or even worse about JSX, before I dived into the material some more. If you want, read this: http://www.reddit.com/r/javascript/comments/25xj9z/fluxbox_facebooks_flux_architecture_implemented/chlyv9s
Does a.toJSON() === b.toJSON() do what you want?
Unfortunately `Object.observe` is still not widely enough supported to be used anywhere other than maybe mobile :(
Well there is a polyfill: https://github.com/jdarling/Object.observe But I really would only use Object.observe to speed up dirty checking in react or angular if available
The polyfill is "useless". It allows the syntax, but the whole point of Object.observe is to actually get notifications on object mutation, and have the JS Engine do that. Without the low-level support, monitoring an object via timers is a horribly inefficient way to do almost anything, and another architecture would almost always be preferred.
I realize that, I would never use the polyfill in real life, all I mean was I would use Object.observe if it was available nativley to speed up some frameworks
Yeah, I would too. I just caution against it as it can give a false sense of "security". Your AngularJS app runs fantastic in Chrome because of Object.observe and completely chokes in IE10. I actually remove Object.observe when testing angular apps :)
When did Angular add Object.observe? Last I heard they implemented it in a non-release build to see the performance and had it planned for 2.0
I hope I'm capable of ascertaining that but you never know lol. In fact, I believe the first instance of "considered harmful" was Edgar Dijkstra on goto some 40 years ago. I desire a little more creativity in my titles.
var first_name = 'writer'; var url = ''; if (first_name != null) { var url = "http://www.amazon.com/gp/search/ref=sr_adv_b/?search-alias=stripbooks&amp;unfiltered=1&amp;field-keywords=&amp;field-author="+ first_name + "&amp;field-title=&amp;field-isbn=&amp;field-publisher=&amp;node=&amp;field-p_n_condition-type=&amp;field-feature_browse-bin=&amp;field-subject=&amp;field-language=&amp;field-dateop=During&amp;field-datemod=&amp;field-dateyear=&amp;sort=relevanceexprank&amp;Adv-Srch-Books-Submit.x=17&amp;Adv-Srch-Books-Submit.y=16"; } url; //output 'http://www.amazon.com/gp/search/ref=sr_adv_b/?search-alias=stripbooks&amp;unfiltered=1&amp;field-keywords=&amp;field-author=bashir&amp;field-title=&amp;field-isbn=&amp;field-publisher=&amp;node=&amp;field-p_n_condition-type=&amp;field-feature_browse-bin=&amp;field-subject=&amp;field-language=&amp;field-dateop=During&amp;field-datemod=&amp;field-dateyear=&amp;sort=relevanceexprank&amp;Adv-Srch-Books-Submit.x=17&amp;Adv-Srch-Books-Submit.y=16' this is VERY basic. You'll need to add more logic in here. Example, what if you want to search only for last name or first name plus last name etc
Wish it had some sort of module system included, CJS/AMD/ES6, something!
Eh, most of these are simply gratuitously/deliberately misunderstood. Deliberately ignoring the language syntax ({'a'} is a statement, not an object), or failing to understand floating point arithmetic (all the NaN nonsense) is both boring and common issues exist in most languages (and floating point in all of them). The only thing that this is demonstrating is bogus is the behavior of + and ==. Plenty of other people have had blogs like this that go over plenty more cases of bizarreness.
Unfortunately, no. 1) Simple comparison of a linear representation works only for canonical forms. JSON is not canonical: var a = {x: 1, y: 2}, b = {y: 2, x: 1}; // note that positions of x and y are swapped JSON.stringify(a); // '{"x":1,"y":2}' JSON.stringify(b); // '{"y":2,"x":1}' JSON.stringify(a) === JSON.stringify(b); // false IIRC, graph canonization is a separate problem, which is in general NP-complete, and impractical to implement in most cases. 2) JSON doesn't deal with common JS objects like dates, and regular expressions. Obviously it doesn't know about my custom objects. While it is possible to add custom replacers/formatters, they will require to produce a canonical form, which is not always practical (see above). 3) Performance reasons: JSON converts all components of potentially huge objects to strings (it requires CPU and extra memory taxing garbage collection, and introducing delays in interactive programs), while they may differ in the first property. Unification will stop right there. 4) Lack of variables: in most cases I want to know that an object's shape is correct, or it has required properties ignoring the rest, or I want to extract sub-objects while I am at it. Simple comparison of strings cannot do that. I need a way to indicate that I am interested in certain parts of an object graph.
Personally I star a lot of github repos as I discover them, and use that as my own lib tracking system, but when I need something new I have used unheap before and it was pretty nice, but not perfect. Some things your app is missing: * search: search the tags, name, description. If I search for "form", I should find what I'm looking for even if the lib name is dropkick. * filtering: * by github stars, followers, issues—you have the data, so use it. Only show me ones with less than 50 issues, or more than 50 stars, or that have been updated in the last year. * by dependency—I'd like to be able to find non-jquery libs, or AMD-ready ones, or what have you. Again you have some of this data displayed, but not usable. * order/sort by: I can't see how libs are ordered on the page currently. Seem to be by add date, which is meaningless to me as a user. Sort by alphabetical name or github data, or better yet, let me choose. * make lib names links to their github. The tiny github link at the bottom is easy to miss. * rather than highlighting No jQuery, instead make a dependency list that includes jQuery, require, underscore, or any of the other many many libs out there. We will see fewer jQuery dependencies in the future, and more underscore and the like. This will also be used for filtering/searching * sidebar category/tag list: Again it is arbitrarily ordered, making it confusing and somewhat meaningless to me. Segment it, or alphabetize it to get some order going. There is also a certain danger in using words like carousel which seems to mean 3-4 different things to different people. * I'm pleased that you have no pagination. Being able to cmd-F search in a big list is nice, pagination ruins that. * consider adding file size in the listed data. Would be useful, but not easy to keep accurate. And there you go, hours and hours of work ahead of you... 
And that's great if it refers to the titles you write yourself. In those you read, well, cliché is cliché because it gets recognized and most titles today are written to generate clicks, alas.
as you can see from my previous comment we've developed some cjs libraries that addresses some specific parts, if you still want to use MT we plan to move the code to cjs, using wrapup for generating the web build. as it is now since it exports to global you can require the server version as a cjs module, not the best things obviously. 
that's amazing.. Awesome work!
You can't escape! And you can quote me on that.
Great, so we get to bring the shittiness of AMD down to node, despite the fact it has a perfect and sensible module system in CommonJS. I'll pass.
that's pretty awesome! I recently participated in a hackathon and wrote a crawler myself to aggregate 140.000+ kickstarter projects. The result (WIP) can be found here: http://www.kickstarterinsights.com/map. It uses mongodb geospatial indexing and node js. You can ignore the dots. Click on an empty space on the map and increase the radius, you can see a summary of the projects in that area. [EDIT] The way i scraped all project urls is by using the following url: https://www.kickstarter.com/discover/recently-launched?ref=recently_launched&amp;page=1 You can find all projects by looping through the page number, scraping the urls and then scraping the project pages. Maybe you can increase the 61356 projects this way?
I feel your struggle my brotha. We are definitely all in some strange new territory, with reactive programming models enabled by streaming APIs, and a blurring of the distinction between client and server thanks to node and browserify. In addition to realtime becoming more 'mainstream', I feel that there needs to be some new architecture that emerges from this relative chaos.
I went full retard and just have a build.js script that I run when I want to build shit Seriously all of these scaffoldy, build framework contraptions are overkill
Isn't much worse than seeing ng-foo and ng-bar littered all over my html with some crazy templating DSL
I stay comfortably in the Ballmer Peak, my brotha
Perfect
Cliche considered cliche o_O
Here's a [magnet demo](http://codepen.io/maxkueng/pen/GpfbB?editors=001) that uses Victor.
It can be, yes. But hey, you'll learn something ;)
People got shit done with this playing on loop? Dear God I feel old.. :D
Cool, that's a smart way to reason about it. How are you planning to unwrap? Edit: https://github.com/kamicane/wrapup reading is hard :-p
Another big issue with prototypes is that they don't provide safe access to non-scalar fields (like objects and arrays), because assignments to non scalars don't result in shadowing. This is why if you have an array as a member on a prototype, pushing to it on one instance will change what you pop from it on another instance. The other issue, as people have said, is that you can't inherit private state. From my own experiences working in large teams, the underscore convention for private vars isn't strong enough; lots of people don't understand it and you end up with people making 'exceptions' quite regularly. Otherwise, I'm a little irritated by your post. You seem to have sneeringly dismissed constructors as 'obsolete' without really researching the topic in depth.
Learning a framework? Sure, eventually, if it fits the needs of a project your working on. I think your on the right path as it is just getting the basics down. I would suggest you keep building on your own until you really need a framework. 
I believe you're looking for `prompt()`. Your bookmarklet: javascript:location.href='http://thesite.com/before/'+prompt('Order Number')+'/rest-of-the-url' Just change the link so it points to the right place.
roger, Roger, what's your clearance, Clarance?
Why would you need to fake Object.observe for react? Isn't angular the only framework relying on that?
To be fair, that article is really only referencing the final insert that is mentioned in the SO answer. That is the problem with these arguments/micro performance benchmarks: I rarely see performance issues caused by a single point of failure (here is one great example where a single issue could cause problems http://www.html5rocks.com/en/tutorials/performance/mystery/)). Generally, a number of things are being done wrong that affect each other and the problem is compounded. Document fragments are nice because you can perform a series of actions on them and then insert them into the dom (as you mention, the method you use at that point rarely matters). The problem is that most people don't do this and instead read and write from the dom in succession, perform dom changes in the live dom, invalidate large areas of the live dom because one model value changed, etc. Generally, the people I see using document fragments are avoiding these things so it must at least provide a valuable mental shift.
This looks great. I think I'll use it right now, actually. :-D EDIT: Quick question though, how would you recommend comparing if two vectors are equal(or equal-ish b/c floats)? ANOTHER EDIT: Victor was basically a drop in replacement for the shitty vector library I wrote for my physics engine, w00t! Hooray for small modules that do one thing, and one thing well! THIRD EDIT: The diagram for the add method is pretty cool too.
Plus you can add a [keyboard shortcut](http://downloadsquad.switched.com/2011/03/02/add-a-keyboard-shortcut-to-a-chrome-bookmark-or-bookmarklet/) to your bookmark (in at least Chrome), to make things even more productive and easy!
There's also a [coursera course](https://www.coursera.org/course/reactive) by the creator of scala. I found it super useful, even though it's all in scala.
I beg to differ. Once you create a worker, you actually are creating a thread behind the scene in most implementations. Why can't be that, a threading model with a single point of communication (messages) That is the hidden beauty of js. No need to lock anything. Just one process/thread.
Wow thanks for the compliments! I'm planning on adding more interactive diagrams soon. I think for people who aren't mathematicians (like me) those are pretty handy. What do you mean by "equal"? You mean they have pretty much the same coordinates? You can use the [distance](http://victorjs.org/#distance) method. var a = new Victor(100.123, 50.334); var b = new Victor(100.002, 50.555); a.distance(b); // =&gt; 0.2519563 If you floor the distance you will get `0` if they are "pretty much" the same. Math.floor(a.distance(b)); // =&gt; 0 (i.e. pretty much the same) 
I back that dude ^ If you try to build a house, you start with the floor, not the ceiling. Learn the basic then read some more then go pick some frontend framework.
You do not make use of the answer from the prompt. What is "$"? (I know what it is, but do you? And, if so, why do you expect it to be available at the console? I suspect you simply copy-pasted something from the web and have no idea what you are doing.)
Also jquery is unnecessary here. You're not doing anything with the DOM so there's nothing you need document.ready to do. 
As far as the error goes, if that's the exact code you're using, you're missing several brackets.
TL;DR: If you write bad code, it won't work. Truly groundbreaking article.
Stumbled on this post, did a Google and that was the first result I found - the goto article really. Have to admit createDocumentFragment() is new to me but one I'll be using now - good browser support too (unless you consider IE6 a supported browser!).
It works in IE6 too :)
thanks! scala / haskel seem to be 'the languages' for functional programming - but javascript is language we use in the browser, so it's interesting to see the worlds merge. The complexity of those languages tends to put people off - it's not *really* OOP or MVC, but it *sorta* can be. The question is, what's the best way to program javascript in the modern era, 2 years ago everything was so different. We're hitting the up swing of the exponential curve on NPM, things are changing rapidly.
that's what I'm trying to do. This new architecture must be modular. The modules must be created first, the frameworks should combine the modules in ways that seem best. Some frameworks we use now are beginning to do this, allowing us to choose specific modules instead of entire package. It's like the architecture is just a pattern, an idea. With modules we can pipe them together for frameworks. Some people will have great recipes those recipes will become popular. Some will create build systems for build systems for libraries. NPM is growing organically and fast, we've hit an exponential jump in the last 2 years putting us at #3 in modules/libraries built in the ecosystem of computer science. The streams that underly the node programming are beginning to emerge within the browser environment. An app is a self-contained environment in browser, so if we want to replicate a backend in browser itself, the node style backends can be ported, to serve files/pages already loaded in the app (symbolically with event streams), hopefully async. It's weird. The app is in the app - the flow controls the UI events - very loosly coupled architecture (no two-way binding even thou it makes it so much easier to reason about in the short term). I learned the hard way, building an app in react- that was good, in 2-3 days. Looking back at it, I can't do anything with it. It's spaghetti, unreadable. Buidling an app, while your building it, we have a tendency to do it in a way we know works, that makes sense, path of least resistance. Taking a step back and looking at the architectural concerns prior to hacking, it's hard. It's hard for me to grasp these functional concepts. But once I refactored my code into a pseudo-flux arch - it was like a HUGE weight was lifted from my shoulders. Even though I don't fully understand what's happening, I feel like a mental load has left my mind - and I know from now on as I build, the loosly coupled architecture will allow me to maintain and understand my codebase for years to come. This style of programming increases what can be done, in the long run, if your goal is to build something that'll last for years, it needs something like this.
did they block your ip address at any point? how did you partition the crawl?
I would use the getDay() method like this: var submitHandler = function(event){ var today = new Date().getDay(); var userEvent = document.getElementsByClassName('weekday-selector')[0].value; userEvent = parseInt(userEvent,10); var difference = userEvent - today; // if user picks the same day if (difference === 0) difference = 7; else if (difference &gt; 0) difference + 7; alert('the difference is: ' + difference); } The select box should be: &lt;select name='weekday' class='weekday-selector'&gt; &lt;option value='0'&gt;Sunday&lt;/option&gt; &lt;option value='1'&gt;Monday&lt;/option&gt; &lt;!-- the rest of the days till you hit saturday--&gt; &lt;/select&gt; This should give the following results: If today is sunday (0) and the user picks monday(1) The difference will be 6 If today is thursday(4)(lol!) and the user picks tuesday(2) the difference will be 2 If today is friday(5) and the user picks sunday(0) the difference will be 5 days If today is friday(5) and the user picks friday(5) the difference will be 7(since we're adding 7 if the difference is 0 actually) I havent tested it yet. There might be syntax errors since I'm writing this on my phone. Hope this helps you a little bit. If you have further questions don't bother asking me/us 
Checking that the distance is less than some tolerance is probably better than just flooring it.
Can you check out this fiddle and let me know how I could make it work? http://plnkr.co/edit/F2BOfbj6MJ4oGCG713ZZ?p=preview 
Awesome, a 2D [vector library](https://github.com/wetmore/vectorjs/blob/master/vector.js) was one of the first things I made with js, although yours looks more complete and polished. Mine also has an extremely hacky type-checking ability.
Check out [elm](http://www.elm-lang.org).
I would avoid it, as your visitors might have an inferior experience than when visiting other websites if you crash their browser.
No, I meant should I report it or something
[Moment.js](http://momentjs.com/). /thread
Just make a proof-of-concept page on github with various social media links and publish it here and in /r/browsers to gain attention. 
Take away the ``object.onclick = `` so your function would look like: var linkButton = function() { location.href = 'http://thesite.com/before/'+prompt('Order Number')+'/rest-of-the-url'; } 
elm is awsome- I've played with it a little. Yet, it's not javascript - that' we're programming. Cojurescript is the reason I program JS, clojurescript - Om, I've been following David's blog for over a year. Honestly the popularity of Om surprised me so much (I don't read hacker news), I wanted to understand why, that's how the journey began :) I tried learning Om for 2 weeks, couldn't do it. Picked up react in 2 days. I don't have a strong academic background in CS, never programmed lisps or functional programs. I love the (), but moving away from for loops has taken months. My apporach, as of now, is to see how I can hack javascript to replicate Om/Flux. How do I program FRP in native javascipt? My issue with CLJS is that it's a subset of the closure compiler, which needs to be understood in detail before building apps in clojurescript IMO. My lack of academic experience is a hindrance - but I'm taking online classes and pick up on these things quickly. Not to mention I've listed to Rich Hickey lecture 10_+ times. I have the philosophical grasp, I understand why the architecture is seems like a no-brainer. Simple != easy, tha's the truth. It's alot harder building an FRP system than MVC, or go solo ala jquery. But I'm a stage in my career where I need to contribute to open source, and I've finially found that community - it makes me happy :) porting cljs apps into js APIS's may be of huge benefit. mori is fantastic - but simple. 
Is it on your website? or something that can be injected? Does this pose security risks? Can the technique be used for (moderate. peaceful protests?)
the website is really nice, good work
those are three lines of JavaScript that CRASH the computer, I haven't put it on my website, One way this can be used: Someone opens ettercap, he writes a filter to inject the js into every webpage on the network, he is also very careful not to open the browser, but the whole organisation is down pretty much.
I have created a POC, should I wait for Google to respond to me or post it here?
IE 10+, chrome, Firefox, opera, stock android browser, All Html 5 browsers
Uh, I don't think it's *that* hard to write a Javascript infinite loop that fills up memory with crap. I do it by accident fairly often.
...Or just use React and never worry about shit like this anymore
However, the op promises system-wide fault. I am doubtful, since devices OP listed have at least 3 different fault handling mechanisms. It's practically impossible. Whatever. 
Maybe seek out help from Stackoverflow.com to create a solution or figure out what you're doing wrong. 
Well it's kind of an implementation problem...
I bet your js loop won't crash the computer/ terminate all processes on android
We actually won the prize for 'Best Visualization'. The goal of the hackathon was to visualise the 'makers world'. They didn't block my ip address, I did use two different ip addresses to scrape the data. I started using this node crawler: https://www.npmjs.org/package/crawler but it ended up having a memory leak I couldn't fix so I changed it to a request which calls the next url when it's finished, so that was pretty heavy on connections. I used cheerio to extract the project data. 
I went to a JS talk last night and the guy showed us his js library that creates surreal numbers. https://github.com/coldhead/surreal.js/blob/master/surreal.js I took a snapshot of it. Pretty impressive. http://img.ly/yXFS Apparently Twitters lead dev did a code review on it. That crashed my browser pretty hard.
Google for "full disclosure".
Hanging up devices can be a security issue (e.g. making them lose their sessions so you can pick them up). You should disclose it in a reasonable way.
All browser vendors have security policies for triaging issues like this. In the interests of responsible disclosure, I would ask you to follow the recommended disclosure steps that provide the engineering teams time to understand and fix any potential exploit. Not only is this good for users, most browser vendors also offer bounties based on the severity. If what you're describing is accurate, you may be eligible for a significant bounty if you disclose responsibly. Please don't follow the advice of the person saying to post it on GitHub and blast it on social media—that's bad for users and you can kiss the bounty goodbye.
To contact the Chrome team, for example, visit https://code.google.com/p/chromium/issues/list and create a new issue. Make sure you categorize it as a "Security" issue; that way, it won't be publicly visible until the team has had a chance to patch it.
&gt; dblclick:leftNav.doubleClickAction Why is double to long to write out in the beginning but ok at the end, and why are the click camelCased at the end but not at the start? name consistency is very important if you want to make something for others to use.
just by including backbone in your index, you are already doing it wrong. No need to write any shitty Backbone code.
So it's ok to include it via an AMD loader then?
Well, the console is telling you the problem. You've got a colon at the end of that line.
Are you looking for [getElementById](https://developer.mozilla.org/en-US/docs/Web/API/document.getElementById)?
Maybe, How would I be able to apply it in this instance? Do I just put getElementById where I want it in the html file?
Bleh, nevermind... I was skimming the code too quickly rather than reading it. As far as I can tell you'll need two things: 1) an element (presumably an img tag) in the html with the id "pss" 2) a script call in the html that calls pssNext. You could use 'onload' in the body tag, but I've had issues with timing (I'm sure others can suggest clever ways to deal with the timing) so I'd just put: &lt;script type="text/javascript"&gt;pssNext()&lt;/script&gt; right at the bottom of the html, just before the body close tag. That should kick the script off and as far as I could tell it just loops. Make sure you've linked to the separate file correctly in the head so the functions are available to be called.
OK, I'll do that. does the bounty have an age minimum (I am 14)
Good suggestion! Will implement!
I use it to run several websites right now, makes things so much easier to administer. 
Or with Browserify
I didn't add any type checking. Would it be much of an advantage if I added it?
Thank you! Btw, you can drop "gold" when you click in the header and the Victor space ship will collect it :)
I'm actually currently trying out a build tool called [Broccoli](https://github.com/broccolijs/broccoli) that seems promising. Gives you that easy-to-follow and chainable logic of Gulp, but without using streams. One of the authors wrote [an article](http://www.solitr.com/blog/2014/02/broccoli-first-release/) for its 0.1 release (now at 0.12) that is worth reading if he only because he highlights some of the limitations of both Grunt and Gulp.
This looks very heavy. In contrast to this: https://github.com/SeanJM/dingo
With angular :-)
relevant username
Broccoli is a nice reimagining, but like it says in the article, transforming files is just a small part of running tasks. Much of that we have in our build files is about other things then minifiying or rendering CSS, and Grunt does that very well (with the insane back catalog of plugins). That being said they note Broccoli would work well as sub-plugin in Grunt, I might give that a shot sometime.
I'd love to see this code. I'm skeptical. 
This makes no sense at all Just bulk-rename all your own .js files to .ts and you are good to go. What is the worry about Angular? Why would you even pull that through the compiler? It is external library, compiler has no business there.
How does this relate to like `noflo`?
Re: memory leaks. Use listenTo and stopListening. 
Agree
Nice library. Well documented and good site. Here are some suggestions and nitpicks: - You define the instance members (like x and y) in the constructor, so you don't need to also attach them to the prototype. - You shouldn't use `|| 0.5` for a "default value" if 0 is a valid argument (like in the case of `Vector.mix`). - I'm not really a fan of the `!(this instanceof Victor)` pattern in your constructor. It makes the constructor unusable to anything else; and seems like it could be harder for JS engines to optimize. [Here](https://github.com/mattdesl/klasse#example) is a code example where a constructor can be useful to other classes. - For performance it's always nice to include the squared version of distance and length. - When chaining, I tend to use short forms like `len`, `dist`, `distSq`, etc. These are nice to have. - a `set(x, y, z)` function would go well next to `copy(vector)` - Your `normalize` function performs two square roots; it really only needs one - one feature of gl-matrix and [my own lib](https://github.com/mattdesl/vecmath) that I tend to use a lot is `random`, which actually generates a unit vector evenly distributed in a circle or sphere. Just a thought.
Internet pro tip: don't admit to that publicly on the internet.
The javascript isn't the problem. The page located at http://www5.pacelink.com/paceweb/locatorframe.jsp takes forever to return results. Your problem is server side.
The slowness you see here isn't the popup, its the JSP that is loading into the popup. You may want to look into query caching.
Well, the slowness seems to be comming from the iframe that it's loading. Look at the results [here](http://www.webpagetest.org/result/140522_1Q_MF3/1/details/) from a webpage test and you see that the time-to-first-byte is 13.579s which is extremely slow. Your problem is on the backend, not on the frontend. The server returning the results is running Apache Tomcat (Java), I'd start looking at the load that server is under, and if it does not seem to be related to a hardware bottleneck (maxing out CPU or RAM) you need to start looking at the Java code driving that view.
Check for hardware bottlenecks first, and if that isn't the issue you need to get someone who knows JSP.
That's because you're not passing any parameters to it. If you use a fully constructed URL (such as what's being loaded into the iframe), http://www5.pacelink.com/paceweb/locatorframe.jsp?zip=90210&amp;distance=100&amp;submit=Find+a+Dealer&amp;numlocations=6 you can see that it's just as slow. In all likelihood, the JSP has a very unoptimized query running to get the results. The only option is to dig into the JSP to figure it out.
That isn't much faster for me. The search page loads ok, but the results page is also very slow, [here](http://www.webpagetest.org/result/140522_NM_MX7/1/details/) is a webpagetest done on a results page from the page you linked.
To make a proper recommendation I would need to know what technologies your entire stack is running on and how they work together.
Gotcha. Thanks for your help. Unfortunately, the JSP is all held server side, which I don't have access to, so I'll have to pass it up to my boss. 
Fantastic. Drag and drop is always a pain in the ass for frontend web developers. I hate having to remember which events to prevent default on, finding decent mobile support, fighting with performance, and actually using other libraries is *always* a pain. This library defines itself with AMD, works well on my mobile phone, and the API looks sane. I'm excited to try this out. Hopefully Dave adds tests in the future or someone else helps along by providing proof that it works as advertised.
I guess your client uses some older version of MSIE. The easiest way to find out what went wrong is the Console (F12 in any decent browser). There you'll find an error message including a line number. What I find now is that main.js cannot be loaded.
I think the require.js alike configuration is a great point for AMDrequire, that way it can use AMD modules that call other modules. That's is why I couldn't use amdefine.
I try it on IE6, IE7 and IE8, and they work fine. What browser is your client using?
I use [Gator](http://craig.is/riding/gators) when I need tiny event delegation.
I have no idea how any could seriously believe the codebase contained 500 millions lines of code in the first place.
Also, don't tie your front end to your backend via the models. Just don't. You will hate your life.
But soaked in pretentious sauce. Who is doing the considering? Why do they write it as if there is a industry wide consensus? Should be "I consider XYZ to be harmful" or "3 reasons why XYZ is less then optimal"
Yes. We need it to burn away pretentious clickbait.
Wow, this project manager, or whoever made that statement is going all out to cover their ass.
It would make sense to tell us what browser your client is using so someone here can replicate.
Your problem probably lies in the style attribute. Opera has caveats. And that is probably the browser that your client is using. See below for details. https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement.style
As I said, it's meant to generate clicks, not to be reasonably solemn.
Tell them to dump their browser's cache. It's likely they have an older cached version if the update was recent. ALSO: It's considered poor form and un-semantic to nest content into anchor tags (similar to paragraph tags, it should only contain text and/or images). You'll likely have some challenges getting positioning right when you have a lot of content inside an anchor tags. Lastly, why all the tables?
You could also try adding INDEXES to your database table. You said that the page SUDDENLY was slow. I think it’s because your Database contains to many rows. If you add indexes, your DB should be faster. Also consider Query Catching and check if your Server has at least twice as much RAM as the DB’s size. Good luck.
I definitely agree with your assessment, especially since they listed XML as a programming language.
I would think that the JS the site uses in minified, which would put most of the JS code in 1 line, and I think the breakdown was by lines of code. I wonder what the 'true' amount of JS code there really is...
Based on jQuery, which is almost 100kb minified VS 322kb gov: * Source: 9675 lines * 3.22 = 31153 lines * Tests (excluding external libraries): ~16000 lines = 51520 lines (assuming it's well tested)
awesome library!
It does. This exists because it allows one element to handle multiple events. data-dingo="event1 event2 event3" As well as passing arguments. data-dingo="event1{arg1:value1} event2{arg2:value2} event3{arg3:value3}" If you see the value, it's for you. You don't... you don't...
Really cool tech demo, but I'm pretty leery about sharing my entire screen. As a user I wish I could confine it to a specific program (i.e. current browser window). As a dev I wish I could generate a "screenshot" of the current viewport position inside a document or the entire document itself. Hell, as a dev I wish I could generate screenshots of arbitrary document dimensions. That would be amazing.
Well first you'll start getting Mint.com warning e-mails telling you that you're spending about three times as much on "Alcohol and Bars" this month than normal.
Backbone provides mechanisms to sync your models to/from your backend data stores using fetch/save, etc. What this means, in theory, is that if you change a model on the front end, it will automatically make a call to your backend to save the changes. Likewise, refreshing your models with backend data is the same as if a user changed the model on the front end. However, it makes some hefty assumptions about how your backend is structured. It expects a RESTful interface. This isn't terrible, however it also expects a very specific URL structure that is outside the scope of merely being RESTful. It expects your data to be formatted very specifically, e.g. must be JSON data, must contain an id field named id, etc. If your backend API deviates even slightly from those expectations, you will feel the pain. And in general, that level of vertical integration couples things too tightly for my liking. 
My original comment was made in the context of "tiny libraries for event delegation," which is why I said dingo doesn't make sense because it depends on a monolithic library (jQuery). Looking at dingo further, I find it's unnecessary overhead for something that can be accomplished using existing tools. Furthermore, with zero tests, I can't trust it. But more power to you if it meets your needs, and kudos for open sourcing it!
A couple of things off the top of my head (by no means a comprehensive list): - Rock-solid routing. I don't think many people would call me out for saying that Ember's router is the best-in-class, gold-standard of JavaScript framework routers. - A very nice, declarative view layer. Calling an API "declarative" makes a lot of people cringe, but it's still a meaningful statement. Ember makes you feel gross for trying to use imperative logic inside your view layer. By doing things "the Ember way" ("the X way" being another cringe-worthy phrase), you end up with a nice separation between imperative code in your routes and controllers, and declarative code in your view layer. I find that having this separation makes my code easier to reason about. - Components are a nice abstraction, and easy to test. One that is being incorporated into more and more frameworks. - Promises. (Nearly?) every asynchronous Ember API is promise-aware when plausible, which is a huuuuuuuge win.
&gt;assuming it's well tested That's a hell of an assumption, given how the site rolled out. On the plus side, as a pretty new developer, it's kind of cool to look at that breakdown and realize I know how to program in all of the major languages used for such a massive undertaking as healthcare.gov. I don't know why that would surprise me, necessarily, but it's cool to know that it's really a process of refining my skills at this point.
The Ember router is heavily imitated, which may account for it not looking too different from others. In terms of how Ember is opinionated, it's primarily in terms of application structure and organization. It's as much about what it makes easy as it is about what it makes hard. Models can't see controllers, controllers and models can't see views, templates can only have very limited logic, etc. If you want to force it, you can, but you really have to go out of your way. These decisions were made by the framework authors to try to keep users from shooting themselves in the foot. In Angular, it's easy to throw whatever you want onto $scope, like people used to do with window. If your team is very disciplined, and up on best practices, you can avoid trouble here, but the framework does nothing to stop you from abusing it, so over time, it's probably going to get abused, and it's more likely the more people you have touching your codebase. In Ember, the organizational best practices are largely baked into knowing how to use the framework at all. Because things have such clearly defined roles, and Ember is prescriptive about where functionality should go, and what things should be named, it makes adding an Ember developer to a project pretty painless, similarly to how you don't have to tell a Rails developer where the config and model files are, for example. There are a lot of neat facets to the Ember runloop and computed properties. They're automatically memoised, and there's some great functionality with array CPs that help you avoid iterating over the whole thing when the contents change, which can help a lot with performance: http://emberjs.com/api/#method_reduceComputed There are also some great tools being developed by Ember core team and community members. [Ember CLI](http://iamstef.net/ember-cli/) is shaping up nicely, and the [Ember Inspector](https://github.com/emberjs/ember-inspector) really helps with development.
Promises, promises everywhere!
More XSD than XML?!
There seems to be a problem with the redditreveal plugin in firefox. More info here: http://www.reddit.com/r/bugs/comments/268g15/error_live_is_not_a_function/ 
Nice. Coincidentally, I just finished adding JSDoc annotations to a 3D vector / matrix library I did. I'm curious, is your documentation manually written, or is it generated? Some of the wording and such doesn't quite seem to jive with your annotations, so I'm thinking it's handwritten? And... is that JSDocs, or is there some ad-hoc stuff going on there (e.g. @api doesn't seem to be standard)?
[It isn't?](http://en.wikipedia.org/wiki/XSLT)
This sounds neat, but I'm still not sure I know what I'm looking at.
thanks, i forgot to mention i had that plugin as well.
yes, I found that two days ago! It's just plain awesome :) For me it worked with right-click (windows)
He said XML, not XSLT.
Thank you! This is very valuable feedback. &gt; You define the instance members (like x and y) in the constructor, so you don't need to also attach them to the prototype. Yeah, I basically added them so that I have a place to add the docs in the file. They are not necessarily needed but they don't hurt either. Or could they mess something up? &gt; You shouldn't use || 0.5 for a "default value" if 0 is a valid argument (like in the case of Vector.mix). That's absolutely correct. Will fix it very soon and use `typeof !== 'undefined'`. &gt; I'm not really a fan of the !(this instanceof Victor) pattern in your constructor. It makes the constructor unusable to anything else [...] I didn't think of that but yes, it will break inheritance. Will fix that too. I'll have to change many of the examples. &gt; For performance it's always nice to include the squared version of distance and length. You mean just without `Math.sqrt`-ing them? What would be a situation where those values would be useful? I can surely add them. Will put them on the list. &gt; When chaining, I tend to use short forms like len, dist, distSq, etc. These are nice to have. I wanted to go with full names because I believe it makes it easier for people to understand what a function does. It also prevents some confusions like whether "dist" means "distance" or "distribution". It's a bit verbose but it helps. After all, it's already pragmatic. I didn't name it `getDistanceBetweenThisAnd()` :) But I'll keep it in mind and will add aliases eventually. I just have to be consistent and add them to all the long-ish things. &gt; A set(x, y, z) function would go well next to copy(vector) That's true. The components can be set by just assigning values `v.x = 3`. But a `set` method to set them both in one go would be nice. It's on the list. &gt; Your normalize function performs two square roots; it really only needs one. Good eyes! Will optimize. &gt; One feature of gl-matrix and my own lib that I tend to use a lot is random, which actually generates a unit vector evenly distributed in a circle or sphere. I want to add this. Just haven't yet had time to figure out how. I want to add one that choses a random point within a circle that "knows" that the circle has more possible points towards the outside. I also want to add one that puts it randomly on the "border" of a circle. I think the latter is just pucking a random angle. Thanks again! This was great. I want to make this library as accessible as possible to people who don't know so much about vectors yet (like me, I'm learning as I improve the library), so I want to have a good and appealing documentation and add more interactive visualizations of the functions. I think that if I can learn to understand a function I can make a visualization so that somebody else can understand the function too.
I don't think the Google Directions service supports jsonp. Try using the the [google.maps.DirectionsService](https://developers.google.com/maps/documentation/javascript/3.exp/reference#DirectionsService) object instead. var directionsService = new google.maps.DirectionsService(); directionsService.route({ origin: new google.maps.LatLng(12, 34), destination: new google.maps.LatLng(45, 67) }, function(data) { // response data });
We're currently using [markdox](https://github.com/cbou/markdox) to generate [documentation/api.md](https://github.com/maxkueng/victor/blob/master/documentation/api.md) but it's ugly. Our inline docs also need to be updated to the state that the website has. The website is completely hand-written (in [gh-pages](https://github.com/maxkueng/victor/tree/gh-pages) branch). The examples are [a bunch of separate files](https://github.com/maxkueng/victor/tree/gh-pages/examples). Though, markdox uses [dox](https://github.com/visionmedia/dox) to parse the documentation comments. I want to use this to generate the documentation part of the website. I just don't have time at the moment.
They're both in the infographic.
How new is this? I'm on Chrome 34, and I'm not seeing it.
The number of XSD, CSS and Maven locs are what trouble/surprise me with this picture.
I think it's new to Chrome 37 (Canary build). I think a lot of folks wanted this - I put in a request for it not too long ago: https://code.google.com/p/chromium/issues/detail?id=327109 Here's a video of it in action: http://www.youtube.com/watch?v=qALFiTlVWdg
Wow - that's cool. Yeah it's not happening with v35 stable on Linux, so something for the future. Rather smart.
Isn't this the thing that allows remote users the ability to gain control of your computer? Not worth opening that attack vector... edit: idk tbh, sounds like something I might have heard before. Take with less than a grain of salt.
Isn't this what firebug had for ages?
Writing tutorials is mostly a thankless task. Just the fact you took the time to do it is worth a lot. I *glanced* through it. The first two parts are slow and easy going; the third (and currently last) one is a massive leap. I think it would be worth breaking in two or three parts. Because Javascript can be executed on the web, there is no reason in my mind why a javascript tutorial should not include demos of what is being done. Here's one that is extremely well done: http://billmill.org/static/canvastutorial/
A similar trick that is great for UI debugging. The symbol $0 always points to the last element you had selected in the inspector. So you can, for example, right click something, "inspect element", and `$($0).css({ 'apply': 'some', 'styles': 'here' });` Edit: of course my example depends on jquery too, but $0 works without jquery too, i.e. `$0.innerHTML`
I think you misread the chart. Healthcare.gov is not 322kb - it's 322k LINES of javascript.
You'll be fine, I was just doing it to mess around.
There are links to the demos, i.e. http://codepen.io/anon/pen/ACvnE I don't think there's a leap. The first two are so short, because he is only giving the basic concepts. Then you have enough knowledge to have one example. If he moved the key bindings to part 4 it would consist of 2 sentences which is stupid.
I don't know that library well enough but from what I understand it just renders the HTML elements in a canvas. I am not sure where you get the remote control part from.
Also works in reverse! Given: &lt;p id="foo"&gt; ... &lt;/p&gt; Running this in console will select it in the Elements tab: inspect($('#foo')[0]); That's not a jQuery `$` either, it's the dev tools shortcut for QS (and `$$` is for QSA). More here: https://developer.chrome.com/devtools/docs/commandline-api
Hrmm, I think I like watches better, though there's likely some use-cases where this might be better.
Sorry, I missed the links as I glanced through.
This isn't at all related to your problem -- in regards to that the problem identified by /u/Trakkasure with Opera seems most likely... the JavaScript you do have is quite simple and I don't see it failing in IE. You don't really need JavaScript for this -- another method to accomplish your functionality is to add a data-* attribute for the name you want to show and use css to include it when hovering. [Browser support for this method is pretty good](http://caniuse.com/#feat=css-gencontent). &lt;a href="..." data-name="Michael Cera"&gt;...etc...&lt;/a&gt; &lt;style type='text/css'&gt; .vids a:hover:before { color: #FFFFFF; content: attr(data-name); font-size: 20px; position: absolute; } &lt;/style&gt;
Ctrl-click is how you right click on osx if you're silly enough not to enable right-click in system preferences ;)
It's working in my win32 Chrome 35 build, stable channel, no weird flag tweaks. *edit: and in osx chrome 35 too. 
I just found out today that you can de-minify javascript today by hitting the {} in the Sources tab. Maybe someone else will find that useful.
Maybe I am thinking of something else...
Then don't use backbone.js. I don't understand what your problem really is. If you want a fork, don't use a spoon and complain that it's not a fork.
Yeah tried that - might be late to the Linux party with this update.
More of a formatter than deminifying. Could still be illegible. 
You should check out Browserify/NPM. The nice thing is that you can decouple many parts of your application; like image processing and other general-purpose OS utilities, and others can then use/improve the same modules in their own projects. In theory, the same modules could also be run outside of the browser, on Node. Even things like a GUI toolkit would be well served as its own module, to decouple it from the rest of the OS architecture. If nothing else; browserify and CommonJS gives you a nice way of splitting up your code into many JS files, rather than a single string of spaghetti. :) 
just found out op is 14 
Nice! I'd love to see drop targets, and reordering lists, that type of thing. So hard to find something that has everything...
Christmas came early! Can't wait to start using this.
Your found variables will be an array or null. So you need to do found[1] for example.
Seems to only work with arrays and objects.
Also good to know: $1 stores the element you looked at *before* the last one, and $2 stores the one prior to that, and so on, up through $4. And another great one: $_ holds the result of the last expression you evaluated in the console.
I'm a big advocate of using JS when needed. This can be solved within CSS. 
Since I am a JS noob, what purpose does it serve practically? Aren't global objects or variables supposed to be bad?
* The router and how well routes' models will play with data, whether from Ember Data or the old-fashioned way * Components! Web Components are very clearly becoming part of the landscape of web app development, and Ember's components are the best implementation of the abstraction that I've seen. They make playing with D3, for example, very straightforward. * Extensibility of model on routes (with beforeModel, afterModel, setupController, among other things). Recently had a case of fully dynamic and streaming API. Ember played really nicely with http://oboejs.com/ to allow for a really smooth realtime model. If I was doing this with another framework, I might have to run refresher calls on the model just to get things to update in view.
Hah, ctrl-click is more generally applicable than two-finger-click, so that's what I put. I haven't used left *or* right clicks for about a decade.
Right now it returns as an array, and that is fine, but I was hoping it would return only my capture group, which is the value of the array. I ended up getting it to work in PHP, but I was hoping for a simple solution in JavaScript. Thanks for the reply.
Thanks again! Everything you say makes sense. Of course for comparison you don't need to square-root both values first. Smart! I have just gotten rid of the `x` and `y` properties in the prototype, added `lengthSq` and `distanceSq` and optimized the `normalize` function and updated the site accordingly. Oh and tye `amount || 0` problem. I will tackle the other things later. I really appreciate your comments. It's rare that somebody gives you such constructive feedback. I just saw your [Triangulated text effect](http://mattdesl.github.io/fontpath-renderer/demo/tris.html) demo. Sooooo cool!!!
TBH... I'm not surprise anymore. With SASS and poor practices, you could easily generate an ass ton of styles that are all nonsense. What the CSS community needs to look into is a way to consolidate better. Too many times I run into two exact styles that have specifiers like "#somethingContainer #somethingWidget button.close" and "#anotherContainer #anotherWidget button.close"... Not to mention the ugly abuse of identifiers for everything.
Okay, but the JS library is &lt; 100 lines of code, and uses an API that's designed for just this purpose. The title seems ridiculous to me, in that respect. I mean, I could wite an article entitled "making phone calls with Vanilla JavaScript", and have a sample that uses Firefox OS to dial a number, but I don't think that'd be particularly honest. 
Testing doesn't mean "working like it should". It's not a magic bullet where you can say you have 100% coverage and the site works beautifully. This is one of the things that's really starting to bug me with people and their obsession with TDD around here. It's not going to make the experience magically any better... Especially with the tests I see on a daily basis. It's simply another complication to programming where more garbage in doesn't mean less garbage out.
While globals are generally bad in code that you're authoring, when you're debugging and experimenting in the console, they're totally fine and quite useful. In particular, if you're logging out an object in the middle of code that doesn't expose a global, this trick would let you basically expose the object conveniently without having to edit the code to do so, for quick and simple experimentation and inspection.
Agreed, but fyi, on mighty mouse &amp; mbp trackpads, the right side of either is a single finger click (bottom right corner on trackpad). Tap that bottom right corner of your mbp trackpad and you'll see what i mean. http://i.imgur.com/IW8simF.gif
See this: http://jsfiddle.net/SSz6Z/3/
Most of the time I use console.log to see how far my application runs till some error hits it. With this neat little trick I’m able to do further debugging of Objects I printed with console.log since I can access it right on the console. Glad somebody posted this because most of the time I do sth like this: console.log(myObject); window.myObject = myObject; Now I don’t have to pollute my code anymore :) Since the object is only in the global namespace for this single request, you just have to reload the page and it’s gone :) 
Very nice! Thank you so much for your help.
But where are they getting these numbers? If you actually go view the site, they have an all.css that's only 10k lines and it seems to apply to most pages that I viewed. This is incredibly unbelievable as it's just one guy saying it with absolutely no proof.
Go look at the actual site and tell me where all of this JS/CSS is hidden because I'm not seeing it anywhere. Without proof or any breakdown at all, I'll just assume this guy is lying to get hits. edit: Check out the original post from the "specialist". They're counting blank and comment lines as part of the "source". 130k lines of the Java are comments and blank. 160k lines of the Javascript are comments and blank. Also, the file count looks fucked up too. 1600 Javascript files? 200 CSS files? I've worked on large projects and have never see that amount of files anywhere. Considering how they're counting LOC, I'm going to assume they're counting everything else under the sun too, even if it's not related to production code at all. Again, this is just a bullshit number someone decided to use to get some clicks. It has nothing to do with how good or bad Healthcare.gov is. Please take it with a grain of salt.
I'm not sure what purpose would be served by hoisting an immutable string or number up to the global scope in the context of debugging
Pretty new.
Useful for setting breakpoints though (but why are you trying to debug minified code?)
Like the other person said this can be done with CSS and should be done with css. my opinion. As far your JS goes: 1. Use JSLint or JSHint for code quality. 2. The "functions in variables" is normal. 3. I'm a fan of one var at the top of your function with comma separated variables but thats a preference. Ex. var alpha = 0, beta = 1; 
You're welcome. If incase you're using bash, the shortcut works there as well. Much better than typing 'clear' everytime!
The doge meme has run its course.
Trick1 : The DevTools support prettifying of minified JavaScript to a more readable form. Go to the Sources panel and selected your desired script from the scripts list and then press the "Pretty print" button {} (marked with curly braces) from the bottom of the DevTools window. Trick 2: This trick could have saved me a lot of time. If you want to search across all of the files loaded for a page for a particular string, you can load up the search pane using the following shortcut: Ctrl + Shift + F (Windows, Linux) Cmd + Opt + F (Max OSX) 
We have an Angular SPA with a node backend. Currently we test as part of a grunt task executed as part of our 'build'. This testing executes unit tests with karma, and then lots of UI driving with protractor. Finally we use Phantom JS and some plugins to take snapshots of the UI and compare them to what they should look like.
dafuq
We have this paired with [packery](http://packery.metafizzy.co/), it's beautiful.
yes, I am proud Angular dev. Used backbone on one small project and one big. Never ever again.
I've got `alias clear="echo 'You know better than that. (Ctrl+L)'"` in my .bash_profile for that reason. =)
OP, you can even modify values at run time. 
A sure sign that I should be asleep is that I read "illegible" as "illegal", and had half a reply typed out (basically amounting to "wat") before I realized my mistake. 
but always 1000x more legible than before
if it's not yours
My team is working on an AngularJS app as well. We try to make it as angular-ish as possible so everything go in directives, services, etc which makes them pretty easy to unit test. We use a karma + jasmine combination to test almost everything. For example, all the functions exposed to the outside by the services are tested. We are yet to do any end-to-end testing though. Still learning to use protractor.
Sounds like he's viewing the sizes of the directories regardless of whether the code is used or not.
- Conventions. I've seen other people's Ember apps, and just by looking at their templates and routes I can get a very good sense of where things are in the rest of the application. This is because many trivial decisions (mostly related to wiring things together) have been made by Ember + are thus common across applications. - Computed properties. The fact that every object is observable and that accessing computed properties (functions based on other properties that return a value) in templates looks the same as accessing regular properties (by way of the uniform access principle) gives you an extremely easy, declarative way to specify + access your dependency tree. - The router + Ember Data. The router gives you well-defined objects that manage fetching data in response to either page transitions or user events. ED gives you a serialization/adapter layer that essentially lets you completely change how data is sent over the wire; your client-side data could be modeled one way, and your back-end could change from relational to document store, and you would only need to make a change in one place. So the router + ED is a powerful combination of objects with precisely-defined roles that help you manage the data in your application - one of the biggest pain points of building these types of applications
As someone who uses both, this discrepancy drives me bonkers
It has many nice features like an eventing system, URL routing, history management, and a nice system of integrating models with views. But there are some things that aren't as nice so i don't use them. I don't want to throw the baby out with the bathwater though.
Aside from the technical features, like promises everywhere, an excellent router and data binding, which have been mentioned by others already, I really like the fact that Ember.js is an opinionated framework with strong conventions. Hiring and working with Ember.js developers is a smooth experience compared to Angular or Backbone devs. Disclaimer: I have not done any research, this is purely my feeling. Angular and Backbone can be used in many ways. When you discuss with devs familiar with them, you see that everyone's formed their own opinions on best practices instead of Angular or Backbone providing them. This quite easily creates friction in on-boarding and day-to-day work as continuous discussion around conventions and "what is the best way to do this" arise. While I enjoy these discussions and I love learning and teaching, I'm rather business-oriented and would rather just get things done and move forward with our product :)
A reference to a HTML element doesn't work either. However, if you put this element in an array, it works.
For when even a simple copy&amp;paste is too much effort? I don't know how often you copy code from snippets from the web, but if you need an additional plugin for that you are doing something wrong.
+1 uniform access. This has always bothered me about Angular templates. This still bothers me about Ember observers, since they switched to lazy eval on CPs (if you never get() a computed property, and it's not in a template [or, say, your designer removed it from a template], observers on it won't fire -- leading to on("init") calls just to eval the CP, just to be safe).
Oh very nice. That's another one.
How's packery's stacking logic compared to isotope? Been playing around with a reddit cors / isotope - http://codepen.io/kamiro/full/qLwru .. and while the stacking is pretty good there, I'm not 100% thrilled with it.
/r/learnjavascript
thanks for your feed back. Here is the use case, say you are reading angular JS official tutorial. There are lots of sample code you need paste to finish a chapter (https://docs.angularjs.org/tutorial/step_00). This plugin may help. What do you think? 
Thanks mate! 
CSS Filters would be great, and I think this is a perfect opportunity for progressive enhancement. The black and white effect probably does not make or break the user's experience on the site, so I would feel totally comfortable enhancing to use the grayscale filter as long as there's an additional indication of "hover". Another consideration: touchscreen users will never see a hover state. They will only ever see the black and white version, because there is no concept of hover on touch devices.
Ok, I agree, for cases like tutorials, blogs or similar reading where you want to do this more often it may be useful.
[This page is misleading](https://s3.amazonaws.com/ksr/assets/001/956/980/4a4e8ce6790acc67eeec9ed3881f2f85_large.jpg) and contains at least one factual error: // assign the same value to 2 different // variables var box2, box3 = 24; that's not what that does. ------ I like the concept though.
What do you think about putting all my images in a sprite sheet, and then simply changing the background position on hover? 
I think you're assuming something is universal when it's not. I just opened Chrome, logged into Reddit without checking "Remember me", then closed the browser, then opened it again and went back to reddit and I was not logged in, so the cookie was deleted. 
You may be right, although I was going off my own PC and various complaints online which led me to this: https://code.google.com/p/chromium/issues/detail?id=128513 It makes it sound like the default is for session cookies to be maintained, but the user can choose to have session cookies deleted if they want (ie: I can't rely on session cookies being deleted).
Thank you! I didn't know this either, and I could really, really use this so I don't have to keep exposing variables in the JS.
I'd like it more with several examples of each concept.
According to that, the cookies are not deleted if you have chosen "Continue where you left off" for the "On startup" option under settings. I have chosen "Open a specific page or set of pages", so mine are deleted. I don't know what the default is, I would assume it's "Open the New Tab page" in which case session cookies are also deleted. It does seem like a very questionable design decision, but according to the comments it was made deliberately so as to err on the side of always being able to restore the session, and they aren't budging. 
ITT: javascript gold.
I completely agree with you, however... I also think it's very good for beginners (I'm sorry if you're not actually a beginner /u/redguardtoo) to host their own public, real project on github. Handling users and bug reports, pushing releases, updating the changelog, etc. are all integral skills IMO, and there's no better way to learn than by being the master of your own project.
Neat little trick! Will definitely try this out
Thank you, brave warrior of /r/javascript/new.
Ctrl+L works on OSX as well. Don't bother yourself remembering different commands when you can use the same :)
Chrome too: check the examples from the post, the file and the line is at the right side of the console. It also have a option to add a timestamp to every `console.log` call. The only missing feature for both is showing the column, not only the line.
Your repository code is a pleasure to read.
For single page applications, the criteria for choosing a framework should include at (or near) the top of the list the following criteria: 1) ease of adding new features 2) ease of maintaining or enhancing existing features 3) reusability of code / features 4) in your case, needing theme-ability, strong separation of the JS implementation from the presentation (css) jQuery is a collection of methods. It's valuable, but provides nothing for the above four requirements as it imposes no architectural / design patterns. Backbone, React and Knockout are a step up. Angular provides more, and Ember provides the most components and architectural convention. Which you pick depends on your comfort level with providing your own code to fill in missing gaps and comfort level with the size or conventions the frameworks impose on you. Personally, I typically end up with Ember or Angular (usually Angular). As for the server-side framework, single page applications typically need a server for three things: 1) serving static assets (html, css, js) 2) providing access to data via some sort of API (typically, JSON via AJAX requests) 3) providing persistence of data changes (writing to sessions or databases) My suggestion would be to avoid Zend and CodeIgniter; one does too much while the other doesn't do enough (especially around good database practices). Symfony gives you access to the assetic pipeline for managing your scripts, if you don't want to do that with node/ grunt / gulp, and also (iirc) comes with Doctrine, which helps manage your database. Django, Rails and other RESTful type servers are all appropriate as that's what you're really looking for- creating an API. There are tons of good options; other alternatives include something like Firebase or Dreamfactory (haven't had much luck with the latter myself, though the premise is solid).
unless I'm behind the times yoman grunt and requires are not frame works in them selves. yoman and grunt and build utilities no? and requires is an AMD loader. Has backbone fallen out of the love tree? 
...and Karma is a test runner. I'm not sure what the parent is smoking.
Wow, this is convenient, as I was looking for a workaround for caller | callee not working in strict mode.
You can even make a single page application with vanilla js or jquery is you know what are you doing.
As someone who (almost obsessively) needs to clear my terminal windows to maintain focus - THANK YOU! 
vue.js ftw
That's awesome - congratulations. Right on though - thanks for the input. Is any of the code on github?
setTimeout to delay code running by a certain period. That code then has commands to create DOM elements and put them on the page 
-- force
that's another solution that would work well
http://durandaljs.com/ Been using this for few month. Seems very simple and builds on frameworks I'm already familiar with - knockout and requirejs.
You can create the grayscale image at runtime usign a canvas and applying a grayscale kernel to the pixels. Once generated the grayscale image, you can dynamically write the stylesheet and swap the background image using datauris on :hover.
Set the Expire or the Max-Age attribute to the session cookie.
Try this: for your img tag, use the html5 data element prefix when you generate the tags: &lt;img class="imgswitcher" data-color="example-color.jpg" data-bw="example.jpg" src="example.jpg"/&gt; then: $('.imgswitcher').mousenter(function(){ $(this).attr('src', $(this).attr('data-color')); }) .mouseleave(function(){ $(this).attr('src', $(this).attr('data-bw')); }) Do the same thing with the captions. 
I suspect this particular example is produced using CSS transitions.
How is persistence being done? If it's RESTful and has a well-defined domain model, BackboneJS might be the choice. If you're using sockets/long-polling, I've found AngularJS's non-opinionated approach to be easier/faster to integrate in the short-term (though this doesn't absolve you of defining your domain model, just makes it easier to get started).
This has all kinds of unintended security implications.
Dude just figured out about while (true) or something.
Bitwise operators only work with 32bit ints, so your floats are being converted.
See [ES5 Section 11.10 step 5 and 6](http://es5.github.io/#x11.10).
Chrome dev tools as well but maybe hes talking about Node.js?
Yeah after reading that book, all i use is plain javascript or jquery to make single page apps. Is all is about how you modulate your project and less about the framework.
I'm a node js dev, but quite skeptical about the methodology used in this article.
This is weird - I'm pretty sure that at least some flavours of Googlebot have been executing at least *some* JavaScript on sites for years now. Since at least around 2010 in fact, if their own statements on Googlebot's capabilities are to be believed. In fact wasn't that a major part of the reason why they started switching from dumb HTML parsers to headless builds of first Firefox and then Chrome way back around the time Chrome was first released?
If you are just choosing between AngularJs and EmberJs, and looking for a more in-depth comparison than a single blog post, you might find this useful: [AngularJs vs. EmberJs](http://angularjs-emberjs-compare.bguiz.com/) I'm the author, so if you have any feedback, let me know! 
Thanks, was wondering what was going on. Disabled it and all is good now. 
It seems more readable if you use `Array.prototype` instead of `[]`
Currently using AngularJS for my first SPA application. I'm enjoying it so far, lots of resources out there. 
True, good point. Although I'm sure they know what they're doing. They have all the metadata they need. This is the first link I found of their VirusTotal purchase but it all kind of ties in together. http://www.geek.com/news/what-does-google-have-planned-for-virustotal-1514259/ 
Yup, that's what it means. Check out the [Google results](https://www.google.com/search?q=site%3Amkrause.nl) for my site, which is completely dynamic (AngularJS app with all content loaded through AJAX). I was actually working on a static SEO fallback a few weeks when I found out that Google crawls it just fine without.
Truly executing, or just indexing most of it? I recall they've been doing JavaScript indexing for years, too, but I never gave it much thought as to how they did it. It could've been something akin to a kludge all this time.
Fantastic! I was worried about serving some odd static pages for Google... But I'm really relieved to hear I don't have to. It just seemed like a messy situation overall. 
In Chrome if you "pretty print" the minified file the then it's updated to the unminified line number. And actually the link always takes you to exactly where the log happens (even in the middle of a line).
Great detail. We've been using Angular for a couple months and so far it's been going well. I haven't had a chance to try Ember yet, but I've heard good things. I will definitely bookmark your page and read it in more detail. Thanks, I always appreciate it when people take the time to craft and share this kind of thing.
Am I the only one who finds it ironic the method doesn't clearly have a "console.log" call in it, making it an example of a "hard to find console.log" ?
My choice of SPA webstack you might want to consider if you are building a new app from ground up: - [Meteor](https://www.meteor.com) Only one bullet point that takes care of your everything (templating, routing, reactive UI, data sync, easy RPCs, assets pipeline including features like coffeescript/jade/less compilation with sourcemaps with one command)
console.log and lots of swearing
Seriously: I manually test all the screens, and all the features. As many browsers as possible. Doing stupid stuff like jamming on the F5 key to refresh, waiting for it to screw up. Filling the fields with crap to see if they accept crap. Pushing the limits - -- how many (emails/records/whatever) is the breaking point? Getting out the shitty browsers - IE 6, IE 7, IE 8, FF 3, old Safari, pre 4.x mobile running Webkit 5xx.xx on a terrible phone with 3G. Turning off cookies, turning off geo-location, localStorage -- all the stuff I hope will be there for my app. Shutting off the wireless switch (the internet) in the midst of transactions. The only way to test applications is to act like you want to fight them... and you're prepared to fight dirty, and you want them to break. If you can't break your application somehow, it's either way too simple or you're not trying hard enough. Everything breaks. 
I commend your curiosity, and invite you to explore the factual basis of my assertion for yourself with [this search for "osx right click" on google](https://www.google.com/search?q=osx+right+click). 
Aren't you using proper routes and history API underneath anyway? If so, nothing changes.
What exactly are you implying?
I see nothing but lists of different ways you can right-click on a Mac. You can do it with a mouse. You can do it with a key. You can do it with the trackpad. What more do you want? I did find that one of those three methods has only been available for a single decade. Is that what you're complaining about?
* Ember manages the creation and destruction of most of the parts of your app, along with events and bindings. Coming from Backbone, this was a huge win, not having to write a ton of extra cleanup code. * The router, specifically the promise aware hooks that it provides, is awesome. Using beforeModel to perform auth or some prerequisite task before getting your model is super useful. Also transitions between routes can be passed around, retried, etc. * Highly focused on using the URL as a way to manage your application state. You should be able to share any application state with a link. This is currently improving with support for query params. * The Backburner run loop is very powerful and a big part of what makes Ember special. Being able to schedule queue events in the context of your application's internal state is extremely useful. For instance, scheduling dom manipulation after a view has completed rendering by using the 'afterRender' queue. More info here (with interactive runloop demo): http://emberjs.com/guides/understanding-ember/run-loop/ * Ember components are so easy to work with, and provide a simple, powerful way to create reusable pieces of your application. * The primitives that are used to build Ember are also available to use in your apps, so if you need to build something that isn't provided out of the box, you've got all the tools to do so. * The Ember container is less talked about, but a huge part of Ember under the hood. Great for It also allows you to use DI in Ember. http://balinterdi.com/2014/05/16/dependency-injection-in-ember-dot-js-going-deeper.html * Ember CLI. It's only in beta, but it's improving quickly. Writing your app with ES6 modules (and generating them with the proper name and structure) and having meaningful file structure is awesome (coming from building an Ember app with Require.js, it's all the benefit of AMD without the headaches). Write for the future, compile to AMD for the now. * HTMLBars is coming, and it looks extremely promising. * I totally forgot, the Ember Inspector is AMAZING. You can inspect your promises to see which ones are resolving and which ones are rejecting, and where in the chain they're doing so. An inspect-able hierarchy of your routes, as well as your current app structure including views, controllers, models, etc, can help you to see what you're doing wrong in seconds.
Is AJAX ready for the cloud though?
I don't remember complaining, but I've been told I forget things. Let's just pretend all those search results aren't about explaining to mac users that they can right click on a mac after all and that they can even change their OS default settings so they don't have to use ctrl-click to fake it. Let's say this doesn't strongly imply many osx folks have no idea that they can perform this mythical "right click" in the first place. Because then you'd be really arguing for something meaningful, and really, isn't that what we all want from a good internet discussion? 
Your object seem to have one property named 'height' set to 17 and another named 'heigth' set to null. 
Fantastic. Not sure why you got downvoted. 
th ht
Wow, even after your comment I checked for typos and I really did not see this one. Thanks, and sorry for the stupidity.
What was the topic at hand?
Perhaps they could crawl the site with their regular user agent, but then run the Javascript on something locally with a different user agent.
There aren't any duplicated keys. One is written with "th" and the other one is written with "ht". In JavaScript, the only way to catch this kind of mistake is to spellcheck your identifiers.
I have experience with both Ember.js, AngularJS and bit of Backbone. I've frequently come across frustrations with Ember that have taken hours to resolve whereas in Angular it would take about 10 seconds. Backbone does not have enough for me. I prefer AngularJS out of these three simply because it helps me do my work fast and effectively. Ember has a really good router though. If you have a choice over what you can use why not take look at the MEAN stack?
I'm pretty sure they do spot-checks where they crawl pages with another user agent and that is how they can lower the SERP placing of sites that serve up different content to googlebot.
The formatting of the results looks quite poor from a SEO point of view. For example, Google bots did not detect either your title or your h2 tag.
Don't worry you aren't the only one: https://github.com/search?q=heigth&amp;type=Code&amp;ref=searchresults
The functionality I'm trying to achieve requires that the cookie be deleted when the browser window is closed / session is over. My understanding is Max-Age won't achieve that, since I'm just providing an arbitrary lifetime, possibly prolonging it on each page view. Expire with no value *should* achieve it, but the Chrome devs seem to have decided to ignore it?
Same with everything else. Array is the constructor that makes new arrays, and Array.prototype provides the _ _ proto _ _ of each array made. Something called 'array' in an example is just an instance. Window is the constructor that makes new windows (not sure you'd ever run it), and Window.prototype provides the _ _ proto _ _ of window. 'window' is just the one instance of Window. 
`Window` is a type, and `window` is an instance of that type. It's analogous to writing `var date = new Date(...)`. `Date` is the type, `date` is a particular instance of that type, and `date instanceof Date` is `true`. Similarly, `window instanceof Window` is also `true`, the only difference is that you didn't have to instantiate `Window` anywhere, the browser implementation already did that for you. And the methods work the same as with any regular class. If `Foo.prototype.bar` has been defined as a function, then an instance `f` of `Foo` will have a method `f.bar()`. So there's `Window.prototype.alert()`, and therefore `window.alert()` (or just `alert()`, since `window` is the global namespace object.) Read about the [`Window` type on MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window) if you want more information. 
Yeah, it's a bit weird. It doesn't seem to pick up changes to the &lt;title&gt; tag after page load (however the updated title does appear in the snippet). It also doesn't do a good job in selecting interesting content for the snippet. It might be my fault, or it could just be a limitation. Maybe the upcoming webmaster tools mentioned in the blog post can help. In general I think it's a good idea to keep a static version of the site anyway, number one because of issues like these, but also because not every crawler is Google.
You could do this previously by [delivering pages rendered with phantomjs as hashbanged URLs](https://developers.google.com/webmasters/ajax-crawling/docs/getting-started), but by the sounds of it they'll now be taking your page and doing all the grunt work for you.
Ah! My bad, I got fooled too :D
In JavaScript, it is misleading to refer to a constructor as a type. 
Are you referring to this section, [Sync'ing EmberJs Models](http://localhost:4000/mvc/models.html#sync-ing-emberjs-models)? EmberJs' naming conventions are that classes (which is this case are defined through `DS.Model.extend()`) are capitalsed. So model classes are capitalised, e.g. `Foo` and `Bar`. EmberJs' naming conventions do not specifiy what to call model instances, and I have chosen to use camelcase for them, e.g. `myModel`, `foo` and `bar`. ... If that wasn't what you were referring to, please pinpoint it! You are most welcome to let me know of mistakes or problems you find at the project page: [AngularJs vs EmberJs on Github](https://github.com/bguiz/angular-ember-compare)... submit a PR or raise an issue - it will be most appreciated! 
Oooo, dis bad as hell
&gt;with Angular Nope
very interesting. thanks
you cant master javascript, its like saying "ive mastered programming" its evolving everyday new stuff added new standards new frameworks new techniques, you can maybe be a javascript ninja but not a master.
That wouldn't necessarily fix the problem either. As long as they are requesting resources with the Googlebot agent, a malicious site could just serve them a different file. It wouldn't matter what `navigator.userAgent` reports during execution because it's already downloaded the "safe" version of the JS.
This. I remember reading a blog (sadly, don't remember where) that tested Google's JS execution. It lagged behind the main index by several days.
 function foo() {return 1;} is a function declaration statement. It's *similar*[1] to doing `var foo = function() {return 1;};` - it binds a name to a function in the current scope. You can then refer to the function with `foo`. (function foo() {return 1;}); is an expression statement. It's the equivalent of doing `(function () {return 1;});` - basically a no-op, because you can't refer to the anonymous function afterwards. `foo` is allowed there because ever since ES5 (IIRC), function expressions can be named so recursive references can be made in the function body. [1] Edit: the two aren't exactly equivalent. See lazyduke's answer for the differences.
He said stacks (which probably meant stack), not frameworks
If you're going to use Backbone, I would highly suggest using it with Marionette. http://marionettejs.com Backbone by itself is not much of a framework. It's more of a set of "classes" to help you build a framework. By design, you need to come up with your own opinions about how to organize your backbone app. Marionette provides those opinions for you and eliminates a bunch of the boilerplate cruft.
I'm a webdev in a biggish hotel booking site and we have some pages which are rendered purely in JS and they've been indexing those for ages. Seriously, people thinking that Google doesn't run JS is delusional. They've got one of the major JS engines out there and it's perfectly embeddable. Of COURSE they use it. 
you don't want your code littering the global namespace with your functions and variables. If you wrap it like that, foo doesn't get defined globally. Usually people will do this to execute code by calling the expression like this (function foo() { return 1; })(); The parens wrapping the function itself turn it into an expression instead of a function/var declaration. The parens after will call the function. You can effectively define all the variables you want inside it without unintentionally declaring them in the global namespace.
That is awesome 
A little late to the party? &gt; This then means that we can write our aysnchronous code like this: No you don't. That is how you build callback pyramids of death. Use Promies, generators, flow control libs.. anything but callback hell.
Actually putting empty parentheses after the function body is also sufficient to form an expression, as opposed to a statement. For example: function foo() { return 1; }(); A pair of parentheses around the function is easier for a reader to spot than the trailing parenthesis alone - especially if the function is long. Parentheses around the function might also avoid problems due to buggy semicolon insertion in IE or in code minifiers.
I think that named function expressions have been in the language since before ES5. But IE support was kinda broken in pre-ES5 browser versions. (At least I hope it is fixed in newer versions.) http://kangax.github.io/nfe/ Never assume that code will work as you expect in a Microsoft browser.
Angular has a project called Protractor that does client side testing. It uses Selenium and interacts with the server just as if it were a real user. We use it at my job for all e2e automation. We even have a pushhook that runs this, so that devs have to run a subset of e2e tests before they even check in code to our source control (along with the unit tests). https://github.com/angular/protractor
Actually, no. Yours is a syntax error.
I recommend QUnit for front end testing. http://qunitjs.com
Why? Callbacks are perfectly fine.
&gt; It's the equivalent of doing var foo = function() {return 1;}; it's most definitely not.
No idea. Its rarely mentioned in threads like this but yet to hear a complaint.
I would say it's plain wrong ;-) window is of type 'object' in javascript. 
Ah, mine only works if it is in a position where only an expression is allowed - meaning I was entirely wrong. Sorry about that!
Second protractor. We're using it as well. We have an IDE run config setup so that we can kick off the e2e test suite very easily.
All your questions answered: http://benalman.com/news/2010/11/immediately-invoked-function-expression/
I always write height wrong as well hahahaha
but we already have a sed? j/k. regexps are never a good first example though. 
&gt;What is the significance of wrapping the function with ()? If you read the code, you can see that it's an IIFE right away.
Because bitwise operations on floats makes no sense.
Thanks for the kind words!
&gt;Things don't work. There's so many reasons why this might be. Does the javascript write the wrong URL? What happens when you say data.php?name=blah&amp;age=10 by manually entering the URL, does it work then? Also... you probably should be doing a POST form submission instead so that all the vars aren't in the URL. I see that you're a beginner, there's a lot to learn about how the web shuffles data around, and this is before we even start talking about AJAX. 
These immediately invoked functions are commonly used to scope variables away from polluting the global namespace, granting some privacy: var go = (function scopeForGo(){ // Establishing private variables var fuel = 10; var progress = 0; // Returning the function to be exposed return function go () { if (fuel&gt;0) { fuel -= 1; progress += 1; } return progress; } })(); // Testing go(); // progress is 1 go(); // progress is 2 // Demonstrating private-scoped-ness fuel += 1 // ReferenceError: fuel is not defined (in this scope) progress += 1 // ReferenceError: progress is not defined (in this scope) All functions create a new private scope for you. Another pattern for privatizing your variables, could look like this: var interestingWidget = new function InterestingWidget () { var interestingWidget = this; // Private variables var fuel = 10; var progress = 0; // Publicly exposed variable (property) interestingWidget.emissions = 0; // Publicly exposed function interestingWidget.go = function () { if (fuel&gt;0) { fuel -= 1; progress += 1; interestingWidget.emissions += 2; } return progress; }; // Publicly exposed function interestingWidget.refuel = function () { fuel += 10; return fuel; } }; // Testing interestingWidget.go(); // 1 interestingWidget.go(); // 2 // Seeing the publicly exposed variable interestingWidget.emissions; // 4;
Oh, I never tried doing it manually. I have figured out what the problem was. It was in the syntax. window.location="data.php?name="+x="&amp;age="+y; I was forgetting the "+"s. Yes I can see, someone who understands how website works can figure out things by seeing the URL in my current method. Can that be harmful in any way? 
That may be an example of sed, but sed is very heavily optimized for large file editing. Your example there would run out of memory very quickly or crash with a large file. Always use file cursors when going through huge files, never pull in the entire text file unless less than 1mb. Try doing that on say an apache log file. Oh my god, that would be a huge mistake.
&gt;Yes I can see, someone who understands how website works can figure out things by seeing the URL in my current method. Correction, anyone who can read can see your data. I'd do what /u/AaronOpfer suggests and start looking into form POSTing. Some websites use querystrings (that's what the ?var=data is called, by the way, a querystring). It's only one of several ways of transferring data between two pages. http://www.w3schools.com/html/html_forms.asp Here's a PHP specific one: http://www.tizag.com/phpT/forms.php
I've used Regexs in dozens of modern languages and have never once thought, "Oh, this impl of regex is just shit." and that applies to javascript.
Nice explanation. Edited my answer to reference yours.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Floating point**](https://en.wikipedia.org/wiki/Floating%20point): [](#sfw) --- &gt; &gt;In [computing](https://en.wikipedia.org/wiki/Computing), __floating point__ describes a method of representing an approximation of a [real number](https://en.wikipedia.org/wiki/Real_number) in a way that can support a wide range of values. The numbers are, in general, represented approximately to a fixed number of [significant digits](https://en.wikipedia.org/wiki/Significant_figures) (the [significand](https://en.wikipedia.org/wiki/Significand)) and scaled using an [exponent](https://en.wikipedia.org/wiki/Exponentiation). The base for the scaling is normally 2, 10 or 16. The typical number that can be represented exactly is of the form: &gt;&gt;*Significant digits* × *base*^*exponent* &gt;The idea of floating-point representation over intrinsically [integer](https://en.wikipedia.org/wiki/Integer_(computer_science\)) [fixed-point](https://en.wikipedia.org/wiki/Fixed-point_arithmetic) numbers, which consist purely of [significand](https://en.wikipedia.org/wiki/Significand), is that expanding it with the exponent component achieves greater range. For instance, to represent large values, e.g. distances between galaxies, there is no need to keep all 39 decimal places down to [femtometre](https://en.wikipedia.org/wiki/Femtometre)-resolution (employed in particle physics). Assuming that the best resolution is in [light years](https://en.wikipedia.org/wiki/Light_years), only the 9 most significant decimal digits matter, whereas the remaining 30 digits carry pure noise, and thus can be safely dropped. This represents a savings of 100 [bits](https://en.wikipedia.org/wiki/Bit) of [computer data storage](https://en.wikipedia.org/wiki/Computer_data_storage). Instead of these 100 bits, much fewer are used to represent the scale (the exponent), e.g. 8 bits or 2 decimal digits. Given that one number can encode both astronomic and subatomic distances with the same nine digits of accuracy, but because a 9-digit number is 100 times less accurate than the 11 digits reserved for scale, this is considered a [trade-off](https://en.wikipedia.org/wiki/Trade-off) exchanging range for [precision](https://en.wikipedia.org/wiki/Accuracy_and_precision). The example of using scaling to extend the dynamic range reveals another contrast with fixed-point numbers: Floating-point values are not uniformly spaced. Small values, close to zero, can be represented with much higher resolution (e.g. one femtometre) than large ones because a greater scale (e.g. light years) must be selected for encoding significantly larger values. That is, floating-point numbers cannot represent point coordinates with atomic accuracy at galactic distances, only close to the origin. &gt;==== &gt;[**Image**](https://i.imgur.com/ulP47gQ.jpg) [^(i)](https://commons.wikimedia.org/wiki/File:Z3_Deutsches_Museum.JPG) - *An early electromechanical programmable computer, the Z3, included floating-point arithmetic \(replica on display at Deutsches Museum in Munich\).* --- ^Interesting: [^Floating ^Point](https://en.wikipedia.org/wiki/Floating_Point) ^| [^Floating-point ^unit](https://en.wikipedia.org/wiki/Floating-point_unit) ^| [^IEEE ^floating ^point](https://en.wikipedia.org/wiki/IEEE_floating_point) ^| [^IBM ^Floating ^Point ^Architecture](https://en.wikipedia.org/wiki/IBM_Floating_Point_Architecture) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+chqdf3t) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+chqdf3t)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
GET and POST work differently and there are valid reasons to use each. You know your app so you get to decide. Would users want to bookmark this specific php page? Would it be bad if someone were to change name or age? Would it be helpful if someone changed name or age? What if someone put in name='Robert; DROP tables;"? (cue relevant XKCD)
Maybe you could name external scripts in `robots.txt` to exclude them.
Just because you use a post instead of a get doesn´t mean a hacker can't change the data. You will still need to verify the data on the server.
rock.on("rock", function(r){ r.on("rock", function(r2){ ... ... }) }) 
People over-using the phrase "... considered harmful" is considered harmful
I take it from the original question that the OP already knows about IIFEs, so I think a lot of the answers here are off the mark. The OP is asking the difference between this (normal IIFE): &gt; (function foo() {return 1})(); 1 And this (missing end parens): &gt; (function foo() {return 1}); "function foo() {return 1}" &gt; foo(); ReferenceError: foo is not defined The () surrounding the function in both examples are grouping operators, similar to the ones you use in math expressions. It's you letting the JavaScript interpreter know that you want to execute that expression before anything else (just like in math). The grouping operators in the following cases are for combining numbers or concatenating strings: &gt; ("foo") + 1 "foo1" &gt; (function foo() {return 1}); "function foo() {return 1}" // String output &gt; (function foo() {return 1}) + 1 "function foo() {return 1}1" // String output Note above that the function normally gets coerced to a string. Why then do we need the grouping operators, and not just the last executing parentheses? Well, we probably would use that, if it worked (you know, less to type and all). But it turns out that it doesn't work: &gt; function foo() {return 1}() + 1; SyntaxError: Unexpected token ) Turns out that we need to grouping operators to tell the JavaScript interpreter to *return* (but not execute) the function immediately (in this case it's not getting added to anything, so it's not coersed to a string like above), then we need additional ending parenthesis as an additional to command to *execute* immediately: /** * IIFE with missing execution parens * * Return what's in the grouping operators and add to 1. * A function is being added to 1, so behind the scenes * the function is coerced to a string (the interpreter * calls Function.prototype.toString()). */ &gt; (function foo() {return 1}) + 1; "function foo() {return 1}1" &gt; typeof ((function foo() {return 1}) + 1); "string" /** * Let's have fun with the toString prototype * * (educational purposes only - don't try this at home) */ &gt; Function.prototype.toString = function(){return 500}; &gt; (function foo() {return 1}) + 1; 501 &gt; typeof ((function foo() {return 1}) + 1); "number" /** * Normal IIFE example * Return what's in the grouping operators and execute * the result immediately. Then add 1 to the result. */ &gt; (function foo() {return 1})() + 1; 2 &gt; typeof ((function foo() {return 1})() + 1); "number"
I appreciate the creativity, but I must say that sed is far more than a simple text replacement tool. That node.js script is a perfect example of what makes sed so amazing: it's so pithy! This reminds me of my attempt years ago to stop doing shell scripting and replace it with Ruby scripts. That was horrendously painful and ultimately ended in failure. The moral of the story for me is: use the right tool for the job.
Hey compubomb, That's a very valid point. To address your point, I extended the post with a version that reads the file line by line (see updated post). I tried 3 libraries, the first two, i.e. line-chomper and line-by-line both ran out of memory, but the third, line-reader worked well. I then profiled the code and compared it to sed on a 2 Gb file. It turns out that javascript is as fast as sed if you mostly do input. If you do output too, then sed is 10x faster. So the bottleneck for the current implementation is the *console.log* line. If anyone has a solution, please suggest it! btw. can I post your comment to the blog? 
Well, `Window` is not only a constructor but a constructor with a prototype object. How would you call that if not a "type"? Calling it just constructor seems misleading to me since it ignores the "other stuff".
~~I disabled redditreveal and still get this on every page load.~~ Ahh, nevermind. Needed to restart to disable it. I am a big dumb animal.
None of those are essential to understanding the basics of implementing async code, the point of the article. 
That anonymous function (the second parameter), is the function that he will be calling on each of the nodes in the node-list found in the document.querySelectorAll call. [].forEach() takes a single parameter, an anonymous function you'd like to call on each element in the array on the left side of .forEach. In this case though, he's using the .call function which allows him to specify the value of `this`. To put it more simply, the code could have been written like this. var elements = document.querySelectorAll('a'); elements.forEach(function(el){ //...some code that does something with each 'el' }); In this version the value of `this` in the `.forEach` is the `var elements` just like it would be if I do it the original way. Something to note is that you can do the whole `.call()` thing on ANY function. Does that help? Let me know if you have more questions. 
This is necessary because of JavaScript "array-like" objects -- Objects that look like arrays but aren't. The result of `querySelectorAll` is a nodeList. It's a set of elements, with a `length` property, but it's not actually an array. `forEach` exists on `Array.prototype`, so `nodeList.forEach` doesn't exist. So if you want to use it, you can call the function setting `this` to whatever "array-like" object you want: - `[].forEach` -- get a reference to the forEach function. This is a shorter version of the common `Array.prototype.forEach...` - `( document.querySelectorAll( 'a' )` -- set `this` in the forEach - `function( el ){` -- run whatever code is in here on each element of the nodeList In summary, the code is necessary to do what would "normally" just be: $( 'a' ).forEach( function( el ){ ... If you don't understand the `call` part, go google "javascript call apply" and read up on it. It's basically a way to call any function while setting the `this` variable in the function
&gt; the code could have written like this Actually it couldn't, because `querySelectorAll` returns a `nodeList`, not an array
Bang on
To add to that, check out the MDN documentation for [`Array.prototype.forEach`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) and [`Function.prototype.call`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call). **Edit:** markdown formatting
elite developers do everything efficiently. from trivial things to big things. I usually don't type sample code character by character because when I see it I already understand it. The reason I copy paste code is to double check the technology I'm not familiar with and build a quick prototype. 
It shares characteristics with custom types, but JavaScript only uses "type" to describe natives, like string and object. Since everything is an object in a prototype chain, things are generally best described by what the do. Window is a constructor for creating window objects.
Your face is considered harmful
Completely offtopic, but I can't help but read "QUnit" in Arnold Schwartznegger's voice in my head.
[Image](http://imgs.xkcd.com/comics/like_im_five.png) **Title:** Like I'm Five **Title-text:** 'Am I taking care of you? I have a thesis to write!' 'My parents are at their house; you visited last--' 'No, no, explain like you're five.' [Comic Explanation](http://www.explainxkcd.com/wiki/index.php?title=1364#Explanation) **Stats:** This comic has been referenced 33 time(s), representing 0.1564% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcdcomic/)/[kerfuffle](http://www.reddit.com/r/self/comments/1xdwba/the_history_of_the_rxkcd_kerfuffle/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me)
Oh come on! Do we really need more of that? https://www.npmjs.org/search?q=csv
Hi TraustiThor, Maybe piping to STDOUT will be faster than using console.log(). AFAIK, console .log() outputs to the console in a synchronous manner, while piping / writing to the STDOUT stream is an asynchronous operation. 
Also console.log processes the output for string replacements and such.
rfc-csv is the one I tend to use how is this be the better 
Using Karma + Istanbul (coverage) + Jasmine for unit testing the code, and trying out a bit of protractor.
What is a ES6 lab?
Good question. Simply put it's a place where you code in ES6 which gets converted to ES5 on the fly along with jasmine test. ES6 =&gt; ECMAScript6
You often see coercion done with: Array.prototype.slice.call(arguments); Another way of seeing it is: arguments.__proto__ = Array.prototype; This now sets the immediate prototype to be Array instead of Arguments. Since forEach exists on Array.prototype this would allow you to use it, since arguments are array-like. You'd use the former over the latter if you care about compatibility and single expression solutions. Hope this helps!
Glad to see Mootools keeping pace with Prototype (http://prototypejs.org/2014/04/18/prototype-1-7-2/)
So what? Writing code is neither about writing something you need nor about writing something that is better of already existing solutions. Especially when you are young, implementing an RFC and opensourcing it is a great work, and a step in the right direction. Blindly glueing together existing pieces of software just because "the community uses those" is not the only way to write code.
Browserify only bundles dependencies when using CommonJS. It can be a step in your build process but unless you have a stand-alone module, probably will not be your entire build process. I often use browserify with gulp which seems to build rather quickly. Do you have a gist of this build?
 function Foo() {} Foo.prototype = Object.create(...); The first line defines a constructor. A constructor is a function that initializes an object. It does not, however, say anything about the prototype chain and prototype properties. If I would evaluate `new Foo()` and I only know the constructor's instructions, I wouldn't know what properties the resulting object has. So calling the whole thing (both lines) "constructor" is misleading. "constructor+prototype" is not the same as "constructor". You may call it "class" or "type" or whatever, but constructor certainly isn't precise. If your "don't call it type" is based on the result of `typeof`, then what do you do with `Object.toString.apply(x)`? Is that a "String-type"? I don't think coupling any term to the native type-check operators in JavaScript makes any sense because they are just fundamentally broken (see `typeof null === 'object'`/the exact semantics of the toString-check mentioned above). A "type" is pretty well defined on an abstract level, so I'm not sure what the advantage is of not using it..?
Yeah but what's the point "releasing" it in this format then? Why not just write the code for yourself and if you really want to show the world say "here's my attempt at a CSV parser". 
Yes
Sure. That could be another valid way. But the author didn't wrote "The best, new, amazing library to parse CVS". To me it looks like just another github repo. Writing a documentation and managing an issue tracker are a big part of every OSS project (&gt;50%?). It may be useless for most of us, but for sure it is very useful for the author. I don't see any problem here.
So you don't use browserify for dependencies? What kind of build and rebuild times do you see for your scripts? I understand that it only bundles dependencies using CommonJS, but the entire purpose of browserify-shim, bowerify, etc is to enable using CommonJS modules with all dependencies. This seems like the ideal. Why would half my code use it and half not? Maybe it's because I'm already using AngularJS, which has modularized code and dependency injection, I don't see a great value added by browserify. browserify: https://gist.github.com/voxtex/2664b6430856d31b6cf3 [gulp] Finished 'scripts' after 8.03 s non-browserify: https://gist.github.com/voxtex/05f636908d7ac090cff0 [gulp] Finished 'vendorScripts' after 640 ms [gulp] Finished 'scripts' after 245 ms **UPDATE** Seems like the root cause was actually ngminify transform being applied through browserify. Removing that sped it up significantly, I will see how much faster I can get it.
In my experience, it's as fast (or slow) as most of the alternatives. One of the projects I manage is a fairly large AMD app that uses RequireJS. It takes about 18 seconds to compile on average. We've only been using browserify rather recently, and none of our projects are quite as large, but I can easily see build times climbing quickly. The advantage I've found with browserify is that the CommonJS format allows you to easily use your front-end JS in a NodeJS environment. Take a look at [watchify](https://github.com/substack/watchify). Your initial build time will be the same, but rebuilds will be ~100ms, which has been fast enough for me. And it [integrates with Gulp](https://github.com/gulpjs/gulp/blob/master/docs/recipes/fast-browserify-builds-with-watchify.md) pretty easily
There are these great mini videos from egghead.io that explain some of the concepts important to AngularJS development. Other than that just start building something.
Also make sure you use watchify for watching for files and recompiling bundle, this will make recompilation much faster.
http://thinkster.io start with: http://www.thinkster.io/angularjs/GtaQ0oMGIl/a-better-way-to-learn-angularjs
Come on over to /r/angularjs too, we have lots of good stuff being posted everyday plus a good community to run questions by if you're stuck on something
It comes down to your (and your team's) preference imo. If you like full manual control go with Backbone (but keep in mind you'll have to do pretty much everything yourself). If you like manual control but with some great built-in components but very little guidance go for AngularJS, if you want your entire team to use the same conventions / style and use already thought out conventions use EmberJS. You can build something like EmberJS from AngularJS if you want but it's a pain. It's however a much larger pain (at least I think so) to get the flexibility of AngularJS in EmberJS. Although the team says that underneath EmberJS's top level API is a flexible AngularJS-like API. I don't have any experience with it. If you do opt for angularJS definitely look into AngularUI Router because the built-in one is a POS.
Sounds like .race is what I want, actually, since as soon as any load fails I want to start displaying UI (even if it's an error message). Converting from `.race` to `.any` seems somewhat trivial as well since you can map each promise to `.catch` before passing to `.race` to get identical semantics AFAICT. The inverse does not seem true, though. Perhaps that is part of why ES6 includes .race and not .any?
Is the JavaScript client-side? That would make for an interesting hack.
I usually make 2 bundles with Browserify: vendor and app. Vendor rarely changes so it doesn't need to rebuild all that stuff every time. http://benclinkinbeard.com/posts/external-bundles-for-faster-browserify-builds/
Chiodium, it runs on JavaScript. It is a node.js backend using the johnny-five library to control the arduino. There is not a single line of C written in for it. Check out the github: https://github.com/ytham/barmixvah
The Javascript is both client- and server- side.
Try this website jstherightway.org, this is a message from the founder "Today we have a bunch of websites running JavaScript. I think we need a place to put all the best practices and references together so we can share this (good) information and help to keep the web more organized."
I'm using concat-sourcemap and wiredep to merge all my bower dependencies into a single `libs.js` file. These end up thrown onto the window object, and then I use browserify-shim to `require()` them without actually having them affect my browserify bundle time. It's not the perfect solution, but it's simple and fast: https://medium.com/@mattdesl/f1c587cb56b9
this helped me with bundle times https://www.npmjs.org/package/watchify. task from my gulp file: https://gist.github.com/a-axton/6aed74c9a69668902ffd
Since when does "Type" implies "stuff can be private"? Integer are a type. C-structs are types. I'm not sure how "type" as defined in JavaScript has any practical value (http://www.ecma-international.org/ecma-262/5.1/#sec-8).
"Separately all at once" seems like an oxymoron??? I'm not really sure what you're asking. But you can call a method with an array like so: `myFunc.apply(this, [ a, b, c ])` And you can turn an arguments into an array like so: `Array.prototype.slice.call(this, arguments)`
Hey- I recently took this course and just wanted to say that it's really great. One of the best, if not the best tutorial courses I've ever seen. Production values are excellent, and even as an experienced developer I appreciated the care with which the concepts were explained, especially the way angular handles dependency injection. For beginners I would think it would be even better. Looking forward to the next one.
That works. Awesome, thanks.
Browserify has a no-parse option that will significantly speed up builds by not parsing huge files like jQuery and Backbone. Sourcemap generation really doesn't take that long because browserify only maps lines to lines. For production I use [minifyify](http://npmjs.org/package/minifyify) which takes ~3x longer but yields quality sourcemaps and minified code.
Start building the app your want to build and learn as you go. You will do a few things the wrong way initially, so you need to refactor when you learn that you took a wrong approach. That always works best for me when learning something new.
I do this for development as well. If you expose your vendor modules from the vendor bundle, it's also possible to directly `require()` them from your app bundle (browserify will add a global require function).
It'll still probably take a few seconds without the transform
The simple answer is "because that's the way the language works". A binary or against a floating-point number is entirely possible from a very low-level point of view, in that floating point is still represented by a binary number at some point that can be ORed, but it makes no sense at all for a developer to use it if you could. You'd never be able to reasonably anticipate how a number would be encoded as floating point, which means there's no practical use for an OR -- even something like a left-shift (the &lt;&lt;), which is normally a handy way to multiply by powers of 2, can't be used with any predictability on floating point. Languages which are a bit more strongly typed will just throw compile errors if you try, e.g. C: #include &lt;stdio.h&gt; void main() { double i = 2.123456789; i = i | 0; printf("%f",i); } $ gcc -o foo foo.c foo.c: In function ‘main’: foo.c:4:7: error: invalid operands to binary | (have ‘double’ and ‘int’) i = i | 0; ^ Or ruby, where types are implied but still are strict about operations between different types: &gt; puts 2.12345 | 0 NoMethodError: undefined method `|' for 2.12345:Float PHP is similar to js, in that it does 'type juggling' whenever you try to perform an operation that can't be done against the type (e.g. 'echo 2 . 2' in PHP using the concatenation operator converts those two ints to strings, and echoes '22'). Bitwise operations are no different, so it simply converts the float to an int then does the bitwise or: php &gt; echo 2.1234 | 0; 2 Which is the same as js's behaviour: &gt; console.log(2.12345 | 0); 2 
I've spent some time addressing these issues and contributing to the github recipe discussion - (on my phone so can't link it). The fastest way to build with browserify is to separate it into two builds - vendor/app - and if I'm only rebuilding my own code, even with transforms the build time is the same as anything else in gulp. The proper way to build it, thou, is to use watchify. The initial build takes 4+ secs but the rebuilds are only 100-200 ms. Not as nice as 20ms but more than acceptable. I also discovered a very simple snippet of code which allows you to use watchify / browserify within gulp pipes using a very minimal amount of boilerplate. The gulp build process is better than browserify development, but I'm fascinated by the separation browserify enables (I'm not using angular so browserify is how I modularize my code client side)
I think that this one is the best. I didn't check "Code School" though
... Apart from the underlying firmata library running on the Arduino :) 
&gt; Is Browserify That Great? Yes. &gt; Then I realized my build was really, really slow. **Use Watchify.** All that stuffing about with externals is nice, but watchify makes it all irrelevant. &gt; Anybody else got some build times they can share? I have a huge project, written in coffeescript, with tons of classes, a deep directory tree, etc. The initial browserify build takes about 12 seconds; rebuilds take 200ms; much of that will be due to the coffeescript compilation step. (And 200ms is, if we're honest, fast enough.) &gt; Is the benefit of having CommonJS in the browser really worth the slow feedback loop? If it's a big project, yes. If it's small, no. My experience is that gulp-inject style solutions do NOT scale. Browserify does.
I really like the way you wrote this, I am in the process of learning JS and the way you wrote in Part 1 and 2 are really helpful. I agree with others, Part 3 is a bit of a leap! Nicely written tutorial though, it is very helpful for beginners like me. Thank you.
We are not as fast as them yet. but we're working on it.
That's pretty neat :)
There is not a 'contains' function in js: if (window.location.indexOf("google") === -1) { window.location.replace("http://google.com/"); } Basically indexOf means return the index of the position of this text inside this string, if you gave "abcd".indexOf("a") it would return 0, indexOf("b") would be 1 and so on. If the string doesnt exist you get -1.
I actually wrote a node CLI program that can do this and much more. It lets you execute any js to transform any line any way you see fit https://github.com/kolodny/nip
I'm the author of the article. No, the problem is that if you write bad code it *will* work, it will just give nonsensical results instead of giving you an error as others languages do. I don't see why being so afraid or telling the user "this thing doesn't make sense, go change it" instead of trying to make it work in a way it'll never will and will only cause hard to spot problems. With that being said, I like prgramming in Javascript a lot. This was a post for a couple of laughs, it was not meant as "Javascript sucks".
It would work in any browser that supports the native forEach function. So, basically all modern browsers http://caniuse.com/#search=forEach Edit: i should clarify that is if you are referring to the approach not the entirety of the code. In that case there is also querySelectorAll used but that is actually supported in IE8 as well so the outcome is the same. 
I admit I'm pretty new to Javascript and some (few, actually) of the examples are kinda forced -- that's because the purpose of the article was to give some cheap laughs, it was not "20 technical and mathematical reasons why javascript is a bad language". With that being said, I'd still say it shows more problems than "only" == and + (which are huge part of a programming language anyway!) * true, false, undefined, null, none, NaN, 0 without a well thought consistent table * standard functions inconstencies and "surprising" (which often means bad) conventions Also, there isn't a single example of NaN nonsense related to floating point arithmetics, where did you see that? By the way, I like Javascript. I just wrote a "funny" post about some things I think it handles badly -- I think Python, for example, is particularly good in this regard if you want an alternative. &gt; Plenty of other people have had blogs like this that go over plenty more cases of bizarreness. Definitely true, mine was just a small collection of cases I've found on the internet.
No, this is not possible as that would be a big security exploit! Something that may interest you would be creating a Chrome extension and using content scripts which can inject Javascript into any page.
This is late to the party but with testing and particularly with TDD (I am making the assumption you are trying to unit test here not do end to end or integration tests (in which case I'd recommend you use phantom js to trigger the state and then check the state of the dom btw)) now is the point to ask yourself if the approach you are taking to testing is off. Generally, when testing becomes difficult in this manner, the test is possibly pointing out that the design should be changed. You actually already alluded to this when you said you could test that the data being sent is correct. Test that in isolation (not the sending, you are testing the data was generated properly. Otherwise, you are testing socket io which is already well tested and breaking the fundamental rule of TDD and unit testing that unit tests shouldn't touch the network, db or file system). Next, you test whatever client side mechanism you use to take the server data and build up your client side model. You also test this in isolation from the DOM and the network. You simply inject the json format you'd expect to receive the data in into that mechanism and verify the behavior. What you want is a system in which your view code is soley a reflection of the current model state and the updating of the dom is then handed off to whatever framework you are using to change the dom (angular, backbone, or even jquery). A great goal is to keep those test boundaries tight enough that when you go to test the dom manipulation, you are just throwing another test at your DOM manip frameworks ability to update the DOM in the way it's designed to (which is redundant because if you are using it in production code, it should already be thoroughly tested as I understand angular is). Following that principle really altered my approach to testing and allowed me to start really being able to pick apart what is actual logic to be tested and how to do so without crossing into the DOM. You see similar issues/questions when it comes to the domain models and the db. Edit: when I mentioned end to end tests I had forgotten that protractor is the usual solution with angular apps. I've not used angular in a production application at this point so I'm no expert on it but have done a fair amount of tinkering with the landscape. I intended for this to be general and not specific to the fact you are using angular.
I find it ironic google has been pushing a framework they can't actually crawl. 
&gt; huge files like jQuery and Backbone Nit: jQuery is biggish, but Backbone isn't all that big @7k.
Glad I could help. Is there some way you think I can make part 3 more clear? Or is it just that it is a longer post.
While true, now you have two sources for the data which have to be kept in sync, especially if the DOM changes. I'd rather take the fairly insignificant performance hit by accessing the DOM than try and recreate the data store in JS. Just my opinion, though.
As an alternative, I recommend checking out [webpack](http://webpack.github.io/). Here's a rundown on migrating away from [browserify](http://webpack.github.io/docs/webpack-for-browserify-users.html). And as well as [integrating webpack into gulp](http://webpack.github.io/docs/usage-with-gulp.html).
The title of this post reads like a parody of the Hacker News front page.
Instructions? I click on a page of mine with an ng-app on it, nothing happens. 
All good template engines escape by default. E.g. with Mustache and the like it's `{{escaped}}` vs `{{&amp;raw}}`.
Related: https://github.com/rwaldron/johnny-five
seems a little buggy. I just installed it via the chrome store and it only displayed the Angular function hierarchy, nothing else happened or could be triggered.
Dan Wahlin's [AngularJS in 20ish Minutes video](https://www.youtube.com/watch?v=tnXO-i7944M) was helpful to me, otherwise I'm a fan of the "dive in and start building something" method.
Awesome, I'm glad you liked it. :) It definitely takes a village to create a course like that. Can't wait to see how the next one turns out myself!
I get that =) I actually love this tool for the same things : [jq](http://stedolan.github.io/jq/manual/) It's really really powerful, and is written in pretty efficient C, so it can process really large files. I also feel like a small god when I write a clever shell script using it.
What the extension shows is the scope hierarchy of your AngularJS application and the models in them.
I'm interested in getting opinions on this library I've been working on. Still needs more documentation but hopefully the readme gives the idea.
It's possible if you have control over both Windows. Take a look at Window.postMessage: https://developer.mozilla.org/en-US/docs/Web/API/Window.postMessage Basically it's an event based system that allows you to send messages with Javascript which you can respond to to trigger methods on the iframe.
All that is doing is giving you a false sense of security since mustache escaping is not context aware. For example `href="{{data}}"` is vulnerable because html escaping doesn't work in URL context, e.g. `javascript:alert('hello');`. Actually the [front page demo](http://mustache.github.io/#demo) of mustache contains this exact example vulnerability.
Thank you guys for your suggestions, I will look at them more in details.
Nice! Does it only work in Brackets at the moment?
The way you explained every line of code in Part 1 and 2 in depth stops in Part 3, and instead you use comments (nothing wrong with that, just a bit harder to follow).
We all stand on the shoulders of one another and every line of code we write is just part of a level of abstraction in the layer cake of computing. Although it's true that there is more than JavaScript in play here, pointing that out misses the point -- OP wrote nothing but JavaScript -- and it makes you sound like that annoying guy at the party that ruins every joke by pointing out a technicality.
I prefer functional composition to fluent OOPish interfaces.
Wow thanks. But NetBeans brings an error on the first line (the &lt;script type etc...&gt; part) but the app i'm using on my phone starts the scripts like that and they work well with it.
I've used this on our site and a few client sites too for a few things if you'd like a few more examples: http://thriveability.co.uk/casestudies http://info.thriveability.co.uk/resources I've nearly always needed to use: http://imagesloaded.desandro.com/ in conjunction with it too
I like to read some opinions too.
I understand. The reason I made this is that other systems I found (example NYTimes/pourover and misoproject/dataset) were too much... OOPish to use your term. My idea here (good or bad) is a function constructor. _F is returning a function. The extra properties (lt, gt, and, etc) also all return functions. I can say: &gt; _F('value').lt(x) is the same as &gt; _F('value', function(a) { return a &lt; x }) is the same as &gt; function(d) { return d.value &lt; x } Thank you for feedback.
No, it isn't great in any meaningful way. I don't recommend using it for production code.
I understand your point, but I find way more composable a functional approach. As an example that follows your readme: function compose ( g, f ){ return function ( x ){ return g(f(x))}} function prop ( p ){ return function ( o ){ return o[p] }} function gt ( val ){ return function ( it ){ return it &gt; val }} function lt ( val ){ return function ( it ){ return it &lt; val }} function and ( a, b ){ return function ( it ){ return a(it) &amp;&amp; b(it)}} var dataset = [{name:'a',age:5},{name:'b',age:24},{name:'c',age:12},{name:'d',age:8}] dataset.filter(compose(and(gt(10),lt(20)),prop('age'))) Composing and extending is easier. Also easier to read to me.
I completely agree (with the first part); even though it is a technicality, it is integral to how Johnny five and the system functions. It just helps get an understanding of the full picture 
That looks great as well. I think _F is a hybrid of `compose` and `prop` with `gt`, `lt`, and `and` added as properties. I took care to ensure that _F preserves "this" so it plays nicely with d3. In d3 `this` refers to the element... for example: d3.selectAll('elm').each(function(d) { console.log(this.id); });
I used to have major complaints with Firebase's speed(as in, the service, not the code), but that seems to have been largely improved in recent months.
Code school is okay but you don't really get much depth. Thinkster is great because it incorporate multiple sources in a well thought out, organized manner.
Without knowing d3, reading the snippet of code I would ask: what is `d`? Why isn't the element itself passed as an argument to the inner function?
You want some more?
Hello there, let me do a bit of self-promotion. I'm working on a project called [Asteroid](https://github.com/mondora/asteroid), which allows you to use [Meteor](http://meteor.com) as an alternative to those services you listed above. I started working on it a couple of months ago, looking myself for a self-hosted alternative to Firebase. I gave both DeployD and Hoodie a try, but I was not satisfied with those. They're both great, but, bottom line, not production ready. Both projects are still in their infancy, the community behind them is still small and they haven't been battle-tested. Meteor otoh has a large community, a strong development team and is approaching v1.0, which should officially mark it as "production ready" (although it has already been used in production by many companies). Asteroid is a library which connects any webapp to a Meteor back-end through the DDP protocol. So you can forget about Meteor's front-end and just use Meteor as a self-hosted Firebase, with painless data synchronisation, user authentication etc. The library itself is not very mature, but it's well tested, well documented, functional and I've been using it successfully in a couple of projects already. Moreover it's only about ~1000 locs, so it's a small project, which you can easily master in one afternoon. I'd suggest you to give it a try, as you seem to be in the same situation I was in some months ago. Hope that helps. Bye :-)
&gt; One of the projects I manage is a fairly large AMD app that uses RequireJS. It takes about 18 seconds to compile on average. ...key difference being that you don't have to compile a RequireJS app when you're developing it.
Recently switched to webpack myself, it really is *a lot* better than browserify, it's super fast and does incremental builds, and it supports both CommonJS and AMD syntax. It also has a lot of useful utilities and can even replace gulp entirely if it fits your workflow.
Most of those inspirational examples don't work or don't use masonry anymore. Of the three that work only one is using the Masonry repositioning effect. 
agreed, moved to webpack and never looked back
not sure if troll.... do you mean you could use it for code that never goes to production? 
"MongoDB, Express.js, Angular.js, Node.js" i remember one of my physics lecture. A student introduced his project that involved a phone with accelerometer that sent data to his laptop in order to display it with a projector. He used html5 on his phone to send data via wifi to a mysql database (i belive it wasn't local) so the laptop could query it in x milliseconds and show the result. I laughed at the tools as hard as now. (apart from that I do think that this is a good project with lots of work involved)
I'm curious, what patterns do they push that you dislike?
And I thought there was something dirty on my screen with that weird character. 
Nice, I like it! Especially the fact that you can easily see the nested $scopes and containing objects.
Don't take me wrong, I love Batarang. But it's been a while since it was updated since the authors are already spread thin maintaining AngularJS itself and related projects. I have a lot of features planned (see issues in the GitHub repo) but a few things ng-inspector already does and Batarang don't: display the controllers/directives that triggered the scope creation, compatibility with Safari (and soon Firefox). To be fair, here's what Batarang already has and ng-inspector don't: dependency graph, expression performance monitoring.
Replicating your data to do fulltext search is pretty wincey.
[Reminded me of this :)](http://i.imgur.com/m2WS8Qb.jpg)
in case you are curious about performance http://jsperf.com/numbers-and-integers
Not sure if it still does but Pinterest got famous using jqMasonry.
That jsperf is not valid, the first case measures nothing http://jsperf.com/numbers-and-integers/8 is valid for V8 but not for firefox
Executive summary: `~~a` is the fastest way to convert `a` to an integer and `~~a === a` to check if `a` is an integer. Interestingly, `a|0` is just as fast in Chrome but a fair margin slower in Firefox, despite being asm.js's way of casting to integer (a Firefox feature).
I'm looking for a real answer.
I agree fulltext search is a weak-spot for Firebase, however that concept of denormalization really isn't as negative as it seems. It's the nature of speed-focused non-relational database. You have to denormalize data, whether they do it internally or you do it by hand is the only real difference.
For me the issue is that I buy in a third party hosted solution to do the hard work for me. If they have to do some magic to make that happen fine. But telling me that to do any normal searching beyond some very very basic filters I need to sync with my own servers is just a no no. 
No problem. I used a Makerbot Replicator 2x printing ABS, but the Printrbot seems to work fine as well, although you might have to work with the tolerances a little bit since ABS and PLA are very slightly different in this regard, from my personal experience at least. 
Hello Charuru. You are partially right. Meteor is a young framework, so in some aspects it's still rough around the edges. For instance how to properly test a Meteor app is still subject of debate. Nonetheless, it's a good framework and there is a skilled, funded team working on it full time. Hoodie and deployd are toy projects in comparison. &gt; TBH hooking up your own syncing code is not really that hard, takes maybe half a day to a day and you'll never have to depend on any magical black box ever again. Wonderful! Do it then, I'll pay you 20K$ for your day of work. I'm also not a big fan of Fibers, and I can't wait to switch to your alternative implementation. Will it be ready for the weekend?
Absolutely. I could not have done it without the johnny-five package (which in turn uses the node.js firmata package) because I just wouldn't have gone there. We're all standing on the shoulders of those who come before us, and I'm absolutely grateful for it. :)
Why should /s?he/ be trolling? Using browserify is easy to produce bloated code. And that is somehow hilarious, because it promotes modularity. If you modularize too much, and if you rely too much on external modules even for implementing simple stuff, you end up with monsters like http://studio.substack.net/-/bundle.js. You can implement exactly the same application with less than 1000 lines of code. 200 are probably enough. Last but not least, node.js and the browser are different beasts. Why reimplement the whole node.js API on top of browser natives? Lazyness can be a virtue, but it has also a price tag that could be not worth its value. And we all now where the "write once, run everywhere" mantra led us in the past.
checkFloor = function(floor){ if (floor[room] == 1){ printToTextbox(„…“); } } now you can do: checkFloor( floor1 ); checkFloor( floor2 ); Or a better example would be: var floors = [floor1, floor2]; floors.forEach(checkFloor);
You should probably create a separate array for the floors and use it like this: ` floor[9][room]` . Otherwise take a look at the following relevant [stackoverflow question](http://stackoverflow.com/questions/22360803/iteration-of-similarly-named-variables-in-a-for-loop). Do note that the use of 'eval' is strongly discouraged.
For reference: http://jsperf.com/numbers-and-integers/9
You need to opt out of inlining in the functions to avoid dead code elimination and loop hoisting http://jsperf.com/numbers-and-integers/10 However, the `~~` and `|0` do different thing (they don't support large integers like parseInt and typeof modulus do) so it's not valid comparison to begin with.
why would you use browserify if you are not going to use the code in production?
Thanks a ton! I have changed it now. For anyone who is interested in building their own, the link is here: http://yujiangtham.com/2014/05/25/build-your-very-own-drink-mixing-robot-part-1/
Next version will feature collapse/expand functionality as the scope tree can get pretty big :)
There are couple ways to achieve what I assume you want to do, see this [JSBin with examples of using two-dimensional array and a JavaScript object](http://jsbin.com/pujuf/1/edit?js,console). Combine it with a function approach from /u/posixpascal and you can simplify data structure a bit. 
Don’t use parseInt to convert numbers to integers: &gt; parseInt(1000000000000000000000, 10) 1 
`parseInt` definitely supports large integers (2^32 - 2^53), bitwise operations don't. `parseInt` is 2 times faster than the typeof as well, didn't you even look at the fixed jsperf?
Your video is awesome! I love the stirrer and ice thing as well. Great work! Your four servos there is also a really interesting system. Definitely very impressive stuff :)
Besides these other suggestions I'd like to point out that you can already do what you want directly. Based on my limited knowledge of your overall project this is probably not the best approach but I wanted to point it out because it's a powerful feature of javascript and scripting languages. As it stands, it appears it looks like floor9 is an array that is global, which means it's attached to the window object. That being the case, you can reference it through window with dictionary notation like so: window["floor9"] From there it's probably pretty clear you could do: var floorNumber = 9; window['floor' + floorNumber'][room]; Again, this may not be the best approach, but it's possible with your current project (to avoid ifs) having a hotel object (or wahtever it is) with properties floor1, floor2, and referencing them in this way would work out for you. 
What you are doing there defeats the only purpose I can think of for decomposing the single jquery line into its own separate function. That purpose would be to give a meaningful stack trace when something goes wrong. However, you are wrapping the call to your function in another anonymous function so the original function name won't show in a stack trace. You can instead just pass set div background Red to your click handler as the call back. That being said, the main point of breaking down a set of operations into a separate function is to group them up so they can later be used in different places. With the case of a single operation this doesn't make sense because that single line cam be reused. Particularly with a jquery function you are hurting yourself because a) you lose any ability to set the context of 'this' and b) jquery methods return a reference to the jquery element that is being acted on (which is 'this' also in this case) and therfore you can chain methods like .css ().show ().trigger ... etc). Encapsulating a single statement into a separate function breaks this and gives no benefit. If you had combined a chained statement and allowed the selector to be passed in and then perform a set of operations that would make sense. Finally, while not a big issue with this case your call stack looks like this with your current method: anonymous function -&gt; setDiv -&gt; jquery method (which calls other jquery methods). So why put all that extra effort and overhead into calling a single jquery method?
Really? You had to name it [Pho](https://github.com/danielstjules/pho)? You can get really confused really quickly if you have to do any LAMP development.
Maybe, I'm being nit-picky, but wouldn't it be better to write your example as so? function setDivBackgroundRed() { $("div").css("background-color", "red"); } $("button").click(setDivBackgroundRed); I don't see the benefit of having the anonymous function wrapper. 
&gt; you lose any ability to set the context of 'this' That's inaccurate since that's what Function.prototype.bind is for. Even for browsers that don't support it (like IE8), adding that method to the prototype can be done in about six lines of code. You can even change the context on an anonymous function; so, I don't know how having a named function prevents the OP from changing the meaning of *this*. &gt; jquery methods return a reference to the jquery element that is being acted on (which is 'this' also in this case) and therfore you can chain methods like .css ().show ().trigger ... etc). Encapsulating a single statement into a separate function breaks this and gives no benefit. If you had combined a chained statement and allowed the selector to be passed in and then perform a set of operations that would make sense. I didn't think the context of your callback mattered since your callback would have a different context from the context held internally by the jQuery method assigning the callback. So, the object it returned should be independent of the context held by the callback unless I'm missing something.
No worries.
Am I the only one missing the point on WHY THE HELL MODULUS CAN RETURN NEGATIVE NUMBERS ? (in C's std lib I mean, and in all languages interpreted in C, or JIT-ed, or VM'd or..)
Anyway, just in case anyone missed a point, what you have done is awesome! It looks really good. Would like to have one of those :), 
If a / b = c remainder d, then b \* c + d had better equal a. For example, suppose a = -3 and b = 2. You have two choices for how to define that outcome. You can let c = -1, in which case the remainder d must equal -1 in order for b \* c + d = a to hold. Or you can let c = -2 and then the remainder d must equal 1. C, C++, and Java are examples of languages that chose to define d = -1. Python, Ruby, and Perl are examples of languages that chose to define d = 1. (But all three of those have primary implementations written in C, so the idea that any language implemented in C must also inherit C's semantics is complete bollocks.) 
Good catch! In order to not overload people with too many concepts at once, we introduce controllers as their own concept before moving onto scope. The 2nd course in the series will be much more scope based. I think that'll involve controller scope and isolate scope in directives. We would've loved to do this in the first course, but getting the basics down was the primary priority.
Agreed.
My appreciation for python/ruby/perl just doubled, thanks for pointing this out. See, the problem with negative reminder choice is that you have to worry about where a number is, with respect to the zero origin, to actually get its remainder for some division. I want,if a % m == x and b = m* n, to always have (a b) % m = x no matter the sign of b. I could live with all remainders negative. But having both solutions means wrapping around negative axis needs to be special cased, which is often the case in graphing algorithms.
And `a%1` is the safest, and so I generally prefer it unless I'm checking in some huge loop that I _know_ has numbers &lt; 2^31
For further reading, why the author wrote [].forEach.call you can read [this](http://speakingjs.com/es5/ch17.html#generic_method) section. In short, as others said, querySelector, and querySelectorAll doesnt return an array, instead they are returning a NodeList, forEach is not defined on nodelists, so somehow we need to "mock" the nodelist to be able to call forEach on them. [].forEach.call makes exactly this. 
Blog format? Can't skim video.
Any improvement is welcome. I will be glad to learn from other's gulpfiles too! Thanks.
Interesting, can you share the code for form? I might try to set it up and see what is wrong. 
The stats page says Firebase is reliable: http://status.firebase.com/
No, they named it Phở.
[NodeBB's *current theme*](https://community.nodebb.org) utilises masonry to order categories on the page. For the most part, it's been received well, with certain detractors who still enjoy a more traditional layout. 
Are you using some sort of in-place/WYSIWYG editor? If this is the case its most likely how the Skype plugin is affecting it. Usually you send the raw form element data to the server, before it is rendered by any javascript, but if you are using a WYSIWYG you might not get the opportunity to get the unformatted data. There might be hooks or events that the WYSIWYG provides to get you access to the information before its rendered. Also, as stated in: &gt; http://www.reddit.com/r/javascript/comments/26jzyo/skype_helper_is_messing_things_up_in_my_cms/chrtwa7 You might be able to use the meta tag to completely disable the plugin on the page.
What is wrong with eval?
The was you init express is very unusual. You have curse words in your test data. The sign up method for users pauses for 3 seconds before completing. I stopped here. I don't want to be mean, but there is a lot of things this app needs before I would submit this to an employer. I didn't get the feeling you understood how js works.
Nobody will take you seriously if you are looking for a "ninja" in any field. It's the same thing as "rock star". It's used by people who don't actually know what a good javascript developer is, or how to find one. Saying that nobody can master javascript is as ridiculous as saying one can be a "javascript ninja".
Pretty simple project, although I didn't look at everything and the code seems a bit over-the-top. I got confused by the 'bower_components' references in the gulpfile, seems you are only using npm. The only other thing I ran across that I dislike is the Application_Controller.js and $rootScope-eventing stuff, which can be resolved by a watch on the Authentification.getSession() $scope.$watch(function() { return Authentification.getSession(); }, function(newSession, oldSession) { if (newSession !== oldSession) { $scope.session = newSession; } }); The Authetification service should correctly be setting the variable provided by Authetification.getSession(); whether that be a session variable or null. Avoid $rootScope.
Math.round(n) === n
Hmm. Thanks for your answer, but to me it definetly looks like deployd is beeing worked on? And what´s the reason for saying non of these is worth using for serious projects? What´s the better alternative? 
Highland.js is awesome to get fancy with streams. Of course much of it is also available in other modules but finding good ones with consistent API's on npm is not much fun.
Looks a lot more readable to me than Grunt. You've sold me. ;)
The most cited reasons why it's bad are that it is slow (requires code compilation at runtime) and insecure (can be used to run harmful code). You can google "eval is evil" for details. Depending on the complexity of your code, this may or may not be an issue. In most cases, though, there are better alternatives to using eval, such as restructuring your code to use arrays or the bracket syntax proposed by [/u/html6dev](http://www.reddit.com/user/html6dev). 
If you have a large enough codebase that uses source transforms (e.g, jade, coffeescript) it can take seconds to load all the scripts, it effectively has to do a build step anyway.
The "submit" event happens only on the form, not on the button. You must attach the "click" event on the button, and prevent its default action (in this case, it submits the form). var button = document.getElementById("submit"); function alb(e){ e.preventDefault(); alert("hi");} button.addEventListener("click", alb);
No offense, but this is a prime example of the issue I have with JS libraries lately... This shouldn't be a plugin or library, this is functionality that should simply be written into your code if you are working with promises. Why would I want to deal with the hassles of 3rd party code integration to handle what can be done in a few lines of code that I write myself? It's like everyone needs to create plugins and give them fun new names. No one creates projects anymore. 
The preload scanner still can't help you, because you're still injecting it via an inline block that won't be executed until after the CSSOM is ready.
Try it and find out, but when you're comparing it to the alternative he is, I don't see how it can possibly hurt.
Since manual conversion code is such an obvious anti pattern, any promise lib worth using includes such utilities, usually far better.
At best, you're overoptimizing. What's the 'bloat' that you avoid by using this? `var def = $.Deferred()` and `return def.promise()`? Is that all? What's worse is that the place where the body of the method is written and the place where wrappy is called to wrap the method could be far apart. This leads to code that's harder to follow. I would advise against it.
&gt; Are you using some sort of in-place/WYSIWYG editor? Yep. In some spots, I am using [Redactor](http://imperavi.com/redactor/) and in other spots, a simple div with contenteditable="true". The same issue exists in both.
&gt; Why would I want to deal with the hassles of 3rd party code integration to handle what can be done in a few lines of code that I write myself? Code that lives on a package manager is hassle-free to consume as a dependency. There are tons of benefits to using a third-party module (with its own issue tracking, tests, dependencies, semantic versioning, etc) rather than copy-pasting the functions into your source like its 1999. Even if that module is [really tiny](https://github.com/ded/domready). Unfortunately, the OPs code doesn't live on a package manager ..... 
I agree. This is ActiveState code recipe level stuff. However, Wrappy seems pretty cool and useful. And it's MIT licensed. Take it and integrate it into your codebase. Voila. no third-party dependency. Just remember to keep the license around and give credit to the author, that's all. 
First. /r/codereview is the proper subreddit for this. Second. You do a lot of repetitive code. For example the if(e === "xxx.xxx.xxx" || x == xx) t.innerHTML = x; j.innerHTML = e; part could be done in a less repetetive way if you put the ip-addresses in an array and loop over it instead. Third. You use === and == inconsistently. Do you know what the difference is? JS best practice is that you allways use ===.
Will add it to npm later today.
I just got done porting my large, complex site from Grunt to Gulp. The gulpfile.js is much, much smaller than the Gruntfile.js. More than that, the whole build process is much more robust, and it is much easier for the other developers to deal with. I am very pleased so far with the results.
A few pointers.. 1. Try not to use ==, === is generally better practice (e.g. e === 0 rather than e == 0) 2. You are always using anonymous functions to execute code, this is unnecessary 3. There's a lot of repeated code, by the look of things you could probably shed the number of lines of code down by at least 50% Overall you should look at approaching your coding in a far more modular way, since right now the program is all lodged into one big function. Divide things out into classes/functions. Also try out a JS code quality checker such as JSLint.
Neat. 