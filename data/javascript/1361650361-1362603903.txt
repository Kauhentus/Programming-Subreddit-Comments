It sounds too much like those frozen rocky mountain oysters on a stick. You know, Test-cicles.
Definitely [Sublime Text 2](http://www.sublimetext.com/). Although not open source, it's not *one* of the best code editors; it *is* the best editor out there. Just look at all the "popular" front-end developers (like Paul Irish, &amp;c); all using Sublime Text. To prove I'm not talking bullshit, have a look at [this "best code editor" comparison](http://tutorialzine.com/2012/07/battle-of-the-tools-which-is-the-best-code-editor/).
ST2 has been treating me pretty well for JS. The syntax highlighting is good, the auto-indentation work well enough (although I still need to tweak the "indent inside curly braces" behavior), and the autocomplete -- while it doesn't sniff it quite as well as Visual Studio sometimes -- seems to work quite nicely for "associate commonly used words / phrases together". edit: goddammit people. comment if you're gonna downvote. don't be lazy.
OP: At least you recommended that book at the end. That is the sole most useful piece of information in that entire article, and the best resource for anyone learning Javascript. I require any new Javascript programmer on my team read it before starting JS development. The second most useful thing you could have done is explained to new programmers the use of 'use strict'. It's not always the solution, but it damned well prevents a lot of what you're describing. *edit* -- Several sections below have been edited thanks to feedback from /u/brianloveswords and /u/mikrosystheme ------------------ Your discussion of variables is flawed, and lacking in detail. The most important thing you could have discussed about variables is that if they are defined anywhere in a scope, they are accessible anywhere in that scope. For example: function () { var x = 10; x += y; var y = 5; } At the end of execution, x will be NaN and y will be 5. Variable declarations get hoisted, but instantiation does not, so the interpreter sees this (effectively): function () { var x, y; x = 10; x += y; // y is undefined at this point y = 5; } This code is completely valid in JS, because "y" is accessible to the entire scope of its function. Because of this, any sane or informed discussion of Javascript variables *must* include an explanation of this, and a strong recommendation to define all variables at the top of a function (since they work as if they were all defined there anyways). Failing to explain this is a major failing. The reason that a variable defined without a var becomes global scoped is because variables default to being defined in the widest scope possible. Thus, defining with a var is necessary because it limits the scope of a variable. ------------------ Your point about function declarations is what I generally advise people, but misses out on the most important part of the whole thing: all functions are declared as variables, and can be set or accessed as such. The best reason, IMO, for declaring them as "var foo = function () {};" is to make explicit the nature of the function to the programmer -- programmers coming over from other languages will see this an immediately understand the things you can do to it, whereas seeing the "function foo () {}" declaration style could lead new JS coders to believe (incorrectly) that the function is immutable. ------------------ There are some extremely good reasons to have "this" refer to the calling context. It can lead to massive confusion in new coders, and so, yes, I would agree that perhaps new programmers should get more comfortable with closures before doing heavy work with "this". However, avoiding the use of 'this' most likely means that you're overusing closure scoping to crib in a 'that' variable, or else you're not going very OO heavy in your code. While both are entirely valid styles of coding JS, they also drift further away from more standard practices, and can make your code base even harder for new programmers to understand. ------------------ I'm a little disappointed that you mentioned OOP, constructor, and prototype, then skipped past providing any examples at all. Your comments about 'this' seem to imply that you have a strong opinion about how these should work, but without actually showing people how you think it should be done, you completely miss a great opportunity to demonstrate proper usage. ------------------ Javascript does not treat newlines as a text separator. JS parsers use Automatic Semicolon Insertion to handle cases where there is no semicolon at the end of a line, but, as per the creator of Javascript: [ASI is (formally speaking) a syntactic error correction procedure. If you start to code as if it were a universal significant-newline rule, you will get into trouble.](http://brendaneich.com/2012/04/the-infernal-semicolon/) A classic example of where this is a problem: a = b + c (d + e).print() Similar hazards arise with [, /, and unary + and -. Remember, if there wasn’t an error, ASI does not apply. For more concrete examples, see the [Google Javascript style guide](http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml#Semicolons).
For reference, `Object.prototype` remains untouched. It uses a global `SuperObj` from which all Extend.js-empowered objects must inherit. Doesn't change the fact that everything else breaks, but `extendObj` is only available on objects that explicitly support it.
Also important to note; it has a *lot* of useful plug ins.
This. Definitely this.
I like [VIM](http://www.vim.org/).
Wow! A great peer review and tons of good advice here. Thanks mirion, I will definitely take these into account.
Good call... though its also an "I" away from testicular something that should be considered in naming a product
I don't think this is complicated for newbies. It's complicated for people who expect it to work like other languages, who then build their conceptual model around "it works like language X, except...". [If you forget all of that, it's easy](http://www.reddit.com/r/javascript/comments/j2j8b/the_this_keyword_is_extremely_simple_and_doesnt/).
ST2 ftw. It's super customizable so if it doesn't already have a package for what you need, you can always make one.
Webstorm and the rest of the JetBrains line-up are pretty spectacular
Agreed. But that can be easier said than done. :) The vast majority of people I work with are coming to JS from other languages, and since JS uses similar formatting and grammar, they expect it to behave the same. Just want to call out how JS may diverge from their expectations, that's all.
[SublimeCodeIntel](https://github.com/Kronuz/SublimeCodeIntel) is a good plugin for code auto completion.
Does it have a debugger?
I have it. I love it. As a student, I got it for 19 USD.
There's [one for PHP](https://github.com/Kindari/SublimeXdebug), [one for Python](https://github.com/fxdgear/Sublime-Plugins#python_debugger), and an interpreter called [SublimeREPL](https://github.com/wuub/SublimeREPL) which has support for languages like Clojure, Haskell, Lua, Python, Ruby, Scala, and more.
Sure, you *could* use `this`: (function(){ this.foo = 'foo'; })();
Sigh. I should know better than to use the word 'this' in a javascript thread.
I'm thinking of [history.js](https://github.com/balupton/History.js/). Pretty popular, also more than 4k stars on github.
Use 'that' next time.
Man I hope they invest in this and make mobile web development less of a horrid pain. Mobile web development sucks on Android. Maybe they can fix it. On an iPhone I can connect the phone's browser to Safari on a Mac with full debugger and console access and HTML &amp; CSS tools, but all I can get from Android is a shitty hard to use and see little logger on the phone and logging on the console. 
I recommend giving `vim` or `emacs` a try. Both require a moderate amount of effort to learn and use effectively, but the level of power and customization provided by each is unparalleled. Also, both will run exceptionally in the terminal. Emacs and Vim definitely aren't for everyone, and as mentioned, require a level of commitment that most text editors don't. There isn't anything wrong with using [Sublime Text](http://www.sublimetext.com/) – from what I've seen, it's a fantastic and versatile editor. I use emacs, so I can give you some tips for that. First, [read Steve Yegge's "Effective Emacs"](https://sites.google.com/site/steveyegge2/effective-emacs) blog post. Everything in there is gold. Something like [emacs.js](https://github.com/azer/emacs.js) will get you up and running pretty quick if you don't already have custom emacs setup. `js2-mode` (written by Steve Yegge!) is fantastic, though it does need a little support from `coffee-mode` to fix some indentation quirks.
A router may be built on history.js but it doesn't appear from the documentation that it can handle routing itself.
One of the problems I noticed (among many discussed in this thread) is the function declaration no-no. It says never declare globally. But it doesn't discuss namespacing in javascript and how you pretty much have to use that function declaration type when namespacing.
Not to mention `new Object()` can be broken by any malicious ding-dong's script you link like so: function Object() { this.x = 'wee'; } Using the literal is always the best call.
There is one problem with vim though. Once you used it you will hate all other editors for not being vim. That being said vim isn't really an IDE. I think Javascript isn't complex enough to justify using an IDE though. An IDE is great if you have languages that let you write a lot of code to please the compiler. Like c# or java.
Doesn't appear to support routes with named parameters. It may, but given the broken documentation how would we know?
&gt; var myFunction = function myFunction(arg1, arg2) {} While this seems like a good idea it just gets confusing in practice. If you need a named function for debugging you clearly aren't using your debugger correctly.
Thank god for that guy. I didn't want to type all of that up on my phone. You both do one thing any other JS dev will hate you for though: Allman Style indentation. var x = 1; function allman() { x++; } The `{` on another line is BAD in scripting languages! Because one could comment out or delete a line accidentally, and it's still valid code throwing no errors: var x = 1; //function allman() { x++; } On the other hand, *this* would vomit all over: var x = 1; //function allman() { x++; } This is why KNF style (shown above) is preferred for JavaScript. The only language I can think of off the top of my head where Allman style is the preferred common-practice is C#. But you'd have less problems in any compiled language like that, because the compiler is going to watch your syntax pretty closely. EDIT: Banner style is used a lot too.
I am positive this is going to be heavily disagreed with...but I really like Allman. :) I like it for two reasons: First, I just like the Gestalt of it. I find code a lot more scannable when the squigglies line up nicely, especially in languages like JavaScript where you can have a ton of nesting. Second, it forces me to write my code in such a way that whitespace becomes irrelevant. I can never get away with something like this: return { foo: "foo" }; And so I am forced to name things appropriately, which I prefer. But I completely understand that I am in the minority on this, and I would never attempt to fight this battle. :)
`this` in JavaScript threads does **not** behave the way you would expect.
At the time I thought Backbone was overkill I learned how to use [Crossroadsjs](http://millermedeiros.github.com/crossroads.js/) which sounds like what you're looking for. Over time, one by one, I came to realize why Backbone did the things it did and after manually writing a lot of the stuff myself ended up just biting the bullet and using "actual" Backbone. In the meantime, Crossroads sounds like what you're looking for.
i wouldn't use history.js. it hasn't been maintained for 10 months.
Excellent. A Twitter project that doesn't have @fat's awful coding style.
Thats exactly what it does. It waits till all the tasks in a group are finished. :-) In your case... grunt.registerTask('my-build', ['parallel:one-and-two', 'three']);
What's in your configuration to make it an IDE?
We have a script that parses our project for test files, it then compiles both an HTML (mocha) test runner and a testacular main file. That way we can have all the developer happiness of an HTML runner (debugging, greps, etc) and continuous integration goodness of testacular (multiple browsers, coverage, and such). Hopefully this answers your question.
yes, because no one ever typos ever. Maybe you are misunderstanding how javascript works, if you typo "AVariable" to "AVaraible", it won't complain in most cases, it will just create a new global variable for the second variant. or maybe you are just a jerk.
To go further with Emacs I'd like to plug my own extension here: [skewer-mode](http://youtu.be/4tyTgyzUJqM) ([GitHub](https://github.com/skeeto/skewer-mode)). It's live interaction JavaScript and CSS development. By attaching a browser to Emacs via HTTP you can evaluate JavaScript expressions and CSS rules directly in your editing buffer, editing the page live. 
I did some programming with Enyo back when the TouchPad came out. It was actually pretty easy to get going with, but I'm not a big fan of the object literal style declaration of layout and components (ala Sencha/EXTJS). However, its awesome to see that it's still alive, maybe I'll have to take another look at 2.2.
all of them. please enlighten us with your 3 months of bootcamp.
Message me.. I am driving write now and redditing , but have something perfect for you with oauth. 
You can debug JS inside NetBeans/Eclipse/IntelliJ IDEA with Chrome's remote debugging features.
Do note that "IDE" has a very specific meaning. Things like Eclipse and Visual Studio fall into this bucket. Notepad++ does not. That would be an "editor". Due to the nature of dynamic languages like javascript, php, python, etc, you will find that the majority of people don't use IDE's. Strongly-typed languages like Java or C# are *much* better for use with IDE's. Also, in javascript, most of your "IDE" functionality like debugging are integrated into the brower, further diminishing any pros that an IDE would provide (Chrome Devtools and Firfox's Firebug, to be specific. IE's are still piss-poor to this day). That said, my recommendations for a javascript *editor* would be Sublime Text. You'll find that today, it seems to be the emerging. defacto-standard for not only javascript devs, but web-devs in general. And it's not just "band-wagon"-ing. It's by far the most easy to use, light-weight, powerful, and customizable option out the. But if you want even *more* power with a bit of a learning curve, then definitely give vim and/or emacs a look. EDIT: Added bit about browser devtools.
So you need plugins for that too. I doubt they even work that well. In itself Sublime Text isn't an IDE, but you can make it pretty close to one with enough plugins. I'd rather have an IDE that has everything built-in than patch one together myself.
OP also might not be aware that IDE's for javascript development are unneeded, considering you get most of the "IDE" debugging needs in Chrome Devtools or Firebug.
He probably uses it with the browser where the real javascript "IDE" debugging functionality should reside.
Netbeans. Don't laugh- it has inline jshint, decent refactoring, reasonable outlining and a good vi plugin. http://netbeans.org/kb/docs/ide/javascript-editor.html
For debugging purposes Chrome Devtools and Firebug are fantastic, but IDEs do a whole lot more than just debugging, like manage builds, unit-tests, code analysis, etc. Right now there isn't one unified IDE for js/webdev that does all these things, but WebStorm is getting pretty damn good.
Like jshint as you type - I love that ... 
WebStorm is fantastic. The most advanced IDE for webdev that I have tried, and I have tried many. So many awesome features just built right in.
&gt; Due to the nature of dynamic languages like javascript, php, python, etc, you will find that the majority of people don't use IDE's. I wonder if that's more because people who use dynamic languages view programmers who use IDEs with derision. (ex: cwolves's "Or you could learn to code" comment.) IDE support for dynamic languages has come a long way.
For an IDE I use Netbeans (about 3 years now with it) [link](http://netbeans.org/) which is fantastic and free and works well for PHP and JS which I do full time (and it has fine CSS support), and other languages like Java and C/C++. My co-workers all use Sublime Text 2 and we always harass each other about IDEs. ST2 looks like a fine editor as well but costs money. Netbeans is more feature rich for my situation though and my co-workers can't do some of the things I do like jumping to and from methods in different classes in different files, autoformatting, FTP synchronization, GIT support out of the box (if I recall correctly, it might be an add-in) and some other things. Netbeans is always constantly updated as well, it's a very lively open source project it seems. But my peers are keyboard whores and ST2 seems like the cat's ass if you're keyboard oriented and remember all sorts of key combinations, which I'm not. It also seems to have a great inline search engine which they constantly brag about it as if it were a the killer feature, but I see nothing that netbeans can't do (just not inline). For a webserver I usually just use WAMP, I don't really care about that end of things too much, it does the job. I'd recommend getting Netbeans since it's free and open source and by your brief description it'd handle your needs wonderfully.
Interesting info. Your response inspired me to look into more native ways of achieving clean, digestible code. I came up with this, which has some drawbacks, but doesn't require any extra functions: http://jsfiddle.net/gWqAf/ The main purpose of this project was to find a syntactically simple way of handling parent/child classes in JS, which isn't outside of JS's capabilities. Thanks for your response! (I can't believe this thread got hellbanned...)
I'm not sure if you're being downvoted because of your not-very-compelling link or because technically Sublime isn't an IDE; perhaps it's also the sense of argumentum ad populum. But any question like this without mention of Sublime would be nonsense. OP is used to Notepad++ and he'll find Sublime a breath of fresh air. I don't quite know _why_ I find the idea of a javascript IDE distasteful. I find myself agreeing with the "learn to code" bluntness below. If you have that much trouble remembering variable names, maybe it's because of AbstractNetBeanFactoryProviders. 
Javascript tends to solve its problems individually rather than with one massive "unified" solution. I see this as a pretty compelling strength. I hated Eclipse. Devtools for debugging, Grunt for builds and running unit tests written in javascript, Sublime for text editing--and Sublime in itself has python plug-ins. Using small pieces that work together let you use only the best pieces. It's far stronger than a humongous would-be cure-all. That said, I'll check out WebStorm. 
You should know better than to use the word 'this' in any thread. There's an up arrrow button next to the post that does that.
To further elaborate: var myFunction = function myFn(arg1, arg2) { console.log(arg1, arg2); }; myFunction('foo', 'bar'); // -&gt; foo bar myFn('foo', 'bar'); // Reference Error: myFn is not defined To someone that didn't know better or just didn't scan the line properly this can be a frustrating gotcha to catch.
You might take a look at Komodo Edit. I used to use Komodo IDE to do a lot of different scripting(Python, Perl, JavaScript...)
I disagree that understanding closures and module patterns should come before understanding context.
If the point is stepping up your game, you need to get acquainted with vim. 
Here is a great list of recommended vim plugins for working with JS by Joyent (corporate backer of node.js): [Vim Plugins](https://github.com/joyent/node/wiki/Vim-Plugins)
One can only hope they can deliver a decent development environment. I think these tools are going to be for [Tizen](http://en.wikipedia.org/wiki/Tizen)
My Dad is an engineer, and he can't even keep a straight face when I tell him I use Cucumber with Ruby.
http://web.archive.org/web/19971210184100/http://info.cern.ch/ ... are you looking for genuinely old sites? I can deliver that. http://contemporary-home-computing.org/1tb/ In fact, try searching the web for "last updated 1996" or: http://www.cbc.ca/archives/categories/science-technology/computers/inventing-the-internet-age/a-network-called-internet.html We can go 15 years back even: https://www.youtube.com/watch?v=5WCTn4FljUQ And another 13: https://www.youtube.com/watch?v=JfIgzSoTMOs 5 more years back yet: https://www.youtube.com/watch?v=USyoT_Ha_bA 18 more than that: http://www.theatlantic.com/magazine/archive/1945/07/as-we-may-think/303881/
&gt; I dislike Allman style indentation (and it's fairly nonidiomatic in JavaScript). And it's not just non-idiomatic. You either have to have inconsistent braces and indentation (bad) or you risk errors (worse). The go to example problem with Allman style indentation is: return { foo: 'foo' }; Which returns undefined.
Interesting, never heard of that. 
AppMobi has a pretty cool debugger where it shoots your console over to a webpage that you can view on a computer. Not really as slick as the built in Safari/Mac one, but it works for all platforms.
Do you have any data to back up those claims of most devs preferring editors, and sublime text reigning supreme? Not to be antagonistic, if what you say is true and not just a feeling you have it is incredibly interesting. I think JavaScript IDEs will become increasingly abundant with the advent of* WebGL and rise of complex JS apps. Personally I have never looked back at an editor after picking up WebStorm. I have found it drastically increases productivity and ease of development for large codebases.
Yeah, AppMobi's DirectCanvas and DirectBox2D are pretty slick for 2d games, but I doubt it could get anywhere near Unity in the 3d arena.
I've been using Notepad++ for HTML/CSS/JS/Python and others. What am I missing from Sublime Text 2? I've never cared for autocomplete, the only plugin I use is ZenCoding, and the code highlighting and tabs/multi-view have never disappointed me.
It does support named params "#/path/:param". https://github.com/mtrpcic/pathjs/wiki/Using-the-Hashtag/
Iframes are sandboxed and don't let one communicate with the parent window easily (other than changing the url, and hackery with the # fragment). Don't use iframes, use AJAX if you really need to load other content.
Solid choice. I love Aptana.
I'm only playing combative because I'm hoping to hear more about not just what's different but plainly better. It does lack the tab shortcuts (CTRL+N opens a new tab, but you have to File -&gt; Click Recent File to open a recently closed tab). NPP has excellent find in file/open files/directory. Doesn't have find in project. It does have projects. It's never lacked indent/folding features. Settings files and syntax highlighting are XML files (and the install is portable). You do have to close/open it to have configs reloaded, but it saves open windows/tabs so it's not a PITA.
No worries, I'm kinda interested where Notepad++ has come over the years. (Also, I wouldn't qualify your honest question as combative :D) How about, command-1 goes to the first tab, command-2 the second, and so forth? I'm just listing off things I regularly use that might be standard, but I assume its double&amp;triple-click select works? Oh, also, Command (or CTRL &gt;_&gt;)-T actually opens a text box that lets you find project/open files by their name. But it's super sane--if you type "subset" it'll still match "Sublime-Settings." I don't use autocomplete, either. It's just that Sublime acts like I expect it to (I mean, it acts like a browser. You can drag tabs out to new windows, drag tabs in. I'm sure Notepad can do that too if its multiview is sane.). Notepad++ started to feel a little constricting at times. But then, the last time I _regularly_ used it (2010-11?) I was beginning to mostly have to use Eclipse for PHP for work (&gt;_&lt;), and arriving at Sublime when I got into some heavy javascript was just amazing. Oh, one other thing; Sublime is pretty excellent about integrating with the file system and knowing when things change, etc. 
John Resig's Class Ftw http://ejohn.org/blog/simple-javascript-inheritance/
&lt;_&lt; I view IDEs with derision. (Uh, and I upvoted cwolves comment :D) IDEs seem to me like an attempt at vim's full capabilities that can only manage an automation of the easy parts without access to the hard parts. And they _always_ tend towards bloat. I don't mean this to be as critical as it sounds. I've worked with Eclipse several times and it was quite functional and helpful. I think my most salient criticism of an IDE is that it enables something like the... well, what was it that happened to Java that it fell out of favor? Into [a corporate go-to for bureaucracy?](http://www.paulgraham.com/icad.html) I don't really know. But I do know that you had all these _libraries_ to learn because the most effective solution to anything was to study a tiny black box and what it told you. And it's either a symptom or a cause or both of Java's downfall that Eclipse lets your computer handle so much of the knowledge of your codebase. I don't want to see that _happen_ to javascript. Javascript's basic types are easy to list and very absolute and _fallible_. If you don't know them, the class abstractions that make code completion easy and sensible will fall apart. I've got Sublime with a grunt plug-in for builds and (if I write them) unit-testing, MAMP for local development (though I'd love to switch to node), and Chrome's devtools. And I don't think there's a substitute for knowing the code you're working with. If you blackbox small things, you're at the control of small things. 
Hiya, If you're looking for help regarding Javascript, I'd highly recommend using Stack Overflow as pointed out in the cool little sidebar menu called "Some useful resources". Many of the "newbie" questions have already been answered countless times on Stack Overflow and finding the answers is pretty easy even without knowing any fancy keywords. As for Javascript resources, your best bet would probably be to find a Javascript application that you like and then looking through its source. There's no better resource than actual code! Codecademy is definitely also a great place to start if you'd like to cover the basics fairly quick.
Sublime doesn't force massive cruft on you. You build your dev environment independently. I don't have any _hard evidence_, like a survey, as to what most devs prefer. I just think that Sublime doesn't sell you on Sublime, it sells you based on flexibility. But I admit I'm sold into at least _looking into_ Webstorm. 
YUI pjax is handy
Twitter really seems to suffer from NIH syndrome. It's a convenient library, but it only marginally fits into the ecosystem of their other projects.
Thanks for your reply! I'll sign up for stack overflow right away! I'm glad you mentioned that, as i constantly inspect html and css code in the "inspect element" tool in chrome, however it doesn't display the code for javascript. How would i go about looking at the source code? Also, are there any simple apps you could suggest? Thanks again!
reddit.com might not be the best way, you may consider irc.freenode.net #javascript, people are there often and might be able to point you in the right direction.
On the other hand you can debug code running in IE from Visual Studio so it is an 'IDE experience' even when running javascript.
Amen to that. 
If you like UNIX you don't like IDEs. A tool that does a lot of things is not as useful as many tools that do each thing well.
Are you new to javascript or to programming in general?
This is probably one of your problems when you're doing a Google search. For instance, an array is called an array in pretty much every language I can think of. Once you get the general programming concepts/language down it'll make things easier.
Yeah I see what you mean now about the compression! It's essentially unreadable (for a beginner like me anyway). Stack overflow seems pretty easy to navigate actually! But i'll keep that in mind if i'm struggling :) 
Just an idea ; I've been told to sign up for git hub and start contributing there as a way to work on projects. Any one know of any basic projects that I could take a look at on there? 
If devs were sold on flexibility they'd all use emacs. 
Stackoverflow has been mentioned, but if you know the actual JS function and you need to dig deeper, you should look to MDN. Mozilla Developer Network, run by the samd guys that make Firefox, and they usually list compatabitly for all browsers. Don't fall into the w3schools trap. When I need something JavaScript related, I usually Google "mdn [thing]". Also, I see you're a Chrome user. Once upon a time, FF development tools (plugins) were unrivaled, but today, I really think Chrome is where it's at. Set breakpoints in your JS by clicking to the left of the line number in the file; you'll see a dot appear. When execution gets to that point, the code stops, and you can mouse hover over variables to see what their values are, and other awesome things. Console.log is also your friend. Ctrl+shift+j opens/closes dev tools in chrome. Clear your cache whenever you change the JS file, or your browser may keep using the old copy. Ctrl+shift+delete to get to that quickly. Start learning all of those dev tools if you're serious. Best of luck.
I do not understand the point you are trying to make, sorry.
He's on a Mac, that'll be cmd-alt-J :-)
Could you expand on that? I'm not familiar with @fat or his coding style. 
[**4chan /g/**](http://boards.4chan.org/g/) - technology board the fact that its 4chan, general non-seriousness of the site, anonymity, instant discussion, makes it really a great first stop for questions you cant google out. Of course you get called faggot and get *install gentoo* many times, not to mention the general contempt for javascript as fucked up, buggy, non serious language for kids and retards who cant in to real stuff... but most of the time you get the answer or good directions. Also very helpful when asking anywhere, here, /g/, stackoverflow,... is to use [jsfiddle](http://jsfiddle.net/) For many of my questions I found the answer during making jsfiddle that was suppose to accompanied the question. And even when you don't find the answer right away on your own, people answering will be more incline to look at your stuff and also give you the answer in jsfiddle, which is often much better than for example the answer '*use regex you retard*'. 
http://news.ycombinator.com/item?id=5272353
I agree. No single editor is more flexible than Emacs.
That's debatable. I wouldn't trade Emacs for Sublime Text in a million years (and I don't know anything that ST does that Emacs doesn't). I doubt vim users would do the same.
You mean, 20min of vimtutor?
On the web: Cloud9IDE: http://c9.io for big projects) Plunker: http://plnkr.co/edit/ (for small projects) 
You might be interested in the [WebCL](http://www.khronos.org/webcl/) effort.
Not sure why you got a down-vote for explaining why OP may not want to toss out Backbone for being overkill; plus giving a smaller alternative.
You may find this course of study useful: http://javascriptissexy.com/how-to-learn-javascript-properly/ I certainly did.
You dont need anything other than Sublime Text 2 as also suggested in [Bootstrap getting started page](http://twitter.github.com/bootstrap/getting-started.html)
You can do that with Chrome on android now (but not the default browser)
The biggest caveat that needs to be added here is how strictly limited Webstorm is. There is zero support for languages outside of it's feature set. So for example, if you ever have need for say, PHP or Ruby editing, you would be better off going with one of their other products (which at their core, are mostly the same thing). That said, I adore my copy of phpStorm for JavaScript editing. It has easily the best support for the language I've seen in an IDE. 
nah, i dont think thats the best way to start learning. * learn a few things from codeacademy * create your own challenges and attempt to build them on jsfiddle * share your 'fiddle here or elsewhere while trying to figure out stuff (see: /r/learnprogramming) * then maybe learn how to git, and try to contribute.. but this doesnt make sense until you have some sort of foundation in the language
Bad idea; implement http://www.chrisnorstrom.com/2012/11/invention-multiple-choice-windowed-slider-ui/ instead...
Someone recently started /r/learnjavascript. It's mostly tutorials now but they encourage questions.
Webstorm FTW
Uh, how? Oh wow: https://developers.google.com/chrome-developer-tools/docs/remote-debugging How did I miss that, thanks!
Then do *that*. Call it out; explain the difference in simple terms and educate. Hiding the keyword behind a curtain encourages it to be wrapped in further mystery.
Or f12.
I strongly recommended a book. I know that's just fucking crazy, but the internet is fantastic for reference. It's not that hot for linear, progressive instruction imo. This book helped me actually understand most of stack overflow's vocabulary and concepts when people discuss JavaScript. http://shop.oreilly.com/product/9780596805531.do 
This is true. However, that would require primary use of IE...and windows. Linux and Mac users would be precluded from using this as a primary development tool. As it stands, IE testing has to be done on either a windows test machine or a VM.
This is a great observation. I never thought of it that way before. However, it's sad to see that you're being downvoted. Apparently that are more windows fanboys in this sub than I would have guessed.
In my own opinion, that's a lazy attitude. Skipping the learning curve associated with the tool accepted by the majority of high-end professionals as *the best tool for the job*, in order to do less work and be less effective, just because you can do it more quickly, is a recipe for mediocrity. Vim -- or better yet, MacVIM -- allows me to do so many things in HTML/CSS/Javascript faster than I've ever done it in any other editor or IDE... and comes with the added bonus that I don't have to change to a different editor/IDE when I need to make edits to Python, Perl, Ruby, Java, C, C++, BASH, PHP, or any other kind of file, and be just as effective. Further, VIM is still the only tool that I can reliably count on being available to me when I *ssh* into a server, or when I sit down at a linux terminal, or have to do work at someone else's machine. In fact, vim is even an option from iOS and Android. So by learning to use VIM effectively, I am capable of being a highly effective developer no matter where I am, without ever having to fight about installing "my tools" first. You can't say that for anything else, except *maybe* emacs.
Stack Overflow is great, but there is a reason that people often tell you to 'just google it'. Generally, if Google can't direct you to an answer you have one of two problems: * 1) You're asking something so obscure that Google really isn't that helpful (unlikely) * 2) You're not articulating the question clearly If Google's not useful for answering your questions, it's usually a sign that you really don't have a clear grasp on the problem you're trying to solve, in which case few resources are likely to prove fruitful. I would really try to spend some time thinking about the question you're trying to ask. This is something you'll get better at as time goes on, but it's a totally invaluable skill to have.
I like the mini-map code view thing and the UI is very smooth/fluid. I like that it can do not just left/right window panes, but top/bottom or even four panes.
&gt; Those are all fine reasons for your situation. &gt; &gt; However... for **web development** I'm not sure what exactly you think I do. I was pretty sure that I'd spent the last 12 years being paid to do web development, but apparently I was mistaken. But, since you asked, here are several handy lists of vim plugins **for web development** that I was able to find just on the first page of Google. * https://github.com/lfborjas/vimwebdev * http://awebfactory.com.ar/node/471 * http://stackoverflow.com/questions/3173963/useful-vim-plugins-for-web-development-and-design-php-html-css-javascript * http://www.fortystones.com/vim-plugins-web-developers-programmers/ Nonetheless, your argument is a distraction from the most important point, which is that vim is *everywhere*. If you can work in vim, you can work everywhere. Look.... you obviously like Sublime Text. You're drinking the kool-aid and we get it -- you think it's the bee's knees. But there's no reason to come at me starting an argument, or implying I'm not a web developer, or attacking VIM when clearly (if you look over the other answers given on this topic) VIM is unanimously considered to be the best tool for the job.
I would think js is a tough first language, but you won't have as much to unlearn so that's a plus. Take your time and cut yourself some slack.
http://jsbin.com/ http://jsfiddle.net/ http://tinker.io/ http://codepen.io/
Please, show me a circumstance where your last paragraph is true.
Solid additional references
VS 2012 with web essentials is a very powerful IDE for javscript development.
How long have you been programming in javascript?
a cool utility site for decompressing js code is called http://jsbeautifier.org
How about an article talking about semi colon use by the guy who wrote JavaScript? Would that be good enough? http://brendaneich.com/2012/04/the-infernal-semicolon/ *edit* google gives examples, too: http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml#Semicolons
I'm not arguing if relying on ASI is good or bad. I just asked you to provide an example where what you wrote is true (because it is not AFAIK).
I didn't read your article, but I agree with you on Allman style.
For what it is worth IntelliJ IDEA is JetBrains Eclipse equivalent. Webstorm is just JS CSS and HTML.
JavaScript IS a lot harder than HTML and CSS. HTML and CSS are markup languages, and JavaScript is a real programming language. Learning to program is difficult, but it is not impossible. I'm actually a big fan of books too (though I'm biased because I've written several.) The big advantage of a book ought to be consistency. A book should be designed from beginning to end to teach you a complex idea. Don't sweat too much about the syntax. That's the stuff you can look up. The much harder part is learning how to think like a programmer. Learn the basic structures of programming (variables, arrays, loops, branches, and functions.) You'll need to understand how these ideas work, and of course you'll need to practice putting them in context in a language. JavaScript has a reasonably straightforward syntax (at least until you get to object-oriented programming, which you don't need yet.) It's a good language to learn in. No amount of driving school replaces time at the wheel, and no amount of reading about programming replaces writing actual code. This is where a formal class is really helpful. A skillful teacher will craft projects that are at the appropriate level of difficulty for you (just slightly harder than you're comfortable with.) and will hold you accountable for pushing yourself. People will often suggest that you just start working on projects, but beginners often have a very difficult time judging how difficult something is, and often chew off projects that are far beyond their current abilities.. PM me any particular questions you've got, or drop me an email if you want specific help. 
Not an alternative per se. It is a fork off of underscore.
Why not actually describe what it is, instead of talking about it in terms of another product? This way, those of us who are not knowledgeable in JS libraries have no idea what this is all about.
dah! thank you, i updated the link in my comment as well.
I understand what you are saying. I suggest you consider more carefully the difference between server-side programming and client-side programming. Static type checking and the robustness it provides are appropriate to Virtual Machines like Java or Ruby run on. However, client-side languages has seldom been so lucky. Especially client-side Javascript must adopt to not just one environment, but many. Often times the different environments JS is running in are at War with each other. This kind of Hostile programming environment means that programmers must adopt techniques which are often less efficient, but are more convenient or stable.
The google link provides examples.
Figured it out (of course, after hours of trying, I get it 10 minutes after I post a question). obj.plus1 = request.responseXML.getElementsByTagName("forecast")[1].getAttribute("low");
No harm in asking. Glad you figured it out.
You wrote that: &gt; $('button').click &gt; // ... &gt; ( &gt; function () &gt; { &gt; window.alert(clickmessage); &gt; } &gt; ); &gt;... &gt;Rather than calling the "click" function with that function as an argument, the parser could see you creating a new scope (by encapsulating the function in '()'), and then creating an anonymous function. I really like to know in which circumstances what you wrote is going to happen. Can you please provide me with a reference or with a working example that demonstrate it?
It's a library that provides methods for functional programming in JavaScript such as map, fold and the like.
It's not a fork, it's a separate library that can act as an replacement for underscore.
Thanks!
Latest issue: http://riagora.com/appliness/Appliness-February2013.pdf (though if you want to play the youtube videos you'd have to go through the app store) All issues: http://www.appliness.com/download/
well I want to basically do the example I posted, except instead of having the code in the .html file I want to have a lightingController.js which does this, so how can I access the canvas from a separate script
&gt; It seems like to use document.getElement this has to be called inside the .html file. As in the script must be inside the html file (as in the example) instead of just including an external file like That's not how it works. What you're probably seeing is that you can't select nodes until the DOM is ready so I'd guess that your script tag was probably earlier in the page order than the DOM, or you tried to select before the DOM was ready, You need to wait for the browser to fire the Load or DOMReady event before selecting elements. The easiest way for a beginner to do this is by using jQuery http://api.jquery.com/ready/
If you want a middle ground, try: (function () { var undefined = void 0; // ... })(); If you already wrap entire files in an "Immediately Invoked Function Expression (or "IIFE"), assigning `void 0` to an `undefined` variable ensures that even if someone rebinds it somewhere else, your version is safe.
Has anyone found any reason *not* to use this over underscore?
I agree - having heard the comments on the podcast as well I seriously can't understand where they are going with ES6 and modules. It's like they haven't noticed all the stuff that's appeared in the last two years that actually works and people are using right now.
I wrote my post almost entirely by copying his code. While I didn't refer to it by name, my last two sections are referencing the problems that can happen when using Allman. 
Check my below comment because I'm trying to use that but it isn't working
Your elements are all mixed up ...things that are to be visible on the page go in the &lt;body&gt; so put your canvas tag in the &lt;body&gt;, and then put all the script tags just before the close of body at &lt;/body&gt;. And yes it's as expected you're trying to select the canvas element before DOMReady has fired, so change guard.js to do something like, document.addEventListener('DOMContentLoaded',function(event){ var canvas = document.getElementById("canvas"); var canvas_ctx = canvas.getContext("2d"); canvas_ctx.fillStyle = '#f00'; canvas_ctx.font = '30px sans-serif'; canvas_ctx.textBaseline = 'bottom'; canvas_ctx.fillText('Alertness: '+10, this.x-20, this.y-100); }) 
Ah, I see what you mean. You are correct -- his code as written would not exhibit the problem I described. I'll update the comment with a link to the examples from the google webpage. My intent was to discuss the problem with the syntax, not to demonstrate an actual example of the result. Why? Because it's supposed to be a topic for beginners, and the explanations for why some of these occur is not.
Okay now my html file looks like this &lt;!DOCTYPE html&gt; &lt;html lang="en"&gt; &lt;head&gt; &lt;meta charset="utf-8" /&gt; &lt;!-- Always force latest IE rendering engine (even in intranet) &amp; Chrome Frame Remove this if you use the .htaccess --&gt; &lt;meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" /&gt; &lt;title&gt;Prototype 1&lt;/title&gt; &lt;meta name="description" content="" /&gt; &lt;meta name="author" content="Hacksaw Games" /&gt; &lt;meta name="viewport" content="width=device-width; initial-scale=1.0" /&gt; &lt;!-- Replace favicon.ico &amp; apple-touch-icon.png in the root of your domain and delete these references --&gt; &lt;link rel="shortcut icon" href="/favicon.ico" /&gt; &lt;link rel="apple-touch-icon" href="/apple-touch-icon.png" /&gt; &lt;/head&gt; &lt;body onload="initGame('canvas');"&gt; &lt;canvas id="canvas" width = "1000" height = "750" style="border: solid black;"&gt; You shouldn't see this. &lt;/canvas&gt; &lt;div&gt; &lt;header&gt; &lt;h1&gt;Absolution Prototype&lt;/h1&gt; &lt;/header&gt; &lt;footer&gt; &lt;p&gt; &amp;copy; Copyright Hackaw Games 2013 &lt;/p&gt; &lt;/footer&gt; &lt;/div&gt; &lt;script src="brine.js"&gt;&lt;/script&gt; &lt;script src="wall.js"&gt;&lt;/script&gt; &lt;script src="weapon.js"&gt;&lt;/script&gt; &lt;script src="pistol.js"&gt;&lt;/script&gt; &lt;script src="character.js"&gt;&lt;/script&gt; &lt;script src="guard.js"&gt;&lt;/script&gt; &lt;script src="player.js"&gt;&lt;/script&gt; &lt;script src="level.js"&gt;&lt;/script&gt; &lt;script src="collision.js"&gt;&lt;/script&gt; &lt;script src="LevelManager.js"&gt;&lt;/script&gt; &lt;script src="prototypeB.js"&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; And I changed the guard to exactly what you said but still nothing is appearing. Did I somehow fuck up what you were saying in the html?
[Underscore vs LoDash](http://stackoverflow.com/a/13898916/227878)
It's worth noting that despite this headline, Enyo supports a whole lot more platforms than just WebOS. It's a great framework for web apps on modern desktop browsers, as well as mobile platforms like Android and iOS. 
So I added this document.addEventListener('DOMContentLoaded',function(event){ var canvas = document.getElementById("canvas"); var canvas_ctx = canvas.getContext("2d"); canvas_ctx.fillStyle = '#f00'; canvas_ctx.font = '30px sans-serif'; canvas_ctx.textBaseline = 'bottom'; canvas_ctx.fillText('Alertness: '+this.alertness, this.x-20, this.y-100); console.log("The print function ran"); }) And this isn't running. Did I do the addEventListener right? This is in the guards update function, and the rest of the code in that function is running fine
Oh, cool! Never tried reddit gold. Thanks!
In which browser is this? Put some console.log()s outside that document.addEventListener too ... e.g. console.log("before eventListener"); document.addEventListener('DOMContentLoaded',function(event){ var canvas = document.getElementById("canvas"); var canvas_ctx = canvas.getContext("2d"); canvas_ctx.fillStyle = '#f00'; canvas_ctx.font = '30px sans-serif'; canvas_ctx.textBaseline = 'bottom'; canvas_ctx.fillText('Alertness: '+this.alertness, this.x-20, this.y-100); console.log("The print function ran"); }) console.log("after eventListener"); After that do you see the new console logs?
Sweet, hour long too. Tons of info.
firefox And the before and after logs are printing but the "the print function ran" isn't
That should work. I guess it's a subtle error and it's pretty hard to diagnose those via reddit so if you could host the code somewhere that'd help.
This is helpful for sure. I work with vanilla JS and jQuery everyday and am used to MVC frameworks like backbone.js and AngularJS is a bit hard for me to wrap my head around.
I hear this kind of question all the time. But the question itself illustrates a fundamental misunderstanding of the tools and the problem space as a whole. This question is very similar to saying "I have a background in interior design. How do I get started in architecture?" There are a loooot of steps, because you're essentially starting from 0. If you consider yourself a "jQuery developer", then most likely, you're a designer who has some aptitude for development. But your primary competency is still in design. Frameworks like Angular, Backbone, and Ember are all just tools for engineering software solutions that happen to run in the browser. In order to correctly use them, the first step is to forget about the library entirely and learn about good development practices in general. After you develop your skills from a software architecting standpoint, you will be able to evaluate the problem at hand and choose the correct tools (of which the js framework is only 1) to solve it.
I would strongly recommend taking some software development course (in a formal classroom or even [one of the many free online options](https://www.youtube.com/watch?v=JzpkXLH9zLQ)) of some kind, even if it's in java, C++, or python. The truth is that just a couple of years ago, one could just "hack their way" through javascript work. But in the last 2 or 3 years (really, since Chrome and V8 turned the web development world upside down), javascript development is becoming simply another tool for engineering. And once you learn software engineering principles, then javascript will be just another tool to apply your knowledge.
So this is really just an advertisement?
&gt; Lo-Dash is a low-level utility library that offers consistency, customization, and performance. Created as a fork of the Underscore project, Lo-Dash has grown in features and popularity, while remaining faithful to its original tenets. --The opening words of [Say "Hello" to Lo-Dash](http://kitcambridge.be/blog/say-hello-to-lo-dash/) by Kit Cambridge, one of Lo-Dash's authors.
It may be helpful to understand that jQ provides very granular tools to work on a web pages DOM. But frameworks like AngularJS provide a framework to build applications. In Angular's case, single-page apps. Angular provides a way to bind html to JavaScript and the Javascript to whatever is on your backend (asp, Java, Perl, etc.). To use MVC the parlance: html=View, Javascript=Controller and backend= Model) jQuery gives you the nuts and bolts to build Angular's scaffolding. Angular's scaffolding provides the framework to build your application. The coolest part (for me) is that if you do it right, it's a clean separation of all three parts and really helps your organization and scalability.
This is much more helpful then what I was going to say 'drop the framework and learn JavaScript first.'
I see what you mean, you mean seeing a netscape logo in general :)
I've been slowly trying to find this balance as well. I honestly don't know what it is that everyone is looking for. Just from general comments I get the sense that people want to be able to view source on a page and just see uncluttered html. With sites that have minimal functionality requirements, this isn't too hard to achieve but once you cross the web application line, it's difficult to bind functionality to the DOM without having some sort of mess somewhere. Although data-binding can start to look like the next generation of onclick coupling, I think it does a lot more than what the original onclick integration could ever do. I think knockout is a lot more powerful than some people first realize simply from the vantage of how a developer can extend observable functions and write custom bindings. I had to write a data grid &lt;table&gt; for this project I'm working on. My initial go at it using knockout was ugly. The table structure was wrought with foreach, with, &lt;!-- ... --&gt;, click, event, css, attr, etc... bindings. It was quite a mess, and one that I'd have to duplicate all over the project. After reading up on extending observables (ko.observable.fn.coolExtension) and custom bindings (ko.customBindings.dataGrid), I was able to reduce it all down to just: &lt;table data-bind="dataGrid: myData"&gt;&lt;/table&gt; This would just draw up the default implementation. If I wanted to customize how the data was displayed, I'd add a &lt;tbody&gt; tag. I ended up making a gridCell binding as well to help with rendering different data types. I think at some level, data-binding or other forms of manageable integration of javascript functionality needs to be embraced. And after having seen first hand the power of knockoutJS + SignalR, I frankly cannot imagine a better way to move forward with manageable web applications, and integrating them so seemlessly with the UI. If you haven't watched this Ryan Niemeyer's [video](http://vimeo.com/51103092) at the Twin City's Code camp from last October, I highly recommend it.
Yeah. It reminds me of being a teenager, tinkering around on a young internet with my dad's old computer.
replace location.reload(false); with display_prompt() That _should_ work. Also, it's not best practice to document.write, because, after the page has loaded -- it will kill anything already loaded on the page. If you want to use document.write, it should be run inline with the loading of the page. i.e. get rid of the onload, and call the function with a "display_prompt()" below the end of the function body. The "best" way to do this would be through DOM manipulation -- change the body of the document dynamically based upon user input. You can have &lt;input&gt; elements in the body and a &lt;button&gt; -- the button can have an 'onclick' handler that points to a function that takes whatever is in the textbox and runs your function on it. Or, it could even write out as many inputs as needed based on the number entered. There's a lot of cool stuff you can do :)
It works! but it will insert the bad input into the array. Is there a way around that? Edit: Figured it out. Had to add Numbers.pop() to remove last element from array and i-- to go backwards in the loop.
This is my client-side scripting class and we're not there yet. Maybe someday..
Sublime Text 2 + Chrome DevTools (or Node-Inspector for node.js dev) = The only front-end/JavaScript dev IDE you'll need. IMHO, learning to code without all the bells a whistles of an IDE will without a doubt be worth it.
Very true. The front-end devs I work with are incredibly competent with CSS/HTML/JS (and abstractions thereof, such as Slim/Haml, Sass, jQuery, etc) but they just can't wrap their heads around the logic of building an application from the ground up. IMO This sort of competency requires years of experience (like how I dropped into this job and picked up rails in a few weeks) in much the same way that I couldn't just figure the rules of a good graphical/interaction design the way these guys can (without a lot of wasted time).
Hi, Maybe you already know this link : http://egghead.io/ There are videos covering from basic to advanced techniques. Good luck in your journey :-) I hope you enjoy angular 
This is noteworthy why exactly? I mean, I _am_ a person who wouldn't use an IDE. 
That's funny, I rarely use the mini-map--I run the two left/right panes, though I may have to try the four pane at some point. 
Right. For example, if one is a Democrat, it's _not_ because they are pro-life, for a national health care system, etc. Instead one is those things because one is a Democrat. If it suits you to write off opinions on this basis, that suggests more to me about _your_ association with a 'team' than mine. "Those Democrats! They all sound the same!" you are saying. You have said less than even just "I disagree," you have said "You have some opinions I recognize" with condescension. 
Love it, but that website............
.... is awesome?
It is, I agree, though that's what came out trying to keep it simple. The alternative was to use one potentially large configuration object which I decided against. Any suggestions ?
if you call document.get and the corresponding element is not yet available in the DOM, you'll get "null" as a result. So you need to include the script after the element, be it external or internal. You may also use DOMready (all native elements are existing within the DOM) or an elementReady function: (function er(){var el=document.getElementById('canvas');el?init(el):window.setTimeout(er, 45);})(); function init(el){ /* el will contain the canvas */ } 
If I'm correct, $('spoiler, .spoiler').spoilerAlert() could just be included in the spoiler.js file itself, right? I guess you only have to put it in your own code if you want to use tag, right? And... &lt;spoiler&gt; isn't a valid HTML tag, is it? I think I'd just use $('.spoiler').spoilerAlert() for that reason. Cool idea, though.
TIL coffeescript's compiler is written in coffeescript. Makes my head hurt a little to think about the first version, but still neat!
I haven't given this any thought cause I just woke up but his reason for not using ID is that someone else may use the same ID name so you should use class instead but someone may use the same class name, too, so ...
People need jQuery to do this? No.
Why not just namespace IDs like you did your classes? If you think it adequately solves the collision problem for classes, then why not for IDs? Fact is that querying by IDs is way faster than by class, so my advice is to *use* them.
i like your style.
Beware: it appears that from google the datejs site is compromised, there's a couple of "buy drug" shortcut links that are visible from the google site entry. Fuck spammers. Edit: Site appears to be okay.
&gt; This sort of competency requires years of experience in much the same way that I couldn't just figure the rules of a good graphical/interaction design the way these guys can This goes for me as well And this is also something very important to underscore. Unfortunately, many javascript devs look down their nose on those design people trying to make headway in development rather than give constructive advice. They have to understand that they just happen to have a different background and in the end are just trying to make the best app they can. From the other side, devs do the exact same thing when we try our hand at design. Our design would likely make any *real* design/user experience guy want to puke (not to mention the user).
It's about focusing on reusability so that consumers of your code will not unknowingly shoot themselves in the foot when they write their code. If their javascript code is using IDs to get a DOM node and it is a duplicate ID that collides with my widget - their is zero guarantee as to which DOM node will be returned. On the other hand, using classes will guarantee that one of the nodes returned from your selector will be the one you care about. Will odd behavior occur? Sure, but at least with classes you are guaranteed to always have access to the node you want.
No. The point is, if you write a widget that's supposed to be reusable, you have to use classes in case you need the widget more than once in the page. For example, instead of creating a widget with id="blogroll", you could create a more generic widget with class="link-list", where the blogroll is just a specific use of the link-list. The point is so obvious that made me go "well, DUH", but maybe it's not as obvious as I tough...
Seems like a shallow wrapper over the [Google Closure Tools](https://developers.google.com/closure/library/docs/tutorial); I know they mention this, but they practically copied the example verbatim. I'd like to hear exactly what this library might provide over base Closure.
I thought the same thing when I first encountered the problem in my team's codebase (I'm the author of the article), but it's really not obvious unless you have spent time writing a web UI/widget framework - which not many people do.
That makes sense (multiple widgets) now that I'm awake but using classes for something that's used multiple times is required so using an id wouldn't make sense in the first place.
Seems to be the way to go nowadays. https://twitter.com/paul_irish/status/293609406376058881 http://www.impressivewebs.com/ids-not-make-documents-semantic/
Kenman it enables non-closure projects to take advantage of the Closure Tools technology. Google Closure projects are already there, doesn't concern them, nothing provided.
Checkout Sammy.js (twitter used to use it when they had hash URLs). It definitely supports routing hash urls, not sure if they've added pushstate. But I'm sure somebody has created a plugin (or you could relatively easy, with a few edge cases)
so, if they want the closure tools tech, why not become a closure project? 
You are asking the wrong question. It's not a matter of wanting or not closure tech. It's about wether you need Dependency Management for **your project**. Do you?
It's newer. That means it's less used, less tested, and seen by fewer eyes. 
i do not believe I am, there are a plethora of solutions for dependency management that already exist, why would i choose this one? if its "to take advantage of the Closure Tools technology" why wouldn't I just skip this solution and just use the google closure tools. 
Google Closure Tools will not work with your jquery project. Closure tools requires that your project is written following the Google Closure Library style, norms and conventions. If you author Google Closure Projects then Mantri is not for you, you already have the closure tools at your disposal. 
a call BS on this. so having 2 floats which are objects will be faster than native! come on, get real. yeah, i have seen how underscore performs, it is ok, native is always faster in interpreted land.
&gt;Also, ExtJS in my experience is horrible when you want to deviate slightly from the normal functionality it offers. Experiencing this now. Also agree with the documentation being pretty off in some cases. From working with stuff like Knockout and Backbone and rolling my own "widgetry" then moving into ExtJS it's pretty frustrating and at times seems backwards and counter intuitive. 
When you compile something using itself it is called bootstrapping. A good example is when Linus compiled the Linux kernel using his own Linux kernel for the first time.
sweet!
This is concise and awesome, but it isn't _really_ the Sieve of Eratosthenes. There was a really interesting academic paper a while back in the Journal of Functional Programming that proved that the above statement didn't do the same calculations as the Sieve of Eratosthenes, and also did a few cross-offs multiple times, making it a much less efficient algorithm. Instead, the author came up with several other algorithms that used different data structures internally (maps, priority queues, and wheels), and she ended up creating highly optimized versions of the algorithms, that were still purely functional and extremely elegant. It's a great paper, and very accessible. If anyone's interested in FP research, it's definitely something you have to read: ["The Genuine Sieve of Eratosthenes", Melissa E. O’Neill](http://www.cs.tufts.edu/~nr/comp150fp/archive/melissa-oneill/Sieve-JFP.pdf)
[It had to be done.](http://i.imgur.com/HLFzmJA.png)
Thanks, I tried to stay true to the sprit of the algorithm, although the use of iterators that accumulate with state to other iterators is horribly inefficient compared to the approaches Professor O'Neill advocated.
My suggestion: make a video.
Not to be a dick, but isn't this technically flash based? I mean if you disable flash this doesn't work, and further more JavaScript doesn't have access to your clipboard for obvious security reasons. With that being said, this is very cool and will certainly save me time taking screenshots and sharing them quickly!
For Chrome I love [Google's Screen Capture](https://chrome.google.com/webstore/detail/screen-capture-by-google/cpngackimfmofbokmjmljamhdncknpmg?hl=en) - nice and easy to use, defaults the name of the file being saved to be the title of the page it's taken from, defaults to .png format (take note Atlassian, that's what Jira should do), and allows for basic highlighting. Sure it requires a plugin to be installed and isn't cross-browser, but it's an excellent tool nevertheless.
That's why we use namespaces. If you namespace your IDs properly, collisions shouldn't happen. If they do happen, whether it's ID or class, it will cause problems you need to deal with. So, avoiding IDs is unnecessary if you're going to use namespaces anyway.
Okay, that is way cool. Any chance I could see the non-minified code?
Great! Only thing missing is the ability to add text (or did I overlook that?)
Wow, I stand corrected! After looking up documentation on this I know understand why it works. The security issue would be if a browser could access your clipboard by either adding to it, or selecting from it without user intervention. The paste actually fires an event in the browser that you can attach to, that is cool. http://dev.w3.org/2006/webapi/clipops/clipops.html
Link is dead (2/25/2013 @ 15:18) Edit: back up again.
this is very cool. I can't tell you how often I've opened photoshop just to crop and/or draw on a screen shot. Bookmarked!
&gt; and even then we only use it because you can't specify a default file name or even a file extension from Javascript at this point Not wholly true as you can utilize the [download attribute](http://www.whatwg.org/specs/web-apps/current-work/multipage/links.html#downloading-resources) to do this. [It's currently not supported in stable Firefox but should be in Fx Beta](http://caniuse.com/#feat=download). I believe you can generate a click event via JavaScript to have it generate a download pop-up for you but I'm not certain and can't find the article I'm thinking of. By the by, imgur also supports pasting and does so for multiple files with automatic duplicate checking.
That is amazing and the interface is absolutely astounding. So slick and smooth. Will definitely use &amp; share it :)
Yup, you can simply create an anchor tag with the download attribute and then do a.click()
Imgur has this feature also :)
I always use the snipping tool and then paste the image in imgur. Quick and easy
Lo-Dash was created, in part, to cover bugs/issues that Underscore has failed to address. In the 9 months since its release, Lo-Dash has had more repo activity than Underscore's entire 4yr commit history. Lo-Dash is also tested on more browsers and environments and its unit tests run in more environments (Ringo, Rhino, Narwhal, Node, PhantomJS). Lo-Dash is updated more frequently so bugs are caught and patched sooner.
Store the data in an external file in [JSON](https://developer.mozilla.org/en/docs/JSON) format. For example western.json could look like: { nouns: ['outlaw', 'horse'], verbs: ['rode', 'shot'], adjectives: ['fearless', 'handsome'] } You can request the JSON data asynchronously with AJAX. I suggest using [jQuery](http://api.jquery.com/jQuery.getJSON/) to make things easier. The file you request should exist under the same domain as the webpage, or you'll run into some 'same origin policy' problems. To let users choose which data to use for generating story titles, just display a dropbox or something and use the different values as filenames. For example: &lt;option value="western"&gt;Western&lt;/option&gt; would fetch western.json. Or you could put everything in a single JSON file, so you only need to request it once. Like this { western: { nouns: ['outlaw', 'horse'], verbs: ['rode', 'shot'], adjectives: ['fearless', 'handsome'] }, pulp: { ... } }
We hope to open source the app in the future - if you have any specific questions just PM me 
"Opened Paint." Not even once.
I just use greenshot. 
On Linux (at least on Ubuntu) you should press Ctrl+PrtSc, as PrtSc alone opens a "Save Screenshot" window.
Here's an example of how to access the clipboard from JavaScript: http://joelb.me/blog/2011/code-snippet-accessing-clipboard-images-with-javascript/
LighShot one and only.
Excellent, although if you're using the modulo operator it isn't a true sieve :-)
I'ma let you finish but c.oppy.me is the best screenshotter of all time. It does screenshots, formated text, files, multiples files, and puts the link to your automatically uploaded content on the clipboard for pasting. http://c.oppy.me/
ah well, go figure. that would explain why it looks so much like ruby.
Half of your post is java while the other half is JavaScript.. You may want to figure out what language you are using...
I think you meant to post this in /r/lua EDIT: Oh, it's a Lua parser written in Javascript.
Sorry, fixed, Been looking online specifically for javascript, and I guess java is coming up even though the sites say javascript, but the person making the post is looking for java it seems. 
heh... did you mean to post this in Java?
Didn't know there was a difference. Does it belong there rather than here?
So, the only reason to create an array would be if you wanted to keep track of the numbers themselves, otherwise you really only need counter variables: var even = 0; var odd = 0; In your isEven function, increment like so: if(//some code){ even++; } else{ odd++; } In your for loop, you need to make a call to your isEven function. Finally, put your document.write statements outside all of it (make sure document.write is what you want to use--it will write over the page).
I gave it a try. I am also new to javascript. I have a feeling it could be made a lot simpler. :P function generateRandomNumbers(limit) { var randomNumbers = []; for (var i = 1; i &lt;= limit; i++) { randomNumbers[i] = Math.floor((Math.random() * 100) + 1); } return randomNumbers; } function isEven(number) { if (number % 2) { return true; } } function countOddEven(randomNumbers) { var results = { 'odd' : 0, 'even' : 0, 'limit' : randomNumbers.length - 1 }; for (var i = 1; i &lt;= randomNumbers.length - 1; i++) { if (isEven(randomNumbers[i])) { results.even++; } else { results.odd++; } } return results; } var randomNumbers = generateRandomNumbers(100); var results = countOddEven(randomNumbers); document.write( 'Total numbers: ' + results.limit + '&lt;br /&gt;' + 'Odd numbers: ' + results.odd + '&lt;br /&gt;' + 'Even numbers: ' + results.even ); 
Thanks for the tip about momentjs implemented it saved me a bunch of messy date to string conversions.
or you could append a digital counter to the end of the ID. id="some-value-" + count
I've experienced that pain firsthand many times; glad you like it :)
And I like it, great when people show that JavaScript can strike a nice balance between readable and compact. +1 from me!
Why not call it nails? Or jails?
Why not use the Snipping Tool in Windows?
Big difference... Java is a virtualized object-oriented language (among other things) that is used mostly in applications, with the exception of applets. Javascript is a scripting language. They are very different. Sorry I couldn't be more helpful in that regard, but I don't even live here. Just passing through on random. I'd try in java. Or stack overflow. Just as a thought from me, do you have to use 2D arrays? That makes it way more convoluted, at least for how my brain is wired.
*Knockout* and *Backbone* are MV* libraries, meaning they help you structure your application into models, views and view-models/controllers. In case that doesn't sound familiar, I suggest your read more about [MVC and its variants](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller). In short, using MVC leads to more modular and maintainable code, which is why they're recommended in any non-trivial apps. *Mustache* is a templating library. It lets you define reusable markup templates. In case templating is unfamiliar to you. I suggest you read [this wiki article](http://en.wikipedia.org/wiki/Web_template_system). *Node.js* is a platform and a collection of libraries for developing server-side JavaScript applications. It's based on Google's V8 engine (the same used in Chrome). It's even-driven and claimed to be very scalable. Many people favor Node.js because it allows you to write server-side apps in the same language as the client-side, which is of course an advantage. I hope that helped some.
did you look at antlr at all? antlr 3 has a javascript output target, from the EBNF is is very simple to go to a full cross compiler.
[This might interest you.](https://github.com/blaisejarrett/imgur-snippingtool/blob/master/README.md)
There's a famous phrase that goes, "Java is to JavaScript as ham is to hamburgers". They do look similar, in both name and syntax, but they are completely unrelated to each other.
Since I like to code both in JavaScript and in Lua, have my upvote. I'd really like to see a performance comparison between your handwritten parser and an emscripten-compiled version of the original parser.
Once I finish writing my thesis report I'll add a page regarding the benchmarking. I'll look into including emscripten-version as well. However, as lua-cores parser is tightly coupled with the compiler i dont think i can get a solid comparison.
Thanks for your answer. I'm a friend of handwritten JavaScript, so I'm always glad to find testcases that shows it outperforming transpiled code.
I'll briefly walk you through simplifying your `isEven` function. Currently it looks like this: function isEven(randomValue) { var status; { if (randomValue % 2== 0) { status = true; } else { status = false; } } I personally put the opening braces on the same line as the keyword at te start of the block. Some people prefer to but the braces on a new line, like you have, especially people from a Java or C background, but in JavaScript, although there is no right or wrong way to do things, the "right" way is as follows: function isEven(randomValue) { var status; { if (randomValue % 2 == 0) { status = true; } else { status = false; } } I've also indented it correctly. Indenting makes it much easier to see which part of the code we're in. As we can see, there's an extra opening brace after `var status;`, so let's remove that, otherwise we'll have a syntax error. If you want to check your code for errors, try http://www.jshint.com/. If you feel hardcore, try http://www.jslint.com instead. It's really strict. Currently running the does nothing. This is because it doesn't affect any variables stored outside it, nor does it return anything. At the very end, you should write, `return status;`. Now you have: function isEven(randomValue) { var status; if (randomValue % 2 == 0) { status = true; } else { status = false; } return status; } and so in your JavaScript you could write `isEven(24)` and that would evaluate to `true`. So we've fixed the function and made it work; next let's make it a bit cleaner and more efficient. It's a pattern that comes up frequently in JavaScript: &gt; Is X true ? if so, set `myVar` to true; else set `myVar` to false. This can be simplified to just: &gt; Set `myVar` to X. So with that change, we have: function isEven(randomValue) { var status; status = (randomValue % 2 == 0); return status; } That's a big change! But we're not done yet. Let's combine the first two lines: function isEven(randomValue) { var status = (randomValue % 2 == 0); return status; } And why not just omit the variable entirely? function isEven(randomValue) { return (randomValue % 2 == 0); } *One line!* There's only one thing left to talk about: When doing equality, JavaScript has two operators: `==` and `===`. `==` checks to see if variables have the same value; `===` also checks to see if they're of the same type. So, for example, if you do `if (6 == "6")` it comes out true, because it converts the "6" into a number before comparing them. Same if you do `if ("A string" == true)`, as it turns the string into a boolean, and everything but the empty string is true. 0, the empty string, `NaN`, `null` and `undefined` are considered false when using `==` and everything else, even empty objects, empty arrays and negative numbers, are true. While it makes no difference in this example, I would use `===` in your function rather than `==`. So, the final function: function isEven(number) { return (number % 2 === 0); } P.S. okay, one more thing to mention: I changed the name of the argument to `number`, because the fact that the number is random has nothing to do with this particular function. By giving it a more generic name, it makes this function reusable. You could save the function somewhere and paste it into future projects.
[snipping tool](http://windows.microsoft.com/en-US/windows7/products/features/snipping-tool)
It'd be great to have a demo, specially for lazy fucks like me.
Thanks for giving me something to warm up to this morning. Here's what I came up with: Github Gist: https://gist.github.com/alexguzman/5038362 jsfiddle: http://jsfiddle.net/WryGA/1 Let me know if this is what you were aiming for. EDIT: Code provided below, if you don't want to navigate to the above sites: var Cars = [ { Make: 'BMW', Model: '850ci', Color: 'Green' }, { Make: 'Rover', Model: 'SD1', Color: 'Black' }, { Make: 'VM', Model: 'Golf', Color: 'Bronze' }, { Make: 'Volvo', Model: 'P1800', Color: 'Green' }, { Make: 'BMW', Model: '850ci', Color: 'Green' }, { Make: 'Rover', Model: 'SD1', Color: 'Black' }, { Make: 'VM', Model: 'Golf', Color: 'Bronze' }, { Make: 'Volvo', Model: 'P1800', Color: 'Green' } ]; /** * Finds Unique Values for Provided Properties * @param {Array.&lt;Object&gt;} Objects * @param {Array.&lt;string&gt;} Properties * @return {Array.&lt;Array&gt;} Unique Values for Properties */ var UniquePropertyValues = function(Objects, Properties) { var UniqueProperties = []; for(var i = Objects.length - 1; i &gt;= 0; i--) { for(var j = 0, l = Properties.length; j &lt; l; j++) { if(UniqueProperties[j] == void 0) UniqueProperties[j] = []; if( Objects[i][Properties[j]] != void 0 &amp;&amp; UniqueProperties[j].indexOf(Objects[i][Properties[j]]) == -1 ) UniqueProperties[j].push(Objects[i][Properties[j]]); } } return UniqueProperties; }; console.log(UniquePropertyValues(Cars, ['Make', 'Model', 'Color']));
I... I didn't know about it. *hangs head in shame*
Only if the duplicate objects in the array share the same references, they will return true on an equality comparison. So if you want to be sure, create a recursive function to compare different types: function compare(item1, item2, typesafe){ var type1 = typeof(item1); if (typesafe &amp;&amp; (type1 !== typeof(item2))) { return false; } if (item1 == item2) { return true; } if (type1 === 'function') { if (/function[\(]*([^)]*)\s*\{\s*\[native/.test(item1)) { return false; } return (item1+'').replace(/[\s\r\n]/g,'') == (item2+'').replace(/[\s\r\n]/g,''); } if (type1 === 'object') { if (typesafe &amp;&amp; ((item1 instanceof Array ^ item2 instanceof Array) == 1)) return false; var result = true; for (var attr in item1) item1.hasOwnProperty(attr) &amp;&amp; result = result &amp;&amp; compare(item1[attr], item2[attr], typesafe); for (var attr in item2) item2.hasOwnProperty(attr) &amp;&amp; result = result &amp;&amp; compare(item1[attr], item2[attr], typesafe); return result; } return false; } Now you can create a unique function using the compare function. Please avoid overwriting native prototypes, as it could change the internal behaviour of your types: [].unique || (Array.prototype.unique = function(){ var result = [], unique, attr1, attr2; /* use for in to allow for sparse arrays */ for (attr1 in this) { if (!this.hasOwnProperty(attr1)) { continue; } unique = true; for (attr2 in result) { if (!result.hasOwnProperty(attr2)) { continue; } unique = unique &amp;&amp; !compare(this[attr1], result[attr2]/*, true for typesafe */); } if (unique) { result.push(this[attr1]) } } return result; } Obligatory warning: untested code, use at own risk.
I don't think anyone else has replied not because they aren't seeing this comment, but because you answered it so well. A+ +tip $1.50 verify
The code looks nice (by my standards).
Great post, I think a lot of folks should read this and understand it! Here is another good post that is related but has a few more techniques that 37 signals used to improve UI performance in base camp. http://37signals.com/svn/posts/3137-using-event-capturing-to-improve-basecamp-page-load-times 
Thanks!
Any favorites?
Doesn't using [delegated events with .on()](http://api.jquery.com/on/#direct-and-delegated-events) achieve the same thing? e.g. $("#dataTable tbody").on("click", "tr", function(event){ alert($(this).text()); });
Probably it yields bad code modularity, so it's a trade off between better performance and readability of your code.
Yea... okay wow. As a computer engineer major i feel like i should've know this difference. And yea, 2d arrays. This is why i'm having problems. I could do it a multitude of other ways but this one makes this just... harder.
Alternate title: _The DOM is Evented_
I think that the article is remiss in omitting this detail. This code following code is just bad IMO. $("ul.my-list").click(function(evt){ if ( $(evt.target).hasClass("my-item") ){ // do stuff } });
A good book that talks about event handlers and event propogation in depth (despite being ~100 pages) is [Callum Macrae's "Learning jQuery"](http://www.amazon.com/Learning-jQuery-Callum-Macrae/dp/1449335195) which was just release this year
agreed, there is nothing preventing having body being the one node that gets all event handlers, but that would severely affect the code's readability. Sure there may be a performance improvement, but I'm going to guess it's minor (unless you're google and you are squeaking every single ms of speed out of your apps). I would be interested in seeing hard numbers around this.
Can you explain why that is bad code? If it's the case of using on vs. click, my understanding of jquery knows that click() is just a shorthand version of on("click", ...). Are there problems with that, if so, I would love to learn about it.
Yep, that's another way to attach the event. I just want to note that I am unaware of any differences between click() and on("click") because the [click() method is just a shortcut for the call to on()](http://api.jquery.com/click/): &gt; This method is a shortcut for .on('click', handler) in the first two variations, and .trigger('click') in the third. 
You used the wrong quotation marks. Use classical single/double quotes: " or ' and the error will be gone.
Aside from the issue of the quotation marks (which others have noted before me), in the middle of your script, there's this line: &gt; By the Way Testing the Script 29 If it's in the middle of your code like that, the script won't work - you can't have random text in the middle of the script. If it's not in the middle of your code..well, my bad.
Writing extremely specific yet less maintainable code is almost always bad. And, like someone else mentioned, this has been in jQuery for a while now (permanent event handlers).
Ah, ok - that's a great point that I completely missed (and also didn't know about the delegated objects of the on() method). I will add this point to the article.
You should create a variable to hold that instance to avoid reflows.
For future reference, underscore.js has many methods that would make this a lot more compact. At least reading the source of that library might give you some ideas.
Good point, I was not aware of this feature with the on() method at the time of writing and I have updated the article to reflect that. Thanks!
Actually a big difference is that using "on" allows you to dynamically load extra content after you registered the event handler, and the event handling will also work on the new dynamically loaded content, while if you had used the traditional $(..).click() method this would not have worked.
This has to be the most concise yet thorough article on event capturing and bubbling I have ever seen - thank you!
The quote thing can happen if you're cutting/pasting through anything other than a plain-text editor or if you have "smart quotes" enabled. MS Word is not a code editor.
no problem!! like the way you scale it down to one idea/implementation at @ time!
Good call, demo is coming soon.
Notably, it's really really fast. You can bind a hotkey to instantly capture just the visible region or whole page (auto scrolls, knitting a mosaic image, and returns to original scroll position) and save to a specified location on disk. One keyboard shortcut and it's saved. Neato.
My thought was that whoever uses this is going to be using modernizr already so why duplicate a resource that's already been done? At the same time I didn't realize it's only 1 line to add it in...
I can imagine there might be cases where you don't want children being evented to have the same behaviour as their parents, though... and it could also lead to multiple events triggering for one child of different ancestors.
Do people really think that i = 0 is proper code to demonstrate a parser on? Oh, yeah, you *need* a Lua parser. Can't live without it. See what it can do. Right.
Just getting this straight, the creator of coffeescript is a redditor? Cool beans! What are your opinions of forks like coco?
if *i = 0* doesn't cut it, pick the one you like at: http://oxyc.github.com/luaparse/test/index.html
Why not use angular or ember?
code golf go! var evens = 0, odds = 0; for (var i = 0; i &lt; 100; i++) (Math.floor(Math.random() * 100) + 1) % 2 ? evens++ : odds++; document.write("odds: " + odds + ", evens: " + evens);
Seems overkill. All he needs is a basic XHR wrapper.
Awesome! Great tool for being able to start an image/website with a colorful background. I even like the texture, but I imagine you're already thinking about creating a smoother one or allowing for different options for that. I also suggest adding a permalink, so people can share their creations.
Wow very nice. And just 3 lines, compared to my effort of 30 lines below!
Easy. You do the same as you would do for the player. You raycast through the world's cells/edges/whatHaveYou to check if there's any obstacle in the way.
So, you're running a fat client that can open a small browser-like window. If you can point it anywhere, then you could reference a local page. I'm not sure what you mean by "another application from the same local machine" if you're not running a local web server. If you are working on a box that's running a webapp, then I imagine you should be technical enough know the answer to whatever you're asking here. If you're trying it and it's not working, it could be because your fat client, even though it has a browser-like window, doesn't allow javascript, cookies, scollbars, or other things that are normally allowed in a real browser. How far off am I from what you're asking? Either way, Java or ASP is probably overkill.
It depends very much on how the walls are defined in your code, but basically, you have to "walk" along the *dis* vector until it reaches the player or crosses a wall. If your world is a regular grid, the Permadi tutorial should give you everything you need. HTH,
Definitely a permalink feature would be cool. Looking into that. I've played around with smoother textures, but this was my favorite for showing off the progressive aspect (fine-grained without too much noise). It's a simple in code to change the texture, but I haven't built the hooks to connect it to a UI. It wasn't meant to be a tool so much as a simple toy. There *are* a couple of nice little utilities in there that I'll probably peel out and document individually, though.
Is `scope.vocab_words[2] instanceof g`? Edit: it's probably a g object because angular is minified, including the object name. I imagine if you switched to a dev copy of angular, it would be a more useful name you see. I would break your expect/equals up into the constituent properties, if that's what really matters. or you could do something like `_.extend({}, scope.vocab_words[2])` to fake-cast it to a plain object before testing.
Stay on /r/coffeescript please.
Actually the browser object is embedded in a custom control page along with some other controls such as navigation, log in/out forms etc. The control pages themselves are not htm documents. They are proprietary closed format and are laid out using manufacturer's A application. I launch them full screen on a PC and have almost everything I need to to control the sound system on those pages. Except, manufacturer B, whose equipment I also use in the project has their own Windows application for controlling their gear. The two applications don't talk directly. What I would like to accomplish, would be to make an htm document that embeds manufacturer B's application and then embed that htm page in my main control application. It would be so much more elegant to control the whole sound system from one app running full screen, where application B is almost seamlessly embedded in the application A. So what I'm looking for is a piece of javascript that lets me display and interact with a local application inside an htm page running locally on IE. No web server technologies involved.
The applications are BSS London Architect and Lab Gruppen Device Control. London Architect is a very powerful tool for controlling BSS digital audio processors. It lets me make very interactive control pages for the end user. Lab Gruppen (amplifier manufacturer) has their own application for monitoring and control of their amplifiers. What I would like to do is to display Lab Gruppen application on BSS control pages through the web browser object that BSS provides as part of their tool kit. I need to build a htm document that opens and displays the Lab Gruppen application, and lets me interact with it. Everything runs on one machine, no server client technologies involved. Thanks.
This is fixed now; will be included in the v0.2.0 release. Thanks for the feedback :)
you forgot to close the function body. just add `}` to the end of your script, and you're good to go.
Thank you so much. I've been staring at that for hours. I can't believe I missed that.
Do I know what it could be used for? No. Is it still cool as hell? Yes.
If you work with Sublime Text 2 there is also a JS Lint package you can install that will inline highlight rows with syntax errors and suggestions for best practices for you as well.
If you don't cancel the bubbling / stop the propagation the event can still be captured at the body (or its parent, document and *its* parent, window)
And in 3d?
WatchJS was born here and I am glad of this new update. Check the new features :)
 [**@melanke**](http://twitter.com/melanke): &gt;[2013-02-27 02:49](https://twitter.com/melanke/status/306596878387146752) &gt;WatchJS 1.3 Released [*github.com*](https://github.com/melanke/Watch.JS) And it is awesome! ---- This comment was posted by a bot. [[Did I make a mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/19awo9%0A%0APlease leave above link unaltered.) [[Make a suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [[Translate this tweet]](http://translate.google.com/#auto/en/WatchJS%201.3%20Released%20https%3A//github.com/melanke/Watch.JS%20And%20it%20is%20awesome%21) [[FAQ]](http://www.reddit.com/r/TweetPoster/comments/13relk/) 
Very cool! I want to steal the Perlin noise, to port some old Flash experiments to JavaScript. Did you write the Perlin noise code?
It's heavily referenced against a source that I wasn't able to find again when I went looking. That was glsl, though, not javascript.
Then why not just build it as a EcmaScript 5 shim? if ( parseInt('014') !== 14 ) { window.parseInt = function() { // fix here } } For me, and anyone else using the code, parsing an integer is still done with regular 'parseInt'. No new API, and nothing else to think about, just correct behaviour.
Hey guys, (thanks for posting, adamzx3!) I've been lucky enough since last Spring to get some time between projects to develop Sails.js. I'd been wanting to work with Node.js, but doing production code was just a little too time-consuming. Sails.js has saved me loads of time on subsequent projects, and made it much easier to spin out realtime and single-page web apps quickly. Since adding on the ORM last November, things have gotten a lot more exciting. My goal is for us, the community, to build *the MVC framework* for Node.js, but with fresh perspective from the ten years that have gone by since Rails came out in 2004. I think we're off to a pretty good start. If you've got any questions or thoughts, let 'er rip.
Take a look at http://stackoverflow.com/questions/10060536/jquery-autocomplete-mention, there seems to be quite a few good solutions there. Within that conversation there's an interesting JSFiddle that uses jQueryUI: http://jsfiddle.net/67dxH/
&gt;Painful styling and theming - an embedding page must prefix all of its CSS rules with #mytemplate in order to scope styles down to the template. ... we're hosed if the embedding page already has an element with that id. Is using &lt;template&gt; really that different from Method One: Offscreen DOM (quoted above)? You still have to give it a unique id. And you don't have to prefix all CSS rules with the hidden DOM element's identifier if you don't want to.
No, they're different languages; you can know one without really knowing the other - that seems pretty separated to me. I see your point about allowing related posts, and while I might disagree with the relevance, this is really only a useful link for people who are familiar with and actively using coffeescript. So it doesn't belong here in my opinion. It looks like that's not the popular view.
But I precompile my handlebars templates.
I think that when you're talking about large, JavaScript-heavy applications, you're mostly going to see people using frameworks to help manage the complexity of building apps on that scale. A recent example that comes to mind is [Discourse](http://www.discourse.org). If you take a look at [the JavaScript part of the codebase](https://github.com/discourse/discourse/tree/master/app/assets/javascripts), it may not be what you expect, as it's relying on the high-level API of [Ember.js](http://emberjs.org) to abstract away a lot of the architectural complexity. It's also taking advantage of Rails's asset pipeline to provide the build tools that concatenate, minify and compress all that organized code. AFAIK, Google's big webapps like Gmail and Google Docs, while not open source themselves, rely on the google closure library and google closure compiler to abstract a lot of the complexity of those projects away into a set of reusable components. You might learn a lot by reading the source code to these frameworks themselves to see how they manage to provide these nice high-level APIs, and start taking ideas from them to incorporate into your own code. And as a side benefit, you'd be learning the framework itself in case you need to use one later. edit: Another thing to note is that building large client-side apps is a fairly recent trend. Traditionally, most of the actual application logic was handled server-side in languages like PHP, Ruby, Python, Java, etc. These days, people use the high-level APIs provided by frameworks like Rails, Django, express (for node.js), etc. The client-side JavaScript was mainly used for providing a nice user interface to communicate with the server. Best practices for big client-side apps are constantly changing, and that's why you'll see popular JavaScript frameworks in disagreement about the "right" way to organize and architect these types of applications. It also means that many of the biggest client-side apps are not open-source, unfortunately. Dealing with the rapidly changing landscape of browsers and new frameworks has no doubt caused many of these apps to become giant balls of spaghetti code, and that's exactly why there's so much excitement and energy around new frameworks that promise to reduce the amount of decisions developers need to make about to build the underlying structure of a big application.
Use Typeahead.js. It is from twitter. http://engineering.twitter.com/2013/02/twitter-typeaheadjs-you-autocomplete-me.html
I don't think Knockout is falling out of favor as much as it's settling into it's niche. It doesn't have the following that Backbone or Ember or Angular do but it's not because it's any worse than those libraries. It's a great library as long as you pick it for the correct projects and it's documentation is still better than all the other libraries (http://learn.knockoutjs.com/). The only difference being that, it's not as suite for regular projects as Backbone or Ember is.
Not sure why you got downvoted. Guess no one here knows you need a debugger for sane Node.js work?
Myself and many other devs on here will recommend [Sublime Text](http://www.sublimetext.com/2) over textwrangler for a variety of reasons. It's inconsequential, but you'll have a more pleasant coding experience. You don't need shebangs to run javascript, just put your code in a .js file and run it with `node ____.js` on the command line. Alternatively you can embed the code in an HTML page (using `&lt;script src="script.js"&gt;&lt;/script&gt;`), and open the page in a web browser to execute any scripts embedded in it. When you're asking about xcode, what you're really asking about is a javascript *environment*, not a framework (frameworks are a different concept). Environments include V8 (which can be used as a Node.js server, Node.js Command Line Interface, or in the Chrome browser), Jagermonkey (used by Firefox), Trident (Internet Explorer), SquirrelFish (Safari), etc. XCode is usually used for developing iOS and OSX apps, not webapps.
Just to clear up for those reading. Here's code from the original post: $("ul.my-list").click(function(evt){ if ( $(evt.target).hasClass("my-item") ){ handleListItemAction(evt.target); } else if ( $(evt.target).hasClass("my-button") ){ handleButtonClickedAction(evt.target); } }); If I understand correctly, zzzwwwdev is advocating for this instead: // hit the DOM once and cache the selector in a variable var myList = $('ul.my-list'); // listen for click events bubbling up from .my-item elements myList.on('click', '.my-item', function(){ handleListItemAction(evt.target); }); // listen for click events bubbling up from .my-button elements myList.on('click', '.my-button', function(){ handleButtonClickedAction(evt.target); }); This seems better because 1) it takes advantage of jQuery's delegation (which has been recently migrated from .delegate and rolled under .on) and 2) seems more readable and therefore more maintainable. However, I have a concern about performance here. It's my understanding that this will add multiple click listeners to the same element (myList in the code above), which I'm worried might be slower than attaching a single click listener and using a an if/else or a switch statement in a single listener function, in a similar way the original post advocates (though admittedly there's faults there, such as hitting the DOM multiple times to check for classes, instead of hitting it once, caching the classes to a string, then using RegEx or some such things to check the existence of classes OUTSIDE of the DOM). If I remember right, libraries such as Zepto make (or used to make) use of attaching a single event handler, per event type, onto the document root element and then if/else or switch. This way was supposedly faster, and it at least seems theoretically faster, since these are DOM event handlers, and we've all been taught that the DOM is slow, scary, and bad, and that the faster you can get away from it, the better. I'm not saying this is the most maintainable solution, but some folks have seen it as the most performant solution (those are often at odds of course). Bonus points if anyone can find a simple jsperf test case for this scenario. I looked a bit, but couldn't find anything (I'm fairly sure there's one out there somewhere).
it's not really a learning resource, but [dochub.io](http://dochub.io) is a nice reference/documentation site you might find useful
a little on the "overly detailed" side, but otherwise very nice! Thank you! 
thanks a million markov_twain..;)
dude, you should actually reply to him, and give him an upvote while you're at it. 
this is something like what [mustache](http://mustache.github.com/) does ?
Another example of a standards body not only trying to fix something generally solved, but not even doing it well. 
Nice so far. Now, let's have &lt;template src="/path/to/template.html"&gt;&lt;/template&gt; so that it can be static within dynamically generated pages and 304'd. Why not just use &lt;script&gt; tags? Because they are for scripting languages, lets stay semantic. 
Drag and drop also comes to mind.
I just went into your user history and upvoted a bunch of your stuff at random, simply for taking the time to respond to me in such a well written and through way. Thank you. I must say, I both am and am not surprised by your difficulties in finding good resources. Surprised since javascript seems to be so big and heavily used. Not surprised...since I feel like I should have easily stumbled across any top notch resource, and didn't. Hell, the best thing I've got is that docHub that you just gave me, and like you said, it's more of a reference than anything else. It's not organized in a way that a beginner could get too too much use out of it. Anyway, thank you! 
Use a DOM javascript library like jQuery var spans = $(body_or_container_id).find("span"); spans.length == number of spam elements found // this runs a function of each span element spans.each(function(element) { // your code here }); See, lets the library do all teh work.
Funny how some consider such a no-brainer worthy of a blog post. I need to start a blog too where I explain basic underscore.js usage, if that's what gets upvoted here.
Personally, I do not see any sense in putting my html markup inside what is effectively a cdata container. I would much rather see templates become a first class citizen in the dom than be seen as a string to be parsed into the dom.
what is this mysterious @host { ... } syntax?
People use inline templates for more than just simple examples and small apps?? At this point, I think more templating tutorials should use separately loaded files just to get this bad idea out of the public eye.
that's pretty unusual. Thanks for the heads up
[Javascriptissexy](http://www.javascriptissexy.com/how-to-learn-javascript-properly/) is a great resource for beginners or experienced programmers alike. It has a very comprehensive 6-8 week course supplemented with other sites if and when need be ([w3schools](http://www.w3schools.com/), [Mozilla's developer network](https://developer.mozilla.org/en-US/) and the sites listed on Javascriptissexy). Within regards to tips and finding new and helpful things that might aide you on your way, I would suggest observing and as you have already proven you are willing to do, joining in the community here on reddit! Many helpful posts crop up from time to time (sometimes great ones within a couple of days of each other, sometimes from week to week, so it's always worth checking in on the following subreddits) [r/webdev](http://www.reddit.com/r/webdev), [r/programming](htpp://www.reddit.com/r/programming), [r/html5](http://www.reddit.com/r/html5) and many others that you can find in the side bar here under 'Related Sub-Reddits'. But your primary focus should be on getting stuck in, especially with that roadmap offered, and make headway from there. Edit: Forgot to mention that the javascriptissexy guy also offers an advanced roadmap after the first is completed. So if you find this first one easy, there is more to continue your learning with! Happy exploring.
With all this in-browser dynamic templating and scripting, sometimes I get the feeling that we will end up with nothing but an sql connection to the server... 
Their values are different, too; see the original post for more details. 
This is why one should use a library when doing datetime handling and manipulation in JS. So far I've been very happy with [Moment.js](http://momentjs.com/) 
Just tested it and it works. I really wanted to not use a library since I'm really doing basic stuff, such as getting the first and last day of the month from a selected date. Seems like I have no choice though. Thanks for the link ! - edit: Wow, even simpler in moment.js.. moment('2013-02-15').endOf('month').format('YYYY-MM-DD') moment('2013-02-15').startOf('month').format('YYYY-MM-DD') Genius. thanks again. 
You might find my weekly newsletter helpful. One of the goals of the newsletter is to help programmers from other languages get their heads around JavaScript one piece at a time. http://designpepper.com/a-drip-of-javascript
[Effective JavaScript: 68 Specific Ways to Harness the Power of JavaScript](http://www.amazon.com/Effective-JavaScript-Specific-Software-Development/dp/0321812182/ref=sr_1_1?ie=UTF8&amp;qid=1361982843&amp;sr=8-1&amp;keywords=Effective+JavaScript%3A+68+Specific+Ways+to+Harness+the+Power+of+JavaScript+%28Effective+Software+Development+Series%29+%5BPaperback%5D) [JavaScript Patterns](http://www.amazon.com/JavaScript-Patterns-Stoyan-Stefanov/dp/0596806752/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1361982895&amp;sr=1-1&amp;keywords=JavaScript+Patterns) [Secrets of The JavaScript Ninja](http://www.amazon.com/Secrets-JavaScript-Ninja-John-Resig/dp/193398869X/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1361982927&amp;sr=1-1&amp;keywords=Secrets+of+The+JavaScript+Ninja) (no referral link, just amazon links) 
Thought I'd tackle this in javaSCRIPT: function Pascal(n, r) { if (n &gt; 1 &amp;&amp; r &gt; 0 &amp;&amp; r &lt; n) { return Pascal(n - 1, r - 1) + Pascal(n - 1, r); } else { return 1; } } document.write("&lt;TABLE ALIGN=center&gt;"); for (i=0; i&lt;=15; i++) { document.write("&lt;TR ALIGN=center&gt;"); for (j=1; j&lt;=15-i; j++) document.write("&lt;TD WIDTH=25&gt;&lt;/TD&gt;"); for (j=0; j&lt;=i; j++) document.write("&lt;TD&gt;" + Pascal(i, j) + "&lt;/TD&gt;&lt;TD WIDTH=25&gt;&lt;/TD&gt;"); document.write("&lt;/TR&gt;"); } document.write("&lt;/TABLE&gt;"); 
Drag and drop is generally solved?
First part (title) makes sense to me. Here is my understanding of this. You are constructing a new object with each invocation of new Date(...). So obviously Object A != Object B. The output you are seeing is essentially the Date.toString() method. toString is a method that all Objects have. Example &gt; new Date('2013/03/01') === new Date('2013/03/01') //false &gt; new Date('2013/03/01').toString() === new Date('2013/03/01').toString() //true The date parsing stuff just seems to suck :P
Its also **very** important to note that browsers have implemented Date.parse differently. Unfortunately, 'new Date(dateString)' is roughly equivalent to Date.parse(dateString). The easiest fix is to instantiate 'new Date(year, month-1, day)' (instead of using a dateString) reference: [stack overflow](http://stackoverflow.com/questions/2587345/javascript-date-parse)
The issue here is that a Date object holds more than just the provded 2013-03-01. If I'm not mistaken (and I may be) it will be initialized with the current time, etc... so even this fails: var d1 = new Date('2013-03-01') var d2 = new Date('2013-03-01') d1 === d2 // false d1 == d2 // false (new Date('2013-03-01')) === (new Date('2013-03-01')) // false
Yeah, but I did not mean to do a direct comparison between objects (it's just a neat way of writing the title). I just wanted to say that the dates are getting parsed differently whether you're using dashes or slashes. 
D'oh! I totally missed the mark there! 
If I could, I would! Unfortunately there's some places where you have to parse dates. 
 new Date('2013-03-01').getTime() == new Date('2013-03-01').getTime() //true
I think he was just pointing out that initializing with dashes vs slashes gives different times, not that there's reference equality. 
It looks to me like one is in localtime, the other in GMT. Hence the time difference of 5 hours. I also believe that parsing nonstandard dates is very nonportable, i.e. a difference in behavior between browsers is extremely likely.
The Date object is annoying, and my main beef with it is that it doesn't have proper timezone conversion support for anything other than the user's locale or UTC. The most important thing to remember is that the Date stores dates in UTC, but default 'toString' output is local time. If you do not follow (part of) ISO8601 it assumes the input is local as well, unless a timezone or offset is specified. Local: new Date('2013/03/01') Fri Mar 01 2013 00:00:00 GMT+0100 (CET) UTC: new Date('2013-03-01') //date portion in ISO8601 Fri Mar 01 2013 01:00:00 GMT+0100 (CET) Text: new Date('march 1 2013') Fri Mar 01 2013 00:00:00 GMT+0100 (CET) Text with UTC: new Date('march 1 2013 UTC') Fri Mar 01 2013 01:00:00 GMT+0100 (CET) Text with timezone: new Date('march 1 2013 EST') Fri Mar 01 2013 06:00:00 GMT+0100 (CET) Text with time and offset: new Date('march 1 2013 00:00:00 -0500') Fri Mar 01 2013 06:00:00 GMT+0100 (CET) The proper way: new Date('2013-03-01T00:00:00Z') Fri Mar 01 2013 01:00:00 GMT+0100 (CET) or new Date('2013-03-01T00:00:00+0000') Fri Mar 01 2013 01:00:00 GMT+0100 (CET) or new Date(2013,03,01,00,00,00) Mon Apr 01 2013 00:00:00 GMT+0200 (CEST) Yes, should have done month -1. Reading material: [Date.parse](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/parse) and [Date object](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date) What I ended up doing is publishing all dates in ISO8201 and adding a method to the dateTime object that outputs the date in the format I need and the offset I specify. And a script that applies this to all time elements: &lt;time datetime=""2013-03-01T00:00:00Z" data-offset="-0500"&gt;[this is filled by the javascript]&lt;/time&gt; 
https://github.com/languages/JavaScript/most_watched of course not all of those are what i would consider 'large' or 'the most elegant', but they are all very active and have a lot of contributors, so the quality of code is pretty high and a lot of smart decisions have been made about how to organize and structure the code. If you can emulate the style of any of those I think you'll be well on your way
Where are you now that its Thursday 4PM?
I'm located in Montreal. But I'm not even asking for the current datetime. I'm simply parsing a date so I can do operations on it. 
I can't believe i made such a rookie mistake and confused the two languages. But still, i like learning and you guys taught me the difference. Seeing this code is really interesting too!! Thank you!
Very interesting
why link to a tweet instead of the project page here? https://github.com/melanke/Watch.JS also, this is nice and there's a similar feature that just dropped in the chrome beta channel http://updates.html5rocks.com/2012/11/Respond-to-change-with-Object-observe
By far the most useful tutorial I found for learning javascript is: http://javascriptissexy.com/how-to-learn-javascript-properly/ This covers really basics and things needed to give you a good head start
Raycasting is exactly the right answer, upvote to you.
weee that was fun
Yep, it's probably because of minification. While developing and unit testing, it might help to use the unminified version (`angular.js` instead of `angular.min.js`).
Nice. I'd also recommend [Yeoman](http://yeoman.io/), which has many of the same goals and features.
What databases does the ORM support?
Also you're passing octals in the last example. Doesn't affect your case but something to be aware of when those numbers go above 8
Pretty cool! WFM in all three required browsers once I clicked/focused the frame and start pressing the arrow keys.
Thanks :) You are the kind of person that I had in mind when I created the minimal instructions. When I encounter something that presents itself as a game, I press buttons, see if a button corresponds to a certain action, resulting in play. I expected that from other people as well. When I posted this js1k link on my Facebook, people were wtf'ing. They didn't understand. I guess they're not the right audience. The js1k site attracts mostly technical people and my hope is they'll figure it out.
1. Keep right key pressed 2. WIN
Came in to make sure someone linked this. Upvotes for you sir.
:D that is a bug. dont tell anyone.
from the time I've spent working with the js date object, ive found that only chrome and safari supports slashes; Firefox and IE do not. Also, when comparing dates, you need to covert to a primitive because two instances are not equal. I believe date.getTime() returns the epoch, which you can use to compare
That was strangely fun. :)
for the love of jesus, don't try adding and subtracting them either....
Its unfortunate your opponent doesn't move or that would be spectacularly fun and challenging.
Very neat.
ITT: Everybody's browser crashes after they try changing the number of vertices to anything higher than 10.
because this link was already posted here last year :P and Object.observe is a new feature for new browsers, WatchJS have more compatibility AND more features, check out the examples. In the future WatchJS will use Object.observe too. :)
i guess i don't get it.
pretty cool 
GUYS THE GAME IS IN THE URL BAR THAT IS WHERE THE GAME IS LOOK AT THE URL BAR FOR PETE'S SAKE
Wow - that is pretty damn awesome. Good job! Totally lost when I figured out you could move down and it basically unlocks the craziness.
And in the hover-over of course he uses the "unacceptable" format. 
right on OP, thinking outside the window!
I assume that's on purpose, to point out that after reading the comic you're now aware of how ambiguous 06/05/88 is -- is that in May or June?
sauce: http://mrdoob.com/146/code_editor
I just tried sublime, and it is so much better than Textwrangler. Please excuse me because i am an extreme newcomer, but what other languages can be used with it. I'm planning on learning, and hopfully becoming fluent with, javascript, CSS, HTML, and obj-C by the summer. 
It's very hacky to use script tags to embed html on page. Suppose a major browser maker decided that script tags are only for script code, then all your templates are fucked. I've learned my lesson about abusing html/dom/javascript for purposes it wasn't intended for. It doesn't always end well.
Coffeescript IS NOT FUCKING JAVASCRIPT. IT IS NOT. PERIOD. Fucking coffeecritters. The mental gymnastics you have to use to justify your poor choice of language is astounding. Really. It isn't javascript, get over it. Just because you can compile any language into javascript does not mean that the origin source code "is javascript". Your thinking is just so wrong. So how is that coffee tasting now that 1.5 breaks the code written in the previous version? How's that language choice treating you now? Good luck with that. 
strangely addictive...
what's `new Date(2013,3,1)`?
Tried this on my tablet, end up very confused at first
Brilliant.
And it has a grand total of 0 comments. Big deal. Coffeecritters are too buy polluting r/javascript to even take notice of their own subreddit. Sad. 
I get Mon Apr 1 00:00:00 PDT 2013 Remember that in JavaScript months are numbered 0-11. 0=Jan,...11=Dec
&gt;2013-03-01 That's ISO 8601. &gt;2013/03/01 That's something date-like. Can't tell [which one](http://en.wikipedia.org/wiki/Date_format_by_country) though.
In the bottom-right of a Sublime window, it'll say either "Plain Text" or the name of whatever language is guesses you're using (.js files = javascript, etc). Click on this word for a list of available languages.
That is really clever. Well done.
I think they're great! I love a good friendly fork. Bits and pieces of Coco have worked their way back into CoffeeScript, and the language as a whole has benefitted greatly from @satyr's contributions over the years.
 &gt; Unlike some other templating systems, Teddy will not automatically escape HTML entities contained within variables. boo XSS &gt; IE9 is totally broken because IE9's implementation of DOMParser sucks and @eligrey's DOMParser HTML extension (polyfill) doesn't work in IE9 and below. Windows Phone 7's browser: same reason as IE9. IE8 and below are totally broken because they have no implementation whatsoever of DOMParser. Can't use it if it doesn't even support IE9 let alone 8 or 7.
But this means having all of your templates in the same html file that is loaded in the browser. This is a mess and a maintenance nightmare as your project grows.
I got more joy and smiled larger playing this simple "browser" game than I did starting Borderlands 2 earlier tonight. Well done!
This project you write the code to check to see if a string is a palindrome as well as reversing the string and changing the string to uppercase.
View &gt; Syntax. If you don't see a language there, there's probably a package for it.
OP here. I wasn't trying to start a Coffeescript vs. Javascript flame war. I'm aware of the debate on whether or not developers view Coffeescript as Javascript or another language. I used to despise Coffeescript but now I embrace it. Regardless of the viewpoint, the end result is that Coffeescript compiles into Javascript (although as the post points out - it's not perfect). I posted this article here because the root issue is that there is bug in Coffeescript 1.5 that causes a compile error and outputs incorrect Javascript. Your app doesn't even have to be written in Coffeescript for this to affect you. Some Node/Grunt modules are written in Coffeescript. If you simply use a Node/Grunt module that happens to compile .coffee to .js - whether it be on install or at run-time, it is possible to get this error. I actually discovered this error because of a Grunt module that compiled Coffeescript to Javascript and my app broke.
Cool demo but no I didn't get it until I saw the reddit comments. And most people will not get it without some sort of instruction
Well, what is intended to happen is that when you spam in one lane, the CPU keeps in place and spams back harder than you are able to, to promote more diverse gameplay. I added a "hickup" so that the CPU does not spam a continuous stream of bullets; it leaves some gaps. This is because a user is not supposed to be able to spam a full stream and the CPU would win a spam war after some delay. But I forgot to test what happens when you hold down the button. I thought the event would only fire once. So the user will win the spam war slowly.
TIL Montreal is a day in the future. Hey, what are tomo-- er, ***yesterday's*** lotto numbers?
Wonderful. Also I may have wasted half an hour in work playing that...
I like the idea, but there are some problems. First of all, your function will break on any tag that starts with an 'H' but isn't a heading tag. if (!node.tagName || node.tagName.charAt(0) !== "H") For example &lt;header&gt; will pass this check, and on the next line... var level = +node.tagName.substr(1); level will become NaN and things start to go sour. Second, this line of code works sort of accidentally... //if the &lt;H#&gt; tag has any children, take the text of the first child //else grab the text of the &lt;H#&gt; tag var name = node.childNodes[0].innerText || node.innerText; The first child of H* tags is *usually* a text node. The expression returns the innerText of the heading not because there are no children, but because the first child (the text node) doesn't have innerText attribute. This isn't a bug per se, but the code doesn't quite agree with the comment. Of course, if the H tag is empty, this will throw an exception. Third, you're doing a lot of markup concatenation. Why not just build a DOM tree as you go using document.createElement and appendChild, and return the root node instead of markup.
Awesome once I understood what was going on! I had to open it in FF as the characters weren't displaying correctly in chrome.
Awesome.
I see a bunch of unicodes weird characters with numbers, thats the expected behaviour?
Ahh it took me a while to realise you weren't supposed to click in the URL bar to play the game *facepalm*. That was quite a fun game.
Why the downvote? I just tested it in a few browsers, Firefox and Chrome give the same results and new Date('2013-03-01') produces Fri Mar 01 2013 01:00:00 GMT+0100 (Romance Standard Time) which is indeed March 1 2013, 00:00:00 GMT MSIE 9 produces NaN for the same input. So it *is* nonportable. They all produce the same result on new Date('2013/03/01') which is March 1 2013, midnight, local time.
Try s/onkeydown/onkeyup/. It's slightly less responsive but disables spamming.
This project, you will code some methods to implement a working version of Conway's Game of Life. Invented in the 1970s, the game models how a simple environment, represented by a grid, changes over time according to its initial configuration and a set of basic rules. The grid contains two types of cells: 1) cells that are alive (colored yellow), and 2) cells that are dead (colored grey).
Did you actually try this on a braille display? I don't have one at hand but will try to ask a blind friend to test it. Looking at it without proper hardware, it seems like it would be better to display it on the page itself rather than the address bar as a braille display would have to show the address as well and the blind user would have to search for the actual game. On multiline displays this might also lead to a line break within the game rendering it unplayable. The game size seems too big for most braille displays. To fit the game it should be at most 40 characters wide. Displaying the score in the second line might be a good idea but I don't know how common multi- and single line displays are. Also, does mixing braille and regular characters work? I fear it might actually confuse the program or display. That's just a hunch though.
How is it supposed to work then? All I see is a bunch of dots coming towards me and I counter them using the right arrow. BTW, it's not working on Chrome (Windows), the address bar just has squares (i.e. unknown characters).
I'll do that!
I don't get it. What's so odd about it? _(Besides new Date('2013/03/01').toGMTString() returns Thu, 28 Feb 2013 23:00:00 GMT)_ I mean it's annoying, but has nothing to do with the Date object, this works the same way: new Object() != new Object() If you wanna compare dates use one of the Date objects methods, like toGMTString() or toJSON() or what not, and compare that. Javascript object comparison is not a straightforward task, just see [google](https://www.google.com/search?q=javascipt+object+comparison+deep&amp;hl=en).
it seems like you don't have any font installed that have the braille characters. Installing Arial Unicode MS would solve the problem. It works like this: you are on the left, CPU is on the right. Make sure the bottom frame is focused, not the address bar. Move with Up/Down arrow key, shoot with Space or Right arrow key. Shoot the CPU. If you shoot him five times over 5 rounds, you win the game. Every round the game is a bit faster and the distance between you and CPU a bit smaller. [Source code here btw, comments explain a lot](https://github.com/blaise-io/braillewar/blob/master/braillewar.source.js)
It's actually not legal according to the rules: &gt; Your script may not mess with the frameset, break out of its frame, read/**write anything that's not in its own frame**, force a reload of the page or redirect the user to another site But I'm a rebel. I'm writing to top.location and top.history. They accepted it anyway, which I'm grateful for. I hope I get disqualified by the jury though, that would be funny.
Nice, but it seems to break after a few moves. I tried Chrome 26.0 and Firefox 18.0. In CodePen it worked a little better.
Frogger?
Can you squeeze in a rule that you get points if you hit the wall and/or lose points if you shoot a bullet second?
Damn son, did you even read the thread? 
Fun! +tip $2.00 verify
I think it's intended as a proof of concept not a demo. 
I'm not sure what you mean by 'not work'. http://codepen.io/jkneb/pen/smtHA This worked for me in FF20 and Chrome 25.
I mean what I said in my first message.
I am forced to IE at work. I assume there is more than a blank, white screen at that URL.
What's a "webring"? 
I'd actually add the knockout is more concerned with data binding (keeping an element in the view in sync with data) and backbone is more concerned with the separation of data from the view.
Best advice from a comment on the article: &gt;Wano Dynamo • a day ago &gt;Way too often people take coffeescript's lack of requirement for parentheses as an allergy to parentheses. Drop them when it's obvious what they do, but if there's a chance that you're being ambiguous, don't hesitate to drop them back in. &gt; &gt;Either &gt; &gt; @view.subview('tags', new RelatedTagsList collection: tags) &gt; &gt;or &gt; &gt; @view.subview 'tags', new RelatedTagsList(collection: tags) &gt; &gt;would have made your code still concise, but unambiguous in what it does. Just because you can drop them and usually can drop them without being any ambiguity, you don't have to treat them like the plague. Dropping parentheses is a convenience, not a religion.
It's a simplistic proof of concept, without garbage collection, our bounds detection. 
I appreciate your interest, but did you not see the link I posted?
is it supposed to look like this? http://i.imgur.com/l6IoPx5.png
Hadoken flies outta the fight area...
Ooh, that sounds like a great tie in for [text entropy](http://www.leebutterman.com/text-entropy/)(Sadly defunct, the resource it depends on is throwing a 504 error).
Don't call JavaScript, "Java". 
Craig is right. You're saying, "When X happens, do Y". X is an event binding (element.mousemove) and Y is a function that obtains the random number, changes the image, etc. Mousemove will continually be fired every time your mouse moves a pixel on that element. More likely, you'll want to bind to mouseover and mouseout - 1 function to set the random image and one to set it back to the solid color. 
The animations don't play correctly for me in Chrome. I assume that's what Kumiorava is witnessing too.
&gt; boo XSS Not all templating systems auto-escape. In my opinion the code layer should decide whether or not to escape a variable, not the template author. Besides, there are many reasons why you wouldn't want to escape variables, particularly if they contain HTML. &gt; Can't use it if it doesn't even support IE9 let alone 8 or 7. You can use it for server-side templating in any browser and for client-side templating on the latest version of every browser, which makes it suitable for lots of different kinds of webapp development, particularly on mobile. If you build your app with progressive enhancement in mind, it should be simple enough to just default to serving server-rendered templates to unsupported browsers like IE9 and below. If for some reason client-side templating is a must-have for IE9 and below on your project, then use another templating system or fix the bug and submit a pull request. Teddy is a new project and could certainly use constructive contributions.
do new versions of haskell break the code too?
Don't pick shoddy crap to go into your technology stack, you reap what you sow.
Wow... that is a pretty neat trick...
Making code that's unnecessarily obscure enough that some noob posts it on stackoverflow, thinking you've created new operator? Yeah, that is actually a neat trick.
Underscore is a JS library that ~~delimits its variables~~ represents it's object with an underscore '_'. And equivalent would be jQuery's $. Example: _.foo = 5; $.bar = 5 Edit: Added dot notation to show a way of overriding methods foo and bar of objects _ and $ respectively. To clarify, you can override an object through assignment. Underscore uses '_' to represent it's objects, jQuery uses '$'. 
I was hoping he was referring to casting a *var* into an *int* using the + operator, and not the poor choice of _ as a standalone variable name.
http://i.imgur.com/5LX0fXu.png
Could you use something like autohotkey? I've never used it, but I think it'd probably work.
It would never work for visually impaired people. You cannot read braille that fast, and braille readers are not compatible with quick-changing texts. It's meant as a joke :)
I apologize
I don't see the code for the timer, but if you can get ahold of the timer, then you can cancel it. If they purposefully lose the link to the javascript timer, then you're stuck. If it looks for certain actions to reset itself, you can create your own timer to perform that action periodically, and hopefully you can pick an action that's not too disruptive for you...
 &gt; Not all templating systems auto-escape. In my opinion the code layer should decide whether or not to escape a variable, not the template author. Besides, there are many reasons why you wouldn't want to escape variables, particularly if they contain HTML. After using underscore.js for templating for quite a while, i really grew tired of having to remember to manually escape strings before sending them to the template. I would often release code that was vulnerable to injections because of this forgetfulness. Handlebars easily allows you to inject html by using triple braces: {{{someHtmlString}}} &gt; You can use it for server-side templating in any browser and for client-side templating on the latest version of every browser, which makes it suitable for lots of different kinds of webapp development, particularly on mobile. Since we are mainly discussing the new HTML 5 feature of templates in the browser, that's why I brought up the lack of ie9 support. I realize you put a lot of effort into the project and it looks promising, but those are my pieces of feedback coming from someone who uses templates everyday for real world projects.
Currently, there's support for an in-memory or on-disk dev-only database (DirtyDB) or MySQL. I'm in the process of working on Mongo, Redis, and ElasticSearch adapters.
Delimiting the variable with an _ is not the problem, and it's actually fine to do so, especially to indicate that a function is private. The problem is that Underscores uses _ as its variable, like jQuery is using $. If I were to redeclare _ alone, Underscore would stop working. Example. var r, _ = "234"; r = +_; _.last([1,2,3]) // error 
This. Sorry if I wasn't clear.
I know. I was clarifying what underscore (as in underscore.js) was.
The proposed classes in ES6 are just syntactic sugar, so Coffeescript won't have to worry about that.
What's the difference between + and parseInt() (i.e. when use one vs the other)? I'm assuming it's similar to ~~ where there's a minor speed increase (because you're not calling a function), but as with that 'trick' it seems kinda pointless unless you're doing very high-performance calculations.
I don't see anything there to help you. All I can suggest is have Google Chrome remember your password if you're using one computer.
`parseInt` expects a string, where as `+` will attempt any type, so similar with most types, but different with other types. `~~($var)` acts like `Math.floor` except when it's a negative number, it will also cast a string to int though. It is the double Bitwise NOT operator, basically just removes anything to the right of the decimal, which is why it differs from `Math.floor`, which sets to the closest whole number that is less than the argument. +[] === 0 +{} === NaN parseInt([], 10) === NaN parseInt({}, 10) === NaN ~~('1.234') === 1 ~~(3.14) === 3 Math.floor(3.14) === 3 ~~(-3.14) === -3 Math.floor(-3.14) === -4
I find the ES6 migration highly interesting, but this article is far too speculative for my personal taste. As billybolero points out, ES6 features, like CoffeeScript itself, are syntactic but not semantic. The only so-called risk is that CoffeeScript will break all existing programs just to change its existing keywords to act like ES6 keywords. But you could just as easily argue that Jeremy Ashkenas will do that tomorrow on a whim. maybe CoffeeScript will keep its existing semantics. That wouldn't break anything old or new. Maybe it will adopt `let` instead of `do`. Maybe it won't. Either way, I expect existing programs to work just fine, and I don't see *any* pressure to change to match ES6 class semantics. The far more relevant risks, in my opinion, surround changes in semantics. For example, what if coroutines of some sort become pervasive, like generators or lazy enumerators? How will CoffeeScript change things like its comprehensions to match? But as far as ES6 is concerned, I don't agree with the tone or the facts on this post. It feels very much like unsubstantiated FUD. 
I AM JUST HUMAN DOING THE BEST I CAN!!!
Is it just me or does this do nothing in Firefox?
Awww. I saw that others where taking it seriously and hoped you were. Still an interesting idea...
Shadow DOM https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#host-at-rule
I was getting boxes on impact of bullets. (Chrome 26 Win7).
Sweet. I can't play too much at work, but looks awesome!
It's certainly speculation. I think that's clear from the entire tone of the post and the fact that I present many possible outcomes. I'm not anti-CoffeeScript, I use it every day. If anything I'm biased in favor of it. This just seems like the first decent argument against using it for a new project I've heard. All the other arguments have been easy to dismiss, but this one is a bit less so and thus I thought it deserved some discussion. It certainly wasn't my intention to spread FUD.
Cant play but concept is awesome!
Can't play, but did play, and wasted way to much time at work. This is amazing.
Man! The possibilities!! Thank you for opening this pandora box!
Ah thanks for the feedback :D 1. I replaced it with some regex `/H[0-9]/.test(node.tagName)` 2. You're right it needs a bit more exception handling. The situation I used it for was fairly unique in that I had: &lt;h2&gt;&lt;strong&gt;the real heading&lt;/strong&gt; &lt;em&gt;stuff that is not part of the heading&lt;/em&gt;&lt;/h2&gt; I added some more conditions: var name = node.innerText; if (node.children.length) { name = node.childNodes[0].innerText; } //skip this node if there is no name if (!name) { continue; } 3. Not sure why concatenating HTML is necessarily a bad thing or at least worse than createElement. I built it from HTML strings because it was easier to deal with the hierarchy, that said I would be interested in seeing this approach. Thanks!
&gt; Not sure why concatenating HTML is necessarily a bad thing It's not. It's just that concatenating lots of strings in a loop is usually a little inefficient. Browsers have become much better at concatenating, though. Also, considering that the purpose of this function is to produce a ToC that you can display on your page, building and returning a dom tree would seem more convenient. The last point I made wasn't really meant as a problem, but an alternative.
Dopeness
Looks awesome. I hope my website can be half as good as this some day!
If you're curious, Angular seems to be running: * [The Router](http://bombermine.com/js/v6/router.js) * [UI events -- blur, focus and handling them](http://bombermine.com/js/v6/directives.js) * Management of some dumb templates. Canvas rendering, game state--is in standard JS. Also, it looks to me like asynchronous calls are made _from_ Angular but defer to async.js. Nifty. I definitely wouldn't call it an Angular project, but I believe Angular helped them along. 
I like it! Does it have any kind of callbacks so I can attach an image selector to the insert image button?
Functions, functions, functions. Everything of interest in JavaScript has something to do with functions. Inheritance, prototypes, methods, closures, `this`, decorators, combinators, iterators, ...
Thank you for finally saying what has been on alot of our minds!
Yup. This is why the internet was invented. 
Yep it was a bad comment. Corrected it.
Awesome. I give it my official seal of approval.
Alan?
This is the first thing I thought of the moment I heard about CoffeeScript.
This is the absolute bees. Amazingly fun.
This is so fantastic in so many words. Love taking a familar system and turning it on it's head. I hope to hear more about how it is built. E.g. NodeJS BE with sockets?
Settle down and learn. :) I was busy typing my other reply while you were calling me a dick.
Try in Chrome.
Learn how it deals with scope, and be able to write what is considered a 'class' in javascript, --which is a function as object as the person mentioned below. Be able to describe how javascript deals with scope differently than another language like as3, java, or c#, 'block-level' scope languages. in terms of frameworks, work through a couple MVC projects using at least two different MVC frameworks. It's a great way to learn how to organize your code, and have each class represent a clear concept, as well as a consistent messaging system between functional areas of your application. 
I went ahead and asked to clarify the rules. https://twitter.com/veubeke/status/307396122358464512 Looks like you're fine. :)
It's nice to see more games with canvas\js, but not exactly mind blowing.
Awesome, but the fact that you lose **all** upgrades when dieing (dying?) is somewhat frustrating.
Needs a border and a different background color by default.
Along similar lines... how do I know if I'm writing decent/good JavaScript?
I'm guessing its using OpenGL
They're doing all the loading right up front. There's no magic at all. You have to wait ages when the page loads to get all the assets loaded up.
&gt;The proposed classes in ES6 are just syntactic sugar, Unlike Coffeescript?
Why the additional script tags? Even after optimization you should be able to use the data-main attribute to specify the application entry point (main module). Have you had a look at the multi page optimization example project? It shows how to assemble common and page specific packages to work together, which sounds similar to your description. https://github.com/requirejs/example-multipage
I gave up, honestly I couldn't wait as long as it wanted me to, or it was breaking. I don't know. When the Network debug panel is not showing an active transfer for a minute. That's too long.
For whatever reason it was instant for me. I wonder if it wasn't precached by viewing the rss feed that I came here through. Either way, thanks op for the post.
Yeah I think it's broken.
My point was that since the ES6 classes doesn't change the semantics of Javascripts objects/constructors/new keyword, Coffeescript won't have to change anything. The author seems to imply that the Coffeescript guys would have to make backward incompatible changes because of ES6 classes, which isn't true.
Get a heart, lose only half upon death. Still can't figure out what the gold is for.
Please don't. If you're going to make something for the web, even if its just a proof of concept, *please* test it in both Firefox and Chrome. **Edit:** It *does* work in Firefox 19 OS X.
the base Backbone object recently had the Backbone.Events mixed in, so you can just do Backbone.trigger('event') 
Outstanding
And I appreciate your actual answer, but it wasn't helpful at all you saying that I shouldn't call one thing by something else, we're in the Javascript subreddit and you obviously knew that I meant Javascript so it seemed to come across as malicious. that said, I have been learning *javascript* for some time, but I'm having trouble finding the correct way to get to the solution I need - I know that I use the .mousemove but I'm unsure how I can plug the posX and posY into a function to make it change the position on the spite sheet OR change the image all together. [This^^^clicky](http://pastebin.com/SrXUz8dP) is what I have for my refesh image change, but i'm not sure if I can edit that to make work for mouse position.
Second of all, this has very little to do with javascript (the programming language). You're asking mainly about how browsers provide access to the DOM after the HTML has been parsed.
From the $() I assume you are using jquery. If so, then var myArray = []; $('p').each( function (el) { myArray.concat( $(el).text().split(' ') ); }); This will create an array of every word contained in &lt;p&gt; elements in the document. I figured this out by looking at the jquery api documentation and MDN's javascript reference for the builtin methods of arrays.
Doesn't seem to work *at all* on my iPad, but good on Chrome Desktop.
You should be careful when mixing methods of adding scripts to the pages (requireJS and manually). When you add jQuery as a dependency of one of the modules, change the exported variable to like JQVAR or something other than $. You'll have to do a find/replace on your code, but that might get your further.
People always forget that Array.concat() doesn't modify the array it's being called on, it returns a new array that is the concatination of the two arrays. You want: myArray = myArray.concat( $(el).text().split(' ') ); I'm not necessarily pointing this out to you, unveiled14, I'm just throwing it out there because this has caused me headaches on more than one occasion.
Try Script tag Require(['one','two']) So let require load each module rather than just includd scripts. It will register each module within those as its comes across them in the files. Use debugger and fiddle with requirejs.defined('plugin'). To see what is loaded. Sorry, on iPad. 
Shut up. Where did this new fad for bashing people who build things that only work in Chrome come from? If it was built to only work in Chrome, then that's the way it's designed. It's not MEANT to work in Firefox. Your response is gonna be "hurr durr its gonna be IE all over again". The only problem is Chrome is built on the open-sourced Chromium project. And Chrome doesn't break spec, it follows it and supplements it with its own features. It would be a shitty thing if everyone had to use IE. But I fail to see at all what the downside would be if everyone was all of a sudden required to use Chrome. Are you that attached to your Firefox themes?
Thanks! I'm don't really understand the logic behind a shim and the export and how it maps to a define and its function arguments. Initially we were doing something such as: 'underscore': { exports: '_' } and in a define we'd inclue underscore but call the mapped function argument anything we felt like. Should the argument always match the export? If so, does that only apply when a shim exists? I do know that it is in fact jQuery causing the issue. Creating a "jquery loader" that manages a jQuery object attached the the window object solves most the problems but I feel it is a hack at best. I hope these questions aren't too silly.
While we're on the subject, the [MDN Array page](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array#Mutator_methods) has a good list of which methods will change the array (mutator methods), and which just read the array and return new stuff (accessor / iterator methods).
... which the OP wants to do with JavaScript, the primary scripting language of browsers. Lighten up, dude, he's obviously a beginner.
No criticism was implied ... was trying to be helpful. e.g. reading a JavaScript book or going to a JavaScript form isn't the best way to get an answer to a question like this. Knowing the question is really about browsers/HTML/webdev stuff will help him find better information about other related questions by going to the right sources (e.g. MDN)
Impressed, it worked great on my iPad
Yeah since jQuery is a global on the window object, and you're actually loading it twice from separate require scripts/script tags its clashing. Require is typically smart enough to know that if two scripts have the same dependency not to load it twice. I wasn't referring to the shim config, but in your module files. I'm guessing you have something like define( [jquery], function($){ // ... code ... }); You could try changing that to define( [jquery], function(JQVAR){ // ... code ... }); and if that doesn't work, you could wrap your code in an IFFE: define( [jquery], function(){ (function( JQVAR, undefined ) { // code here })(jQuery); }); The last approach is what I've used in the past and might be your best bet.
This, indeed. I have years and years of experience with .net, php, *sql but had a hard time wrapping my head around some things that javascript does differently (why is everything so async?!?!?)(ok, i know why, but damn it was frustrating to learn for me).
Fair 'nuff. In this case, it'd probably be easiest to just send OP over to a basic jQuery tutorial and see if they can hack it together from there. (Normally I'd evangelize for learning fundamentals, but it seems a little overkill for this.)
Don't worry about it, we were all there at one point. Just stick with it. The selector string options vary some between technologies (see jQuery's: http://api.jquery.com/category/selectors/). *#id* and *.class* are definitely the most common. The most basic selector, however, is just the name of an element. For example, you could gather all the &lt;a&gt; elements on a page into a group: var linksOnPage = $('a'); That will give you a jQuery-wrapped array, which you can do all kinds of things with. For your example, you can loop through them using [each()](http://api.jquery.com/each/) and add their text to an array. var linkText = []; linksOnPage.each( function() { linkText.push( $(this).text() ); // "this" is the &lt;a&gt; itself }); I hesitate to go more in-depth if you have any trouble with that so far; I'd recommend getting *really* comfortable with properly-formed HTML and CSS first.
so why would people upgrade to a version of coffeescript that would break their app before ES6 is standard across ALL browsers? I'm sure there will be a V2 that targets ES6, the real question is who is writing their coffeescript app for an ES6 target, and why would they do it now instead of in a year (probably more) when things will be more stable and better supported?
not really a plugin or anything, just uses backbone for a structure. Basically it's notification boxes and you have to be using backbone if you want to use it - more of a limitation than a feature
You dont need to know that stuff inside and out for javascript, but it will make you a better programmer in the long run. 
&gt; If it was built to only work in Chrome, then that's the way it's designed. It's not MEANT to work in Firefox. What? How is that not bad? I don't know if you remember but back in the day IE6 was the shit so everyone built stuff for it and ignored standards and other browsers (they sucked, I know). Eventually they gained a pretty severe monopoly on the browser market and it stagnated. Firefox broke us out of that, don't let Chrome lead us back in. Monopolies are always bad, no matter how open-source, or "Google" they are. &gt; And Chrome doesn't break spec, it follows it and *supplements it with its own features.* That *is* breaking spec, by definition.
What's your take on Moonscript? You started quite a trend.
&gt; Also, you really should have quotations around element attributes: &lt;p id="xyz"&gt;. Actually, since this is HTML5 (by the presence of `&lt;!DOCTYPE html&gt;`) [attributes do not need to be quoted](http://www.whatwg.org/specs/web-apps/current-work/multipage/syntax.html#attributes-0).
I think this is closer to what I am hoping to achieve. Right now the packages are including jQuery themselves but perhaps including them separately and first is the better way to go. 
I think the concern is that people who understand how either JavaScript classes or CoffeeScript classes work won't be able to transfer that knowledge to the other language. Right now the languages are semantically similar enough that it's relatively easy for developers to move back and forth. I guess it depends on how you view CoffeeScript: is it just syntactic window dressing for JavaScript or is it an independent language that just happens to have JavaScript as a compile target? If you take the former view you probably think it should adopt ES6 semantics where possible. If you're in the latter camp there's no reason to worry about subtle semantic differences; it just happens to be a similar-but-different language like Ruby or Lua or anything else.
I like your attitude. You clearly have great things ahead of and behind you in life.
Is asking for code reviews a good thing for that sub? :) Edit: I accidentally a word.
Thanks! I appreciate the encouragement. Hack Reactor looks cool too btw. May great things come to you as well.
I think building out the FAQ would be the most helpful thing. Links to useful resources and advice on how best to learn javascript and all its libraries would be awesome. I'm interested in hearing Hack Reactor's version of [how to learn javascript properly](http://javascriptissexy.com/how-to-learn-javascript-properly/).
Thank you very much for the advice! I may need this for editting purposes later on. The programmers of the new version are working with us to get VB back in as the editor. 
Great! I passed it off to [one of our guys](http://i.imgur.com/4GsfKwz.jpg). Edit, on the off chance that people think I actually sent this to a chimp: I did not. I brought it to the attention of an actual human being who has spent a lot of time writing JS for money.
Thank you - your specific requests will be kept in mind.
Apologies if I'm really bugging you. I do know what to write properly formed HTML and CSS (well, pretty well) and I can't explain how or why I made those mistakes in the main thread post. Anyway, using the methods you gave me I tried it and it didn't work. My suspicion is that textContent isn't working for some reason. I read up on textContent as a method and when I tested it, it returned null which supposedly means that it can't find what it's looking for in the document? Here is my code: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Test&lt;/title&gt; &lt;meta http-equiv="refresh" content="2"/&gt; &lt;!-- Javascript --&gt; &lt;script&gt; var pNode = document.querySelector('#xyz'); var text = pNode.textContent; document.write(text); &lt;/script&gt; &lt;!-- Jquery --&gt; &lt;script src="jquery.js"&gt; var pNode = $('#xyz'); var text = pNode.text(); document.write(text); &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;p id="xyz"&gt;Amethyst&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; I usually comment out their one of the &lt;script&gt; tags. I just had both in the file to test if my jquery is actually working or not. The meta tag at the top is so that I can open the *.html in Firefox and have it constantly refresh so I can see the changes I make instantly. I'm using Sublime Text. I would love to get your input!
[relevant](http://chrisabrams.com/blog/2013-02-26-the-coffeescript-1-5-change-not-mentioned.html) 
good question, something I struggle with all the time. If your application meets the business goals set out by your stakeholder, and is within budget, and on time, then you've written some good javascript. In order to do that, you will need to employ all the things we talk about, best practices, oop, mixins ( composition vs. inheritance ?) , namespacing, memory management, etc. We tend to get too theoretical up front and put the cart before the horse. But, if your application delivers value, and is profitable, in my opinion its "good" code. A simpler answer would be to get your code reviewed by peers. Writing code is no different than writing a novel, yet for some reason we don't see the value of editorial feedback as a necessity in programming, unless you work for a good company like fog creek. 
http://www.youtube.com/watch?v=Pu1NmykTxWM kind of confusing, but the point is, good companies have a mechanism to iterate feedback. Bad companies allow commits, and 'cowboy' coding, without any review. So, another answer to your question is , if you get in with the right company, who is creating products for a long term revenue stream, you'll become a really amazing programmer. If, however, you work for an agency who only cares about a short timeline and one-off production jobs, you'll most likely become a hack succombing to workarounds and copy/paste from stack overflow, and just hope things work. 
awesome, good luck!
moar node plox
Hopefully [something here will fit the bill](http://www.reddit.com/r/learnjavascript/comments/19ieyr/nodejs_tutorials_click_first_in_the_nav_bar_to/).
Have a look at this: http://jsfiddle.net/BladeBronson/TPa4J/1/
Total n00b here. I've read Head First Javascript, recently completed the Javascript track on Codecademy, and am now studying Kendo UI for some hands-on framework action while going through the Projects track on Codecademy. I feel like I'm getting some good knowledge here but are there any things I should be wary of? Am I taking the wrong path? Suggestions?
The scripts are being executed before the `p` element exists in the DOM. Move them to the end of the `body` element. Also, you can't have any code in a `script` element that has a `src` attribute. Put it in a separate `script` element.
Is this like basically same as [assert](http://en.wikipedia.org/wiki/Assertion_%28computing%29) in many languages?
Assertions are a way to test code. Many libraries in many languages implement assertions for testing purposes. Justmakesure is just a quick tool to easily test code using assertions. (the return statement in your test function acts as the assertion) 
This is timely. I quite literally just subbed to /r/javascript yesterday and am a total noob. You have yourself another subscriber, thanks. 
I like the minimalism, but I don't like the pollution of the global namespace. Put everything in one single object.
Feedback: Where's my negative testing? Where's my asserting that the correct exceptions are thrown? What about functions that return a number; am I supposed to write JS code by hand to test for these? And I'm supposed to write my own code for making sure the types are all correct? If I'm going to take the time to test my code, I'll want the framework to do most of this for me.
Okay, a few things to note. In my original comment, I showed both the plain JS and the jQuery ways of getting what you wanted, but you only need to use one. If you're already using jQuery, just ignore the plain JS text. You can remove the three lines in the first &lt;script&gt; you have. When you supply a src attribute to a &lt;script&gt; then code inside of the tag essentially gets ignored. The JS code inside of your second &lt;script&gt; is not being run, so it can be removed as well. Next you should learn about the onLoad/onReady events, and read up on jQuery's [.ready()](http://api.jquery.com/ready/) - this is where code you want to run when the page finishes loading needs to go. That's where your parsing/selection code should be. Without waiting for the ready event, your document is not fully prepared for parsing, and the selection code returns nothing (null).
You may want to check out the book Effective JavaScript. I haven't read it yet but it has great reviews and I think covers many gotchas. I learned about it through the JavaScript Jabber podcast which I recommend. Lots of older episodes you can listen to and one of the more recent ones was devoted to things that trip up newbies. Edit: Also if you want to read some library code Underscore and then Backbone might be good places to start. Aren't too huge but also do some things you'll need to look up which will be helpful in reading other code (like !! to cast to bool). 
This was written as quickly as possible and is meant for basic testing. If you're working on a big project and need to test every single bit, this is not for you. Use Mocha or Assert. However, for exceptions you could write: makeSure("myFunc throws MyError", function() { try { myFunc(); return false; } catch(e) { return e.name === 'MyError'; } }); And for types: makeSure("myFunc returns a Number", function() { var result = myFunc(); return typeof(result) === 'Number'; }); But again, if you want advanced testing, I suggest Mocha. This tool is just to make sure ;) If you want to contribute and turn this into something bigger, that would be awesome. EDIT: Forgot to say thanks for the feedback! Much appreciated. EDIT2: How do I get the code formatting to work? I put 4 spaces in the beginning of each line.. :( EDIT3: Ahhhh, much better.
Well. That messed up my history. Well implemented though!
I don't know why anyone would want to rely on the crazy, undocumented whitespace priority rules that CS uses. Writing a function in the interactive repl online and seeing what happens when you add random spaces is a pretty big deterrent for this. Add some goddamn braces and/or parentheses when they are used implicitly together.
I feel like it might be time for you to start an independent project (even though you might not yet feel comfortable, it's one of the best ways to learn). You could try building a basic twitter clone.
Implicit returns isn't exactly sugar.
This is an argument I have been making against coffeescript since it was first introduced. A space or a tab is not more readable than brackets and parentheses, and less ambiguous. Coffeescript makes it more difficult to read code and leads to more ambiguities than proper javascript. The coffeecritters who are using and evangelizing coffeescript need to have their heads examined. The 1.5 debacle is just another nail in coffeescript's coffin, and a good example of why you shouldn't write code in "a made up language". People jump on bandwagons too quickly because they are trying to fit in or think "oooh shiny" and start down a road to nowhere. 
https://leanpub.com/javascript-allonge -- good book. http://www.codeschool.com/paths/javascript --- codeschool's javascript courses. http://javascriptissexy.com/how-to-learn-javascript-properly/ -- haven't done these, but people seem to like them. I don't know your experience with programming in general so just some other notes... Install sublimetext2, and use that, it's easy to use and prob the best text editor. At some point install git and set up a free account with bitbucket and start backing up all the awesome projects you'll be working on there. This will also start teaching you about source code control. Also head on over to /r/learnjavascript and stackoverflow with questions! 
[w3schools](http://www.w3schools.com/js/default.asp) is never a bad place to start to, at the very least, get your feet in the water. This is assuming you have a programming background and picking up a language is all you're looking to do here. Pickup your favorite IDE and just start playing with it. I like heading over to [jsfiddle](http://www.jsfiddle.net) and testing out code there. Sometimes I find myself in the FireBug console window firing off a few lines for sanity checks like making sure an empty array returns true in an if statement (!![] === true). I have not personally looked at a book on the language but from what I hear, [Javascript: The Good Parts](http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742) is a highly recommended book. I think the book assumes some familiarity with the language though. Other than that, the web is probably going to be your best resource. Got two or more monitors? Throw up your browser on one, open up your IDE on the other, and then just code and research. Any time I go to learn a new language, I try to reproduce projects I already know how to do. For me it's Conway's Game of Life. This, of course, is assuming you have a programming background of some sort and a favorite sample project you know how to program. And when you're reading something that you don't understand, pick it apart, ask questions, and Google some more. I find that when I'm researching, I'll have at least 30-50 tabs open. I read something that was like: foo.apply(this, arguments); And I'm wondering what this apply function is. Turns out it's like call forwarding in a way. Typed out: function foo (){} In Firebug console and then foo. After the '.' a context menu pops up showing all the properties of a function object. I'm looking at .apply, .bind, .call, etc... and it's like hey, let me go Google what these all are and when to use them. So this is just one example of how you can explore the language more. So yeah... read, play, Google what you don't understand, read, play, etc... I still don't know the ins &amp; outs of the language yet but I'm still doing the above. Edit: To those downvoting because I linked to w3schools, here's my response to odyssey14: http://www.reddit.com/r/javascript/comments/19j2yd/where_do_i_start/c8oqnlp
Thanks mate :)
A good place to learn JavaScript from is the [MDN](https://developer.mozilla.org/en-US/docs) or better the new [Web Platform](http://www.webplatform.org/). However these are more documentation types of sites. Have a look at Codecademy and its [JavaScript track](http://www.codecademy.com/tracks/javascript). Also, instead of posting this here, you might want to check out [/r/learnjavascript](http://www.reddit.com/r/learnjavascript/). @nwayve do you know about [w3fools](http://w3fools.com/)? *Don't use W3Schools.*
Thank you, I'll take a look at the book :)
good point about javascript not having grep. seems useful, but when might this be the best solution? I'm thinking it might be useful for debugging or testing. I suppose if you're working with complex data structures that might get out of wack. Do you have a more common example for me?
A better browser...
An extra return/enter from the sentence above the code will sort it out for you. 
Yeah, I'm certainly not being critical. I'm intrigued to see your attempt at something simpler, and I don't like Mocha. I'm thinking of Spring's test framework that allows you to simply add an annotation and as many as you like. Maybe you need the response to be truthy or maybe it actually needs to be a boolean. I'd much rather rely on a simple list of response qualities and/or select a specifically crafted method rather than write actual JS. Or maybe something that chains test methods in an elegant way way. makeSure({ desc: 'myFunc quickly returns something truthy', assert: [isTruthy,{function:maxSpeed,time:300}], test: function() {...} }); makeSure({ desc: 'myFunc throws exception', assert: [{func:throwsEx,message:'error message'}], test: function() {...} }); In other words, easy to read, not much to type, and easy to add more features. For instance, I'd like to see it attempt to create a simple description if I leave it off, something that can just list the required libraries and loads them for me, something that helps me hook into a stub (or otherwise construct the scope) without much work, pipe the results to something else rather than force the reporting to dictate how I write my tests, etc...
That actually looks pretty nice. I may just have to give it a shot. I would, however prefer that it stays like a sentence for instance: makeSure('myFunc quickly returns something truthy', { test: function() {...}, assert: [{func:throwsEx,message:'error message'}] }); I'll look it into it. Thanks a lot!
GOOD THING FOR STANDARDS; on wait it works(or doesn't) differently on each browser :(
I coded something similar to this years ago. I'm not sure this implementation won't freeze a browser if you have a really complex page and try to 'grep' the window object. The code for this seems like it may cause 'browser unresponsive' error if you try to do too much with it. If you are debugging a page you didn't write, you may not know exactly which object to search in, so it is handy to be able to search the window object and everything in it.
[LiveScript](http://LiveScript.net) is the reason not to use CoffeeScript.
Update on this: Mongo and Redis adapters are currently being worked on by @tedkulp and @carlodicelico respectively. https://github.com/balderdashy/sails-mongo https://github.com/balderdashy/sails-redis If anyone else is interested in helping out, please let me know! (@mikermcneil)
The current polyfill from mozilla implements the template tag as an xtag. Using their lib you can also create your own xtags with their own attributes that do whatever you like. So if you want a custom template element that works with a remote src attr, its pretty easy to do yourself. https://github.com/mozilla/web-components - Xtag polyfill http://www.x-tags.org/ - core xtag lib and demos 
I suggest CSS transitions and animation. Your javascript would then just need to handle position, create/destroy elements, and apply/remove classes. If you use canvas elements, some browsers hand the rendering of those over to your graphics processor for some very nice performance. Also, a link to a demo would be nice. http://davidwalsh.name/street-fighter
this is actually for a computer programming class so it has to be done it in processing 
[Am **I** missing something?](http://i.imgur.com/MhmoVTb.png)
That doesn't look like JavaScript at all.
Some critiques: * you need to separate some stuff from draw(), your rectangles are drawn every refresh. * your ball doesn't 'hit' them, just reverses direction at the point they would be at. * You'll never hit any other block as the ball movement is completely straight are objects within the scope of your class? That would help tremendously. Are you taking this class to be a programmer? If so don't get in the habit of having others do your work, you're only hurting your career in the long run.
The reference part of W3Schools is very basic, and I like it for that. If I need to look up what some javascript method does it tells me. I'm not a child, I don't need a warning label on everything. W3Fools is whining because there aren't disclaimers about everything that should avoided. As long as you're aware what the site is there's nothing wrong with it. I don't go there for some in-depth explanation about semantics or browser compatibility, I go to lookup "whitespace: no-wrap" vs "white-space: nowrap", or what the arguments to splice() are.
W3Fools isn't a resource it's a warning. There's a saying, "It's not what you don't know that hurts you in life, it's what you think you know that's wrong."
Reference? Yes. Learning tool? No. Mozilla dev network is better at both. https://developer.mozilla.org/en-US/docs/JavaScript
&gt;&gt; Today, they do not even allow you to submit corrections on a page. They should. W3S did *not* provide such a link when W3F was created. It is likely nobody usually checks the introduction, and thus nobody has reported that this has been changed. [You can fix it](https://github.com/paulirish/w3fools). &gt; If they refuse, we hope? That's not how ultimatums work. This just feels childish to me. You're the one who invented the ultamatom (sic) part of it. What you quoted simply notes that w3f would like w3s not to broadcast garbage, and if they keep doing so w3f can be used to try and drive people away from using w3s. &gt; I don't understand why those who created this site feel as if they deserve some feedback from W3Schools, especially after creating this site. Acknowledgment of your failure is the first step to redemption? As far as I can see, you're also misunderstanding their criticism and misreading their explanations. For instance: &gt; Not so much bad advice as a bad syntax example. "Javascript Function" is saying a function goes here, not a string. Please note that the W3F quote is `"javascript statement"`, not `"javascript function"`. How unlikely is it that the W3S site has been edited and W3F hasn't picked up on it yet? [Oh hey look, it's so not unlikely it's exactly how it happened](http://web.archive.org/web/20120507010841/http://w3schools.com/js/js_timing.asp). Why put it in a string when the timeout value is a "variable"? Because in "fixing" the issue W3S took the shortest possible route and went "good enough, ship it" &gt; http://w3fools.com/#jsref_eval - What? In Firebug console, eval(1 + 1) and eval("1 + 1") both return 2. What part of "if you do not pass a string to `eval()` the argument is returned unchanged" do you fail to understand? Of course both return 2. the former is first evaluated then returned as-is because it's not a string, the latter is eval'd and returned. The issue here is that both versions of the W3S descriptions are wrong: 1. `eval()` doesn't "parse the string looking for javascript code", it executes the string as javascript code. It *will* blow up if the string is not valid javascript, which it may not do if the former was correct. 2. `eval()` does *not* execute "an expression" passed to it. It will execute a string (as javascript), an expression will be evaluated *by the javascript runtime according to its execution model* and the result of that expression will be passed to eval. Which will evaluate it if it's a string, or return it as-is if no. &gt; Even in the W3Schools example code, they have eval(x+17). That's the whole point, the example is completely useless and misleading, it may make users believe it has some sort of effect when it does not. &gt; I won't argue with why you shouldn't use eval, but it's a part of javascript and so W3Schools includes it. Note that eval isn't in their tutorials for beginners, it's in their documentation. How is that an excuse for *not* noting that eval is dangerous and usually a bad idea? W3S is (as usual) the first site you reach when searching e.g. "javascript eval", yet they're completely irresponsible in their information provision. Compare with its description on the [Mozilla Developer Network](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/eval): 1. A short description 2. A longer, more in-depth and *correct* description 3. A warning about its dangers, with examples and demonstrations in multiple contexts 4. More mundane usage examples. &gt; "A statement will have internal components (e.g., expressions)." I don't understand their comment here. Their point is probably that expressions and declarations can be free-standing, and thus asserting that a javascript program is a sequence of statements is misleading and incomplete. There are many ways to go about it, but if you refer to the ECMA-262 spec they're half-right and half-wrong (though W3S is 100% wrong): a javascript program (or function body) is a sequence of 0..n SourceElement, and the SourceElement production is defined as: SourceElement : Statement FunctionDeclaration So a javascript program is a sequence of statements and function declarations, as far as the spec's grammar is concerned a "top-level" expression is an `ExpressionStatement` production, the expression isn't "free-standing" Likewise for a non-function declaration (`VariableStatement`) &gt; I feel like I could go through a lot more of these and point out things that are out of date, childish ("lol, whut?"), sensationalist, misdirected/misunderstood, etc... See, that's interesting. Golden, even. *You* are incensed that there are inaccuracies about W3S on W3F. Have you realized that this is how the creators of W3F feel about W3S's take on their entire professional domain but that, on top of it, they see W3S as actively harmful to the web in its promotion of bad code and its misleading descriptions and examples? And "lol, whut?" is pretty much the only reaction to the statement "The example above is not very useful." (which you may want to note has since been removed, or at least the note has been, confirming W3F's reaction to it) &gt; W3Fools exists because W3Schools is a terrible, misleading and often incorrect resource **and is at the top of the search results 90% of the time**. &gt; W3Schools doesn't warn you of the pitfalls of javascript. Neither does Codecademy though. Great tutorials but they don't go into the pitfalls of the language either. If W3S was *only* a tutorial it would be fine, but it's not, it's also an index and compendium, and a completely broken one. &gt; W3Schools is not perfect That's one hell of an understatement. &gt; The latter feels like a monkey pulling other monkies off the ladder because that's what others did to them and that's all they know. No, the comparison does not hold, neither W3F nor people linking to it try to prevent learning, which is why W3F provides a bunch of resources *at the top of the page*. They warn about using a misleading and incorrect resource. It's their fucking tag line: &gt; We believe w3schools is harmful to the web. Web developers deserve better. &gt; Is W3Fools really a useful resource? Until W3S shuts down, I'd say yes. The point of W3F isn't to be a general-purpose *web development* resource, but to demonstrate that W3S is not a good resource, is quite often misleading garbage and should be avoided. 
&gt; W3Fools is whining because there aren't disclaimers about everything that should avoided. Why do you fel the need to make up misleading and incomplete reasons when the w3f site is quite clear about its reason for existing? &gt; W3Schools frequently publishes inaccurate or misleading content. [...] We believe w3schools is harmful to the web. Web developers deserve better. It's not just "disclaimers", w3s publishes downright incorrect content, as well as content which drives the reader towards the worst possible options and practices and hinders rather than promotes understanding of the domain. &gt; I go to lookup "whitespace: no-wrap" vs "white-space: nowrap", or what the arguments to splice() are. There are other resources which provide [exactly this](https://developer.mozilla.org/en-US/docs/CSS/white-space) [information](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/splice) and are significantly more likely to be correct.
&gt; W3Fools sees W3Schools as something akin to a course. It's not a course; it's a reference. As long as you use it as a reference, it is fine. You got it mostly backwards. There's a reason why most of W3F's examples are from the reference section.
https://github.com/paulirish/w3fools You could contribute, and fix the wrong information. :) Or just open an issue with your points. I personally wouldn't recommend w3schools, though. They have taught a lot of bullshit in the past, and I guess they didn't fix all of the things that w3fools points out? There are guides that taught all of this stuff correctly from the beginning, like eloquentjavascript.net, or MDN as a reference.
Exactly my thoughts. If you need an event system, code it yourself, or build on top of a library that only does events.
For a long time, **a very long time**, W3Schools was terrible. Truly, truly, terrible. Since W3Fools, it's improved, A LOT, and I'd concede it's decent enough for a beginner. However it's improved massively *post* W3Fools, in reaction, and for my own day to day work, it just doesn't contain the information I need. If I cannot use it myself, I cannot recommend it. When alternatives such as MDN are just as easy for a beginner, and updated more heavily, whilst also being relevant for advanced developers; why would anyone recommend W3Schools? Even then, MDN is the best resource I use, and it doesn't go far enough (plenty of obscure stuff is briefly, or just plain not, documented).
&gt; I'm not sure what I would bench them against though. Other libraries that do DOM queries, like jQuery or YUI, of course. &gt; I don't know what kind of tests you ran, but I don't think they turned out 90% slower. If it's possible, I'd like to see the kind of tests you ran. The results I got were valid, however, the fix you made to dom.js seemed to improve its performance dramatically. So, the test results I had earlier are now deprecated. My jsperf tests used a dom tree much more complex than the one used in your tests. I wanted to see specifically whether your library can handle very large dom trees efficiently. &gt; Anyway, running a benchmark against jQuery is unfair, as jQuery is doing a bit more work when $("#id") or $(".class") is invoked (like parsing out the identifier, which by design I do not need to do). I am aware of this, but jQuery *is* an alternative to your library. I don't care if the implementations differ. I only want to know which of the libraries that can do queries by class performs most efficiently.
This post makes me so angry.
Many of the things called out by W3Fools were quickly fixed/corrected by W3Schools. But I bet you it wouldn't take all of 5 minutes to find some more inaccurate information. There are better sites on the web to learn from, e.g. MDN or Webplatform.org.
&gt;is a terrible, misleading and often incorrect resource Is a blatantly false, misleading statement propogated by people who like to jump on bandwagons.
I heard w3schools is run by one guy. w3fools is run by a collection of top level developers. If someone handed him a list of errors on his site, and he corrected them, then that w3fools saved him some time. 
Why did I try over 9,000?
what's wrong with `setTimeout(function(){another_function();});` ? missing delay?
Also the the indirection, could just be `setTimeout(another_function, 100);`
But `this` will be different, no?
For me, the irony is that I mostly only encounter it when looking up what the w3c officially says about things -- but in searching for the best source, I end up with the worst.
In both examples `this` would be the global object. If you were to invoke a method of an object, it would be different. setTimeout(obj.cats, 100); // this === window setTimeout(function () { obj.cats(); // this === obj }, 100);
&gt;&gt; I feel like I could go through a lot more of these and point out things that are out of date, childish ("lol, whut?"), sensationalist, misdirected/misunderstood, etc... &gt; See, that's interesting. Golden, even. You are incensed that there are inaccuracies about W3S on W3F. Have you realized that this is how the creators of W3F feel about W3S's take on their entire professional domain but that, on top of it, they see W3S as actively harmful to the web in its promotion of bad code and its misleading descriptions and examples? So your position is that W3F's inaccuracies are excusable because W3S's are worse? Yep, sounds pretty childish to me.
People talk mad shit about w3schools, but people are haters and that's how it always will be. Is it perfect? No. Is it a pretty good resource to learn the basics about a wide assortment of technology? Yes! I didn't even know what a div was a year ago, but now I have completely stood up my own website with code from scratch without a template. I can say that w3schools has taught me most of what I know, while stackoverflow has filled in the rest for more specific solutions to problems. I have taught myself HTML, CSS3, JavaScript, and JQuery within a year using mostly w3schools. In my view, most of the criticism of w3schools seems pedantic and pretentious. Or maybe it's just that people become so good at web development that they can't even perceive why w3schools's dumbed down examples are so instructive for new developers. Have I taken issue with some of their bad examples? Sure. But there are a lot of good reasons why I keep going back. I like how their information is laid out. I feel that it is very navigable. There's a broad assortment of information all in one place. It lists a lot of important things that I have used quite a lot such as: - The CSS color name page. Very useful when picking out colors since all of the hex, names, and colors are shown on one page. - The JQuery animate page shows most of the useful effects all on one page. - The JavaScript event and selector references shows many great examples and I often forget the exact usage. For learning the general basics, I think it's a great tool. But when I needed more in-depth, specific answers I have used stackoverflow and the google machine. As an example, this is what I have managed to build in 7 months as a person that didn't know what a div was a year ago: [A dumb game I made to learn web development](http://www.nevergrind.com)
It would be different if the example was setTimeout(function () { object.some_method(); }); but with a straight function, it's just an extra invocation compared to setTimeout(another_function);
So... what then? What were you saying there? Because that's the only way I can see to interpret that statement in the context of the rest of your diatribe: it's saying that W3S's inaccuracies are inexcusable and we should all be left aghast that such horrible things could ever be posted on the Internet, but calling out the problems with W3F is apparently off limits for some nebulous reason.
I learned a lot from w3schools back in the day, it helped me learn syntax and a lot about the DOM. I have found a few things not to work in more complex scenarios than W3S provides, but I can usually understand why and quickly find a solution. I really don't feel as if I need to be warned about potential pitfalls in javascript. To me, that's just part of programming. You run into things that don't work, and you find a way around them, it's problem solving.
&gt; What were you saying there? That OP has all the intellectual tools to understand the reason why W3F exists since he apparently feels the same way *about* W3F, but he blinds himself to it. Which I found interesting. &gt; calling out the problems with W3F is apparently off limits for some nebulous reason. At no point did I disagree with OP for pointing out w3f inaccuracies (though most of the time OP was incorrect about purported inaccuracies or errors, in which cases I tried to provide corrections or explanations) (hell, I even gave a link to the repository so he can report bugs or provide fixes to it), *at most* I provided possible reasons for these existing, no excuses for them.
OP doesn't say that something like W3F isn't warranted. He's saying that he thinks the same goal could be accomplished without all the snark and condescension, and that having all that makes W3F harder to take seriously, which obviously hurts its position. And then you replied with more snark and condescension, and I thought it should be pointed out that that kind of helped prove the point. That's all there is to it. Nobody is "blinding" themselves to anything.
For learning javascript, I'm personally not a fan. I like tutorials that demonstrate and provide an IDE sandbox to play in while you learn. W3schools, Codecademy, learn.knockoutjs (not javascript, I know but a damn fine tutorial UI), and I'm sure there are others with a similar interface. Sure, one could bring up jsfiddle, their Firebug console, etc... along with the tutorials on MDN but for beginners, I think there are better options. As an authority on javascript and jumping off point for other resources, MDN is tops. I use it for reference all the time, but once upon a time I used W3Schools to learn some web technologies from with no background in development or javascript. I turned out ok and I don't think I'm years behind my colleagues. But yes, MDN is an exceptional resource for javascript.
turns a what?
W3Schools is a good reference and bad learning tool or W3Fools is a good reference and not a learning tool? I don't think W3Schools is a great reference sheet for the language. It demonstrates in its references (not tutorials) the language and nothing but the language. When providing a reference for javascript, the whole truth should be mentioned, such as the pitfalls as MDN does. W3Schools, good tutorial for beginners, not a great reference for getting into the nitty gritty. MDN, great reference and source for other resources, but not a fan of its tutorials for beginners though.
I agree. Someone who has a good start on javascript and programming, I would send over to MDN for more information on specifics of the language. For someone brand spanking new to javascript, and programming in general, I'd send to W3Schools and/or Codecademy to get their feet wet. W3Fools probably was a bit of a motivator at one point for W3Schools to get their act in gear. W3Schools has improved a lot since I've last visited their site. I just think that now W3Fools is a bit outdated in some of its errors now, and that it's picking on W3Schools for not being a 200 or 300 level course when it's just an introduction. It's not like their tutorials are filled with `eval("console.log('Hello World')")`. It's in their documentation for the language, not in their tutorials though. I never expect tutorials on any topic to be all encompassing. I look at W3Schools and Codecademy to be 101 entry level introductions. MDN and the like are more like 200, 300, 400 level courses.
&gt; Your response is gonna be "hurr durr its gonna be IE all over again" And then... &gt; ..."I don't know if you remember but back in the day IE6 was the shit so everyone built stuff for it"... 
The chrome developer tools make an excellent sandbox.
Chrome also has Firebug lite that can get installed but yeah, the chrome developer tools is pretty decent. I think it's a matter of preference at that point. I like Firebug's UI more, but I can see how others would prefer the Chrome developer tools as well. Good stuff =)
Yes, critical thinking is one of those key components to programming. It's really why I started to explore the W3Fools site and what all the hub bub was about instead of just taking their word for it. I, too, learned from W3Schools back in the day when I first gained interest in web development and I definitely don't feel like I'm years behind my colleagues because of it. Probably for the same reasons you mentioned. I was taught to never just look at one resource anyways.
&gt; Many problems that W3Fools outlines have been corrected (which I think is really the end goal of W3Fools) Yeah, I think so too. I think it could be represented better but they seem to pick on W3School's documentation than their tutorials in their errors portion. Looking at the "useful resources" section on the right of this sub, though, it's saying, "Why you shouldn't trust W3Schools as a resource to *learn* JS", which I disagree with. For a reference, a developer can do better than W3Schools. W3Schools feels like it tries to be unbiased and they try to just explain the language, but I still see it throwing out opinions here and there. They got these great comment bubbles with a light bulb providing tidbits of information. These would be great tools for them to point out dangers and what-not. They could do a better job with their documentation, and I wish they would. I completely understand where W3Fools is coming from, but it's so barbed with disdain that it's hard for me to take them seriously even though they probably have some good points in there. But I totally agree with you. W3Schools, good for beginner tutorials (as are a few other sites) but there are just better resources for documentation on javascript like MDN.
I also had to solve the circular reference problem, but even with that, if you have a lot of objects and all kinds of data in them, millions of objects and items in arrays, etc, at some point you get the browser not responding message unless you use webworkers or a setTimeout scheme. My solution used setTimeout to break up the searching so it wouldn't freeze the browser on large data sets. 
Webplatform.org is an open site--so anyone can add or contribute better tutorials: http://docs.webplatform.org/wiki/WPD:Getting_Started. W3Schools is a for-profit site, so I'd rather not spend any more effort helping them improve their content (I helped gather some of the stuff for w3fools back in the day). Seems like that energy is better spent elsewhere.
Sure, if you don't count thousands of lines of jQuery.
Not JavaScript, but this abomination is still alive and is one of the most horrible thing on that site: w3schools.com/php/php_mysql_insert.asp (not a clickable link since links here are not `rel=nofollow`)
Their reason for existing is to whine and feel smug. 90% of the examples are them complaining about things the site didn't say. They don't push their readers to misleading solutions, they show easy to read examples. If you're mislead into thinking every example shows best practices of everything then that's your problem. MDN is an awesome resource (especially for new features), but even after its facelift it's still not as easy to use at times.
I can understand this perspective all too well. I went to a private school that put profits before students, and it pissed me off something fierce to see their marketing practices getting more support than their educational staff. Students dropping out or graduating with a degree that will do little to help them, just adding to this shitty student loan financial burden. I'm going to stop myself right there because that's a road for another discussion at another time. It disheartens me greatly that I want to give back to my alma mater but I feel, as you do, that my time is better spent elsewhere than giving of my time to a for-profit institution and getting nothing back except the personal satisfaction that I may have helped students receive better information. It's a morally difficult position to be in. On the one hand you hate a for-profit making profit off of your volunteer efforts, but on the other hand you want to help get the right information out there. You can't deny that W3Schools doesn't have a rather decent user friendly UI for learning, which is part of the reason I like em. They're information for beginner stuff is decent, it could be better, but for a "Hello World" student, it gets the job done. Really, there's not much that needs to be improved there anyways. But as everyone in this discussion seems to agree on, their higher level references are lacking and outside of simple references, it's not an advanced resource that anyone uses. It's probably why their certificates don't carry a lot of weight with them. On my resumes, I don't include my High School education on there since I have a college degree, because it's just redundant. The only way I could see any validity for a W3Schools cert on a resume is if a student, fresh out of high school, had them on their resume. That might tickle me a bit when hiring, but on a college/professional resume, if I saw W3Schools certs on there, I probably would throw it out. So in a way, they've already dug their own grave and have cornered the beginner web tools segment of online education. Where is your time best spent in all this? Probably like you've already said, on an open source platform like webplatform.org. I think if they, and/or MDN, polished their intro content with a basic tutorial delivery system like W3Schools, Codecademy, learn.knockoutjs, etc... have, you'll start to build a rep for being a good resource for beginners. Then in topics when someone says, "I recommend W3Schools for beginner stuff", you can more intelligently reply with, "They do well with beginner tutorials but their advanced topics documentation is lacking in a lot of areas like, {example}. Webplatform.org has a great tutorial UI for beginners and also helps provide more advanced resources on the topic." I don't see W3Fools as being productive in doing this. I think they went about it the wrong way and have helped W3Schools by pointing out errors. Not the worse thing in the world, but now W3Fools' site is starting to look foolish as well. I think it should be taken down and in its place, intelligent discourse on where to go for learning web development should take its place instead. &gt; We are passionate about the web, learning, and craftsmanship. We want you, as web designers and developers, to be successful in your careers. That's a beautiful start to a mission statement. It starts to go downhill from there pigeon-holing itself into a hate site which I don't think anything good can come from at that point. If they dropped the domain and started another site with something like W3Resources.com and then started providing good resources for certain skill levels, that would be a great start to that mission statement. Then embrace W3Schools' beginner stuff. Feed the stigma that W3Schools is a beginners site. Provide other beginner sites as well. In an advanced topics list of resources, don't include W3Schools at all. If they eventually improved their materials, re-evaluate them again. Otherwise, advanced topic champion MDN and sites like webplatform.org would go there. This would feel like a better site aimed at helping web developers be more successful in their careers. Alright, I probably rambled on long enough. I hope your endeavors at webplatform.org go well. I think they're destined for great things =) 
That's sort of a specious argument since you can say that about any code that isn't just logic gates passing electricity around. Sure it's 20 lines of C but only if you don't count all the assembly or standard library calls. 
I know, they provide great resources to other sites, but their [own](https://developer.mozilla.org/en-US/docs/JavaScript/Getting_Started) I'm not a fan of. It's not that it's a bad resource, it's just not a great delivery method of the content. Works for some, I'm sure, but the wall of words to me isn't exactly the most effective way to deliver a tutorial.
A lot of W3Schools' tutorials are useful. However, there's a danger when a closed/for-profit website topped the search results especially when it's feeding people open standards. It's not a problem if the contents of W3Schools are wikified, since there would have a sense of openness. People can correct/discuss the errors.
[Ask Bobby Tables](http://bobby-tables.com/php.html) The code on w3schools was written by someone who's either completely incompetent and never heard of SQL injection or in the days of PHP's `magic_quotes` options (which was deprecated for a reason).
But then you can't pass any parameters to the function.
You're referring to W3Schools reference and not this Ask Bobby Tables, right? I'll have to bookmark this under SQL, this looks like a pretty good resource. Thanks for that =)
&gt; ~~Ultamatom~~ **Ultimatum** FTFY
Yeah, the w3schools one has the hole and the other site says how it's done right.
&gt; How is that possible? W3Fools is not a tutorial/resource site, it's a specific rebuttal to W3Schools. In that their content hasn't been updated in awhile. No doubt that W3Schools has updated their content as a result of W3Fools but if they were to stay consistent, they should do the same. &gt; Not if the company is a large, well-known organisation with a proven track record. Yeah, I don't think W3Schools' certs are valuable at all. That's based on their reputation, and as you pointed out, is just a bunch of multiple-choice. Larger, well known orgs with proven track records are the ones who have more strict criteria on their testing. This is what I mean by questioning the value of certs at most places. &gt; We believe it is W3Schools's responsibility to disseminate accurate information—and if they refuse, we hope that this document will help dissuade others from promoting or linking to W3Schools as an authoritative source of information. [Ultimatum](http://www.thefreedictionary.com/ultimatum): A statement, especially in diplomatic negotiations, that expresses or implies the threat of serious penalties if the terms are not accepted. I don't know what other word to use. It is your responsibility to retract your statement in your post, and if you refuse, I hope this comment will dissuade others from reading your comment. Do you feel like I just gave you an ultimatum? Even if you don't think that's an ultimatum, it's childish on my part to even suggest it. &gt; Because it's a good thing to admit you made mistakes? What does this have to do with the tea in China? W3Fools is dripping with disdain for W3Schools. They didn't exactly draft the kind of open letter that would make anyone want to reply back with a thank you. It's a great effort and does a great job at pointing out issues with the site but lose the snark. I made a couple snarky comments in my post because I wanted to see how many people would jump on me for it in W3Fools' defense. I was not disappointed. If W3Fools wanted a serious response from W3Schools, they probably could have started with a better domain name to host their open letter. This is high school bullshit and I'm surprised anyone takes it seriously. Which is a shame because W3Fools makes some good points. &gt; But the phrase is inside a string! I know, it's a poor code template snippet. I won't argue that W3Schools has a lot of room for improvement. They have a great content delivery platform. I think the UI is pretty friendly from a learning standpoint. I really hope they improve their content. If they don't, they'll continue down the road their on, living with the stigma that they're a beginners website and nothing more. For those who copy-paste, they deserve whatever pain they run into from copy pasting.
It was intentional as the ultimatum rendered on W3Fools reminded of the [YTMND](http://ultamatom.ytmnd.com/) reference this refers to.
I'm OP and I approve this message.
&gt; They didn't exactly draft the kind of open letter that would make anyone want to reply back with a thank you. I see your point but honestly I feel like this is the only kind of response that would make a difference. They derserved every bit of that disdain. As for "ultimatum", I thought you were saying w3fools used that word. I still think that quote isn't as harsh/childish as you say. Why should a terrible site be held up as good?
I will be on for about 40~ minutes (even if no one joins).
http://eloquentjavascript.net/
Yeah, because monopolies are bad! *All monopolies* are. bad.
"w3fools was written by a tween for a tween" i guess if you consider guys on chrome's dev team tweens, you are correct
I walked right into that one, didn't I?
If you were a seal, it would have been a club.
Look into [Chutzpah](https://chutzpah.codeplex.com/) for integrating JS unit testing into Visual Studio. 
It's not the only response that would make a difference but it's certainly a response that's going to light a fire under their ass to fix their content. It's a kind of response that's going to have an immediate effect but not a lasting one. I more effective approach, for the long term, is to provide a competing resource that's going to put W3Schools to shame. W3Fools, unless updated regularly (which looking at their github page hasn't been updated in 5 months), will slowly cease to be a useful resource. Does W3Schools deserve the disdain? Some and I'm sure they get it all the time. That's their reputation they have to live with, some beginners go there, advanced users go else where. They'll improve their content or be replaced by someone else who delivers it just as good and with better content. Codecademy and MDN should be enough incentive for them to seriously reconsider their long term strategies if they want to continue to compete in web development resources. Programmers are relentlessly unforgiving so W3Schools should get their act together. &gt; Why should a terrible site be held up as good? Terrible websites aren't held up as good. Content aside, does W3Schools have an effective UI for delivering content? I think so. Is all of their content across the board up to snuff? No. Their beginner tutorials in general are good, although I've been pointed to their MySQL stuff as being 'remove from the web immediately' bad. That definitely doesn't help their reputation and does diminish the trust in the content on the rest of their site. And every good developer should learn to question the validity of every source.
I'm not cracking a joke or saying anything insulting. Having the ability to read through detailed documentation is not an automatic skill. You said it yourself. You recognize MDN as an excellent resource but the format is off putting to you. My suggestion is that the format is correct but you need to put in the effort to make the task at hand less arduous.
Can someone show me a solid example of a silent error being thrown? I'm not doubting what the author is stating, I just can think of an example where this happens (probably because I prefer to put my brackets to the right).
What's wrong with ``for (i = 0...`` to write a ``for`` loop?
I just can't believe they wasted so much time pointing out negatives instead of just making a replacement. It is easy to criticize... not so easy to actually do something about it.
I have no idea what the article is talking about because its example of bad code is valid, working code. To me, "silent" means it failed in a way that wasn't obvious to the calling code. For instance, throwing an exception makes it obvious. Returning false or undefined can work too, but here's an example where that fails and a silent error occurs. Client would think the array was empty: function lastElement(array) { if (array.length &gt; 0) return array[array.length - 1]; else return undefined; } document.write(lastElement([1, 2, undefined]));
Right, but I'm not sure how bracket placement would affect your function.
It's not that it's off putting to me, to me I don't think it's the most effective way to deliver course material online, especially to a varied audience. You say it's the format is correct, I disagree. For documentation, there's no other way to really present it except in a lot of text, and I'm ok with this. I don't have a problem reading through documentation as it's not intended to be read cover to cover, at least in my opinion. Everyone uses a combination of learning styles to educate themselves with. What works for one person, doesn't work for everyone. Some styles are more dominant than others. Sometimes it's a combination that works best for some or depending on a situation, one might be better suited to a person than another. MDN's tutorial is purely verbal (written). There's not a lot of visual cues. Nothing auditory. W3Schools, codecademy, how jsfiddle is layed out, etc... incorporates some visuals and chunks up the content to be digested more easily. Something that, with MDN's tutorials, needs to be manually broken up by the student themselves, and not everyone is adept at that as you've pointed out. I could read through MDN's tutorial but I think the format of other site's try to incorporate more learning styles so that even if you're dominant in the verbal learning style, you may find that the added visuals (like the sandbox IDEs) assist in the learning of the content. But it's probably why they link to codecademy instead of rolling their own. I'm not putting down MDN's tutorial format because it's not one that I can deal. I'm putting it down because it only caters to one learning style. I like to use learn.knockoutjs.com as a good example of what a tutorial that caters to various learning styles should be. It will do well, as an MVVM framework because it provides a way for more people with different learning styles to digest its content. Some will probably prefer to just go through the documentation and skip it, and that's fine. Although I appreciate your suggestion for me to get over not liking to read, but it's not helping the next guy who's dominant learning style isn't verbal (written). They're smart and capable but plowing through text after text isn't something that's going to work for them. We can say hey, I'm sorry you don't like reading but if you want to program, you need to get over that. And this guy, he might be adept at taking business concepts and translating them into well structured sections of code that can be easily unit tested and maintained, but because his primary learning style isn't reading, he's shunned, and someone who could do great things in development is lost to us because he feels like an idiot. "Everybody in this country should learn how to program a computer... because it teaches you how to think." - Steve Jobs That's the opening quote of the [video](https://www.youtube.com/watch?v=nKIu9yen5nc) on [code.org](http://www.code.org). A brilliant campaign to try and get more people interested in coding. And yet, here we are, suggesting that new programmers get over not liking to read. That is not a solution to bringing the skill of programming to the masses. Watch this [video](http://www.youtube.com/watch?v=-_2xGIwQfik) of Neil deGrasse Tyson addressing his concerns about Richard Dawkins being ineffective at conveying science to the masses because of how intellectually barbed he can be. He discusses that being an educator is about an instructor's sensitivity to the student's frame of mind (frame of reference) in order to better deliver the 'facts' to the student. "Sounds like you don't like reading. I suggest you try and get over that." is not an effective teaching strategy. I apologize for being long winded. Brevity is not my strong suit.
This is an excellent question. Because general purpose IDEs don't know what you're programming. A customized IDE (look at [learn.knockoutjs](http://learn.knockoutjs.com/)) can help a student when they get stuck. Their 'fix my code' feature is great. I know it builds character and what not to force a student to figure it out for themselves but there will be PLENTY of times in the future where they'll have to face that. Learning a new topic doesn't need to be one of them. Brand new to learning something? An integrated IDE to a tutorial can be helpful. Those who are more advanced or well versed on syntactical errors can probably do fine with a standalone one like jsfiddle. I went through the learn.knockoutjs tutorials for awhile getting the hand of their framework. Now that I'm a bit more savvy, I just pop open jsfiddle. Anyways, great question =)
Yeah no problem, thanks for clearing that up.
 function iAmValid () // this is // a perfectly valid // javascript function declaration { alert('ASI is not going to hurt anybody here...') } Instead of trusting the next guy that comes along, trust the [specs about ASI](http://www.ecma-international.org/ecma-262/5.1/#sec-7.9), [line terminators](http://www.ecma-international.org/ecma-262/5.1/#sec-7.3) and [comments](http://www.ecma-international.org/ecma-262/5.1/#sec-7.4).
So what? Provide a working example.
It seems? It is really that hard to read the specs and find it out?
But when you're starting out there's nothing like a text box that already has an editable and executable example in it. In the Chrome dev tools you can't type more than one line of JS.
There already *is* a replacement. https://developer.mozilla.org/en-US/docs/JavaScript is better.
I agree that all files are modularized, and then (step 2) tested. However you don't need a node JS solution to accomplish this. 
This book brought me from being an okay programmer to a *pretty alright* programmer in only a few days. Highly recommended. 
&gt; Is a blatantly false, misleading statement propogated by people who like to jump on bandwagons. Is a blatantly false, misleading statement propogated (sic)by contrarians who, for some reason or another, tolerate a "learning" resource that is not only often wrong and perpetual to bad habits, but is *really popular* at that. 
Unfortunately, programming is a profession that is, by definition, literary in nature. You simply cannot be a good programmer if you are either or both bad at writing or bad at reading. If you don't like to write, or if you don't like to read, you will necessarily be limited as a programmer, both in your ability to write code and in your ability to read code and documentation. This is not to be disparaging. This is a simple fact. It's a hurdle every programmer must overcome. Some of us take to it easily (I love to read and writing comes easily to me) and others do not (I know several people who are incapable of writing a coherent sentence and have scarcely read any books other than what has been required of them.) But the good programmers are good at writing and read frequently. The bad programmers are not and do not. If existing tutorials are difficult for you to read or do not meet your learning requirements, then I would suggest that perhaps there is an opening in the ecosystem for a new kind of tutorial. So, I would therefore invite you to write your own tutorial that matches your own learning methods and style. Even if you never publish it, the process of writing it will force you to do the research and reading and testing in order to firmly cement the necessary concepts in your own mind.
I understand that. I was referring to the w3fools developers specifically =D
Pro tip: If you use Chrome, you can add MDN as a quick search in the URL bar by adding it (https://developer.mozilla.org/en-US/search?q=%s) to the list of search engines in settings. I like to have the keyword set to mdn so I just type mdn then [tab] and then whatever I want to search in MDN and it brings me directly to the search results. You can do this for any search page with Chrome. My favorites are this, Wikipedia, and IMDB.
To expand on oystercat's note, consider the following function: function countToTen() { for (i = 0; i &lt; 10; i++) { console.log(i); } } If you call this once, it will be have as expected. But what if I want to call it ten times? for (i = 0; i &lt; 10; i++) { console.log("no var: " + i.toString()); countToTen(); } It only gets called once, because "i" is global. We can fix this easily enough by using variables, which will keep "i" limited to its calling function. function countToTenCorrectly() { for (var i = 0; i &lt; 10; i++) { console.log(i); } } for (var i = 0; i &lt; 10; i++) { console.log("uses var outer loop: " + i.toString()); countToTenCorrectly(); }
line 21 and 22 should be doing an assigment ("=") rather than an equality check ("==="), assuming that you are intending to assign a value to the prime variable. 
I envision it working for any number. I could probably just go up to seven for the first set of tests. If a number was divisible by any of those, it wouldn't be prime, no matter how large the number. Thanks for the response
Rethink your algorithm, you'll need a for loop ;)
I know you're learning, so I'll try to be gentle. For good coding practice, try to always terminate your statements with a semicolon. Going off your original code: var prime; var num = prompt("Enter number to see if it is prime"); var p1 = (num%2); var p2 = (num%3); var p3 = (num%4); var p4 = (num%5); var p5 = (num%6); var p6 = (num%7); var p7 = (num%8); var p8 = (num%9); // This should be replaced with a switch statement if (num===2){p1=1} else if (num===3){p2=1} else if (num===4){p3=1} else if (num===5){p4=1} else if (num===6){p5=1} else if (num===7){p6=1} else if (num===8){p7=1} else if (num===9){p8=1} else {null} // This does nothing. if (p1===0||p2===0||p3===0||p4===0||p5===0||p6===0||p7===0||p8===0) {prime===false} // This is not an assignment. The '===' operator returns true or false else {prime===true} if (prime===true){alert("This number is prime");} else if (prime===false){alert("This number is not prime");} else {alert("User error")} I [mocked this up in jsfiddle](http://jsfiddle.net/netinept/Fy3NJ/) and fixed the syntax errors. While this "works" the way the code was written, it does not work from a functionality standpoint of checking whether a number is prime. You may be interested in reading up on prime number calculations. Here is an [article on Mersenne prime number calculation](http://www.ece.neu.edu/groups/nucar/GPGPU4/files/thall.pdf). 
A number n is prime iff all numbers between 2 and n-1 don't divide n. for (var i = 2; i &lt;= n-1; i++) { if ( n % i == 0 ) { return false; } } return true;
Golfswingviewer, i know Cdawg IRL. we both tried for loops. He is trying to duplicate a program i made in C++ into JavaScript. So far its going pretty good, i just couldnt figure out the algorithm for looping statements. I am trying to make do the same thing cdawg is, after i couldnt debug his code. We both code in different styles, myself favoring functions and whitespace... cdawg favoring short, variable based conditional statements. 
That was my original code, but the for loop didnt work for me. 
What about the loop did not work?
Only yielded the final condition (when i = n-1)
cdawg right. it like taking 9 values and mashing them in 1. for each itteration the variable would be overridden. it just.. doesnt work. i made the orginal program in c++, cdawg and i are just trying to transfer it in javascript
It's like nobody here has heard of stackoverflow.
I sure haven't.
The most elegant I was able to find... http://www.javascripter.net/faq/numberisprime.htm
Check the first link in the sidebar. It's exactly what you're looking for - usually a JS question will get answers within minutes.
Thanks! 
Could you explain? EDIT: Never mind, rwparris2 has a good explanation.
Why doesn't i = 0 reset i?
See my edit. I understand now. Thanks.
That's for the quick reply! I've intended to learn JS, but I feel to pick it up I need a project to cut my teeth on. I figured if this idea is something that JS can do then I'd like to try, because if I'm successful this small app can make future data work for us a tad less irritating.
Great! Now do Monads.
shift+enter
Creating a web page that allows you to enter your data and then export the results as a csv file (Excel compatible) shouldn't be too hard. No server side coding required if you use something like this http://feras.us/blog/2012/8/16/javascript-to-csv-excel-google-docs-ready-using
AMD modules help. It puts you in a mindset where you have to think about dependencies, code as reusable components independent of the app or environment, interchangeable (versioned) parts, separating code into namespaces, optional vs. required pieces, pre-loaded vs. dynamically-loaded etc. You don't have to do all of this stuff right away and you don't have to isolate every unit of code into its own file to absurdity. When I refactored some older projects with requirejs, this was my basic process. 1. Reorganize 3rd party libraries into their own directory: `/static/js/libs` or something. Store them by version number in a dir named after the library. `/static/js/libs/jquery/jquery-1.9.1.min.js`, `/static/js/libs/d3/d3-3.0.8.min.js`. This makes it easy to host several versions of your libraries for apps in transition. The length of the path isn't a big concern, because it will be compiled as one file with `r.js`. This can be done right away, as you're just changing the paths for scripts in use. **Note**: There are advantages to loading libraries separately instead of compiling them all together (for public sites there are the benefits of CDNs, cacheing), etc. I won't argue in favor of one or the other, I just prefer bundling to keep down load time with fewer HTTP requests and since I do this mostly for internal apps I would prefer not introducing outside requests. 2. If you're already using the module pattern and namespaces: `(function(){ window.app = { ... }; })()`, you're off to a good start since that's close to how you would define and use an AMD module. If not, start consolidating globals under a namespace and converting use of globals over to the namespace method. Then start thinking about the namespace as an instantiable environment that is just another module. That's essentially how test frameworks work: load the module, pass it the mock environment that uses `/api2test` instead of `/api2`. 3. Design modules with meaningful human-readable interfaces (APIs). That is a big help towards making interchangeable components. 4. Pull inline javascript out of HTML files. Consider using event handlers instead of `onClick="javascript:...` and `href="javascript:..."`. Consider moving the kind of actions you might put into a `&lt;script&gt;$(document).ready(function(){ ... })&lt;/script&gt;` block into an initialization method in your require.js main module and call it instead. When it's time to switch markup to some templating engine, it makes more sense to me to separate code from the template layer. 5. Pull inline CSS out (`style="float: left;"`, `&lt;style&gt;#header { ... }&lt;/style&gt;`) in favor of linked CSS files. Use ids and classes in HTML. They give you some semantic structure (like "hooks" for jQuery/css selectors, scraping tools). It keeps your markup clean. You can also use pre-processors with CSS files (like LESS or SASS), which isn't easily done while embedded in the page. The end result is that your HTML is just structure and isn't responsible for javascript or the style/theme. Your CSS alters structure and reads like a "skin". Your code explicitly declares its expectations and does no more than its responsibility. Your environments are explicit and can be swapped around and shared. Your libraries can be updated at will and you only have to update the main.js file to do so.
Thank you very much!
Given this is an infinite problem, it is not generally solvable without loops (or recursion). A conditional statement will only take you so far.
You probably had something like `prime = false` and `prime = true` in a loop, without breaking out of it, I suppose. If you don't break out of the loop when you find it's not a prime, the value will be overwritten in the next loop iteration. nocturne81 is using `return` to break out of a loop that is within a function (presumably `function isPrime(n)` or something like that); if you just have a loop you can use the `break` statement. Or you can be inefficient: start with `prime = true`, then inside the loop only ever do `prime = false` if it's false, and ignore it if it's true. This will only go from `true` to `false`, and never get back from `false` to `true`, so it will be `false` if at any point `prime = false` is executed. However, this is not good code, because it continues to loop uselessly even after the answer is known.
You can also do that for any search page with Firefox or Opera.
They did, and they do. The people behind W3Fools work as developers and developer advocates/evangelists at Google, Opera, Mozilla, the W3C, etc., and are involved in developing web standards. [W3Fools itself also recommends a variety of existing resources that are superior to W3Schools](http://w3fools.com/#what-should-be-done).
The flow is like this: `i` is set to 0 by outer loop, `i` is incremented ten times by the inner loop, then `i` is incremented again by the outer loop. By this time, `i` is 11, and the outer loop terminates.
W3F's inaccuracies are excusable because they are open-source and not-for profit. If you find an inaccuracy, [fork it](https://github.com/paulirish/w3fools) and submit a pull request - it's that easy. It's also excusable because W3F is not a learning resource, it is an advisory. And thirdly, I haven't found it to be inaccurate, only possibly obsolete as W3S slowly addresses the complaints.
Depending on how the walls are defined, testing an intersection between the line between the player and the guard, and the walls that are within the play area, may be more efficient than ray tracing. 
Watch the google refine vids, don't think js is the right spot
/r/LearnJavascript
Don't worry, I'll be doing that again. I think I should just announce it prior to doing it, so people can find time, and I think I'm going to make it a thing I do. By the way, I was inspired by [this](http://www.ted.com/talks/sugata_mitra_build_a_school_in_the_cloud.html).
You might be interested in google docs. I find it easy to work with. You can create a form that feeds your spreadsheet. I'm not sure what you mean by "condense", but you can write scripts, which is JS and has a nice set of API available for interacting with the spreadsheets and other google services. These scripts can be onload, onedit (the one I use the most), or even on a timer (even if you're not currently viewing the document).
thanks for the writeup. that is kind of how i imagine the process will be. i've been doing some modules/namespacing, so im already preparing myself for the next leap of using require and getting tests to work. the biggest leap with be getting the other teams to do the same with their code (hundreds and hundreds of lines of js in each html file.. ugh)
Wow, that's obscure. Hall pass accepted! :D
I've found myself wishing I had something like this a lot of the time while working with Ember, which produces pretty heavy objects via its class system. I'm usually fine to use the Chrome dev console to do object tree inspection, but it can be tough to navigate if you're not very familiar with the implementation.
It shouldn't be listed as a resource IMO, but adding the chrome extension [Personal Blocklist](https://chrome.google.com/webstore/detail/personal-blocklist-by-goo/nolijncfnkgaikbjbdaogikpmpbdcdef) and blocking w3schools from your search results should be recommended instead. :)
The single-page app paradigm shift has lead to developers trying to be, IMHO, too clever in how they approach things. The purported promise of Backbone summed up in one sentence is: granular updates to DOM elements, backed by model and collection events via pub/sub. The thing is, if you are building a single page application (SPA), you often have more than one route and you have to come up with some way of representing state change as the user moves through your app. If you think about the traditional request-response model in a classic webapp, where a user clicks a link and the browser does a full page reload to get the new state of the app (HTML, CSS, JS, Images, et al) every time, you come to the realization that a "reset" of the browser state is often a very useful thing. Long term global state is a tricky thing to manage; it's magnified even moreso when you add the quirks of the browser into the mix. I feel you have 2 options for managing the need to transition users between "states" in your SPA: * **The Intelligent Way**: being as granular as you can about updating the DOM on a route change and only re-rendering pieces that change * **The Brute-Force Way**: re-render the entire state of a "Page" view (and all child views of that page) every time a route triggers, regardless of if it's needed or not My experience has been that the intelligent way works great when you have very few routes in your app and the brute-force way works great when things start to get sufficiently complex and your SPA app is trying to act the way a more traditional webapp would. (I'm also usually sneaky and instead of optimizing for rendering intelligence and granularity at the view level I optimize by not re-fetching collection/model data if it hasn't changed by implementing a caching mechanism for models and collections; in essence my view rendering pipeline is as bruteforce and straightforward as can be, and I add intelligence in the data layer for fetching to avoid unnecessary network calls).
If you're not going the Google docs route, you'll need a serverside language for this, to actually write the database or spreadsheet. I wouldn't recommend node.js for this - but PHP, Ruby, or Python would be up to the task.
I should also mention, I often default to the brute-force way _even_ if the SPA I'm building is sufficiently simple that doing it the intelligent way might seem right. My reasoning for this? DOM updates in modern browsers are pretty darn fast. (YMMV, of course, depending on what kind of app you are building; this approach fits the [80/20 rule](http://en.wikipedia.org/wiki/Pareto_principle#In_software) quite nicely IME). Here's an [example (warning: coffeescript)](https://github.com/davemo/tbs-battle-planner/blob/master/app/js/views/loadout_slot.coffee#L56) from an [app I built this weekend](http://tbs-battle-planner.herokuapp.com/#W1sidGgiLDEsMCwxMSxbWyJhIiw1LDUsMTFdLFsicyIsOCw4LDEyXSxbInciLDMsMywxM10sWyJlIiwxLDEsM10sWyJiIiwxLDEsMl1dXSxbInJtIiwxLDAsMTEsW1siYSIsNiw2LDEyXSxbInMiLDYsNiwxMl0sWyJ3Iiw0LDQsMTFdLFsiZSIsMSwxLDNdLFsiYiIsMSwxLDNdXV0sWyJibSIsMSwwLDExLFtbImEiLDQsNCw5XSxbInMiLDQsNCw4XSxbInciLDUsNSwxMl0sWyJlIiwxLDEsM10sWyJiIiwxLDEsMl1dXSxbInBrIiwxLDAsMTEsW1siYSIsMTEsMTEsMThdLFsicyIsNyw3LDEyXSxbInciLDIsMiw4XSxbImUiLDAsMCwyXSxbImIiLDEsMSwzXV1dLFtudWxsLG51bGwsMCwwLFtdXSxbInNhIiwxLDAsMTEsW1siYSIsOSw5LDE1XSxbInMiLDgsOCwxNV0sWyJ3IiwyLDIsOV0sWyJlIiwwLDAsMl0sWyJiIiwxLDEsMl1dXV0=) If you clicked the link through to the app you'll notice that this is the view for rendering an individual loadout slot in the battle planner. You'll also notice that this is as granular as I get: model.on("change", this.render); Often, this is as granular as you _ever_ need to get in a Backbone SPA. 
We ended up in the middle of a mobile SPA, accidentally. By that, I mean that everything you need to do is on-screen with friendly buttons, but there is so much state-retention (for the panels not in view on a phone or small tablet) and so much AJAX that we stopped preserving url state in the browser. Swipe left &gt; last search results, swipe right &gt; view/edit, swipe right again &gt; (magic contacts stuff). On a tablet, tap through your search results, live updated detail views on the right side of the screen. In short, when you say "hit the back button", in our app-like mobile spa, that is one of our convenient on-screen buttons, that is NOT the browser back button. We have abandoned the actual browser "back" button. I know it is shocking (trust me, 10-year architecture veteran) but it is working for us with backbone. Every interactivity is "forward", in a sense, being panel updates. If you think about it, how picky should we be about the browser url bar? When you swipe left to search results again, should it just manually update the visible url, to "show" the user they are searching again? Sometimes "app-like" behavior will compromise the URL bar. And there are few things significantly more "app-like" than SPAs. Just sayin'. I know it's not ideal, I am aware of the unfortunate compromises. I am just addressing your question as best I can.
Awesome! This sub is starved for submissions on closures...
Agreed. Often you can achieve stateful routing and transitions in a SPA without even using Backbone.Router. If you find yourself having to fight with Backbone.Router that might be an indication that serializing the state of your application in the window.location.hash might not be the best fit for your app :)
Exactly. Lol, serializing the state of your app in any hash. And equivalently at issue is the particular nature of mobile. For desktop we could re-render anything. For mobile, good gods, no, don't make anything reload or redraw, if it's already loaded or drawn appropriately. You already have to deal with swipe sluggishness, even on a pumped android. Tools are great, but you can't always be drunk with a loaded shotgun. I'm a bit particular about performance, and it's served me well. Cross your fingers and default to "very very fast and very well-behaved." You'll usually be ok.
Yes, mobile is one area that being _more_ granular and picky about when you re-render is a good thing.
To be fair, that *is* how you insert data into mysql...it doesn't say anything on that page about doing it securely/sanely.
 &gt; seems
Recommends is the key word here =) W3fools did NOT build a replacement. They recommend another one.
...if you happen to be a C programmer
I think the other posters have done a good job of pointing out the other issues but I wanted to mention something else: Javascript has some unique bugs/features/design decisions that make things difficult for a new programmer such a the type equality check ("===") vs the equality check ("=="), and the strangeness around semicolons. I think your time trying to understand algorithms like a primality checker would be better spent with a more clean language like Python. Then you'd be well prepped to hop into the javascript world when you wish to start manipulating browser elements and working on the web. :)
yes, under some circumstances, you can. Under my circumstances though, I'm not sure where the real danger lies.
A malicious script could attach event listeners and pick up what the user is typing. Possibly picking up your login information and sending that off somewhere. In your case, that's if someone were to put up a url for the malicious search query.
neato dude. took me a while to figure out where the game was. 
TRIGGER WARNING: Haskell
If I'm interpreting OP correctly the injected code would only be displayed to the user that entered it. In which case the only searches they could hijack/key-presses they could log would be their own.
The attacker could spam the infected link around the web for users to click.
oh believe me, I'm not advocating against protecting yourself against XSS. I just don't fully understand what someone can do with XSS, under these specific circumstances.
I would also add that KnockoutJS is to Microsoft what Angular is to Google. I know it's not an 'official' MS project, but it is being led by the program director of ASP.NET at Microsoft (Steve Sanderson) and it is being pushed heavily as the JavaScript MV* framework to go with if you're a .NET developer.
Neat trick. It does this by converting types, eg. true, undefined, into strings and pulls individual letters from them and concatenates them to create 'reddit'
http://www.jsfuck.com/
[Here's how it's done](http://patriciopalladino.com/blog/2012/08/09/non-alphanumeric-javascript.html). Basically it's possible to write *any* program in javascript using just the ()[]{}!+ characters ... btw: I would be very careful about typing this stuff into your JS console, it could have done *anything* (well, maybe stolen your reddit session cookie at least ...) edit: did some investigation. the shortest "dangerous" program I could think of (which was just a back door for the real program) ended up being over 590,000 characters. I these little programs a pretty safe. http://www.reddit.com/r/javascript/comments/19njx3/type_the_following_gibberish_into_your_javascript/c8prp67 
I usually hear that as: "It's not what you don't know, it's what you think you know that just ain't so." It rolls of the tongue better.
Maybe it's just because I'm not nearly as familiar with these specific technologies as some (thought I certainly would like to be), but this seems to be a complex topic for simple text. I would be interested in spectating a Google hangout or Skype call, which may make it far easier to discuss rather than plain message-board style posts. Obviously that could be time consuming, too - just a thought :)
You should check out /r/demoscene if you haven't already. Sounds like you might find that interesting.
thank! i will!
I can now host my Viagra site on your's and advertise to all of your users. I can DDOS you by coding in a JavaScript timeout to reload the search query after $SHORT_TIME multiplied by the number of users. I can harvest the web page for email addresses, send rude email to your mother and launch the nukes.
link?
is `for (var i = ...` really best practice? I always thought it was better to declare variables at the top of their scope (due to hoisting). This convention leads to odd circumstances like: if (true) { // always console.log( i ) // 0 } else { // never for (var i = 0; ... } which can be very confusing.
For more information check out this blog post: http://patriciopalladino.com/blog/2012/08/09/non-alphanumeric-javascript.html
oh sry! i thought it will be available through the title! http://marky.pl/vu/Audio/
Why are there so many posts concerning coffeescript in /r/javascript? they belong into /r/coffeescript
I've never heard of such a thing, I'll have to look into it.
The coffeecritters need to be shown the door here. They should be downvoted ruthlessly, coffeescript posts should be reported but it seems the mods never gave a crap about r/javascript and the mud slinging that coffeecritters have launched on javascript by pronouncing Javascript is ugly, and coffeescript is "beautiful". It's quite lame really, and their argument doesn't hold a single drop of water. They are people with a syntax fetish for significant whitespace, and they have abandoned Javascript as a programming language. They still need to use it as a debugging language, because no matter if they have their precious source maps, they still do not know what kind of bugs the coffeescript "transpiler" spews out after every update because the significant whitespace is too ambiguous and they seem to like to change the syntax on a whim [(see the coffeescript 1.5 debacle for proof)](http://chrisabrams.com/blog/2013-02-26-the-coffeescript-1-5-change-not-mentioned.html). Visit the [coffeescript bug page](https://github.com/jashkenas/coffee-script/issues?state=open) for all the reasons you need to avoid the "made up language". Coffeescript has no place in modern web development, nor in r/javascript. 
For Mac Homebrew Users, brew install spidermonkey Comes with a nice command line JS interpretor using https://developer.mozilla.org/en-US/docs/SpiderMonkey.
The point they were tryin to make, I believe, is that somebody could (maliciously) link to a query on your website. That query could do any number of things, including ask them for Facebook info (etc) and then send it back to the malicious user. That kind of thing is on you to prevent, and yes it's serious. Don't be arrogant / intentionally ignore product failures.
His comment stated concerns about security. Copying/Pasting code that might start an HTTP server in your console doesn't sound safe to me.
Shit, I'm sorry, I think I broke JSFuck. I put in a few larger strings in the alert() and tried to gauge how efficient (inefficient) this method is in terms of chars used / chars added. Then I was feeling cheeky and so I copy-pasted the ~2000 length "(!+[]" output into the alert() field, and I think this broke the site. I am sorry.
Hang around this sub then! We specialize in posts on closures, 'how to do OO with prototypes', and of course, 'demystifying _this_'. Even though these subjects [have been posted before](http://www.reddit.com/r/javascript/search?q=closures&amp;restrict_sr=on), it never hurts to keep posting them because we all know this info can change on a weekly basis, and so it's good to post about them weekly in case the info we have from last week has gone bad. You're ahead of the game by getting this one out-of-the-way on Monday! Now we only have to worry about 'this' and 'OO with prototypes' for the rest of the week. It's also good because it means that when new subscribers join, they never have to leave the front page to find these exceedingly rare articles. Ever since all the web's search engines went belly-up finding this type of content has been a challenge, so you could even consider this a good deed. Keep up the good work!
wat
You're using things straight from the query string (e.g. `echo $_GET['search']`) so I can put whatever I want in the URL and spread it to as many people as I like. The URL might look a little suspect, but seeing as people are so used to seeing shortened URLs these days I could just run it through a shortener. This means that I can effectively display whatever I want on your site to whoever I can send a link to. I could: * Make your company look stupid subtly by inserting grammatical errors and spelling mistakes into your page * Make your company appear to have said something offensive (e.g. "Acme Corp is now refusing service to gay veterans") * Replace all your pictures with of goatse * Use your company's image to get people to download my malware ...etc. You're probably thinking "So what? We didn't actually say any of that stuff so it doesn't matter". Unfortunate as it may be: it matters a lot. The people who click on one of my special links will have one of two reactions: 1. They don't understand what XSS is and think that you are to blame for the offence or inconvenience they were caused. They most likely won't use your services again. 2. They do understand what XSS is and think that you are incompetent for failing to protect against one of the most simple and easy to avoid vulnerabilities. They most likely won't use your services again. Regardless of their reaction, the result is the same: they most likely won't use your services again.
Great article, really like how much explanation is provided.
http://patriciopalladino.com/files/hieroglyphy/
Awesome. What do you think of [this](http://www.reddit.com/r/javascript/comments/kssvc/closurebased_classes_up_to_20000_times_slower/)? I'll post whatever I come to in my quest to master JS! Thanks for your encouragement.
thank you. this is the kind of peace of mind I was looking for. 
You can use void {{everything}}. void null, void 0, ... everything will return the undefined value. x === void 0
Do you think you could open source this? I wouldn't mind doing some graphical work on it as practice.
If the context is in an object, you can use the .hasOwnProperty(..) function to check if that property exists or not. If you are working in a world where there is some other library that's doing bad things like changing undefined. Then you can do the following: Wrap your function in it's own scope and redefine the undefined. eg. if you're using jQuery (function($, undefined) { // undefined here is truly undefined because we only passed in 1 argument })(jQuery);
&gt; You're using things straight from the query string (e.g. echo $_GET['search']) so I can put whatever I want in the URL and spread it to as many people as I like. The URL might look a little suspect, but seeing as people are so used to seeing shortened URLs these days I could just run it through a shortener. Not just URL shorteners - the attacker could set up a simple page to forward to the target URL, even register a domain name similar to the target's to fool the user. That sort of page could also be set to submit a form on the target page silently and immediately onload, meaning that switching to using POST data isn't a change which will fix the issue.
It's back, apparently it wasn't a big deal
feel free to use the code! Im glad some would like work on it and it motivates me for further coding! also send the results :)
For those wondering where the "d"s come from seeing as it's not a character in either true or false: ([][[]]+[]) = "undefined" Same technique for getting a character from the string by using its index.
There is a semantic difference between checking for undefined vs. checking for whether the property exists with hasOwnProperty. Namely, results will differ in the case where a property exists but its value is undefined.
Void 0 is nice, as it is concise and fast in today's impls, but suffers for readability.
http://jsperf.com/undefinedcheck === will be faster, but you may get a not defined error if you don't use typeof it
unfortunately mozilla does not have the license for using mp3 codecs at this moment - they are currently working on it, can be visible in the bug tracker. Also webkit provides better framerate on chrome.
haha, well I used http://www.jsfuck.com/ (thx, mjesun) to encode this handy little scriptlet which ~~would~~ might, with some debugging download and run the rest of my evil-demo code from pastebin.com. s=document.createElement("script"); s.src="http://pastebin.com/raw.php?i=aBE1cHfb"; document.body.appendChild(script); The resultant encoded jsfuck program was 590029 characters long. I think it's probably reasonably safe typing *short* codes into your browser. 
Why are you using [DSP.js](http://marky.pl/vu/Audio/lib/fft.js) in your [adapterWebkit.js](http://marky.pl/vu/Audio/lib/adapterWebkit.js)? The Web Audio API already provides a way to get that data: var analyser = audioContext.createAnalyser(); this.bind( 'update', function() { var spectrum = new Uint8Array(analyser.frequencyBinCount); analyser.getByteFrequencyData(spectrum); ctx.clearRect( 0, 0, w, h ); for ( var i = 0, l = spectrum.length; i &lt; l &amp;&amp; i &lt; count; i++ ) { ctx.fillRect( i * ( spacing + width ), h, width, -spectrum[ i ] * h ); } });
Code monkey like you! :D
There's a few principles I've arrived at. 1) **URL maps to Models/Collections.** This should clarify your thinking about page state. What I mean is... 2) **Your app should be stateless.** That's a confusing statement; what I mean is that you're worried about the path a user takes through an app. The path your user takes through your app should be a sequence of URLs, right? But the point of a URL is that it doesn't matter _where_ you hit it _from_: it dictates the state of the page you arrive at. URL-&gt;Model/Collections. _Then_ you build your Views. I go back and forth between having Views listen to the Router or Views listening to the Collections. I think it's somewhat more coherent to have Views activate based on Router events. I use Backbone.History.navigate({trigger:true}) on every anchor tag in my app. Overkill? Yeah. But **single page _refreshless_ apps** require managing navigation explicitly. Angular does it for you, but it still does it. --- I suspect some part of your problem is your reliance on Controllers. Backbone is not MVC. It is Event-driven, which means you need to think in terms of Objects caring about their own state and what other Objects they should listen to. My typical example is the Reddit Enhancement Suite preview box. This text input is a View, right? So is the Live Preview below. Now, you might be tempted for the textView to call previewView.update(text) on every keypress. That's not Event-driven! Instead, the textView triggers a "change" event. It doesn't know or care who's listening. previewView listens for that change event and updates itself. Why is this better? Well, first of all, the views are decoupled; it's cleaner. Second of all, though, suppose we wanted something arbitrary but cool in the upper left, another View that displays the character count of the text field. That View just listens to textView. We don't have to add any code to textView, because textView only cares about its own state. A final note, I don't tend to kill Zombie views, I tend to swap them out. The point of an SPA is that you can cache things you've already rendered. The point of Event communication is that these Views, even if they're not currently in the DOM, can _still_ update themselves so that when you swap them back in you don't have to re-render. (You still have to rebind events, which I attach to my render function anyway, so this is a bit of a moot point at present.) I write about Backbone a _lot_. In particular I'd point you to my Backbone implementations of the [Angular Phone tutorial](http://koglerjs.com/ex/angular/) and the [Knockout Email tutorial.](http://koglerjs.com/ex/knockout/) Now, this is _actually_ one app with two sub-applications. They share the /ex/ base URL and take control of the DOM when /ex/angular or /ex/email is hit. [Poke around the source if you're interested (this link goes to the email source).](http://koglerjs.com/ex/emails.js) Finally, while I'm promoting myself anyway, my main sequence of articles on Backbone begins [here.](http://koglerjs.com/verbiage/backbone)
It is required by dancer.js + it performs FFT on the analyser like here: http://www.storiesinflight.com/jsfft/visualizer_webaudio/index.html
What about Webstorm vs phpStorm? I'm a PHP/Apache developer, but I want to have a fully-featured Javascript IDE, because I'm moving into developing apps with Node.js; entirely in JS. Honestly, PHP I can do with a hand tied behind my back, steering with my teeth, I've done it for that long. Javascript, I'm not so amazing at.
How do you prove that you are a student?
While I love the idea of Emacs and Vim, I have other things on my plate to learn.
What are the benefits of using Vim for JS development?
What are the benefits of using emacs for JS development?
I like long winded. Thanks for not just cursing at me like I feared might happen. :P I get where you're coming from and would very much like to take up the flag and advocate for the same. My stance is motivated more from how information naturally develops and travels and less about a favoring particular learning style. It kind of starts in conversations, email, irc, blog posts and other noisy channels where the information is developing, scattered, quickly deprecated and changed. It settles down into the form of specs written in a sort of programmers legalese. Then it gets implemented and you start to see little tutorials, blog posts elaborating on some points, etc. Eventually it gets into printed mediums, people do really nice podcasts and videos, it gets coded into some visually-oriented tutorial like you suggest. So my stance that all programmers must get over their not liking to read, I really don't think that can be up for debate. If you want to be closer to the source of the migration path, you have to learn those formats. Otherwise you'll have to wait. You also have to consider that MDN may be geared towards a particular learning style already and by making it more accessible to a broader audience could have a negative consequence in making it less useful to those who learn that way. In my view, MDN currently rests at a pivotal point in the migration path where it's right out of specs and more comprehensive than spec commentary.
First off, Sublime Text... Second, no tutorials... With them, you're just "learning" specific subjects, not the actual coding. Third, try codeacademy Last, code stuff as much as you can... There's my 2 cents...
Downloaded, Installed. I started CodeAcademy, but the site has stopped running my scripts for some reason, so I don't know if I'm doing it correctly. Thank you very much, though.
[you could try this: How to Learn JavaScript Properly](http://javascriptissexy.com/how-to-learn-javascript-properly/)
Thank you! I'll have to check this out, when I have 6 to 8 weeks to spare. EDIT: That wasn't sarcasm.
Good to know, maybe the site will be fully functional again soon.
Bookmarked everything. I'm just gathering links right now, then going to use my whole weekend to learn. Also, I might buy your book when it comes out. What title should I look for?
NO brew install v8 
Cool, I can now afford to buy it.
And authors **never** whore their own content out by pretending to helpfully suggest [their own blog posts about "this"](http://raganwald.com/2013/01/01/this.html).
We'll be able to give you better feedback if you give a live example and flesh out the code a bit more. I put it in a JSFiddle for you here: http://jsfiddle.net/thegaw/vE9cM/ Right now there's a syntax error. Want to edit that to include more of your code?
No way in hell am I pasting something from a reddit post in my javascript console.
updated the code
A pictorial explanation of closures would be an interesting addition to this sub now.
/r/LearnJavascript Just so you know where the advice is coming from: I'm 35, got a CS degree and have been a software engineer for about 13 years. I think you're on the right track starting with Javascript. However, I do recommend not skipping over the HTML and CSS stuff, even if you think it seems easy. One very important lesson with programming: pick the right tool for the job even if you can think of a way to do it with the tools you're most familiar with. I'd even suggest putting down javascript until you feel comfortable with HTML and CSS. If you're going to use the browser as your environment, you might as well learn the lay of the land, and knowing just that is almost enough to land you a job. With browsers nowadays, you can edit attributes of a CSS class or the styles of an element from the developer frame, so it's nice and easy to experiment. Also, CSS transitions and animations. :-) I'm assuming you already realize you can create a text document, rename it html, and double-click on it. At some point, think about installing Apache web server, but not yet. When I started, it was basic and I just made programs that printed christmas trees. document.write(" * "); document.write(" *** "); etc... I started "real" programming by creating games on my TI-85 calculator when I was supposed to be listening in math class, so today's equivalent is creating an HTML document with elements. You can start by typing commands into the console, but you can also attach code to input buttons if you want to put some code in the page. Make it read the value out of an input box and assign it to some element's attribute, like position or color. Or give it a random background color when you click a button or when you click on the element itself. I highly recommend picking up jQuery, which has great documentation on their site. (I give you permission to "skip" raw javascript. You're not missing much, and it won't be hard to pick up later.) I built my way up, so I think I started with blackjack, then poker, then I started with a single pixel that I could move around by detecting which arrow key I pressed, turning off the pixel in the current position, adding or subtracting one from either the stored x or y value, then writing a new pixel to the screen. Humble beginnings, huh? I then wrote a little role-playing game (I was playing dragon's quest and final fantasy 1 at the time). First I made a little guy (seven pixels) and got him to move around like I had with the one pixel. I could give him a maze (it was static, like a background image on a webpage), but I couldn't stop him from walking through walls! I thought about this problem for like two weeks before I came up with something. I assigned numbers to the combination of directions you could walk in by looking at a phone dial. So 1 could go up and left, two could only go up, three could go up and right, etc. Then I created a matrix and filled it with the numbers to match the static maze I had. When I hit an arrow key, instead of just moving him, I first checked his position against the matrix to see if it was a number that allowed that direction. I felt like a genius!!! If you're wondering what it takes to "think" like a programmer, it's actually better described as "managed frustration". Even the best of us just end up hitting things over and over again with a hammer. Programmers aren't the smartest guys, just the most patient... * *** * * * If you want start slow, use string manipulation and start making patterns using document.write() without having to type out each string. If you want to stick to text based, which isn't a bad idea and cool in a retro way, learn how to respond to keyboard inputs and how to clear the contents of the body. Then, after every key you type, you can clear the page and "re-render" the page by looking at the current state of your javascript variables and using a bunch of document.write()'s. Doesn't need to be too fancy: just start by counting how many times you hit a certain key on the keyboard. Or you can get fancy and dynamically write a "pre" tag to the page. Make sure you assign it an id so you can reference it to assign your text to it later. (That way, the characters will line up instead of being different widths -&gt; iiiiii MMMM.) Go with chrome, stay with chrome, even the canary version if you really get into chrome and want to follow all the newest features coming out. It's basically an IDE! Speaking as someone with many years of Java experience, don't worry about Eclipse at all. If you get so advanced that you need to start building applications, I recommend going with node.js first instead of compiling something because you'll already know the language and even some of the libraries. It can hit a mysql database and everything. (Actually, I use node for all the things I used to write scripts in an OS's native scripting language: batch, bash, applescript. People have made all sorts of API's for it.) I use sublime myself, but I head over to chrome console to test things out. Type the "." character to see what properties and methods are available to you. You can even set a breakpoint in your code and still jump over to the console while it's stopped in order to inspect things or play around to find out how to write the statement correctly. Ok, well, that's impressive to us old-timers. I recommend reading "JavaScript: The Definitive Guide, 6th Edition - O'Reilly Media". Sure, it's dry, but it gives you everything you need to know. And trust me, it will save you a lot of time if you just learn it right the first time. Paul Irish has entertaining videos about JS. If you're really digging jQuery, but want to know how it works, look at the jQuery code and view his "10 things I learned" and "11 more things I learned" videos. It might be above your head right now, so don't worry about it yet. If you think you're ready to code something visual and need a game to cut your teeth on, here's an idea that starts small and grows: start with a "ball" in the corner (0,0) that's a canvas element with an image background. Figure out how to have it start moving and keep moving around the screen at some angle of your choice (bonus points for random angle and/or random speed) as soon as the page loads. When it hits the edge of the screen (even if you resize your window), make the image change to a bouncy one (you can just make the image a different color just to keep it simple) and then go back to the normal image (after about a half sec), all by assigning different CSS classes. Or use CSS/styles and set the background-color if the images thing is throwing you. Then add more than one ball bouncing around, then make them look like alien flying saucers, then listen for a mouse click to trigger a bomb that blows up in two or three seconds (whatever's challenging) using a JS timer, then make sure it can handle more than one bomb in play at a time but limit it to no faster than one launch per 1000 milliseconds, then make the alien smarter by making them move in a new random direction/speed every 1-10 seconds), then make the aliens actually smarter by staying away from each other (all your eggs in one basket), then make them smart enough to run away from bombs when they hear you drop one (but only sometimes), etc...
Strict mode has nothing to do with it; [`undefined` is non-writable in ES5](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/undefined). As far as the current set of browsers go, it can only be rebound in IE7 and IE8.
You explained that really well.
I thought it was you when I read this post! I remember you leaving something like this when you left work!
Will waste too much time at home playing :)
Oh, I think I get it now, it's selecting characters from parts of true, false, or undefined, amirite?
 -~[] or +[,] are both shorter for the number 1. 
Or even better, send the link in emails (spoofed to look like they are from the real site) to specific targeted users.
&gt; User input isn't stored anywhere Yes it is. It is stored in the URL, and the attacker is free to distribute it however he likes. All it takes is some social engineering, and the victim will have clicked the link in no time.
I like how it says "The Basics" and the basics are a total mindf' to read. 
Just use `x === undefined`. If someone overwrites `undefined` and thus breaks things in old versions of IE, dropkick them in the face.
You're right; I had my prototypes skewed when testing this. Still, -~[] is valid.
An extension for concerts in the style of [Lightning Bolt](http://en.wikipedia.org/wiki/Lightning_Bolt_(band\)) would be interesting as well.
great answer, thank you
Moment.js.
The answers [here](http://stackoverflow.com/questions/572897/how-does-javascript-prototype-work#answer-572996) give some better explanations about the differences when using vs not using prototypes.
I think it's ironic that you bring up people not following reddiquette in a discussion about the importance of reading =P
You can just use the `Date` object ... var date = new Date("3/5/2013 1:00:00 PM"); var hour = date.getHours() % 12; var ampm = date.getHours() &gt;= 12 ? "PM" : "AM"; console.log(hour + " " + ampm);
Now we need a complete virtualized computer to develop javascript... I'm not into this, sorry.
I think the point about this type of code, is that you can write any program you like with it, so long as it's short... 
Adding methods to a prototype after the constructor is defined tends to be more easier to read. This is more obvious in cases where your object constructor has tons of private functions and you want to make it really obvious which are your *public* methods/properties and which are *private*. In the example below, byebye() is a private method for Person constructor, it can only be used within the constructor function. Greeting2() is clearly a public function since it is defined outside of the Person constructor function. function Person(name) { var self = this; // PRIVATE var byebye = function() { alert("Bye " + self.name); }; // PUBLIC this.name = name; } // PUBLIC METHODS Person.prototype.greeting2 = function (name) { alert("Hello again " + this.name); };
Using the build-in JavaScript Date object is your best bet. Moment.js is great, but would be overkill, and a bit too much for what we want to achieve here.
In addition to the other comments, theres also a performance effect to consider. Every time you create a new Person object, the greeting1 method is recreated each time. Whereas greeting2 is not because defining it with prototype you're simply creating it once to be called for all Person objects. You can imagine if you're creating many Person objects that greeting1 being duplicated is wasteful if its not private.
Absolutely agree. Something I've complained about for years. Now to scroll down to see how many jQuery solutions are given.
Ahh yes, didn't even think to pass the string into a new Date object. Perfect and straightforward, much appreciated!
you don't "need a vm" at all, it's just node.js which can easily run without a vm. The VM just makes it easy to get started. Some people don't want to install node.js on their computer, so the VM let's you play with the framework without having to do any work to set it up. You can even just use fin.js as a front-end library and not use node.js at all, but still get most of the benefits of the framework.
would love too but clicking 'play now' does nothing: Chrome 25.0.1364.152 - OS X
Thanks! fixed. I actually typed it into the osx dictionary widget to check the spelling originally but didn't read the definition... apparently "Lightening" like I as spelling it is: "A drop in the level of the uterus during the last weeks of pregnancy as the head of the fetus engages in the pelvis."
Sounds very interesting and looks like you have solved a lot of problems. Can I get a walk through of an example application or two?
1. document.body&amp;=0.1 really means: document.body = document.body &amp; 0.1; // which always evaluates to false since that bitwise comparison would never be true. Meaning the author wants to deliberately execute the statements within the *catch* 2. Passing with "agdsg" or any other variable name is fine because it's just a variable that references the object that "tried" but failed. We typically use "e" because it's conventionally stands for "exception". 3. e=window["e".concat("val")]; is the big evil **eval()** function. It basically takes ANY string and executes it as JavaScript (Read about that here: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/eval) And you already unpacked the array that basically directs the browser to that Russian website. The script author really wants people to go there. lol
I'll be doing a series of blog posts and working on better documentation this week. I also have a sample app (a blogging app) which I'll be adding to the repo soon. Feel free to contact me at yoav@highf.in if you have any questions when/if you get a chance to play with it. We're on Google+ and Facebook too if anyone wants to subscribe to updates. https://plus.google.com/b/103860776334708316025/103860776334708316025/posts https://www.facebook.com/Highfin
True. Though it is confusing to deliberately define an object property as undefined, might as well not define it, or just set it to null. At least its obvious that property is intentionally defined without a proper value.
upvotes for VM usage! You don't have problems deploying code from your laptop to a server until you do and it's terrible. aways use a VM
Excellent! Thanks for the response. The line: "e=window["e".concat("val")];" is pretty clever. I wonder why the author setup a trivial test inside the array? var1=49; var2=var1; if(var1==var2) Would IDS/IPS detect the window redirect otherwise?
Not sure I want to download the engine. I'm skeptical.
Oh, good, all we need is another js library. On the moon!
&gt; 1. Install Vitualbox and Vagrant VirtualBox is spelled wrong as well.
It should support testing out-of-the-box.
Yep, correct.
Yep - not sure if it's possible to get any other characters, I'd imagine there's some creative way of doing so.
Hee hee, thanks for the reminder. This comment is solid gold!
In soviet russia, site visits YOU!.
worked for me by just clicking and starting. Disabling shadows helped make things run a bit smoother
I don't want to be mean, but after reading all that I still have no idea what this is supposed to do. Who is this for? What problems does it solve and how? 
It's easy enough to grab the 1 and the PM, but are you wanting to show minutes if they're not zero? / (\d{1,2}:\d\d):\d\d (\wM)/ would grab H:MM as execResult[1] and AM/PM as execResult[2] But yeah, use Date
Why isn't there an option to disable that annoying slide effect? You don't always have to go over the top with fancy effects.
So... I see a large list of features and things but not a single code example. How exactly is this used? I could read the source but, really, who's going to bother doing that?
This is really cool! I was trying to do something really similar recently. If you don't mind me asking, how do you convert a waveform into something that you can use/analyze in the visualizer?
Neither button does anything in Chrome 25.0.1364.97 or Firefox 19.
Nice! Yeah, the bug caused some functions to traverse the whole document tree manually via getEBTN (ouch) when they shouldn't have been. Is it possible for you to share the dom tree you're using (perhaps I can use it on future projects).
I was excited to see (another) js library geared towards client side webapps with presumably everything in it. However, like others have said, it's not clear at all how to work with this library. The tools around the code are all described for a bit, but I want tot see *code*! I don't care for VMs, I don't care for syntax highlighting, I don't care where files are located. I only care about how my code will look and how this project will improve structure. If the latter part is crap, all else fails with it. Set up a wiki page with code examples, or give an overview of one concrete but simple project. After that, documentation!
Why not just use jQuery UI or the built-in Bootstrap dialogs?
&gt; It would be cool if there were an option to disable the slide effect. FTFY
So if I want to build apps for this generation, I should pick a different framework? 
I love being able to use any computer with Chrome as a simple programming environment: - Date calculations (how many days till my birthday?) - Regex manipulation - Calculator (obvious, but superior to calc.exe...) - Sorting, filtering of structured data - Data parsing and formatting (csv, json, xml, html) - Basic graphics generation (draw some text in a font on a transparent PNG) I mean... right now I could walk up to your Mom's PC, go to any log file or wikipedia page with a table, append a script tag to head with a CDN hosted jquery, query tr, then td to convert the table to a 2-dimensional array, use .map() and $.text() to get the string content of each cell, convert dates to date objects, clean up string ends and oddities with regexes, filter the table by a regex (or date range), sort it, empty &lt;body&gt;, dump my array as a json string and save it to a file.
Undefined versus what? As long as undefined and other arguments that evaluate to 'false' would branch to the same code path, just straight up and test the variable. if (x) doStuff(); If values such as zero, null, '', or false would have some other significance, then I usually go for the === approach.
from soundmanager2 documentation: eqData - Object containing two arrays of 256 floating-point (three decimal place) values from 0 to 1, the result of an FFT on the waveform data. Can be used to draw a spectrum (frequency range) graph while playing a sound. See Page-as-playlist demo for example implementation. Requires Flash 9+. A spectrum frequency graph reflects the level of frequencies being played, from left to right, low to high (i.e., 0 to 20,000 Hz.) :)
I think the game is great! I was a bit put off about the immediate push of buying "amber". Seems to be yet another "Buy to win" game. Unfortunate because I believe that otherwise, it would have flourished just nicely without that.
came here to say this, with such an immense responsibility this should be robust and fully test covered. Wish the devs all the best though, I don't see any real value in this project though then again I'm not a huge fan of these types of framework in general.
I'm with you with everything except the weak typing. Why do you love that?
Never gets past "loading" for me.
Because I've never come across a case where I expected a String and instead got a Number. Sure it can happen, but I've never had a problem with it. I also think type coercion is a wonderful thing, and useful in the right situations. Same with ASI. Some people have a hard-on for mandatory semicolons, but my coding style never causes a problem if I leave out the semicolons. It's just another annoying boilerplate thing that I've never needed. A semicolon is an insignificant thing to worry about in the scheme of things. Leaving them out does not make code any more difficult to read. Curly brackets are not optional for me though, they are mandatory. Some people leave out the curly brackets and it drives me crazy, and it does make code more difficult to read when they aren't there. 
Interesting, seems pretty pricey for what they are offering though. They do offer their platform in an open source form, that is pretty cool.
I always curly brace.. lol. At the same time, I never forget a semi-colon. I think that I worry about getting lazy and accidentally carrying that habit over to another language.
So this is a Node server with a framework already built in, so that I don't have to organize my application first to get started? Sounds good, I'll star it.
Yeah, it does make coding Java annoying when I'm used to not caring about semicolons. But I shouldn't be coding Java, I only do it when I have to get shit done and all back-end developers are unavailable.
 window.URL = window.URL || window.webkitURL; Interesting! You've put in a sizable number of commits -- makes it look like you have a whole team. :p
Agreed. I don't see the point to this.
When I wrote that it was for "next generation apps" it was just moments before this generation started... Had I known it was about to become the next generation I could have just waited.. but I digress, since there's no way for me to update the text I just want you to know that it's actually referring to this generation.
Will do FrozenCow, will do.
The node/back-end part of the framework handles certain requests specific to the front-end framework, like asking for templates, compiling LESS, caching, etc. You could use a completely different back-end technology instead of node. One of the current real-world implementations uses Django on the back-end, but if you did want to use Node, you'd want to use the node part of our framework that we provide.
See http://highf.in and scroll down to the text, there's a brief description. I will be providing better documentation, code examples, and answering your question more in depth on the site in the coming days. In the mean time the framework itself is for developers who want to build apps in Javascript. Apps like GMail or Facebook. If web developers were construction workers, HighFin.js would be a new blend of concrete that makes it much easier to build things and comes packaged with new kinds of power tools that weren't previously available. 
It certainly should and will
var result = s.split(/\s/); var hour = result[1].split(":")[0]; console.log(hour + " " + result[2]); Note: this approach will give you dd for hours.. ;)
I'm tempted to apply just because of how you intend to run this project. I have something I've started to work on that I want so much to be open and community-growing and not about capitalistic extraction. I find this inspiring, so thank you. Edit: I wanted to ask what about this project excites you the most? I didn't see the previous post and others might want to hear your enthusiasm.
Why are you using a public IP address for the vagrant vm? If you want an easy to remember one that repeats use 10.10.10.10 instead.
My job as a moderator here is to remove spam and ensure people aren't breaking the rules. Coffeescript is quite obviously javascript related even though I've got little to no interest in it myself. For the most part on reddit, it's the community's job to vote posts up/down to "say" whether or not they want to see more of that kind of content on that subreddit - NOT the moderators' job. Exceptions include strictly honed subreddits like /r/AskScience, etc. If it's getting upvoted here, people want to read it. If not, the community is doing its job by downvoting it - which will happen faster and more effectively than ANY moderator can EVER possibly do. &gt; Coffeescript has no place in modern web development, nor in r/javascript. That's for /r/javascript to decide, not for /u/leptons to decide. I get it. I looked at your comment history. You really, REALLY, REALLY !@#!@ing hate coffeescript. So much so that it feels like someone pissed in your cornflakes when you see it so much as mentioned. I mean this as politely as I can mean it: This is a personal problem of yours and nothing more. You're the only person I've seen vehemently complaining about people mentioning it here. If you disagree, I kindly suggest you check out [a search for coffeescript posts, sorted by new](http://www.reddit.com/r/javascript/search?q=coffeescript&amp;sort=new&amp;restrict_sr=on) and take note of how often posts are even made here. It's like one every few days, on average. You'll also see that they receive mixed reviews from the /r/javascript voting community. Some are &gt;0, some are &lt;0. Seems the voting system is doing its job.
Because you can't make that in 1 line with Bootstrap. You have to intercept the click, display a dialog, wire on the buttons, and onclick the "yes" button redirect to the link's href. Why not create a function for that? I don't like repeating such basic code.
Interesting, but what would the $.Deferred return in the end?
For now Bootstrap's modals are used, and that's how they work. Soon the modal/dialog system will be overridable (and even able to use the javascript confirm dialog https://github.com/myc-sense/jquery.confirm/issues/1 if Bootstrap is not included). No more dependencies.
almond.js doesn't help in this case because it's just a loader shim and can't load external dependencies.
 value.replace(/.*(\d+):\d\d:\d\d ([AP]M)/, "$1 $2")
apps like gmail and Facebook. riiiight. I'm sorry, now I can't take you serious anymore.
I was about to talk about how webkitURL is totally not necessary and then checked out canniness and yup not needed on the desktop but still needed for mobile, looks like that will make it work on a couple more places, good catch. Edit: added var URL = window.URL || window.webkitURL || self.URL; 
I used their beta, they had this very strange feature where to deploy an app you just uploaded a zipball. It's like they thought I didn't want to wrestle with the dependencies of their custom command line tool just to deploy an app, or that I didn't want to have to figure out how to get my password pushed to one remote but kept out if the history of another. It was weird.
&gt;who want to build apps in Javascript. Okay, but you still don't give any clear cut reason as to why anyone should bother with this framework. It's totally possible that this is the best framework there has ever been but with a lack of clear direction, code examples, and general documentation, it all just comes across as a heap of buzzwords.
I'd be curious to know what kind of results people are getting. Because for me it's all over the place Chrome on a quad core desktop does transferable objects 5x faster then all in one worker but Firefox Aurora on my Nexus 10 does all in one worker the fastest, despite being duel core.
Do you have any benchmarks on cpu utilization at say 30 updates per second (live video : 29.97fps). And it seems to me that if you contained this within a single exe/deb/etc installer it would make for a much wider user base.
Functions as objects, and closures are probably two of the most powerful and features of the language. They allow for wonderfully beautiful and succinct code.
just looking at the front end "fin.js" part looks like it has some good utility methods but they're all just sort of hanging off the main object. I'd like to see namespacing to group them, or a good API site. Doesn't look like there is any event handling or message passing stuff in there and sounds like the main benefit is through how templates are handled. If it's more about the templates and not modelling the data (and I don't see any routing) I'm guessing this is for enriched multiple page website rather than a javascript application. N.B. people's definition of web page vs application differs, mine is that an application is where the interaction between the user and the page is more important than the consumption of data. Though there are things that straddle between the two (like forums, or a constantly updating page of information) - I'd also put the complexity as a factor which should depend on the number of components and how they interact
This seemed to be a bug for me to, I refreshed the page and it worked using Chrome.
But I could write it in less than 78 lines (jquery.confirm.js). To be fair, your plugin includes options for customization which add to the size. I suppose it could be useful if designing a site where several confirmation dialogs are needed.
Please share this with /r/bootstrap!
Done :-)
It doesn't have to return anything. If they user clicks yes then resolve it if they click no/cancel then reject it. function myProcess(data) { return $.confirm() .then(function(){ return $.post('/myservice', data); }); myProcess({foo:'bar'}) .done(function(resp){ console.log(resp); }) .fail(function(){ alert('process failed!'); }); I've injected a "login if not logged in" step in some applications and it works beautifully by just adding another deferred in the chain.
&gt; Do you have any benchmarks on cpu utilization at say 30 updates per second (live video : 29.97fps). Nope, haven't tried rending it quickly enough, I honestly think that it doesn't needs to be (near)-real-time rendering like Conky/Samurize/Rainemeter, and here's why: Our desktops are rarely visited, if at all, and the name wallpaper (and my "innovation" to it, "smart glass") suggest that it's just a wall. No we already have our apps to do everything we need (browsing, mail, etc'), what I think Desckit needs is just display information in a cool way to make it accessible when you do visit the desktop. In my opinion, it needs to be unobtrusive, low-memory footprint (I even want to render the images on the server-side, and then send the users only the deltas, making it almost non-existing on the client-machine), and just "to be there when I need it, and not there when I don't". Do you really need your descktop rending at 30fps when you're browsing reddit? working? watching a movie? playing a game? A lot of the times I used Conky/Rainemeter/Samurize I found myself closing the app just before I launch a game, and then obviously forgetting to relaunch it when the game starts (yes, I know some are already optimized to recognize full-screen-activity and to stop updating during that time), and it seems to me that (with all due respect), Conky/Samurize/Rainemeter are missing the point a little. Also, I'm planning for it to be easily ported to Android/IOS, and there you REALLY don't want anything heavy running on your system, and plus Android already has live wallpaper to do the heavy rendering stuff.
Yeah, I like that they do that too. I'm probably going to have a go at setting it up for myself, it seems interesting, but I'd rather host it myself.
You and I have gone over this before. &gt;My job as a moderator here is to remove spam Coffeescript posts in r/javascript IS SPAM. It is when there is a subreddit for coffeescript. And no, coffeescript is not "quite obviously related to Javascript". Coffeescript is a "made up language" (jashkenas own words) that happens to compile to javascript. Giving it any place in r/javascript is equivalent to allowing people to discuss the Green Bay Packers in r/KansasCityChiefs. Javascript and Coffeescript are now competing technologies, and allowing discussions about coffeescript in r/javascript is just going to cause derision and confusion, and the discourse is not typically helpful to people reading r/javascript for javascript. No, you do not care about r/javascript, and don't pretend to as long as you allow coffeescript articles to remain in r/javascript. 
Cool! Is this actually Bootstrap specific, or just marketed as an addition?
I haven't thought about it, but I suppose it's not strictly bootstrap specific. I suppose you could just change the classes to fit your own needs (.control-group, .help-inline, etc), and it'd work just fine still. I'd be interested in knowing how it goes. :)
Awesome! Enjoy the karma that pours in from that :D
Don't care at all for reddit karma (I'm not really a regular), but maybe I get some real karma from making something at least somewhat useful to others? :)
Besides straight Javascript books, there are probably JQuery &amp; JSON books JS developers should own, and maybe even Node, Backbone or Angular books coming out soon if they aren't already.
It keeps the validation logic out of the HTML which I really like honestly - however that's personal preference more than anything. I feel that adding in proprietary/very new attributes into your forms potentially limits you if you need to transition to a different technique... With this method I still have a totally clean and simple form as all I needed to do was reference my fields by ID/name/class and impose my validation layer from there. Also being able to apply the same validation technique to multiple elements through one rule and jQuery's selection engine - mmm. Another crazy idea, I could potentially take my "metrics" array, parse it to JSON, store it on the client AND server-side and potentially share easy-to-configure validation logic...idk. Who knows.
Both are actually on purpose. The one with the credit card number was just to show the "between:x:y" and in the second I parsed along this to stop the disabling of the button. var options = { 'groupClass' : 'warning', // changing the class to warning 'disableSubmitBtn': false // not disabling the submit btn when errors exist } I didn't know about that library. Looks good though (awesome way of showing examples). Two seconds of looking around, I think the main difference is simplicity and keeping the input fields clean and free of validation code. This seems to be less of a problem for other frontenders than for me, but I personally prefer keeping the fields clear of validation code. I must say he has a very unobtrusive way of dealing with it though :-) Honestly I don't know where to take it. I wrote it partially to learn me a CoffeeScript and because a friend of mine need something to replace livevalidation in a project he's working on. I'm completely open for suggestions. Two things I see is, one, to make it 100% not tied to bootstrap (that would definitely set it apart), and second, to support the sort of unobtrusiveness that jqBootstrap Validation has. :-) Thanks for your comment!
Highly recommend you checking out **[Javascript Patterns by Stoyan Stefanov](http://shop.oreilly.com/product/9780596806767.do)**. Another good one is to read **[Learning JavaScript Design Patterns by Addy Osmani](http://shop.oreilly.com/product/0636920025832.do)**. And some good all-round info on JavaScript **[JavaScript: The Good Parts by Douglas Crockford](http://shop.oreilly.com/product/9780596517748.do)**.
How about [Object Oriented JavaScript by Stoyan Stefanov](http://www.amazon.com/Object-Oriented-JavaScript-high-quality-applications-libraries/dp/1847194141) ? I think its place should be somewhere in the top 3.
Awesome indeed! I'll look into adding that
yawn. you've clearly been attacked in the night by a coffeescripter and still can't get over it. some day, I hope you'll understand that your opinion isn't the only opinion in the world. have a good day.
I would suggest * [Pure MVC](http://www.PureMVC.org) * [Qooxdoo](http://www.Qooxdoo.org) Qooxdoo has been around a long time and very little of what is new is actually better. And once you are familiar with it, you will see the limitations in most of the newer things and also have a good feel for MVC... true MVC... where the view is updated as soon as the model changes.
No problem. I've been dealing with some validation headaches of my own at work. Unfortunately nobody wants to get on board with bootstrap. Although I think for some projects, this method of validation is outstanding, I've been using knockoutjs and so I keep the validation logic separated from the UI and extend my observables to do the validation on that field. The part I would want to integrate in with something like this or the jqBootstrap Validation is the displaying of error messages but Bootstrap does that on its own already. I guess where you could head next with it is integrating it with other frameworks like knockoutjs, underscore, backbone, etc... to do the validation logic there and utilize bootstrap for displaying the errors. That's usually what I end up doing is creating a bunch of customBindings for knockoutjs to render things like this. Anyways, great project to have under your belt if nothing else. It definitely has potential.
very cool app :)
Any karma you get from /r/bootstrap is usually given out of gratitude. I moderate the sub, so I keep an eye out for stuff that could be useful for the community. Rather than cross-post myself, I ask the OP to share with us, and reap the benefits.
The transferrable objects for me (i7 laptop with Chrome) were about 2.5x faster. Only the map/reduce option didn't cause a stutter in the animation however. I suspect that has more to do with the DOM rendering of the results tables than anything else.
&gt;you've clearly been attacked in the night by a coffeescripter and still can't get over it. You're making up nonsense to try to make me look foolish, and that is fucked up. You haven't addressed the point I was trying to make at all and instead try to mock me. Fuck you. some day, I hope r/javascript will get the mods it deserves.
Chrome is free and open source. http://www.chromium.org/Home chrome://bookmarks And it syncs between devices: laptops, phones, tablets, iOS, Android, windows, linux, os x.
I have zero experience with knockout, but I suppose this is as good as any opportunity to have a closer look at it :) I like to keep dependencies low, so I think I might actually go with detaching it from bootstrap first and foremost (defaults would still be working in a bootstrap env. of course). And adding blatant oversights on my part, such as regex validation.
It's necessary for Safari too.
Truth
Yeah this was originally just about transferring not the dom, i should probably have it give a button to render
That is a great book - I recommend it all the time.