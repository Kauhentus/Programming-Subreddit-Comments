Assigning onclick and addEventListener("click", fn) are two different things. "onclick" is the same as assigning the onclick attribute of the element, not addEventListener: img_obj.onclick = function() { showDetails(this); return false; } This allows for only one event to occur. When you return false, there's a special magic behavior that the hyperlinking (default behavior) will be stopped. Using addEventListener you'll add a callback function to a series of other callback functions. I'd recommend you to keep using addEventListener and use .preventDefault() because it better conveys the intent of the code. Just returning false is pretty much magic behavior, it looks like a hack.
Thanks, that's the explanation I was looking for. In my test wich resulted in **EDIT 2** I left out the *function(){}* part. 
Maybe because it shows for a few basic concepts to be used. Input, add objects, delete objects?
Because they're a simple example. The point isn't too show off how cool the actual app you're making is, it's to show how cool the tool you're using to do so. Things close to real world stuff, a simple example do not make. Also, stop whinging, come up with a better example yourself.
Also, return false will trigger event.stopPropagation() as well, IIRC
At quick glance I'm guessing because of the `// hide neighboring menus`
1. Why are you using jQuery when you barely understand JavaScript? That's a bad idea. 2. Look up how block comments work.
And that's the exact problem, the "oh, look how easy and clean this is" type of presentation, while building the most trivial application possibly. It's pointless at best and misleading at worst.
Thanks. I knew it had to be a 'missing one cup of coffee today' sort of error. Put that in right place, all works now.
Thanks!
Here, get familiar with [this](https://www.owasp.org/index.php/SQL_Injection). The part I quoted is a proposal to create the easiest SQLi vulnerability of all time. &gt;How exactly is someone going to gain access to your server and modify the html files on it? One wouldn't have to do that. You can fire up the MySQL client and connect to the remote DB with the credentials you found on the page source, or you can save the page, edit the SQL queries in the HTML, and open the local file in your browser. That's what "client-side" means: your pages and scripts are being downloaded, potentially altered, and parsed on a computer under someone else's control. If you haven't learned it already, you're learning it now: never trust the client.
How do you propose the client authenticate with the database in order to run the SQL query, then?
Thank you for your input.... in my searching around for a good toolset, I have been seeing quite a bit of Karma and PhantomJS(along with somethign else) being used. I have set up PhantomJS and started playing with the basic capabilities. Fun stuff!
These are really good options for learning about JavaScript patterns. I am a big fan of D3 and THREE.js myself. Two very different code bases. I wanted to mention also, to continue to learn, you should consider getting a Github account (if you don't already) and "watch" whatever open source repos interest you. It's a great way to see the discussions people are having about where the library is going, debates about the API, make your own contributions etc. I found this really helpful when i was getting started. https://help.github.com/articles/watching-repositories/
I think a lot of good explanations were explored in this thread: http://stackoverflow.com/questions/1357118/event-preventdefault-vs-return-false
You're right that I took the quote out of context; the only instance of "database" in the OP is preceded by "local". A more careful reading shows that the author didn't intend to have exposed remote databases being queried by clients. Re: your edit &gt;The server parses the HTML page, if it finds any SQL statements it would then connect to the database using the passwords stored privately on the server, then it would populate the HTML page with the returned data, and then serve the page to the client. So "HTML6" is partially reinventing PHP.
Events have a couple basic components; Being cancelable (not all are) and bubbling. Easy way to think about things: return false and onclick (content attribute) are deprecated; End of story, pretty easy. preventDefault, stopPropagation, and stopImmediatePropagation are _explicit_ means with which to handle these decisions. addEventListener allows you to safely bind (even multiple listeners) to objects without worrying about _overriding_ someone elses handler.
Partly b/c of the popularity of http://todomvc.com/
Do you pull in the DOM with another tool?
Nice, thanks!
I am creating a music catalogue where the user enter any song details they prefer in the form textbox and then save the details. In addition I am trying still trying to create array which can store all the song details.I would like the user enter their song details each form textboxes and save.After they save i would also like to store all the song details in the Music Library textarea box showing the all song details which were entered before.Stuck.I am happy to explain again :) thanks in advance.Code in jsfiddle.
Add a demo!
You're welcome. I'm not aware of any services for that. A friend is free! Also, my point was to introduce the *problem* that these technologies are trying to solve before introducing the technologies themselves.
Interesting project, could become an alternative to my favourite, JSBin. That said, it would be great if you'd provide HTTPS and a way to embed both HTTP and full HTTPS (so only HTTPS resources!) playgrounds, just like JSBin or JSFiddle does. I really do not like the tabs that lets you switch between CSS, HTML and JS. I'd prefer to be forced to explicitly click on a tab, the hovering is interesting but a bit annoying if you do it accidentally. If you try to load a script with an invalid MIME type (e.g. `text/plain` instead of `application/javascript`, what happens if you accidentally do not use `rawgit.com` but `raw.githubusercontent.com`), the script fails and throws you some errors. Lastly, you definitely should remove commented code from production scripts and minify them, e.g. `all.js` lines 1915 - 1948. Btw, the site crashes quite often in Chrome here.
Good catch! I forgot to reenable uglify. Thanks for you inputs. I'm working on HTTPS and embedding features. They will be available soon. Not sure why but it doesn't crash on my Chrome 41.
Cool article, although I don't know if I'd call it machine learning. You're not really training the program to understand a domain better. Inverted indexes are a pretty hot topic though. The last I checked, Lucene (or at least Solr) was still using a custom TF-IDF for scoring, so Okapi BM25 is new to me. I wonder what the performance comparisons are. ElasticSearch really needs to figure out what their goal is, Analytics or Search... If you're doing a part 2, you may want to consider term vectors and term distance. How do multiple terms make a score higher or lower? Are terms distant from each other given a certain document? For instance, given a user searched for "Fizz Buzz", and one document contains terms "Fizz Buzz" and second document has "Fizz FizzBuzz Buzz". Obviously, "Fizz Buzz" is the perfect match so it ranks higher. Also, what is the best way for term lookup? Finite state machines? Tries? Dictionary prefix? I've worked with Lucene a bit ;P
You're right -- full-text search isn't an ML problem (which is why I left ML out of the Reddit title), this article is just part of my ML series so it inherits the title. Lucene uses a custom TF-IDF by default, but you can actually tell it to [use BM25 instead](https://lucene.apache.org/core/4_0_0/core/org/apache/lucene/search/similarities/BM25Similarity.html). Same with ES and Solr. Performance should have the same complexity (ie, same degree), since BM25 just adds a few constants and doesn't require any more analysis than TF-IDF does. Term distance will definitely have an appearance in part two! One of those simple concepts that _really_ affects search relevance, so there's no way I could write a "Part Two: Improvements" without it! And as an aside, the real issue with ES is that it's good at both. Originally it was search, of course, but then everyone realized that because of how ES handles indices (relatively cheap to create; merge operations; compacting; and archiving), it's really good at time-series too. You can make an index for every day, or every week, only deal with the merge overhead for your live set, archive your historical data, compact it, but still be able to search it at lightning speed. Kind of how viagra was originally invented for heart attacks. And now ES has a weird marketing problem, they're too flexible and trying to be an end-to-end suite that newcomers have a hard time understanding. For bag-of-words term lookup you can't beat O(1) hashtable. For vectorized term lookup it depends on the length of your document and the ratio of the doc length to the search term length -- sometimes an algorithm like Boyer-Moore will kick the pants off of everything else. Thanks for reading (and commenting!) 
So you don't need to do `if (obj &amp;&amp; obj.a &amp;&amp; obj.a.b &amp;&amp; obj.a.b.c &amp;&amp; obj.a.b.c.d)` ...
The jQuery append function returns the #messages element doesn't it? So then you're setting the text (content) of #messages to "user is typing"? I don't think there is an element with "usertyping" class at all, there's just the #messages element with the text. So $(".usertyping") doesn't find anything and doesn't remove anything. You should also consider just showing and hiding the element as that would be less expensive than recreating it, adding it and removing it all the time.
Thanks I appreciate.When I click to save its not showing any song details that were entered before in each input text boxes, in the library text area box when I save. :) 
Hi /u/p0larboy, it looks like you're new to /r/javascript, welcome! Thanks for the submissions, but please make sure you read our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `colintoh.com`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [colintoh.com](/search?q=%28and+site%3A%27colintoh.com%27+author%3A%27p0larboy%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new)|26|48%
Hey, I have updated the code as you suggested. Checkout the demo @ http://bitwiser.in/medium-style-confirm/ and code @ https://github.com/brijeshb42/medium-style-confirm
`.text("user is typing")` is called on the newly created `$("&lt;li class='usertyping'&gt;")` and then *that* is appended to `#messages`.
Thank you for your detailed explanation. It worked.
I can always count on you to get defensive about angular
Here's a similar kind of post, from a Rails developer perspective: www.developingandrails.com/2015/01/crash-course-on-modern-web-development.html
I think most browsers won't reload the image if you set the image src to the same value that it was already (the fallback image URL). So no. Unless of course you changed the fallback URL every time the fallback fails to load.
Just without jQuery and per-image configurable replacements it seems.
Host the js yourself?
I was wondering if there would be a ore lightweight approach to it since I'm not likely to use the full potential of the library. How do I host it myself though?
Have you tried jsonpath?
String.prototype.split does what you are asking for. "I use Google".split(" ") // [ "I", "use", "Google" ] See: http://www.w3schools.com/jsref/jsref_split.asp https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split https://msdn.microsoft.com/en-us/library/ie/t5az126b(v=vs.94).aspx
It also works with a regular expression for the separator :)
&gt;The javaScript split does something else but is there one that does the above? The best resource for JavaScript documentation is MDN, and you want their article on [String.prototype.split](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) We see that it does exactly what you want: *The split() method splits a String object into an array of strings by separating the string into substrings.* If you want to split all the words as in a string, you could separate on the space, doing something like: &gt; "separate me by spaces.".split(" "); &lt; ["separate", "me", "by", "spaces."] If you don't pass in anything to split, it won't split at all (no delimiter, no default). But here's a bonus trick for you: split a string into an array of "characters" by passing in an empty string (technically in JavaScript they're single-letter long strings, not a unique data type). &gt; "separate me by letters.".split(""); &lt; ["s", "e", "p", "a", "r", "a", "t", "e", " ", "m", "e", " ", "b", "y", " ", "l", "e", "t", "t", "e", "r", "s", "."]
I thought you were talking about the python2 vs python3 community split.
Can't access site on chrome. 
I am not married to Jasmine as a tool. I had a small amount of exposure to Jasmine previously, which is probably why I initially used it to put together a small demo. Lame reason, I know... but I wanted to try it out as well, so I took a super small project I already did and added Jasmine. When I present this, I will mention mocha and qunit, but one of my main hopes is to begin the discussion and show how familiar it should be to anybody that already writes unit tests. HOPEFULLY, it will end up being a discussion on whether we want to use mocha or jasmine in our standard toolset. That means I will have helped pushed us into js unit testing. :) 
Great feedback - I just hoisted the outline where I talk about what is to come in the post to the top.
Actually, this was all about using "Java-like" as a bad word. Java has some downsides, but it's not like you'd inherit all of those just because you support the `class` and `import` keywords and maybe also *optional* types and metadata annotations. ES6, TypeScript, and Dart are a big improvement over the supposedly not Java-like ES5. The secondary purpose of my comment and this comment is pitching optionally typed languages. I really like optional types, because you get lots of bang for the buck. With increased adoption, it becomes more likely that future versions of JavaScript will support optional types, too.
People always ask for a more in depth example, but I don't think enough people on either side want that. For the people writing it, going more in depth spirals out of control pretty quickly in terms of code/explanation. It's a lot of work to do, especially given: For the people reading it, going more in depth can be off putting. Opening an article that's a full day of reading and poring through code is way more than the "taste" most people want. That said, I'd love to see more emphasis on well documented (real) public projects. Also, something simple that *isn't* a todo app would be refreshing. 
and node.js vs io.js 
Just add "mdn" to your search terms. E.g.: mdn split -&gt; https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split
Hi wittnl, that bug should be fixed now. I recommend using Chrome/Safari for now until it's tested for other platforms.
You could be reading some response data from a service that may or may not have certain members set
I went into this article with an open mind, I even continued to read the whole thing even after the opening sentence, "Maybe you don't need gulp, or grunt, or whatever." rang alarm bells for me. I think the author makes a good point that NPM can achieve some of the more script/build related tasks that Gulp or Grunt can do, but honestly, you'll still need a task runner if you're building a modern SPA/Javascript heavy application. Take for example my latest project written in Aurelia Javascript Framework. It has script files, it has stylesheets, it has images and it has view templates. Now NPM could handle the script stuff, but what about the stylesheets, my images and view templates? NPM is not a task runner, therefore it cannot do other tasks like: minification, combining, directory globbing, ability to parse HTML/view files and inject/replace their contents, ability to run Autoprefixer over my CSS, use a Stylus or Sass parser, etc. Sure, you could probably use NPM for some things and Gulp for others, but honestly, why bother with two different tools with two different sets of commands when Gulp (or whatever task tool you use) can achieve everything you need? Considering NPM is the most popular package management choice for developers, I would say that people definitely are giving it a chance. It has very set use cases though, you can't use it for everything.
This and other interesting proposals will be discussed at tomorrows TC39 meeting: https://github.com/tc39/agendas/blob/master/2015/03.md
And here it is http://jqueryuk.com/2015/videos.php?s=devtools-state-of-the-union
&gt; Motivation &gt; &gt; [TODO] As in, "let's just throw things into JavaScript, for no reason, just because we can".
Chrome: https://sc-cdn.scaleengine.net/i/eb58cea12d63c8fb2d7ce8b9aca2cbc0.png 
It does. This proposal is basically Python style annotations where the thing being decorated/annotated is pulled through the decorator function at runtime. The rest is syntax to make this look nice. 
Go for https://angular.io/ I wouldn't start learning Angular 1.x it will be phased out soon. 
Yes, obviously the object graph may or may not be filled. That has nothing to do with the example, where the particular component inspecting values is traversing four levels deep in a hardcoded path. It's a bad smell to have that many null checks on a tree in one if condition. You're clearly only interested in a leaf, and only tangentally care about the branches to get you to the leaf? When you're inspecting obj.a.b.c.d - which is fairly deep in a graph - you should have a component that has knowledge of c, without having knowlege of the entire graph. A "c" model, for instance. The point is, you really never should see "b is undefined" with the statement obj.a.b.c.d - because you really should not find yourself diving that deep with in one statement. It would stand out to me that your code is not sufficiently modular for the domain you're working with.
It will only be phased out if the majority switches to 2.x. If the community stays with 1.x, they will keep it. It was told on ng-conf 3 weeks ago.
Your point makes sense: one component shouldn't inspect the whole object. 
Wow, that's bad :) There's a reason they want to switch to 2.0, it's admitted they just thrown shit on the wall to see what sticks, that became Angular 1. On the other hand I understand them to follow the community, but abandoning 2.0 would be the massive hit in the reputation. It really feels they will fall between two chairs.
They said they will migrate a rather big google project from 1 to 2 very soon to see if the path they chose with 2.0 is something you want to work with.
They won't abandon 2.0, "they will keep it" means that there will also be new Versions of 1.x. For now they "hired" new people that develop the 1.x branch and the core team works on angular 2.
Paul Irish has a [pretty awesome screen cast]( https://youtu.be/i_qE1iAmjFg ) on the jQuery source.
Here is a small demo of how it us supposed to work: https://youtu.be/Mg_y-Y3_aT4
[**@reactjs**](https://twitter.com/reactjs): &gt;[2015-03-22 22:44:31 UTC](https://twitter.com/reactjs/status/579775692197384193) &gt;Excited for [#f8](https://twitter.com/search?q=%23f8)? &gt; &gt;Eng Dir [@dmwlff](https://twitter.com/dmwlff), Relay's [@jingc](https://twitter.com/jingc) and React's [@tomocchino](https://twitter.com/tomocchino) hit the stage this Thursday, 12 PDT. &gt; &gt;Don't miss it. ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/300cmk%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](http://np.reddit.com/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
[This is the best angular tutorial I've seen](https://www.airpair.com/angularjs/posts/angularjs-tutorial). It's really long (hence comprehensive in the title) but it covers pretty much all the major criteria in Angular. It's worth taking a weekend to go through it.
Nice. I like it. I will likely integrate this into my next project. Thanks!
http://en.wikipedia.org/wiki/JavaScript#/media/File:Unofficial_JavaScript_logo_2.svg
I completely disagree that someone should wait. The most drastic difference I've seen between 1.x and 2.0 is in the HTML markup (aka directives). It's different, but ultimately accomplishes the same thing. Beyond directives many of the other concepts are nearly the same and worth learning. Plus, just because 2.0 comes out doesn't mean 1.X is now completely useless. 1.X has a huge, established user base, lots of community support, and in general tons of useful resources.
Add the ability to submit links to reddit while the icon is grey. 
Why?
Chris Williams, who runs JSConf and all the other amazing community confs created it! 
It's also not a bad thing to learn 1.x even if you move to 2.0 immediately because you get a chance to understand some of the reasons behind the changes. It's good to keep up with how projects like this evolve.
Don't ask me, I am not the author. I wouldn't even use it nor I know about any realistic use case.
Is there a more recent in-browser real time REPL?
How are you inferring this from that tweet?
is there really nothing more about React Native official release date, other than speculation like this?
[egghead.io](https://egghead.io/technologies/angularjs) is a great resource to learn Angular.
npm will never use another format and will never support comments in json (since every issue posted on github about this gets closed). You are stuck with `"//": "comments like this...",`
[**@reactjs**](https://twitter.com/reactjs/) &gt; [2015-02-19 18:13 UTC](https://twitter.com/reactjs/status/568473375376433152) &gt; @blackjable "weeks" ;) ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://www.np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
Just wrote this below below... [If you consider this tweet](https://twitter.com/reactjs/status/568473375376433152) posted four weeks ago which says they'll release it in "weeks" it makes sense. 
https://www.youtube.com/watch?v=4UEP2Mv8MJ0 This is fixed now :)
but isn't angular 2.x more optimized than 1.x? i think since it is also build up on typescript, it will be scalable too...anyways lets wait and watch.
How haven't you already come up with... for (var y=0; y &lt; board.length; y++) { for (var x = 0; x &lt; board[y].length; x++) { // whatever you want to do with board[y][x] } } ?
Breaks on mobile too
If you know the coordinates where you want to position the "marker" (I would assume you do) you can just use absolute positioning. You would have to wrap the img tag in a container with position:relative, though, since img elements shouldn't have anything nested within them.
This would've saved me a lot of time back when I first started with Backbone, though some of the libraries didn't exist then. I highly recommend using boilerplate like this if you're going with Backbone.
It's BSD-licensed, right? What's wrong with it?
Hmm... Yes, I agree that using single letter names could be problematic. Using `$` or `_` is better because they will unlikely be used as local variables. Using `s` is even worse than `o` or `c` imo since `s` is often used as a local variable for strings. I will keep `o` and `c` in the global namespace for now, but may have to change that later on.
you are right. will change that in the next version.
God I hope so. I've been holding off on starting an app waiting for React Native to come out.
Do you have a tutorial on how to do this? 
I learned by reading the introduction and just the docs for every API. I am by no means an expert but I could perfectly create tutorials for different elements as I learn to use them. Is there a lack of good tutorials for add-on programing?
&gt; Apparently that's the idiomatic way for npm Crazy, right?
Awesome. thx!
Only for not user initiated scrolling, right? https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior
As an alternative to eval, you can use the function constructor, which basically does the same thing, except it looks less 'evil'. Example: var userCode = "alert('hello world!');"; var userClosure = new Function(userCode); try { userClosure(); // do other things here... } catch(e) { console.log(e); }
There was a great userscript a few years ago that solved the captchas on Rapidshare using Neural nets. Even with the javascript engines we had years ago, it was pretty quick and wicked awesome.
Good to know, I'll check it out!
I don't remember if this is the correct episode, I think it is: http://shoptalkshow.com/episodes/090-pamela-fox/ But there was an episode of Shop Talk Show where they ask how this was done on KhanAcademy. From what I remember, they send the code to a sandboxed server, parse it, run it, and return the output. I think some of the challenges brought up were how they make helpful error messages for the student.
Nice concept indeed, but totally redundant. If you don't like your kerning, edit your font file. And you are still dependant on the platform font rendered. Don't get me started on the performance impact.
Someone with hammer is looking for nails ;-)
Why not? How is this any different than the user opening up the browser dev tools and setting breakpoints or modifying functions? Edit: Assuming you are not opening up a XSS vulnerability but just executing code that's in an input.
This one: https://github.com/asvd/jailed
@jcready is still right - `this` resolves to the global object (`window` for browsers) when called in an anonymous function unless you `use strict;`, no matter what you set for `scope`.
Because you never know what kind of new vulnerabilities will pop up.
Can you provide more details regarding your question? If you are asking about using of this API, it might be used: 1) From CSS (then when you invoke scrolling from JavaScript (e.g. scrollTo/scrollTo) or browser scrolls to #anchor- smooth scroll will applied); 2) From JS as "behavior" parameter for scroll functions. It doesn't change scrolling behavior for the user. And it's good because users usually expect their scroll has the same behavior for all the pages.
Finally a sane explanation of Flux. I struggled understanding the concept of Flux for a while, I felt really stupid. Then one day after deciding to look through code instead of trying to decipher Facebook's computer-science laden explanation on the official Flux site, I realised it was essentially a pub/sub system, except events are broadcasted globally and not through specific channels. This is a great explanation of the architecture, with good examples. I think Facebook need to revisit their official explanation of Flux because it is confusing as heck (at least for me).
Perfect timing - I was just about to start building my stores, after putting together the components and dispatcher based on the ToDo app example. This is a handy, practical step through everything. Main step I did differently was, rather than just copying the dispatcher into my source, I installed as: npm install flux --save-dev Then just require the out-of-box dispatcher like so: var Dispatcher = require('flux').Dispatcher;
I see that now. Dang! 
Do they have an issue with jasmine specifically or is it just unit testing in general? Most people weren't unit testing js early on but the progression went qunit &gt; jasmine (hey this bdd thing is pretty awesome and can be done so beautifully with js) &gt; now mocha. That being said, jasmine is still a viable option but since they are similar in intent I think you can just as safely count mocha projects as well. So who is using it? Everyone testing their js. but what is far more important is: if they are making the argument it won't work with your code base they are literally saying your code is untestable. That's synonymous with "it's bad". That should be the main concern and it's great you're fighting the good fight on that one. Pick one and get the code base in a state where it can be tested apart from the dom and with the dom with end to end tests regardless of which testing framework you use because even plain old qunit is better than nothing.
Your fear is misguided. True, Javascript code on a web page should be sandboxed, but *only* if you want to allow it to run in other people's browser. People can run *any* Javascript code they want *in their own browser*, that is totally irrelevant. After all you can run any code you like in Firebug in Firefox, or the equivalent tool in other browsers. It's other people's browsers that need to be protected. For example, if you allow embedding of Javascript in a webpage in a CMS.
They are, which is why [browsers turned off browser bar javascript](https://support.mozilla.org/en-US/questions/917723), and why [Facebook takes efforts to try and disable developer tools](http://stackoverflow.com/questions/21692646/how-does-facebook-disable-the-browsers-integrated-developer-tools). Obviously if it's just a static web page there's no real risk, but when things start getting passed around, you log into an account, share snippets of code, that's when things start getting scary. You are right when you say when you're not obviously executing XSS, but if you are passing around a page stored with it, you can very easily be passing around a stored XSS.
I spent a few minutes trying to find an algorithm to do this and couldn't find one that was accurate in JS (I copied a C one and converted it but got 3.1412####(gibberish)). I suppose it doesn't really matter at all since the graphic would look almost identical even if I threw random numbers at it, but come on -- Accuracy!! :)
I ran across a Github repo last week that provided a safe way to allow users to run Javascript code. From what I remember, it essentially treated everything as strings and manually parsed and executed a safe subset of Javascript commands. I can't remember the darn name though. EDIT Filtrex is the name Here it is: https://github.com/joewalnes/filtrex It has a pretty limited subset of functions, but you could easily (carefully) add your own to do a huge variety of things.
I had a security alert from chrome and it wouldn't let me access the website. I thought the owner of the site would like to know that. I was getting the unsafe secuirty certifate error (http://vanadiumdesign.ca/wp-content/uploads/image21.png) except with a 2015 skin on the warning, not like the photo. Seems to load the site fine now. 
As I said, I tried to be objective. Personally I fell out of love with AngularJS after it dropped IE8 support and the entire 2.0 debacle started. I switched to React a year ago and haven't looked back so far. I'm still maintaining an AngularJS project, but I've been thinking about switching it over to React to eliminate some of its major pain points, if only I had the time to do so. With that out of the way, I haven't had a look at Aurelia, yet, no. As far as I can tell, it hasn't picked up significant traction (relative to AngularJS itself), so I don't see a good reason to get invested unless you're already doing AngularJS. Definitely worth a try, though, but that goes for any (meta-)framework and library out there anyway. Actually, I've only heard of DurandalJS (which seems to be Aurelia's non-AngularJS predecessor) via mentions in "top N JavaScript frameworks" type lists, so I'm not convinced Aurelia is particularly exciting. Whatever happened to Ionic? Or is that just for mobile?
FWIW, if you do care about IE, be cautious about AngularJS to begin with. They seem to follow Google's browser support model rather closely, so don't expect any long-term support of oldIE. If how they handled dropping IE8 support is representative at all, don't expect any advance notice either. Not that AngularJS 2 doesn't already presume you're using HTTP/2 and ES2015/ES.next anyway (and thus wasn't built with support of existing, let alone legacy, browsers in mind). If you can give the finger to anyone not on the latest browser (or at least not on end-of-life'd browsers), all the more power to you. But I would have appreciated being told in advance that AngularJS doesn't care about legacy support.
I have found that using typed arrays can help make the code run a lot faster. I've also found that OO code helps readability and make it easier to debug. One approach is to use OOP to wrap a typed array, get it to work, and then change the uses of get/set function calls to directly reference the typed array. Having the game state represented in a part of a large typed array could allow the copying to be done within that same array, meaning that memory would not need to be allocated and deallocated while this gets repeated. You'd also get speed improvements by using C++ addons within node.
Ugh my bad :/ Here you go! https://jsfiddle.net/k17o18gv/
Not sure why you got downvoted, but I'd like to elaborate on what you said. React *is* the new hotness. Most of that is just the afterburn from the hype surrounding ReactConf and the announcement of React Native, but it's definitely registering. There's also the general "virtual DOM" spin-off hype other libraries have tried to tap into (e.g. Mithril, or even Ember and some gossip about AngularJS 2). AngularJS is *still* hot. It seems to have reached the required level of hype to propel itself indefinitely (for now), occasionally fuelled by new details about AngularJS 2 and the odd 1.x update. It's kinda like MongoDB after the early hype blew over and people started poking holes in it. If you're looking at the market right now, it's the best possible moment to get hired (or land a project) with AngularJS 1. But market saturation is catching up and new competing platforms are popping up left and right. AngularJS 2 isn't ready for prime-time yet (by design) and AngularJS 1 is quickly running out of exciting features to capture developers' attention. If you're only getting started with JS right now, there's a good chance learning AngularJS 1 will mean you won't be fluent before AngularJS 2 overshadows it or next year's mass hysteria has replaced it altogether. But there's also a good chance AngularJS will stick around as this generation's jQuery for the next couple of years while its users will slowly migrate from AngularJS 1 to 2 as the features it is based on gain marketshare (i.e. as browsers are updated). I wouldn't recommend dedicating yourself to AngularJS if you start off right now based on that. Take one step at a time and pick whatever framework or library feels promising at each moment. You'll likely be wrong, but it doesn't hurt to have learned more than one approach. Unless you're desperate; then just go for AngularJS and jQuery and pray for the best.
well on this line: `document.getElementById("time").innerHTML = currentHours+":"+currentMinutes;` you are referencing two variables that don't exist: `currentHours` and `currentMinutes` 
that is some __hard_to_read_ __code_
I can explain. What was unclear? :-)
Also if you open up the console (cmd (or ctrl) + option + j) you will see that the function is undefined. To get it to work I just attached it to the window object: `window.updateClock = function`
*Well, actually*... Filtrex is not a filter that "provides a safe way to run JavaScript code.” It is a parser for a language that happens to look like JavaScript, but isn’t JavaScript, and it happens to compile that language to JavaScript, but that is an implementation detail. *If* the OP wants an expression engine, Filtrex is far superior to executing JavaScript code, I agree. But as described, the OP wants to execute JavaScript code, and Filtrex doesn’t do that at all.
Ugh yep I forgot to rename my variables. I updated [here](https://jsfiddle.net/k17o18gv/1/) but why exactly doesn't it still work? And what do you mean that the function isn't defined? Isn't it defined because I.. made it? lol
glad internet_jones told you about the selector, I forgot to mention that. There is also a syntax error. One of those curly braces should not be there.
Glad somebody mentioned the selector, sorry I forgot to mention that. there is also an extra curly brace.
&gt; it looks less 'evil' Quoted for emphasis. It looks better, but it still does the exact same thing, and suffers the exact same vulnerabilities. Of course, sometimes you just have to allow eval/new Function. So just be careful.
Yep, thanks man. I got it working. I added another ternary operator to add a zero before the hour if the hour is less than 10. I have another question though- I want to make the minutes a different color than the hour, but I'm not sure how to do that without splitting the minutes and hours into separate elements. [Here's what I'm *roughly* trying to replicate](http://i.imgur.com/ED7LPyM.jpg). 
Douglas Crockford worked on a project called [ADsafe](http://www.adsafe.org/) which aims to create a safe way to allow third-party script execution. It works by restricting what you're allowed to use (e.g. you can't use 'this').
yes, just put the minutes in a span add a class to it and throw it in the dom!
Add another for loop inside the one you have that iterates j=0; j &lt; tally.length; j++ The rest should be straightforward.
A premature optimization is an optimization that you don't know you need to make. Optimization in general is still important. It sounds like you've thought this through and you think using TypedArrays is more reasonable. I say, go for it :) I would start with the easiest-possible prototype just to figure out the abstractions you need, though, and plan on a rewriting it.
thank you. I was always curious as to where it was from.
There are (at least) two concerns with user code: 1) Sharing. If the user code is stored on your server and then run in another users client that is an obvious vulnerability. Most sand-boxing is not going to help unless you run in an iframe in another (safe) domain. You can also try an interpreter like https://github.com/NeilFraser/JS-Interpreter if you don't need to run in "real" javascript. 2) Bad code. Bad user generated code can freeze the browser. This may not be so bad as they can only freeze their own browser. In this case I would suggest looking at https://github.com/codecombat/aether . It turns js code into a state machine that can be watched and interrupted after... say 20,000 commands. It also has the added advantage that is does (or should) work with other languages like CoffeeScript. It makes an attempt to sandbox the code but the documentation says sandboxing is incomplete. It has many other nice features too. I am using codecombat/aether in my project: https://github.com/Hypercubed/Epsilon-Prime
Any one else here remember smooth scroll in DOS? 
You need to rethink your data structure. You see how you have all candidates in `candidates`, but then you also have all those names in `tally`. This is duplication in how you are storing your data, and is not good. Also, you yourself have noticed the duplication in the `for` statement you created, and its great that this set off alarm bells for you. Where you see lots of duplication there generally easier and better ways of doing things. var candidates = { "Alice" : 0, "Brad" : 0, "Cai" : 0, "Deri" : 0, }; var votes = ["Brad", "Deri", "Cai", "Cai", "Alice", "Alice", "Deri", "Brad", "Alice", "Alice", "Cai"]; for (i = 0; i &lt; votes.length; i++) { if(candidates.hasOwnProperty(votes[i])) { candidates[votes[i]]++; } } console.log(candidates); What I've done here is change your first array of `candidates` to an object. This allows me to store all the candidate names, and store their associated vote tally. In fact you could even store other things about using a slight modification of this method, let me know if you'd like me to elaborate. Think about how you would want to use the data you get in the end. You would probably want to list it out and you could maybe make a table with the candidate name, and then their vote tally. But surely at some stage you'd want to be able to find out how many votes "Brad" got, and that wouldn't be possible in your model without looping through the `tally` array to find "Brad". In my example, you can simply use `candidates['Brad']` (or `candidates.Brad` since "brad" is a valid var name, just be careful, what happens if you had a candidate with the name "Mary-Anne"? You'd have to use `candidates['Mary-Anne']`). Also think about how everything fits together semantically. That is, what makes the most sense in terms of how you represent the real world scenario in your model (the way you organise and store your data, eg using an array of objects, or simply one object etc). So a candidates vote only belongs to them. Without the candidate their specific vote is essentially meaningless, right? So since it belongs to that candidate and its no use without it, it makes sense to have it tied to that candidate like in my example. Let me know if you have any questions. EDITs1,2,3; Adding details.
I'd suggest the following, separation of concerns: var count = function(xs) { return xs.reduce(function(acc, x) { acc[x] = (acc[x] || 0) + 1 return acc },{}) } var voteCount = count(votes) var tally = candidates.map(function(name) { return { name: name, votes: voteCount[name] || 0 } })
For a second, I misread the title and thought Sublime was going open-source.
Maybe it shows how close to random the digits of pi can be with this visualization.
If you use eval like this, your best bet is to assume that there will be an XSS vulnerability and instead try to mitigate it. The easiest way is to put your site on a domain that has no resources an attacker could want: no logins, no credentials, no cookies, no secret information, nothing important on the sever, etc.
Basically people keep spouting this off about the BSD-licensed when they are off base and not informed about it. It is perfectly fine to use React commercially. If you try to build a facebook competitor, then you can't use their code, it's pretty straight forward. They aren't out to sue everyone...
Right in the temple. 
Huh? Try something like: document.getElementById('minutesspan').innerText = ('0' + t.getMinutes()).slice(-2):
Thanks a lot. It's not optimal but its what i needed for this.
&gt;Having the game state represented in a part of a large typed array could allow the copying to be done within that same array, meaning that memory would not need to be allocated and deallocated while this gets repeated. Yes, essentially my plan is to use a large ArrayBuffer of known size (maybe 512 or 1024 times the size of a single game state, likely even more). Then I can store each minimax leaf as a different typed array viewing a different range in the buffer, and I can prune unpromising leaves and reuse their buffer range. `TypedArray.prototype.set`with a shared buffer is by far the fastest way to copy data in JavaScript. Unfortunately [`ArrayBuffer.transfer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/transfer) is not part of ES6, as that could allow realloc-style growing/shrinking of buffers and explicit, non-GC'd memory management. &gt; You'd also get speed improvements by using C++ addons within node. I've thought about it, but the AI will also have to run offline in a JS Cordova app, and I'd rather just write the code once and make it isomorphic.
huh? It's commented extensively and very clear.
I guess you haven't heard about frameworks like Angular, or you haven't used it. If you would have then you would know that its not about only javascript. And you are comparing angularjs with jQuery. Great!!!
Thanks, I've done some more research and it seems like it's quite common for AIs to store game states as bitmaps to save on memory and cycles even in simpler board games like chess and othello. I suppose the most important factor is that I know memory is expensive and the AI's strength will be directly related to the amount of memory it can use.
Can one of you offer a definition for us who don't know the term?
This seems like a good spot to post this again: var z = "constructor"; z[z][z]("alert('run whatever here')")(); html 5 has some sandbox APIs. sandboxed iframes and web workers in particular are relevant to this scenario. If you want a pure JS solution, then you're going to want something like adsafe, or perhaps caja. adsafe removes some fairly fundamental chunks of the language (like [], for reasons related to the code above), while caja does some complicated things to rephrase JS code on the fly into something safe. the last approach I can think of that wouldn't be completely doomed would be to grab one of the JS-in-JS interpreters (narcissus, or one of the others) and use that as a platform on which to build whatever sandbox you need. runtime speed may well suck though. 
The underscore notation was a bit bizarre when reading the code on my phone 
Rather nifty... do you intend on updating your isomorphic starter with this?
I wouldn't count on it, and even if it is, it's likely to only be the iOS part for now, with the android part coming later.
Thanks for the input.
I've built several multi tenant apps and never needed that concern on the client. What exactly is one of the issues you're facing? Typically the user logs in, and your API is now locked down to their account.
it's surprising that no one "leaked" react-native on the web. hopefully the hype lives up
"The most drastic difference I've seen between 1.x and 2.0 is in the HTML markup (aka directives)" http://jaxenter.com/angular-2-0-announcement-backfires-112127.html "the next generation of Angular plans to introduce a new syntax, new architecture and a new development experience." Just look at the lenghty R.I.P sequence and die. https://www.youtube.com/watch?v=gNmWybAyBHI&amp;t=735 
This guy must be the only person, aside from the author of the proposal, who thinks it's a good idea. The previous discussion on the proposal seems pretty definitive in its response: http://www.reddit.com/r/javascript/comments/2zp1ld/whatwg_html6_proposal_for_singlepage_apps_without/
http://en.wikipedia.org/wiki/Multitenancy
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Multitenancy**](https://en.wikipedia.org/wiki/Multitenancy): [](#sfw) --- &gt;__Multitenancy__ refers to a [software architecture](https://en.wikipedia.org/wiki/Software_architecture) in which a single [instance](https://en.wikipedia.org/wiki/Instance_(computer_science\)) of a [software](https://en.wikipedia.org/wiki/Computer_software) runs on a server and serves multiple tenants. A tenant is a group of users who share a common access with specific privileges to the software instance. With a multitenant architecture, a [software application](https://en.wikipedia.org/wiki/Application_software) is designed to provide every tenant a dedicated share of the instance including its data, configuration, user management, tenant individual functionality and [non-functional properties](https://en.wikipedia.org/wiki/Non-functional_requirement). Multitenancy contrasts with multi-instance architectures, where separate software instances operate on behalf of different tenants. &gt; --- ^Interesting: [^LedgerSMB](https://en.wikipedia.org/wiki/LedgerSMB) ^| [^Couchbase ^Server](https://en.wikipedia.org/wiki/Couchbase_Server) ^| [^Application ^service ^provider](https://en.wikipedia.org/wiki/Application_service_provider) ^| [^List ^of ^object-relational ^mapping ^software](https://en.wikipedia.org/wiki/List_of_object-relational_mapping_software) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cpoy20d) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cpoy20d)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
 var votes = ["Brad", "Deri", "Cai", "Cai", "Alice", "Alice", "Deri", "Brad", "Alice", "Alice", "Cai"], tally = {}; for (var i = 0, l = votes.length; i &lt; l; i++) { tally[votes[i]] = (tally[votes[i]] || 0) + 1; } 
Is this in ES6?
The example is written with ES6 yes, but the npm package shouldn't be.
&gt; Are you suggesting we allow users to send us arbitrary queries and that we should parse them to determine if they have proper permissions? Huh? Before "sending SQL" (that doesn't just get ignored, that is) comes authentication. Which the author of the proposal didn't mention, and maybe didn't think about, but that doesn't mean it would *have* to be anything but read-only access for public data. Of all the valid criticisms, "but then everybody could just click 'inspect element' and drop tables or steal credit card numbers" is kind of silly.
With a publically known username and password for an account with, let's call it "guest privileges". How else? What makes you think there's only "full access" or "not authenticated"? https://www.google.com/search?q=sql+grant+syntax
This is why Promises were created. I'd recommend Bluebird or just plain ES6 promises with Node 0.12 or Babel. Another common pattern is the [async](https://github.com/caolan/async) module. 
We have a largish multitenant application (domain control panel) running with AngularJS. Design differences are handled by generating multiple index.html files (Nginx is used to determine which to use based on the domain). Everything else we can cover with access control system. Different accounts have different rights and some stuff is not shown if you don't have that right. People could look into the source to figure out what else is possible, but that isn't a concern for us.
I've heard of and looked a tiny bit into promises. I've been using iojs so should have access to ES6 promises. But what i tended to do was break out the steps into 4-5 functions. Can i use functions in accordance with promises as well?
Exactly! How else will they win the best and brightest while being unable to poach/headhunt?
Yes, promises compose. Let's say you have 3 functions that each do some async work. A, B, and C. If you make them return a promise for the result, then you can compose them like so: function D () { return A().then(B).then(C).then(function (res) { return res + 1; }); } This will feed the results of A into B, and the result of that into C, and the result of that into a transformation function that adds 1, and returns the whole thing as a promise. 
Promises just give you a way of organizing and composing async functions without the mess of nested callbacks. Not the perfect example, but a recent tool I wrote would have looked like hell with nested callbacks: https://github.com/mattdesl/ghrepo/blob/master/cmd.js
No. You can listen on onclick (for accepting call) and onclose (for decline)
You can get some call-tips if you use JSDoc annotations: http://i.imgur.com/cZeR7ja.gif However, it doesn't check the types or arity. E.g. if you'd write `r.contains('foobar')`, it wouldn't complain. It also doesn't remember the types of the return values. E.g. it doesn't know that `h` is a boolean. If you want some actual checking, try the Closure Compiler. However, since those doc comments are super annoying to write, you'd probably like TypeScript better. Try Atom with the atom-typescript plugin or WebStorm. If you aren't writing JS libs and if you don't have lots of existing JS code you want to keep, you can also try Dart.
Finally someone who has implemented this, and some people are fighting because an architecture is only meant for backend not for frontend. Anyways how was your experience, do u think its a good approach for multitenancy with angularjs.
&gt; If you try to build a facebook competitor, then you can't use their code, it's pretty straight forward. Looking into the LICENSE file they provide, I can't even find any clause that would limit competitors...
Async code is definitely worth spending some time understanding since it's a concept that pops up in almost every situation. The main idea is that instead of running your code strait through, you break it up into functions, which may yield back to the virtual machine (while waiting for IO, timers, etc) in between. It allows you to get many of the benefits of concurrency without being actually concurrent. At any given point in time there is only one JS function executing, however there may be several async operations 'in-flight'. Here is an example, lets say you have two sequences of operations that are needed to produce some result. I will represent the first set of operations with a "-" and the second set with a "+". Also, these operations require some I/O or timers, or something that blocks the operations, but doesn't require JS code to run (like waiting for an XHR). I will represent those with an "X". Now assuming you write synchronous code, it might look like this (over time): --xxxx--xxxx--+++xxx+++++x++ Note that while an x is blocking the first operation we don't run any javascript. With async code, the I/O can be replaced by JS code for the other operation: --+++x--+++++--++ Notice that the total time (length) is shorter, and we now only block for 1 x instead of several? The - and + for the operations are interleaved, but the order within a single operation is preserved. That's what async code gives us. Overall faster, even though the same amount of JS code runs!
&gt; And perhaps that you don't even know enough to know they don't speak Spanish in Barcelona... Except that they do. Perhaps you shouldn't comment on things you are clueless about.
Barcelona based redditor here. Spanish and Catalan are both used daily and interchangeably
xposted this from /r/node Op here, this is an update to my original post - http://www.reddit.com/r/node/comments/2zr21c/would_anyone_be_interested_in_a_slack_team_for/ Seems like there were quite a few folks interested in this. Anyone interested in Node.js is welcome to join
Happy to help :) IMO there's no problem on the economy/housing situation anymore. I moved to Germany in 2012 partly because of it, and moved back last year. Economy is recovering at a steady pace this year, and housing prices are going down ever since 2008. Regarding language: * most companies that hire top-grade developers don't ask you for anything apart from English * You can get English-speaking service in lots of places like restaurants and bars due to the heavy tourist influx in the city * You don't need much paperwork to start working here if coming from Germany, and your company can help you with it * Learning Spanish coming from German is moderately easy, and there's a lot of cheap courses for it :) If you have any question, just ask!
/u/defcon-12 said: "And perhaps that you don't even know enough about the region to know they don't speak Spanish in Barcelona..." I've worked together with developers from Spain and they speak excellent english, I'm more concerned with the general population, not understanding legal stuff etc.
What you're looking for is route parameters. app.get('/users/:id', function(req, res) { res.sendfile(__dirname + '/users/ + req.params.id + '.json'); });
I have lived in Barcelona for more than two years and half. The Barcelona tech community is very interesting, with plenty of events, meetups and places to go. Plenty of developer are foreigners that come to live in the city while working remotely. Many of them come to the city without speaking a word of Spanish and they learn as they go. Plenty tech events are on English. The economy and housing situation have improved in the last years as mentioned.
Thank you!
It depends.^TM If the variations are small, and easily expressed as configuration, (e.g. a bunch of checkboxes for your customers) I see nothing wrong with doing it in Angular. It needs some discipline, but I found it no harder than in PHP. However customs design (which I'm guessing involves custom CSS), I'd always handle serverside. If every customer has it's own domain you could do it completely with Nginx, if not a small backend would probably suffice. Lastly, you could always go hybrid and handle small differences in the frontend and bigger differences by conditionally serving different templates.
I said it before and I'll say it again, [good work](https://github.com/kolodny/jsan/commit/8cb3c4f1d288d1c3dca985cec323a6a7ed8acb3a#diff-04c6e90faac2675aa89e2176d2eec7d8R27)!
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Catalan language**](https://en.wikipedia.org/wiki/Catalan%20language): [](#sfw) --- &gt;__Catalan__ (/ˈkætəlæn/; [autonym](https://en.wikipedia.org/wiki/Endonym): *català* [kətəˈɫa] or [kataˈɫa]) is a [Romance language](https://en.wikipedia.org/wiki/Romance_languages) named for its origins in [Catalonia](https://en.wikipedia.org/wiki/Principality_of_Catalonia), in what is northeastern [Spain](https://en.wikipedia.org/wiki/Spain) and adjoining parts of [France](https://en.wikipedia.org/wiki/France). It is the national and only official language of [Andorra](https://en.wikipedia.org/wiki/Andorra), and a co-official language of the Spanish [autonomous communities](https://en.wikipedia.org/wiki/Autonomous_communities_of_Spain) of [Catalonia](https://en.wikipedia.org/wiki/Catalonia), the [Balearic Islands](https://en.wikipedia.org/wiki/Balearic_Islands), and the [Valencian Community](https://en.wikipedia.org/wiki/Valencian_Community) (where the language is known as [Valencian](https://en.wikipedia.org/wiki/Valencian_language), and there exist regional standards). It also has semi-official status in the city of [Alghero](https://en.wikipedia.org/wiki/Alghero) on the [Italian](https://en.wikipedia.org/wiki/Italy) island of [Sardinia](https://en.wikipedia.org/wiki/Sardinia). It is also spoken with no official recognition in parts of the Spanish autonomous communities of [Aragon](https://en.wikipedia.org/wiki/Aragon) ([La Franja](https://en.wikipedia.org/wiki/La_Franja)) and [Murcia](https://en.wikipedia.org/wiki/Region_of_Murcia) ([Carche](https://en.wikipedia.org/wiki/Carche)), and in the historic French region of [Roussillon](https://en.wikipedia.org/wiki/Roussillon)/[Northern Catalonia](https://en.wikipedia.org/wiki/Northern_Catalonia), roughly equivalent to the [department](https://en.wikipedia.org/wiki/Departments_of_France) of [Pyrénées-Orientales](https://en.wikipedia.org/wiki/Pyr%C3%A9n%C3%A9es-Orientales). &gt;==== &gt;[**Image**](https://i.imgur.com/E3eoehA.png) [^(i)](https://commons.wikimedia.org/wiki/File:Catalan_Countries.svg) --- ^Interesting: [^List ^of ^Catalan-language ^poets](https://en.wikipedia.org/wiki/List_of_Catalan-language_poets) ^| [^Viladecavalls](https://en.wikipedia.org/wiki/Viladecavalls) ^| [^Palafolls](https://en.wikipedia.org/wiki/Palafolls) ^| [^Catalan ^Wikipedia](https://en.wikipedia.org/wiki/Catalan_Wikipedia) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cpp6va7) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cpp6va7)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
My bad. I mixed up Catalan and Castellano (which IS the variant of Spanish EU schools teach). Please don't kill me guys, I love you and your country.
awesome photo, although before actually reading your blog post, the photo of an empty street made me think that this was some kind of either joke or complaint post about there being no scene whatsoever. It threw me off but I'm glad I was wrong
You can do everything from JS my friend. var span = document.createElement("span"); span.innerHTML = timeVariable; document.getElementById('idOfParent').appendChild(span)
This thread has been linked to from another place on reddit. - [/r/jquery] [Need some help with jQuery validator : javascript](http://np.reddit.com/r/jquery/comments/305k6c/need_some_help_with_jquery_validator_javascript/) [](#footer)*^If ^you ^follow ^any ^of ^the ^above ^links, ^respect ^the ^rules ^of ^reddit ^and ^don't ^vote. ^\([Info](/r/TotesMessenger/wiki/) ^/ ^[Contact](/message/compose/?to=\/r\/TotesMessenger))* [](#bot)
And this is why I reddit at work. I literally just got out of a meeting where this type of functionality was requested. 
Use [].push() and += to concatenate? myArray.push(dvd); ... document.myForm.dvdListings.value += ("NAme:" + dvd.name + " Genre:" + dvd.genre + " Features:" + dvd.actors + " Duration:" + dvd.duration); However, you better use the following code (untested but you should get the idea): var myForm = document.getElementById('myForm'); var myListing = document.getElementById('dvdListings'); var myArray = []; function getMyFormValues () { return { name : myForm.elements.dvdName.value, genre: myForm.elements.dvdGenre.value, actors : myForm.elements.dvdActors.value, duration : myForm.elements.dvdDuration.value }; } function dvdToString(dvd) { return "Name: "+dvd.name + " Genre: "+dvd.genre + " Features: "+dvd.actors + " Duration: " +dvd.duration; } function onMyFormSubmit(e) { var dvd = getMyFormValues(); myArrary.push(dvd); myListing.value += dvdToString(dvd); } myForm.addEventListener('submit', onMyFormSubmit, false);
That's awesome. Working on parsing .xlsx files in the back-end can be a headache sometimes. 
I don't think well-crafted database grants can handle things such as only allowing a user access to their own record, stored as a row on a table of all users' records, and not the entire table. If you were able to structure a database to enable that, I wonder what the performance ramifications would be. In any case, it turns out OP didn't have that in mind, and that I misread their motivation behind the proposal; they were talking about running SQL queries against a local database from HTML. I still think it's a bad idea, though not for the reason at the top of this subthread.
This is awesome, I'll be able to visually track my workflow. Keep up the great work!
I don't get it. It's a library for visualizing data but has nothing to do with google spreadsheets as the database or do I get it wrong? They use [tabletop](https://github.com/jsoma/tabletop) to fetch the data from google spreadsheets. For displaying the data they have different modules which is nice, but you don't need google spreadsheet for this. You could just load some json file or whatever. And you don't need sheetsee for visualizing data from google spreadsheet. You could just use tabletop to get the data and use some d3 wrapper or something like that.
actually 410 already
http://www.expatica.com/es/visas-and-permits/Work-in-Spain-Guide-to-Spanish-work-visas_103258.html
That string translates to: &lt;script type="text/javascript" src="https://c.t4ft.de/c/ftg_t_v_bk.min.js?id=t4ftu&amp;amp;aid=1209&amp;amp;plus=1&amp;amp;fcui=4633102&amp;amp;fcai=8622806&amp;amp;ffli=62090674&amp;amp;fpli=116506757&amp;amp;element=%23DCF289483403%2C*%3Ahas(script[src*%3D%22%2FB8622806.116506757%22])img"&gt;&lt;/script&gt; When I open the file I get a huge crap ton of code. Here it is beautified: http://prettydiff.com/?m=beautify&amp;s=https://c.t4ft.de/c/ftg_t_v_bk.min.js?id=t4ftu&amp;amp;aid=1209&amp;amp;plus=1&amp;amp;fcui=4633102&amp;amp;fcai=8622806&amp;amp;ffli=62090674&amp;amp;fpli=116506757&amp;amp;element=%23DCF289483403%2C*%3Ahas%28script[src*%3D%22%2FB8622806.116506757%22]%29img
Soooooo * Lines 1 - 344 set up a bunch of event handlers. Of particular interest are lines 219-245 which request a choice of different advertising content from an ad server. These various script files create an iframe and populate it with ad content plus a bunch of tracking crap. Online advertising is frequently associated with spyware, which historically makes legitimate online ad services desirable business relationships to overseas organized crime organizations. * Lines 345-1204 appear to do some deep analysis of the current page HTML and associated behaviors using custom string parsers. Its all very obfuscated so it would need deeper examination, but they are probably trying to find ideal targets by which to track user interactions for user experience learning. * Lines 1205-1589 - spy ware and beacon * The rest is query string parsing so that it can flexibly analyze options or passed in tracking data and execute against this flexibility.
Thanks!
I knew I'd made some simple mistake! Thank you very much!
Yea, that quote is old news. Things have changed. React supports Web Components since October. They previously used a whitelist for the tags, but they fixed that. http://webcomponents.org/presentations/complementarity-of-react-and-web-components-at-reactjs-conf/
Typical troll reply. A person makes a thing they are really proud of so they use some (possibly hyperbolic) positive language to describe it. Instead of "Hey, thanks for sharing your work, but I got a less-than-perfect experience ... I'd recommend ..." its all "Go home Bloomberg, you're drunk" We all benefit from people sharing their work. Think about how your comments will be received please.
That is exactly the presentation I linked to, with the quote. However, it wasn't given by a React contributor, so the quote is still the closest I've been able to find for something official on React's position. And yeah - I couldn't use JSBin's built-in JSX transformer because that version doesn't support custom tags yet. Latest version does though - but it still doesn't support custom attributes (just data- attributes). 
&gt; That is exactly the presentation I linked to, with the quote. Did you watch it? Because it doesn't make any sense to use that presentation as source for that quote.
What is the benefit of this? If it is simply to allow circular objects, then there is probably a more fundamental problem with the data you're trying to serialize.
I did! That's how I became of aware of it. That presentation is the only source I could find for that quote. Which is the clearest opinion on Web Components from React or the React team that I've been able to find (and I believe it accurately represents their feelings). I'd seriously love to replace it with something else if anyone is aware of anything. Could use snippets from Twitter: https://twitter.com/floydophone/status/516843301966602240, https://twitter.com/sebmarkbage/status/576953543854260224 However - I do think that presentation is great to link to - because it makes the same point that you can still use Custom Elements in React (despite the team's opinions of Web Components)
[**@floydophone**](https://twitter.com/floydophone/) &gt; [2014-09-30 06:53 UTC](https://twitter.com/floydophone/status/516843301966602240) &gt; @arkanciscan Yes, but this doesn't make it a good tool for building applications. @ericflo ---- [**@sebmarkbage**](https://twitter.com/sebmarkbage/) &gt; [2015-03-15 03:50 UTC](https://twitter.com/sebmarkbage/status/576953543854260224) &gt; @addyosmani Web Components provide little structure for how APIs should be exposed and rarely does those map well to declarative frameworks. ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://www.np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
Everyone is fine with other people sharing their work. But we're all fucking tired of hearing that your framework is the best thing in the world. These hyperbolic headlines are just ridiculous. And if you're going to claim how amazing your framework is, don't have glaring issues, period. Also, this is a huge fucking claim with no proof to back it up: &gt; "Brisket offers the best perceived speed, the greatest code freedom, and the strongest search engine optimization."
hey hatestheinternet, you truly live up to your name! This is the first post of many to come, but I appreciate your skepticism. Hopefully in the next posts we'll answer some of these questions that you have with some numbers to show you exactly why we've made these claims.
Looks slick! I think I'll use this in a site I'm about to build! edit: lots of commented out code in the src files.. is this finished? 
the claim was that they were one of the fastest sites on the internet. I chose a page from huffpost that was substantially heavier in terms of content. Additionally the claim was about perceived performance, not getting text to render until 6.5 seconds in is not good perceived performance. This may not be the fault of Brisket, but the article makes Brisket out to be a silver bullet, and it doesn't appear that way to me. It might be great but throwing out claims about being among the fastest on the internet and being that bad on mobile is a problem for me.
How do I select text?
Says who?
&gt; Brisket™ you lost me there with that little "tm"
since this post was only 6 hours ago i doubt anyone has finished reading it. but maybe those who eventually do can say whether its worth the time or not?
or just `git init . &amp;&amp; git push`?
Basically, everything you always liked about Underscore with better performance. If you're still using Underscore, it's time to switch.
AHHgreed. also....it's slow. compare it to backbone. you do the math.
Ha! funny you should mention Slick. http://kenwheeler.github.io/slick/ srrsly my favorite and most used plugin, has saved me weeks of dev time. OP I like what you've done here. Add in responsive display and you're golden. Here's some JS cleanup tips: delete random whitespace, use single quotes unless it proves impossible, delete commented-out console logs/alerts/broken code, place your comments above the line it affects (personal preference), comment-separate your chained variables (another personal preference based on the principles of DRY, **var a = 1, b = 2, c = 3;** is better than **var a = 1; var b = 2; var c = 3;**), run your code through a formatter. Hope this helps. keep up the good work, my friend. 
I guess you're getting downvoted because the answer to that question is always "It depends" and that never adds much to the discussion. On the other hand, the article is quite long and it has a suspicious title, so maybe your question still has some merit. Let's see... First of all, it *still* depends. It depends on who you are, on your experience and knowledge, and on your interests. The article has three aspects to it: - first, there's a *sort of* history of JavaScript. When someone does this, I'm always wondering if they actually lived that or if they just read about it. Not that his history is too bad, but there are a couple of details which do look like second-hand opinions, rather than facts (or first-hand opinions). - there's also a part in which he presents a collection of projects and ideas, from hardware to AMS.js to FirefoxOS (of course) which may or may not be of your interest, but are nice in general. - finally, there's an unmistakeable tone of fanb\^H\^H\^H\^Hevangelism which at times comes through as wildly optimistic. It's not terribly bad, but it does show through. All in all, I'd say you can probably skim through some parts, read others and click on some of the links he provides (which, has to be said, they are many) which fit your interests.
Callbacks are not so bad. If you're nested 7 levels deep you need to organize your application and name your functions. Yes, it feels like a pain. Learn to type "function" quickly and you'll get over it :P ES6 will resolve all this in time. Promises and generators and "async function" - even arrow functions somewhat resolve this issue. However, 7 unnamed functions is 7 unnamed functions no matter how you structure your code.
ES7 will help a lot with async/await. In the meantime, I will be using promises. I like the syntax much better than callbacks.
Haha, thanks for that last sentence - that finally tipped me off that that was a parody comment :P
One thing he doesnt bring up is my favorite feature of npm scripts from an operations perspective: "scripts": { "gulp": "gulp tasks/gulpfile.js" } Requires the the system have "gulp" globally installed and in its PATH. It can be changed to: "scripts": { "gulp": "node node_modules/gulp/bin/gulp tasks/gulpfile.js" } And wa-la, the deployment step now only requires an "npm install" to be able to run gulp, no global installation required! Makes multiple apps on a single server (or for a single user) easier to manage in production as you will never ever clobber some global CLI tool.
thanks for that insightful answer. i think i'll pass on this one.
Really nice blog post. This guy should write for a living. Except I'm sure he's making better money in software...
You can use a polyfill for that (https://github.com/jakearchibald/es6-promise). 
Slick.js is quite impressive and has saved me tons of time in the past month. Would definitely recommend. 
Frankly I don't understand the micro kernel pattern. What's the difference really between a monolithic main() and a lean main() that runs functions elsewhere? The number of files used? It's always time *when* main() gets too huge, to chunk it then. But that's just me. As for your other questions: I don't understand what is "synchronize user state". Is it independant users? Or will you need concurrent syncing between different users or systems? If your users just need to be synced with themselves, check out how meteor does it: store in browser DB AND server side, change data in the browser instantly, optimistic with the fact that the data will be changed server side, then if a server error occurs, revert the browser changes. As for the DB server side, it depends what you want to store in it. Relational data? Use a relational database. Graph data? A graph database. Documents? A document database. Sorry if I'm unclear, I'm on mobile. Will expand if necessary when i get home. Edit: bigdata can be a separate DB from your running one. No one said you can have only one DB system to rule everything.
Another reason this question doesn’t contribute to the discussion is that if you just wait, you’ll have your answer. Once people do read it, they’ll vote it up or down. It might vanish, or sit moribund at the bottom of the page, unloved. Readers will comment on its merits and shortcomings of their own free will. You’ll have plenty of hints as to whether it’s of interest to you personally, and if there’s a thriving conversation that doesn’t answer a specific question of yours, you can ask a specific question, and that specific question will be a benefit for everyone. New posts are like articles in the new queue. Either belly up to the bar, read them yourself, and then vote/comment to help filter them, or please be patient and let others do the early spadework.
I think that the book **MEAN Web Development** by Amos Haviv does a pretty good job explaining front-end architecture, testing, etc. He is the creator of [**mean.io**](http://mean.io) and now [**mean.js**](http://meanjs.org/), so you can take a look at those structures to possibly get some ideas.
You might be confusing escape tags and template control structures.
Thanks!
Instead of "myArray.length[x] = song;" Use: myArray[myArray.length] = song;
If you're OK with IE &gt;=11 you can use MutationObserver https://developer.mozilla.org/fr/docs/Web/API/MutationObserver to track every changes on DOM. You can listen to click, scroll etc on window/document/body to catch any event
No one use Internet Explorer :P
well, you need something wired up on the back end to capture all this info. that php script captures and logs events from heatmap.js on that same repo. this project is a module for the processwire CMS, so it is probably not going to be much use for you. a google search for 'heat map' will get you a bunch of results. ex: https://heatmap.me/. if you want a fully free product, that's going to be harder.
That's right. That is one good reason I abandoned JSP and use Freemarker. &gt; It's just that the server-side operations are obscured with HTML-like tags That is the purpose of a template engine! So long as the tags (also known as directives, blocks, or controls) are for template control and not logic. [In 2012](https://blog.twitter.com/2012/improving-performance-on-twittercom), Twitter made the smart move of pushing as much templating back to the server and away from the client. 
Because it will be called in the context of window, not your code. You can either bind the function to the object or, since it's a singleton, do something like this: http://jsfiddle.net/a91cx5wu/1/
Doesn't work in Chrome, Firefox or IE. What *does* it work in?
Why is it beautiful and not just a simple JavaScript touch carousel. Why do devs feel the need to throw out superlatives when describing their work? Serious question.
You won't get better in programming like this.
Yup this is definitely homework. Don't help this guy cheat please!
nice job! Are randomly generated worlds on the horizon?
Probably should stop changing it around in the editor if you're asking for help.
Im not changing anything there.
not sure. this is one of those things where it is easier/cheaper to go with a commercial product that to build your own. at least if you are doing commercial work. you can probably start deconstructing that one you linked.
Just saw two different snippets of code from minute 1 to minute 5... weird.
It's sluggish because chrome's profiler says: "Not Optimized: Optimized too many times"
If the thing you're looking for is a heatmap : https://github.com/pa7/heatmap.js/
So, could i use this for swiping between html templates? I mostly make SPAs, and this would be sweet to use for that. 
Damn, thanks for sharing slick. I was looking for something like this!
Hmm, I didn't think about checking the profiler. It looks like resemble.js is chewing up the CPU mainly.
Thanks for the link. You're right, I should give credit to the inspiration behind this. I've added it to the code.
Those aren't really MEAN tools, just modern js tools.
Swiping up or down would offset the page vertically, so then when I tried to swipe horizontally, it would get 'caught' and not scroll, until the vertical alignment rectified itself. Once it was vertically centered on the screen again, I could swipe. But I wasn't trying to purposely find fault in the UI. This was a legitimate use-case where it didn't react the way I expected, and seemed more of a 'bug' than user error.
This isn't a 3rd grade science fair project. This is a news story on their own site! Shouldn't it have, like, facts or something?
I'm still not sure what you're arguing. No one is forcing HTML renderers on you. What's the point of your rant? Also, QML's runtime is specifically the V8 Javascript Engine, not just ECMAScript. Again, not even sure why you're ranting about HTML, we all know the DOM is completely separate at this point.
nobody got my joke...about it taking "8 hours to read". :(
You need to use "var" -- the weightedProbability function is accessing global variables x and R. The createPlan function is also accessing a bunch of globals, including x. Hence the problem. JavaScript variable scope: http://www.w3schools.com/js/js_scope.asp 
Hmm i didn't experience this bug on the iPad, but if you want you can report it in the issues section on Github and make sure to specify the iPad model you're using.
Interesting technique. I wonder if it could be used for image compression or pattern recognition.
People not appreciating a programmer joke is one thing but someone actually trying to execute the code in the hope it works as advertised is a completely different level of not getting a joke.
Crashed both my Firefox and Firefox Developer Ed after a while.. But still looks cool.
I'd say this makes me glad, but everything about the Dart project makes my skin crawl. This blog post is optimistic corporate chirp trying to mask a dramatic failure in the initial goals of the project. I can't wait for the Dart/Google talking heads that hang around here to tell me how this is a good thing for Dart. Yes, of course it's a good thing for Dart for it to stop focusing on an outlandish and overbearing goal! I'm saying no one's going to admit how dumb it was to begin with. There isn't any acknowledgement that the original position was a failure, both technologically and politically. Only the incessant whirring positivity of Google developers turned corporate drones. _When it comes to browser development_ (edit), Dart is and always has been on a level playing field with CoffeeScript and TypeScript; at least it's finally moving past its delusions of grandeur. 
https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Manipulating_the_browser_history#Adding_and_modifying_history_entries
&gt; Dart is and always has been on a level playing field with CoffeeScript and TypeScript Dart is more like Ruby, PHP, or Python (it's 10x faster than those though). It's a general purpose scripting language. The difference is that it *also* compiles to fast JavaScript. Websites aren't the only thing which may require some scripting.
Modifying window.location on a keyup event should give you the effect you're looking for as long as the pound sign is preceded by the current URL. Modifying the location is navigably the same as clicking a link (aside from history management) so you don't need to handle it separately.
Brilliant, thanks for the great writeup. I hope the other browsers implement this real soon.
CS and TS aren't JS. There are no CS or TS VMs. Like, how would you load a native library in CoffeeScript? Kinda makes you throw up a little, doesn't it? Also Ruby, Python, etc do have those standalone VMs and their standard libraries do cover I/O. JS isn't quite like that, is it?
Dart is dead. It feels douchey to gloat about a project failing, but I'm glad. The native VM had zero chance of ever being shipped by other browser vendors, so to the extent anyone adopted it, it would only have fragmented the web like the bad old days. It was doomed to be a Google-only effort right from the get-go, and it's unfortunate that they've wasted so much manpower on it. (I feel the same way about PNaCl, too, but that's another story...) I'm not convinced of Dart's appeal as a compile-to-JS language either. There are so many other options: TypeScript and CoffeeScript, like the previous poster said, but also ES6 and 7 now. I suspect that Dart's window for being a reasonable choice is rapidly closing, but we shall see.
For me Dart is _a JavaScript done the right way_. JavaScript will finally become very similar to that as Dart looks like now. This already happens: ES6 classes, Maps and template strings, ES7 async/await.
It looks to me like the question was "In what way is Javascript not a general purpose scripting language?" JS is at the cutting edge of VMs, such that it makes Ruby in particular look like a toy. There are at least four major efforts to maintain competing VMs dedicated to running JS, led by Google, Microsoft, Apple and Mozilla, and they have been competing for years to be the fastest, with the result that JS VMs can now run C code transpiled to JS at near native speed. No other dynamic language in history has come close to this level of investment and adoption, nor is likely to for decades.
Ruby and Python, sure, those are known for being slow. But PHP? Hate on it all you want but it's fast as hell.
But the right way to do all those things is clearly to extend JS. So Dart was the wrong way to get to the goal. There is no sense in arbitrarily changing the minutiae of syntax just because you started all over again, when you could just as easily enhance the world's most widely deployed language.
I never understood the need, or the reason for the Dart VM in the first place. It could have just used the JVM. I appreciate dart's tooling, but i don't understood the need for a new language, that doesn't do anything new / better. The could have just used Go or something... 
&gt; It looks to me like the question was "In what way is Javascript not a general purpose scripting language?" The topic was JS alternatives like TS and CS though. Anyhow, as I mentioned above, JS' standard library is simply lacking. You have to embed one of those engines and expose some API to it in order to be able to do any kind of I/O. That's what browsers and Node do. Out of the box, JS isn't very versatile. It can't even write to stdout or read from stdin. It can't do anything at all. It's always embedded and you're scripting the behavior of the host application. So, what you might call "general purpose" is a specific runtime which actually lets you do something.
does that benchmark take into account the built-in opcache in PHP? After first run the opcodes are saved as a file and run directly instead of re-evaluating everything. This can MASSIVELY speed up execution, reduce memory usage, and increase overall performance. And it's built into the language and enabled by default, so it's not like it's an extension or 3rd party engine that's doing it. This is like comparing cpython to pypy and claiming that cpython is vastly faster because you didn't give pypy time to actually JIT the code effectively.
The analogy is right there in front of you, you're just refusing to take the last part anything but literally: Yes, we most certainly do give users access to the shell who don't have permission to do everything. These are called file system permissions, and they've been a foundation of computing for 30+ years. I'm not suggesting we give the website direct access to the hard drive the database is stored on. Every interaction with the database is already going through an API, we can implement permissions there.
well to its original goal no one wants an embedded jvm in the browser. a jsvm? well party on!
I'd support it for the server side, but client-side java is a bad idea.
Right on cue, complete with bland cheerleading ('it's 10x faster'). It's uncharitable of me to edit my original comment to make the context unmistakeable, but I don't have the patience to deal with your continual selective reading of what I said, especially when it's missing the point in the first place. Scoring a minor point about how Dart has a VM and CS/TS don't will not change how toxic the Dart project has been from the beginning. It has finally reached a measure of sanity; it could still use a dose of humility. 
But phps opcache isn't a jit, the effects are only seen on second execution of the script. This is why comparing language speeds is near pointless. 
Would you know what the pros/cons or benefits of this is over history management? (which I think /u/_cassis_ linked to)
&gt; bland cheerleading ('it's 10x faster'). Well, it is. Just like V8. It's a damn impressive VM. Feel free to run the benchmarks yourself. &gt; Scoring a minor point about how Dart has a VM It's a major point for me. It makes the language more versatile (command line tools, web servers, app scripting, mobile, ...) and it also makes development a lot nicer (debugging, profiling, iteration speed, ...). Also, don't forget that Node only exists because someone bothered to write a fast open source VM. This stuff is kinda important.
See above re: selective reading. I never said VMs weren't important. 
Why? I don't think it's a bad idea at all. Giving too much permission for the software might be, but that's not a shortcoming of the jvm.
i don't get what are you trying to say.
One advantage of using the fragment part (#) of the URL is that it is supported by every browsers since forever. But you need a mean to know if/when the user presses the back/forward buttons. History management was developed to help with this problem. A popstate event is dispatched to the window object, so you can act upon the new URL state. You can also change more than the fragment part of the URL. For example, you are on the page "product.php?id=1", you click the "next product" link and do an Ajax request for "product.php?id=2". If you refresh the page, you land on the first product. This is wrong. Instead, you push the history state with the new URL. Now if you refresh, your server-side script generate the correct page with the second product. If you click "back" you get to the correct page. None of this can happen with the fragment part of the URL, unless you setInterval() a function that checks the window.location object. But you don't want to take that path... Trust me.
First things first: you cannot become a frontend developer without a solid understanding about HTML/CSS. You should know about the things that might differ more or less slightly in JS from other languages: type coercion, prototypal object orientation, closures, lambda, JSON and sparse arrays (beware older IEs) and of course your excursion into the DOM should go further. You should probably also have a look at the current frontend tools/frameworks - at least enough so you could talk about them in an interview: angular, react, polymer, jquery, bower, etc. Last but not least is a look at the current HTML5 APIs. Some of them are rather useful.
go, dart, atscript ... I am glad google realizes that it should stop to throw money at its workers, that try to invent a new language every now and then. Ecosystem and tooling are such big parts of every programming language that you really shouldn't split your efforts as a single company.
This is what I was looking for, thank you.
If you need deep understanding of the JavaScript language, I can't recommend http://javascript.crockford.com/ enough.
&gt; You have to embed one of those engines and expose some API to it in order to be able to do any kind of I/O. That's what browsers and Node do. i.e. you, me and everyone else doesn't have to do anything in order to perform I/O. We just use the already established off-the-shelf APIs appropriate for what we're doing: * Secure sandboxed client in the browser * Node.js for complete server-side power and the biggest repository of software components in the industry * Cordova for mobile APIs JavaScript's great strength comes from its clear separation of the responsibility of language and API, which is why it is so adaptable to new environments. This is what the phrase "general purpose" actually means.
No, because its pretty much pointless imo. Php might be faster on second run, but slower than pypy after a few minutes. But java might be significantly faster but only because the jit can identify the benchmark and just runs some precompiled code, and c is the fastest until some simple code runs faster in a jit because it could optimize better than you can, and v8 might be slower than ruby on one PC but faster on another PC because of some CPU specific optimization made. Its pointless. Even if you can find a "winner" it means jack shit. Nobody is going to choose python because its 1.3% faster, nobody will drop php and rewrite their entire back end for 3% less memory usage, and at the end of the day ruby might be the best choice even though its the slowest just because its really fast at one fucking thing.
The history.pushState method will add a new entry into the browsing history every time it is called. You don't *need* to use a pound symbol in the URL because the browser won't actually process the link. &amp;nbsp; The window.location method will *not* add anything into the history, but requires the pound symbol formatting. &amp;nbsp; From the description you gave, either should work. flooding the history with a bunch of URLs every time a key is pressed might be obnoxious. Also, you will need to use the pound symbol if your intention is to create a reusable URL.
You really don't know what I'm referring to when I say that, do you? I've been in a few conversations with you, and they all seem to derail in some way. I think it's because your approach to argument is to pick a few points to make in contention, and then assume that the argument is _about_ those points, regardless of what the original conversation was about. This is how Klathmon got sucked into defending php opcaches while you belittle him about Java benchmarks in a thread that started about **Dart's culture.** There's some extent to which this is fair play, introducing sub-points and expanding argument. But you neglect the overall arc of the conversation, the context, the _spirit_ of the argument you're working against instead of **just those facets you know you can beat.** So fine! The Dart VM is cool and makes Dart different from CoffeeScript! My point still stands that when it comes to browser development, CoffeeScript/TypeScript and Dart are on a level playing field. You've contested nothing about my actual position. Here's how this conversation looks to me. &gt;Me: Dart's culture is a problem, and I bet some Dart talking head will be in here soon. &gt;&gt;You: Dart has a VM and I like it. While a few usernames crossed my mind when I made my jab, I'd be lying if I said yours wasn't one of them. 
Fair enough. CoffeeScript is past its prime as a useful experiment. (Edit: I should say that I love CoffeeScript as an experiment and admire its development, but I wouldn't use it in production nowadays)
People will probably throw rocks at you. The real danger is evaluating arbitrary input from a possibly unknown source, such as taking text from an input field and running that through eval. This particular use doesn't do that, so it's not _as_ bad, but at the same time, you can instead do this with array notation, something like a `currentNamespace[token] = {}` kind of thing. So the rocks aren't avoided.
&gt; how toxic the Dart project has been from the beginning ??? &gt;bland cheerleading ('it's 10x faster') For most benchmarks it is in fact more than 10x faster than PHP: http://benchmarksgame.alioth.debian.org/u64/compare.php?lang=dart&amp;lang2=php
Definitely a good article. I've seen some really negative people on this topic, using arguments which this article completely refutes.
There are other times when I might take that to heart, but I'm honestly just reflecting your persnickety approach back at you. This is what happens when you argue uncharitably; you find someone that's willing to argue uncharitably back at you. (I suppose I do admit it's combined a little with some of the bile I think Google deserves for the maliciousness of Dart; but I'm even less inclined to apologize for _that_!) 
First atscript merges in with typescript, now dart is basically DOA. Interesting days for google's JS langs. 
The vision for Dart was as a single platform for the web controlled by Google. This is not controversial: it was their express goal for the project. Google has been taking a multi-pronged approach to controlling web technology for a few years now. The politics, fortunately, are not working out for them. Edit: I am not contesting the benchmarks except to say that they are off topic. Dart is fast, fine, whatever. Citing them as a slogan is still bland cheerleading in this context. 
Yes my intention is to create a reusable URL so that if the user bookmarks the link and come back later, they will see exactly what they entered into the textbox previously when they first bookmarked the page. Would that make one method better than the other? I'm going to try changing window.location first in the meantime! Thanks
Compatibility reasons are a big issue. It's a pain for users to try to maintain a JVM which is both secure and compatible with your particular application. Java is an incredibly powerful language which comes with many native libraries, which is *awesome* as a software developer. But as a user and a platform maintainer, that presents a huge boundary between the untrusted third-party content and the runtime environment of the JVM and the OS. That's the reason there are so many security flaws that keep turning up, in everything from the oldest version of Java to the newest. Patching those flaws requires that users keep their JVM as current as possible. But not all of them will do that. And asking them to do it may get them pissed off at your application. So you end up having to support the very latest JVM, and maybe some less secure JVMs. It's much more attractive and pleasant for the end user if you use Java on the server where you take responsibility for keeping that whole mess secure and in sync. Even beyond that, there are issues with alarming warnings and configuration for the JVM that may frustrate your users.
&gt; But the right way to do all those things is clearly to extend JS. Extension works well when the problem is the lack of something. But when you're trying to *remove* a feature (like, for example implicit conversions), or *change* one (for example, the lame scoping of `var` in JS) it's very hard to do that by extending. You either break compatibility (Python 3, Perl 6, etc.) or end up with multiple ways of accomplishing the same task, the old and busted and the new hotness (for example, Python's two flavors of classes, or `var` and `let` in ES6). You can make a ton of progress by extending, and it's almost always an easier path. But if your goal is to give users something *simpler and cleaner*, you almost always have to start afresh. The real challenge is doing that and then actually being successful. It's *really* hard.
This is a good question because I think it should have a readily communicable answer, since I seem to think it's obvious but I have a hard time spelling out exactly why. The reasons why are all political or cultural, not technical. The essence is that "open source" isn't automatically a wholly virtuous gesture. Can you see that gift-giving can be political and controlling? Can you see that if I give you a car, but I'm the only one that decides what color to paint it and who to allow to maintain it, it's not really your car? It might be easy to say that with open source, anyone can jump in and work on it. But all open source projects have politics of ownership: who is allowed to decide major design changes. It might be easy to say that we could just fork Dart and work on it as an open source collective, ignoring the original maintainers (Google). This is what we should do, if we wanted to take Dart seriously! (I suspect, then, that the reason this didn't happen is that Dartium in browsers was simply a bad idea.) I don't want to live in a world where the _only_ way to contribute to the web technology we use to communicate with each other every day is to be **affiliated with Google** in some way. That is corporate ownership of "open source" software. And in the end, it might come down to: do you trust Google? I don't trust Google. And I don't see that I should have to. 
&gt; Google deserves for the maliciousness of Dart Never attribute to malice that which can be adequately explained by incompetence.
How impossible would this be? fetch('/big-data.csv') .pipe(TextDecoder) .pipe(CSVDecoder) .pipe(ws) I'm really excited to get streams in the browser, I think io.js streams just spoiled me.
&gt;But all open source projects have politics of ownership: who is allowed to decide major design changes. &gt;we could just fork Dart and work on it as an open source collective Well, in theory you are right. But when I look on some projects, ruled by 'open source collective', it seems that it is not a good way either. The most prominent example is Gnome. The amount of major design changes beyond any reason and against most of the community is innumerable. This includes design changes, feature removal, constant library API breaking (GTK+). And wasting of organization funds on purely political initiatives, like OPW. Mozilla is not better either. In fact, it appears that the most healthy model is when you have one person in charge who is purely technical and does not have any commercial or political ambitions. I am thinking here about Linux.
It's definitely not a solved problem, and I can only oppose that which I find objectionable. 
For some projects performance is a pretty huge deal. Particularly games / simulations. It's really really easy to run into performance issues when creating games, as you are trying to run a potentially quite large amount of calculations (think collision detection / physics in general) in less than 1/60th of a second. Also for ANN's or brute force programs. But for a lot of projects you are right, language performance means little.
Not sure if you guys used your own site. I scroll down the page, clicked on the article to read the article, clicked on the back button. I was back to top of the previous page. It doesn't remember my position. This should be one of the basic requirement for any SPA and full MVC framework!
 - 14.999 seconds on Firefox/Android - 26.396 seconds on Chrome/Android Both tests are `/mobile` as `/test` crashed. Stock Android Browser doesn't seem to run the test at all (or I'm not patient enough). Device is a generic quadcore mt6589@1.2ghz 1Gb RAM running Android 4.2.2
Go seems to be doing fine and keeps getting more users and contributors.
Using eval when it can be avoided is blasphemous. You could do something like: function resolveNameSpace(ns, root) { var getDefaultRoot = function() { return this; }; if (typeof root === 'undefined') { root = getDefaultRoot(); } return ns.split('.').reduce(function(previous, current) { if (typeof previous[current] === 'undefined') { previous[current] = {}; } return previous[current]; }, root); }; And use it like: resolveNameSpace('$.foo.bar.baz.qux'); Or even: resolveNameSpace('foo.bar.baz.qux', $);
Agreed, I assume a lot of what they learned about language design when making Dart has been part of making Go better.
&gt; Using eval when it can be avoided is blasphemous Pfft, no it's not. That's just repeating the "eval is evil" mantra that's been nailed into all of our heads, but the reason for that is almost entirely because of user code injection. If it's safe, doesn't need to be that fast (it's executing a limited number of times -- OP's code will probably never run more than a few dozen times), and saves coding time over other methods, go for it. Whether the OP's codebase meets the "it's safe" criteria, I have no idea, but you could easily sanitize via `/^[\w\.]+$/` or similar
&gt; Unless I'm missing something, that benchmark is using an almost two years old version of PHP. See this for a more updated perspective, including the up and coming version 7 : http://www.reddit.com/r/PHP/comments/305ck6/real_world_php_70_benchmarks/ Current stable is 5.6.7 which was released 5 days ago. "PHP 5.6 is 1.6% faster than 5.5.", says your link. Anyhow, even PHP 7 is only twice as fast PHP 5.5, not 10 times. It's kinda where JS was 5-6 years ago, I guess. &gt; Also, talking about Facebook and HHVM is a cheap shot. /u/schammy called PHP "fast as hell". It evidentially isn't. Of course this doesn't mean that PHP is useless. Even the slower scripting languages will do just fine in many I/O-bound scenarios.
I didn't mean to imply any similarity other than that alluded to by /u/soddi in their original post- they're languages by google.
Correct, that's what it says. I thought you said anything different. My bad. I still find it hard to believe that Python 3 is at PHP levels on performance. In my daily experience, it's slow as fuck, and if it weren't for Ruby, it would carry the Slowest Crown
Well one thing, those aren't *controllers*; they're *modules*. When you define an angular module, you give it a name and a list of it's dependent modules. angular.module('&lt;name&gt;', ['&lt;module1&gt;', '&lt;module2&gt;']); A controller is actually a constructor function, and you bind it to a module. angular.module('foo', []); // No module deps angular.module('foo') // angular knows my module and so do I .controller('signupController', function() { this.bar = 'BAR!'; }); I can get my controller constructor just by calling: angular.module('foo').controller('signupController'); Behind the scenes, all these names, are appended to a single object for quick lookup. Call it a hash, if you will, of all things registered with angular. It's a bit more complex than what I just said, but it's the basis for dependency injection. So... now that we know what a controller actually is. 1. Angular is a dependency injection framework. It preloads all the constructor functions before using any of them and then when everything is ready, it completes creation by properly *injecting* every dependency a component may need. 2. You state controllers with names so they can be accessed from you're other angular components and the DOM. 3. Dependency injection is a great feature, but it can be solved many different ways. It is slightly different from *require*, because require is static access. You can't require one thing and have it hot swap with another.
Exactly. Compiling tail-recursion into iteration is another example that comes to mind (although ECMAScript 2015 should have this too).
I do mention this, but maybe it's not quite clear. Since v2.0.0 of npm, when you run a script with npm it'll actually load everything in node_modules/.bin/ into the environment. This means that if you install gulp as a dependency, you can have: "scripts": {"gulp": "gulp tasks/gulpfile.js"} And it will use node_modules/.bin/gulp. If you don't get this behavior you're running an old version of npm and should update :D. 
Glad these tools are catching up to IDE's like inteliJ
This is a great writeup, it explains in clear terms what fetch() does that XMLHttpRequest simply can not. I was one of the detractors the [last time this came up](https://www.reddit.com/r/javascript/comments/2zbu4k/fetch_a_better_xmlhttprequest_api_which_uses/). I know it's bad form to justify negativity, but I do feel strongly about how new features are promoted and ask you to please hear me out. It's part of my job to evaluate new technology to determine its value. In the years I've been doing this, the most reliable source of factual information is the canonical specification, which for the web is usually published as an IETF RFC, W3C recommendation, or in most recent years a WHATWG living standard. Once reviewing that specification, I must look at adoption: do all of the platforms we need to support implement this specification? In the case of this fetch API, the sole implementation has been so far in the future of the ["living standard" specification](https://fetch.spec.whatwg.org/) that even as I'm writing this, the specification doesn't contain any reference to how you actually get a streaming reader from the request's body: the `getReader` method is not present in the spec or any other referenced specification to any other document which documents this method. So I must ask how can I *impartially* evaluate fetch() as a technology when the little accurate documentation on how to use it comes from the blog of a developer advocate who works for google -- the only vendor which is implementing this API? I humbly request that if you are working on the implementation of the fetch API, may you please make sure that the published living standard specification is kept up to date so we can evaluate it fully and other vendors can start on implementation?
Angular and Polymer worked out pretty well.
O__o The go team is completely distinct from the dart team (not even the same country!) and I very much doubt the virtual machine learnings flowed onto the compile-to-native compiler for go.
(Forgive my naivety) Is that something that was available in inteliJ for a while?
You should avoid using it unthinkingly, that is all. JS is not a religion.
i don't see this option
JavaScript, with Babel, to transpile es6/es7 to es5.
Pass the getShoes() function/promise to the directive (via the scope; how depends if your directive's scope is isolated or not) Don't set $scope.shoes in the promise.resolve function - just return an array of shoes from this promise. in your controller you could have something like this: $scope.getShoes = getShoes; getShoes().then(function(shoes) { $scope.shoes = shoes; }); function getShoes() { return $scope.user.$promise.then(function(data) { var shoes = []; data.shoes.forEach(function (shoe, index) { if (shoe) { shoes.push(shoe); } }); return shoes; } } In your directive you call getShoes() directly. I leave it to you to make the user/shoes stuff into a service (like @skitch920 said) and to improve the code in a way, that the data.shoes.forEach runs only once. I like this approach more, because it uses neither events nor watches. 
Oh, I see. I didn't say what they learned from making virtual machines necessarily flowed into the go compiler, but if they had been the same people, they would probably have used a lot of the knowledge they learned when designing dart (read: designing, not implementing) when designing go. Didn't know they weren't even remotely the same people.
Use Chrome Canary if you don't see it. This is awesome. Making my life so much easier.
&gt; Like, how would you load a native library in CoffeeScript? Maybe I'm not clear on what you mean, but if you're talking node, you can execute any .coffee script using `coffee`. The script can require any js script normally
This is a cool project, but it honestly made me thankful I don't use Apache http server for anything anymore.
I got you a couple more, **all** running the `/mobile` test. I ran mobile devices only. I can also run it on a couple of desktop computers but they are not particularly peculiar so I guess anyone can test those. &gt; A Nexus 4 running Android 5.0.1: - Firefox: 10.923 seconds - Chrome: 14.76 seconds - Opera: 15.384 seconds - Dolphin: 20.508 seconds &gt; A Nokia Lumia 800 running Windows Phone 7.5: - Internet Explorer: 7.334 seconds &gt; A Samsung Galaxy S2 running Android 4.0.4: - Stock Browser: 3.145 seconds - Chrome: 21.582 seconds - Firefox: Didn't run or took too long - Dolphin: 2.714 seconds &gt; An old iPad (1 or 2 I think), running iOS 5.1.1: - Safari: Didn't run. Console shows: `undefined - TypeError: '[object BlobConstructor]' is not a constructor` - Chrome: Didn't run or took too long &gt; Some Dell Surface tablet thingy... It's an Atom CPU@1.33GHz with 2Gb RAM running Windows 8.1 (strangely it's running Windows 32bits on a 64bit CPU, but that's what it came with): - IE: 3.024 seconds - Firefox: 8.008 seconds - Chrome: 13.072 seconds Oh, the ones that don't seem to run, they all show the same behaviour: It initiates test 1 (prints Start, Run, Threads, Max Threads, Transferrable... and doesn't do anything more). On Safari on the iPad it's exactly the same but I got the console to show the error mentioned above. (Browser versions are always either the most recent available release on that platform or whatever the device came with for default platform browsers)
Use `myArray.push`.
I never said it has to use bytecode, it might as well just accept source code and interpret / compile it in the browser.
Very well put, although I'd point to "use strict" as an example of how a language can avoid bifurcating its entire community a la Python while still providing a way to dump its baggage. An example of valid starting over is Rust in systems programming. A fundamental shift of emphasis, a new mix of ideas, a ton of stuff declared unsafe and banned from mainstream use, with a specific mission: a modern alternative to C/C++ without undefined behaviour. To succeed in attracting users, a whole new language has to be significantly better at something than established languages, which those older languages can't be adapted for due to their baggage. Dart is not in that category. It's the usual set of ideas dressed in arbitrarily different syntax. It had the potential to be maybe 5% better than JS in some ways, and 5% worse in others. That's not going entice users. BTW, removing stuff from an existing language isn't as hard as *changing the semantics of existing features*. With removing features, you can at least give an unambiguous error when legacy code tries to use them. e.g. "Functions can't be declared there". "Use strict" does a mixture.
They are still [working on](https://github.com/ariya/phantomjs/issues/12948) making official Linux binaries for PhantomJS 2.0. That's probably why the npm module hasn't been updated yet.
The one important frame from the video: https://i.imgur.com/QmIPZ5U.png
While DI is a beneficial feature, angular modules are a fad. They certainly don't help you organise your app, they're just another piece of syntax you need to write. Don't stress it. If you are still learning you can very safely put all your angular stuff in one module. Use angular getter syntax to get it or store it as a global as 'appModule' on window. You can separate your app later when you will actually have all the pieces in place.
Currently it is available in Chrome Canary and Chrome (Dev Channel). This option is active by default. For the Chrome Canary the name for options is: "Display variable values inline while debugging". For Chrome Dev Channel it is still "Show scope values inline" (will be renamed in the next version to "Display variable values inline while debugging" after the commit https://chromium.googlesource.com/chromium/blink/+/60c912ea0d8ef5b680c797180ec1a65e52ec6cf7)
*Debugging Intensifies*
Yep
PHP 7 is still in dev status, and maintainers are looking for ways to make it faster than HHVM
no please don't
every company from early computing is like that. Oracle is no saint either. IBM is no better.
That looks disturbingly similar to a ThreadLocal variable, which is pretty much almost the wrong way to do anything. Surely there's a cleaner way to attach information to a request?
I frequently don't agree with /u/x-skeww either, but now you're just getting personal and twatty. You posted something over-general and ill-qualified: &gt; Dart is and always has been on a level playing field with CoffeeScript and TypeScript x-skeww then *completely reasonably* pulled you up on an inaccurate or over-broad statement, and pointed out that to be scrupulously accurate Dart was actually a general-purpose scripting language that Google was *also* trying to shoehorn into the browser. You then tacitly acknowledged that your previous statement was misleading and failed to adequately communicate your actual point, and even went back and revised it to restrict its focus appropriately. &gt; *When it comes to browser development* (edit), Dart is and always has been on a level playing field with CoffeeScript and TypeScript ... but then you just had to bracket that admission with snarky and obnoxious comments and personal criticisms of the poster who pointed out *your* mistake, which turned the whole thread into a dick-waving contest... that (bonus points!) you then proceeded to try to blame on the other guy. I do't always get along with x-skeww either, but in this case there's only one person inadequately expressing themselves, injecting pointless noise into the discussion and generally being an asshat, and it's not x-skeww.
Yes, but now you can see the value of all variables without having to hover.
Do you always have two containers?
No, that's the problem. It can be 1,2 or 3 and they can also be different widths. So I need some way to calculate every time they add up to X% of the "row" width and then wrap them in a "posts-row".
This isn't really a javascript question as much as a CSS/html one, right? Anywho, might we see the code? When I right click to view source (using Chrome) it doesn't give me any options... which I don't understand...
I wake up around 7, pack my tent and stick it on my bike. Bike for maybe 6 hours, find a café, lock my bike outside, order coffee &amp; food, work on whatever project for 2-3 hours, get back on bike to find a camp spot before night, set up tent, read/watch movie, go to sleep. But... since I'm pretty sure that's not what you meant, I'll refer you to [this thread](http://www.reddit.com/r/webdev/comments/2w0mpu/trying_to_get_a_general_idea_of_the_web/) from about a month ago where I answered the question as you'd expect :)
How do you know which boxes have an extra margin?
Here is the common image in the good quality- https://twitter.com/malyw/status/580878072192233472 http://i.imgur.com/KvNhW0l.png
The rows add up to 24 columns. This is how it's laid out; .fp-case-small { @include span(8); @include push(0); } .fp-case-small.indented { @include span(8); @include push(4); } .fp-case-large { @include span(12); } .fp-instagram { @include span(4); @include push(1); margin-right: span(3); } .fp-twitter { @include span(7); include push(1); } The indent class is added this way; $('.fp-case-large').each(function() { if ($(this).siblings().is('.fp-case-small')) { $(this).siblings(0).addClass('indented'); } }); 
That's possible in flex. Give the article a good read.
Have you tried with css3 calc() magic? You can do stuff like 100%-30px.
Thanks! You're the best! I was able to get it working thanks to your clear instructions!!
Looks fun, though I tend to agree with this summary of the state of FP -&gt; JS: https://wiki.haskell.org/The_JavaScript_Problem (it mentions PureScript). If you're going to make such great strides toward Haskell, why not go the whole distance?
YOur mum's awful. I don't complain tough.
Because `(new Number(0))['non existing property'] === undefined`. Primitives are auto-boxed when used like an object.
I'm agreeing with everybody on stack overflow: your question is hugely underspecified.
Create a test case on jsbin/jsfiddle or draw a diagram or something. Having 2 boxes in some container doesn't sound very unusual. There is probably a way to do it with CSS.
Hum, maybe we should enable jshint max line length after all. Gotta leave room for the variable values.
That's just the first 400 lines out of a 1000... Thanks for any help or insight you can provide for me - I really, really, appreciate it!
I remember this one, its really old. in todays world i would say comparing angular to react would be more up to date :)
None of the above. React JS is where you want to live. Its not as opinionated as ember and angular and allows for you to use routing of your choice. Backbone is awesome but too much scaffolding needs to be in place to deliver something useful. I recommend reading on Flux as well.
I'd be interested in someone doing a comparison between WebStorm and VS w/all the new JS-related stuff. Do they even compare?
In what contexts is it valid? I'm not very good at C, but this: int main() { int a = 0[0]; } doesn't compile for me. This does, though: int main() { int a = ((int*)0)[0]; } 
Why don't you search your code for where the string `ENDED` appears? 
We've had this in [Google Ultron](http://ultronbrowser.info/) for quite some time. Only the best JavaScript debugging tools for NASA!
I tried but no luck finding it.
Because one .js file is **WAY** better than the massive proliferation of .java files you get on Java projects. Even with request pipelining, a single request for the .js file is going to be WAY more performant than 20 or 30 for various .java files (and that's being generous; I don't remember the last time I worked on a Java project, even a TINY one, that was that small). I don't think "`tar` it up" is the simple solution you seem to think it would be; there's a lot of overhead and additional codebase to add to the browsers to make that work. I haven't even begun to address the vastly more verbose nature of Java versus JavaScript, since presumably gzipping the resources going over the wire will mostly offset that.
&gt; (I may want to use the code in either browser or node, so I don't want to have window or module hardcoded reference.) Well, at some point you need to make a choice. You either support those, detect them, or establish what you want the behavior to be and do that.
Yeah unfortunately I realized after I told you that there was a typo in my logic, please try again for the mobile test. 
It does? The video is looping for me with no pop up. Firefox 36 on mac.
Slightly interesting. Allows you do to something like: 42['toString'](); &gt; "42" whereas 42.toString() doesn't work. Chrome actually autocompletes this on strings, which I didn't know. e.g. `"lol"['` starts to autocomplete
domains have always been controversial, because they come with a lot of caveats. The most common thing being that having several domains the same socket can make you switch between domains without realizing it. That being said, as your app grows, you'll spend more and more time trying to bring context to your errors and until they are replaced by something else, domains are still the best way to do it.
Thanks for the walk though. Have you considered using grunt and Phantomjs for your tests? I'm just starting with TDD and just recently watched Rebecca Murphey's talk from 2012 https://youtu.be/OzjogCFO4Zo
[I'm so excited](https://majorasmask.neocities.org/)
I was coming here to say the same thing, love that feature in WebStorm.
For well-written code, the two VMs are about equally fast. The interesting differences are that the Dart VM is quite a bit simpler and it also generates less bloaty native code. It also supports faster startup via snapshots. SIMD can make some calculations up to 4 times faster (ES7+ should support it too). There are also fewer performance traps, which means that performance is more predictable. Until recently, the regexp performance was embarrassingly pathetic, but this problem has been finally addressed (1.9+). Also, don't forget that V8 is one of the fastest scripting language VMs. Being as fast as V8 means that it's drastically faster than PHP, Python, and Ruby. And unlike all those options, it has excellent tooling to boot.
You can simplify swap quite a bit. Look up Node.insertBefore, .previousSibling, .nextSibling, and .appendChild on MDN. (For a bubble sort, you should only need .insertBefore) There's no need to muck around with innerHTML. 
Sorry, it'll have to wait until tomorrow :)
&gt; Unless I'm missing something, that benchmark is using an almost two years old version of PHP. Coincidentally, I'm in the middle of updating those PHP measurements -- u32, u32q, u64q done; u64 still to do. edit: [Done](http://benchmarksgame.alioth.debian.org/u64/php.php#about). 
&gt; whereas 42.toString() doesn't work. &gt; 42..toString() "42" &gt; 4.2.toString() "4.2" &gt; .2.toString() "0.2"
"yet"... Canary is available for Windows since 2010
Or even `(42).toString()`
its here... http://facebook.github.io/react-native/
Why specifically Javascript? A developer's life is pretty consistent with any tool or language. 
Ah, I thought we were talking about javascript. 
PART 1 Many years ago, in the ancient days of "pre-Internet" BBS - Bulletin Board Systems - (1992-1994) while I was working as a Systems Analyst for a power utility company, I answered someone's request for info about what it was like to work as a Systems Analyst. Some "bright-eyed" college kid who thought he really wanted to "work in computers." Of course, I was there with encouragement and support! ;-) Here it is, completely unedited (as I just don't have time). I had a lot of fun writing it, even though every last bit of it is true to the minutest detail! . . GK&gt;You mentioned that you are involved with systems analysis. I am GK&gt;interested in the same field. Is it possible for you to reply privately GK&gt;so that we might talk about the field? GK&gt;I would be interested in finding out more about what you do everyday on GK&gt;the job. . . . I arrive at 0830 every morning. If I do not arrive exactly at 0830 every morning, I get an admonishment from my supervisor. "Getting coffee is on YOUR time... 0830, have your coffee ready, be seated, and be ready to start the day's work." (Incidentally, it never seems to matter that 0830+8.5=1700 but my day typically ends around 1730-1800. Nobody give speeches for staying late. They don't cut any slack either. Then I start my mail and my schedules. About half way through, I run out of coffee. While I'm away refilling my coffee, my supervisor calls and when it gets my voice mail, assumes that I must be late this morning. It then notes this for future admonishments. When I get back, I go in this order: 1 - Voice Mail 2 - Postit notes on the screen (now that I can see the screen:) 2 - PROFS Mail 3 - Company "bbs" mail 4 - Notes I sent to myself yesterday reminding me of things to do today. 4 - pink slips on the chair 5 - notes attached to rocks 6 - notes attached to the door with a knife. I don't bother to make "to do" lists anymore, I never "do" them as planned. Something always comes up that has to be done first. No matter what the priority is on your list, anything that comes in the door is the new priority. So much for a "priority list." Sometimes the only way I know a project is a priority is when it comes in the door and says, "I just spoke with your supervisor..." Whoomp! There it is! The new priority champeeeeeen of the world! So I dump TODAYS to do list in TOMORROW's in-basket and follow the new lead. When I'm done there, its time to actually DO some of the things on the "to do" list. I get ONE of the TWO "to-do" list from TODAY's in-basket. It's not actually today's "to do" list. It's actually the list that I dropped in there yesterday or the day before. I'll get to today's "to do" list tomorrow or the next day - we have standards and procedures to uphold here! Just now, the phone rings. It's my supervisor. It wants me to contact so-n-so user in so-n-so department and find out what the "opportunity" is. Once (JUST once, mind you) I asked what it meant by "opportunity" since I had never fixed anybody's "opportunities" before. When I fix problems they go away. Do we want to make the opportunities go away, or what? "When your car dies on the freeway, it's really an "opportunity" to experience some new thrill in traffic dodging", it explains (well, maybe that wasn't the example it used). Like I said, I asked only ONCE. I then got the "Corporate Human Resources Optimism Requirements Policy" speech. So, I drop the "to do" list into tomorrow's in basket and go see the user. The user has forgotten that there is a user manual that contains a clear, concise, and complete checklist (written clearly, concisely and completely, according to the "clarity, conciseity and completeness requirements policy of corporate commiunications) detailing exactly the correct method for executing an ALT-&lt;key&gt; key sequence. [blockquote] SECTION 5 - Paragraph 5.2.11 - Section "C" Subparagraph 90210 DEFINITION OF TERMS: ALT KEY: The key with ALT printed on it. "F" KEY: The key with "F" printed on it *** The correct procedure to follow to properly execute an ALT-key combination keypress sequence in order to establixh control and dominance of the computer is such: Locate the ALT key on the keyboard. On some keyboards there may not actually BE an ALT key, as in the case of the Sanyo (spit) MBC 550. If your keyboard does not have an ALT key refer the matter to Client Computing who will subsequently beat said Sanyo (spit) MBC 550 into submission. If your keyboard has TWO alt keys, and you are confused as to which ALT key is more perfectly suited to the task at hand please call User Services and they will send a psychologist up right away. After locating ALT key, place thumb of left hand over the ALT key without actually touching it. We will execute the complete process in a moment. Now locate the key that is listed right NEXT to the word "ALT" in the software manual. Occasionally, the key will be separated from the word "ALT" by a dash. Thus ALT-F does not mean, ALT key /minus key/F key. After you have located the second key, we will prepare to execute the key sequence in a "1 2 3" sequence. Non stop: 1 - Press the ALT key and keep it depressed until the completion of step 2. 2 - Press the second key. 3 - Release both keys simuiltaneously. FOOTNOTE ***: The '"F"' above should not be literally interpreted as actually containing the double quotes around the "F" character. The use of '"F"' indicates only that the "F" KEY should be pressed. See SECTION 9, Para. 9.0.8. Section "Z" subparagraph 74115 for a clear, concise, and complete description of the differences between the single quote "'" and the double quote'"' and their significance to this footnote. [/blockquote] This was all written by a previous sysanal who originally had written: "Press and hold the ALT key then hit the letter key. Release both keys..." but had made the grave mistake of asking the Corporate Communications office to "critique" it. This resulted in many months of meetings being scheduled and the final result is as you see it above. So I explain how to execute an ALT-Key sequence. Says I, "Press and hold the ALT key then hit the letter key. Release both keys." So, having extinguished THAT fire I return to my desk. I have a voice mail. It's my supervisor. It wants me to come see it right away. Thinking there must be something terribly important going down, I get my A.S.M. Paper tablet, and my SAS Institute pen, and rush right over there with my "Far Side" coffee mug, filled with fresh coffee and ready for the long haul. It says it wants to talk to me about a few complaints it has received regarding the location of my potted plant. I have place my plant on the wall at the atrium where it can get some light during the day and then bring it back to my desk at night. The atrium is the center of the building. The building is open and "hollow" inside the center, where it open's up to a skylight at the top on the fourth floor. All the office space and "bullpens" are arranged around this atrium on all four floors. I'm on the top floor, right next to the skylight. My desk sit's about five feet from the atrium. I put my plant on the wall there at the atrium. Someone has complained that my plant might contaminate the precious bodily fluids of the rented vines that hang over the edge of the wall on all four floors. Like my plant has some disease. Aside from that, I am accused of endangering people at the bottom of the atrium if my plant falls off. First, the wall is about two feet wide, and my little plant is sitting on the INNER 6 inches. Second, the center of the wall is a hollowed out trough. This is where they have planted the vines. So nothing is going to remarkably "slide" over this and topple off the other side. Third, at SECOND floor, there is a six foot inner ledge where small trees have been planted. Anything falling from here is going to land there; not on the ground floor. I am reprimanded and admonished for my lack of trust in corporate culture and safety training programs. I am assigned to remedial potted plant safety courses. 
it may be depending on your compiler, but x[y]; should just be syntactic sugar for *(a+b) in which case, you'd get a run-time error for trying to dereference a null pointer.
This does not compile either, though (in gcc): int main() { int a = *(0+0); } It works if I cast it to a pointer: int main() { int a = *(int*)(0+0); } 
This thread has been linked to from another place on reddit. - [/r/1P4] [/u/magenta_placenta geeft een idee hoe ons leven er uit zal zien](http://np.reddit.com/r/1P4/comments/30ebeb/umagenta_placenta_geeft_een_idee_hoe_ons_leven_er/) [](#footer)*^If ^you ^follow ^any ^of ^the ^above ^links, ^respect ^the ^rules ^of ^reddit ^and ^don't ^vote. ^\([Info](/r/TotesMessenger/wiki/) ^/ ^[Contact](/message/compose/?to=\/r\/TotesMessenger))* [](#bot)
Salary? $0. :D At the moment I develop in JavaScript since I think it has great potential and will become huger than it already is today.
I think you're right. It's getting a type error. I've always seen it done as 3["ABCDEF"] //evaluates to 'D' which doesn't have the problem of not being cast as a pointer.
just built a test project in react native! Wow this thing is amazing!
Dude... Hilarious post... But seriously, if this is your life you need to re-evaluate. Save up money for a month or so. Quit job. Sell everything. Move to Key West, or Australia, or Europe, or fucking someplace interesting. Put that cat to sleep. You don't need that shit.
This is a solid reply, thank you for this. edit: are you happy with your career? Do you see yourself moving onto a architect position or management?
I did that too, before I started working at a company, which does pair programming all the time. It is half as efficent and obviously no time to get my open source contributions done. Bloody disgrace. Good thing is, that they pay so well, that in 10 years, I could probably just go to early retirement and live off the saved up money very nicely for the rest of my days doing just bits of work here and there not to get too bored.
Well I was curious about the web programming paradigm. After messing around with html,css,js,php and sql. I really like it. I feel like there's more power to do more with these languages. I don't know, maybe i'm talking out of my ass. But coming from always coding and watching my output only on a console screen, gets old.
 &lt;TabBarIOS&gt; i thought it was cross platform
It is, both iPhone and iPad are supported. iPod touch too!
* 5:30- toss a coin to see if clients on the east coast remember that there are other time zones. Wake up if they forget about this state called "California." Things were easier when Arnold was the govinator. * 6:00- go back to bed * 7:30- wake up and have a quick little breakfast consisting mostly of the souls of dead children. All real programmers do this I'm told * 8:30- Off to work. Commute from coffee pot to desk in other room. * 9am- answer 20+ emails. all of which are questions related to setting up a time to have a meeting related to the single question that was asked on the previous email. Spend the next 1.5 hours writing emails slightly shorter than "Anna Karenina" about how we don't need to set up a meeting just for them to decide what text they would like on their call to action button * 10:29- Coffee * 10:30- Finally get to working on code, err I mean reddit. * 10:31- reddit is interrupted by client calling about email. I didn't realize that its a philosophical question about whether "learn More" or "call now" is the right choice. Client decides to put the call to action button in Russian... quote: "I just like the way it looks. It feels right" * 10:59 coffee * 11am- 15 minutes of actual coding. This 15 minutes will manage to break everything I wrote during the weekend (the only time when work can actually be accomplished)... don't worry though, the client will move his meeting up a week to later in the day to see progress. * 11:15- coffee * 11:16- decide to run through a tutorial. Manage to break the whole internet. * 11:30- Food. Usually leftovers. Albeit pretty good ones * 12pm- gchat dev friends. none are client facing, thus during the morning they have built an entire enterprise application in 3 hours. The stop me to apologize for their phone which has been ringing off the hook with recruiters offering them $200K jobs. * 12:30- 15 min of coding to fix what I broke after i had that "ah" moment. The code works! * 12:46- I lied the code is now broken. * 1pm- the code is now working. Just as I celebrate. I get a call from a client pitching me on working for free to build their new web app. And the punchline is "We'll sell advertising!" (I actually started telling custy's I wont do equity builds if they so much as say the word advertising in their pitch) * 2pm- Actual work. Since Coding isn't working. Content generation or necessary phone calls. * 4pm- Dev buddies show me the most beautiful piece of code they built in the afternoon. To fuck with them I stop everything i'm working on and go surfing. * 6pm- come back from surfing. Answer 2 or three emails.generate tomorrows leftovers and then real work actually begins. Headphones on, Drink in hand 7-9pm- [Balmer Peak](http://imgs.xkcd.com/comics/ballmer_peak.png) In 2 hours I manage to get 8 hours of work done. Lions are Tamed, Uprisings are quelled, all is right in the world. 10pm - As i have slipped into an alcohol induced coma, Dev friends show me that they have in fact received the worlds first nobel prize for Software. Fortunately so Drunk I don't even notice. Last 10 lines of code took 2 hours and look like one of those hideous cats from reddit was running all over my keyboard. 11pm- As I'm about to pass out, Client calls, must take call. My sober alter ego cringes knowing that I'm about to give away two weeks of work for free in this state. Fortunately client doesn't say the word "advertising" which would in fact get me fired. [Obviously this is a total exaggeration. lol. Just couldn't help myself. I do work from home and clients are clients, but I totally love my job. And Compensation (way over simplified, and I'm sure very arguable) for Dev jobs looks something like this" run O the mill website person $30k-50k, Junior dev $40K-$70K, Mid Level $60K-$80K, Senior $70K-$115, Architect $100K+, CTO = license to steal. If you are going to work for yourself knock off $20K because you also have to sell and do accounting and crap like that. Also inflate those numbers significantly in the bay area, and NYC. Drop them lower if you live in a place where you can talk about Jesus in public and it won't seem weird. (that doesn't mean Jesús either) 
by the way this was one of the funniest posts I've read in a while... hit me up @jppope
guess I'll wait for android implementation
Its more that I want hear from those that are paid well.
No mention of Android at all? Kind of a bummer...
That's literally how i feel right now. I feel like the management route is the easier way out with a higher paying salary. This is all from speculation. I love coding but im not very good at it.
Is this what irony means?
Quasi-CSS Solution: https://jsfiddle.net/euyxnvrz/4/ JS Solution: https://jsfiddle.net/euyxnvrz/7/ 
Its not write once run anywhere though. There are different native components for each platform.
Nobody pays me to program. It's not my job, I just wanted to learn it because I found/find it interesting. And because I'm on the web a lot, I wanted to learn how to create web pages and control them. 31, .8 years 
Please plenty of people are living like this.
Yup yup yup. Not a dev here, and even less in js (what am I doing in this subreddit). But working in research, and doing some code too, pretty much my average day too.
Anybody know any VS extensions for this type of thing?
You shouldn't be downvoted; this I imagine is a common misconception for someone who doesn't know what it is. It's not cross platform. It's a learn once, write anywhere model where there are 2 distinct libraries for android and ios in which react components map directly to their native counterparts. In other words, this is completely different from cordova/phonegap.
Yup. Some people actually enjoy more their routine, even if it's a life of misery, than being stressed by completely changing their habits. 
HOLYY SHIIIIIITT!!!
Um, please don't use this: - It's not as clear what your code is doing - It breaks at 2^31 - It gives _wrong results_ for negative numbers Even if not for the last 2 points, if you _know_ you have numbers between 0 and 2^31, it's rarely worth the optimization unless you're actually processing shitloads of numbers. Maybe if you're doing some ProjectEuler stuff in node [edit] Fixing the code to account for negative numbers makes it half as fast as `Math.ceil`: http://jsperf.com/doublebitwisenotceil/3 (and much uglier)
ok thanks I found it but what do I change to make it not pop up (sorry, have no idea what I'm doing... obviously).
The problem is that the Java's security model was broken from the beginning. For it to work properly, it requires that every class in the standard library obeys all security restrictions. This is a pretty daunting task to say the least. A large portion of the java updates have been dedicated to fixing holes that malicious code ran on the jdk can poke through to eventually gain full system access. The big problem with the JVM and JVM based languages is the fact that the JVM has too much system access. The reason javascript works here is because it was designed to have very little access to system resources. It was effectively sandboxed from the beginning.
Remove the alert or change it to console.log, just in case someone else needs it for some reason 
I'd store the code on the file system, and store application metadata in the database. The code must: 1. Be CommonJS compliant 2. Export a function with a known signature. (Document the interface) 3. Document where the code will be stored (eg /var/myapp/extensions/username/file.js) 4. Document the path to node_modules, and what will be in node_modules Once those technical issues are out of the way - have a damned good remediation plan for when a user accidentally or maliciously messes up the system.
You posted it on /r/javascript. If I don't point out that it's a bad idea, _someone_ is going to start using it, experiment or not. As it is, people may start using it without reading the comments :/
That's a bit aggressive. I had a chat with vjeux about it at React Conf. They know Android is something they want to tackle, but I wouldn't set your expectations earlier than the end of the year. If it ships before that, awesome, but if they expected to have something "in the near future", they wouldn't have shipped iOS only.
flux is the rest, https://facebook.github.io/flux/
right, less scaffolding is best.
maybe they can help you over in /r/explainlikeimjive
Because `[[]][0]` is referencing the internal `[]` array which has a location (within the outer array). Basically it's the same as the difference between `++5` and `var x=5; ++x`: `++[]` doesn't work because `[]` isn't "saved" anywhere. With `[[]]`, it is. Sorry, I know that's crappy phrasing, but hopefully you can make sense of it :)
Out of curiosity, are you a JS developer?
The contents of the verse(s) you quoted exceed the character limit (6000 characters). Instead, here are links to the verse(s)! - [Colossians 0', ' 2 (ESV)](http://www.biblegateway.com/passage/?search=Colossians%200',%20'%202&amp;version=ESV) - [Colossians 0', ' 2 (ESV)](http://www.biblegateway.com/passage/?search=Colossians%200',%20'%202&amp;version=ESV) - [Colossians 0', ' 2 (ESV)](http://www.biblegateway.com/passage/?search=Colossians%200',%20'%202&amp;version=ESV) *** [^Source ^Code](https://github.com/matthieugrieger/versebot) ^| [^/r/VerseBot](http://www.reddit.com/r/versebot) ^| [^Contact ^Dev](http://www.reddit.com/message/compose/?to=mgrieger) ^| [^FAQ](https://github.com/matthieugrieger/versebot/blob/master/docs/VerseBot%20Info.md#faq) ^| [^Changelog](https://github.com/matthieugrieger/versebot/blob/master/docs/CHANGELOG.md) ^| [^Statistics](http://matthieugrieger.com/versebot/) ^All ^texts ^provided ^by [^BibleGateway](http://www.biblegateway.com) ^and [^TaggedTanakh](http://www.taggedtanakh.org) 
No. Hell no. It's not "paid well" because of some universal law, it's paid well because it's a good way to add value. In general, if the state of programming is such that it can be at all fun, someone, somewhere, will be making a ton of money off it.
Why does it matter? if you write code like that you are part of the problem
The comments already posted make sense, since [the prefix increment operator calls PutValue](http://www.ecma-international.org/ecma-262/5.1/#sec-11.4.4) and [PutValue throws a ReferenceError when the argument is not a Reference](http://www.ecma-international.org/ecma-262/5.1/#sec-8.7.2), but my Firefox 36.0.4 chose to throw a SyntaxError instead: ++[] SyntaxError: invalid increment operand IE11 throws a ReferenceError though. I don't have other browsers to test at the moment.
Check the PATENT file
 function isSarcasm(statement){ return false; } Don't be like that.
It's not a framework for making mobile sites, it's a framework for making mobile apps. They never claimed this would solve responsiveness issues.
Reading about primitive wrappers would help on this. 
* 10:00 - Get to work and head immediately to conference room to make Scrum * 10:15 - Look at email and JIRA tickets * 10:25 - Get breakfast burrito before the cafeteria switches to lunch * 11:00 - SVN Update web project and mvn CLEAN INSTALL * 11:05 - mvn jetty:run * 11:15 - See that Web App won't start up due to Compilation problem and mvn CLEAN INSTALL everything * 11:20 - SVN Update all libraries and mvn CLEAN INSTALL * 11:25 - See that Jetty will still not start up without error and delete local repository files and mvn CLEAN INSTALL everything and Jetty:run * 11:40 - Finally get Jetty up and running * 11:45 - Replicate problem after IMing functional team member * 11:46 - Identify problem start coding in JavaScript/Java/HTML/CSS * 11:50 - Finish coding problem and restart server * 11:55 - Verify issue was fixed and check in code and update JIRA ticket * 12:00 - SVN Commit, which results in a SVN Conflict * 12:15 - Revert file and reapply changes and retest merged code to confirm problem is still fixed * 12:25 - Successfully SVN commit files * 12:30 - Lunch break * 1:00 - Check tickets to see if there are any more tickets to fix see nothing * 4:00 - Get to 200th posting of Reddit Front Page and sharing stuff on Facebook, Surf the web, pay bills, talk with coworkers * 4:30 - Bored, decide to try to learn yet another JavaScript framework * 4:45 - Get big ticket assigned to me * 5:40 - Figure out what the problem is and debug the cause * 5:45 - See that underlying code needs to be fixed and refactored * 5:50 - See the office is quiet and empty and leave with work laptop * 11:30 - VPN into work from home and finish coding a solution while refactoring some code * 1:30 am - Check in code easily since no one else is working code
Oh, I didn't even think of it as an empty block! I thought of it as an empty object... Thanks, this actually makes more sense to me!
&gt; In other words, this is completely different from cordova/phonegap. Closer to [Rubymotion](http://www.rubymotion.com/), no?
Relax guy
IANAL so could you please elaborate on what you think we should be aware of?
see http://apprenda.com/solutions/multi-tenant-service-applications/ Will handle multi-tenantizing your app on the server side, which is where it matters. The portals for Apprenda are built using AngularJS.
I read that as: if Facebook should happen to have a patent covering anything in the software (not saying they do), they grant everyone in the world permanent royalty-free rights to do anything they want with the software - the only exception being anyone who tries to sue Facebook in a patent claim.
Actually Tom Occhino showed an Android device running a React Native app on stage at F8 today. IIRC it was the Facebook Ads Manager app for Android, not yet released. The app seemed fully functional UI-wise.
Christ, some of these are elaborate. My day begins ~9:30-10am, I really just have to get to the office in time for the daily standup 10:30am - Daily standup, give report on yesterday's development and what I'll work on today 11:00am - Coffee, go through email (personal + work), check any bug reports / code reviews, check RSS reader 12:00pm - At this point I'm usually working 12:30ish/1pm - Lunch, usually with the rest of the team, giving some status updates to my CEO (who doesn't sit in on the daily standups) 2:00pm - I'll be seriously working on whatever, involves like a 3:1 ratio of work + slacking off 5:00pm - I'm winding down for the day, I might be in the office for another hour it really just depends who is in and if there is any pressing issue to talk about 6:00pm - This is basically my hard cut-off, only very high priority things will keep me at the office later I work at a startup making about market rate for someone with 2 years experience, maybe a little less, the difference made up in equity. I work with about 6-8 other people on a daily basis, most days I don't have any meetings besides the standup, when it gets closer to release time we go through design reviews and QA that takes more of my time.
30, and 11y as a paid programmer. I would absolutely still do it if it didn't pay well, but I'd be much pickier about who I worked for. Generally side projects, personal projects, and academic programming have been more fun than anything any day-job has had to offer. But side projects don't pay my bills. If nothing paid well, I'd still program (probably still as a career) but I'm not going to take a spirit-crushing enterprise job for minimum wage. I don't know what else I'd do, if not programming. Carpentry, maybe. One of the most disappointing things about programming is the long stretches of nothing to show. (Or doing important infastructure-type code that non-programmers just don't understand.) It makes me wish I could produce something tangible, and I think carpentry might accomplish that.
Copying my original comment: I really like React, but I couldn't find a good way to manage users. So I decided to port my existing [AngularJS module](https://github.com/lynndylanhurley/ng-token-auth) over to standard jQuery. The functionality is almost identical. I've also built a [Rails gem](https://github.com/lynndylanhurley/devise_token_auth) that makes this plugin work with as little configuration as possible.
i was wracking my brain to understand how either one of these works, but then I realized I was thinking in C. Doh!
9am to 5.30pm: JavaScript Haha, no, but really, the same as above, except substitute 'JavaScript' with 'meetings'.
&gt; I don't think "tar it up" is the simple solution you seem to think it would be You could just send the binary stream straight to the JVM. The browser wouldn't even need to know about its contents, really.
I'm pretty sure that when we say 'React' around these parts, we're all thinking of Flux as well.
...Better learn React. Quickly.
It doesn't take long to learn.
Maybe it's time you just accepted that undefined is not a function and move on. Have you tried calling something else?
Pretty much exactly this, but 10 years younger- 31, 10 years work experience
I would hope that React's component nature lends itself very well to sharing most of your UI across platforms. You can isolate the platform-specific parts in certain components, but for the most part your app's `render` function is write-once.
Sr. Node.js dev 10a standup at the office or via hangouts if remote (or just too lazy to get to the office by then) Standard work day can vary a bit. Most days I'm focused on producing new features or fixing a bug. This means a lot of time trying to stay focused with headphones on. People do love to come ask me questions when I'm neck deep in the stack though. About once an hour someone will pose a question to the room about some part of our existing system, or a hypothetical new one, and we'll all talk about it for about 5-10 minutes. While this interrupts our workflow its usually done only because it really helps the person asking the question. Those conversations can save a lot of time refactoring code later that was done without asking those questions. Other days I peer review code which other developers have marked as 'complete'. I make sure they haven't done anything stupid and sometimes ask that they add additional comments to their code to make sure this code is more widely maintainable in the future. This is also when we check to make sure no one is trying to sneakily add anything malicious and that the final product is meeting all the requirements put forth in the original proposal. Another part of being a senior dev is trying to share your knowledge. The team will be much more productive if 5 people understand a system rather than just myself. I often try to take time to explain complicated bits of our code to other developers rather than just saying 'oh i'll fix that'. That can be hard to do sometimes since sometimes its easier to just fix the one line and be done with it, and so I don't always take the rougher road. There isn't really a standard work day for me, so this isn't so much a daily output. But, I do feel its an apt description of what I do. I prefer to work from 11-11.30a until 8p. The later hours results in more quiet time where I can really get a lot of work done. I don't feel comfortable sharing my salary, but I know people at $50k and others at $150k, its all about how good you are and how much the company you are working for is willing to pay for you. Right now I'd say its rather competitive. Let me know if you have questions about any of this.
&gt; Drop them lower if you live in a place where you can talk about Jesus in public and it won't seem weird. (that doesn't mean Jesús either) I thought your post was average until I got to this part!
Wake up at 5:25am Have 5 minutes to go pee, take a swig of water, and get my ass down to the basement Second alarm goes off. Start working out. Third alarm goes off 30 minutes later. Go back upstairs and take one of my Famous 5-Minute Showers^TM Get Mostly Dressed^TM and pour a bowl of Honey Nut Cheeries^TM Eat breakfast while catching up on Reddit^TM Finish breakfast, head to bathroom to finish personal hygiene schedule: brush teeth, shave, apply deoderant, etc. Finish getting dressed. Get in my Subaru Crosstrek^TM and head to work. Arrive to work between 7:00am and 7:15am, depending on traffic. Walk past boss and give him a head nod because he's on his morning call with headquarters (in Paris), then sit down and get situated. Take a look at JIRA^TM and figure out the handful of things I want to get done today. Get a couple things done before my fellow developer walks in. Give him a head nod. Go 'till lunch working on stuff and sometimes chatting with coworker and boss. Eat lunch, usually a sandwich my wife makes me in the morning, plus a Gatorade^TM that I get from the vending machine in the lunch room. Never eat in lunch room because the warehouse guys always look at us like we're bourgeois. Pick at food while continuing to work on stuff but at a slower pace. Once food is finished, kick it into gear again until 3:30pm then immediately get up, say "It's quitting time!" loud enough so the stiffs in accounting can hear it and hate themselves for coming in at 9:00am. Leave office, get in car, come home to sexy wife. Get kisses. Sit down and play with our two kids, both Chihuahuas, then watch a movie/show or two on the tele with the wife. Get tired, go to bed, sometimes make the sexy time, then fall asleep. Rinse and repeat.
28 years old, 7 paid. I love what I do. I don't enjoy the politics (CS666, the worst lesson programmers must learn), the egos, or some of the culture (specifically, "brogrammers" are becoming a thing because it pays well). I program on my off hours because there exists vacancies in what exists that I have the tools &amp; knowledge to create, and I get a lot of satisfaction out of not only the end product, but also the process. There's something extremely gratifying about struggling with a difficult problem for a few days, and then having an "Aha!" moment that solves all your problems and lets you delete 40% of the code that dealt with edge cases that are now handled by default with a sane solution. There's a lower bound, though, because even though I'm well paid, I sometimes feel I'm not paid enough. I hate dealing with assholes with MBAs, who think they know what's best and sinking companies (not to be confused with capable businessmen/businesswomen whose nontechnical leadership is invaluable in creating a productive workplace and successful company). Or the egos of the idiots flooding into the field because it pays well and not bothering to actually be *good* at what they do, causing me to clean up their mess after they ignore suggestions and code reviews that explain why their code does not meet quality standards, and then leave because of a "hostile workplace". Or the glut of "idea people" who convinced investors to give then more money than they've ever seen in their life to go found a startup and somehow think that they can run the company however they see fit, in spite of advice from their investors, and think that "having ideas" is akin to doing real work to make a company succeed while totally ignoring that execution is a far more significant contributor to long-term success. And yet, despite all of my gripes, I can't imagine doing anything else. I have a degree in chemistry from a good school that I used for one year out of college, left, and went straight to programming. I get more satisfaction programming than from any other activity I've had in the last 25 years of conscious memory, with the exception of gaming. I do spend more time gaming than programming. There's just really not enough time to sleep...
TIL almost every developer has a very similar daily work life.
What would be a popular choice for the model/controller side of things if I wanted to make something with React Native as my view layer today?
complex in any way?
So you think they aren't going away any time soon? I've recently been tempted to use them but then I saw the deprecation message.
Bro... Development of any big application has a lot of moving parts. This isn't exactly unique to web development. As a developer part of your job is to constantly learn and adapt. No one thing does everything and it probably shouldn't be that way.
Nice. I thought it seemed a bit familiar to some patterns I used in smalltalk when doing an assignment for class. It's also a no duh for jQuery as well. I guess it just goes to show how important it is to have some sort of structure or pattern/categorization for knowledge. 
Coding to the console? What are you using? COBOL? ;-) But, I agree with you. I think HTML/JavaScript/Database is definitely the way forward for the next few years. 
If I weren't being paid to do it professionally and I couldn't find a way to monetize it as a hobby? Maybe. Maybe. It would really depend on the project. In a wake-and-most-code kind of way? Probably not. 
It's paid well because folks who are genuinely good at it are far and few between; it's a rare skill. As long as the gifted few are gainfully employed (and therefore harder to lure away) their value goes up. 
Not sure if it will help or not, but I wrote a small module that allows you to parse and stringify native types. Including functions. https://www.npmjs.com/package/json-native
remember the Huey Lewis song "sometimes bad is bad"? Only a few paragraphs into the first chapter and the man has already shown the other book to be just plain wrong. Thank you so much for the link.
Lol. How did he prove the other book wrong? (I haven't read the other one) No problem. Glad you found what you need.
I would urlencode the data and then just store it as a string.
That's just how math works. n^0 = 1 
I think you missed leipsfur's insight. You don't NEED to minify if the code you write is already as small as it can be. This approach has numerous advantages besides the usual reasons people minify: 1) takes less time to read 2) fewer characters = fewer bugs 3) quicker repository clones 4) fewer characters = write it faster 5) more code fits on the screen, so you don't waste as much time scrolling while you code 6) no comments to get in the way of the code's intent etc. 
IF you have basic understanding of React, react native is quite simple
In IRC (freenode, #reactjs and #reactnative) vjeux said it would be coming "in a few months", I haven't seen anything more specific.
Yes
Kind of. Only by the looks of it, RubyMotion is almost wrapping the native APIs 1:1, so you still need to read docs in ObjC/Swift/Java and mentally translate to Ruby.
Why did you implement your own sorting algorithm? Just use Array.prototype.sort. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort Also, iterating over those HTMLCollections is very slow. Finally, if you ask about some code, put a test case on jsbin or jsfiddle.
Doesn't solve responsiveness, different components per platform... What exactly does this thing do which other JS-to-native transpilers don't which would warrants all this hype?
PC gone mad. Murder is worse than rape, but nobody would object if he said "NAT killing" or similar. Rape is a terrible act, and also just a word. 
i just get the first 10 i can find that are &lt; 300 pages and written in the past year. 
 - wake up at about 30 mins before standup (or sleep through it) - brew coffee (freshly ground. coffee is great /r/coffee) - do standup over hangouts (if i don't forget to wake up first) - check emails, reddits, find some good videos to watch on yt@2x (like meteor/angular whatever) - try to remember what i committed myself to during standup - drag card into column - look at how bad it really is. these 5 min fixes usually become a day or 2 depending on how bad the code is - start "fixing" - if its really bad I'll tell the manager how bad - at this point i'm usually at a dead end because i can't read this atrocity. - git blame - do screenhero session with person of interest - proceed based on their feedback - hopefully can fix easily - commit and then go take a break or lunch or whatever (if its not already 5pm) - go out to dinner - come back sit on couch - watch some sports - wait for wife to go to bed - boot up computer - proceed to work on my own projects so i don't kill myself working with agile-produced code all day at day job - go to bed around 2-3am after feature release 
I think you should look into C/C++. If you start doing server side js, it can be really helpful to code certain functions in c after profiling to give a huge speed boost to your program. Apart from that, it gives you great insight into the lower level!
And it supports webpack now, actually theoretically it supports any command line tool you could use *cp* as the compiler if you wanted too ;)
I get up at 9, get ready and arrive to work by 10. Thats when our daily stand-up begins. We tell each other what we did yesterday and what we will work on today. Then I code until 11:30 when we leave for lunch. I come back, code some more and get done around 18. As far as coding goes, I have both the latest backend and frontend checked out from the repo and running locally using npm. I put changes in a separate branch and once I think everything works, I merge into develop, build to test environment and request code review and manual testing from my colleagues.
ASP.NET MVC, some work with .php now and then... poor you
Aha, that makes sense!
Try React Transmit. It's Relay-inspired but uses more powerful and generic Promises instead of GraphQL. https://github.com/RickWong/react-transmit
I was watching a video, where the speaker mentioned that URLs can be valid JavaScript, because the `http:` is just a label, and the `//` onwards is a comment.
Is the end of the year not the near future?
Alright, react-isomorphic-starterkit has been updated. It now uses React Transmit in a fully isomorphic way! :)
I think you want to check out the a run block, from the Angular documentation : "A run block is the code which needs to run to kickstart the application" It's commonly used to check if a user has a auth token.
Very cool. Can't wait to try it out!
Couldn't you use media-queries instead of the script? Have one for max screen height that does the changes you described...
Man..I'm trying to not be swayed by the hype, but I might have to dig into this.
Double-click on cross button (to close a window) boke the website... Parkinson test ..................... [FAILED]
Thanks, this looks good, I'll try it out!
This is part of a multi-tenant user provisioning system. Want to give them the ability to create additional custom workflows when a user is created... so they would receive a JSON object with user info that was just added, and can do whatever with it. Modify attributes and pass it back in before it's written to DB or call 3rd party APIs to trigger things on remote systems... As extensible as possible. Using the node vm module, I can sandbox the execution enviornment and limit access to native APIs, such as FS, but still allow access to $HTTP... thinking this should be safe enough where they can't really leak out and access the actual app/system.
isn't it that if u use media-qeries that it effects screen im watching, not taking a look how big wrapper is and then putting deferend style ? 
How did you learn your craft? Practiced a lot? Just thrown into a project involving js and you learned it on the way? etc
LOL, I must have been seeing things. Was a long day yesterday.
Ah, yes that's a good point. If you're going to mess people up on fundamental points, it's going to cause more pronounced issues as they go. Why build on a shitty foundation? Yeah, I've noticed that too. I mean, I hate writing docs as much as anyone but if you're going to share, explain your code or don't bother. There's far too much code out there for people to reverse engineer everything. And yeah, provide some tangible examples. A good example can eliminate hours of digging through docs.
If that's true, you might want to market that a bit more on the website. I thought this looked interesting but wasn't really looking forward to setting up Yet Another Config File (tm).
Just after React Conf, JSJabber had some guys from the React team on and they talked about this on the podcast. I think maybe in the future they plan to support Android but for now it's only iOS [http://devchat.tv/js-jabber/146-jsj-react-with-christopher-chedeau-and-jordan-walke](http://devchat.tv/js-jabber/146-jsj-react-with-christopher-chedeau-and-jordan-walke)
I wasn't 100% sure, but yes, I cleaned the cache and tried again, to no success. Sorry.
My question isn't obfuscated code, it's a reduced case demonstrating an effect I didn't understand.
Okay, so what about when you have: function createUser(firstname, lastname, dob, username, password, email){ ..... } Or, if you prefer: function createUser(userDetails // one object that still has all those fields){ } Do you typeOf/instanceof check all of them? When you say that "projects like Dart and Typescript seem extremely pointless", how do you feel about languages like Javascript that don't have manual memory management? After all, in C you can do manual memory management, so garbage collection seems "extremely pointless." And in fact, in C, you can't even directly manipulate registers! Assembly lets you do that. So really, even C seems "extremely pointless." Of course, leaving aside the obvious downside of the annoyance of having to manually typecheck every single argument, you run the risk of *forgetting* to manually typecheck an argument, which puts you in a position that's worse than static type inference. Any task that a programmer has to remember to do is a task a programmer will inevitably forget to do. This is why null checks are worse than non-nullable data types. Beyond this, you don't get generics in your manually-typechecked way of doing things, unless you have every object keep track of "I am a container of X type of things", then write your own checker for that from scratch. Then of course, all that stuff carries some runtime overhead (as does typeOf) instead of ahead-of-time overhead. This means that sure, *you* don't feel the (small) pain of running a preprocessor over your code, but your users feel the pain of a slower application. Those are just a few off-the-top-of-my-head reasons why static typechecking is more advantageous than doing manual instanceof checks at runtime. Now, on to the question of whether "projects like Dart and Typescript" are *actually* "extremely pointless", consider this: which browsers currently natively support: * Arrow functions * Template strings * Class syntax * `let`/`const` all of which are ES6 features (to say nothing of ES7's `async`/`await`, which is in Dart already and is planned for Typescript 1.5)? Both Dart and Typescript allow you to write code that uses these things *and* ships as valid ES5 that almost all (if not all) major browsers already support. So no, they're not "extremely pointless." Now let's talk about the assertion that new languages are "extremely pointless" just because you can cobble together an approximation of them elsewhere. If all developers carried this attitude, you wouldn't be writing Javascript in the first place, since you can cobble together an approximation of the most basic functionality of browsers in console protocols like telnet or gopher. And we likely wouldn't have even those protocols, since long-distance communication can already be done with morse code -- so why bother developing mechanisms for computers to automate that long-distance communication?
Yes - they suggest a tab indent of 2 spaces instead of the obviously-correct value of 4. Hence, mostly reasonable :)
That is the first JS style guide where there isn't anything stupid in it and I actually agree with what it says. The closest thing to a disagreement is single quotes only for strings, and that is only because I tend to mix them up myself. They even got `var` right which says less about them and more about the state of "JS culture". (I would have expected one `var` per line to be an obvious no brainer which didn't need to be stated.) 
It will work - if you set the body up correctly: body { min-height: 100%; padding-bottom: 20px; position: relative; box-sizing: border-box; } #footer { height: 20px; position: absolute; bottom: 0px; widht: 100%; } 
Use promises. Problem solved 
Just beware of support: http://caniuse.com/#feat=viewport-units
Nice work, I've also been experimenting with live editing in the browser, but the project functions more like self-hosted Google Docs w/ components at the moment (works offline, can "save" the pages as portable docs where anyone can open and re-edit). Chrome seems to be working its way towards having a native IDE similar to Amok perhaps, with DevTools and now [Chrome Workspaces](https://developer.chrome.com/devtools/docs/workspaces) being very functional as an IDE. When you consider the direction Angular and Polymer are going, it might all coalesce into something very streamlined as a whole.
using chrome 41
Near future to me is under 2 months.
&gt; Assign variables at the top of their scope. This helps avoid issues with variable declaration and assignment hoisting related issues. The two examples here sort of confuse me. In the first one, **name** is used in the if condition, so you might as well move the var declaration to the top since it's hoisted anyway, right? But in the second example, **name** is not used anywhere else, so you shouldn't? First off, it's sort of seems like a useless example, since there is no reason to declare the variable in the first place. And secondly, how is actually "bad" to have the variable declaration at the top of the function here? Maybe this needs a more realistic example for the second example, but I'm not seeing the point of distinguishing between the two cases. Or am I missing something?
Get with the programme OP. It -is- 2015. Use dev tools break on event on node
&gt; The closest thing to a disagreement is single quotes only for strings, and that is only because I tend to mix them up myself. Same, actually. One of the good things about this being on GitHub is that you can fork it to your project's / company's profile and modify it to put in place whatever standards you want. It makes a great starting point if nothing else.
Also, using spaces for indentation instead of tabs. You can have my \t when you pry it out of my cold, dead hands.
I have projects on github. The interviewers can see my code style before I ever walk through the door. If it turns out the interviews cannot read JavaScript and find my vanilla code too impossible to reason then I don't want to work for them. It also lets the interview have some idea how I prefer to work whether or not I would be a good fit for the team.
The "bad" and "good" examples on using arrays to build long strings are not equivalent. If the array is empty, the "bad" code will return `&lt;ul&gt;&lt;/ul&gt;` and the "good" code will return `&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;`. **edit** My PR was accepted :)
&gt; Hmm, seems ok to me. clazz or klass. I think that's the point - "oh wait, did I use 'clazz' or 'klass'? Whereas if it's spelled correctly, you don't have to remember which misspelling to use.
Well I've always use the word `clazz`. Really just by nature of coming from a Java background... http://stackoverflow.com/a/2530174/1243162 As long as you're consistent.
I'm kind of annoyed by the downvotes you're getting. I think it's a legitimate question as I've started struggling with depression since I really started getting into programming (coding more than 30 hours a week). Could be a coincidence, but I've read a lot of articles on blue light from computers screens lowering melatonin levels and causing sleep issues. Would love others input on the matter.
Why would you not be allowed to use indexOf in that example? It seems like the sort of question people ask just to feel smug.
I feel like you and I are on the losing end of this debate. Everyone's all spaces now. I'm always the outlier with my tabs.
a function can be stored in a variable... so how would you name it? Ok, camelcase. What if it can be a function or false? Still camelcase? Ok. What about a value that can be false or true? Now breaks
Hi /u/dustinhayes, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Because in my limited experience, no one actually goes through the extra steps, so in practice, you get a complete mess of styles.
I'm fairly platform/language agnostic. I used to get fervent one way or another - I sort of don't care these days. They are all tools, some are better than others at certain jobs. ASP.NET MVC and C# are pretty damn good. Visual Studio is the best IDE I've ever used. Its incredibly feature rich and all around fantastic.
You are using Chrome 41 sure, but are all of your users? In this case support is really good across the board but that won't be the case with every feature you want to use.
- Faster performing builds is its most unique feature. Checkout the video: https://www.youtube.com/watch?v=C-kM0v9L9UY However, it does a bunch of other things "nicer": - Easily export your projects to other formats. - Loading a config file is not a one-time cost if you are doing it for 50 different pages. And there's no configuration if you are loading from npm. Comparing it to webpack ... StealJS is based off the ES module loader spec. So any plugins or extensions written against the ES spec should work with StealJS automatically. This is a big "future-proof"ing reason to use it. Comparing it to RequireJS - RequireJS does not support CommonJS / ES module syntax. Also RequireJS can't load from node_modules automatically without configuration. 
&gt;Without running the code on a machine, what do you think that it'll print? Justify your answer. ArrayProxy.prototype.computeSum = function() { this.sum = 0; this.content.forEach(function(value) { this.sum += value; }); return this.sum; } console.log(myArray.computeSum()) I can't justify executing code that someone can't be bothered to lint.
well he's trying to say that it does not make much sense as (1) functions are values, (2) variables can reference functions, and (3) variables and functions declarations share the same namespace
Here's a way to achieve a sticky footer without JavaScript that even works as far back as IE 6 http://codepen.io/jamiemlaw/pen/Bnscp
I don't, but imagine I would so... how would you write it?
Agree that spaces should be used for alignment, but disagree with your interpretation. The .css call shouldn't be aligned, it should be indented. And the semi colon should be at the same level of indentation as the first line. $(ctx).click(function() { →$(this) →→.attr(...) →→.css(...) →; });
yeah, completely agree with your interpretation! this makes future diffs/patches not mess with surrounding lines that said, in my example I was trying to come up with a quick example of where to put spaces before tabs .. can you think of a better example than mine?
While many javascript interviews can devolve into minutiae I think coding exercises are still valuable in interviews. It gives you an opportunity to see how a person reasons through a problem and also gives you an opportunity to get a sense of what working with them would be like. If someone gets defensive when you ask them some simple questions about why they took a particular approach to a problem, is that really someone you want to work with?
I guess the problem is that you're not understanding what a *reference* is (e.g. variables) which can hold *values* http://www.ecma-international.org/ecma-262/5.1/#sec-8.7
Put beautification with all your style rules in either the build process, the unit test cycle, or in git hooks. If this were automated you shouldn't be going back to fix any of this madness.
Yeah that's pretty cool. I am quite happy that I found this opportunity! 
That line you're talking about: (window).resize(function() { OP is just missing the jQuery dollar sign. The following corrected line is perfectly valid: $(window).resize(function() { It's a simple [jQuery shortcut](https://api.jquery.com/resize/) for your suggestion of `$(window).on('resize', ...` As far as avoiding jQuery, it's preferable to attach an event listener rather than overwrite the global onresize handler: window.addEventListener('resize', function(){ ... }); So long as your resize handler is relatively simple, performance shouldn't be a worry, and you'll usually want the handler to be called for each resize frame anyways.
Paging people who complained about standard's leading semicolon rule to the thread ;)
Why can't you use parseFloat()?
It's an assignment
Adding an empty string instead of calling the method that's whole purpose is to return the value cast to a string is idiomatic JavaScript? 
The most convincing argument I've seen - and I don't really care about this rule either way - is cleaner source control diffs. Changing one line (the one you actually care about) versus two (to add / remove a comma on another line along with the one you're changing.)
35 ~10 years exp. Not sure if I'd do it as a career if it didn't pay as well, however I did take a 10% drop in pay to move to my current position as I was more interested in the work than the pay. But it still more than pays the bills, so take that as you will.
I think I want that functionality... Example, what if you recieved "100px", and you wanted to be able to parse that using my function?
For that kind of situation you could use [functional polymorphism from jsgui](https://github.com/metabench/jsgui/blob/master/js/core/jsgui-lang-essentials.js#L1331).
maybe use regex to match only numbers and decimals
It is open, see the gh-pages branch :)
Definately agree, I use Airbnb preset with https://github.com/jscs-dev/node-jscs and it's awsome.
Arguably! Hence why it's in the style guide. :)
Can anyone think of additional optimizations that can be made on the indexOf question? var myIndexOf = function myIndexOf(str, source) { var i = 0; while(i &lt;= source.length - str.length) { if (str === source.substr(i, str.length)) { return i; } i++; } return -1; } 
&gt; It's especially nice for nested ternaries: Nothing is nice about nested ternaries.
You don't need to use the whole thing. It's there, interested parties can look at it and use the stuff they like. Jsgui-lang-essentials is very small relative to the rest. There are advantages and disadvantages to this. It makes for compact code. It's slower (performance) than some other ways of doing things. What preprocessor could I use to get the polymorphism?
hmmm... **Array.join("")** vs **str += "some crap"** Ran some tests - string building is nearly twice faster than array.join()... Go figure.
I don't think "polymorphism" means what you think it means here. Hard to say though; could you provide a bit more detail about what you meant by "that kind of situation" and how "polymorphism" could help? If you're talking about generics, [Typescript](http://www.typescriptlang.org/Handbook#generics) and [Dart](https://www.dartlang.org/articles/optional-types/#generics) both support generics. If you're talking about method overloading (multiple signatures for the same method), Typescript allows for [union types and type guards](http://blogs.msdn.com/b/typescript/archive/2015/01/16/announcing-typescript-1-4.aspx), and while Dart doesn't appear to support overloading directly, [you can still fall back to conditional typeof checks](https://www.dartlang.org/articles/idiomatic-dart/#type-annotations). I would submit that having to constantly pass my function *and* its arguments *and* an array of something that a third-party library considers a type signature is *less* compact than simply writing function createUser(firstname: string, lastname: string, dob: Date, username: string, password: string, email: string){ ..... } or better still: interface UserDetails { firstname: string; lastname: string; dob: Date; username: string; password: string; email: string; } function createUser(details: UserDetails){ .... } which that lib doesn't seem to support (since there doesn't seem to be an obvious way to say "any Javascript object having this general shape")
&gt; to say nothing of ES7's async/await, which is in Dart already and is planned for Typescript 1.5 1.6, sadly... https://github.com/Microsoft/TypeScript/wiki/Roadmap But a prototype implementation is already in the repository and is excellent.
More evidence that everyone is crazy. Leading comma, best comma. ;)
This is the most correct response. But in reality there is a little more crying involved. 
Totally agree, we use airbnb where I work but changed the rule to allow the comma last approach rather than a new var per line, imo its a lot cleaner, and pretty easy to follow as long as indentation is correct (which is also enforceable anyway)
Actually, aligning with tabs is a fool's errand, and that's the whole reason this entire debate exists in the first place. Indent with tabs, align with spaces, and then everyone can adjust their tab width to whatever they're most comfortable with.
My point is that their advice says it should be the same: "Assign variables at the top of their scope.". The top of **names** scope is the top of the function. Therefore their advice would proscribe moving the assignment to the top of the function. I'm not arguing about whether it's a good idea or not, I'm just trying to understand what they are advocating, since the statement and the example seem to be at odds, unless I am misunderstanding it.
`new String(foo)` is such craziness (all boxing is crazy in Javascript), it makes me uncomfortable to see `String(foo)`
Sure it is. There is two success stories that I'm aware of, which is BrowserQuest (http://browserquest.mozilla.org/) and Bombermine (http://bombermine.clay.io/) Both uses WebSockets, which send data over TCP. There is no way to use UDP on the web.
Agreed, get/set in ES6 will be nice. 2% of the population uses IE8. If they can't use your website, tell them tough shit. The man hours added to support an old browser vs. a couple customers upgrading to a browser that works... the world has seen bigger problems.
It's just a weird analogy; it's not a wrong way of understanding variables. Hack Reactor recommends Eloquent Javascript, and they turn novices into full stack developers in three months so they must be doing something right. 
It's not, it's probably just that site normalizing the API across languages. `print`, etc are likely just wrappers for `console.log`
Apropos: I'm not objecting to the choice, but why does every major style guide for JS mandate single quoted strings unless anything else is absolutely necessary?
I'm inclined to agree with /u/ZyklusDieWelt, but [Processing.js](http://processingjs.org/reference/println_/) does have a println() method. Processing.js is based on the Java-based (or based on Java?) project [Processing](https://processing.org/), so it's not surprising to see. Of course, there really wasn't enough there to be sure of what it was though... EDIT: Zigged when I should have zagged with a link...
&gt; Personally, I like tabs for indentation and spaces for alignment. I personally thought this was the result of the Great Tabs/Spaces Wars. I'm astonished that this is still a thing.
I took a data scientist certification course where they recommended 8 spaces to discourage excessive nesting....dumbest thing I ever heard. Lost all credibility in my opinion. Four seems like more than enough...
[W3Schools](http://www.w3schools.com/browsers/browsers_explorer.asp) 1.2% [Stetic](https://www.stetic.com/market-share/browser/) 1.8% [StatCounter](http://gs.statcounter.com/#desktop-browser_version-ww-daily-20150325-20150327-bar) 3.4% [Wikimedia](http://stats.wikimedia.org/archive/squid_reports/2014-12/SquidReportClients.htm) 1.7% How's that for your asinine response?
 Object.defineProperty(Jedi.prototype, 'fight', { value: function () { console.log('fighting'); }, enumerable: false }); my best offer
You never built the administration part, I guess. For that you need to been able to take care of multiple tenants from the same application. At least your client side application need to know how to select the current tenant from a list. This in case an admin have grants on more than one tenant, of course.
Using a single quote makes (not) escaping html attributes easier: var template = '&lt;div id="whatever"&gt;&lt;/div&gt;';
I agree. The problem with allowing multiple `var`'s per function is you can't force them to be at the top with a style checker. If you force one `var` and require variables to be declared before used, you are golden. I have co-workers that don't understand JavaScript doesn't have block scope and that variable declarations are hoisted. Multiple vars at the top is much nicer for viewing diffs though, I do understand that. ES6 and `let` can't get here soon enough.
&gt; I would have expected one var per line to be an obvious no brainer which didn't need to be stated. Doesn't Crockford say to use a single `var` statement with commas in The Good Parts? I seem to remember thinking that was the gospel for a while before I started noticing how many times small bugs like they describe occurred: var items = getItems(), goSportsTeam = true; dragonball = 'z';
no, because the standalone type coercion isn't even necessary in the second 2 examples.
What if you use single quotes in HTML?
1) Use the handy profiler, which is very likely provided by your browser. 2) Use a clock. Though if it's crashing the browser, you've done something horribly wrong. You may want to reconsider some of your decisions if you're adding and removing a lot of div elements. There's probably a better (and simpler) approach. JQuery is also going to hurt your performance. Rather significantly, it seems, from your description.
Also appreciate how they reference other style guides (Idiomatic.js and Google's style guide especially). 
Agreed on the alignment thing. Why would I spend time hitting the space bar over and over again just because I renamed a variable and now the equals signs all "need" to be five more spaces out? Keep your code orderly, to a fault even, but aesthetics has no place in code formatting. 
http://www.theie8countdown.com/ Keep digging your hole dum dum http://venturebeat.com/2014/11/01/ie11-finally-passes-ie8-to-become-the-worlds-most-popular-browser-chrome-flat-firefox-continues-to-fall/ Here is one that says 17% as of end of last year.... I am not trying to be a jerk here....I just wanted to level-set with you....oh who am I kidding, yes I am.
I think you mean filter by color ;)
&gt; once you start regex reformatting Both Vim and Emacs have modes that do well with Python indenting rules, so as long as you have the right tool for the job, I'm sure it would be fine. If the linters can detect these differences, I'm sure that tools will be fine (especially since [Python exposes AST](https://docs.python.org/2/library/ast.html) in the standard library). Also, the long function name with two short args is a bad example. It's obviously not pleasing on the eye because of the imbalance of the text (at least to me). My original point though was that you are trying to state that your indentation rules are actually dictating you style choices. Not everyone agrees with that.
Nice sources. A blog and website with a giant number. How cute.
https://www.netmarketshare.com/browser-market-share.aspx?qprid=2&amp;qpcustomd=0 Here is 20%...we can play this all day. I should warn you....my middle name is Parker Bros....{ohhh Dad burn}
I was afraid of that with the length requirement. 
so this number needs to be short because someone will be typing it? after the form is filled? 
FYI, the Linux kernel coding style said &gt; Now, some people will claim that having 8-character indentations makes the code move too far to the right, and makes it hard to read on a 80-character terminal screen. The answer to that is that if you need more than 3 levels of indentation, you're screwed anyway, and should fix your program. &gt; In short, 8-char indents make things easier to read, and have the added benefit of warning you when you're nesting your functions too deep. Heed that warning. 
I mean aligning at all is a fool's errand, obviously it's not practical to align with tabs. But to abandon the flexibility of tabs for spaces *just* so you can align multi-line concatenated strings or whatever is foolish.
Well, he also recommends "use strict" and a linter.
Our team discovered and forked that repo sometime last year. Between that and Todd Motto's Angular styleguide for teams, I'm pretty happy with the code standards we have. 
Yea but how often is that important? 
That was a waste of time. "Meteor this meteor that" but no real substance. 
Maybe rude to inbox you like this (new here), but you asked for more: http://blog.templeton.host/javascript-splat-functions/
They don't rely on the same APIs tho, fb-flo does `inspectedWindow.eval(script)`. As for RHL, [Do what the author of RHL says](https://twitter.com/dan_abramov/status/581572953659305984) ;) HRM is useful, haven't said its not. Just saying these tools don't do the same things, we aren't aiming to compete but compliment. All for a better tooling ecosystem :)
You want to make the pull request?
This guide was clearly made for the actual current state of js sans polyfills. There are a number of techniques they prefer because of old ie compatibility. 
Yes our style guide enforces a single var. Functions should be generally smaller in size anyways, so it is not an issue. Also using array map, forEach, filter, etc reduce the need for iteration vars. Our CI runs grunt check, which is a combo of jshint/jscs. Before JSHint we had problems with people leaving the var keyword off loop iteration variables.
1? Just add a classname to whatever you're looking to animate. No library (but requires a modern browser): document.getElementById( 'foo' ).classList.add( 'animate' );
Thanks for the reply! I would follow it by asking how the interpreter remembers that the Array has a "place", but I think that's answered by /u/cerosrhino's response: `[[]][0]` doesn't actually evaluate to an `Array` but to a Reference to an `Array`, ie the result is not actually identical to `[]` as I'd thought. Unless I'm mistaken?
I think that many would agree Crockford has a tendency to allow his top priorities to completely overwhelm any secondary priorities. In this case he wants to ensure that hoisting doesn't muck things up, so he wants to ensure that every `var` statement is written (nearly) where it would be hoisted to, so he promotes a style that makes anything else impossible and accepts the fact that this style makes editing more time-consuming and error-prone.
But is fb-flo more than a glorified livereload tho? I mean **it is better** but at the core it is reloading resources, running *eval* is essentially reloading, its executing the source again.
Well... They *are* a nice indicator of needing to run the hell away from code containing them...
&gt; But is fb-flo more than a glorified livereload tho?I mean it is better but at the core it is reloading resources, running eval is essentially reloading, its executing the source again. Considering fb-flo does appear to retain some of the current program state using the devtools `eval`, I'd say yes. Granted, this is far from perfect (or robust), but it beats the Livereload full-page refresh + state loss approach. 
You shouldn't be bothered with understanding the fundamentals of the tool you're using in order to use it properly? That's a disturbing attitude to have, especially if you do this kind of work professionally, which I do not know if you do or not.
Not a reason... http://stackoverflow.com/questions/11054511/how-to-handle-lack-of-javascript-object-bind-method-in-ie-8
a millisecond here, a millisecond there... and you end up with a clunky choppy app. I'm against premature optimization, but it helps to know where the bottlenecks are.
God I hate that so much. Especially when there is a lot of variables defined, it is just plain unreadable.
How do you mean? Do you have an example of how this doesn't work?
Awesome, haha!
I work on a Web app that has 15 years of technical debt, over one hundred of devs have touched it, we've had our fair share of performance issues. Improper caching, no caching, over caching, bad 3rd party libraries, bad db queries, bad configuration, nested loops, synchronous tasks that should be async, those are the usual suspects, string concatenation has never come close to a bottle neck. 
Your comment was caught by the spam filter since you used a URL-shortener, you'll need to repost it without using that for it to be seen.
[Airbnb doesn't support IE8](https://www.airbnb.com/support/article/446) so I don't think it's quite that clear. They seem to knowingly use modern features that IE8 doesn't support. 
 function inbox(messages) { messages.unshift('&lt;ul&gt;&lt;li&gt;'); messages.push('&lt;/li&gt;&lt;/ul&gt;'); return messages.join('&lt;/li&gt;&lt;li&gt;'); }
Nice, I wanted to get started with React Do you have any other good resources about React?
Doing `String(foo) instead of '' + foo` is casting to the String Object as opposed to working with a simple string literal, which is going to incur a performance hit. [Jsperf](http://jsperf.com/heera-string-literal-vs-object)
You are obtaining the values from the forms immediately, even though they are empty. You need all of this to happen inside a function that is called when you click the button. You are putting *string* values ("day1", "day2"...) into the array `price`, not the integer values. The `new Array()` style is not preferred. Consider something like this: `var price = [day1, day2, day3, day4, day5];` I don't see where you are defining `S`. Your third loops is iterating over `k` but you are only using `i` to fetch values. While it won't solve everything, tools like [jsHint](http://jshint.com) offer some help to overcome common coding errors and help you produce better code.
the prototype question's answer is somewhat wrong too. While it does have that effect, its not what it is. He should really visit the book call you dont know js, objects and this. event question is leaving half of the answer off. EDIT: on another fault, the author fails at being sr javascript developer. This is not senior level. This is mid level not connecting all the dots. declare class i would argue, but i would say "good enough". 
Thanks for the help. I fixed the little mistakes but tbh I'm still lost. 
Good to know. I prefer cleaner code over more peformance by default, and optimize when that is required. It's the same reason I use forEach instead of for by default. By the way, the Jsperf link you posted doesn't directly apply to what we're talking about. [Here's](http://jsperf.com/heera-string-literal-vs-object/9) a better comparison.
&gt; tab freaks I like that. I'm using that. 
I suspect he has a motivation, he just didn't spend the time fleshing it out into words. He's one of the core contributors to Ember.js. I strongly suspect that the motivation for this proposal is to address a problem he's sees with trying to move Ember to ES6 classes.
thank you so much. This is a great help. I have one more question can I use a loop to get the answer after clicked for 12345 to show [1,2,3,4,5]? 
I've banned ternary usage except for the trivial case you've cited. The code is getting a lot more readable now. (someCondition) ? executeApi() : variable = assignSomething; var myBool = (testVarExistance) ? null : testVarExistance; to illustrate some choice examples. Don't get me started on 3 levels of nested termaries. 
The idea is that the guide wants you to NOT mix them and pick a pony. Either one has pluses and minuses but it's kinda annoying to deal with both.
I'm not sure I understand you but I guess you mean you want to format the answer a bit more readable, right? Well, a simple fix would be to add a `,` here: span = span + S[k] + ","; But this will get you something like `1,2,3,4,5,` with a final ugly comma. An alternative would be http://jsfiddle.net/L6pe4bw7/42/ ;)
Nope, doesn't work :(
One thing missing is guidance on functional expressions vs deceleration, while they state the difference they don't do anything explicit like // bad var funName = function () {}; //good function funName () {} it is very confusing when you get code that mixes the two styles. (my interal style guide is var funName; if (something) { funName = function (){}; } else { funName = function (){/*something else*/} } function weDeclare(){ // all things equal do a declaration // to avoid circular dependencies among functions } [].map(function nameThisToo(){});
This looks very cool, and gets a lot of stuff done for you, but I would caution against using these sorts of libraries for anything remotely complicated. For me it was isotope, which was made by the same guy. I was also using angular as well, so the mix of the two probably contributed to my frustration. If you inspect the elements, you'll see that every element is absolutely positioned and the container has it's height set on the element. This means that you're forfeiting regular document flow. If the container changes dimensions instead of the window, you have to manually tell the library to update it's layout (unless the library is using element queries, which requires a polyfill atm). If you add or remove items, you need to tell the library. If you change the size of one of the items, you need to tell the library. Also keep in mind that all of these animations have significant performance impacts, especially if you don't configure it correctly (however this is just the library developer needing to pick sensible defaults). It's a very cool effect, that get's you wow factor wins very quickly, but be careful about when to use it, because it may bite you in the ass as it did me.
What are you doing in a var block besides defining variables? You can still debug named functions if that's what you're asking.
Looks like the questions have been resolved. I'm [adding my edit](https://jsfiddle.net/_sir/1tm46dss/3/) in case you find the comments helpful. Good luck!
Thank you very much
Constructor function would probably be my preferred term. It doesn't behave like a 'class object' in other languages, and assigning properties to it isn't going to affect instances (again, unless you manipulate the prototype itself, or some other aspect of the function). Really, all functions can be constructors, they just have nothing interesting in their prototypes yet. For example, this is perfectly valid, and gives you an object (with nothing in it yet): var a = new (function() {}); or var a = new (function() {})(); So _technically_ its just a function that happens to have a prototype, but for the sake of making yourself clear, I'd keep it simple and just call it a constructor. 
Whenever I'm using prototypes in this manner and have to document it, I go with the terms: Class, constructor, properties and methods. These terms are familiar and people will most likely instantly know what it's all about. For example: "Every class inheriting from the Handler base-class has these methods available"
&gt; constructor, properties and methods Same opinion over here. I have just searched what Crockford says on that since a lot of JavaScript devs refer to him when it comes to conventions. &gt; First, we will make a Parenizor class that will have set and get methods for its value, and a toString method that will wrap the value in parens. [S](http://www.crockford.com/javascript/inheritance.html)
Ping, your implementation does not function the same way as the original. It adds extra empty list items, plus it assumes an array of strings is passed, whereas the original handles an array of objects with the message as an attribute. Cliath, I agree, this example was not the best, and they are clearly violating their own principles by not using push(). Overall, I find the document to be OK, however, I would like to see some rationale added and may be some pros and cons type of discussion.
I have always been programming as a hobby and to me it's just like any other hobby - it makes me happy when I make something even if it's kind of silly. I don't think I have any depression/anxiety issues :)
I don't understand your 7 character limitation... But if you really want uniqueness, you need a handy dandy [UUID](http://en.wikipedia.org/wiki/Universally_unique_identifier) generator. It's a 128-bit string that is incredibly unique. It's so unique that you are more likely to be hit by a meteorite than creating a duplicate. This is not a completely proper GUID generator, but it's pretty close and simple. function s4() { return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1); } function s4N(n) { var s = ''; while (n--) { s += s4(); } return s; } function uuid() { return [2, 1, 1, 1, 3].map(s4N).join('-'); } uuid(); // ee74640a-f9e6-6059-00fe-fba6859982f9 uuid(); // 81bf1e1a-2ede-dfac-30cc-fd313e7a7a14 uuid(); // fdc8dd85-d2f7-6d13-4a34-385ae7165ef4 [Proper version](https://raw.githubusercontent.com/broofa/node-uuid/master/uuid.js)
That's one of the two reasons why I ask: They're not to me and other people on certain 109-key layouts.
Note my style: I did not get angry, I did not indulge in public shaming. I just pointed out that this is bad taste (and not “just a word” for many women). The problem is subtle, but that’s all.
same question here. Looks cool, i just don't understand the use case.
You could write a mysql/postgres adapter if you were so inclined. It would be tricky but not impossible. 
I think this is valid. Alternatively you could provide an onError or on('error') type callback mechanism that the user can hook into. This would give the option of highlighting errors but suppressing it unless it's utilized.
First tip: the only thing java and javascript have in common is the name.
Well, I still believe making some demo apps with Meteor is a good way of starting to learn the platform, instead of waiting for official SQL support. If you want, it seems like there are some members of the community making adapters for SQL (https://github.com/numtel/meteor-mysql), they'll probably be happy if you help! But sure, if SQL is a must-have, then it's totally understandable :-)
https://github.com/DarkMarmot/catbus
Also, if anyone has much experience with React/Flux, I'd be curious to know whether this would require much modification to support React as a Flux stand-in?
Looks promising, although es6, and especially es7 is not what I would expect.
works for me with .hide() http://meteorpad.com/pad/C899nYAYfMihLkESy/Leaderboard edit: a really good place for help is the channel on irc
Also check React.js out...
Looks like there is a bug... after 25k rolls, go to Jail = 0.000% And also, it looks like when you roll a double it doesnt record the position you land on between the rolls else if (dice1 == dice2 &amp;&amp; dice3 == dice4){ totalroll = dice1 + dice2 + dice3 + dice4; } ... position = position + totalroll; And now add prices, houses and hotels, to see which positions is most valuable for the money :) But pretty fun, some facts I didnt knew, maybe thats why im so bad at monopoly
Another interesting option is to use pure ECMAScript 6 (the upcoming version of JavaScript; ECMAScript 5 is the current version), e.g. via [Babel](https://babeljs.io/), which transpiles ES6 to ES5.
How about "object type"?
The thing that confuses most people from Java or C-derived languages is probably scopes. Java/C have block-based scopes while JS has function-based-scopes. You should read about them first and skip the other basic content, since you are familar with the basic concepts of programming anyway I think.
Tip: don't compare with jquery /d3
Hi /u/jimmmerr, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Well that's exactly my point, and why we wont use graphql at my work now. Because we can't afford to rewrite our server that way. That doesn't mean promises (or any other async javascript pattern) are better. It means they're fine to settle for when your server can't accommodate proper relay/graphql. I don't see any argument whatsoever about this promise pattern being preferable, though, unless someone can enlighten me. It's just not that bad to settle for.
Class is a concept, a pattern, an approach - javascript (until es6) doesn't have a separate language construct for creating classes but it has all means you need to utilize such approach. So, yes - it is a class and it's fine to call it a class. You can instantiate it, it will share functionality and it uses constructor method to set the basic state of that instance - by definition that's a class. It doesn't realize concept of classes in the way C++ does - but it does not prohibits them either. The reason why we are allergic to classes is because it's very hard to explain what a prototype is to a `c++ class` based mindset. However. JS programmers are no longer a minority. [A documentation of a library driven by a great JS programmer and authority](http://threejs.org/docs/#Reference/Cameras/Camera) ps: *Wikipedia: In object-oriented programming, a class is an extensible program-code-template for creating objects, providing initial values for state (member variables) and implementations of behavior (member functions, methods).* 
Thanks, I got it to work! But I got one more problem, it got deleted so fast that it not shows the animation. Is there a command that it first wait till the css animation is finished? 'click .delete': function(event){ var x = this._id; $(event.target).closest("li").addClass('magictime puffOut') Backlinks.remove(x); } })
thanks on the links
bookmarked and will sure check it out when what I'm currently reading fails (JS the good parts) it's always good to have more than 1 resource
Thanks! I wasn't aware of them term.
No, I shouldn't be bothered to fiddle with implementation details, because the tool I'm using handles typical use-cases poorly. And yes, long lists of items is a *very* common thing on the web (infinite scrolling and mobile layouts in general). That's why I'm using a framework in the first place, so I *don't* have to think about low-level details like updating the dom and when to do it. Humans can only keep a certain amount of things in short-term memory at once, so needlessly making me think about stuff is not helpful. I'm glad they acknowledged there's a problem instead of pretending everything is fine like I've seen way too often in other cases.
Dependency injection is basically always useful, and in my opinion it should be used in any major project. I think that a depency injection manager for JS is pretty exciting - especially since this looks like it is small enough to be used client-side. As to why dependency injection is awesome, for one thing, it makes unit testing a lot easier, and in my opinion it also helps to make responsibilities of different classes and objects more clear.
Your editor (or jshint or jscs) should be warning you that you have a global assignment. I prefer multiple vars myself, most minifiers handle them, but seriously this is a non-issue
Yaaay its working. Thank you, u the best! :*
no prob, good luck
To elaborate on /u/g3bj45hg34857, `ActiveXObject('MSXML2.XMLHTTP')` is the IE6 compatible fallback for XMLHttpRequest. XMLHttpRequest wasn't supported by IE until IE7: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#Browser_Compatibility To apply this to the example, the `xo.open` opens a new XHR and downloads the content from one of the sites (e.g. `liveoakresort.com`). Then `ActiveXObject("ADODB.Stream")` writes to disk and `ActiveXObject("WScript.Shell")` runs the script on disk. An example full URL should be: // **DO NOT FOLLOW IF YOU ARE IN INTERNET EXPLORER** http://liveoakresort.com/document.php?rnd=1981&amp;id=5555525E16100907070B1D2406010808170B11100C4A0A0110 but they seem dead =(
Thanks. Guess a hard dependency on an IE6 API is one way of duck typing your vulnerable OS for whatever it downloads.
Thats true, still kind of obvious. Developing windows apps on osx is a pain too, its getting better with microsoft beeing more open. Still, building for the platform usually is best done on the same native environment. 
Ah sorry, I wasn't clear. ActiveX is supported through all of the IE family (including IE11). However, it's most prominent from my perspective as the IE6 fallback: https://msdn.microsoft.com/en-us/library/ie/dn423948%28v=vs.85%29.aspx This means it's more of an IE attack than IE6. Also, I am pretty sure it was in IE5.5 but not sure how much earlier.
If you aren't talking about the code itself, "Handler" is a class. "Constructor function" is something you use if you explain this JavaScript construct to someone.
https://hacks.mozilla.org/2013/03/webrtc-data-channels-for-great-multiplayer/ http://www.html5rocks.com/en/tutorials/webrtc/datachannels/ keep in mind webrtc is mostly for peer to peer communciation (and also has audio/video channels), there are node (and other server side) libraries that can act as a peer, though.
try meteor
[MDN docs for Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date), of particular interest may be [method `getHours`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getHours). Also, you may find /r/LearnJavascript interesting or useful.
Nice, didn't even know about it's memory consumption. "1000 modules I don't need" - agree with that. I might need them eventually, but right now, I don't even know what they do.
I really like the idea of "paper first". However sometimes I just want to turn on editor and write some code to still feel like a programmer :) I am ending up over-thinking everything and getting lost in all those possibilities you mention. I feel like I know that I can start with simple stuff anytime.. ignore all the tools, but simultaneously I start thinking if I will ever understand them if I will keep avoiding them like that. So I try to give it a shot, get lost and lose motivation for given day :) That's kinda silly mix of opposite ideas/solutions.
In this specific case I wanted to practice/learn Angular, so I came with imaginary website I would like to create. For start, there's no need for real server, but then I start imagining how I mock data in json or using some cloud db services, so I can as well start with db and server. I guess I am somewhat over-engineering it again and not knowing integration of all needed components will basically make me pick a framework that brings all the unknown stuff anyway and makes my project bloated before I even start. Your opinionated advice makes sense and I probably need to do something like that. I also finally need to google a bit about node deployment, because I am still wondering how do I deploy angular app when angular lives inside of node_modules folder, which doesn't seem like something that should live on the server to me. Ultimately, I would like to be an expert JavaScript developer. I am already working with JavaScript for about two years, but I still feel like I am a beginner and miss so many things related to modern frontend stacks.
Well, that's also an option, but that probably won't help me with general issues I am facing.
&gt; Gulp, Grunt These are just task runners. Minify, concatenate, compile sass, reload browser, run browserify, whatever. All they do is automate stuff for you and watch files for changes. They take 20-30 mins to learn (in Gulp's case at least) and save you a lot of time. Little to no cognitive overhead and better than "learning shell basics".
Just use "class". ES6 is introducing `class` keyword to streamline the kind of code you have in your post, so you might as well jump on the bandwagon now.
Thank You
If you just want to learn Angular, don't look at Node, Express, Mongo, whatever. Just use Angular man, just like you did with jQuery. As for back end data to play around with in your Angular app, look into Firebase, backend as a service.
Let me preface this by saying this isn't really meant as disagreement, more so an observation on practicalities. It's useful to keep the distinction between prototypal and class-oriented languages. However, in my opinion a JavaScript object with a prototype and a constructor function is very much analogous to a class in C++. For instance with the MSVC compiler, class instances are basically normal structures with a reference to a virtual function table ("vftable"). These can be nested for inheritance, just like the prototype chain can be extended in JavaScript. Overloading is often done by overwriting function pointers in the vftable, similar to how members can be overwritten in JavaScript objects. When a member function is called from the vftable, a pointer to the class instance is simply passed as the reference to `this`, just like invoking a member on an object is sugar syntax for `fn.call(object, ...)`, where `fn` is the first hit in the object's prototype chain. A major difference is (of course) that the dynamic typing system in JavaScript allows objects to be modified at any time, including prototypes. With this also the fact that traversal of the prototype chain is performed dynamically, in contrast to how it can be determined at compile time in C++.
Thank you for posting this. It sums up a lot of the frustrations I'm feeling. This in particular: &gt; How do I deploy this? In old days, I was just able to copy the files to web server and that's it. Now? I have no idea. I'm lucky, because our team has a guy who is working out a deployment plan, but he also catches the blame when it's not working. I'd like a clear statement of how Angular is supposed to be deployed when there's a java/tomcat backend.
For some reason I feel that introducing this framework-annoyed person to *yet another* framework might not be the best way to announce/market your own framework.
It is incredibly expensive to introduce GraphQL into existing backends. Let alone that most companies simply do not have the time to implement technicalities for frontend needs. I mean you get a nice RESTful API client and that's it, happy data fetching. The powerful thing about promises is that they can do more than just querying. What if you want to fetch data into Immutable objects? You're in control. What if you don't want backend data, but rather a CORS request to a third party? No problem. React Transmit lets you do that, and puts more power into your components at a very small price.
Luckily for you there's now `class` in ES6, which isn't true classical inheritance but rather a formal convention for a common pattern of defining prototypes on a function and instantiating them. It provides subclassing with the `extends` keyword, constructor method, and `get`, `set`, `static`, and plain old inherited methods. 
As I wrote, ProJS is experimental. For more heavy development, tools will be needed. Still I believe this kind of new approach will become useful at least as a niche. The HTML template approach seems clumsy to me. Development of apps for Android and iOS can be done without such hybrid mix of templates and code, so why not the same for single-page web applications?
 &gt; (null).toString() TypeError: Cannot read property 'toString' of null 
Not hard to learn, but another barrier to entry and contributes to the "framework hell" the OP is describing. Which of these is easier for a newbie? watchify index.js -o bundle.js -d -v Or gulp, vinyl streams, and browserify's programmatic API? https://github.com/gulpjs/gulp/blob/master/docs/recipes/fast-browserify-builds-with-watchify.md Same applies to other tasks like LESS pre-processing: lessc main.less &gt; main.css Or minification: uglifyjs foo.js &gt; foo.min.js
I'm using a "MEAN" stack, except MySQL instead of MongoDB and I'm using Hapi from Walmart which is an API framework built on top of Express. BTW, if you ever need to build a simple Node API, Hapi is killer. It's quite powerful and very modular so the core include is pretty light, but they have maintained plugins that handle any needs a server may have. I don't use it for static content, as it's lacking, but it does have some basics covered there... As an API framework though, top notch. That being said, I tried starting with a MEAN build and some MEAN Yeoman generators... I agree with the 1000 modules crap. MEAN as a stack is fantastic, MEAN.io's build is bloated. I also don't like their architecture as my API doesn't necessarily serve individual pages like MEAN's module setup kind of assumed. So, find some frameworks you like that do what you need and start from scratch. You'll find that your overhead includes will likely be negligible when compared to the jQuery days. 
Hi, thanks for the response! While bower and like programs are very powerful, there is one drawback that I can see, and that is if you want to use a CDN instead of hosting the files yourself. Also, I believe that there are some people that would rather use a gui, like this site, than use a command line. If you are a programmer than you should be comfortable using a command line, but in the off case that you aren't, I feel like a website like this would help someone out quite a bit.
I could get down with what you were saying until the very end, "And sometimes I use Git." Are you saying Git falls into the same not-so-necessary category as things like Grunt? If so, whaaaaaat? 
Just setup a repo and some continuous integration system with hooks to your repo. Have a branch per environment (prod, dev, qa, etc) and when you merge the latest code into whatever branches it'll do a build and throw it into your server for you. 
Your comment is fairly consistent with any comment that starts with "Just". You skipped over every single thing that I actually need to know. As a bonus, you assumed that we don't have a push process that I need to honor.
That's a much simpler implementation than my by-character approach. I like it. However, it seems to be about 70% slower than [my approach](https://gist.github.com/huttj/fbe05e415b7f5974c44a), per [this test](http://jsperf.com/indexof-equals-vs-by-char).
if u like java, you should look at typescript. its basically just java.
&gt; Learn Design Patterns. That is the worst advice you could give anyone.
Forgive me for being picky. But I think react shall fall into the category of frameworks rather than tools. Git is rather a necessity than an optional.
Just pick something and learn it. If you don't know enough to prototype, you might consider following some tutorials.
Well it seems like it's up to whatever React components you use it with to subscribe to any events they're interested in in order to update their state when the data storage changes, or trigger any events. In that case, no modification neeeded, I'd think?
&gt;Polyfills are hacks that add weight to the page, not good solutions Just like every other code in your app... &gt;They also make code less portable since they require a compatibility layer. Hum? Less portable? If I Polyfills it runs on more browsers... I don't get it. &gt;I can see why they would want to avoid them. I would use them. So your code for `forEach`would still be `_.forEach(array, fn)` instead of `array.forEach(fn)`? I prefer the 2nd, because: - Most of the users has recent browser which already have `forEach`; - If they don't you make the polyfill; It runs a little bit slower, but it's the same as `_.forEach(array, fn)`; 
I agree with op 100 percent. But as a front end programmer for years who have been contributing this framework hell with yet another framework and yet another tool on the way, I want explain some. Firstly, frameworks and tools are entirely two different categories. So does the category "libraries". Libraries aren't that opinionated and they don't sit in the way by commanding you the way you roll. jQuery is a library. But projects like React, Meteor, and Angular, they are frameworks. One typical point of them is they draw lots of lines. And it's very unlikely that someone will be using both in their web pages. Tools on the other hand is much more optional. Grunt and Gulp, or even the ancient one, Make, are all task automatons. Mostly they are "required" because the syntax some projects were written in is not widely supported by modern browsers yet. There's a pre-compilation required. For the rest of the cases, it just because it seems more professional if the front end codes are all concatenated and minified. So to sum it up, here is the tl;dr. Most of the times tools aren't necessary, frameworks are mutually exclusive and they can be opinionated, libraries are you friends. Oh I forgot to mention bower and npm. There are ways to ditch bower and use npm as the one true way to manage packages. We won't be struggling for long. 
For the kind of projects I do, yes it does. I totally agree with you that version control is a must in any non-toy project however.
Thanks, this will be very useful for my next SPA.
The method described in the link is: Math.random().toString(36).substr(2,9) Which uses base-36 digits so my calculation is correct.
Would definitely recommend picking up TypeScript — Anders Hejlsberg of Microsoft and C# is one of the core developers. It's a statically typed, transpiled-to-JS language, and there's some talk of moving it natively into the VM. People who say you should forget Java are silly. Different design patterns, and JS tends to be a little less over-engineered than Java, but good programming skills are going to serve you well in any language. http://www.typescriptlang.org/
pretty damn addictive 
&gt; I miss the old days where I could just start with one HTML file, reference single jQuery file and start working on new app. There is no problem in doing it old school. If your app has a value it brings to it's users, that value usually is can be delivered even in this old school way. Deployment is another big thing. If you don't want to get stucked, just deploy any easy way you can, you can improve it later. Regarding bower_components- usually we gitignore those and when you deploy, you call bower install every time. I personally don't use Bower anymore. I use JSPM, because it solves a lot of problems for me regarding packaging, deployment and code reuse.
really what even is a framework...?
Learn gulp, it's worth it. I wrote a slightly unfinished tutorial on this recently: http://erulabs.com/posts/PerfectStack__NodeJS_Salt_and_the_Cloud___Part_1__Static_sites#goto
I tried to check out MEAN stack but I've ran into so many problems on clean Ubuntu server that I gave up. I wouldn't want to deal with this in my production. I think I know where your frustration comes from. For front end my next framework is going to be React, it seems to be interesting. I was also listening to some podcasts and for the front end framework backbone.js was recommended for someone to dive into from vanilla js/jquery background. Actually, check it out. There are some good ideas on JS frameworks and their use. [Ruby Rogues: Choosing a JavaScript MVC Framework](http://devchat.tv/ruby-rogues/189-rr-choosing-a-javascript-mvc-framework-with-craig-mckeachie-)
I use Notepad++, but I have never tried to run anything inside it, and I don't think it's meant to interpret JavaScript. Under the Run menu you can "Open in..." for the different browsers, but that doesn't sound like the same thing. Can you provide more detail?
I appreciate giving all html tags (&lt;script&gt; and &lt;link&gt;) to copy-paste lines directly instead of just the links, really useful approach. But having a checkbox menu will not scale on the long term, if this is meant to be more than just an experiment. [cdnjs](cdnjs.com) gives you a good interface to search any library through a textbox, the name and tags together
Sometimes I get the feeling that this is all happening because new developers see more value in investing in hyped tools than actually learning how to objectively evaluate them. I blame Rails.
Another danger with too large frameworks is that they take a long time and much effort to master, and developers become locked into a particular framework. That's why the term framework has a heavy and bloated connotation. One purpose of a framework is to make applications easier to maintain. If it's like you said that the code becomes *harder* to maintain that that's a serious problem.
I noticed the same. Approximately 10s page transitions... http://i.imgur.com/Mw0WMDb.png I don't know, but displaying a spinner for 10s makes the website seem slow. Not sure if this is an API or design problem, but personally I did not find the bloomberg view website pleasant to interact with. The actual article pages loaded a lot faster though. 
Have you considered giving PostgreSQL a try? There's good use-cases for both, but I've seen a lot of people using MySQL when Postgres is a better fit. To name a few great features: JSON fields with querying support, simpler zero downtime migrations, smarter index usage, better SQL support, full text search. 
Yes and I've very much advocated it. That's the one part I don't control, ha. 
I suggest learning Angular and simplifying your toolkit.
It's becoming more and more clear to me that it is not beneficial to go it alone on any project of any significant size regardless of the depth of your skills. If you're a front-end guy, find a buddy who likes the server-side. Go to meetups and pair up. Odds are you won't want to work on every project together, so find several server-side guys and split your projects among them depending on who's interested and also take on projects they might want your help with.
Google : Set up a github repo Google: NodeJS continuous integration systems Google: Git Hooks Google: Git branching Google: Git merging
It is arguably easier if you have node installed on the server, then you can leverage bower and npm to pull down the libraries you are using -- and grunt/gulp to perform build tasks. While it is arguably simpler and less bloated than committing every piece of code to your repo, you don't need to do it at all. There is no requirement to use bower or npm to manage your packages -- at the end of a day, they're just files... you could download it from their website manually, plunk it into version control and the deploy process is as simple as moving the files from point A to point B. You can also manually concat/minify files after a release and include that in the deploy package. If however you do use have access to node on the build server -- you can do some neat things like having the repo clean as anything - only your source code included and merely references to other libraries/frameworks via package/bower.json -- and building could be as simple as `grunt prod` to concat/minify resources / build docs / run tests / whatever else. npm install bower install grunt prod # tar everything, scp to server &amp; untar Oh also, bower requires git for some unknown reason so you'll need to install that as well as node.
I've been playing with [Strider CD](https://github.com/Strider-CD/strider) lately, and it's pretty decent.
[like this?](http://www.memes.com/r/tzmc)
I'm pretty sure our build server has access to git. It may even have npm installed. It runs Bamboo from Atlassian, and we usually drive builds from maven, but we *should* be able to get it to call npm, bower and grunt instead. Are you sure it's right though, for deployment on a tomcat server? The guy who has been doing it somehow ends up with a war file.
Thanks! If you've only been using that recently, did you use something before that and how was it?
JavaScript project management is completely insane and Yeoman is at the tip of the pyramid. I've worked on countless web projects and never needed anything other than webstorm, npm, and dokku. One thing to keep everything organized, another to transcompile and test, another thing to deploy. Unless you're deploying to a node cluster, if you need frameworks for your automation frameworks and package manager plugins for your package managers then you need to turn the level of abstraction down a few notches and re-evaluate your workflow because full stack front-end and back-end deployment can still be managed with `scp -rp &amp;&amp; touch`. It's JavaScript for fuck sake, suck it up and spend some change on WebStorm for the file watchers if Jade and SASS mean the difference between life and death. Enterprise IBM/Oracle ecosystem deployment isn't even as crazy as JavaScript has become, it's all just a mountain out of a molehill. I'm going to laugh the day when everyone looks back on this nonsense and talks about how annoying and unnecessary it all was.
Oh 100% same here. I use grunt in everything. I can see why it's a curve for learning though. 
I think you're approaching this wrong. You say you miss the old days, but you can still make web pages like that. Build your ideas with what you know. If you want to expand your knowledge, take one tech at a time. Jumping into MEAN is probably the worst thing you can do to learn those technologies, because there's just so much to learn for each one. 
I thought you gave a fine answer. Not sure why you were getting downvoted. Maybe he's overthinking it? I can see how things would be confusing just coming into it, but if you do this for a living it's not that hard to figure out what to do.
All it takes is one downvote. 
I have been going through this pain as well, my only advice is to make some toy projects and just add 1 or 2 things at a time. That way you don't get overwhelmed and you can also easily notice exactly how your project changes when you add a new framework or system. Once you get comfortable with the current technology stack of your little app, add another thing (maybe unit testing or automated redeploy, or some client-side MVC).
Right now we are using preprinted 3 part carbon requisitions. In an attempt to go as paperless as possible, we are changing our paper forms to digital. This requisition is the only one that, potentially, needs to be tracked (although sequential numbers are not necessary). In the future we will be using a database of some sort on our server to issue the number to each requisition as it is opened. Having a clerk add a number later would not work because if an employee fills out a req, they save a copy in the event they have problems with their order. they can call purchasing with the req # and have someone look into it. The 7 digit limit is because the software our purchasing dept. enters this requisition into only accepts up to a 7 digit number. What I am trying to do may not be possible but I thought I'd consult the pros before I give up.
&gt; it's very hard to explain what a prototype is to a c++ class based mindset Describe it as a vtable that you can modify at runtime.
Snap CI is wonderful.
Don't use any frontend frameworks. Not even jquery/bootstrap. You'll feel better in the end, when your site doesn't need 10mb of js/css bloat to function.
Don't worry about bower right now... just work with Angular :) build yourself a little pet app. And yeah MEAN stack is the way to go, I mean it's all Javascript!
Glad you understand why I am a bit confused at this point.
php is server side, so not sure how that helps you. however, you do have audio in the html5 spec which might help you with that: http://www.w3schools.com/html/html5_audio.asp good luck
Even the jQuery plugin registry is now pointing to npm. I think we can stop pretending that "bower is for client-side, npm is for server-side". And with webpack or browserify you *can* minify and/or bundle the content of node_modules. bower becomes more and more an unnecessary level of complexity.
&gt; If patterns existed, they would be discovered, not created. Which is exactly what the GoF did - they described common patterns in big software projects. From the preface: &gt; Design patterns capture solutions that have developed and evolved overtime. [...] We don't consider this collection of design patterns complete and static; it's more a recording of our current thoughts on design. If your point is "blindly and religiously applying patterns to every piece of code is bad!" then of course design patterns are "bad". And someone who learns programming and has only those patterns but no experience in how/where/when to use them, will write bad code. But arguably would also write bad code with any other method of learning because people without experience do in general write bad code. Even the article you link to by Atwood calls out that *knowing* those patterns is a good thing. Preferring simple solutions is nice and dandy. But when you build your first house you'll most likely focus on keeping it from collapsing before you start thinking about elegance.
Oh, I just reread the thread and I see you're talking specifically about tomcat.... I didn't see that initially and unfortuntely, I don't know all that much about it.... But, at the end of the day, you can have static resources with it, right? bower/npm are just a way to get those resources. It's not really required -- like I say, they're all just files in the end -- if you have a static resource for, say, jQuery -- just put angular next to it.... ensure it gets served by the server and you reference it from the HTML, you should be good to go.
&gt; Aren't design patters one of the most useful things you can learn? I'd like to see some evidence first. We've had 20 years. Still, nothing has emerged. There's plenty of criticism out there though, so that's progress. &gt; Something that is applicable to nearly every language. Right up there with algorithms and data structures? Except, as has been pointed out numerous times, they're not "universally applicable". You'll find that many of the GOF patterns only make sense in languages like Java and C++. For example, visitor, singleton, and decorator have no place in a language like JavaScript. (See Paul Graham and Peter Norvig referenced earlier) &gt; What would you suggest and why do you think it's not worth learning? They're a bad thing. They've hurt software development far more than they've even pretended to help. The sooner we rid ourselves of this nonsense, the better.
Indeed it is a serious problem. When you introduce complexity, you'd better gain something measurably beneficial in return. I suspect, based on my experience, that that rarely happens.
Thanks for the reply. I found your other post and I'll read those links. Do you think that the lack of evidence is due to the nature that how people write code is constantly evolving? (sorry if this question was answered in those posts)
The JS Design Patterns book is distinct from the Go4's. Some of the design patterns given in the older book are sort of unnecessary in JS. But the JS Designs Patterns book is fantastic and a great way for an intermediate level developer to up their game. 
Yep. I was surprised to recently learn that even [Font Awesome](https://www.npmjs.com/package/font-awesome) is in the npm registry. I'm starting to phase out Bower in some of my projects.
The fact that you guys argue illustrates OP's point.
The OP's point is roughly "I liked it better when adding jQuery plugins to pages was the pinnacle of what was possible". The same post could be written about how Java was so much better before there was gradle, maven, sbt, etc. when you'd just download a jar, create a java file and then ran `javac Hello.java &amp;&amp; java -classpath my-lib.jar Hello`. Or put your mysql connection PHP code right into the the index.php file and copied it to your host via FTP. The important thing here is: all those things still work. Nothing changed. They also still don't actually work for secure and/or maintainable production code. What changed is that the tools for making it secure and/or maintainable are no longer locked into some company's util scripts directory but are freely available to everyone.
It's difficult to study, I'll grant you that. It's further compounded by the pattern explosion over the past few years. (we're likely to find a lot of factorys, for example, just because of the influence of GOF. As you're probably well aware, most of those are somewhat less than appropriately applied!) It's still possible to study, of course, but I can find precious little research (at least, not much from the ACM) and I've never found anything that attempts, in any meaningful way, to *identify* patterns. It is easier, after all, to write a book on patterns and profit than to conduct actual research. That would be my guess.
IMHO why most code style guides are troublesome [Should I trust this code style guide?](https://www.youtube.com/watch?v=t081Uhvh1NY)
Perhaps I'm missing something. Why would anybody do this? function promiseX() { let deferred = $q.defer(); ajaxCall().then((response) =&gt; { deferred.resolve(response); }, (error) =&gt; { deferred.reject(response); }); return deferred.promise; } What does that give you that simply returning ajaxCall() directly wouldn't?
You know, you just need to learn them all one by one. I am pretty sure no one will be able to explain you everything in one comment so I strongly suggest you go and study these topics (in this matter): 1. What is **NPM** (and maybe nodejs if you plant to use it) 2. What are **Bower**, **Yeoman**... 3. Task runners: **Gulp**, **Grunt** 4. Explore packages, try them, find your perfect workflow based on projects. If you master these four steps your development process will be fast, efficient, easy to manage across team. Automated packaging, exporting, compressing: form images, to files, concating, pushing to git or live server with one command line... Few places where you can learn this stuff: * [Lynda.com: Web Project Workflows with Gulp.js, Git, and Browserify](http://www.lynda.com/Web-Web-Design-tutorials/Web-Project-Workflows-Gulpjs-Git-Browserify/154416-2.html?srchtrk=index:1%0Alinktypeid:2%0Aq:gulp%0Apage:1%0As:relevance%0Asa:true%0Aproducttypeid:2) * [Scotch.io automate tasks with gulp](https://scotch.io/tutorials/automate-your-tasks-easily-with-gulp-js) * [NPM and Bower](https://orchestrate.io/blog/2014/08/15/orc-blog-part-1-getting-started-with-npm-and-bower/) Remember - practice makes perfect. Good luck.
Thanks! That Amok seems also great since it does not depend on Browserify. I hope they'll get the Firefox support soon too. For me, adding one lightweight transformation to my projects is not a big deal so LiveReactload serves for now. :)
You could say this is the fallout of how the web stack and JavaScript conquers the world and shapes out it's legacy. Impossible to keep up with; the speed we're experiencing is clearly evolutional, questioning all of it's own processes, wildly improving in all directions thanks to the spotlight and the sheer mass of great minds pushing it to do anything and everything - by the time a standard like web components could be widely deployed, it's already considered old and wrong. It can be helpful to just identify some of the highlighted patterns of this evolution and look for those instead of the framework names. The general motion of solving logic and routing on the UI side (Angular), having the most kickass state machine propagation (React/FLUX) and bridging the gap between UI and backend (all of them) while introducing more sophisticated build/deploy processes (npm, grunt, gulp...). What you are really after here is plain JavaScript. Learn it's new APIs, learn ES6, and you won't be dependant on any temporary framework. No matter how huge their proponents may appear to be (specifically looking at Google and Facebook here), the current frameworks are absolutely not there yet and most of them have yet to meet their conceptual death. 95% of frameworks (illustrative value) and their nuanced build processes _will_ meet this death and while they may shape our future usage of the web stack, JavaScript isn't really dependant on their individual success. You can either watch the spectacle from the side of the stack and languages or the side of the dying frameworks that build upon them. **tl;dr** Don't go all in on a certain framework, they are evolving too fast at this stage to be considered safe. Focus on getting better with the core technologies used, learn ES6, learn the new build concepts and the basics of node and you're where you need to be to meet the future and understand it.
Another +1 for Strider. Was a little bit of a pain to set up correctly w/ multiple accounts (process a little buggy) back when I used it, and the frontend could do with a little polish, but once it was setup it worked nicely. This was also all about 6 months ago. 
I see what you mean about getting stuck into the editor. I'm a front end Dev from a design background, and I've often heard the sentiment "great ideas don't come to you while looking at your screen". In my experience it couldn't be truer. That combined with the quote "drawing is thinking on paper" makes going to paper first the most vital part of my process. TLDR: Good ideas happen away from the screen, sometimes when out for a walk, sometimes when sketching on paper. 
spot on
&gt; How do you keep up with all of this? You don't. Not unless you're some kind of contractor or freelancer who uses their downtime to keep on top of these things. What you need to do is have real projects and goals, and then start using new technologies one by one as and when they help you solve a specific problem. You'll be more motivated to learn about each one and you won't be as frustrated when new technologies emerge: if you didn't invest in a technology just because it was the 'hot thing' (e.g. Angular last year), you won't be upset when you realize the world has moved onto better things (Angular 2.0). In any case, as I've said [elsewhere](http://www.breck-mckye.com/blog/2014/12/the-state-of-javascript-in-2015/), the JavaScript ecosystem is tremendously fragmented and unstable, and it's probably best staying away from any frameworks until things settle down a tad. If you want to progress your skills and improve your CV, why don't you get to grips with something like Jasmine instead? Knowing how to write testable JavaScript is a skill that will really pay off in the long term, whatever ephemeral technologies are used to acrually define and run your tests. And to be honest, **as someone who interviews and recruits front end developers, I would far rather hire a jQuery developer who writes unit tests religiously than an Angular developer who tests nothing**.
I've using https://github.com/grantgalitz/XAudioJS to play PCM for quite a while and it works fine for modern browsers (not IE). Other than that, if the tones are pre-recorder why not go with something like http://createjs.com/SoundJS or http://www.schillmania.com/projects/soundmanager2/
If you're looking to just get down to writing some code, grab the URLs you need from CDNs, add them to a html page and away you go. To properly view this html page you'll most likely need to setup a server (IIS, Apache, etc) however. This can be an annoying overhead but if you already have one setup then forget the fancy front end work flows. If you don't have one setup however, it's quite easy to have one run straight from node, using a connect module like gulp-connect. But this involves setting up nodejs and the gulp task runner, so you still can't avoid overhead there. The quickest way to get started is to use an online all-in-one editor like jsfiddle. Now while front end tool sets are a pain to set up, they are very valuable when you're working on a larger project, especially if there are multiple developers. They simply automate a bunch of mundane tasks by including a group of modules. Most of the task based modules run on node. These are your bowers and your gulps and grunts. Then bower will manage your frameworks and libraries, think Angular and jQuery. The node modules do simple tasks such as concatenating, minifying, and copying files to a distribution folder (these files are what get deployed). This means many files can be created to handle CSS and JS, as opposed to a single giant CSS or JS file, but these many files are still outputted as a compressed single file. There are many other useful automated features such as handling sprites and fonts and image file size compression. These are all super valuable on large projects when they can be automated and done quickly. So the crazy front end workflows certainly have their place in the development space, but if you're looking for a quick code fix then don't shy away from the old school way, because it's never to late to change it to the more complex way once your project starts to grow. 
This link definitely has a few things about stuff you might be asked in a job interview (this, FizzBuzz and whatnot): http://ilikekillnerds.com/2015/03/things-every-javascript-developer-should-know/
I'm already watching the repo :)
Sorry, I meant in the off case that you are a programmer and aren't comfortable with the command line
I own a web dev company that does $x.x million each year and two of our clients you probably visit often. We use none of the things you mention in your post. I'm going to bet you are using most of them cause someone told you to use them rather than cause you decided one day you needed them. Quit falling for the reddit hype. Use what gets you where you want to go. Anything else is just another wall in your way.
You're welcome! Please feel free to post an issue or ask from the Gitter chat if something arises. It's highly possible that I'm biased with my own coding style and might have missed some important from the current implementation.
A well thought out argument with multiple links to further reading currently sitting at -3. Please stop using the downvote button as a disagree button, we should be encouraging people to discuss even when you disagree. I found many of these links interesting, yet nearly missed the comment because it was hidden for a low score.
But you're not suppose to use jQuery with Angular!!!
Honestly, you don't need all of these things at all. They're just immensely helpful when you know how to use them. But there is absolutely no point trying to learn them all at once. Best way? Carry on as you know, but introduce new things slowly one by one as you see gaps in your knowledge, or inefficiencies in your workflow. I could do without Bower, but screw going off and separately downloading all the javascript libraries. I could do without gulp, but screw doing absolutely any of the stuff that does manually. I could do without any of them, and still make something awesome... it'd just take longer, be more of a pain to maintain etc.
Don't want to sound harsh but it isn't that hard: Node is the backbone of all the other tools, install it if you want to use grunt or bower. Bower automatically downloads libraries so you don't have to google teir sites yourself, just bower install &lt;name of library&gt;, the things it installs is what you'll copy to the server alngoside your own code. Grunt runs various tasks for you, checking your js for errors, transforming other languages into js/css if that's how you want to develop minifying everithing, this one is the hardest to get because it pottentially does so much, also this is the one who is really for tdev and not deployement.
I thought Laravel was the next big thing!?
I'm not saying Git is necessary, but version control is. I thought VSS was a backup solution? Microsoft's version control is TFS, and I feel the pain of anyone who has to use it. There's one business unit at our company that uses it and interfacing with that system is a pain. We treat it more like a server than version control and just keep our work in our own Git and push it to TFS as needed. 
Didn't really get an idea how Rails is related to pure javascript solutions based on nodejs? If there's something to blame to, it's commonjs. If you're imagine worst ever javascript module solution, that would be commonjs. It looks like it was invented to make stuff messy. Instead to utilize the idea to use the same code on both server and client side, they made a mess of commonjs, requirejs, browserify, you name it. And all that had to be done to make a world (wide web) a better place is to leave nodejs with asynchronous module system.
Laravel uses symfony2 parts, and adds some structure, automagic and syntax sugar. A lot of the same core parts though.
I'm going to guess it's a mistype or misuse... In the rejected clause of that `then` call, }, (error) =&gt; { deferred.reject(response); }); `response` is not in scope. This would fail to run properly. But yeah, same thing could be achieved with: function promiseX() { return ajaxCall(); }
That's cool! Also cool, and related: [Broadway](https://github.com/mbebenita/broadway) ([demo](http://bkw.github.io/Broadway/storyDemo.html)) A Javascript H.264 codec.
This is exactly what I meant. By using various package mangers, I end up with thousands of folders/files in my "hello world" project and I do not know what parts(files) do I need to copy to my server. I thought that it might be something like you describe.. like I will just deploy my own source files and just run all the package managers and their "installs" once the source gets to server, so the file structure ends up same in both environments. There are sometimes also different ways.. like you need to run a task that prepares "public" or "app" folder with selected files and you just need to copy that single folder into your server`s root.
I am not social enough to do something like this I guess :) I am also interested in full stack, so that probably makes my "chaos" even bigger.
Well there is a difference between 'dependencies' and 'devDependencies' -- the first are things that the site requires to function and the second things that are used to build/test/develop. After you're done you can run something like `npm prune --prod` to get rid of devDependencies. That said, there's a lot of files that are not necessarily required for the app to function -- I mean, do you really need something like `.gitignore` or the `.git` folder? Likely not in production -- but it gets to the point where it's easier to copy everything than it is to cherry pick what you need. For the building - I usually prefer to have full source under a directory called `src` and my build task will put minified/concated files under `dist`. The html files in the application (usually built with templating engine) will include a replaceable token that points to one of these. when I'm developing, it references 'src' and the prod task will update the reference to 'dist'. In the end, I'll probably copy everything in source control over, run the npm / bower installs then grunt prod -- all on the server. What I'm responsible for is things under source control, everything else is done by the package manager / build tool. 
That sounds like a comfortable approach. I am however cursed by "frequent change of interest" - I just came with that right now. What I mean is that whenever I hear/see someone use something new (for me), I am almost instantly curious and want to try it too..
Check out [Backbone.js](http://backbonejs.org/). It's not really a framework but a library that provides basic structure: models, collections, views and router. It integrates nicely with REST APIs. If you're new to JavasScript, I think it's better to start with simple libraries / frameworks than to jump straight into bigger frameworks like [AngularJS](https://angularjs.org/) or [Ember.js](http://emberjs.com/). You'll learn a lot more of the language and understand better the value of different options.
Right, I have already noticed that those folders are being ignored by git, which sounds reasonable and definitely less painful than I thought.
Yep and this is something I am often missing from all those demo sites, tutorials and examples. Everybody shows how to run and install X different packages, but I hardly ever notice explanation of how do you actually deploy all this stuff that gets generated/downloaded.
&gt; I know it's not possible to play a tone to the user's computer using just javascript You can since the Audio element was added to HTML5. The new Web Audio API even lets you do real-time synthesis. A few minutes of research would have told you that, by the way.
What are the licensing implications of this? Cisco paid the license cap to be able to distribute openH264 binaries (now used in Firefox).
I think it's fairly naive to choose the best framework based on learning curve and approachability for beginners. Sure, it's a definite advantage if you can teach a beginner on it, but that's rarely a trait of any framework in any language. Laravel is great as well and is what I'd choose for a weekend project if PHP was the only language I could choose from. Symfony is just at a level above in terms of all round capabilities, documentation, support, and being built for industrial applications. I moved our company onto Symfony, and I'd agree that it's the pretty definitive option out there. Laravel is great if you're starting from scratch, but Symfony's component plug-and-play system was flexible enough for me to slowly phase out old pieces of software with modern solutions without needing to build the whole damn thing from the ground up.
You might disagree with this, but if I had to choose between entering a company that uses a framework vs one that is writing vanilla JS as a front-end developer, I'd choose the first option every time. Even if I absolutely despised the framework they chose there is a much higher chance of a sane codebase being in place with a definitive structure, and definitive paradigms and methodologies for how pieces of the overarching system work. Like it or not frameworks are around because they solve and structure repeatable problems in a way that makes maintaining a good code base much easier. That being said, I also agree that you need to have a good root understanding of JS.
MP4 is only a container format, like avi. h264 is only one possible video codec (the most popular). This code presumably has nothing to do with h264.
I just don't think Symfony is the "standard" PHP framework. It is no "de-facto", always chosen, always best, always winning framework that everyone chooses to use. I don't think there is one for PHP, but I think, for small projects, everyone is using Laravel these days, as seen in the recent survey where it came out a clear winner. I just disagree with the statement that Symfony2 is the "clear winner" when there is no evidence to suggest this. Each framework has it's benefits, pros and cons but Symfony is definitely not the "standard". 
If you absolut feel the need for a framework React is a good choice, but ignore the flux part at first, you probably wont need it at first. But since your new to js the thing your missing is probably a good way to structure your app and split it up in smaller modules. Here you can go with either browserify or webpack, you cant go wrong with either of them. Booth tools makes it possible to 'require' other files and modules. In the beginning this is probably a better direction to go than to get caught up in a the total caos of frameworks and library's out there.
I whole-heartedly agree with this. I've been writing web apps that are only dependent on jQuery for a few years now and when I started to try and get into frameworks, I just didn't see the benefits of it. It just seemed like I was writing an excessive amount of code to do simple things, on top of a massive post-minified framework; even jQuery minified (ungzipped) goes up to ~80KB. This is especially because I am primarily working alone on personal projects as a college student that just enjoys programming. I believe the benefits of frameworks are at its fullest when working on an extremely large project with many people. This is because most Javascript frameworks tend to simplify the language by standardizing/limiting the ways to go about one thing -- such as creating a model --, and in that way, the framework does all the heavy lifting for you. Also, when there are new-comers to the project, and if they are familiar with the framework, they will have an easier time picking it up. For your sake of learning though, I suggest you go completely native. It's been a few months since I stopped using jQuery. I've began to focus more on efficiency in speed and space, and often find myself comparing trade-offs between writing less code and making it readable, and a lot of times, I can justify writing longer code but making it readable because I am not dependent on a fat framework. Not to mention, becoming comfortable with native Javascript will build you intuition on using and understanding existing frameworks. If you're interested in my stack, I use Browserify for concatenating front-end Javascript in CommonJS style (AMD should be reserved for large projects that is divided into components), SASS for CSS, Jade for HTML, all transpiled via grunt on watch w/ live-server. I discipline myself by JSlinting all my Javascript and running everything in strict mode. I tend to work very modularly and open-source as many components of my projects possible; that way I can separate logic and debug faster, and also reuse them as dependencies in many other projects via npm/bower.
http://www.ember-cli.com/ It will have you up and running in no time with a barebones ember project. It has all the infrastructure you will want already wired up. Any additional infrastructure you want is super easy to install. All the ember js guides on emberjs.com just got updated to use ember-cli. You should have all the info one would need to make a basic ember app.
While you are technically correct, that has nothing to do with h.264 specifically. an MP4 patent is a completely seperate issue from an h.264 patent. To my understanding, while the mp4 patent covers the file format, it doesn't cover video compression, which is what the h.264 format is for. Basically while the mp4 file holds the video, the h.264 format compresses it for size and probably contains the instructions for viewing it. A file format without a codec to play the data is kind of useless. Unless of course you're just looking at the metadata, which is what mp4js does probably.
Seeing as you mentioned Andre Medeiros (or Staltz?) article you probably should take a look at [cycle.js](https://github.com/staltz/cycle) which is his implementation of the ideas outlined by the article. Personally I'm not a fan of the code needed to be written with cycle.js (like this [view](https://github.com/cgeorg/todomvp/blob/master/src/view.js), [model](https://github.com/cgeorg/todomvp/blob/master/src/model.js) and [intent](https://github.com/cgeorg/todomvp/blob/master/src/intent.js)). In an effort to make something better suited to myself I started looking into using React and [f.js](https://github.com/colin-dumitru/F.js) to recreate something at least similar to the Model-View-Intent architecture (Take a look if you want: [MVI-POC](https://github.com/nutgaard/MVI-POC). But bare in mind, that as the title states this is just a proof-of-concept and not nearly production ready code). 
Been loving CircleCI - free for private repos for now which is really really nice.
I come from a heavy C++ background (nearing 20 years!), I also do occasional python. At one point I looked at Java, mostly for Android development but not everyone at my company has an Android device so I felt some of the tools I was writing were not sufficient. So started looking at web-based tools which would work on all devices, this lead me to HTML/CSS and Javascript. I'm using Webstorm (https://www.jetbrains.com/webstorm/) which I find great once you setup your file watchers. Allowing me to write my Webpages in Jade rather than raw HTML. Coupled with Yeoman (http://yeoman.io/) for generating the basic web-application, I tend to use Angular (https://angularjs.org/) as the client-side framework. And I'm loving Node.js for the server-side (https://nodejs.org/). I'm still in the learning phase for javascript and node at the moment, but managed to write a number of useful tools for my work-place. Sublime text (http://www.sublimetext.com/) is fantastic also, however it is a text-editor and not an IDE. So I find it less useful than Webstorm for project development, but for raw text editing it is unmatched (imho). If you have the money I can't recommend a Macbook strongly enough, once I decided that Javascript was something I wanted to improve in I bought a Macbook-Pro (I wanted something portable, and found web-development a little clunky on Windows). Takes a little getting used to, if you aren't familiar with it but it has some killer features for software development. For my web-dev, I would buy a new Macbook immediately if something happened to my current one. However, strangely, I still prefer Windows and Visual Studio for C++ code, everytime I try to use xcode for C++ it annoys me :) My job still entails 95% C++ but I have wow'ed people more than a few times with some web tool I created that they weren't expecting. And I would still rate myself pretty poor in my javascript ability.
Thanks for the reply! I'm limiting the number of callbacks as much as possible (currently offer 1). The plugin is primarily event-based; interaction with the plugin produces custom events that the user can listen for. I have some error-related events but these are related to validation criteria specified by the user. My main goal is to avoid a situation where the user is doing something wrong but has to inspect the plugin code to figure out what. Just out of curiosity, how do you feel about an error callback versus throwing an exception and leaving it to the user to handle that exception using try/catch or another technique? 
are there advantages to sublime text over emacs (specifically for javascript) that make it worth the switch if I'm already familiar with emacs? I'm looking to use javascript as a way to deploy visualization-heavy-UIs for interactive data science work. Ultimately I think I'll get better adoption and fewer headaches than deploying binaries developed with Qt/C++ (even though I'm more familiar with the latter). I may do some game development and graphics programming on the side with webgl and maybe some game engines (phaser seems to get good reviews although it felt kind of sluggish when I tried it).
Let me know if it helps or not :( I'm not a great writer, and that tutorial isn't even finished. But hopefully it gives you some idea of where to start! If you need a hand getting a simple gulp+webpack+angular (or whatever tools you decide you like) single page site demo going, i'd be happy to help :)
Where is gnome sort?
I had the same experience. It's too bad react doesn't reuse these two existing projects. I'm interested what you'll choose for your project.
Well you'd use `&lt;script async="async" /&gt;`; you'd want a single file (aggregated js, inline templates/css to avoid more http traffic); you would probably want to keep it small (no jQuery); you'd want to profile your code to avoid problems like Google Analytics has with it introducing ~30ms pauses every second. I'm not sure if there's much more to it.
Interesting UI with nested tables. Pity to see that they split the table header into a separate `&lt;table&gt;`, and that column doesn't work (in Chrome)
First off: don't be sorry, you're learning and that is a good thing! Plus you'd be surprised how many "JS dev"s and "front-end dev"s don't understand prototyping. Your understanding is correct. By using prototype.property = function() all objects will simply "point" toward the prototype's property. Here are two good, quick reads on the issue: http://timkadlec.com/2008/01/using-prototypes-in-javascript/ and http://stackoverflow.com/questions/8433459/js-why-use-prototype 
Thank you!
Oh you're correct, I didn't say to install it globally: `npm install -g gulp` will give you the "gulp" command on the CLI. Thanks! :D
Right, this is why I personally avoid "full-stack frameworks" (like MEAN, Sails, etc.), and only go with well-modularized components that are either a) commonly used or b) do not need (much) maintenance. That way you can just switch out a component in the worst case, but it's unlikely that you'll have to do even that. MongoDB I'd avoid altogether, but that's a separate issue.
Webpack
Ah, by "end user" I mean other developers relying on your work. I'm not a native English speaker sorry about that. And you've got a point.
Why would Angular not work in a production server without Node? If you have CI setup running tests and building a deploy package, Node need never exist on your production box. CI should be creating a deployable of just static assets (not including any unrelated dependencies you may have on a back end language). 
How many of you are using GopherJS? Anybody else concerned with the unminified file size?
So, about that deploy package... how? The only way I know to configure Angular also pulls in a bunch of node stuff that we don't want.
What a shit post.
I'm the author, sorry this is still work in progress, will be fixing those issues. I'm converting md -&gt; html, which applies the styles, do you have any suggestions for a better converter ? __Update 0:__ https://www.npmjs.com/package/gfm looks like a nice candidate. 
Are you drunk? Nothing you write makes sense. Using an rPi I can deploy a Python app running a web server that also connects to a bunch of devices on the network (real fucking IoT shit) and serves up a front end built in Ember, Angular, jQuery, or whatever. None of this is groundbreaking, none of this has to do with how awesome angular is (or isn't) because angular is compiled and run client side. All the rPi would be doing is sending down an angular app to a web browser. It doesn't make Angular an IoT framework.
On it's way ;)
Yowzer. I'll stay Ionic for 6mo.
this post is not live yet?
what makes it modern?
That will become entirely possible as along as TextDecoder, CSVDecoder, become transform streams and WebSocket becomes a bidirecitonal stream. Once streams land, you'll be able to polyfill the rest. The syntax will be: fetch(url).then(response =&gt; { return response.body .pipeThrough(new TextDecoder()) .pipeThrough(new CSVDecoder()) .pipeThrough(new WebSocket()); });
I'll try to explain this succinctly. Whenever you access a property on a JS object: `foo.bar`, the following happens: 1. JS checks to see if `.bar` exists _as a property on that exact object_. e.g. `foo.bar = function(){}` 1. JS checks the object's prototype: `foo.__proto__.bar`. `__proto__` is the internal way that these methods are accessed, you don't need to worry about it. What you do need to know is that you _set_ these properties like: `SomeFunction.prototype.bar = function(){}`. If `foo` is an instance of `SomeFunction`: `var foo = new SomeFunction()`, it inherits the prototype. 1. JS checks the _parent_ class for the method: `foo.__proto__.__proto__.bar`. For instance if you type `[].__proto__.__proto__.constructor` into a console, you'll get the "Object function", showing that `Array` extends `Object` 1. Repeat 3. until there is no more parent and then return `undefined` Note that most modern engines compress the loop in steps #3-4 so that there is no performance cost of having really, really long prototype chains. Also note that because `foo.__proto__ === SomeFunction.prototype` (that is they're _exactly_ the same object), setting `SomeFunction.prototype.method`, _immediately_ sets `foo.method`, even if foo was defined first. Meaning this code works: var x = 42; Number.prototype.times2 = function(){ return this * 2; } console.log( x.times2() ); // 84, via x.__proto__.times2
I don't see what value sorting algorithms implemented in JS are, at least not without any other content. If you had some visualizations to show the differences, or were doing _anything_ else with them to teach, sure. But since you should basically _never_ use you own sorting algorithms in JS -- Why??
This is so true. My best problem solving comes from pacing the floor, or just doodling my stream of consciousness onto paper. Some people think that programmers are writing code all the time, and the truth is, most of what makes a programmer is trying to figure out how to do something in a way that's descriptive and simple. The way to achieve descriptive and simple code is to think about the problem you're trying to solve before writing code to solve it. Really think about it!
Dude! That's so true! The amount of times I look at my editor and struggle to come up with a good solution. Then I leave my computer to think , or pseudo code on paper and an elegant solution presents itself. Pseudo code and thinking about the problem are so underrated! Well said. 
Totally! I think it helps to clear the mind and get lost in thought. I find epiphanies come so much easier when I'm not really looking for them. Same for when I'm tired, sometimes the solution just finds me. So it's nice to just follow whatever my brain is doing naturally for a while until I come across that glorious "Ah ha!" moment :)
I have used many times `O(n)` sorting algorithms (I prefer bucket sort) for joining data from multiple threads/sources in computation-heavy applications and applying then merge join. 
You definitely should add [Bogosort](https://www.npmjs.com/package/bogosort).
Because its not the 'angular way'. Don't worry I do it too, Soo many more plugins
The response in the rejected clause is a typo. And yes, you could just return ajaxCall() to achieve the same thing. I think in the context I used it in I had to do some sort of manipulation on the response before resolving the deferred, but it is not necessary for this to work correctly.
Correct, using .all() only works if you just want all of the values at once with no dependency on previous calls.
check out JSPM http://jspm.io/
Absolutely dude! I have the same thing with projects. If I have a project coming up, I like to see the brief a week ahead of when I'll work on it. that way my brain starts subconsciously work it out before I'm even started! Good guy greg brain! 
:D
&gt; were doing anything else with them to teach Well, this was meant for quick reference, more like a cheat sheet of cs in js. 
This *is* a valid concern, but monkey-patching the built-in objects (Array, Object, Math, Number, etc) in a library is frowned upon by the professional community at large, and reputable libraries won't do it. Still, be wary of using things libraries and scripts that look like Magic, and also be aware that most jQuery plugins operate by extending the `$` object.
If your experience with JS is limited, I'd say use the most basic framework you can find. JavaScript is already a framework in the browser. All those JavaScript is that they are just fad and they all bring their own paradigm and limitations that are unique to them. So if you go and decide to use a framework, you need to understand that as soon as you change frameworks, you *will* need to relearn stuff. So my guess would be to use a very light framework, something that looks and feel like JavaScript so you see the real benefit. Someone mentionned Backbone.js, that's one and I'm sure there are others. One thing that is certain is that you don't need virtual-dom and its added complexity. Debugging with virtual-dom can be hard in some scenario, you don't want that at this point. Learning JS is a process and you need to stack those bricks, I don't think choosing big frameworks like react, ember, meteor, etc. is stacking bricks, it's dropping bricks in parallel.
You regret learning event binding and scope in a JavaScript environment? Those are the fundamentals of JavaScript. How can someone be any good with JavaScript if they don't understand that?
This is what I've been looking for for ages. Shame I just bought the ember-cli-101 book :(
Was listening to their devs on changelog podcast, I thought they said couple of months, must have been not paying attention. That's a loooong time in our world, I would be surprised if it doesn't have some serious multi platform competition by then.
For anyone interested, this was grabbed form vjeux's github commit: https://github.com/facebook/react/pull/3545
&gt; You seem to be confused about a number of things, my recommendation is you sit down with your guy who handles all this stuff and figure out what he's trying to accomplish at the build step. He is also confused and frustrated about the whole mess. He has it working, just barely, but it's a delicate thing.
Sorry, my post was a little hastily written -- it was at the cost of implementing a lot of stuff marionette already, so it's hard to say it was worth it, and Marionette would probably be better, "stable" framework for a project like OP is talking about.
The library does use a thread pool, that was it's design however you wanted a clear cut case of thread overhead so I modified the library to give you one. I'm not sure where you get your thousands number though, the threads are killed when they complete their task. 
Hi /u/juliana212, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
There are polyfils so the last two points you made are moot.
Idiot.
He/She wasn't wrong, it's a good point to raise, really. Perhaps I was a bit too antagonising, idk.
I like the way of being able to plug in functions like that. Similar to aspect-oriented programming or something like that. I don't know yet if the logic would get too messy in a real application with lots of mixins. Could be worth examining.
I had that problem on my first project using broccoli as well, but this was fixed since then, now my compiles are faster than saving+switching to my browser window.
I wrote a demo Chrome extension way back when this was first released that used it to scan all pictures on a page and swap them out with random cat images from Flickr if it found a hit. Good times. It's pretty hit-or-miss, but the white paper it's based on is interesting.
The entire React community seems to be behind Webpack. Why bother with Browserify?
What is your immediately learning goal? If you want to build web applications then you need a solid understanding of HTML and the DOM. Don't let frameworks spoil your education. If you just want to learn to write JavaScript applications without all the build up of a large HTML and DOM configuration then just use Node.js/io.js and just run your application from the command line.
Actually...that is exactly what we are working on. I didn't want to provide too much context because I think the use cases stand by themselves, but we are trying to add true server rendering functionality for Angular2. I will have a future post on this in more detail, but just to address the specific point you are bringing up, this would include the transfer of state from the server to the client. So, for the initial render (or for partials pulled after the initial render), the client would simply "hydrate" the server generated view(s) which includes not only HTML, but also other state data.
I was just thinking of doing this. Thanks!
That's the project I was referring to: https://github.com/anlumo/hamster it's tiny, but took &gt;10s to build back then. I'm using Mac OS X, I don't know exactly when these improvements happened, since I had an Ember pause of a few months, during which this fix happened. I developed that application in July 2014, and on the next project in February 2015 it wasn't an issue any more.
If you're interested in learning how to work with the DOM+JavaScript maybe try and make a simple game with a user interface like tic-tac-toe or sudoku. Or make a simple, small application like a "to-do list" that uses HTML5 local storage to save information. 
use irc, and what u cant find on stackoverflow you can get an answer for in 30sec on irc. Start building something when you cant figure out how to do it ask or google. I wanted to learn a new framework so i found a good one, and built a few one page apps [pomodoro timer, then a daily task timer (min spent per day on any tasks, reading, smoking etc)]. Each one took me like 2 days to build and i learned the new framework... You could then package these apps as iphone/droid/wii/ps3/whatever apps with ads and a pay version for 1-10$ with no ads.
Not a direct answer for your question, but I recently started reading [JavaScript Application Design: A Build First Approach](http://www.amazon.com/JavaScript-Application-Design-Build-Approach/dp/1617291951). What I've read is pretty sound and seem like you are the target audience. The framework in the book is Backbone.js so you won't really get the reactive / shadow-dom stuff that React gives you, but you will have a nice stepping stone to get there. 
I am learning vim and programming in general, and I liked it very much. I'm sad it is too short. Keep working!
Few problems with that: 1. File count is not a good metric. 2. Filesize isn't either. 3. For all I know, that could have been horribly messy code that nobody but you would ever be able to work effectively with.
Do this
Anyone getting into this really don't skip over the bottom of ember-cli about excluding folders from indexing. Ground my i7+ssd to a halt till I realised the watch task brackets and sublime were hammering node_moudes and tmp. http://www.ember-cli.com/#editors 
Wow that looks a lot better, awesome! Nice work!
@mc_hammerd interesting tips, any ideas on packaging apps for mobile phone?
what are your interests?
A better title would be "Why you should use lodash instead of underscore" or "Why you should avoid packages on npm that don't respect semver".
This is a great post. Certain people just keep on giving to the JavaScript community. We wouldn't be nearly as far along as we are if it wasn't for people like /u/rauschma and people like him! In any case, if anyone reads this post and finds it doesn't quite hit the mark for them I recommend this 4 part series: http://davidwalsh.name/es6-generators as an alternative. Both are great! Cheers!
This is my first NPM package! If you see something weird, if you have any question or if you intend to use this package, I'd like to hear about it !
Having come from python, generators have been around for a long time, and more recently coroutines. They were the primary reason why we chose to use [tornado](http://www.tornadoweb.org/) for an async, non-blocking io server at my work. However, now that ES2015 supports coroutines (generator + promise) we are moving our production application over to nodejs &gt;= v0.11. If you aren't excited about coroutines, you should! They are awesome!
You could also browse github and branch projects other people are currently developing that you find interesting.
Thank you :)
I also wish companies with products to sell would stop writing promotional pieces on Medium and then getting their employees to SPAM Reddit.
Couldn't this have been solved by specifying the exact version number you wanted?
Broken formatting makes this code almost impossible to read on mobile. Also your question isn't clear. Have you tried it? What happened? This isn't a support site
yes, unless some dependency has specified another sub dependency with a specific version as well which is different. than you got 2 versions running around and shrinkwrap allows you to avoid that. does it mean we should use shrinkwrap? no. its kind of a messy thing that should be removed or improved by allowing you to specify sub dependency of a single dependency and not ALL OR NOTHING approach that is today. what i did for example is defined a redis dependency in my package.json and another dependency that had a specific version of redis (really old) always messed me up, so in my postinstall script, i just delete it. its a workaround but better than going with shrinkwrap that messes up everything.
Great job on shipping! I wish I could do something like this. I just get caught up on the "idea" phase. You now have the real experience of shipping an npm module, which many people wouldn't even know where to start. Doesn't matter how simple it is. It'll help someone I'm sure.
You haven't given nearly enough information about what you're trying to do. Trying to give the code you are using is admirable but has some formatting problems. Also, we can't help you use a library's API. You'd have to look at the library's help files or source code. Also I have no idea what "java/jscript" is - but I assume you mean javascript from the code snippet. Try not to EVER shorten javascript to "java", as the two languages (javascript vs java) are completely different and have almost nothing to do with each other, and it gets confusing when people throw random "java"s into conversations about javascript. If you need to shorten the word "javascript", "js" is the common short form.
Keep your HTML and your JS separated ;) &lt;div data-year="2013" data-quarter="2"&gt;...&lt;/div&gt; &lt;div data-year="2013" data-quarter="3"&gt;...&lt;/div&gt; Then... $('div').click(function() { console.log( this.dataset.year, this.dataset.quarter ); }); Or without jQuery using `querySelectorAll`, a loop and `addEventListener`. (If you need to support old IEs use `getAttribute` instead of `dataset`.)
The chakra team has been releasing a series of posts with the new things they are doing to improve the performance like [this](http://blogs.msdn.com/b/ie/archive/2014/10/09/announcing-key-advances-to-javascript-performance-in-windows-10-technical-preview.aspx) or [this](http://blogs.msdn.com/b/ie/archive/2015/02/18/bringing-asm-js-to-the-chakra-javascript-engine-in-windows-10.aspx). They also announce last week that they are working on adding [SIMD](https://status.modern.ie/simdes7) so you could say things are getting serious :)
Where is this data coming from? I'll be stoked if this is true, and if Spartan is fully featured, but right now this is just a picture.
Spartan is not finished but the Chakra team has been doing some great work recently improving the performance and working on new features like [ASM.JS](http://blogs.msdn.com/b/ie/archive/2015/02/18/bringing-asm-js-to-the-chakra-javascript-engine-in-windows-10.aspx) and [SIMD](https://status.modern.ie/simdes7) to boost it even more.
Or you could just not use the ^
Funny thing, I was listening to one of the Chakra developers present the optimizations they'd been doing and he mentioned "well, everyone wants to see the benchmarks but I don't really like to focus on them but well here are some graphs anyway." That aside, it was interesting to hear him describe how they use the Bing crawler to test performance while it trawls the web , so they could discover what needed optimizing and validate their changes. dunno how well that compares to the usual benchmarks, but it's nice to hear they're shooting for performance. 
It's definitely not finished, but you can play with a public preview build at http://remote.modern.ie
If only the makers of Chrome had a similar web crawling technology to find web pages to test with.
How fast is it on MacOS?
http://jakearchibald.com/2015/thats-so-fetch/
I was already expecting something similar to that, since IE already ran JS faster than pretty much any other browser... Anyways, I think we all agree that's what matters the most in a browser...
&gt; Chrome has won the standards battle for years So much that Chrome is practically defining the standards nowadays :(
Not as far as I know. I think it would be implemented as a node addon. It's something I'm a bit interested in making, but have so many other things to do.
Running JS fast is important but not the most important thing.
We (at my workplace) *mark* the fields themselves for validation, even when the form is static, and then have a generic validating function which we hook to the form's `submit`. Most -except for very specific ones- validations can be generalized easily. As an example of the idea, you would have this in your HTML: &lt;input type="text" data-validation="required number" /&gt; &lt;input type="text" data-validation="email" /&gt; and then the function I mentioned just selects all fields with the attribute `data-validation` and applies each kind of validation they have. For some of the validations you may need extra information. Imagine an age that needs to be a number from 18 to 99. We use extra attributes like `data-max` or `data-min` or whatever. You might instead parse a more complex `data-validation` attribute like `"required number max:99 min:18"` or something like that. With this, and an completely generic `data-validation="pattern" data-pattern="&lt;some regular expression&gt;"` we cover pretty much any individual validation and a good number of combined or dependent fields (e.g. field A less than field B). You're left with the more complex/specific interactions (if this field and that field then this other field should...) which are not too frequent anyway. Oh, yes... while I do like the general idea, and think it's good, I don't agree in all the details about *how* we do it. Still you can apply the idea with several variations in the way you actually implement it.
It was released last night in Win10 build 10049. Do your own tests?
OMG :O
Can you run them with IE 6 - 10 ? EDIT: Please stop downvoting this comment, Microsoft employees! I only want to know how much IE has improved. 
Yeah, I guess breaking quickly is better then breaking slowly, but I'd much rather it NOT break at all.
 function augment( receivingClass, givingClass ) { if ( arguments[2] ) { for ( var i = 2, len = arguments.length; i &lt; len; i++ ) { receivingClass.prototype[arguments[i]] = givingClass.prototype[arguments[i]]; } } else { for ( var methodName in givingClass.prototype ) { if ( !Object.hasOwnProperty.call(receivingClass.prototype, methodName) ) { receivingClass.prototype[methodName] = givingClass.prototype[methodName]; } } } } ---- This code is from http://addyosmani.com/resources/essentialjsdesignpatterns/book/#mixinpatternjavascript
Project Spartan was released last night in Win10 build 10049. Definitely a few pain points (dev tools, add-ons?) right now, but I'm assuming these will be patched in. Speed is very nice though and a few unique features as well.
I actually started: http://websql.codeplex.com. I develop and use it for my projects. First, I am embracing parallelism in Javascript, so I can build analytics library on top of it. But anybody who wants to join or try it and give a feedback you are welcome. Thanks 
It's been faster than Chrome ever since IE9 shipped with Chakra, with only relatively small gains after that, IIRC. IE6–8 with JScript will be way slower.
The makers of chrome have been doing it [since beginning](http://www.google.com/googlebooks/chrome/big_08.html)
Does spartan use as much memory as chrome? Because it's really time to swap out my chrome for another browser.
Sure, but do you always make the same comment when you see benchmarks for other browsers too?
&gt; the people that write engines have been known to tweak things specifically to make just those tests run faster Well—that's kind of the point, like TDD. You write a suite of tests that, to the best of your ability, faithfully models the needs actual Web content; then you optimize your engine against those tests. The tests are supposed to be a proxy of real-world performance, so optimizing specifically for your tests *should* be beneficial in the real world. It's just a question of how well the tests represent reality.
I've heard they also host email and make some programs or apps for, like, mobile phones.
The woosh is strong with this one. 
http://www.whispertools.com/ie-not/images/ie-poor.jpg this image sums it. Due to IE's versioning system and dedication to creating locked in development environments then catering to those environments the browser is hell in a handbasket if it gets dedicated support or interest. http://www.paulirish.com/2011/browser-market-pollution-iex-is-the-new-ie6/ No way in hell you are so ignorant to not know IE sucks, and will always suck until it goes versionless and Trident is dropped. IDC if they MS makes a fn fork of Blink, start somewhere level. Spartan is the same rendering engine new shell.
Sure, here you go - same machine, same browsers: http://imgur.com/V3DTxTD
Not bad. Holds it's own.
Or you can go and try the latest flight of Windows 10 with Spartan yourself and know if OP lies or not.
The ellipsis in zettca's comment makes me believe that was sarcasm.
Nothing as comprehensive yet. Though this library: https://github.com/NathanEpstein/datakit provides a subset of that infrastructure
That works for dependencies I own and can add a `prepublish` to, that transpiles es6, but dependencies like koa-router, that are out of my control, still have to be transpiled at app run time and in browserify. (Unless, of course, I add transpilation to all of my dependencies, which isn't sustainable or reliable.)
also, react is just a view engine, it's not covering anything that angular does by it's own. It only makes sense if used on a flux architecture with frameworks like reflux. The article is also not taking care of what will (is) be Angular 2.0 and how overrated is the virtual DOM, not to talk about the testability of your project.
You already have everything you need. Start getting yourself into interviews.
Exactly. MS versioning is the tragedy, not the existence of old code. I can't spell enough what an absolute fuckup NOT enforcing IE updates was.