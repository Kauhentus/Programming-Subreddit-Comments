Bootstrapping a new JS project is not a problem? Possibly if you've already used most of the tools already. Let's say you have an idea, and at the start you just need a 100% client side web application. You're just experimenting and as a learning opportunity, you decide to write in very new javascript, since you can always add a transpiler later and the browsers you use already support most new JS features. It's just simple ```index.html```, ```index.js``` and a simple http server is also needed, and http-server seems to fit the bill. Let's install npm and run ```npm install -g http-server``` with a final ```http-server -p 8080```. Then while expanding your JS code to &gt;500 lines, you realise that you should split the JS code. The newest and shiniest way is have multiple JS files in project is by using ESMs. Good amount of recent example code on the web uses that. ```&lt;script module src="index.js"&gt;``` it is then, in which we ```import foo from './file2.js'```. We could also have some code that initialises data for our app, based on some vars. Generating it takes a lot of time, so we need to do it only really rarely. We have common code in our codebase that does it, but running it through web browser can't write the file out anywhere conveniently. Fortunately there's ```node``` and it's ```fs```. Let's run our ```generate.js``` which imports ```file2.js```. It doesn't work! Apparently we have to use ```node --experimental-modules generate.js```. Still doesn't work as we have to rename all our `.js` files that use import into `.mjs` extension. It works for node, but browser complains of ```.mjs``` files' mime type since ```http-server``` doesn't quite work all right with that. Here comes the switch of http server software into something like express. Minimal setup should be quite easy. Now let's say that we find a use for an npm module. Accordingly the correct command appears to be ```npm init```. That runs nicely. install the ```axios``` package, but ```import axios from 'axios'``` fails on browser. (The choice of package here is actually irrelevant) Guess we need a JS packager, mainly to solve the package resolution. Oh snap, the packager can't handle our modern ES syntax, like arrow functions. Guess we do need our transpiler after all. Oh, and we also need to set up both the packager and the transpiler to handle ```.mjs``` files properly with configs, plugins, etc. Bootstrapping a modern syntax using JS with packages is even today a real problem. This doesn't even take into account the various missteps (like choosing a different "modern javascript packager" that still fails with generator functions, modules or arrow functions). Imagine someone with lots of programming experience, but minimal JS ecosystem experience doing all this. Ability to easily bootstrap an **up-to-date** JS environment is a welcome addition for me.
I did not understand anything you just wrote. You should look for some lessons in which they show the basics of syntax and data types, because you look like you are super confused about what's what in js and programming in general.
changing +='s order is not a good idea because it's not just used for numbers, and in some cases (strings for example) the order does matter a lot. just do `x = await y + x` then or `z = await y; x+= z`. no need to change the language...
Can't you just walk to a car at a dealership, ask for a price, pay it and drive away? That should cover every part of 'I need to be able to get from A to B on a schedule of my choosing'-requirement with multiple nines of reliability. If you wan, you should be able to go to a dealership and ask for a car with a package that will not let you regret missing something and they'll happily create one for you. Do you want to be in control of being familiar with all the features of your car or do you want a means of transportation with a preset comfort level? There's definitely a market for both.
Rollup still advertises itself as: "Next-generation ES6" &gt;Next-generation &gt;ES6 Choose one.
Thanks! Really good, I don't have a CS background so it's awesome for me
crucible\-dashboard \- An Electron App to pull together reviews \(open &amp; pending\) from all your Crucible instances, create reviews as well as display some \(time spent, comments logged\) statistics. [https://github.com/InViN/crucible\-dashboard](https://github.com/InViN/crucible-dashboard)
I quite like it. Highly readable and easy to understand \- I wouldn't be annoyed inheriting this code.
Another thing you could do is split the summing apart from getting the values: const waitAndReturn = async (x, timeout) =&gt; new Promise(resolve =&gt; setTimeout(resolve, timeout, x)); const collectValues = val =&gt; waitAndReturn(val, 100); const sumValues = (sum, val) =&gt; sum + val; const asyncSum = async (...vals) =&gt; { const values = await Promise.all(vals.map(collectValues)); const sum = values.reduce(sumValues, 0); console.log({ sum }); return sum; }; asyncSum(10, 5); // { sum: 15 } This would prevent the race condition you're seeing, where multiple promises can update the same values in different ticks of the event loop.
To be honest with you... I might use this is some fashion?
This is really interesting and a great resource. You should repost over at: /r/LearnJavaScript 
Sounds like you're using the wrong tool, and should do more research before diving into a new application. We use Aurelia.JS where I work. Here's how I set up a new application: `au new {project_name}` Answer a few questions in the wizard, and I'm developing within 2 minutes. And I'm sure Angular, Vue, and other JS frameworks have CLIs that are just as easy to set up. Obviously, you can use whatever toolset you want, but making something complicated is your choice here. You don't have to make it complicated if you don't want.
nothing wrong with that, especially for a personal project.
&gt; an't you just walk to a car at a dealership, ask for a price, pay it and drive away? That's not a zero-config car, though. That's just a pre-configured car.
But...you're supposed to tell me about how ES6 solves all my problems and that I'm using dinosaur code. /s I suppose if it turns out this is decent then I'll just keep doing what I'm doing. I just like to check in every now and then to make sure I'm not missing something. :) 
Modifying a common variable across several promises is just a bad idea. You should be returning the value from the promise, and then summing them at the end. const folders = [10, 5, 1]; const sizeOfFolder = async (x) =&gt; new Promise(resolve =&gt; setTimeout(resolve, 1000*Math.random(), x)); const sizes = await Promise.all(folders.map(sizeOfFolder)); const totalSize = sizes.reduce((acc, val) =&gt; acc + val, 0); // sum the sizes
There's a lot to absorb in here, but it gives me a bunch of ideas that can really help me. Thanks!
Yep, and just like the now plentiful amount of languages that can compile to javascript, they have their own subs.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [getify/You-Dont-Know-JS/.../**this%20%26%20object%20prototypes** (master → f0d591b)](https://github.com/getify/You-Dont-Know-JS/tree/f0d591b6502c080b92e18fc470432af8144db610/this%20%26%20object%20prototypes) ---- 
&gt; Next-generation ES6 I think the 'next generation' stuff is referring to the code splitting, or is just out of date on the web site? ES6 modules are now in all 'evergreen' browsers. It is all good!! https://caniuse.com/#search=modules (unless you are a corporate IE slave :)
You should consider using ES6\+ syntax for readability, especially in this day and age, when the syntax is very popular. The way you pass in a parent node as an argument to a component's render method is interesting. What if you returned the element for the render method and then appended it? It's more portable and easier to unit test. For example, without changing your style of your code too much and in ES5: `project.component.card.prototype.render = function(text) {` `var foo = document.createElement('div');` `foo.innerHTML = text` `return foo` `}` `var parent = document.querySelector('main')` `var cardA = new project.component.card('foo')` `var cardB = new project.component.card('bar')` `parent.appendChild(cardA)` `parent.appendChild(cardB)`
My point was that Rollup didn't support arrow function syntax as late as the beginning of this year, since it "was only stage-3." In my opinion, that clashes hard with claiming "Next-generation"
Using `innerHTML` to render stuff isn't very safe. At the very least I would look at [hyperscript](https://github.com/hyperhype/hyperscript) to minimize your createElement boilerplate and XSS exploitability.
Thanks for the reply. I want to display the data in a simple HTML page. This API is some external API. I do not own it.
what would you use instead? innerHtml?
Different use case. I linked to https://developer.mozilla.org/es/docs/Web/API/Node/textContent in my previous comment, in case you didn't see it.
This is my favorite implementation of Material Design for React. I enjoyed using it for a project, I’m glad to see it becoming stable. I like not having to think too much about styling. As much as I love CSS and unique UIs, there’s just too many stuff I have to keep in my head to consistently style stuff, so libraries like this really help.
&gt; I could bang on about how JS isn’t a legit OO language JS fully supports OO
Thanks! I used velocity.js a couple of years ago and I'll definitely check it.
It takes a lot of time and deep knowledge about UI/UX design, a11y and CSS. Using an existing library might not be very original, but it helps you quickly get your idea out with confidence.
Using [ES6 class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes) syntax you can achieve inheritance, this is supported on major browsers except IE: // Root namespace for the project. var project = {}; // Sample global function that can be called from anywhere. project.api = function(resource, method, arguments) {} // A component is a re-usable element that can be placed on a layer. project.component = class Component { render(parent) { } }; // A layer is basically just a page. project.layer = class Layer { render(parent) { } }; // Example of a simple component. project.component.card = class Card extends Component { render(parent) { var foo = document.createElement('div'); foo.innerHTML = 'bar'; parent.appendChild(foo); } }; // Example of a simple layer that has two components (cards) on it. project.layer.home = class Home extends Layer { render(parent) { (new project.component.card()).render(parent); (new project.component.card()).render(parent); } }
Have you tried setting your dataType to `JSONP`, besides the `Access-Control-Allow-Origin` headers and all? In my experience you also have to prepare your server to answer requests from different domains so it sends JSONP responses, but if the API is not yours... I've tried to do a `$.get("`[`https://rallycoding.herokuapp.com/api/music_album`](https://rallycoding.herokuapp.com/api/music_album)`")` and it works and retrieves the page \(that right now is a box saying " The page you were looking for doesn't exist. You may have mistyped the address or the page may have moved."\), so the API works \(or at least answers\). You are probably missing some key parameter. Try to do the request through some other client, or via jQuery on the console of a browser to see the headers on that request. Hope you find a solution.
O(n^2) is horrible? Tell that to NP.
I am new to Ajax and I do not want to use jQuery. I am learning to do it in pure JavaScript.
I know, I suggested it so you could see on the Network section of the Console what headers does it use to connect to the API, because it does connect. It's a 404 tho \(maybe the URL is wrong and ajax is returning the wrong error?\), but it reaches the page.
Imo, it's effectively the same thing.
Thanks! Looks like this does a good job at handling some of the boilerplate with all the prototypes and extending.
Honestly, I don't see any problem with what you laid out, though: &gt;Are there higher level constructs I can use that achieve the same classlike inheritance that I use in my example? Have you looked into ES6 classes?
I like the idea of modules, but I don't like that the support isn't there yet. For personal chrome/ff-only stuff I've explored modules a bit and they did fine. 
The process won't exit until you call db.close. The open connection will keep node alive.
Please add a biiiiig huuuuge disclaimer at the top noting that this is an academic exercise and is not to be used within a mile of a codebase that needs to be performant. Yes, these implementations are "by the book" but they will also be slow as molasses. The big-O graph is the theoretical graph. The actual run time will vary across js engines, and will usually see a BIG spike around the 16-array-length mark.
/u/matthewbpt commented with an example of how ES6 classes would look when applied to my code. As long as I don't need IE11 support, it looks like they would do a nice job!
It's nice to see the examples and use cases spelled out in this article, but it should really mention that this is ES6 Object Destructuring in practice.
Very true, a common misconception is classifying Material-UI as an alternative to bootstrap (which it's not for the reasons you outlined). Just mentioning my experience if anyone here were to try to make it extensible...don't!
Just shows how little I know about everything. It's basically a list of fruits I want imported into different slots in an array to later compare if a written fruit is included in the list. I've already got the function to check if the fruit is in the array. All I need to do is import the list into the array
Delicious curry.
You originally asked a very different question. You explicitly mentioned **refreshing the page**. When you refresh the page, the whole thing is re-loaded and re-executed and you lose the previous state. This is not about the language but about how the web works. Now, if you **only need to refresh a part of the page** (i.e. a table) then what you should do is re-paint just that table, which you can do using the DOM API.
Hi /u/Conny21, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/Vitamin_C_is_awesome, For javascript help, please visit /r/LearnJavascript. Thank you!
I'm sorry that you thought my tone is _inappropriate_. I can't see anything particularly aggressive except, maybe, the use of bold (which is just for emphasis). Anyway, as I understand from your comments, it is better that you go to /r/LearnJavascript for help, as this subreddit is not really for this type of question. When you post your question there, though, I would still suggest that you explain your problem in a more clear way, showing all the details and, hopefully code.
Hi /u/ipromiseimnotakiller, please refrain from personal attacks. Thanks.
Hi /u/PurpleIcy, last warning on the personal attacks. Thanks.
thanks, just read through that. So it seems that textContent is much more "deep" of an attribute as it deals with scripts and hidden elements, where innerText just scratches the surface of elements, no?
So I've put `db.close` in `exports.close`. This still seems like a workaround to me, though, not really controlling execution flow
But it’s not. 
\&gt; If you properly escape user\-submitted content it all works out fine. Thats a lot harder than it sounds. I would suggest using document fragments, it should be faster. 
Disagree on Angular. But I do think Vue is both more beginner friendly AND more expert friendly than either React or Angular. Angular will get you from beginner status to deployed app fastest, unless you already know the React ecosystem before going in.
If you go for Angular, you should know that "AngularJS" is typically used to refer to "old Angular," while "Angular" is used to refer to latest. They dropped the "JS" at version 2 (now on version 6), but there's still a lot of people on version 1 so AngularJS usually means version 1 (harder to upgrade from v1 to v2...its been super easy to upgrade ever since, however).
try /r/forhire 
As others have already suggested, I agree that writing ES2015+ syntax would be beneficial. As examples for employment, I don't think you're being close minded at all. There are benefit to writing pure JavaScript, such as exhibiting core understanding of the language as well as future-proofing against technical debt.
Are there any specific reason why you're doing this with callbacks instead of Promises? If you use async/await, you can write much more readable code that perhaps will make it more obvious how when you can open or close connections. Look at this npm package for sqlite with promises: https://github.com/kriasoft/node-sqlite
Awesome! Will do! Thanks!
Link a gist plz?
You see coke vs Pepsi, I see soda vs soda. To each there own 😁
This. You can apply the best practices from the beginning, optimizing your time
I use createElement, setAttribute, addEventListener, etc to create and manage my nodes. If I need to set the content of a node I usually just use innerHTML but looks like I need to switch to innerText. Assuming I do all that, what's the benefit of a document fragment? Let's say I create a div element and attach all of my content to it, then at the end I attach the div element to the body. That would effectively have the same effect, right?
If we were using those terms correctly for software (and we're not), a zero-config car would be a car that detects you wish the car was red and not blue in that particular moment, and it repaints itself on the fly. 😒
ok, I'll post it there.
Use CrxOop. It will give you 'classical' OOP, and makes working with the DOM more natural, beside allowing you to write better defined and cleaner code. See "http://eyeandtea.com/crxoop/v2/ch01/03". If you do not like 'classical' OOP, take a look at CrxOop prototype based programming facility, which gives the same advantages. See "http://eyeandtea.com/crxoop/v2/ch01/04". If you are ambitious, try to parse the dom into CrxOop based classes, and use the CrxOop based dom to do your dom work. If you manage to get this far, the possibilities are endless, such as extending the dom, and doing your own rendering. For rendering, you will need to use jQuery or something similar for not only dom access, but for measurement and setting dimensions and other pixel modifying tasks. Rendering here is not about generating the html, which should be clear by now. It is about what other technologies call rendering. For more advanced tasks, you might also want to implement something that generates html from the CrxOop based dom. For performance, you might decide to hold on to the dom elements inside the CrxOop class instances, but in this case, you should implement a destructor to avoid memory leaks, so take a look at ANNUL in the CrxOop documentation. I already have a library which does all this, and far more, but writing the documentation is currently beyond my capacity. Having said all that, do not use CrxOop simply because it exists. First try procedural, then if you need prototype based programming, use CrxOop's structure facility, and then if you need OOP used CrxOop's class facility. 
Been using this for last year or so, great library.
Any particular reason you don't want to use typescript? I find it just makes everything simplier, even for small applications. 
:) Everything actually is broken up into multiple files, one per "class". I just dumped a single block of code on there to keep the example simple. Trust me, I've been there with the large files and much prefer to break it up.
I should have asked you your definitions before we started. It would have been a smoother ride :3. I would have said zero config is either something you can't config, or something that updates it's self in response to something else you've done (or both). Similar to your car color analogy but without the wishing😂. In parcels case, I cant tell it to do anything with babel directly, but if it detects a .babelrc file it knows I want to use babel , so it does use babel for transformations. I still get to configure babel myself, assuming I use it. That's not up to parcel though. Parcel, by default will bundle up my html, CSS, and Js. In that sense it's pre-configured to work to bundle those files. It's also zero-config but imo, the distinction doesn't matter much to me. 
Java is to javascript as ham is to hamster.
Just not my cup of tea. I don't like having to have a compile step between saving my js file and viewing how it works in the browser. No source maps, no starting a server or application to watch for file changes, no third party tools or plugins, etc. I agree with what TypeScript is trying to achieve, though. I've done work with the Closure compiler before where everything was documented and statically typed. It can be a bit cumbersome but it was nice enough.
This is an awesome gateway for us JS devs, thanks for sharing!
I started porting a XML layout engine I once wrote to create PDF documents using node.js and pdfkit from command line or as library. Supports headers, footers, custom fonts, custom components, SVG Paths and QR codes https://github.com/terotests/evg
Can you post your code?
Put 4 spaces in front of each, so Reddit formats it as code. 
I have done that but after saving the edit, the changes are reverted; I decided to inline code function to make text better.
The GitHub repo was already posted two days ago.
You didn't get a job offer. You got a third interview. That's a whole different thing. Show them projects that you are proud of. If you show them things that you don't care about, it'll show. If you don't have any projects that you care about, then there isn't really anything you can do other than just code something and hope they don't really ask about it.
It's a pretty weak argument if that's what they come up with. Programmers are involved in virtually every industry and changing the game in many of those industries. So what if your day is spent in front of a monitor? Odds are you'll get a higher salary than most workers, you'll be challenged, you'll get a better work life balance than many people, you can end up working on cool projects that help people and you have way less on the job health hazards than some manual laborers do. Shut them up by succeeding in your life and achieving your goals. Some friendly banter amongst friends is fine, but if they're constantly be pricks, success is the quickest way to shut up any haters.
That still seems kind of tedious and error-prone. Consider the difference for even a simple example: var container = document.createElement('div') container.className = 'container' var div = document.createElement('div') div.className = 'clicker' div.style.width = '20em' div.style.height = '10em' div.addEventListener('click', function(e) {/*...*/}) div.tabIndex = 0 div.textContent = 'Click me' container.appendChild(div) vs: var container = h('.container', h('.clicker', { style: {width: '20em', height: '20em'}, onclick: function(e) {/*...*/}, tabIndex: 0 }, 'Click me') ) 
There probably should be a huge caveat stating things like linked lists, doubly linked lists, etc. are not actually possible in JS, as JS does not have pointers. Linked lists for example, are replicated in JS by nesting objects within other objects but are fundamentally different. Doubly linked lists is a memory leak, as it creates infinitely nested objects.
Hey man! Congratulations on your interview. By the sound of it, you already passed two stages, so presumably they don't think you're a total disaster. Here's some ideas you can do: *Todo-list* It's a total cliché, but they're very easy to make, and they will show off some basic concepts, like handling a list of items, handling state, event delegation and manipulating the DOM. *Cart (or very simple one-page webshop prototype)* Imagine a one-page webshop/cart layout, where you can add/remove things to the cart, update their quantities, update total price, shipping etc. It showcases the same as in the todo-list, but is a bit more advanced and less cliché. It will also showcase that you understand datastructures and calculations. *A video or audio player* Not as hard as it sounds, and with lots of cool extra features you can tack on, like file upload, creating playlists and so on. You can also try to play with gestures, like swiping sideways to skip track. [Audio player example from Codepen user Alex Katz](https://codepen.io/katzkode/pen/Kfgix/) *Speech-to-text or text-to-speech* Really simple API, with which you can do lots of cool stuff. Perhaps you can create a simple app, which accepts voice commands (think a scaled down version of Google Assistant). [Short how-to by Wes Bos](https://www.youtube.com/watch?v=0mJC0A72Fnw). I think the core of it is, that it should be something really simple and where you can showcase some good code. Don't make the mistake of starting a huge project you won't be able to pull through with in time. Quality code is better than numerous dumb features. Ideally, it should also be something you can feel passionate about. That will help motivate you, and it will be easier for you to leave a good impression if you seem ambitious and passionate. As for the interview itself, just be cool. Most likely it's going to be a very informal chit-chat, where they just want to learn what kind of person you are. For a junior position, I doubt they are going to drill you with super complicated technical questions. Don't be late. Give a good handshake. Look interviewers in the eyes. Be kind and polite, smile and be friendly. Also, remember that this is a two-way interview. It's also your chance to figure out, if this company is a match for you. So do some research about it, and write down any question you might have. Best of luck to you, man!
I rebuilt blackjack 21 using js, html5, css. I've got it running on the web and also released it as an android app: [popup21](https://play.google.com/store/apps/details?id=com.quickplay.popup21)
Living well is the best revenge.
I've never really went beyond static sites. I use a static site generator named, Spike. It's basically webpack with a thin\-layer of plugins. 
what year is it
Chances are they do as well. It's just that you do more than sit on facebook and read emails when you do it. Plus you can work on your laptop from anywhere in the world, programming jobs are flexible. They're probably the same people who complain about their jobs every day. Your happiness and success with your career will win over anything they could say.
Reading through your code, a few questions: In the Base constructor const subscribers = [...this._subscribers]; 1. you state in the comments you make a copy. Do you, though? a new array is created, but each of the functions in the array of this._subscribers and the above 'copy' are reference-bound to the *same functions*. See this [repl script](https://repl.it/repls/DarkCanineCells) I made which demonstrates that each of the executed functions in the array using this method are the same. Why would doing that benefit you, anyway? See next comment. 2. you go on to say that creating the copy ensures a 'proper iteration'. What about using the original would cause issues in the iteration? I don't see it. Also, state might be more predictable if you make state an immutable constant and never mutate it directly. Instead, make a copy with updated properties and replace the whole state object. On the use of tickedoff: 3. looking in the source files of the tickedoff library, I can see that the passed in deferred callback gets wrapped in an asynchronous function. First it tries process.nextTick(callback) [executes contents on next event loop], then wrapping it in a promise, then a setImmediate, then a setTimeout. I can see how this would be helpful for processes in which you want to be able to implement asynchronous behavior, such as a server with long calls. I don't see any reason to use that here. 
So it auto calls super () with no arguments, thus the default constructor accepting no arguments or the declared constructor that takes an argument, but set to undefined? Is it the latter since if the default constructor is called then this.callbacks doesn't exist since this.callbacks is declared in the constructor that takes an argument?
And them posted them to Medium of course!
The default constructor should forward any arguments passed into the subclass's constructor. So if you pass in arguments to BubbleSort, the Sort constructor should see them as well. You can think of the default constructor looking like this: constructor (...args) { super(...args) }
Hi /u/SweetSoursop, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (/r/javascript is not a job board).
Mmm, had no idea this would be so simple! Can't wait to play with this some more. The blog looks great, and the interactive code examples are awesome.
Really ? Not with that overly complex DSL. Granted, haven’t looked at angular in the last year so thing may have changed. 
Just use Momentjs. If I ever have to do any formatting/calculations with date/time I install moment. Dates are too much of a pain.
I think it’s cool for small projects. Setting up Prettier \+ ES Lint is always a pain.
No matter how many times I hit randomise, England never won. It broke!
What? This isn't true. Linked lists and doubly linked lists work just fine. While there are no pointers in the C++ sense, you can store references to the next and previous objecs just fine. &gt; Linked lists for example, are replicated in JS by nesting objects. No, they are replicated like in any other language, by storing a reference to the next element. &gt; Doubly linked lists are a memory leak, as they create infinitely nested objects. No they don't, and no they are not a memory leak. Where did you get that information?
Offer up a high five and a smile
You are right. I was wrong. 
##r/webdev --------------------------------------------- ^(For mobile and non-RES users) ^| [^(More info)](https://np.reddit.com/r/botwatch/comments/6xrrvh/clickablelinkbot_info/) ^| ^(-1 to Remove) ^| [^(Ignore Sub)](https://np.reddit.com/r/ClickableLinkBot/comments/853qg2/ignore_list/)
I'm a bit off topic but I thought it might be worth thinking about. Maybe you have already thought about it but didn't really allude to it in your post. You mention "passing" the first two interviews at this "big" place, have you been asking them questions to see if they pass your interview(s)? It's nearly as important that the company / job "fits" you as you fit the job - it makes going to work everyday a little easier. It's very easy as a beginner to just be excited to be given an opportunity to learn but don't let that be an open door to being treated like garbage. I am in the process now of changing jobs after spending 11 years with my current company and I can say that I think I grilled the owner of the new place far more than I was grilled and I am 100% happy to have accepted their offer. So, good luck on your journey and this opportunity but just remember to make sure things align in both directions and it seems like a place you'd be happy to work at.
api looks really nice. well done.
Can anyone share a real world usecase for these algos in JS? 
try/finally is a good way to go if you use the async/await method like bvx89 said above. The try/catch block will automatically apply to all `await`ed statements inside it, and finally can close the database at the end. You'll just write the whole thing like it's a synchronous program. That's the nice thing about async/await. If you're already ending the program with process.exit() you probably don't strictly need to bother with db.close. I imagine it's a good idea, but the OS will flush any pending writes and close the file handle to the database, which should all be fine as long as the sqlite library left it in a valid state between writes (which I hope it would).
Yeah, there's something to be said for working in a language/environment that saves you time overall. Even if that means overhead when saving and the extra time to get your tools running. I admit that I'm stubborn and hate change but I'm always willing to try new things if I believe it will save time/money/energy. Thanks for your comment!
this is the response that i received VM404:3 [{"title":"Taylor Swift","artist":"Taylor Swift","url":"https://www.amazon.com/Taylor-Swift/dp/B0014I4KH6","image":"https://images-na.ssl-images-amazon.com/images/I/61McsadO1OL.jpg","thumbnail_image":"https://i.imgur.com/K3KJ3w4h.jpg"},{"title":"Fearless","artist":"Taylor Swift","url":"https://www.amazon.com/Fearless-Enhanced-Taylor-Swift/dp/B001EYGOEM","image":"https://images-na.ssl-images-amazon.com/images/I/51qmhXWZBxL.jpg","thumbnail_image":"https://i.imgur.com/K3KJ3w4h.jpg"},{"title":"Speak Now","artist":"Taylor Swift","url":"https://www.amazon.com/Speak-Now-Taylor-Swift/dp/B003WTE886","image":"https://images-na.ssl-images-amazon.com/images/I/51vlGuX7%2BFL.jpg","thumbnail_image":"https://i.imgur.com/K3KJ3w4h.jpg"},{"title":"Red","artist":"Taylor Swift","url":"https://www.amazon.com/Red-Taylor-Swift/dp/B008XNZMOU","image":"https://images-na.ssl-images-amazon.com/images/I/41j7-7yboXL.jpg","thumbnail_image":"https://i.imgur.com/K3KJ3w4h.jpg"},{"title":"1989","artist":"Taylor Swift","url":"https://www.amazon.com/1989-Taylor-Swift/dp/B00MRHANNI","image":"https://images-na.ssl-images-amazon.com/images/I/717DWgRftmL._SX522_.jpg","thumbnail_image":"https://i.imgur.com/K3KJ3w4h.jpg"}]
Hi /u/Droid2Win, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/ArchiitecT_, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Why was it not removed the first time?
^The linked tweet was tweeted by [@mathias](https://twitter.com/mathias) on May 23, 2018 01:37:10 UTC (613 Retweets | 1450 Favorites) ------------------------------------------------- 🎉 At today’s TC39 meeting, \#SmooshGate was resolved by renaming `flatten` to `flat`. Array\#{flat,flatMap} are coming soon! Background: [https://developers.google.com/web/updates/2018/03/smooshgate](https://developers.google.com/web/updates/2018/03/smooshgate) [Attached photo](https://pbs.twimg.com/media/Dd2F4aIV0AExsME.png:orig) | [imgur Mirror](https://i.imgur.com/PYeCOyp.png) ------------------------------------------------- ^^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •
[Here](https://developers.google.com/web/updates/2018/03/smooshgate) is a description of what #SmooshGate is referring to. Basically, the method was originally supposed to be called `flatten` but that caused a conflict with MooTools. 
This made me so angry and bitter. These people, afraid to "break the web" are the ones whose action result in the web being broken systemically and overall for every single one of us, as opposed to occasionally for a few people. Their regressive decisions are lazy and cowardly. This one in particular might be a minor thing that's not worth getting worked up about, but it's a symptom of just how disastrous the state of the whole affair it.
Unless you send to a server you can't possibly store things non-locally.
CustomElements v1 why not. Template yes why not. But no ShadowDOM required, please.
I agree with you. I wonder if WebAssembly might allow a whole new version of JS to emerge? The good stuff without the crap and without the backwards compatibility concerns. We'd also never have to worry about browser compatibility again.
This post feels pretty obnoxious in its dismissal of Elm. Talking about an openly supported language with a growing community like its some failed experiment that ReasonML has perfected. &gt; While Elm seemed like a beautiful prototype built on innovative ideas, ReasonML seems the enterprise-grade realization of those, appropriately standing on the shoulders of giants and appealing to the taste of the mainstream. (highlighting not mine, the post is actually that obnoxious.) ELM = PROTOTYPE REASONML= ENTERPRISE, MAINSTREAM, FACEBOOK 
Do NOT use momentjs. Understand that there are two reliable ways to exchanges dates: as timestamps: var d = new Date(int); var stamp = d.getTime(); if (!isNaN(stamp)) console.log("valid date", d); or as ISO 8601 strings: var d = new Date(str); if (!isNaN(d.getTime())) console.log("valid date", d.toISOString()); That's almost it ! Now if you need to output language-dependent dates/times, don't use momentjs. Use https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat which is polyfilled by polyfill.io.
Meteor.js Dead simple. 
Great! I'll look into that.
#flatGate anyone?
Thats something ive only known by name. Ill check it out!
Not really. Are you programming for free and giving away your package to boost your ego or help the community? If the latter, giving up the name (lets be serious, its not his house or anything) is way better than just blocking progress.
came in to say something like this, upvote
For comparison, and do forgive any syntax errors, whether javascript ones, or CrxOop ones: A rough equivilant to your code is: crx_registerStructure('project.component', { 'VERBOSE': 1, "PUBLIC CONSTRUCT": function(){}, //NOT ACTUALLY NEEDED "PUBLIC SHARED FUNCTION render": function(parent) {} }); crx_registerStructure('project.layer', { 'VERBOSE': 1, "PUBLIC CONSTRUCT": function(){}, //NOT ACTUALLY NEEDED "PUBLIC SHARED FUNCTION render": function(parent) {} }); crx_registerStructure('project.component.card', { 'VERBOSE': 1, 'INHERITS': ['project.component'], 'PUBLIC CONSTRUCT': function() { this.CONSTRUCT('project.component').apply(this.PARENT('project.component'), arguments); }, 'PUBLIC SHARED FUNCTION render': function(parent) { var foo = document.creatElement('div'); foo.innerHTML = 'bar'; parent.appendChild(foo); } }); crx_registerStructure('project.layer.home', { 'VERBOSE': 1, 'INHERITS': ['project.layer'], 'PUBLIC CONSTRUCT': function() { this.CONSTRUCT('project.layer').apply(this.PARENT('project.layer'), arguments); }, 'PUBLIC SHARED FUNCTION render': function(parent) { crx_new('project.component.card').render(parent); crx_new('project.component.card').render(parent); } }); However, I would recommended classes, and then you would do, crx_registerClass('project.component', { 'VERBOSE': 1, "PUBLIC CONSTRUCT": function(){}, //NOT ACTUALLY NEEDED "PUBLIC VIRTUAL FUNCTION render": 0 }); crx_registerClass('project.layer', { 'VERBOSE': 1, "PUBLIC CONSTRUCT": function(){}, //NOT ACTUALLY NEEDED "PUBLIC VIRTUAL FUNCTION render": 0 }); crx_registerStructure('project.component.card', { 'VERBOSE': 1, 'EXTENDS': 'project.component', 'PUBLIC CONSTRUCT': 1, 'PUBLIC SHARED FUNCTION render': function(parent) { var foo = document.creatElement('div'); foo.innerHTML = 'bar'; parent.appendChild(foo); } }); crx_registerStructure('project.layer.home', { 'VERBOSE': 1, 'EXTENDS': 'project.layer', 'PUBLIC CONSTRUCT': 1, 'PUBLIC VIRTUAL FUNCTION render': function(parent) { crx_new('project.component.card').render(parent); crx_new('project.component.card').render(parent); } }); The code can be run straight in the browser, assuming no syntax errors for Javascript or CrxOop.
If it's all the same to you I would prefer the web to have less pop ups, why do developers have to do more and more things that produce more pop ups !?
The last time we tried to say "fuck it, let's break the web for the greater good" was XHTML. That worked out so well, right?
For comparison, and do forgive any syntax errors, whether javascript ones, or CrxOop ones: A rough equivilant to your code is: crx_registerStructure('project.component', { 'VERBOSE': 1, "PUBLIC CONSTRUCT": function(){}, //NOT ACTUALLY NEEDED "PUBLIC SHARED FUNCTION render": function(parent) {} }); crx_registerStructure('project.layer', { 'VERBOSE': 1, "PUBLIC CONSTRUCT": function(){}, //NOT ACTUALLY NEEDED "PUBLIC SHARED FUNCTION render": function(parent) {} }); crx_registerStructure('project.component.card', { 'VERBOSE': 1, 'INHERITS': ['project.component'], 'PUBLIC CONSTRUCT': function() { this.CONSTRUCT('project.component')(a, b, c, d, e); }, 'PUBLIC SHARED FUNCTION render': function(parent) { var foo = document.creatElement('div'); foo.innerHTML = 'bar'; parent.appendChild(foo); } }); crx_registerStructure('project.layer.home', { 'VERBOSE': 1, 'INHERITS': ['project.layer'], 'PUBLIC CONSTRUCT': function(a, b, c, d, e) { this.CONSTRUCT('project.layer')(a, b, c, d, e); }, 'PUBLIC SHARED FUNCTION render': function(parent) { crx_new('project.component.card').render(parent); crx_new('project.component.card').render(parent); } }); However, I would recommended classes, and then you would do, crx_registerClass('project.component', { 'VERBOSE': 1, "PUBLIC CONSTRUCT": function(){}, //NOT ACTUALLY NEEDED "PUBLIC VIRTUAL FUNCTION render": 0 }); crx_registerClass('project.layer', { 'VERBOSE': 1, "PUBLIC CONSTRUCT": function(){}, //NOT ACTUALLY NEEDED "PUBLIC VIRTUAL FUNCTION render": 0 }); crx_registerStructure('project.component.card', { 'VERBOSE': 1, 'EXTENDS': 'project.component', 'PUBLIC CONSTRUCT': 1, 'PUBLIC SHARED FUNCTION render': function(parent) { var foo = document.creatElement('div'); foo.innerHTML = 'bar'; parent.appendChild(foo); } }); crx_registerStructure('project.layer.home', { 'VERBOSE': 1, 'EXTENDS': 'project.layer', 'PUBLIC CONSTRUCT': 1, 'PUBLIC VIRTUAL FUNCTION render': function(parent) { crx_new('project.component.card').render(parent); crx_new('project.component.card').render(parent); } }); The code can be run straight in the browser, assuming no syntax errors for Javascript or CrxOop.
Why are you reposting so soon?
Because I had updates, as well as a new URL. 
It's not so much that TC39 doesn't want to break the web (though that's still a noble ideal, even with its costs). They want all spec implementers to agree on what features they will implement and how. And browsers implementers just won't change things if it causes websites to break unless there is an extremely good reason behind it. If implementers start cherry-picking which parts of the spec they want (and adding their own extensions as they already do), then the spec loses credibility. Implementers start referring to it less. Maybe they stop sending people to TC39 because it becomes a waste of time. Maybe they start another spec. Maybe they stop using a public spec at all. Sure one way it could turn out is end up with a benevolent implementer (with majority market share) fix everything that's broken in the web APIs and JavaScript. But it's highly more likely that they'd still end up making misguided choices. Either way other implementers will still have to copy these changes so their browser can navigate the web at all (because of course developers are going to develop for browsers that bring the most traffic first). But this time, these less used browsers would have no say in the matter. The web as it is may suck for developers, but at least it's unified.
Is the randomizing weighted?
Thanks azium!
\&gt; These people, afraid to "break the web" are the ones whose actions \(and/or inactions\) result in the web being broken systemically for every single one of us This seems a bit dramatic given that they're just renaming `flatten` to `flat`. How does that break the web?
1) Yes. If you don't want it to be created for each instance, you can make it static or something like that 2) See ^ 3) Yup, and the comment approach would be preferred since you're not duplicating that functionality
I removed it because I don't think it'd be particularly useful to /r/javascript. Perhaps if it was more like codepen, jsfiddle, jsbin, runkit, repl.it, etc. where there more to the story than just static `text/plain` hosting, then we would allow it, but as-is I don't think it offers much. I'm sorry to speak negatively of your project, I'm not trying to downplay your work, just trying to keep the interests of over a quarter-million users in mind.
I know, however you are wrong about one thing. My project will run JavaScript, html, and css so it is not a plaintext file sharer. Either way, I respect your opinion. Thanks for your time.
Do higher ranked teams have a higher chance of winning a match when it's random
Nope. Random is completely random. You might get Panama winning the world cup :P
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
And users *hate* it when websites don't work. It's literally one of the quickest ways to lose marketshare. The website works in Chrome but not Firefox? That hurts Firefox in the market. And even being in a majority position like Chrome there's still a limit as to what you can push through before users start trying to stay on older versions (arguably the worst outcome!) or move to other browsers (which at least get updates!).
If anything that means it works 
You mean from one page to another? You can use window.location.href = anotherPageUrl + "?" + myInputBox.value; Then parse that url from the other page with `window.location.pathname` or `window.location.search`. Get the string from `?foobar`and inject it to your empty page's innerHTML like `document.body.innerHTML = parsedString`; Otherwise, your post is not clear enough for comprehension
This is excellent insight. However, I still feel like MooTools should release a patch version that fixes their lib. Sure, not every Moo site will update and be compliant: but the important ones will. Any site worth their salt (and has high traffic) will have a maintainer to upgrade appropriately. The ones with problems will be the ones that are stale and poorly maintained. But I digress. It's an interesting issue.
Real world? Learning purposes only. They don’t teach algos and data structures in JS because it’s not performant in the slightest 
Would be a great idea to add Bipartite Matching and Max Flow Min Cut.
&gt; more then 50 popular algorithms are implemented not the grammar algorithm it seems
Props, dude. You may have just typed out a message never typed on Reddit before
In what way did XHTML break the web?
I believe they mean, a different possibly new language could be compiled to web assembly, and we could disregard JS altogether.
Increasingly often I wish it had been decided that a new major version of EcmaScript would not have to be backwards compatible, and you'd just specify the version in the script tag. I am glad they chose `flat` though.
Capitalize the L in innerHTML.
Thank you! can't believe i let that slip
My suggestion is to create a language-level feature/syntax that is reserved for standard libraries. Obviously, it wouldn’t be able to attach new functionality to the prototype, but if it is bad for MooTools to do it, it’s bad for the standards body too for the same reason: future incompatibilities. Instead, there could be a “std” namespace that allowed cos or modules to import directly from the browser or node runtime. That, or attach methods to a JS reserved word like void or static or final, so you would do `let flattened = void.flatten(list);`
Trust me... This won't be the last time that happens. :)
As a side note: this level of code works just fine by making a plain html file and just double clicking it. No need to run it through an online sketch pad. That being said, I'd look for a free IDE there's a ton of very good options (so good that we use them in industry, still free!) Soon you're going to be tearing your hair out if you don't have access to a visual debugger. I give it a week before you're bald :P
On the plus side, this whole debacle can be pointed to as a demonstration of why you should be hesitant to extend the prototype of things you don't control.
Yeah I know, but the syntax makes the recursion a little easier to digest.
I'm not sure if there is sorry... Otherwise you could alter your code to handle the "5 hours, 45 mins" format. There's probably a regular expression that would efficiently handle it. If I was going to very crudely make something to handle the above time format with my own limited knowledge, you could do: let time = '5 hours, 45 mins'; // value from $("#your-chosen-element").text(); const justHours = parseFloat(time.split(' hours')[0]); const justMinutes = parseFloat(time.split('hours, ')[1].split(' mins')[0]); let seconds = (justHours * 3600) + (justMinutes * 60); I guess if that doesn't work, like you said, you could just rearrange the order of the scripts in order for it to work... Hope that helps!
I'll take sacrificing 3 letters over not breaking the web. The meaning is still there. Perhaps when the impact is considered minor enough, we'll one day have flatten in the spec as an alias for flat.
I would say O(n) is excellent. Lower than O(n) means that it doesn't even check all the input data, which is impractical (unless the data is arranged in a particular order).
And if you really want to, use a Symbol so there is never a collision with something like: const methodId = Symbol('method') String.prototype[methodId] = function () { console.log('oh god') } function method (target, ...args) { return target[methodId](...args) } 
Like when we used 'use strict'
I agree. Anecdotally speaking, though, I uninstalled Chrome because I don’t like Domenic Denicola’s attitude. 
Not sure I would agree 100% if that was what was meant, languages would still feel the pain that JS feels of not being able to significantly change the language due to backwards compatibility. 
&gt; Sure, not every Moo site will update and be complian Yeah you'd be surprised how many sites would actually never update. I've made countless websites in the past, and like 99% of them use jQuery 1.x
/u/unstablevacuum is undoubtedly referring to XHTML 2, a backwards incompatible standard that was the shining beacon of hope in the early 00s. It would have thoroughly broken things. Basically if it had got adopted by browsers then you would have seen a clean split among the web. Any websites designed to the standard would not have worked at all on browsers released a day prior adoption. It was a clean break, and that's why it failed.
To be fair, `Symbol` wasn't around when people were mashing up prototypes en masse. I don't really know anyone who does it anymore, since we've all been burned by it and know better now.
The "example" shows you how to pollute the string prototype. NodeSecurity.io classifies prototype pollution as a vulnerability in software. For example: https://nodesecurity.io/advisories/566
static members are only defined once, when the class is created. Instance members (those not inherited) are created for each instance created. If you have data you don't want to duplicate across all instances, you can make it static to the class meaning it won't be defined in each individual instance, it will be defined once in the class. Instances can then refer to it using `&lt;ClassName&gt;.property` (e.g. `Savior.property`) instead of `this.property`
Absolutely. I had a bit about that and edited it out thinking the `Symbol` was an implementation detail as there there is nothing stopping people from name spacing their extensions with something like: var namespace = 'lib' String.prototype[namespace] = { method: function () { console.log('good enough') } } var lib = { method: function (target) { return target[namespace].method() } } lib.method('foo') // 'good enough' I'm not trying to condemn the authors though. I just wanted to share a safe(r) way to extend prototypes if anyone wanted to do so.
Actually it is frowned upon (as a code quality issue) to set methods on a global prototype, but its not a "security" issue. The issue you lined is about true "prototype pollution" where user input is used an as object (like a JSON request body in express) is merged with another object in an unsafe way which allows that the user to modify the *__proto__* or *prototype* members on an object. A full write up about this type of vulnerability: https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf tl;dr: This example simply sets a new method on the string prototype and does not expose this security risk in any way. 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [HoLyVieR/prototype-pollution-nsec18/.../**JavaScript_prototype_pollution_attack_in_NodeJS.pdf** (master → 9d4eb2b)](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/9d4eb2bf32b6939e130b6af2aac7b95a01fbcdfd/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf) ---- 
We shouldn’t let an ancient, unnecessary library used by ancient, unmaintained websites dictate the future of the language forever and ever. But instead we’re going to continue bending the language around this garbage, despite the fact that the vast majority of JavaScript users have never even heard of MooTools (until they come across discussions like this), and before too long the majority of JavaScript users wouldn’t even have been born the last time MooTools was relevant. At some point a line needs to be drawn with this shit. Flatten is the correct name for a function that turns nested arrays into a flat array, and if putting that in the language screws up websites that are still using that crap, then it should be sad fucking day for those websites. They shouldn’t have been using a library that alters prototypes in the first place. 
K
And what was wrong with `Array.prototype.smoosh`?
If you are really forced to, you can create an **SVG** with all your buttons and links with inkscape. Prior to this you can create edit a BITMAP file into gimp or photoshop, then from inkscape «**Trace bitmap**» export to **svg**, then open your text editor and **copy all between \&lt;svg\&gt; tags, paste into html**, profit! ;\)
but how? and is it necessary to spin up a server for this?
Python's doing fine, it just took a little longer to move people off 2 and onto 3, but it seems like pretty much most stuff people actively use works for Python 3 at this point, and Python 3 has so much good stuff in in these days that starting a new project in 2 would be crazy. Eventually it'll just be legacy projects that are in Python 2, but legacy projects also exist in COBOL so I'm not holding my breath on all code being Python 3. 
I hope you too feel the same way when one of your sites breaks due to what were considered reasonable practices when you made them, but now represent actual evil intent on your part even though you never changed anything.
Like “flat”?
This is shit.
I’m still stuck in a python 2 codebase. Do not enjoy it.
Yes except try doing anything Linux. Especially when you don’t know much Python. It’s a world of hurt.
“Flat” is more like an adjective than a verb, probably why “flatten” was preferred at first. And “flat” is not a synonym of “flatten”. 
No necessarily. For example, if it’s easy to write code that’s compatible with both old and new versions, that’s what library authors will do. While applications tend to stay on the version that was relevant when they released. If there’s no overlap whatsoever there’ll be a schism, I agree.
There are quite a few apps for this. I haven't looked in awhile so I couldn't say what's good. But a simple search on whatever app store you have on your tablet should turn up a number of options. Take your pick.
Why not use the [array buffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) and a [data view](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) so you actually store it as proper types?
Thanks! You nailed it (I think). [Sorry I took so long to respond, I had no idea how to structure this before, and then it was night, and I went to sleep.] So I checked Promises and async/await out, and &amp;mdash; well, you learn something new every day, I guess. The readability of a promise chain or async function is a *definite* plus (as you said), and I can also finally do `myPromise.then(...).then(db.close)`, which solves all my problems. Trouble is, I am completely unable to understand async/await or the *creation* of a `new Promise()`, and what's really the difference between Promises and async/await? It doesn't matter, if I pore over MDN some more, I'll be able to use it. Since Node.js version 8 LTS supports ES6/7 natively, can I use Promises and async/await with sqlite3 itself? I guess that's the *real* question.
You're in luck, I've tried to do this for years on an iPad and I've amassed a few good links. https://medium.com/actualize-network/web-development-on-an-ipad-69f253bc9c38 https://medium.freecodecamp.org/giving-the-ipad-a-full-time-job-3ae2440e1810 https://www.theverge.com/circuitbreaker/2018/3/27/17152482/ipad-pro-web-development-setup-how-to-terminal-apps To be honest though, as someone who uses VS Code, it's difficult without my editor tools. If you're one to use vim or are dedicated to using it, it's definitely better.
I really enjoy his teaching style. He keeps content simple and functional. 
What were the other conflicts?
Nonsense. We're not talking about a nonexistent "js standard library," we're talking about the formal definition of the language. And, yes, the language (obviously) defines the prototypes for standard objects.
first paragraph: upvote second paragraph: I died inside
Seems to demonstrate the opposite. You get to control the standards forever, so long as your code is reasonably popular. 
thanks!
I feel like this is going to be very specific to what one is doing, since I don't run into many issues at all with unicode stuff and we deploy on Linux but don't deal much with filesystem &amp; stream stuff. There's definitely something to be said for the fact that the new way of doing things is explicit about what the heck you're doing instead of things mostly working right most of the time until it all blew up in obscure ways when you had to deal with unicode stuff. 
There are cloud-based IDEs—I was looking at this when considering a Chromebook in October—but I’m not sure if/how they integrate with Git. 
Wow... just wow. These fuckers literally leveraged their immense power over ICANN to personally control the .dev gTLD recently. This was an almost comical antithesis of “don’t be evil” as it completely fucked up the web for their own benefit... but now they draw a line in the sand of backwards compatibility over a fucking bug in fucking MooTools at the expense of a very fucking common function? I thought their magic whiteboard interviews were supposed to rule out fuckwits? I want new devs to understand the significance of this so for some context: remember the first time you typed in “localhost”... that reserved keyword which resolves to 127.0.0.1. You can type in that IP explicitly and get the exact same results but localhost is nice because it’s descriptive... sort of. As programmers we want to be as descriptive as possible. As software becomes more complex, you might have multiple services or even completely separate applications running. Localhost is not as descriptive for these so programmers would frequently modify their hostsfile to give an explicit name to the application running locally for example: api.company.dev, ui.company.dev, dashboard.company.dev (even these are a bit strawmanish since the apps would have common names that would make sense to you). Now .dev was obviously NOT a gTLD when people starting using it as a logical extension for uhh... development. In fact, most of the fucking 1500+ TLDs didn’t exist either. It was even recommended in the early days that too many TLDs wouldn’t be introduced precisely so it wouldn’t be what it became what it is today... a money-grab which begets oligopolistic control over huge swaths of the web. ICANN, a non-profit, is the organization who decides on introducing new TLDs. There’s a fee to apply... approximately two google peanuts which converts to about two hundred thousand USD. Google in their “benevolence” decides to apply to add .dev and explicitly stated their reason as such: “to provide a dedicated domain space in which Google can enact second-level domains specific to its projects in development... ***due to its intended use, the .dev TLD will best add value to the gTLD space by remaining completely closed for the sole use of Google***” (emphasis mine). Of course .dev did become theirs and they subsequently added the .dev extension to a list of maintained websites in Chromium which should always have HSTS enabled. This list propagates to all other significant browsers so with one nightly build google subsequently made broke local development for many thousands of developers. Of course the workarounds were simple enough. Use .test which is reserved so as not to be a gTLD (until Google’s QA team applies for it at least and convinced ICANN otherwise). Use a subdomajn. Use a self-signed cert. The message is still heard loud and clear: these are not folks who care about the web, these are folks that care about Google. Once again, we have the voice of oligopolies making these incredibly important decisions which they are trying to make us believe are out of good will. If you dig deep enough, you can be damn sure there’s a profit-motive behind this, just like all their other supposed benevolence. Tinfoil hat: mootools sites are presumably not maintained but are presumably still be providing google with enough ad clicks that they’re willing to use a flat out retarded renaming for their own benefit. Fuck Google. 
Fuck mootools. Why would we have to support developers that modify prototype? It was well known that that's a dangerous thing since years.
Cloud9
Message are functions. Functions are functional. Functions do things. The doing of a thing is expressed with a verb. Not an adjectives. You cannot "flat" and array. You can *flatten* It, smoosh it, or squish it, but you cannot *flat* it.
If only there were a way to specify the syntax in which your code was written and provide a standards compatibility mode in browsers.
Do we assume nobody ever used `flat`?
[removed]
Would you be willing to share some of the questions you asked?
Array.prototype.*squish*()
For native speakers there might be many obvious synonyms, but considering that JS is a worldwide language I think it's better to use simpler words. I think flat is a choice that's also easy to understand for non\-natives.
Oh, that hindsight... Some context here--when MooTools started circa 2006/2007, javascript was near dead in the water and IE6 ruled. There literally was _zero_ chance of browser vendors changing things. It seemed like a revolutionary approach to extend native Types, augmenting browser differences and fixing bugs, felt like it was driving the language forward. Risk of conflicts was low as most sites would use just one major framework / library and it was trivial to avoid problems. When it happened, it was usually because of people looping through enumerable props with leaks from protos without checking hasOwnProperty - easy enough fix (people using `for in` loops on arrays, for example, was very common) What MooTools offered was also a very viable alternative to the spaghetti code world of jquery plugins, which made its adoption a lot more widespread. Ultimately, it was ahead of its time 10 years ago, it probably pushed js more than any other framework / library at the time and paved the way for ES5. It's also fair to say react wouldn't exist today without it. 
What a joke the TC39 is. They should ask the browser vendors whom are sitting in the TC39 how they handle the "don't break the web mantra" themselves: Chrome: `[Deprecation] The behavior that Selection.addRange() merges existing Range and the specified Range was removed. See https://www.chromestatus.com/features/6680566019653632 for more details.` Or the fact that Chrome and Firefox now intentionally lowercase http headers, this broke YUI websites. YUI is as much of a legacy as mootools . Chrome team even acknowledged that it broke the sites but went forward anyway because it wasn't deemed important enough to keep compatibility. So much about that.
Extending the native prototypes by itself wouldn't have caused a problem for standardization; the real issue was that MooTools only added their method if a method by that name didn't exist, which was either a misguided attempt to 'play nice' or an attempt to make sure that the method stays the same if it's standardized.
Well, I think checking before overwriting became best practice because you wouldn't run in the risk of having a different library overwrite your method, not because you have hopes of your function becoming a standard one.
I've [made a utility library](https://github.com/slikts/symbol-land) based on the idea of extending native prototypes with symbol properties; it actually makes the language a fair bit nicer to use as you can operate on plain objects, iterables or primitives with JS's idiomatic method chaining style without needing to wrap or convert them. So, for example, `Object.entries(foo).map(bar);` becomes just `foo[map](bar)`, where `map` is a symbol.
Yeah, I decided to maybe explore react due to reactVR, it looks awesome! Also when I looked for jobs, there were a lot more for react, I was pretty much going to learn angular since my old boss from when I used to intern there wanted me to, but I think I'd enjoy react more. Thanks for the link! I will for sure check that out.
Honestly if it’s an iPad I’ve used codepen before for learning and it was a fine experience 
Mootools overwrites without checking. The problem is that later it expects that property to be enumerable (which cannot be the case with built-in prototype method) and breaks because it assumes some object that it's copied to has `flatten`. There are details on Google Developers article that can be followed to from the tweet (or one of the replies).
I understand people's frustrations, but in the end it's been very good for Javascript and the web to take backwards compatibility seriously. On a side note, I'm surprised that they don't consider `Infinity` to be the default value. "1" seems like such a specific case compared to it.
`1` made sense to me when it was `flatten`, since you specify by how many levels you want to flatten the array. But `flat` sounds much more imperative and like it should completely flatten the array by default. 🤔
There will be a [React version](https://github.com/material-components/material-components-web-react/) of that coming soon actually 
There will be an [implementation soon](https://github.com/material-components/material-components-web-react/) that works with React actually
I mean, is it that big of a concern? How many people use mootools vs how many people implemented flat?
You never used it but your glad its dying? Stfu i used jquery for like 3 years and it was so good, but since ES6 i havent really used it that much as i think ES6 has done javascript some justice and made it easier ro work with. But i think jquery is a good starting point for people who want to learn javascript but arent so good with vanilla js yet (thats how i started)
Does that really matter? We've always known that extending Object.Prototype was bad and have been warned against that for ages. Now we're saying "It's not ok to extend Object.Prototype.. unless you manage to become a somewhat popular library"
Oh wow, that's why we should avoid for\-in! But yeah, such a small mistake, easy to miss. Thanks for taking the time with the write\-up!
Cool. I'm not sure why the efforts should be multiplied though, does react allow for some features specific to that framework?
I didn't write it, copied and pasted from the link.
No.
Dark grey on light grey with small font size? Ugh. 
For a second, I thought this was r/cricket 
I'm actually quite surprised that the 'use strict' approach has only been used once. As people are discussing in this thread, there are many more areas in which JavaScript could be improved by changes which abandon backwards compatibility. The 'use strict' approach seems like a viable way to pursue those changes.
This is very true. Without the helper frameworks like mooTools, Script.aculo.us and YUI, you would never have had the popularity we have now, as Javascript would still be very niche. You could possibly extend that further to the death of plugins, as the libraries became easier to develop, graphically complex web pages could be made with comparatively little effort without the use of plugins. And ultimately, the popularity of Javascript went on to breath new life into the ECMA expansion, leading to where we are now (writing c++ and running it in Javascript, *natch*) 
&gt; Modularity in Flutter never exists. It is almost impossible to inherit one component into another in Flutter app development. If that is true, it sounds pretty damning... Can someone with more knowledge of Flutter elaborate?
There is interop if you use webcomponents, [https://custom\-elements\-everywhere.com/](https://custom-elements-everywhere.com/) \- so react should be able to pick those up just fine as far as I can tell.
Shameless plug: I wrote this. It is an introduction to Execution Context and Call Stack in JavaScript. Would love to hear your feedback. Cheers!
How is this patch going to be delivered? How many of the sites using mootools are using CDNs?
Great post! Thank for your working!!!
&gt; After the first user reported the bug, the development team concluded the best action was to do nothing. The bug was rare, and the cost necessary to investigate wasn’t worth it. I do this too sometimes when I can‘t reproduce a bug but I work in a totally different sector. In a financial institution I expect every bug to be given the same priority no matter how small the actual bug is. When money is involved there is absolutely no sane reason to just ignore a bug. Same goes for missles btw. When a rocket explodes mid air 1/10000 times and the conditions to such things happening are unknown you better put any other thing on hold until you can safely assure the bug was fixed. Anyways, I‘m glad I read this as I didn‘t consider that browsers may resend a request when the connection is lost half way in. But this specific bug could‘ve been spotted way earlier by just looking at the last 5 requests the bug reporting user made. 
I will fork the prevent-smoosh project as soon as I can.
MooTools implementing a version of `Array.prototype.flatten` that differs from the proposed standard was not the issue. [This article](https://developers.google.com/web/updates/2018/03/smooshgate) goes into detail as to why there were problems and TC39s reasons for the resolution they've decided upon
&gt; Most of the problem sites are exactly the sort of sites that never update at all. Zombie sites such as this are bad for the internet in general, even more so if they get heavy traffic. Helping them survive only prolongs an undesirable situation.
Sounds like pretty bad design of the service. That request should have been idempotent and this never would have been an issue in the first place.
What *responsible* js documentation ever said "here's how to modify a prototype" without also saying "be careful because this can bite you"? Warning given, warning ignored; time to put on your big coder pants.
It's Redis
How can you turn a deposit idempotent since it has to update the balance?
See my update, you post the current balance on your account, on the backend you would verify that it's the actual current balance and reject if it's not.
This article is absolutely insane. Don't fuck with people's money. 
The whole banking industry works like this, not just their software teams. If the chance of something happening multiplied by the penalty for its occurance is less than the cost to fix it, then it stays broken forever. More than that, it's not even considered a problem whatsoever. 
Oh wow, I didn't know about that! React looks like it supports the basic features for web components but not the advanced ones, not sure how much of that is in the Material Components
Because with node.js it works fine.
Sounds like a good improvement but now it can still fail in the case that the currentBalance happens to be 100 again, which can happen in the 120 seconds before the retry. Granted that is unlikely but I think it's even better if you POST a transaction and specify the transaction number (i.e. the 124th transaction for this account).
I think the UUID is a better unique identifier than current balance, as deposit 100, withdraw 100, deposit 100 in quick succession could then block the second one.. 
Sure, not saying it's going to cover 100% of the cases, was just as an example. Someone mentioned here capturing a UUID with the incoming / outgoing request which would be another way to handle it.
Yep, absolutely, was just as an example.
Its non standard. Inventing new names. For concepts that have already existed for decades is a bad idea
You won't believe how insane is the code for the software you use every day. Everywhere.
Quite a few questions here, but to start with; async/await are just neat syntactic sugar to write/use `Promise`s. If you are writing a new project, I see no problem with using a newer version of Node.js which support both writing Promise and async/await natively. The async/await syntax is kind of new, so if you're not sure if you want to trust it yet you could use babel to transpile the code for you to work with an older Node.js. The node-sqlite package is actually just a promise-wrapper around the sqlite3 package, so you get all the auto-escapes that sqlite3 offers.
It's an interesting and subtle behavior, and one that regenerator gets wrong which could cause some problems down the road.
I agree, but I don't think there has to be a technical/software solution. If it really was extremely difficult to reproduce, this could have easily been mitigated by creating alerts when it happens and having the customer service team perform the proper action and reach out to the customer. This is a serious defect and putting the onus on the customer to notice it and report it in order to get it reversed was an extreme product management failure, and could be grounds for a class action lawsuit.
They almost put a Array.prototype.values and deployed it in several chrome versions but had to revert it
There have been TONS of changes to the spec and to browsers that break backward compatibility in the language between [ES3 and ES5](https://gist.github.com/cms/649702). I don't remember off the top of my head, but there were several breaking changes going from ES5 to ES6 (as in, some ES5 code will run differently on ES5 engines vs ES6 engines).
Dude yes this! 1000 times this. I just started poking at momentjs and I love it. Thank you.
If someone wrote a Babel\-like library for Python, a lot of those issues could be resolved very quickly.
Not to get too pedantic but actual functions don't *do* anything except map input to output; in some sense `flat` is arguably a decent name because it describes the transformation. But lots of other functional languages have already confusingly settled on `flatten`, `map`, and their baby... `flatMap`
Cost of Doing Business Friends in telecom were always getting stomped on by the big guys in the early 00s and they'd be fined but the penalties were so little that they were merely an expense. So the behavior never stopped. Friends aren't in telecom anymore. We *need* for these behemoths to have skin in the game. 
 But wasn't the whole point that `POST { “deposit”: 100, “transactionUUID”: "some-uuid" }` would have still failed, because the browser sent the same post? They even said in the article that both of them had the same transaction id, which suggests that they were *already doing this*. 
Would it be possible in this case to not actually scroll, but animate an absolutely positioned div? In this case the user wouldn’t be able to affect your animation. 
There was a missle whos guiding system had a memory leak. Their solution was to give it more memory because the missle only flys for three minutes and it would now take 10 minutes for it to run out of memory.
It sounds like that's what they were doing but the browser sent the same message with the same uuid again in the background. Not really able to fix that with adding tokens to the request without something server-side similar to their solution.
I was part of a development team architecting a bank system. You should realize in the first few days of planning and research that mutating requests must absolutely contain idempotency keys. If you miss that requirement, you probably shouldn’t be developing software related to money, at least without help. Here’s an article from Stripe: https://stripe.com/blog/idempotency
It's going to vary by industry and company. In my case it's a small company with a SaaS product in an industry that I am not familiar with, so: * Can you tell me about the health of the industry and the annual growth? How do the demographics break down for consumers of this industry? * What is your 1 year outlook/plan for the company? 5 years? * How do you market your product and what is the most successful way of turning leads into paying customers * Have you ever fired a customer or turned down a potential client? If so, why? * If something happened to you personally and you were unable to continue to lead, what happens to the company? * What was the last important milestone that was celebrated as a company? 
Too be honest that bug was an edge case. I dont have any project where I tested this specific scenario. And if their site takes care of this now I‘m fine. Looking at my bank institute that still requires your password to be your actual pin... and your username being your first and lastname. Uh god... 
At first, I derided this as esoteric knowledge that isn't helpful in any real scenario, but I watched the video anyways in the background and was quite surprised to see a fairly practical example of this gotcha. Copying it here along with an explanation of why it's a gotcha because not everyone wants to watch a 5 minute video =) (even if it is well done -- no insult meant to OP) The "real world" example is as follows: const files = await getFiles(); let totalSize = 0; await Promise.all(files.map(file =&gt; { totalSize += await getSize(file); }); The reason this is a "gotcha" (for the same reason the original example is a "gotcha") is because `+=` sort of "eagerly evaluates or expands" into `totalSize = totalSize + await getSize(file);` and the original value of `totalSize` is recorded *before* the `await` actually occurs, so essentially, assuming the synchronous processing is all instant and the asynchronous processing is all non-instant, you'll just get one file size as it keeps writing it over as that line will basically evaluate to `totalSize = 0 + /* value of the awaited promise */`.
Seems like it's more of a quiz on closures and short hand operators effects in relation to async methods.
WTF? No, that wasn't an "edge case". This is a well known problem and the solution is equally well known. You should always check for duplicate requests when writing data.
Interesting. Thanks for sharing.
Regarding the video, and the original code, I would tend to think that "the best way to avoid this" was already pointed out in the original thread: You shouldn't use `map` as `reduce`. You use `map` to get an array of all the (promised) sizes, and then you `reduce` it to get the sum. In fact, that _does_ "separate the async operation from the synchronous part", while your proposed approach doesn't separate them completely.
Thanks for writing this up! &gt; assuming the synchronous processing is all instant and the asynchronous processing is all non-instant This is the case in the example above. `x += whatever` is always sync (as long as yield/await isn't involved) `await whatever` is always async as it queues a microtask.
In my fix you're guaranteed that `totalSize += fileSize` is executed synchronously, without interruption, which is what I mean by separating out the async parts. Map + reduce works well too, although it's less memory efficient.
Browserify would require a compile step though. I stuck in a spot where I cannot add a compile step unfortunately, or else I would probably just use webpack. Also I can't compile because of what I explained about `require('jquery')`
Good spot, thanks. 
Whoops! I thought the Promise chain started with `function() {... return new Promise.resolve();}.then().then....catch(...);` Then... I've been doing stuff *in the function* but *returning an empty Promise*, right? So basically: const open = (...params) { return new Promise((resolve, reject){ ...open database... if (error) { reject(err); } else { resolve(); //What do I put inside resolve? } }); }; const addUser = () =&gt; { open.then(successHandler).catch(errorHandler); }; Seems about right? Thanks! P.S.: Can you recommend a good place to get started with Promises? Also, do you recommend that I learn async/await (that seems *more* complex than *Promises*, somehow)? For Promises, I wasn't good enough to understand MDN, so I'm going through [here](https://javascript.info/promise-basics "Javascript.info &gt; Promise basics"). Thanks!
This went above my head, I'm a Promise beginner and I'm still contemplating learning async/await, so I'll get back to this once I'm done! Thanks for the input!
Wrong place. If you are behind a load balancer the web server can't really detect duplicates. The easy solution is to have a unique, client-generated ID that is stored in a unique column in the database. Then it is impossible to add the second record. If you want to be nice about it, you can create a stored proc that checks for the duplicate and returns a descriptive error message. But that's optional if the database constraint is in place.
Didn't ISO 8583 specify a confirmation system like the TCP 3-way handshake to prevent this kind of situation? point of sale payment processor + + | | | charge $100 | +---------------------------------------+ | | | auth chargeorized | +---------------------------------------+ | | | received auth | +---------------------------------------+ | | + + 
[https://github.com/cujojs/curl](https://github.com/cujojs/curl)
It's tricky to learn all the various new special package.json entry points for different consumption requirements (es6, modules, Typescript, etc.). Having to support IE11 is still a drag since we have to transpile all the way down to es5. It would be nice if they added optional typing, with optional runtime checks, to base JS.
I worked on a billing system back in 2013. All of out servers had middlewares doing exactly what the article describes to prevent errors exactly like the one the article describes. It was a well known edge case back then. It sounds like OP's software team was inexperienced or lacking a good architect. Also lacking a team/tech lead. You don't fuck around with bugs involving people's money.
The language itself has annoying choices. You can access properties that don't exist on an object, but not on Undefined. You can add and subtract things that don't make sense. It all seems highly arbitrary. As for the ecosystem, continuation passing style and pure functional-ish stuff is used more than I'd like, and of course node.js and Electron. I can tolerate JS for web dev, it's not all that terrible compared to some language. But for all the effort into Electron and Node, someone could have made a JIT python that works with PyQt. I still use VScode though. Nobody else that I've tried comes close to their features even if performance isn't as good as C++ based editors.
Games are not the easiest starting point by far. What were they teaching you in the class where you got the assignment? Give us an idea of how much you know, when the assignment is, and what your progress is so far. You can use jsfiddle or jsbin to show your code.
Code, in JavaScript especially, is designed to be easily readable and writable first and foremost. Usually memory or performance doesn't matter as much as a clear program. So assigning a long nested object to a short variable name not only saves time when typing it in the future, due to convention, it makes it easier to read at quick glance.
Most definitely not esoteric knowledge as lots of people get routinely bitten by async when they're first exposed to it in JS. A simple rule to remember about JS async is that _all_ synchronous tasks run first.
The zoo in charge of the spec.
My pet peeve is the infiltration of build tools. It used to be that things like bundling were done once, during deployment. Now its every damn save. That, along with the irrational impetuosity for using new, unsupported syntax, necessitating transpilation.
I completeley agree with you, games are not a good starting point. Our teacher gave us very basic information about javascript. I guess you could say that he taught us the grammar of it. I originally planned to make a game where letters would fall from a random place on the x\-axis and that you would have to type the letter in order to prevent it from reaching the bottom. But since i couldn't make the letters fall, i tried make it so that random letters would pop up on a random place on the canvas and the player would have to type the letter before the amount of letter reaches 10 \(game over\). Here is my code! \(I think i did something wrong since the code works on Brackets, my programming tool, but it doesn't work on this website\) [https://jsfiddle.net/04nxp66s/](https://jsfiddle.net/04nxp66s/) Thanks for your support!!
Personally, I consider the knowledge that all asynchronous tasks are queued up after the current thread to be somewhat unnecessary. I've written asynchronous code practically every single day for the past 2 or 3 years, but I regularly forget whether Promises get resolved eagerly or queued up. It's not because it's hard to remember, but it's because I never write code that actually *relies* on this, and I tend to think code that does rely on it is at least somewhat harder to read. I wouldn't say I've never been bitten by it in real code (although I don't remember any specific instances), but I will say that if I have ever been bitten by it, it's because my code was sloppy (and I would consider it sloppy even if Promises were resolved synchronously). That said, while I think knowing that `await 2` queues up a microtask is esoteric and not entirely necessary, `totalSize += await &lt;anything, whether synchronous or asynchronous&gt;` being tricky and why is most definitely not esoteric and I'm glad I learned it from this post.
Depends on the purpose, for web apps it's safe to assume the performance impact is either negligible or optimised away by the interpreter. For code which is performance critical it's best not to. (Rendering, data processing)
[https://output.jsbin.com/yajexuvoqa](https://output.jsbin.com/yajexuvoqa) This one works! :D
Totally ! Last example of this: https://github.com/blake-regalia/worker.js/issues/1 it's wrong, it's bad, it's stupid, and the worst of it: it's useless ! What happens in nodejs internal modules has nothing to do with what happens in npm.
This will **not** be your bottleneck, assuming V8 doesn't do weird magic trickery optimization. Not to mention that if you use `foo` in many places, it *could* improve because it could be a single reference rather than calling down a chain of references. Any "small" resource saving in JavaScript is nothing to fret over unless it compounds (extremely tight, blocking loops; an object's getter). And even then making a change from `foo` to `this.state.foo` is probably not your real bottleneck. There are many JS performance libraries out there. I'd recommend next time, before making baseless claims about the underlying performance of the V8 engine, you write up a couple benchmarks and graph your results. 
This feels like it was coinbase / visa... https://www.theverge.com/2018/2/15/17017374/coinbase-cryptocurrency-bitcoin-ether-unauthorized-charges
There is only one constructor in JavaScript, so yes, that is the constructor being called. If you create a Sort or BubbleSort instance without passing in any arguments into the constructor, `callbacks` will still be created from `initSortingCallbacks`. This line will use an empty object in place of `originalCallbacks` if not provided by the user: const callbacks = originalCallbacks || {};
I see it on mac. Maybe it only shows it on platforms that don't have the scrollbars visible by default?
I am not claiming that there is a big difference. And I understand it could lead to improvement if the variable is mentioned in multiple places.
Boy, is this a micro-optimization or what? I [made a JSPerf](https://jsperf.com/does-variable-allocation-matter/1) and decide for yourself in which situations it's worth it. I'm seeing the whole procedure taking 4 nanoseconds *in the slowest case*, which was just one run of the destructuring. However, sometimes I run it and the destructuring is by far the fastest example at about 1.3 nanoseconds. That's not a difference between them. That's the total running time. Keep in mind this JSPerf actually has "way more" than just the extra variable declaration, so you gotta wonder how much of that 4ns is even in the one different variable declaration (as opposed to the function call, the property access, and the addition). I'm not positive about JS internals, but I know in most compiled languages (remember JS is JIT compiled in most cases) this will result in exactly identical machine code.
Can confirm, am insane web dev.
Dont go all billie on me, spud
That is kinda my concern, it is supposed to improve readability of the code but I feel it makes it more complicated. May be I am weird but when I try to read code somebody else wrote I find it extremely annoying trying to trace what variable point to what other variable. In my example. Looking at the second line you know that foo refers to the foo in the state as opposed to a foo from redux or an input field etc. 
Ah, understood. Thank you so much!
Works for me: [https://codepen.io/anon/pen/zjQgLY?editors=0012](https://codepen.io/anon/pen/zjQgLY?editors=0012)
[https://jsfiddle.net/04nxp66s/2/](https://jsfiddle.net/04nxp66s/2/) i updated the old code with english tags now :\) the thing is that i am being a bit naughty, i dont think that i am actually allowed to seek help \&gt;:\). Do you think that you could help me code with the old and stupid version of javascript so i dont raise any suspicion?? If it isn't too much to ask we could maybe talk or use some other way of communication like skype discord or something? thanks again! 
Well if the programmer has a consistent style of always using setting the properties of `this.state` to a variable, then that becomes the standard there and should be easy to follow. A lot depends on convention. If someone only ever does that once and has a bad variable name, yes it would make it more confusing.
But aren’t the point of blogs to spark discussion via comments? Or generate income via ads?
It should print 1 at first, because the async function is not awaited. Then prints 2, surprisingly, due to the 'let' scope. Anyone calling async functions without await is asking for trouble, and fiddling the let scope and evaluation order deserves a bullet between the eyes.
This is gonna be painful, so let me get back to you after work. In the mean time, you may wanna take a look into ```.requestAnimationFrame()```, which should allow you to do animations as you wanted initially. For now, though, you need to write the code which would detect and process key strokes.
I'll do my best! I can't thank you enough! You are a real life saver :D
i think everyone is missing the point of the article. debating the solution to the bug or why it shouldn’t have existed in the first place is missing the point. Severity != Priority
Because camelCase is the standard used in JavaScript. Consistency across naming is generally preferable over subjective legibility benefits
No I don't understand nothing, nor do I wish to understand why there's any use case for async func to be not called with an await apart from the top level async main. Yes it has nothing to do with the let scoping, not does my comment has anything to do with insults. Your response proves exactly one point exactly: you're a fully educated Javascript Guru who deserves to use this kinda code to show off. Good luck programming your next star project with the snippets.
camelCase, snake_case, kebab-case.
If y exists and y.someFunction returns true then x = true.
It’s a null check. If y is falsy it won’t execute y.someFunc. So he’s protecting himself against “someFunc does not exist in undefined” err. 
*Best* is relative. IMO, it's best for its ready-to-use with the least hassle. i.e. no need to configure things. It's also one of type-free languages where variable can store any value type. The downside is that due to its design, it'll never be the best in performance, and memory usage efficiency.
^The linked tweet was tweeted by [@sveltejs](https://twitter.com/sveltejs) on May 24, 2018 17:29:57 UTC (5 Retweets | 10 Favorites) ------------------------------------------------- the next version of Svelte will have pointer events! (So does the current version. And every version before that. Because pointer events are part of the platform, not a feature that needs to be implemented with extra framework code) 😉 [https://svelte.technology/repl?version=2.6.3&amp;gist=944a368d9d40cc729dc9181953168247](https://svelte.technology/repl?version=2.6.3&amp;gist=944a368d9d40cc729dc9181953168247) ------------------------------------------------- ^^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •
SCREAM_CASE
Oops
Letting MooTools decide the future of the language 
H4cK3r_c453
NUT🔩CASE
Thank you for pointing out the `async` error. I think we may just be disagreeing about semantics here, but I would describe "every item in files will have a callback created and suspended at the first await point" as "sort of eagerly evaluating". The point being that the second `totalSize` in the line `totalSize = totalSize + await getSize(file)` gets evaluated *before* the `await`. When I use the word "eagerly", I'm referring to the timeframe of "before execution is preempted".
nobody knows
I personally use snake_case anywhere since I dev PHP in windows (not case-sensitive) and got screw when uploaded to linux server (case-sensitive there), but admit that camelCase are easier to type especially in mobile when chat with teammate
Consider the difference between the result of OP's code vs. changing the line x += await 2; to x = await 2 + x;
There are numerous reasons to call an asynchronous function without awaiting it immediately. 1 - you don't care about the return value. Maybe it is side-effecty 2 - you are returning a promise from your function and someone else will do the awaiting 3 - something else you pass it to will await it for you (e.g. Promise.all, where awaiting all the array items going into it will cause them to be executed sequentially) The other guy is right. You misunderstood the point of the OP and started throwing around "oh my god anyone who does that is an idiot" type insults. There's too much of that in the developer community. It's immature.
I'm the founder of a web push notification platform, Engagespot. But, I'd say, most marketers/website owners don't know how to use web push notifications. Push notifications are great. At the same time, overuse can annoy your customers and make them block you. Misuse/Overuse is the main reason why people started hating notifications. We are thinking about ways to make it less annoying for people, at the same time making it useful for marketers.
This will actually set x to y, not a boolean.
&gt; Do you want to be an average Javascript developer? &gt; I bet you won’t. stuff like that ruined the article for me
You don't need to put anything in the resolve function, unless there are some data that you need (for example if you want to get the response from an API-call). It looks like you're more on the right track now at least :) I'm not sure if there is a "one true place" to learn about Promises. If you just read about everything related to promises (and also async/await) and never use it, you'll probably not fully understand it. What I suggest is that you keep working on your project, and when you end up stuck with something you google it and (hopefully) learn a bit more. The downside of this approach is that your old code might need some refactoring as you learn more, but it's this gradual approach that I take on programming at least.
This alone is enough justification to always use camelCase.
I love this. I've got a project in the works that this is perfect for.
JavaScript apps have an fps?
I used to work with a guy in our shipping dept. who had to deal with the NYPD for tickets on our delivery trucks. He would gather every ticket up over 2 or 3 months, usually in the hundred of thousands of dollars, then negotiate a payment directly with traffic enforcement, usually at a third of the cost of the tickets. He explained that the time the drivers wasted trying to find legit parking was worth more than the tickets, so it was just a cost of doing business. 
I like camel case because its easier to type. Some letter combinations can be hard to read, in which case I use occasional snake_case. Kebab-case sucks for anything, including CSS, because you cannot double click select whole variable name. Also, it really doesn't matter if the code runs, and people who say different have a kebab up their butt.
You're right that closures aren't relevant, because the behavior would be the same if `x` was just passed in as a parameter instead of being referenced from the outer scope, but the discussed issue is specific to just async functions or generators, since `yield` or `await` are the only ways to suspend a function mid-assignment and enable the shorthand assignment operation not being 'atomic' to influence the outcome. In a sync context, the shorthand assignment would behave exactly the same as the expanded version.
I barely made it a third of the way in before I had to bail out. This style of writing might work for some people but to me it's needlessly verbose and conversational to the point of distraction. 
Kebab case for me. I like the way you can easily readit
Isn't this the kind of thing that namespaces are used for in other languages and platforms? What a suddenly glaring omission...
For the good of the money?
Off the top of my head * having both null and undefined, coercion to truthy and all that jazz * inconsistencies and unreliability in typeof instanceof NaN etc - we have Array.isArray but not String.isString, there is no Null type, there is no Undefined in fact `undefined` is both a type and a global variable and so on and so forth * getMonth being zero based * string.match (or regexp.exec) returning null instead of an empty array if nothing is matched * people constantly whinging about "JS fatigue" or the ecosystem or this or that - fuck off and learn another language if you don't like it * npm install --save not being --exact by default * the node people being so opinionated and refusing point blank to implement things that are normal in other environments - like namespaces, or passing a different package.json with a --config parameter - if it wasn't for yarn there'd be no lock files 
 class Test { constructor() { const _private = { log: () =&gt; { console.log("I'm private"); } } this.public = "I'm public"; } } With this better approach `_private` is not accessible from the outside of the class it's being declared in. That is because `constructor()` always returns `this` under the hood if not specified otherwise. And since we've assigned only `public` to `this` making it `this.public` then only this very variable will be visible from outside of the class it's being declared in.
Definitely this is an English semantics issue (contest was probably too strong a way to phrase it). The main issue I have with the 'eager' description is it kind of implies to me there's something strange going on with the operator, but really any memory reads of any sort are potentially affected by this behavior, so that's good to be aware of.
Honestly? Sounds like you're going to be fired. It's that, or you're so bad at documenting that your manager has to tell you to do your job. Also, it sounds like your manager doesn't respect your weekend, unless you already work Sundays anyhow.
I had submitted my resignation lately due to poor technical situation caused by her to the team, it was rejected by the top management. now i have to deal with this toxic environment till something new come up.
How is it your resignation was.... rejected.... you can't leave?
I generally do this to avoid repeating myself so... if(form.validationListeners[name] === undefined) form.validationListeners[name] = []; form.validationListeners[name].push(this.onValidate.bind(this)); gets super clunky, so replacing it with const listeners = form.validationListeners; if(listeners[name] === undefined) listeners[name] = []; listeners[name].push(this.onValidate.bind(this)); makes me happier.
No i can but they politly asked to postpone it till things been arranged up. 
&gt; my resignation ... was rejected That's not how resignations generally work, in my experience. How was your resignation rejected? Are you under a contract?
&amp;&amp; returns the first clause if it's falsy, else it returns the second. (falsy &amp;&amp; anything) = falsy (truthy &amp;&amp; anything) = anything In this case: var x = y (if y is falsy) var x = y.someFunction() (if y is truthy) 
To make this work with Vue/Vuex, all you have to do is move a few things around to be the vue way. First is setup the state in Vuex, I personally like to use namespaced modules so this could be in a `store/keybindings.js` file, or you could just put this logic in the root state: export default { namespaced: true, state: { current: undefined, listener: new window.keypress.Listener(), contexts: {}, }, getters: { contextKeybindings({ current, contexts }) { if (!current) return; return contexts[current]; }, }, mutations: { setContext(state, { context }) { state.current = context; }, registerContext(state, { key, bindings }) { state.contexts = { ...state.contexts, [key]: bindings }; }, unregisterContext(state, { key }) { const contexts = { ...state.contexts }; delete contexts[key]; state.contexts = contexts; }, }, actions: { switchContext({ commit, getters, state: { contexts, listener } }, context) { const current = getters.contextKeybindings; if (current) listener.unregister_many(current); const keybindings = contexts[context]; listener.register_many(keybindings); commit("setContext", { context }); }, }, }; Then a component would like: &lt;template&gt; &lt;div id="note-entry" @click="switchContext('note-entry')"&gt; &lt;!-- component --&gt; &lt;/div&gt; &lt;/template&gt; &lt;script&gt; import { mapActions, mapMutations } from "vuex"; export default { created() { this.registerContext({ key: "note-entry", bindings: [{ keys: "ctrl c", /* omitted */ }], }); }, destroyed() { this.unregisterContext({ key: "note-entry" }); }, methods: { ...mapActions("keybindings", ["switchContext"]), ...mapMutations("keybindings", ["registerContext", "unregisterContext"]), }, }; &lt;/script&gt; 
Nope, I should have said top management asked to postpone it (extend the resignation notice)
Did you get anything from them in exchange for staying longer (e.g., additional salary)? Did you instead give a 4 week notice rather than a 2 week notice, or are they asking you to stay indefinitely and leave when it is convenient for them?
It seems like the deal should have been "I'll stay as long as I don't have to deal with the toxic environment (her if that is the case).* Otherwise if it is toxic.... you just go. Leaving is your call, not their call...
Exactly, i asked them to overwatch her supervision over me in the couple monthes .
your not "at will"?
and what's documented?
Throwing out another possibility based on your posts ... she is gone and maybe doesn't exactly know (thinks you're gone too) being told to clean up so she is doing what she thinks would be done if things were to be shutdown .... but it's just her. I've seen this a few times .... then they ask you to stay more.
Most likely you are going to be sacked.
Eager is used here as “not async”, if I read that correctly.
So, man, I've been cleaning up your code a little bit. I also figured out why it didn't run in jsfiddle. **Let's start with some pointers when it comes to your style:** 1. You are being very inconsistent. This is not a coding mistake, but it will result in coding mistakes, because even you yourself will soon become lost and confused when looking at your own code if it's disorganized. Someone else will struggle even more. So please take a look at how I used spaces and new lines when compared to your original code. Trust me, I've been doing this for 20 years and this sort of pedantic stylistic consistency will save your ass MANY TIMES. =) 2. Be very careful with your variables. Some of them you ended up declaring multiple times. JS (especially in a non-strict mode) will forgive a lot, which is a bad thing as it leads to errors that are very hard to find. For instance you declared the ```px``` at the start, but then also in the ```stop()``` function, instead of just using it. There were several such others as well. **Now as to why it didn't work in the fiddle:** You pasted your actual file where you include the javascript file like this: ```&lt;script src="script.js"&gt;&lt;/script&gt;```, but jsfiddle has no idea what *script.js* is. Same for the ```onClick``` attributes on your buttons. It doesn't know where to call the functions from. This is addressed by adding event listeners. I described them in a bit more detail in the code. You can (and should) also read up on them online. Here is the end result. See if you can take it from here, and let me know if you have specific questions about how to do something. Good luck! https://jsfiddle.net/04nxp66s/3/
It also seems way odd as banks and financal institutions usually have a metric ton of resources. The idea that a bug like this would just be ignored due to not having enough time is pretty shocking to me. When I worked networking issues even some small amount of unexpected traffic that impacted nothing was a P1 all hands kinda situation for banks and such.
`_private` is not accessible anywhere but within the constructor function because its a local variable there. It's not accessible anywhere else within the class like a real private member would be. But I'm pretty sure you're trying to describe the closure approach I mentioned before.
Go Steve Jobs on them and make your point come across. You have all the leverage and you're letting yourself get pushed around. You've got nothing to lose by negotiating or telling them no and you'll learn a valuable lesson on how to stand up for yourself.
You can do both those things by adding a script tag to the post template. https://schnack.cool/
It's worth taking away from this that async functions execute at the end of the call stack, whether or not the code within them can be put on top of the call stack. Right? This is why `test()`, despite being able to be performed synchronously, doesn't execute until after the bottom-most console log. It executes after the call stack has cleared, similar to `setTimeout(..., 0)`.
That wouldn't help here if I understand everything correctly. The "Point of Sale" is their application server, which never had an issue communicating with the payment processor.
^The linked tweet was tweeted by [@gatsbyjs](https://twitter.com/gatsbyjs) on May 24, 2018 16:10:30 UTC (258 Retweets | 871 Favorites) ------------------------------------------------- 📣 BIG NEWS: Gatsby is officially a startup! We’re thrilled to announce a $3.8M seed round &amp;amp; the formation of Gatsby Inc! 💪 We’ve got big plans to make the Gatsby open-source ecosystem even more powerful: [https://thenewstack.io/gatsbyjs-the-open-source-react-based-ssg-creates-company-to-evolve-cloud-native-website-builds/](https://thenewstack.io/gatsbyjs-the-open-source-react-based-ssg-creates-company-to-evolve-cloud-native-website-builds/) ------------------------------------------------- ^^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •
To me, the "PoS" is the "client's phone", and "payment processor" is the "big financial company". So, the client sends "DEPOSIT $100", the financial company sends back "DEPOSIT CONFIRMED $100 - ID abc123" and the client responds with "CONFIRMATION RECEIVED - ID abc123". If the bank does not get a "CONFIRMATION RECEIVED" message, it rolls back the transaction. 
If you haven't replied to that email, then say you have other commitments on Sunday already. As for the request to document things, it seems like a fairly reasonable ask and I assume you want to remain professional, so you might as well do it (but do it during office hours - you have absolutely no obligation to work outside of office hours even if peer pressure hints otherwise). As for the resignation: if you gave them notice, normally you have no obligation to come in to work after the date you stipulated in your letter. Your employer is free to ask you to return after they've cleaned up the house. What they need to do between now and then is their problem, not yours. If they asked you to stay, and you agreed to continue with them (either because you don't have another job lined up or some other reason), remember you can always change your mind and provide a new notice, and leave at the new date you specify.
That's incorrect. `test()` does, in fact, execute at the position it's called. Only the code after the `await` keyword gets executed once the stack has cleared.
Hey again! I know that this is super super strange, but at the moment a am kind of desperate and really in need of help. Could we pleaeeease have like a short skype call or something where, if you have time, maybe you could help me live...? I have asked all of the programmers that I know of and none of them could help me :\(. That is why I turned to reddit in hope of help. Luckily you showed up, and I can not even explain how grateful I am. I can't thank you engough for what you have done already, but it would mean the world to me if you could help me live :D. I don't have much, but I would love to give you some compensation for such help.
Don't work in the weekend. What are they gonna do? Fire you???HAHA
Sorry, man, can't really do that right now. It's the middle of the day and I'm in the office. I looked at your code during lunch, but to really do anything I'd have to look at it after work, once I get home. And don't worry about giving me anything. I'm just happy to help a new developer. If your code ends up working and reasonably elegant, that's reward enough. =)
Are you sure?
I think what you want is make each step finish before calling the one after it. You can do that using for -of loop, or using .then from one promise to the next 
Reading the comments, i would also say that if you already said you're resigning, and you're absolutely willing to walk away from the company, then don't do a goddamn thing on Sunday.
For those who missed it, this is a jab at the [React 16.4 announcement](https://reactjs.org/blog/2018/05/23/react-v-16-4.html), but more generically, that React's approach has historically prevented it from supporting things that browsers do (e.g. some SVG things, data attributes/expando attributes)
This must be where CSS custom properties came from.
In that case, I see two probable scenarios here: 1. They've found someone to replace you, and want you to put what you know on paper ASAP so they can fire you and have the new person take over. 2. The manager is just having a bit of a power trip, and there's no actual necessity to document anything by that arbitrary deadline. Either way, you have zero incentive to comply with this.
It would actually set x to the return value of y.someFunction\(\) assuming that y itself is truthy.
It should have been Scheme, but management stepped in and said it had to look like Java.
Do you think you could do that once you get home? I live in Sweden and it is almost midnight, but I would happlily wait for you if you could help. Sorry for being so desperate, but my entire grade is dependant on this very assignment. And I really WANT to give you something for help like that, since I didn't think that someone on the internet would take their time to help a complete stranger like me. :\) 
https://github.com/caolan/async
This is done to check if y is non null as it was said before to minimize code from `if (typeof x !== 'undefined') {}` clause. This has no useful usage except code packing. This is done because JS parser don't evaluate second part of a logical expression if the first part converted to false (it is null, undefined, NaN etc) and just returns the converted first part. Variable assignment instruction just returns this variable's content. So it won't show you `this.filterKey` is `null`/`undefined` errors.
This is done to check if `this.filterKey` is non null as it was said before to minimize code from `if (typeof this.filterKey !== 'undefined' &amp;&amp; this.filterKey) {}` clause. This construction has no useful usage except code packing. This is done because JS parser doesn't evaluate second part of `&amp;&amp;` expression if the first part converted to false (it is null, undefined, NaN etc) and just returns the converted first part. Variable assignment instruction just returns the variable's content. So second part won't show you `this.filterKey` is `null`/`undefined` errors.
There is no reason to try and force an asynchronous JS function to run synchronously (unless we're talking file I/O to the same file). If you are mapping over promises (you are) use Promise.All. This will run all of the requests in "parallel" and give you a list of the results at the end, inside of a .then. Then do whatever you want with those results.
I refactored it like this: \&lt;script src='pica.min.js'\&gt;\&lt;/script\&gt; \&lt;meta charset="UTF\-8"\&gt; \&lt;canvas id='a'\&gt;\&lt;/canvas\&gt; \&lt;img src="" id="preview" /\&gt; \&lt;input type="file" id="select" onchange="imageLoad\(this\)" multiple="multiple"\&gt; \&lt;script\&gt; function resizeImg\(source\) { return new Promise\(resolve =\&gt; { const image = new Image\(\); image.src = source image.onload = function\(\) { const targetWidth = 1600; const targetHeight = 1200; const resizerConfig = { quality: 3, alpha: true, unsharpAmount: 0 }; width = image.naturalWidth; height = image.naturalHeight; ratio = Math.min \(targetWidth / width, targetHeight / height\); resizer = window.pica\(\); canvas = document.createElement\("canvas"\); ctx = canvas.getContext\("2d"\); ctx.canvas.width = width\*ratio; ctx.canvas.height = height\*ratio; resolve\( resizer.resize\(image, canvas, resizerConfig\) .then\(result =\&gt; resizer.toBlob\(result, 'image/jpeg', 0.90\)\) \); }; }\); } function imageLoad\(obj\) { const files = Array.from\(obj.files\); const resizingPromises = files.map\(file =\&gt; resizeImg\(window.URL.createObjectURL\(file\)\)\); Promise.all\(resizingPromises\) .then\(results =\&gt; console.log\('Done resizing: ', results\)\) .catch\(errors =\&gt; console.error\('Errors while resizing', errors\)\) } \&lt;/script\&gt;
I worked at a bank, every project was behind for months or years. And bugs... Oh man, bugs were everywhere. I left because they fired about 750 ppl in the IT department. I was a consultant so I was glad to go to a better project. But man, they are behind major shit balls, their system is buggy as fuck and they fire a buttload of IT ppl (testers, devs,...) just to give the client an extra procentage and reel in more money. Do know this does not go for all banks. Some actually know what they are doing IT wise. But some banks are just layers of idiotic management making shit decisions (and not only banks). Employees come and go, nobody knows what the system does, nobody works there for more than 1 or 2 years. So yeah, I was not surprised reading this, the story sounds really familiar. 
Reminds me of how is literally door in Faraday cafes and walk away from the office with a device when testing some offline functionalities like heartbeat
Coinbase was my first thought until I saw the date.
Underscore's work perfectly fine without quoting: foo.first_name 
Because it actually doesn't matter at all what you use. Both work in JS but the convention is camelCase. 
I feel like getting double charged if you drop a connection is a *pretty big deal*.
That's fantastic until two clients generate the same ID.
There's a reason it's called a **globally** unique identifier.
My rule is that I work to live. I don't live to work. If a job ever becomes a detractor from my well-being I'm out.
Nothing, the software came into us from an outsource party, its expressjs/polymerjs written in best practice, using top edge modules. 
Nice rant and all, but the acquisition of the `.dev` TLD did not remotely "completely fuck up the web", while breaking backwards compatibility the way `Array.prototype.flatten` would have done. Sorry you've been slapped with the reality that user experience in fact trumps developer experience. 
What the hell does "inherit one component into another" even mean? Also Flutter widgets are perfectly composable. 
Probably this can be made configurable like with lit-element and polymer.
If they say changes are incoming, and you do change your mind, get it in writing at the very least, with expectations and penalties for them if they fail.
You have multiple, disconnected clients. They have no mechanism to talk with one another. Guaranteeing that global uniqueness is non-trivial.
Ok :) can We skype then?
Thank you guys for sharing your thoughts, here is my respond i am about to send. It is clear that you are under estimating the scope of what you requested above, unless you are pushing me towards submiting poor deliverables. not sure what exactly you want behind getting a documentation for "what i know so far over frontend". If you meant to let me document our whole cms stack then you need to know that this will take no less than a month!. Question should i loop top management in my response since the email was sent to me directly.? 
`const { validationListeners: listeners = [] } = form;` 
Indeed
&gt;’ Look out! Here comes an “s”!
Yeesh, mixing it up is worse than sticking to either way.
Do you think that if i use images of the letters insted it would be easier to link them and make them disappear?
Not sure why someone downvoted you lol, fucking reddit.
Actually, if y exists, x will be the return of y.someFnction(), not necessarly a boolean.
This is how it should work: 1. You should always keep a list of letters currently on screen. The best way to do that is by storing them in a separate array. Instead of randomly popping it on canvas, you should store it in the array (along with its coordinates) and then simply keep redrawing the canvas with the contents of the array. 2. You should constantly listen for key presses (the code in my previous post). 3. Once a press is detected, you should determine which letter the user pressed (by comparing the key code with a map that maps codes to letters.) 4. Once a letter is determined, if the user pressed a key that is currently on the screen, you can remove it from your array (the one we talk about in step 1). 5. If the array's size is ever bigger than 10, you end the game.
Seriously, you need to look up the term GUID.
 var filterKey = this.filterKey &amp;&amp; this.filterKey.toLowerCase() What he actually wants to do: var filterKey = this.filterKey.toLowerCase() But he doesn't know if `this.filterKey` exists, it could be null or undefined for some reason (maybe you aren't sure where it was setted). So it would throw an error: Uncaught TypeError: Cannot read property 'toLowerCase' of undefined So to prevent that, we use the power of the &amp;&amp; operator. Look at a normal if clause: if (x &gt; 10 &amp;&amp; x &lt; 20) We want numbers from 11 to 19. Let's say x is 9. In the first check `x &gt; 10`it is already false, so the interpreter doesn't even bother to check the `x &lt; 20`, he already knows we are not going inside the if clause. Now back to the example: var filterKey = this.filterKey &amp;&amp; this.filterKey.toLowerCase() If this.filterKey is null or undefined, the compiler already treats it as falsy (look it up [here](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) for more information), so it doesn't even bother checking the expression after the &amp;&amp; operator. 
It seems quite hard to do but i will give it a go!
apparently not in firefox
Try generating a GUID on a device with 32 bits of randomness (not uncommon from JavaScript engines in the mid-2000s). Works great until you get enough load that it doesn't.
Yeah sure Event Sourcing. The question was about idempotency, though, not how your store the transaction event.
Then you're fine. You're already resigning, I'd log this and say no. Even if you weren't resigning, I'd log this and say no. Forward his e-mail to HR if you have it and tell them it's unprofessional to interfere with your personal time.
Thanks for the link
Actually I did that part for you just now. Please go see how I did it: https://jsfiddle.net/04nxp66s/5/
&gt; It completely fucked up local dev environments If your local dev environment was "completely fucked up" by no longer being able to use a particular TLD (that you didn't really have the right to in the first place), then either it's very fragile indeed or you have no idea what a complete fuck-up actually looks like. And again, your feelings regarding Google do not change the fact that user experience trumps developer experience in the real world. Do you have an actual argument against the fact that `Array.prototype.flatten` would have *actually* "completely fucked up" a ton of sites and been shitty for a ton of users? 
That's still fantastic if you check by client and ID...and possibly other parameters regarding the request.
You're in luck! The Polymer team recently published Polymer 3.0 as pure JS modules, and we needed a way to load them in IE11 and other browsers without native modules. Initially we just compiled to AMD and used RequireJS, but RequireJS is larges, has some bugs that we hit, and doesn't quite implement loading in a way that's spec-compliant with JS modules. So we created our own AMD-style loader boringly called `esm-amd-loader`. It's on npm here: https://www.npmjs.com/package/@polymer/esm-amd-loader esm-amd-loader isn't 100% AMD compliant: it's designed to work with the compiled output of Babel and TypeScript and implement JS module semantics. I'll copy in the differences from RequireJS from the README: * Minified and compressed size is 1.3 KB, vs 6.6 KB for RequireJS. * Only supports specifying dependencies as paths, and does not support explicitly naming modules. * Does not include a global require function. Instead, modules created with define always execute immediately. RequireJS executes require calls immediately, but only executes define modules if they are a transitive dependency of a require call, or if they are named by the data-name bootstrap attribute. * Modules always resolve to an exports object, even if the module did not request it or assign any properties to it. RequireJS modules will resolve to undefined if the module did not request its exports object. * AMD does not specify the meta object. It does specify a similar object called module, which can contain id and uri. RequireJS provides module and sets uri to a path relative to the HTML document's base URL. * RequireJS contains a bug whereby relative path resolution for modules above the HTML document base URL can result in duplicate requests for the same module. * Module execution order happens according to the ES spec, including support for cyclical dependencies. * Top level define calls are also ordered, similar to the way that multiple &lt;script type="module"&gt; tags in an HTML document are. We also created three Babel plugins to help support bare module specifiers, dynamic `import()` and `import.meta.url`: * https://github.com/Polymer/tools/blob/master/packages/build/src/babel-plugin-dynamic-import-amd.ts * https://github.com/Polymer/tools/blob/master/packages/build/src/babel-plugin-dynamic-import-amd.ts * https://github.com/Polymer/tools/blob/master/packages/build/src/babel-plugin-import-meta.ts These are available in the polymer-build package on npm, but we haven't yet published them as separate packages. Hope that helps!
1. This is why you have the OS generate the GUID instead of some hamfisted BS written in JavaScript. 2. If you are generating that many guids in the browser, you really need to rethink your career choices.
Hmm. Good on them I suppose, but I’m a bit worried about the project being derailed for profit now. Still an excellent project for now though. 
Luckily, we're not in the mid-2000s - window.crypto / msCrypto is supported by all browsers for a while now. Even if you have to fall back to Math.random, combine it with a user id and only look back a few minutes and you're extremely unlikely to get generated duplicates.
Forward the email to HR, forcing employees to work out of hours without compensation is illegal. 
I added the key-press letter detection, the conversion of code to letter, the checking against current letters, and the removal (if necessary). Please be sure to read the comments I left in the code. If you have covered array methods in class we can do it better, but for now I assumed not, and used a for loop. Also note that I only mapped 3 letters for you, Q, W, and E. The rest you'll need to do yourself. https://jsfiddle.net/04nxp66s/8/
Do you want a cookie or something for not using .dev? There was literally thousands of dev environments which used that TLD even if you didn’t so Google wasted collectively thousands of hours of developer time just so they can have ownership of an important gTLD which shouldn’t have gone to them in the first place. The fact that the fix was straightforward is fucking irrelevant because my point is that what they did was wrong. As for flatten... Tell me one popular site which uses MooTools Array.flatten and is no longer maintained? I’ll wait... This may be news to you but if you want forwards compatibility, don’t fucking monkey patch prototypes. Sorry, but these devs created this issue for themselves and it is their obligation to fix it, not the standards committee obligation to work around it. The standards should absolutely not be shaped for legacy code particularly legacy code that’s poorly written. This is how you quickly ruin the semantics of a language. If you want a site to last forever, you already made a huge mistake MooTools. If you have a site that you’re actively maintaining, it’s not a very big change for you to work around the specs of a language that’s ever changing.
Wow!
it kinda sounds like their business model will be some kind of managed cloud deployment/hosted version which shouldn't slow down the open source project.
camelCase works for me. I use it across all languages.
[https://jsfiddle.net/04nxp66s/9/](https://jsfiddle.net/04nxp66s/9/) Here is a version where i mapped the entire alphabet :\)
[https://jsfiddle.net/04nxp66s/10/](https://jsfiddle.net/04nxp66s/10/) In this version i fixed the problem where the game would stop even though there wasn't 10 letters on the screen
probably trying to get what skills you use for your replacement job posting, it's weird for them to ask on sunday though
Awesome! So you are all done then. Or are we still missing something?
Where did you hear this? I was looking for more info but didn’t find. It worked pretty spectacularly for Wordpress, sounds smart. Support/training/consulting is on the new website, which is fine by me. 
The horror! *Hours* of developer time! What was that about complete fuck-ups again? As I was saying, there are [nearly 2 million sites](https://trends.builtwith.com/javascript/MooTools) that use MooTools. Backwards compatibility is for users' benefit, and last I checked users were still the primary point of the web (of any application, really). I'm sorry that your sensibilities as a developer don't stack up in comparison. &gt; The standards should absolutely not be shaped for legacy code particularly legacy code that’s poorly written...it’s not a very big change for you to work around the specs of a language that’s ever changing *Backwards compatibility* is a thing for a reason. 
Their blog post about it seems to imply this. https://www.gatsbyjs.org/blog/2018-05-24-launching-new-gatsby-company/
Is this like famo.us all over again?
Huh thought i read through to the end but clearly skipped out the important part, thanks!!
Why would they fire someone that quit? That just makes them have to pay unemployment right? 
Do what they ask on your own terms, they will forgive being “late” and you will not have burned a bridge. You do not need to work Sunday or any holidays.
Haha, glad you are happy with it! Enjoy! =) And don't worry about the sweets, it was my pleasure to help. If you like you can check out a game I wrote using JavaScript. It's not great, but might give you some ideas for future projects. https://store.steampowered.com/app/740790/Goldmine/
Biggest banks there are... You underestimate how much of a risk an unknown is seen as. If it happens occasionally and you don't know the cause there is nothing to say it won't happen more often, for a big bank the costs could be enormous.
Surprised this hasn’t come up yet. https://youtu.be/GjJCdCXFslY Oh and yeah, screw that. 
As of 6.1, I noticed some surprising performance improvements in npm. |Yarn 1.7.0|32.65s| |:-|:-| |npm 6.1.0|19.75s| Both had a .lock file present for their respective installs. All things being equal, I'd prefer not to have to install anything beyond node for a project to run, but things aren't equal. Not quite yet. I prefer Yarn's syntax over npm, and Yarn has been getting all the best features first, but this latest npm certainly raised an eyebrow.
Can someone sell me on Gatsby?
I'm not sure I *entirely* understand the relationship between the reference data and the user data (and what exactly is versioned, the whole object?), but to answer what seems to be your more general question if I'm understanding it correctly: yes using async/await to wait for the data is a perfectly valid approach. It can definitely feel weird to have a bunch of await's scattered throughout your code, but that's kinda what it's for. Now, if you async/await it up and find response time ends up suffering, you might consider if you can "live with" the cache misses or some data that might be versioned incorrectly and move some db calls to async.
It's like a layer over react that makes it a little easier to deploy something quickly. Like if you took react and made it more frameworky. with an emphasis on static content, but, since it's react, it can also do anything.
Sorry, one last question :P. How do i incorprate the css into the html. I need to get all the code into brackets, but I dont know what to do with the css part of jsfiddle.
Made a website off a single json file that generated 1500 static pages and hosted it for free on netlify. I'm sure other solutions could of worked but it only took a day to learn.
It depends on what kind of content you'll be scraping. AFAIK Cheerio doesn't really scrape dynamic content that well, so if you're scraping a page with lots of JS-generated stuff, or one that loads a bunch of external resources (think Facebook), you probably won't get what you want. Now if you're scraping Craigslist, then Cheerio is probably a good fit. Nightmare on the other hand will handle the JavaScript. 
I’ve consulted with many major financial institutions and have had to fight for things as basic as validation of data at the API (yes, only client-side validation was implemented) and rate limiting. One financial services company (not a bank, but definitely dealt with people’s money) didn’t even have a fully working codebase for new developers because no one ever checked their code into a VCS. They just each had some part of the codebase on their machines. One guy goes on vacation and someone has to rebuild his part of the app to fix a critical bug. It’s a scary world out there.
Holy crap I completely forgot about that
How about mocking state with an initialState or nextProps, and just working on one view at a time with branches?
&gt; why would you not mention this in the text of the post? Dude just isn't good at documentation.
I have done stuff like that before, but it would be nice to be able to see all the different states quickly and without having to comment out code. For example I'd love to be able to share the looks of all the different states with my designers.
I don't think that means that it's a startup, I think that means that it's now got a whole bunch of money and lots of people they have to answer to. 
Not sure, but it sounds to me like the author was upset he couldn’t create more coupling between components. 
Could you give an example of what you mean? 
Use it at work. Picked it over next.js. :tada:
Tomato tomahto
What was famo.us?
nit? And no, that's not how it works. async function(){ // synchronous code const synchronousVariable = synchronousVariable2 + await deferred(); // deferred code } Everything after the await keyword is deferred til the stack is cleared, and possibly longer if the await is given a promise and that promise takes time to execute. The big takeaway is that everything before await is evaluated synchronously. This is why the gotcha in the video happens. `synchronousVariable2` is evaluated immediately and only after the call stack (and promise) have resolved is the assignment to `synchronousVariable` made. The value of `synchronousVariable2` changes later in the code, but it's already been evaluated for the purpose of this async function.
Open source UI library that got 30M in funding and never went anywhere. https://techcrunch.com/2015/11/06/nopen-source/. No idea what they are doing now.
Oh, I meant what you mean by coupling between components. But that's okay
8====Dick case
I haven’t used it, is react-storybook different than storybook.js? Or maybe one of the latest design tools with component integration? I haven’t gotten far enough with this, but from what my ear-to-the-ground thinks it’s heard, there’s got to be something out there. Best wishes!
They're asking because generally at tech companies they don't really do 2 week notices, the moment they want to fire you or you resign they generally lock your accounts and escort your from the premises so you don't fuck shit up on your way out. They want you to do it Sunday so you don't have to come in again.
Cool, I didn't know that but it seems useful.
This is all kinda "I don't actually work in programming": the thread.
Just posted another reply to OP but basically tech companies want you gone the minute you quit/are fired so you dont have a chance to fuck shit up on your way out. Accounts locked and escorted from the premises. OPs job doesn't want him to come in Monday.
Surely no one could write the above and *not realize* they are being an absolute asshole. This has to be sabotage. I would stay robotic and logical. &gt;&gt; I'm happy to do the documentation or whatever else I can before I leave, but I'm not available to work on Sundays or weekends."
Technically it's possible but realistically their claim will almost certainly be declined. Firing someone after they give notice isn't necessarily a spiteful reaction too. We only have half the story and the relationship between OP-boss sounds pretty antagonistic. But who knows maybe the company is afraid OP is going to exit with a bang :P
Can anybody answer why I’d use this? Am I missing something?
&gt; didn’t even have a fully working codebase for new developers because no one ever checked their code into a VCS. That’s pretty crazy. It’s like night and day compared to many tech companies where most teams can’t go a month without using a new framework or language. There was a [disaster of a migration](https://www.google.com/amp/s/www.bbc.co.uk/news/amp/business-43923561) over in the U.K. recently. Their new system broke all of the things. Sometimes I wonder if the financial industry will eventually drive us to software engineering licenses or stricter regulation, kind of like HIPAA but more.
Nope, same thing, just lets you write your components in isolation. To be clear, I have solutions to this problem, they just aren't very clean or elegant and I wonder if others feel the same.
because we haven't microserviced enough things
You’re the reason I’m on Twitter 
Might just be companies with a lot of customer data to protect. I worked for a couple CDNs so that was their policy. I do know its not uncommon though in the industry.
Brace yourself, were entering America season
Depends on the industry, I guess. I used to work for a TV network. Anyone non-management and technical (including anyone in IT, editors, electronic engineers and even tape jockeys) were pretty much marched to the front door the moment they submitted their resignation. It never happened in my web team, but I did see it happen in other areas. I also heard of some devs resigning and then spending their two weeks downloading data for their new startup (it didn't come to light until they started using the data and it became obvious what they did). Some companies have a long and rich experience of being sabotaged by staff after firings/layoffs and simply distrust anyone leaving the team as a matter of policy.
Start in monday. Start with html.
But that's what I'm saying, it's not immediately executed. It may be converted to `Promise.resolve` behind the scenes (immediately), but the result is not derived until AFTER the call stack is emptied. async function(){ await deferred() } func1() func2() func3() const blah = 31337; // deferred is evaluated here If you're simply saying that the `Promise.resolve` gets executed immediately, then yes, you're correct. But effectively, the `deferred()` itself doesn't get evaluated until all other synchronous functions have been evaluated.
No. This isn’t a discussion just go test it. await fn() `fn` *immediately* executes. The value from it gets deferred. Just test it by throwing a `console.log` in to see execution order.
If OP is a developer, he's most likely salaried. Since this counts as IT work, he's lumped in with managers and execs in being exempt from overtime pay.
So I'm confused at the problem here. async//await AFAIK is just sugar around promises and microtasks. From Promise's spec, `new Promise((res, rej) =&gt; {...});` the body of that runs immediately. Doing `Promise.then(() =&gt; {...});` runs as a new micro task. So, this should be expected: console.log('A'); const x = new Promise((res) =&gt; { console.log('B'); res(2); }); x.then(() =&gt; console.log('D')); // logs after C since then puts it on the event loop as a new microtask console.log('C'); So, given that, your code looks like this: let x = 0; function test() { const atCall = x; // the code before the await (x +=) can run sync return Promise.resolve(2).then((v) =&gt; { x = atCall + v; // after the await, we run console.log(x); }); } test(); // We didn't await on this, so it's just a floating promise x += 1; console.log(x); Oh, I watched the video, yeah, cool. That's neat. `+=` is a jerk.
What sorcery is this? 
More like meteor, I think. Famo.us was kinda pie-in-the-sky IMHO.
Wait, whatever is inside the resolve function is the parameter to the .then function, and whatever is passed to the reject function is the passed to the second argument of .then (or to the .catch) function, right? Don't know, after I went through that page I linked to earlier, I went and looked at MDN and another page, and Promises just sorta click for me now. Also, refactoring the old code to make it work with the new additions is one of the best to assimilate something, because you've got enough cases and results to compare to. I agree with you on that! Thanks for all the help! [I'm flairing this solved.]
It is not something done during an interview at the house, it was more of a technical assessment. As for what is stumping me, I am new to React entirely. I have never used a javascript framework or built an app like that before. When they were listing the key concepts, I wasn't even sure what it was that they were looking for.
Not trying to make it a discussion. Based on the way the gotcha was presented, it looked as though the code after await wasn't being evaluated until after the call stack completed. After experimenting in the console, it looks like you're right, and all expressions on the await line are evaluated immediately, but the line itself isn't evaluated until the call stack is flushed. That's interesting.
I don't know crap about about startup funding, what happens to that money? It's just gone right? VCs are basically gambling on which product might turn a profit?
Hi /u/AWrongUsername, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/imacpro1, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_).
Go to the github page, look for the js source code (it's in keypress.js in this case). Look for variables and data structures at the top of the file which will help you understand the structure of the library's internal state. Use ctrl+f to look for a public method you know how to use and read how it's implemented. If it calls a function and you are curious what that does, find where that function is defined and read how that is implemented. Rinse and repeat. Eventually, you'll start seeing some functions being called from multiple places, and you'll start to get a feel for the overall structure of the code. In this case, the library is implemented using OOP style, so it may also help to clone the repo and open the file in your editor, then use code folding (the +/- sign or arrow on the left side of a line that collapses indented sections of code like an accordion) to see the class signature. This can help you give an idea of what sorts of functions exist.
It’s the same way promises work
I'm not quite sure what specifically you're asking for help on. Are you asking for resources for learning React, an explanation of what kinds of tools that assignment is talking about, or something else? FWIW, you may be interested in my [suggested list of resources for getting started with React](http://blog.isquaredsoftware.com/2017/12/blogged-answers-learn-react/).
Bummer. You telegraphed to them, “I gave up.” They didn’t see the work and struggle, but just, “I gave up.” In future, if you really are stumped (and that’s okay), it’s worth it to at least walk them through “first, I would ... then, I’d need ... finally, I ...” Decomposing large problems into smaller, solvable ones is an important skill-set. 
Not always. Investors can pull their money out if it’s in the contract. 
[This video](https://youtu.be/rb8smP_xTTY) really helped me see the difference. After watching it about six months ago, I ended up deciding to learn native mobile dev with Java &amp; Objective-C instead of picking up one of the JS transpiled frameworks like Ionic. I think the front loaded learning efforts are worth the control you gain over the user experience.
Awesome. I strongly support building robots because why the fuck not.
Yeah, I most definitely wouldn't expect someone to finish this assignment on an onsite interview. I meant that even for a take-home assignment it's excessively long. For starters, take-home assignments are generally considered bad (because it doesn't respect the candidate's time), and even highly "prestigious" companies that do have them have way simpler assignments (e.g. the Facebook one only asks you to implement a single widget, with no backend component, no routing). With all that said, as much as a take-home assignment is a bad hiring practice, it's a format that kinda works in your favor if you're trying to wing it. As for breaking things down, you still haven't really said much about what's stumping you, so let's start from the top: - Are you comfortable with ES6? If not, there's a bunch of books that can bring you up to speed (e.g. eloquent javascript, you don't know JS, etc). React example generally use ES6 extensively, so you need to be comfortable with the language - Are you familiar with webpack and babel? If not, use create-react-app and read their docs and get yourself to a working hello world app - Can you explain JSX? Basically, do you know that &lt;foo /&gt; isn't actual javascript but rather, that Babel transforms &lt;foo /&gt; into React.createElement('foo') at compile time? - Do you understand how React rendering works? Basically, can you create a button, which when clicked, calls setState and updates some text on screen? If not, go through the React official tuts and try writing your own variations of it. - Do you know how to use the GIPHY API? Do you know how to use [fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)? Open your browser developer console and play around with sending requests to the API and seeing what the responses look like. Try to console.log specific parts of a response. Learn about Promises if that's giving your trouble. - And finally, can you figure out how to use things you haven't used? For this assignment, it suggests that you use a router (so, most likely react-router in your case) and state management (so probably Redux). In your career, you will have to be able to learn new things on the fly all the time. Read the examples in the docs for each library and try to understand what they do. Experiment with the code, try changing the text color, making a text input whose text gets alerted when you press a button, etc. Google "how to do X" any time you're stuck trying to do something. Stack overflow is your friend. Keep an eye for jargon words (e.g. render props, REST, etc). Google the ones you don't know and use them as keywords when appropriate to refine your searches. Never copy-paste code blindly. Try to understand the code instead. In terms of learning materials: my recommendation is to learn by coding things and trial-and-error, use docs as reference, google and stack overflow for quickly finding how to do specific things. That's how I get results the fastest. IMHO videos are kinda useless (terrible pacing, difficult to follow along, discourage exploratory coding), and books are also not that great for similar reasons (but sometimes useful if you need structured progress)
React Native, and Typescript for type safety. Typescript because it’s damn hard to test your components (rendered on native device) and a simple crash doesn’t stop the web page as compared to web app, but outright crash the app This way you have android and iOS app in the time it takes to develop only one. Same codebase.
&gt; the build times are dog slow Compared to what? I thought the slow build time was a small price to pay for generating static content which is quicker to serve to the end user?
Well, my next question would be in actual practice in web development, it would be wise to either use var and/or const?
Yes, I agree that this looks very sketchy.
There's no point in burning bridges. Always stay professional.
this article writing style is a bit **annoying** seriously why all the line **break**?
@OP it sounds like you have some goodwill with her bosses. If you send the email you posted just now, or something as acidic like the above, they could look at it and think "Wait, maybe it's not just her." I was going to suggest you ignore it and claim not to have seen it until Monday morning, but you presumably have to go to work tomorrow \(Friday\), so that won't work. I agree with the others who are suggesting they just want you to stick around while they line up your replacement. Watch for interviews being conducted without you.
This is amazing. Huge congrats to Kyle and the team
https://gohugo.io/
Any specific reasons?
Essentially. Most of them are just trying to pick the best horse, but assume their investments will fizzle out. So many things can dictate whether a start up actually takes off. On the off-chance they pick a unicorn then you get shit like into WhatsApp: 60m investment by Sequoia turned into 3bil lol
If you are staying longer than you are required just so they can be better prepared, you are doing them a HUGE favour. This doesn't put them in a position where they can tell you to work on the weekend. But it does put you in the position where you can tell your supervisor to piss off. You have the upper hand here. Use it if you have to.
I tried using gatsby about a year ago as a proof of concept generating about 3k pages using their csv transform plugin. Wasn’t doing anything fancy at that point (the goal was to do more fancy things that would benefit using react down the line). I gave up on that proof of concept because it took over 20 minutes on my dev machine (a recent i5) and peaked over 4GB of ram. I know it’s performance has been worked on but the figures I saw whilst definitely an improvement were still a show stopper for my use case. 
I an a guy studying database admin. I am going to have an associates degree and that's it. I have a ton of experience at end user support but not much coding experience. My training is to find a solution using my resources (either the proprietary database or an internet search). In customer service, these thing are emergent. At my school there is a dichotmomy of teaching styles. If you ask for help in class they say "figure it out" but allow internet searches etc. If you ask for guidance about learning fundamental principles of the fields in question etc. they will totally help out during office hours or even outside of it. They, the instructors, all say "Employers" would rather have a "figure it out" type of person than a "code cowboy" person. Am I being trained wrong? From what a read here the answer is "both" and an obvious answer. Is there a middle ground? Do you want a "cowboy" coder or the person who does dilligent research and wants to solve your organization's problems? I know that "both" is the likely answer. But let's make this an XOR. 
Did you read the error message?
In my experiance of Youtube content, I checked out mmtuts and Traversy Media and both whom I trust are well versed in JS but I couldn't understand it since they both mentioned funtsion scope and block scope which they didn't elaborate enough for me to understand.
Yes, I'm sorry I don't understand it. I'm new to programming and javascript. Sorry. I understand callbacks but promises are very confusing.
Why wouldn't they just say that though?
In most states if you get fired/laid off you qualify for unemployment. Not if you quit though. 
[removed]
I tried this but I still get the same message. https://hastebin.com/ocebanojaj.js
I'm not understanding how the double dispatch prevents the problem, as another bit of code that also uses the same symbol and extension will collide. You've just changed it from colliding with a string name to colliding with a Symbol name?
I'm pretty sure const can actually be changed, only the reference is constant so changing array values and incrementing should still be possible
This is exactly what made me click this thread. I thought Gatsby is going to become a software development company for who knows what reason lmao
If I'm not a confused individual`var` is also hoisted to the top. Such that wherever in the scope you define a `var` variable on, it's as if you placed it at the top of the scope just below the function declaration.
Not sure if incrementing is possible, but going deeper to a const variable should still be valid. `const foo= {bar: 'hello world'}`, you can change `foo.bar` but not `foo` itself
Just an addition: kebab\-case doesn't work at all. Dashes are not allowed in variable names. That's because `kebab-case` could be interpreted as "evaluate` keba`b minus` cas`e". For this to work JS would need to make spaces around binary operators necessary. Or find another way to make sure those don't get mixed up.
Of course in this specific scenario I expect them to give the bug with the most impact the most priority. What I‘m saying is that they should fix all bugs and not just scrub it off saying ‚meh that bug may be caused by the alignment of zodiacs and the moon. Cant reproduce. Marked as solved. Done.‘ 
In Europe your contract has core hours, and whilst you can do unpaid overtime, it should be exceptional and can't be forced. The part that says "deliver it by end of Sunday" is the worst. If the OP could argue that it means they are treating Sunday as additional core hours, then he could argue for compensation. In general, I doubt HR even wants to take the risk that it could be construed as establishing Sunday as working hours.
Idk, not a big company HR person. Imagine if you had time to plan around it you could fuck shit up before you quit. 
I just suppress those there's many legitimate reasons to catch errors asynchronously, you can track the unhandled rejections if you *really* want to but I do not believe Node will ever make them full process exits as that would be completely incompatible with the same behaviour in browsers. I know some implementers have even been interested in doing away with the unhandled rejection feature altogether as it makes the Promise implementation a lot more complex for something that few developers know or care about.
When you call the `promiseToCleanRoom` promise, you need to chain a `.catch` after the `.then` that you used to consume the promise. &amp;nbsp; In the `.catch` you handle the case of the promise being rejected, and thus the warning disappears. 
Generally, that's not the best approach. I mean filtering the source events to "simulate speed". As you're doing it, you're tying the concept of _speed_ directly to the _rate_ of events, but this is artificial and, as you mention yourself, your speed is actually defined in a different way (a sort of ease-in curve). Instead, it's -generally- better to: 1. Let events happen as they do 2. Filter only for throttling purposes (i.e. so you don't get saturated of events you can't handle) 3. Keep track of the speed you want to produce independently from the rate of occurring events. i.e. explicitly manage the concept and state of "speed". (Which is close to that thing you mention of "resetting the index" but done better, separately from the stream itself) One option is to use _something like_ [this](https://github.com/trxcllnt/rxjs-easing) to create an "ease-in" stream, which will represent speed, and then _combine it appropriately with your keydown observable_. You'd create or initialize this stream on keydown and kill it on keyup.
You may find that /r/LearnJavascript is more appropriate for this type of question.
looks great. edit: the slider doesn't work on mobile
awesome, thanks a bunch 
it's a hipster programmer trick that makes them feel smart and it's frowned upon on all of the respectable styleguides **PLEASE DON'T USE IT** 
If I run node and then paste this in: let promiseToCleanTheRoom = new Promise(function(resolve, reject) { //cleaning the room let isClean = false; if (isClean) { resolve('Clean'); } else { reject('not Clean'); } });
I was trying to learn react on different written courses. But I was like you, just rewritting code without really understanding. I tried with videos and everything is so much easier. Plus, Adrew \( the author of the course\) is a really good teacher and even if I'm not an native english speaker i understood everything he was saying. His articulation and his speach flow are really great. You should try it if you have time. [https://www.udemy.com/react\-2nd\-edition/](https://www.udemy.com/react-2nd-edition/) Ps: You can find it for free if you are resourceful and fan of piracy. To try if you can follow. But buy it afterward if you can. He did an amazing job.
Hmm...if I do this, it works. let promiseToCleanTheRoom = new Promise(function(resolve, reject) { //cleaning the room let isClean = false; if (isClean) { resolve('Clean'); } else { reject('not Clean'); } }).then(function(fromResolve) { console.log('the room is' + fromResolve); }).catch(function(fromReject){ console.log('the room is' + fromReject); });
My mistake, only glanced at your code and assumed you'd missed the catch. &amp;nbsp; The reason you get the warning now is because you've assigned the promise to the let and it has immediately run without an error handling catch. Instead, you need to create a *function* that *returns a promise*. &amp;nbsp; let promiseToCleanTheRoom = () =&gt; { new Promise((resolve, reject) =&gt; { //cleaning the room let isClean = false; if (isClean) { resolve('Clean'); } else { reject('Not clean'); } }) } &amp;nbsp; And now you can use your promise like so: &amp;nbsp; promiseToCleanTheRoom().then(res =&gt; console.log(res) ).catch(err =&gt; console.log(err) // Not clean ) 
See my reply above and you'll see why. Here, you've chained the `.then` and the `.catch` directly to the promise, which is being called *straight away* once it's assigned to the `let`. Promises are eager like that. &amp;nbsp; If you need it to run immediately, you can keep it that way. More useful however is making a function that *returns* a promise, which my example in my other reply shows you how to do.
Not really, you run into a similar issue with: let x = 0; function whatever() { x++; return 1; } x += whatever();
Slider is fixed now. Should be seen when CDN caches are cleared
Tried Gatsby for my statically generated blog, but settled with Hugo gohugo.io instead as I did not want to build (React) components but rather just hacked away at some HTML and found build configuration much simpler.
Just set myVar to a default value. Then do your logic. Again it’s my personal pref but I just see little use for breakers unless it’s in JSX or something. Sometimes I see huge one liners with circuit breakers and “?” I wanna throw up. :/ Let’s say my process crashes during func(), I can have a default value. 
So what is your thought here do you blaming that guy who asks for package name . If you are blaming him he doesnt need to ask for it node if Community decide to use it they pavkage can only imported from node modules dir. He asled nicely to 50 user/mont package owner. And i am not saying people have low download count dont have to give their package name but cmon it doesnt hurt
It's nonsense.
Like look at that isnt it exiciting 
Performance! Canvas is a single bitmap-drawing surface, which is made for drawing and handle stuff like bitmap animation, procedural drawing (particle effects, etc) there's a lot of stuff that you can do there that will be actually faster than html/css rendering especially if you got hundreds of elements. Not to mention 3D rendering ;) So for UI it may not be the best choice; but it might be in some cases. Let's say you have shaky text: each letter needs to shake individually at a different pace to give the whole text a spooky vibe. In html you might have to use a span for each letter and give it some css displacement individually, creating a lot of elements and a lot of matching css, that will trigger a re-parsing and re-render each frame for each of these many tiny elements. If you draw the text on canvas directly and handle the animation, you won't need the css layer and browser re-parsing stuff. You can handle the animation more efficiently your own way. So if you have a performance-critical game, adding a huge load of css parsing each frame might not be the best choice for a smooth framerate. Even if you know, javascript. 
Yeah, I was merely commenting on the above proposal having some flaws. :)
db.all is async but you don't have a catch for it. You've got promises around it that are caught, but not the promise from db.all itself.
&gt;catch for [db.all] Please elaborate?
so they have no idea what you actually do and need to put together a job description using fancy computer\-person words
You can do that with `var`. But you can't with `const`. And using `let` only because you write an `if` statement one line below actually feels dirty to me. I hope the `do` expression will fix that one day: const myVar = do { if (someCondition) { getValue() } else { 'default value' } } It's currently Stage 1 but what do you think about this alternative?
What hardware was used for this?
Cool, but How does it work?
I’m not against breakers entirely but just when overused to achieve a slightly shorter expression. Like you said const port = process.env || 8000 is very to the point. Speaking of stage1 we have “optional chaining” coming up for OPs usecase that eliminates the use for breakers for null checks. I like it more cus it’s usage is more direct. Also it’s the same as big languages like C#s null check operator. https://github.com/tc39/proposal-optional-chaining/blob/master/README.md
Fun fact, was a rapper before a dev. Anyhoo, that's fine. It's not for everyone.
You seem to have a problem with asynchronicity... In your second `then` block, you... First declare `let result;`. Then you call `db.run` which is asynchronous and will not execute its _callback_ until later. Then you `return Promise.reject(result);`. So, you're basically `return Promise.reject(undefined);`, which, I guess, is what produces that `undefined` output in your console. After `db.run` is done, then, as there has been an error, the _callback_ is executed. There, in that callback, you're creating (`if (err) result = Promise.reject(err);`) a new Promise and uselessly assigning it to `result`. Nothing will be done with that promise you have _now_ created. No one will catch that. As a general piece of advice, I would tell you to: - try to avoid mixing callbacks and promises as much as you can. - avoid _as much as possible_ returning `Promise.reject` or `Promise.resolve` to signal rejection or resolution. Instead do create and return a promise and then in the _callback_ either reject it or resolve it.
Hugo is a lot faster but kind of an apples to oranges comparison 
I would argue I have not given up yet. It goes against my principles to do so. If you get stuck, just try try again. I am working with a head hunter to get into the job. He sent me the code assignments, gave me the deadline, and I worked all day to meet it. I basically told him that I was new to React, and that given enough time I would understand it well enough to do the app, and I offered up other code segments as a subsitude instead, since he would need to present something to the employer for consideration. If he steers the conversation into the process how I tried to solve it, I would definitely go through it with him. I may even offer that up proactively and see what he does with it.
Figured it out, all of my reject-returns go to *inside* the then handler. I tried being smart and using an upper-level-scoped variable to *return* the rejected promise, but it didn't work, because db.all proceeded to be an ass and continue asynchronously anyway. And since you can't catch errors inside async code, I proceeded to wrap the db.all in a Promise &amp;mdash; which is what u/name_was_taken was trying to convey to a thick-headed me. Anyway, yay, new enlightenment! But there's *another* problem now: I have a bunch of `return new Promise(...)`es, that is considered bad form and wasteful and misusing the Promise API, and I don't know what to put in place of *that*. Anyone help? Thanks! Also, thanks, /u/name_was_taken, you set off the initial spark that led to my solution^(\(workaround\))!
I agree 100%. I am saving this post for future reference.
Take a look at [**https://github.com/neoniousTR/table\_radar**](https://github.com/neoniousTR/table_radar) =\&gt; Hardware Setup
No problem. :) IMO unless there's an efficiency issue, readability trumps idealism.
&gt; ??? Am I supposed to &gt; not wrap db.run inside a Promise? But if I don't do it, the code breaks? Can you please elaborate? Thanks! No, no, the other way. You **are** supposed to wrap `db.run` inside a promise. What you're **not** supposed to do is signal resolution/rejection by creating _additional_ promises with `Promise.resolve()`/`Promise.reject()`.
That is quite funny :) I hope the article is well received, maybe it is just me.
Okay, then I got it right. Thanks for the help!
[removed]
Do you call `||` breakers? I wasn't really sure. I've never heard that before. Yes, optional chaining is also something I'm looking forward to. But it's also very much tailored to a specific use case. But indeed the best solution for OP's question.
I'm tempted to agree here, but at the same time I can't quite come up with a practical use case for the current functionality (while OP did have a practical case for the other functionality).
basically the 1% playing casino games
I'm all for more power where suited - but honestly this is the worst idea ever. Something like 70% of cryptolocker outbreaks are currently coming from VBA embedded in either Word of Excel documents. And someone looked at that and said "we should a more powerful language to malware writers".
This is cool. I especially love that it fully embraces AMD, since the only part of the public API is the `window.define` function. Simple!
But in the case of a primitive, is it possible to mutate it without reassigning it?
Totally valid point and 100% understandable ;) You might give it a shot anyway and see if you still like it beside that. And, in case you do, do not hesitate to ask me. It might look unmaintained but in fact it is not. It is simply stable.
The ultimate goal was a mostly-static site that was effectively like a catalogue stored on S3/an S3-like. The catalogue items once existing rarely change, but new products would show up fairly frequently. There would've been a small amount of javascript to get non-static information from an API that was eventually backed by their enterprise ERP - which was unsupported in HA configurations by the vendor. The concern was making it appear like the business was always available, even if the ERP wasnt. The existing solution basically taps straight into their ERP via a thin layer (before my time, I know how dumb this is), so if the ERP is dead so is part of the web presence. The idea started of as taking a CSV export from their PIM to generate the static parts.
Just a little example [https://codepen.io/Ebuall/pen/gzNepy?editors=0010](https://codepen.io/Ebuall/pen/gzNepy?editors=0010)
There was an npm module I used to use before switching to yarn that did the exact same thing. Perhaps it was even copied? I don't remember the name exactly though. 
**Var** behaves unusually with blocks, **var** declared in simple block: { var x = 0; } still behaves like it declared outside of block. You need a full blown function, to divide scope. **Let** fixes this to match behavior of other languages. Just forget about **var** and never use it. By default choose **const** and use **let**, when you really need it \(in 95&amp;#37; cases you don't, even **for\-of** loop works **with **const\). 
This should be clear with a better example: const usernameIsValid = /\w+/.test(username); const passwordIsValid = /\w/.test(password) &amp;&amp; /\d/.test(password); const elephants = await genElephants(); const hasPinkElephants = elephants.exists(e =&gt; e.isPink()); if(usernameIsValid &amp;&amp; passwordIsValid &amp;&amp; hasPinkElephants) { vs if(/\w/+.test(username) &amp;&amp; /\w/.test(password) &amp;&amp; /\d/.test(password) &amp;&amp; (await genElephants).exists(e =&gt; e.isPink())) {
There's one elsewhere in this thread: https://www.reddit.com/r/javascript/comments/8ls34w/js_quiz_async_function_execution_order/dzjsqg2/
It's already here, though it's a bit weird. ```js me = { } const family = {husband: "Ben", wife:"Emily",child:"me"}; ({husband: me.dad, wife: me.mum } = family) console.log(me.dad); // =&gt; Ben ```
I've been using it for the last 6 years without any issues.
Why does the article use an image of PHP code in Sublime? I’ve literally never known any PHP developer that didn’t use PHPStorm.
They are now Famous industries. They are a startup that is based out in the Valley. They have a platform that is based on that original engine they used to create what that they "instant apps." If you use snapchat you've probably seen one. They do some crazy stuff for such a small team. 
What do you mean, "It didn't work anymore?" Here's what you do: 257. Copy the HTML into the index.html file, ***APPEND THE FOLLOWING JUST BEFORE THE &lt;/body&gt; tag:*** `&lt;script src="./script.js"&gt;&lt;/script&gt;` ***AND SAVE.*** 258. Copy the JS into the script.js file, once more afresh, and save. 259. You have a choice now: 1. Double-click the index.html file, it'll open in your browser, and you'll see the magic 2. If you want to show off your 1337 tech haxx0r skillz, open Brackets live preview (warning: 4ppr31c3 h4xx0r must have the minimum1337 haxx0r skillz to have already enabled Brackets live preview) Go ahead and charm the ~~gals~~ crowd with your new 1337 JS-haxx0r-website-skillz!
You can’t mutate a primitive. This is to your benefit. Let’s say foo=1. Then you do bar=foo+1. If the primitive is mutated and you would now expect to console log out foo as 2. But it stays 1. 
checked out this project against my "test for just another shi**y JS framework": 1) is there requirement to install any global sh*t? if yes - test passed (why on earth should I want to pollute my clean setup with some global 3rd party cli's and other stuff, which are used only for this project?). 2) is there requirement to run command "npm install" more than 3 times? if yes - test passed. 3) is nosql the only database type framework supports out of the box? if yes - test passed. 4) do framework requires me to learn some other shi**y framework, that follows 3 above rules, to work (like meteor, etc)? if yes - test passed. 
You are missing () around the {}. As https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment says, the round braces ( ... ) around the assignment statement is required syntax when using object literal destructuring assignment without a declaration. {mother: me.mom, father: me.dad} = familyObj is not valid stand-alone syntax, as the {mother: me.mom, father: me.dad} on the left-hand side is considered a block and not an object literal. ({mother: me.mom, father: me.dad} = familyObj)
Aaaah of course. Just like shorthand arrow functions.
At least it's employing people though, compared to slots. Source: am payed by VC money, indirectly.
Using ternary operators is fine but, in my opinion, they hurt readability in many places where they can be used. If it improves readability according to you and your coworkers then go for it.
Sound advice, but for a lot of companies these days, they have no loyalty to you. Why would you give them the upper hand in that regard?
Is this an american thing? I have never seen this kind of behaviour in my country. Maybe it happens if it's on classified/government type of contracts, but not even in banking&amp;insurance do I see this.
Ah, I'm just a student :) But anyway, thanks for the response! I *do* think it has benefits and no costs &amp;mdash; look at the exact line I lifted from the code: const db = new sqlite3.Database('./db/users.db', err =&gt; err ? reject(err) : resolve(db));
How does that work? Won't the interpreter check for a statement after the if? Also, then `errorHandler` should return a truthy value, right, not `undefined`? Like: //err &amp;&amp; errorHandler(err) if (err &amp;&amp; errorHandler(err)) //Checks if err exists; if yes, errorHandler(err); if not, errorHandler(undefined) statement or code block that executes only if errexists &amp; errorHandler DOES NOT RETURN UNDEFINED
There is no need to use an `if` statement there. The code after the `&amp;&amp;` operator is executed only when the first operand is a truthy value!
It's like a static site generator, in that it generates separate HTML files from your markdown files, but also includes a lot of client-side magic to improve the performance even more compared to other static sites, by e.g. switching pages client-side rather than doing a full page refresh.
&gt; You can do that with var. But you can't with const. And using let only because you write an if statement one line below actually feels dirty to me there's nothing dirty to it.
it would be asyncFunctionLikeOpeningDatabase(uri, err =&gt; err &amp;&amp; errorHandler(err)); If there was no error, it would return the value of error (null or undefined or whatever err was) but without calling errorHandler.
Please correct me if I am wrong; `err &amp;&amp; errorHandler(err)` is basically: if (err &amp;&amp; errorHandler(err)) nextStatement; -&gt; evaluates err first; -&gt; if truthy, calls errorHandler(err), evalutes returned result -&gt; if truthy, proceeds to nextStatement -&gt; if falsy, skips nextStatement -&gt; if falsy, skips nextStatement -&gt; proceeds to succeeding statement
Best of luck to you. Feel free to PM me if you have questions :)
So it's the same as: asyncFunctionLikeOpeningDatabase(uri, err =&gt; if (err) errorHandler(err)); Right? Is this a JavaScript quirk, or is this universal? Could you direct me to more exaples, please? Thanks!
npm-check -u
You are very welcome!
Oh, so it's not part of an `if` at all: err &amp;&amp; errorHandler(err); ^ if truthy do errorHandler, if falsy skip to the next statement Right? Thanks!
That assignment is ridiculous even As an at go.e assignment. They should be paying you for it if they wanted completed. Secondly, you chose the wrong framework if you needed to to get up to scratch in a short window. React has a steeper learning curve than vue and they do broadly the same thing in slightly different ways. The documentation for Vue is also far better. I use both a lot and love them and hate them for vastly different reasons. But React generally takes longer for beginners to grok. With Vue-cli and the Vue docs, you can be up and running really quickly. When you are new to something and absolutely have to get building immediately, it really pays to choose the tool with the lowest barrier to entry.
Symbols are guaranteed to be unique in JS and cannot collide unless you publicly expose the reference to your symbol. They are much different than symbols in Scheme, Racket, Ruby, etc. const one = Symbol('a') const two = Symbol('a') one == two // false String.prototype[one] = 'one' String.prototype[two] = 'two' "foo"[one] // 'one' "foo"[two] // 'two' In the second example using strings, surely that could collide, but the surface area for collision is very small if you name space your project with something like `var namespace = 'MyCoolLib-0.1.0'`.
Right! That's how it works! 
You might also like object spread. It can actually be easier if you need ALL the properties from the target object into new object so like `const extendedFamily = { myUncle = "Jeff", ...family }` Use Object.assign if you dont want to create a new object. Again not exactly what you asked but in the case of needing all the properties, it seems cleaner to me
Right! That's how it works!
The author here :\) Shadow DOM is used by the "render" factory, but you can choose to not use it. If so, the Shadow DOM is not required. The library is very flexible. Moreover, you can still use "render" factory and set \`light dom of the custom element. This factory takes as an argument function, which can use host rather than shadowRoot and put there some content. You can read more about it in this section of readme: [https://github.com/hybridsjs/hybrids#render](https://github.com/hybridsjs/hybrids#render). Especially, look at the code example \- in the body of update function you can do whatever you want. Yes, as default shadowRoot is used, but you don't have to use it at all.
Ternaries are almost the same as if/else but not exactly. The main difference is that your version returns a value. Usually that doesn't matter... unless it does. Some old APIs have magical return values. For example DOM event handlers stop propagation if you return false. Another difference is that stacked if/else/if tend to be considered more readable than nested ternaries.
&gt;Apparently this treats both the operands as *expressions* Right! If you need to use it in a `return` statement you can code: `return err &amp;&amp; errorHandler(err);` . You rarely see such statements though!
***🤦Mega-facepalm*** So inside a Promise, writing `return err &amp;&amp; reject(err);` is the same as writing `if (err) return reject(err)`, which is the same writing `err =&gt; err ? reject(err) : {}`. Thanks for enlightening me! I didn't know about this application of `&amp;&amp;` before today!
I'll echo others, don't be embarrassed. I mean just look at that excellent list that lhorie posted, and then bear in mind that there is even more that you need to know to really understand everything that assignment asks for in terms of concepts, tools and libraries. Front-end libraries are not simple tools (even the simple ones aren't simple, they just do more magic), they require complex build setups (webpack), transpilers (babel), a knowledge of some more advanced javascript concepts (classes, class properties, arrow functions, object deconstruction, spread &amp; rest operators, dynamic property names, string literals). That just getting started, to write code that is flexible and maintainable you need to think seriously about design patterns and architecture. Hardly beginner stuff. Additional libraries for routing and state management also become pretty important as the complexity of a codebase grows. Don't sweat it. Like the old saying about how to eat an elephant. One bite at a time. You'll get there.
Not exactly. Because it's just an estimate it can vary depending on various factors that the client can't predict. Some are driven by business rules, others are transient like pre-authorization holds for gas station pumps.
I've worked before in a company with 10's of millions of highly sensitive patient records. When someone resigns they typically finished out what they had been working on, did knowledge transfer within their team, documented what they could, and we had a going away lunch for them toward the end of their two weeks. The only times that wasn't the case is when the employee is trying to quit before they get fired for some sort of negligence or fraud and they were typically already on a performance improvement plan (up or out). I would say that a practice of walking someone out as soon as they submit a resignation is more of something a company with a bad work culture and poor auditing controls would do. You know, the companies that work their employees into the ground and then are confused why morale is in the gutter and can't get new workers of any quality because of their reputation. 
Well, strictly speaking all three statements are different. This is where side\-effects appear. As an example if you only add the `if (err) return reject(err)` statement in your handler then it returns` undefine`d when` er`r is falsy value, but` return err &amp;&amp; reject(err)`; will return` nul`l \(no error value depends on the` asyncFunctionLikeOpeningDatabas`e function, but it's usually `a nu`ll value\) when there is no error. 
Is it not a maintenance nightmare to be sticking method name patterns in far away classes? Is it not better to have explicit behavior, even if it's a bit more verbose?
I meant that the return value may be used by whatever called the callback. In my event handler example, these two do slightly different things: element.onclick = () =&gt; {if (foo) doStuff()} element.onclick = () =&gt; foo ? doStuff() : undefined If `doStuff()` has a convention of returning true for success and false for failure, then failure will also trigger stop propagation (meaning, the event will stop bubbling and may prevent other event handlers from firing, leading to potentially difficult to troubleshoot bugs) Like I said, most of the time it's fine to return throw-away values, except in the odd cases when it isn't. If you are aware of those cases and know to avoid them when they come up, you should be fine. Alternatively, you can eliminate the risk by using a coding style that is strict about return values. Both are generally considered acceptable, but the former incurs more technical debt (i.e. it's a shortcut to gain speed now that may or may not need to have "interest paid off" later).
In a sense. I think they use an in house version of electron, but I'm not too sure now. It's been a a good half a year since I've spoken to anyone from that team.
yes, make work projects are all the rage.
Casinos employ lots of people and someone needs to program the machines.
It's built on [Web components](https://www.webcomponents.org/introduction). There's an underlying HTML node with an SVG overlay. The SVG renders the sketchy borders and shapes. 
It's built on [Web components](https://www.webcomponents.org/introduction). There's an underlying HTML node with an SVG overlay. The SVG renders the sketchy borders and shapes. 
Why all the shade?
Someone pointed that example out to me after I made the video 😀
Highly recommend [this site](https://astexplorer.net/) for analyzing exactly what's happening in these scenarios. Paste in: `{mother:` `me.mom``}` And then, of course: `({mother:` `me.mom``})` The other commenters have explained what's going on, but I love this website when I am curious what a particular syntax is doing. I have wished so many times that other languages had a tool like this when I am confused about operator binding, etc.
From my perspective aop should be merely used for handling cross cutting concerns. As you correctly said, building a whole application using aop will result in an near unmaintainable codebase. 
[In some of my DB-related code](https://github.com/ariadnes-thread/ariadne-api/blob/master/lib/db/DB.js#L10-L26), I explicitly convert all results from the DB from `snake_case` into `camelCase`. Do you think this is justified for the sake of keeping code style consistent or is it going a bit too far?
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [ariadnes-thread/ariadne-api/.../**DB.js#L10-L26** (master → b494b46)](https://github.com/ariadnes-thread/ariadne-api/blob/b494b46517f3230addae7eabd33b1bd3320d42fe/lib/db/DB.js#L10-L26) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dzkeoos.)
These things can exist in utility classes and still be referenced explicitly, no? My biggest complaint is that the utility class is responsible for application of the functionality, not the primary class. It would seem much more explicit for there to be say a @cache decorator on the getter function in the primary class. 
It seems reasonable to perform that kind of a conversion at some point at least. In addition to the consistency benefit, this makes your code a little bit more datasource-agnostic and somewhat more loosely coupled, since you're not relying on the technicalities of how the data is represented in the DB quite as strictly.
Yeah I hear you with the better perhaps methods to convey what’s going on, but you’re actually combining your class with another class to create your new class. Almost like you’re making a proxy. 
&gt; So it's the same as: asyncFunctionLikeOpeningDatabase(uri, err =&gt; if (err) errorHandler(err)); &gt; Right? Not quite. First, that's not actually legal syntax (you can only omit the curly brackets of an arrow function if the body contains a single expression), and second your version doesn't return anything while the previous one does. So it's the same as: asyncFunctionLikeOpeningDatabase(uri, err =&gt; { if (err) { return errorHandler(err); } return err; }); &gt; And, this won't have any unintended/undocumented side effects, right? Sure? There has been no recorded case of this malfunctioning/producing buggy results, right? It's production-environment-safe? The behavior is deterministic and has universal support in javascript engines. The biggest risk of an unexpected result is that you the programmer need to know what values count as 'falsy'. `false`, `null`, `undefined`, an empty string, `0`, and `NaN` will all be coerced to `false`, so if you only have undefined in mind, but somehow a `0` might come through which you don't want to treat as an error, then it will go counter to your expectations. But that's not something unique to using `&amp;&amp;` for its shortcircuit properties, it can happen any time you're implicitly doing type conversions. &gt; Is this a JavaScript quirk, or is this universal? Most languages have short circuit boolean operators, but not all of them. And among the ones that do have them, some will mandate that they can only be used with `true` or `false`. So this kind of syntax will only work if the language 1) allows implicit type coercion in conditionals, and 2) includes short circuit operators.
Good info, thanks for sharing!
The head hunter guy who is trying to place me in job basically told me that I shouldn't worry about it, apparently none of the other applicants have solved it either. So I guess I'm not the only one. As for the framework, I honestly had no idea what to go for. I know that I personally wanted to push my javascript knowledge further, as that is the ideal career path I want to follow now, and ReactJS was on my to do list for studying anyway. That being said, I will check out Vue. Thank you!
Thank you! I will do that.
https://medium.com/humans-create-software/straight-line-code-over-functions-funfunfunction-3-7f845cd79af4 I’ve done enough aop in Java to tell you it becomes a mess. It’s another clever way to hide code, abstraction distraction 
Vue is worth a look for sure but make sure you only choose one frontend library/framework at the start (they are all a lot easier to pick up after you've worked with one for a bit). For job prospects, React is the better option right now so probably worth picking up first. Things may change in the future so having a basic understanding of others is never a bad thing but save that for the future. Recat is also a lot close to vanilla JS than Vue so will probably help more with your general JS skills. Good luck!
You're probably thinking about [fastclick](https://github.com/ftlabs/fastclick). It's not exactly a performance improvement as much as it just removes the 300ms delay on clicks with mobile browsers.
I appreciate everyones comments. You have given me some reassurance about this as well as some guidance, which is what I was looking for. Thank you all:D 
I think you're being a bit disingenuous. As far as major JS frameworks go, the market has been stable for a while now. React as been out for 4 or 5 years. It's not like it's a new concept, with aforementioned React, and Angular/Ember before it. In 2018 you need to have at least 1 major framework in you curriculum. Will the one you teach always be relevant? No, but switching between frameworks is much easier than learning the first one
I understand, thanks! Using `||` for existential assignment I use myself, but it never clicked with me about `&amp;&amp;` before. I always thought, '`||` assigns the truthy value to the left, yay. But &amp;&amp; checks *both* a truthy AND a *falsy* What?' and left it at that.
I figured as much, so when's V2 coming out? :P 
Es6 (ecmascript 2015) supports fat arrow functions
I meant only the underscore, not fat arrow functions. So if I understand correctly, `_` is valid in vanilla JS, and Lodash/Underscore 'override' them by assuming control when `_` is used?
Is it in an iframe? I think I read that if a video is in a cross origin iframe you must set a property on the iframe to allow autoplay. 
Exactly. `_` could still be overrided in the local scope of a function. So if you are relying on `_` to give you access to Underscore, but then introduce a local variable or argument that also uses `_`, then you could only access Underscore with `window._`. For ignored arguments, I prefer to just prefix them with `_`, but with a meaningful name. For example, `(_value, index) =&gt; {}` Hope that helps clear it up.
A simpler example of AOP for a frontend person is CSS. Ironically, with the whole CSS-in-JS thing, people have been favoring colocating the "aspect-oriented" part of CSS back with the component the styles affect precisely because affecting things from far away tends to become difficult to reason about in large complex codebases. Colocation of concerns is a big part of a discussion related to cross-cutting concerns (such as logging, metrics, etc) There are other alternatives to AOP: one is dependency injection (whereby your actual logger code remains exactly where you want it to be called, but you can optionally swap/mock out the logger for testing, etc). Another alternative is event emitters, (whereby you simply emit events from the places you want, and any system can then consume these events however they want). Both of these make it more explicit that you have the intention to do some out-of-band side-effect at a specific point in the code, but are improvements over hard-coding logger calls everywhere. Another AOP-like thing is plugin architectures. aspect.js isn't a very good fit all use cases because a lot of times you aren't dealing with primarily OOP-style interfaces, but rather wildly varying paradigms from various libraries (e.g. React context, HTTP server middlewares, HTML hydration integration points, etc). At my day job, my team developed a plugin architecture that allows you to colocate "aspects" into plugins in such a way that you get access to hooks to all those integration points, plus they are colocated to the service that they relate to. It's an open source framework, and it's called Fusion.js, if anyone's interested.
Not an iframe :(
Yep, I'm familiar with spread, very nice alternative to the old `Object.assign({}, obj1, obj2)` syntax; that empty object to avoid modifying anything in place always bugged me. Just as a pedantic note for an unfamiliar dev who reads this thread, there's a minor typo in your example: `uncle = "Jeff"` only works for default values in function signatures, you have to use a colon in expressions: const family = { dad: "Joe", mom: "Jane" }; ({ uncle = "Jeff", ...family }) // =&gt; SyntaxError: Invalid shorthand property initializer { uncle: "Jeff", ...family } // =&gt; {uncle: "Jeff", dad: "Joe", mom: "Jane"} 
Now that I can easily navigate I have to say, it's pretty awesome.
If you're doing this, Then make sure you're using semicolons correctly! const thing = getThing() ({prop: obj.prop} = thing) Oops, this interprets like this: const thing = ( getThing()({prop: obj.prop} = thing) ) where it expects `getThing()` to return another function, and the argument is the undefined `thing`.
If you want to know how interpreters/compilers work: * http://www.craftinginterpreters.com * https://www.amazon.com/Compilers-Principles-Techniques-Tools-2nd/dp/0321486811 * https://github.com/jamiebuilds/the-super-tiny-compiler * https://ruslanspivak.com/lsbasi-part1/
&gt;fastclick yeah thanks, but looks like it is not necessary in modern devices... interesting to see if there are other similar tools
AOP reminds me a bit of using globals or overriding the prototype of native objects (eg. giving String a new method). Both are widely regarded as bad practices in general, but using them under specifically defined circumstances (eg. in a testing environment) is considered acceptable. For instance, even people who hate on globals are ok with Mocha putting its `describe`, `it`, `beforeEach`, etc. methods into the global scope. And even though everyone hates prototype modification, lots of people still use the Should.js library, which is built around a single `Object.prototype` modification. Likewise AOP seems like a very viable strategy for adding something like logging, and *maybe* for handling another similar concern or two. But if used beyond that it seems like it crosses over from "helpfully hiding some very common code" to "obfuscating important details".
agreed 100%
Lol yep I do this all the time because I started a C# developer &gt;&lt; good stuff (and I edited my post)
Damn , that's kool !
It does, thanks!
To be fair, modern JavaScript engines are already really exposed to potentially malicious code in web browsers and this would be no different. Back to your point tho, there are constantly new exploits discovered in js engines. And MS is most likely going to use thier own one rather than something with more eyes on it like V8.
My curriculum is no longer offered by my univerisity, they overhauled it after I declared a major and before I graduated. So the new version of my degree may work with framework, but I haven't been formerly taught it. It is a new concept to me. While I have heard tons about React, I am always pulled 6 different ways between work and classes and haven't had the time to study it on my own.
What do you consider "the obvious"? 
Actually not too sure of that myself lol... I guess the basics in API requests for front end (GET) 
It's probably as good as it gets in the browser. 
Thanks dude!
Networking is a huge huge topic that can cover a ton of things that are probably totally irrelevant in most cases and a lot of things that are just plain outdated. I think you should understand how HTTP works fairly in depth, then the basics of the rest of the things that go into networking. Start here: https://github.com/alex/what-happens-when
but why would that get funding...?
That's what I *was* thinking..... (What I'm using currently is `&amp;&amp;` and `?:`) Thanks for the response!
Do yourself a huge favor and get out of this frame of mind that self-education should be front-loaded. As counter-intuitive as it may sound, the best approach to learning new things in our industry is reactively, not proactively. You "should know" exactly the amount about networking (or any other topic) as is required to build things you want to build, do the job you need to do, or satisfy your curiosity.
and if there are kids reading this?? you you ... :)
Theoretically. Depends on the browser and host system, the user will probably get bored of waiting for it to finish I would imagine. Why don't you try it (or are you currently waiting? ). 
In terms of best practices: If you're writing modern JavaScript for modern (newer than 2015) browsers, you should _never_ use `var`. `let` has replaced it, since `let` is way less weird about scope and hoisting. For example, with var: (function() { console.log(x); // prints undefined var x; })() but with let: (function() { console.log(x); // ReferenceError: x is not defined let x; })()
Nice advice, i only learn what i need to
XD , no i'm not waiting currently. I'll try it out . btw, you can display a loading gif so people wont think their browser got stuck.
Yeah I’ll link to them www.github.com
DI has nothing to do with AOP.
Hey thanks for your thoughts on this! Your project looks really cool. I do see what you mean about the "doubling" effect; perhaps that is in fact what is happening? (Ie: perhaps a sound-producing object is being created repeatedly?) I don't know React - I've been working in Vue and I finding it to my liking. The new version of my app has performance issues, but haven't yet isolated which have to do with Vue, which have to do with Tone, which have to do with the limits of WebAudio or hardware, and which have to do with my amateur code! :) But overall it's been fun and fast to use Vue and there are no dealbreaking problems that I've found. 
alright. Thx m8
If your source website uses HTTP authorization, you could just point the *src* attribute to the URL/URI and add the login credentials to it, like so: https://username:password@example.com
You can add and remove keys from the object, but you can't reassign the const to another value 
Thanks for this link mate 
To be clear, _ is nothing special in JS. It's just a valid name for a variable. If they chose, it could have been the word 'lodash' instead of an underscore. I'm fairly certain that _ came about because the underscore author wanted to write a library that people would consider a 'go-to' for many situations and, therefore, wanted to keep the name short to minimized the amount of typing. '$' was already taken by jQuery. lodash, which I believe was a direct fork of underscore meant to solve some of the issues with underscore (mainly that it needed to be imported as one large module, i believe) and so kept the `_` to make it familiar to the people moving over from Underscore. 
Yes, the *src* attribute works like a normal URL you would enter into your browser, as long as the server returns a normal image file.
That's like saying strip clubs employ a lot of people but you're excluding the strippers. The Lions share of the cash is in the form of brainless morons slamming bills into the machine for hours at a time. Bartenders, like at the strip club, generally do well for themselves. Instead of strippers, what is likely to be a younger woman who needs to support herself, will instead be MGM Grand.
Look into Electron or Proton. 
For desktop apps, a good choice is [Electron](https://electronjs.org/). Some popular examples are Atom, Visual Studio Code, Discord, Slack, and WhatsApp. For mobile apps, a good option is [React Native](https://facebook.github.io/react-native/). Some popular examples are Facebook, Instagram, UberEATS, Discord . But I would urge you to really think about if this is a good idea. All of these apps have good reasons to do so. Atom and Visual Studio Code allow scripting/styling with CSS/JS. Discord, Slack, and WhatsApp want the same experience for website and desktop (lot of shared code). Electron is a good choice if your app targets both web and desktop. React Native is a good choice if you want to share code between Android/iOS/Web.
100% on board! .NET Dev here and I've seen some "clever" over engineered AOP work in MVC apps. I much prefer being specific at the sake of being verbose, especially when something goes wrong. There are a couple of things like route security, unhandled exceptions and pipeline auditing/logging, but other than that, I steer clear of it.
&gt;https://ruslanspivak.com/lsbasi-part1/ I remember https://compilers.iecc.com/crenshaw/ being linked by the author of this one and it seems to be pretty good.
Thank you for comprehensive answer! I’m not planning to create some hardcore money milking project, I’d just like to explore the possibilities. Thank you!
Thank you! I’ll most likely start with Elektron.
This is the best quick explanation I've found. https://www.youtube.com/watch?v=tvb_Zl53xLI
Oh enough already with these ByteArray posts!!
If I am the consumer of a function, I don't care how it is implemented but rather that if I do _my_ job it does _its_ job. I find that tests like `arity checks` are checking the _implementation_ instead of an _interface_. To make it concrete, let's say that we're testing this function: const add = (a, b, c) =&gt; a + b If I wanted to write your tests, I would have to _know_ how many _possible_ things that `add` takes. That seems like an implementation detail to me. What I would want my tests to look like is instead something that reads like this: &gt; When I do x, it returns y I don't give a hoot _how_ it does that, what overloads it takes, anything else. My test of the function just says "X does/returns Y". I don't _know_ or _care_ why. If you are wanting _type_ security and getting warnings that you have too many or too few arguments, look into TS or Flow. I don't think that your unit tests should test arity nor at any level really.
Maintain a queue of requests to be sent, and replace your `fetch(...)` or `$.ajax(...)` with `addToQueue(...)`. When you come online, send all the requests in the queue?
Sorry, what not exactly? What's just an estimate? I can't understand what you're referring to, can you please quote specifically to avoid straw man?
I didn't know any of those applications were Javascript powered. TIL
I have VS Code and it's the fucking best editor I've had in my life. Anyway, how are these apps developed anyway? Is it through a normal HTML CSS JavaScript and then compiled as a native app?
Mhnd](▪》 
The promise rejects if there's a network failure. To check if the server response is successful or not, you need to check Response.status or Response.ok.
Well props to them for pivoting and making it work.
How about places to learn how to not give a fuck?
This is a great video - https://youtu.be/QyUFheng6J0
This is great! I also found that you can use Gatsby with a Wordpress API plug-in that will pull the articles from Wordpress.
Awesome, thank you man!
Nightmare should work for both, no need to use two different ones. 
Yep! but the problem is that iOS doesn't support backgroundSync so I was wondering if there was a backup solution for that?
The basics are just this: async function anAsyncFunction(a, b, wutever) { const startTime = Date.now(); console.log('Start'); // await can only be used from inside async functions await delay(500); // Wait 500ms const timeSinceStart = Date.now() - startTime; console.log('End: ' + timeSinceStart); /* Should print: Start End: 500 */ } // This can be called using await because it returns a Promise function delay(ms) { return new Promise((resolve) =&gt; { setTimeout(resolve, ms); }); } async/await is literally just syntactic sugar over Promises. There's nothing async/await can do that Promises can't, it's just a more readable way of structuring the code. Behind the scenes the compiler is converting console.log('Start'); await delay(500); console.log('End'); into console.log('Start'); return delay(500).then(() =&gt; { console.log('End'); }); You can also call an async function as though it's just a normal function returning a Promise (because that's what it is): anAsyncFunction().then(() =&gt; console.log('500 ms has passed')); Congrats you're an async expert!
I wonder if there's any similar tutorial for setting up Forums and Wikis (based on node of course)!
First thing I'd do is clone the library so you can check it out in whatever IDE you use. Browsing the files on GitHub can be helpful for a quick read, but since you're doing this to learn - get a copy of the code on your machine. Navigating it through an IDE will be much easier. And depending on what IDE you use it may have features like call hierarchy that will help you more easily see what's going on. Next, I'd start with looking at the unit tests. This is what I do on all projects (for studying or at work). While the code will hopefully tell you *what* it's doing and *how* it's doing it, the unit tests should tell you *why*. SO many times when looking at the code first I haven't been able to figure out why something was written the way it was or what the expected return value from a function should be, etc. until I looked at the test for that particular function and it all made sense. Unit tests have assertions in them like "it should return 3" or "it should filter out non-numbers". This will help you *much* more quickly learn the code. Of course, look at the code in tandem with the tests (don't just read all tests top to bottom). Hope that helps
Thing is it doesn't take much of an exploit for this to be malicious. If this code can connect to things like SQL servers, it isn't sandboxed in the way a browser is. And people will just get a prompt saying "do you want to execute this?" and hit "yes".
Yeah I think Wordpress would only be used to manage the articles and write them. Wordpress would manage the backend while Gatsby being the front end.
What’s the point of using node at all if you are just going to be making calls to be Wordpress api? 
Promises store references to call back functions and expose an API to resolve or reject the promise, which in turns invokes the applicable callbacks... Here's an example that isn't a real Promise implementation but may be helpful for understanding. ``` class Promise { private onResolve; private onReject; then(onResolve, onReject) { this.onResolve = onResolve; this.onReject = onReject; } resolve(value) { this.onResolve(value); } reject(err) { this.onReject(err); } } ```
Yes. Electron ships with a prebuilt version of Chromium. So it's like targeting only one web browser version. Electron also exposes APIs to interact with the OS that you wouldn't find in browsers normally (Taskbar, System Tray, macOS Touchbar etc.). You can also use Node.js packages/modules.
Instead of the resolve/reject methods being exposed as public instance methods, they are actually exposed through a callback passed into the Promise constructor. And instead of onResolve/onReject being references to a function, they are actually arrays of references of functions. And there's the fact that the then method returns a new promise that can be used to chain promises on promises. So it gets fairly complicated. But the simple story is: a promise hold references to callbacks and offers a method to call those callbacks. 
Just want to ask can you handle SCSS extraction with webpack 4?
&gt; Electron ships with a prebuilt version of Chromium. That explains a lot. Fuck so basically a web developer can be an instant native desktop developer with just Electron? Holy shit. Does that mean any of my existing web apps can be compiled by Electron immediately?
Just don't use "var" as it doesn't consider which scope it is in. It's a bad practice that should have been deprecated once "let" and "const" appeared.
Thanks for the reply. In my original post, when I said "the more important test is the one that checks that we're getting back what we expect from our function", I definitely had your comment in mind. I do understand that this is the purpose, and the main point of the test. But, what if a bumbling junior dev came through and took our function `const add = (a, b, c) =&gt; a + b;` And turned it in to: `const add = a =&gt; a + getSecondNumber();` This could pass some tests. But not one checking for `arity`. The only thing we have at our disposal, considering that we don't care about implementation details, is the *interface*. Right? What about this scenario. And, let's throw out the "Well, why did you give that person a job" and "no one with half a brain would do that". It doesn't do us any good anymore, it's already happened. Does that make checking `arity` seem worthwhile? As a project manager who's seen things like this happen and wants to ensure that when all tests pass for our build, that we can *rely* on those covering everything we'd want to know about potential problems that could arise in our application?
Well it’s pushed onto the end of the call stack. Is say the takeaway is that `await fn()` is equivalent to `Promise.resolve(fn()).then(`, with the obvious exception of scope
Not always as simple as that. But it's a whole lot easier than building something from scratch. The dev should still take advantage of the Electron APIs as much as possible. Otherwise it will just feel like a web browser wrapper. It would suck if your native app didn't load up without internet connection. That being said, there are tools like [Nativefier](https://github.com/jiahaog/nativefier) (which uses Electron) that can create Native apps out of websites automatically. 
Sorry I’m not sure I understand your question. Gatsby is a static page generator and the Wordpress plugin pulls the info from Wordpress and shows the content. All the content is handled in Wordpress. 
In Electron, there is a main process and multiple renderer processes. You can read about the Electron architecture [here](https://electronjs.org/docs/tutorial/application-architecture). JavaScript is single-threaded. So yes, Electron is single threaded by default. However, just like in the browser or Node.js, async calls to native APIs don't run on the same thread. Web workers are also available if you need explicit multi-threading.
This returns an error on the second part instead.
A promise is made of two parts: a "resolver" and a "rejector". They are functions. When a certain promise is executed, at some point in it's internal operations it will say "okay, everything went alright, so I'll call my resolver with the results of my operations". If it fails at some point, it will say "this will be rejected with the following error". The "resolve" and "reject" functions are abstract, because they are the functions that you pass to the `then()` and `catch()` methods.
...but how does it know "everything went alright"/ was successful?
Thanks for this! I’ve been meaning to learn how to set up a full stack React environment without using CRA!
VCs often play a role on how the company develops too. It isn't just a blind bet.
Good point
It sounds like to me you are asking after something that too many js developers overlook. The way this works in js is through something magical called the "event loop" and waiting for a response from the server that hosts the API(in the cast where you are using promises with ajax calls). Its how call backs, setTimeout and many other things in JavaScript work. I highly recomend watching this video: https://m.youtube.com/watch?v=8aGhZQkoFbQ After understanding the event loop a lot of things started to make sense for me. 
The question has been answered at this point: it throws when there's a network error, such as the server simply not existing or the host not resolving. I think it's a fundamentally interesting question, though. In network programming, isn't a network failure something to be somewhat expected? You're not supposed to use exceptions for control flow, so it seems odd that this is the line where we say "well now here's a last resort effort". If "the host didn't resolve" is unexpected, why isn't a 400 or 500? To me, this is just evidence that exceptions should not exist in the language, or at least no API should design throwing an exception as simply something that might happen pending an external circumstance. (that is, maybe you throw an exception if you're passed an argument of the wrong type, but you shouldn't throw an exception if the data has just unexpected content). Sorry for the tangent! 
You can potentially do this completely in CSS with CSS transitions: https://css-tricks.com/almanac/properties/t/transition/
Is it returning the value returned by reject(err)? I'm just learning and this seems odd to me. Why not: reject(err) return
I think what he's saying is what's the point of going through the whole process of setting up a node backend and react frontend when you're going to use Wordpress as your blog in the first place. It's just glorifying the blog front facing interface. You'd probably be better off just using Wordpress to do the whole thing if you want to use Wordpress as your CMS
Oh yes with Gatsby and the plugin, you don’t need node. That’s what we use for our blog. I was just letting OP know that there is a different way to do it.
Just an update: I’ve upgraded the app: https://itunes.apple.com/us/app/html-css-js-snippet-editor/id1384829193?mt=8
Also check out pkg by zeit. It will bundle your node app with its own run time for any platform. It doesn’t have the disadvantage of a new Chrome browser process that some Electron apps struggle with 👍
`reject(err)` returns undefined, so `return reject(err)` is the same as `reject(err);return;` (except it's one line instead of two) `resolve(rows)` is the last statement and returns undefined, so it's the same as `return resolve(rows)` (except it's less typing)
&gt; ...but how does it know "everything went alright"--was successful? ...by programming that decides if it was successful.
Hi /u/th3d0rky1, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/obscureentrepodcast, For javascript help, please visit /r/LearnJavascript. Thank you!
When in doubt check [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Worker). Workers are part of the HTML spec, and have been around for about a decade. They're very common, and your use case is exactly what they're for.
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://developer.mozilla.org/en-US/docs/Web/API/Worker) - Previous text "MDN" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
Yeah I've read a lot about this on MDN. It's just that my seniors never explicitly told me to use this API and I don't see a lot of people talking about it on Reddit, or I just have too many subreddits to lurn on
That doesn't answer their question at all lmao
What does native even mean anymore
I'm afraid you're focusing too much on "how does **it** know it was successful", as if the promise object itself _did something_ behind the scenes. This is not the case. It _doesn't know_ anything. There is no magic. Instead, the programmer decides to, when everything has gone as expected, _explicitly call the `resolve` signal_, or, when something hasn't call the `reject` one.
Thanks a lot for the answer, that makes it conceptually clearer. Thanks to this I ended up with something that looks like the codepen posted by the other commenter. I also dived a little bit deeper in the docs, and I was wondering if using *Observable.generate()* would be an option as well, with a custom scheduler that'd achieve the same result. I was reading [this stackoverflow post](https://stackoverflow.com/questions/30917363/creating-a-simple-scheduler) about schedulers, which makes it look like they are **intended** to handle concerns about when a value is emitted based on time
Thanks a lot for that. Based on another message in this thread I ended up with something similar.
The `Promise` constructor takes a callback function, which has two parameters: `resolve` and `reject`. When the callback is run, if it succeeds, it calls the first function \(resolve\) with the value it wants to return. If the callback fails \(encounters an error\), it calls the second function \(reject\) with whatever error message it wants to return. Here's a *super* simple example: ``` // creates a new promise that will always be successful const successPromise = new Promise( (resolve, reject) =&gt; { resolve('Hello, World!') }) // creates a new promise that will always fail const failurePromise = new Promise( (resolve, reject) =&gt; { reject('I am a failure.') }) // .then takes a callback that will be run on a successful promise value // .catch takes a callback that will be run on an unsuccessful promise value successPromise .then(x =&gt; console.log('successPromise succeeded!:', x)) // will print "successPromise succeeded!: Hello, World!" .catch(y =&gt; console.log('successPromise failed:', y)) // will do nothing, because the promise won't be rejected failurePromise .then(x =&gt; console.log('failurePromise succeeded!:', x)) // will do nothing, because the promise won't be resolved .catch(y =&gt; console.log('failurePromise failed:', y)) // will print "failurePromise failed: I am a failure." ```
I've been meaning to get into this modern development environment for some time now. But when I look at these tutorials it seems so complicated and time\-consuming just to configure everything before you can even start coding. And than I go back to Wordpress....
&gt; Not only that, but it seems like it also informs the developer when they've made poor choices about how to modify code. Its not necessarily a poor choice to modify a functions arity, it really depends on implementation. &gt; there has to be a reason we ... This is a double edged sword. Its not good to assume you're smarter than everyone, but its also not good to assume just because its already in your code base that it was 100% thought out. To get back to the first point, it really depends on implementation. If you're developing an API and you're changing the arity of a function that could be a big deal, and you may need to implement a new major version. But in an individual project I would just find it annoying. Any time I've altered the arity of a sufficiently established function I've just added additional optional parameters which default to the original expected behavior. It just seems like overkill &gt; But, what if a bumbling junior dev came through and took our function Code review. If this passes you have other issues &gt; It doesn't do us any good anymore, it's already happened. Thats why I said it depends on your specific project, sounds like you might need it. And to your specific issue, I wonder if that would be better suited for integration or acceptance testing, rather than unit testing. Best of luck to you in the future.
Politely ask for double the pay until they find a replacement?
Cool. Maybe think about some kind of stream over a web socket or something? 
It _might_ help, but I don't think you _need_ a custom scheduler to solve this. An Observable should suffice. I've found [this](https://medium.freecodecamp.org/thinking-reactively-how-to-animate-with-movement-objects-using-rxjs-692518b6f2ac) that may give you some ideas. (In general, search for articles about animation using RxJS to find this sort of problem explained, as it is pretty common in that space) A simple approach (WARN: pieces of code intermixed with comments or pseudo-code): // Create the keyDown and keyUp streams... and then just... keyDown$ .filter(onlyRightArrow) .subscribe(fireOffTimer); let rightArrowUp$ = keyUp$ .filter(onlyRightArrow); const fireOffTimer = () =&gt; { let acceleration = Rx.Observable.timer(10, 10); // every 10ms or whatever you want acceleration .takeUntil(rightArrowUp$) .map(calculatePosition) .subscribe(moveToRightPosition); }; // ptime, pseudo-time, is 0,1,2,3... units of time (in our case, as written above, each unit is 10ms) // This is where you implement your particular acceleration function. This is based on time/pseudo-time, not on the rate of events being fired, which is the important bit. // As a silly example this starts slow, accelerates for a while and then stabilizes at a medium speed. You can make it as sophisticated as you need (*) const calculatePosition = (ptime) =&gt; { if (ptime &lt; 20) { // for the first 20 units (200ms) return ptime; } if (ptime &lt; 100) { // then accelerate... until 1s return 20 + 4 * ptime; } else { // then maintain speed return 420 + 2 * ptime } }; // moveToRightPosition will receive the calculated position (*) You can find easily some appropriate animation acceleration functions by searching for "easing animation funcitons" or some similar term. 
It's also reject requests when it violates the security. e.g. Fetching local file using `file:` protocol.
Forgot to `return` the new promise, despite telling you in italics to do it! [It works now.](https://imgur.com/a/oEvzCXU) 
The only place I worked at that had that "immediate escort" policy, exactly matches that description. Wow
What is a signal?
I just don't understand promises. I've looked at that video many times but I'll give it another look. Thanks. I really don't see how that's related here though.
I'd have no idea how to do it. It's the most confusing thing I've tried to learn in javascript.
I probably should've said just _function_, sorry. I see how that may be confusing. It's just a function. I called it "signal" because of its _intention_, it's a function the programmer calls to _signal_ that the task is done / has failed. Don't pay too much attention to that detail.
I looked through your link briefly but I don't see a .then or .catch referenced--are you sure this is about promises?
Yes, it's an explanation on what they are, not on the particular syntax or usage.
Thanks, I'll look over it. Honestly at this point, I don't expect to understand this yet. It seems pretty complex--for me. I'll probably just have to come back to it some other time...perhaps I'll be wiser then. Thanks for the help though.
&gt; Promises store references to call back functions and expose an API to resolve or reject the promise That definition is really tough for me to understand. The definition includes the word itself--to resolve or reject the promise. So far to me, it just seems like some kind of weird object with two methods on it, .then and .catch. I'm giving up on this. Thanks though. 
Nice thanks!
Hvala ti puno! :D
aaaaa
If you’re doing that, rethink every about your life. It’s hard AF to read, even if it didn’t make you have to think about ASI.
If you pay peanuts, you get monkeys 
To me, 95% of bad code is as bad as 0%. If they want paid early, they'd have to give me the code for review before they saw a cent. I also don't feel bad for people who lie about their skills and fail to do the job. They put themselves in that position. As to the fix... There isn't a good one. You need some kind of network where you can get recommendations for coders that other people have used, instead of just accepting randoms. That isn't going to be easy to find, I'm sure. When we hire coders, we have the same problem. We pour over their resume, give them a sample project with certain requirements, and then give them up to a week to complete it. The project shouldn't take an experienced coder more than a few hours, but people have lives to work it in around. The majority of the projects that get returned to us are horrible. They miss key requirements completely, many of them have bugs, and some don't even work. And those are the ones that get returned at all. In the end, we've hired a few coders that still couldn't do the job after all that, but generally it's a lack of business skill at that point, instead of a lack of coding ability. They might be green, but they're trainable... If only they'll do what they're told. As for the interview and portfolio, no code = no go. I've never yet interviewed someone that had no code in their portfolio that was worth talking to. And if the code that's in there is all boilerplate, that's a red flag, too. You should talk to them about their code in the interview. Have them describe what it does and why they wrote it that way. It'll tell you a lot about their design process and whether they can be expected to design things properly. If they don't have any side projects that they can talk about, I'd question their love of coding. And if they don't love coding, working as a freelancer is going to be really hard. I'm sure it happens, but again, I haven't met that person.
I think you will have to be very lucky for this strategy to work. Which is not impossible, but hard to rely on. What I would do (and am in fact doing) is to try and build a relationship with someone over time. You need to know and trust the person before you can make them do work. And in the beginning, that means daily checkups, lots of feedback and basically spending your time mentoring and assessing their skills. You can't give someone a task and expect it to be done a week later if you don't know them. But when you have worked with someone, know their skills and personal traits, it can become possible.
Sounds like you just need to find someone you trust to constantly work with. I've always found that 9/10 freelancers are crap, to the point that I always state that its not worth getting them in as it cost more time in the long run. However I do think that it must also be something about myself and my expectations being too much as it happens so consistently. I've thought of being more ruthless and putting in contract that if quality of work is not good enough in first week that they get a reduce rate and we both cut our losses. But doubt many would agree to that, which then leads to me expecting them to be bad... 
&gt;First of all I always hire on Upwork, I didn't need to read any more after that \(but did anyway\). But /u/ChamberedSwatch sums it up perfectly too. If I were you, I'd get to know a few devs through [meetup.com](https://meetup.com) meets because someone you've met face to face, whose hand you've shaken, and with whom you've shared a coffee or beer, and maybe whose personal mobile phone number you have, is easier to gauge for reliability, credibility, and honesty than the mostly sharlatans \(on both sides, and I include UpWork themselves in that description\) that frequent UpWork.
I agree with you to a certain point, but there is a fundamental difference between a "host didn't resolve" and a 400 or 500: One is mine, the other is yours. I mean, one is a problem that happens on my side, and to some extent falls under my control (not having network connection, _my_ connection not being properly configured, etc), while the other is a problem where the network and my side of the problem is working correctly in all aspects and the remote host does indeed give me a response. That response, though, is that they have a problem.
Have a nice day.
Hi there!! If you need some help on JS I can help you along with my associate, we’re kicking off right now preparing everything for the launch, we’re both frontend developers with more than 5 years of experience, ping me if you need some links :)
hiring is hard and expensive. people will cook up all sorts of shit shows but it's mostly for show and fooling themselves there's no easy cheap fool-proof way to hire the best people. no matter how much filtering and pruning companies do in practice what happens is they take a chance on a bunch of people, they keep the good ones and they let go of the bad ones.
There's a few suggestions but none of them will be perfect. The very nature of free-lancing is that you need to enter a working relationship with someone at very short notice and there's a lot of trust that comes with that. It's always going to be a risk. You can get some very talented people who are just flat-out lazy. First off though, I would question the hiring process. How are these people slipping through the interviews? Lying in an interview is one thing, but have they been asked to demonstrate any of their knowledge? Give them a problem (perhaps one the previous free-lancer couldn't solve) and ask them how they would approach it. It's easy for someone to say they know something when they don't but you can catch them out with a practical test. Ask for more examples of what they've done before. Ask them to talk you through part of it- this will catch out people who have just copied someone else's work. You need to be on the look out for uncertainty in their answers. As other have said, pay will certainly be a part of this. There will be good and bad developers in all pay brackets but higher pay will bring in a higher proportion of better candidates. Think of it this way- if you were free lancing and performed well (at any pay level) you would be more likely to be asked by the same people for more work. Or word of mouth means that other companies want you. If the opportunities are the same, how do you differentiate? For a lot of people that's how much these opportunities are willing to pay. If you **absolutely** cannot afford to pay more then look for the younger candidates in this bracket. Again, you have to be very rigorous with the hiring process, but the skilled candidates in these pay brackets will be people who haven't yet learned the value of their own work or don't have the experience to back-up higher wages yet. Older candidates asking bottom dollar should put you on the back foot as there is always the question of "if they have achieved so much, why are they willing to work for these wages?". There are, of course, exceptions but it's an okay rule of thumb. After the actual hiring, if you are unsure as to their credentials then you have to micromanage **initially**. We all know that we hate it when someone is looking over your shoulder all day but it's perfectly reasonable for the first few days to be catching up much more regularly so you can see how they're performing. If someone has slipped through the net in the hiring process it's better you find out early and cut your losses than wait for the project to be near its deadline and discover it then. Ultimately if you keep getting bitten then you need to question if hiring free-lancers is actually the route you need to go down. If you are not able to do the work yourself then you may need to turn it down. If you are regularly in a point where you need more manpower then a fulltime employee or a partnership may a better way to go. If you're worried about them twiddling their thumbs in downtime then they can always pimp themselves out on Uptime, right ;)
to build hosting service? A market place like Wordpress? It's not hard to see potential ...
If you hire freelancers so often. Why not hire permanent js devs?
&gt; And than I go back to Wordpress.... LMAO. 
That's already implementation-specific since it involves specific routes , specific data-serializations, etc. I'd say it's really rare to find tutorials like that, but what's great is it really is easy to find tutorials like this where it gives you the bare minimum setup you need in order to proceed in creating your own projects, be it a forum or wiki.
Is it still at all relevant to make a blog using PHP? I have a portfolio site I'm building (http://alpizano.com) and I wanted to put a little blog on there but I didn't want to hard code each post on index.php (it would get huge and ugly after like 2-3 posts) but I remember that blogs were primarily made with PHP a few years back.
Honestly, this is why I always cross-reference the latest docs whenever I'm following some tutorials. Whenever I find some discrepancies, it's a sign that the tutorial is a bit outdated already and that I either gotta find better alternative tutorials, or just apply the latest stuff from the docs on some parts of the tutorial I'm reading. Honestly I've already ditched Redux on my current project. React 16.3.x comes with React Contexts already and even for simple projects like a blog it's already enough. Not that I despise Redux but my point being is small features popping up every once in a while from the latest docs sometimes replace third-party stuff we see from tutorials.
I also prefer this. Delegating time-critical stuff to new hires is just pure madness. Doing thorough checks on their portfolios, seeing if they've worked with teams before or not (very crucial) - I'd rather sit my ass and do that than drink a cha with a cold sweat knowingly that I've gambled a time-critical project to a person I don't trust yet.
I would... 1. Verify that the `result` returned is what you expect. 2. `parseInt` both `result` and `initialLikes` because they are now **strings**, and there are cases where this _will_ bite you (i.e. `("10" &gt; "9") === false`).
I was so pissed that I went for smokes (I don't smoke though). When I calmed down I took the test again a few months later having learned from the experience. 
Yes I have tried that. I think the issue is for some reason the element is not being “grabbed”. 
Thanks.
Hey, I use the same stack as you! I haven't needed to recruit anyone yet but I think if I was I would ask if they knew about practices like separation of concerns, why you want to be test-driven, why you want to use redux, what is reactive programming etc. If that doesn't work another strategy could be to switch to Elm instead of React. It's basically react/redux but was made for creating bug free software. You really have to try to write terrible code in that language and if it compiles it produces no runtime errors and you must handle every exception otherwise it will not compile. It might be harder to find devs but the ones you find are probably better as Elm basically works as a sort of quality assurance. Let me know if you figure out a better strategy.
You sound like a moron. Make connections, pay accordingly to the skill you desire, and it will work out. Don’t hire randoms online for half the price a skilled dev would seek.
You need to look into simpler tutorials that don't try to teach everything at once. Learning about each moving part is better than copying someone else configurations.
Can you provide them a skeleton template of the project to start with, whatever you envision the solution would need and then they fill in the various handlers and methods?
Stop requiring tests you fucking dork
Smaller “milestones” might help. Break their work up in to smaller pieces and at least you won’t be caught by surprise. 
Unsteady flow of work
People are voting you down for your naiveté about this process. Software developers are in high demand. You're a developer, would you want to do freelance piecework that requires a lot of interaction to build something, often involves the client having unrealistic expectations, and then get paid only a small amount compared to other dev work? Then go back to the well and start again with some other client? I've done freelance development work for for decades, I try like hell to avoid this kind of piecework. Most of those sites are filled with third world devs who will always bid low thanks to their low overhead and tell you they're experts at everything. 
In the past I’ve had success with Upwork, but in the past 12-18 months I’ve noticed the exact same thing. Far more people on the platform looking to make a quick buck without elementary proficiency in required technologies. There seems to be a correlation between the site’s popularity and poor quality. I’ve also noticed a lot of people spoofing their location, using fake names and pictures to claim that they are based somewhere that they aren’t. Not explicitly to scam employers, as they still attempt to do the work, but I think it’s a blatant attempt to game the system. Personally I don’t care who does the work provided they have the skills, but I’d absolutely prefer that they are honest about their identity. It’s not unusual to have to filter numerous offers from front-end Wordpress developers for roles that explicitly state I’m looking for an experienced Node developer. In the rare event I find someone half decent I tend to hang on to them for dear life.
You setup SDD, and SDI documents that lay out the specifications, and have a tracking mechanism that you implement with your devs. You pay on a schedule for completed work, and you maintain control of the source code. A professional will attract professional developers.
This is some good advice. Finding a good, reliable developer is hard… and when you do find them, they're often quite booked up. I second the advice above. Meet someone local. Develop a relationship. You can often get a better sense of someone in person than through a system like Upwork.
For years the JavaScript **[AI Mind](http://ai.neocities.org/AiMind.html)** would mistakenly say **I AM A ROBOTS** but yesterday we **[fixed it](http://cyborg.blogspot.com/2018/05/jmpj0525.html)** and today in **[comp.lang.javascript](http://groups.google.com/d/msg/comp.lang.javascript/XtRYtc6Q8Do/fp1CEudUDAAJ)** we wrote about it. 
you probably need to split focus. A developer who writes good code and is able to unit test it is a very senior thing. I'd focus on getting a developer that can write good code. Then perhaps get someone more expensive or know u gotta do the unit tests on your own. Unit tests are too philosophical and abstract to just trust to a random freelance dev you aren't considering senior level
Hire people based on their GitHub profile. PRs talk, bullshit walks.
Pm me
This week I added seamless server side rendering support for a custom client side view framework. Now its possible to render any view element on the server without modifying any code! 
I made a simple morse code translator that utilizes the Vibration API. You enter a message, and the message will be transmitted in morse code, through phone vibrations (the demo is mobile only): http://scottyfillups.io/morse-pulse/
*an At least it wasn't empty while loops vs empty for loops. 
Who cares if the code works or not! 
Yeah. Because “untested” code never works ever. You guys are so weird. Always looking for a new ideology.
I don't think its about the amount of money that you pay, more about your selection. Since you are a developer as well, ask to see their code and projects in advance, those who are serious about freelancing projects as a job would always have those, you can see their commits, code, tests and coding habits and make a wise decision about hiring them. But don't be shocked to see that they ask more than you are used to, because they know their worth. 
I was a freelancer for a while and had to hire others. I'll tell you this: No self respecting freelancer is going to be on Upwork. Those who are good at their work will be busy, have their own site, have their own contracts and terms of service, and never work without payment on time irrespective of work. If some asshole demanded to see my code before paying me, I'd be out the door pronto. If you're going to try and find freelancers for a hot tech stack, you're either going to have to pay well and wait, or you'll find people who aren't that good because the demand exceeds supply right now. Look for people on Twitter &amp; GitHub. Go to meetups and conferences. Find good people and form relationships. Then pass the work onto them instead of subcontracting because they are people too who need to earn a living.
It isn't really much different than hiring someone to work in-house. What would you do for that? Interview them. Ask them questions. Make sure they know what they're talking about. Offer them a decent wage. Treat them like a human being and not just a tool to get the job done. I've hired a handful of developers from Upwork. Not javascript developers, but usually for back end work like PHP and .NET (whether I'm too busy or because I don't know .NET and some clients demand it). I haven't once ran into the problems you're describing. Hire these freelancers just like you would any other employee. Pay them like you would any other employee. In fact, pay them a *better* wage than you would an in-house employee, since you don't have costs like healthcare to pay on their behalf. Your goal is to find freelancers that you can work with over and over again, who basically become part of your team. Do that and you'll find quality people to work for you.
Not really. To start with OP will end up with the same issues but spending 3-4 times more funds. This may be spent better by establishing long term cooperations with a couple of viable programmers, as well as setting up more realistical estimates and paying more attention to processes
&gt; why are you taking on work that you don't have the bandwidth to work on? To be fair, that's how you scale a business. If you can't afford to hire an additional employee then you outsource. If you can't afford to outsource, then you don't accept the additional work. If the quality of work has declined you need better outsourcers. IMO it isn't necessary to disclose that you're sub-contracting anything. To them that should be no different than having an in-house employee. You are giving direction to the employee/outsourcer and if they don't meet your expectations then it is on you to rectify. Yes it's ultimately your name that'll get tarnished, same goes for a business with shit in-house employees. But that's part of the risk you take when trying to scale a business. If you want to be solo freelancer guy forever your suggestion is fine, otherwise you need to take on more work than you can personally handle at some point.
Hmm.. compiled and strongly typed languages \(vs interpreted and duck typed\) don't automagically make developers craft quality code. You can still write garbage in any language. Perhaps it'd help catch errors you wouldn't find til runtime but you could just tack typescript onto the project and get a similar benefit. This also doesn't remove the need for solid test coverage against your logic. E.g., Another engineer adds || !true to an existing boolean conditional, static analysis can't save you there so how would you know your code path continues to execute as you expect?
Maybe I can change your mind on tests. They're not really useful to prove that code works (often the tests themselves are incorrect). However, after the code has been written, they ensure that future changes do not effect already finished code. So, if I make a change, and it causes earlier tests to fail, I know there's some unintended side-effect that I need to look into.
Nice! I’m glad that the VS Code team is focusing so much on automated refactoring tools. 
You tray at home wrote your hobby websites , we get real jobs make reps money and produce high quality software that wont bankrupt our business , okay Rakesh? :)
Yep. Most good devs that I know have a good full time gig and don't hunt around for side work.
Yes I use ruby at my day job. I'm curious, did you look at my comment history to guess that? Or was there something in that one post that gave it away?
Hi /u/Daxtirsh, For javascript help, please visit /r/LearnJavascript. Thank you!
I don’t know why you got a downvote. I’m a fairly new dev (been working around 3 years, so maybe finally getting to be mid-level?) and I already have more people wanting work from me than I could possibly imagine, and that’s without ever having been on a site like Upwork. It started out as one project I did to gain experience, and then they keep hiring me for more stuff. I obviously have my full time dev day job, and work on another project with someone I met on here (who has been mentoring me in native development). Add to that my boss at work linking me up with someone trying to push out a new marketplace, and my time is completely gone without me having to think much about it. The demand is crazy, and if you’re a competent programmer and have a modicum of networking skills, chances are you have no problems finding work, and you’re actually turning stuff down. That leaves the people who aren’t good to flood sites like upwork. Honestly, you’re probably better off finding someone on reddit. I posted in the C subreddit a year ago and ended up having long discussions with another poster, he mentioned he was looking for help on a cross-platform library he was extending, i said I was interested in learning, and we’ve become super great friends and have been working together for well over a year now. He’s put in a lot of time mentoring me and teaching me things, but he’s obviously gotten a lot out of it as well. So maybe instead of going through endless amounts of shitty people, find someone you like who, even if their skills right now aren’t great, mentor them and groom them into someone who can do good work for you in the years to come. Obviously if they have little experience and want a lot of pay up front they’re assholes, but there are definitely less experienced people there who have potential and are trying to learn that you’ve probably passed over by now. 
Google “webpack babel loader” and copy someone’s config. I believe in you!
Hi /u/IchHabsDrauf, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_).
This is the most realistic approach... 
I was going to suggest the same exact thing. Toptal’s testing is fairly rigorous enough to sort the wheat from the chaff. The talent pool on Upwork is basically the same as Fivvver.
/u/[ShlawsonSays](https://www.reddit.com/user/ShlawsonSays) gave a really good writing on the freelancer's side. As you surely knows failures are not courtesy of a single side, they made in cooperation. Here is a short list of what could be done \(better\) from your side. \- try to find a couple of good programmers and maintain relationships with them. It not only helps you to know they produce more or less consistent results, but save your time on teaching them the new tech stack; \- it's totally ok to learn new technologies on the go. We all programmers, we do this every day. But add the time required to the estimated deadline, and contact them often to ensure they got a grip. Even simple things like web frameworks have a lot of room for mistakes; \- talking about estimates, programmers sucks with them. Maybe not you, but most of us are really, really terrible. Get an estimate, multiply by 3, and you are good to go. Or not that bad at least; \- add some extra grace period to be able to replace your contractor in case something happens. He could be a bad match. He could find your stack doesn't click with him, or he may be driven over by a bus. Either way you need that extra time to find a replace for him. If everything went smooth — congrats, you are lucky man, pat yourself on the back and keep that extra time to polish things; \- so we added time for learning new tech stack, and grace multiplier for estimate itself, lets add extra milestone for the endgame fixes. There are no beast like clear communication or well written specs in our field, so just add some money and time on top to cover that hundred of minor fixes you'll need. This is a very common show stopper, and while it can bother full\-time workers, taking extra work for free is a complete showstopper for a fixed price freelancer. Either that or create a follow\-up contract; \- talking about specs, try to maintain as small tasks as possible. This will help to find your colleague stuck early. It's ok to stuck with a new tech. It's ok to take extra time learning something. It's ok to be shy about you being stuck. If the task don't move longer than you would expect \- talk through it, it's your duty in the first place; \- use agile methodologies. You don't need to stick to the word of scrum or canban, but breaking the whole task into small releasable chunks **is a way** to find problems early. Day\-to\-day status sync help immensely \(even if it's hard for people to confirm they have a problem with some task; \- stick to workflow \- once again, you have a flow of tasks and milestones. Taking two tasks simultaneously may be practical in case of frontend\+backend tasks, similar items or lack of requirements, but more than that doesn't sound good. Nor picking random milestones from the middle of the queue is. You may talk about it but such things shouldn't become a practice, period; \- use git and ask to commit frequently. At least once a day when the person worked seems reasonable. Code doesn't work, breaks something, looks terrible? No difference, it's git, branches are so easy to create and delete now. You will see the progress, and in case your contractor disappears you'll have almost latest state of code; \- check the work done. You don't need to be a control freak. It is no fun not for you, neither for a freelancer, but it's your duty to deliver the product to your customer, and it's your duty to check the other person's code every now and then. Two times a week is probably good enough, give or take depending on your milestones and hours per day he spend. Find your pace and stick with it. You don't have to be pushy if it don't suits you, but don't hesitate to ask about things you have to ask either. Does something looks incorrect? Does something took much longer than expected? Ask it! There are probably much more about it, managing projects may sound simple but it never is. A good book will help, but also you have to be ready to learn on your own mistakes, and looking into all reasons of failure, not only those that could came from another person.
&gt; So how can I hire freelancers successfully for small-ish fixed price projects? stop hiring strangers over the internet for bargain basement prices from places that don't have a culture of honesty about work ability i mean really, you're not getting screwed. you're screwing yourself. i'm not even joking when i say this next part. you should really actually try this. if you ask someone "is there a way i can hire a programmer to look like a job is being done, but spend almost nothing? it doesn't matter if the job actually gets done." they're going to send you to do what you're doing now
don't learn from that experience there are good reasons to leave else clauses empty really, ***don't try to learn to program from automated tests run by internet cheap-hire sites***
he doesn't think they're assholes he thinks they're lying about their work offers in measurable ways once you try hiring on upwork, you'll realize this is actually a wildly widespread problem there's a sport about this among programmers, actually. the game is to phrase something impossible in a way that a junior programmer would recognize it, but a faker wouldn't, then post it on upwork and watch the claims that they've already finished and are waiting on payment roll in travelling salesman over a thousand nodes is a very common trick, so, if you're going to do this, please take the time to be more creative. they're starting to catch on to that one
This. I don't understand why he's not reviewing their GitHub contributions. Unless the rate is so low that GH is irrelevant to ask about, then we have our answer to the problem.
I've had mixed experience hiring on Toptal. Some of the best and some of the worst hires I've made. Also, they're priced high for some employers who are looking for cheap, low-end work. The problem OP really seems to have is wanting really well-written low-end work. I've had working relationships with people who did that, but they are very few and far-between.
to be fair it was an if checking if something succeeded (which would 99% of the time) however I didn't handle the error case. 
Technically? Well, it's insanely shitty to work with. For a consumer? Not much really. Disclaimer: I work with WordPress daily and I can barely stand it. It's a fucking wormhole with differing naming conventions and best practices. It's old piece of software and it shows. And don't even get me started on WordPress databases. Jesus christ, it's like filling a baguette with the runniest shit ever being expulsed from someones asshole and then beating yourself in the face with it.
Yeah ternary operators are very common, I am very surprised that a highly upvoted answer would say anything about them not being used in production. ``` let func if (someCase) { func = successHandler } else { func = errorHandler } nextFunction(func) // vs ternary const func = someCase ? successHandler : errorHandler nextFunction(func) ``` This is not only shorter, but it removes the need for variable reassignment. Of course you could also put the ternary statement inside the function parens and skip the variable assignment altogether.
Interviewing is genuinely hard. The fact people who good at passing interviews are almost never those who good at making things \(and not in need to hoop through interviews every now and then\) doesn't help. My favorite questions includes small piece code with some flaws \(more logical than some language features related\) and discussion about how candidate will change this piece of code. This and a good old talk \- though it may be not an option given you speak different tongue. Github repos? Probably if you are hiring a superstar, but your average viable candidate will have an empty one, with one or two clones, PR, or a pet project from his youth. Also while /u/dmethvin have a point, there are still good specialists on UpWork and Co, particularly because price of living is different over the world. But for short\-term projects you probably be better hiring a good motivated student and supervise his work. Short time fixed price projects took quite a lot of time on communications and other expenses to catch an eye of seasoned professional.
Can you share one or two of those reasons?
I had a play with Babel's tutorial stuff yesterday but got pretty stuck due to the way my plugin is written. It relies on relative assets once compiled and webpack forces it to the dist directory instead of just compiled to a .min file in the same directory.
&gt; no one ever uses them in production code lolwut 
Most ruby guys are super susceptible to dogma and ideology. It’s bred into them. No I didn’t look at your comment history. It’s just the way it is
Ask to see their Github/LinkedIn for starters. Usually that's a good indicator that the person may be worth interviewing. 
That's rough. I'd rather study for another 6 months than expect someone to suffer my lack of skill. *Sneaks on to Upwork*
As a professional, I would not waste my time doing 50-200 hour projects. The amount of time to find and secure even one of those clients, and then all the additional accounting, is nowhere near what I earn working full-time at an established company, where I have certainty and ease. Your best bet is to create long-term relationship with developers you know and trust, where you are providing them with non-stop work. When one project finishes, another begins. Only if the working conditions are good, meaning low overhead and adequate quoting/estimate for timelines, will you be able to find competent people who are willing to work with you.
I think you should take into account one effect which name I can't remember but it exists. When someone knows a lot of a subject, he'll underestimate his ability, though people which skill is poor or really low will not recognize mistakes and will overestimate their skill. So a little test (3-5 little challenges, might be 2 about creativity and 3 about use of the language) could be handy to filter people, despite their job would be short but you need to know they can do it.
Thanks for this. I struggle a lot w the fact I outsource certain things and don’t mention it to clients. I am trying to scale my business and I am much better at sales and client relationships than development. I see no way to grow without outsourcing. It takes me a week to figure out what even a mildly skilled developer can do in 2-3 days. At the end of day I agree w your point that it shouldn’t matter to the client whether it’s an in house person, outsource person etc. They deal w me direct on their expectations regardless. 
Most people don't actually take the time to learn JavaScript correctly. They only ever scratch the surface. It's important to actually sit down and read some books and learn JavaScript. Do the people you hire have good reviews. People who have proven experience already having worked on a website. 
I think instead of bitching about a lack of skilled devs in our industry, we need to talk more about helping people find the skills they need. And often, those skills are not technical. But also echoing others, if you pay low, you get people who are learning stuff still. Fuck them for trying, right?
Require/import those files directly and webpack will give you the appropriate paths. Or use paths relative to your exposed static assets directory and don’t require/import the files.
Impostor syndrome and Dunning-Kruger effect.
I'm not saying it crafts quality code, like you say you can create bad code in any language. However it's a lot harder in Elm, you basically have to try to do something funky as it's very strict in it's structure. Also it's easier to test with something like Quickcheck.
I'm not saying it crafts quality code, like you say you can create bad code in any language. However it's a lot harder in Elm, you basically have to try to do something funky as it's very strict in it's structure. Also it's easier to test with something like Quickcheck.
I'm not saying it crafts quality code, like you say you can create bad code in any language. However it's a lot harder in Elm, you basically have to try to do something funky as it's very strict in it's structure. Also it's easier to test with something like Quickcheck.
i like it ;)
I like strongly statically typed languages, but sadly I don't think this is a solution for OP. Devs in these languages usually expect more money (pool of candidates is also very tiny) and if OP has price so low as it seems then I would expect to either not found anyone or only beginners (lying about their experience with the language) who would spend forever implementing even first milestone. I guess best strategy is to find someone who has potential (so spend a lot of time at first micromanaging him) and then try to forge a long lasting business relationship with him.
Other alternative is changing your imports to absolute paths, which avoids a lot of './' to '../' type refactors within feature folders.
I am unsure if this has been addressed, however, have thought of reaching out to local technical schools and reputable boot camps and build a relationship with their instructors/professors? That possibly may assist in building a solid pipeline to highly motivated and talented individuals. 
True but if you're hiring worldwide the pool isn't that small. However as you say you probably want to find a business partner instead.
Express, node and mongo are already enough to make an api. 
Use a static site generator and call it a day
I've waited for this for so long. Been jealous of JetBrains users having this feature.
I think i want to ask something else. I am notable to explain it. Lets say i have complex app with users, tasks, sub tasks, due date etc. How do i know if i putall in one big object or i should put them in seperate objects or seperate apiend points. I want to know more about this
Just an FYI, those are not ES6 methods (I often work with an ES5 only platform, so I'm a stickler for understanding javascript versions). ES5 * Array.prototype.map * Array.prototype.reduce * Array.prototype.filter * Array.prototype.every * Array.prototype.indexOf * Array.prototype.lastIndexOf * Array.prototype.map * Array.prototype.reduce * Array.prototype.reduceRight * Array.prototype.some ES6 * Array.from * Array.prototype.copyWithin * Array.prototype.entries * Array.prototype.fill * Array.prototype.find * Array.prototype.findIndex * Array.prototype.includes * Array.prototype.keys * Array.prototype.values 
Once installed Idea just to use this feature one time.
Dey terk er jerbs!
Well MongoDB tends to promote the use of big json blobs. If you choose a schema via mongoose, you might as well just go SQL. &amp;nbsp; I would split your api up to perform on a per-task basis. How you architecture that is up to you! 
Can I require/import image/css/html files for later reference in the script?
Yes, but given where you’re stuck, I’d argue that’d over complicate things. Just make those files available and reference them as if you’re on the client. 
I just don't know how the promise knows something has been successful.
Noone can accurately estimate time. I've been in this industry for 20 years, and time estimates are _always_ wrong. A freelancer completes 95% of the work within the time frame and you consider that a failure and choose to not pay him anything? You're not the one that gets screwed, you're screwing others. 
Yeah I hear people complaining about that all the time. From an outside perspective it seems like a bunch of kids who are changing their mind every week about whats the coolest toy in town.
I just started using typescript and the intellisense support is out of this world. I coded for 3 hours and finally got a feature to work ran npm start and everything worked perfectly. I would have had several bugs in js for sure. With this feature I will be a MACHINE 
This. I'm also a Toptal developer, to be hired you have to at least know all the basics of web development pretty well.
Recently found out about [oclif](https://github.com/oclif/oclif), the CLI framework Heroku uses for its own CLI. Decided to make my own CLI app: `should-i-cli` 🤔 [should-i-cli](https://cedric.tech/should-i-cli/): ask a a question to get back a "yes" or "no" answer. Decision making made easy!
My gut is telling me you should be writing all of the tests for work you're outsourcing to low tier devs. that way all they have to do is hit run and they can see if what they've implemented meets your usecase requirements. writing tests is complex. I have a hard time imagining anyone less than a sr level being capable of writing a solid API + good test coverage for any non-trivial feature in a single week. I feel that you are expecting way too much from the people you hire and are being unrealistic about what you can buy with the resources available to you (time, monry, and robust processes for filtering out medium to low skill level devs) as others have said, you'll have more luck if you start building relationships with other devs or mentoring jr devs and hiring the ones which are good enough to have work for you.
Having trouble understanding exactly what you're asking, but one thought is you're trying to use the resolve function outside the callback. If so, just assign them to a variable in the outer scope: let resolve, reject; const promise = new Promise(function(res, rej) { resolve = res; reject = rej; }); 
There are so much of bullshit in our field. Take technical specs, or decomposition, or those pesky meta-languages. SCSS, TypeScript, web frameworks. React bloats our pages with unnecessary traffic and computation overhead. I like the idea of programs works correctly if compiler didn't fail in process, but the real world become so complex even this simple fact is no longer true. When I was young and created web apps in the team of three we didn't need any tests, nobody even talks about them. I mean, who needs those when projects estimated at 2-3 month, projects are young and even if 50% of traffic went off to different vendors - it's not our care in the low-end marketplace with cheap customers and cheap expectations. But in the end you are either have to live with cheap projects, unrealistic expectations and crazy management, or you move on and this is where real world strikes back — with businesses, which hate to lose clients, lose money, lose crazy money due to SLA violation, or incorrect behavior, or any other reason to be honest. Sure it may be not your business to care about customer's revenue.. And for the manual tests, at some point they become too heavy to perform from one side, and too scripted and formalized to have an excuse against automation.
Ok, that's an interesting take, however what do I do for other pages than home. Say /settings I call settings();
Is this their order on the page? The script before the html? Because then when the script runs, the button is not yet created. Put it after it or in a ready event.
The term you are looking for is, "Progressive Web Apps." Here are some examples: &lt;a href="https://pwa.rocks/"&gt;https://pwa.rocks/&lt;/a&gt; They use service workers and other newly supported technology like web assembly. They call them progressive, because they'll work on all the new browsers (like Safari on iOS and Chrome on Android), but can "install" on some systems too, like Chrome OS and Android. Additionally, a recent Microsoft Edge release includes Microsoft Store support for these types of applications as well. Bing is supposed to start crawling for these new "Web Apps" (as they used to be called), and apparently Google may start indexing them as well. Word on the street is some form of "web package" standard to come: &lt;a href="https://github.com/WICG/webpackage"&gt;Web Package&lt;/a&gt;
Yep. I would really recommend reading about promises and asynchronous js in general. **Never use a delay!** That’s how you get race conditions. 
Preparing for whiteboarding interviews ;\)
Bootstrap isn't a JavaScript framework, at least not in the way people actually use that term. React\-Bootstrap is Bootstrap implemented as React components, so it isn't a framework. If you're being asked to use a JavaScript framework, yes, they almost certainly mean React, Vue, Angular, or a similar framework. 
Also not quite sure what you're asking here, you may want to provide more details on expected behavior. If you use the Promise constructor, you can resolve/reject with whatever you want. ```js new Promise((resolve, reject) =&gt; { setTimeout(() =&gt; { resolve('success') }, 5000) }) .then(result =&gt; { console.log(result) // "success" // but let's return something else return 1 }) .then(result =&gt; { console.log(result) // 1 }) ``` Here, we create a timeout that is called in 5 seconds. When run, we call `resolve` with `"success"`. This triggers the first `then`, which receives the string `"success"` as its first argument. You can then return a value to be used by subsequent `then`s
You should set NODE_PATH to your import root, like “./src”
No, but when I read your comment I realized that the script wasn't actually ANYWHERE in the HTML XD sorry if I might have wasted your time, I'm just used to my template with the script tag already in there. I'll make sure to add it at the end of the script.
Thanks, that clarifies everything for me at this point. Not sure why I was given a project where I have no knowledge of how to implement this kind of a project in such a short amount of time. 
Definitely man. I was using delay for debug, even that didn't work as required
DE TEK EH DER!
You definitely need a database. This filestoring thing looks like a mess, I won't lie, I stopped reading like after the first paragraph, because it sounded horrible. If you need an easy to setup solution, you might need to lookup postgresql in docker and knex or objection, or firebase maybe.
just call it? not really sure how your JS is structured
So you would have a variable, say x = 0. The on mouse event would change x to 1 and also start a timer. The timer would change x back 0 after a set amount of time. The mouse up would check to see if x is 1 and trigger the function. Also it would kill the timer and set x back to 0.
isn't there any simpler way ? and i think it's not what i wanted to do... i want to move an element when mouse button is pressed and cursor is moving
Here this might make it clearer: https://pastebin.com/8Qm9acrG
What were you hired as?
for both events, try calling the same function
but the call will happen if any of the event occur like an or gate
https://neochain.site/nTrf766f 
I updated my answer, check it out!
do you have any code to share?
Bootstrap is a CSS framework. I believe certain components have a bit of JavaScript to make them work but it’s certainly not a JavaScript framework. What people mean when they say that is a code library which provides helpful ways to write JavaScript more efficiently. The leading JS frameworks in 2018 are the ones you mentioned, React, Vue and Angular. React is definitely the most popular of the three. If you have to learn a JavaScript framework, I’d suggest following a React tutorial. L
You can do it easily with this (it was some sort revelation when I found this, I no longer want to kill myself when importing modules) https://moduscreate.com/blog/es6-es2015-import-no-relative-path-webpack/
wow there it is ondrag event... thanks for your help bud :)
Actually is dolan
If you actually created the Promise library, how would you do it to accept the function callback and then use the resolve parameter with the .next method it provides. Pretend you're actually writing the Promise library and not using it. I want to see how it would be written to use the function that is passed--the function that includes the two parameters resolve and reject.
As long as PUG supports it, this code will work all the way down to version 4.4.5 (https://node.green/ and https://stackoverflow.com/a/38241325/1099053) due to Arrow functions - it is even possible it might work down to the 0.10 versions (as long as the libraries support it) if you choose to use non-arrow functions.
&gt; I get where you are coming from but this was a task that was reviewed by a fellow developer at Toptal and they were right in this instance. they really weren't one common style is to intentionally leave empty else blocks in languages like javascript that guarantee their removal, to display that the else was not omitted that isn't my personal preference, but occasionally i do it in situations where people expect a handler but no handler is the correct choice, and i want to make sure it doesn't get "fixed" to dock someone for something like that is not good that would be like saying "you're a bad programmer because you like tabs and i like spaces"
Don't pick up C++ or C# as your "next" language untill you are employable with your JavaScript skills (this will take months to years depending on your dedication). Don't waste time learning a bit of everything and focus in one thing.
Hey, cool project! I guess I'll give you some pointers. I think you've got the aesthetics subtly wrong, and that's what I see as the interesting part of this project. -Your colours are a bit off, the top row of keys is a more subtle grey, the output area is transparent. -The button click colour changes are off, the symbols should not be inverted. -The aspect ratio of the buttons are off, they should not be square. -The font is off, it should be a sans serif font. -The numbers on the keypad are out of order, they should be like a calculator, not a dial pad. 
I wasn't hired, I was just given a test for a front\-end developer job. I'm guessing they want to see what I can come up with despite me not knowing how to use JS frameworks or this was to test me for the worse... I'm working on the project now, and I'm trying out vue.js since it's considered a good learning source for those who are familiar with javascript but not on an advanced level. 
Here's a [comparison](https://i.imgur.com/8b2A7ON.png).
Thanks! Yeah I know I won't pick up C++ or C# for a while, It would be cool to work in a game engine but I guess I am just worried if javascript could limit my gaming potential but tbh I can't say much since I just started. Although, I am super addicted to coding and so eager to learn more, I just want to know it all right now. Definitely sticking to javascript and yeah I wish to do game and web 
Do you have trouble understanding callbacks _independently of promises_ or just in this particular case of promises?
That’s all you can do in a situation like this. Vue might be a bit quicker to get up and running. I actually like Vue a lot. It’s definitely not a compromise. The [Vue CLI](https://github.com/vuejs/vue-cli) might help you quickly get a new project up and running.
Eventually take The Udemy course Git A web developer: Mastering the Modern workflow, it will take you through most of the tooling used in modern development, things like Webpack, Gulp, Git, deployment, responsive development, Post CSS and more. (the syntax of Post CSS is VERY similar to SASS the only difference I can think of is that one uses @import the other uses @include). For Advanced CSS take the Udemy course Advanced CSS &amp; SASS, by Jonas Schmedtmann (the same dude as your javascript course). The Udemy course Modern Javascript from the beginning by Brad Travery was pretty good and has enough different material from Jonas' course to also consider this one. A good free Javascript course is Practical Javascript on watchandcode.com (definitely start here) For game dev check out https://phaser.io/ and some related videos on https://www.youtube.com/watch?v=6rQROhVeIQE&amp;list=PL_ZUs2eBjBiuDbr019HCSpNn8PRiok-aO
React and Angular are the flavours of the day. If you are not UI inclined, micro-services using Node.js and Closure would go far. Going deep into the AWS ecosystem is also useful these days.
I once installed Idea just to uninstall it after it devoured my RAM ¯\_(ツ)_/¯
You dropped this \ *** ^^&amp;#32;To&amp;#32;prevent&amp;#32;anymore&amp;#32;lost&amp;#32;limbs&amp;#32;throughout&amp;#32;Reddit,&amp;#32;correctly&amp;#32;escape&amp;#32;the&amp;#32;arms&amp;#32;and&amp;#32;shoulders&amp;#32;by&amp;#32;typing&amp;#32;the&amp;#32;shrug&amp;#32;as&amp;#32;`¯\\\_(ツ)_/¯`&amp;#32;or&amp;#32;`¯\\\_(ツ)\_/¯` [^^Click&amp;#32;here&amp;#32;to&amp;#32;see&amp;#32;why&amp;#32;this&amp;#32;is&amp;#32;necessary](https://np.reddit.com/r/OutOfTheLoop/comments/3fbrg3/is_there_a_reason_why_the_arm_is_always_missing/ctn5gbf/)
I love this bot &lt;3
If you really want to do games that will take you years if ever. That industry is saturated and doesn't really pay well and the working conditions are horrible. If you want to do it as a hobby my I suggest you to get a decent understanding of JS and give phaser.io a try? Or maybe pixi. Everyone can do some stuff in unity but to be employable it will take you years. I don't want to demotivate you, I learnt programming because of interest in gaming but I ended up a JS Developer and I feel I wasted so much time trying to learn game development instead of learning something more useful for my career. The gaming industry is just really horrible in every sense. It has the worst working environment you can find in IT.
The repo is here: https://github.com/drcmda/react-spring
A front end developer nowadays should be pretty proficient in either Angular or React, probably more so in React. Good luck for this job but you might want to take some more courses as it is not to be taken lightly. Vue is not going to get one a lot of work I don’t think but maybe in your area it is more popular, to me Vue is just a quick thing to learn for those that already have React or Angular down. We spent one day on Vue during my whole Angular course. I have taken full credit courses in each of Angular, node, and React and did very well but admit I still have a lot to learn. It takes a while to really wrap your head around these concepts 
Well, they don't "suddenly become" anything. It's just that that is the contract. I write a function `callMe` that takes an argument... function callMe(x) { // ... } Nothing in that function says what `x` is, but I _tell you_ (in my docs): Pass a function as an argument and `callMe` will call it back. So, just to be more clear instead of `x` I call it `callback` or `f` or something that hints that is should be a function: function callMe(callback) { // ... callback(); } Now, I go one step further in _my_ function and in the docs I tell you: Pass a function as an argument and `callMe` will call that function back _and pass a cool message string as an argument_. And I write my function: function callMe(callback) { // ... let message = generateCoolMessage(); callback(message); } So actually, you don't really care about the code inside my function but the docs say that if you do... callMe(function(xxx) { console.log(xxx); // &lt;- It's a string! You can print it or whatever }); ...you can know for sure that in `xxx` you'll be receiving a string value with some cool message. Because the docs say so. Now, say that instead of me passing you a string, I say in my docs that I will be passing a function. I now write my code, as... function callMe(callback) { // ... let someFunction = function() { /* whatever */ }; callback(someFunction); } Again, you don't really care what happens inside my function. What you care about is that in my docs I agreed to call your function passing it another function as argument. So instead of printing it you'd probably want to call it... callMe(function(xxx) { xxx(); // &lt;- xxx is a function, because the docs say so! }); As you can see, the code inside `callMe` doesn't need to be anything complex in any particular way. I create a function and call your passing that as argument. There's no deep mystery or anything about it. And it's not that `resolve` and `reject` "become" anything, it's just that the contract we've agreed on, the documentation, says that they will be functions. I don't know if this helps, but really there's no magic, no mystery, in all this. You called `callMe`, a function, right? And when you called it, you passed another function you created as argument, right? So, it's exactly the same: I got that function and I called it, and when I did, I passed another function I created as argument.
Of course it can mean it has to do with the cookies. I checked the documentation for authentication and they don't specify anything about ways I could be blocked. It's the Shopify API I'm using, so if you know anything about that you could maybe help me out.
Yeah, I think I can only create something basic but at least least I tried. I am using the recommended version for Vue which is Vue CLI as you mentioned. 
why no CRA? I use it for all my full stack stuff! 
What are you trying to replace? Global state management or the redux middlewares that you use?
Yeah, the problem with that is I don't have any training with either of those frameworks, and teaching myself is not enough because it's difficult to keep up with the languages changing so quickly. Even my previous job wasn't using those frameworks, as most use Content Management Systems. I'm slowly moving away from that since I've seen the cons that comes with it, it's good for learning quickly but to have a stable job is not that high. Sounds like you had learned from school which is what I'm planning to try out if I don't get this particular job. I'm trying to get in the field but it seems pretty complicated with the hiring process. What school did you go to, to learn the more modern programming languages? 
Embarrassing
Well that's their own bad idea. There are many benefits to using CRA just like there are benefits to using `forEach` over `for`. Over the years CRA has hundreds if not thousands of people constantly improving the webpack config / build pipelines / babel features and on and on. If you write your own build config now you have to either keep copying what the good folks at CRA are doing, or just maintain your own slowly aging build pipeline. There are practically no reasons for making a customized build pipeline *just because*. A company that is wise and wants to save time and money should be ecstatic to use CRA for the same reason they wouldn't want to write React from scratch too.
Wow, thanks for taking the time to write this detailed comment. It seems to be exactly what I was looking for. I'll need some time to digest an research all the libs and concepts you mentioned here but it helps immensely knowing WHAT to look for. Heck, I knew that sooner or later I'll need to upgrade my DB skills from saving data to a text file, seems this is the moment. :) Thanks again! 
I saw the Git A Web developer intro and will definitely take this course! Thanks a lot for the recommendation. Advanced CSS &amp; SASS is definitely a must, these courses will help my portfolio a lot and for me to get a job. Thanks for the recommendations I will check all of these out and use these to add for my learning curriculum 
Hey, thanks for taking the time to answer. Actually that's exactly what I'm using for some of my "improvised" db - JSON.stringify and JSON.parse along with a simple primitive DB management module I wrote. It gets messy after a while when I have multiple custom db's, folders, csv's, etc. As for my example with ages it wasn't meant to be representative of my exact issues - it was only there to underline the fact that I had similarly named properties (or even with the same name) across multiple files in the same data set. You're right though - I have no idea how my objects - at least my data objects should work together. Firstly because this wasn't a planned project, it just started as something much smaller and it kind grew chaotically. Second - it's the first time I have to deal with large amounts of data. Sure, I've saved a highscore or some serialized objects to files but never used a proper DB or dealt with so much data which was changing so fast in terms of structure. &gt;All the best coding! :) Oh yeah, coding is the shit. Specially when it becomes more and more complex and you feel like you can really start create some cool things with it. So happy coding to yourself too! :) 
It's entirely unrelated. 
Exactly. I’d do ops tasks well given the tech stack he mandates, but for those 50 - 100 hour tasks I’d want $3k - $6k minimum.
What I meant was out of the box but it really is much simpler than I thought (I was scratching my head thinking about api calls as I read but then saw that "proxy" field in package.json). Cool
woah that's epic!
Browsers have FPS and running JS can interfere.
A call to then would store the callback in a variable belonging to the promise instance. Calling resolve would call that callback with the value passed to resolve.
The function with the two parameters is passed before you call then. It's passed when you do new Promise.
&gt;Not all JavaScript technologies I know. Not yet! Soon! 
But can I do that from inside the object itself?
Wait, what. That works?? Brb. Testing. 
StoneCypher's answer is good. But by even considering this example from https://github.com/airbnb/javascript: ``` // bad inbox.filter((msg) =&gt; { const { subject, author } = msg; if (subject === 'Mockingbird') { return author === 'Harper Lee'; } else { return false; } }); // good inbox.filter((msg) =&gt; { const { subject, author } = msg; if (subject === 'Mockingbird') { return author === 'Harper Lee'; } return false; }); ``` You do know you've done the right thing, and your interviewer was just a motherfucking cog in machine at that time. 
Best way would be to set that object in relation to its position within the parent array as null, undefined or empty object . Then anywhere a reference might exist, check if it's truthy before performing actions in the property. Your function would look something like this: Kill(){ Container.properties[Container.properties.indexOf(this)] = null; }
Use $("#button").click(function(){});
Because if you use \`key\` property you will get \`a\` for \`A\` button and \`A\` if shift was pressed. Same for numbers. \`4\` or \`$\`. For several cases that is not what you needed. \`keyCode\` returns just number of key and you can track key combinations with it.
Jeah that is what I wanted to do initially, but that would require that the object keeps track of all of the references to itself, to then run this on. That's what I wanted to avoid since it would add a lot of redundancy and is a bit error prone. What if for example one reference is not added to that reference list? I would not want to debug that. ^^
Webstorm had that for a long time already.
Those provided by large companies like Google, Facebook, Airbnb, Paypal, etc. If it's on their github, you already know: 1. This code works and is well maintained 2. This code follows some sort of standard 3. This code is sensitive in compatibility 4. Most importantly this code has a very applicable use case Learning React, React Native, Immutable, Jest &amp; Flow from Facebook alone already teaches you a lot. What more from other companies, right?
what the fuck are u a women who codes EXPBOSEDED HAHFHSHSHAHSHDAHAHHDHSHA
Create an object around the containers and give the containers the responsibility to maintain its internal objects and share the container around. Objects shouldn't maintain themselves within an enuerable unless we force them to.
What a good news! I hope this solution can be applied to every import process for most of programs, someday.
I'm my example, the counter.objects would hold all objects that are subscribed to the counter. I want to be able to tell my mainObject to kill itself (ie. That it's no longer leeded) and then it should unsubscribe from counter and any other reference. 
Im sorry but I don't quite understand how a container should work in this context. Could you give an example?
letsmakemodel3.com check what it takes to create Model 3s at Tesla’s Gigafactory 1 #tesla #gigafactory #model3 
If you know the difference between synchronous and asynchronous methods then this will be easy to understand. Otherwise, hopefully it'll still make sense. Essentially: promise says "please wait while I compute". Super useful if you need to wait for data to become available before continuing on with some work. An example of this is if you need to assign a list of websites to a dropdown select element when your page loads then you need that data available first, but it may live on your server. So you have a method that says "I PROMISE to give you data, don't continue with your code execution until I have it ready" so then your code doesn't assign an empty list, it waits.
Maybe an observer pattern? class Object { construct() { this._killListeners = []; } onKill(listener) { this._killListeners.push(listener); } kill() { this._killListeners.forEach(listener =&gt; listener()); } } // ...elsewhere in your program... const refToMainObject = getFromSomewhere(); refToMainObject.onKill(() =&gt; { refToMainObject = null; }); 
In this example, what represents resolve?
Looks great. I wouldn’t try to match the MacOS version exactly. You might invoke the ire of Apple and be on the receiving end of a cease and desist. 
So what I really want to do here is run someFunction? In order to do that, I have to pass a function to callMe that callMe is going to pass someFunction to and then my function is able to finally run someFunction? Is that correct? If so, is there any language that hasn't gone this route to get things done? This is just super hard to follow for me personally. It seems like all you really wanted to do was run someFunction but you have to go through this whole dance just to get to it. Am I totally wrong?
You can just pass `home` directly. `init().then(home);`
Absolutely anything will FOMO mass adoption 
Hello Everyone, this is my first attempt at a jQuery plugin and I would love any feedback: https://github.com/superveetz/sweet-btn This plugin allows you to create multi-layered buttons and control the animation events for each layer through the use of basic HTML element attributes. Let me know what you think. :)
Do you still have to close it in order to use npm?
If you want to go for something not so frontend, you could check out NestJs. I haven't used it but I read about it and heard wonders from some friends. On the frontend, I think React and Redux can teach you a lot. 
Close what? I use npm in and out of VSC all the time and it works fine.
Not a problem when you use webpack aliases
I'm not sure what this has to do with javascript....
You are welcome! Yeah, it will definitely take some time to get this straight but this is an essential thing, because almost every app needs some sort of data storing. IMO the most important thing is to understand the general workflow and to allocate time on designing the data model, the db structure. If you get it right, it will take much less effort to implement changes later on. Keep working on it, check out example codes, search for it on youtube (traversy media is a very good channel) and don't give up, after the first one it will be much, much easier next time to set up the whole thing! :) Have fun!
 // bad inbox.filter((msg) =&gt; { const { subject, author } = msg; if(subject === 'Mockingbird') { return author === 'Harper Lee'; } else { return false; } }); // good inbox.filter((msg) =&gt; { const { subject, author } = msg; if(subject === 'Mockingbird') { return author === 'Harper Lee'; } return false; }); 
I understand. My point was just to improve on the code given by /u/jam_pod_ There's no need to wrap the function in another anonymous function. 
surely. Lets see how it goes
I like this idea a lot. I guess I didn't consider that testing is more of an advanced skill and obviously no one on upwork would know how to do it. So are you thinking about setting up an entire boilier plate of tests with all mocked apis and settings ready, and then putting a bunch of "it should do x"? Basically setting it so that even someone who has no experience testing whatsoever can just jump in and code.
that could be a good test actually. Do you have examples of some react-redux related requirement I could ask that is impossible?
You should check out Mathjs, which will help you with things like big numbers. 
Thing is after I get the code, I'm the one who has to make upgrades to it. If I don't have tests, adding new features and refactoring will take me 10x more time. If I don't have tests, I might as well code it myself from scratch, because by the time I added a few new features, it will have taken me more time to just start from scratch. Code without tests is code that can never be changed (because it takes a ridiculous amount of time to do so)