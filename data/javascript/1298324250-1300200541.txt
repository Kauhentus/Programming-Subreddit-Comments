It certainly is not required to be a 'master', and it just seems like reading the language spec is the worst way to learn anything about the language. If you have a question about some subtle quirk of the language, maybe you could open up the spec and scan to the right section to answer that question. But beyond that, you are better of using almost anything else. Becoming a master at a language has nothing to do with reading it's spec. It has to do with breadth and depth of experience. **You need practice like anything else.**
TIL this post has a title nearly the same as the post above it in r/javascript.
I learned JavaScript before it became so popular (it was a time when firebug didn't exist and everyone had "*Full command of JavaScript*" in their CVs and they only knew how to do IE-only form validation) Therefore, I'm suggesting to steer clear of the JS libraries until you are comfortable with the language and familiar with the browser idiosyncrasies. It's very easy to become dependent on jQuery or PrototypeJS (which is what I use). There are important things you will definitely miss if you do everything with crutches. For example, learn the insides of inheritance before using a library inheritance scheme.
I also have made this a goal of mine and it isn't an easy thing to do because too many people consider themselves masters but don't have the skills. Would I be correct to assume you already have a solid foundation in the language and are looking for some of the more advanced intricacies? If so, you have probably already read Crockford's books, tons of other peoples code, and possibly even glanced over the ECMAScript spec(all of these mentioned in other responses) as I had done before beginning my search. If so you'll have to just scour the net looking for the few diamond in the rough sites on advanced JS. The best site I have found on advanced JS techniques is http://javascriptweblog.wordpress.com/ which broaches a lot of interesting subject. Look at some of the examples they use, and then toy with them until you come out with some really cool code. Topics I found on that site that were really cool include Mutual Recursion and advanced For-in loops.
The ECMA spec isn't one of those. It's a relatively easy read.
&gt; I downvoted it because it was bad advice. It's unfortunate that so few people can tell the difference between advice they disagree with and bad advice. &gt; And I didn't say it was === to reading a dictionary You said "it's like." I said "it's not like." Now you're trying to back away from what you said. &gt; not as a useful guide to knowing the language. Yeah, well, I don't agree. Lucky for you, I know the difference between disagreement and bad advice. Please stop acting on that anything you don't agree with is to be punished. That's very clearly against rediquette. It's also not appropriate to downvote me because I gave advice A, when in fact I gave advice A+B. 
The problem with reading the ECMA spec is it's not designed for Javascript developers - it's designed for implementors such as browser vendors. It's a bit of a red herring to send people off to this so early on with Javascript, and I have to agree with vectorjohn here. Now if you've done Javascript for a few years and want to learn the deep deep lexical parts of Javascript, go read the spec
I'm using Opera 11.01, and I see no effects caused by clicking the buttons. Are they really, REALLY subtle, or have I broken something?
Hmm, they're definitely not subtle at all. I'll get Opera fired up to see what could be causing that. It's not normally a browser I use so I've forgotten to run tests in it for awhile. Do you have any of the other browsers installed so you can see the effects?
&gt; The problem with reading the ECMA spec is it's not designed for Javascript developers So? My opinion remains that if you haven't read the spec, you don't know the language. &gt; It's a bit of a red herring No, it isn't. Don't drop the names of fallacies. This is a matter of opinion, and my opinion isn't wrong just because you disagree with it. &gt; Now if you've done Javascript for a few years and want to learn the deep deep lexical parts Missed the title of the post, did you?
Sadly, the proggit punishment squad is out in force. Just remember: on proggit, negative votes mean that the advice isn't what the average or sub-average programmer thinks, *not* bad advice. For example, telling people the way to master a language is to read the spec is now getting vored through the floor by people who want to talk about libraries and how to get started, instead. Downvoting advice you disagree with is a *bad* *thing*. Disagree doesn't mean bad advice. Disagree means disagree. Grow up, kids.
I downvoted your spec suggestion because I don't feel it's good advice for someone who would be on Reddit asking how to master Javascript.
&gt; Grow up, kids. Proof positive you do not follow your own advice.
It's far more unfortunate that you think that every word which passes your lips qualifies as "good advice". You gave some terrible advice. You were called on it by the rest of us here. The recommended course of action is not to argue that everyone else is wrong, but to try and understand why *you* were. Something, perhaps, beyond your level of expertise.
There's a really nice annotated HTML mirror of ES5's specs: http://es5.github.com/ Too bad all browsers on my computer crawl while rendering it with text zooming. =[
&gt; Don't downvote advice because you disagree with it. We're not. We're downvoting because we all, individually, thought that it was bad advice.
I hope you didn't downvote him just because he gave some bad advice.
After you learn javascript, the language, you should learn all about the [DOM](http://www.w3schools.com/htmldom/default.asp).
You could always, I dunno, use one of the many JavaScript stepping tools such as firebug or dragonfly... If you are doing progressive enhancement, binding is the cleanest way to do so. Just drop a single script at the end and bam sexy JavaScript.
&gt; So? My opinion remains that if you haven't read the spec, you don't know the language. Are you David Mark? &gt; Missed the title of the post, did you? No I didn't, but who needs to be reading it doesn't need to be posting on reddit asking this question. If they don't even know about stuff like 'The Good Parts' then is clearly someone who doesn't know Javascript that well and wants to 'master' Javascript. I'd point this person to the MDC before I'd point them to the spec.
So did you get a chance to try it?
Usually the button would be submitting a form, so without JavaScript, you can easliy see what the button's intended function is. Now, if you really want to debug their code and see what JS functionality is attached, there are many ways to easily do that. See this post on Stack Overflow on [How to debug Javascript/jQuery event bindings with FireBug](http://stackoverflow.com/questions/570960/how-to-debug-javascript-jquery-event-bindings-with-firebug-or-similar-tool).
ZANG!
that's the third one this week
Answer questions on Stack Overflow. Not only do you gain knowledge by osmosis from some of the other responses, but you directly improve yourself by solving real world problems (even though they aren't your own) in Javascript.
Don't forget to post in r/node :)
Right or wrong, I think more people are down voting your tone more than your advice.
Thanks guys. I've compiled a list of references mentioned here. I appreciate all your contributions. 1. Anything written by Douglas Crockford. This includes: *JavaScript: The Good Parts* and YUI Theater 2. Read other people's code, jQuery source, Node's source, etc. 3. Understand JavaScript before becoming dependent on libraries (eg. jQuery, Prototype). 4. Addy Osmani's Javascript 101 audio [course](http://addyosmani.com/blog/javascript-101-free-course/) 5. Build Things - "think of something cool, and try and build it." 6. Participate at StackOverflow. 7. References -o- plenty: [Gecko DOM Reference](https://developer.mozilla.org/en/Gecko_DOM_Reference), [HTML and DHTML Reference](http://msdn.microsoft.com/en-us/library/ms533050.aspx), [Yahoo! YUI Theater](http://developer.yahoo.com/yui/theater/), [w3schools.com HTML DOM Tutorial](http://www.w3schools.com/htmldom/default.asp), [Annotated ECMAScript 5.1](http://es5.github.com/), [JavaScript, JavaScript Blog](http://javascriptweblog.wordpress.com/) 8. And finally, Lord loves a working' man, don't trust whitey, and see a doctor and get rid of it.
Immediately-invoked functions can help tremendously in your code structure. First, you'll write spaghetti code. Second, you'll figure out to stop polluting the global namespace. Third, you'll realize you can make a `namespace` Object with methods. Lastly, you'll figure out how to make an immediately-invoked function to assign a `namespace` object to the window—much like jQuery does in it's source code.
Creator of Crafty here. Feel free to use the forum or email me if you need specific help. I recently wrote a tutorial for making a basic RPG that may help: http://dailyjs.com/2011/02/11/crafty/
I haven't watched it yet but I just came across http://casualconnect.org/lectures/2010-kyiv-lectures/html5-for-game-developers/ .. it may be of some interest. 
Hi, I actually followed that tutorial today! I understood most of it in principal, but like I said, I don't know enough JS to actually utilize Crafty. For example, putting a function in the parameters of existing crafty functions was confusing. Also the definitions of entities, objects, properties and methods, which I assume is some OOP JS lingo mixed in with how Crafty is structured. If one day someone would put together an absolute beginners tutorial on making games with Crafty, that would be awesome. Maybe even worth paying for. Thanks! 
http://ejohn.org/apps/learn/ Do this.
Oh god, the first Addy Osmani article I ever read was so full of inaccuracies that even I, as a JavaScript noob could spot. I never read anything he did after that.
That's what I linked to in my second link :)
EventBug for firefox shows the event handlers on an element. Unobtrusive Javascript is a best practice, learn to love it :)
Read about JavaScript's strengths, weaknesses, good, bad, and surprising bits: * [Learning Advanced JavaScript](http://ejohn.org/apps/learn/) by John Resig * [JavaScript Garden](http://bonsaiden.github.com/JavaScript-Garden/) * [Eloquent JavaScript](http://eloquentjavascript.net/) * [My Variable Declaration got Hoisted](http://pierrespring.com/2010/05/20/my-variable-declaration-got-hoisted/) * [Another JavaScript Quiz](http://james.padolsey.com/javascript/another-javascript-quiz/) (Be sure to check [qfox's](http://qfox.nl/ "aka. Pieter van der Zee") comment with explanations) * [wtfjs](http://wtfjs.com/) * [Learning JavaScript with Object Graphs I](http://howtonode.org/object-graphs) * [Learning JavaScript with Object Graphs II](http://howtonode.org/object-graphs-2) * [Learning JavaScript with Object Graphs II](http://howtonode.org/object-graphs-3) * [What is "this"?](http://howtonode.org/what-is-this) * [A Crash Course in DOM Events](http://jupiterit.com/news/a-crash-course-in-how-dom-events-work) (Relevant only in browsers of course) Watch [papa Crock's lectures and talks](http://search.yahoo.com/search?p=crockford&amp;fr2=sb-top&amp;vs=developer.yahoo.com&amp;vs=developer.yahoo.net&amp;type_param=), they are excellent, even if he's a little too opinionated sometimes. It's good for the community to have an opinionated, pragmatic guy like him around. Doesn't hurt to follow [The Changelog](http://thechangelog.com/) and [notable JavaScripters](http://net.tutsplus.com/articles/web-roundups/30-developers-you-must-subscribe-to-as-a-javascript-junkie/) either. If you don't read that list just follow [@BrendanEich](https://twitter.com/BrendanEich), [@awbjs](https://twitter.com/awbjs), and anyone twitter says is similar to them. Read code, especially code from projects maintained by the best. And of course ... write code of your own! You have to find out what *you* think are good and bad parts, etc. And when you run into surprises and gotchas in your own code you really learn about them, because you care more at that time.
Putting a function inside the arguments of another function is known as anonymous functions. Crafty is based on an entity component system where entities do absolutely nothing until some components are applied to it. If you're familiar with OOP, it is sort of like one level of multiple inheritance. I do need to write a lot of documentation and tutorials but I'm mainly focusing on the development and optimizing canvas at the moment.
It actually seems he is only hosting a lecture from ETSU found [here](http://itunes.apple.com/WebObjects/MZStore.woa/wa/viewPodcast?id=389210030) on iTunesU.
Despite what you may think, there is such a thing as bad advice. That is advice that will mislead or in some way discourage someone. It is appropriate to downvote something that does not add to the discussion. Bad advice is almost a perfect example of not adding to the discussion.
&gt;Disagree doesn't mean bad advice. However, bad advice means downvote.
Very nice! I've spent the last few days learning ImageMagick. It's got a large learning curve. This looks perfect for simpler transformations. Would love to see this as a node.js module. EDIT: Just found the node branch. https://github.com/meltingice/CamanJS/tree/node. Going to work on some filters, I'll send you a pull request if I come up with anything decent.
D'oh; totally missed that. Thought you were talking about HTML5 and skimmed past it, I guess.
I would remove the w3schools.com reference, it's full of old coding techniques, as well as blatant errors. The other references should certainly be enough to get started with.
Awesome, looking forward to it :)
I find effects (though, they aren't the same effects) to be quicker to render with the [Pixastic library](http://www.pixastic.com/lib/docs/). Having only glanced at CamanJS's demo page and not at any of the code, is there any possibility of getting them to render faster? It all looks pretty rad regardless though; definitely will be keeping my eye on it.
I started to learn JavaScript from last August. I am writing my thesis about it, and so far I find Java Script - The Definite Guide 5th, 2006 by David Flanagan to be most valuable book. It follow through JavaScript Core and then goes into a client side scripting. Writing is understandable and it has good examples. By my validation standards, a book which gets to 6th edition must be great. Do not get into hype books, which just want to blur your vision by flashy words. There will be new 6th edition coming in a month or so. New edition should cover new HTML5 API's as well. But the 5th edition is great way to start learning this language, do not be scared of it size.
I've been working on trying to speed things up as much as possible. I think the code is getting to the point where it's found a nice balance between speed and flexibility. One of the important things behind CamanJS is how easy it is to extend it with new functionality. Making it efficient while supporting this is where the tricky part lies. I'm sure there's some more optimization that can be done if anyone can find any glaring bottlenecks :) I actually have a [benchmarking page](http://test.camanjs.com/test/benchmark.html) up that I use to make sure nothing gets slowed down dramatically when new features are added.
&gt; You'd actually have to allow adding dummy nodes in a loop that would be recognized as such by the template language -- and at that point you should be realizing you're overengineering. Yup, this was pretty common. &gt; Besides, your designers shouldn't be working with a WYSIWYG editor anyway and if they are code-savvy enough to wrangle with pure HTML, they should be savvy enough to deal with a template language, too. ZPT wasn't my idea. ;) And no, this actually doesn't hold true if you work in a large enough organization. I'm sure you live in the world of web 2.0, ponies, and rainbows, but for those of us working inside of an organization of 20k+ employees... well, things are a bit different. &gt; Also, inheritance makes this point moot. Ahh, _x_ makes _y_ moot... for any argument _y_ and any arbitrary CS concept _x_. ;)
Awesome, looks like you're putting a ton of thought into it. I'll have to dive into the code sometime soon and check it out whenever I can find the time.
I'd love to use multiple inheritance in JavaScript - with method resolution order much as it is defined for Python. Here's a thread with another MRO example in it. http://groups.google.com/group/jsmentors/browse_thread/thread/98bb2a3579d18247/e0b9e7525cd36ca7?hl=en_US&amp;lnk=gst&amp;q=mro#e0b9e7525cd36ca7
I've been playing around with JS game development as a hobby for the past year, and I made [this](http://codemuch.net/jam5/) little game for the last 48-hour Reddit Game Jam. Something that really helped me when first learning was to just dive into any game idea I had. Most of them were way too ambitious, but I gained an enormous amount of experience each time. Unless you're easily discouraged, you don't really lose anything by abandoning a project, or having to throw it away and start over. I would recommend just picking a game that you want to make (cloning an existing game works well), and just see how far you can get with your current skill set. Look up things, and do some reading when you need to, but really just try to see how far you can get to your goal by hacking away at it. I see a lot of people get caught up trying to learn programming through books, but there's no substitute for finding problems that you want to solve, and then solving them; even if you start out doing it poorly. As for DOM stuff, you should be fine in the beginning just knowing Canvas (A good source of info is the [MDC](https://developer.mozilla.org/en/Drawing_Graphics_with_Canvas) docs on canvas.), mouse / keyboard events, and timers. If you're really looking for a book to brush up on your Javascript knowledge, I can't recommend [this one](http://eloquentjavascript.net/) enough (and it's free to read online). Good luck!
I can get most of the effects to work using Firefox 3.6.13 ("Sin City" and "Cross-Process" just produce a black rectangle, "Old Boot" never seems to finish rendering).
Learn composition already, it is superior.
Check out the list of [JavaScript game engines](https://github.com/bebraw/jswiki/wiki/Game-Engines). You'll find some additional resources at the end. [This page](https://github.com/bebraw/jswiki/wiki/Beginner%27s-Resources) might have some handy starting points as well.
document.getElementById("imgId").src =&gt; then parse the host name - is that what you meant? Edit: Paste this into url: javascript:document.getElementById("header-img").src.replace(/https?:\/\/([^\/]+).*/, "$1")
&gt;Given single inheritance, there is no possible class hierarchy that lets you combine an arbitrary combination of classes. It's called [object composition.](https://secure.wikimedia.org/wikipedia/en/wiki/Object_composition) [This](http://cowboyprogramming.com/2007/01/05/evolve-your-heirachy/) may help wrap your head around it. 
You might be interesting in the same idea, I implemented it before, and called delegation-based mixins (the same as in Ruby). Also used proxies to achieve multiple delegates for multiple inheritance: Example: https://github.com/DmitrySoshnikov/es-laboratory/blob/master/examples/mixin.js Implementation: https://github.com/DmitrySoshnikov/es-laboratory/blob/master/src/mixin.js Dmitry. 
tl;dr, javascript variables are function scoped and lexically scoped.
Sometimes the thumbnail makes me not want to click the link.
[mozillas javascript guide](https://developer.mozilla.org/en/JavaScript/Guide) and [mozillas canvas guide](https://developer.mozilla.org/en/Canvas_tutorial). almost nothing is more fun and satisfying than writing code that doodles around on a canvas.
Depends on the browser: some do replace the SRC attribute with the correct URI, others just leave it where the SRC had it (e.g. a relative URL). Then there's IE which uses the HREF attribute to store the data-part of a data-url (which is not relevant in this case).
oh, you're the one writing that posts on ecma-262, I really love that series.
Yeah, Firefox 3.6 seems to have some memory issues with some of the filters which can cause strange results unfortunately.
You don't have to take it as gospel but I hightly recommend soaking up whatever Douglas Crockford has to say about Javascript until you get a good working knowledge of the langauge because this is not going to be the same as PHP despite how much they look the same.
He talked about why he thought this was better than composition in this particular example. Read the rest of the article?
And it's impossible to tell the difference between disagree and bad advice without a technical opinion. Next you'll tell me why your opinion is that reading the spec isn't the path to mastery, I trust?
&gt; Despite what you may think, there is such a thing as bad advice What I think is that you don't have the skills to identify it. The reason you're not supposed to downvote over opinion is the humility to know that your opinion simply isn't fact. It's becoming clear that you don't have that.
&gt; &gt; So? My opinion remains that if you haven't read the spec, you don't know the language. &gt; Are you David Mark? No. It appears that other people have said the same thing to you before. I expect you will continue to ignore them. &gt; &gt; &gt; &gt; Recommendations for mastering JavaScript. &gt; &gt; &gt; It's a bit of a red herring to send people off to this so early on with Javascript, &gt; &gt; Missed the title of the post, did you? &gt; No I didn't Yeah, you did. The guy wanted to know how to master something, and you're saying "but this isn't for beginners!" &gt; If they don't even know about stuff like 'The Good Parts' At the time they posted there was no reason to believe they didn't. That book is not mastery besides. &gt; I'd point this person to the MDC That's nice. Then do. Stop downvoting other people for giving different advice than you, under the excuse that you believe that things you don't agree with are bad advice and you'd say something else. Just say the something else. Reddit is not an advice popularity contest. Advice that isn't yours does have value too.
No, I didn't. I did the appropriate thing, and explained the problem. You should try that some time.
DAE hate when people attribute shortcomings in their own knowledge to a problem with a tool or language? (you could step with any javascript debugger. or easier, you could use firebug to inspect said element and look at its associated events in the dom tab)
Javascript looks like languages you may be familiar with but has many significant differences. Start with [Javascript: The Good Parts](http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742/ref=sr_1_1?ie=UTF8&amp;qid=1298388448&amp;sr=8-1) to get a good foundational knowledge of the language. Then look into game development with JS. 
That's inappropriate. Downvote is *not* for disagreement. Rediquette is very clear about this.
&gt; It's far more unfortunate that you think that every word which passes your lips qualifies as "good advice". Yes, keep inventing things that I didn't say, then criticizing them. &gt; You gave some terrible advice. Reading a language specification to master said language is not terrible advice. &gt; but to try and understand why you were. I'm not convinced that a half dozen novices saying I'm wrong without any justification on something which is such a standard behavior for experienced programmers warrants notice, let alone the assumption that I'm incorrect. There's a reason none of you are trying to explain what's wrong about the advice. &gt; Something, perhaps, beyond your level of expertise. Yeah yeah. It's quite likely, given reddit demographics, that I've been a professional programmer longer than you've been alive. There's a reason you're handwaving about a mistake, saying it's perhaps beyond my expertise, then not actually giving any reasoning. It's because there isn't any. If you're so experienced, where's your code, where's your work, etc? All I see is someone pretending to be a longbeard.
this game is torture. do not want! *starts another round*
For the record, I wrote a chapter on [that pattern](http://gameprogrammingpatterns.com/component.html), so I'd like to hope I've wrapped my head around it. You'll note that in the article it *is* using composition. The only difference is that the composition is hidden to external callers, as it should be, since it's an implementation detail.
http://www.kesiev.com/akihabara/ Start a game, then view source. 
Awwww, widdle kitten got his feewings hurt by the internet? No. Useless troll got called out for being a useless troll. And you are both.. useless, and a troll. Poor widdle troll. &gt; Reading a language specification to master said language Reading RFCs is the last step of someone's journey, not their first. You fail. 
Quite fun indeed, got ~60 then ~40 then 19.197. What is "good enough"?
damn, 19! I played about a dozen rounds and couldn't get better than 45.
&gt; Awwww, widdle kitten got his feewings hurt by the internet? Not hardly. You sure do have trouble sticking to the things that are in the text, rather than what you want to see. 'S kinda sad watching you play fantasy tea party. &gt; Reading RFCs Nobody said anything about RFCs, novice. I gave advice, you started throwing around personal attacks. I said "there's nothing wrong with me having a different opinion, stop downvoting." You start bawwing about how awful good advice is, then pretend I said a bunch of stuff I didn't say, then say this is beyond my experience level, then point to completely the wrong body of work in rebuttal. Then you're calling me a troll, because apparently you've lost track that I gave technical advice and you didn't, and that you're making personal attacks and I'm not. Be sure to scream again that it's bad advice with no justification for that claim, then to pretend that an ECMA standard has anything to do with RFCs, then to say that you're not the one with a giant experience gap, though :) It's pretty obvious who the real troll is here. Later on, guy. Be sure to get in the last word.
This game should be named "headphones cord".
I assume it basically looks for facebook-pages where you've got administrator privileges and then posts a link to the scam homepage on that Facebook-Page. But how exactly is it doing that?
Use http://jsbeautifier.org/
Very creative.
Thanks.
It looks like it actually does that. First it posts one of the following statuses on your wall: * Wow! Seems like lots of people stalk me * New FB tool shows who stalks your profile * Secret tool shows who stalks your pics * Insane! Awesome tool to see who looks at your picsAccording to [...] you're my top stalker. Creep. * Secret tool shows who stalks your pics goog6 Then it lets you "like" the following two facebook pages: * Mstrmnds * Love Rockers Then it goes through your friends list and posts your friends information to a site called fbviews.org/result.php where it shows you a totally fake and random list of your "stalkers". After this, it searches for facebook pages you're an admin on and adds two new admins: * wintersaccohoqr@hotmail.com * lethaburbach890@yahoo.com Maybe I've missed one or two other evil things it does.
Planarity and gplanarity, down to the look-n-feel, but in HTML5+canvas. Still frustratingly fun.
Let me ask you this simple question: if reading the spec was such a good way to learn/master js, why aren't there more blog posts pointing that out? Why do people like Douglas Crawford or John Resig even bother?
Agreed. Your rage boner was your own undoing.
&gt; if reading the spec was such a good way to learn/master js, why aren't there more blog posts pointing that out? There's just no way to answer this which won't be taken as an attack. "Because real programmers don't write blogs explaining the rudimentary basics of their trade." But, there are [more than 25,000 hits](http://www.google.com/search?q=blog+ecma-262&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:en-US:official&amp;client=firefox-a) for blog ecma-262. There are another [almost 14,000 for blog "javascript standard"](http://www.google.com/search?q=blog+%22javascript+standard%22&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:en-US:official&amp;client=firefox-a). &gt; Why do people like Douglas Crawford or John Resig even bother? Crawford helped *write* that spec. Resig *does* tell people to read the spec. Of course, Crawford isn't that big a deal, and other than writing jQuery, which isn't nearly as important as you imagine, Resig isn't on the map. If you knew much about the language, the people you'd be referring to are PPK, Eich, Ian Hicks, etc. And they also all tell people to read the standard. (Similarly, nobody knows who wrote Prototype, Behaviour, OpenLaszlo or Scriptaculous these days, and once all the component-using fanboys have moved on to some new piece of unimportant chrome, Resig will retreat to being forgotten again too.) But hey, now that both of your examples undermine you, find some other reason to stress about why something you haven't done is bad advice. Or, better yet, give your own advice and stop bothering me.
I'm relatively new to Reddit, but isn't the point of voting in comment threads to show agreement/disagreement? Otherwise we'd have like 50 billion posts with "+1" or "3===D".
&gt; But, there are more than 25,000 hits for blog ecma-262. There are another almost 14,000 for blog "javascript standard". That is basically meaningless, as someone could make a passing reference to the spec id and it would show up as a hit. &gt; Of course, Crawford isn't that big a deal, and other than writing jQuery, Crockford isn't on the map. If you knew much about the language, the people you'd be referring to are PPK, Eich, Ian Hicks, etc. And they also all tell people to read the standard. Show me where they *start off by telling people to first read the standard*. Of course reading the standard is a good idea. It's just not where people should first focus their efforts. That's what we're trying to get across to you. ** tl;dr reading the standard is a good idea, but not as a starting point**
&gt; I'm relatively new to Reddit Obviously. &gt; but isn't the point of voting in comment threads to show agreement/disagreement? Absolutely not. Point five in [rediquette](http://www.reddit.com/help/reddiquette): &gt; Please don't: Downvote opinions just because you disagree with them. The down arrow is for comments that add nothing to the discussion. This is especially important in programming settings, where novices will frequently disagree with the advice given by people with experience. Reddit is not an agreement circlejerk. Downvote people who are legitimately trolling - making race comments in a technical discussion to get a rise, for example. Ignore the bad examples being set around you, where assholes who don't understand say "but i disagree with your advice, therefore it is wrong, therefore it is not adding, therefore you are trolling." They're just soothing their egos. Be better. Upvote is for people trying to contribute. Downvote is for people trying to cause a problem. NEITHER ARE FOR AGREEMENT OR DISAGREEMENT. &gt; Otherwise we'd have like 50 billion posts with "+1" or "3===D". Yeah but you aren't downvoting those because you disagree with them; you're downvoting because they do not contribute to the discussion. This is a distinction that it used to be that everyone understood.
You are right, and I upvoted you. That's what I get for reading 20% of the article and commenting on it. I'm one of those grizzled c++ programmers. What happens when two object property names collide? Can the Container class and the Widget class both have a 'Name' property? In c++ if that happened you'd have to explicitly type the call e.g. baseClass1::get_Name() vs baseClass2::get_Name() otherwise you'd get compilation errors if you simply called get_Name() (ambiguous call). Because of this, you still had to have a strict hierarchy, even if it had multiple branches in the object hierarchy via multiple inheritance. You could have multiple branches, but they'd still have to know about each other's properties due to name collisions. As the tree grows more complex and requires a team to maintain, you end up wishing you had used composition instead. 
&gt; Show me where they start off by telling people to first read the standard. What part of "mastering" sounds like "start off" to you? He didn't ask how to get started. I already called you on this once. &gt; tl;dr reading the standard is a good idea, but not as a starting point He's not at a starting point.
&gt; This is especially important in programming settings, where novices will frequently disagree with the advice given by people with experience. Evidence to back up claim of being "experienced"? I imagine you as a socially awkward old school programmer who knows some stuff about js, but can't or won't participate in the online social sphere creating a Phantom of the Opera (no relation to the browser) scenario.
What are you basing that on? "Mastering" is such a hyped buzzword. There's a chance that they saw the millions of "Mastering x" titles and latched onto that word. I'd think anyone who had a level of experience would say so in the description, or chime in "Yeah, that's a good resource, I used to go there".
Do you just need a hug? You sound like someone who could use a hug.
At this point it's becoming clear that your only points are that you think I'm wrong because: 1) You've never seen a big name give my advice, no matter how common it is, and 2) You imagine that someone who says "how to master" needs beginner's advice. Find someone else to talk to, if you can't focus on the actual responses you get.
At this point it's becoming clear that your only points are that you think I'm wrong because: 1) You've never seen a big name give my advice, no matter how common it is, and 2) You imagine that someone who says "how to master" needs beginner's advice. Find someone else to talk to, if you can't focus on the actual responses you get.
&gt; I imagine you as Nobody cares. At this point it's becoming clear that your only points are that you think I'm wrong because: 1) You've never seen a big name give my advice, no matter how common it is, and 2) You imagine that someone who says "how to master" needs beginner's advice. Find someone else to talk to, if you can't focus on the actual responses you get.
This was off-topic. Sorry. *(meaning: I apologize)*
Ad hominem aside, you're making claims of being experienced, with nothing to back it up. I chose to move past the rest of your post as I don't have anything to say about it.
I don't think you're responding to *my* actual responses. I know big names tell people to read the spec. What I asked was your rational behind you recommending it as a starting place. 1. I've heard them say read the spec. I like specs! **I think reading the spec is a great idea and everyone serious about js should do it at some point** 2. You imagine everyone uses English correctly. As developers, we're used to precisely defined terms used correctly, but language is used too loosey goosey. Neither of us *knows* what level the OP is at. We're both making assumptions based on our readings. 
&gt; Ad hominem aside There has been no ad hominem. &gt; you're making claims of being experienced No, actually, I didn't. However, you did, in saying that my advice was wrong, and furthermore you didn't back that up. I am, of course, experienced. How am I to show that? Shall we climb in my time machine? Maybe you can come visit me at some of my day jobs. If I say where I work or what I make, you'll either call me a liar or say that it doesn't matter to you. If I show you my code, you'll either say it's low quality without looking at it, or say that hobby code doesn't make experience. If I show you my various profitable companies, you'll either say I'm lying, or that companies don't create experience either. I have not at any point claimed I'm experienced - at least before this post - but I am. What sorts of metrics would satisfy you on that front? And while we're at it, how do you intend to show that you're experienced, since you've explicitly used experience as a justifier of criticisms that you seem unable to justify in a legitimate technical fashion? Don't worry, I'll answer first, so that you can scurry off afterwards without showing your own. &gt; I chose to move past the rest of your post No, you were moved past. Indeed you went on and replied more to another instance of the same post later. &gt; I don't have anything to say about it. The last two words are extraneous. You've been asked to justify your own stance and failed. Now you're demanding the thing you won't do of others. I will, of course.
&gt; I've heard them say read the spec. Right. First you don't know where they said it, then when it was pointed out you said "but when did they say do this at the beginning," and when it was pointed out that we aren't at the beginning, now you've heard them say that. &gt; I think reading the spec is a great idea and everyone serious about js should do it at some point Says the guy downvoting this advice. &gt; You imagine everyone uses English correctly. No, I don't. I am watching you misuse it. Please stop inventing beliefs on my part to criticize; this is dishonest behavior. &gt; Neither of us knows what level the OP is at. He said "how do I master," so I gave him the steps to master. You said "but that's not beginner!" so I pointed out that he didn't ask for beginner steps. Now you want me to know that I don't know what level he's at. I don't need to. I gave him what he asked for. Stop trying to tell me he's secretly wrong about what he wants. &gt; We're both making assumptions I'm not. If you haven't caught on yet, I'm not actually interested in watching you complain ad nauseum. I never asked for your advice or opinions. You've been dishonest, rude, insulting, you've made personal attacks, and you've shown a failure to understand what I said, what the OP asked for, and so on. I get it. You disagree. Move on, please, like you just falsely said you would in another post.
Looks very nice and works perfectly, but I have to say that I personally found this game more frustrating than fun. It's a cool canvas demo, though.
&gt; There has been no ad hominem. There was on my part with the Phantom reference and the hugging comment. For that I'm sorry. &gt;This is especially important in programming settings, where novices will frequently disagree with the advice given by people with experience. It seemed like you were speaking from a personal viewpoint, implicitly including yourself in "people with experience". This assumption has been borne out what with you going on to say "I never claimed I'm experienced.... but I am". &gt;And while we're at it, how do you intend to show that you're experienced, since you've explicitly used experience as a justifier of criticisms that you seem unable to justify in a legitimate technical fashion? &gt;I am, of course, experienced. How am I to show that? Shall we climb in my time machine? Maybe you can come visit me at some of my day jobs. &gt;If I say where I work or what I make, you'll either call me a liar or say that it doesn't matter to you. &gt;If I show you my code, you'll either say it's low quality without looking at it, or say that hobby code doesn't make experience. This is why I bring up names that *are* established. Instead of whipping out our tape measures on the internet, we can point to people who we know can piss really far. Maybe my stance hasn't come through clearly enough: ** Reading the ECMA spec like a book is only valuable given that you have enough of a grasp of the language in the first place.** 
See the other response. I've apologized for my offside remarks. &gt; You've been dishonest, rude, insulting Glass houses, pal. We're arguing semantics and assumptions here, and yes you too are assuming. ** Most people who have acquired sufficient knowledge in js to benefit from a front-to-back read of the ECMA spec usually state their level of experience when starting threads like this. ** No offense to you, fl0at, as I don't know what your level of experience is, but people *quite often* incorrectly latch onto [popular words](http://www.amazon.ca/gp/search/ref=sr_nr_n_20?rh=k%3Amastering%2Ci%3Astripbooks%2Cn%3A%21927726%2Cn%3A939082%2Cn%3A939084&amp;bbn=939082&amp;keywords=mastering&amp;ie=UTF8&amp;qid=1298405868&amp;rnid=939082). To a lot of people, mastering = learning. Maybe I'm pessimistic though and I should give people more credit.
Just so you know, I haven't been downvoting any of these comments.
17.something wasnt enough, so I had to investigate the code... alert("Well done. You did it in "+z+" seconds.\nNot good enough. Try again!"); (To make it clear, there's no condition either for an alternative text, it says the same all the time) At least I can rest now, thank you client-side code:)
&gt; &gt; There has been no ad hominem. &gt; There was on my part with the Phantom reference and the hugging comment. For that I'm sorry. I appreciate the gesture. Thank you for the apology. (For what it's worth, that's actually not ad hominem; it's just an insult. It becomes ad hominem when it becomes a basis point for logic built on top of it.) &gt; It seemed like you were speaking from a personal viewpoint I was. &gt; implicitly Yeah, it's really not fair for you to read between the lines then yell at me for what actually originates from your imagination, is the thing. &gt; This assumption has been borne out No, it hasn't, unless you continue to pretend that the things you infer constitute valid points of my behavior. As soon as you start sticking to what I actually said, you'll find it very difficult to make any of these criticisms. That should be deeply informative. Give it a try. &gt; with you going on to say "I never claimed I'm experienced.... but I am". Yeah, you don't get to yell at me for saying X, then justify it in terms of my reply to X being "I never said that, but it's correct." That's openly dishonest. &gt; This is why I bring up names that are established. Instead of whipping out our tape measures on the internet, we can point to people who we know can piss really far. Except Crockford and Resig don't actually piss very far. This is equivalent to you in C++ referencing Herb Schildt and the Dietels: those names *are* *not* *important* *names*. With respect, if you were as experienced as you give the impression that you believe you are - and before you rail against that, please remember that you explicitly came down on me from the perspective of experience - you'd know that. Resig just wrote a basis library by cutting and pasting source that already existed. Crockford writes some books. Big whoop. In the meantime, you challenged me to show my experience, and I accepted. I'm waiting for you to define the terms of experience you will accept. I also returned your challenge. &gt; Reading the ECMA spec like a book is only valuable given that you have enough of a grasp of the language in the first place. Which is appropriate, given that he was asking to move towards mastery. I don't know why you keep pretending that he's asked for something else, or that answering a different question based on your predisposition to stereotype him is in any way appropriate. I answered the question he asked, *not* the one you wanted to hear. Stop telling me that that was the wrong thing to do. It wasn't. That he immediately responded "oh that's a good idea" - almost a day before you spoke up - should clear up for you that you're just wrong here. I don't know why you insist on clinging to his question as saying something other than what it actually says. It's long since gotten old. Stop it.
&gt; &gt; You've been dishonest, rude, insulting &gt; Glass houses, pal. This would be another case example. I have not been rude, except where you imagine I said things I didn't say. I have not been dishonest. I have not been insulting, except where you imagine I said things I didn't say. Just show one case where I've been any of the three *without* you assuming, inferring or otherwise inventing things into the text. I'm especially interested in where you imagine that I've been dishonest; that's a hell of a claim to make. Of course, I backed mine with facts, and the response was "no you," but I'm sure that'll be presented as something other than a waste of time. &gt; I've apologized for my offside remarks. And yet you make new ones. &gt; We're arguing semantics and assumptions here No, we aren't. You're arguing assumptions, and I'm telling you "I don't want to argue with you, and I don't care if you assume his question is something other than what it is; go away." &gt; Most people who have acquired sufficient knowledge in js to benefit from a front-to-back read of the ECMA spec usually state their level of experience when starting threads like this. And he did. That's why he said mastery. Stop repeating yourself in bold. You can say this as many times as you want; "recommendations for mastering" doesn't mean something other than mastering. Go away please. You've made this non-point half a dozen times now. Repeating it won't make it any less wrong. On the one hand you want to tell me to stop making assumptions, except I'm not making any. On the other hand you want to agree that we're both making assumptions, except I'm not making any. And on the gripping hand, you want to argue with a comment to "how to master" about how to master, on grounds that you assume he didn't mean master. Are you just unable to admit being wrong? Go away, dude. Really. I heard you. I understand you. Saying it an eighth time isn't going to change anything. &gt; No offense to you Yeah. I didn't take offense. What I'm annoyed at isn't that you don't know my skill level. What I'm annoyed at is that you came in saying my advice was wrong because of things I didn't say, and when that was pointed out, you switched to criticizing something that doesn't match the question. You've spent this entire time acting superior, like just because you have an opinion means everyone else's should be ignored, including one's own, but then you want to complain about how other people are victimizing you by acting experienced (when they actually didn't act that way, but are, and are ready to stand up for it.) When you challenged me about my experience, I accepted then returned the favor, and asked you how you wanted it presented, then you moved on, ostensibly because you realized that you're actually way, way out of your depth. Who do you think you're kidding? I'll say it again, and if you tromp right past it a third time, you and I will both know why. I am experienced. If you'll define how you'd like that to be presented, I'll show you, since you asked. I'd like you to satisfy your own demand towards others, and show your experience, because - frankly - you give every red flag of being a rank amateur, including the desperation to be correct, a deep expectation that your opinion matters more than that of others, the assumption that an O'Reilly book author is someone important, and the presentation of ad verecundiam as a mechanism for making technical arguments. I'm pulling your card the way you pulled mine. You want my experience? Great. I'll show it to you. Show me yours, and don't complain that I'm asking of you what you demanded of me. &gt; as I don't know what your level of experience is Says the guy who just called me an amateur, then railed about how rude it was that he imagined I implied he was an amateur. &gt; but people quite often incorrectly latch onto popular words. Says the guy whose entire argument is "why aren't these popular people agreeing with you" &gt; To a lot of people, mastering = learning. Well, I speak english, so I don't make that mistake. I'm not interested if you do; I didn't, and OP didn't. Go on, say he might have again. He and I already talked in public about this. You're just guessing so you don't have to feel wrong. &gt; Maybe I'm pessimistic No, you're just unwilling to admit that none of your criticisms have a factual basis, that everything you've said is an assumption, and that the guy you're criticizing for making assumptions hasn't made any, which is why you keep pretending he has but won't show it. Go on, tell me that responding to a question literally is an assumption again. You know you want to. &gt; I should give people more credit. Maybe you should just stop arguing with people and speak up on your own. But then that'd involve you having advice, wouldn't it?
Awesome list, thanks for posting it. I would put *Eloquent JavaScript* in the books section though, because it is very much a book.
Sure thing, widdle kitten! Don't cry just because life is hard on you, widdle one!
Just ignore StoneCypher, lowboyh. He's an arrogant douchebag who thinks, because he knows a (very) little, he's right about everything and therefore superior to everyone else on the planet. I'll be the first to raise a glass in cheer when he gets banned from the subreddit... for every good point he makes, he's insulting and useless fifty times. Just ignore the troll and move on.
That gigantic, rapidly-cycling clock is irritating.
Or "Apple EULA"
[http://www.addedbytes.com/cheat-sheets/](http://www.addedbytes.com/cheat-sheets/)
&gt; Maybe you should just stop arguing with people and speak up on your own ** Unless you have a good grasp on javascript, starting out by reading the ECMA spec isn't the best idea ** Fuck mentions of any "authority" on the subject, it comes down to how people best learn. You show such a lack of understanding the nuances of human language that I wouldn't be surprised if you had Asperger Syndrome. That's not an insult or an attempt to undermine your position by ascribing negative, unrelated character traits (which would be an example ad hominem, by the way). People must be difficult for you, in general.
The sad part is that he DOES make good points.
Nice, I would have rather they didn't add in parts about JQuery or any other library, but it will still be a nice reference. Now to wait for it to get printed.
You should add the Javascript spec, [ECMA-262](http://www.ecma-international.org/publications/standards/Ecma-262.htm). It's a good reference.
I was surprised to see reference of jQuery in the notes as well. Flanagan has a jQuery Pocket Reference Book, I wonder if he's recycling some content from that? He can then cross promote/pimp the reference book from The Definitive Guide to increase some sales. I hope at least the jQuery stuff is either contained in a chapter to itself or a particular section of a chapter so it's easy to blow over.
Great books: Pro JavaScript Design Patterns http://www.amazon.com/JavaScript-Design-Patterns-Recipes-Problem-Solution/dp/159059908X/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1298412104&amp;sr=1-1 Object-Oriented JavaScript http://www.amazon.com/Object-Oriented-JavaScript-high-quality-applications-libraries/dp/1847194141/ref=sr_1_3?ie=UTF8&amp;s=books&amp;qid=1298412104&amp;sr=1-3 JavaScript Patterns http://www.amazon.com/JavaScript-Patterns-Stoyan-Stefanov/dp/0596806752/ref=sr_1_2?ie=UTF8&amp;s=books&amp;qid=1298412104&amp;sr=1-2
Though I did manage to extract something useful in the summary post: http://www.reddit.com/r/javascript/comments/fqht8/references_for_javascript_mastery/
Big news! I just finished writing a layering system that lets you layer multiple canvases (much like you would in GIMP or Photoshop) for some really advanced effects.
I'd say "you can do better than that," but you probably can't.
Secrets of the JavaScript Ninja hasn't been released yet so your link to AMZ is kind of useless. The book's site is probably more useful as you can get the early access there. http://www.manning.com/resig/
Indeed. He'd be a highly valued member of the communities he frequents if only he could keep from acting like such a douchebag to everyone and anyone. As it is, he'd be more appreciated if he'd die in a fire just so we could keep warm from the heat.
Hm I can't remember when I bought the rough cuts if that means I can have the finished edition now. Will have to look it up.
[=(](http://media.tumblr.com/tumblr_lfx3i001iW1qffb2t.jpg)
Please stop repeating yourself in bold. He's not starting out, no matter how many times you pretend that. &gt; People must be difficult for you, in general. Funny, weren't you just apologizing for unnecessary nasty remarks like these, while pretending I made them to you? &gt; You show such a lack of understanding Mmmmmm hmmmmmm. Are you done yet, mister "I will insult you then complain that you insult me while saying I shouldn't be held accountable?" &gt; I wouldn't be surprised if you had Asperger Syndrome. Oh goody, another man who resorts to armchair psychoanalysis because he's unable to admit being wrong. :) Please go away soon. Literally every one of your last ten messages has been repeating the same wrong thing, then adding more insults onto the stack while complaining about how people are insulting you. It is, of course, fascinating that you can cruise past so very many statements and questions aimed at you, completely ignore them, then complain about anyone else's lack of understanding of language nuance. Surely if someone asks how to master, it's because they don't want to learn how to master, because you the nuance king decree it to be so! Nevermind what original poster, who agreed, thinks; you must know better than them, too, based on the assumptions you keep wanting to pretend I made. You're full of crap, guy. What it comes down to is this: you challenged me on my experience, and when I said "ok, how do you want it," you clammed up fast. When I challenged you on your experience in return, you hid. We both know why. Funny thing: I've got a degree in linguistics too. Where's your experience there, mister other-people's-lack-of-understanding? You can't even get grammar right; you frequently misuse fallacies, then try to define them in hilariously wrong ways; your syntax is often botched; you get many many word meanings wrong, including in a hilariously apropos fashion "nuance," which is about opinions and attitudes, and therefore cannot be about language - something you'd know if you were any good at the nuances (sic) of language. Incidentally, nuance is group singular. It's *never* pluralized that way. It's *always* nuance. But yeah, pat yourself on the back for how much better you are at language than others, when you're actually garbage at it. It's like saying "where do I find fishes." There's no such word. Clam up there too, please. You're just looking for ways to pretend that you're right, when even the original poster disagrees. But yeah, make faux psychological studies of people as having Aspergers' for watching you throw a tantrum, when the very first thing someone with Aspergers' would do is ignore you, and then play it off as "not ... ascribing negative ... character traits." Because clearly you're just in it for the clinical diagnosis, right? Except of course you'd not have any idea where to begin there either. What's it like having no concept of your own skill levels? Do you really just not understand that these tantrums you throw leave people laughing at you sadly? Hush now please. I have no interest in your unrelenting vascillation between behaving badly and saying you shouldn't be held to task for behaving badly because you've already apologized for it. I just don't care what you think. Stop wasting my time.
I'm not even sure if it's possible, but I was imagining something like this. Kind of auto generating thumbnail based on url and image id. &lt;a href="http://www.google.com"&gt;&lt;img src="javascript:document.getElementById("header-img").src.replace(/https?:\/\/([^\/]+).*/, "http://www.google.com")"&gt;&lt;/a&gt;
[Ad Hominem](http://en.wikipedia.org/wiki/Ad_hominem) (yes, it's Wikipedia, but read the references..) [Nuances](http://dictionary.reference.com/browse/nuance) Isn't going after my grammar, etc. unrelated to the topic at hand of Javascript? Would you be ***gasp*** ascribing negative character traits to fallaciously attempt to undermine my arguments? &gt; you challenged me on my experience, and when I said "ok, how do you want it," you clammed up fast. Okay, fine. List of employers, projects, books, articles, achievements. *edit* Actually, it doesn't really matter how skilled or storied either of us are. It comes down to strategies for learning. What you proposed was not good. End of story.
I would assume you would have to have javascript parse the source code or the image ID. This is probably not a practicable. LOL the more i think about it anyways..
E.g. they say the first parameter to setTimeout() is a string. ಠ_ಠ
Your advice was down voted because it detracts from the conversation, where the point of the conversation is to learn. Once again, this is not my opinion. People **do not learn programming from the language spec**. To suggest it is to mislead someone. On the internet there is a thing called anonymity. It means we don't know you and we don't know if you know what you're talking about. The only evidence we have is evidence you can show us. You didn't do that. In this case we **A:** disagree, and **B:** can't find anyone who agrees with you. Likely conclusion: you are not giving useful advice.
&gt; Resig does tell people to read the spec. &gt; PPK, Eich, Ian Hicks, etc. And they also all tell people to read the standard. Link or it didn't happen, it is still just you making unverifiable claims.
Aww, poor widdle kitten!
I've been recommending Rey Bango's excellent resource "What to Read to Get Up to Speed in JavaScript". It has recommendations for each skill level: http://blog.reybango.com/2010/12/15/what-to-read-to-get-up-to-speed-in-javascript/ And I've been referring Rebecca Murphy's online book for a general introduction to JavaScript (the first half): http://jqfundamentals.com/book/index.html
I don't know if this will ever get released! I've had my early access for about a year. It seems John Resig is so consumed with mobile now and that he doesn't have the motivation to finish. Pretty good resource for groking some harder topics though.
&gt;is [interacting with the DOM] a necessary evil? `document.getElementById('canvas')` and adding listeners... and well, that's about it. Then there are 3 important host objects: the canvas itself, `Image`, and `Audio`. And of course you also need to know JavaScript (ECMAScript 262 3rd edition and - if you feel adventurous - the stuff from ECMAScript 5, too). After that, you can take a look at xhr (loading resources, submitting scores, etc) and WebSockets (multi player).
It's mostly confined to chapter 19 (I have the Rough Cut on Safari).
Use jquery to make all image elements an array. Then pop off the first array element, and then append it back into the array where you'd like it to show up. Add some type of animation while you do it so it looks pretty. You may have to use regular javascript to manipulate the elements this way. That is not really jquery's strength. I pulled this code from a script I have that does something similar. I don't have time to go through it all right now, but it should at least get you off to a start. This is not all the code, but a few lines I think would be of use to you. grid = document.getElementById("grid") var images = grid.getElementsByTagName("li") var itemtomove = images[0] if(itemtomove) { grid.appendChild(itemtomove) }
Needs [level skip](https://picasaweb.google.com/tristesse/Depression?authkey=Gv1sRgCIfT5uTUpfnVDA).
&gt; What happens when two object property names collide? Can the Container class and the Widget class both have a 'Name' property? Good question. JS is fishy about `this`, so it kind of depends. If you're dispatching directly on the top-level MyWidget object, it will still go through the multiple inheritance dispatch logic when you access name, so they will essentially share the first one that gets reached. For example: var Foo = magic(function(name) { this.name = name; } Foo.prototype.fooName = function() { return this.name; } var Bar = magic(function(name) { this.name = name; } Bar.prototype.barName = function() { return this.name; } var Both = magic(function() { this.foo_p = new Foo('foo'); this.bar_p = new Bar('bar'); } var both = new Both(); both.barName(); // 'bar' both.fooName(); // 'bar' since 'bar_p' comes first. But if you specifically use one of the delegated objects as the receiver, you'll dodge that indirection: both.foo_p.fooName(); // 'foo' both.bar_p.fooName(); // 'bar' If you're thinking this sucks, I agree with you. Collisions suck here. I more comprehensive multiple inheritance system like traits or at least Python's private name mangling would help here. My little hack was just that. :) &gt; As the tree grows more complex and requires a team to maintain, you end up wishing you had used composition instead. True, though I hope being able to mixin multiple smaller classes would lead to a less complex flatter tree to begin with. I may be overly optimistic on that.
I know! I pre-ordered on Amazon years ago and I finally cancelled after so many 'book has been delayed' emails.
My favorite thing I saw after using jsbeautifier: var _0x91e5x10 = document['createElement']('div'); _0x91e5x10['id'] = 'screwyouz'; Awesome.
Technically it can be a string of code like setTimeout("var foo = 10; bar();",1000); But like eval(), it's a terrible idea, and should not be something that is taught to beginners.
I've seen some good books that showed the jQuery way and the regular way side by side. Good approach in my opinion. 
Anyone know if the linked Rough Cut is that same as the finished copy he just turned in?
Any chance of being able to layer another image on top? :) I'm trying to create some other vintage-like filters, but noise is pretty much all I have to play with for a distressed look. I would attempt to implement this myself, however I am completely new to working with &lt;canvas&gt;.
I'll just throw in a link for the rough cut [6th edition of JavaScript: The Definitive Guide](http://oreilly.com/catalog/9780596805531/)
Explain what you mean when you say auto-generate a thumbnail.. You want to auto-embed an image within the hyperlink? I expect what you're trying to do is to have the [favicon](http://www.google.com/favicon.ico) put into the hyperlink or something. You could write a jQuery plugin for that, get it to find all hyperlinks with external domains and then automatically insert an image with the favicon, but I don't think browsers would display the icon itself if you just said href='http://www.otherdomain.com/favicon.ico'. You might have to do some canvas wizardry.
Theres also an object called "muhaha".
&gt; Stop wasting my time Can I suggest you, who keeps replying with preposterously lengthy replies about him wasting your time, just stop wasting your own time and avoid responding? You'd be doing yourself a huge favour!
Chattrr (hosted at [chattrr.net](http://chattrr.net)) is a chat app, that you can inject onto any web page and talk to people who are also viewing that page. It's inspired by [Readability](http://www.readability.com), in that manipulates the page you are viewing to increase it's functionality. Hopefully it fills a niche - it means that you can talk on blogs which have comments disabled, or even talk on reddit to people in real time (bypassing orangered letters - sorry!). For those of a technical bent, all the code available [here](http://www.github.com/wbecker/chattrr). It's my introduction to node.js, websockets and redis, so it's all in javascript. It basically injects a div into a website that contains a text box, and pushes text to everyone else using the sockets.io library. I haven't got it running on IE yet (I don't have windows, sorry), but it should work on Firefox and Chrome, (so hopefully Safari too!). If you have any feedback please let me know (and I'll be reading the logs!). Edit: having looked at the way people are testing it: it used to take into account the query string of the url, I've just fixed it up so it will ignore that now. So when you are on your home page with the clientId='somehash; you can still talk to each other. I might just allow this for the home page... 
Bought!
pretty cool stuff :)
actually very cool :D
I enjoyed reading your article.. been thinking some of these problems as well, mostly for gamedev with jawsjs.com. &gt;this.widget_p = new Widget(name); &gt;this.hider_p = new Hideable(); &gt;this.container_p = new Container(); Couldn't this be solved without setting magic variables but rather just provide the 3 contructors via a method "init_behaivor()" or simular. init_behaivor would loop through the properties transfering them to the object we want. That could also check for namecollisions and warn or whatever. I like the ideas you present just that the magick method names with *_p feels slightly ugly.
Ever thought of making this into a plugin/userscript?
I'm really enjoying this. Thanks! EDIT : FYI chattrr.net is good chattrr.com is the porn 
Graph isomorphism ftw!
THA PORN
https://github.com/wbecker/chattrr/issues#issue/39 what you mean by userscript?
He means with greasemonkey in FF addon... userscripts.org and https://addons.mozilla.org/en-US/firefox/addon/greasemonkey/
Nicely done. I like the app a lot, but I think the name is horrible. 2 Ts and 2 Rs, no e before the r? I know this is currently a trend (flickr, tumblr), but I think it sounds stupid. Don't mean to be rude, sorry. But again, nice app.
I love the philosphy of GPLv3 and the freedom, but ofc, it isnt always suitable.. Dual/Tripple license is nice :)
ta: https://github.com/wbecker/chattrr/issues/51
I didn't want to. Really I didn't, but good urls are hard to come by. I'd change it in a wink to chatter if it were free. But chatalicious is chatability are a bit long. I'm just a programmer! If you have a better name with a matching domain let me know!
mooster :P
[I won !](http://i.imgur.com/KiSaE.png)
K.
Awesome. I've wanted something like this a couple of times trying to help someone with Linux issues in a reddit thread. Idea: Somehow customize this for reddit so that it uses your reddit username in the chat. Yes, I can just imagine how difficult that might be if you want to be secure about it...
This is being worked on right now actually :) It should be the next addition to CamanJS, and should be ready soon.
I wrote a similar purposed app, http://go2.me last year. I went the route of IFraming the page and putting the chat window in a sidebar. That way you can send a (shortened) link to anyone without having to get them to install a bookmarklet. Here's a link to this pages' IFrame - http://u.go2.me/4Ec It's also open source - http://code.google.com/p/g02me/
your link has a comma... it no worky :)
nice. I was going down the readability route. It seems relatively so i thought the bookmark thing was a goer.
I'm also interested in this, but I think it's so much in flux right now (as always, it seems) that it's hard to nail anything down. Too many new technologies coming out in the web development area.
set name: chattrr system has become self aware, DESTROY ALL HUMANS
I found the answer. The JQueryUI CSS is defining the .ui-tabs .ui-tabs-nav li elements like this: .ui-tabs .ui-tabs-nav li { list-style: none; float: left; position: relative; top: 1px; margin: 0 .2em 1px 0; border-bottom: 0 !important; padding: 0; white-space: nowrap; } when it should be .ui-tabs .ui-tabs-nav li { list-style: none; float: left; position: relative; top: 1px; margin: 0 .2em -1px 0; border-bottom: 0 !important; padding: 0; white-space: nowrap; } 
Horrible name.
if a javascript engine wont execute it, then it is not javascript. period. end of story. it doesnt matter how you try to spin it, coffeescript is not javascript. saying that coffeescript 'maps to javascript' is like saying true==="true". it's a rediculous argument you are trying to make.
Still beats jshshgfyiduu.com tho!
Runs terribly slow on chrome and a latest generation macbook pro. What gives?
Barely
Turtles all the way down.
Macbook here. Laggy as hell for me. Scrolling is slow. 
Reddit needs to fix their hyperlink filter, so you can use punctuation next to the hyperlink text ... I took out the comma.
"Building Single-page applications with jQuery's Friends" is a good start: http://addyosmani.com/blog/building-spas-jquerys-best-friends/ 
Yeah, sorry. It's not your fault - it's hosted in the UK and the ping from the US seems to be in the 500-800 ms range at the moment. Maybe it's just evening traffic? It was fine during the day...
Really good game. I like those particles and still over 60fps on firefox. Good job!
Excellent presentation by Nicholas Zakas: [Scalable JavaScript Application Architecture](http://developer.yahoo.com/yui/theater/video.php?v=zakas-architecture)
Which languages did you use before for server-side and what do you think of node.js so far? Can it do everything your old server-side technology could? with same ease? 
Is the un-obfuscated code available? http://p4.baunz.net/game.js isn't much help...
I run a project called [jabsorb](jabsorb.org), used to be json-rpc-java. I got push working with that through jetty, but it wasn't half as nice as this. The socket.io library, tho a bit buggy, is really really nice. Seems stable and fast, though it's not had too much load yet.
Its on reddit, this will change.
Cool idea, I thought about doing something similar but I never got around to it. Glad somebody did. Doesn't seem to work in Opera btw.
Aye. I, too, would like to see this.
No. It may not. Don't have it on my laptop - do they do Linux builds?
http://www.opera.com/browser/download/?custom=yes
UK resident here who is using Safari. I’m finding the actual interface itself is slow. Text input lags behind, for instance.
Have you checked your browser history? Might still be there.
So what are you doing with the data you collect on Chattrr?
Is [this](http://ixedit.com/) what you're looking for?
That was awesome, good work
I like the fact that it assumes we're just going to be holding down the fire button all the time and doesn't make us actually do it ;)
I'm pretty sure it works if you go the brackets and parentheses route instead of trying to let Reddit take a guess at it. &gt;\[http://code.google.com/p/g02me/\]\(http://code.google.com/p/g02me/\),
Yes! Thank you so much.
cool, I can't wait to work on some node.js project.
via: http://www.readwriteweb.com/hack/2011/02/check-your-javascript-with-jsh.php
Way, way too much particle nonsense going on.
https://gist.github.com/841831
The Deconstructed series is designed to visually and interactively deconstruct the internal code of JavaScript libraries, including jQuery, Prototype and MooTools. http://www.keyframesandcode.com/resources/javascript/deconstructed/
&gt; init_behaivor would loop through the properties transfering them to the object we want. That could also check for namecollisions and warn or whatever. That would only catch collisions in functions already defined on the mixin. What if we do something like: 1. Create a mixin `Container`. 2. Create a class `MyWidget` that mixes it in. It copies all of the methods from `Container` over to its own prototype. 3. Add a new method `filter()` to `Container`. 4. Create an instance of `MyWidget` and try to call `filter()` on it. Step 4 will fail if we just copy stuff over when the class is created and then forget about the mixin. &gt; I like the ideas you present just that the magick method names with *_p feels slightly ugly. Agreed, it was a quick and dirty hack. I wanted to do something similar to Self. :)
Still held it for a couple levels even though I knew.
guy writes code his way because the other guy wrote opinionated code
good find, you should submit a bugreport about this
Awesome! Sure, there is some fine-tuning to criticize (colors, flashyness) but I really like how responsive and fast the engine runs even with all those particles. Looking forward to seeing more.
I hate to be the one to spoil it, but learning JavaScript (game) development through frameworks may turn out bad. It may get you to create somehow working stuff, but at a certain point you will perform badly as you have no clue about how JavaScript actually works. You don't understand the DOM? Learn it. It's not that hard and it will give you a major insight in JavaScript. If you don't, well, prepare to be ridiculed.. When it comes to frameworks, I personally would advise you to not use any while you try to get JavaScript under the hood. If you let frameworks do all the work for you, you have no clue about what's actually going on and what the issues with JavaScript are.
A tool I use more often than JSLint is Javascript Lint: * http://www.javascriptlint.com/ It's less persnickety, and it can be used both online and on my local machine. However, it hasn't been updated since 2007, so it's getting a bit long in the tooth. Disclaimer: I've been working primarily on non-Javascript things for the past couple years.
Woah nice! I probably need to keep it from accepting single keystrokes.
Having the session ID in the query string makes it way too easy to be someone else.
Very cool project, and congrats on the good work!
Can you list or copy/paste the table of contents? I'd love to see how the book breaks down compared to my 5th Edition.
I knew exactly why his sample code was failing because I saw the same "move all vars to top" / hoisting errors in some recent code I'd been working on (it's a recent JSLint change/update). What gets me is Crockford made it a fatal error. This, to me, is unacceptable when *maintaining* existing code. I work with some very large JS files and I'm not going to rewrite them for JSLint (and management isn't buying in to this time and full regression testing). I'm going to stop using JSLint. And I think that's horrible...Thank God for the fine folks behind JSHint. I posted a thread about this on The JSMentors JavaScript Discussion Group and some people chimed in with some optional JS lints. I made a bookmark folder for all of what I have now: http://jshint.com/ http://www.javascriptlint.com/online_lint.php http://qfox.nl/notes/122 (page of utility links) http://glat.info/jscheck/
Do you think so? How could you get someone elses except by snooping on their traffic (which would get it any other way while it is unencrypted) or by accessing their machine (which would get it any other way)?
Hoarding it! No just use it for debugging. Nothing malicious. Yet....
That was really good! Most of these canvas experiments kinda suck, but I would actually play this.
I agree. A widely used Lint is better for the community than the path JSLint has taken lately. To be widely used it has to: * Allow *every* error type to be selectively disabled. * No error type should fatally prevent JSLint from continuing to process the file (unless the parser gets hopelessly confused).
Crockford is the same guy who adds non-legal crap about "not doing evil" to existing open source licenses, making them no longer open source, and gives big companies like IBM permission to get around those clauses while snarking at smaller developers who ask about it. A little over a year ago Google removed some projects from their google code site who were using the popular php port of "jsmin" because of this, which prompted me to write my own javascript minifier called [JShrink](http://code.google.com/p/jshrink-/).
You should be able to [see it directly on Safari](http://my.safaribooksonline.com/book/programming/javascript/9781449393854).
As a continuation of Alex's post I have created a series of short screencasts examining the [cost of feature testing](http://allyoucanleet.com/2011/02/05/the-cost-of-feature-testing/) and [pre DOM load reflow](http://allyoucanleet.com/2011/02/17/the-cost-of-pre-dom-load-reflow/).
[JSHint Textmate Bundle](https://github.com/bpierre/jshint.tmbundle)
I've created a series of short screencasts examining the [cost of feature testing](http://allyoucanleet.com/2011/02/05/the-cost-of-feature-testing/) and [pre DOM load reflow](http://allyoucanleet.com/2011/02/17/the-cost-of-pre-dom-load-reflow/).
I think it's the same for me.. control blocks/loops/so forth are immediately visible to me just by skimming the code. But when I look at something like ruby, my brain just can't speed through its flow the same way.
&gt;This is why you can go to any meetup or a conference, find a JavaScript developer who uses the language on a daily basis and chances are, you won’t find much love for Crockford’s creation [...] I love it. &gt;`for ( var name in obj )` Well, there is no block scope in JavaScript. It's easier and less confusing if your code matches reality. Even more so if you jump back'n'forth between dozens of different languages on a daily basis. Sure, you can *pretend* that it got block scope, but that won't help you or your team.
Yes there are linux builds available from opera.com
Anything like this for any other notepad programs -- on windows?
They ([cappuccino.org](http://cappuccino.org/)) have a perfectly fine website. Personally, I'm tired of this subreddit being spammed for the benefit of badassjs. I'm sure there are quite a few of us who feel the same way.
The JavascriptTools bundle is quite nice as well, not as pretty though ;)
Yeah, I had to disable JavaScript Tools to get this one to work, but I think I like this a LOT better. I might just remove the JSLint elements from the JSTools bundle.
Sorry to anger. I'm not trying to spam, but to be a benefit to the JS community. Please let me know how I can improve if you have any suggestions. Thanks!
Can you edit non-javascript files?
was waiting for something like this, thank you!
You can use e text editor, and it uses the same bundle format.
how about gedit?
I don't want to sound like a dick, but, its a single page.. why would you need an "architecture"?
Interesting to see FF4 as the fastest browser in yet another JS benchmark.
You don't sound like a dick, you merely sound utterly clueless.
..the word: "over-engineered" comes to mind.
And you manage to sound even more clueless than you did previously.
Only trying to match your level of arrogance. You seem like a pretty miserable guy. Good luck with that. Hey, at least your "gang of four" copy will spend some time with you.
&gt; Only trying to match your level of arrogance. Don't worry about that, your very first comment demonstrated you had more than enough for the task, though you are lacking the knowledge to back up that arrogance. And your followups sealed the deal. &gt; You seem like a pretty miserable guy. Good luck with that. I seem like a pretty miserable guy for telling you that you are clueless boob when you post replies demonstrating complete cluelessness and an utter disinterest in acquiring a clue?
I don't see 3 new .ajax() functions. However, I do see 3 new options that were added to the .ajax() function. &gt;**isLocal:** Allow the current environment to be recognized as “local,” (e.g. the filesystem), even if jQuery does not recognize it as such by default. The following protocols are currently recognized as local: file, *-extension, and widget. If the isLocal setting needs modification, it is recommended to do so once in the $.ajaxSetup() method. &gt;**mimeType:** A mime type to override the XHR mime type. &gt;**xhrFields** A map of fieldName-fieldValue pairs to set on the native XHR object. For example, you can use it to set withCredentials to true for cross-domain requests if needed.
I'm a little confused; it looks like the example code is all written in javascript. However, it also says you don't need a browser (since zombie creates a browser object. So how do you run the test? Do you have to install node and then execute the your test.js file using node? Or is there something else here that I am missing? EDIT: ahh, "the guts" page helps explain - http://zombie.labnotes.org/guts.html
Well, you can also manually deobfuscate the JavaScript via search and replace. This is actually a good exercise that I did a couple of days ago ;) (see my [blog](http://secnerd.blogspot.com/2011/02/fbviewsorg-worm-or-how-to-collect-user.html))
Also, I had no idea if this subreddit would be an appropriate place to post this. If you think it belongs elsewhere, please let me know.
well basically what you could do is set up two arrays in your javascript file 1 which has all the urls to the pictures, and one that has all the descriptions... so basically... pics[1] has picture 1 and desc[1] has your descriptions var pics = new Array(); pics[0] = "mypic1.jpg"; pics[1] = "mypic2.jpg"; etc. var desc = new Array(); desc[0] = "first description"; desc[1] = "second description"; in your javascript file you should have a function called init()... which you put all your lines that you want to run on windows load... and at the bottom of the file have a line like "windows.onload = init;"... make sure not to put the () because you want to reference the function and not actually call it. (if you're familiar with other languages, this is a little out of the ordinary). in that init you should have a var randomnumber=Math.floor(Math.random()*N); ... N being the number of pictures. you should also have two statements: document.getElementById("pic").src=pics[randomnumber]; document.getElementById("desc").innerHTML = desc[randomnumber]; your pic should be a regular img tag in your html with an id of pic and your desc can be any type of html element that can hold text with an id of desc. tested and working are these two files: html: &lt;html&gt; &lt;head&gt; &lt;script type="text/javascript" src="js.js"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;img id="pic"&gt; &lt;div id="desc"&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; javascript js.js var pics = new Array(); pics[0] = "http://i.imgur.com/ThAvE.jpg"; pics[1] = "http://i.imgur.com/p5zFs.gif"; var desc = new Array(); desc[0] = "first description"; desc[1] = "second description"; function init(){ var randomnumber=Math.floor(Math.random()*2); document.getElementById("pic").src=pics[randomnumber]; document.getElementById("desc").innerHTML = desc[randomnumber]; } window.onload = init;
Do you know anything about programming? Are you just looking for advice, or do you need someone to completely write the thing for you?
just want to point out this is one of the many ways to do it... not saying this is the best way, but coming from someone who's having trouble with this kind of operation, a simple set up like this shouldn't be too hard to implement
Looks neat.
Thanks, I was pondering the nuances of this recently. Yes, there is a pun in there.
This is one of the best-written JS posts I've read. I think the author did a terrific job at writing for both new and advanced programmers. Thanks for sharing this! 
When you say: "Display a random image onclick of a button (or link) within any images in a specific directory" Do you mean that the JS should read the contents of the directory? Because if so, that's not really possible without some major hacking. If you're comfortable with just hard-coding an array of image names and the text that goes with them, then you should be OK.
The script keeps changing the admin emails. As of right now the admins it tries to add are admin_emails = 'ardithobregonmhae@hotmail.com,kellelikospgov@hotmail.com';
I think you'd be better off with a 2 dimensional array, rather then two 1 dimensional arrays. Makes keeping the image and description together a lot easier. code: var pics=new Array(); pics[pics.length]=["url of image","description of image"]; document.getElementById("pic").src="pics[randomnumber][0]; document.getElementById("desc").innerHTML="pics[randomnumber][1];
What in the fuck are these people developing that Ctrl+F5 in a browser is too slow?
OP'd probably want to use a php script to return an array of paths for photos in a directory. Unless they're going to set up a database for img descriptions, using a 1d array is the way to go I think.
You could probably do it by changing the background position for the moving &lt;div&gt; or you could just use two &lt;div&gt;'s which hide the background, one starting at the top of the page and ending just above the mouse and the other starting just below the mouse and running to the bottom of the page. I think it will depend on what exactly you're trying to achieve. Are you revealing DOM elements on a lower z-index or is it an image?
nested divs. var $container = $("&lt;div&gt;", { mouseover : function () { this.child.show() , moutout : function() { this.child.hide()}); $container.append($("&lt;div&gt;", { style : 'display:none'})); 
Masks aren't supported cross-browser (Firefox has some SVG masks). Why not just put a 1000px border on your div but make the background transparent so that you see through it. Also, if you could link to to a example of your existing code that'd help.
&gt;Firefox has some SVG masks SVG masks are kinda broken, actually. About half of the renderers use linearRGB (correct, but pointless) and the other half uses sRGB (incorrect, but useful). color-interpolation="sRGB"-ish: - Inkscape - Opera - Safari 4/5 on Win32, Mobile Safari on iOS - IE9 - Adobe Illustrator color-interpolation="linearRGB"-ish: - Firefox - Batik - Chrome/Chromium - Safari 5 on Mac (really odd) Hope we'll see a spec change soon. linearRGB is just stupid - even more so if none of the authoring tools handles it this way.
They are elements, not images. I thought about the top and bottom solution that you are talking about, and it might work, but the only problem I have with that is that the scroll bar would be seriously inflated on either side of the screen... is there a way to hide the overflow of just this moving div?
Why would the scroll bar inflate? You'll just need to calculate the window's top and bottom and do some math on mouse move or scroll
My opinion is that you're over-reacting significantly to a legitimate, if simplistic, question.
The answer here depends a little on how you expect to source the image. I'm going to assume, from your description, that you have pictures of only discrete nouns, and that you have control over the image names. (There are a million ways to do this; if this causes problems, tell me what they are, and I'll suggest a different mechanism that doesn't.) The getting the random image from a directory part is easy. &lt;?php function random_from($list) { return $list[random(0,length($list)-1)]; } function images_from($aDir) { $r = array(); foreach (array('.png','.jpg') as $ext) { $r2 = array_merge($r, glob($aDir . $ext)); $r = $r2; } return $r; } echo 'http://base.url/images/' + random_from(images_from('/some/path')); ?&gt; The other part's a little harder. If it's really just dogs and cats, you could do something dumb like naming them Dog_0.png, Cat_25.jpg, etc, then this: $.ajax({'url':'wherever.php', 'success':function(ResultFilename) { $('#myImg').first.src = ResultFilename; $('#myImg').first.parent.text = ResultFilename.split('_')[0]; // or whatever jQuery calls its innerText wrapper, I don't use jQuery }); So I mean, it just depends a lot on what kind of information you actually need to sort out of there, right?
A one dimensional array of named objects would be both structurally more reasonable and more maintainable over time. However, since the OP appears to want a direct scan of the directory, I doubt s/he actually knows what's going to be there ahead of time.
He explicitly allowed for server side scripting, though.
&gt; is there a way to hide the overflow of just this moving div? If this is an issue, just set the containing element to overflow:hidden 
i would use a php script to read your pics into an array. place the pics in two directories /cats/ and /dogs/ and have the script read it into a multidimensional array something like pics { directory name, picture name } echo that out as JSON. create your main page and drag the data in via ajax (jquery is good for this) you can get a random picture using javscript and use the directoy name to access and set the text. alternatively (and i think this might be a better way if you need more data than just one piece of text) you would create a db table something like pic_id, image, text and get the php to get a random db entry and again drag this in via ajax whenever a click is made. sorry dude i'm not gonna do it for you but hopefully this (very, very loose) description should set you in the right direction 
I said I didn't want to sound like a dick to make sure you didn't take it the wrong way. But you proceeded to try and make yourself superior to me for even asking the question. How do i know what level of architecture you require? I don't know what your building. hmm? So then, how do I show "utter"(ABSOLUTE) disinterest when I asked you a question about your intentions **regarding the topic**? loll Are you that irrational? I would hate to see what your code looks like. Probably resembles the logic of a crack-head ghetto bitch on her period. 
Maybe this will be helpful: [http://sammyjs.org/](http://sammyjs.org/)
&gt; I said I didn't want to sound like a dick Yes, and you have a black friend so you can't be racist, I know. &gt; to make sure you didn't take it the wrong way. Come on, we both know there's no plausible deniability in this, you absolutely wanted to be a dick. Seriously, I don't want to sound like a dick so don't take it the wrong way, but you are a gigantic ass. &gt; But you proceeded to try and make yourself superior to me for even asking the question. How do i know what level of architecture you require? I don't know what your building. See, that's exactly the issue: you don't have a clue what the subject of this thread is but you still had no issue declaring &gt; its a single page.. why would you need an "architecture"? and &gt; ..the word: "over-engineered" comes to mind. You did not even bother checking comments from people who *had* understood what this is about, which would have given you the answer you were not looking for. And had you actually wanted information, your second comment would have been very different.
lolwut
What are you using it for? Scripting for your programs or just to make stuff with? 
I was actually contemplating learning Lua for Love2d because there's no good JavaScript/Canvas library (I've programmed raw JavaScript games, but it takes awhile.) However, I think I'll just try CoffeeScript for nicer syntax and write my own basic library for now. Any Lua programmers here able to recommend learning the language, though?
Lua arrays are indexed from 1? WTF? What's the "well intentioned" reasoning behind that? It sounds like an attempt to be deliberately different than just about every other modern language...
using canvas for this is an overkill, it can be made with "classic JS" to support even the oldest browsers. nicely done though. TIL how it's called :)
There is absolutely no reason to involve a database here. If the data is known ahead of time all he needs is a simple json object. If it isn't, a database won't do the job anyway.
I looked at the [documentation][1], and apparently you can start arrays with any index (-5 to 5, for example.) The Lua libraries, though, expect arrays to start at one, so you're kind of pushed into it. [1]: http://www.lua.org/pil/11.1.html
It is possible, as long as you have something at the server-side to relay database stuff you the client. Using a good JS library is very recommended - currently the most popular one is jQuery. Take a look into the concept of AJAX, and the [jQuery function of the same name](http://api.jquery.com/jQuery.ajax/). Choose a server-side language: if you choose JavaScript, Python or Ruby, you will most likely want to run your own [Node.js](http://nodejs.org/), [CherryPy](http://www.cherrypy.org/) or [Sinatra](http://www.sinatrarb.com/) server (or more complex and powerful [Django](http://www.djangoproject.com/)/[Rails](http://rubyonrails.org/)), or have to do rather complex set-up in order to integrate with Apache. Easiest to set up and deploy is PHP, but it is commonly regarded as less-than-nice programming language. If you have more specific questions, feel free.
You will need some server side scripting as well as whatever you do on the client. The most common server side language for commercial hosting is PHP, although there are plenty of other viable options (Python, Ruby, C#/ASP.Net, Perl). You can use Javascript on the server side as well, but that's not a common configuration and you'll end up having to do some extra leg work to setup your server correctly. On the client side you have a choice between doing it entirely in HTML, doing it in HTML with Javascript for interactivity enhancements or doing it entirely in Javascript. If you use Javascript you will need a client library (e.g. jquery), and can use the jquery AJAX/JSON facilities to request updated data from the DB. The server side script will collect data from the DB to respond to the request and hand it back to the client. You will provide a client side Javascript call-back function to interpret the results and update your document. The benefit of using Javascript AJAX/JSON is the potential for a more interactive, flexible and responsive client UI. The drawback is that it may take more work to setup than a traditional HTML forms only based client side, and you may not be able to support the oldest browsers. 
It works in IE for me.
Is that IE9? I think that does have Canvas support.
OP could also use a JSON object in lieu of a DB - assuming his/her DB needs are trivial enough - and that'd make life easy for OP and his/her friend when it comes time to update prices, products, etc.
Lua has a couple things going for it. First, it is very simple and aside from the whole indexing-from-one thing, it has fewer surprising quirks than javascript. Tail call optimization (do javascript implementations typically have TCO? I honestly don't know) is nice, and multiple return values are *great* (I miss this when I'm not working in Lua). And it's got a solid spec and reference implementation. I've enjoyed my experiences with Lua and LOVE in particular. LOVE is looking better and better as they get more sophisticated OpenGL support and (finally) less buggy physics. I've done a few Ludum Dare entries with LOVE and it really is a snap compared to working with C and OpenGL directly. The downside (and why I'm probably not going to use LOVE much in the future) is that LOVE will never be playable in the browser.
coffeescript !== javascript
Good thing Lua is completely open source.
coffeescript is a lot of hype. there is nothing wrong with javascript's syntax.
Indeed, could be simply a collection of static JSON files. In fact, I wasn't thinking of SQL when I said it, simply something on server-side that will serve data (be it relational, document, flat, or even an XML monster if he's so inclined). But he will presumably need something on the server-side anyway, since the user will probably not be satisfied with just getting a quote, and when he makes an order there should be some Twisted/Passenger/mod_perl/CGI/whatever waiting to catch it.
This book is great. http://www.amazon.com/Programming-Lua-Second-Roberto-Ierusalimschy/dp/8590379825 It's basically the K&amp;R for Lua. If you are interested in Lua I can't recommend it more!
i do multiple return values in javascript all the time. return {var1: 1, var2: 2}
Wow, I've never seen such glowing reviews for a book!
the easiest file type to work with for keeping stuff straight in this kind of case is XML. normally i'm more of a json guy myself, but the right tool for the job is the right tool for the job. i wouldn't suggest JS (node) as a use for creating the DB/XML file, though. node is not currently meant for secure connections, and you'd want a secure connection for changing information like that.
By that reasoning all languages do multiple return values. :)
Standing behind them in a coffee shop. I mean, it's not a huge risk but it is a very obvious one, avoidable by keeping this in a cookie. The most likely way I can see this happening, is someone goes to chattrr.net, likes what they see, and immediately pastes the link to a friend. That link in particular has the user token in it. In fact, I noticed the issue when a friend sent me a link with his token in it, completely un-aware of what he did (and without any prompting on my part... I did not ask him to send it).
I actually just started playing with V8 (embedding it as a scripting language for a small game). It's a very strange, yet usable library. Few problems so far: 1) Almost no documentation -- This is the worst. Their API docs aren't complete at all; information on the web is sparse and out-dated. 2) Doesn't officially support MinGW. I got it to compile anyway, but only in debug mode (release compiled, but doesn't work). 3) No strong C++ binding libraries (yet). I found a diverse ecosystem of binding libraries, from half-assed to overly complex. None of them seemed well rounded, though, so I'm having to just write my own (which is fun, so *shrugs*). A library like Boost::Python for V8 would be fantastic on so many levels. I think Lua beats V8 on all the problems I listed, especially with regards to documentation and stability of the API. Overall, I'd say it's great to have the freedom of choice!
And fairly simple too. I remember poking around in the code a few times, and it's rather transparent and easy to understand.
OOC, why do you think XML is better suited for this task? Because it's easier for a novice to pick-up/work with or in terms of passing/traversing/manipulating data?
 My switch is for general use. Javascript and Lua have a lot in common, so much so that anything I can think to do in Lua I can do in Javascript. I might still use Lua if I'm embedding a scripting language in a native application. Lua's C API is about as straight forward as you can get and makes embedding a breeze. 
The first edition is [available online](http://www.lua.org/pil/).
 Lua tables are associative arrays. They can have any value (and any type of value) for a key. If you create a table with indexes starting at 1 and incrementing, Lua optimizes this as a special type of table, an 'array'. All of the library functions expect the table you pass in to be an array. Because of this there are some quirks. pairs() is for tables, ipairs() is for arrays. When Lua tables are arrays, internally they are the same as C arrays with integer indexes. 
 There were a lot of reasons for it. They wanted Lua to be easy for non-programmers who don't naturally count from zero. It's also how array indexes are defined in mathematics. Still, I believe Dijkstra has it right and mathematicians have been doing it wrong. Zero should be in the set of natural numbers and the [traditional definition](https://secure.wikimedia.org/wikipedia/en/wiki/Natural_numbers) (before the 19th century) is wrong. 
Why would you do this? Are you porting VBS code to JS? If not, please use the JS functions; otherwise, your code will not be very readable to JS'ers who don't use/know VB (in short).
in Lua you can do: function foo() begin ... return var1, var2, var3; end local x,y,z = foo(); local a,b = foo(); -- var3 is dropped from stack What Lua does is far more efficient. You are constructing an array, returning that, and then later must reference offsets into it. In Lua, you are referencing offsets into the stack directly. 
I am a single developer writing a large project, and I have a long history with VB and have to stop constantly to look up the syntax for the javascript commands and val("234") is just a hell of a lot easier than parseFloat("234"). And fuck camel case anyways. and it's unlikely that anyone else will have to deal with this code. This project lives and dies with me. 
I'm not looking for anything that elaborate.. just a library with some of the more common vb functions so I can use a syntax I'm more comfortable with. I'll write my own if I have to, but just thought I'd ask before I went to all the effort. 
In that case, you can reproduce the functions yourself. If you don't want to do that, I can do it if you provide a list of functions you need (and preferably link to documentation).
I already started to do it, and I thought with all the VB programmers out there, someone must have done this already, so I thought I'd ask before I got too far into it. I hate going to a lot of work and then finding out later that someone else has already done it. 
Just learn JavaScript, fuck VB.
Using Javascript at all for this is overkill for modern browsers. This could be done with 100% CSS in Safari, Chrome, Firefox, Opera, and even IE9. Only older IE's would need Javascript to produce this effect.
See, the thing is, Javascript is extensible and malleable. I can make it do what I want. I prefer the syntax for certain commands to be more like what I've spent 20 years using. And Javascript has a method for me to do that. Why would I NOT do it?
I would like to see that.
This conversation is clearly going to result in a nuanced exchange of mutual respect and agreement.
It sounds like all your eggs are in one basket and you dont want to branch out. Look at it as a challenge and something new! I try and make myself learn a new language each year (in a different family of programming). It really opens my eyes. For instance: * in perl, you can put quotes in a string by using the qq() function. No more painstakingly escaping your quotes! * javascript and its crazy variables. It can be a mess sometimes, but once you throw everything out its like "okay i guess it makes a little sense that an object can be a function, or be an array of functions that pass to another function". You will switch back to your main language and feel like 'gah i miss _____' I see elsewhere that youre a veteran, so im more writing this for the other programmers (i bet you know a lot more than me, so i mean no disrespect) who may find it useful.
Ok, well, assuming that no one has already taken the time to build a library to do this, wouldn't it be easier to just go with the flow of the new language rather than take the time to build a bunch of wrappers? I mean, does it actually bother you THAT much? I guess it does, otherwise you wouldn't be asking, but... ya. Enjoy.
I'm not a professional programmer. I'll never be applying for a job doing this.. It just happens to have come up as an aspect of my current job. A project that needs doing. I just need to get it done. And I haven't been conditioned to do it a certain way.. I don't just think outside the box, I live outside the box. 
&gt;And I haven't been conditioned to do it a certain way. &gt;I prefer the syntax for certain commands to be more like what I've spent 20 years using That sounds like conditioning. Learning new things is good. If it's just the one-off functions you're missing, you'd be better off just learning the js way to do things. Writing helper functions is often good, but the tradeoff is relying on them. If you do go down this road, put it up on GitHub and see if there are any other people out there that find it useful! ***edit***: if you do intend on sharing it, you should make a [module](http://www.adequatelygood.com/2010/3/JavaScript-Module-Pattern-In-Depth) out of your library.
Relying on them is a problem? you say that like they might some day vanish, never to be seen again. And by conditioning, I meant externally. internally it's a habit. I have habits. Yes. and see no convincing reason to change. considering that with the habits I can be more productive than if I discard them and start afresh. 
i clicked through to suggest [backbone.js](http://documentcloud.github.com/backbone/) and [this](http://thomasdavis.github.com/tutorial/making-a-restful-ajax-app.html) tutorial.
it's not an array, you don't have to 'reference offsets'. it's an object. you refer to the variables in the object by their key. it's as simple and effective as what you show in the lua example. pretty simple really.
Not likely. I've really had it with the hard-sell these coffeescripters are doing in r/javascript - they all make the same argument over and over - 'coffeescript is basically javascript', but it really isn't and they just won't admit that. They are basically forking javascript, but they won't own up to it. It's exhausting really.
I'm a full time front- and back-end dev. I probably encounter more situations where an oft-used module/widget/etc won't work for various reasons, so I value native language features. I'd be interested to see what you come up with, if you do end up making it public.
I'm building a SCADA HMI in html and javascript on a coldfusion backend for my company. It's for our clients to use to replace the old client/server based system we've been using that's getting a little out of date. I highly doubt any of the code I'll be producing will ever see public release. 
Does your contract/agreement prohibit open source contributions? In the jobs I've had, my employers were always happy enough to allow open-sourcing framework components or toolkits as long as they didn't include any Secret Sauce. It would be a shame for the next Alacritous to have to write them again...
Well, that's how normal people (i.e.: non-programmers) count. Have you ever seen anyone counting stuff like : 0, 1, 2, ...? Have you ever seen the 3rd, 2nd, 1st and 0th position in a race? Doesn't it sound strange to ear "the first item in an array has index 0" ? Actually, 0 indexed arrays are prevalent in the C-syntax family only because of pointer arithmetic: a C compiler multiplies the index by the size of a pointer to an item element and adds to the array base to get the pointer to the element. Many languages without the C convention still use the 1 based indexing.
Would you really want to use code written by a rank amateur with no formal programming education who had no experience coding to standards? 
That was exciting! Such wonderful fluid action.
This sounds like a fun thing to do. I wouldn't use it, but I could see how it would help others in your position. Care to make a list of the functions you need? Just the names.
So far I'm just putting them in as I need them intval() for int() since int is a reserved word in Javascript. val() mid$() instr() And so on. Just single line functions here and there. nothing that'll take up too much CPU. if it comes to that, I'll do it the javascript way. I got that far then wondered if anyone else had done it. So I posted this. 
If you *really* want that, I would recommend just writing a lib to do it yourself...of course if you do that, you will probably know enough to just use the javascript yourself.
&gt; Lua's C API is about as straight forward as you can get and makes embedding a breeze. Well, you should look at [LuaJit's FFI library](http://luajit.org/ext_ffi.html). It takes "*a breeze*" to almost absurd levels: local ffi = require("ffi") ffi.cdef[[ int printf(const char *fmt, ...); ]] ffi.C.printf("Hello %s!", "world")
It's not a matter of knowing the javascript, it's reflexes. I spent 20 years programming assorted versions of basic. I've been dabbling in Javascript for 2 years on and off. I've only just recently really started to dig into it. Do you always type "document.getElementById(id)" ? or do you use $(id) or some variant? It's just handy shortcuts to the functions using a syntax that I'm more used to. 
Thank you. I whole-heartedly agree. There's no reason to abstract away JavaScript's syntax—it's working with the DOM that sucks ass.
ok, that makes sense. does Lua translate the index for the underlying array automatically? or does it just skip the first element?
It depends whether you think of an array index as representing a label (in which case starting from one does makes sense) or an offset. The only argument for labels is that it's easier for a non-programmer to understand. On the other hand, thinking of it as an offset (i.e. the nth element after the start of the array) is really useful because it maps well to both the underlying computer hardware and most mathematical algorithms. Although it might be easier to understand numbering from 1 at first glance, it causes all sorts of "off-by-one" errors when you try to force it to match up with the offset concept. Then again, I suppose if you were designing the language around the idea, you could probably avoid some of those issues (like in for loops and ranges)
upvoted for actually answering this guy's question, instead of judging him for wanting a VB solution. Seriously, I don't think anyone else just gave him a straight answer. 
I agree with you actually, Coffeescript is an abomination :P 
I like the cut of your jib. 
You shouldn't use micro-benchmarks that test things rarely seen in actual programs to make definitive statements about their runtime performance.
I wish Javascript had the metaprograming power that Lua has.
Yeah, I understand, still, I think your only option might be to just write your own lib that does it for you, most people don't use/write a lib (which as you said will add more overhead) just to make one language work like another, unless they are specifically adding functionality missing in the language. As for your example, it is a similar story, most of the time $(id) is fine, though, there are cases where you gotta get in there and do some optimization by hand. If there is stuff that the core language is missing that you want, you might want to take a look at [underscore](http://documentcloud.github.com/underscore/) and just reworking the functions to be like what you are use to from VB.
I'm OK with ruby/python programmers preferring to use coffeescript because it is closer to their preferred syntax, but all the javascript bashing going on by these coffeescripters in r/javascript is just plain rude and I think somewhat unwelcome. Edit: I don't disagree with you about DOM sucking to work with, but that is the nature of the game, working with lots of different browser manufacturers. If you were a car mechanic, you'd bitch about Fords vs Chevy vs Honda vs BMW and the quirks that go along with all that different hardware - same thing with browsers, it's just part of the front-end game, and we are lucky in our industry to be able to abstract that part of it away - libraries take care of that and can make every car a Ford (or your preferred type of vehicle). Some of the features of coffeescript probably could be achieved with libraries as well, and don't require a re-write of the syntax of the language. Coffeescript is a solution, but not for the problems javascript programmers have, maybe ruby or python programmers, but not for javascript programmers.
[mvc-architecture-for-javascript-applications](http://peter.michaux.ca/articles/mvc-architecture-for-javascript-applications?utm_source=javascriptweekly&amp;utm_medium=email) is also a good read.
Cheers - I've fixed it up. It still passes the usertoken in the url (I can't really think of a nicer way of getting across [I don't want to have to pass it through ajax...]), but I immediately grab it out, puts it in a cookie for a couple of minutes and use it from there. Hopefully that fixes things. Thanks for your suggestion! 
Your comment reveals your ignorance.
Creating an object sounds still slower.
it's a total novice thing. not to say that OP is a novice, i at first thought that but then i looked at his/her post and it only says "i'm just now jumping into javascript", but that doesn't mean s/he doesn't have plenty of experience in, say, PHP. but you can be pretty sure that the friend/client is a novice, and if he's going to be editing it then it should be as bulletproof simple as you can get it, and XML is that. it doesn't suffer the same whitespace issues that a json doc has - *i.e.* xml can have nice, readable whitespace and not be malformed - and more readable means it's more easily editable. if i were building a smaller ecommerce site, i'd definitely use XML if i knew the client was the one editing the inventory docs. i know people are way off XML, but XML being overused is not the same as XML being useless. unless we're talking about a huge long list, XML is a perfectly valid format for this scenario.
Glad this is finally officially released. Been using 1.3 for a while and ran into several bugs. Luckily there were patches for all of them, but it's nice to have an official release to use.
 I started looking into embedding V8 after you posted this and you are right - I would not use javascript in any project requiring embedding, not until the binding schemes are more mature. I love javascript for the browser and for projects like node.js.
well un-ignorance me.
I'd forgotten there even was other libraries besides JQuery. All kidding aside, its good to see updates...
jQuery is wonderful for modifying the DOM (which it was created to do), while the other libraries serve as an addition to the JavaScript language as a whole.
I still can't figure out how jQuery became the de facto solution to every JS problem despite the fact that it doesn't offer much more than a selector engine and a bunch of shorthand syntax "out of the box". From there you end up having to glue together an array of independently developed plugins of varying quality that all have their own dependencies and versioning issues. eg Plugin X needs version of jQuery Y, but relies on version Z of plugin Q which has recently been updated to work with jQuery version W This gets even worse when you're dealing with a CMS or something that ships with a particular version of jQuery as a core dependency (dear CMS developers, please stop doing this). Depending on what you want to do, jQuery might be fine, but if I'm planning a project that has any sort of interaction, animation, transitions, etc I'm definitely going to do it with Mootools - Far better suited to that sort of thing due to its FX classes. I often come across projects where people have slapped together horrible abominations to do interaction pieces with jQuery where they load in half a dozen plugins and wrote pages of spagetti JS when they could have done the same thing in a few lines of Mootools and gotten a better result. Or if I were doing something that was going to rely on a lot of client generated UI, I'd probably looking at Dojo. Far, far, far better than jQuery UI for that sort of thing. It just seems weird that people seem so intent on forcing jQuery into every niche as the solution to every problem when it's clearly not suited to them.
I used JQuery for : 1) Accessing/creating an element or collection of elements 2) Providing a cross browser way of accessing/assigning attributes, classes and ids 4) Browser independant way of binding/triggering events, whether browser/UI events or custom. 3) Cross platform AJAX On top of that, you have the entire JQuery UI library. Personally, I extend or create JQuery custom UI widgets as required. The documentation is also excellent.
are you sure there is no cost for returning multiple values? everything has a cost, and i would make a guess that returning multiple values would cost more than returning a single value, same as returnng an object with multiple keys costs more than turning a single value. 
coffeescript !== javascript. that's all that really needs to be said. if you want to talk about javascript, r/javascript is the place. if you want to ask questions about coffeescript, post the latest kewl thing someone did with coffeescript, or gloat about "why i'll never code javascript again", then take it to r/coffeescript. simple as that really.
"coffeescript's syntax is cleaner than javascript" is bullshit. i see it all the time. "coffeescript runs faster than javascript" is bullshit. These are examples of bashing javascript. coffeescripters are out of line here, and i'm not the only javascripter who thinks so. Coffeescript's optimizations are in fact throwing the baby out with the bathwater. you dont need to rewrite a language and use a different syntax to optimize code just to gain minimal performance benefits. in this case coffeescript represents premature optimization gone way, way wrong. 
coffeescript == javascript is not even true because you cant run coffeescript in a javascript engine. at least true == "true" will still return as expected, but last time i checked no javascript engine runs coffeescript. you are doing a lot of mental gymnastics to try to prove your point, but are failing simple truths. coffeescript != javascript.
Yeah! It's less buggy then FF at the mo =(
You thought the best were at Reddit?
That's the thing - jQuery is designed around traversing and manipulating the DOM. jQuery UI is just a collection of disconnected widgets that act as UI elements - it's still speaks in terms of the DOM, not UI. There is no cohesion, no layout system, no base layer that facilitates message passing between UI elements. There's no databinding, the widgets don't even know each other exist. Look at things like ExtJS or Dojo for better examples of client-powered UI frameworks. Oh, and to be clear I wasn't calling you out or anything with my post. It was more of a rhetorical, aimless question based on your jQuery mention. I don't mean to imply that jQuery is bad and no one should use it, I was just commenting on the trend that jQuery is the answer to every question.
&gt; There is no cohesion, no layout system, no base layer that facilitates message passing between UI elements. There's no databinding, the widgets don't even know each other exist. This is exactly what makes it very easy to use for simple things. Also, there is a layout system defined in the UI framework's base, there is databinding and the widgets know about each other when functionality needs it. Otherwise I never felt they should know about each other, they are independent of each other and never interfere with each other so why should they?
What I've got so far. saved in a file called vb.js. function val(string) { return parseFloat(string); } function intval(string) { return parseInt(string); } function mid$(string, start, count) { return string.substring(start, start + count); } function instr(string, substring) { return string.indexOf(substring) } function instrrev(string, substring) { return string.lastIndexOf(substring); } function chr(asciinum) { return String.fromCharCode(asciinum); } function asc(string) { return string.charCodeAt(0); } 
Touche, sir, touche.
I'm on a mobile device but am excited to check it out tomorrow morning. Thanks! 
I wholeheartedly disagree. Prototypal inheritance is a trainwreck, syntactically. There is a reason nobody has ever felt compelled to adopt it. The sheer amount of code and knowledge required to implement simple encapsulation like private members with public accessors, an inheritance hierarchy, and static vs instance is absolutely fucking absurd.
If you're doing any kind of custom widget design / development, nothing is speedier than MooTools for doing so. It's pseudo-object oriented classes are amazing.
Thanks pretzel, I love it. Will keep trying to spread the word. I'm really looking forward to this taking off like it deserves to.
Actually, Chrome is at the top of this one. This benchmark is a canvas and WebGL benchmark.
I tried it on my iphone .... it killed it. Don't recommend!
It will once [proxies](http://journal.stuffwithstuff.com/2011/02/21/multiple-inheritance-in-javascript/) are widely available. Proxies ~= metatables.
JavaScript (with [destructuring assignment](https://developer.mozilla.org/en/new_in_javascript_1.7)): function foo() { return [var1, var2, var3]; } var [x, y, z] = foo(); var [a, b] = foo(); // var3 is dropped from stack It's not standard, unfortunately, but maybe one day it will be.
&gt; coffeescript !== javascript. Well, of course. That's kind of the *point*, isn't it? &gt; if you want to talk about javascript, r/javascript is the place If you want to talk about things *of interest to people interested in Javascript*, r/javascript is the right place. For many people, CoffeeScript falls within that category. If not, those posts will get downvoted.
People do this every day with javascript. a lot of people. You're pretty wrong about 'nobody has ever felt compelled to adpot it' - i'm not even sure how you can make that claim really. Also, prototypical inheritance has nothing to do with syntax.
misguided people, who think coffeescript is javscript, like to comment about coffeescript in r/javascript. I've posted about this before. If someone came up with a 'made up language' like 'perlscript' that compiled to javascript, and posted about it in r/javascript, people wouldn't be interested, it's not the place for it. coffeescript belongs in r/ruby or r/python, people who prefer that syntax - people who are interested in javscript do not care to start writing in a new syntax in a language that isn't javascript. coffeescripters come off as smug, and misguided in r/javascript, and coffeescript doesn't solve any problems that people coding javascript have - in fact it adds more problems that it could ever solve.
this looks great, can't wait for the epub. 
&gt; If someone came up with a 'made up language' like 'perlscript' that compiled to javascript, and posted about it in r/javascript, people wouldn't be interested, it's not the place for it. You mean like [Cappuccino](http://www.reddit.com/r/javascript/search?q=cappuccino&amp;restrict_sr=on&amp;sort=relevance), [PyvaScript](http://www.reddit.com/r/javascript/comments/cv65y/pyvascript_python_inspired_syntax_for_your/), or [Emscripten](http://www.reddit.com/r/javascript/comments/ddil1/emscripten_is_an_llvmtojavascript_compiler/)? &gt; coffeescript belongs in r/ruby or r/python, people who prefer that syntax Are you honestly trying to assert here that the surface syntax matters more than the entire semantic model, libraries, platform, and ecosystem running under it? &gt; people who are interested in javscript do not care to start writing in a new syntax in a language that isn't javascript. Really? The people took a vote and appointed you their representative? How do you reconcile that with the fact that [articles on CoffeeScript posted here](http://www.reddit.com/r/javascript/search?q=coffeescript&amp;restrict_sr=on) seem to get upvoted?
I hope he applies more quality control on content of this book than he does on his website. **Edit** &gt; Last edited: Sunday, 27th 2011 First line of the book, I think he accidentally a word.
&gt;You're pretty wrong about 'nobody has ever felt compelled to adpot it' Outside of ECMA script, the only other prototypal-based language that people would even recognize is lua. &gt;Also, prototypical inheritance has nothing to do with syntax. It was your insinuation that CoffeeScript was all about syntax that started this. CoffeeScript offers a much cleaner classical inheritance style declaration. 
Multiple returns in lua do not create new tables, even internally. The values are put on the stack, so their cost is just a few move instructions. Any unused values are destroyed automatically as the stack frame's memory is reused; this is unlike the javascript example using a new object, which is created on the heap and must be GCed.
i know all the features of coffeescript, i do my homework. coffeescript is not a net positive if you are interested in working with javascript. coffeescript is a fork of javascript, if it is related to javascript at all. to use coffeescript is to throw the baby out with the bathwater, it takes you away from javascript, not closer to it. your assertion that it is 'much cleaner' is personal preference and has no basis in fact. if you would rather not code javascript then get the fuck out of r/javascript.
thats all fine, but to suggest that javascript can't return multiple values is not true.
Wow, really? Is r/javascript full of highschoolers?
apparently it is full of people who would rather be coding coffeescript.
I went to [chattrr.com](http://www.chattrr.com) and lol'd. (nsfw)
Ok, well this makes more sense now. I know you think partaking in language evangelism adds to your nerd cred, but it doesn't. Nor does it make you a better programmer. Now to fill you in on something that you clearly don't understand: CoffeeScript is a syntax that ultimately compiles into javascript. Just because someone may prefer to write CoffeeScript doesn't mean they have no interest in Javascript and it would be absurd to imply such. Secondly, since javascript is *the* language of the web, there are lots of people who begrudgingly need to learn it. I happen to be one of those people. I can voice my opinions on here, and you may not like them, but that doesn't mean I should leave. Grow up, learn how to have big boy conversations.
Under the heading "Constructors with Prototypes" is the following code example: Car.prototype = { toString: function(){ return this.model + " has done " + this.miles + " miles"; } }; Correct me if I'm wrong, but shouldn't it be: Car.prototype.toString = function(){ return this.model + " has done " + this.miles + " miles"; } In the first example, the prototype chain is being clobbered... or am I not understanding something? edit: accidentally capitalized prototype in the second example
&gt; window.addEventListener('keyup', function(event) { Key.onKeyup(event); }, false); No need for the extra function wrapper: &gt; window.addEventListener('keyup', Key.onKeyup, false);
My personal coding standards treats passing references to functions like that like single line if statements, it's just most consistent and thus easier to maintain if you add curly braces, or in this case wrapping callbacks for event listeners/timeouts in an anonymous function.
Fair enough. I personally prefer the simpler version, but they're both correct which is all that really matters.
Removing that "extra" function wrapper will change the binding semantics: The function will no longer be bound to the `Key` object but to the `window` object. And that will result in `this._pressed` not being defined. You could use Function#bind, but that is not available in older browsers, so you would have to add a polyfill for it.
I don't need any nerd cred. I don't crave approval. I've been coding too long to give a fuck what some noob says. Downvote me all you like. For every bash against javascript by a coffeescripter, I will bash right back. I don't care if you think I'm immature or whatever the fuck, get off my fucking lawn. If you don't like that, then don't reply to me. From where I sit your opinions happen to be incorrect, so voice them all you want but that doesn't mean coffeescript == javascript, and I'm never going to let you or anyone else get away with saying that it is in r/javascript while i'm still here. spilling your coffeescript hype in r/javascript is just bad form, it's rude, it's condescending, and it's unwelcome. If you can't see that then you are just obnoxious. really. quit pissing in the well. 
You're absolutely right. Sorry, I missed the reference to `this` in the function. That said, the `this` is also superfluous. I would have accessed `_pressed` directly in the key handlers so that they don't depend on a calling context. But that's just my personal style. 
Yeah, it definately depends on your personal preferences (and how much you value function reusability, which in this case might actually not be important at all). :)
using this in an object literal used as a singleton might not be the best idea. Also separating the keyboard constant shortcuts and the keyboard state might allow this: var Keyboard = { ’Left’: 37, ’Up’: 38, ’Right’: 39, ’Down’: 40 }; Player.prototype.update = function() { for(var key in Keyboard){ if (Key.isDown(Keyboard[key])) Game.player['move'+key](); } }; all in all nice articles!
`Car.Prototype` != `Car.prototype` Car.Prototype is just another object underneath Car, meaning that the `toString()` method can only be called on it: Car.Prototype.toString() Car.prototype is the prototype of Car, so the `toString()` method is available at the top level. 
Please ignore the yellow output - that's our debug data.
Hover seems to be a good idea, however it's best to use colors and symbolic representations that help distinctly identify the cards even when zoomed out. The card design could be enhanced to support this. BTW, it would be best to also try a flexibly layout. For e.g. I didn't notice the bottom row that had the card stack because I was not browsing full-screen.
If you cannot read the cards contents, why not simply just display the card's image, the unit picture (I guess) and get rid of the text, frame and additional information that cannot be seen properly? You could then reserve a part of the screen as a place where all card information is displayed properly in large size, that updates as you hover over any card. Additionally, at some point you will want to add application control buttons, which might fit well around that info box.
Other than the accidental caps on prototype, yes, you're right. The code would in fact destroy whatever prototype was there (though Object.prototype would still be there)
Nice, I've been keeping an eye on Node and often wanted to build something substantial with it, but the potential pitfalls with it being so different to other solutions cause hesitation. your insights are appreciated.
It's only at v0.4? I'd be waiting for 1.0 stable before committing my time to making anything serious in it. Using alpha software is painful, it changes too much and before you know it you have to rewrite your code again with each release.
&gt;I've been coding too long Yes, with gems like "CoffeeScript is a fork of Javascript" your vast experience is immediately apparent.
Is it me, or are all the node articles by this guy huge ball breaking cock teases? It always seems like he starts off strong but sort of tapers off at the end.
:-) Good looking.
This has been my experience toying with it for a few nights, any tutorial i've seen on building a trivial application falls down because things aren't like they seem in the tutorial because so much has changed
why does this blog look exactly like the apple web site?
Anyone else made nervous by the "cutting corners with web requests" bit? 
So put style='opacity:0;' on the element you want hidden...
This guy is pretty shameless in ripping off other sites style. His social networking sites logo looks kinda Arch-y.
Is this some sort of meme or inside-joke ?
Seems to be a fine article, until you get to the spot where he says: &gt; To be completely honest, and slightly heretical, I don’t really use MVC properly myself. Come on. It would have been nice to know that in the first few pages... (edit: formatting)
This is actually a pretty good idea. I believe Elements does this to great extent, although I feel like it would be better to see detailed cards of the entire hand (or cards on the field) as opposed to an individual card, which is what Elements does. 
Thank you all for your comments and suggestions. I'll look into what I can do with the information here. Thanks again!
It's called a wooosh.
We discovered that one the hard way and are looking into changing it, it was not intentional.
Thats certainly not the intention ... do you have some more specific comments on what I can improve?
Your feed requires a login. Could you post it on a pastebin site like pastebin.com or pastie.com?
It really just depends on how important it is that you tell the user the truth, all the time. For example, lots of blog comment systems do this now -- when comments are moderated (that is, not actually displayed until they're approved), the user who posted a comment will immediately see the comment as posted, even if no one else does. This cuts down on people re-posting the same comment over and over again because they didn't notice the little "your comment will be posted after it has been approved by a moderator" text. This isn't a whole lot different. For something not-very-important, like an online poll for "what is you favorite kind of cheese", it might be better to let the user *think* you've recorded their vote, even if you're still working on actually writing it to the db. This way they get an immediate result (no clicking back and clicking submit again because it's taken more then three seconds to post), at the cost of only being *reasonably* sure that you will actually record their vote. Edit: As an example, it took me three tries to actually get this comment to submit. Without having read reddit's source code and not actually knowing what it goes through to submit comments, I could easily envision a some sort of durable process that holds on to my message until it *actually* submits. Meanwhile, I could immediately be told that my message submitted, and could go about my business, instead of staying on this page and pressing "submit" each time the error appeared. I would be none the wiser.
I like to keep my browser window at 1280x960, just as an intermediate resolution similar to what most visitors to sites I work on from time to time. You could just increase the overall size of everything, unless you're worried about having space for ads and things around the edges, or fitting it into game "windows" on portal sites, which typically size restrict to nothing above the 650x350 or 640x480 range. I think you've got quite a bit more screen space than you think you have. You could add a zoomed in view to the right of the playfield; even on monitors large enough to view only your current playfield, the user could scroll right to see it. This may be easier than the tooltip zoom-in to implement. If you are size restricted, think about showing only one empty card spot for each player and making them larger; later in the game, this may mean scrolling, but if many games end before that many cards are played and stay out, then I believe this would be an overall win by getting rid of empty space, allowing card images to be larger. Similarly, is it necessary to see the opponent's hand? If not, don't show it- if it is, you might make it viewable by hitting a toggle button. This would recover a lot of vertical lines, allowing larger, more legible card images. With or without a larger playfield, a redesign of the cards may be in order- most games in this field owe a lot to Magic: The Gathering game design wise, but that doesn't mean you have to follow it's nearly 20 year old lead (in another medium, no less) in visual design. Show the vital stats of the cards on top of low-res scans, vary card and/or border shape/color by type. Alternatively, use color tone to indicate such differences and make the entire "card" a backround picture, card text available on hover and/or in an examine window to the right or left. If encourage you to take a look at Spectromancer (A redesign/remake of Astral Tournament by Alexey Stankevich, with Richard Garfield and Skaff Elias of M:TG fame). The "cards" are pictures with unlabeled vital stats in the corners. On hover, full text and abilities are viewed. Only your hand is shown on screen, pressing a button allows you to see the opponent's. While the cards are all square, the shape of the image on them denotes card type.
Well, for one thing, your post on setting up node sites to be "REAL MVC!", seemed to trail off after your folder set up, and didn't actually allude to how you thought the best way to set up node as an MVC, there was no example of any system you built. In this post, however, you've tried to allude to Node being used for a real website, but you've not really mentioned any concrete details, just how node compares to PHP (which, is not really a comparison, they are completely different technologies), but you haven't mentioned and specific instances where node was easier, or when it threw you for a loop.
On your first point, I'm working on a decent example here: https://github.com/tglines/throughexample because people wanted a real example of the MVC setup. (I haven't finished it yet b/c I want it to be substantial) On the second point, I guess I probably should have put in more specific examples of when exactly it was easier than something similar in another toolkit. Thanks for the feedback.
no probs
It shouldn't require a login, but here is an reduced version of it on [pastebin.](http://pastebin.com/ZsHvEhCf)
you really should use parseInt(string,10) to make sure your string converts to decimal and not octal. It's a well known gotcha in javascript, but a simple one to avoid. 
Probably an 'Apple' wordpress theme.
Agreed. You can either hover: * Over center of screen * Over card itself * In a separate designated are --Robert
How does the lua(jit) stdlib compare to javascript's? What are the killer features of lua(jit) compared to javascript? Can lua be used for scientific computing, web development, gui programming, creating games? Does it have native threads, no GIL? Is it a viable language for creating big applications in it? Javascript may be getting fast, but it is going nowhere as far as the language is concerned. Being tied to the web means it is evolving slowly. How does lua compare in this regard, is it as stagnant? I know, generic questions, but I am actually considering learning lua. Although I'd really need to be convinced. I admit, I do find JavaScript quirks very annoying, it's a cool language otherwise. Lua seems very similar without JavaScript's flaws and that's appealing.
&gt; Do you always type "document.getElementById(id)" ? Yes.
&gt; Why would I NOT do it? No idea. Go ahead at any time. You'll find eventually that it's a waste of work over what is, in essence, a trivial amount of re-learning, and that whereas you make your code impenetrable to JS devs and introduce all sorts of expectation-driven defects into your code, it's also going to take you more time than just writing JS in JS, instead of writing VB in JS. But if it's what you really want? Have fun.
Well, considering it's going to be a proprietary private webservice, impenetrable is actually a good thing. And I'm doing it mostly in JS, I'm just talking about the odd function here and there not converting it all to VB And honestly, it's no different from the assorted toolkits out there that do assorted things to the various functions like dojo.byId(id) etc. 
noted.. I hadn't heard about that one. 
I feel the same way about dojo.byId().
^ this
Thank you for your excellent post. Regarding space, we're trying to do our best to cut down on size since we eventually want the game to be playable as a mobile application. Regarding hiding the opponent's hand, while players can't see the specific cards in their opponent's hands, I believe knowing how many cards the opponent holds in his/her hand is important in making gameplay decisions. Plus, the game feels a bit unnatural when the opponent's hand is hidden. My dilemma currently resides in whether we should show detailed information for one card, or try to fit detailed images of the entire hand in some kind of row in the interface. For one card, there aren't many issues in implementation - for the row, we have to account for how the game field (cards in play) would be shown as well, especially since both players have a separate field. What do you think?
There is an issue with Opera which will be fixed with 11.10+ (CORE-37 Cancelling onkeydown does not cancel keypress). My temporary single line patch (which basically just eats unmodified cursor keypress events) looks like this: if(window.opera)c.addEventListener('keypress',function(e){if(!e.shiftKey&amp;&amp;!e.ctrlKey&amp;&amp;!e.metaKey&amp;&amp;e.keyCode&gt;36&amp;&amp;e.keyCode&lt;41)e.preventDefault()},false); 'c' is my canvas, by the way. Without that workaround in place the browser will happily scroll around if you listen to keydown (even if you prevent the default action and even if you return false [=prevent default and propagation]).
 Javascript core functions are similar to lua, e.g. Array.join vs table.concat. Lua has an I/O library. Javascript has a window and document object. Scientific computing? [NASA uses it](http://www.cv.nrao.edu/adass/adassVI/nguyend.html) Web development? [Kepler project](http://www.keplerproject.org/) GUI programming? [Qt](http://www.nongnu.org/libqtlua/) or [wxWidgets](http://wxlua.sourceforge.net/) Games? [WoW](http://www.inf.puc-rio.br/~roberto/lua-uses.html#219) among many others. There are so many others the list [has it's own wikipedia entry](http://en.wikipedia.org/wiki/Category:Lua-scripted_video_games) Native threads? No but it has coroutines. Big applications? Adobe Lightroom is [40% lua](http://en.wikipedia.org/wiki/Adobe_Photoshop_Lightroom) I do still love Lua and I probably mislabeled this post when I made it. It's not so much that I switched from Lua to javascript as I switched from app development to web development and fell in love with javascript as well. 
The gist of it seems that there are pros and cons to both and while using prototype is actually quite fast there is something to be said for the data encapsulation of a closure.
Thanks. I am also wondering what is the state of LuaJIT, is it a drop in replacement and I am guaranteed to run just about any lua code/library? Or are there some inconsistencies still, but will that get resolved in the future? True, javascript's strenght is being in the browser everywhere, but who knows, that may change in the future (think google NaCl). So I wouldn't being being stuck to app dev with Lua (for the time being).
via: http://www.rubyflow.com/items/5337-js-class-3-0-a-portable-javascript-class-library-based-on-rub
Direct link to plugin: http://plugins.netbeans.org/PluginPortal/faces/PluginDetailPage.jsp?pluginid=36653 Note: Only runs on unix based operating systems.
Well said. Javascript and CSS are *extras* - the foundations of the web are HTML and HTTP, and anything which requires - at a bare minimum - more than that is *on* the web but not really *of* the web. While it's common in practice to compromise on some of the finer details (just look at reddit's voting/commenting breaking without javascript enabled) for reasons of developer-time, efficiency or other considerations, it#s important to realise that *this is a compromise* on good web design for expediency's sake. The reason the web works so well is that at its simplest level it's just a bunch of static text files - all a script, spider, browser or the like needs to understand is HTML and HTTP, and it can use the web (thereby extracting and adding back value exponentially). Javascript and CSS and the like are useful *additions* to that, but if you lose sight of the technology stack and break the very foundation of the whole medium through some misguided lust for novelty, you also lose most of the benefit of *using* the web, as opposed to just distributing - say - PDF files with embedded hyperlinks, or rendering your entire site as an imagemap with clickable hotspots, or an all-in-one Flash animation. And then people come up with ass-backwards "fixes" that managed to re-implement some of the lost functionality (cut-and-paste and history in Flash animations, bookmarkability and RESTfulness in JS applications, etc)... but all this (and more!) is *available automatically, for no cost, if you just design your system properly in the first place*. I have this fantasy that one day most people on the web will actually *understand* the medium they're working in, and we'll stop seeing the same, tired old mistakes perpetrated by idiots, but using whatever new techniques or technology are trendy this time around. TL;DR: There's a right way and a wrong way to implement any new technology on the web. If you break basic, fundamental assumptions or attributes like RESTfulness or "browser histories" then the correct response is to back up and re-implement your system *properly*, so it plays nicely* with the way the web works, not to press on further down the wrong path and start having to rebuild bits of browser functionality into your app or site simply because you're too fucking stupid to reconsider your approach. Gah!
 It is true. It's not a feature of the language. To return multiple values, you have to construct an array/object and return that. You are still returning a single value - an array/object. The key here is that in lua it's a property of functions, something javascript functions don't have. Saying they do have it is like saying lua supports the ++ increment operator because it can do i = i + 1. 
while you are technically correct, the methods produce the same result, returning multiple values.
 //Chrome, Safari, FF4, IE9 var purchases = {butter: 3.00, soap: 5.95, pineapple: 3.50 }; Object.keys(purchases); //['butter', 'soap', 'pineapple'] Be careful with this example; I'm pretty sure the returned list won't always be in the same order.
I think the problem here is that many people are pushing new tech while breaking the old tech. I believe there's a lot of value to be gained from using other mediums of transferring data than html (like json over simultaneous ajax requests), but it's not worth dropping support for the traditional methods (plain html over a single http request). A properly implemented website would use the latest tech (html5, css3, ect..), while gracefully degrading to the lower tech (css2, no javascript, ect..). It would consider all types of clients, a high-end gaming PC running Chrome, a small work laptop running IE6, an automated bash script running cURL, a mobile phone running Android, a robot crawling the website, ect.. Please do not discourage people from trying to invent and evolve the web, only guide them from losing sight of what makes the web stable. 
&gt;A properly implemented website would use the latest tech (html5, css3, ect..), while gracefully degrading to the lower tech (css2, no javascript, ect..). It would consider all types of clients, a high-end gaming PC running Chrome, a small work laptop running IE6, an automated bash script running cURL, a mobile phone running Android, a robot crawling the website, ect. FYI, it's 'etc.' not 'ect', because it's a contraction of **et** **c**etera (not trying to be a jerk, just want you to know). Correct me if I'm wrong, but isn't it extremely difficult to provide the level of graceful degradation you're talking about? I'm a complete novice when it comes to web development, but I think it's incredibly painstaking to provide that level of cross-platform/legacy support.
&gt; Correct me if I'm wrong, but isn't it extremely difficult to provide the level of graceful degradation you're talking about? Yes, which makes it time-consuming and expensive. Especially to test and verify all those use cases. Not that I'm against it, but it's a little more than an extra line on a list of deliverables.
Thanks, I think I pronounce it "ex-set-era" so I brain thinks ect is correct, but you are correct. Yes, being backwards or cross-browser compatible is generally a painful process. It is perhaps the bane of my existence, but it is also what makes the web so accessible. I think we should strive to accommodate as many clients as possible, but in reality we each have to draw the line somewhere. I personally refuse to support IE6 anymore, too much blood has been shed. I personally feel providing a JSON api is better than scrapping the html markup for data, but because so many tools are already built around that concept (like search engine crawlers) it's important to continue to support them. Programs can be beautiful individually, but combined they can become greater than the sum of their parts. That's why pipes work so well in unix and why standards are so popular today. That's my opinion anyway.
&gt;That's why pipes work so well in unix I run GNU/Linux, could you explain what you're talking about here? If there's something I'm not taking advantage of I want to know! :)
[Unix Pipes](http://en.wikipedia.org/wiki/Pipeline_(Unix\)#Complex_example) are a way of connecting programs together. By agreeing on a standard out and standard in, programs can be combined together in ways not predicted by the authors. I was drawing a parallel between unix pipes and http/html. Because both http and html are standards we can use them as a transition between programs.
Thanks for explaining about that!
Gah!
The jQuery method is $('sharediv').html(share_html); Also, maybe $('sharediv') is supposed to be $('#sharediv') or $('.sharediv')?
What are you including to transform the share link into a button? You need to trigger that code *after* you recreate the link. If you have a live demo I can show you through it.
It's not a technically difficult procedure, but it is time-consuming and requires a considerable breadth of knowledge. Just look at the list of devices and platforms sunsean mentioned, each of which needs to be tested separately, often requiring different physical hardware to do so. More importantly, clients don't seem to care about the 2% of the user base that doesn't allow/support Javascript, etc. There is rarely much of a monetary incentive for more than the bare minimum.
Don't sell yourself short: while you may not test with IE6 or consider it while building a project, if you follow basic standards like this thread is discussing, you *don't need to.*
They're using Prototype, probably. Don't assume that everything with `$` is jQuery just because that's all you have used. Sorry to sound offensive, but clearly the HTML *is* being updated, so the use of `$` isn't likely a problem.
In my experience, systems designed with progressive enhancement in mind are more modular and simple (on the code side). I think this is usually a consequence of that pre-planning you rightfully say is "time-consuming and requir[ing] [much] bredth of knowledge". Most messy systems which are JS-centric with the back button, URL bar, etc. not even considered don't have much pre-planning; it's more "hey, let me whip something up real quick in jQuery". In addition, projects where pre-planning is nearly nonexistent usually fall into traps or shunned practices such as passing HTML over the wire with AJAX (instead of JSON/XML representing the data), validating only on the client side, not properly escaping user data, and disregarding performance and portability (cross-browser, cross-device) considerations. It's not as if they were *low priority items*; it seems like the problems don't even exist in the minds of the developers until it's too late.
This is likely correct (my suggestion was wrong-- read through it too quickly). To clarify what strager means, the page is doing this: 1. Finds all instances of twitter-share-button and updates them appropriately. 2. Creates your twitter-share-button (via the javascript you posted). This needs to happen in reverse order.
No it's fine, I made too many assumptions there.
&gt; Maybe it's because the browser tells you it's done, but you don't see any content. I think browsers need to let you know (unobtrusively) whenever a page requests a resource (_any_ resource), whether it's user-initiated or not. In other words, show the user the browser is busy when it's busy.
That behaviour is inconsistent between systems/browsers. In addition, different resources and *methods* of loading resources trigger different notifications of "busy" in different browsers. Sometimes the "e" animates in IE; sometimes the tabs icon is a spinning circle; sometimes the cursor has an hourglass; sometimes there's a (pretty much hidden) notification in the status bar; sometimes there is no notification to the user that the browser is doing anything at all. I believe all browsers *do* notify the user when the HTML is downloading, and I would be surprised if modern image-supporting browsers didn't notify the user when other direct resources such as images and CSS are downloading. However, XHR (which is often used to load page data) typically doesn't trigger browser a loading notification (in most cases) (because XHR is *supposed* to be transparent to the user; it'd be annoying for a polling script on a site to play with your mouse cursor inadvertently).
&gt;a small work laptop running IE6, an automated bash script running cURL Is it wrong if I deliver the exact same experience to both of these users?
Which is one of the great things about javascript. It can do almost anything you want, even if it doesn't have a special keyword or special syntactic sugar to do it. 
Wouldn't the people that make Node.js have already gone through the work of embedding V8? So somebody has done it, maybe they have documented it.
javascript has plenty of 'syntactic sugar' (my least favorite programming phrase). It's both unique and similar to other languages (C, java, C#). It's evolved through the years and is still evolving, though the 'plain vanilla' version, javascript 1.5, runs in all browsers and it has plenty going for it. Javascript isn't suitable for every application - but for the web, and tasks that fit it's execution profile, there's no better choice for a standards-based solution. 
..man this is such an interesting article, it really goes deep into the API to show some insight
Yup, he is right, I'm using Prototype :)
I detect sarcasm. I think it demonstrates a very good point in a really concise way with no BS. Bookmarked and up-voted. (Upvoted you too incase you weren't being sarcastic).
I think I got what is the general problem. Just to be sure that I got the problem, basically when I enter the website it "parses" the site and "replaces" all the twitter instances when they are called. What I do is that I create a new instance of it, after the "parse" is done so it doesn't create a new instance like I was expecting. This is the problem right? (Sorry if the terms aren't the exact ones). So how do I turn this around? I tried to include the script in the end of my new instance, I added: '&lt;script type="text/javascript" src="http://platform.twitter.com/widgets.js"&gt;&lt;\/script&gt;'; at the end of share_html, but it didn't did too much :( Any suggestions? Thank you for the assistance, at least now I get the problem! :) EDIT1: What I'm using to transform the link is the script I showed above, I think :)
So... You should use both == and === in your code depending on circumstance? In crockfords book he says you should always use === to avoid any issues...
I think arguing over this/talking about this/saying this is style/" the correct way " is bordering on the absurd. These people have too much time on their hands! Its like saying this is a pattern: var o = {}; callign it Object creation pattern.. Thats not a pattern thats a language feature, grammar... or this is the constructor pattern: function constr(a) { this.a = a }; var o = new constr(); Thats not a pattern!!! And IMHO this isnt something to debate! You use them when they are required to test for the exact type match ( bearing in mind javascript engines quirks with certain types ). Grrrrrr Besides making your code conform to JSlint or JSHint is such a waste of time.. Maybe when your app has matured past 0.4 etc, then that might be worthwhile, but generally we write js in a certain style or syntax because it has a functional reason todo so.. Not because I need to convolute it so its passes somebody else idea on how to write it! Thats the only reason.... And if you cannot read javascript unless its in that style,,.,.. then you have problems! as its not exactly the biggest syntax/grammar in the world of programming languages! This type of conformity suite would be better off in the c++ world... 
Got it! *Yay* The tip to "trigger" the Twitter code after the new share button was the key, and some googles after I got this: http://www.javascriptkit.com/javatutors/loadjavascriptcss.shtml And it's working now! Thank you all for the tips I was stressing out already &gt;&lt; Free Karma! Also for the downvote, I'm sorry I want to learn javascript that badly :)
Who else made a Star Trek com badge on the demo?
Loving all these node articles. Having used it for a couple weeks now I don't want to ever go back to tomcat or jetty. It's so elegant and simple and with socket.io makes two way communication ridiculously simple. I just wish javascript moved on a bit with all these proposals that never actualise... 
Actually this is **exactly ** the same as with Flash. The technology itself is not bad for a limited set of purposes, but the bad implementations are what cause problems. Remember those sites that used Flash to display a fancy font instead of proper HTML or even an image? Or hover-animations in a navigation menu? On some ridiculous sites there were as many as 20 embed Flash elements. With JavaScript it's sort of the same nowadays: When you load i.e. a blog, the first thing that happens is that up to 40 different 'Like'-buttons are being fetched from facebook, twitter &amp; co and inserted into the page. See how fast [Mashable](http://mashable.com/) loads ..
[repost](http://www.reddit.com/r/javascript/duplicates/fvs84/naked_password/) and stupid.
This article makes the mistake of assuming you need to work with a library to un-spaghetti-fy your JavaScript. If you care enough to write spaghetti free code, you should care enough to learn how to do it without any assistance, first. If the libraries make things easier on large projects, so be it, but don't rely on them to magically fix all your spaghetti problems. Edit: grammar.
Agreed.
&gt;Proxies **~=** metatables. Haha are you trying to say approximately equal to? That means something entirely different to a Lua programmer.
If fairness, anything looks good next to a java solution. Node is the current silver bullet of the programming community. I wouldn't invest too heavily in it yet, or at least be sensible about what it's used for.
Question raised by article: How does one draw quadratic curves on an HTML5 canvas? Answer: ctx.quadraticCurveTo This article would've been just as useful a tweet.
tl;dr - Callbacks are hard! Let's go shopping! Maybe you should consider actually learning JavaScript instead of resorting to a leaky abstraction, just so you can write procedural code.
1. Javascript. Not Java. Not that you're actually looking to learn anyway. I don't believe you. 2. A bookmarklet would be suitable for this task. 3. $('form.del-button .yes').trigger('click')
That was my reaction too.
Obvious troll is obvious.
I don't understand this reaction. Extensive use of callbacks creates code that is hard to maintain/read but is necessary if you want to write flexible/extensible JavaScript. The author obviously understands JavaScript. Maybe you don't agree with the antidote to the problem but you can't deny that it is in fact a problem. The antidote definitely isn't pretty but neither is the problem. What is your antidote?
The best solution to this problem is promises. You can write your own promises library or use an existing one. It's 100% Javascript, and it's 100% Spaghetti free.
&gt; Extensive use of callbacks creates code that is hard to maintain/read but is necessary if you want to write flexible/extensible JavaScript. If you've got "Extensive use" to a degree that it's hard to read then you're probably doing something wrong. Ajax call? Use a callback. But just one. If you're chaining Ajax callbacks together, that's absurdly inefficient; make one call for everything. I'm not sure how that's any harder to read than calling a function. &gt; you can't deny that it is in fact a problem. Yes I can. Event driven code tends to be less coupled and better factored. And this framework wont help you with event callbacks. &gt; The author obviously understands JavaScript. Understanding JavaScript syntax and coding things fluently in JavaScript are two different things. In fluent JavaScript, you write event driven code and it works quite well. Not to mention that the author uses raw XmlHttpRequests instead of a framework. When you try to code JavaScript like it's a procedural language, then yes, you do end up with hard to read code, but I don't think you can say that you really understand JavaScript.
Haha, shit. That's not what I was going for! I meant: Proxies ≈ metatables.
Well, they still don't have any coupons, just like when I tried 2 weeks ago. Guess I'm still on linode for my node hosting, which I can't coplain about. After doing an update on a new gentoo image it took me 5 minutes to get node and redis all set up, compiled from source. No problems at all so far. What is so great about no.de that linode doesn't already offer?
I think many people missed my main point, here's a shot at explaining it better: http://zef.me/3753/planning-ahead-the-async-javascript-problem
I said it on your blog and I'll say it here: a lack of planning leads to bad code. Period. Rather than planning ahead, or at least refactoring later, you're advocating adopting a leaky abstraction so that you can write procedural code, instead of adopting JavaScript idioms that are perfectly readable and familiar if you actually bother to learn JavaScript. You're basically being an ugly American, going to JavaScript-land and asking "What can't JavaScript speak American?"
 FB.Event.subscribe('comments.create', function(response) { $.get("/ajax/emailwhensomeonecomments"); }); So, you're adding a new event handler to the "comments.create" event. When it fires, it'll do the action listed inside the function body, which I've used a jQuery get for. (NB, you can't send email from JS, you need to hit something on your server to send the email) Also note that you'll need to include the facebook setup code before this, which includes a &lt;script&gt; reference and a div with a specific name. (This is all documented.)
Hmm what sucks is that it seems possible to win without using the theme.. so is there any point to stick to the theme really?
I don't know what he's talking about (again) - you can still use JS constructs while using async calls (why you'd be using for loops in the day of forEach and map is beyond me (with _ if nothing else...)). But async really isn't that bad. Instead of doing x=a() y=b(x) doSomethingWithY(y) you do _.bind(a, this, _.bind(b, this, doSomethingwithY)) It's a bit longer, but it's still more terse than Java. If you want a loop, put it in a() or b(). I've written am 100k LOC app like this in pure JS and it really does scale! 
Firequery is pretty amazing, integrates with firebug, and shows jquery-bound events in the HTML tab just like classes, ids, etc https://addons.mozilla.org/en-US/firefox/addon/firequery/
Howdy all. As the title suggests, this is my first non-toy project, and I was hoping that you all could let me know what you think. Feel free to tear it apart, from features that you think it's missing (or doesn't need to have), to coding style, to bad habits I'm displaying that need to be nipped in the bud. This has so far been primarily intended as a learning experience, so feel free to be brutal, so long as it's constructively brutal. I have no illusions that this is ready for prime-time, or that it will necissarily be anything other than a step out of noobdom, but I'm trying to become a better scripter, and I figure a good-old-fashioned public eviseration might do the script (and me) some good. Of course, any words of praise and/or encouragement would be welcome, but not expected. There are two things I DO know need improvement. First, I know the comments could use some improvement: hopefully there's enough to understand the basic workings, but I'm still trying to get the right balance between not enough commentary and commenting the obvious. I'm also still working on the documentation (any advice on that front, or good examples to follow, would be much appreciated though!).
if they implemented a ui more like jsfiddle this would be really nice. 
A few notes in no particular order: - it could be useful to be able to parse document.cookie again after the initial load. You never know when an XHR request is going to mess with the cookie jar. - in getNew, I get the feeling you meant to use `this._newCookies[cook]` instead of `this._newCookies.cook` - OCD folks might be tempted to push their own coding style on you ( `Stuff.prototype = { member1: ..., member2: ... };` for example, or grouping all your `var` at the beginning of your functions, or using intermediary variables to cache references so you don't have to keep referencing `cookieJar.defParams` in Cookie's constructor.) Those things will shave entire micro-seconds on your execution time. Are they worth doing? Maybe. I do them because I'm obsessed, and sometimes JSLint whispers to me at night. - But seriously, JSLint has a lot of crazy ideas on what your JS should look like. Most of those ideas are actually good. Also, if you want, try running a JS compressor on it (YUICompressor or Closure compilers are two popular ones.) Then you can get obsessed with shaving 5 more bytes from the compressed output. C'mon, you know you want to. - Also, why so many comments? no, I kid, I kid. But if you're going to be *that* hardcore about comments, consider formatting them so that some kind of auto-generating doc tool can use them (doxygen, yuidoc, or whatever else kids are using these days.) Yes, it's a wee bit overkill for a single file, but if this is the prelude to something much much bigger, it'd make sense. Anyway, overall, it's rather good for a "first non-toy project".
Honestly, I feel this is overkill. I'm not sure how much value this adds. I understand the point of it all, but it seems to me that cookie manipulation is better suited to a single get/set method. As far as your coding, I'd be happy to see this quality in a production site. No glaring issues, just a few minor tweaks. As previously mentioned, try tossing it in JSLint (or JSHint if you are fashionable). 
&gt; sometimes JSLint whispers to me at night Lucky you. It screams at me, just when a sex dream is getting to a good bit
..tabs?
You should consider only one namespace and properties/functions on that namespace, not Cookie and CookieJar
Given the context, I think he meant going around replacing each '==' with one '===' is stupid without taking into account the logic.
Is there anything unique your framework will do that the others don't?
TIL about reactive programming. [Direct link to Flapjax's own tutorial](http://flapjax-lang.org/tutorial/)
In IIS you can set the server to expire the page immediately so it will not be cached. not sure how to do that in apache. Or lookup the pragma no-cache meta tag.. 
It depends what you're trying to achieve. If you want to avoid resource caching at all costs, I would recommend appending a timestamp in the querystring - e.g. resource.js?1309812385. Unless your application files are dynamically generated, however, there's never normally a reason to do it this way. Instead I would recommend versioning the files. Typical format would be major version, minor version, revision number, so: resource-1.3.12.js, etc. Every time you make a slight amendment to the code, you increment the revision number. Major and minor versions are reserved for release milestones. Of course, if you're using some sort of build process to compress and compile your JS resources, you can automate versioning the files.
Thanks! This is exactly what I'm going to do. :)
Hmm maybe being pedantic, or playing devils advocate, but I dont see flapjax as language ( why do they call it one ), despite parsing its " syntax " it seems to me just another library... 
Right... So then I did read it right? Write your code with === always?
Thanks! And just for those who don't already know: [r/node](http://www.reddit.com/r/node/). :)
classical slapstick this dude need chapstick
it's sintax, selectors and functions, they just rock.
Here is a good talk by the author: http://www.yuiblog.com/blog/2010/12/06/video-yuiconf2010-croucher/ He does a really good job explaining how to think about the event loop.
Callbacks are great and readable to a degree, but eventually they get difficult to manage. I can only image that you haven't worked on a complex enough javascript project yet to really see the point where the un-manageability crops up. And I know you're probably thinking in response to this, "you just need to re-factor your code to make it less complex". But sometimes this isn't possible -- you really do have *no choice* but to chain callback after callback after callback. And the author of the article (like me) has clearly run into this actual problem before and is trying to offer solutions. Unfortunately, I don't think you'll be convinced that this absolutely is a problem until you've run into it yourself. And it has nothing to do with trying to write javascript procedurally, nor was anyone trying to do this. It's a functional language -- I know this and the article author knows this.
Once you get the twist what jQuery enables you to do and you adjust your coding style to take the maximum benifit out of jQuery, you can set up anything super fast and easily. But again, it takes some time to get into the jQuery style. In comparison, I found MooTools a bit easier to learn and understand in the beginning as it would fit into my previous coding style more swimmingly by mostly supplying helper functions. However, now I'm hooked on jQuery : )
For a testing / debugging setting: Given your HTML output is dynamic (i.e. PHP) you can dynamically add the filemtime timestamp for each included .js file to the url as described above. Dirty code, for lazy people: &lt;script src="myjsfile.js?&lt;?=filemtime('myjsfile.js')?&gt;"&gt;&lt;/script&gt; .. will change the number on the back whenever you edit your file and force the browser to refetch the script. &lt;script src="myjsfile.js?1234567" /&gt;&lt;/script&gt;
This is cool, but you forgot to mention the Air component which gets the info for the JS code. I've been looking for pure HTML visualization code for some time and I believe [Firefox is the only browser that shows them](http://www.nihilogic.dk/labs/pocket_full_of_html5/).
The API looks pretty great. :)
I have been looking for some great editors that help promote quality code while building out more application-like javascript projects. These could be described as single entry point apps. Currently I'm using textmate but would love to hear of options. My friends swear by vim but it seems so arcane. Any thoughts?
[Eclipse](http://www.eclipse.org/downloads/packages/eclipse-ide-javascript-web-developers/heliosr)?
My #1 is VIM, for sure. But #2 has to be the [Cloud9IDE](http://cloud9ide.com/) JS IDE. I &lt;3 the cloud.
All I gotta say is I hate the orgeon trail - one of the most boring educational games ever. Now I have to come up with some anti-oregon trail themed demo...
I'm actually moving away from eclipse. I found it to be just too much of a beast on osx. I'm not sure if it's the java runtime on osx or what but no matter how I tuned it and raised memory limits, it always felt incredibly sluggish. I've tried AptanaStudio too but didn't see as much of a difference as was suggested. Do you have a similar experience using eclispe or any tuning / configuring tips?
Cloud9IDE sounds interesting though it's hard to tear my thinking away from purchasing a license to 12 bucks a month. Which pricing plan did you go with if you don't mind me asking? As for VIM, do you have any favorite resources for helping people get started with it. I've followed a few and just never got to the point where I was coding without checking references or tuning my setup. After a couple of days on it I would inevitably just switch back to a gui text editor. A couple of days probably isn't a good enough attempt though is it?
Yeah I agree. I still love this site and jsfiddle though, great for answering SO questions.
I've only run Eclipse on Windows and Linux. I've never had and performance problems on either of those so I can't give you any real tips. I also must admit, more frequently I just use notepad++ (on Windows) or scite (on Linux) for javascript, but those don't really fit your requirements.
If you're on OSX, Coda is a great all round web development tool. It does cost, though.
Good call; I'll fold the Cookie constructor into a CookieJar class property to clean the namespace up.
Cloud9IDE is free to [download](https://github.com/ajaxorg/cloud9) so I just ran it locally. It uses Ajax.org's [ACE editor](https://github.com/ajaxorg/ace). Pretty much, Mozilla Bespin became Mozilla [Skywriter](https://mozillalabs.com/skywriter/) which joined with Cloud9IDE which is based off of Ace (haha). I really love the Ace project. A super basic code editor in the browser, lots of cool things people are doing with it. See [ShiftEdit](https://chrome.google.com/webstore/detail/lcgmndephhjcabhhjfcmncnhbmgbkpij) and [SourceKit](https://chrome.google.com/webstore/detail/iieeldjdihkpoapgipfkeoddjckopgjg) for chrome. Vim: I started my new job about 2 months ago, and challenged myself to start using VIM, because I've wanted to convert over to it for awhile. I printed out a cheatsheet and learned the super basics. I was obviously slow in it, like everyone, but was slowly getting better. I'd switch back to my main editor (GEdit on Ubuntu) after lunch or so every day, just to get back to efficent coding. I eventually was able to make it a whole day in VIM, but would still use GEdit every now and again, for doing misc tasks. Now, I only use vim, and am able to use it for everything, or easily figure out how to do new things since I understand it.
All very good suggestions. The getNew item is a typo that I missed. Thanks for catching that for me. I am also a fan of JSLint, and ran it through a couple times to clean it up some, and I know the siren call of optimization. I'll also have to look at those auto-doc tools, they sound interesting and good to know. Thanks muchly.
I did not read his book but based on the writings on his site I think in most cases you either want to use === or just omit the == in the conditional. I can't think of a case where you'd want to use ==.
I definitely understand the feeling of overkill, and I actually have cut out a bunch of functionality that seemed really overkill. I'm working on a personal project that I think can use most of the functionality, and was sort of using that as a "model" for the sort of thing it might be useful for. I have been thinking of making a sort of "CookieJar-lite" version, that would basically do simple get/set, without keeping track of all the cookie types. Thanks for the input. 
Just want to thank everyone for the comments. It was all very helpful feedback, and I was very pleasantly surprised with the positive reaction. You all are awesome for taking the time to read and comment. If anyone's interested, I can post it when I've finished tweaking it, as well as a "lite" version I mentioned below.
vim It's fast. It's powerful. It's already installed everywhere. It does everything you want it to do already.
Its not my site, but it works fine for me in Chrome on Mac. What version of Chrome / OS are you using?
ah, cool, I've just downloaded the cloud9ide source, I'll try it this weekend. I will report back!
For all the VIM fans, do you have any resources you point people too? I have a cheatsheet, might not be the best but aside from that, any workflow habits, key-bindings, etc?
I like Sublime Text a lot.
the /r/vim subreddit is great for asking questions and finding links to all sorts of resources including video tutorials. For beginners on *nix systems: type "vimtutor" at a shell prompt and work through the exercises. Depending on typing speed you can get a fairly good grasp of fundamentals (movements, modes, search and replace etc.) within 15 - 20 minutes.
I refuse to use a library built and maintained by a ginger.
Not sure where to point you for tutorials, but you'll probably find the reference pages at w3schools indispensable.
Good question. After using jquery for the last year, I find it doesn't do many of the things I'd like a javascript library to do. Seems like it isn't really a 'javascript' library, but more of a DOM shortcuts library. For complex web apps it only gets half way there. I also think it promotes bad design and bad implementations by encouraging overuse of CSS as a programming dependency by referencing DOM nodes by classname when an ID would be a better (and faster) way to access an element. I also find the API a bit messy with some methods taking arguments, some taking objects, and some take either in various intermixed ways - it isn't the most consistent API I've seen, not even close really. It looks more like features were tacked on ad-hoc as time went on and no real thought was put into the big-picture, which is how most technology gets developed these days - a small thing blows up too fast and gets stuck with a half-assed API because it's already been adopted too widely. 
[Eloquent JavaScript](http://eloquentjavascript.net/) is a great free online book on JavaScript that covers all the fundamentals really well and has oodles of examples for you to try out using the built in console. [Mozilla's guide to JavaScript](https://developer.mozilla.org/en/JavaScript/Guide) is also really good though it's quite a bit more advanced. As an online reference I'd recommend using [Mozilla Developer Network](https://developer.mozilla.org/en/JavaScript/Reference). I suggest you [stay away from w3schools](http://w3fools.com/).
meh I know how to use Vim and still don't think it's worth it. I just use what ever editor I feel like at the time which could well be Vim. For some reason I have been using Geany with the Tree browser plugin lol seems to be working great Zend Studio is great for Javascript to
&gt; you really do have no choice but to chain callback after callback after callback I've worked on a 15,000+ line JavaScript project, and we solved this problem by using events and observers. If you've gotten yourself into a situation where you have "no choice" but to chain lots of callbacks, then you probably can't switch to some weird pre-compiler.
Makes sense.
Makes about as much sense as my brain falling out when I open my mind. Or a jello umbrella. 
I'm using Notepad++ Why? * I can control the syntax highlighting, and add keywords as the language changes * jsLint integration * It's fast - in load time and in render time. Try editing anything longer than a couple hundred lines in Eclipse and it gets boggy * It can do macros (Eclipse as of 2008 still couldn't do simple record/play macros) 
An upvote for you; I used to love NotePad, though now I use BBEdit. Can't remember why I changed...
[MDN Doc Center (or MDC) is indispensable](https://developer.mozilla.org/en/javascript). If you're looking for a solid book to learn it quick, Stoyan's [Object-Oriented JavaScript](http://www.amazon.com/Object-Oriented-JavaScript-high-quality-applications-libraries/dp/1847194141/) or Nicholas Zakas' [Professional JavaScript](http://www.amazon.com/Professional-JavaScript-Developers-Wrox-Programmer/dp/047022780X/) are the easiest to read and hit the ground running (as opposed to Crockford's book). I actually learned quite a bit from Crockford's older talks on [YUI Theater](http://developer.yahoo.com/yui/theater/) — scroll around halfway down the page for his Advanced Javascript and The Javascript Programming Language talks. Also, word of advice, JavaScript itself is really easy to pick up — especially if you've programmed before. The thing that is going to cause you the most trouble is interacting with the DOM (and browser quirks, etc). There are multiple libraries to help you out, and, while everyone has their own preference of which to learn, [jQuery is probably your best bet](http://jquery.com/). I'm not saying it's better than the others, but you will need to know it if you apply to front-end developer jobs. Lastly, if you are willing to pay money, I really feel you can't go wrong with Stoyan's book.
http://w3fools.com/
On the desktop: Komodo (the editor) or ScITE, on the shell VIM of course.
Oracle NetBeans. It provides excellent support for JS. I love particularly interactive renaming (ctrl-r), syntax highlighting and search functionality. It's possible to set up the IDE to show globals in red. That has saved my bacon quite a few times! Note that NB doesn't have native project type for JS projects. In practice PHP project type works well for this purpose after initial hassle. Overall it's a really nice IDE once you clean it up a bit (hide lesser used tools ie.). I have been really happy with it so far. Works well for various other languages too. :)
emacs: js2-mode, along with every kind of integration you'd like
TextMate with the JavascriptTools bundle is great! JavascriptTools will give you validation warnings and errors on save, which will save you plenty of time if you need your code to work on IE.
Internet Explorer: forever behind the curve
How about hardware accelerated 2D canvas on Mac?
via: http://www.readwriteweb.com/archives/mozilla_makes_a_better_case_for_web_apps_in_minute.php
What's a deferred object?
[Best description and examples](http://www.erichynds.com/jquery/using-deferreds-in-jquery/)
Deferred objects are one of the most useful things to happen to jQuery in a very long time. I'm loving it.
Might want to check out coffeescript - for this stuff, I think it would provide a better syntax
It seems that I linked to part two of a three-part post. Here is the first part: http://blog.jcoglan.com/2011/03/05/translation-from-haskell-to-javascript-of-selected-portions-of-the-best-introduction-to-monads-ive-ever-read/
upvote for some regular old fashioned javascript, you don't see much of that anymore :) Oh, and yeah, CSS transitions are awesome.
Nice, the setTimeout is going to be very helpful!
Very cool, this is exactly what I'm looking for. It seems so simple when I see it, but I'm not normally a web programmer so this is all new. Thanks!
Sounds like you want a marquee tag!
Just so you know, he used jQuery to build this - if you want to adapt that code sample, you're going to need to reference the script: https://ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.min.js
Yes, a lot of the other libraries had them for ages. A bit slow of jQuery but their implementation is nice!
[Kod](http://kodapp.com/) is kinda cool. I use TextMate though, but if I were to switch, it'd probably be to Kod.
Although it doesn't get much love, I like using Mootools for any large projects- the class architecture (inheritance, etc.) makes it easier for multiple authors to work on the same JS code.
I find mootools to be a bad choice. Here's why: &gt; [History](http://en.wikipedia.org/wiki/MooTools): &gt; &gt;Valerio Proietti first authored the framework and released it in September 2006 taking as his inspiration Prototype and Dean Edward's base2. MooTools originated from Moo.fx, a popular plug-in Proietti produced for Prototype in October 2005, which is still maintained and used. &gt; Whereas Prototype extended—prototyped—many of JavaScript's native String, Array, and Function objects with additional methods, Proietti desired a framework that (at the time) further extended the native Element object as well to offer greater control of the Document Object Model (DOM). So what does that mean to me? Basically, Proietti merged Prototype (which is written by MIT students) with some other frameworks/code to get extra functionality. But checkout this analysis: * [hate/jquery - 12% of 3.8k](http://amplicate.com/hate/jquery) * [hate/prototype - 23% of 491](http://amplicate.com/hate/prototype) * [hate/mootools - 31% of 152](http://amplicate.com/hate/mootools) So there's a couple of things I'd like to call attention too, one, checkout the votes, jQuery has the strongest community and the least hate, you'll find better support there. Not only that but from the people that actually voted for mootools generally there was more dislike. I originally checkout jQuery, Prototype, and Mootools back in 2008~, I came from prototype and switched to jquery as it was picking up steam and less brainy than prototype (which is still a great framework imo). jQuery wins it I think.
No.
I'm sorry, but that analysis is awful. &gt;So what does that mean to me? Basically, Proietti merged Prototype (which is written by MIT students) with some other frameworks/code to get extra functionality. ... why is that a bad thing? Also, what does it matter? I judge the frameworks I use based on, y'know, how useful they are. How frequently they are updated. I'm not sure why it being based on Prototype ruins that. &gt; But checkout this analysis: An analysis based on how many people tweet 'hate' with the name of a JS library? Forget it. In any case, why does it matter how many people hate the library? *I* don't hate it. I'm not disputing that the jQuery community is bigger, but I've never found the Mootools community to be too small. And really, jQuery is all about DOM manipulation. It's fantastic at it. But Mootools (and plenty of other frameworks) do much more- to the extent that there are server-side version of the frameworks that work independently of the DOM. I think they are aimed at two separate things, so it isn't possible say that one is better overall than the other. In this situation (large scale app development) and for the reasons I have described, I think Mootools is a better choice.
It seems rather ridiculous to compare jQuery to Dojo - they're entirely different beasts. Dojo vs [jQuery UI](http://jqueryui.com/) might make better sense as a comparison. But then you're talking about things for building JavaScript-based widgets, and you'd be kinda stupid to limit your search to just those two (you'd probably want to at least look at [ExtJS](http://www.sencha.com/products/extjs/), [YUI](http://developer.yahoo.com/yui/), [qooxdoo](http://qooxdoo.org/), [SproutCore](http://www.sproutcore.com/) as well, and there are several others that are worth consideration too). Successfully building large apps is more about how you use the libraries you've chosen, rather than which you choose. Some will require more manual work than others depending on what you want to do (eg, jQuery UI is a relatively lightweight set of widgets, compared to full-stack stuff like Dojo/ExtJS/etc), and there are some potential minefields (eg, be careful choosing Prototype.js if you need to mix it with other code, as its native object extensions often don't play well with other things), but generally speaking, there's no reason why you can't do a good job with any of them. Techniques like [progressive enhancement](http://en.wikipedia.org/wiki/Progressive_enhancement), [namespacing](http://www.dustindiaz.com/namespace-your-javascript/) your code and basic development practices like keeping things organised and consistent are far more important for large-scale development. 
More to point, is JavaScript Java?
I wrote the post and you're completely correct in saying that they're very very different beasts. The goal here was really to provide some high level 'food for thought' to intermediate jQuery developers transitioning into creating larger-scale applications as they're the ones that often pigeon hole jQuery as the 'go-to' solution for everything (which we know it's not). As some point I'd like to dive into deeper detail on the options they can look at when addressing specific types of problems (eg. widgets - Dojo vs. jQuery UI vs ExtJS etc).
As zach_will notes, YUI Theater has a trove of good stuff. But don't limit yourself just to Crockford -- http://net.tutsplus.com/articles/2010-through-the-lens-of-yui-theater/ is a summary of what YUI Theater ran just last year, including a lot of material on the world of frontend engineering as it's evolving. For pure JavaScript, the Crockford on JavaScript series (http://yuiblog.com/crockford/ ) is a good place to start.
That's like your opinion man; &gt; ... why is that a bad thing? Also, what does it matter? I judge the frameworks I use based on, y'know, how useful they are. How frequently they are updated. I'm not sure why it being based on Prototype ruins that. Actually the fact that it **is** based on prototype is a good thing, but double edged, you don't get all the updates that those genius MIT students put into Prototype, anything prototype adds you'll need to wait for in mootools. You know, why not just get milk straight from the cow? I'm going to go on a limb here but I've heard that mootools doesn't update as often as the other frameworks. So it's bad, or a poorer choice in my opinion because it's a spin off and has a smaller community specifically. It's all about community support and preference, I lean my preferences towards the largest community. In the open source world generally you want to lean towards the largest community because when you get to X,Y use case, it's been done in the larger communities first by volume and chance. Maybe linking to amplicate was a bad choice, but I want to stress the point of community. Anywho threads been downvoted Let me be clear though, I don't hate mootools, I just don't think any developer could sell me on it over Prototype or jQuery for that matter.
Haha wtf? Did you see the comments? Its like a raging idiot fest at those links. I updated the analysis: * hate/jquery - 12% of 3.8k - 100% of 3.8k were idiots * hate/prototype - 23% of 491 - 100% of 491 were idiots * hate/mootools - 31% of 152 - 100% of 152 were idiots Edit: 100% bad formatting is now 100% good formatting.
This makes no sense. I don't think choosing jQuery "by default" over other frameworks or libraries is the problem you seem to think it is. If you want to use something else or you want to go nuts with a widget/framework thing, that's cool. But if you don't, you're not going to hurt anything by picking jQuery. There's an argument that you need to be careful with things like Prototype (and even full-stack framework stuff like Dojo/ExtJS/etc), as they tend not to play nice with others. But, really, jQuery is probably the *least* likely of the bunch to cause you trouble. And yes, I [remember you](http://www.reddit.com/r/web_design/comments/c8cio/jquery_vs_javascript_the_masters_share_their/).
Multiprocess vs multithreaded. 
&gt; It's all about community support and preference, I lean my preferences towards the largest community. In the open source world generally you want to lean towards the largest community because when you get to X,Y use case, it's been done in the larger communities first by volume and chance. If that were true, all anyone would use is jQuery, Ubuntu, PHP and MySQL. Herd mentalities are not a good thing.
PLEASE do not use this on a live site. There's a reason the marquee and blink tags are among the most despised elements of HTML ever.
I like the part where this isn't a blatant advertisement for a programming language I've never heard of.
But it is still immature and the API docs are hard to navigate, so it can be hard to realize you don't have to chain 5 callbacks together to read from a file. 
That's true, you do have to be patient with it
Can't wait for the follow-up post. This (including the first blog post) was the first time I actually decided to read about Monads and got them.
sure bud
Aww man, don't get me start on Postgres over MySQL
See here for some recent suggestions: http://www.reddit.com/r/javascript/comments/fxlkj/good_online_free_js_learning_resource/
Thank you so much!
Practically everybody who normally reads it knows that he's haXe's main developer, and it's the main focus of his blog. haXe can generate JavaScript, among other targets, so it's not like haXe and Node.js wouldn't work together. It's a fine language, btw. I love the type system.
Just installed node.js and coffeescript the other day, and really, after you start using CoffeeScript you really don't wanna look back and start raw Javascript again, lol. CoffeeScript makes writing Javascript fun by not having to think of all the details and allowing you to focus on the logic. :D 
Don't use w3schools. Ever. http://w3fools.com Beyond what pbaehr said: http://code.google.com/edu/submissions/html-css-javascript/ is a great resource for very beginner level javascript. https://developer.mozilla.org/en-US/ is also a great reference and there are tons of good tutorials packed away in there.
oh wow.. thank you so much!
Is it really worth it to pick of coffee? To me it seems like an extra and unnecessary layer if you are already proficient in JS. Any thoughts?
Read all the chapters here. This is all you need to become very proficient in JS. https://developer.mozilla.org/en/JavaScript/Guide After this you can start checking out design patterns. I am very proficient in JS and wish I started this path. The WRONG thing to do is to start with jQuery right away. Don't do that.
IMO it saves up a huge amount of time, and eventually the code is more readable compared to JS if you're used to it. :) the less you type, the more time you have to think of the bigger things rather than fussing over why that prototype statement is not working correctly. CoffeeScript to JS is like HAML to HTML and SASS to CSS. The underlying principles for each language is the same, they are just compilers but they save awful lot of time, packs plenty of features to make coding easier and make front-end development a better place. besides, it can potentially [reduce your codes by 1/3 and run faster than handwritten JS](http://www.readwriteweb.com/hack/2011/01/interview-coffeescript-jeremy-ashkenas.php). isn't that awesome? :) 
Does anyone here see a problem with using javascript for automated testing? As much as I love javascript, I'm not sure it's the right tool, but I wanted to see if anyone else got a bad feeling about it.
golly oh my!!!
Yes, it's awesome, as are all compilers, but writing a good compiler that provides the right abstractions isn't trivial. CoffeeScript may be a good one, or others in the future might be better. Only time will tell.
This is homework.
thank you! the document.body.style.background="#" + the var totally worked. im sure my code is longwinded but it got the job done, if you're curious my function looks like: function changeBGC(){ //get decimal value var decRed = parseInt(document.getElementById("red").value); var decGreen = parseInt(document.getElementById("green").value); var decBlue = parseInt(document.getElementById("blue").value); //convert to hex var hexRed = decRed.toString(16); var hexBlue = decBlue.toString(16); var hexGreen = decGreen.toString(16); var newColor = hexRed+hexGreen+hexBlue // display color on the screen document.body.style.background="#" + newColor also do you think the var = newColor is redundant?
Good job writing your easiest solution in terms of hexCalcFunction(), something that doesn't exist in JavaScript. Cutting and pasting answers to reddit help requests exposes the original asker to the errors of whoever you're blindly, incorrectly cutting and pasting from. This is particularly germane given that the code you cut and pasted is incorrect and IE-specific, above and beyond relying on functions that live outside the part that you copied and pasted. Please don't pass off other people's advice as your own in the future. You don't know what quality it is, and in this case, the answer is "unacceptably low."
yeah, its a homework project that i needed help with, im not asking for someone to write up my whole 4 page website, just needed a quick confusing matter resolved, this stuff is confusing to me, i just started. i didnt mean to mislead anybody, my apologies.
Use nvm(node version manager) to install nodejs on your system if you are using *nix. This way everything comes preconfigured including npm(node package manager).
&gt; This isn't a copy pasted answer by any means So you intentionally gave him code that is both browser-specific and incomplete in the only part he asked about? &gt; it was short and exactly what he wanted Except that it doesn't show how to convert to hex, which is what he asked for, and it won't work in more than 50% of browsers in circulation. Note that you offered him something that had a function name instead of code, because he already had *the* *other* *direction*. He has to hex, and you skipped _from_ hex. &gt; How do you figure this is IE specific? I don't assist people who downvote legitimate criticism.
I don't do people's homework for them. The reason this small, easy part is confusing is because instead of pushing through it, you decided to ask other people to do it for you. It's not just academically dishonest; it also robs you of the ability to accomplish small goals. Wait'll you get to the large ones.
The point of school is not to get other people to do your work for you. This is academically dishonest.
Nearly the whole thing is. document.body.style.backgroundColor = '#' + parseInt(document.getElementById('red')).toString(16) + parseInt(document.getElementById('green')).toString(16) + parseInt(document.getElementById('blue')).toString(16); It's unfortunate that you didn't do this yourself, and instead turned to Reddit for (wrong) advice from nerdviking. In order to teach you a lesson, I'm leaving his bug in place for your teacher to find. Do the work yourself or have the teacher know you got your answer from the internet when he-or-she asks you why that bug is in there and you don't even know what it is. If you do the work yourself, of course, then you won't have the bug, and then there won't be anything for them to find, and your classmates won't be cheated by you taking the easy route. Have a nice night. 
&gt;i think i got the function to get the numbers and convert them to hex alright, but how should i display/change the background color to the hex color that was acquired in the function? quoted right from the op, i never asked for the code to convert to hex, i had that written already. he did give me exactly the info i needed, which i had no idea the tag document.body.style.background existed, because im new and learning.
I might use it if they hadn't given it such an obnoxious name. Not everyone likes coffee. Bitter swill for addicts.
Actually turns out I'm wrong: I have heard of the language, just not the VM (i.e. I thought "Neko" referred to another language, not bytecode). &gt; CountVonTroll O_o Anyway. Yes, that figures, but this isn't presented in that context but in the context of a JavaScript reddit. &gt; It's a fine language, btw. I disagree. It may be a decent replacement for ActionScript but from what I've seen it's just too similar to be worth switching. The only major advantage I can see is that it can be compiled into various other languages, but that advantage is worthless in practice because the biggest difference between those languages is not syntax but the environment and standard library. As for Neko -- I just don't see the niche for it in my toolset. I already know Python, JavaScript, Java, PHP and ActionScript 3. JavaScript's killer app is that it's the only language for client side scripting, ActionScript 3's killer app is Flash, PHP's is its ubiquity in shared hosting, Java's is its ubiquity in corporate environments and Python's is its flexibility and cleanliness. I see little incentive to learn Ruby because its use cases 100% overlap with Python's. Same with C# vs Java (also, C# implies a focus on Windows (the Linux VM for .Net is still too slow and unofficial), which makes it uninteresting for me except for desktop applications). There are a few substitutes for client-side JavaScript, but they all need to be pre-compiled -- to JavaScript. The only alternative to PHP in shared hosting are CGI scripts, but they are crap (actually SSI is often an option, which is why I've taken the time to learn it, but it's not a real language). All substitutes for Flash Pro rely on AS2 and all substitute languages for MXMLC only seem to have the advantage of "It's not ActionScript!" (which isn't good enough for me). Do I miss something obvious? Is there anything about haXe that makes it fundamentally superior to (i.e. different from) ActionScript 3 other than that it can be translated into other languages?
MDC for reference, [Eloquent Javascript](http://eloquentjavascript.net/contents.html) as a tutorial. MDC was linked by previous redditors; another tip is to simply append MDC to your search terms, such as "Array push MDC" or similar. Edit: And yeah, never ever use w3schools. Their website contains invalid code, et cetera.
I have to disagree, the point of school is to learn and if he learns from someone else helping him more power to him.
Quite a few resources have already been mentioned here but one specific resource that I liked was: *Eloquent Javascript: An Opinionated Guide to Programming - by Martijn Haverbeke*
I can't emphasize this enough... the "Don't start with jQuery right away" bit. It is a super useful and easy to get started with library (and we use it all the time at work) but you will be much better off if you learn javascript before using it. Not only will it make things easier to understand, you will better know when to use something like jquery and when you don't need it and also learn some good design practices that will help you organize your jquery code better. 
Awesome, I was looking for this language a few weeks ago. I remember reading about it a year or so ago, but couldn't find it by googling… So yeah, thanks for the link, bookmarked it now. Should try it out some day. 
It's a play on ***Java***Script. I think it communicates it's like JavaScript, but just a bit different.
I find [this wikipedia template](http://en.wikipedia.org/wiki/Template:Programming_paradigms) pretty awesome for learning 'bout new paradigms. Thought it was a bit relevant...
&gt; Yes, that figures, but this isn't presented in that context but in the context of a JavaScript reddit. Well, you can hardly blame the author for where it's posted. &gt; The only alternative to PHP in shared hosting are CGI scripts, but they are crap I haven't used CGI scripts since the 90's, but I wouldn't call PHP a good solution, wither. &gt; Do I miss something obvious? Is there anything about haXe that makes it fundamentally superior to (i.e. different from) ActionScript 3 other than that it can be translated into other languages? As someone who had used haXe for about two years before having to do most of his work in AS3, let me tell you that yes, there is more to it, although it may not be all that obvious at first. Let's face it -- AS3 was an accident that was never meant to happen. I know that Adobe is very seriously considering language extensions that will make it better in the future, and of course it's a *huge* improvement over AS2 (almost as big as the jump from whatever it was Flash 4 had to the original Flash 5 ActionScript, if you remember.) But the language itself is one of those "it seemed like a good idea at the time" accidents -- it was formed after the ECMA 262 v4 proposal for JS2, which got killed in the committee after Adobe had introduced it. AS3 was formed after a standard that never materialized. Instead of coming up with a *proper* language that was designed to handle the increased complexity of apps, they went with what should have become a standard. Now we have a language that is non-standard and still lacks advanced language features. No problem for small stuff, but if you've ever worked as part of a team on something with a large code base you know what I mean. And don't get me started on MXML -- we're still in the process of moving to Flex 4, but Flex 3.5 was, shall we say, a bit immature. To finally get to the point, haXe has some advanced language features that you won't want to miss once you've gotten used to them, and it's not that you can target different platforms. The compiler is nice and very fast, and it can produce better bytecode because it know so much more about the program. But that's not it, either. The main advantage is the language itself, specifically, the very elegant and flexible type system. Generics are one of those things that seem a bit esoteric at first, but that make enormous sense once you've gotten used to them. You can take polymorphism to a whole new level. For your programming style, those generic types will be about as much of an improvement as interfaces. And that's just one example, there are many other features you'll miss painfully if you suddenly have to live without them. So, it's not just about the platform you're targeting. Some languages solve certain problems better than others. MXML and AS3 are fine if all you do is to lump a bunch of interface components together, and maybe do simple operations on the data. But for anything more complex, or even just a non-trivial data structure, haXe will be more pleasing to work with and it will give you a more flexible code base (and better compiled bytecode, if that's relevant for what you're doing) in less time.
This isn't standards but: &lt;div onmouseover="this.style.visibility='visible'" onmouseout="this.style.visibility='hidden'"&gt; Stuff to toggle &lt;/div&gt;
Use prototype or jquery. $('myid').show(), $('myid').hide, $('otherid').onMouseOver = function(e) { $('myid').show(); }; $('otherid').onMouseOut = function(e) { $('myid').hide(); }; not sure that's proper syntax, but you get the idea. 
Don't use inline JavaScript - try to follow unobtrusive practices if possible.
Maybe you'll look up "plagiarism" before you're done for the evening. He cut and pasted parts of his assignment and asked random people in the public to do them for him. Nearly every school in the United States expels for this. This isn't a point of personal opinion. Don't downvote for disagreement, while you're at it.
Awesome, thanks for the link.
I didn't get that impression from his post at all. We all need help sometimes and I didn't see his request as being out of line.
&gt; you can hardly blame the author I haven't. I'm blaming the OP. &gt; I haven't used CGI scripts since the 90's, but I wouldn't call PHP a good solution, wither. I didn't say PHP is good. I said it's the best solution because it's better than using CGI scripts. A lot of people shouldn't be using shared hosting with PHP only to begin with. &gt; Let's face it -- AS3 was an accident that was never meant to happen. Although it may have sounded differently, I don't hold AS3 in high regard. It's less ridiculous than AS2, but it's still a cheap imitation of Java/C# bolted on to a JavaScript derivative. &gt; No problem for small stuff, but if you've ever worked as part of a team on something with a large code base you know what I mean. Oh, I agree. I wouldn't write a major application (read: something that can't be sensibly pulled off without a team of programmers) in Flash at all. I'd either go with a server-side solution (possibly with a Flash front-end) or a traditional desktop application (okay, I'm kidding -- _I_ wouldn't do it at all then, because _I_ am a web developer). &gt; The main advantage is the language itself, specifically, the very elegant and flexible type system. Generics are one of those things that seem a bit esoteric at first, but that make enormous sense once you've gotten used to them. You can take polymorphism to a whole new level. You mean generics like in Java? That wouldn't really sell me on haXe either. Sure, it may be useful if you require intricate class hierarchies for a code-heavy application. I'd rather be sailing. &gt; MXML and AS3 are fine if all you do is to lump a bunch of interface components together, and maybe do simple operations on the data. So in other words, there's probably nothing in it for me. I try to keep my ActionScripting to a minimum. I'd rather not be using Flash at all, because I just don't like it as a platform. I can imagine that some of haXe's benefits are selling points if you work for a pure Flash shop, but as a freelance web developer I only write ActionScript when the client demands it (e.g. integrating Flash animations into an application). Thanks for going into detail, but I think I'll pass.
Here is a [link](http://redd.it/fqht8) to my recent question about JavaScript Mastery. Lots of blogs, websites, tweets, books, videos and source code.
You already have jquery loaded so you might as well use it. 1. Add a class name to the images that you hover. 2. Then with jQuery something like $(".yourimageclassname").hover( function () { $(this).parent().prev().show(); }, function () { $(this).parent().prev().hide(); } ); That should work if you keep those hidden divs before the various# div (did not test it). It will show on mouseover and hide on mouseout. You can change the show/hide to fadeIn/fadeOut for a more fancier effect.
I hate that they do all that criticism but then go ahead and say "&lt;br /&gt; isn't semantic in most cases and probably should not be mentioned at all." Well, sure, it's not semantic if what you mean is a new paragraph or a margin or something, but to say it should not be mentioned *at all* as if there is no such thing as an actual line break... fuckin stupid. And then to criticize all of the content for being old but then making a bitchy point about how the input as a direct child of a form tag wasn't valid until HTML 5... it's hard to take these guys seriously, no matter their big names, when it looks like they are searching for crap to complain about.
Don't listen to jakelear, w3schools is an excellent resource for beginners. That said, once you are on your feet and getting deeper into JavaScript check out these books. They are wonderfully useful and informative. http://www.amazon.com/gp/product/0596517742 http://www.amazon.com/gp/product/0596805527 http://www.amazon.com/gp/product/193398869X
What's not cool is having to hit the back button 15 times for each link clicked.
Well, you are right that there are places where the cost of being semantic versus using the br tag is high, but the BR tag is semantically incorrect because it blurs the line between presentation and content. I'm not going to fault the w3fools initiative for trying to use all available evidence to discredit w3schools, because much of the information on w3schools *is* incorrect, and it's become such a popular site. When I was in school, professors recommended w3schools and as a naive student, I assumed that was the best resource, and that misinformation cost me a lot of time. The recommended resources at w3fools are much better learning tools. MDN makes w3schools completely irrelevant. 
This should be illegal.
OH DEAR GOD NO. Does anyone remember when people thought it'd be cool to have smooth transitions between web pages?
HTML5 supports the *hidden* property within tags. I don't know how many browsers support this, but it's worth a Googlin'
That is an absolutely terrible thing to use the history state for.
Kill it with fire.
if you're interested in NodeJS, check out [/r/node](http://www.reddit.com/r/node)
Unfortunately if it's hidden you can't trigger the mouseOver event. 
Let me just chime in and say I love this. I would never use this, I think anyone that would actually use this is evil, etc. But as a proof-of-concept, "don't use this but check out what we/I made" I dig it. You might update the intro copy to say explicitly, "You probably shouldn't use this" as it seems most of the people commenting/voting didn't quite get the "useful uses" part.
history.pushState is/will be incredibly useful when it's widely supported, particularly for ajax applications. But this? This is just silly and completely kills usability. 
Lulz.
Downvoted, hard.
Hmm.. .I see what you're saying, and I can see several real, legitimate uses for this once it becomes widely supported, but as a proof of concept, I don't really find this to be innovating or exciting. It's just iterating through a string and pushing to the history state, while using far more code than should be necessary.
Why use `pushState()` instead of `replaceState()` for that?
I've never used this, but I've noticed it in major sites such as amazon or facebook, and one of its advantages is the facility to create deep-links to dynamically created pages, so any user can just copy/paste the page they're in and dont have to go all the way around to get to the page again, as it happened with the first 'ajax' pages.
I posted [this comment](http://www.reddit.com/r/javascript/comments/fpp7m/recommendations_for_mastering_javascript/c1hs3fq) a couple of weeks ago [here](http://www.reddit.com/r/javascript/comments/fpp7m/recommendations_for_mastering_javascript/). ---- Read about JavaScript's strengths, weaknesses, good, bad, and surprising bits: * [Learning Advanced JavaScript](http://ejohn.org/apps/learn/) by John Resig * [JavaScript Garden](http://bonsaiden.github.com/JavaScript-Garden/) * [Eloquent JavaScript](http://eloquentjavascript.net/) * [My Variable Declaration got Hoisted](http://pierrespring.com/2010/05/20/my-variable-declaration-got-hoisted/) * [Another JavaScript Quiz](http://james.padolsey.com/javascript/another-javascript-quiz/) (Be sure to check [qfox's](http://qfox.nl/ "aka. Pieter van der Zee") comment with explanations) * [wtfjs](http://wtfjs.com/) * [Learning JavaScript with Object Graphs I](http://howtonode.org/object-graphs) * [Learning JavaScript with Object Graphs II](http://howtonode.org/object-graphs-2) * [Learning JavaScript with Object Graphs II](http://howtonode.org/object-graphs-3) * [What is "this"?](http://howtonode.org/what-is-this) * [A Crash Course in DOM Events](http://jupiterit.com/news/a-crash-course-in-how-dom-events-work) (Relevant only in browsers of course) Watch [papa Crock's lectures and talks](http://search.yahoo.com/search?p=crockford&amp;fr2=sb-top&amp;vs=developer.yahoo.com&amp;vs=developer.yahoo.net&amp;type_param=), they are excellent, even if he's a little too opinionated sometimes. It's good for the community to have an opinionated, pragmatic guy like him around. Doesn't hurt to follow [The Changelog](http://thechangelog.com/) and [notable JavaScripters](http://net.tutsplus.com/articles/web-roundups/30-developers-you-must-subscribe-to-as-a-javascript-junkie/) either. If you don't read that list just follow [@BrendanEich](https://twitter.com/BrendanEich), [@awbjs](https://twitter.com/awbjs), and anyone twitter says is similar to them. Read code, especially code from projects maintained by the best. And of course ... write code of your own! You have to find out what *you* think are good and bad parts, etc. And when you run into surprises and gotchas in your own code you really learn about them, because you care more at that time.
Happy birthday.
Thanks. :)
do we really need another one of these? It's a decent enough tutorial, except I've seen the same thing about 50 times now. Plus most of the example code is a click away from the main nodejs.org page If you're going to write your own version of "the Node.js tutorial" make something interesting, like an async crawler, or a MUD, or a chat bot. Anything but another basic HTTP server.
Yes - proof of concept. I think he might update it soon so you don't have to hit back so many times. edit:// Wow, surprised at all the downvotes.
And at the very least [toggle](http://api.jquery.com/toggle/)
Code indentation. Use it.
I honestly think the entire site is an attempt to trick new developers into not supporting old versions of IE. edit: by "entire site" I mean w3fools.
the proper syntax would be, $('otherid').bind('mouseover', function () { $(this).show(); }); $('otherid').bind('mouseout', function () { $(this).hide(); }); I'd suggest that you bind on `mouseenter` and `mouseleave` as, $('otherid').bind('mouseenter', function () { $(this).show(); }); $('otherid').bind('mouseleave', function () { $(this).hide(); });
I hate it when show/hider things use display = 'block' -- what if I'm using a span or a strong or something like that? Nay, I say this won't do. Try this on for size: http://pastebin.com/YWCyf4ja Obviously criticism is welcome :)
What if your element is hidden by default? First LOC would store the variable 'display' as 'none'
There's no need for javascript at all here :) make #various1 {display:block} put #speech1 as a child of #various1 with {display:none} add #various1:hover &gt; #speech1 {display:block} slap some classes on them (.various and .speech instead of the ids) and you'll have the same effect but in pure css. Also drop the img tag, and set dimensions on the anchor instead, there's really not much point having it if it's only there to give the anchor a clickable area.
I think the right way would be to do `replaceState` for the effect, and then `pushState` for the very last call, which puts in the new URL that can be copied and pasted. I didn't actually look at the code or experiment with it, but I think that would work, no?
No. You're describing the benefits of the history API. This proof of concept is considered evil because it creates "animations" in the address bar by transforming the original URL into the new one, littering your browser history with incomplete and broken URLs along the way. There's nothing wrong with the history API itself.
wow.. Thank you so much! that's a lot of Javascript! 
you should check your console in iPhone. in my iOS, there are errors in javascript. it seems to be related with jQtouch
I get one error on the phone, and that's a warning from jQtouch that says the animation attribute is missing, so it uses slideLeft. What are you getting?
"Can't find variable:jQuery in jqtouch.min.js"
Strange, I don't get that.
Should keep you busy for a while :)
w3fools is an initiative started by Paul Irish, who is also a lead developer on HTML5 Boilerplate and Modernizr, which are both designed to make it easier for developers to gracefully degrade to IE7/6. Frankly, even Microsoft has an initiative to stop using IE6, but I think you're misunderstanding the intention.
w3fools is an initiative started by Paul Irish, who is also a lead developer on HTML5 Boilerplate and Modernizr, which are both designed to make it easier for developers to gracefully degrade to IE7/6. Frankly, even Microsoft has an initiative to stop using IE6, but I think you're misunderstanding the intention.
It's not a website, but in my opinion, it's the best resource for learning JavaScript. [JavaScript: The Good Parts](http://oreilly.com/catalog/9780596517748)
I might be overlooking something, but how do you properly access your cache/lookup of several arguments without passing around the object to continue to access it? What I mean is the following: var lookup = {} lookup[arguments] = expensiveFunc(arguments); Your lookup's [object Arguments] would get overwritten each time you passed in a new set of arguments, you'd have to come up with custom key schemes for each lookup, or you create a key for differing arguments and it is simply your first variable. I myself have written a caching scheme with its own trade offs. You provide an object with a key you declare and either a selector or a function that you want cached. You can now access the cache without "magic strings" simply by accessing the cache object by key name rather than through a function. In other words, cache.key instead of cache(key). The downside to this approach is that you have to explicitly add to the cache through cache.add should you not use my built-in auto caching scheme (you declare a list of cacheable objects prior to initialization, which are then executed and cached). However, I could easily mimic the cache(key) functionality as well if I really wanted or found a huge need for it.
idk why people are down voting you, I couldn't agree more.
hmm good call
I just concatenate all my scripts with Googles [Closure Compiler](https://code.google.com/closure/compiler/). Works like a charm, and does minification along the way. Everything jQuery, rather large jQuery Plugins and own code in one file with license text intact. Gzipped it adds up to about 50k. UPDATE: Tested it on Firefox, Chrome and IE down to 6.0 and it just works.
This loader stuff really seems like a band-aid on a problem that doesn't need to exist in the first place.
Proggit punishment fetish.
I've been using require and it has worked really well. I never realized it was so large compared to the other loaders.
What is everyone's favorite loader and why?
Thanks for this -- really very helpful right now.
What loader do you guys use to load the loader JS?
ControlJS. You can drop it into an existing site without much modification. Just swap out the type=text/javascript with type="text/cjs"
If you like programming in coffeescript, you are likely not a javascript programmer, you are probably a ruby or a python programmer. Your preferred style is not my preferred style, I find Coffeescript an ugly kludge. Coffeescript makes writing javascript not fun for most javascript programmers, because really, who wants to go learn an entirely new syntax, have to adopt significant whitespace, have to use a compiler, lose easy debugging, and waste a lot of time trying to figure out why coffeescript isn't doing what you think it should be when just writing javascript is what you know how to do. Your post is purely opinion, and you shouldn't assume that Coffeescript 'makes writing Javascript fun' for everyone. For you, maybe, but for anyone who does not want to use something similar to ruby/python syntax, no it really isn't fun at all. Just code javascript if you want to code javascript. Coffeescript is just a lot of noise and nonsense for people wanting to code javascript. For python/ruby programmers who don't want to adopt the javascript syntax, coffeescript might work great. These coffeescript posts really don't belong in r/javascript, they belong in r/ruby or r/python. 
Hand-rolled. I may be a luddite, but I don't have to worry about other people's bloated code and conflicting API's. If loading were actually hard, I'd look harder.
You are absolutely correct. It's really not worth it if you already know javascript, and even if you didn't it wouldn't be worth adopting coffeescript instead of learning javascript unless you were a ruby/python programmer who wanted to stick to that style of syntax. Coffeescript does add confusion and cruft to developing javascript, so unless you have a specific need to use it's syntax, all the extra BS you have to go through doesn't make you come out ahead. Coffeescripters are doing a hard-sell on r/javascript for whatever dumb reason. These articles really belong in r/ruby or r/python. But no, they have to invade r/javascript every 2 days with their misguided evangelism. 
BBEdit is only for Macs, and NotePad++ is only for Windows - you had to switch :-) 
not true, visibility:hidden does not do the same thing as display:none. The element is still there if it is visibility:hidden, and it still reacts to mouse events and elements will flow around it same as if it has visibility:visible. on the other hand, display:none effectively removes the element from the page, mouse events won't work on it, etc. 
You're half right. A 100x100 box with `visibility: hidden` will still displace 100x100px visually while not being visible but it won't respond to mouse events. Here's an example using raw inline JS (as mentioned above) and using jQuery: http://satedproductions.com/tmp/reddit/javascript/ Tested/verified in IE6, IE7, iE9, Opera, Chrome, Safari and Firefox. You should know better, javascript.
&lt;script src="..."&gt;
I've happily used YUI, although it'd be a slightly overkill choice to make on a loader basis alone. One YUI loader feature that doesn't show up in the spreadsheet is the ability to combine multiple JS or CSS files in one fetch. Effectively, you need to put a small combo.php file on your server that takes a list of relative paths, sanitize them and returns the content of those files concatenated together. Once you have that going, YUI 3.1+ can use it to group network fetches pretty compactly (You can also define your dependency tree between all your JS and CSS files, the loader will figure out what needs to load when as you use things.) It's definitely targeted toward the more complex pages/sites, and will pay off when you have developed a set of custom modules/widgets that you use in various ways across various parts of your site.
I'm part of the jury (Román Cortés). To me, trying to do something with a theme adds a bit more of difficulty and I will definitely value positively the additional effort on it. By other hand, if there is an excellent entry themeless and an entry not-that-excellent with theme, my vote will go to the excellent one. Just in the case of several, similar quality entries, I will use the theme to help my vote decision. I hope it makes sense :)
[jQuery UI](http://jqueryui.com)
Oh yeah, that explains it. I've developing on Mac for about 4 years, and it's hard to remember that it was ever different. I did like Notepad though, and Visual Studio.
Closure's a good tool, but the problem with pre-compiling scripts is that you'll need to re-compile after any changes you make. I like [minify](http://code.google.com/p/minify/)- not only does it compress js, it also compiles css &amp; gzips if Apache isn't configured for it (like on a shared server)
That's what I do most of the time too, it's a great solution. Most web apps don't need loaders right now but more people are deploying 500k-2m (and larger) every day. And if you want to tweak performance at any size you load things lazily with script loaders.
A loading bar? Well a &lt;div&gt; inside a &lt;div&gt; where the inner &lt;div&gt; has a background colour and width set dynamically would do it.
I know you're joking but here's [the async loader for LABjs](https://gist.github.com/603980).
its not because of the code, its because of his conduct in this thread.
Well, I solved it. Added my div to the overlayImage pane, then copied it and made it transparent and added that one to the overlayMouseTarget pane. Which seems to be the way google wants you to do it, so all good I guess.
hi, thanks for ya opinion! :) just a trivia, CoffeeScript is written to be compiled with **node.js**, which is in turn, another Javascript product, lol. But yeah, true, it does borrow ideas from Ruby or Python though so i agree, it'll make it easier for python/ruby programmers to adapt to. I don't know but in my case, I have done quite plenty of stuff with CoffeeScript so far I haven't come to any roadblocks that causes debugging Javascript difficult. writing test units or our favorite console.log still works pretty well. have you encountered any problems while trying out CoffeeScript?
hehe true enough! i think there are other compilers for Javascript before CoffeeScript but I guess they haven't gained much momentum as CoffeeScript yet. only time will tell if our fellow developers will come up with even awesomer stuffs :) 
Alright, preeeeeetty sure at this point the people on the Chrome JS team are wizards. There's no other explanation.
Java is a [type of coffee](http://en.wikipedia.org/wiki/Java_coffee) you know, lol. 
I agree, something simple as that could be just done using CSS without needing Javascript. :) it'll save a lil headache! 
i support you dude, w3schools really do give a lot of false or rather, outdated information. i wonder if anyone actually maintains that site, lol. and of course, there are always blogs by the leading developers, get some basic, do some tutorials that uses the latest best practices, and in no time you'll get up to speed. :D 
Great idea with the friendly URLs in the settings.
That does make sense actually, thanks for breaking it down. I plan on sticking with the theme, but like you said it does add some difficulty. On a side note cool demo even though your not competing. 
Yeah I guess he was being a bit "angry". What I agreed with was trying to find the solution yourself especially if its a school project :P.
Meanwhile [arewefastyet.com](http://arewefastyet.com) reports that Firefox (TM+JM) is even faster for the Sunspider test. I tried downloading the latest nightly builds, but Chrome is faster for me. Not sure where their numbers are coming from.
i agree about do your own work, but i dont see this like asking for the answer to an equation, its more like asking a thesaurus for a word, how to spell something correctly, or a critique on a painting, it doesnt mean i plagiarized my work. i knew what i wanted to do, i just didnt know the word for it, im new to the "language." the creepy part is the guy took the time to dig up my real name and tried to identify my college and threatened to call my teacher to get me expelled, in a pm. 
i have no need for coffeescript. javascript works perfectly for me. coffeescript solves nothing for me, and would only serve to convolute my development workflow. so, no, i haven't had any problems using coffeescript but i do find it entertaining when hanging out in #coffescript and someone asks how for loops work in coffeescript, hah. what a waste of time.
Gmail *did* feel a bit faster today. Thanks Gandalf!
so, they're going to make javascript as slow as Java? And the cool kids think this is wonderful news? I will never understand cool kid thoughts.
The differences between keydown, keypress, and keyup seem very close to the behavior of the same events in native GUI applications. 
wtf... ok man yeah that is crazy as hell.
Java isn't slow. It's the single fastest managed runtime. Get your facts straight, buddy.
Their numbers are coming from their own V8 benchmark. I'm interested to know what different things SunSpider, WebKit and kraken actually test, since pretty much everyone just equates them with overall JavaScript speed when clearly they're testing differently. I'm just happy that browsers are competing on performance again, it's rocking just about everywhere!
You are correct. In my defense, I've been working too much with SVG lately, where visibility:hidden will in fact react to mouse events (at least in FF 3). My favorite new css selector is 'pointer-events:none'. 
Matt?
So, anyone else wonder what the next version of Node.js is going to be based on? :D
Sarcasm detection fail. Cool kids hate java. Why? It's bloated, slow, and verbose (according to them). Cool kids love javascript and Chrome. Why? It's fast (according to them), and uses cool technology like HotSpot. Go figure.
Nope, but you can call me Matt if you want.
Same thing it's based on now?
Sarcasm production fail. Even explained, that doesn't sound like sarcasm.
Excellent advice. Start with misinformation, then once you have that down get the truth.
Javascript seems great for automated testing. To me it seems like an ideal language for almost anything actually. But for sure testing. 
It's based on V8 now, chrome's old JS engine, so I imagine it'll be based off crankshaft in future?
I just have a friend called Matt who's a Java evangelicalist.
in javascript we'll write var array = [chicken, donkey, cow], i = 0 while (i &lt; array.length) { alert(array[i]+'make some noise!'); i++; } coffeescript you'll do array = [chicken, donkey, cow] for animal in array do (animal) -&gt; alert(animal+'make some noise!') so yeah, we all have our preferences i guess, lulz. :) 
was your intention to code an infinite loop? i fail to see how your coffeescript example is in any way better or more 'beautiful' than javascript. the loss of brackets and parens makes me queasy when i think about having to read through 10,000 lines of that stuff. 
I feel like having `visibility:hidden` respond to mouse events is more appropriate, at any rate -- especially if the element continues to impact the document flow visually.
Here are two tutorials I've found on OOP in JavaScript [Tutorial by Gavin Kistner](http://phrogz.net/js/classes/OOPinJS.html) [Tutorial by Douglas Crockford](http://www.crockford.com/javascript/inheritance.html)
oops, forgotten to add the "i++", lol. but yeah, coffeescript automatically determines what are you looping over, how many items inside and compiles the nitty gritty part for ya. yay for variety! 
As far as I know, you can't make new kinds of objects that you can put into DOM. You might "inherit" a Canvas, get all its methods, but it will fail at appendChild. Notice also that the DOM elements do not provide constructors - you get them through a document.createElement factory method. Wrapping is the way to go here. BTW, how to make a class in JavaScript: var ExampleClass = function(a, b) { this.a = a; this.b = b; }; ExampleClass.prototype = (function() { var privateMethod = function(x) { return x * x; }; var publicMethod = function(x) { return privateMethod(x * this.a + this.b); }; return { publicMethod: publicMethod } })(); var example = new ExampleClass(3, 5); console.log(example.publicMethod(10)); 
From what I understand unless you overrode appendChild() or setAttribute() methods you can do exactly what you wrote.
+1 for Kistner's tutorial.
That's what I feared. It will never be beautiful. Thanks a lot!
I had my hands on the Kistner one earlier, but I couldn't make it work in my case. Amadan explains why. That kinda sucks though, doesn't it? Then again, I have no experience in this area, but it is called the Document **Object** Model innit?..
What is your goal for the canvas slider?
Imagine &lt;input type="range"&gt; for complex values. So just a canvas with a movable dot really.
Oh, just crossed my mind: What you can do is decorate the canvas object itself. How about this? function makeComplexCanvas(initialDanceStyle) { var c = document.createElement('canvas'); var danceStyle = initialDanceStyle; // private var c.conjugated = ''; // public var c.dance = function(style) { danceStyle = style; }; c.conjugate = function() { c.conjugated = danceStyle ? "I danced, dance and will dance " + danceStyle : ''; }; return c; }; var myComplexCanvas = makeComplexCanvas('jive'); myComplexCanvas.dance('jigg'); myComplexCanvas.conjugate(); console.log(myComplexCanvas.conjugated); div.appendChild(myComplexCanvas); Note: this is not a true constructor, so you don't use the "new" keyword. EDIT: added a missing "var".
That's doesn't look half bad, actually. I'll go that route instead. I don't know the first thing about JS, so this is all about the learning. That's why I wanted to take the hardest route possible. Also, I tend to over-engineer. Thanks again! 
That's what I thought you might mean. Crankshaft is part of V8, not a replacement for it. I think Node already has these changes.
Ahh. They talk about it as if it's a replacement for V8. I remember someone doing JIT recompilation a long time ago on a JS engine.
Typically you can add your own attributes (and methods! A method is just an attribute in Javascript, anyway) to DOM objects. d = document.createElement('div'); d.foo = "something"; d.blurt = function() { alert(this.foo) }; d.blurt(); It still works as a DOM object: d.innerHTML = 'Hello'; d.onclick = d.blurt; document.body.appendChild(d); 
It sounds like [this](http://jqueryui.com/demos/slider/) is what you are trying to accomplish. With [jQuery](http://jquery.com/) and [jQueryUI](http://jqueryui.com/) attaching a new slider should be as easy as: $("&lt;div&gt;", {id : 'sliderid' }).slider().appendTo("#content"); 
Why does your demo require a username and password?
now if only a full-fledged Firebug would come out for Chrome
chrome dev tools pretty much covers all of that
There is still a big gap between Chrome dev tools and Firebug - the script debugging is better, firePHP doesn't exist for chrome, let alone the other plugins in for Firebug that I use. It's not bad, just doesn't have all the features that I need
yay for tower of babel.
These are the reasons I cant just use chrome.
ok fuck you all then
Here's a simple demo HTML snippet showing the basics: &lt;div style="border: 1px solid black; height: 1em; width: 10em;"&gt; &lt;div style="background: blue; height: 100%; width: 70%;"&gt;&lt;/div&gt; &lt;/div&gt; Unfortunately it's no longer this easy if you also want to put text inside it...
also, why does your demo not work?
TIL firebug plugin has plugins^plugins^plugins^plugins^plugins^plugins^plugins^plugins
I clicked through and it worked anyway.
as awesome as this is, that is a seriously icky amount of markup and css needed to achieve the effect. 
Does bogo never finish? It seemed to just randomize it. Maybe it's a joke I don't get? Anyhoo, was an interesting demo.
Especially as SVG supports text path, available in most browsers (all?) that transforms are. 
Demo should work. Been chatting in it all day: http://nodechat.no.de/ Heard there have been issues with socket.IO and Firefox 3.6. Try chrome or FF 4.0.
Not in the "Browser That Shall Not be Named." In all versions.
Also uses Express :(
One would hope that as compilers get easier to write (ahem, Perl 6, looking at you), there will be more such languages written. But you are quite correct: only time will tell for sure :)
IE9 doesn't support text on paths in SVG? Do you have a testcase to prove that claim?
Am I missing something, or is this missing a binary/tree sort?
I like the way the author compared nginx's event model with Node.JS; the two are completely and fundamentally different and this successfully invalidated any credibility the author might have had.
So a y-combinator is a function that takes another definition of itself as an argument in order to fake recursion?
Oh version 9 is out?
Play My Code is pretty nifty looking. Been meaning to add the iFrame trick to my personal engine and this was a good reminder. Glad to see they figured out that for loops win the day when dealing with the arrays you tend to run into at the engine-level. The thoughts on parseInt and array indexes were interesting. Personally, I wouldn't bother with parseInt, the game designer should have the prescience of mind to know when something should be an int (not that there are true ints in js...). I wonder how much of the overhead Quby is generating and whether the Ruby inspiration is mucking up the JS implementation (the same way my JS-wired brain does every time I try and do anything in Ruby...).
I get 310 errors when I try to click the link. &gt;The webpage at http://playmycode.com/blog/2011/03/simple-yet-effective-javascript-optimisations/ has resulted in too many redirects. Clearing your cookies for this site or allowing third-party cookies may fix the problem. If not, it is possibly a server configuration issue and not a problem with your computer.
Is there some crazy reddit I am missing thats full of images?
The Quby overhead is actually pretty low as most of the concepts can be implemented with very little boiler plate in JS. The hope is also that any overhead can be clawed back by the browser specific bits of code Quby generates.
Yea, the browser specific bits can give quite a performance boost, the only real problem with them is their constantly changing ways. I'll be glad when the various js engines settle down a bit, for now I mostly stick to things that work relatively well in all, but it's tricky sometimes. Good stuff!
Mostly it sounds like you're correcting the garbage that some third-party layer (Quby) is introducing. This is why I tend to avoid most third-party layers. They aren't necessary, they frequently ruin performance and sometimes introduce bugs. Write the language for your deployment environment, or be ready for the consequences. In this case, it sounds like Quby is far from ready for production, let alone performance intensive apps. You've got the wrong language.
Quby is written for PlayMyCode, and it's actually produced by me! So I'm building the language I want. In this case it is also a necessary layer as we need games to be sandboxed so they are safe to embed on other sites (there are plenty of annoying but legit things you can perform with JavaScript).
Ok, so it's a first-party layer. :-P If you'd said, "Some JavaScript optimizations I recently did for my game platform", that might be more accurate, but also significantly less interesting to me.
I'm not pro-implementing other languages in js either (at least for performance apps), but I like being a little nicer about it.
From everything I've read I've had the impressions it's just a new iteration of V8, but with more significant improvements then usual. Given how significant the new performance improvements are, I think they also just wanted a name they could slap on top to label all of the stuff they have done for Crankshaft in one.
Direct link: http://bonsaiden.github.com/JavaScript-Garden/
Nice idea, though it might just annoy whoever does the copying. 
The reddit headline is misleading. These are not performance optimizations to JavaScript optimizations, because no human would be using those constructs so often that they became a problem. Whoever is using the arguments array frequently enough to need to optimize it is writing some VERY strange code, which in this case is because it's not a human, it's some compiler.
I just wanted a clean view while going through /r/worldnews and stuff like that.
Credit where credit is due, at least. Though, it's probably not much solace for the starving content author.
Shit like this makes me lose all respect for the publisher. I'd have zero problem with not only stripping the attribution, but also publishing under my own name. You do NOT fuck with the user's basic access to data.
I'm sorry but your incorrect. The performance improvement around arguments was all during the compile stage when the outputted JavaScript is generated. The JS that does that is all hand written. When generating the outputted JS I concat strings together, and I do this using my own 'printer' object for handling very large amounts of string concatonation. It's append takes a variable length number of arguments so I can pass in any number of strings to append on to it. For example to generate the JS for a method call... printer.append( '.', methodName, '(' ); /* append each parameter */ printer.append( ')' ); ... again it's all hand written. If you search around online you'll find lots of other non-compiler examples of functions that take variable length arguments. Even array.push takes a variable number of arguments!
I'm not saying that variable length argument lists is unheard of. (I do it fairly often.) But not in every method. And not so often that I'd risk performance.
I appreciate negativity about Node articles but please elaborate.
nginx has a pretty standard worker model: There's one event loop thread that passes work off to a specified number of workers. This means that you can have any number of threads being processed in parallel for only one event loop. Node.JS is the worker model you'd use if you didn't know what you were doing: You have 1 thread. If one request blocks on a node app, they all block (can you imagine writing a webapp where I/O access is something expensive?). This is why Node people tend to have clusters of node.js instances and reverse proxy back through a load balancer. It's a lot of bullshit to compensate for a deficiency in Node.
:P Its cool I was just messing with you.
I'd have to agree. Scripts like this are the reason something like NoScript is essential. Don't add to clipboards or selections unless it's by a button that says 'click here to copy this _and more_'. If a publisher is concerned about content theft, they need to resort to user accounts or some other access control method, while at the same time realizing that it's impossible to secure anything from their end once the data is already en route or displayed on screen. If one doesn't want something published, don't publish it. The nature of the web is to propagate everything. Based on the number of lawsuits against simply republishing public content, it's apparent that people fail to realize this. Again, if one doesn't want something published, don't publish it.
Awesome reference yo!! Thanks for sharing!! :D
I kinda like it. It's more convenient than copy-pasting the link as a separate operation, and I can always edit the result after pasting. Since I wouldn't copy content without attributing it, it's almost always something I'd want. Relatedly, I like that when I save a page to my hard drive from IE, it injects the original link as a metatag. Being able to go directly to the original source is more important to me than saving a verbatim copy of the html being served.
iframe: Doesn't seem necessary. Making the canvas opaque (background:#fff or whatever) and things like retained layers fix this issue. Everything else in that article appears to be specific to Quby. **Edit:** @downvoter please show me an example where using an iframe makes any difference. I do know that it makes a difference with Firefox 3.x (= no retained layers), but that isn't relevant anymore. I for one can't see a performance difference between the minimal naked page generated by my dev server and the actual layout anymore, if I use Chrome 11, Firefox 4, or Opera 11 (or 11.5).
Upvote for humor! 
I downvoted you twice. Once for the blogspam link and once for **knowing** you should have linked to the original site.
"The nature of the web is to propagate everything." And that's exactly what this plugin encourage. I honestly can see why it can be seen as intrusive to some users, but stripping the credits if it bothers you is really no big deal. You also have to understand that some people put a lot of time into content writing/publishing and having their stuff passed around out of context or without any credit is not helpful at all for them. FYI, if you don't want specific section of your content on which you don't want INK applied, it's always possible to specify it. By default INK won't be applied to pieces of code because that's exactly the type of content that is actually used by people to work with and not to share. Try it out on this page: http://www.no-margin-for-errors.com/projects/prettyphoto-jquery-lightbox-clone/ Try to copy code, you'll see INK won't be applied to it. And if you have any idea for improvement, people who followed my blog for a while knows that I'm open to suggestions. -- full disclosure, I'm the developer ;)
I linked to both so that people can read my commentary if they want, and for people like you that just want to go to the original site. Hoped that this would be the best of both worlds.
I love the concept of this; I've actually been working on my own rendition of the idea. But I found it hard to understand how everything worked. Your docs are fine but more examples would be really nice.
&gt; But first we have to get generators into V8 and ECMAScript!
Can someone comment on whether this blocks the whole JS process? Or does wrapping it in a generator somehow avoid that?
[Relevant](http://tobyho.com/Trampolines_in_Javascript_and_the_Quest_for_Fewer_Nested_Callbacks)
It's blogspam just because he linked to a blog post? &amp;#3232;\_&amp;#3232; A blog post in which are usefull informations and links? Nope, not spam. Downvote for you ;) 
I don't believe it blocks. His examples don't show this, but those chunks of code would exist in the context of a generator function like: function() { var foo = yield read("foo.json"); var bar = yield read("bar.json"); } I think the idea is that you pass that function to a special `spawn()` function in his [jsTask](http://dherman.github.com/jstask/doc/api.html) system. That function then returns a Task object that knows how to pump the generator and walk through the `yield`s.
-1 for Quora.
Well now I feel like a jerk after saying it like that. I do have to commend you on using MIT license. From reviewing code, the only things immediately that pop out at me are: 1) line 91: using alert if 'window.BitlyCB' isn't valid. I'm assuming the website visitor will get this message and be confused...? 2) Line 95 '// Call home to make sure users allow INK to run': personally I start frothing at the mouth if I see 'call home' attempts. You have to be absolutely sure this is necessary even above the need to collect stats. Otherwise, it looks like you're handling the IE vs FF issues well as far as I can tell, and something like this can definitely be useful for other purposes - like a wyswyg editer or a browser game. Regarding the never-ending battle over republishing rights, and the inherent nature of the internet as an unstoppable machine which forcefully propagates data no matter what people want and no matter how hard they try to contain it... personally I agree on the point of attribution, especially where citations are necessary (ie internet arguments). But I still disagree for various security reasons to hijack what goes in the clipboard or alter selected text for any reason like this. I really don't like that browsers permit this in this way.
My reasononing was - if OP wasn't spamming and is interested in expanding our knowledge of javascript, wouldn't at least ONE of his submissions over the past year be to a site other than badassjs? If he was truly interested in us learning wouldn't **this** post be about the site and the additional information link be to his own site that reviews it and benefits him financially?
give-me-teh-codez
Can has testcase?
At a glance my guess is that setting the `window.onload` is your trouble. Try: window.onload = function () { setdictstyles(); setstyles(); } and that should work. 
You are an amazing human being. It works! Thank you so much! Thank you, thank you, thank you!
You forgot the operative word. HOWTO: Create native-**looking** iPhone/iPad applications. 
However [this platform](http://www.appcelerator.com/) does allow you to write native iPhone and android apps in javascript 
moving forward you might want to look at using jquery, its amazing simple and powerful.
Just use http://www.sencha.com/products/touch/ or a jQuery plugin that does just about the same
you should check out [PhoneGap](http://www.phonegap.com/). It does a similar trick with wrapping a web app, but adds in support for Apple's APIs for the camera, contact lists, etc.
The second is conditional - if the window.jQuery object **doesn't** exist (i.e. it hasn't already been loaded), then write the text which will cause jQuery to be loaded.
yeah, what they said :p but to elaborate a little, being you said you wanted to learn from it, specifically what is happening is: first you have the !window.jQuery which will be true if jQuery doesn't exist and false if it does. then you have the &amp;&amp; (and) conditional; javascript will only execute the second statement (load the second js file) if the first one evaluated to true. so, only if window.jQuery doesn't already exist (or is a value which evaluates to false) will the second script be loaded.
I use this, it's awesome. Not as perfect as pure Obj-C, but way better than web-apps. And it works on Android.
Using CDN, if it's down, stay cool bro. Offline kids love dat cache (webapps, domainlocked intranet, 3rd party stuff)
Except it's not native. It's a JavaScript interpretor running on the device.
Have you found anything which more closely adheres to how you would like to implement the functions jQuery allows? All or parts of?
Many thanks. Cristal clear now!
Thanks!
Do it.
TIL: &gt; The only way to actually remove a property from an object is to use the delete operator; setting the property to undefined or null only remove the value associated with the property, but not the key. I thought setting to `undefined` and calling `delete` were equivalent. It boggles my mind that an `undefined` property *won't* shadow but yet mysteriously still exists. If that's the case, why *does* JS have `undefined` at all?
You may also want to omit the protocol from the cdn link... that way it won't interfere with https requests. &lt;script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.min.js"&gt;&lt;/script&gt; 
It will finish if you wait long enough. But that's the point, the algorithm randomly moves things around each iteration and checks if the elements are sorted.
It is *mostly* native. A good explanation of how it works: http://stackoverflow.com/questions/2444001/how-does-appcelerator-titanium-mobile-work
Really? Why did I have a javascript error come up the other day on the device? You mean it compiles it all into C code but then only does error checking on the device?
Don't use document.write either. Much more elegant to locate a dom element then appendchild the script element.
I think they are translating the error messages so you actually know what it means. I've seen it throw obj-c errors where it was actually a javascript error.
The only problem I've had with phonegap is it's slow it is. Should be better in the new firmware though.
And I'll try to find the sources, but I remember reading several times that this is an anti-pattern, a bad way to use conditionals. This should simply be something like... if (typeof window.jQuery === 'function') or a similar test.
But doesn't that mean that you have to defer loading jQuery? Could this potentially bring some troubles to scripts expecting jQuery to be available before DOM is ready?
[/r/coffeescript/](http://www.reddit.com/r/coffeescript/)
You could use this http://yepnopejs.com/
I'd be down to help collaborate on making such a site. What kind of backend were you thinking of using? Node would be the trendy and JS thing to use, but I could see something like Django being much faster to write and deploy. I'd love to use Erlang, for fun, but that might not be the best idea if you want people collaborating on writing it.
The script tag is parsed before the dom is ready. It's been a while since I had to deal with this issue, but I *think* the last tag in the DOM would be the current script tag being handled.
I believe this already exists. It is a good idea, and I don't like the way the existing group goes about it; not trying to talk you out of anything, just helping you be ready and aware so you can differentiate. http://99tests.com/
1) It's meant for site owner when they setup INK, if bit.ly is no properly integrated they'll get an error. It's true it might be confusing if the site owner doesn't notice it, I'll see what can be done. 2) I understand how it can scare people. However, the goal of this "call home" is specifically for users who want to disable INK across the web. The call home basically check if a cookies is set to true or false. If it's true INK will display, if it's false INK won't be shown. That will work on any site on which INK is applied. I'm still playing with the code and experimenting. I really get the feeling this has potential so I'll try to maximize it :) Oh and as a sidenote...first type of site to install INK...porn sites! That's what the internet is for after all.
Good idea. The only problem I foresee is, people will write tests that they WANT to pass, but that aren't necessarily supported.
Thanks. I didn't know that could work.
You mean want to fail? The point is to try and break it to help find bugs and form part of the test suite so it never breaks again. I guess it would have to be moderated so the test is valid and is an actual bug.
I'd like to use Rails. Node would be hard to find hosting. My background is PHP but I wouldn't mind moving away from that.
Node hosting is a lot easier to find than you'd imagine, I was running a node instance on my webhost for a while. I'm not really a Rails person (ruby is a little too... cute, for me, and i don't care much for the rails community). However, I support anyone who doesn't mind moving away from PHP. I guess, I'd be willing to work on the front end, either way and would love working on the back end if it's in node or django. I really recommend django if you're interested in Rails. It's the rails of python, with far less piercings, dyed hair and snobbishness.
I started using it, then I discovered that the include paths are different depending on whether you're using iphone or android, amongst many other differences. It's not really a great cross platform solution. 
Haha. I'm in. PMd you.
Perhaps minify or pack your code before going to production? At least it'll be damn hard to decode and those time involved will not be worth it just to cheat. :P 
Modern browsers include debuggers that would happily modify captured variables (an unfortunate fact of life), so if someone is actively trying to cheat it's hard to prevent them. Realistically the only way to prevent cheating is for a trusted system (eg. the server) to be essentially running the same game and then detecting when a client state deviates from what is expected.
Packing the code depending on a salt that changes on the time/date... That way, even if they spend a while studying the code and working out which variables to change by that time it'll be different.
Remember that your code is still coming into my browser across a connection that I control fully. If I wanted to it would take me no time at all to rewrite any of your code using a rewriting proxy. For that matter I could just submit bogus data, bypassing the game entirely. 
You should run the entire game logic on the server. If you do that you can also check if the player's moves are valid. I actually think singleplayer games with online highscores are way more difficult to secure...
It'd be fairly trivial to ignore whatever variable names you use and just do a packed code -&gt; AST -&gt; normalized code transformation with every update of the source. You can't trust the client, period. You have no choice but to have a server enforce the rules.
For me it depends on what you define as "cross platform". Ofc, the include-problem is indeed annoying, but there are "fixes" available that solves this. When using Titanium you should definitely test it on all platforms at the same time, all the time, to ensure that things actually work. You should also make sure that your UI matches the OS. Building an iOS-app and expecting it to look the same in Android is just stupid.
i felt much better about minifying until i discovered jsbeautifier.org, though it has come in very good use 
&gt; Building an iOS-app and expecting it to look the same in Android is just stupid. Of course. But I expect to be able to build generic libraries that my platform-specific UI code can use. Mostly, my problem was that the include bug is known. A ticket was created for it, and a large number of users indicated that they'd like to see it fixed as a priority. Then it was deprioritised without any real explanation. Two weeks later I saw the announcement of "Titanium+Plus", a premium product offering integration with various third party services. It seems to me that they're prioritising their development towards monetisation by forcing you to buy individual modules any time you want to do something advanced. Even worse, there aren't (as far as I can see) any actual prices for these modules- just lots of 'contact sales' buttons. 
Any client-side code is hackable. In the case of JavaScript it's trivial to replace the entire JavaScript application with a modified version. In your example private members do nothing if you can replace the Game object entirely, or whatever contains it, or whatever contains it, all the way to the top.
The code is a little confusing to me because they're declaring different versions of the same library. OK, if the google CDN is available, gimme 1.5.1. If not, gimme 1.4.3 locally. Wut?
&gt; However, I support anyone who doesn't mind moving away from PHP. This is an immediate warning that you're dealing with a zealot who will make choices for reasons other than "best technology for the job."
As long as you test on all devices while developing you should be fine. We (the company I work at) have managed to build a pretty big library ourselves. I agree that Appcelerator has some prioritizing-issues, I definitely want the Android-issues to be fixed before they start with new features. But hey, they also need money to run their company and support and extra-modules is a few ways they can make money. If you don't like paying, you can build your own modules (if you know how to). Titanium has full support for custom modules. I should mention that I'm not a die-hard fan of Titanium, not yet at least. I like the framework overall, and I've learned to build apps really fast. But I'm also learning Obj-C at my free time, so we'll see if I'll continue using Titanium afterwards (with the knowledge to make modules and fix bugs, maybe) or if I'll give up and go completely native.
good idea but kind of kills the "open source spirit" the OP mentioned.
In your example, I can still just define Game.getLives to be whatever I want. Game.getLives = function() { return 99; } You can wrack your brain trying to think of ways of keeping someone from doing things like that, but at the end of the day, JavaScript's flexibility combined with the fact that it's running on the client means that they are always in control of that code, and you can't trust it.
run all the essential game logic on the server, and only the visual &amp; UI part in javascript. I'm currently working on (turnbased) javascript game myself. Path suggestions and fight-outcome suggestions (to help the player) are done by javascript, but the real calculations are done on the server.
I thought we taught this to all new game developers. Did someone skip the course in game-development where they say, "The client always cheats. The server verifies."
Game design is a big factor in deciding how much security you need. I don't track high scores for my HTML5 game, but people can post their solutions. I don't have to do any enforcement, because anyone who posts a solution that fails on everyone else's version of the game will be mocked.
This is true, but let me elaborate a little further. As far as a multi-player js game, you would probably wanna make a `dumb terminal ` system, that is to say, the client just draws what the server tells it to, all **game logic** is handled server end. Lots of cool things in the way of Node.JS are allowing this. But, I also tend to use JS just to prototype games with the intention of re-writing them in C, python, whatever.... At the end of the day, you should **never trust the clients browser**, of course you can obfuscate your code, but as mentioned above, the dev tools in browsers today allow almost too easy access to the *business logic* of the web.
What is your game?
No zealot here, I'd write something in PHP, or Perl, C, Pascal, ADA, x86, or whatever, if it was the best tool for the job. I just think that with the advent of rails, django, node, etc (and hosting for them), there are better tools than PHP for this type of project. I did come off a little harsh towards RoR there however. I've got nothing against the language/platform (aside from my personal language preferences). I've just seen a little too much of [this](https://twitter.com/#!/scottvdp/status/45134056429596672) lately.
[Runestone Wisp](http://runestonewisp.appspot.com) It's immune by nature from the kind of cheating mentioned here, which makes me hesitate to mention it as an example.
stackoverflow.com
Well, immediately I see that you put semi-colons on your first couple of else statements. Try removing those.
var x=prompt("What's your favorite number?",""); try { if (x&gt;=100); { throw "Err1"; } else (x&lt;0); { throw "Err2"; } else if(isNaN(x)); { throw "Err3"; } else if(x=7) { throw "Err4"; } } catch (er) { if (er=="Err1") { alert("You have a high taste in numbers my friend"); } if (er=="Err2") { alert("you are a very negative person"); } if (er=="Err3") { alert("javascript can be smarter than you think" + '/n' + "Don't trick me"); } if (er=="Err4") { alert("ZoMg MiNe ToO"); } } }
You put semi-colons at the end of your starting "if" lines. Also, once you write an "else" statement, that's it for the conditional. You can't add an "else if" or another "else" after that. try: function show_numbers() { var x=prompt("What's your favorite number?",""); try { if (x&gt;100) { throw "Err1"; } else if (x&lt;0) { throw "Err2"; } else if (isNaN(x)) { throw "Err3"; } else if (x==7) { throw "Err4"; } } catch (er) { if (er=="Err1") { alert ("You have a high taste in numbers my friend"); } if (er=="Err2") { alert ("you are a very negative person"); } if (er=="Err3") { alert ("javascript can be smarter than you think" + '/n' + "Don't trick me"); } if (er=="Err4") { alert ("ZoMg MiNe ToO"); } } }; EDIT: Also, there's really no point in using a try/catch block in this situation. Just have the alert directly in the if/else blocks. Unless you're doing this as an exercise in exploring the try/catch structures, in which case, go for it. What I'm suggesting might look like this: function show_numbers() { var x = prompt("What's your favorite number?", ""); if (x &gt; 100) { alert ("You have a high taste in numbers my friend"); } else if (x &lt; 0) { alert ("you are a very negative person"); } else if (x == 7) { alert ("ZoMg MiNe ToO"); } else if (isNaN(x)) { alert ("javascript can be smarter than you think" + '/n' + "Don't trick me"); } }; EDIT2: Also, your "else if (x = 7)" should actually be "(x == 7)" and "/n" isn't the character sequence for newline - "\n" is. You should really consider using Firebug in Firefox, the DOM inspector in Chrome, or some other product like JSHint to find these bugs. You have lots of rudimentary mistakes that can be easily solved in a few minutes of careful observation, and this really doesn't warrant a post on this subreddit - especially not a double post.
&gt; I just think that with the advent of rails, django, node, etc (and hosting for them), there are better tools than PHP for this type of project. Well, all you have to do is name one large product which was both build in rails or django and wasn't forced to leave the second it scaled, and I'm right there with you. Or, y'know, have a more legitimate technical criticism of PHP than "arguments are in differing orders and I imagine it's a sloppy language somehow." &gt; &gt; However, I support anyone who doesn't mind moving away from PHP. &gt; I've just seen a little too much of this lately. He says, having just done it himself. Rails is garbage. Anyone who says "I imagine rails and django are better than PHP" is a novice who's never built anything large or security conscious. Again, just tell me one large product that continues to run in Rails or Django today.
I know you're probably learning Javascript, one of the biggest tips I can give you is validate all of your Javascript code with [JSHint](http://jshint.com). Something you need to be aware of is [Semicolon insertion](http://www.openjs.com/articles/semicolon_insertion.php). It can ruin your scripts. Try to put your curly braces on the same lines as if/else. if (cond) { .... } Edit: code var x=prompt("What's your favorite number?",""); try { if (x &gt; 100) { throw "Err1"; } else if (x &lt; 0) { throw "Err2"; } else if (isNaN(x)) { throw "Err3"; } else if (x === 7) { throw "Err4"; } } catch (er) { if (er === "Err1") { alert ("You have a high taste in numbers my friend"); } if (er === "Err2") { alert ("you are a very negative person"); } if (er === "Err3") { alert ("javascript can be smarter than you think" + '/n' + "Don't trick me"); } if (er === "Err4") { alert ("ZoMg MiNe ToO"); } } 
Take your code over to [jshint.com](http://jshint.com), paste it into the available textarea and click the "jshint" button. Start with the first error and begin fixing things until it says your code passes. After that, read up on other ways to handle the if/else stuff... consider a switch statement, for instance. Next, bone up on try/catch and what it should be used for and why you shouldn't be using it like you are.
Remove semicolon ";" from end of each conditional statements. use "else if" instead of "else" ( In general "else" doesn't check any particular conditions ).
thank you so much, after days i finally got it working
I'd go one further and say skip JSHint and go with [JSLint](http://jslint.com) until you know javascript at a level to understand why you don't need to follow it's draconian rules.
Just to re-iterate, you really need to start using a debugger/inspector/console. (not all browsers are equal in that area. The webkit inspector in chrome is darn good. The firebug extension for firefox is a great choice too. The rest.. depends.) That'll instantly take you from "it doesn't seem to work" to "Syntax Error: unexpected token else" which is vastly more useful. Fix it, reload, see the next error. Rinse and repeat until things are happy. 
Well you can't really have a **multiplayer** game without a server application, so any actions should be verified on that server, as far as thats possible and does make sense. JavaScript should indeed mostly provide the user interface in that case.
What do you mean by a 'javascript's popup'? If you're talking about a new window, just change the &lt;title&gt; of that window. If you're talking about the heading of a modal dialog, it would depend on what script/plugin you are using.
Apple should eventually provide a native runtime environment for JavaScript applications so developers are not required to use a third party conversion tool. If they want more income through apps, they really need to lower the threshold so web developers can code platform independant in JavaScript. Pack it in a sandbox, provide some rudimentary API and the amount of apps will explode.
We need more info. Are you trying to change the title from a call to "alert('some text')"? If so, that can't be done. Are you writting your own message box? If so, how? If not, check out something like [this](http://labs.abeautifulsite.net/projects/js/jquery/alerts/demo/) (using jquery).
im talking about alerts and confirmation boxes, like this one http://imgur.com/fphVR
* http://stackoverflow.com/questions/1905289/how-to-edit-a-javascript-alert-box-title * http://stackoverflow.com/questions/43955/changing-the-default-title-of-confirm-in-javascript
aww :(
I'd been using this pattern for a while in both Js and PHP and through personal experience I've come to the conclusion it is an anti-pattern because it can bring confusion to those who aren't used to using it. I see no reason to use this pattern (other than saving a byte or two in Js land). I'd like to hear other peoples views though, if u can find the source that'd be cool... i guess the same could be said for ternary operators, but that style is more adopted than (foor) &amp;&amp; bar() or (foo) &amp;&amp; (bar = foo) etc..
My mistake. I played a little with the code before posting my question. Sorry.
You should convert the return value of `prompt()` to a `Number` before using it in numeric comparisons. There's no need to join 3 strings together for the `isNaN` message. Without an else clause nothing happens if `x` is between 0 and 100 (inclusive), except when it is 7. The function name is odd as well since it doesn't actually show any numbers. Lastly, by assigning the message to a variable and then alerting it at the end future changes to the code become easier. If you want to change the `alert` to a `console.log` you only have to change a single line. Here's another iteration of that code: function show_numbers() { var x = parseInt(prompt("What's your favorite number?", ""), 10), msg = "hmmm.... pretty average taste in numbers"; if (x &gt; 100) { msg = "You have a high taste in numbers my friend"; } else if (x &lt; 0) { msg = "you are a very negative person"; } else if (x == 7) { msg = "ZoMg MiNe ToO"; } else if (isNaN(x)) { msg = "javascript can be smarter than you think\nDon't trick me"; } alert(msg); } *Note: This code behaves differently than the original code. `isNaN("") === false`, but `isNan(parseInt("", 10)) === true`. If that behaviour is important then change `parseInt(prompt(...), 10)` to `Number(prompt(...))`.*
Twitter still uses Rails for their interface - but not the message backend. Hulu and Justintv use it, and github runs in it, at least according to wikipedia.
Get your hands on Douglas Crockford's book "Javascript the Good Parts" (http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742). That will help you get started with the language. Here is a talk he did at Google: http://www.youtube.com/watch?v=hQVTIJBZook If your looking for some neat boundary pushing javascript check out the site: http://badassjs.com/
lots more crockford videos here http://javascript.crockford.com/, excellent stuff
Although I don't use it often, I'm OK with the ternary operator because it is specifically designed for that use (in the case where you return a value). This pattern on the other hand is just exploiting a specific behavior, so I consider it a hack at best. Edit: Found it! Well, I found 1 source: [JQuery core style](http://docs.jquery.com/JQuery_Core_Style_Guidelines). The last line before "Function Calls". I'm pretty sure it is somewhere in JSLint's doc, but I can't find it. That site is awful design-wise.
a good way of learning is practical trial and error. try and build something. even if you aren't able to build it, you would have learnt lots by trying to build it. for example, how about trying to build a simple drag n drop script? there's lot of shitty Js docs out there, if you need to get a better understanding of syntax and function definitions, use the Mozilla doc center. Just prefix 'mdc' before your google search term. EG: http://www.google.com/search?q=mdc+indexof
I'm reading this now and also highly recommend it. In case you aren't looking for a book, though, and just want some ideas try these (many inspired by Javascript the Good Parts). * Do some object oriented javascript. Create an object with methods and private properties. Use it. Allow it to be extended via callbacks. * Modify some built in objects. Add trim to String for example. * Understand "this" and the rules for how it is set depending on which of the 4 styles of function invocation in use. * Research and implement the module pattern. * Run all your code through jslint and understand what it's complaining about and why it might be suggesting you fix it -- even if you disagree. * Play with a framework like jQuery if only to see how a well written library feels to use.
I'm not arguing that Rails or Django should be used for large, high traffic projects (though our dear Reddit still uses Python &amp; Postgre on the backend...). However, these technologies are great for rapidly prototyping ideas and adequately serving them to a moderately large userbase. If the project takes off and half the developers &amp; programmers in the world start using it, then you'd wanna rewrite it in something more scalable (Twitter manged with just RoR for a while). I think you're asking a biased question, here's the reverse: How many large projects started by running in Rails or Django? OP mentioned that he wouldn't mind moving away from PHP, I gave him a few alternative ideas, based on my own experience of moving away from PHP and this makes me a zealot, cool. *EDIT: spelling
Lots of good answers on a similar question last week: http://www.reddit.com/r/javascript/comments/fz5ph/hey_rjavascript_i_need_help_kinda_of_a_beginner/
I personally like the Nettuts video series. Perfect for starters: [Nettuts video series: Javascript From Null](http://net.tutsplus.com/tutorials/javascript-ajax/javascript-from-null-video-series/)
Using various debuggers, I haven't been able to hack [this game](http://canvasrider.com/). I've tried Firebug and Tamper Data to submit to the server false values. No dice. I know some people have managed to cheat, and place goal points directly in front of them, but the creators supposedly patched this over. I've only seen one or two "hacked" high scores, and I've been playing this for months.
There's a good discussion of the problem [on Stack Overflow](http://stackoverflow.com/questions/5250403/what-good-ways-are-there-to-prevent-cheating-in-javascript-multiplayer-games). The conclusion: It *is* easier to tamper with browser-based games than it is compiled games, but tampering is not a new problem. Nothing sent to or received from the client is safe as long as your users own their computers. You *could* stop `javascript:…`-style cheating (i.e. the kinds of cheats which would be easy to pass around the 'net) by **keeping your game out of the global scope**. For instance, if you put that `Game` object (and everything that needs to manipulate it) inside an anonymous function, and don't use undeclared variables or put anything on the `window` object, than it's invisible and untouchable from the global scope. This will not stop anyone who knows how to use a debugger, or how to download, modify and run the game locally.
Yeah it's mainly for people with projects that don't fancy writing tests and can get help from the community and offer prizes. That sorta thing.
Don't use alerts, they suck. There's never a reason to require a modal dialog box for the whole browser. Look into using some other way of outputting your information (either dump your message in a div or use one of the many jQuery modal box things).
coffeescript != javascript
For some actions, you could relay the action of one user client to other randomly picked clients (e.g. two or three) and simulate the action with their game state. You're still left with the possibility that the other clients are cheating too. But assuming most clients aren't cheating, a side-effect of this approach would be that when the other clients don't agree on whether an action is allowed or not, you'd know at least one was cheating. And if you logged all those 'irregularities', you'd quickly find a pattern of who was cheating, and be able to bring the ban hammer down on them. I don't know if there are any other obvious downfalls to this approach, nor if any games implement a similar system, but I just thought it'd be an interesting way of doing things if you wanted to keep the server load to a minimum.
"view source" is probably your most valuable learning tool. go to any website and take a look at the javascript that runs it. Read the code, learn from it. One of the greatest things about javascript is that source code is readily available in many different types of problem domains. 
Hi, following the js related threads down the wormhole.. Do you have any suggestions for projects to have a look at? I'm Ok banging something together with help from the console but would love to see a thoughtfully created js project.. Something not too big but which uses prototyes in the wild would be super useful...
This would be a great time to learn about arrays.
No. setting to undefined and calling delete were NOT equivalent. Example: function A(){ this.a = 1; this.b = 2; } var oA = new A(); delete oA.a; oA.b=undefined; alert('a' in oA);//false alert('b' in oA);//true just as &lt;Javascript Garden&gt; says,setting the property to undefined or null only remove the value associated with the property, but not the key.
Yes, you're repeating what I just said I learned. So... why does JavaScript have `undefined`?
I'd take a look at [node](https://github.com/joyent/node/tree/master/lib) or [express](https://github.com/visionmedia/express). You can largely ignore stuff you don't understand regarding protocols or other domain specific things. But you'll get an idea about the objects used and how they work together. Maybe start with express and then look at node's http module, or whatever interests you. These are good projects to learn vanilla JS from, using plain old prototype. Other than that just glance at projects by [ry](https://github.com/ry), [isaacs](https://github.com/isaacs), [tjholowaychuk](https://github.com/visionmedia), or any other projects you like. My github client [gitter](http://samhuri.net/proj/gitter) uses prototypes and is pretty straightforward, except for the `createResource()` thing. It's not terrible but I'd like to rewrite it in a more straightforward manner.
Thanks mate. I'll have a look. Express looks really cool and aligned with my interests (small, flexible frameworks ala camping/sinatra which get out of your way) so I'll definitely be checking it out.
Which is true for all games. Ever. It just seems at first glance less secure because it is javascript.
They wanted another falsy value. Can't have too many of them! This may be one of the quirky bits the article is talking about. undefined is what unspecified values in functions get, distinct from null or 0. But really, I don't think undefined is special. 
Seems very nice! How is the performance when writing say 1,000 lines of code? Does it re-render the entire input on each key event? Also have you thought about calling the renderer on keydown instead with a setTimeout(0, render)? It gives an even more realtime experience when typing in the textarea :) 
awesome idea!! :D i can see plenty of uses for this, and yea i hope that it can be optimized as what mafintosh said! :) thanks for sharing!
Could you clarify your tip? &gt; There's never a reason to require a modal dialog box for the whole browser. Then: &gt; or use one of the many jQuery modal box things wut 
As with all code, there will always be optimisations... at the moment, the renderer will use web workers if they are supported, and can easily handle 1000s of lines of code... older browsers and IE do not support web workers and so render slightly slower but still show good performance. The priority at the moment is developing the parsers so that the library comes shipped with complete parsers for popular markups (BBCode, Markdown, Wiki etc...). They are simple to write but take a bit of time (all help welcome :) ). Once the parsers are complete, performance will become the priority.
The jQuery modal boxes are only modal for the page they're used on. An alert will stop you from switching to another tab.
I wouldn't help you even if i knew how. 
This is something which could prob be determined without too much trouble. I refuse to do this.
&gt; (though our dear Reddit still uses Python &amp; Postgre on the backend...). Nothing wrong with Postgres. &gt; If the project takes off and half the developers &amp; programmers in the world start using it, then you'd wanna rewrite it in something more scalable (Twitter manged with just RoR for a while). Twitter nearly failed because of RoR, and they've sworn to never use it again as a result of the catastrophe of having to mid-flight rewrite. And you're holding this up as an example of an acceptable way to plan a deployment. Rewrites are *catastrophic*. Have you ever actually been through one in a successful project? Whenever someone says "you can just rewrite it later," that's a red flag that they have never actually been through any of this. What you're advocating is product suicide. &gt; I think you're asking a biased question, here's the reverse: How many large projects started by running in Rails or Django? Almost none. I'm as happy with that question, because I can only think of one - Twitter - and they swore they'd never go back. &gt; and this makes me a zealot, cool I love how you pretend I said something completely different to support that position than what I actually said.
Twitter's interface is basically static. Claiming it's rolled in ruby in some meaningful way is disingenuous in the extreme. Hulu? Well, that's interesting. It's not exactly a high hit site - good argument for high volume because of the bandwidth of the video, but that isn't a ruby task, is it - but that's interesting all the same. Github I have a difficult time believing sees significant traffic. Programmer centric sites have extremely narrow readerships. I'd be willing to bet Github's traffic hasn't caught up to 2004 Slashdot. Upboated for data.