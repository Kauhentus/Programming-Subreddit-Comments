Now i'm curious to know how "high" the tone generator can get. I wonder if it is a power of two, actually
Personally, I don't think the whole regex readability debate even needs to be had: if you don't like reading regular expressions, leave the string transformation code to somebody else. Regex's are a tool for a job. Don't show up at a construction site and refuse to use a hammer, and definitely don't run around taking other people's hammers.
"Don't use RegExp! Abuse split and join instead!" Ridiculous logic.
I think it's more clever to debounce the scroll event that call it on rAF - the performance jank comes from the massive number of scroll handler call, not from when it's called.
Looks good. MIT license?
Use recursion when it's the easier option (and N won't be that large). In theory, everything that can be written with recursion, can be also written without it. However, some things are really difficult without recursion. E.g. if you want to write the [Ackermann function](http://en.wikipedia.org/wiki/Ackermann_function) in a non-recursive style, you'll need to work with a stack and your one-liner turns into a dozen lines.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Ackermann function**](https://en.wikipedia.org/wiki/Ackermann%20function): [](#sfw) --- &gt; &gt;In [computability theory](https://en.wikipedia.org/wiki/Computability_theory), the __Ackermann function__, named after [Wilhelm Ackermann](https://en.wikipedia.org/wiki/Wilhelm_Ackermann), is one of the simplest and earliest-discovered examples of a [total](https://en.wikipedia.org/wiki/Total_function) [computable function](https://en.wikipedia.org/wiki/Computable_function) that is not [primitive recursive](https://en.wikipedia.org/wiki/Primitive_recursive_function). All primitive recursive functions are total and computable, but the Ackermann function illustrates that not all total computable functions are primitive recursive. &gt;After Ackermann's publication of his function (which had three nonnegative integer arguments), many authors modified it to suit various purposes, so that today "the Ackermann function" may refer to any of numerous variants of the original function. One common version, the two-argument __Ackermann–Péter function__, is defined as follows for nonnegative integers *m* and *n*: &gt;&gt; &gt; --- ^Interesting: [^Knuth's ^up-arrow ^notation](https://en.wikipedia.org/wiki/Knuth%27s_up-arrow_notation) ^| [^Primitive ^recursive ^function](https://en.wikipedia.org/wiki/Primitive_recursive_function) ^| [^Hyperoperation](https://en.wikipedia.org/wiki/Hyperoperation) ^| [^Tetration](https://en.wikipedia.org/wiki/Tetration) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cjabuoy) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cjabuoy)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I'd suggest not writing your own backend as part of your Ember learning process. It'll just slow it down. Ember works just as well for small things like a todo app as it does for bigger projects. It's just not the best way to showcase Ember's strengths, because its conventional nature is primarily an asset as a project grows larger, and that makes it easier to justify its learning curve. I recommend sticking to [JSBins](http://emberjs.jsbin.com/) while you're learning, so you can ask for and receive help with your code more easily. And I think you should build things that solve your own problems. You'll feel more pride when you're done, compared to something you just got walked through in a tutorial, and you'll have something you can use. Just start small, and work up to more complex things. I'm currently busting out a pomodoro timer that interfaces with the Trello API, because I used to manually keep a pomodoro log, and then trying to keep my notes in sync with my Trello card comments was a big pain. I think it's roughly suitable as a beginner/intermediate project.
&gt; I want to then give TestFile.js out to people who should be able to access my library with or without AMD RequireJS isn't really intended to be used like that. You'll want to experiment with some of the UMD wrappers and tools instead: * https://github.com/umdjs/umd * http://urequire.org/ * https://github.com/ForbesLindesay/umd are a few examples. Personally, for this type of scenario I just hand-roll a few grunt / gulp tasks to automatically prefix and append files with amd / cjs / plain wrappers and then pass off the output to whichever build system is appropriate for the type of output- that way, you end up with three final versions of your library- amd, cjs and vanilla. Managing the 'require' statements between the amd/cjs and vanilla builds takes a bit more work, though using something like requirejs's build pragmas you can add in / strip out calls to require('...') and still have valid output in each of the build types. **Edit** You could, of course, skip all of that and just expose objects in your Require modules to the window object (optionally through a namespace) but that still ends up defeating the purpose of require, and additionally forces you to package require or almond.js along with TestFile.js, potentially duplicating or clobbering existing code in your consumer's codebase.
Really like this!
Thanks for your submission! Unfortunately, it appears as though it doesn't meet our [guidelines for promition/self-promotion](http://www.reddit.com/r/javascript/wiki/index) and has been removed. If you would like to resubmit, please take the guidelines into consideration. Thanks for your understanding.
It isn't promotion/self promotion, I'm not involved in any way with the site. It's simply a javascript related submission.
[QUnit](http://qunit.com) or [Mocha](http://visionmedia.github.io/mocha/) for model and lib tests [FuncUnit](http://funcunit.com) for functional testing (with QUnit or Mocha as assertion libs) disclaimer: I work for Bitovi - company that develops FuncUnit 
I actually got bored looking for something like this so I ended up writing my own lightbox, but thanks anyway. I'll still check yours out, it might be useful in the future !
No negativity intended. You trade freedom and control for (temporary) convenience.
Too bad there are so many magic numbers in these examples and few constants. Also, why are they doing `float PI = Math.acos(-1.0)` instead of `Math.PI`? Here's [my attempt](http://www.aaronholmes.net/audioVisual/index.html) with the audio API. No WebGL though - straight divs up in this bitch.
It's been a few months since I touched that code... This popped out at me when I went back to the code: # coffeescript h = this.evaluate( -&gt; __utils__.getElementBounds('DIV#tools').height) test.assertTrue(h &lt; 100, "tools div is collapsed: #{h}") That `__utils__` is a bit weird, for instance. There's also some `wait` calls all over the place where I found that `waitForVisible` just didn't work, even though the element was present in the screenshot. I found the same sort of hinkiness in Selenium, so I can't complain. 
Some algorithms are better expressed iteratively, others recursively. Iterating an array -- use a loop. Iterating a tree -- use recursion. Also note that just about every algorithm can be expressed both ways, it's about finding the best fit and creating the best code.
&gt; I think it's more clever to debounce the scroll event that call it on rAF Only if you don't need the screen to be repainted on scroll. If you're trying to achieve smooth animations tied to the scroll event in some way, you absolutely should use rAF.
Why is this not written in JavaScript? What's going on?
Too much method chaining. I also hate to see methods on a line by themselves with just the dot. This is ugly: function config ($routeProvider) { $routeProvider .when('/', { templateUrl: 'views/main.html', controllerAs: 'main', controller: 'MainCtrl' resolve: MainCtrl.resolve }); } It should look like this: function config($routeProvider) { $routeProvider.when('/', { templateUrl : 'views/main.html', controllerAs : 'main', controller : 'MainCtrl', resolve : MainCtrl.resolve }); } Also, there are some missing commas; such as between controller and resolve.
Yes: http://www.wavepot.com/
I'm sorry, but you've given the worst possible example. The recursive implementation of Fibonacci you've given takes exponential time and space. Observe: fib(3) = fib(2) + fib(1) = fib(1) + fib(0) + 1 That's 5 calls total. fib(4) = fib(3) + fib(2) = fib(2) + fib(1) + fib(1) + fib(0) = fib(1) + fib(0) + 1 + 1 + 0 That's 9 calls total. fib(5) = fib(4) + fib(3) = fib(3) + fib(2) + fib(2) + fib(1) = fib(2) + fib(1) + fib(1) + fib(0) + fib(1) + fib(0) + 1 = fib(1) + fib(0) + 1 + 1 + 0 + 1 + 0 + 1 That's 15 calls total. I hope you see where this is going. You should never, NEVER, implement it this way.
Probably not what you are looking for but I use Backbone and their router has worked well for me in a couple projects. 
It's a shader (in GLSL). Javascript just sends it to the GPU.
True, but it was just an example to show the how to write the two as each. I pretty much just googled it since I recall that it was one of the examples of recursion back when you first learn it. You learn big O notation later. Its only exponential because it uses 2 recursive calls. A better example would probably be factorial.
Are you asking this within the context of a specific library or framework? Because it really sounds like you are, but you're just vague enough that I can't really tell which, and the answer is going to vary widely depending on which (if any) you're referring to.
Why? For the visualization? I don't get it, is the visualization necessary? If I were to build this, I'd probably have made the audio synthesis entirely in JavaScript, and only send the values to a visualization component -- but obviously, that isn't the point here. So what exactly is this demonstrating? It's cool, and that sweet dreams there is a killer jive, I'm just not exactly sure the significance here.
Can you please explain what's going on? Why would we be writing audio code in GLSL? Just for kicks?
As others have said, anything that you can solve through recursion, you can solve through a manual loop and, of course, the opposite is true. Most problems can be solved, just as easily, either way. However, there are SOME problems that are naturally solved easier through recursion than through looping. The biggest one I've run into is parsing algebraic match. Each set of parens starts a new sub-expression. (4 * (2 + 3)) A function to parse this will have a lot of variables it is hanging onto -- temp values about location in the string, values calculated so far -- and the like. When you hit the inner-most parens, recursion allows the COMPILER to save your state and give you a new "local" environment to solve the sub-expression in, then you can return to the caller and pick up where you left off. A solution using manual loops will have to use arrays/stacks and save all of that intermediate state on their own. Creating a manually tracked recusion, really. Recursion is also really good at dealing with nested objects to an unknown depth. Again, all the state can be tracked manually -- but why would you want to?
No, Not enough control.
I think what's happening is that it's using a fragment shader to render the waveform, then reading it in and passing it to whatever takes the audio data.
From [the github](https://github.com/gre/wavegl): &gt;A 105 x 105 image is enough to code 1 second of audio (1-channel, 44100Hz, 8bit-samples). Rendering a 105x105 image each second is nothing :-) in other words, the GPU can render the sound with basically no effort, then we pipe it to the audio card. My take: I'm not experienced enough with web audio to comment on how current [web audio api](http://www.w3.org/TR/webaudio/) performance compares to this, and this seems to be pretty fast. However, the web audio api syntax is WAY different. This code seems really simple to understand (described by time functions (functional programming, right?)) and the web audio api is something I wasn't able to digest easily. 
It's also worth noting that there's no possible problem that you must use recursion to solve, as you can just as easily emulate a call stack with your own data structure, e.g. an `Array` of objects. Which can be useful if the problem lends itself to recursion and you can't tolerate a depth limit.
ಠ_ಠ but why
The second to last note in the melody is wrong. notes[14]=46;
Not so much on mobile, atleast not on the Internet part. Half of the world are still in 3G. LTE being a norm is still a distant dream. 
Is list, item, preview, widget an inheritance hierarchy or the dependency chain. If the latter I'd do some research on dependency injection and the factory pattern and think that may lead you in the direction you are looking. I'd reword the question to be less vague and provide some code though. It's very difficult to discern what you actually want and the context of the problem as it is now. 
It's a shader. Math.PI doesn't exist in GLSL. Also the number of magic numbers isn't uncommon for shader code. I deal with shader code pretty frequently at work (HLSL more than GLSL) and this is actually very readable (lots of functions, comments, well named variables...).
In general, sure. The code could use more constants but it's really not that bad. A lot of the magic numbers there are phase shifts or amplitudes and probably wouldn't have names much more meaningful than `phaseShift` or `amplitude` (which would be meaningless and noisy). A lot of the others were probably found by tweaking (hey, it's qualitative code) and wouldn't really have meaningful names. Anything else that isn't commented should probably be given a name, but really that probably covers most of it.
U can obfuscate minify and uglify JavaScript. But you can't prevent users from downloading and viewing it. 
React is there specifically to create stand alone widgets. React would fit well for your use case but it's quite large for it as well. Backbone should also work well as you can only use the bits you need (potentially for a single widget on a page you may not need collections and almost certainly don't need a router). 'use angular' is not the answer to every problem and given the description, I pray the people that said that just didn't read what you wrote. Finally, ask yourself if this is really an 'app' you are adding to the page and whether or not a framework is even required whatsoever. 
One thing nobody ever brings up in these threads is the ability to reason about your system. Shops that use backbone can count on the fact that if one developer has a question, the other can probably practically quote from the source. There is no magic, just structure and you can easily read the source and know the intricacies in a day. It's all about what type of apps you are building and what flexibility you need. On side projects that are pretty simple Web apps I'd use one of the other frameworks and be more productive than with backbone (marionette does help but still not to the level of ember or angular imo. I know what sections they make and they fit what I'm doing because they are based on the things we've all done a billion times. That's why those opinions are in there). Our apps at work... No way anything other than backbone is going to be easily molded to the use cases. It's possible, but more work than its worth. 
Why *should* it? Every line would look like: }).when('/route', { instead of: .when('/route, { The second version looks nicer to read, no? And that way you can see which methods are chained to each other.
Sometimes you really don't need a framework at all, consider Native JS.
[chirp](http://chirp.rezoner.net/composer/)
Sometimes that's exactly the goal. Why parse one binary blob when you could parse 7 concurrently. :-)
Nice :-) I was just looking for exactly this kind of thing to save medical report states on unload. Cheers.
The framework is Backbone, but essentially it's the same vanilla OOP, thus the somewhat intentional vagueness.
Mind if I PM you with some more questions? It would be really useful info for me for my own testing framework (which is also based on PhantomJS).
Funny how you actually get more upvotes in /r/javascript than in /r/webgl, even if there are less readers! Nice work!
as long as the method calls are indented, sure. It looks horrific when they are not.
I would say it depends on the size of your app, but since you do not have much experience with frontend frameworks i would suggest Angular, as it provides a starting structure, it is well documented and there is a large community for it. Backbone provides the bare minimum, allowing the developer to grow there app in a number of different structures/ways.
 }) .when('/route', { templateUrl : 'views/main.html', controllerAs : 'main', controller : 'MainCtrl', resolve : MainCtrl.resolve }) .when('/route', { templateUrl : 'views/main.html', controllerAs : 'main', controller : 'MainCtrl', resolve : MainCtrl.resolve }); vs }).when('/route', { templateUrl : 'views/main.html', controllerAs : 'main', controller : 'MainCtrl', resolve : MainCtrl.resolve }).when('/route', { templateUrl : 'views/main.html', controllerAs : 'main', controller : 'MainCtrl', resolve : MainCtrl.resolve });
Really, cool. PS: add fade-in/out when you start/stop playing the sounds, it will get rid of the clicking when you switch songs.
Here's an [example](http://jsfiddle.net/bstst/FuLJC/). Hope it's less vague like this. I did think of a factory and dependency injection, but I still can't get my head around finding the most effective solution.
There is a demo at http://tmwagency.github.io/trak.js/demo/. You will need to inspect the console and use a browser extension to test it though
Indeed. Put your logic in a while-loop that reads calls from an array. It really makes a difference on large trees (benchmark it).
&gt; Web workers are not built for help the execution time of algorithms Yes they are. The entire point of parallel threads is to split large computation workloads between multiple cores and reduce execution time.
Right now I'm extending the constructors of each component and telling each one of them what they should use as a sub-component, but that's not very flexible and feels kind of wrong. In my case only the app knows that the Widget needs to be different. I probably wasn't sure that integrating the functionality to overwrite sub-components was the right thing to do, but by the looks of it this is exactly how mix-ins work. So I'll just go in this direction. Your great answer clarifies a lot. Kudos!
Am I the only one that thinks that Javascript as the first language is a bad bad bad bad bad idea for a total newbie?
Ive already got my y axis range set like that at the beginning of the program var y = d3.scale.linear() .range([height, 0]); And for some reason flipping the functions like that just results in a bunch of nonsense....
does javascript even work in a pdf? 
this is the very thing I wanted to avoid. as I described in my post, I make these "index" files to do that. It comes off as manual labor to me. I'd just rather say "here are the source files, now condense!". Based on people's responses here and elsewhere though, I don't think I'm going to be able to do it, so I'm writing a grunt plugin to do it for me.
If you have multiple outcomes based on one form, I would use cases to make that happen. Just look up a JavaScript switch, and you'll see what I mean. Not sure if you can manipulate the "Dom" of a PDF, but if you can you can just make a click event for your check box. You might even be able to just do an if boolean statement and that will listen for a change in the check box value. 
It shouldn't be that either. Better: $routeProvider.when('/route1', {...}); $routeProvider.when('/route1', {...}); There's no law that says you have to start that chaining in the first place. Avoid it and use normal formatting rules.
Or more simply: $routeProvider.when('/route', { templateUrl : 'views/main.html', controllerAs : 'main', controller : 'MainCtrl', resolve : MainCtrl.resolve }); $routeProvider.when('/route', { templateUrl : 'views/main.html', controllerAs : 'main', controller : 'MainCtrl', resolve : MainCtrl.resolve });
Eh, more exposure is fine. He won't believe it's a bad answer so why not bring more people to help shove the bad practice down further where users won't be pained with it's content. 
Related: Generate a random unicorn avatar based on seed: http://unicornify.appspot.com/use-it I use it on my forum as the default avatar when people register. Aside from looking like a brony forum to the casual observer, my users love it. 
sure, no problem
I don't understand what you are trying to avoid, in my example you don't need index files, and you shouldn't name your modules yourself, optimizer does that for you, so your `testModel` module looks like the first one you described File: models/testModel.js define(['backbone'], function(Backbone) { return Backbone.Model.extend({}); }); So you say, `here are the source files,` inside `testFile.js`, and `now condense` in modules config. That will condense every dependency inside `testFile.js` into `testFile.js` 
Take a look at the "react-nested-router" it has an example for authentication. I'm on my phone at the moment so I don't have the link handy but it is mentioned in one of the last couple of "community round-ups" on the React blog. It isn't super-flux-like though. If you'd like an better example of just the auth stuff once I am back at my computer I can dig out the code I wrote for exactly this. With request interception etc (like Angular). Edit: Typos
Uhm when I first started we were introduced to programming with C then to OOP with Java. Apparently the most common "learning language" at the moment is Python. So maybe that could be a start. Also if you want to make a job out of this (and you want to be a decent developer) algorithms, complexity etc are mandatory imho (a computer science degree basically, but you need the knowledge not the actual degree :p).
All this library does is delay jank by one frame. Throttling makes your jank come in waves. These aren't real solutions to the problem, which is inefficient code. Avoiding DOM manipulation and reflows are a real solution. This is a use of RAF for RAFs sake, as is the article from the post. The purpose of RAF is to make sure you're not causing reflows and animations that will never be displayed. No browser sends scroll events faster than it draws frames, using this will actually put you behind the browser by one frame.
Needs an online demo! And npm, bower and all that.
Interesting? Have a jsfiddle to inspect?
The above links to the GitHub repo. Here's the actual link to the app: http://party.github.io
Looks like Oimo is a port of an [ActionScript physics engine](https://github.com/saharan/OimoPhysics) that has been inactive for over a year. That said, [Canon.js](https://github.com/schteppe/cannon.js) has also been inactive for a year. [Physi.js](https://github.com/chandlerprall/Physijs) has had some activity, but its author is also busy working on [Goblin physics](https://github.com/chandlerprall/GoblinPhysics). It seems JavaScript physics has no clear winner as of now.
Babylon.js is great and all, and the engine demos i checked out are impressive, but it's development is based in Microsoft Visual Studio which is a deal-breaker for me --- and even has IE-only demos on its home-page, which does not bode well for its intent w.r.t. interop. Sure, I probably won't have a need to contribute patches or re-compile it, but since all the tools for it are vendor-locked and Microsoft Windows only, I don't have a lot of confidence in its future. I think its best to stick with fully cross-platform JS engines.
Nice! The code looks clean too. I like. You should branch to `gh-pages`. That way you can just link to your demo via http://download13.github.io/blockies/testpage.html
Totally true ! Ammo.js has been recently updated, but I think performances are not so great...
holy shit! i love so many projects that this guy does.
Ah, so that's why I see gh-pages around. You have done me a great service this day.
Very nice.
&gt; I work with Chrome and FF, and everything works fine. So, to be clear, I meant to contribute patches to the engine itself, not to use as a library. I understand the library itself is cross-platform, I've loaded the demos on Linux / Chromium and the demos work fine. Anyway, maybe I'm missing something, but looking through the code base all the instructions are very Windows-only: https://github.com/BabylonJS/Babylon.js/tree/master/Tools/BuildOurOwnBabylonJS And also binary "MSI" and DLLs included in source tree, with compontents written in C#: https://github.com/BabylonJS/Babylon.js/tree/master/Exporters And of course nothing crossplatform like `make` build systems, etc. which are typical in a project like this (see this JS engine for comparison https://github.com/turbulenz/turbulenz_engine ) And the demo page has a collection of IE11-only demos: http://www.babylonjs.com/ 
I like this. We are slowly adding avatar support for our app and this would be cool to use as the default.
why are you asking?
Thank you for your feedback, I will try to answer the best I can. BuildOurOwnBabylonJs is a project created by a member of the community, and added in the main branch. It's not part of the engine itself, but can be used to build a custom version of the engine. There are two main exporters : the first one is a plugin for Blender (cross-platform, open source, plugin written in python) and the second one is a 3DSMax plugin (for obvious reasons, as it is one of the main tool used in the game industry - max script, in beta version currently). Others exporters are here for specific platforms, like the one written in C# for Windows. Indeed, the system lacks a make system to create customs versions of the engine, but it can be used as is (like Three.js for example). &gt; And the demo page has a collection of IE11-only demos: http://www.babylonjs.com/ These demos seems to work fine in Chrome, but sadly I don't have any Occulus to test. I will check why these demos are labelled IE11 only. Anyway, if you want to contribute, feel free to do it in JS or in typescript. Try to check the forum [http://www.html5gamedevs.com/forum/16-babylonjs/](http://www.html5gamedevs.com/forum/16-babylonjs/), the community is very reactive.
It's 4 years old.
No it wouldn't unless you plan on not supporting devices that don't use JS.
not meaning to be a dick, but any developer knows how to use google.
We would have much bigger problems than avatars not showing up. We are a small startup and only have time for so much, so we tailor to are biggest customer base.
I've checked, stack overflow doesn't have any references to parent elements, or anything really related to AJAX and what I've been assigned. And not to be a dick as well, but I don't see the point of even commenting and assuming that I haven't checked Google. I have, and it hasn't gone so well, which is why I am posting here. If you have anything helpful to tell me please let me know, but if not, please don't post completely oblivious unnecessary banter.
the data is coming through a csv, not sure if I can get that to work through jsfiddle?
What you are looking for is: * JS Quick Start Reference - https://developer.mozilla.org/en-US/docs/Web/JavaScript * JS Native Methods - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference#Value_properties * A Brief Guide to the DOM - http://prettydiff.com/ignore/dom/
That's an interesting PRNG. var randseed = 0; function seedrand(s) { randseed = 0; for(var i = 0; i &lt; s.length; i += 2) { var h = (s.charCodeAt(i + 2) &lt;&lt; 8) | s.charCodeAt(i + 3); randseed ^= h; } } function rand() { var n = (Math.sin(randseed++) + 1) / 2; var r = n * 10000; return r - Math.floor(r); } Here's some output. It's much better than I thought it would be. * [sin PRNG](http://i.imgur.com/Y3lMUg3.png) * [Mersenne twister](http://i.imgur.com/w4iXnPc.png) (for comparison) And [ent](http://www.fourmilab.ch/random/) report, Entropy = 7.999932 bits per byte. Optimum compression would reduce the size of this 1073741824 byte file by 0 percent. Chi square distribution for 1073741824 samples is 103145.05, and randomly would exceed this value 0.01 percent of the times. Arithmetic mean value of data bytes is 127.5000 (127.5 = random). Monte Carlo value for Pi is 3.142183465 (error 0.02 percent). Serial correlation coefficient is 0.000429 (totally uncorrelated = 0.0). However, [xz](http://tukaani.org/xz/) sees right through it and can compress 1GB of output down to 44MB. 
All of this is Googleable. Go into more detail on your individual tasks are and I'm sure we can get you answers. Putting everything together is up to you.
That's nuts!
I'm pretty sure it generated Jake the Dog in that forth image!
The author of this library did a talk at a local JS meetup I was at last month on some crazy imaging stuff, was a really great talk. I'm gonna request he covers this next time!
Also [WebPlatform][1] gets better and better. [1]: http://docs.webplatform.org/wiki/javascript
That is just great, haha.
screw them, if they use noScript or windows 3.0 its their own damn fault that it doesn't work
&gt; I don't really know how software work on the developer's side I mean, we get that it's alpha quality, but way to go the extra mile to inspire confidence...
I'd just use Xorshift (as JSC's Math.random()) or Alea.
Source: https://github.com/drewblaisdell/conway
https://www.youtube.com/watch?v=cbV4SQ_VYtY
Preview: https://camo.githubusercontent.com/c35f8d3c2c6788f18506610ca4052ad7e12433f2/68747470733a2f2f6c68342e676f6f676c6575736572636f6e74656e742e636f6d2f2d6e59337541774f7a5f78342f553854714b5453584357492f4141414141414141614c342f594936506d3845486231592f773630302d683338342d6e6f2f436f6e74656e74506c616365725f6a61736f6e4d617965732e676966
2003 called. 
Neat! Come check out, and x/post this to /r/cellular_automata :)
- Unit tests for libraries / self-contained components, using Mocha - End-to-end with various (depending on the server side language), generally on top of a headless webkit, for coarse UI testing - "Click around + no console errors" for detailed UI testing - Most of my tests are server-side unit and integration tests Mostly I work as the solo developer+QA for my projects and find that for me manual UI testing is usually the most efficient. Although of course I'd like my end-to-end test suites to cover more, they are painstaking to set up, slow as molasses, and prone to false negatives.
Same issue been on my mind recently too... haven't tried it yet but https://github.com/pazguille/path looked promising on a quick read. It's not on NPM but they have a standalone build looks like, or component.js can build it.
I worked at a large image hosting company and evaluated nude.js against a bunch of major image recognition firms. We were trying to automate content moderation. The only service that was usable in production was nude.js, a silly open source project from a then high school kid in Australia. The false negative rate was near zero. 
MDN (Mozilla Developer Network) is one of the best general JS resources you can find, but if you're looking for something a little more technical, then we have the [ECMAScript](http://en.wikipedia.org/wiki/ECMAScript) specifications listed in our sidebar, for instance [here's the current spec](http://es5.github.io/). p.s. is your `c` key broken? You wrote "javasript" twice... it should be "javascript" ;)
Really? The first two are answered by googling $.ajax or going directly to the documentation. Googling 'change Iframe src' returns literally thousands of responses and the first 5 or so are all stack overflow answers.... If you problem is looking up the parent, checking it's status and then changing the Iframe... Do it in those steps. 
Thanks guys. I miss java documentation by the way
Cool
Mithril does routing and is unobtrusive. While it is a full MVC framework, it only weights 4KB when minified and gzipped, which is nice on mobile. It is also very quick at rendering its own templates, if you were tempted to go down that route for new widgets. Edit: https://github.com/lhorie/mithril.js
cool, did you build this?
page.js ?
Yes - your first bit of research should be into how to use Google to find answers.
There's probably no need to check for token on client-side is there? Your server will return a 403 or whatever if you're not logged in.
No. Got it from someone that I’m following: https://plus.google.com/u/0/+JasonMayes/posts
That bookmarklet is some powerful satire.
Came back to tell you that Javascript Allonge (https://leanpub.com/javascript-allonge/read) was incredible! Great suggestion.
If your seed is for whatever reason a string of letters, you're random number will come out as NaN. 
don't forget isotope! http://isotope.metafizzy.co/
I'm glad you liked it, we should grab a beer next viennaJS! 
Well, how does it work? That's all I care about, and the only thing left unexplained. Is it a neural network? Is it some algorithm that judges skin exposure? ***How does this work?***
a few skin classifiers &amp; the decision is based on the detected skin to other stuff ratios of image areas. this is the paper I used to implement it: https://be82ac79-a-aff4c786-s-sites.googlegroups.com/a/dcs.upd.edu.ph/csp-proceedings/Home/pcsc-2005/AI4.pdf
Funny to see this. I too just created a [JavaScript recommender library](https://github.com/omphalos/wecommender). In my case it was just a NodeJS wrapper around [vowpal wabbit](http://hunch.net/~vw/). 
Great work! I've been obsessed with Conway's game of life for quite a while, and have often thought about how I could make a game out of it. Well done! 
Great minds think alike :)
Might I also recommend https://github.com/jed/140bytes/wiki/Byte-saving-techniques
I'd call them Unitars 
What does this have to do with people reading the text that pops up after the array was sorted?
Umm...are you appreciating something I've done or is this sarcasm? I don't understand sarcasm very well. 
Yep you've pretty much got it. It was fairly easy to set up. In your test suite you just specify that your app isn't an Angular app and it runs the tests normally. I also like that you can choose to run directly in Chrome or headless with PhantomJS. I would definitely check it out for E2E testing with any JS project. 
Thanks, that was very helpful. I will definitely dig into it tomorrow. 
And if you multiply some string with Math.random(), you also get NaN. A type error would be the best thing, but JS only has NaN to offer. What would you do if some non-number is handed to it? Use 0 as seed? That would conceal the error even more.
 &gt; Math.round('asdf') NaN &gt; Math.cos('foo') NaN &gt; Math.min('a') NaN Letting it just return NaN is the idiomatic way to do it. That's how JS rolls. If you want type checks, use TypeScript or Dart. Guarding everything manually isn't feasible. And JSDoc is way too annoying.
Type checking aside, this is pretty cool, just grabbed it and modified it to use the ES6 generators. http://www.es6fiddle.net/hy84l79q/ 
Weird title. If all you want to talk about is ES6, maybe you should put that in the title. It's also not about ES6 in general, it's about Traceur in particular. Anyhow, it's a known problem: https://github.com/google/traceur-compiler/issues/6
If you're writing an app and you're printing your random number to screen, do you really want a NaN on screen? 
No, I want a type error whenever I try to smash some number with some non-number together. That's why I like Dart. With JavaScript, yes, I want that NaN. This will let me track that error down.
Absolutely fantastic. That covers a good chunk of the bases. Thanks! 
It was just a funny thing to see written on a software project's page ;)
Could you give us a tl;dr of how you made the algorithm? I guess you try to identify a human body, and see how many % of it is 'human skin' colored at specific points such as crotch and breast?
you've been tagged as nude detector.
I'm torn - libraries like this are cool, and *arguably* ok to use if you're building a client-side JS app, but there's still something undeniably gross about requiring javascript for basic page layout. It smells of a violated separation of concerns.
Is that really just a form for entering your e-mail address? Why on earth would I want to do that? The only link on the entire page is &lt;a class="navbar-brand" href="#"&gt;&lt;b&gt;React Tutorial&lt;/b&gt;&lt;/a&gt;
Does it support dynamically adding content, e.g. to implement infinite scrolling?
Check for a token on page (re-)load to possibly reauthenticate if it is still valid. Sorry for not being clear!
That's awesome!
Some great questions in the below links: http://stackoverflow.com/questions/2492123/pro-javascript-programmer-interview-questions-with-answers http://stackoverflow.com/questions/1684917/what-questions-should-a-javascript-programmer-be-able-to-answer
It's blogspam and email harvesting, from a non-native English speaker. 'The react'. Yeah.
I really don't think you can hold the author's native language against him (I'd have to be pretty hypocritical to do that...) but yeah, that looks like garbage.
Any particular reason? They're more complex to implement, and I'm not sure they're much more distributed. Maybe I'll implement them and test their distribution, but Park-Miller is a very good PRNG considering its simplicity.
That's cool! But the nature of generators is that they're lazy, so it'd probably be better to create an "infinite" random generator. I reimplemented your code here: http://www.es6fiddle.net/hy8flpnh/ It'll let you iterate the generator instance as many times as you'd like. To keep your limit of 20 I instead changed the for loop itself to break after 20 iterations, instead of making that an intrinsic feature of the generator (which doesn't work very well if you intend to use the generator for more than one thing). **Edit** And if you want to get really functional, I added another generator, `limit`, which takes an iterable and a limit, and gives you a generator that will stop generating after the limit has been passed: http://www.es6fiddle.net/hy8fx8zi/
Good point! I'd not really thought it totally through. Just found that ES6Fiddle page and was messing with it when I seen your post. Generators are going to make things like this pretty interesting! 
Probably an ML algorithm from the looks of it. Like a Neural Network
Video of the talk?
 var anObject = {};
so, these are all (grunt and gulp) about frontend ? javascript modules like jquery?
Cool, see you this evening then! ;)
No, you can use them to manage modules and the build process on the backend as well, e.g. with Node.js.
I had a quick read of the website, it's not a module for JS. It's a tool for managing JS libraries like jQuery. You run it locally and give it a list of tasks to complete. The default tasks include consolidating separate JS files into a single file, minification, running test cases, syntax validation. It also allows you to run tasks when certain files have changed. Grunt appears to be a tool to help reduce repetitive tasks that you would do while developing a web site/web app/mobile app that involves JS. Grunt itself will not be included in the final project.
It automates tasks like minification, concatenation, compression, compilation (e.g. CoffeeScript -&gt; JS, SASS -&gt; CSS), running test suites, static analysis, etc. Many of these things are usually associated with front end code, but there's no reason that you wouldn't also use grunt for back end development too -- things like running JSHint are universal. It's not a package manager like rubygems, that is handled by npm. I suppose it has some similarities with other build systems like ant, but the details are of course different.
I used to conduct interviews and I would destroy people who had spent more time studying interview questions than actually reviewing practical concepts. The best advise I can give, for people who are not confident technically, is to know your audience before you walk into the interview.
yeah, it is something like rake and designed for running nodejs backend tasks equivalents of maven or rubygems would be npm for backend and bower for frontend
Huh? It's javascript and HTML Canvas. How do you figure machine-learning and neural-network concepts play into those technologies? The author implemented skin classifier detection and object ratio placement.
and the new one, packery! http://packery.metafizzy.co/
That's not so bad, certainly, as long as the worst that happens without it is a less-optimal packing with little bits of whitespace creeping in here and there.
Wow. This is beautifully done. I'd be happy to donate or purchase the print / ebook when it's out. 
How would this handle persistence?
Is there an appendix with the briefest notation of changes from the first edition? Great work!
&gt;Baloney. JavaScript is one of the few languages that does full stack &gt;very well and it super easy to learn. It's an awesome starting language. &gt;You don't need a degree nor any teachings beyond basic algorithms. &gt;It's super accessible to anyone[..] This are the exact reasons it's a bad language to start. I do love javascript but a new developer need to understand resource consumption, types, pointers and all those thing in order to know what his code is really doing. &gt;You learned C first because you went to college and that's what they &gt;used to teach. Back then, the thinking was that everyone would &gt;eventually write programs for Unix. Wrong. I learned C because then I could see how memory allocation, pointer and all that jazz worked. You need to understand how your code is affecting the machine it will run in. Otherwise you're not a professional. &gt;They've switched to Python because of its popularity, but you can't do &gt;full stack in Python. It's easy enough, sure, but you come out of the &gt;gate already confined to certain areas of development. Can't argue on Python. Don't know it. What's wrong is that you don't need to learn a language and stop. You need to learn how to program first THEN you can go all specific on certain area. Judging the learning-value of a language just because "you can't full stack" it's terribly wrong. P.S. Front-end developer here.
Xorshift has a max period of 2^128 - 1 and passes the diehard tests. Alea's period is around 2^116, it passes BigCrush, and the JS version is very fast. There is no need to implement anything. This already has been done. By the way, 2,147,483,646 = 2^32 - 2.
DHTML. Now there is a term I have not heard in a long time.
If you can export to JSON, then it'd either need local storage enabled or an external server to load it's memories via a REST/Web Service call, which is an acceptable solution, either way, if the environment allows for it (security, JS sandboxed, all that). 
doesn't seem to be working for me :( on chrome i get the following error on console: Uncaught TypeError: Cannot read property 'id' of undefined and then GET http://lifecompetes.com/socket.io/?EIO=2&amp;transport=polling&amp;t=1406727924249-0 504 (Gateway Time-out) 
Write some flag in a cookie and only open the popup if the flag isn't set.
I actually love the way OP (@channikhabra) has written in his README. This tool intent is not to inspire confidence to your feeble awareness that you suck and can't read how he built it. It is about sharing something cool and show what's possible with JS and Meteor. I will always consider myself somewhat of a beginner, though I've been coding for many years, because programming evolves so quickly.
Grunt was designed to automate things web developers do manually or with separate tools that didn't interact. Most people use it for prepping their front-end resources, making files fewer &amp; smaller so when it's live on the web, people have to download less, with tools that have existed for a while but were never "gruntified" or configurable (e.g. jshint, javascript obfuscation, file concatenation, uglifiers). However, the possibilities are endless. For example, at work we use it to publish files to nexus.
You are already using jQuery, so you would add the jQuery cookie plugin: https://github.com/carhartl/jquery-cookie If I get this right your page adds the popup with a `document.write` So you would instead just do something like this: if($.cookie('marry_protection_popup') === undefined) { document.write(...); $.cookie('marry_protection_popup', 1); } This basically looks if a cookie named `marry_protection_popup` exists. If not (first visit) it will show the popup (same code as you have already) and sets this cookie value to 1. Next visit (reload or whatever) the cookie value will be 1 instead of undefined and so it will not run that code. Alternately you could do something like this: $.cookie('marry_protection_popup', 1, { expires: 7 }); Which would show the popup every seven days (or any other number of days) There are a few more things you could do, but this should cover what you want to do. 
Love this! Going to use it in a game
Link for the interested: /r/LearnJavaScript: This subreddit is for anyone who wants to learn JavaScript or help others d[...] --- ^This ^is ^a ^bot ^and ^won't ^answer ^to ^mails. ^Mail ^the ^[[Botowner](http://www.reddit.com/message/compose/?to=DarkMio&amp;amp;subject=BotReport)] ^instead. ^v0.4 ^| ^[Changelog](http://redd.it/29f2ah)
The article on V8 optimization killers is a good non-permanent list of what will cause issues in your code. A simple workaround is to isolate the try catch block into its own function and store the output, this prevents V8 from deoptimizing the entire function.
This is awesome! Look forward to the epub when it is ready.
I cleaned the loop up a little, cached a few things. http://jsperf.com/160k-random-pixels
So, you're supposed to multiply all numbers by itself (or square them) from 1 - 100. You can use a for loop that goes from 1 - 100 and multiplies the current iteration by itself and prints the result. the second question, you simply need to get the text of all h1 elements on the page, loop through them, and for each h1 element add the text of that h1 element into a new list somewhere else on the page. That's about as far as i can help you without flat out doing your homework for you, but it should give you enough direction to get started. If you're still confused, might be best to bring up your questions to the teacher so they can properly teach the class lest you run into more confusion down the road. 
 for(var i = 1; i &lt;= 100; i ++) { console.log(i + ' multiplied by itself is ' + (i*i)); } Honestly, if you're completely lost on something like this though, you should probably seek tutoring.
Instead of picking random x,y locations, just randomize every pixel. That saves a shitload of index calculations. Also, you don't need to touch the alpha component since it never changes. And it's better to use `requestAnimationFrame()` than `setInterval()`. [Example](http://codepen.io/anon/pen/fetxH). 
I think he was just trying to keep it as simple as possible for the students and use a tag everyone is familiar with. He knows his stuff, but he is a horrible teacher
Javascript goes between &lt;script&gt; tags, yes. The example I gave you would print the lines to the console. If you need them in markup, you'd probably want to append them between &lt;p&gt; tags to a block element. So... &lt;div id="content"&gt;&lt;/div&gt; &lt;script type="text/javascript"&gt; var div = document.getElementById('content'); for(var i = 1; i &lt;= 100; i++) { div.innerHTML += '&lt;p&gt;' + i + ' multiplied by itself is ' + (i*i) + '.&lt;/p&gt;'; } &lt;/script&gt; 
Thanks a lot, finally got that to work. Really appreciate it man! I think I have discovered that programming is probably not for me after taking this class...lol
Can I ask what full stack means? I have seen it a few times in this post
Can I ask what full stack means? I have seen it a few times in this post
If you're lost already and you're not passionate about learning it, it might not be the right path for you.
I have a BS in computer science.
Not true.
You don't need to script PHP to do this, you can simply perform an xmlhttprequest to your server and pull date from the response header. This requires no setup on the serverside and will work with any server not just PHP.
Chaining make code DRYer by avoiding repetition.
Depends on your data, but nevertheless checkout d3js.
Adobe Illustrator (paid or free trial) or Inkscape (free).
The problem with $scope is that it is can be messed by other controllers.
awesome! First edition (along with The Good Parts) was helpful back when I was starting. Will definitely take a look through this
Could you care to elaborate on the Ember/Oboe part? This could prove very useful for a new project. :)
Cache X images and cycle them instead of generating new texture each step.
[Inkscape](http://inkscape.org/).
Some of your JS/CSS resources are 404-ing. Looks like the browser is trying to find them in the relative path of '/what-you-get/' but you probably want the full path to your WordPress theme.
Great Stuff!
Brilliant! Can't wait for the epub
Wouldn't it be a good idea to wait for the finished specification before writing a book about it?
At this stage of maturity? No, it would probably be more appropriate to have [a mostly finished book about it](https://github.com/nzakas/understandinges6).
JavaScript is kinda confusing at first, keep at it and things will click eventually.
It's basically a rewrite, except for a handful of paragraphs in the first few chapters. So the appendix would say 'everything has changed', more or less.
You can pre-order: http://www.nostarch.com/ejs2
good luck with the local case study :)
thanks :)
Really help me lot. Thanks
Nice.. its help me for solved my problem.
WTF does this have to do with JavaScript? Absolutely nothing. Mods please delete.
Thank you for your reply
I believe Pixi.js would do the trick. It will render with either Canvas or WebGL. If not CreateJS/EaselJS would also work. They're both loosely based on the Flash DisplayList model (DisplayObjects that can be ordered into other display objects on a grid). I'd be curious to know what you think of those tools from your mostly C++ background.
Done, thanks for the report (I assume it was you).
Looks good! My feedback is to use requestAnimationFrame rather than setTimeout in your 'apply async' because it's potentially faster... it can group multiple DOM updates into a single draw.
Why not just use Om in Closurescript? You'll get a much better experience using immutable data structures in a language that makes them a first class construct.
Caffeine 
Or just use React and get all of these concepts baked in for free without having to halfass it with backbone and lots of duct tape.
Please be aware of reddit's rules: http://reddit.com/rules Specifically #1.
Great point! For me it's not a lack of technical confidence, it's more like I've been working a number of years doing what I do and I know very well how to do that, just wanting to broaden horizons and try to at least brush up on parts that I don't know that I don't know. Thanks for the response, great interview point! 
I started with Om, but I've been looking for a library like this for months since I switched over to using React via JS.
Another option that looks pretty slick and simple. http://paperjs.org
Not sure if you wanted the comment here or on the site so doing both.
The longer periods are definitely interesting although many non-JS algorithms expect 64-bit integers which may break in JS which only has 53 bits available for accurately representing integers. I'll have a look at some implementations and compare CPU and memory usage. In my particular use case I needed something that is fairly low on both, and sacrificing the number of non-repetitive values might be ok (since 2 billion values is still pretty good). 
Awesome Thanks So much everyone!
Alea uses 53 bits and Xorshift 32. &gt;sacrificing the number of non-repetitive values might be ok (since 2 billion values is still pretty good) It's not just about the period. Diehard and BigCrush check several statistical properties. LCGs have some issues: http://en.wikipedia.org/wiki/Linear_congruential_generator#Advantages_and_disadvantages_of_LCGs
I'm removing this as spam. We've had continued issues with PaktPub.com spamming /r/javascript, and it looks like they're getting creative now... Even if it weren't for the PaktPub connection, there's still the fact that this is a [bait &amp; switch](http://en.wikipedia.org/wiki/Bait-and-switch) on account that nowhere is it stipulated that only 3 would "win" the book, and only after that magical number had already been passed was that made known. Also, no update here with that info either. I don't know where you fit in -- if you're the author of the review, the owner of the site, or otherwise affiliated with PaktPub, but I see that you've only been a redditor for 18 days. In case this is really your first reddit account, then I'm sorry your introduction has gone this way. I'd encourage you to read today's blog post from the reddit admins: [How reddit works](http://www.redditblog.com/2014/07/how-reddit-works.html), specifically the section on "Admins and the site-wide rules": &gt; The key thing to understand is, again, that reddit is a collection of user communities, not a platform for free advertising. Thanks for your understanding.
I believe sites like Netflix somehow work around it, though it may be something in Silverlight that allows it. I wonder if YouTube will go to sleep while playing a video... and now you've got me curious.
Thanks! Maybe I'm imagining things but under extreme circumstances ([jsperf link, click here](http://jsperf.com/varbinding)) it seems to add a bit of stutter, but on the other hand it seems to be capable of performing more operations in the same amount of time. The jsperf is a bit mystifying because it doesn't seem like the number matches up when watching it in realtime. Performance is rather surprisingly good.
Yeah you might need to have a queue of things to process and then do them in a single requestAnimationFrame, rather than per-change (as I think you're currently doing -- but I might be wrong). That way the DOM will be written during a single animation frame.
I think it's an acceptable amount of lag considering the ludicrous amount of changes that were being requested.
https://www.youtube.com/watch?v=rI8tNMsozo0#t=1160 Rich Hickey at a Rails conf, it doesn't directly answer you're question, but still a great talk. He created clojure, which uses immutable data structures that influenced this library, so he's the guy the listen to.
Mori
&gt; while playing a video (pure speculation) Firefox now does this, but it's a recent change.
have you tried red bull?
Fabric.js supports all of it (including zoom which was added in last release)
Offset is simple: string.slice(offset).replace(regexp, collectorFunction);
I have, but the preg_match_all function isn't done yet. Actually, the "workbench" version in php.js is [my own code](https://github.com/kvz/phpjs/blob/master/workbench/pcre/preg_match_all.js), I push there when I get a kinda-working result.
Hmm I don't think so, according to [the doc](http://php.net/manual/en/function.preg-match-all.php) : &gt; Using offset is not equivalent to passing substr($subject, $offset) to preg_match_all() in place of the subject string, because pattern can contain assertions such as ^, $ or (?&lt;=x). See preg_match() for examples. There is an example in the [preg_match doc](http://php.net/manual/en/function.preg-match.php) . WHat I do instead is : var t = ps.split(delimiter); t.shift(); var flags = t.pop(); t[0] = '.{' + offset + '}' + t[0]; ps = t.join(delimiter); // Have to rebuild it at runtime so no literal... pattern = new RegExp(ps, flags); 
Excuse the misunderstanding but I did not write this.
Along the same lines, I posted my JavaScript AdaBoost Algorithm recently for anyone interested. http://www.reddit.com/r/javascript/comments/2b1jxg/i_made_an_adaboost_algorithm_in_js_and_was/
It's actually a good practice to include `node_modules` in git. Why? Because whenever you try to deploy, you always have a backup just in case there are network issues. 
Coordination of data sharing is forced into the code-flow, meaning function return statements. As opposed to calling a function and depending on an implied side-effect. It makes it much easier to design programs into localities and trust your mental view of the rest of the code base. 
I recently switched from Eclipse to PhpStorm, and it's so great. I describe it as a user-friendly and modernized version of Eclipse, because Eclipse really hasn't innovated much at all in the past 10 years (at least for JS), and it's a royal pain to try and customize. 
Your post was removed because you used a URL-shortener. Feel free to resubmit, just be sure to submit the actual URL and not a shortened version. Thanks for your understanding.
Is it ok to use Webstorm if I don't plan to use PHP as backend?
Shouldn't, you just won't use those features. Sublime Text might be a better fit if that's the case though. Spend a day downloading and trying a few, it will help immensely in the long run knowing the basic differences in alternatives even if you do t plan to use then all.
I'm surprised no one has mentioned SVG for this, it seems perfectly suited for your needs. And then you can use most of the existing browser technology for it (like dom events and scrolling) SnapSVG is probably your best bet http://snapsvg.io/ - composite shapes sound like just groups of shapes. - users can draw anything you want, you just need to program that :) - Splines are bezier curves, and come in a variety of types. You can draw anything - scrolling graph is up to you...I guess you could resize the canvas area based on scroll, or whatever. - "camera" zoom could be done with simple SVG scaling (which use matrix transforms behind the curtain). And the bonuses of SVG having dom events like mouseover and click make that so easy. So thats my 2¢, I think you'll run into hiccups with anything, but SVG sounds like the perfect use here.
It really needs a better README.md file. I don't know what this is or why I should care enough to find out.
Congratulations! Thank you for all your hard work on this. I'm in the middle of reading it now, and its one of the books that repeatedly holds my interest and I can actually enjoy my reading sessions. (Usually audio/videos only work for me.) This is filling in some holes of my education. I look forward to purchasing it in thanks. 
I am warning you, there will be holy war unleashed based off this question. Everyone has their opinion. I am new to JS as a whole. Never really jumped in feet first, but have been eyeing Ember. 
My opinion is learn all three and do so by creating a reasonably complex application. The fact that angular and ember are opinionated is good in many cases. However there are also cases where you have to step outside the expected paradigm and then you have to fight the framework. With backbone (especially without marionette) you have to make decisions and this leads to opportunities to make bad decisions, (by definition) but it's also the only framework that just gives you structure to mold it to your needs no matter what they are. It's all about knowing enough tools and having the insight on where to apply them. You have to know what common problems these frameworks solve and if the opinion fits or if your application centered around those same common problems those opinions are targeted towards. 
You should add the option "none of them".
That's one example although I'm not advocating any particular style. Other examples: a.foobar = 'baz'; a.f = 'b'; foo: { foo: 'bar' bizbaz: 'booz' } It can drastically improve readability in certain circumstances.
Well, I have a few equations to try out. A bunch of lines and ellipse equations. Need to find its intersections and the like to finally get the figure and then possibly extrude it in Sketch.
Not any more, this is what npm shrinkwrap was invented for. Unless you _really_ need to commit your dependencies for a good reason.
Checkout the new Cloud 9 IDE. It's awesome.. https://c9.io/
The README looks pretty clear. By the way, the purpose is to transform a library that is not using the CommonJS style exports in a way that you can browserify it.
As I said in the OP : &gt; so I'm using js's regex engine and not PHP's PCRE but I'm ok with that I'm aware that there will be differences but the point isn't to implement a PCRE-compatible regex engine, my goal is simply to output an array with the same structure that `preg_match_all`'s `&amp;matches` argument. edit:typo
This framework is really interesting, it's like a very minimalistic version of React. 
&gt;Not that I have tried Mori because ClojureScript is so nice I prefer to use all of it I think a lot of developers feel the same way, so it doesn't look like Mori developed a strong community of users. In JS, Mori is a black box. I have no idea how Immutable compares to Mori, but [swannodette](https://github.com/facebook/immutable-js/issues/19) seems to have taken an interest in it. He recently released a lib called [transit-js](https://github.com/cognitect/transit-js) that looks very interesting. Anyways, there's no reason that these immutable data structures can't be written in 'vanilla' JS. At this point, that's the biggest difference between these libraries. I can change the source code of Immutable, but the source of Mori is deeply embedded inside the JVM..
I've had a weird issue where one particular module worked fine on my Mac but kept throwing up errors on prod Ubuntu. After that I stopped ignoring node modules and have it checked into source control.
I know what it is because I've used other tokeninput plugins, but I agree with you - I'd like to see a feature list / explanation of how this is better than others. At the very least, link to a live demo somewhere.
On top of that, the demo references a file that doesn't exist, so you can't even use something like http://rawgit.com to run it directly.
With regard to number 10, new Number(5) IS an object. new Number(5) !== new Number(5)
I would call jquery a framework at all. It's a library, and most of those other frame works listed utilize it.
point taken. I will not really understand the problems/benefits of Ember(or any other framework) without actually jumping in full throttle, which I have yet to do, due to my very recent dive. I have every intention to try multiple frameworks and will encourage others to do the same, but for now I am starting with one and it will be Ember. 
Not all libraries can be required as node modules are because they are built to use amd or just be pulled from a file or cdn. The shim allows you to work with these as well. Also the ability to specify globals and aliases is helpful. I remember when browserify first came out there was a separate browserify Jquery and backbone because they didn't work unless you manually attached them to window iirc. This should solve those sorts of issues as well. 
I have never used Ionic + Parse.com but I have used Trigger.io &amp; Parse.com if they anything alike they are very powefull for creating web to mobile applications that run on both Android, iOS and even blackberry &amp; windows (if thats your thing) Though it does have its down sides... the major side being speed. It lacks the smoothness that a native application has even with"speed boosting" javascript libraries such as fastclick.js. Don't get me wrong they are still really good, but to be honest I would currently only use this web to mobile application system to get a prototype app out quickly as I feel the lacking in speed causes a big down side. Oh and just incase this is an issue Parse.com is owned by Facebook.com (know some people dont like them)
There seems to be some overlap between definitions of the terms for framework and library but I think most people recognize jQuery as both. This post actually prompted me to look up what options are even available and there are a few I've never even heard of: http://en.wikipedia.org/wiki/Comparison_of_JavaScript_frameworks
Ember is good. Again, the opinions aren't there for no reason. It's a commonly used solution for the architecture of Web apps. Just remember, it's the *most* opinionated one in my opinion (lol) 
Performance can be a bit of an issue, true, but there are a lot of ways to optimize it for a better experience. I plan on writing a follow up article to this in the next couple months that discusses best practices when writing Ionic/Phonegap/Cordova applications. Javascript and CSS can get resource intensive on a mobile device far faster than a lot of developers would ever realize. I won't disagree with you that native usually offers a smoother, more cohesive user experience, but for someone who doesnt have the time or the desire to spend X months learning iOS or android, its a great alternative.
I'll post it here when I write it. At the moment, I'm neck deep in projects and deadlines, so no time.
If your current code is: $script('http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js', 'jQuery'); $script('jQuery', function() { app.run(); }); What you probably want is this: if(typeof jQuery === undefined) { //if jQuery is not loaded, load it and wait for callback. $script('http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js', 'jQuery'); $script('jQuery', function() { app.run(); }); } else { //Otherwise continue on knowing that jQuery is already loaded. app.run(); }
I always understood that overriding native code was a no-no because it makes the code unpredictable. But, I'm not sure that really applies to this example. What do you guys think?
After having to use `q`, `jquery`, and directives on top of bootstrap and jquery plugins in an angular app it seems to me that these small frameworks/libs are the way to go. 
Yeah, another user suggested I look into D3 which seems to be a pretty good wrapper around SVG, so that's what I'm looking into, but I'll check out SnapSVG as well. Thanks!
Just FYI, angular already includes [$q](https://docs.angularjs.org/api/ng/service/$q) as a service, [angular-strap](https://mgcrea.github.io/angular-strap/) provides dependency-free bootstrap directives, and [angular.element](https://docs.angularjs.org/api/ng/function/angular.element) wraps jQuery automatically if you include it. I personally find the combination pretty nice to work with. I think jQuery plugins just spoil the party no matter what the framework is, though. After browsing the docs and examples, it looks like this framework *can* have a tiny footprint, but you can include quite a bit to make it a full-blown MVC app. And without API docs or much popularity (yet?), it seems it would be pretty difficult to build something substantially complex with it. Both of those things could change quickly, though.
The words 'zoomable' and 'shape' suggest vectors to me. What about Raphael.js? It's a fairly light library (30kb minified and gzipped) that provides an API for generating vector graphics, typically as SVG but with a VML fallback for legacy IE. Vector graphics are intrinsically infinitely scalable and you should be able to affect your camera control just by modifying root attributes on the SVG/VML node. Plus, SVG has a proper DOM, making event handling much more convenient than with a canvas-based solution.
&gt; Your first NPM package.
It is always good practice to include dependencies in your projects. The NPM best practices even state to do this.
I know but I had to use Hyperagent which requires Q. I needed jQuery for other stuff so... And the next sprint of the project will include an integration with an ExtJS component. Such fun!
Check this out: https://github.com/jmreidy/fluxy React, with Mori used for the stores.
It's released under the BSD License
It's written in JS (ES6), is a bit slower, and has fewer features. Instead of `collection.get("foo")` it's `mori.get(collection, "foo")`. Mori's internals are a bit opaque since it's transpiled Clojurescript that's been run through Google's Closure Compiler, so this might be easier to debug.
I have had more experience with Raphael than D3. Both are fairly well documented, though D3 receives more attention through its use as a data visualisation tool. D3 provides a scaffold for transforming data domain objects into documents, and helpers for common graphing work, as opposed to Raphael which is just a 'dumb' graphics API for creating and manipulating primitives. Personally I would steer towards Raphael for its superior platform support (free IE6+ operability is nothing to be sniffed at), but do take a look at both. D3's jQuery-like API for manipulating SVG elements certainly looks attractive.
Yeah, part of the reason I steered towards D3 more than Raphael is because I think ultimately my data is going to be somewhat complicated with a lot of interconnection and logic going on, and I'm going to be doing a lot of transferring to and from the server program, as well as storage in a DB. So I really like d3's concepts about how the graphics reflect the data. In other words the primitives are reflecting underlying data moreso than they are data in themselves. It also works amazing for live updating which is also on my radar for a future feature.
Yea that sounds terrible. Also, considering two of hyperagent's 3 requirements are: &gt; * A jQuery-compatible AJAX implementation (e.g jQuery, zepto, reqwest), default: jQuery * A Promise/A+ implementation (e.g q, RSVP.js), default: q You would think there would be an angular service somewhere out there. Google doesn't turn up anything though, so I wonder if there's a difficulty that isn't readily apparent. 
As it happens I do have some limited knowledge. What kind of event are you putting this JavaScript in? I think you might need to place it in the Format event of the field in question. **Edit:** Place an else with whatever you're normally passing to the `AFNumber_Format` function. The following are Adobe's documentation for their JavaScript, some of it can be a little hard to find: * [Forms API](https://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/FormsAPIReference.pdf) (This should help) * [JS Developers Guide](https://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/js_developer_guide.pdf) * [PDF JavaScript API](https://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/js_api_reference.pdf) (This will likely not be too useful to you as it doesn't really go into detail on forms and is over 700 pages long)
You could compromise and create the options in an array, but add them as a group: var options = []; for (var i = 0; i &lt; snippets.length; i++) { // This syntax is a bit clearer and should also escape property var option = $('&lt;option/&gt;', { text: snippets[i].get('name'), value: snippets[i].get('value') }); options.push(option); } $('#snippets optgroup').append(options); 
Tried this on ios?
I think it depends. Anything open source shouldn't have them included in the public repo. It would result in people using out of date versions if the maintainer didn't actively update. As for your actual production software itself - yeah absolutely include them because that is 100% on your team to know what is going on, are things kept up to date, etc.
You'll find the better solution in the comments. Use **event capturing**. Every event has two phases: capturing then bubbling. In the capture phase, the event starts at the root &lt;html&gt; element and works its way down to the target element, once it's there, it starts the bubbling phase where it bubbles back up to the &lt;html&gt; element. This means you only ever need to bind your event reporting code to the root &lt;html&gt; element, because every event is guaranteed to "capture through it" on its way down to the target. In jQuery, you can only ever bind to the bubbling phase, but if you use addEventListener, you can bind to the capture phase by setting the third argument to true. Since nearly all devs use the bubbling phase, binding to the capture phase to do event reporting will work since it occurs first and it's highly unlikely a dev has stopped the propagation at that point.
I've seen this around. I'm still not sold. 1. I don't like the API. It's just ugly building out markup with function calls. While it *might* allow for some FP cleverness, I'd just assume keep that right the hell out of my views. 2. The documentation is shaky. I'm not sure what I can accomplish with this API. While the *API* is documented, I don't see many recipes for how to do various things. Tie together controls with client-side routing, for example? Deal with SVG and namespace changes? 3. "Lightweight" isn't a feature. It's generally an indicator that I'm going to end up implementing a lot of stuff myself that other frameworks cover for me. 4. "Modularity", while nifty, often means that I have to train new developers in exactly how we cooked up our own architecture with these modules. More feature-rich and prescriptive frameworks (ala Ember or even Angular to some degree) alleviate this problem, making it easier for developers familiar with the framework to find what they're looking for and be productive.
I just found this [book](http://javascriptframeworkguide.com) on the topic. 
depends on the size of the project. A good scalable pattern is one model per file, one view per file, one collection per file. Of course it helps if your other tooling makes it easy to do this. I recommend Coffeescript classes and Browserify modules: # views/some_view.coffee class SomeView extends Backbone.View blah: -&gt; 1 modules.exports = SomeView In terms of splitting the directories, it's mostly just preference and what is convenient for your team. models model1.coffee model2.coffee views controllers collections lib or you could split it by module module1 module1_some_view.coffee module1_model.coffee module1_collection.coffee module1_router.coffee module2 module2_some_view.coffee module2_model.coffee module2_collection.coffee module2_router.coffee Most importantly for team settings, get feedback from your team!
It's really odd to me since I use TypeScript frequently so it looks like some weird cross between the 2.
if your problem is jumping between files. use sublime text: cmd-p fuzzy search or with vim use ctrl-p or other plugin that lets you do fuzzy search to open files
Can't we do something like this instead? if(typeof jQuery === undefined) { $script('http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js', 'jQuery'); } else { $script.fireEvent('jQuery'); } $script('jQuery', function() { app.run(); }); It looks way more elegant. (I'm not sure if you can do something like that with JS?) Your solution will definitely work, but it sounds like a bad practice to me. The reason is, I need to duplicate jQuery callback and else block pretty much to be the same thing. (or simply call a function in eachother, and execute it, still sound bad practice.) Also, it sounds a bit unmaintainable, because workflow will be more complex. Can we do it in the similar way to mine, even if $script doesn't have `fireEvent` method?
You could this with `map` as well. If you need to support older browsers, you can use jQuery's `$.map` instead: var options = snippets.map(function(snip) { return $('&lt;option/&gt;', { text: snip.get('name'), value: snip.get('value') }) }) $('#snippets optgroup').append(options)
I came here to post a functional programming example, but you beat me to it. I can't remember the last time I used a `for` loop, `map` all the way.
just don't forget to update your vhost file for this directory, i made this mistake once and never again, had me head scratching for hours
Good for beginners coming from HTML?
For a small app, having all of your models (or w/e) in a `models.js` isn't too much of a problem, but as your app grows, and the size of the team grows, that quickly becomes unmaintainable. The crux of this problem is not specific to Backbone, heck it's not even specific to JS! People have been struggling with the 'proper' way to structure their code since the dawn of programming. With all that said, there's (at least) 2 basic approaches: 1. **Package by Layer**: this is when you group files that serve the same role in the same place. A very basic example would be `models.js` -- you're placing all _models_ in the same place. A more complex example would be an app-wide `models` directory, so you might have `models/book.js`, `models/author.js`, etc. You'd then also have a directory for `views`, `controllers`, etc. 2. **Package by Feature**: This is where you group files by the feature they implement. For instance, if you had a bookstore, you might have a "buy book" feature; in this scenario, you'd probably have something like `buy/models.js`, `buy/views.js`, etc. This way, if you need to work on the "buy book" feature, you can do pretty much everything you need to do without leaving that one folder. You can also mix &amp; match these styles somewhat, as the app grows and the needs expand; for instance, I prefer package-by-feature for the top level, but then I usually have a package-by-layer within each feature, since I often have multiple models and views per feature. Continuing the previous example, my setup would be: app/ buy/ models/ shopping_cart.js order_summary.js views/ shopping_cart.js order_summary.js You _could_ do package-by-feature again within the feature, but I often share models within the same feature, and it doesn't feel right dipping into another sub-feature's directory to grab stuff. Alternatives might include a `common` directory in each feature, for shared models and whatnot. There is no silver bullet though, and I encourage you to really think about what the app might look like a year down-the-road when planning it out. Anyways, that got a little long, but in case you'd like something more substantiated than my rambling, I recommend these links: * [Package by feature \[pdf\]](http://kkapelon.github.io/presentations/feature.pdf) * [Package by feature, not layer](http://www.javapractices.com/topic/TopicAction.do?Id=205) * [Package your classes by Feature and not by Layers](http://blog.manupk.com/2013/04/package-your-classes-by-feature-and-not.html)
Hilarious how every answer has a different structure. Can we not collectively agree on a standard and stick to that? When will this madness end?
I like the idea of OCR on the client side but success rate of the demo was discouraging. Will have to do more testing on files I run OCR on. Being able to do this with image PDFs would be killer.
The problem is that if your requirements don't exactly match the assumptions that were baked into the framework that you started with, you will suffer going against the flow of all the abstractions looking for work-arounds. This almost always happens as a system evolves over time and the requirements slowly shift, particularly as new technologies like websockets or new streaming endpoints need to be added. Frameworks are not very good at versioning either. You can't really upgrade a rails application ala-carte because rails bundles everything into a very large core so many people are still stuck on verison 2.3 even today. With more independent, smaller modules, you can upgrade pieces as you need to and can add new features when you need them without needing to upgrade an entire application with a complete rewrite. It might be difficult to train new people to work with a custom architecture built out of small components, but: 1. you'll end up doing that anyways as your application evolves around and past the framework architecture over time 2. individual small libraries are much easier to learn than giant ones and you can learn them as you need to
Awesome reply, thanks so much for the insight! I will definitely take those ideas into account and maybe come up with my own hybrid structure.
I knew it was kind of up in the air and technically I could handle it any way that I wanted. However, I figured that by asking I would get some approaches that I haven't thought about and that's exactly what you provided. Thanks!
Good point. I've recently made the jump to Webstorm only figuring it would help learn JS faster somehow. I absolutely love the git and node.js integration that made things a lot easier to get into. I have used Sublime from time to time, but maybe I should think about jumping into it again. My head does spin a bit jumping around files.
I guess that's the beauty of it? I think I was hoping everyone would agree on 1 method but deep down I knew I would get tons of opinions. What's awesome is I can pick and choose what works best for my team and I.
Yea, it was far from perfect but the thought of OCR with client side javascript is cool!
Very surprised by the quality of this book. I would be very interested to see how some of my friends, who struggle with JS, would do with this. It seems to explain the concepts very well. I haven't gotten too deep yet, but if the first few chapters are any indication, I'm excited to see where it goes. I'm going to use some of the analogies when trying to explain the concepts to others in the future. 
Good for beginners in general
Because everyone loves writing code that is run veiled behind a curtain of magic. "Hey Jim, this is awesome, how does it work?" "No fucking clue dude, meteor and shit"
Oh, and re:raphael, SnapSVG is the successor to that project. Same guy wrote both, so unless you're relying on some raphael plugins or supporting oldIE, I would assume that Snap is going to be better. He's probably wrapped everything he learned/regretted in writing raphael into snap.
Well it's less a drawing app and more of an app for representing certain structured ideas. That's why I say that the primitives aren't the data themselves, they only represent the data. So you won't make a rectangle because you think it's cool, you will make it and connect it to other things to represent different relationships. And those relationships are processed in certain ways as well. So, you may have a chain of relationships and if the start of the chain is invalidated, the rest of the chain is also invalidated. That type of thing. But I am still evaluating and maybe I will decide that it doesn't quite fit. Thanks!
Anything from `grunt --stack`?
The library you are using is not actually using events. It uses simple callbacks, so you can't do something like: $script.fireEvent('jQuery'); However, I can offer you the solution you are looking for. function runApplication() { app.run(); //Do more stuff if necessary. } if(typeof jQuery === undefined) { $script('http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js', 'jQuery'); $script('jQuery', runApplication); //No parenthesis after runApplication because we are passing the function, not calling that function. } else { runApplication(); //Has the same exact behavior as the theoretical fireEvent('jQuery') would if the library supported it. } 
It's not actually modular enough -.- NEEDS MOAR MODULES. Mo modules, Mo choice. (P.S. author here).
&gt; Only a good architecture will Massive +1. One of the biggest values of mercury is not that it's a set of small modules (this is cool too). It's that it forces you to structure your application in FRP style architecture that reduces accidental complexity. In fact you can write a "mercury style" unidirectional application with any set of libraries, the modules in mercury are just a reference implementation. Note that modularity thus not save you from complexity but does give you FREEDOM from complexity. If you find a particular subset of a modular framework causes complexity you can just delete that module and replace it with a less complex module. This FREEDOM does not exist with a big "out of the box" tightly coupled framework.
There aren't many API docs yet. That's a work in progress being done inside out, all the small modules are getting README's first and then mercury will eventually have API docs. The first set of documentation effort was focused on the FAQ &amp; examples. Do check out the docs folder though :)
The article you linked described a technique for use in a _tool_ that functions to watch all events fired. To do that this is a perfectly acceptable technique. Let's be clear though, this is NOT done in your production environment. So no, it doesn't apply to this example, as long as it is used within the context of this example. What I mean is, don't think it's okay to use that technique in anything you do, because 99.9% of the time, it will be a horrific idea.
FYI on jsx and coffeescript: [it is possible](https://github.com/jsdf/coffee-react) :)
The idea behind modularity I think is, that after 2 years when you realize that something which was given by the framework you chose is not good enough. Maybe your criterias changed, maybe the world requires more and you want to keep up. If your framework is not modular, it's usually a real pain to change anything "built-in". If it's modular, it's probably a 2 day light work, and you don't have to stress about it at all. So yeah, modularity means that when you HAVE to impletement stuff, you will be ABLE to. :)
minimal as it's less bloated. not minimal as you can do everything what you can do with react
Curious to see how Immutable compares to mori in terms of file size. I know David Nolen (clojurescript guy) recommends using mori in node for now because of the library's "heft". If immutable is significantly more compact, then I'd be willing to forsake some performance instead of having to fork mori and create a custom build (with some of the lesser-used features removed).
Is your book targeted at beginner, intermediate, or advanced developers? Does it start off assuming people have some programming experience?
Legit question: why? See a lot of praise, just wondering what is great about it.
In my current project we're using both. D3 code strikes me as unstructured and spaghetti-ish. Even the official examples are a hodgepodge of functions and callbacks. I find it much easier to grok React code.
MOAR MODULARS!!! MOAR MOAR MOAR
Haha, you're awesome dude. You do great work in the community.
Great reply. As someone who's pretty much a noob at this, what do you use for proper packaging of all these files? It seems like there's so many tools out there that solve this problem (grunt, assetic, browersify) that it's becoming a bit hard for me to pick a solid, simple tool. I'm a bit overwhelmed with options.
Very nice! I'm developing something similar using React.js.
Hmm, was expecting some nice visualizations and graphs, not a form.
It's up to you, there are some opinionated frameworks, like Ember, which pretty much force you to abide by their conventions, then there's others like Backbone, which give you all the flexibility in the world. Unless you mean like an ECMAScript standard, which is probably out-of-the-question for many reasons. 
Good point. To clarify, standard is probably the wrong word. What I meant was convention.
Thanks, that makes total sense in this context.
I would say understand yeoman - it gets you started and you dont need to write boiler plate code . I made two extensions so far, one using google apps scripts and other using yeoman. Let me know if you need more information.
This guy is spamming.
React's emphasis on small and reusable components appeals to me more. You can do the same with d3, but you need to do it consciously and figure out your own conventions for it. D3 is a great tool to have under your belt though. 
If you are Javascript developer and don't know jQuery then...
You make conclusions based on older versions. A lot if not all of these issues are solved in 4.2.2 and Ext JS 5. ExtJS5 is pure HTML5 embracing all the browsers newest features. I work with ext on a daily basis and for huge applications. It is in fact a gui framework like you stated if you compare it with Angular you have to write all your components yourself. And if you don't do it yourself most developers combine Angular with other frameworks (eg: jQuery + jQueryUI/jQueryMobile/Bootstrap) For small apps which need to be highly customized Angular is probably better. But if you compare working 2 weeks full time on making a basic grid work using angular with the 2 minutes of work using ExtJS... I would know my pick... Styling improved a lot in ExtJS all sass based highly structured, designed for small and large applications. If it comes to support =&gt; If you use a ticket you get good help and quickly! If you do find a bug, you get a patch and your support ticket is refunded. If that isn't good service, I don't know what is... Here you can find a objective comparision: http://www.techferry.com/articles/ExtJS-vs-AngularJS.html 
... you're not developping apps running in a browser.
The demo seems to work fine with external images if the font color is black, has a size between 10px and 30px, and the given image does not get too much blurry after being upscaled. Special chars, Numbers and Emojis(!) are not detected (yet?). 
Are you aware of [ember-cli](http://www.ember-cli.com)?
If you have basic knowledge of JS and HTML then you can get started really easily using the Chrome Extension boilerplate, [Extensionizr](http://extensionizr.com/).
http://imgur.com/a/BO1uB Here is a better explanation of what I've done. I'm not sure what the AFNumber_Format Function. I looked at the Format tab and if I change the format from Number to Format, I have some custom boxes, but I'm not sure what code to put in here. I will look at the links that you posted (thank you for that), but I just wanted to add this information to make sure I was being clear about what the issue was.
Yeah, this is a replacement. Ember-cli is hard to customize, I don't like it. This is gulp based and it's fullstack.
Meteor is different in that it covers both front end and backend. It is an entire web development suite. It does do some cool stuff for you out of the box but for my taste there is just too much "magic" going on and could see it being a nightmare to work with when you need to do something complex or different than the default behavior. Angular, on the other hand, is just a front-end only SPA framework, so the two frameworks are quite different from another. If you are interested in client side only, angular would be the natural choice.
It made it for myself, and i hope more people will use it and extend the way they like.
I'm currently in love with meteor. At first i thought it was magic too but it if you look into there dependency system for there automatic update, it becomes really easy to understand. To be honest, i haven't tried angular to my shame. 
Meteor tries to do too much, in my opinion. I prefer a clean separation between the front and back end, and Angular is good for that. Node with ExpressJS, Restify or socket.io works for me on the back end.
I am almost the reverse. I follow Meteor on twitter and have poked around with the code once a few months ago, but haven't really gone hands-on. It seems to be really good for real-time apps, but I haven't needed to make one of those (the world doesn't need any more chat apps) so for practical implementation of smaller side projects I used Angular.
They're moving pretty fast, and it's hard to keep up with all the changes, but the customizability is improving. Take a look at the changelogs. You might find what you want. Incidentally, what's the build time like with gulp on a large app? 
I've never tested, people should use and improve this.
This is likely not going to be well-received, in the future I'd advise linking to either the project's homepage or to it's Github project. * http://anijs.github.io/studio/ * https://github.com/anijs/anijs/ Edit: Also, please do not post about this again until you've participated in the community. You actually qualify as a spammer, but I'm going to overlook it this time in the hopes that you'll come around. In the meantime, I suggest you familiarize yourself with the following links: * http://reddit.com/rules * http://reddit.com/r/javascript/wiki/index Thanks for your consideration.
this is the third time you have submitted this
html5 storage or cookies?
Hi, Okay, but I'm stuck on this part. This is what I did: (when things load, they call those functions as you mentioned above.) window.$scriptCallbackHandler = { loaded: [], jQuery: function() { $scriptCallbackHandler.loaded.push("jQuery"); logger.log("[ScriptCallbackHandler] jQuery Loaded!"); }, bugsnag: function() { $scriptCallbackHandler.loaded.push("bugsnag"); logger.log("[ScriptCallbackHandler] Bugsnag Loaded!"); }, pluginShareText: function() { $scriptCallbackHandler.loaded.push("pluginShareText"); logger.log("[ScriptCallbackHandler] pluginShareText Loaded!"); }, pluginShareImage: function() { $scriptCallbackHandler.loaded.push("pluginShareImage"); logger.log("[ScriptCallbackHandler] pluginShareImage Loaded!"); } }; However, this is the part where I'm stuck once again: // Run application $script.ready([ 'jQuery', 'bugsnag', 'pluginShareImage', 'pluginShareText' ], function() { loader.loadApplication(); }); How do you think we can solve it? I believe I need to develop an event listener, which should fire an event as soon as this scenario happens: "As soon as $scriptCallbackHandler.loaded array gets 4 items, run loader.loadApplication() or given callback." I thought about having a setInterval() and checking it time to time, but it feels like I'm going exactly the opposite direction. Do you have any idea? 
Sorry, I meant that you can use html5 storage or cookies to achieve the effect you want.
Why not paste the code they gave you too and someone can tell you where it goes?
Sorry, but I'm going to have to remove this, /r/javascript is not a job board. You can try /r/forhire (linked in our sidebar).
I don't get it. Why not just use Object.freeze() to make your JSON immutable?
I would take time to learn the basics of both and get an idea of which you might like better. I haven't played with Meteor much (although it looks cool), but I'm liking Angular the more I use it. [This site](http://learn-angular.org/) helped me get a basic understanding of it. Out of curiosity, what didn't you like about Ember?
Shameless plug. :-) If you'd like to easily combine AngularJs with Meteor, take a look at [Asteroid](https://github.com/mondora/asteroid), a library I developed which is basically an alternative DDP client for the browser, so that you can connect your AngularJS (or Ember, React, etc) app to a Meteor backend.
This is actually something that reddit has traditionally struggled with, and has recently taken steps to improve upon: http://www.reddit.com/r/modnews/comments/2asaq6/moderators_we_need_your_input_on_the_future_of/ Some other sources I'll point out that should hopefully help... From http://reddit.com/rules &gt; OK: Submitting links from your own site, talking with redditors in the comments, and also submitting cool stuff from other sites. From http://www.reddit.com/wiki/selfpromotion &gt; "It's perfectly fine to be a redditor with a website, it's not okay to be a website with a reddit account." - Confucius WIth that said, I don't think you'll have any problems. While I can't guarantee protection from the admins, you appear to be just a normal redditor that wants to share some original content, which just so happens to reside on your site. As long the motives aren't profit-driven (trying to sell a product or service), you should be fine.
Object.freeze makes plain javascript objects immutable, allowing you to do everything you just described.
That's something I always here. Meteor isn't just for real time apps. You might as well make blogs with it or any other kind of software really. You can make a static site with it it and remove the livedata package. Then you still have the advantages of the fast template engine and the script management as well as some great smart packages like iron-router etc. 
The term "immutable JSON" might be a bit misleading – JSON is immutable by its nature of being a static string with no requirements to be changeable in place. You can then convert it into a structure that is either mutable or immutable. Also how does immutability increase performance? It might influence you to write better and safer code, but adding a layer of immutability (without changing anything else) in JavaScript is likely to make the code slower, not faster. Now I do hope that ECMAScript eventually gets natively immutable structures as it will allow for a lot of safeguards to be dropped, which will indeed make the code execute faster.
My case may be more like a JavaScript library with both a Reddit account and a part of a software company's website. I got this account a while ago, and have posted a fair bit about JavaScript, but have not yet finished the framework which I will be using to power the website. As far as motives being profit driven, I think I'm mostly in the clear here, but not 100%. I am planning on offering consultancy and possibly some paid products on the site at some point, but I think that in order to have a really good web presence, it needs to have a lot of content that is very useful, irrespective of if anyone pays for it or not. I'm thinking about putting adverts on the site and there could be a pay-or-join to remove adverts capability. I've not actually planned that stuff in much detail. I've been a lot more focused on writing this jsgui framework / library. I think another issue for Reddit admins and mods to consider is to demotivate astroturfing. If I have an account, an post a lot of content related to my business activities, then at least it's identifiable. If I'm not allowed to do that, I have the temptation to astroturf. I'm not saying I would do that... but if I don't and my competitors do, then I'm at a disadvantage. However, I've not seen such astroturfing actually occurring on r/javascript, though I saw some suspicious activity regarding Strongloop on one of the node subreddits. It seemed a bit mysterious about why someone was posting so much about Strongloop. At least if I am posting a lot about the jsgui framework, the attribution will be clear. I'm really hopeful that I'll be able to have interesting discussions about JavaScript as it relates to the jsgui framework and hopefully get others on-board to develop or patch it. So far I've been hesitant about releasing the code as it's not finished and there would have been breaking API changes. I'm also wanting to use the system to present information about the system. I think it would be worth using jsgui to host some discussions too, I would not only be relying on Reddit. It would be really nice if my motives could be 0% profit driven, but I've not registered a non-profit entity, I do actually want to make some money off the programming I have done, but I don't want to be a dick about it either.
So apparently if you don't use ember-cli you are some kind of fool? I don't know, from my limited experience, Broccoli is nice, but still a lot younger than grunt or gulp and thus has some edge-case issues I've already run into.
Running "cdnify:dist" (cdnify) task Going through dist/404.html, dist/index.html to update script refs Warning: Arguments to path.join must be strings Use --force to continue. TypeError: Arguments to path.join must be strings at path.js:360:15 at Array.filter (native) at Object.exports.join (path.js:358:36) at GitHubResolver._checkout (/Users/John/NetBeansProjects/YeomanAngularTest/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/bower/lib/core/resolvers/GitHubResolver.js:54:21) at /Users/John/NetBeansProjects/YeomanAngularTest/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/bower/lib/core/resolvers/GitResolver.js:69:21 at _fulfilled (/Users/John/NetBeansProjects/YeomanAngularTest/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/bower/node_modules/q/q.js:798:54) at self.promiseDispatch.done (/Users/John/NetBeansProjects/YeomanAngularTest/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/bower/node_modules/q/q.js:827:30) at Promise.promise.promiseDispatch (/Users/John/NetBeansProjects/YeomanAngularTest/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/bower/node_modules/q/q.js:760:13) at /Users/John/NetBeansProjects/YeomanAngularTest/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/bower/node_modules/q/q.js:574:44 at flush (/Users/John/NetBeansProjects/YeomanAngularTest/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/bower/node_modules/q/q.js:108:17) 
Yes, it's certainly possible to use Object.freeze to achieve immutability, but as soon as you need to "change" those immutable objects you're going to need to deep copy the entire object, mutate the copy and freeze the copy. This is far too inefficient to be used practically in many cases. Persistent data structures such as those found in https://github.com/facebook/immutable-js or https://github.com/swannodette/mori offer a more space and time efficient way to achieve immutability.
Say your frozen json object looks like this: coll = { a: { b: { c: 0 } } a1: 0 }; You want to change `a.b.c` to `1`. It's a complicated process where you first clone the leaf node with `{c: 1}` That requires you to update the parent object, by doing a shallow clone, setting the new reference to the leaf node, and freezing it. This in turn requires you to do the same thing with the parent object: clone, update ref, freeze. A lot of manual updating for a simple operation. Also, keep in mind that `Object.freeze` only freezes shallowly. There are tools like `deepfreeze` that recursively freeze the whole object hierarchy (which can be slow). With immutable.js (or something like mori), this entire operation is just `newColl = coll.updateIn(["a", "b", "c"], 1)`. It can also optionally be a "lazy" operation where that update isn't realized until you get something from the new collection. This can give huge performance gains in certain cases, especially when mapping over large collections. Also, if the real implementation of the data structure is encapsulated in the interface, you don't have to use `Object.freeze()`. There would be no way to do `coll.a.b.c = 1` in a mutable fashion because those properties wouldn't exist for direct access. `Object.freeze` is a simple tool -- immutable.js is a more comprehensive solution.
Looks pretty neat, doesn't play nice with AngularJS however :/
Maybe my grasp of the immutability principle is dated but that's not what immutable means. 
Have them. Maybe because web development has nothing to do with grammar.
&gt; None of these things are sped up by immutable data structures. The speed up comes from being able to write highly efficient [shouldComponentUpdate implementations](http://facebook.github.io/react/docs/component-specs.html#updating-shouldcomponentupdate) to replace somewhat costlier virtual DOM renderings.
It was a couple of things, the size of the library and its dependancies was pretty big, obviously gzipping would help, but thats not always available on shared hosts. Also Handlebars… thats a personal thing, i just found Handlebars to be unwealding. Ember does look like a really nice framework, but kind of struck me as the Rails/Laravel of javascript. I might be wrong about all of that, it was just my impression after my initial exposure. 
Note that the article discusses Om, not just vanilla React. With Om, there are *two* main bits of cleverness here in the pipeline from application state to DOM mutations: * Given your application state, a naive implementation would re-render the entire virtual DOM (which is what vanilla React does). With immutable data structures, however, Om is able to decide which sections of the virtual DOM have changed and avoid those computations. For example, if your `NewsFeed` has the same list of news items as before, we know from immutability that none of the `NewsItems` elements should change their appearance, so we can avoid that entire render branch. Pretty cool, and immutability is *fundamental* to this optimization. * Given your virtual DOM, a naive implementation would scrap the DOM and replace it entirely. Instead, [React is very clever about how to mutate the DOM to match the virtual DOM](http://calendar.perfplanet.com/2013/diff/). This is the primary vanilla-React performance boost, and it does *not* involve immutability. So, it's very true that there's an inherent performance cost to immutability, but there's definitely a performance gain from modifying React to take advantage of immutability, too. At that point, if your app is performance-critical, it's a matter of benchmarking and measuring whether the faster render times successfully offset the slower state updates for your app in particular. (If it's not performance-critical, I'd argue that immutability is easier to reason about and worth
`shouldComponentUpdate` also triggers when a virtual DOM node receives new props. Since React recycles DOM nodes *and* virtual DOM nodes, these updates happen a *lot* in most apps. (Or, wait, are you saying that optimizations to `shouldComponentUpdate` don't matter because apps don't change state very often? If you don't care about improved dirty checking when your app updates, then I wouldn't think you'd care about React's performance characteristics at all…)
I guess I'm being very pedantic... But I would say the property you speak of is "tracking changes", not "immutability". An alternate way to do it would be to have a single, mutable, collection that lets you perform all the `push` etc. methods, but just sets a `dirty` flag to `true`, and lets you call `map.isClean()` method instead of comparing `map1 === map2` (and in the false case, you'd reset the `dirty` flag for next iteration). Obviously this solution doesn't scale well with multiple subscribers to the state, but I hope it explains why I don't really attribute the optimization to immutability alone. **Edit:** Just to be clear in case it didn't seem like it from my first comment – I truly do believe immutability helps you write better and more fool-proof code. But the way the article was written seemed to imply you'd get a performance boost from simply using this on your JSON with no other changes. This is simply not true – you need to write your code around immutability from the ground up before you can actually benefit from the principles it comes with.
Thanks, this should get me started. Yes it is a new page, probably I couldn't make it work by saving the objectId as a variable and passing that as part of the equalTo query on the new page.
Hmm. Suppose we have an API where all objects have a clean/dirty flag for each view. (For simplicity, we'll say there's just one view.) What about the following case? 1. The news feed is ["John is happy" (clean), "Jane is sad" (clean)] (clean). 2. Jane calls edit on her news feed item, changing its text and setting its dirty flag. 3. The news feed is ["John is happy" (clean), "Jane is angry" (dirty)] (clean). The dirtiness didn't propagate up to the news feed. So, it sounds like we need two subscriber models: an object keeps track of whether each view has seen it in a clean state yet or not, and an object keeps track of collections that own it in order to propagate dirtiness up to them. I think I'd agree that this *works*, but I don't like it, and I'm not entirely convinced that we haven't missed something (whereas with immutability we get good performance *and* it's obvious to me that it works). Anyway. I think we all agree but are just using different phrasing. Om's particular implementation of dirty subtree tracking requires that the data be immutable. But it's probably possible to track dirty subtrees more explicitly; it's just that it also sounds like it would suck. edit: Actually, I guess you only really need one subscriber model: views and collections subscribe to their relevant data elements, then dirty events propagate up through collections up to the views. You would need some extra attention to what data elements triggered the event: when your app state is marked as dirty, you'll want to re-render the top-level of the view, and then as you trickle down the renders you'd need to decide whether each subview's props appear in the dirty event. It could also cause trouble for batch updates: if I update 100 news feed items successively, will I trigger 100 dirty events? How do I avoid re-rendering the view 100 times? Anyway, I'm just doing this as a thought experiment at this point :)
Maybe because English is not my native language... Yes there are ppl living outside that American bubble ;) But thanks for the note, I'll be more careful next time 
&gt; I’m leaning more towards D3. Mainly because data is available where it’s needed and combined with its visualization and animation capabilities, data can be brought to life. Not that I agree (I don't give a shit), but the author wrote why. I think that for something like this you need nothing except plain javascript, plain html and plain css.
Several options: Number(x.charAt(2)); parseInt(x.charAt(2)); +x.charAt(2); If it is ok to work with small integers, also: x.charAt(2)|0; ~~x.charAt(2); x.charAt(2)&gt;&gt;0; x.charAt(2)&gt;&gt;&gt;0; Or even: eval(x.charAt(2)); new Function( 'return '+ x.charAt(2))(); Also: {}+x.charAt(2) But, really, stick to the first or second option.
&gt; Rails/Laravel of javascript That is a surprisingly great description. However, I do have some counterpoints. **Library Size and dependencies** It is big, but then you realize that to get Angular to do much of the same things (with similar amounts of DRY) you end up including a lot of modules. (UI-router, restangular, ng-annotate, etc) **Memory Use/Performance** Ember beats Angular in memory use, so if mobile is a target you may want to reconsider Ember. Because of dirty-checking, Angular is prone to "layout thrashing" unless you are careful, but Ember's run-loop helps avoid that issue. **Handlebars** I admit I hate string-based templating too, but HTMLbars is going to be done soon (hopefully). That changes Handlebars into a declarative DOM syntax and ditches the excessive data-binding placeholders. Note: HTMLbars has been "almost done" for months, so maybe I'm just spreading FUD that it will be done soon. **Conclusion** I'm not trying to say that Ember is better than the others. I have projects in each of them. They all have their uses, I'm just saying that Ember's pros/cons might not have been laid out well enough for you. In the end, it is mostly about preference anyway. 
 parseFloat( x.charAt(2) ); will also work, but please, use `parseInt()`, this way it's clear what you intent is.
I find using Number better and safer. You can also use it with a functor without having a WAT moment: ['1','2','3','4'].map(Number); // [1, 2, 3, 4] ['1','2','3','4'].map(parseInt); // [1, NaN, NaN, NaN] Also `parseFloat` here works without unexpected results, because it is an unary function.
Another way, since '0'.charCodeAt(0) == 48: x.charCodeAt(2)-48
Thank you.
So what would you say are the pros and cons of Ember generally? 
Gotcha. That's a fair criticism of that sentence, but the sentence itself links to the Om article, so hopefully critical readers will click through for the clarification rather than assume that the speedup is automatic.
...just for clarification with ParseInt(), it defaults to the radix interpreted through your browser which may have unintended consequences. It's best practice to define a radix. ParseInt(x.charAt(2), 10) // decimal
&gt; But one year after, the app store arrived, and the development was only accessible by Objective-C. Damn you Steve! That's not entirely accurate. At first Steve was all about making webapps. http://en.wikipedia.org/wiki/App_store#Apple_and_the_App_Store
Yeah it was me :) Thanks!
If you have any questions, let me know and I will pass it along to the authors. I am not an author of this report, but I know the authors. 
WTF is up with that map example? Why did '1' work? Why not the rest?
Wow this is dope $2 /u/changetip
`parseInt` takes radix as the second argument and `.map` sends index as the second argument. It ignores 0 as a base, because that's silly, but for higher numbers it tries to interpret them as an actual radix- and 2 in base 1 doesn't work, nor 3 in base 2 etc.
I'm sure I won't be able to cover everything but here is what I can think of right now. **Pros** The biggest pro is the run-loop and the benefits it brings. The Router is top-notch. A definitive boilerplate in the form of Ember-CLI instead of the 5 or six different(most popular) boilerplates for Angular. Observable properties built right in. **Cons** Like you said, its big. Prebundled with Bootstrap(easy to fix, only a con because some don't like bootstrap). Still waiting on HTMLbars so Handlebars is a con. Getters/Setters and custom base object because of how the run-loop works (many people prefer POJOs). **Opinion-based** One thing that is either a pro or con based on preference is the "Opinionated" nature of Ember. It allows Ember to generate Controllers or Views for you on the fly, cutting down on boilerplate, but it also means that going against Convention causes headaches. Angular isn't much better as far as the headaches for straying from convention. Meteor is pretty free-form though. I tried to be objective with my analysis but I recommend you talk to others as well.
Just released an update that exposes mailto.ninja.reload() for single-page apps. Let me know if that helps.
As for the first case, you can profile the and check. My guess it wont have much difference. You should cache jQuery elements using the second way, because in the first you are making another call to $()
Sounds like a pretty big pain. I have an easier solution. If you really don't trust your clients, then return a clone of the object. Then your clients can just do coll.a.b.c = 1 Jumping through hoops to slightly increase some perceived performance issues with cloning, memory, reuse of data is ridiculous when 99% of all your program time is likely to be spent manipulating the DOM or waiting on some database or other network IO.
The first is a crapshoot. I can tell you that none are quick. Is there a way to add a class/data-attribute to select what you want? Anytime you use a :not or :is pseudo you're going to add a performance hit. Probably negligible in the long run, so at that point I'd say whatever is more "readable." The second example, it's better to use the 2nd option. Your assigning the output of a $(elem) to a variable, so jQuery has already done it's duty and the output is in memory. The prior is the same, AND you're running it through jQuery again, which does nothing in this case. Also, anytime you have a var assigned to a jQuery object, you'll want to prepend it with a $ (eg, var $p = $('p');) so it's clear to the reader. Not a rule, just common to see and is sort of convention. 
Alright, so I should remove the jQuery wrapper?
You can, but why? You're presumably using jQuery for a reason. Not using jQuerry-wrapped objects means you're working with the DOM by hand. In your example, if `someFunction()` is a jQuery method then you can't call it on a plain DOM object, you can only call it on a jQuery-wrapped object. 
Right, but I mean once myVar is set to $('p'), it's better to use myVar.someFunct ion() than to wrap the variable name in the jQuery wrapper a second time? 
Nope. One of those three examples has to be used. 
Ok, but how do I let the local storage know which item of list has been selected?
I think I’m learning for learnings sake. I dont have anything specific in mind to build with any of the frameworks, but I have found in the past that learning a framwork in a language can be a good way to learn best practices and concepts. 
I was asked the same question by someone else, but It was a couple of things, the size of the library and its dependancies was pretty big, obviously gzipping would help, but thats not always available on shared hosts. Also Handlebars… thats a personal thing, i just found Handlebars to be unwealding and ugly. Ember does look like a really nice framework, but kind of struck me as the Rails/Laravel of javascript. Angular looks more concise, more eleqant when compared to some of the ember code that I have seen. So from that I moved on to Meteor and what that could do. 
http://imgur.com/kCaMQHf
This is awesome! I'd love to see a part two that expanded on this.
Damn, maybe I should just resort to streaming the files to mplayer? Maybe that'll fix the whole "downloading their songs" thing. Any advice on this? 
I like the name. Kona means Woman in Icelandic. 
Write your code as CommonJS module(s). Link the main file as your `main` in `package.json`. This will cover node, browserify and webpack users. I'd personally put this in `./lib`. Then add a build that creates a [UMD](https://github.com/umdjs/umd) capable bundle. Use either browserify or webpack for this. (browserify calls it `--standalone `, for webpack check [here](https://webpack.github.io/docs/webpack-for-browserify-users.html#standalone)) Write it to like `./dist`. Add this as main in `bower.json`, and link it from the README for manual download. Because it is UMD it can be loaded as AMD module, commonJS module or browser global. You can also generate a minified file there if you want. Then make sure you optimise `.npmignore` and the bower whitelist so you don't include unnecessary files. Npm doesn't need the bundles, and bower doesn't need the raw lib.
Check out [umd](https://github.com/umdjs/umd). Unfortunately, until ES6 modules are supported in all browsers, we have to deal with a few different module types (usually amd, commonjs and globals). There is also an ES6 module polyfill somewhere and a transpiler to convert from ES6 to the 3 mentioned above.
Can this load npm modules?
I'd use meteor for quickly prototyping an idea, I think a bit more work is needed for meteor before I would use it for a complex web app. (like the integrated testing framework velocity). Angular has more docs and plugins and is more mature, making it a great tool to build complex web apps with. It would also depend on what type of DB you want to use, some data is legitimately better stored in relational databases rather than NoSQL!
Definitely going to be checking this out. I'm a big fan of toto, but I'm more comfortable hacking in JS.
Is it me or is everybody else here talking about Extensions when OP is asking about Apps? They are suppose to be [two different things](https://developer.chrome.com/webstore/apps_vs_extensions). 
How about apples and oranges while we're at it
It's not just immutable, it's more a library for dealing with js objects like they were [persistent data structures](http://en.wikipedia.org/wiki/Persistent_data_structure) which allows for none destructive updates.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Persistent data structure**](https://en.wikipedia.org/wiki/Persistent%20data%20structure): [](#sfw) --- &gt; &gt;In [computing](https://en.wikipedia.org/wiki/Computing), a __persistent data structure__ is a [data structure](https://en.wikipedia.org/wiki/Data_structure) that always preserves the previous version of itself when it is modified. Such data structures are effectively [immutable](https://en.wikipedia.org/wiki/Immutable_object), as their operations do not (visibly) update the structure in-place, but instead always yield a new updated structure. (A persistent data structure is *not* a data structure committed to [persistent storage](https://en.wikipedia.org/wiki/Persistent_storage), such as a disk; this is a different and unrelated sense of the word "persistent.") &gt;A data structure is partially persistent if all versions can be accessed but only the newest version can be modified. The data structure is fully persistent if every version can be both accessed and modified. If there is also a meld or merge operation that can create a new version from two previous versions, the data structure is called confluently persistent. Structures that are not persistent are called [ephemeral](https://en.wikipedia.org/wiki/Ephemeral_(disambiguation\)). &gt;These types of data structures are particularly common in [logical](https://en.wikipedia.org/wiki/Logic_programming) and [functional programming](https://en.wikipedia.org/wiki/Functional_programming), and in a [purely functional](https://en.wikipedia.org/wiki/Purely_functional) program all data is immutable, so all data structures are automatically fully persistent. Persistent data structures can also be created using in-place updating of data and these may, in general, use less time or storage space than their purely functional counterparts. &gt;==== &gt;[**Image**](https://i.imgur.com/S9JVdah.png) [^(i)](https://commons.wikimedia.org/wiki/File:Purely_functional_list_before.svg) --- ^Interesting: [^Hash ^tree ^\(persistent ^data ^structure)](https://en.wikipedia.org/wiki/Hash_tree_\(persistent_data_structure\)) ^| [^Linked ^list](https://en.wikipedia.org/wiki/Linked_list) ^| [^Data ^structure](https://en.wikipedia.org/wiki/Data_structure) ^| [^Purely ^functional](https://en.wikipedia.org/wiki/Purely_functional) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cjexht1) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cjexht1)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Yep :) I think I might use Alea after all, even though it's very obscure (seems to only have one implementation out there). I had to rewrite it to have a lower memory footprint since I create potentially hundreds of thousands of individually seeded number generators, and use MurmurHash3 instead of the custom "Mash" function (which was slower)... But it's showing good results in Dieharder. :)
Solid answer, cheers!
not yet
I'm not into Mongo or Meteor, but this looks like a good, well written read. One thing please please please don't tell people to sudo curl things, it's a terrible idea.
how frequently do you use Parse, and for what sorts of apps? I find it to be cumbersome at times for relational data because it uses a document store rather than a SQL database (at least that's what I gather), and so I've found building certain things to be extremely frustrating. The learning curve is tricky especially for someone so ingrained in doing things the SQL way.
This is fantastic!
I see. The new method Object.observe (only supported in Chrome right now) allows you to watch plain javascript objects for changes. Using this you can automatically persist changes to an object graph to a database or local storage. 
Exactly. Also, I want to try react or similar, but handing control over to a dom-diffing algorithm makes me uneasy, it's probably irrational but I'd much rather have precise control. 
Okay!
I didn't think the `"use asm.js"` statement could create such a noticable slowdown compared to the JavaScript version. Is this normal? Are there things that can be done to speed it up?
Oh boy another lightbox script!1!!one11! Edit: JavaScript, srs bzns 
Regardless of the other comment, if you made this, nice job. Responsive on my phone and looks really clean.
Filing a bug would be best https://bugzilla.mozilla.org/enter_bug.cgi?product=Core&amp;component=JavaScript%20Engine&amp;cc=:kbrosnan,:azakai
The use of asm adds some fixed cost, your example is just not big enough. asm.js is considered a compile target, you'll gain much more speed if the whole program runs inside not just a single function.
Yeah it looks like it's simplifying the ast, off the top of my head a functional declarations (addTo(d)) has a node for the declaration a node for the name, a node for the arguments and one for each of the individual ones and one for the body (which is NOT a block statement) 
Standalone, works really smoothly, uses the maximum amount of space on my monitor by default - I like it! Thanks for sharing.
System.out.*() is Java, not JavaScript so you're either asking in the wrong place or you are looking for console.log() Also, the difference between System.out.print and System.out.println is .println breaks to a new line. To remove the .print statements just put them together in a single string and output them with .println
I think someone was attempting to code drunk, and came into the wrong sub-reddit whilst drunk :o either that or "learning to program"
Thanks, I'll ask in java help. Thanks for your explanation as well. Edit: Your explanation just made sense to me, thanks a lot!
learning lol
AST = Abstract Syntax Tree. It reminds me of what a lexer would output. Code =&gt; Tokens
I would advice that you use **transform**(translateX or translate3d) instead **margin** and **left** on the animation, the transitions will be smoother.
I know what I'm doing tomorrow -- figuring out how to make this happen for my stuff. Cool!! Thanks for posting.
No worries. Good luck :)
If you are using requirejs take a look at this example repo. https://github.com/requirejs/example-libglobal
Yes, use 3D transforms when possible as it will trigger hardware acceleration.
The problem is the size of the data, not the size of the function. With a string that short, the (relatively small) overhead dominates.
Yea, Alea is indeed somewhat obscure since it's a JavaScript specific "there is only double" PRNG. Typically, PRNGs use 32 or 64 bit integers.
I haven't used diehard or BigCrush myself. I always just go with Xorshift if the built-in PRNG isn't good enough. E.g. if I can't seed it or if it's implementation specific. If I seed it, I want the very same sequence of numbers everywhere. A puzzle game, for example, can store some (or all) levels just as the seed value which was used to procedurally generate the level. Naturally, it's required that the PRNG will generate the same sequence with that seed. Otherwise, it simply won't work.
It looks like it's just promotional material for whatever jointjs is.
Isn't using an entire framework like angular overkill for just validation purposes? Or is angular being used elsewhere as well to deliver views.
Setting minimum speed and maximum pitch, the gaps between the windows become very obvious. Are you overlapping enough? This might be a helpful guide: http://www.katjaas.nl/FFTwindow/FFTwindow&amp;filtering.html
Just pasted jquery into it. I think I broke it.
I see. So you have to use some special operations to get that from plain javascript objects. That's a pain, so the gain better be worth it. I've released several web apps, and object memory usage or copying time was never the problem. Dom manipulation or database querying or a bad algorithm ( O(n) or worse ) was always the problem with performance. 
If you're JUST using angular for validation, I'd say it's WAY overkill. I'm using angular for my whole application though, and presumably people will be doing the same.
I don't mean a trade off in performance. I mean I would be losing development time to do something that had better gain me some very large benefit in the software. I can think of no situation involving a web application that would warrant the usage of a persistent data structure. If I'm writing a library that caches values and I don't trust my clients to not manipulate them then I might freeze and reuse results. But if the clients have to use some non standard object manipulation functions then that would be up to them, I wouldn't force it as part of an API.
Does Firefox copy memory in/out from JS-land every time it runs an asm.js procedure? I'm not resetting the heap, so the only overhead we should be seeing is the communication of the integer parameters/return value. This communication would happen in any asm.js-enabled application that has doesn't run *everything* as asm.js... So it would be slow there as well? Is asm.js not intended for JS interop, only to be run standalone (and possibly for heavier task that take more data like your example)? I'd hoped Firefox would have an escape plan if it turns out that the overhead of communication is proving to not only cancel out the speed improvement, but slow it down a lot. But I guess that would be very difficult to measure accurately, so maybe that should be up to the developer...
Yup, I'm creating [a procedural generation library][procedural] to help you create things like "random" levels, but with a lot of logic on each layer of randomness. For example, it could output a set of functions that lets you call something like `rogueGame('some random seed').level(3).tile(5, 8).type == 'stairs'`. Here's the result of running Alea with two parameters on 500,000,000 random numbers: https://gist.github.com/blixt/838924612e0a291da697 [procedural]: https://github.com/blixt/js-procedural
Use the [ES6 Module Transpiler](https://github.com/esnext/es6-module-transpiler). It allows you to author the module in ECMAScript 6 and transpile it to AMD or CJS. Additionally, ES6 modules are supported by webpack out of the box and by browserify via the es6ify transform.
Thanks for advice! I'll work on it.
You are certainly re-copying the string into the heap each time, because `prepare()` is inside the function being benchmarked. (There's a chance that more time is spent in this code than the actual hashing.) I tried removing all that redundancy from out of the code under test but it only makes the difference more stark rather than less, which is a good indication that this isn't testing anything of value and is measuring pure noise. &gt; I'd hoped Firefox would have an escape plan if it turns out that the overhead of communication is proving to not only cancel out the speed improvement, but slow it down a lot. Again, you can't draw any such conclusions from a benchmark like this, because the amount of work being tested is so small. The inner `for` loop of the hash is only running for 5 iterations, which is nothing. Moreover, you aren't using the return value anywhere, so the whole thing might even be optimized away completely as dead code in the non-asm version, resulting in doing nothing for 'n' iterations. It takes a huge amount of time and consideration to write a benchmark that will yield meaningful results, particularly when you're testing something completely synthetic like this. 
To parse an integer, you use parseInt. To parse the string '3' to get the integer 3, you should do parseInt('3', 10) See http://www.codeproject.com/Articles/182416/A-Collection-of-JavaScript-Gotchas#parseint
I don't see why you wouldn't use angular for just one form. I mean how is it different from using jQuery and 1-2 plugins for the same thing? 
I'm re-putting the string which is minimal work. I said I'm not recreating the heap (4 kB) every time, which would involve memory allocation and be much slower. Anyway, yes I'm aware it's almost impossible to cater all cases with something so complex as asm.js, but this big speed difference for simply calling into asm.js (not really doing any work) shows there's an overhead to be aware of, bigger than I expected. And Firefox doesn't unoptimize the function in this case (as may happen to other pieces of JS code when they turn out to work poorly). 
Don't make people sign in AFTER taking the quiz
You need to take into account that not many people need nor want to learn something as massive like angular to do things that they can actualy do with jQuery already, Angular in not a replacement of jQuery. You would only need to use Angular if you realy need to and your application require it in order to growth. If you are using jQuery and you are fine with, then...is exactly that, **you are fine with it**, no need of anything else unless you feel that you need it.
You're right. I don't know why I've forgotten about that. I'll change it with the next release, thanks! EDIT: Now it's possible to use both attributes. I kept `data-caption` if someone doesn't want to see hover effect of `title`.
Great article! As someone working on getting more comfortable with writing directives, I love the examples.
The article is pretty clearly aimed at those already using Angular. The second paragraph explicitly states: "Now, if you are writing an AngularJS application, do us all a favor and forget jQuery exists."
Thanks! I had the opportunity to re-write some directives that were just wrapping some jQuery scripts in the linking function, and I realized that transforming the code from a jQuery script to a more "angular" solution was a great way to illustrate the right way to work with Angular; that inspired the blog post. :)
Outside of AngularJS applications I only use jQuery for my DOM manipulation and traversal. However, this advice is intended for those writing code in the context of AngularJS.
I have been using the structure in your example for over a year now, and it has worked out very well for me. As your application becomes more complex going from models.js to /models is necessary.
Like which alternatives? I've been using this for awhile, and the main thing I like about it is being able to set logging levels, e.g. you can set it so that for normal users it doesn't log anything, but devs can enable it to run at various levels as-needed.
Any library or build step you depend on is an additional complication. The truth is that mutable objects is not the real problem. Arbitrary modification of mutable objects by imperative code is the real problem. Imagine a purely declarative language where instead of making imperative statements that manipulate objects you simple declare what an object should look like based upon some dependent state. In the most common case, the output structure you declare would be the view (composed of dom elements in html uis) and the input structure it is dependent on would be the model. The language should be reactive. So that when the input model changes, the output model dynamically changes as well. The input must be mutable, of course. The output should be mutable as well so you can perform small, incremental, efficient changes to it in order to keep it updated. I wrote such a reactive language and I'm writing our next version of our application in it. It's awesome. I can write imperative code in it or declarative reactive code. The vast majority of code will be declarative, so the issue of mutable objects becomes moot. In a real sense, I wrote the language to solve the problem of arbitrary manipulation of state. That's the main maintenance problem with any large imperative program: how did my program get into this weird state? Well when any bit of the thousands of modules in your code can potentially manipulate any piece of state, then who knows. You spend most your time eventually debugging to find out who did what. When you declare what your dependent state should be then there is only ever a single place to look. Obviously you also get the benefit of dependencies always being correct, like in any other reactive solution. 
If your event merely displays data and does not update or create, it's better to use jQuery because angular directives by default go through the entire cycle where they check for this that and this and that. If your dom becomes complex and the events are fired fast enough, then angular WILL crash your browser.
I don't feel that the design of directives warrants total abandonment of jQuey. It takes way longer to do with directives what can be done more simply with jQuery.
I'm not very familiar with developing on JS outside of jQuery, so maybe it's a stupid question, but how exactly are you supposed to use it? Logging errors that are caught by try-catch? But JS already shows in the console where the error has occurred, so what's the point? Maybe you should put some logging everywhere, so you will know the exact work flow, which has led to an error? That would flood your code quite a bit, unit tests seem to be a better alternative for that. So what exactly are you accomplishing with this lib? 
You log events with different severity levels. Put in a debug if you're logging something minor, an info for a major event, a warning for something that doesn't quite seem right and an error for something very bad (probably might want to throw an exception here too). If you do filtering you won't flood your console, and in any case is that a terribly bad thing? 
is it IE-safe?
What you wrote is indisputable. The choice of a framework implies acceptance (or ignorance) of its limitations. I think that the only framework that is worth using is the one you build to help you making your application real. You can do it by writing everything from scratch (if you enjoy producing wheels that rolls in a unique way) or by using good third party modules (if you trust the author and if you are able to read and understand 100% of the code). Each application will be different (the fun part) as different will be the problems each application is going to solve. A magic framework good at solving any problem just does not exist (except in the marketing bullshits). &gt; It might be difficult to train new people to work with a custom architecture built out of small components, but: 1. you'll end up doing that anyways as your application evolves around and past the framework architecture over time 2. individual small libraries are much easier to learn than giant ones and you can learn them as you need to Agreed. But consider also that if the problem you are trying to solve is complex enough to require the use of several small libraries, potentially adopting different styles and interfaces, you still have to learn a considerable amount of things, without the cohesion that a curated framework (hopefully) should give you at an interface level. I am thinking about novices here. For them the real problem is not learning how to use a single module, but being able to build complex and robust software architectures. A big and apparently shiny framework baked by a big corporation, with tons of tutorials and books to learn from will be the most viable option.
&gt; Manually Querying the DOM Is Like Writing SQL briliant. I love the SQL statement.
&gt; // lodash used ~~for brevity~~ `// lodash used because I'm a bad ass` ftfy
Oohh this looks promising. Most codebases I work in end up with a bunch of sloppy logging solutions. I've been meaning to look into or write something like this. Thanks!
grunt, browserify, reactify, yeoman.. and suddenly you stop to realize how this pile of s**t works
I'm not sure I like ng-click: &lt;a class="link" href="#" ng-click="select('two')"&gt;Click Me For Two&lt;/a&gt; Is basically the equivelant of: &lt;a class="link" href="#" onclick="select('two'); return false;"&gt;Click Me For Two&lt;/a&gt; Which we learnt ages ago was bad. You've got code in the HTML. WUT?
What have you tried? Storing some attributes on the checkboxes and then picking those up in an even should be super easy.
When i read the title i assumed you'd be using Web Workers and pushing this code to them. http://www.html5rocks.com/en/tutorials/workers/basics/ Its nice to see something similar that can fill the gap whilst we wait for browsers to adopt web workers.
Did you install node/npm using homebrew? If you did, it should be sudo npm install -g yeoman bower grunt generator-yeoman mkdir angular &amp;&amp; cd angular yo angular EACCES errors mean you have a permission error, so you probably either sudo'd when you shouldn't have, or didn't sudo when you should have.
Yeah I imagine it should be really easy. The thing is I haven't touched javascript or really even html since high school. So like 10 years. Which is why I was looking for some samples so I could sort through it and work it out. I have no idea where to start
Thanks, I would love to use web workers but have to support IE as the primary browser used by the customer. Might look into a version that uses workers and compare the two based on ease of implementation, code cleanness and performance. 
The difference is that the functions you are calling are not on the global scope. That is why it is okay in Angular to put JavaScript in your HTML.
This is the first app that I have used Parse on, but I am no stranger to document databases (like Mongo). The problem you are more than likely running in to is that you are trying to force a relational schema. In a document DB, you would denormalize your data much more than you would in a SQL db. Using Parse as an example, a User can have a property that is an array of messages. Instead of storing an array of Message objects though, you store an array of pointers to the actual Messages. A Message can have an array of comments, which are just pointers to a Comment object. In Parse, this allows you the flexibility to return the entire User object, with or without including the actual messages that the array of pointers corresponds to. Same goes for Comments if I just want the Message contents. When I update the comments on a message, I can just save the Message object and that save will cascade down through every object that has been included via a pointer, no matter the depth. A dream, within a dream, within a dream, within a dream, within a dream...you get the point. Approaching this from a relational standpoint doesnt work, because the storage model is completely different. The easiest way to get your head around document DBs is to think of them like big JSON objects. You can add properties on the fly, push or pop items to an array, etc. The learning curve is simple for someone who has worked with Javascript objects, so long as that person is not trying to fit their square peg into a round, SQL-shaped hole.
This may seem to be similar, but only at a glance. NgClick calls a function on the parent scope of the element in question, so there is no global namespace involved: you'll always know which method of which controller is called. Additionally, and this is a neat feature of angular built in directives, a variable called "$event" can be passed into the function - select(two, $event) - containing the click event. There is a much more eloquent answer deeper in this thread, but let me state one thing explicitly: ngClick and the other directives are essentially what makes angular declarative, not imperative. They're the things that are unusual and seemingly anti pattern, but this approach has extreme benefits once you're used to working with scopes and directives. At the place of occurrence, you tell the element what you expect to be done, not how it should be done. That in a nutshell is declarative programming, and it took me a fair while to completely grasp how useful this is.
Mobile is not getting better. Mobile is more than 5 years old and these are foundational mega-bugs. When mobile is capable of operating vaguely close to the desktop platforms these companies provide then we can resume this pointless conversation. At this point, mobile web is largely a failure. Most people don't want to touch it at all and would rather write native apps for mobile devices. I can't say I blame them.
there is a lot of angular code in the html when using angular. It's a different way of thinking. you're not "using JavaScript," you're using angular. I've been working on a project and decided to give angular a shot... it was difficult to wrap my head around it at first, but I've grown to really like it.
I've found it easier to utilize angular w/o jquery. I've recently began using it for a personal project, and once you get it into your head that you can do everything w/ scope, directives, and jqlite, there is no reason to toss jquery in. I think the problem is that jquery is now defacto... how many "web developers" could build a website without jquery? I know I'd probably find it difficult, or at least time consuming, at this point.
* https://code.google.com/p/android/issues/detail?id=4549 * https://code.google.com/p/android/issues/detail?id=19827 * http://stackoverflow.com/questions/2987706/touchend-event-doesnt-work-on-android * http://www.reddit.com/r/Android/comments/rc6ja/developer_who_just_bailed/ 
No, not currently, php has huge penetration on the server side so "completely" has to come with adoption. there are javascript engines that can do server side tasks and interact with browser javascript, so if you own the whole stack you *can* do it mostly in javascript, but there is a lot of reinventing of the wheel going on for very distinct tasks.
I heard even Microsoft is preferring Angular's approach vs. the knockout/backbone/jquery approach, as it more closely aligns with the coming W3C web standards. 
It would definitely be a misguided crutch to require jQuery for my own logic, as some kind of DOM glue. What this doesn't cover is jQuery as a dependency for useful libraries, components, frameworks, etc. Angular has a rapidly growing ecosystem, and it's getting easier to find great modules for common UX goals. For just the Bootstrap look, I have bootstrap-css-only, and for Bootstrap feel, I have UI Bootstrap, and it's every bit as customizable, and pure Angular/CSS. The Angular community is doing well becoming jQuery-independent while delivering the same value, and framework integration is promising (Famous, Polymer, etc.). While I have been encountering problems before I find well-written Angular modules for them, I'm finding those modules completed and better-written before I'm completing my custom solutions. The modular aspect of Angular, and its community, has been very good to me. For me, the buck has stopped with the higher-end design frameworks like Flat UI. Flat UI, afaik, would require rewiring to work with UI Bootstrap instead of jQuery/Bootstrap. UI Bootstrap is still the most robust style/UX implementation I've found, and I've resigned to building off of that. Anyone know others? Anyway, 100% pure Angular solutions are of course preferred, but dependencies have to be a caveat. OP maybe didn't mean it that far, but I think it's valid to say Angular doesn't always stand proudly alone on the Front-end.
&gt; tell me a single cross-browser issue http://caniuse.com/ Now its time to go learn Angular..
This correlation popped into my head as I was writing the post, like a little light bulb. :)
Ahh, that does make a lot of sense, especially &gt; I know that clicking this button will fire "select('two')" but I also know that it will be the only thing this button does. If the button needs to call more functionality, I can be 100% sure that it will be called in the "select" function. Thus, I can simply find this function and read on from there. When I was learning Angular, I asked this same question and I didn't get any satisfying answers. I guess that although it can be thought of it as breaking a cardinal rule, it's not really problematic because it actually gets rid of a lot of the issues that breaking that rule would have caused back in the day. Thanks for the answer! If it's ok, can I ask your advice on a more technical question? I had my first interview yesterday. My interviewers were complaining about how the lead dev hadn't wired in any feedback to the user for when they clicked a save button. The UX guy wanted the button to change colors to, say, yellow when it was clicked, then green once the project had successfully been saved. I looked at the HTML and found that ng-click called something like "saveProject()". I found where saveProject was defined and explained to the interviewers that if it were me, I'd probably just write a line within that function to modify the css and change the button color to yellow, then modify it again to green upon return of the promise. Or for more reusability, I'd define some sort of "buttonColor" function somewhere in the controller and call it within saveProject. Am I on the right track?
When I first looked at Angular, I saw `ng-click="someFunc()"` and I immediately balked! However, `ng-click` and `onclick` are fundamentally different in regard to the source of the function in the example. The `onclick` attribute will try to execute a function in the global scope (i.e. window.someFunc()). This is messy. The `ng-click` directive will try to execute a function on the scope object of the directive. It is scoped to the parent element that has the directive attribute, along with any children elements. So, it is encapsulated, which is a lot cleaner.
The trick is that `ng-click` does not evaluate the function in the global scope. It looks for the function on the scope object that angular created for the directive. The pros tell the noobs not to put JS in HTML, which is generally good advice. Angular makes it a little confusing since they rely on a similar convention, but in reality something else is happening entirely.
I haven't found anything I could do with PHP that I couldn't with JS...
These are good points. One thing I should maybe add to the post is a section on using jQuery plugins with angular. (Or, maybe I'll do a part 2 centered around that). It can sometimes be a little difficult, but with the right mindset you can usually get good results.
and since SQL used to be all over the html, its a great analogy.
LOL! Yeah, `lodash` is the best.
I've written all my server code in Python or JS. Haven't had any problems. Parse (parse.com) is a great cross-platform backend as well. 
The way I see this is that the controller provides a fairly generic API that allows any operation that the view could require to fulfill its use cases. Calling controller functions in this way actually decouples the HTML from the controller code, as opposed to having the JavaScript listen to events on specific elements identified by ID or class. IMO It's much clearer to have a JavaScript snippet than a magical ID that links the DOM to your code. It also means that your HTML classes/IDs bear the sole responsibility of providing hooks for your CSS, reducing coupling further. I generally prefer to have as many DOM specific variables initialized in the partial as possible. I.e. variables that keep track of selections or fold-outs. To me these do not belong in the controller, which could theoretically be used by an entirely different partial.
The point isn't development speed, it's the fact that doing so couples your dom hierarchy to your JS code. The goal this article is trying to bring across is to make it so dom changes won't cause your JS code to inexplicably break in unknown ways.
Nice try :) 
Why would AngularJS suddenly pose this risk of inexplicably breaking? The whole thing seems like FUD to me (fear, uncertainty, doubt). I see nothing especially dangerous in mixing in jQuery with AngularJS.
That readme.md file is crazy long. Kudos for documenting and showing examples, but you may want to break it up into some separate files or a wiki.
So you can't find anything because you don't know how to use it?
as far as I can tell, the angular approach is the exact same as the knockout approach. ng-click="save()" is the same concept as using data-bind="click: save" or data-bind="click: $parent.save()" 
No, JS is limited to what client are allowed to see, so it can never replace server side stuff completely. Edit. I hadn't considered op might have meant node.js, which is server side. my mistake.
a (light|shadow)box
I've just never seen an example of something written in PHP that would be impossible to do with JS.
is there JQuery associated with this? 
The window itself is called a modal http://en.wikipedia.org/wiki/Modal_window light box is/was the name of a jQuery plugin that made making modals easy. By now there are dozens of libs that do this for you. Have a look at http://getbootstrap.com/javascript/#modals
Yo, that's really good. I feel I wasn't too far off. I haven't used ng-class much before but I will now. Thanks!
This seems really odd to me if you're trying to hire a senior or even mid level developers, which I'd expect if you're after an Angular expert. Entry level developers nearer to school would seem more likely to give a technical answer only. Asking relatively new grads that have just finished spending most of their lives in an environment that simply wants the answer to the question would seem ripe for disappointment. &gt; The questions are things like "What's the difference between == and ===", or "What's the difference between undefined and null?" Knowing these isn't terribly necessary to writing most code so I can't say I'm surprised. I don't remember the last time I used == or had to think about the difference between undefined and null never mind explain it. I write several thousand lines of JS every year between vanilla, jQuery, Angular, grunt file customization, google apps script and rarely some node.
Oh boy - you're in a for a big surprise when you catch up with modern day web development :)
Had that same issue with installing Node on homebrew, then every file homebrew created was also root only... To fix that, I changed the owner of the full homebrew directory: $ sudo chown -r user:group /Users/user/Library/Homebrew and then the specific .npm directory: $ sudo chown -r user:group /Users/user/.npm
Educate me. How can I manage a shopping cart with authentication without any server side software.
You must recognize that this is not 'really' a window. Rather it is just a normal DIV rectangle that is made visible. Then an 'overlay' is applied to make the background seem dim. Usually another DIV that has 50% opacity for instance. Javascript DOES have window.open stuff that open a real browser window or a new tab, and that's what ad blocker plugins block. But these fake windows are a different story. The example you gave isn't all that different from a popop ad that uses the same technique to circumvent ad blockers.
Yep, here too! The power of jQuery (SQL-ish or no) is the ability to do things like this: $("a[target=''], a:not([target])").find("[href^=http:]").attr("target", "_new") That is... grab all the Anchor tags without a target specification that are pointing off-site and make them load in a _new window. Why the hell should this global logic (should you choose to implement it) be present in the code? In the Angular space, we have this at work: &lt;div class="form-group has-error" ng-class="{'has-error': form.fieldUsername.$invalid}"&gt; &lt;label class="col-xs-5 control-label no-padding-right align-left" for="fieldUsername"&gt; Username: &lt;em class="help-block ng-hide" type="required" ng-show="form.fieldUsername.$dirty &amp;&amp; form.fieldUsername.$error.required"&gt;Username is required.&lt;/em&gt; &lt;/label&gt; &lt;input class="col-xs-7 align-left ng-pristine ng-invalid ng-invalid-required" type="text" required="" ng-model="Model.Login.Username" name="fieldUsername" placeholder="Username"&gt; &lt;/div&gt; ...for damned near EVERY input. Yet the *Angular way* is to do this, or to write a directive to write the more complicated directives (so recursion, yea... that's fun to debug)? So I setup a "ng-preinit" that sets... window.name = 'NG_DEFER_BOOTSTRAP! ' + window.name; (See: http://stackoverflow.com/a/21049890/235704 and https://docs.angularjs.org/guide/bootstrap) ...**before** I include angular.min.js. Then after the jQuery DOM manip has run, it calls... angular.resumeBootstrap(); window.name = window.name.replace('NG_DEFER_BOOTSTRAP! ', ''); (line #2 is actually not necessary) ...and then the SAME lines as above can look like this in the source code: &lt;div&gt; &lt;label&gt; Username: &lt;em&gt;Username is required.&lt;/em&gt; &lt;/label&gt; &lt;input type="text" placeholder="Username" name="fieldUsername" ng-model="Model.Login.Username" required&gt; &lt;/div&gt; So I run the jQuery DOM manip pre-Angular boot, decorating all of the inputs with their required boilerplate directives (and avoiding $compile, and really, don't use $compile... it only causes a mess!). Angular is happy and I am happy. Angular is good at binding. jQuery is good at DOM manip. Use each for their strengths, and make sure you don't compromise to use either in favor of the other. 
I disagree. Now, I've done more jQuery than Angular, but I've gotten them to play very nicely, so long as I run the jQuery DOM manip pre Angular boot ([see my other comment in this thread](http://www.reddit.com/r/javascript/comments/2ci7ar/developing_with_angularjs_forget_jquery_exists/cjg9ml1)). Running jQuery post Angular boot and I almost entirely agree; you're looking for problems (and they WILL find you).
There are many ways to skin a cat, but using `NG_DEFER_BOOTSTRAP! ` seems like overkill if all you want to do is run a bit of jQuery prior to angular's compile step. You could likely just add your DOM manipulation script to a `run` block or a `config` block on the module: https://docs.angularjs.org/guide/module These functions run very early in the bootstrap process. I use these to add some headers to all of my AJAX requests, for example.
You're right, in that it's very useful to use both *if you know what you're doing*. The "don't use jquery" thing seems obviously a rule for people just starting, so that they can wrap their head around angular and not cause weird problems as they learn things... but then those people took it as canon instead of realizing that. Once you understand it all though, jquery is still invaluable... especially considering all the plugins it has... hell, angular-ui even has passthrough directives directly to jquery ui stuff. 
PHP is (until recently) always a separate entity from the HTTP server, and PHP isn't a long-running program- your scripts are started anew with each request, and shut down when each request ends. NodeJS and the other server-side solutions start as their own application, with their own server running. That means that super cheap shared hosting is possible with PHP, as are site-building websites are possible, etc etc. I have yet to see a decent solution for either of those in NodeJS / server-side JS, and the same is generally true with most other server-side languages as well. A great many (small) websites are owned by people who don't care what the technology is, don't care how well it's written, and don't care how 'cool' the code is- they just want it to work, and they want it as cheap as possible; for them, PHP is invariably the better solution, and is why I seriously doubt JS will completely replace PHP. Yes, it **could** completely replace PHP, but it won't, just as C hasn't been completely replaced by Java or Haskell or XML been completely replaced with JSON.
http://nodejs.org/ - Consider yourself educated
It's not that Angular would break, per se. It's that directives that bind events and/or traverse the DOM via CSS selectors *could* break if the DOM is ever changed. Leaving these things out of your directives reinforces them. Not to mention the directive becomes somewhat more generic/modular/reusable.
My bad. I hadn't considered node; I was thinking of only client side js. Thank you for the education.
Dude, you got to get off the sudo and change npms path in your file system, chmod or some shit, make sure it's in the right bins. Npm recommends this in the docs.
Yeah this comment sums it up. Theoretical there's nothing php does that couldn't be accomplished by nodejs. You can even put an nginx server in front of nodes. But I haven't found a cheap hosting solution comparable to shared php hosting that uses nodejs. Parse is cheap and kind of uses node, but it's a sandbox. Nodejs is still relatively new, there's potential.
It is pretty simple, but coming at it when you don't know the language can be tricky. If I understand correctly you want this to happen: -check a box, string inserts into another element on the page. -unchecked box, remove that string. Ya? If so you are going to need to do two things. One, create an event listener. Two, create a function that inserts the string. Fortunately, these functions are already written! I'd say use jQuery to start with, and if you want you can rewrite to vanilla js after you understand it and have it working. On mobile, so I can't easily link, but google these: - jQuery click event (someone correct me if there is a 'checked' event.. Pretty sure it is click. This will get you set up with subscribing to a user clicking the box. - jQuery id selector Use this to get the element you want the string in. Depending on the element you will use .val() or .html() to insert it. Something like this: $('#myId').val('typing on my phone sucks!'); Hope this helps. EDIT: The entire snippet will look something like this: $('#mycheckbox').on('click', function(){ $('#mytextbox').val('something'); }); This won't account for fetching the string (if it is dynamic) or checking if the check box is true/false, but it should get you started.
Super easy, inexpensive NodeJS hosting... Try Nodejitsu. $ jitsu deploy Done. Entry level plan is like $9/mo.
Thanks, I'll look into that avenue! Oddly, I've found the Angular docs not as helpful as I'd hoped (but at least I'm not the only one ;) The thing I do like about the *defer* is it runs in all jQuery, then hands off to Angular for all Angular, so there's a clear handover/demarcation/line in the sand/etc.
Angular is a framework, knockout is a small library.
I think a follow-up post could be very useful, I'd be interested to read what you come up with.
Hey thanks, with some browsing and a lot of playing with it, I've been able to get roughly what I want. Here it is for anyone who stumbles upon this and wants to know what I was looking for. &lt;html&gt; &lt;head&gt; &lt;script type='text/javascript' src='http://code.jquery.com/jquery-1.6.2.js'&gt;&lt;/script&gt; &lt;script type='text/javascript'&gt;//&lt;![CDATA[ $(window).load(function(){ $('input[type=checkbox]').click(function() { $('textarea').val( $('input[type=checkbox]:checked').map(function() { return $(this).val(); }).toArray().join("\n" ) +'' ); }); });//]]&gt; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;input type="checkbox" value=" test1 "&gt;test1&lt;br&gt; &lt;input type="checkbox" value=" test2 "&gt;test2&lt;br&gt; &lt;input type="checkbox" value=" test3 "&gt;test3&lt;br&gt; &lt;input type="checkbox" value=" test4 "&gt;test4&lt;br&gt; &lt;textarea style="border:1px solid black; width:400px; height:400px;"&gt;&lt;/textarea&gt; &lt;/body&gt; &lt;/html&gt;
Assuming front end JS is the topic - upload a series of files automatically from an FTP server each half hour, resize them to three different sizes, generate random filenames, store on S3 and store filenames in a DB. If we are taking node, then obviously the capabilities will be identical.
Not to mention performance. I've heard people saying 600ms is good performance for an angularJS page load. I thought the whole point of single page applications was fast load times.
You can do what you were talking about--putting the style changes in the controller--but it's bad form. I did the same thing on my first few projects. Working with jQuery got us into bad habits, and good Angular employers would see that as a red flag. Putting DOM manipulation in the controller effectively ties the controller to that particular use case, maybe even that page/route, and the separation will grow. Controllers become untestable without a view, and your controllers become harder to read. DOM manipulation is meant to be in directives only, such as ng-class here. This became clearer for me when I encountered a problem Angular's built-in directives couldn't solve, and I either had to dump a bunch of DOM manipulation into every controller that needed this feature, or write my own directive to neatly pack it away and use it everywhere. Your controller should handle modifying the model which your directive (in this case ng-class) is watching. In the same vein, communicating with the server should be accomplished via a services, rather than directly injecting $http into the controller and performing an $http.get, post, etc., in the controller, bloating it up. This way, saveProject() is still a function on your controller's scope, but the controller remains purely concerned with your model, using a service to perform the data retrieval, and a promise object returned by the service to set your success/fail flags in the model for the directives to pick up on. [This post](http://www.bennadel.com/blog/2612-using-the-http-service-in-angularjs-to-make-ajax-requests.htm) may help see this in action.
Yes, PHP is a terrible language and node is a welcome replacement with a fairly low bar of entry. 
&gt; Even server side? As opposed to... front-end? PHP?
Man, I just wanna say it's really great how helpful fellow programmers are. I've been at it for about a year and posts like yours help out a lot. That makes sense. Thanks a lot!
My pleasure, really. It helps me as much as you. Having to say it out loud, and repeat it, is so important to my learning process, especially when others can add onto or correct my advice.
The first page load will always be slower. It is the consequent ones that are faster.
It is the bubble that makes me cringe. To a javascript developer, it looks like the function will get invoked right there and right then. If it was something like ng-click='somefunc' ng-args='two, $event' I would like it a bit more.
Hi all, just created a javascript template engine, need advice. Thanks.
There is even a better option- utilize promises. Promises are awesome-have a directive like https://github.com/capaj/ng-tools/blob/master/src/promise-class.js With it, you don't even have to specify ng-class, just save the promise from $http call on scope and your element will get appropriate classes when this promise changes state.
That "angular" sample is from runtime so you have way more classes on there than needed. Also, if you need to do that for almost all inputs, why don't you write a simple directive. Then your code would become &lt;blaInput model="bla" requiredText="bla"&gt; The code for that directive would be very minimal. You wouldn't even need a link function, but just a simple template. Or use one of the modules that make displaying messages like that easier, such as ngMessages.
You should have your whole app minified as one file and server should have caching enabled, so ONLY the first load ever will be slower, all other loads will be fast as lighting. Single page app is much much faster when deployed properly.
You're not supposed to parse JSX on page load, you're supposed to do it before during your build process afaik. I haven't used React much yet, so I don't have enough experience to decide which syntax I prefer.
edited to clear things up, there is a web based JSX compiler but it shouldn't be used for production code. I understand that the normal compile is done at deployment but I'd rather not have a step that can be removed. 
Is eliminating one step from deploy process the only reason? IMO it's not much of a reason - you already have a build/compile step, so what would you gain by eliminating this from it? Non noticable speedup in building? I think you should judge JSX vs JS on other merits - does one or the other look cleaner/easier to maintain to you? Do you work with designers? What do they think? P.S. I haven't still done any React, I'm looking to get into it and I'm also on the fence about the whole JSX thing.
Safely doing nothing when I want to log something is an unexpected result, isn't it?
I would argue for most purposes it already has. I can't imagine many people using deeply integrated PHP+HTML in a way that hasn't already been solved better by a node template engine/framework (never mind ruby/python). Plus node gives you much better performance, and JS is flexible enough to let you develop how you please. As far as hosting is concerned: you can't beat free. Stuff like heroku and openshift (among others) have free tiers that are feature complete, but with smaller allocations of ram/disk/CPU. Plus pricing is getting better (cheaper) as time goes on.
Its not just the build step, that's one reason. I feel that the code does not look as clean as the JS version. I don't work with designers so can't get their option I know what JSX was designed to appeal to designers. I feel that the code would look nicer without the HTML syntax. I think that this would be better pushed out to a template file like other JavaScript view solutions. 
I guess it depends on what you mean by "nice". The JSX syntax is less verbose, yet it's very clear. React.DOM.div(..) // JS &lt;div&gt; // JSX
There can be. There are jQuery plugins for it. jQuery is just Javascript, not another language, so anything done using jQuery can be done without any jQuery at all. To be honest, most of the code involved is CSS. Just give any DIV on a webpage an absolute position to the middle of the page, a z-index to place it above things, and you've got a "window" like this. Add another DIV covering the whole page with a transparent black background and you've got the dark overlay.
Watch Pete Hunt's presentation [React: Rethinking best practices](https://www.youtube.com/watch?v=DgVS-zXgMTk) for insight into why react doesn't have templates.
I've also had to search hundreds of Mixed JS and HTML files to find: A: The select function. B: Anywhere that had still called it via onclick. There are usually fewer binds then onclicks. At least with Angular scoping it for us you know its only one place and its closely relates to the bit you are viewing. 
Ahh scoping the function makes it tidier I guess. Thanks for the explanation!
JSX is a port of XHP (in PHP) which was introduced to prevent XSS injections. It was not really designed to appeal designers :)
About extending the String.prototype is optionall, maybe i will remove. Thanks. I know about Coffeescript just a bit, but your code is really WOW, i need to improve the code based on your script. I was try using your code with data as function and didnt work properly str = 'Hello {{one.foo}} world {{two}}' data = one: foo: () -&gt; return 'bar' two: 'foo' output = template str, data alert output 
The problem I have found, is connectivity for enterprise systems (e.g. rare database systems, drivers, etc).
http://phaser.io/ Is a brilliant little engine that uses PixiJS to render. We used it for a project of ours recently and it was a dream.
Highly recommend handling user input yourself and not deferring to built-in functionality. The day I started doing it changed my life.
No. The other option is to avoid being a wrapper around a "native" console object, and consider that one, when present, just as one of the potentially many writer.
Well there you have it, good work
Just wanted to say that youngsteveo and Switche are doing it the right way. It's in general a good idea to: 1. Never change CSS directly in JS, unless absolutely necessary. It's much better to declare classes and switch between those. This will ensure reusability and thus a consistent interface. It will also be much easier to e.g. change the green color later. 2. Always try to avoid changing the DOM directly when using Angular. It is not wrong per se and when you do it, always do it with directives. However, Angular has so much functionality built in to change the DOM for you behind the scenes, that you will very rarely have to do it yourself. 3. If you start learning Angular, don't even include jQuery to begin with. My experience has been that every time I felt like using jQuery, I was trying to do something the wrong way and always found a much smarter way with Angular. You can always use the built-in angular.element but even that is rarely ever needed, except when building custom directives that are, in my experience, also rarely needed.
Not javascript (clojurescript) and not backbone (om), but opensource and a nice case-study for you: http://jackschaedler.github.io/goya/ https://github.com/jackschaedler/goya By the way writing a modal canvas based drawing application is not that complex. Start with a simple finite state machine. Keep it modular/functional (not a giant switch case) in a way that adding tools is easy.
I can't find any sense to your comment, could you explain what you mean? 
Yeah the docs are unfortunately shyte. It's not for lack of documentation, it's that it is hard to navigate and contradicts itself in some places.
Honestly, many of todays JS developers are not really JS developers but jQuery developers. Try asking them how to just select a DOM element without jQuery and you'll probably have a laugh. :) It becomes quite a problem with paradigm shifts like moving from jQuery to Angular. Those of us who learned native JS back in the days before jQuery don't have much trouble moving because we understand the underlying basics of what's going on. 
nice! thanks a lot. Interesting summary about mainly dealing with a FSM. One reason I want to explore this, is to understand functional vs. imperative approaches to making the web browser an editor. I saw the approach in React of discerning between "state" and "props". Is this relevant to make a browser FSM ? 
Totally javascript! I don't quite understand jsx. Since one aim of React is to keep the UI in javascript and not using templates, why bother making the javascript look like templates? Another reason is that I don't like to have to close my components (&lt;div&gt;&lt;/div&gt;). Especially when there is more stuff nested. Btw. React without jsx is even more beautiful with coffee.
I think I can recognize those arguments...oh right, the assembly programmers being uneasy handling control over to the C compiler ^^
I can see where that could be an issue. In that case, would PHP be better supported than Java, Python, or C?
Thank you at last someone else who agrees. 
Or even: var div = React.DOM.div; var li = React.DOM.li; var a = React.DOM.a; At least I saw this in some examples and it really looked nice to me. Although your example does have the advantage of not polluting the scope so much.
If things are slowing down because too many events are firing, you're probably Doing Something Wrong. Given that there isn't an example in this post illustrating the slowdown the OP complains about, I can't really be specific about what he was Doing Wrong. But he was probably naïvely repainting/reflowing the page with every mousemove.
The spread operator is somewhat similar: var s = new Set(["foo", window]); console.log([...s]); // ["foo", window] console.log([...'foo']); // ["f", "o", "o"] var m = new Map([[1, 2], [2, 4], [4, 8]]) console.log([...m]); // [[1, 2], [2, 4], [4, 8]]
Ah, so falling back to other logging avenues (presumably, AJAXing data to the server, since you don't want to show it on the page, and there's no console around). That's perfectly doable, but it's something I've intentionally left out of loglevel until now. Mostly for simplicity: keeping the lib physically small &amp; without dependencies and making AJAX work everywhere isn't going to be fun. The library is currently less than 1KB gzipped, which is quite valuable in itself, and not going to be easy to maintain if I pull in that sort of thing. Also, it's not actually wrapping the console itself, most of the time (for successful logging). If you do actually do any real wrapping, to optionally call console.log or other things (e.g. to make AJAX requests) yourself from functions inside your logging library, then you mess up the stacktrace as every log message appears to come from inside loglevel. That's very annoying, and makes error logging much less useful the vast majority of the time, since you can no longer jump to the source. That's the original reason I made this; there are ways to do console logging without having it break in old IE and friends, but all of them mess up console logging in modern browsers. Loglevel does not.
I have found enterprise systems make heavy use of Java or .Net.
Good to hear you're enjoying it, but I've been burnt in too many ways to trust Sencha products anymore. Most of the bugs I found while working with 4.0/4.1 weren't mere oversights, they were conceptual mistakes belying a lack of understanding of basic concepts (e.g. async -- sure, async is hard if you're not used to it, but if you write a commercial framework in JavaScript, it's essential). If you were refunded for finding bugs, I guess their support has changed. As I said, we raised a single (paid) ticket and the only reply was a foggy "we'll address this in a future update, maybe". ExtJS 4 was meant to be the revolutionary MVC rewrite of the spaghetti mess that was ExtJS 3. That they're now up to version 5 with (apparently) yet another major rewrite (HTML5 isn't something you sprinkle onto an existing code base) raises a red flag for me. To be honest, my biggest gripe is with the amount of bullshit that went into marketing Sencha Architect. It was neither extensible nor did it integrate nicely with any likely existing development workflow. It was a glorified, overpriced prototyping tool and static code generator. I'm not sure whether this still holds, but the point is that throughout the entirety of the year-and-a-half I worked with ExtJS 4 and Sencha Architect (or its predecessor), I kept bumping into problems, incorrect or incomplete documentation, shoddy code, incompatibilities and impotent support. I doubt that any of this would have angered me much if this were an open source project, but we're talking about a commercial product (with very wonky licensing to boot) -- I expect a higher level of quality and service there. If you are starting a greenfield project with no pre-existing API or application logic, ExtJS might be worth a shot. But HTML5 or not, flexibility is hardly the first thing that would come to mind when thinking about ExtJS. Sure, you can churn out a prototype with ExtJS in minutes. That's the point I was making: it's a RAD tool at heart (which is why they're selling a WYSIWYG GUI tool for it). But at least for ExtJS 4 my experience was that 90% of the work is trying to come up with a sane solution for the myriad of "corner cases" that *doesn't* involve monkey-patching the framework. In the end it would probably have taken about as much effort to write something in a smaller framework from scratch as it took us to beat ExtJS into submission. Maybe Sencha has improved and maybe ExtJS 5 really is that much better. But I'm not masochistic enough to find out. EDIT: Maybe I should mention that one of the biggest issues we had to work around was localisation. Apparently ExtJS 5 has it. But going by what the docs show it looks like it's mostly the same localisation ExtJS 4 had already -- which just didn't cut it for our use cases (especially because Sencha Architect was oblivious to that being a feature anybody could ever want).
It's a great time for JavaScript!
That may be true, but appealing to designers is one of their [official selling points](http://facebook.github.io/react/docs/jsx-in-depth.html#why-jsx). And now that I've [given it five minutes](http://facebook.github.io/react/docs/why-react.html#give-it-five-minutes) I think I agree with them. As a front-and-back-end dev I already work with bare HTML all the time. I write my AngularJS templates in plain HTML, I write server-side templates in HTML. I *like* HTML. I've tried Shpaml, Haml, Jade and so on, and I can see why some people prefer them. XML can be very verbose, but JSX only uses a very small, very predictable subset of XML and allows interpolation. It may be relatively easy to visualize a DOM subtree with nested and nicely indented calls to (as /u/moljac024 suggested) `div`, `li`, etc, but for DOMs we are already used to the XML notation. Even our browser dev tools show the rendered DOM in XML notation (to better match the parsed HTML source). Yes, it's a context switch, but no more than writing the `React.DOM` code by hand (which is actually very similar to [JsonML](http://www.jsonml.org/). JSX is just syntactic sugar on top of that DSL -- the DSL is where the context switch happens, not the syntactic sugar that makes it look like XML.
Angular apps are not going to break because you mix in jQuery. It's a completely made-up concern.
When you do: var innerObj = this; innerObj.someProperty1 = 'differet value'; there is no new instance of object, is a reference of the object (both are the same object). If you need a "new instance" of the object you need to clone it. http://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-clone-an-object
The general concept is called a dialog. If the rest of the UI is blocked while the dialog is open, this is called a *modal* dialog. Fading the background out is one way to indicate that the dialog is modal. The specific thing in the screenshot is usually called a lightbox. This is a generic term that goes back to a specific library that used this effect. A lightbox is generally a white modal dialog that contains an image or video (or in rarer cases, an iframe or even just text), frequently with next/previous navigation buttons, and is overlaid on top of a solid black background with some degree of transparency. Technically the JavaScript pop-up dialogs you get from `alert`, `confirm` etc are also called "modal dialogs" (because that's what they are), but generally in web development a "modal dialog" refers to what you're thinking of. The term "pop-up" is also sometimes used instead of "dialog", but it generally refers to what you're thinking of when you said "pop-up advertisement": a separate browser window. There are many libraries that implement modal dialogs, but they're very easy to write from scratch. [I should know, because I wrote one](https://github.com/pluma/jquery.modal). There are also many different lightboxes. If you're using jQuery you shouldn't have any problems finding a suitable plugin.
Would be a lot nicer if all those Array-like things would be actual arrays. (Dart is like that. All List-like things are Lists.)
&gt; ASI: Good or bad? Bad. Don't rely on ASI--just put the semicolons in where necessary. JSHint will tell you where you've messed up.
In my current job we are building a project with SPWA right now. I enjoy working on this product a lot. It permits very responsive user interfaces and generally a better experience. If you don't want to use one of the bigger frameworks (angular, react, backbone) just data binding and tempting I strongly suggest checking out [Rivets.js](http://rivetsjs.com/).
&gt; Kudos Hey thanks for the feedback, maybe here is more comfortable.. http://geolffreym.github.io/syrup.js/
JSX does simplify things but I'd rather not get tied into some extra third-party language. If it can be done in JS, it should be, so it is consistent with the rest of your code. Don't get tied into FB's language, that is what they want :D
&gt;So if you are producing a functional site (not just a content-based one), you may want to consider using a single-page approach instead of the traditional. round-trip template based one. This. 90% of the criticism I see towards pure JS apps centers around public facing, content based apps. Your blog probably shouldn't be an SPA just like your dynamic Kanban app probably shouldn't be built off of HTML forms.
`this` inside a function can have different value according to the way you call the function. It's best explained by example : function MyFunction() { ...code...} myFunction(); // inside myFunction, this == window (or undefined in strict mode) var obj = {myMethod: myFunction}; obj.myMethod(); // Inside myFunction, this == obj myFunction.call(obj); // this == obj The `.call()` method takes the value of `this` as it's first argument. More details [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call) EDIT : by the way, Javascript isn't an easy language : it seems easy because keywords and basic syntax look familiar, but it's very different from typical "school" languages such as PHP, ruby, or even C. EDIT 2 : I wrote a [blog post](http://webdev-snippets.net/differentes-manieres-dappeler-fonction-en-javascript/) on the behaviour of `this` in JS, but it's in french :/ I guess you could google translate it or find a similar blog post in english somewhere else. 
Phaser is nice! Used it once and I plan to use it again
Yeah it was my first Javascript project actually :D Shameless plug. http://www.a10.com/action-games/missilemania
Same here, but different: I convert data (in CSV format) to JSON, flavor it with JS (d3, etc) &amp; html, &amp; pronto, you have interactive data. Works fine for small datasets (up to a few Mb). Added bonus: you can mail charts to other people. 
In JavaScript objects are not like numbers, strings and booleans. The simplest explanation is that objects are mutable and numbers, strings and booleans are immutable. This means that any change to an object will affect all references to that object: var a = {}, b; b = a; a.foo = 1; // b.foo -&gt; 1 this is not the case for numbers, strings and booleans: var a = 1, b; b = a; a = 2; // b -&gt; 1 The way to look at this at a deeper level is that when you assign a object to a variable you assign it a pointer, but when you assign a number/string/boolean its the value you assign.
Yes, we can use CSS, but they told me I should try using JS lol!
History has a similar lesson for us. A very long time ago, car owners were also car mechanics, because cars were so unreliable that if you didn't know how to fix every single thing, you would one day end up out in the middle of nowhere with a broken car and people back then were not exactly passing by all the time; it could be a matter of life or death. These days, cars are so reliable that it's rarely worth knowing how to do much more than change the oil or add coolant. Programming languages are similar. You need to know how the memory model of the language works, but you don't need to know how memory works on the machine. It can be helpful, but it's not absolutely necessary.
What's the advantage of this versus say making a compiler for javascript targeting Arduino?
The npm thing is just part of the toolchain and wouldn't change. And in the end I suspect that this is basically what they are doing; a JavaScript compiler outputting ARM with tools targeting their own ports. 
I've been using this for a while now with a shim and had no troubles
So what is a better way of handling events?
Depends on what you're trying to do. Like I said, without knowing the situation that instigated exploring the throttling approach, I can't comment on precise solutions. Edit: Okay, downvote me and I'll bite. Were you trying to drag an element around? Probably should have it absolutely positioned so it doesn't cause a reflow of the entire page. Were you trying to drag the whole page around? That's probably a bad idea, because you're trying to re-implement what the browser already does for you. Were you doing drag and drop? You probably shouldn't be doing something that would reflow the page onmousemove anyways - think of a more elegant (and user + device + battery friendly) solution. Calculating the 87th fibonacci number? Don't do that. Recalculating the position of every triangle in your webgl game? *don't do that*. Changing the padding on umpteen float elements? *don't do that*. I'm pretty darn serious: what were you trying to do on mousemove that caused the page to reflow/redraw every event emission? Because every UI pattern I can think of off the top of my head that would require a reflow every / throttled mousemove lies squarely in the realm of *you shouldn't be doing that anyways*.
Hi, I did look at it but I wanted bower links and images, that is why created my own website. Still working on the submit form.
Javascript is quite difficult to compile. The Tessel actually uses a Lua VM: https://github.com/tessel/runtime
Related thought: it would be cool if the text editor hid the semicolons (e.g with very dim color) and inserted them automatically (with ASI rules).
Yes, I didn't think of implementing the function feature, as it doesn't take any parameters, you could easily run an immediately invoked function expression (IFFE). In any case, this should work with functions, and I would pass the match and the filter to the function explicitly (instead of using `this`) to have some extra flexibility: template = (str, data) -&gt; re = /\{\{(.+?)(?:\|(\w+))?\}\}/g str.replace re, (_, m, f) -&gt; val = key m, data (filters[f] or (x)-&gt;x) val?(m, f) or val or ''
Seems a bit too much like a convulated childe of Array.prototype.slice.call and Array.prototype.map to me.
Done ! Now you can even submit directives to angular-js.in http://angular-js.in/sample-page/submit-an-angular-js-directive/
If you're a beginner start off with the head first java script series 
/r/LearnJavascript :)
Without any further information no one is going to reply. This is not craigslist. 
I don't think anything justifies the price. It's CPU is weaker than Beaglebone, got only 32MB ram. I understand it's got wifi included, but it's still nothing to the final price. Move along, nothing to see here.
I prefer not to rely on ASI, but it's completely personal preference. _If_ you know what you're doing you won't have any issues at all, and even if you're just beginning, you probably won't run into issues... but I'm used to C syntax (it's [quite popular](http://programmers.stackexchange.com/questions/135544/why-are-several-popular-programming-languages-influenced-by-c)), and it just feels natural that if you use `{` and `}`, then you should also use `;`. But you probably won't run into many problems, at least if you're comfy with the ASI rules. For instance, [Bootstrap uses very few semicolons](http://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.js), and the sky hasn't fallen yet, so I try not to be too dogmatic about it.
it has a more obvious syntax than the slice workaround and by incorporating map it can work in half as many iterations.
Besides the obvious "if you are redrawing every mousemove, you probably shouldn't be doing that," here are some other issues with this solution: Despite using lodash for a fill-in when requestAnimationFrame isn't available, you aren't keeping parity with it: * _.throttle takes an options object, too, that lets you define whether to execute on the leading or trailing edge of the throttle. * _.throttle returns a debounce()'d function, one of whose helpful properties is the cancel() method. * _.throttle actually calls the throttled function with setTimeout, providing it a separate execution context. Recall that setTimeout will execute the parameter function when: the stack is empty, and the specified length of time has elapsed It may actually execute 10,000,000,000ms after the requested elapsed time, if you're doing something stupid. Do realize that for every throttled reference you create, you're calling a method every 1/fps seconds? And there's no way to garbage collect / stop them? In IE11, you're adding a (1/4,000,000) ms cpu tick [frames per second] times every second, for every throttled function you create. You've gone through a lot of trouble to cover up inefficiencies in your code without actually fixing the inefficiencies. And it'll result in battery life being decreased, cpu cycles being used unnecessarily, and when your app slows down to a crawl seven months and seventeen thousand arbitrarily created throttled event handlers later from now you'll pop open chrome dev tools and run a profile and wonder why the hell some random `update` function is using up 10% of the processing time. Or, you know, you could figure out why redrawing the page every mousemove is probably a *bad thing to do.* Maybe you should update the property of some object that tracks the location of the mouse on mousemove, and then use requestAnimationFrame to access that object and actually redraw the screen, but only if it has changed since the last frame? Instead of using this gaping goatse of a memory leak?
Although this sounds like a good thing, I'm going to have to remove it due to Amazon referral links being used, which makes it spam.
isn't this kind of missing the point of RAF, which basically says, browser, draw when you get spare resources while you are doing a repaint anyway. trying to slow it down / run when you want it to may not actually result in this showing anyway because there is no guarantee that the browser will have a repaint scheduled at the time. in any case, using a state within the callback is not very effective, should prolly look into cancelAnimationFrame instead. https://developer.mozilla.org/en-US/docs/Web/API/window.cancelAnimationFrame
ASI trolling is just the best way to start a flame war in any JavaScript community. Probably my one favourite github issues of all time - https://github.com/twbs/bootstrap/issues/3057 - when Crockford called @fat's code `insanely stupid` for not using `;` and for trying to use `!` and various bitwise operators like `~` to avoid using semi colons. For my two cents, I like to write code that reads well and can concatenate with anything that precedes and succeeds it. this means, use `;` - when I run my build through `uglify` etc, it will be optimised for me and shortened. There is literally _nothing_ to gain from missing the semi colons other than saving a few keystrokes/bytes. 
FUD.
My inspiration was https://github.com/madrobby/keymaster, and I'll definitely comb through Keypress. What do you mean when you say 'tsunamis'? I'm imagining [this](http://img.pandawhale.com/post-30966-Jim-Carrey-furiously-typing-on-y8cP.gif). You're right that this isn't germane everywhere; You certainly couldn't play HTML games with this alone. I began building support for multiple/modifier keys into Whisker and it started to feel like a clone of the larger modules we mentioned. I actually like them better for the most part, but I wanted something lighter. Here I tried to make it so minimal that the entire abstraction of Whisker could be held and understood in the mind of a reader at once, and to provide as much freedom as possible. Thank you for your time!
&gt; I don't remember the last time I used == That's kinda my point. &gt;or had to think about the difference between undefined and null The kind of people I'm interviewing don't know there IS a difference. That's why I ask this question.
Tessel took too long to actually launch .. they're wayyyy too late for the party. There are far too many BETTER options that are more powerful, have awesome APIs, and are half the price. tl;dr - Tessel sucks - buy a BeagleBoneBlack or something way cooler like a https://pinocc.io/ :)
I haven't really used frameworks like angular extensively. What i've been doing more recently is building a more regular application using ruby on rails. Leverage the built in pjax implementation to load page requests pretty quickly. Then on top of that I can build part of the app like a single page application.
/r/learnjavascript
Proof?
Proof https://github.com/npm/npm/tree/master/lib
Awesome, I'm trying it out on a project of mine, though I'd rather not have #se-modal in the URL if possible. Keep it up!
pretty much entirely a matter of preference. more importantly: is the rest of your code readable?
Thanks for your submission! Unfortunately, it appears as though it doesn't meet our [guidelines for promition/self-promotion](http://www.reddit.com/r/javascript/wiki/index) and has been removed. If you would like to resubmit, please take the guidelines into consideration. Thanks for your understanding.
If you have ever written a JavaScript parser then you will know that ASI is extremely hard. All you need to know is that every ECMAScript specification says semicolons are **absolutely mandatory** whether they are added by you or by some other means, such as ASI. If ASI is ever screwed up and you are missing semicolons your code **will fail**. Failures like this happen: [bootstrap fail](https://github.com/twbs/bootstrap/issues/3057). It is **always** a good idea to keep stupid avoidable pansy bullshit like this from **breaking your code**. There are also very good reasons to never add semicolons: * Too many characters will cause the code to download soooo slowly that users will bail on your site and all of your business activities will become a laughing failure. * It makes code utterly impossible to read. * Your style and vanity are extremely important, perhaps more important than whether your code works. * It takes so long to type. How can you possibly make time to read Reddit if you have to spend all that time typing out a semicolon?
Not proof--merely a large example of a project making use of it. There is no good reason to rely on ASI.
Use an array literal, not `new Array()`. &gt; new Array(...new Set([3])) [undefined, undefined, undefined] &gt; [...new Set([3])] [3]
See comment to /u/jcready above. Not really something that should require proof in 2014 either. The horse is so old that if you beat it, it will no longer even produce a smell, just dust. 
Rofl. If people are struggling to read your code as it is... Might be best to just listen old crock the first time around.
why?
(Sorry for the previous vitriol: my point was to use getAnimationFrame to do what its meant to do - draw. Having to throttle client event callbacks is a code smell.)
&gt; I am sorry that, instead of educating you, the leaders in this language community have given you lies and fear. That was shameful. I recommend learning how statements in JS are actually terminated (and in which cases they are not terminated), so that you can write code that you find beautiful. \- via [An Open Letter to Javascript Leaders Regarding Semicolons](http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding)
&gt; There is no good reason to rely on ASI. \- via /u/lord2800 &gt; #### The Most Terrible Reason to Put Semicolons Everywhere &gt; "They’re required because ASI is unreliable." Seriously!? &gt; These rules date back to the early days of JavaScript, in the late 90s. They’re not new, and in my opinion there is no excuse for someone calling themselves a professional JavaScripter and not understanding statement termination. \- via [An Open Letter to Javascript Leaders Regarding Semicolons](http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding) 
Proof: [Section 7.9 of ECMA-262](http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf)
Rofl. Guy who can't conceive of things like why lack of semicolon insertion in a language that does semicolon insertion can potentially break even rudimentary things like minification is... That guy I guess! and there is no point in trying to discuss such things with such a person. But yes in many cases you'll get away with writing that oh so 'beautiful' visual Basic esque code (we all want it so so badly. Which brings up the main argument against not using them: if you actually make products... With a team of programmers... You're just annoying the shit out of them if your group isn't already on the ball enough to be running jscs which I doubt even has a setting for dontRequireSemiColons lol, but I guess it's possible). 
The minifier did not have a bug, according to its author. According to the author of JSMin the bug is that bootstrap made a foolish assumption. Regardless, their code failed. More important still they were more concerned with blaming some tool than ensuring their code stopped failing.
There really is no memory leak here since a throttle is meant to wrap a function, that is called many times by user input events, once during the web application's initial bootstrap. Also this "throttle", that dynamically lets through function invocations when the browser's is able to render the changes that are about to happen, doesn't need a time value set by the user. It is not supposed to replace the _.throttle function. I don't understand the battery drain problem here either, the events should do as little as possible which is the point with throttle wrappers: to defer the heavy parts. You could do this with setTimeout, but that is what throttle functions do as well but in a terse way.
Yes, you could use `document.styleSheets` http://www.quirksmode.org/dom/changess.html
The javascript library did not have a bug, according to its author. According to the author of Bootstrap, the bug is that JSMin made a foolish assumption. Regardless, Crockford's minifier failed. More important still, Crockford was more concerned with blaming some open source javascript library (whose javascript worked fine out of the box) than ensuring his tool stopped outputting invalid javascript when minifying it.
What ended up happening when I was testing in a slow computer with Firefox, when doing heavy DOM processing while moving the mouse around, is that the renderer locks up until all queued up event handlers are finished. This can be throttled of course, but I don't want to set a interval value that works even for slower browsers and computers when you have fast browsers as well that can provide a much smoother experience. The question I was posing is, if it is possible to limit the rate of mouse event invocations, in a dynamic fashion. rAF does this. So I wanted a easier throttle function in my web applciation that wraps it up nice and tidy. Thanks for the tip on cancelAnimationFrame. Will update code soon with it instead of using the boolean state. Though I don't know how much of improvement it will make to replace a boolean with a timerid value.
You may also notice that there isn't a jscs setting for `requireSemiColons` either.
Nothing. jQuery is no where near completely replacing the syntax - it provides some very useful features that make it easier for beginners to traverse the DOM and make GET/POST requests. That being said, it also tends to encourage some really really shitty development practices. Larger frameworks such as angular, ember.js, knockout, backbone, etc attempt to completely change the front end development paradigm. They can be good - but they do come with a cost, instead of learning javascript, you're learning a framework - which may or may not be transferable to other frameworks, or vanilla js for that. So that is something to consider too. However at the end of the day, the best vanilla js programmers will make the best programmers for any framework. Learning javascript in and out will _not_ hurt you should you decide to use a framework later down the road. Make sure you have a solid understanding of callbacks and async programming - what it's pitfalls are and how some of them can be mitigated. Learn about promises, they are really handy! One last thing, jQuery and the larger frameworks, because they are designed to always work, they have to take into account lots of edge cases and usually for any given task are not written with efficiency in mind - rather extendability and generalizability. A good demonstration of this is here: http://vanilla-js.com/ Straight up, good old fashion, vanilla javascript is significantly faster and doing almost everything.
Smoothes over inconsistent browser support.
What about something like [CodeAcademy's JavaScript course](http://www.codecademy.com/tracks/javascript)?
If you answer the question somebody will probably be able to help you.
When developing a component using React, it's easier for me to visualise the HTML generated when using JSX. I've limited experience but if I can see HTML like tags, I can work out better in my head what I'm dealing with than just a bunch of JSOs. Depends what way your mind works! I sounds like OP has a total dinger of a beard though! Can we all just sit around and stroke it? 
Many people on Reddit are here to learn. The reason /u/slyf's question has been upvoted is because people are genuinely interested in the answer - if you're doing something clever here, why not share it with the world?
Because otherwise: - you'll have problems with X- browser support - you'll be writing ALOT of code to do trivial things (set a style on all elements with a certain class in the DOM)... 1 line jquery, likely 10 lines vanilla JA - you'll be consistantly frustrated by browser bugs and common traps that libraries have overcome, why re-invent the wheel? - libraries come pre-tested, your code does not The analogy for a JAVA programmer is "why use spring or hibernate, why not just use sql queries and roll my own MVC" 
I agree with the issues about trying to visualise the dom if it's built out of JS. I think after some practice it would become easy to read. Iv not looked to much into the JSX syntax but could see it sticking out of the code like a sore thumb. However no matter which you prefer you will have to deal with the JS version as when debugging the code in the browser you'll always see the complied version 
The be honest not a big fan of coffee script I have been told many times that it's great but no real selling points other than I'll have to learn yet another load of syntax that I'll probably not use.
true. I often do `cond || (foo = bar)` which reads fine to me. 
Yes, but this is JavaScript we're talking about here. Everything is ducks.
That's not the problem here. The problem is that they just fucked this up. Amazingly, even relatively new APIs like QSA got it wrong. Who the fuck wants a NodeList? I can kinda understand that older DOM APIs did all kind of stupid things, but I really don't understand why `arguments` is a pseudo array instead of a real one.
**BEST** way to learn JS. No questions.
I don't agree with the MVC analogy : jQuery is not a framework, it's simply a library, it shouldn't have any influence on the architecture of your code.
Hello, My personal advice is to stop looking for a certain way to learn programming. There is no secret trick "all programming teachers hate", everything comes with facing real programming challenges. Find/create yourself a project to work on. Don't compromise on functionality, have patience with yourself, and face the issues like solving them will make your crush fall in love with you. Best regards. 
I'm not very familiar with these platforms, but don't you need a breadboard and cables to add modules with other platforms? It seems like Tessel is targeted towards software developer that just want to "Insert Climate module into slot C" and have it work. (See animation on https://tessel.io/) At least for me, that would be a big advantage.
IMO, best way to learn is to try things yourself. Find an online tutorial, and don't just read the examples : run them in your browser, change things in the code ("what if I put a string instead of an integer here ? What if I add an argument to this function ? ..."). Also, don't get discouraged by cross-browser issues : it can be very frustrating at times but it gets better with experience. Have fun !
My advice to think about a little project in JavaScript. You have many difficulties because of your limited experience. Overcoming these wil speed up your learning. Its always easier to learn when you have a goal. Completing a book is usually not a strong enough goal for me to remember all the things i have learned. Try to make some JavaScript calculators (like bmi or match making based on names). Or some sweet animations. If you really want to dive in deeply you could try to do some stuff in canvas or something. Just remember: you learn more when you are motivated. You are more motivated when you have strong goals. And most important 'have fun programming'.
This. It's the same syntax. I think generally people confuse syntax and semantics. This irks me. Though I'm unsure if semantics is also the right term for API differences.
Yh i totally agree the best way to learn is little projects that you can obsess over and staying motivated is key.
This is also in the HTML 5.1 draft: http://html5hub.com/html5-picture-element/ http://www.w3.org/html/wg/drafts/html/master/embedded-content.html#the-picture-element
You don't have to do it in two steps. Still slower than a normal function invocation, and still ugly, but you can just: Array.prototype.map.call(arraylike, mapper) 
CodeAcademy is probably a friendly approach. Either way, more playing, less reading. Reading a book like Eloquent Javascript is a great idea, but every few pages, stop and tinker. Read a little bit to get the idea, then play with the new code you have until it starts to sink in, then continue reading.
Again? Do we really have nothing better to do than arguing about this bullshit?
I am not sure I fully understand what you mean. Can you elaborate?
It depends on what you mean with "animations". Are CSS keyframe animations not good enough for your use-case?
TweenLite has TimelineLite (http://api.greensock.com/js/com/greensock/TimelineLite.html) to help you with the more complex animations. With it you can easily sequence your Tweenlite calls so you don't have to chain them with the onComplete function.
This is a more complicated question than you probably think. The way jQuery and most other JS frameworks do animations, is that they frame by frame, adjust the CSS of the element to animate from one state to the other. This is particularly helpful if you need to support older browsers, because the newer CSS options are not supported in older versions of Internet Explorer. With what you are asking, you want CSS animations. There's two options for doing animations in css: 1. [CSS transitions](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Using_CSS_transitions) - this is the easier option, but your control is limited. 2. [CSS Animations](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Using_CSS_animations) - with this you get much more fine grain control, allowing you to perform a series of animations with a single class change via keyframes. With both of these options, if you want to know when the animation has completed, you can listen for events: [transition events](http://stackoverflow.com/questions/2794148/css3-transition-events), and [animation events](http://www.sitepoint.com/css3-animation-javascript-event-handlers/). For both types, the browser support for the events is limited, so you'll need to fallback on using setTimeout in case the event never fires. setTimeout won't be perfectly accurately, so you should add a 100ms or so to the time you set in CSS so that you don't change the element before it's done animating. The control you get with both of these is loose and awkward, which is a big reason why people still prefer JavaScript based animations (the performance gain is also minimal). Eventually, we'll have [Web Animations](http://dev.w3.org/fxtf/web-animations/) which is an elaborate API that will give you the type of fine grained control you get with jQuery, while being native to the browser. Unfortunately, support for this is still limited to [the latest Chrome and Opera](http://caniuse.com/#search=web animations).
Marketing
[x-post /r/node](http://www.reddit.com/r/node/2cbk2l)
Here is my learn programming page: http://learnprogramming.machinesentience.com Its the spirit of teaching yourself that you want. To light the fire of desire, not to pour substance into a container. God speed and may the bits have mercy on your soul. 
I wrote something that may help you: https://github.com/SeanJM/animate The key is having an 'out' class that gets removed when the animation is over. Anyways, check out the github!
I have found that skimming the language reference helps me get a sense of what is possible. Don't read it like a novel... Just pop over now and then and poke around. I learned all kinds of things about making graphics with PHP by just reading the language ref. Good luck!
The correct way to use global variables is to not use global variables.
jQuery is a religion. When you openly question a religion expect confused one-sided answers. jQuery is also an aging religion that, while still having a dedicated flock, is being replaced by more extreme religious cults like MVC: ember, angular, and so forth. Here is the deal (and I will probably be down voted to oblivion for this). The concerns here are rarely technical and are almost always about the behavior of the developer, but they are not going to tell you this. You have to observe it. Experienced developers who are new to developing for the client-side web, particularly JavaScript, have a distrust of JavaScript and a complete loathing fear of the DOM. This is most absolutely true of Java developers who are involuntarily reclassed to front-end development. The reason for this is that Java has a single universal implementation, so you don't have to address cross-browser problems in the Java world. Furthermore, Java is forcefully (until Java 8) OOP and extremely declarative. JavaScript has a C like syntax that look 98% identical to Java and JavaScript allows OOP poly-instantiation like Java, but JavaScript does not have any scope mechanism, such as block scope, that works with OOP. JavaScript has had native lambda expressions since it was born 18 years ago while Java just got these in April of this year. The current scope model of JavaScript is absolutely bound to lambda expressions and functions as first class objects. In JavaScript you can completely ignore the scope model and do silly things like create class looking objects and other Java-esq behavior. You can get by essentially writing Java in JavaScript until your code breaks, at which point your ass is cooked, but you can still work like this. Many people work like this professionally. XML/HTML are not OOP at all. Programming scope rarely applies to markup languages, until you have to do something like use the DOM. Markup languages are purely lambda models and there is no option to bullshit your way through with vanity OOP. The DOM is an expression of this lambda modeling using objects with named properties that allow OOP on the JavaScript side. This means if you are a Java developer and are completely unwilling to learn JavaScript then the DOM is an immediate barrier. jQuery became the shining gospel of religion salvation for many developers converting to the client-side web or people new to development who could not be bothered to learn the DOM at all. It did two things that people needed: * Solved some minor cross browser problems * Introduced query selectors to make DOM access look like CSS code (much faster to write than the wordy DOM methods) Back in 2008/2009 when jQuery exploded in popularity that is all the hand-holding that fresh developers needed, because ASP and JSP were still all the rage. This means that people were just writing code to manipulate a page after the fact, opposed to building the templates along side their jQuery code. Eventually, building an application on two sides of the fence became too labor intensive and costly to manage, so gradually there became a need to move everything plus the kitchen sink to the client-side. I mean EVERYTHING except your security protected database. This transition did not happen immediately and ushered in MVC. For people coming from a Java, or other OOP background, MVC is like a dream come true. You get OOP insanity that looks like Java plus everything happens in one place through a build process. Now you can continue to ignore learning how the web works and be more productive doing it. Ultimately, the web is an extreme [Invented Here](https://en.wikipedia.org/wiki/Invented_here) scenario. Most developers completely lack confidence to do their jobs without using some tool to abstract the technologies they are paid to support. Some of this is from a lack of experience and some of it is from wanting to make the money that comes with the job but not wanting to learn to do the job. Some of it is from people who like to produce fun and interactive products quickly with no care for long term maintenance. People tend to take the path of least resistance, and tools exist to allow them to operate in a certain state of ignorant calm. The most important cliche associated with jQuery is: "jQuery is JavaScript". So is MVC and absolutely everything else on the client-side, so this cliche is self-congratulatory bullshit to try to justify jQuery along side vanilla JS. When people use this what they are really hoping for is: "JavaScript is jQuery".
The image distorted it as I changed the browser size. I'm using Chrome on a MAC. Is that the intended behavior?
Christ what a horrible site. The sole answer: var window.iAmGlobal = "some val"; ...is not even syntactically valid code. 
The caveat is that for the purposes of debugging and inspection, global vars are handy, so I'd say never _read_ from global vars, only pass references.
What PHP-ref have you read, since the first try to have one has been announced just a few days ago?
Programming is about solving problems. Find problems to solve.
What do global variables give you that breakpoints &amp; console.logs don't?
When all of your state is well localized. .. nothing. 
If you program JavaScript a lot you will wind up using abstractions that you are comfortable with. In my own coding, I found that there was quite a lot of boilerplate in some areas and I created abstractions that mean less boilerplate is needed. jQuery is something that I use when I want to do two things in combination: select 1 or more DOM nodes using CSS selector syntax, and then do some things to those DOM nodes. Still, when using jQuery for some more advanced things it's necessary to know JavaScript, particularly when writing event handlers. Regarding what's wrong with plain JavaScript, there are a few things, but a lot of it is subjective opinion. I didn't like writing '.prototype' so many times so I use a Class abstraction that means I don't need to and provides more OO capabilities. I use another abstraction that makes functions polymorphic. If you write a few jQuery plugins you'll get a better understanding of what happens under the surface. Just don't expect to be able to code any application UI component as a jQuery plugin, to get started with you should choose something that's obviously achievable, and maybe not that useful, like a .disco effect that makes an element change between background colors.
+1
So it basically depends by how good you want to be as a programmer. My point still stands.
Well. I'm fairly confident all of the large scale templates from jquery, Google, etc will __definitely__tell you, you missed a semicolon because that'd be handled by jshint under the hood. In fact, you'd have to work around the tool itself to stop it if there is no option to turn it off. 
I attempted something similar a while ago, but people kept telling me, that it's bad to have a .then on something that can occur more than once, since it breaks our intuition about promises. So I am curious about the opinions this time around.
Thats a blog's address I am maintaining.
I don't have any problems with the server side by using Tornado, which is easy to use. The plan is using Firefox and Chrome only. I did this before and initiating a connection by the client isn't a problem in my case. The challenge is, I have to design a protocol as a new layer which is communication with Tornado to make sure * the connection is up * sending modified data back to the server isn't already modified by another client. * Displaying messages like a event log 
It's my fault not mentioning that I want to use javascript in a browser
socket.io works fine in a browser. also you're not being clear at all about what you're looking for. you should add some more details about your implementation needs if you're looking for such specific answers.
God, I hate jquery plugins. So much good code out there bolted onto the bloated kitchen sink. Its a tragedy of our times.
Well on send/receive (or recieve/send) you have some data structures. It can be binary or textual like json. Probably go with json objects unless you find you have to optimize. I don't know what is already out there but the basics are: 1. you will get an error if the connection drops. 2. the json object will need to have an identifier, so the server can mark it as dirty, or do a deep compare, and handle concurrent modifications with a first in wins scenario (i.e. message and refresh/merge option). There are lots of other options here, but if you don't anticipate a lot of concurrency then this will probably suffice. 3. the client router will need to examine the incoming messages to see if it looks like a server event message.
&gt; **NOT OK:** Submitting only links to your blog or personal website.
Yeah, I'm starting to get annoyed by that too. Got that queued for my next release. Not sure how exactly I'll implement it, though. It's nice to have that as an &lt;a&gt; tag without href can have unusual behavior. For example, usually it doesn't give you the "pointer" cursor but the default arrow, and sometimes it doesn't pick up the same styling as the rest of the links on the page. I think I'll set it as an opt out feature.
Cheers.
I would agree with what you've been told. In my own opinion I don't think promises should be thought of as a replacement for callbacks in all cases. Multiple 'problems', multiple solutions. If we want to address the 'problem' of handling events, I would prefer an FRP approach, like one made possible by [RxJS](https://github.com/Reactive-Extensions/RxJS). Functional Programming patterns are being used more and more in JavaScript, and with (in my own opinion) good reason. I think handling events in an FRP way is an improvement of the other patterns I've seen (though I'm not saying RxJS is the only way to do this, this is an example) and were I to start building a JavaScript project from scratch in the near future would almost certainly use this pattern myself. All that said, this is my own opinion, and I expect there are plenty of well reasoned opinions to the contrary. I think it can be dangerous to avoid otherwise sensible solutions (i.e. code that would actually be very readable in a project) for reasons like "it ruins our intuition about xxx....". At some point, the bottom line matters more. Maintainable code that works is the goal. Getting lost in details can be hazardous.
I updated it to pass the event down through to the listener callback.
What are you doing while reading the book? If the answer is 'nothing', then you have your problem right there. Tutorials aren't just meant to be read, they're meant to actually be done (especially if you have no previous programming background). This is why I recommend online text-based tutorials over books, you can copy+paste code from them and watch it work. Moreover, I recommend that every time you finish a tutorial, try modifying the code involved to do something slightly different that the tutorial didn't mention. That forces you to think about the meaning of the code and helps you retain what you've learned. Eventually you'll be ready to start projects of your own, which is an even better way to learn when the time comes. However, always keep the documentation handy, and don't be afraid to go for help online when you get really stuck.
This is what you need if you want to create sophisticated animations. Greensock offers the best animation libs I've seen and it's always in 60 fps buttery smooth sexyness. CSS is so extremely limited when it comes to animations, since there's no logic involved, that you can only use it for simple hover effects and the like.
Honestly, don't write your own animation code. That time is over. [Use GreenSock.](http://www.greensock.com/why-gsap/)
You shouldn't use jQuery. It's a carryover from the IE6 days, when DOM/Ajax stuff was almost impossible to productively implement cross-browser. Use libraries tailored to your application's goals.
Eloquent JavaScript. Its an online book with tutorials. The second edition was just released. Its free too.
What exactly are you trying to do?
[What is the XY problem?](http://meta.stackexchange.com/a/66378)
Same semantics. A language has a syntax and semantics. No library / framework will change this.
There's another issue that you overlooked. Events can have multiple arguments. Promises can not. EventEmitter.emit relays all arguments passed to it after the event name to the bound listeners.
&gt; "oh, you don't really need to remove !important -- you just want to do X, it's easy, here" But situations like that are almost always the norm. People ask for help because they are naïve to the solution on their own, right? I think you're just afraid of looking bad by getting real help, which, in reality, looks worse than receiving said help.
They *are* bidirectional. Data can be freely passed in either direction. They are not symmetric.
I think you may have misunderstood the use-case here. The author is not using promises as event handlers. Instead, he is using promises to handle the asynchronous 'result' of event handlers. That being said, you are quite right in that if there are multiple event handlers for a given event, the promise approach will fail. The author's event emitter code should return the result of `Promise.map`ing the array of event handlers instead of a potentially naive call to `Promise.pomisifyAll` on an EventEmitter. Holy jargon dump, Batman.
Why default to JavaScript and then fall back to CSS why the other way around?
It is a question of semantics, and that statement doesn't really clear anything up. creating a socket requires a direction, websockets only allow one direction (well, nat/firewalls/etc make it challenging too), so the term bidirectional can be misleading if you are new to websockets. Indeed they are called "symmetrical" once the connection is established, which only buries the point I'm trying to make further. http://docs.oracle.com/javaee/7/tutorial/doc/websocket001.htm
On mobile so I didn't see right away, what are the books (for reference)?
Oops, I read "with jQuery and Tweenlite" (In what world wouldn't you). I think it's still a good answer indeed.
Head First JavaScript Programming is a good beginners book. 
&gt; instead of learning javascript, you're learning a framework these things aren't mutually exclusive
You can use AniJS (http://anijs.github.io/) pretty simple. Also you can test your animation in real time using AniJS Studio(http://anijs.github.io/studio/) .Enjoy it :)
I can't stress this enough. If you have anything more than simple transition between two states (e.g., a button hover effect) don't even try it with jQuery or CSS animations. Just use Greensock and you'll spare yourself many headaches.
At least we are able to treat a NodeList like an array, but I do agree that these array-like things should be actual arrays. Or better yet, with generics we could do Array&lt;Node&gt;. I wish I understood the mentality behind Mozilla and whoever else is guiding the ecmascript standard.
When you try to submit it, and it tells you that it's already been submitted, you usually don't want to re-submit especially if it was [posted just 4 days ago](http://www.reddit.com/r/javascript/comments/2cb4rn/jquery_tutorial_for_javascript_developers/). 
&gt; For both types, the browser support for the events is limited, so you'll need to fallback on using setTimeout I don't think you elaborated on that point enough :). That scenario is SO unbelievably shitty in practice that as someone who has been there I cannot recommend going down that route. If your use case requires interactivity or timed events, use javascript. CSS is great for simple things like spinners and hover effects. Luckily, the paint time will be the same regardless if you're using javascript or CSS.
JavaScript animation is actually more performant than CSS animation in most cases. Velocity uses a different (and better) method of animating DOM objects than jQuery's animate function. Check out this article going over the differences between jQuery animate, CSS transitions, and Velocity (JavaScript animation). http://davidwalsh.name/css-js-animation
Cool thanks! I've always just hated the word 'tween', it sounds like an illegal type of porn. I'll have to get over that
Ha. I'm not even sure I've heard that connotation. Greensock/TweenLite go waaaay back to the Flash days where Flash had this neat feature of filling inbe*tween* keyframes you supplied.
&gt; At least we are able to treat a NodeList like an array Well, you can use [] to access elements at a specific index and there is a length property, but you can't use Array methods like forEach, map, and filter. &gt; typeof document.querySelectorAll('.md').map "undefined" &gt; typeof [].slice.call(document.querySelectorAll('.md'), 0).map // yuck! "function" &gt; typeof [...document.querySelectorAll('.md')].map "function" &gt; [...document.querySelectorAll('.md')].map(x =&gt; x.childNodes.length) [62, 1, 4, 1, 2, 6, 1, 2, 1]
Listing out the circular dependency cycle path is a really nice touch!
Unfortunately if you need accuracy of execution (doing motion tracking with canvas overlay for instance where the canvas animation needs to be frame synced with the video) greenSock or any other lib out there simply will not cut it. You'll have to roll your own, and believe me...it's a bitch.
&gt; Which is kind of patronizing, don't you think? Get your ego out of the way when problem solving, tons of different viewpoints exist for problems and it is totally normal that ideas you might not have thought of might come up. There is very rarely one correct answer, and if your answer is not possible or odd to implement, you might consider other options. The goal should be to solve the problem.
Even if you only plan to support evergreen browsers, jQuery can significantly reduce the amount of code you need. Sure, there's not much difference with some of the simple stuff like `$` / `querySelectorAll`, but if you wanted to deep extend an object, you're looking at doing: var deepExtend = function(out) { out = out || {}; for (var i = 1; i &lt; arguments.length; i++) { var obj = arguments[i]; if (!obj) continue; for (var key in obj) { if (obj.hasOwnProperty(key)) { if (typeof obj[key] === 'object') deepExtend(out[key], obj[key]); else out[key] = obj[key]; } } } return out; }; deepExtend({}, objA, objB); whereas jQuery can simplify this to: `$.extend(true, {}, objA, objB);` There are cases where avoiding adding a dependency is worth the additional effort , but in many cases using a library such as jQuery will save you a lot of time.
&gt; Greensock I don't see a single link on that blog to a github page or code download. 
RxJS seems like a huge all or nothing framework if you simply want better callback handling
"Get gasp" in the upper left.
I disagree. It is a great way to get a general overview, and learn syntax, but there is *no substitute for working on an actual project!*. I agree that it is a good starting point, but I strongly disagree that it is the best JavaScript resource out there, unless all you are trying to do is be able to answer some multiple choice questions correctly. If you want an actual usable knowledge of JavaScript you have to *use* JavaScript, not just roll through some tutorials with your hand held the whole way.
Thanks, I've taken care of it.
As others have said, there are better ways, but I will say that you're forgetting about *setInterval*. Instead of chaining *setTimeout*s together, you could just maintain state in a closure or param and step the motion using a setInterval.
Pretty sure tween dates back to drawn cel animation.
You can use [Autobahn](http://autobahn.ws/). It's a great library for websockets. I've used it to build an application to show ingame kills and such in the webbrowser at LAN parties. Pretty easy to use. It also has a backend lib in Python. :)
Take note of the difference between callbacks and event(listeners). A callback fires only once but an event handler can fire multiple times. Promises resolve to a single value so work as abstraction on callbacks but not for events. Event are usually best abstracted as streams. See RxJS, Bacon.js and Highland.js. You could Promise for a single event, like onload or ondata but it'd be abuse to resolve a single Promise multiple times (it doesn't make sense and breaks the whole concept of a Promise). You could make a stream of promises but then you're really deep into funkytown. Better just stream the events directly.
&gt; Another legitimate case is when you need to know which browsers, os and devices are most frequently used by users of your site. Then you may want to send the data obtained via Sniffer to the server for further processing. User-Agent is sent as part of the HTTP request header; it is probably unnecessary to send it explicitly. 
I assume people are downvoting you because its new and/or it requires jQuery(for now) If you know jQuery and its .animate() function. using velocity has almost NO learning curve. I've been using it for a few weeks now, and I thouroughly enjoy its simplicity (and speed). I Also use GSAP (greensock) and while its good, I dont find it even near as easy to use as Velocity. GSAP does have more features though, but velocities built in animations are superb. I only use GSAP in canvas
Not completely clear, but it sounds like you're talking about UI changes in response to constant device input. I honestly find that case easier to custom-roll, but I might still use GreenSock as a part of my implementation, depending on my approach.
Can you explain the purpose for this framework? In other words, what does this provide me that another, time-tested MVC library with community involvement won't? Also, am I not seeing them, or are there really no unit-tests? In the nicest way possible, not providing a suite of unit tests for a framework this size is insane.
Why does it seem that everyday there are twenty new JS libs for a problem that's already been solved? This is not a criticism of Syrup. I just don't get it...
Playing devil's advocate, here. For the watcher problem, I believe Angular added ngBindOnce or something similar in 1.3 (I haven't personally upgraded yet). It allows you to bind on the first $digest cycle, but never creates a watcher. For most applications, every single {{}} tag in the template doesn't need 2-way binding. This solves for that use-case. In regards to cancelling an ajax request....ok, that's ridiculous :) 
*GSAP :)
Wrong. Here's a big ole' list of browser bugs jQuery addresses, many of which are present in modern browsers: https://gist.github.com/rwaldron/8720084#file-reasons-md. Not to say that other frameworks/toolsets besides jQuery don't patch those issues as well, but it's valuable to be aware of it.
Oh wow, hard to notice that button, very web 1.5 looking and almost looks like an advertisement.
I'm aware of the benefits of promises, I am just stating that switching to RxJS for this seems overkill.
I've seen that list, and consider those issues either irrelevant or having very low significance, particularly in IE8+. Most of the counter-arguments have been from current or former heavy jQuery contributors, which are obviously biased. Personally, I haven't run into *any* problems since dropping jQuery (while forcing the rest of the company to do so) and going native DOM entirely (with some ultralight helper functions) around 2011. I say "around 2011" because it's been so long, I don't exactly remember!
Why shouldn't I rely on ASI if it's reliable?
You said not to rely on ASI. I said you were spreading Fear, Uncertainty, and Doubt. You asked me to prove that you were spreading FUD. I provided a link to the specification describing the ASI rules that all Javascript parsers must follow to conform to the spec. Thus proving that ASI **is** reliable and consequently that you were in fact spreading FUD by telling people not to rely on ASI despite its proven reliability.
Cool, I'll tell my boss that!
Could we possibly sticky a link to /r/learnjavascript? Or maybe have a CSS rule asking if a question would be better off being posted there? Would love to increase traffic for them, as this question has been asked a lot over the past few months.
When I just want to challenge myself and stay sharp, I go to codewars.com
The unit test and skull is in development, a lot of improvements too .. its a young framework.. Contribute
Ah autocorrect, you just never know where I'm going, do you?
Wups hokay
Hi, I'm one of the Cesium devs; thanks for the bug report and compliment. It looks like a couple of the sample files didn't get updated for 1.0. I'll get it fixed soon. To answer your questions; yes; you have complete control of time (and everything else) with or without the GUI via the JavaScript API. We had a twitter demo at one point doing just that. We have a bare-bones no GUI widget as well as the ability to selectively turn on/off the default widgets. It's all highly customizable. Yes. While Cesium itself doesn't know specifically about country shapes you can load polygons/lines via external data and then style them as you see fit. Here's a demo (with code) that loads states in the US and randomly colors them as well as extrudes the states shape based on population: http://cesiumjs.org/Cesium/Apps/Sandcastle/index.html?src=GeoJSON%20and%20TopoJSON.html (Hit the "Custom Graphics" button) This is done with a simple TopoJSON file. There's also a bunch of other demos you can get to from that link. We have a ton of features planned now that 1.0 is out the door.
If you're willing to get your hands dirty, take a look at [D3](http://d3js.org). It's a little complicated, but it will let you do anything you could possibly want to do.
That sounds like the best route. Thanks for the advice.
Check out [nvd3.js](http://nvd3.org/). It is a library built on D3 and makes it crazy easy to make interactive graphs. I used it on a project and loved it. 
I have updated code, check out here http://jsfiddle.net/7345h/1/
You only use script tags if you're inside of an HTML file. Notice the `JavaScript` in the top right hand corner of that window.
You just need to return false at the end of your onclick. It would also be nice to see how many free emails I have left for the month.
Maybe Chris has figured it out. We worked with Chris to get motion tracking data for http://www.thefwa.com/site/deja-view He was using jquery and greensock and some other libs. I ended up rolling from scratch to get the sync right and just using his json motion tracking data. idk if it's ~80 lines of code vs 6.5k or whatever greensock is, the choice is fairly obvious. From what I've seen there isn't a framework out there that is millisecond/sub-millisecond accurate. Nor is there an implementation of the HTML5 video player that actually has an accurate currentTime property (needs to be calculated in based on inferred start time) To be honest, greenSock was overkill for what we were doing anyway which was extremely specific. I'm sure it's great for all sorts of other stuff. 
Your question is too simple. What kind of confirm message - any, jQuery dialog (nonblocking), or the native confirm method (blocking)? And what kind of image - adding a new element, showing a hidden one, opening one on a different page?
AutobahnJS implements automatic reconnection with exponential, randomized backoff. The upcoming release will also support a HTTP-Longpoll based fallback for old browsers (IE&lt;10, Android &lt;4.4). AutobahnJS is part of the Autobahn project (http://autobahn.ws) which provides WebSocket and WAMP implementations is multiple languages - including Python. WAMP (http://wamp.ws) is a WebSocket based subprotocol that provides you with high-level communication for your app (remote procedure calls + publish &amp; subscribe). Nowerdays, WAMP can also run over other transports as well.
The term "bidirectional messaging" is clearly defined: both peers can initiate sending of a message. The establishement of a WebSocket connection is not symmetric: a client initiates the connection to a server (which is how TCP works). After that, the connection is symmetric and messaging bidirectional. NATs are not an issue with WebSocket. Firewalls, proxies and other intermediaries _can_ be an issue. However, you can use secure WebSocket (WSS) which runs over TLS, and hence no intermediaries can interfere (exception being man-in-the-middle TLS interceptors).
last curly brace doesn't match, you dont need script tags in JSFiddle, just script (thats what the script pane is for)
Yes. 
I think most promise libraries use events internally, so using a promise lib on an event handler seems like an anti pattern. Streams are also just events, but I guess you could stream promises but it makes more sense for streams to return promises. I don't fucking know what I'm talking about thou :P
Can't parse CSV afaik but as far as charting goes it just does an awesome job: [Google Charts](https://developers.google.com/chart/interactive/docs/gallery) (notice: it's a pure JS lib and doesn't transfer your data back to their servers). Recently wrote a Ruby Gem that makes its use for non-JS-devs in Rails/Sinatra/etc easier: [Swagchart](https://github.com/pachacamac/swagchart).
Going to second this. You can do whatever parsing/transforming you need to in JS yourself. Charts.js is a lot easier to work with than D3.
&gt; Honestly, don't write your own DOM manipulation code. That time is over. Use jQuery. Leave dogmas and perfect solutions out of the door.
Man, Sokoban was my crack when I was 10 or 11. Good times.
Thank you really appreciate it
hey again! haha thanks for the info yesterday about localStorage/sessionStorage...but I realized after that I was only being sent the first object of the list. The info is correct on each item, but when I click it alerts the top item as I mentioned. I'll look into event.target, thank you, also do I need to be passing something through my onClick="someFunc()" ?
Check out [document.caretPositionFromPoint](https://developer.mozilla.org/en-US/docs/Web/API/document.caretPositionFromPoint). Starting from that information, you can build the rest. It is still not very well supported, but maybe well enough for your target.
I'd also say it'd make it a lot easier if there were multiple viewable targets...but its one template and I can't understand how it know which one is the one thats clicked.
In the DDR there was mostly just one car available: the Trabant. After the opening of the Berlin Wall in 1989 a huge number of cars, all solving the same solved problem, became available on the market.
The proper way to animate with javascript (or any other language) is to implement a set of interpolation functions, a data structure to store the running animations' metadata, and an update/render loop that takes the delta time for each running animation, interpolates its value, and apply it back to the entity/property being animated. The completion event is thus trivial to implement (just check if the delta time of the animation is greater than its duration). 
Haters gonna hate. What you wrote is almost perfect.
Do it. Usually the "boss" cares about the net profit. Supporting dead browsers (than even microsoft says it is time to let rust in peace) is not very cost effective. By the way I didn't suggest to kill the support, but to avoid dumbing down the code for modern browsers just to support old IEs. Polyfills exists.
Maybe killing support is a way to push your userbase (and the rest of the world) forward?
First, codecademy offers projects, second, It's to LEARN JS, not master it.
A userscript is just some JavaScript that is injected into the page. With a couple of exceptions(*), it can do whatever a script running on that page could have done, and no more. (*) The exceptions depend on a number of factors. For one thing, there are different implementations of userscripts for various browsers. Firefox has the Greasemonkey extension, Chrome has Tampermonkey (plus the ability to convert userscripts to Chrome extensions directly, I think), Safari has NinjaKit, Opera has a directory where you can just chuck some .js files and they'll run. Greasemonkey was, I believe, the first, and it offered a special set of APIs that userscripts had access to, like `GM_setValue()` and `GM_getValue()` for persisting values across sessions. At the time it came out, this was novel, but today we'd just use HTML5 local storage. But there was one that had significant ramifications: `GM_xmlhttpRequest()` allows making `XMLHttpRequest` calls across origins, which is normally forbidden. Userscripts that use this can make interesting mashups that combine data from different sites, which is something that's not necessarily possible in vanilla JS due to the browser's same origin policy. When the userscript extensions were ported to other browsers, these `GM_*` APIs were not always implemented. Sometimes they only copied the ones that could be implemented easily without special privileges, like mapping `GM_{get,set}Value` onto `localStorage`. Anyway, my point here is that if you're writing a userscript that has to work across different browsers, you will generally have to stick to doing only those things that fall into the normal security model. Userscripts are not generally used for regression testing or anything like that. With a userscript you'd still have to load the browser and navigate to the page, and you want your testsuite to be completely automated. For automated testsuites for front-end code, you'd probably use something like PhantomJS with Node.js, or Selenium if you need testing in a real browser. The primary use of userscripts is to address cosmetic issues, and to add missing functionality.
I dont know either. What you say makes no sense at all.
I agree that for this particular case you should use transitionend. If you want this to work in older browsers then interpolation of values is the way to go. You also could look at the source code for jQuery animate as well as animation microframeworks.
Can you post a gist or jsfiddle with your code as it is, event handler functions get an event argument passed in. this event argument has a target property which refers to the element that was clicked.
The only way to have a somewhat private anything in Javascript is to not expose anything on the global scope by declaring your entire app in an anonymous function. I personally like this pattern: (function() { // make sure nothing leaks to global scope 'use strict' var MyApp = { initialize: function() { /* ... */ }, doStuff: function() { /* ... */ }, someVar: 'YOLO' }; MyApp.initialize(); })(); // undefined console.log(MyApp); You may still want to implement getters and setters to shim Object.observable, implement computed properties or defend against problems with passing objects by reference but the concept of privacy does not apply to a language where your getter and setter methods or entire objects can be overridden at runtime.
Unit tests should cover only the code unit you are testing. So if your method should be calling $('#foo').text('bar'), you only need to make sure $.fn.text got called on $('#foo') scope with a 'bar' argument. We use http://sinonjs.org/ to stub methods from another code units. I am personally not a big fan of 100% javascript unit test coverage. Most applications would be fine with integration testing of typical user journeys and some unit tests for the not so straightforward controller methods.
This past January I decided to learn JavaScript. I had no programming/web dev experience, no computer science background either. I was literally asking the same questions you're asking here 7 months ago. I'm not going to say it gets easier because it doesn't. I will say this, everything you're having trouble with now, is going to be easy peezy in a few months. The reason I say it doesn't get easier is because the more I learn about JavaScript and programming, the more I learn how much I don't know. I can see why companies are searching for people with years of experience, this isn't something you learn over night. I'm going to give you advice that I wish someone had given me months ago. I'll start with my journey with JavaScript. First thing I did was sign up with Lynda.com, this is a great site but I don't recommend it for JavaScript. Keep it in mind though, it may be useful later on. After lynda I came across /r/learnjavascript. They recommend the learnjavascriptproperly roadmap. I'm typing this on my phone, but you should head over to that subreddit after reading this. The roadmap recommends doing the html/css/javascript tracks on codecademy. From there it recommends reading material and a project building a simple quiz application. This will help you learn JavaScript in a practical way. I did the roadmap the first time but it was difficult and I sidetracked a lot. I subscribed to teamtreehouse and codeshool. I completed evey javascript track from both sites. Teamtreehouse imo is a waste of time and codeschool is challenging for a beginner and I don't find their example problems very clear. I will admit, I learned how closures worked from Codeschool. I also subscribed to tuts+ which I found excellent and I highly recommend. My advice is this, fuck Jquery. Don't even touch it. Don't look at it, just avoid it. I don't mean permanently, just until you learn JavaScript the language. I made little goals for myself with a few projects. I wanted to learn how to manipulate DOM so I made a very simple todo app http://n4sa.github.io/TodoList/, a blackjack game http://n4sa.github.io/blackjack/. This cemented some basic DOM manipulation. I was feeling more confident with JavaScript. Around this time I had started hanging out in an IRC channel which I still live in daily. http://webchat.freenode.net/?channels=learnjavascript. This IRC was game changing. It started out small but has grown, there's a lot of smart people who hang out in there. People that are passionate about JavaScript and web development. One guy Jarofghosts, made an irc bot with node and encourages people to build plugins for the bot, a great way to mess with nodejs. If there's any advice of mine that I value the most it's this. Jump in this irc everyday. Ask questions, don't be afraid. I made a github and started working on stuff, i push it all to github, and constantly challenge myself. I started doing codewars, www.codewars.com, it presents challenges called katas that other members have made. These are basically programming problems, if you've heard of project euler, it's the same idea except for JavaScript/Ruby. I've done over 100 katas and am now 4kyu rank. I've progressed a lit in the past 7 months but I still suck! And I'm ok with it. As long as you learn something new everyay you will ge better and things will stick. I was stuck on closures for so long it felt like. I just got over recursion, and am now really diving into nodejs. I hope this helps, if you have any questions you can find me or someon lse in http://webchat.freenode.net/?channels=learnjavascript who will be more than glad to help because everyone's been where you are and there's many people in there that are currently in your shoes looking for the same answers. Also sorry for any grammer errors, I typed this out on my ifun (iphone)
No Starch Press also has other good JS-related titles. Object Oriented JavaScript, for one, is a fantastic read that filled in a lot of the gaps I had about objects and prototypes in the language. Check it out here: http://www.nostarch.com/oojs They're an independent publisher and because of that their writers receive much better compensation. If you can afford it, both books are worth purchasing.
I bought a real copy of the first edition, it's really good for moving beyond the copy-paste-jquery-examples stage.
Is there a downloadable version?
There's nothing wrong with plain JavaScript, unless you need to support IE 7 and earlier. Occasionally you'll run into some cross-browser issue, but you can generally find a workaround or shim for that specific problem; it's not worth burdening everyone with a jQuery download just to avoid the occasional bit of testing and debugging and a hundred byte shim. Then there's the horrendous performance penality of jQuery. Check out [http://vanilla-js.com/](http://vanilla-js.com/) for more snark on that topic. Honestly, jQuery was a good thing in 1999. In 2014, it's unnecessary, thank goodness. With more and more people using the web via mobile devices, the jQuery overhead is significant.
Absolutely. I'd say learn programming first via [Scheme](http://www.amazon.com/The-Little-Schemer-4th-Edition/dp/0262560992) or [Ruby](http://ruby.learncodethehardway.org/book/), then go back and learn JavaScript. Though actually, "JavaScript, The Good Parts" is a pretty tough read even with a computer science background. Good book, but extremely terse. Expect to take half an hour to understand some of the pages...
If you think scratching the surface is learning, then fine. Looks like we just have a difference of opinion here. Again, I'm not saying codecademy is a bad resource. It is a great resource *to get you started*. I think our perspective of learning is just a bit different. But who knows, my perspective could be skewed. I already had a few years of experience with JavaScript when I went through the entire JavaScript course on codecademy. I just found it lacking depth. Which makes sense since it is for absolute beginners. However, programming isn't all about for loops and while loops, it is about breaking down complex real world problems and creating solutions for those problems. To truly get a feel for programming, you need to work on something on your own. Something that is going to challenge you and make you ask questions that might just not pop up while you are being led down a happy path of learning that codecademy supplies. Again this is like my opinion, man (The dude voice).
Yes, there is, but it's paid: http://www.nostarch.com/ejs2
Adding a new keyword to a language is very, very difficult. When you make something a keyword, that means it's off limits for use as an identifier, which means that any code that existed before the change and which happened to use that identifier is broken. People tend to get upset when a new version of something breaks existing code, and you don't want to do that unless you have a very good reason. Therefore, it makes some amount of sense to reserve a bunch of keywords from day one, so that no code could ever use them for identifiers, even if you don't have a use for them yet. This makes it possible to painlessly expand the language in the future without worrying about breaking anybody's code. 
I have been suggestion JS as a first language only because the tools to play with it are so accessible. 
I created a test framework based on PhantomJS to simulate user interaction and test for (DOM) properties like visibility, class names, etc. In my opinion it is an absolute necessity in addition to JavaScript unit tests. 
Oxymoron
Thanks!
This demo app is based on [tracking.js](http://trackingjs.com/) and [gif.js](http://jnordberg.github.io/gif.js/). Both worth checking out! For more details you can check out [my video introduction](https://www.youtube.com/watch?v=bC7uALxKDg8) to this project.
&gt; In my opinion it is an absolute necessity in addition to JavaScript unit tests. Can you elaborate? 
But seriously, I think promises use some sort of event-like system to notify when the callbacks are finished.
Pretty good book. I've read it to enrich my JS knowledge and I recommended it for anyone that want to know the language or even start with programming.
Honestly, if performance is that big a deal, you probably shouldn't be adding [the overhead of jQuery](http://vanilla-js.com/) to start with.
Whoa that's incredibly smooth! Thanks for the link! 
Because it's a crutch at best, and something that hobbles you at worst.
I love pointing out exactly this when people tell me every C programs can be compiled in C++. Because C++ added new keywords, it can't be backward compatible. int new = 0; The same would be true if Javascript didn't reserve "extends" and "class", for example, for ES6.
many thanks, didn't hear about this method before, will definitely take a look.
Yup, must read indeed.
More FUD.
Although this sounds like a good thing, I'm going to have to remove it due to Amazon referral links being used, which makes it spam.
Sorry, I didn't know about that rule. I'll make sure not to refer any future blogs posts that contain referral links. I'm surprised it matters for external links (I could see why it would be frowned upon to include referral links for posts/comments made within this subreddit). I really just wanted to bring some attention to the series, after seeing a tweet from the author last night (asking for people who've read the book, to post some reviews).
 var OBJ = { PROP1: 5, PROP2: 'str' }; Object.freeze(OBJ); Why `var` here after you just got done telling us we should be declaring our constants `const`? :P Otherwise, good post! Out of curiosity, do attempts to modify a frozen object cause exceptions, or do they simply not do anything?
Reserved for future, you never knew what will happen in ECMAScript 2020, 3000, ...I've been to the year 3000. Not much has changed but they lived under water. 
Garbage in, garbage out? Check out: "JavaScript: The Good Parts", and you'll see what a beautiful and efficient language it is -- if you simply take time to learn it properly.
Right click on the page in Firefox and select View Page Source. There is a similar option in Chrome. Look for JavaScript in &lt;script&gt; tags or referenced .js files. There is also a hotkey Control-Shift-J. Then you can right click on the page and "Inspect Element". Then search source code for those selectors. Google things like "Chrome Developer Tools" "CSS selector" or "jquery Flip". 
It does not load anything. Both the forms are there. One is just "hidden" on the back side. For the flip effect you can check http://davidwalsh.name/css-flip or many other example of the web.
Keeping stuff "private" is mostly for encapsulation and good separation of public API and internal implementation details, not for safety. If you cannot trust the source you are just doomed.
A new edition just came out. 
Thanks Ill check it out!
Object.freeze is in ES5, supported by all modern browsers (IE9+,Chrome,Firefox,Safari) const is new in ES6 and today only works in Firefox
The whole point of the good parts is that the language is full of warts. If you want to see beauty, lets talk of haskell or lisp. JS pays my bills, but it's not beautiful and the language spec describes a language that is not at all efficient.
you're only calling checktime for m (minutes), not h (hours)
also here is a generic function to pad a number with any amount of zeros: function padZeros(theNumber, max) { var numStr = String(theNumber); while ( numStr.length &lt; max) { numStr = '0' + numStr; } return numStr; } 
No, I haven't had the need to try to do something like this, because I organize my code according to best practices ;) Render your stuff in a requestAnimationFrame or setInterval, not in a throttled UI event handler. You can continue to stuff square pegs into round holes, but realize that you're utilizing an additional two hundred or so (including lodash) LOC to solve a problem that you could solve with a little reorganization of your codebase: /* &lt;snip&gt; use mdn getAnimationFrame polyfill &lt;/snip&gt; */ (function() { var mouseX = null; var mouseY = null; window.addEventListener('mousemove', function(event) { // doSomethingExpensive(event.clientX, event.clientY); mouseX = event.clientX; // or pageY, depending on what you're doing mouseY = event.clientY; }); function animate() { if(mouseX &amp;&amp; mouseY) { doSomethingExpensive(mouseX, mouseY); mouseX = mouseY = null; } window.getAnimationFrame(animate); } window.getAnimationFrame(animate); })();
You said "Oxymoron", which implies that "eloquent" and "JavaScript" are irreconcilable. This is obviously not the case, because JavaScript (when not written in a half-assed or incompetent manner) is very eloquent indeed. But wait? "The language itself is *inherently* ineloquent because of its pitfalls and caveats". True, but let's be realistic, there aren't *that* many. "The Good Parts" was touted because you could literally read a couple of chapters of said literature (available freely on PDF), and from there be writing beautiful and eloquent code. There are "missing manual" types of literature for every programming language -- each with their own pitfalls. This particular book actually dedicates sections to "The Great Parts".
You're right! Here's a working codepen: http://codepen.io/miguel-perez/pen/CDcAG
I wrote this just for fun, just to find out if such a thing is possible. Normally you can only communicate to child or parent frames, windows you have opened and the opener of the current window (via `{parent|opener|top|iframe.contentWindow}.postMessage`). With this library you can communicate to all windows/frames from the same origin, no matter how they where opened. I'm not sure if this is even of use to anyone. Usually you would implement something like this using web sockets or some other kind of server communication. Both approaches have pros and cons, though. Pro: * No connections to the server need to be kept alive. * Works in Internet Explorer 8 and 9, which have no web socket support. * Works offline. Con: * Does only work within one browser instance (not cross browser, not cross machine, not even between a normal and an incognito/private browsing window of the same browser on the same machine). * Only pages of the same origin can communicate. This means pages served via http cannot communicate to pages served via https and pages served from different sub-domains cannot communicate either. You could use an iframe of the correct origin (and `iframe.contentWindow.postMessage`) to bridge this, though. If you find this useful let me know. I don't think I bother writing tests if nobody finds this of any use.
Now add function types and generics for an interesting exercise :)
Looks awesome, but damn those are some pricey tickets.
But the clock is working. It shows hours and minutes.
Really nice widget and the API is clean and logical. One, strong suggestion though: The dial feels broken when your mouse pointer strays even slightly outside of the "knob" and the wheel stops tracking the mouse. Why not track the pointer's radial position everywhere until you release the mouse button? That's what I was expecting as a user.
 -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none;
Man, there is so much wrong with that snippet. The type attribute isn't needed. "today" should be "now". "checkTime" doesn't check the time. You are changing the type of "m". You look up "#until" over and over again. You call setTimeOut with a string (=eval). Anyhow, using setInterval would make more sense anyways. "if (i&lt;10, 0)" lolwut? That condition is always false, because "true, 0" is 0 and 0 coerced to boolean yields false.
Yes you are right. It will be true constant if defined using const and freezed. Corrected in the post. Thanks! Attempting to modify frozen object silently fails but in 'use strict' mode, it do throw exceptions.
Ah, I saw this yesterday in a presentation by Gilad Bracha, language guru. http://www.infoq.com/presentations/web-programming-future?utm_source=infoq&amp;utm_medium=videos_homepage&amp;utm_campaign=videos_row1 The cool thing about this language is that it allows you to keep running your code while you change it. Even going a step further then the Functional Reactive Programming libraries you see nowadays by allowing you to inspect the source of elements in the UI.
My biggest problem right now is the size and use cases of most sites. It's gotten to the point where people are using a pretty large library solely for some DOM manipulation, in a time where browsers have consistent and working JS implementations and some [30%](http://gs.statcounter.com/#all-comparison-ww-monthly-201307-201407) of people are on mobile where the extra page weight really makes a difference. At the end of the day there's a trade off for developer comfort vs. site perf (not just JS run time speed but download time etc). Of course you can get custom builds of jQuery but then you lose the advantage of CDNs. Page speed is a big topic now, especially with Google ranking faster sites higher. http://youmightnotneedjquery.com/
jQuery is awesome: a set of super useful, well-tested tools with a focus on convenience. Performance is plenty good enough for most projects and with some discipline it's not hard to write very readable and maintainable code (hint: check out Doug Neiner's excellent series of presentations called Contextual jQuery [1](http://vimeo.com/40873228), [2](https://speakerdeck.com/dougneiner/contextual-jquery-in-practice) and [3](http://www.youtube.com/watch?v=Sx5GJo_14S8)). jQuery does not protect you from writing crappy code, but it certainly doesn't promote it either.
I have done couple of games with HTML and jQuery out of curiosity. A 2D RPG and a racing game if I recall correctly. It is indeed a complete mess and there the performance can be actually seen. I think I tried experimenting with some asteroids type of game and jQuery simply couldn't keep up with the amount of asteroids it had to rotate and move - vanilla JavaScript did a bit better, but still, HTML is not for games that's for sure.
Hi, thanks for your suggestions. It should be straightforward to implement generics with the help of the base elements: // Either A B combinator var Either = function (A, B) { return subtype(tuple( [maybe(A), maybe(B)] ), function (x) { return Nil.is( x[0] ) !== Nil.is( x[1] ); }); }; // node.js style callback arguments var CallbackArguments = Either(Err, Obj); CallbackArguments.is( [null, {}] ); // =&gt; true CallbackArguments.is( [new Error(), null] ); // true CallbackArguments.is( [null, null] ); // false About function types, I've added an experimental `func` feature func(Arguments, f, [Return], [name]) to check `arguments` and return value. Let me know what you think
&gt; jQuery does not protect you from writing crappy code, but it certainly doesn't promote it either. This probably sums it up. It's really too bad that jQuery has like become its own language, since there is a lot of people who still don't understand that jQuery is only a library on top of JavaScript. Then they go around asking how to do something simple in JavaScript like "what's the substring-function **in jQuery**" and at that point you might as well just give up to protect your own mental health. ______________ P.S Thanks for the videos! 
It's really more of a "hating the game instead of the player" situation. Because of it's popularity, lots and lots of people use it poorly. But so what? There isn't a single front-end project where I wouldn't use jQuery. It solves a lot of headaches.
People seem to hate or fear everything that they deem too big. People hate large companies, wealthy people, windows, linux, space, god (heh), ... jQuery is no different in that regard.
For the second question, you don't need to do the zero-padding manually. Just use `Date.prototype.toTimeString` and slice the resulting string. For the first question, you better take a timestamp of the start time and then update your "accelerated" date by setting its time to the sum of the starting timestamp and the delta time multiplied by your factor (1.5), caring to `Math.round` it to an integer value. Edit: as /u/x-skeww pointed out, your code is totally broken...
Why can't you just use Baraja?
What is that supposed to mean?
it's cool
If you just want selectors use: http://sizzlejs.com/ Which is included in jQuery.
Array.apply([], document.queryselectorAll(&lt;selector&gt;)) .forEach(someFunction) ; because screw old browsers! 
Except I trust Sizzle does something special and supports older browsers.
Since using angular I have found very little use for jQuery anymore. It still is a great library though.
Don't go so fast! I was intentionally throwing some curveballs to see what you would do :) * Type constructors like Either are easy - you already did one for Maybe. Generic functions like `id :: forall a . a -&gt; a` are trickier because you need to wrap and unwrap the values to guarantee that the function is treating them opaquely. Probably not worth the trouble though. * I'm not sure if you should define an `is` method for your function contracts. The thing with higher order contracts is precisely that you can't check function types using a predicate and the best you can do is return a wrapped function that checks input and output. * I'm not sure your function contracts are idempotent right now. I might be wrong but I think that right now if you call func more than once with the same arguments its going to add multiple wrappers. This would leak memory in recursive functions or when you pass callbacks around. function f(x){ return x + '!' } g = func(String, f, String) h = func(String, g, String) ---- Finally, one minor thing: I think it would be a more precise name if you renamed "subtype" to "refinement". It makes it clear that you are just restricting a type using a predicate and not trying to make a binary subtyping relationship between two types.
Except it's not. The timing on which the semaphores fire matter a great deal. Currently they fire after 100ms. That makes the script 100ms slower if there is no animations. It also causes the callback to fire too soon if there is a delay in the animation larger than 100ms.
JQuery has been been a huge chapter in the history of JavaScript. It's largely awesome and sometimes painful. Happily used it for years. It started life as a simple selector abstraction. It then over many years grew into a monolithic kitchen sink of a library while teaching very little about structure and design patterns. Powerful but dangerous. I think the big thing here is frameworks vs libraries JQuery to me is a library. A framework to me forces a set of patterns that aid maintainability and clarity. JQuery lives on though, relegated to a selectors engine only a la JQueryLite. Which is used within AngularJS. These modern frameworks are streets ahead in reducing code. This translates into less code then lest cost to maintain. Hail JQuery for past productivity and the lessons it has taught us. These lesson have brought us new and awesome tools . 
Some of us don't have that luxury. :(
Well, if your not wanting to get tied into something made by FB - you may want to reconsider using React at all then. I've been using Angular heavily for a little over a year now and haven't read that much into React, but a few things have popped across my news feeds lately that have made me go 'hrmm' and think it might be worth taking a bit of spin with at some point. It does take a different approach, and one of the things that sort of put me off of React when I first read about it was the clunkyness of building up HTML in JavaScript, where JSX seems to make it a little nicer - and easier to wrap your head around a few things. Even taking a look at these two basic JS fiddles from their samples, [one with JSX](http://jsfiddle.net/vjeux/kb3gN/) and [one without JSX](http://jsfiddle.net/vjeux/VkebS/) - the JSX one for me is instantly easier to understand and less off-putting. That said, I haven't even built a basic app with React - so maybe once I try and do something with it and get my hands dirty, my opinion might change. Dunno - just seems like if you are making a commitment to React, not wanting to use JSX to avoid FB-lock-in seems like a silly reason. 
I don't think it's so much a matter of saving bandwidth, but there are lots of case studies on page speed giving noticeable increase in conversion, etc. e.g: http://www.lukew.com/ff/entry.asp?1327 It's not even always a matter of direct conversion; some clients are willing to pay for the better UX.
[It can be if you want :)](https://github.com/rogerwang/node-webkit)
That comes up a lot with my devs who look at nosql. Yes it's javascript , but they are not trained dbas. I relate it to college football. You have position players. People who use their javascript skills for one area they are great at. Then you have those who are labeled athlete , as they can be utilized in almost any area of a solution using javascript for the db, for the server itself , and for the client. You can be a great javascript position player and really own that position, or you can span out and use the skills you already have working with servers and DBS to help the team keep moving when needed. Some of us want to be athletes, some of us want that position player role as it's what we are trained to do and if we were to move to another team , we want to be on top of our game. Just what I've seen. Is generalist a term being used for this as well?
"I'm the best." "Your browser does not support the Notifications API." "Oh, okay."
And it's freaking amazing.
Please forgive me for doing this but #rekt.
I don't use it because they have a non compliant implementation of Promises A, the functions don't compose, and it's a bit heavy. 
With Edge.js you can call/use .NET code from Node - which can have a few uses for integrating with existing systems. There is also a Node JS driver for SQL server (not sure of how good it is though). Depending on what the needs are though, there are lots of enterprise applications that already have a solid back-end/server stack and an 'internal' API - where building out a thin node server to create a public API out of it can be beneficial. Not that Node is the be all and end all, and there are times where it's not the right solution - but I've talked with a few people that have worked on some rather large projects for 'enterprise level' clients where they built up an Angular JS app (or front end framework of choice) + a thin node back-end to be a bit of a light-weight server/integration layer between a back end that might be Java, .NET, whatever. 
That's okay, I still think you're pretty cool. 
&gt; Is generalist a term being used for this as well? "Generalist" or even "Technologist", yes. I'm going to have to borrow your "position player" term though. I think this helps explain a situation that isn't well explained or acknowledged in the field.
$(".haters").gonna("hate");
If you cannot trust your developers to not use _something methods from another file you are not just doomed, you are fucked.
it's both it's everywhere
Sometimes what you are doing does not require JQuery. Maybe you have a few calls to getElementbyID() and not only is JQuery overkill, but when you use it you need installs on development and production platforms. Also if you use a library you have to deal with upgrades. Of course that is not limited to JQuery.
If you take a margin of error into account, it probably pays the same. I'm curious though about the difference in pay between website development (focusing on templating) and web application development (focusing on client-side programming).
I meant generally. Unless you don't have a better choice and are doing something relatively big - I would definitely apply jQuery.
Sun always did some really cool things...
I don't think anyone chooses their library by reading its source code. The source doesn't really tell you anything about whet ever the library is shit or not. At least not in my opinion. I think most people decide if a library is good or not by using it for a while, perhaps peeking at the source code, looking for some specific thing to find out why it is so slow/fast or something. Besides some source codes for libraries aren't open so how are you supposed to read those to test it out? ____________ ^^Also ^^please ^^do ^^not ^^spam ^^my ^^inbox ^^telling ^^me ^^to ^^fuck ^^off. ^^Handle ^^your ^^provoked ^^state ^^of ^^mind ^^some ^^other ^^way.
I should get into angular ... though the problem for me, when it comes to frameworks like that, has always been that I have zero motivation to learn them because I never use them in my own personal fiddles or projects.
&gt;There is this study though, which says that any wait under 4 seconds when it comes to web pages loading for example, isn't annoying to the user / doesn't really matter I'm not sure where you heard this, but it is so completely wrong. Infact, there are several studies saying quite the opposite. A few tidbits (not in any order and not from any one study in particular): * 40% of people abandon a website that takes more than 3 seconds to load. * Bing and Google both found delays of even 100 to 400 milliseconds reduce people’s usage of those sites on that visit and in future visits. * In 2007 Amazon saw sales decrease by 1% for every 100 milliseconds slower a page loaded. * Google revenues decreased by 2% for every 500-millisecond slowdown. * AOL found that the slower the load time the fewer page views per visit, no matter what channel. Infact, speed is one of the most important factors when it comes to web development. If you don't have a fast loading site, you are throwing money away. Wrapping back around to the initial question, this is why I avoid jQuery if I can. The amount of time it takes to download and parse the library isn't worth it on projects where i'm targeting IE9+. And even if you load jQuery from a CDN, a study once showed that because of versioning issues and the number of CDNs the chance that any random user will not have it in their cache is about 60%.
Because manipulating the DOM directly is always painful. Don't get me wrong, I have used and loved jQuery. But now I see it as a lower level abstraction. Instead, I prefer to have my DOM react to changes on my model automatically. I avoid lots of errors this way. 
Nothing has ever failed / turned into a pile of shit because of a library. If you want opinions from experienced folks on a library, that's one thing. If you want anecdotes about how "omg jquery rooned my codez" I have to wonder a) what the point of doing so exactly is, and b) what that would prove even if you were provided with a ton of them. I'm sure you're trying to make some point here, but maybe instead of worrying about people bashing your favorite library you should be making something cool? Or learning something? 
Thanks for your submission! Unfortunately, it appears as though it doesn't meet our [guidelines for self-promotion](http://www.reddit.com/r/javascript/wiki/index) and has been removed. If you would like to resubmit, please take the guidelines into consideration. Thanks for your understanding.
Be advised that you qualify as a spammer, and your account may face a site-wide ban if you continue posting as you have been. Please see http://reddit.com/rules, specifically rule #1: &gt; **NOT OK:** Submitting only links to your blog or personal website.
tape is good. Small and to the point; plays well with testling, works in node and the browser, doesn't rely on phantom js (a heavy dependency which slows down everybody's installs), etc. 
I use Jasmine with Karma as my test runner. Protractor for my e2e
In short, its the hipsterification of compsci
This is a better use of Kickstarter than the guy who wanted to make potato salad... 
Maybe the study I read was older, 4 seconds does seem quite long time for myself at least, so 3 might be more like it. I know about those other examples you mentioned, but I thought they were somewhat irrelevant to this subject. To be honest, jQuery takes a minimal amount of time to download and parse no matter where it is from. There are other factors like uncompressed images and excess ajax-calls and cross-server requests that take, should I say, exponentially more time to load and process. I'm not claiming jQuery doesn't take time to load, it does, but the amount of time it does load and process even on some relatively shitty mobile phone with 2G connection is still quite unremarkable and shouldn't be a reason not to use it.
It's not so much HTML. I mean Canvas is pretty good at creating a flash like environment. Before Javascript was slow as hell but with JIT compiling things have greatly improved. Hopefully a better language like DART takes over though. What you can do is program in HAXE or Dart and compile to JS if you need a better OOP feel. One "developer" I work with keeps telling me that jQuery will replace javascript someday. I keep telling him he is an idiot. jQuery is Javascript. That statement alone speaks to why jQuery can be an issue in a development environment. 
&gt; You are never going to perform over 10 million operations per second anyway That's not always the case. Sometimes the required performance is not so high. For example, positioning and moving 300 items on the screen at 60 frames per second, where calculating each position is 10 operations. That makes 180,000 operations per second. I don't have the answer to whether or not that will be fast enough on a mobile browser, maybe it would be, maybe not. There is also the issue of battery life and power efficiency, it's most important on mobile devices. Faster code is more efficient code. Some other cases benefit more from the best performance possible. Maybe we could consider a 1000x1000 image. If there are 10 operations done per pixel, then processing that image would take 1s. In this case, it would be good if it can be done much faster. Using jQuery well would not ruin a project, but misusing it could do. Correctly understanding the performance implications of the tool one uses is important. I was once caught by surprise by how using jQuery's .index on a bunch of sibling items separately was very bad performance algorithmically. That put me off using jQuery for things it was not suitable for, but that's not to say jQuery is not suitable for anything. Also, I found problems with the jQuery UI drag and drop system not always firing the correct events while moving in and out of elements. I solved this by calculating things on a lower-level and not relying on functionality which I found not to be working right. &gt; I have yet to see a properly programmed web application that suffers from bad performance or something solely because of jQuery. Generally people fix these 'properly programmed' applications before they get released if they suffer from bad performance.
Try gulp-jsxify! https://github.com/parroit/gulp-jsxify It allows you to use JSX only for html-Templates and write the rest in plain JS (or any transpiler for that matter). Here is an introductory blog post: http://www.parro.it/2014/06/14/gulp-jsxify-transpile-your-html-templates-to-react-jsx-files/ and an example project: https://github.com/parroit/billpanel unfortunately it currently wraps it in CommonJS-modules, but that could easily be fixed in the future...
&gt; "Developer comfort," Yeah, that really jumped out as being way too dismissive.