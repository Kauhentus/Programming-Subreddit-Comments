Woah woah woah.. you're*
What did I do to you again?
/r/learnprogramming 
Chrome takes care of all my needs. [Device mode is helpful for emulating various viewports.](https://developer.chrome.com/devtools/docs/device-mode)
Why exactly is async loading a bad idea? I found this to be the main reason to go for AMD. If you have a huge (pure js) app with all kinds of individual subapps, wouldn't it be better to go for AMD?
To make matters more confusing I switched my handling of `node_modules` in production apps from "commit everything" to "gitignore dev dependencies only". I'm not sure whether this is a good idea yet, but theoretically it would give me the advantages of having all deps in git without the noise caused by updating dev dependencies (that otherwise don't affect the software). Oh, and I don't commit bower deps. As I already commit the build artefacts (i.e. the JS output for compile-to-JS languages and the minified bundles for frontend code) there's no need to mess with bower except in development. That said, bower is an abomination and must die. But that's just my 2 cents.
I find the more explicit style helpful only when the boolean variables and functions have poorly chosen names. Use better names and the `=== true` isn't needed for readability. For example, if you have a `player` object with a method that tells you whether it's visible or not, call the method `isVisible` or `visible`. Then you can write: if( player.isVisible ) { ... } To me, this is *more* readable than the alternative: if( player.isVisible === true ) { ... } 
Exactly. You create (and name) variables whenever you need them, and you put whatever you want in them. Of course there's best practices regarding WHERE to declare variables and WHAT to name them, but you're not technically limited in that regard. For now, you can just think of them as these boxes that you can magically name whenever and whatever you like, and put whatever you like in those boxes. Edit: This might be good for supplemental learning: http://www.codecademy.com/courses/getting-started-v2/0/1?curriculum_id=506324b3a7dffd00020bf661
Let's not scare him! Besides, JavaScript's scoping isn't that insane. It's similar to other languages. It's just more lax in terms of its rigidity.
ES6 via traceur compiler. Reason: Future-proofing
I think in that case you could create feature bundles and lazy load them.
Actually, in this case of debugging, a library or framework worked against me. Even though they provide great foundations for building, little attention is paid to creating tools to compliment them. Now I love Angular cause it helps me build effectively, but the Batarang tool hasn't been worked on over a year and ng-inspect freezes on a large enterprise app (a sign of code smell actually when you have thousands of scopes). I had a debugging experience with an Angular app that was similiar to what I posted above. The tab system was acting in an unexpected way and it tied back to events. I had little tools to help. Chrome dev tools lets you set breakpoints on native events like click or timeout and spy js traces based on script execution and those native events. However, I had no tool to trace $on, $broadcast, and $emmit. Now that I know the Angular codebase better, I might be able to set a conditional breakpoint in angular.js to log when certain events were triggered. All in all, I wish more attention was paid to develop tools to better see a framework/library's concepts in action because they go a long way to fix mysterious bugs. 
Yeah, we definitely needed a better way to document our events cause JSDuck doesn't organize by events but by classes. However, more in this case was the need for better communication for both parties (documentation doesn't fully replace the insight you get from conversation). I asked the original dev about a certain change to the animation properties that was coming in externally and I got a multifaceted answer. Since it wasn't the answer I was looking for, I didn't pay much attention. I need to work on my listening skills, but I really need to speak to this dev to be more straightforward cause you get different answers on different days on the same question. 
I don't use opera often, but I really liked what I saw of their developer tools when I noodled around with it some time ago. Maybe I'm misremembering, but I seem to recall that I later went back to it after the move to blink and it seemed like it had been neutered to an extent. One specific feature that seemed neat was that they used to mark nodes in the DOM view with 'EVT' that had events attached, and you could very easily inspect what events were registered to different nodes. But I think that might have gone away. Anyway... I guess I'd be interested to hear your thoughts on recent Opera dev tools developments.
Ugh. Assignment inside a condition sounds like a recipe for terribly un-readable code. 9 times out of 10, I'll prefer the more verbose option if it makes it more readable.
The best: http://eloquentjavascript.net/ Quick tutorials to see some basics: http://www.w3schools.com/js/default.asp I would not try to learn with this one. Also, take it with a HUGE grain of salt. Many don't like it. For instance, this page http://www.w3schools.com/js/js_object_prototypes.asp seems to use Constructors and Prototypes interchangeably. The prototype of an object created with a constructor function is ConstructorFunction.prototype not ConstructorFunction. For instance, using their examples: Object.getPrototypeOf(myFather)===person.prototype //true.
It certainly works that way most of the times it's used, but it can be useful. The likelihood of problems means that I don't use it, even when I can, however.
Never seen anything on using the two together (but don't know enough about polymer to know if there is a particular reason). Some ideas might be the same with react and this was a pretty popular article a while back http://www.thomasboyt.com/2013/12/17/using-reactjs-as-a-backbone-view.html
Python is my go-to language, and it'll cry if you attempt to make assignments in a condition.
Some of these are complete bogus... Semicolons, for example. Use them if you want, or don't, as long as you understand the basic gotchas with ASI. Any browsers or compressors that can't handle ASI (almost none) aren't worth your time anyways. 
Components look interesting: http://knockoutjs.com/documentation/component-overview.html Somewhat like React.js but with an overly string-based syntax (e.g. data-bind="click: handler") instead of named types/properties (e.g. onClick=this.handler). KO's syntax for passing properties to custom components for example: http://knockoutjs.com/documentation/component-custom-elements.html Kudos to the documentors. Lots of JS frameworks/libraries really should have quality documentation like KO. 
I Googled **learn javascript** and I can attest that * The first result, w3schools, is subpar. * The second is [codeacademy](http://www.codecademy.com/en/tracks/javascript). Very good! * Mozilla has [this comprehensive Javascript guide](https://developer.mozilla.org/en-US/learn/javascript). * [This stackoverflow thread](http://stackoverflow.com/questions/11246/best-resources-to-learn-javascript) mentions the [Douglas Crockford videos](http://yuiblog.com/crockford/). You may want to watch those videos. Also, learn to use the developer tools in your browser ([Ctrl+Shift+i in Chrome](https://developer.chrome.com/devtools), not sure the keybinding in Firefox but [it has developer tools too](https://developer.mozilla.org/en/docs/Tools) and [Firebug](https://addons.mozilla.org/en-US/firefox/addon/firebug/)). You may want to get an editor with syntax highlighting, an option is [gedit](https://wiki.gnome.org/Apps/Gedit). I also recommend the [Eloquent Javascript](http://eloquentjavascript.net/) book. Also check out /r/learnjavascript!
Wow.. I had no idea. That is very worth remembering!
I always find it funny when writers say to only use === and then go on to do things like if(v)... Or v = v || defaultVal in their code. You are using the __exact same__ type coercion when you do this. It's not different than saying if(v == null). Also, if we are going to tell people not to use something let's get what is actually going on correct: === does not check value and type. What it *does* do is disallow type coercion on its operands which is why you get the results you do vs double equals. 
Easy. I get a JSON object via a REST call. That object has a property whose value may be true, false or unset (so I suppose you could call it a trinary value). If unset, the property is null when I get it. In this case, I need to === check either against false or typeof undefined. &gt; I would hate to read the code that people are writing that produces all the complaints about javascript. You're kind of coming off like a judgemental ass there.
I was thinking in making a turn-based web game like this. Problem is, I'm too lazy. I don't really like some of your choices of software stack but I commend you for sticking with this project for months! I'll hang out in your subreddit and see if I can help with something. A note: you're using an unsalted SHA1 to store user passwords ([here](https://github.com/FreezingMoon/AncientBeast/blob/master/account/login.php#L30)). To store passwords securely you would need to salt your hash ([read here](http://php.net/manual/en/faq.passwords.php) in PHP docs). But more importantly, you shouldn't be manually calling a hash (SHA1 or other) but a proper [key derivation function](http://en.wikipedia.org/wiki/Key_derivation_function). PHP 5.5 has the function [password_hash](http://br1.php.net/password-hash) which uses bcrypt and that's what you should use.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Key derivation function**](https://en.wikipedia.org/wiki/Key%20derivation%20function): [](#sfw) --- &gt; &gt;In [cryptography](https://en.wikipedia.org/wiki/Cryptography), a __key derivation function__ (or KDF) derives one or more [secret keys](https://en.wikipedia.org/wiki/Key_(cryptography\)) from a secret value such as a master key or other known information such as a [password](https://en.wikipedia.org/wiki/Password) or [passphrase](https://en.wikipedia.org/wiki/Passphrase) using a [pseudo-random function](https://en.wikipedia.org/wiki/Pseudo-random_function). Keyed [cryptographic hash functions](https://en.wikipedia.org/wiki/Cryptographic_hash_function) are popular examples of pseudo-random functions used for key derivation. &gt; --- ^Interesting: [^PBKDF2](https://en.wikipedia.org/wiki/PBKDF2) ^| [^Scrypt](https://en.wikipedia.org/wiki/Scrypt) ^| [^Cryptographic ^hash ^function](https://en.wikipedia.org/wiki/Cryptographic_hash_function) ^| [^Key ^\(cryptography)](https://en.wikipedia.org/wiki/Key_\(cryptography\)) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cjyoosn) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cjyoosn)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
was unaware of reactjs, but yes, my idea was somewhat similar: - using polymer to encapsulate common styles and behaviours in a per-component-based setup, the the whole project could scale better as well as easier to maintain. I'll post a github repo as soon as I'm done with a few tests so everyone can se if any good can come of it.
Why would an unset property be null? Wouldn't it be undefined?
Maybe it's just from my lack of experience using js frameworks then. Isn't this a bug either in your web service, or the method you use to bind your data to your view models?
The explanation for number 10 is ridiculously wrong. Calling array.length doesn't calculate the length, and has no overhead. The length property is always updated when the length of the array changes, and is always stored as a number. Thus, the only overhead in calling array.length is the property lookup time, which is always negligible in the case of a single scope.
Thanks, working on it for years now actually, but I'm a crappy coder and sometimes even afraid to ask for help or trying to do a lot by myself. bcrypt is actually on the to-do list https://github.com/FreezingMoon/AncientBeast/issues/769 but there's a lot of stuff to do, accounts aren't used atm and game will always be playable without an account as well. What software stack would you have picked instead?
And streams are still so awful that everyone abstracts them.
Because that's the same image as the one at the bottom of the page... But only it's its duo...?
One of the best possible ways to view the public api of something you create, is to ask yourself whether or not a dev that uses it in the future would ever need to consider the implementation to leverage the api. The api should be self evident, and not require any understanding of what is going under the hood from its clients. From the sounds of it this system requires extremely in depth knowledge of the implementation to use it/debug issues with it. Documentation is helpful, but from the sounds of it there are some architectural issues here as well (and just the fact that you don't instantly know what function to debug in when the event fires would be a huge red flag for me). 
Undefined is actually not a valid json value per the spec, so if that occurs your serializer is broken (good catch though, I assume this is the exact reason why it is this way). 
Well, web service returns what's there -- if it's using a schemaless database, it'll return whatever documents it has matching the query as a big 'ol JSON object. The webservice just outputs whatever it gets as JSON and the client-side just takes whatever it can get from the web service and plops it into the view model. There's a level of simplicity of just piping everything through. If the data is clean you don't necessarily need to include extra lines to validate and default each and every attribute on the document returned.... there are better ways to do this -- and it would be to define a schema somewhere and adhere to it. The root of the problem though isn't really a problem with code -- it's with the data. Sometimes during a prototype the schema isn't finalized and some feature you added later has data that earlier records just don't have.... in such a case, you get undefined behaviour when using old records.... this isn't exactly the kind of problem you debug in production.
I keep hearing this, but I don't see evidence of it anywhere.
See gulp stuff. 
As dashed said, take a look at gulp plugins. I've not seen a single plugin that uses raw streams, all of them use either through or through2 because it's just vastly easier. I've tried several times to implement a raw stream emitter and it's always been a total disaster. Even finding accurate documentation is a pain.
We have a core app that's bundled and minified together for the fast initial load, and then smaller more atomic modules (one per feature) that gets loaded in the background (Or straight away if the user attempts to use that feature)
It's worth noting though that this is simply due to the fact that vendors have not optimized for the case yet, and I've seen write ups from people on the v8 team that's it not inherently impossible or anything. I wonder if the promise implementations use try/catch for the respective promise methods? Since its considered good practice to use .catch in most cases, I wonder if this will change in the future (seems like it should be a priority if so, I guess going to look would be helpful ;)) 
Chromes development tools are so superior to everything else out there that they *almost* match the level of profiling available for every other platform apart from the web (which sounds bad, but when you think about where we were 5 years ago it's huge). Chrome has tracing that will allow you to literally trace your code execution down to what the internal engine is doing as your code executes, what's *actually* getting handed off to the gpu (saved me in really weird performance cases where things were clearly not happening correctly), etc, etc. Firebug was amazing when it came out and I did a lot of my "growing up" on it, but even if I were not supporting chrome with my app for some reason, I'd still do all of my initial development in it. None of this is to mention that I've not actually typed anything into vim besides :e in a sass/css file for a long time due to Chromes workspaces which have really changed the way I approach styling a page. 
Thanks. Sounds pretty cool and clears it a little bit for me. Mostly I can't figure out all the frameworks' differences, and which to learn and when to use which, so a real-world example like you provided really helped. Still, do you have experiences with other MV* frameworks? What makes them "full blown" compared to React in regard to M and C?
Thank you for suggesting webpack, I was not aware of it but now am! Interesting alternative to r.js. 
Because operator overloading is a bad idea.
How so?
It's all branding really. I'd argue that React is a more powerful view abstraction so it doesn't place as many constraints on your model or controller layers in order to work well (i.e. React doesn't need special observable objects or scopes or anything). For example I don't think Angular does much more out of the box than React outside of DI, modules, and routing (most of which aren't part of MVC anyway). Ember does, but only when you bring Ember.Data into the mix (which I don't think most people use).
That would be a large number of feature bundles. You have to carefully make sure bundles don't overlap, but also that bundles contain everything the app needs. This is crazy if you have a lot of helper libraries and have to do this manually. Also, without lazy loading them first all related require calls will fail, that's error prone imo. What I'm getting at is that AMD has its place. Commonjs is indeed handy for most websites where each HTML page needs a separate bundle (or one for all of them). AMD seems more fitting for large one-HTML sites with lots of little 'js pages'.
[Actually there is one.](https://github.com/yeoman/generator-generator)
Actually the problem has little to do with views or controllers and everything to do with the HTML DOM (document object model). HTML/CSS was made for documents, not for applications. So when you try to build application views out of it, you need something to manage the resulting soup of tags and classes (i.e. a controller). You also preferably want to keep your data around in original format (i.e. a model) rather than as formatted HTML or as form fields. Frameworks started by just attaching models to HTML templates, filling in the values and inserting it into the document. The problem with this is that it ends up trashing the DOM, recreating the markup for every change. DOM changes are relatively slow. Enter two-way binding: you keep all the tags around, and only make minimal changes to the HTML attributes and structure. Changes by the user reflect back on the model. This is what Backbone and other MVC friends help you do by hand, through change events, computed properties and watchers/observables. One step further is Angular, where this is all done automatically. You have an entirely parallel structure of controllers, scopes and directives, looking like HTML, but really all JavaScript. Angular takes over the DOM, spawns tags and binds nested data models (scopes) to components. Angular is a very thick layer on top of HTML with its own parallel world of modules and services. It is quite magical though in that most of this is invisible, and it feels like just writing HTML. React is the opposite: it's a very thin layer that goes back to creating and throwing away tons of tags. Except they're virtual DOM nodes instead of real ones. The virtual DOM is very light weight, being pure JS. Every time it changes, it is compared to an earlier snapshot. The resulting set of minimal changes is then applied to the real DOM. This makes React very fast, letting you pretend you're generating HTML on the fly without having to manage state. Finally there's Famo.us, which rejects using HTML/CSS for building UIs, and instead has a scene graph made of surfaces. Each surface ends up as a raw div positioned using CSS 3D. So all of these frameworks are just a different answer to how you want to manage turning HTML into an application. By hand, automatically, with a heavy hammer or a gentle touch. The ones mentioned above are the more differentiated ones, the others tend to fall in between. The roles of M, V, C, VM, VC, ... are vaguely defined, each framework has to be considered in context by how it's meant to be used. On native, the OS framework is made for applications. You can work with models, controllers and views directly, and don't need a framework on top. Native views are combined into a render tree, which the OS displays for you. TL;DR: HTML started out as a view tree for documents, but with frameworks, you can use it as a render tree for applications.
I consider "full blown" to be any framework that has a "way" to do things. These would be things like Angular/Ember/RobotLegs/etc. They have a rigid structure or methodology that if you try to work outside of actually makes things harder to deal with. I'm going on 37 now and been doing development since about 8 years old on a TRS-80 in BASIC so I've seen multitudes of frameworks and languages come and go. It's taken JavaScript's recent growth and FRP/React/Reactive programming methods to actually get me excited about building things again. Previous to this I was stuck in what felt like dead end development just churning out mediators, models, and such which felt like a drone just doing a job. JavaScript is actually a really powerful,expressive, and freeing language that lets you experiment and work outside a rigid box if you want and it kind of upsets me that people keep boxing themselves in with the same old OOP Classes and MVC structures they deal with in other languages.
This is a really good breakdown. Thanks for writing it.
Damn, that's a nice setup.
I'm surprised it's not more common. It was a pain in the arse to get working, and seems to be a use-case that RequireJS really didn't consider.
It's kinda amazing how wrong this is. **Edit:** To make this comment a bit less useless: There are arrays and there are maps. There aren't "array maps", but you could of course have an array full of maps and your map can also have arrays as values. If you actually use ES6's `Map`, you can even use an array as key: &gt; var map = new Map(); undefined &gt; var key = [1, 2]; undefined &gt; map.set(key, 'ohai'); undefined &gt; map.get(key); "ohai" &gt;“foo”.[0] would be “f” No, that would be a syntax error. That should be: 'foo'[0] &gt;Without reading into the actual documentation regarding this Y'know, maybe you should just do that.
That XPath expression looks suspicious. Do you mean to write var pathToChidNodes = "//team[@searchTags='" + search + "']"; ?
NOTE: This is Mac-only for right now, as it's my main OS and I developed this primarily for myself. If there's enough interest, I'll make it Windows/Linux-friendly. When you install Stopp, make sure you use the global flag: `npm install -g stopp`. It's not polished, but it works. I find it to be more effective than browser extension-based alternatives, for whatever reason. Feel free to modify it, add features, or whatever and submit a pull request: https://github.com/dav-/stopp
I agree and thought the same thing but it works. The examples on w3schools don't use a var, [w3 xpath examples](http://www.w3schools.com/xpath/xpath_examples.asp)
Can I ask what causes it to be non-linux friendly? I thought OS X and Linux shared the same `/etc/hosts` format.
Nice. Love simple things like this.
They do, and I think Windows does as well. The only difference should be the location, which can be configured in `conf.js`. If you want to test it out, just change that value and remove the OS check on line 42 of `index.js`.
Angular is definitely the new Jquery.
Simple things with inconsistencies? Who needs those? It will screw up with 'pathname' and doesnt even parse the search query which is the most error-prone.
You mean the individual params in the search?
Quite a bit different for Chome on OSX. Regex: 1,139,174 Native: 127,531
What's wrong with "split on &amp;, split on the first ="?
what do you recommend
search npm, pick one you like.
This is the fastest URL parser I'm aware of, by the well known JS perf-freak, Petka Antonov - https://github.com/petkaantonov/urlparser
This what I use to parse a query string in to an object rather than just multi dimensional array like `[[param, value]...]`. Requires underscore/lodash var search = 'test1=one&amp;test2=two&amp;test3=three'; var qsObj = _ .chain(search.split('&amp;')) .map(function (pair) { return pair.split('='); }) .object() .value();
incredibly unhelpful
would you rather have a fish or a fishing rod?
You are correct and I was teetering on saying the opposite thing in the second sentence as opposed to the first there (strong indicator I should stop posting technical comments from my phone). My main point was it's a bit silly to state we should always disallow type coercion in conditionals and then use the v = v ||... construct because this involves implicit type coercion and the || will not be short circuited for any falsey value v, which is why they bemoan the use of type coercion inside the if conditional construct. This sort of thinking actually leads to needing to memorize even *more* rules (because evidently there are a lot of exceptions so long as they are implicit) which seems to always be the case made against == use. 
Ah, I see. I agree with this, I'd interpreted your above comment incorrectly.
Yeah. My brain blanked out there.
He asked for a personal recommendation, so he probably wanted a personal recommendation. "Search for one" isn't that at all.
Win 8.1; 64bit Chrome beta: Regex: 1,202,479 Native: 93,051
I personally recommend this person to learn to find your own way and not have other people make your choices.
What about browser differences? **Edit:** This is the only difference I can find during testing, so a polyfill fix should be only a few bytes at most: * **Chrome, Firefox, Safari** * parser.pathname returns "/pathname/" (leading slash) * **IE8, IE9, IE10, IE11** * parser.pathname returns "pathname/" (no leading slash)
&gt; You mean the individual params in the search? I just looked at the anchor-element prototype, and there is a way to parse them (just not that widely support according to MDN, link at bottom). To expand on the example in the gist var parser = document.createElement('a'); parser.href = "http://example.com:3000/pathname/?search=test#hash"; parser.searchParams.has('search'); //true parser.searchParams.get('search'); //'test' parser.searchParams.getAll('search'); //['test'] It also has the functions .append, .delete and .set More documentation: https://developer.mozilla.org/en-US/docs/Web/API/URLUtils.searchParams
"Whats good to eat in your area?" "I'm not telling you. Learn to use Yelp." That's super annoying and condescending. We know how to search, and we can make our own choices. We just want your recommendation to know what to keep an eye out for. Not like saying "I like _______" is a whole lot more effort on your part.
Thanks for your submission! Unfortunately, it appears as though it doesn't meet our [guidelines for self-promotion](http://www.reddit.com/r/javascript/wiki/index) and has been removed. If you would like to resubmit, please take the guidelines into consideration. Thanks for your understanding.
Uhh how? That's exactly what you should do instead of copy-pasting random code from blogs.. 
Huh? &gt; Please don't use this service for commercial products, instead wait till Runway Pro comes out in a few weeks. And: &gt; Buy now for $99
The first message is just asking people not use it to make money from, simply because that's not cool. There will be a paid version later, but that version will be free forever. Where did you see the Buy now text? There's no payment/signup system.
After I added something with the editor.
That's just a place holder button, it's one of the components. Anything added to the editor isn't part of the script, it's just some content the user can edit. There's no way to buy it, because theres no paid version :) If you change the building mode to content you'll see it can be edited.
The project also doesn't really relate to JS, the fact that it uses JS in the site is the closest it comes. Don't get me wrong, I think it's a pretty neat tool, but it's a WYSIWYG for a UI framework and just not applicable here.
Ok, I understand your POV :)
That's actually useful -- to the point where I would take the time to write a polyfill for it. Now, if it had a native replace, that would be sweet, but I can write one simple enough.
This is a good example of why you shouldn't outsource your development to India
the key is probably here: ``` &lt;img src=" + data.fighters[i][4] +" &gt; ``` Could try something like: ``` &lt;a href=" + data.fighters[i][4] +"&gt;&lt;img src=" + data.fighters[i][4] +" &gt;&lt;/a&gt; ```
"I don't know what you'd like, but here's how to find some popular recommendations, see which appeals"
Depending on *any* npm package would be better than copy-pasting code. Really though, all you need to do is google "npm query string." The top results have tests, docs, seem well enough maintained, lots of dependants, and downloaded thousands of times a month. You don't need to know which out performs the other in a micro benchmark or even how they work under the hood unless you are performing millions of query strings per second. It's just a util function, you aren't choosing a religion. ;)
It's retarded that JS doesn't support query params as a hash. PHP has had $_GET since forever; why don't we have document.location.params? ie, for http://www.example.com?foo=bar&amp;baz=qux: document.location.params -&gt; { foo: 'bar', baz: 'qux' }
knockout.js
Cool, thanks. The [shopping cart demo](http://knockoutjs.com/examples/cartEditor.html) shows me it can do the kind of things I'm looking for. And the project aim and use-case sums up what I wrote above, in a fraction the number of words :-)
Which would be fine, except that's not what he said *and* he started with his opinion. So a more accurate analogy: "I like Burger King." "Burger King sucks." "What do you recommend." "Don't ask me, use Yelp." You can't give an opinion about what you don't like and then refuse to say what you do like when someone asks. Because it's denying someone who likes something, but then telling them to make their own decisions... Completely contradictory.
Eh. I'll install it later.
It's just a rewording of "Don't ask me, use Yelp" that isn't unfriendly. Just pointing out perspectives. brtt3000 seems sincere about it.
HTML5 specs for FORMS is not that hard. They have greatly simplified them. &lt;form&gt; &lt;label&gt; &lt;input&gt; Text for Input &lt;label&gt; &lt;button type='submit'&gt;Submit&lt;/button&gt; &lt;/form&gt; Everything else you described can be handled with very simple javascript objects. Really, the most difficult part is attaching event handlers. That's really the only area you might need a framework to catch all the cross-browser stuff.
There is no online demo section to that site
Also, I'd probably do a self invoking function so your UtilityClass isn't using "new function(){...}" var UtilityClass = (function() { ... })(); var output = UtilityClass.ClassFunction();
&gt; self is a keyword and is equal to window.self This is incorrect, [self is not a keyword](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords). He's clearly declared it as a variable that is scoped to the anonymous function he assigns to `UtilityClass`. He's hiding window.self, but he didn't override it. He can still access window.self if he wanted to, but why would he since he could just access window. window.self === window. I have never found a need to refer to window.self, like ever. The only reason window.self === this is in that function is because `this` in a function without new or a thisArg or as part of an object is actually the global object already.
If by static class you mean you just want an object with methods that you don't want to create instances for? Just put the functions on an object: var UtilityClass = { AProperty: 'a property here', ClassFunction: function () { var anotherThing = this.AProperty + ', eh?'; return 'stuff'; }, //etc }; In this case `this` will be referencing properties on UtilityClass. Think of `this` as a keyword that is evaluated at run time to figure out what the thing before the dot is.
You're not going to get much action on this question on Reddit, b/c it's not really a forum set up to handle these kinds of posts. You'll get more response on StackOverflow or on forums for the GMail API. Good luck!
Pretty sure even if you declare it inside the scope of the function, it overrides it. try setting var self = 'x' in your browser console then type window.self to see what happens. here's my output... (I'll admit, I was surprised when I found out) --------------------------------------------------------------------- window.self Window {top: Window, window: Window, location: Location, external: Object, chrome: Object…} var self = 'x' undefined window.self "x" 
ok, it doesn't work the same inside a funciton (function(){ var self = 'x'; console.log(window.self) })(); console.log(window.self); both point to window.... but it's still bad practice, forget the var keyword and window.self is gone! 
That's good to know; I didn't see it in the MDN article.
let is not yet available in chrome, safari, or ie, so I wish we could use let, but we can't, and if you forget to use let you have the same problem. You've defined a new global variable.
Yes, I think that would be more appropriate title. The script will not work in node.js for example.
yup, but you can use let in node with the --harmony flag. And there are transpilers to let you write ES6 code for the browser too. I'd not do it for enterprise stuff but for pet projects, I'm all over it. 
I use this: var Utility = (function() { // package var api = {}; // private var private = 42; // public api.public = function() { return private; }; api.x = 5; return api; })(); Utility.public(); // 42 Utility.private; // undefined It works great. I mean, it's a little more than just an object with some properties, but more often than not you're going to run into a situation where you need more flexibility.
Thanks for the replies! The "problem" here is that if I'm hiring a guy to do design, or write CSS etc. I know what to look for and can evaluate their skill lever pretty easily. But since I'm not that skilled with JS myself, it's more difficult to know who I should hire and who to run away from :)
The term "static class" as far as I know only seems to exist in Java. It is kind of a nonsense term which only make sense in Java because Java doesn't support plain named functions without classes wrapped around them. Also, static classes in Java never meant to de instantiated. Javascript does have functions. What you want to make is a 'module' or library of functions, or even just group some related function inside one object to keep things neat. var FooUtility = { bar: function(barFood) { ... }, zyzz: function() {....} } If you are using Node or some other module system like AMD/RequireJS, then you would probably create a module to put your functions in. One advantage of this is that it is easy maintain private state inside a module; you just make your own variable inside your module and don't export it. Without modules, you can still use closures to get a truly private variable. (See http://www.reddit.com/r/javascript/comments/2ei4rr/is_this_a_good_way_of_writing_static_classes/cjzt2tx ) (You can also use a property on the function object itself to store data.) 
Why the fuck are people building blogs with Angular? 
I'm relatively new to coding - could someone explain exactly what this is useful for? I'm asking because at the moment I am looking for something that can read through text and detect any URLs, and turn them into anchors so that people can actually click on them.
Easily reading does not always mean optimized code. I'm sometimes writing chinese-like for loops, and trust me, you'll need me explaining you the loop to read it. But I'm 100% positive it'll be beyond faster than Saturn V.
the problem is, that you set the new value for playerX, but don't redraw the canvas with that new value. Your best option would be to refactor the function that draws your level (including the player) and call it a) on requestAnimationFrame (that's about 60 times a second) or b) every time a key is pressed. I would recommend option a. Other than that I see that you include your player in your map and draw it by stepping through the map and looking for it. Maybe it would be better to not include it in the map at all and just set its initial playerX and playerY directly. I also see, that you use very simple images as graphics. Avoid having to wait for onload by simply using fillRect(x,y,width,height). hope that helps. 
What sort of tasks require that type of optimization?
Games, for instance, if you assume that your typical player has a crappy computer, you'll want to minify the workload on him as much as you can.
Should be very easy to write a wrapper for this trick that solves these issues.
Event hubs can easily be abused/overused in JS. The angular docs themselves suggest you avoid $broadcast etc (although this also concerns perf issues in Angular). You need a high level strategy for your message broker if you don't want to get caught in a rats best of radio chatter. Having said that, how much of your code is testable? Is the presence of this side effect a weak point that makes the code hard to reason about/test? It might be a more endemic problem in the project?
I haven't worked with Gulp before so I'm not sure if it supports Underscore templates in the configuration.. I prefer with the folder object, but without functions. [Like so](https://gist.github.com/anonymous/e794de7722f2c60b5692) edit: The object name `tree` is kinda ambiguous, would rather use `path` or something.. can't edit the gist
Define shitty
OS X and Linux locations are both /etc/hosts. You don't need the /private prefix.
dude, use a bloody compiler to do that for you, write your own passes for an existing compiler (like closure). Your advice is bad advice, trying to do as a human what is best left to a computer. If someone writes unreadable code DO NOT HIRE.
Highly recommend: https://www.codeschool.com/paths/javascript Also in my opinion this is the best book to learn from : http://www.amazon.com/Professional-JavaScript-Developers-Nicholas-Zakas/dp/1118026691/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1408964857&amp;sr=1-1&amp;keywords=javascript+for+web+developers
Closure does not design a whole architecture for you. It does not design what fundamentally makes your game faster. Of course I would use a compiler, whenever I code I use one, I'm not that kind of stupid. What I am saying is just that sometimes you're going in a chinese-like loop / callback hell for the sake of speed. A compiler won't replace the thinking behind one's conception. It just minifies and optimizes a little bit what you've done. And if you think that a computer does that better than you, you're doing it wrong imo.
I'm not so sure I like that syntax, plus I would always prefer a hash map, with native ES5 I would just reduce: var a = document.createElement('a'); a.href = 'http://www.google.com/?search=blah&amp;search2=blah2'; var queryObj = a.search.substr(1).split('&amp;').reduce(function(map, item) { var query = item.split('='); map[query[0]] = query[1]; return map; }, {});
You said nothing about architecture, you specifically mention that you write unreadable for loops because you think it is faster. I consider that to be harmful advice and common amongst rookie/lone developers. Compilation (specifically AST level optimisation) can take many forms, closure prefers minification over performance, but nothing stops you from writing your own compile phases (we actually have several in our own usage of it). 
I mentionned in another comment in this thread that this is mostly about how you design a *game*. (These loops I'm talking about mostly occur in the updates or the gameloop, and are really obligatory architecture wise. So you have to design them well and efficiently.)
I agree with this method, I have used this many time for production code and has served me well. 
I've seen this before, but never had a good example to go off of! Thanks - I'm going to give this a try.
Do you see how "you'll need me explaining the loop to read it" may not be a great selling point for the OP, especially if you didn't have a long term working relationship. How do you find maintaining this code in the long term?
I would use this approach, but I'm most interested in being able to write methods inside the "class" that other code does not have access too. I couldn't figure out a way in fiddle to reference an internal helper method.
The intro video is very well done, the code looks very easy to pick up. The only fear I have with this type of library is the abstraction between the developer/designer etc and the actual JavaScript language. This could be any language behind the scenes. The real task here to provide the user a way to get the basic thinking of JavaScript then provide them a means to get more deeper into the language. 
Indeed I see.. Most of the time, an HTML5 game is not maintained, and very often, it is produced by a single person. So while speed is an important element, maintainability is really not. In a game, in my experience, you produce maintainability through a good architecture, which is readable. The details of the code are replaceable. The architecture matters more for clarity. Especially in javascript.
* What is hoisting? * What is a closure? * Do you know what the Prototype is? * == vs ===? * Immediately invoked function expressions (IIFE)? (also know as self-invoked anonymous functions) * Design patterns? Module pattern? * Have used any popular framework (backbone, angular, etc)? (this one could be oriented to know if the candidate knows how to structure aplications) Of course there are many more questions that i didn't mention. I chose some of the questions that i've been asked in the past.
Yea, sounds like it isn't the solution I'm looking for. Thanks!
I agree with this style. shorter, and if you're variable names are well done it should be self explanatory. 
Completely agree! That's exactly why I went down this path because if I changed one folder - I wouldn't have to change every place where those folders were used. 
 promiseFunction(inputData).then(function() { }); //Can be changed to promiseFunction(inputData).then($.noop()); Why have a then there at all?
zsh?
A bit slow to load and choppy/laggy performance on this end, but very cool nonetheless.
`promiseFunction(inputData)` will still execute even though you don't have a `.then()` attached to it. Try this in the devtools: function promiseFunction(inputData){ return new Promise(function(resolve){ setTimeout(function(){ console.log("done with " + inputData); resolve("result which isn't used"); }, 5000); console.log("running with "+ inputData); }); } promiseFunction("input"); 
In my 25-ish years of experience, the worst programmers I've worked with were trained in college. Though, I will say this: I see zero relationship between college education and skill as a developer. I don't think all of the bad programmers I've worked with became bad programmers because of college. I think people who want to become a programmer will tend to major in computer science in college. Some of them are passionate about programming and are attending just to further their knowledge. Some simply chose it as a major and eventually graduate and get a job. I do hope that your assertion is NOT that college produces the best and the brightest so we should do things their way. Are you saying that?
Define them inside a function. Have that function return an object that has whatever methods you would like to expose. Then everything referenced in the returned object is in a closure but cannot be accessed by any other means
was never sure if it would execute without the .then, but you learn something new every day. 
Yeah, definitely. That should be part of your deployment process. That said, I'd still highly recommend running the minified build through tests before every commit. Why push off something critical for later when you don't have time to fix it?
One place this is useful is when you create your own listener so you don't have to check if the listener exists or not: var listener = $.noop; module.exports = { setListener: function(func){ if(!func) throw new Error("There should probably be a better test here"); listener = func; }, triggerListener: function(value){ //do something here //then you don't need a test here listener(value); } }
No sure if OP is the owner of the site, but you got some funky issues with your responsive design. I'm on an iPad 4, using Alien Blue horizontally (80px or so thinner then Safari) and the page keeps flickering between media queries. 
+1 for Knockout - it provides a simple MVVM scaffold and basic two-way data binding. Anything that could be validated needs a proper model to act as Single Source of Truth, and Knockout is probably the lightest and most flexible MVC framework in common use that I've seen. I think it's a great choice for an interactive web form.
I don't buy that writing optimal code excludes legibility, that's just bad form. That aside, I think your scenario is outside the purview of the OP's question.
site owner here, thanks for pointing it out, it should be fixed...
I'm guessing they mean *per-pixel* scroll events. In iOS &lt;7, you always received a scroll event when scrolling came to a stop. In iOS 7, you began getting an event upon the start of scrolling as well.
or {}
You should be able to test xpath expressions in the chrome dev tools, using the `$x(...)` function. That may help you debug, if you're not already using it.
This is fantastic and I too was implementing something very similar (my spin was SPDY sockets for low-overhead/low-latency mux/demux over TCP). Then I found [jschan](https://github.com/GraftJS/jschan), which is a port of Docker's libchan to JS. It does everything I was planning to do and more, and seems to be hitting the same scenarios this lib is targeting.
I dig the idea of using noop to forego testing some things, but this article needs examples which better illustrate that concept.
I think it looks nicer 
the example that go me looking into it was jQuery.fn.myAwesomeAjax = function(url, complete) { return jQuery.ajax(url || this.url) .complete(complete || jQuery.noop); };
thanks - this definately looks promising!
If you are using CoffeeScript, I guess you do not care for: unless isGood doSomething() Or: `doSomething() unless isGood`
What if the result is a failure?
If you are just going to have your undefined functions throw exceptions, why would we prefer this additional method over the native "&lt;foo&gt;.&lt;bar&gt;() is not a function" exception? This feels like you've just added a custom exception to replace an existing exception that tells the developer _exactly_ the same thing. Am I missing something?
If you replace `callback` with something complicated (like `(foo.bar.baz.qux || $.noop)()` vs. `if (foo.bar.baz.qux) foo.bar.baz.qux();`) then noop is better IMO. If you want to call the result of a function and check if it exists then noop can also save you from creating a variable that you're only gonna use one time.
 if (callback) { callback(); } vs (callback || $.noop)(); Is not noop vs no-noop, it's just a different coding style. The first could be written almost exactly the same as the second: callback &amp;&amp; callback(); Or, if it suites your style: if (callback) callback(); Both of which are faster than the noop version.
I tend to use either a comment or a lone semicolon. Not in finished code, but when I'm just sketching something out and want to come back to it later. Or we could emulate python (pretty much ES6's mantra) and write `'pass';`.
Yeah see that's the thing i'm vacillating on - if all developers do a minification/bundle on their local computer, then they'll know about the problems early on. If we wait until everyone has checked in, and then do this massive minification/merge, it could create broken functionality in various areas and it might be harder to pinpoint. 
Correct, that is what I saw from other people too. Parallax libraries working just like desktops, for example.
**BEWARE**, this just caused my system to reboot....I didn't even get a BSOD. Win7 + Google Chrome 37.0.2062.94 (Official Build 290621) beta-m 
I see zero advantage. function process (item, callback) { doSomething(item); if (callback) callback(); } //////// VERSUS //////// // 'sanity' above versus 'noopy' below function process (item, callback) { doSomething(item); (callback || $.noop)(); } I see no benefit, not even aesthetically. I think the sane version is more readable, especially to anyone who doesn't know what the hell "noop" is (most developers?). And of course, as /u/Gundersen has pointed out: promiseFunction(inputData); //////// EQUIVALENT //////// (sanity above, noopy below) promiseFunction(inputData).then($.noop); So there's clearly no benefit there. Also, there's an error in the article's example, which is actually: promiseFunction(inputData).then($.noop()); `$.noop()` actually returns `undefined`, which isn't what you want. You just want `$.noop`. Which in actual reality you don't even want the `.then()` at all. *What a mess.* 
Ye this is less clean, not more clean. . and as pointed out you are adding a jquery dependency to a simple if statement, which seems retarded to me. What about the other option. `callback &amp;&amp; callback()`. Personally `if (cb) cb()`. How can you be clearer?
updated the post to include more relevant examples. 
I couldn't agree more. You don't code for yourself, sooner or later someone will have to read/change the code you wrote.
Be interested to hear your thoughts on how much you can use the dispatcher for. Do you use it for routing events, or is the router directly wired up to the views? How do you deal with patterns where you might want to fire another action in response to a previous action resolving? Or should all actions originate from user interaction?
Lets trade: code/fiddle for answers :)
In this case there is no need for one :) Will look at it tomorrow, since it is 11pm right now. Hopefully its not urgent
okay, thank you.
Did *this* cause your crash, or your combination of outdated OS and beta browser...?
My frames were in the teens on a late-2011 MBP. Will test on my gaming PC later. Aside from some pop-in, this doesn't appear to be very optimized. Saw no evidence of LOD (which is probably a lot of work for a tech demo).
The performance sucked and the graphics are terrible and uninteresting ( GTX 660 - which has plenty of power ). Honestly, they really reminded me of Blast Corps ( back on the N64 _in 1997_ ) and probably only look a bit better because my screen resolution is so high.
did you actually open it in a real ie9? get a vm from modern.ie. secondly, opening the iframe from plunkr, http://run.plnkr.co/0YDSZlZAfvl2jHZz/, seems to work fine in my vm. both the plunkr site itself and your script. also runs fine in ie11 emulation. http://i.imgur.com/KDrZztx.png so i'm not sure what your issues are?
I did not open it in real ie9, I don't have it available. I'll try modern.ie tomorrow. For some reason, opening plunker in ie9 mode for ie11, I was getting "access is denied" and some other errors. All of those issues that I mentioned are actually not issues in real ie9? That's comforting.
I've been trying out different approaches with flux as well. Instead of having stores I have one immutable state object similar to how Om has it's state in an atom. My components use a mixin which tells them which part of the global state they use. For example for a todo list component it looks like this: mixins: [state.mixin(['todo', 'items'])] Since it's easy to compare immutable data structures each component will only re-render if the path to which they point changes. My actions are functions that will generate a new global state and replace the old one.
There's also /r/threejs if you don't get an answer here.
not that i saw in my 2 minute test... but you have several points of possible failure there. running it through a third party site and running it in emulation are the big ones. get the vm, and try running it off a real server, just to minimize any weirdness.
Yeah, I think I will do so when I can tomorrow, since like you said, there are a few points of failure. As luck would have it, though, it worked fine in most of the modern browsers... just not IE9.
Which library are you using for the data structures? Mori, immutable? 
Code needs to be maintainable and scalable. If you have to go in and explain a *loop* in your code, this is bad code. I don't care if it shaves off 23ms in the end. You should be able to find a way to write readable, scalable, maintainable, and **easily debuggable** code that is also just as fast. It might mean you end up writing a little bit more code, but it shouldn't entail you writing cryptic gibberish that only you can understand... and *at the current time*. Imagine jumping back into some game you developed 2 years later and having to add in more functionality and reprogram other functionality. Which is going to be more costly in the end? The cost of time for a programmer to spend exponentially longer trying to rewrite your code, or the cost of milliseconds in time because the code isn't optimized? And let's be real here... we're not yet programming 1080p, GTA-style open world environment games in JavaScript, so I don't think we have to worry about 23ms compounding thousands of times. If writing cryptic code shaves off a vastly remarkable amount of time, your original code is poor to begin with. We are just talking JavaScript here. It's important to know when to optimize your code, and when it's JavaScript, writing cryptic "Chinese" code isn't a suitable solution for optimization. Plus, I guarantee you someone else out there already wrote something faster that is actually readable and maintainable. I agree with others that too many rookies and newbies are writing unreadable, bad code... nothing I hate more than going 5 levels deep of nesting in 345 lines of code and seeing variable names like *oc* or *a* or *bld* or whatever. How readable is this? var b = oc.split('/')[2].fl( (a + parseFloat(d.rJ)) * -1(e) , function(x) { k( null, [oc, x] ); }); What the hell is going on here? If you're that worried about optimization, you should be using better patterns in your code, and then you can just minify it... that's why Grunt and other tools are out there. Let the minification tools obfuscate the code, not your human brain. I see n00bs literally shaving off **one character** in their variable names because somehow they think it's going to be faster... and I don't mean run faster, I mean like, it's going to take less time to write the code if ONE LETTER is out of the variable name. Ummm, IDE's and intelligent text editors anyone? I see stuff like this all of the time: var frm = document.getElementById('cart-form'); Really? Is it REALLY going to save you that much time by naming the variable *frm* instead of *form*? Or better yet, *cart_form*?? You type it once, and then your editor/IDE auto-completes it for you until the end of time. 
Do you know anyone personally who has the reputation of being a good JavaScript developer? Ask him/her some personal questions about this. And more importantly, ask to see his/her code samples. Even if you're not a JavaScript (or other [insert language] ) developer, you can quickly start to see the "spaghetti code" that is a telltale sign of a noob. Here are some things to look for: 1) Does the code have tons of conditionals? (Do you see zillions of nested "if else" statements?). Are there massive chunks of code inside of loops? 2) Do you see the exact same code repeatedly, or code doing the same things repeatedly? This violates the DRY principle: Do Not Repeat Yourself 3) Does the code start nesting 5+ levels deep? Are we in "callback hell" here? Chances are things aren't abstracted enough and need to be refactored. 4) If someone is working in, say, front-end development, then do you see an excessive use of jQuery where JavaScript could be used instead? Front-end noobs tend to use jQuery for EVERYTHING. If the code is absolutely littered with: $('#some-element .something_else').find('.this_guy').each(function() { $(this).siblings('.common_stuff').children('.next').siblings('input').val( $(this).data('change-value') ); $(this).children('.hidden').data('form-val') = $(this).siblings('.common_stuff').children('.next').siblings('input').val(); $(this).children('.hidden').fadeIn(500); }); ... then walk away. We don't need zillions of chained methods and repeat queries of the DOM for the same elements. 5) Similarly to the above, if you're somewhat knowledgeable in HTML/CSS as you've mentioned, then you should also get an understanding of a good front-end developer, as he won't use non-semantic, non-descriptive class names or an excessive amount of data attributes or other problematic stuff. Once you see things like: var ind_tot = $('.input-2').find('.next-form').children('input[type="number"]).first().data('ms-ind'); ... walk away. Do you have any idea what's happening here? What is *ind_tot* supposed to be? Why are HTML inputs being given numbered class names? Why would an HTML element have a class of "next-form"??? What is the *ms-ind* data attribute referring to? 6) If you see developers using JavaScript to manipulate the CSS of *numerous* elements *all over the place*, walk away. 7) If you see 300 lines of JavaScript code that does something like move an element off the page, then fade another into view, then open a popup... something's wrong. 8) Is there a block of code 200 lines big inside of one click event? Something like: document.getElementById('add').on('click', function() { // 200 lines of intense code follow }); ... walk away. Code should be refactored and abstracted into chunks, blocks, functions, blah blah blah. There should be chunks of things that handle the operations in the 200 lines of code above... and then there should be like MAYBE up to 10 lines of code, MAYBE, inside of that click event. Little things like this. It's very easy for me to jump into a codebase and immediately tell the level of skill a JS developer has. Yes, I am a JS developer. But at the same time, I could definitely get *an idea* of someone's skill level in, say, Java, by looking at the code structure and asking myself some of the questions above (obviously not the DOM-related ones) as well as comparing this to other known reputable sources of good Java code.
beast me
You sir, have not developed for a stock android browser... :(
Fucking Apple, I got to track down negative scrolling fatal errors a couple years ago. How does one scroll negatively you ask? The magic track pad (tragic Mac pad) when hooked to the OS does a nice bounce animation in Safari. Where does that animation happen, in webkit, what is your scroll offset? -WTFpx... Safari is the new IE. Wait until you run into the history.popState firing on page load... Why? Because we're apple and fuck you, that's why. 
Can you even purchase and use a phone in the u.s.? I'd love to since it'd basically be exactly the same as the phone gap apps I do but with built in apis I need supported natively. I think it'll do well in the uncharted smartphone markets but I think I think it's impact as far as the US will be more of a testing ground that shows us where to head with the mobile Web vs a commercial success unfortunately. 
I don't think I would polyfill it just yet - it was only written a few months ago and only implemented by one browser, so I wouldn't be surprised at all if it changes before it's standardized.
Anyone else think flux is a little too 'enterprisey'?
That's because the page stops rendering when you start scrolling. That's how iOS achieved such responsivness on the iOS so early. All Javascript execution stops, inculding scroll events.
Eh...how many more "this is how you install nodejs" tutorials do we need in 2014? Do you plan on extending this into anything meaningful?
Orly dood?
This, Samsung stock browsers = fun fun fun :|
- The Dispatcher should be the only channel that can change the stores. So if you need to change stores, you should go through the dispatcher - I use https://github.com/rackt/react-router for routing. The routing is therefore in the root component. I use the params from the route to fire action creators in the componentDidMount function of different components to change the stores (getting data from the server etc.) - Stores should, in my opinion, NEVER fire events. It's important that the dispatcher does not allow a new dispatch while dispatching. This means that you will never have event chains which simplifies your app. We first thought that this is not achieaveble, but actually I never found a case where you could not model our cases with one event and waitFor. In other words: the change of a store must always come from the user (by getting async data or changing a store synchronously), then the app needs to render. 
Has anyone tested transitions on scroll @ iOS8? Since they break (finish instantly) currently on scroll (touchmove). For example toggling headers visibility (fade in - fade out with transitions) if you're scrolling away from top or back.
Complicated code !== Minified code
wow
Flux has just a few more components than the typical MVC two-way-binding JS framework. And if you've ever tried to do anything remotely complicated in either Ember of Angular (15 CRUD pages don't count), you'll appreciate the level of control you get from using the pattern instead of two-way binding.
Considering how simple it is, and that its basically a design pattern. No, not really.
@GaryBernhardt++
CJS totally, I use it since 2011. Straightforward, clean (no boilerplate), and cross-env, what do you need more?
I was really interested in FFos because it made hybrid apps first class citizens, but like most Mozilla products nowadays, I haven't seen a lot of critical mass behind it.
The site says the ZTE Open C is available in US. https://www.mozilla.org/en-US/firefox/os/devices/#zte_openc
Thanks, I only added jQuery as it was the first framework I found the function in. In practice I would write my own to minimise dependencies. However if your already using a framework with its own noop would it not be better to use it's noop instead of creating your own (no matter how trivial the code is) 
Immutable.js from facebook
An aside to us webdevs, WTF is [this](http://i.imgur.com/8vgzVNO.png)!? Registering an account is only available from 10-4EST? And they feel the need to state that prominently on the page?
Eh ? This makes no sense. The magic trackpad has exactly the same behaviour as the trackpad on my MacBook or the iPad or with a scroll wheel. They all have the same animation.
For me, developing for Firefox OS is a breeze. (In comparison to Phonegap for iOS/Android) I usually start developing in the browser like I would do for any web app. Then when I need to test the app on a real device or add Firefox OS specific features I upload the app to the device and use remote debugging. Couldn't be much simpler. You can remote debug about everything, directly from Firefox devtools. Checkout https://developer.mozilla.org/en-US/Firefox_OS/Using_the_App_Manager or better/newer https://hacks.mozilla.org/2014/06/webide-lands-in-nightly/ Everything's open source so you can write/find your own tools as well. Mozilla is doing a great job on getting the right tools and new APIs out there. https://wiki.mozilla.org/WebAPI I started very early and most issues I encountered are fixed / being worked on. Also, check /r/firefoxos
You can order the Flame https://developer.mozilla.org/en-US/Firefox_OS/Developer_phone_guide/Flame I've been using that as my regular phone and I'm quite happy with it, but I have to say that I am no power user... calls, sms, twitter and light browsing... If you order it, flash it to the 2.1 version instead of 1.3
Небольшая, но довольно функциональная коллекция JavaScript гаджетов для отображения на страницах сайтов. Стрелочные часы, графики и диаграммы, стрелочный измерительный прибор, 7-сегментный индикатор, механический счетчик. Со временем коллекция будет пополняться. Все компоненты доступны для свободного использования.
Da. 
Mostly because bower really only does one thing: it's a fancy wrapper around `git clone` that understands dependency resolution. Unlike npm (or component.io) it just stops there. It dumps the "modules" on your disk and leaves you to yourself. There's no standard way to go from there, other than a bunch of third party plugins for various build tools and, of course, yeoman. There's [bower-files](https://www.npmjs.org/package/bower-files), which mostly solves this problem, but because it's not part of bower itself, you find a metric crap ton of tutorials out there that tell people to put the entire `bower_components` into their public web root. And every tutorial that avoids that trap usually then goes on to re-invent the wheel square (e.g. by just looping over the folders in `bower_components` or hardcoding the main file paths). Also, bower pretends being a module manager, but it's merely a *dependency* manager. It makes no guarantees about the format in which those dependencies will be made available or how to actually use them. It's like someone saw npm and then decided to just completely fuck it up by re-inventing it from scratch as a dumb text file repository.
I would replace `this` with `UtilityClass` otherwise you might run into issues if you use the function without the object.
Is there any chance you could show me an example of this as a multi-dimensional array that uses all 7 array methods, but still accomplishes the same task? 
+ [+] The most developer friendly way to build mobile apps using javascript. - [-] It is slow compared to apps compiled with let's say CocoonJS + [+] Yet again - there are no magical building processes involved - you just throw the thing as is and it works.
Thank you very much! Makes sense. I'll keep on looking! =)
This post is SPAM. The Github page links to your business. Um, a lot of your posts are self-promoting. http://www.reddit.com/wiki/faq#wiki_what_constitutes_spam.3F
Http://javascript.info/tutorial/array Is the site I am using when referencing the 7 array methods, I have looked at their examples, I just can't get a clear picture in my head of how to implement them all without changing the end result of the program
I just see Droid or something stealing it from Moz before FFos gets big.
Its not clear what you want to accomplish. Do you want to store your Car instances in an array and use array methods on that array, or you would like to define array-like methods on your Car class? The former one makes sense but the latter one does not. Could you be more specific please? 
I need to use join, slice, shift, unshift, pop, concat, and sort on a multi-dimensional array, to accomplish the same function as the program I showed. This is a learning experience, not a functional program that will be used by anyone but me. 
I liked the article, but you have to admit, it was a tad on the nose. The whole thing was a forced comedic bit.
http://vuejs.org/guide/forms.html
Variables defined with 'var' keyword are given scope; those without the 'var' prefix are immediately considered to be in the Global scope. Here's a quick reference for how variables are handled by JS. http://www.howtocreate.co.uk/tutorials/javascript/variables
Your text doesn't match the image. There's also a `count =$("#slider &gt; img").size();` line in `showSlide` in the image. Regardless, defining a variable without `var` makes it global. You shouldn't do that, and any tutorial that relies on doing that for proper functionality is complete garbage. (I don't see `var` anywhere in that image, and if the tutorial doesn't use `var` anywhere then it's most certainly total garbage.) If the image is correct, someone just forgot to put `var` and this wasn't intended to be a global variable. 
Yeah I wrote it differently at first. EDITed. He seems to rely on not defining the scope of variables in the tutorial. Thanks for clarifying - it was confusing as a beginner.
Thanks!
Just so that I am clear: I should re-write his functions and re-define count as local in both the startSlider and showSlide functions?
Create a ParkingGarage class with a parkedCars property, which is a multi-dimensional array. In this array, one dimension should be the "floor" or "level" of the garage, and the other a collection of cars on that level. Use array.push() to add cars to a level, and array.pop() to remove them. You can also remove select cars with array.splice() Your data structure will look something like: parkedCars = [ [ Car('blue'), Car('red'), Car('green') ], [ Car('maroon'), Car('Black lexus'), ...], [ ... ] ] I'd suggest doing that as an exercise. Another option is for your car to have an occupants property, and use push() or pop() to make a Person object enter or exit the Car.
Javascript ES5 and less only has a notion of function scope. Imagine each function is an environment, and so any functions within that environment create sub-environments. All sub-environments have access to their parent environment's variables, but parent environments do not have access to their sub-environment's variables. Visualization for your particular case: window -- startSlider (can access window's variables) -- showSlider (can access window's variables) The var keyword is what scopes a variable to a particular environment (or function). By instantiating a variable without the var keyword, it is immediately hoisted to the top level environment. In your case, and in the case of the browser, this is window.
Thank you. That is a very good explanation.
&gt; I do hope that your assertion is NOT that college produces the best and the brightest so we should do things their way. Are you saying that? Obviously no. That would be stupid. In particular when talking about coding. What I obviously meant is that colleges / universities spent quite a bit of time and money trying to improve how to teach basic coding principles therefore they are probably the most solid examples to refer to. The fact that the resulting student is the new Jon Skeet or a perfect moron is not relate to what I am saying and to the topic in general, so I don't understand the point you're trying to make with your last post. Having a college education is obviously not necessary to be a good developer. We're discussing the approach not the person. Please don't mix the concepts.
Us javascript professionals and hobbyists are all chomping at the bit to do your homework assignment!
Whoever wrote that tutorial is an idiot. Creating global variables anywhere (let alone function scope!) is not the business. Also "use strict"
Seems like the only downside is that it'd be a bitch to refactor your UI, since the shape of the data in your atom would have to change accordingly
Here's [the CoffeeScript 1.8.0 changelog](http://coffeescript.org/#1.8.0).
&gt; AngularJS has the same issues as Prototype.js. I don't want to duplicate business logic in the html and in the javascript. (Why was jquery made again?) Angular Directives solve for this. Interactions created through Javascript should be attached to HTML elements through attributes, not complex, opaque selectors in a Javascript file. Elements' added interactions are clear based on their attributes. Moving implementation to directives removes any `onclick="dosomething()"` like code. It takes a while to get over the jQuery mentality of `$(element).doSomething()` but when you do, the clarity is fantastic.
Yeah I kinda hate unless and REALLY hate postfix conditionals. I frankly think they make code comprehension more difficult. Especially in the case of complex conditions. I opt to do: if (x == 'unacceptableString' || x &lt; 0 || x &gt; MAX_ALLOWED) $.noop() else continueDoingStuff instead of if (x != 'unacceptableString' &amp;&amp; x &gt;= 0 &amp;&amp; x &lt;= MAX_ALLOWED') continueDoingStuff () I've seen coffeescript abused very hard and tend to think not all features should be used (optional parens, optional return keyword, etc. Seen crap resembling: doFoo: -&gt; _.map a unless _.filter b =&gt; if b &lt; 0 then ax else bx Which is just disgusting. 
Yeah, it's something I've been thinking about as well. Most of the application would have a major dependency on this state object. Also when making a toy application I noticed the state object starts to resemble the component structure which might indicate strong coupling. There are some benefits as well. It's easy to check the current application state instead of having all your state in multiple components. Components can share the same state easily, although this is something you get from flux stores as well. The example Om likes to give is that you can easily revert state if you keep a history of the state object. Going to have to play around with it some more so how it holds up with a more complex application.
Good idea, but I think I would like it better if it used schema.org vocabulary (for example, for address and business descriptors). Ideally this should be compatible with Microdata and JSON+LD rich text snippets, and the resulting HTML should include one or the other.
It's "résumé". Learn how to write "é" on your OS. If your OS can't do this easily (as in, it's not iOS or OS X), then just use the term "CV" instead.
I remember when you posted on reddit a month or so ago, how are things going since then?
Meh. I think the variant spellings are fine as long as the context is clear.
I've seen so many projects "optimizing" and "automating" resumes. I just don't get it. Is that some kind of a hard-to-solve problem? Nobody gives a shit about the format of your resume, not online, nor on paper. Only HR cares about your resume, and only if they were instructed to filter out the unqualified candidates based on the education and/or work experience. As an interviewer I don't give a shit about what's in your resume, all I care about is that you can answer most of the interview questions. Your resume doesn't matter much - I haven't updated mine in 5 years. Once the word gets out about your skills, you will always have people willing to hire you.
Firstly, every OS can write accent marks like é easily (Android 4.2.2 in this case). Don't be an Apple tool. Secondly, for the purposes of project names and web addresses, it is perfectly fine to drop accents, so as to keep within ASCII-128. This makes things easier for dumb search engines, spiders, and sorting scripts to deal with your name. Thirdly, a CV and a Resumé are actually different things. A CV traditionally covers your entire work history, while a resumé often limits itself to the last few years, or just relevant experience. EU countries usually prefer a CV, while the US prefers a resumé.
&gt; every OS can write accent marks like é easily The only way I know of on Windows requires some tricky memorization of Unicode IDs.
No thanks. I'll stick to vim.
Ctrl-Alt-e
+1 for CV = curriculum vitae
Fuck this! I was brewing this idea for months! And now thsese guys implemented it
Pretty much no new language features, it appears
I was kind of waiting for a generator syntax
Here's an editor I made for JSON Resume: http://erming.github.io/resume-editor/ Feedback appreciated!
Should references have a way to contact them as well?
pretty impressive movement, congrats!
It would probably be a bad idea because I don't see what advantage at all it can possibly give. You're basically over-complicating something for no reason unless I'm missing something.
I'm getting a lot of the following: 502 Bad Gateway nginx/1.4.6 (Ubuntu)
Hahaha. Came to say something ... similar. Prob better executed by them anyway.
Feedback is welcome :-D
*cough* ... XML ... *cough* ... XSLT ... *cough cough* XML/XSLT is great for this kind of thing. Started to do my CV in XML/XSLT, with a view to rendering to HTML, Docx and possibly PDF via XSL-FO. Never actually had the time to finish it though when I was in a bind to get my CV out there quickly though and defaulted to Word. Got most of the way through the content and managed a transform for HTML, but didn't get it into a state fit for professional consumption. I'm not so sure that this is a good use for JSON. Also, I wasn't aware that a JSON schema was gaining any traction, I may have to check that out. 
I generally lurk quite a bit, but I found this to be quite interesting. While an interviewer might not care about your resume much, but by using JSON data, there is tons of room for innovation, and showing off your web skills. Maybe a developer could hook something up using a template engine, and do some cool stuff with it. I am kind of excited about this! edit: a word
There are a million ways to do it in windows, such as the Ctrl alt combos, alt num codes, or symbols/char map, but my favorite way is to just turn on your us-international keyboard setting in the language settings. Then, characters like tilde and gravure can be used as combining marks to create accents in a very intuitive manner.
Aw, too bad. The theme server is currently experiencing a `502 Bad Gateway` error. That means that the themes doesn't work right now, but the JSON editing should still work.
The idea is that there would be something more complicated to it. Maybe something where it had to retrieve a randomly generated key from the server to access the video file or something of that sort. Basically, it would replace the need for things like in the Soundcloud API when you're loading a player. Instead of having this: &lt;script src="http://connect.soundcloud.com/sdk.js"&gt;&lt;/script&gt; &lt;script&gt; SC.initialize({ client_id: 'YOUR_CLIENT_ID' }); var track_url = 'http://soundcloud.com/forss/flickermood'; SC.oEmbed(track_url, { auto_play: true }, function(oEmbed) { console.log('oEmbed response: ' + oEmbed); }); &lt;/script&gt; you would have this: &lt;script src="http://connect.soundcloud.com/player.js" track-url="http://soundcloud.com/forss/flickermood" autoplay=1&gt; I know I used an audio player as an example, but there are several video players that function like this too.
I think its down. Was working an hour ago.
Link for the interested: /r/WEBDEVBATTLES: --- ^This ^is ^a ^bot ^and ^won't ^answer ^to ^mails. ^Mail ^the ^[[Botowner](http://www.reddit.com/message/compose/?to=DarkMio&amp;amp;subject=BotReport)] ^instead. ^v0.4 ^| ^[Changelog](http://redd.it/29f2ah)
Signed up, will hopefully try and make at least one hangout although I'm sure there will be issues with time zones. However great idea! 
I've removed this post, since you're basically trying to get us to do your homework. We're all more than eager to help you debug something that you've already written, or to give pointers about how you could do it better, or to even provide answers for specific questions (like "how does scoping work in JS?"). However, I think we need to draw the line at outright "Here's my assignment, what's the answer?" posts. I understand that you're trying to learn JavaScript, but for programming, doing is really the only way to learn. That's when we come in handy -- when you've already tried it and you're stuck, or you get the correct output but you don't quite understand how and why. With that said, I would encourage you to drive your own learning, as opposed to asking us to walk you through each step; there's a handful of links related to learning JS in the [current sticky post](http://www.reddit.com/r/javascript/comments/2d3kns/looking_to_learn_js_have_feedbackquestions_about/).
This looks really good; even from cursory use I can tell it will be a nano replacement for me.
If you remove the set timeout then the 200 complete, it does take time but it does complete. I think with the timeout you are overloading the server with requests sand its taking a long time to complete. I'm not sure what you mean here by memory leak. 
getting the following errors on chrome XMLHttpRequest cannot load http://themes.jsonresume.org/themes.json. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://registry.jsonresume.org' is therefore not allowed access. registry.jsonresume.org/:1 OPTIONS http://themes.jsonresume.org/flat 502 (Bad Gateway) jquery.min.js:4 XMLHttpRequest cannot load http://themes.jsonresume.org/flat. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://registry.jsonresume.org' is therefore not allowed access. on the editor page without being registered
Thats funny, I did something like this on my portfolio site 2 years ago. [orryb.com](http://orryb.com)
Oh neat! This reminds me of my (nonstandard, of course) [JSON resume](http://keats.me/resume.json). I should update and standardize it!
I mean it seems that chrome's memory usage goes up and up and up until it ultimately crashes after you click "Start Test". I have some code in an app I'm building that essentially does the same thing as the fiddle example, only it doesn't loop 100 times (or at all) and the timer refresh happens every 5 seconds instead of every 1. After a few days of running the app, memory usage has climbed to over a gig, ultimately resulting in a crash (depending on the specs of the computer - some can handle 2+ gigs of chrome memory usage before crashing.)
502 bad gateway error.
What are the constraints for chrome? I think you might be over loading chrome, chrome is good but has limits. Maybe you need to extend the time between calls or wait until each call finishes before triggering the next. 
Thanks! Yeah, time zones is an issue. I ask folks to fill out a spreadsheet indicating their preferred times when they join. I'm also encouraging people to propose their own hangout times so that there'll be multiple options for everyone. 
[John-David Dalton pointed out that Underscore is failing at least one unit test in IE&lt;9](https://twitter.com/jdalton/status/504395826634825728), so you may want to hold off until they get that sorted out. Alternately, you may want to take a look at [Lo-Dash](http://lodash.com/), a faster, drop-in replacement for Underscore.
Cool, looking forward to a hangout, just waiting on getting approved to the group.
You can also consider using [Ramda](http://buzzdecafe.github.io/code/2014/05/16/introducing-ramda/) instead.
It's a simple key on my keyboard on windows..
You might try doing a YAML parser as well. If the goal is to have someone hand write their resume stuff it would be nice to use a language that was specifically designed to be human written. A nice bit about YAML is that (as of 1.2? maybe 1.1) it is a superset of JSON. So using it would keep current resumes working. The bad part is that YAML parsers aren't as performant as JSON parsers. Also, the browser doesn't take to kindly to it. Also, I'm gettin 502s on the examples.
I prefer to use angular modules and then just contatenate them into one app.js file. # cat *.js &gt; app.js Third party libraries just through SCRIPT tag
Your example is a poor reproduction because you're firing off requests faster than they can be handled; if your app is really setup like this, then you need to fix your app to be more efficient. If it's not, then you need to provide a more realistic example to demonstrate the behavior. It doesn't have to immediately cause a crash; if we can run it, and observe that RAM increases and is never reclaimed, then we can work to fix it. Regardless, the problem most likely isn't with jQuery. If I were to guess, you're creating closures that aren't able to be GC'd or something to that effect. I'd recommend reading Chrome's [JavaScript Memory Profiling](https://developer.chrome.com/devtools/docs/javascript-memory-profiling) page.
Perfectly good implementation, but way overkill. Not that it's a bad thing, just pointing it out. Keep coding!
urgghhh i just made [something like](http://metakirby5.github.io/resume/) it this weekend... wish i knew earlier :(
I would start with by installing Yeoman and using one of their generators to scaffold a project for you. You'll need to install NodeJS first. Then just follow the instructions on the Yeoman website. PM me if you need anymore help. The URL is yeoman.io
To be fair, if Soundcloud gets hacked and you're using their API, the hacker could still change the functions you call to do malicious things, so it's effectively the same.
&gt; Your resume doesn't matter much - I haven't updated mine in 5 years. Once the word gets out about your skills, you will always have people willing to hire you. No need to update your resume. It just reads Professional Troll. Nobody knows who you are, so your strategy isn't really working.
[Here is a great example](http://stackoverflow.com/a/17623252) of how to solve FizzBuzz in JavaScript. The key technique here is that it builds the result iteratively, which saves you from complicated if-else structures. This same technique is really useful when performing validation of things like forms or [objects](http://books.google.com/books?id=OIhuxqUO2TcC&amp;pg=PT145&amp;lpg=PT145&amp;dq=functional+javascript+validation&amp;source=bl&amp;ots=TaDetGTQJu&amp;sig=kwn_LbJleoJ1GP1N84Qn3gKaHlc&amp;hl=en&amp;sa=X&amp;ei=Qjj9U_7YDcHKigKS8YCwCw&amp;ved=0CDEQ6AEwAg#v=onepage&amp;q=functional%20javascript%20validation&amp;f=false).
Is this a joke?
I didn't see HR-XML mentioned anywhere (http://www.hropenstandards.org/). It is what we (well all US government) are required by congress to use for data transfer (at least XML wise, not sure if it is *the* required format) or not. I would hope this lib has (At the minimum) decent support for the domain models. (for the record HR-XML sucks....but we are required to use it). 
I would build out the entire tr string (with the td and the div inside) then append it to grid. something like... var gridStr = "&lt;tr class='row'&gt;"; for(;;;) gridStr += "&lt;td&gt;..."; gridStr += "&lt;/tr&gt;; $('.grid").append(gridStr); also, you're probably just using this example for fun/learning but jQuery probably isn't needed for something like this.
So it is, thanks!
&gt;There are some benefits as well. It's easy to check the current application state instead of having all your state in multiple components. Oh for sure; I think Om nails it by enforcing this pattern, since there's so many awesome things that fall out of it (trivial undo/redo, serializing your entire application state in a single pass, easy to reason about app behavior, etc etc) Post a gist or repo sometime you get a chance, i'm sure there are a lot of people who would love to see how this can be done in js (can't let the clojurescript people have all the fun!)
You could write a server component that implements [Google Cloud Messaging](http://developer.android.com/google/gcm/index.html), but I'm assuming that's out of your feasible realm seeing as you posted this to /r/javascript. 
Apologies, updated the self text. Can't have networking sadly, otherwise it would be fairly easy to accomplish. 
Hey, I actually did this. I used the xmlresume project on source forge. Pm me for details, it's really easy. My resume xml is under source control and easy to transform to any format. 
Why not compare to TypeScript, seeing as it's by the same author as C#? It seems that'd be more apples-to-apples... either way, I enjoyed the article.
Definitely, it's beginning of the series. First few tutorials will naturally be for beginners, but the level will gradually increase. Subscribe to the newsletter and see on your own.
http://en.m.wikipedia.org/wiki/Fizz_buzz
Hi there! I have detected a mobile link in your comment. Got a question or see an error? PM us. http://en.wikipedia.org/wiki/Fizz_buzz
Why?
I like this structure: &lt;project&gt;/ &lt;Grunt/Gulp&gt;file.js app.js // execute this file to start the server &lt;bower/node_modules/etc&gt; lib/ &lt;moduleA&gt;/ &lt;moduleB&gt;/ ... public/ &lt;built files, assets, etc. go here&gt; It's simple, and it allows you to make complete components rather than organizing things by their file extension (e.g. /stylesheets, /views, etc.). This of course works best with a browserify-style require system for your modules.
Yes, bad idea. Attaching methods to a canvas context is bad practice, will lead to annoying bugs for users down the road, may interfere with debuggers, and may impact performance... And singletons are almost always the wrong tool for the job. For WebGL, I'd suggest leveraging stackgl or another set of npm modules instead of trying to reinvent the wheel. It may also give you an idea of how to structure things. Low level GL wrappers, higher level renderers on top of them, and even higher level scene graph / game lib stuff on top of that. 
Mmm. It's true that Base file is not necessary but I think it's more expressive with the isDivisibleBy function into Number object. And what do you mean with "a little more module friendly"? Any example or link? Thanks!!!
In theory everything in TypeScript is, or will eventually be, in EcmaScript. So it wouldn't make for a very interesting article.
No. By definition TypeScript supports everything in EcmaScript. But any new feature in TypeScript is meant to be, in part, an experimental implementation for EcmaScript.
Not wanting to piss on your fireworks, but the grunt file yeoman knocks out is pretty hairy for a beginner, not sure if it's the best starting point.
something like this https://gist.github.com/chrislaughlin/2897c6e467e00f3c1c91 it would place nice with module systems, however this is also overkill. Keep up the good work. 
1: CommonJS has pretty much killed AMD, so use a CJS loader if you feel you need one, although there's nothing wrong with hanging your app of window if you're the sole proprietor. 2: I tend to break my apps up like this, for what it's worth /app /client /js - app.js (compiled, minified etc) - vendor.js - lib.js (reusable code) /css /server /config /controllers /services /views /tests /client /server /build (staging area for build tools) /src /client - you can break this up by component or feature /server bootstrap.js // launch the server... .someDotFiles package.json Gruntfile.js README.md I've taken a look at this myself, and there's no real canonical answer I've encountered for custom work. Angular projects, for example, can be broken up across the components, i.e services, controllers etc. bigger projects tend to group these components under a structure that shows the application features I.e. checkout/ login/ gallery/ My main advice would be to start with your tooling, work from your build chain out. Lot of folks like yeoman/brunch etc for this kind of thing, personally I find it a bit hard to decipher the Gruntfile it creates, it gives me the "too much magic" heeby jeebies. 
Stop trying to hide npm. Just stop.
Cool! I usually only use equivalents to `choice(array)` and `randint(min, max)` in my code. It would be good to be able to chose to use a safer alternative over `Math.random` when I need to generate some numbers in a row (Math.random usually returns the same value if called "too fast" multiple times).
It does a bit more than that :D its pretty cool idea tbh and I like developing with it. Although still needs some work, I really want to explore the testing framework!
The time taken to do a property lookup increases with each level deep the property is. Looking up `foo.bar.baz.qux` a hundred times, for example, will be slower than saying `var qux = foo.bar.baz.qux` and then accessing `qux`. So, granted, accessing array.length isn't as expensive as performing a function call, but it can still be optimised.
You should consider implementing the [Fisher-Yates algorithm](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle) for shuffling It's pretty much for (var i = 0; i &lt; arr.length; i++) { swap(arr, i, Choice.randint(i, arr.length - 1)); } Where swap swaps two items in an array (taking their indices)
You're not just writing code for computers to run: you're writing code for humans to read and maintain. Use semi-colons.
kk. I'm actually going to use https://github.com/mattdesl/kami as much as I can for the webgl setup.
Yeah, that's the idea, but with an html5 player or anything that would want to be inserted, really.
Sorry for the negativity, but what if I don't have a GPA because I'm not from the US? Seems like of the more localised parts of the spec.
If you need so many request definately use webSockets
Any explanation for the fact that a javascript function is quicker than a builtin method?
True. But 1) the article said calling length computes the length every time (implying that it counts the amount of elements sequentially), 2) who would ever have a property chain longer than maybe 4 properties or so, anyway?! 3) this would likely not be the bottleneck of an application
Can somebody please give me the ELI5 version of what Meteor actually is. Is it more than a Node.js framework?
It was nicely explained by Pleochism: "I believe they do it by constraining the inputs and failing fast. Native functions have to account for a much greater variety of pseudo-valid inputs, and also have to handle special cases (often inherited from older versions of browsers) like "If the input is an array with properties instead of indices, then do &lt;something expensive&gt;". Lodash can assume its inputs are proper arrays/objects and charge ahead, simply exploding if something doesn't match up. So fewer edge cases to check for, and better assumptions about capabilities." Though, he was talking about lodash, his explanation also applies to any non-native functions. His original comment can be found here: http://redd.it/2e26zu
Interesting result. I suspect it is faster because it is incomplete. Array.prototype.slice has to handle negative offsets, a second arg, etc. MDN has a complete shim implementation: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice#Streamlining_cross-browser_behavior I've seen this elsewhere (bind) where a very common case of calling a method is crippled by less used behavior, making it much faster to roll your own. I wonder how common this is and whether something can be done in the runtime to optimize the normal path.
The results of this benchmark are misleading and incorrect. Please read this article which does a better job of explaining the issue than I'm about to: https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments There is only one fast way to slice an arguments object in V8 and that's to do it inline, with a `for` loop, directly in each function that needs it. This is because passing the arguments object to any other function will leak it, making the whole function unoptimizable. This applies in other JS engines too but in V8 it's particularly significant. In libraries like bluebird, they go so far as to introduce an `INLINE_SLICE()` macro which expands to a `for` loop at compile time. 
Any better than [fastclick](https://github.com/ftlabs/fastclick)?
here's a fast implementation of the native `bind()` for reference: https://github.com/codemix/fast.js/blob/master/lib/index.js#L194
Yikes, that font is bad.
He's preaching to the choir at this point. Anyone who is using Underscore over Lo-Dash either hasn't heard of it or is willingly choosing an inferior product.
[Ouch!](http://kangax.github.io/compat-table/es6/) The main problem is getting it to work on all browsers. Without that, it'll just be a hobby for a while But very nice LINQ comparisons though
It's all preference. If you like typing the extra keystroke, go for it. 
One thing that I just thought of is defining three tasks - one for each "type" of person. grunt.registerTask('developer', ['mydeveloperstuff']); grunt.registerTask('designer', ['mydesignerstuff']); grunt.registerTask('release', ['mybuildteamstuff']); The only problem is that now every person on my team would have to type grunt developer or grunt designer or grunt release. I'm using visual studio, so this could potentially be a prebuild command, but then the problem is I'd need to ensure each "role" runs their own prebuild command w/o getting latest from source control and getting the wrong build command.
meh. I use CobolScript everyday, and this update seems like it should be 1.7.2. lol. 
I think you're giving them too much credit. The curriculum in college for computer science is typically either around historical information (learning known algorithms/data structures/logic/famous people) or programming. How programming is taught is almost exclusively determined by the experience of the professor. C dominated for a long time, so C was the language that most professors had the most experience with. That, I think, is the main reason why C is/was taught so often in college. It's become Java for the same reason. It might become python. If it does, it will be for the very same reason.
Require everyone to create a file called profile.conf and enter PROFILE=something. The build process should check for this file and give a helpful error message when it's missing explaining how to create it and what value they should put in it. When it exists, the build file can use it to determine what to do. Be sure also to add the file to .gitignore so it doesn't accidentally get checked in by someone, which would throw a wrench into this machine.
Cool! The new modularization will probably help keep your library slim. Just fyi, most of my efforts these days are toward stackgl. Once stackgl gets a little slimmer I may consider using it as a base for some kami modules, like kami-texture, kami-shader and kami-fbo. Kami will remain backward compatible but probably won't progress much more than it already has. 
As always with optimizations: please please please measure *first* before optimizing. Micro-optimizations like this are always going to be a trade-off between the code's complexity/readability and its performance. In many cases, the complexity/readability is more important. In this case, the very *slowest* method that was tested netted a runtime of 4.3 *micro*seconds. If you're writing a webservice and you're slicing args two times per request and then doing 100 ms worth of other work, an extra 0.0086 ms will not be noticeable and it's not worth the time or the code pollution to optimize. These optimizations are most helpful in really hot loops that you're hitting a gajillionty times. Use a profiler to find your hot code, and optimize your hottest code first, until the performance you've achieved is satisfactory.
eh as much as I like that, it's too much work to have them open a command line and constantly type that after each build (some of them build a lot). I think the solution i'll go with is to create different configurations in visual studio, have them select their config (once), and always use that for building. Each prebuild step (associated w/ that configuration) will then call the batch file that runs the grunt command (i..e grunt developer, grunt build, etc) Thanks though!
What about creating 3 diff visual studio configurations, and each one runs its own batch file that runs grunt developer, grunt designer, etc?
Ah okay. How did I not notice I response to the author of kami before? Haha.
That sounds very "Visual Studio"-specific. You generally don't want to check in files that are specific to your IDE, because not everyone will be using VS. In my opinion, Eclipse, Visual Studio, NetBeans, etc. are just the IDE of choice for the developer, but the project itself is built on a more agnostic technology like make, Maven, grunt, etc.
It turns out that slicer is nearly as good as an the inlined code in Chrome. Both are way faster than `[].slice`. Surprisingly, the inline version is the slowest in Safari. http://jsperf.com/argument-slicers
We're doing development in .NET and everyone here on our project is using visual studio, even our designers, however let's entertain that a moment.. You're saying profile.conf would be a grunt thing (I wasn't aware) and just having that file on your system will automatically run different grunt tasks? That actually sounds better if this is true.
yours is not a realistic benchmark because the rest of the function does nothing, so there's nothing to optimize. It doesn't expose the issue.
Cool, thanks for the answer! Looks like a pretty neat spec
I thought we moved past micro optimizations?
WTF. Why. Stop it.
Have you seen http://chancejs.com
Upload the video to some other host (google drive if you need it for free, amazon s3 if it may cost a dime) and only include the player on your blog!
My only real concern with using stackgl is its dependency on requirejs. Not something we've used in melonjs yet, and i'd prefer to add a second dependency for a library, when the browser does a pretty good job at loading js files specified.
Hmm... good call, I think we can use google drive. I'll see about that. 
Thanks for your response as well. I work for the gov't and they have tons of silly rules and protocols so I don't know if I'm allowed to host on YouTube because of the ads but the other guy's suggestion of google drive might work. Thanks to both of you for saving me headaches.
Hey, another reddit user and I were talking about a starting a weekly challenge just like this, with 3 month reddit gold prize and all. Idea stealing, or parallel thinking? I don't care, this is cool :) Glad to see this.
awesome thanks:)
Could you improve it, then? I don't know the inner workings of Chrome, but I would have expected the optimizer to balk at the whole function.
Removing, it doesn't have anything to do with JavaScript.
Meteor is a Javascript "platform" for building real-time dashboards and things like that. It offers three-way binding which means if you have many clients accessing a shared dashboard and one client updates something on the dashboard, the server pushes those updates immediately to all other clients in real-time, keeping everything in sync. Meteor uses [Atmosphere](https://github.com/Atmosphere/atmosphere) for its WebSockets/Comet integration, and normally requires a special host (no shared hosting with Node.js yet). Atmosphere is also a package manager for Meteor, similar to npm I guess. A bit confusing isn't it? [node.js vs. meteor.js what is the difference?](http://stackoverflow.com/questions/11461411/node-js-vs-meteor-js-whats-the-difference)
I wouldn't call it a crusade. After all, he maintains a version of lodash that is 100% compatible with underscore. He's just more focused on performance (as well as proving more features) (and also maintaing backwards compatibility :P).
Meh. Normally you shouldn't care, sure. These cases are still important, though. If V8 is failing to optimize a call, it's useful to expose that and hopefully get it fixed. At the very least, I like being able to better wrap my head around what's going on under the hood, because there are cases when I need to optimize something. Perhaps I don't need to optimize this exact this call, but understanding what's going on in cases like this helps in reasoning about performance issues.
Note - I do not actually support this talk. I just wanted to get feedback about it as to why people either agree or disagree with the speakers presentation.
try this - http://jsperf.com/leaky-args
Or they could have gotten a dozen PHP/Python/Ruby devs at 2/3 the cost. This is less a case *for Go* and more a case for *not Node*. Whenever I see *that* kind of criteria and they pick something not-obvious and relatively new, I have to question whether they're just trendhunting.
So, this just happened: http://i.minus.com/ihlWhdATJuoH7.png
Yeah Firefox doesn't suffer from this, but this is `node-benchmarks`
Yeah but then Canvas and WebGL. Now some of us care even more.
Can someone more familiar explain how this differs from Workers, as well as SIMD?
Ah! That makes a little more sense then. I did read Chrome, but I figured the optimization wasn't browser specific.
Are salaries for Go developers that much higher?
See this video from the creator of lodash/jsperf.com https://www.youtube.com/watch?v=NthmeLEhDDM#t=86. He talks about devs benchmarking these exact tests and why it's a bad thing to focus on.
There are far less of them, so typically yes.
Yes. All of this. You've probably just spent more time reading about fast array slicing than the time all your array slicing code will take, cumulatively on all of your code's future users. Just to reiterate the key point here: &gt; **These optimizations are most helpful in really hot loops that you're hitting a gajillionty times. Use a profiler to find your hot code, and optimize your hottest code first, until the performance you've achieved is satisfactory.**
right, almost no-one actually needs to even think about this. But *some* people do in *some* circumstances so it's frustrating to see these kind of naive / broken benchmarks.
Well written, well designed, very helpfull, and well thoughtout. Will definately bookmark, thank you
Awesome resource. Javascript Garden is how I really learned the language in the first place. If you're familiar with other languages, all you really need to know are the little intricacies and idiosyncrasies of the language, which this solidly covers.
I also edited my version while you were writing yours, and I don't get the same result. I use this as payload: return slicer(arguments).reduce(add) where `add` returns the sum. 
you're still not giving it anything to optimize, `.reduce()` is native code and `add` is in a separate function so isn't affected in this case. All this shows that µbenchmarks are hard to get right and should generally be avoided. 
Here's an idea, not sure if it would be better but it would do essentially the same thing. &lt;START&gt; var fs = require("fs"); var developer = {}; // the grunt options for developers var designers = {}; // stuff for designers var release = {}; var config = fs.readFileSync(process.cwd() + "/gruntConfig.txt"); var choosen = null; switch (config) { case "developer": choosen = developer; break; case "designer": choosen = designer; break; case "release": choosen = release; break; } if (!choosen) throw "Not Configured!!!" module.exports = choosen; &lt;END&gt; Basically you just need each member to create the gruntConfig.txt file in the same directory as the grunt file and put in their required build type. It will give grunt a totally different set of options instead of just using tasks to do the same thing and you don't need any arguments to be passed to grunt to trigger the switch. 
Great guide! 
Exactly. There are plenty of resources for people who have never seen programming languages before but not enough for those of us with experience in other languages lookign to jump into JS
Indeed, v3 of my benchmark now uses a simple for loop, and the difference is visible in both FF 31 and Chrome. Actually, in FF, the inline version twice as fast, regardless of the presence or the type of the payload. Slicer is still the fastest in Safari.
... or I could use Yeoman and the angular generator? Or did I miss something? The benefit of the latter is it is has a history of regular updates and some degree of industry conformity.
Small note on that suggestion: If you use a .js or .json file instead of using a .txt file, you can use a require() call to bring it in, rather than relying on FS. It also makes more sense this way, since you're storing a JS object in the txt file, anyways.
I think they're just suggesting "profile.conf" as an example -- Grunt doesn't actually rely on any file by that name. If you are specifically looking for a VS integration, you may want to check out this plugin: http://visualstudiogallery.msdn.microsoft.com/dcbc5325-79ef-4b72-960e-0a51ee33a0ff It will allow you to enumerate all the tasks in your GruntFile in the VS UI, so you could tell your designers to just click the "Designer" task in the Grunt menu.
long story short: because we want to be like tjhollowaychuk
Oh yes, I have. I think it's pretty neat. It's not really comparable to choice.js though
Does this &lt;something expensive&gt; required as per ES specs?
WTF? This presentation was done few months before TJ Holowaychuk announced his switch.
There we go! I was wondering why the sidebar was so broken. 
&gt; Or they could have gotten a dozen PHP/Python/Ruby devs at 2/3 the cost. This is less a case for Go and more a case for not Node. Go is compiled and statically typed, which is something that PHP, Python, and Ruby don't have going for them. 
Was a joke bro. Obvs not funny.
You rewrite the slow stuff in C.
Thanks for spotting that - fixed that and a couple of other typos. Nope, no video that I know of, unfrotunately. If someone else finds it, please post!
Hi, sounds like a really great project! Never played with HTML5 audio myself, but there are some examples of doing similar things to what you want to do here: http://stackoverflow.com/questions/7638754/html-5-audio-tag-custom-controls Basically you set up your own buttons/slider separately from the audio element, which then manipulate the audio via javascript. Here's some suggestions for slider controls. http://stackoverflow.com/questions/173046/is-there-a-simple-javascript-slider. There is an `&lt;input type="range"&gt;` which is probably the simplest. Hope this helps! Eric
Thanks! I will look into it.
You can get rid of the login mask and access the links, however the link basically fires up an iframe with a URL for the video. The url of the video is http://bcs.bedfordstmartins.com/videomasscomm/VC//VideoViewer.aspx?vId=c0a84dda:141b7361213ef8df4a-7ffb&amp;refId=id_2_1&amp;tab=0 however this URL has a server-side check that your logged in here... and sends a redirect to a "session expired" Thats all i could do in a few mins of looking at this, sorry 
On that note, has anyone noticed how much of a hot mess the Backbone codebase looks once you get proficient at js? I used to hold that up as an example of beautiful code.
Go has a garbage collector, which is something C doesn't have going for it.
Get the fuck out here. Grammar shit posting is still shit posting. Can't ever remember this word. Staff/stuff is also another one of my struggles
For those interested in static analysis of your code for memory leaks, the closure compiler has a pass for this. The paper that describers this: http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/40738.pdf and the flag to set on the compiler (set from java code in our build mojo - not sure if availible through the jar api, but you should anyway be building from a warmed up jvm imo) compilerOptions.setCheckEventfulObjectDisposalPolicy (CheckEventfulObjectDisposal.DisposalCheckingPolicy .AGGRESSIVE);
https://github.com/brainshave/ancient-oak
Weak maps use “weak” references as keys (so instead of a string, an object is the key). If the only reference to an object is in the specified map object, the object is eligible for garbage collection. they work nicely for caches, no need to worry about deleting keys and keys leaking memory
I don't think you are going to find a library which uses frozen plain arrays and also runs fast. These immutable libraries do a lot of data sharing behind the scenes to avoid copying and to bring down the cost of creating new objects. You can't do that when using plain array. A library which provides collections which support the same methods as Array etc is probably your best bet. 
Addy's kinda big :)
You are correct that they have the same distributions, but performance is very different. jsPerf is showing me that the fisher-yates algorithm is 40x faster for a 1k elements array and almost 1000x faster (even when cloning the array each iteration) on a 10k elements array This is the function with the swap inlined Choice.fisherYates = function(arr) { arr = arr.slice(); for (var i = 0; i &lt; arr.length; i++) { var swapIdx = Choice.randint(i, arr.length - 1); var buff = arr[i]; arr[i] = arr[swapIdx]; arr[swapIdx] = buff; } return arr; }
Yeah, it's a bit confusing. Thanks for the explanation. Do you know why they chose Atmosphere in favor of Socket.io? Also, pushing changes to all clients at once sounds heavy on the server. Does Meteor provide a solution for that or is it up to the developer to implement something clever?
Nice work, most of this reminds me of lodash or underscore but I would prefer to use native method. 
Yup, gives me: /usr/bin/resume 
Why do you do a make run for javascript? 
If you're using lodash/underscore, the native methods are always used instead of the fallback code if the browser/environment supports it!
So the un-minified version is basically unreadable. Please don't use one letter variable names. Your minifier will do that for you. 
You're right, now that I've shared it, I might as well make it readable. Expect an update.
&gt;Isn't this a non-issue in more modern browsers? Well according to this bug report as one of articles mentioned, it is fixed as of FF 3. https://bugzilla.mozilla.org/show_bug.cgi?id=376957 which basically fixes overriding array constructor ability that bug exploits &gt;Doesn't browsers only execute the source in &lt;script&gt; elements if the response headers has javascript as content-type? http://haacked.com/archive/2009/06/25/json-hijacking.aspx/ quote: &gt;Some of you might be wondering, “why not have the JSON service check for a special header such as the X-Requested-With: XMLHttpRequest or Content-Type: application/json before serving it up in response to a GET request?” I too thought this might be a great mitigation because most client libraries send one or the other of these headers, but a browser’s GET request in response to a script tag would not. &gt;The problem with this (as a couple of co-workers pointed out to me) is that at some point in the past, the user may have made a legitimate GET request for that JSON in which case it may well be cached in the user’s browser or in some proxy server in between the victim’s browser and the vulnerable website. In that case, when the browser makes the GET request for the script, the request might get fulfilled from the browser cache or proxy cache. You could try setting No-Cache headers, but at that point you’re trusting that the browser and all proxy servers correctly implement caching and that the user can’t override that accidentally. 
Sorry what are you asking the OP? Why he used JavaScript?
If you don't trust the proxy servers inbetween you're SOL anyways. The proxy might filter out the while(1); prefix for example. In any case, proxy-based arguments are moot with https which Google requires. Further, if the user's browser does not honor the no-cache header, it's a security bug in the browser instead of your website.
I feel like these need a submission statement. why is this reusable d3 library different than the other 2 to 5 that are out there? Edit: [made a thread for this.](http://www.reddit.com/r/javascript/comments/2eu7a8/proposal_any_link_to_a_github_library_must_have_a/) 
incredible stuff watch [this presentation](http://acko.net/files/pres/siggraph-2014-bof/online.html) to get an idea
Thank you!
Think of Atmosphere like a wrapper around two separate but related web technologies (WebSockets &amp; Comet) which unifies them into a simpler API. Basically, Comet is the older tech that allows a server to push data to a client, kinda sorta faking the bi-directional capability of standard TCP (WebSockets). Comet has been displaced by WebSockets recently, but not all devices and clients support WebSockets at the moment, so Atmosphere can automatically fall back to Comet for those clients. You as the developer won't have to worry about these details too much. Furthermore, since Atmosphere does use WebSockets, it can utilize a library like Socket.io, SockJS, or one of the alternatives as its underlying WebSockets implementation. Now, instead of writing code to harness Socket.io directly, you write code in a more abstract way that tells Atmosphere what to do, then Atmosphere passes the commands to the underlying WebSockets / Comet implementation. It also means your WebSockets library is rather interchangeable. Pushing data to all clients in real-time isn't that bad really, we've been doing it with Comet for years - with higher latency of course. [Smart collections](https://meteorhacks.com/making-meteor-500-faster-with-smart-collections.html) or a *message queue* can help balance the load for high concurrency situations, but Node.js is already quite performant in this area so you can sometimes get by without a message queue I guess.
Can anyone think of a use for this "trick" they show? Function.call.apply(Foo.prototype.method, arguments);
Filthy lies. Or good PR, rather. Tons of modules on npm are already being used to create isomorphic code thanks to tools like browserify. The reason meteor has its own package system isn't that it needs its own package system or that npm can't be adapted to their needs, it's a lot simpler: tight coupling. Meteor provides its own abstractions developers are meant to write their code on top of. The reason meteor has meteor modules is the same reason jQuery has jQuery plugins: it's convenient. I wouldn't be surprised to find out that 90% of the modules you find in meteor's package repository are just thin adapters that allow you to use meteor-style APIs to access code that is already on npm, component.io or bower. It's not that you can't write isomorphic code using npm (in fact, that's specifically what browserify allows you to do), it's that flooding npm with thousands of meteor-specific wrappers wouldn't be very helpful to anyone (especially when that code provides no value outside meteor and non-meteor modules aren't easily integrated). The reason meteor has its own package system is the same reason it has its own build and project management tool: it's a fully-integrated solution (more than just a "framework"). That's okay, but it's silly to claim it's got something to do with meteor code being isomorphic -- it's only got something to do with meteor code being *meteor code*.
That's a great demo, straight to the point and easy to understand.
I believe it was an issue still around ie8 or 9. Mostly I'd say why would they remove it? It's not really harming Google, but still would protect the minority of people using out of date browsers.
A proxy server won't be able to send the request using your cookies. 
Always, whenever anything is declared the new hotness - take it from a guy who got into a Ruby/Rails position back in 2006. That said, I didn't stick with it because I like front-end better. 
a million times this. they built their own package manager because they can afford to, and with the ultimate aim of locking people into their platform. This blog post is really disingenuous, especially the "this will blow your mind" bit, cringe.
wow, that's simply not true, I just tried this and the minified browserified version is ~280K, 10x less than what you said. here's my code https://gist.github.com/phpnode/acb7fbcbba00de9e3d99 It would be more polite of you to mention that you work for meteor when you're slandering the competition. 
I have incremented your popularity points on this post. Good day, Canada.
&gt; The industry's top Java get-together will feature a multitude of sessions covering JavaScript, including: &gt; &gt; Java versus JavaScript. The two languages will be compared and contrasted to determine which is the king of languages starting with "Java." Yeah, lets make a contest between Claw hammers and Soft-faced hammers to find out which hammers is the absolute king of all hammers. This is ridiculous. Working with any environment a few months will teach you, that your language pick depends on the actual problem you're going to solve. Edit: formatting
Thanks for this! Had no idea it was this easy. 
well.. doesnt look like ctrl c+v worked.. i'm sorry 
I would mostly agree...for any post of anything new really. There needs to be an upfront 'sales statement' on why I might want to use what you are posting. Just common sense IMO.
One trick is to use a one-liner or "bytebeat" -- details [here](http://countercomplex.blogspot.ca/2011/10/algorithmic-symphonies-from-one-line-of.html), and an advanced [example in 1kb](http://js1k.com/2014-dragons/demo/1953). Something I experimented with for a 4kb compo in the past is using PaulStretch's algorithm on bytebeat one-liners to create really interesting ambiences in real time. Example [input](https://www.dropbox.com/s/al0clnq3m3zmu07/input.wav) and [output](https://www.dropbox.com/s/vws2hpfnmjlfnta/out.wav). You have lots more freedom in 14kb, I bet a combination of [wavepot](http://wavepot.com/) techniques and PaulStretch would sound amazing.
In defence of meteor, meteor is making a heavy use of fibers. Packaging a npm module is not that useful. Making a package abstracting callbacks and async to make it play nicely with meteor is the way to go. Meteor would heavily profit from accessing the whole npm ecosystem without having to abstract anything. But abstraction is the key here. Meteor is trying to unify the node and clients APIs. That said, browserify is awesome. Just more bare bone and lower level than the meteor api.
What's the triple ampersand used for?
It is invalid JS code. Therefore it's yet another way to prevent execution.
Ahh, I see. I was wondering why I had never seen that syntax before.
Are you just going to any website and putting that in console? The console is for editing/testing/debugging the java script on the website you are on intended for developer purposes. If you made a javascript you could put this somewhere in the code. function youtubeWindow() { window.open("https://www.youtube.com/"); } Then in console you could type "youtubeWindow()" and then that would be a valid command.
We figured it out. We had to move the &lt;script&gt; tag to the end of the &lt;body&gt; and everything rendered as it is supposed to.
I saw your updated commit. I still don't understand how it works but its readable now :)
/u/thecodeboss is an hour-old account that has submitted four links to thesocietea.org. As the article isn't actually terrible and as I frequently submit my own content, I hesitated at first to report this as spam, but it's pretty flagrant. 
 function openYoutube() { if (confirm("Continue to youtube?") == true) { window.open("https://www.youtube.com/"); alert("YouTube has opened") } else { alert("You cock blocked YouTube"); } } You could put the file on your desktop then add a &lt;script&gt; tag into the html linking it to a local js file with that code in it. I'm sure there's a way to have that script always running using browser plugins but that I don't know how. Adding the script into the html would look something like this. &lt;script src="file:///C:/Users/yourusernamehere/Desktop/script.js"&gt;&lt;/script&gt;
This is why I never return just a JSON array in my APIs. Just put it in a hash like so: {"some_key": ["some", "data"]}
You hit the nail on the head...for now. The future of the two, I don't know. Historically, we've accepted Javascript as is, a dynamic language most commonly used in web browsers; Java, largely being it's server-side counterpart (Python being the other). The power of Javascript has largely been ignored (maybe even unnoticed) for quite some time. With Node.js, compilable Javascript-like languages (TypeScript/CoffeeScript), and libraries that push JS to it's limits (like LoDash), you can really tell ES6 is going to cater to these and the next generation of features. Javascript seems very young compared to Java, even though there are likely more Javascript applications than Java and Python combined (http://stackoverflow.com/a/993168). Given all that, my theory is, why not Javascript? It's possible that Javascript will become as capable as Python. Maybe better? Given the community size, it's feasible to say Javascript could win that war... Granted, all that is hypothetical, but it seems to have some people running for the hills. In Java's current state, it would be a lot of rework to make it a feasible language for web development. Have you tried GWT? It's awful. It just wasn't designed for it. It's crazy how just a few features added to Javascript open up a world of possibilities...
That won't help one bit. You can change the prototype for any object, not just for arrays.
Browserify is amazing, but I have to ask.. you are already using node, why bother with bower? I loved bower until I started working with npm. You just include all of your dependencies in the package.json and fire off 'npm install'. The you can just include your node modules using node's require format, and when you browserify it will know where to get it as browserify operates seamlessly with node. NPM literally does everything bower does, and more. It's kind of redundant to use both at the same time.
What exactly is LoDash? the explanation on the website is not very explanative.
I would be interested in hearing more about this and how it accomplishes the same thing.
LoDash is a performant/every-browser utility library for Javascript. It's goal is to provide useful functions that most Javascript implementations don't offer, or out-perform the ones that are offered. Largely centered around object/array iteration &amp; manipulation. If you're familiar with Google's Java library Guava, think Guava for Javascript. LoDash arose out of Underscore.js. [John David Dalton](https://twitter.com/jdalton) created it because he was unhappy that both standard JavaScript and Underscore catered to things that happen &lt; 1% of the time, such as sparse arrays, therefore driving down performance. But they mostly share the same features and are referenced in the same way (so one can be replaced by the other). 
As long as it's faster than regenerating the whole data structure each time, and prevents re-rendering large portions of my component hierarchy, it's better. Anyway, looks like nothing like this exists, so I'm going to take a stab at it.
and with precompilation, the overhead is very minimal (6k): $ echo 'h1 yo' &gt; rawr.jade $ echo "console.log(require('./rawr.jade')())" &gt; rawr.js $ browserify -t jadeify rawr.js | node &lt;h1&gt;yo&lt;/h1&gt; $ browserify -t jadeify rawr.js | wc -c 6179 
There are some packages that are available both between Node and Bower - like the very common ones such as jQuery &amp; Modernizr, but there is a massive shift in mentality between npm and bower. Npm is geared towards node modules, and therefore is better associated with node projects. Even if you're not using node, npm modules are usually geared towards server-side development or development tools. Node can also install things locally and globally, thus allowing you to install executable commands with npm (can't do that with bower). Bower is strictly client-side, and just about every client-side library has a bower package. If you do a 'bower search xxx', I promise you can literally find even the smallest client side scripts from a GitHub repo with just a few forks. Bower can't install executables, so you only use it to find and manage scripts you want to include in your main files. Bower is also language agnostic, so you can use it to find any sorts of packages including HTML, CSS, JS, and probably many others - but you won't really find anything server side. Bower and npm also differ with how their dependency trees are set up (where bower has a flat dependency tree), but the developer doesn't see that very much, so I'll refrain from citing that as an important difference. So yes, you may always not need bower, especially if you're doing server-side development, but they do have significant differences that give them both their own 'sphere of influence' Hope that helps to explain the differences, and I agree - browserify is awesome!
In my opinion, /r/TrueReddit is fundamentally different from /r/javascript, and that such a requirement probably doesn't fit here. I'll try to explain why I believe so. * /r/TrueReddit is 6x's larger than /r/javascript (300k to 50k) * /r/TrueReddit is a meta-sub and /r/javascript is not * /r/javascript is a technical sub and /r/TrueReddit is not That is to say, /r/TrueReddit came about because some saw "normal" reddit as becoming overrun with memes and pun threads, with little discussion-worthy content. But /r/javascript doesn't allow memes, and we also have guidelines regarding commenting practices to help maintain a semi-professional decorum. I also believe that the onus of creating a compelling 'elevator pitch' falls on the project's maintainer(s); I've even complained to these projects when I feel that their github readme is lacking. Further, we can always submit a pull request for improvements to a project's github documentation, which is a luxury that those in /r/TrueReddit don't have -- they have virtually zero ability to affect the content that's submitted.
Thanks! It looks as though he's responding to comments, so at least we know it's not a bot. I'll post a warning about the behavior, but I'm going to leave them up on account that it's not commercial spam (trying to market something) that I can tell.
I do appreciate the article not being terrible - I take that as a win!
&gt; /r/javascript is a technical sub and /r/TrueReddit is not To me, this makes the submission statement more relevant: we don't have time to burn on reading up on every library on github. &gt; compelling 'elevator pitch' falls on the project's maintainer(s) Then mandate that the submitter pull that chunk of text into the comments of their submission as a "submission statement". Mostly I don't want to have to go to github and read the readme (which may be very complex) to figure out if the submission is worthwhile. 
In terms of things that I know about and understand, is it anything like jquery?
Not particularly, no. jQuery is geared toward making things easier with HTML, through the use of selections. LoDash is concerned with only the JavaScript language. Because jQuery is so large and has a utility API, the two libraries do share some common tools, but those tools more so describe exactly what LoDash is as it does not pertain to HTML specifically: LoDash is a superset of these types of functions in jQuery: http://api.jquery.com/category/utilities/ And more or less, LoDash enhances these types of functions: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array 
I might have been a bit vague. LoDash is really only for functional javascript programming. Here is a blog post on JS functional programming with some added info about using LoDash/Underscore: http://tech.pro/tutorial/1611/functional-javascript
It's basically a small library that makes it easy to program Javascript in a functional programming style.
Node and it's eco-system are supposed to be cross-platform, with Windows being a first class citizen. You trample all over that.
Hi, what does `val = ~~((Date.now() - val) / 1000);`.
`~~` converts to int: ~~3.14; // 3 It's often used in codegolf, however in this instance `0|` would probably save a few characters! 0|3.14; // 3
Describes how I like mah porn
Good tip, I didn't think of this. I will update the code. Thanks!
Hey, I don't see the subtraction part of your code, but here is two problems I noticed: * In your HTML the body tag is inside the head tag. They are supposed to be on the same level, like this: &lt;head&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; * The part in your javascript which checks the amount of gold only runs once, when the page loads. If you want it to check every time your gold increases, you should put it inside the goldCount function.
[Image](http://imgs.xkcd.com/comics/standards.png) **Title:** Standards **Title-text:** Fortunately, the charging one has been solved now that we've all standardized on mini-USB. Or is it micro-USB? Shit. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php?title=927#Explanation) **Stats:** This comic has been referenced 766 times, representing 2.4159% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_ck3mudm)
You are wrong. Executing {"some_key": ["some", "data"]} is invalid JS code so it's basically the same trick as putting invalid JS in the start of your JSON response
&gt; var t = require('tcomb-validation'); &gt; var validate = t.addons.validation.validate; **Fugly.**
Because the "compiled" code will be bigger and in many cases the performance gains are neglible. JS engines and their performance have improved beyond recognition compared to what we had with IE6/7's jscript.dll. Also, performance is not the only thing to be gained by using jQuery. jQuery has a codebase that is thoroughly tested, something that such a compiler would have to emulate, too. In addition, you can opt to not use jQuery in those cases that need extra performance even though you use it everywhere else. That's what I do.
So are you saying that it would work and actually run faster, **if** it was implemented?
Because it would be premature optimization? Initially jQuery provided the APIs that were lacking and workarounds for existing APIs. For many things now there are native APIs available like document.querySelectorAll. So now often it is possible to do just fine without many of the APIs provided by jQuery. I think internally jQuery uses the new APIs anyway so there is no need to translate it to native JavaScript and there is no significant performance penalty for using it. Think also not only about the machine performance but the human performance: somebody has to support the code, read and understand it. But not sure that I understood your question well.
The point of jQuery is that you get compatibility with a wide range of browsers. That convenience has some overhead. If you write vanilla JS yourself you might have slightly better performance but you also lose all that cross-browser compatibility. And jQuery *IS* vanilla JavaScript: it's just a library. It's not magic. It makes no sense to talk about jQuery compiling to anything, because it's already JavaScript. If you kept all the cross-browser compatibility, all that a "compiler" would be able to do is inline some stuff, and that would have a very negligible performance impact -- it might even make things worse.
I've seen other libraries that do this sort of thing but this one makes sense and the demos are slick! Awesome!
Yeah I know, honestly it's something that bothers me too. But it's my intention to add other addons to `t`, so I would not pollute the main namespace. Any suggestions to change it to something less ugly? Maybe it's better to attach `Ok` and `Result` to the main function and to export only `validate`? var validate = t.addons.validate; var Ok = validate.Ok; var Result = validate.Result; 
Thanks, I haven't seen that before -- definitely some interesting ideas.
For really hassle free (JavaScript) dependencies, just use npm... ;) `npm install jquery --save`
Perhaps you could apply that same reasoning to your suggestion: What problem does your suggestion solve? If I submit a GitHub library without a submission statement, and it gets no upvotes, it disappears. Problem solved. If I submit a GitHub library without a submission statement, and it gets enough upvotes to get onto the front page, clearly some people like it just fine. So, the question becomes, what is the greater good of submission statements that outweighs popularity for links to GitHub libraries? What problem does a popular link create?
Think?
Thanks for being reasonable and actually discussing with me. I am just interested about this in theory. Maybe I asked the whole question wrong... Of course the library itself can't be compiled to vanilla, I specifically meant stuff made with the library which you understood correctly.
If you have a server side scripting language it would be easiest to have this set in the session and repopulated in the form, if available. The alternative would be to use cookies in javascript. A final approach, if you have your system on a clearly defined test host, is to set the username based on the url scheme.
Cookies are also out, the script is set to deny cookies and the software host won't change that. 
Analogous with your code but using fps throttle: (function() { var animate = _.fpsThrottle(function(mouseX, mouseY) { doSomethingExpensive(mouseX, mouseY); }); window.addEventListener('mousemove', function(event) { animate(event.clientX, event.clientY); }); }()); You can keep your obviously verbose code. In 2014 we use uglifyjs and dead code removal to get rid of unused LOC in third party libraries. Also considering I'm using lodash for other things than throttling (that library is constantly updated to be recognizably performant), I honestly don't see a problem with that added weight. Since the animate function is just passing mouse position to doSomethingExpensive. You can even do this: (function() { var animate = _.fpsThrottle(doSomethingExpensive); window.addEventListener('mousemove', function(event) { animate(event.clientX, event.clientY); }); }());
jQuery is written using vanilla Javascript. Then compiling jQuery to vanilla Javascript, means just in-lining jQuery functions. And in my experience inlining most of the time doesn't make any difference in performance as the cost calling functions in Javascript is way lower than the actual reasons that the program is slow. In fact sometimes inlining functions might make it slower, because JITs don't try to optimize big functions and they will inline functions automatically if think it will help things out. jQuery is just a abstraction. It provides convenience. In my experience it's not THAT SLOW, if you know what are you doing. Generally I prefer abstractions(assuming I know what's going on under the hood) because they will improve my productivity. But when I'm trying to optimize code and I see a hot jQuery function and I see I can gain from using vanilla instead of that jQuery function, then in that moment I need the performance rather than the convenience so I only use vanilla functions rather than jQuery.
I do tend to post links only to my content but always do it for the discussion and try to contribute to other discussions as much as I can, I think a 20/80 split of links to text content makes for good reddit :) 
&gt; What problem does your suggestion solve? Submissions without statements of worth would be removed from the sub. For instance,[ why should I care about yet another library on top of D3?](http://www.reddit.com/r/javascript/comments/2esw46/c3js_d3based_reusable_chart_library/) The poster should explain what sets this library apart. That library might actually be very useful to me but if I read the readme of every D3 library that gets submitted I'd be wasting my time. On the other hand, it might be yet another project that someone built so they could say they have an open-source project up on github. That post answers your other questions as well: 72% upvoted, but the top comment is me asking for a reason I should care about this library. People upvote without reading the README. Overall, I think submission statements would improve the quality of the sub. 
I'm just trying to compare existing graph drawing libraries. If you know how to improve rendering of a graph or aware of any other popular graph drawing library - please let me know: https://github.com/anvaka/graph-drawing-libraries Hope this is useful
How is this javascript related?
wow, great job!
Setting up browser deps + node deps with npm is totally possible, but in my experience it has added massive amounts of bloat to your package.json. 
What kind of bloat? 
No a very easy to read example, but this is a very small app with few deps using browserify to bundle. http://i.imgur.com/f3m75Fr.jpg If I did this at work, that file would be at least 300 lines long, probably more. Edit: this bloat is mostly caused by browserify having to shim jquery
indirectly. Considering most JS these days is written on Sublime Text it is something of an interest to the community.
Looks nice and easy to use. May swap from chart.js to this.
Yeah, but it is getting better by the update. Also, it is not out of the range of the technologies used to make it as fast as sublime, but well see how it develops. The thing is that Atom is actively developed and supported by both GitHub and the open source community and Sublime is stalling, that's the reason I chose it.
So I can start posting VIM articles in /r/javascript? Lol &gt;most JS these days is written on Sublime Text
Eh, my computer's fast enough it's barely noticeable. Also since it's still in alpha I'm going to assume it's going to get faster.
Would be way easier to just concat jQuery and its plugins and shim it globally. You could use npm or bower to grab the code, but bower makes more sense since most jQuery plugins aren't published to npm. See [here](https://medium.com/@mattdesl/gulp-and-browserify-shim-f1c587cb56b9). This way you also only need to expose `browser` fields for the plugins that need to be explicitly `require()`'d. Bloat in package.json is meaningless since you should almost never be editing it by hand. This is something that tools (like npm init or my proof-of-concept [shimbro](https://www.npmjs.org/package/shimbro)) should do for us. The problem isn't with npm. The problem is with libraries that neglect CommonJS, pollute the global scope, and don't handle dependencies correctly (like jQuery and it's many plugins). The only way we can improve the situation is by writing new code that doesn't use so many poor practices. This means using CommonJS, publishing to npm, using sane version numbering (semver), handling dependencies correctly, avoiding global state, etc. 
My question is: assume I have 2 hours per day for the next month. Should I improve my JS skills or learn Dart? 
I don't know any company that specialized in it. But if you are a decent JavaScript developer and know a thing or 2 about 3D you could look into http://threejs.org/ or look around in the three.js community for freelancer or something like that. There are also some other technoligies that focus on 3D within the web browser, but three.js is one of the bigger ones atm.
1. Don't use t as import name in your examples, use Tcomb. 2. Get rid of the addons namespace. Everything can just go in Tcomb, right? 3. Make namespaces require()able so people can use Validation = require("tcomb/validation"). Or even {Validation} = require("tcomb").
The CSS syntax is weird because document.styleSheets will only show valid CSS selectors. I'd rather do `.line:nth-line(n)` but no can do. 
1. you should be using classes for multiple tags, id implies one tag. 2. http://jsbin.com/yihoba/1/edit?html,js,output post code or GTFO.
In spite of /u/somethinghorrible 's bluntness, he's right on his first point; DOM ID's must be unique. Change the selector that you want to something much more specific; preferably one that is: * Only used by JS * Class or data-attribute based * descriptive of what it is intended for For example, instead of using select#color, remove the color id from your selects, and add the following classname instead: js-colorSelect (or similar, whatever naming style / convention floats your boat). Then, your code would look more like jQuery('.js-colorSelect').select2()
Agree with you. When choosing a library for a project, performance is just one out of many attributes to consider. For example I absolutely love API of [almende/vis](https://github.com/almende/vis). Jos de Jong, its authors is very responsive too. Community and documentation is great. So, many things should go in consideration. By the way if you know how to improve performance of any of these libraries pull requests are more than welcome!
Not sure if you really get what JQuery is for. JQuery and it's plugins are written in normal javascript. The reason in some cases it's slow is because they try to make it compatible with most browsers. There are a lot of JavaScript functions or features that are missing in old browsers and JQuery tries to resolve those incompatibilities which sometimes makes the code run a bit slower. EDIT: Websites like this http://caniuse.com/# exist because of browser differences, look at the JS API section and you'll see examples of features missing in certain browsers.
Awesome, thanks for the info - I'm starting to feel like a real redditor
Doesn't work in Firefox.
&gt; The poster should explain what sets this library apart. That library might actually be very useful to me but if I read the readme of every D3 library that gets submitted I'd be wasting my time. This does not persuade me. The votes are a filter that is supposed to tell you whether the library is interesting. Let's flip it around: If you can't trust your fellow redditors such that their upvotes are an indication a library is worth your time... Why would you trust their upvotes for a blog post? Why don't we require that EVERY submission have a statement explaining why the submitter thinks it's worthwhile, to save you having to read READMEs and blog posts alike?
Hmm, well, that would definitely be a good way to improve it. Thanks! **EDIT** fixed
Nice, I love messing around with GAs so I will have to give this one a try
It was about time.
Will do, cool test suite none the less :)
What makes &lt;canvas&gt; "the wrong technologies for illustration" Have you tried rendering large datasets with SVG on a mobile device? 
Well first things first i would recommend you to use jQuery, as it makes the DOM selection easier. For your problem, define a global variable price = 10; and every time you buy a gem, you can use price++; I hope I understood what you wanted to do.
Appreciate the response. I'm not a developer unfortunately thus looking for somebody/company that is capable of doing this. I'll try that community...thanks!
I was a member of the YUI team until a few months ago. I'm still at Yahoo now, just on a different team, but just wanted to give my own thoughts on this (*I don't represent the company or the YUI team*) . My software engineering career started with the YUI team - I actually joined as an intern at Yahoo because of [a Reddit post](http://www.reddit.com/r/javascript/comments/s6pij/summer_internship_w_the_yui_team/) on /r/javascript. I was pretty new to engineering in general back then, and as a biology major with no real professional experience, I didn't have an easy time getting internships. Jenny, the manager of the YUI team back then, really took a chance on me, and that really changed my entire career path. I solved a bunch of YUI bugs, added a few features here or there, and I always tried to help other folks on #yui on IRC, the mailing list, or in-person here at Yahoo, which I really enjoyed. I learned a crazy amount of JavaScript, some pretty advanced debugging / performance profiling techniques, and even gave some talks. Eventually, a lot of people always came to me first whenever they had a question about YUI, which was pretty cool. From the view of some people in the JavaScript community, YUI was always considered a huge, monolithic framework that was only good for widgets. I never thought that was the case - YUI pioneered a lot of the techniques that are popular in advanced JavaScript development today, like modules, dynamic loading, and creating logical view separation in your code. A lot of the influence in RequireJS / CommonJS / ES6 modules can be seen from what YUI did first, which people used to consider "over-engineering". With a lot of new development in JavaScript though (data-binding, tooling like Grunt / Yeoman, promises and other async handling techniques), it was always hard for YUI to keep up with new features while still being able to maintain backwards compatibility with the constantly deploying products that people were building at Yahoo. We had to support product teams while also building out the framework at the same time, and making sure the user-facing products were the best was more important. Eventually, it was hard when developers who were familiar with newer JavaScript tools tried to use YUI, but ended up having to spend quite some time with the framework just to get it working with the rest of the JS ecosystem. In the end, I wasn't involved with this decision, but I think it was the right thing to do. A lot of the YUI (now YPT) team and other front-end teams at Yahoo are now working on helping out with more cutting-edge core JavaScript work, like [internationalization and ES6 modules](https://github.com/yahoo/intl-messageformat), as well as building out [components for newer frameworks like React and Ember](https://github.com/yahoo/flux-examples). Yahoo still has a lot of really strong front-end developers, and working on these more important core components is more beneficial to both Yahoo and the JS community as a whole, than continuing to maintain a framework that's a walled garden. The one thing to take away from this is that no technology lasts forever, and in the end, what the user sees is the most important, whether it's JavaScript, Android / iOS, or holographic smartwatches. I'll be a bit melancholy today, but I'll raise a glass to YUI tonight. RIP.
It was more of when you buy a gem, the price goes up by a certain amount so you can't just buy each one for 5 gold. 
# Hi :) First, after diving deep into your sample, some basic recommendations which will help mastering front-end development, or at least JavaScript: * **Modularize** your sources. Meaning that you store your scripts in a separate file, your stylesheets in another, and your markups (html) in another. usually this means, you will have a .html alongside with some .js and .css files. Search google for recommended layout conventions. **TL;DR** separate different sources to different files in case of easier maintainability. [Reading](http://www.slideshare.net/fgalassi/refactoring-to-unobtrusive-javascript) * Don't pollute the global namespace unecessarily, you can always create a separated namespace for your objects, methods, variables. Omitting this recommendation could lead to name clashes with other APIs, also breaks encapsulation. **TL;DR** Don't pollute the global object. [Reading](http://speakingjs.com/es5/ch16.html#_global_variables) * DRY which is an abbreviation of *Don't repeat yourself*, in your code, you are writing *document.getElementById("yes")* four times. In every line that means, the runtime needs to traverse the DOM looking for the same node. In web/development, traversing the DOM is **slow**, you should really care about this. You could traverse the DOM once, and then **store** the node in a variable, and only reference to this variable when needed, discarding the unnecessary dom-travelsal this way. The code: Now the price of a gem is hardcoded into the sourcecode, while you could store this information in a variable. Then, when the user first bought a gem, you should increase the value of that variable. Basically replace every occurrence of '5' with a variable, like *gemPrice*, which is initially set to 5, and then increment this counter on every gem acquisition. Hope this helps :) Cheers
What is the main use case in your opinion? Couldn't the very act of styling the nth line to be bold or a different size change which line some text appears on?
I never felt YUI was bloated, but I did feel like it was overly Yahoo branded. The whole thing smelled of Yahoo, which is not a pleasant smell for those outside of its walls. Yahoo's design sense has always been bad, even with that new logo, and I think that may have had something to do with its lack of attention. Branding is very important, especially for the superficial reasons that sell. I bet if YUI had been rebranded it could have made a solid comeback like Angular did.
well then you can use price += certainAmount;
I can speak just about myself, not in general. I first met javascript in college 5 years ago, but i didn't do anything serious in it, only the basics. Since then, i'm a big fan of the language, and possibly i can say that i know enough about the language in general (i'm reading blogs, posts, twitter post, books about javascript for 2 years to be able to measure my skill lvl). Now, after college, i'm working in a company, working in a hybrid mobile project, which is huge. Lately i got an implementation task of a new feature (for the first time), and however i'm aware of the *do's and dont's*, and i'm able to write quality code, i have/had no affordable routine in writing thousands of lines of codes. It took me more time as i would estimate the feature, and i needed to refactor my code more times before finishing it. So my point is, knowing the language concepts is good, but i think, you need to be balanced between practice and knowledge, if you know what i mean. The sad truth, that i had no experience in writing code, but had good base in the language concepts. For my case, i was not balanced.
TIL YUI existed
I interned and then worked a year full time in building E a few floors above the YUI team. Being a front-end developer at the time straight out of school, I loved the resources available around me. Learned so much, esp. from Mr. Doug Crockford himself. Good times!
Thanks for the help! Since I'm relatively new to javascripting (2 weeks in), I'm still getting used to everything and how it works. At the moment the biggest problem I have right now is that the pricing of gold doesn't update in time to show how much it costs. Below is the main chunk of defunct code: function buyGemstone() { if (gold &lt; gemPrice + gemPrice) { document.getElementById("yes").innerHTML = " "; } gemAmt++; if (gemAmt &gt; 1) { gemPrice++; } gold -= gemPrice; document.getElementById("goldNum").innerHTML = "Gold: " + gold; document.getElementById("gemNum").innerHTML = "Gemstones: " + gemAmt; document.getElementById("buy").innerHTML = "Would you like to buy a Gemstone for " + gemPrice + " gold?"; alert("You bought 1 Gemstone!"); }
*Especially* with the new logo. Instant I saw it I thought "hey that looks like something the CEO designed". Turns out that is exactly what happened. It reeks of something "designed" by someone with 0 understanding of branding and how a logo fits in. When your company's name is a word that can either mean idiot or an exclamation of joy, the last thing you want to do is take all of the fun/joy out of the logo. They might as well change their slogan to "we're a bunch of yahoos here". That is just one of the many objectively terrible ideas wrapped up in the new logo.
Check out my slightly modified version: [http://jsfiddle.net/d0qjL4df/](http://jsfiddle.net/d0qjL4df/)
Welp, I'm currently 6 months into a YUI3 based GUI design.
For as good as the Closure compiler is, my first and last experience with the library and templates was a several-hours journey down a rabbit hole only to discover the reason for the problems I had- two of the components I was trying to use were deprecated, but that deprecation was only documented in the source code, not in any of the documentation or web pages anywhere. It left a bad taste in my mouth, and in the end I'm still favoring RequireJS + Angular for reasonably complex applications. Edit: To be fair to Closure, I ran into exactly the same problem with Dojo- I started playing around with it sometime around 1.7 or 1.8, when half the library had moved to AMD and half was still using the old version of requiring things. I couldn't wait around for new releases, and didn't want to bother hacking things together. Maybe I just hit a string of bad luck.
You'll always have to reference docs of a language! Don't worry about memorizing, it's more important to understand programming concepts that apply to all languages. I reference c#, SQL, and JavaScript stuff on a regular basis, and there is nothing wrong with that. Once you get the hang of the language it will come naturally, but doesn't mean you'll have everything memorized necessary. Plus, the IDE or Text Editor you use should help a lot with built in functions or objects you may use. 
I hear you. I've had a few experiences like that with other open-source libraries where development halts or slows down so bad that you just have to move on. 
It still exists, so that's not too bad.
Yeah that was pretty confusing, hard to put what I'm attempting into words. The problem I was having had to do with the Buy Gemstone button, as it would appear when you had 5 gold, instead of the gemPrice variable. So when I ran the program, I was able to see the "Buy Gemstone" even when I did not have enough gold to do so. Is there any way to post my code on jsfiddle like yours to show you what I mean?
Idk what you had in mind when you wrote this comment, but... If your issue is about what is vanilla js, then take a look at http://vanilla-js.com/ If your issue is about compiling to it, then I don't really have a link for you, but there are compilers which compile from-to the same languages (JS is probably the most famous language for this sort of thing; for example, see http://en.wikipedia.org/wiki/Google_Closure_Tools#Closure_Compiler). 
#####&amp;#009; ######&amp;#009; ####&amp;#009; Section 1. [**Closure Compiler**](https://en.wikipedia.org/wiki/Google_Closure_Tools#Closure_Compiler) of article [**Google Closure Tools**](https://en.wikipedia.org/wiki/Google%20Closure%20Tools): [](#sfw) --- &gt;The Closure Compiler is a tool for making JavaScript download and run faster. It optimizes JavaScript. It does not compile from JavaScript to machine code, but rather compiles from JavaScript to better JavaScript (for machine, not human). It parses JavaScript, analyzes it, removes dead code and rewrites and minimizes what's left. It also checks syntax, variable references, and types, and warns about common JavaScript pitfalls. It supports [transpiling](https://en.wikipedia.org/wiki/Source-to-source_compiler) some [ECMAScript 6](https://en.wikipedia.org/wiki/ECMAScript#ECMAScript_Harmony_.286th_Edition.29) code to ECMAScript 3, so that programmers can write JavaScript that uses those features, and run it in browsers or other environments that don't yet support them. (The Traceur Compiler is another Google project that supports transpiling ES6 to ES3.) The compiler is provided in three ways: &gt; --- ^Interesting: [^Gmail](https://en.wikipedia.org/wiki/Gmail) ^| [^JavaScript](https://en.wikipedia.org/wiki/JavaScript) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ck43qw7) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ck43qw7)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Is this for a company or personal project? Why did you decide on YUI in the first place?
Does this include Pure CSS?
http://jsfiddle.net/0y5fgnxk/ is the link. Check it out :)
A huge of dealing with a solution to a problem is understanding the problem precisely. And we've been talking about a very much vague problem, even with this last bit of clarification. You could get into such topics as a side project. Try spending 5-10 hours a week on this. - Read some books on programming language theory, parsing, optimizing compilers, javascript (understanding js as specified by its standard is needed for that sort of work), compilers construction, and so forth. - There are __plenty__ of tools available to help you do such kind of programming (source code analysis and transformation). - You can contribute to existing projects on this. - You can even go to the JQuery library project and contribute to it with performance improvements. You said in your question "if jquery is so slow". If that's really the case, you could take a look at the work being done to make JQuery faster and start contributing to it. I don't think I need to say that none of this is easy. 
Seriously, memorization isn't everything. Base syntax, absolutely, you can't get around that. However, library reference is still something I cling to on a daily basis. For the life of me I can never remember if it's Math.Pi or Math.PI without looking it up.
If you wouldn't mind would it be possible if you could get rid of/fix the bad code you just told me about? Im not sure how to go about that.
You're 100% right. We did something different with [Pure CSS](http://purecss.io/) and we got a completely different response. Open secret is that Pure CSS is really just YUI CSS.
Although I suspect you know little to nothing about YUI...
FYI, you just linked to the same URL as OP. If you thought OP made a self-post with copypasta, you're probably looking at RES's expando of the tumblr post.
Let me put it this way. jQuery is a library that provides utilities for working with the DOM and AJAX. Underscore is a library that provides utilities for working with Javascript objects. Lodash is an optimized replacement for Underscore that provides some additional useful functions. Some examples: * _.where(someArray, {a : 1}) would return an array of all items that have a field named "a" whose value is 1 * _.first(someArray, 3) would return the first three items of the array * _.pluck(someArray, "a") would return an array containing the value of key "a" from each item in the array * _.pick(object, ["a", "b"]) would return a new object that has only properties "a" and "b" from the source object In other words, it's a whole lot of useful utilities that simplify common operations when dealing with array sand objects.
Amen brotha
Ugh, sorry. I didn't know RES had an expando feature for tumblr.
/r/programmerhumor
I _think_ you might use this or something similar to implement a "text-vertical-ellipsis", right? I mean, "hide some lines of text if it goes outside of the box and replace it with '...' ". That would be awesome. 
Maybe RES should show a little tumblr logo on the expando to clarify that it's not just a self-post.
Can you link me to an article describing Angular's comeback (or just write it out yourself if you can)? Sounds interesting!
I like PureCSS a lot. I can get a great base framework, and have the added bonus of not reeking of fucking Bootstrap. 
A three person company, but I'm also a student and this project has been where I have learned Javascript. The design for the site requires complicated drag and drop (dragging objects into targets that are also draggable) and after reviewing my options YUI3 seemed to have the most capability in this area. It also helped that there was an example on the site that showed me specifically how to do some of the features I needed.
I guess it depends on what you don't like about the jquery datatables method of getting data from the server (assuming you mean this one http://www.datatables.net). I haven't used it, or any jquery plug-ins for that matter, in a few years but I recall the client side part of it being extremely simple. Things like pagination and keyword filtering with are datasets and Ajax requests are more complex on the server but that's sort of just how it is. What issues did you have with it you want to avoid? Edit: just remembered the one thing I did really hate about it was the use of Hungarian notation lol, but there was some way to override some of the naming iirc. 
This would be very useful!
I wonder what the Y stands for in YUI?
As someone that built a large application with yui2, with the utmost sincerity and due deference, thank goodness. About damned time. It helped make the code style uniform and helped us out with many standard patterns and we were thankful for it as new developers, but after spending some time learning JS and freeing myself from a monolithic framework, I am glad it's in my past. I think it's the right call too! EDIT: I hope dojo dies out too.
Yahoo employee officially leaks that yahoo are working on holographic smartwatches. More rumors to be made up soon. 
It's not like YUI is being deleted off the internet, there just isn't going to be any future work put into it. So if it's good enough for your requirements now, it's still a fine choice. Although it does kind of feel like buying an HD-DVD player.
memoization can lead to significant speed increases but remember it costs additional memory &lt;/badjoke&gt;
&gt; Many developers today look at large JavaScript libraries as walled gardens they don’t want to be locked into. With big projects like Dojo or YUI, it feels a little like joining a religion, and I definitely see why it scares people off. Even Angular comes off that way. There's a big market right now for tools people can incrementally work into their existing codebases without much fuss or learning curve.
Here's some of the history, not really sure I'd call it a "comeback", as it really didn't get that popular until released as an open source library. http://en.wikipedia.org/wiki/AngularJS#Development_history &gt;AngularJS was originally developed in 2009 by Miško Hevery and Adam Abrons at Brat Tech LLC as the software behind an online JSON storage service, that would have been priced by the megabyte, for easy-to-make applications for the enterprise. This venture was located at the web domain "GetAngular.com", and had a few subscribers, before the two decided to abandon the business idea and release Angular as an open-source library. http://web.archive.org/web/20100413141437/http://getangular.com/ &gt; Design web application in 3 easy steps. Introducing the &lt;angular /&gt; way to build web applications: &gt; 1) Create HTML/CSS templates with your favourite HTML editor 2) Copy &amp; Paste a single line of JavaScript into your HTML template 3) Annotate the HTML/CSS template with &lt;angular /&gt; conventions &gt; Surely you must be joking! You can't have a working web application in three easy steps! You need a web designer, software developer, database administrator and a web-master. You need a knowledge of HTML, CSS, JavaScript, SQL, and a programming language for your server (such as Java, PHP, Ruby, C#, etc). It takes months of hard work to build a web application! 
A harder to learn jQuery?
Good. Pure CSS is the best performing general purpose CSS framework on mobile browser's right now, which is a big deal for all my new projects. (I just wish there was a preprocessor version, at very least for changing variables). 
When I "drop in" lo-dash underscore, it breaks my code and I'm too lazy to see why, so I just went back to underscore which works.
Understand concepts like closure, scope, prototype etc. Don't memorise anything.
You can still use the two together. I believe Angular has a public externs file, but I'm not sure. Regardless, in your app.js you can still goog.require the services, directives, controllers, etc, and register it with your Angular app.
There [json-schema](http://json-schema.org/) standard. Enough to reinvent the wheel. (and we have enough MVC frameworks too. Stop to do them, please) 
At some point you'll have to move away from it, though. Unless someone else starts maintaining it. The web moves fast and one day you'll start missing out on new features web browsers offer.
You would have saved time detecting the deprecation status by enabling the corresponding compiler flag. Consult the [compiler command line api](https://code.google.com/p/closure-compiler/wiki/Warnings). One way to get deprecation warnings early (and many others): --warning_level=VERBOSE
Don't get caught up in think you need to memorize anything. The great thing about living in 2014 is that you don't need to memorize *how* to do anything anymore, only *what* to do. Memorization may have been important 20 years ago, when your only recourse was thumbing through stacks of outdated technical manuals, but any question you could possibly have about anything has now been solved on Stack Overflow 10 times in 20 different languages... Think of it in terms of pointers. You don't need to allocate a new chunk of memory for every piece of data that your brain needs to work with, it just needs to know *where to access that information quickly*. Also, if you're intelligent, unless you are being hired to write code libraries, you will be working with well documented libraries and APIs that negate the need for any in depth understanding of every little bit of the implementation.
Sure you can rewrite this to use a polyfill in this as well. I never stated that you can't. fpsThrottle only wraps a "computational expensive" function with requestAnimationFrame (or the polyfill if you'd like) to discard invocations until the browser has done rendering the frame. I can't divulge into the details on the project I'm using this in, though I would be happy to share if wasn't legally obligated to be tight lipped about it. However I can say it has been tested, and profiled in browsers that do have profilers and there haven't been any problems with it. You can't "benchmark" this issue with regular time deltas, it has to be analyzed through a profiler (such as the one in Chrome's and Firefox's devtools). I do recognize that performance is a concern and, if you'd like, I could write a follow-up blog post detailing all the nitty gritty details about it using something that isn't under NDA, once I have the free time to do so. The whole reason this piece of code was originally made was because some browsers (i.e. Firefox and most mobile browsers) locks up the renderer even though the application is able to keep up with the events, and it would be nice if I could use a throttle-like function without specifying a timer value, which I'm quite positive that I did state in the blog post. I also wanted to reuse this functionality without having to deal with boilerplate code. It doesn't have to be a lodash mixin, I just happen to use lodash for other purposes as well. I believe we have different definitions of what "concise" means, and that is okay. I personally prefer to use higher-order function concepts even with the added overhead it comes with. The overhead is frankly negligible. The added benefit of reuse (which we do have several points in the application where dragging the mouse and touch is concerned for "swipe" actions) is also a big one without much boilerplate code when using it. Concerning your constant barrage of ad hominems (attack on character fallacies) which is scattered around this reddit thread I have the following to say about myself: * I'm not really a child, being referred to as "kid" is actually very amusing. I'm in my 30's and married, while we don't have children of my own yet I do like to play with the nieces when they come over to visit. They're "kids" who constantly surprise me with how smart they are. It is both invigorating and inspiring. * I have almost TWO decades of Javascript experience (I started hacking in javascript since '96 which was before I started Sr. High School) and prior to that I wrote window applications in Delphi that I personally used. I've worked professionally in many programming languages from as those I despise (VB.NET, PHP, and Java) to those I like (Javascript, and C#). I dabble in few on my spare time (Python, Haxe, Go, Ruby, etc.). * I have experience working on web sites with huge traffic loads. Among my list of clients includes IKEA and Sony. Safe to say: they take performance and security issues very seriously. I also like to test things out before voicing an opinion and fpsThrottle works. It works surprisingly well. This is my "reality land".
Try buying the movie
What was the pricing like?
JSON Schema is wonderful. I read the specs and in the past I wrote a little (and obviously incomplete) implementation just for fun but.. I wonder how many of us use it on a daily basis. My hope is to build tools to ease the development phase (hence the emphasis on debugging), not the best theoretical validation library (probably I would not be able :) A striking example is propTypes of React: I wonder why they did not use JSON schema, but have developed a custom solution. I can't speak for the others but I can explain the reasons why in most cases I don't use it in my daily work: 1. it'a new syntax to learn, a syntax that is used only for that purpose 2. it's verbose 3. the implementations tends to be relative big 4. if I want validate a bunch of form fields it's overkill but especially - if I want validate my domain models.. well they should already have all the information to validate themselves! This library was created to try to resolve these points and mainly the last one: if I write my models with tcomb, how can I exploit all the informations already contained in the models to validate the input?
I gave it a try, but it doesn't seem to work the way it is documented. I run the example code in Node, and I get an error, but the result is still displayed, and the callstack looks confusing: Hello Robert /home/myuser/Desktop/node_modules/type-guard/lib/guard.js:23 if (err) { throw err; } ^ Error at hello (/home/myuser/Desktop/test.js:18:3) at Object.&lt;anonymous&gt; (/home/myuser/Desktop/test.js:25:1) at Module._compile (module.js:449:26) at Object.Module._extensions..js (module.js:467:10) at Module.load (module.js:349:32) at Function.Module._load (module.js:305:12) at Function.Module.runMain (module.js:490:10) In any case, although it looks nice, I think it's a bit verbose, and doesn't suit my style very much. I rather have an API where I can separate the types from the function: var add = fn( [Number, Number, Number], function(x, y) { return x + y } ) var find = fn( [Function, Array, Any], function(f, xs) { return xs.filter(f)[0] } ) This way is more self-documenting, and the function is still somewhat pure, just decorated. 
Good riddance. I worked with YUI2 for a few months and YUI3 for two years and have never had such a bad experience with a non-niche library. The amount of code it loads for basic things like modals is staggering, and even on basic pages it could cause stuttering if you attached a few synthetic event listeners. Definitely bloated and over-engineered, and performance was always a bastard child. Great docs, though, if you're always using the latest version.
Upvote for the license
I was happy using Polymer for building web components, but it always makes me feel like there's too much stuff I don't really need to use. I just needed HTML Imports and basic Shadow DOM, and probably fine IE9 compatibility. So this is a set of tiny polyfills, some written by me, some by others, which works great. It's just 8KB minified and 4KB gzipped.
SemVer is still better than random increments. But right as long as major releases increment the first number (SemVer, ChromeVer, FirefoxVer, UbuntuVer, iPhoneVer etc) that's the most important part. 
Did you remix the music yourself? I seriously left your tab open in the background for a bit just because the music was so good! Oh and awesome project by the way :)
Typescript is great! I would recommend it any day of the week. My only complaint last time I checked is how are managed `null` and `undefined` function f(s: string) { return s; } f(null) // ok f(undefined); // ok f('a'); // ok f(1); // ko But it comes with a cost (extra compilation phase, .d.ts files, ...). It is not much of a problem but there is. And your precious and rich annotations, so useful in describing the domain, are discarded once compiled, it's a waste. I wanted a minimal solution in vanilla JavaScript, clear and understandable. And also something that I can inspect at runtime to extract those precious informations. The tcomb-validation library is an example of such a process: it extracts the meta info of a type to use it for the validation. If you already have a model of a form (and I think you should) the validation comes for free. Anyway, I'll experiment to mix and match TS and tcomb: the former for static analysis (ex. misspelled method names, ...) the latter to catch runtime errors that are difficult or impossible to catch by the compiler, thank you for pointing out.
I had to do some drag and drop work with meteorite project, I ended up html5 drag and drop but it's not the nicest think to use tbh
[the only cached version I've found.](http://web.archive.org/web/20091002205615/http://www.getangular.com/plans) apparently it is hard-to-find information.. also [this blog post](http://misko.hevery.com/2009/10/18/lowering-the-price-of-web-apps/)
Video coming in the next couple of weeks according to Paul Lewis from Google. I believe it also will include Nat Duca's presentation on Chrome's work to hit 60fps and Patrick Hamann from the Guardian's presentation on how they rebuilt theguardian.com to be super fast.
There doesn't seem to be much (public) development of Pure, should we expect a new release soon?
It's nice, but I still prefer chart.js, as it has basic interactivity (values on hover, etc.)
yup, same here been working with JS for 8 years and still can't remember if it is apply or call that takes the array of arguments. Still have to look it up. 
So in a case where an interviewer asks you to maybe do a "[FIZZBUZZ](http://c2.com/cgi/wiki?FizzBuzzTest)", it's pretty much an open book test instead of "Write me the code on the spot!", right? I understand that FIZZBUZZ might be an exception in the interview process, not the rule.
There are some big companies and projects that use YUI, I wouldn't be surprised if one of them took up stewardship. Also even if YUI doesn't provide the latest and greatest out of the box, you'd be surprised what you can do with an "old" javascript framework.
&gt; enabling the corresponding compiler flag These are some opinions: * compiler warnings behind off-by-default flags are not documentation * undocumented deprecations are a sign of poor maintenance * poorly maintained libraries are not worth investing my time in, when there are capable alternatives * I don't like investing time into reading the documentation for a component and writing code for it, only to discover that it's deprecated when I build the code. That's a terrible expectation for your end users * The closure library reminds me of what would happen if a bunch of Java and AS3 developers sat down and decided to write a JS library. Nothing wrong with that, but it's not my style, and I'm not going to lose sleep over not using it Again, this was based on my experience some time ago; I should hope things have since changed. After having taken a peek through some of the packages you swear by, I don't see anything that's particularly unique, at least not enough that I would have to make the switch. I'm glad some people enjoy it, just not for me.
I know it works 100% on node v0.10.29. Tests confirm. Thanks for the feedback. The first line should say what the error is, what version of node are you using? The stack looks correct though. Nice, I've seen patterns like it before. I don't like wrapping all of my functions, which is my only real objection to you're pattern. It would be cool if you forked my work and created a version of it that used you're function wrapping pattern.
Nice, super useful! You could use ECMAScript 6 to set getters on the properties so that they're computed when needed and not when the object is instantiated
Done :)
Then practically *any* change will need to bump the major. People relying on undocumented features, statefulness of a module, specific error messages/exceptions, or even that the method will only perform one web request (when maybe your change starts using pagination) can all break someone's workflow. That's the nature of change, but it doesn't necessitate bumping the major version. Even if the api contract doesn't change (in terms of what methods/classes/fields are available to you), that doesn't mean nobody will be broken by a change. If i understand the author's point, it's that "breaking" is a meaningless concept. You have to predict all downstream workflows, which is impractical.
Closure is developed and deployed at HEAD, so it's difficult to maintain separate documentation. Right now, the canonical library api docs are out of sync or have broken links, because Google has internally deprecated the tool that generates them, and which has not been open sourced. In this light, it's easy to see why some parts are hard to discover and keep track of. However, for code related documentation there is no better documentation than the source code itself. All deprecated functions are documented with the @deprecated JSDoc (smart IDEs will catch it at development, and an alternative is grepping the source code tree, before you run the compiler). In my experience this doesn't indicate lack of maintenance (Closure, after all, powers the frontend of many of Google's properties, and new products have been released with it, such as Google Keep). Deprecated parts are kept in the source tree so that there's a path for replacement/migration, and whenever I've spotted @deprecated there's always a better alternative (which works, and whose tests pass) that is indicated next to the JSDoc tag. Examples from the current git tree: goog/ui/tabpane.js:54: @deprecated Use goog.ui.TabBar instead. goog/graphics/graphics.js:51: @deprecated goog.graphics is deprecated. It existed to abstract over browser differences before the canvas tag was widely supported. See http://en.wikipedia.org/wiki/Canvas_element for details goog/ui/sliderbase.js:1119: @deprecated Since 25-June-2012. Use public method getThumbCoordinateForValue. ...which is not too unsimilar to another massively deployed project's deprecation documentation: see [PHP deprecation docs](http://php.net/manual/en/migration53.deprecated.php). Because of the 'rolling' style closure is put out there it's hard to point at release versions or even dates when you want to mention changes. Managing the source tree could thus be an additional burden, but doing so is good investment. The rest of the issues you mention is down to style and preferences. A switch from a library or stack to another is a very important decision, so if nothing has made you switch then you are better off on your current path if you are productive.
&gt; But what's the downside of trying to follow it? If anything, the author is pointing out the flaws of using a versioning system at all, using semver as an example of why they're not particularly useful. &gt;SemVer tries to compress a huge amount of information — the nature of the change, the percentage of users that will be affected by the change, the severity of the change (Is it easy to fix my code? Or do I have to rewrite everything?) — into a single number. And unsurprisingly, it's impossible for that single number to contain enough meaningful information. I know that every time I look to bump the version on one of my dependencies, I always either go to the changelogs or try it out in test. Usually both. Neither of those are particularly aided by "major" or "minor" or "patch" updates, because a number doesn't tell me what I need to know.
Advertisements unless paid is probably my preferred method. People will pay a fee to remove advertisements. Or just a straight up payment up front after a free demo, locking the majority of the game behind a fee. Pay to play &gt; pay to win
Background info: I'm a JS amateur (as the code probably tells), and I wanted to make a fun way to detect keyboard layouts on websites. I know this has little to no usage, and I can't really think of a case where somebody would actually use it, I made it mostly to get better at JS, and for fun. So swipe at your keyboards and tell me your layouts! (PS: it'll only find your layout among a list of them, so if yours isn't there it won't find it, i'll add more, maybe)
Its good, from a mathematical and algorithmic-al point of view. :) Code isn't even bad. Don't beat yourself up about it. Good job!
If you can't write fizz buzz from scratch and have it run, you're not a programmer.
Product placement and other unobstrusive kind-of-advertising things don't have to be bad. Donations will probably net you quite little. Maybe adverts + pay what you want to remove advertisements? In-game real radio stations that pay you? In truth advertising sucks and paying people is quite hard. So you're in a pretty rough place. Nobody is motivated to fix it because advertising works so well (see also: Google).
I've had this idea of making HTML5 games with an "arcade game" styled monetization model: where it's 25 cents buy access to the game for 24 hours, $1 for one full week, and $3 for an entire month, and $8 for eternity.
Sure! * http://arstechnica.com/staff/2013/09/yahoos-new-logo-and-the-30-day-punchline/
How is this different to say, require.js, and how is it different to HTML imports?
The guy that wrote that is an idiot. Semantic versioning is necessary because it allows programmatic parsing and programmatic understanding of versions. This is very needed for package management systems and dependency management. If you want "pretty" version numbers for your product than do what a lot of companies do and use years or something broad in your marketing (Windows 8, SQL Server 2012, etc). However, these in no way refer to the versions of the internal components or constituent parts of the application. Visual Studio 2013 is internally referred to as version "12".
Check this out -&gt; http://developer.ukk.io/
If you can get enough web traffic, advertising can be a viable route. Donations can also help. I am usually put off by in-app purchases for a web game (and to a greater extent mobile games).
You should use something like require or browserify for this.
Bundling as a native app and distribute through steam (or whatever) as if it were native is also an option. It would take more work and might require writing some non-javascript code, but not too much.
I'm not very familiar with require.js, but on first glance I don't see any similarities. Please tell me if I'm wrong. Imagine you have a script that depents on a couple of other scripts that you use on multiple pages. Using the include or require function you only need to import your main script and import.js and not seperatly import all the scripts necessary in your HTML on every page. Also, adding new functionality that depends on other scripts is easily added, since you only need to edit your main script, not the HTML. It's obviously not usefull in every situation but I think it might be in some.
I'm using Node 0.11.13. Could this be the issue? Why am I still getting the result printed even though it throws an error? &gt; It would be cool if you forked my work [...] I already made [a library](http://dpaste.com/1S7B26B) some time ago for my syntax to work.
I rather like Path of Exile's method: free to play, with microtransaction purchases of visual effects that don't affect the actual game mechanics. You can see people in town who've bought things, but the game balance remains unchanged. It's a very refreshing balance between begging for money with a donate button and paying to win.
Yes you are right. In all honesty I haven't had to do a FIZZBUZZ test. But when I've had to "write code" is was pseudo code more to see your logic process or open book (i.e. Google). If a place actually makes you memorize an API and test you on it they have their priorities wrong.
Wow, really interesting, thanks for sharing.
Could you elaborate on the crappy-but-html5 bubble? And maybe how your friends manage to make a living of "browser games" - what kind of games are we talking about?
Thanks a lot for delivering.
Selling licenses to variety of publishers/portals. There was a time that you could make very low quality games and sell a license as long as it was HTML5
angularjs
You can't expect JavaScript itself to have an MVC convention, the same way you don't expect Ruby to have MVC convention. Rails to Ruby is what [Ember][1] to JavaScript. (In a sense that it's an opinionated framework.) [1]: http://emberjs.com/
It didn't detect my layout. I use [Colemak](http://colemak.com/). 
Not a problem. I didn't know about require.js, and I had no idea that this concept already existed. But it doesn't matter really, because I learned a lot of useful new things while making this and now I do know about require.js, so I'm happy with that. :)
I didn't know that, but I will try and learn about require.js en browserify. Thank you!
Added it, should detect it now! 
It sounds like you should create a snippet in Chrome devtools for this. Are snippets available in the regular Chrome? I'm using Canary. 
Cool - sorry,I feel a bit like a derailed this post! Congratulations for actually shipping something!
Thank you, and again no problem. It's mainly about gaining experience by having people comment on my work!
Can this use something like [primus](https://github.com/primus/primus), so that we can use our favourite websocket library, rather than just socket.io?
Sweet. Looks nice and concise. Yes, the issue was node 0.11.13. Apparently calling Error.captureStackTrace() before setting name and message on the error instance results in the bug you encountered. I've since fixed the issue and published to NPM. Thanks for helping me find this issue ;)
&gt; Unless it is documented, you should not make assumptions from your code about it. Yup. Versioning exists specifically to describe API compatibility. Undocumented features are not part of the API and are therefore not subject to versioning. So breaking undocumented features doesn't require incrementing the major version. 
What are you trying to accomplish? A random number between 0 and 9? What error are you getting? I think you have the parentheses in the wrong place. r = Math.floor(Math.random() * (to - from)) + from With 0-9 you can simplify it even more. r = Math.floor(Math.random() * 10)
&gt;If users start relying on implementation details instead of on the API itself, then yes, they should treat every change as a breaking change. But, if the user does what he/she should have done, and that is only rely on the documented public API, then he/she should be able to update when there are just minor and patch version updates. That's a nice sentiment, but it's not in sync with how coding and dependencies actually work. As an example, if the Sizzle or d3 selector implementation were changed slightly under-the-hood to between minor versions, this can (and does) impact people in production. If you're going over large enough data sets, this can matter a great deal - and even bumping minor versions can cause page crashes. This happens pretty often. That's a breaking change, but should the major version be incremented because *some* use cases are now slower or more resource intensive than before? How many use cases need to be impacted before it's a major change? How can you eyeball the impact of a change, and definitively say that it's either major or minor? &gt;every new version can introduce new bugs. But it does mean that you should be able to update without changing any code "Should?" That's noble, but if bugs can occur at all, it means you have to spend a ton of time integrated so that bugs *don't* occur, making semver largely pointless. If you're the kind that rolls code to production because only a minor version changed, you're going to cause revenue loss. So if you need to check the changelog and retest in int anyway, why bother with the versioning? Why not just bump a build number, or a public release number? The versioning isn't helping anything, it's just trying to absolve responsibility from the downstream consumer.
TLDR: You have an infinite loop. 'sw' is 0-9 indexed and you use 'r' which can be 1-10. Thus, sw[10] will never properly work as: if ('undefined' == "false") // sw[10] == "false" will never evaluate to true and w will never get incremented for the 10th time. Long version: Please use formatting next time... Is this what you posted? function run() { var count=1; var r=0; var w; var sw = ["false","false","false","false","false","false","false","false","false","false"]; var randnum=[0,0,0,0,0,0,0,0,0,0]; var to = 10; var from = 1; w=0; //random number 10 while(w &lt; 10) { r = Math.floor((Math.random()*(to - from + 1)) + from); if(sw[r] == "false") { sw[r] = true; // switch to true randnum[w] = r; window.alert("sw["+r+"]"+"=true"+"array number"+count+"piece"); window.alert("array index w value now" + w +"array satus"+randnum[0]+randnum[1]+randnum[2]+randnum[3]+randnum[4]+randnum[5]+randnum[6]+randnum[7]+randnum[8]+randnum[9]); w++; count++; } } for(i=0; i&lt;10; i++) { document.write(randnum[i] + "&lt;br&gt;"); } } Are you trying to generate a list of random integers without duplicates between 1 and 10, into an array of length 10 and then write them to the DOM? Here's a simplified solution, that uses an Object as a set that tracks already used numbers and ignores them: function run (from, to) { var i = 0; var length = to - from + 1; var r = new Array(length); var seen = {}; while (i &lt; length) { var rand = Math.floor(Math.random() * length + from); if (!(rand in seen)) { r[i] = rand; seen[rand] = true; i++; } } return r; } var x = run(1, 10); Edit: Just for future reference, I wouldn't try and use Strings for boolean values. var sw = ["false","false","false","false","false","false","false","false","false","false"]; Should be: var sw = [false, false, false, false, false, false, false, false, false, false]; ... if(sw[r] == false) { 
Javascript has booleans. Please stop quoting false and true. 
Could you ELI5 what CocoonJS is? It seems like something similar to phonegap maybe?
Second time I've seen that posted here. One *huge* red flag I'm seeing is a lack of 'here's the games already involved!' on that website. Why should they get 30% of *anything* anyway? They're not very well known - I can't see it generating all that much in profits. 
PSA kids: If you want a game, buy it.
I think this is in response to John David Dalton (LoDash) blatantly showing off that 1.7.0 had a broken feature and he released it anyway.
It is like phonegap except they have reimplemented canvas to work on top of opengl. So you get a pretty fast canvas with the same api. As a trade off - your game needs to be 100% canvas or webgl. DOM/HTML will not work. So it is a chrome javascript engine (v8) but with custom renderer (not webkit) 
Idk, he probably did not foresight that he will need a budget to buy some games for this risky platform first :)
In no way am I describing using players as mining nodes. As far as bitcoin system functionality, this would be akin to downloading the blockchain and running a verify. It's the equivalent of verifying an MD5 hash on a download.
For those wondering, this is Apple's Speedometer benchmark based on various TodoMVC's with different frameworks (and plain JS), and not a geolocation based velocity API.
Semver is not that hard. Bump major when you break public API, and stop caring about what the number 1 or 170 represents philosophically. It's just an integer. Anyone relying on undocumented code should not expect it to work across versions. If your library is really popular, think about pre-releases to minimize issues with new versions. Semver isn't perfect, but the idea of forgoing it completely in place of arbitrary "romantic" versioning is complete insanity. 
Wow. This really is a game changer for prototyping at the console. Can't wait to tell my co-workers about this.
The author also fails to realize the difference between == and === ("Boolean balderdash") yet relies on it having a different meaning ("Comparison craziness") EDIT: I just realized the author also hasn't read what Math.min and Math.max actually does and assumed it to return the smallest and largest number which can be represented in the language.
The Author seems to not understand a lot of parts of the jvascript language, not just floating point numbers. For example in the last part: js&gt; true+true===2 true js&gt; true-true===0 true From this, he concludes "Ah. It looks like true is equal to one." No, it's not. But you're trying to use arithmetic on booleans, which converts them to numbers. On top of that, one segment of the article was basically copy pasted from the famous wat talk. 
I see no Javascript in the link.
same feeling! just not sure why would I not use a static HTML page with some links to wzrd.in such as &lt;script src="http://wzrd.in/bundle/backbone@latest"&gt;&lt;/script&gt; ? Why would I use the requirify module instead?
Need some code to identify what is going on... When you say 'load' are you referring to http://api.jquery.com/load/ or http://api.jquery.com/load-event/ ? If using ajax, I'm surprised it does anything due to same origin policy -- the webp file in the original source doesn't have any CORS headers so you would normally be unable to load it. The thing that really interests me is the webp format -- this should, I would think, only get served to blink-based browsers if they are sending specific request headers. (I had actually not heard of the format prior to seeing this -- firefox serves it as just a file, then [I read some bugzilla](https://bugzilla.mozilla.org/show_bug.cgi?id=856375) and am now convinced I've been living under a rock for the past year.) Is there some sort of API you are calling to get this thumbnail -- or, more specifically the html referencing the thumbnail? If you have that string, why not just run it through jQuery &amp; append to DOM?
&gt; That's a nice sentiment, but it's not in sync with how coding and dependencies actually work. As an example, if the Sizzle or d3 selector implementation were changed slightly under-the-hood to between minor versions, this can (and does) impact people in production. If you're going over large enough data sets, this can matter a great deal - and even bumping minor versions can cause page crashes. This happens pretty often. That's a breaking change, but should the major version be incremented because some use cases are now slower or more resource intensive than before? How many use cases need to be impacted before it's a major change? How can you eyeball the impact of a change, and definitively say that it's either major or minor? It doesn't matter if it is a minor or a major change to the code. If the documented behaviour changes in a backwards compatible breaking way, then it requires a major version bump. If it is undocumented behaviour, then it would be a patch version. Remember that the only thing that matters for semver is the **documented behaviour**. If changing undocumented behaviour crashes your application, then you didn't use the API correctly. If there is no documented behaviour, then don't use that library(Or assume every change is breaking). The semver version number doesn't say anything about changes requiring major or minor changes to your code. The only thing it says if backwards compatibility was broken which would possibly require code changes. Also, on a side note, nothing s stopping people using semver to bump more than one major version in one go. They could go from version 1.1.0 to version 5.0.0 if they want to convey some information about how big of a change it was. &gt; "Should?" That's noble, but if bugs can occur at all, it means you have to spend a ton of time integrated so that bugs don't occur, making semver largely pointless. If you're the kind that rolls code to production because only a minor version changed, you're going to cause revenue loss. If the new version has bugs, then report those and stay with the old version until the bugs are fixed. Testing is always required, but by checking the version number you can see if you need to change your code or not. That is the only thing that semver does. It gives an indication if *you* need to change your code. If it is minor or patch, then no, you don't need to change your code. If after (integration) tests you find that the new version is buggy, then don't use it. But whatever you do, don't change your own code to work around it for a minor or patch version. Unless of course you were stupid enough to rely on the undocumented library internals.
[1.10](http://www.datatables.net/upgrade/1.10-convert) has moved from the hungarian way. eg. fnDrawCallback has changed to drawCallback
I think you would have better results at least writing your documentation for JavaScript developers. IMHO CoffeeScript will be obsolete when ES6 is finally released.
link?
https://www.youtube.com/watch?v=3ZLlRQJp5Fg
You should be using `===` to test these against false. Many many things evaluate to false if you use only `==` `if (sw[r] === false) {`
If you didn't write it for public use, why are you posting it on reddit?
Huuum, it would be a good idea, I'm gonna do it soon, thanks !
I know, but it reminded me :P Plus I'm sure a blockchain can be run through a web server and sent a packet to the game itself. No need to put a blockchain in a Javascript game :P
Talk about a feeping creature.
 Math.floor(Math.random() * (arrQuotes.length-1)); `Math.random()` returns a value in the range [0, 1) where the [usual mathematical notation for an interval is used](https://en.wikipedia.org/wiki/Interval_%28mathematics%29#Notations_for_intervals) -- the parenthesis means exclusive, the brace means inclusive. That value is the multiplied by `arrQuotes.length - 1`, so that it's now the range [0, arrQuotes.length - 1). Then `Math.floor()` rounds the value towards zero, also know as truncation. This results in an integer in the range [0, arrQuotes.length - 1). This is then used as the index. Whoever wrote this made a mistake by subtracting 1. That means the last element in the array will never be chosen, because of the half-open nature of the range returned by `Math.random()`. They should have used `arrQuotes.length` without subtracting anything, which would have resulted in a random number over the range of valid indices. If you're modifying this to add more quotes, you shouldn't have to do anything special. As long as the array's length is correct and you've corrected the above mentioned bug, it should work fine. 
But if the resulting number is for example 126, how does a quote which number is between [0;100] is choose ? Thank you for your explanation !
I don't understand the question. If the array contains 100 items, then it's going to pick a value between 0 and 98, inclusive. It would never pick 126, because that's greater or equal to `arrQuotes.length - 1`. 
But what is the value that var.length returns ? I thought it was the number of characters after the "="... 
I would start by making a ":|" face with ~6 points then use a factor of the score determined by the size of the face to shift the y position of the different ~6 points of the mouth downwards (or upwards). I'm not overly familiar with bezierCurveTo but this is more of an implementation question than anything.
That's for a string. `arrQuotes` is an array.
It can never be 99, because that would require `Math.random()` to return 1.0, which it cannot. The code is written incorrectly as it will never choose the last item of the array. 
Also not my desktop. Work machine. Sorry should have clarified in op. Thanks though! I x/posted this and it's been solved. 
Alright thank you very much, I guess I'll have to wait a bit more to see if the new ones are showing up.
Unless you fixed the bug I described, this will never choose the last quote in the array, so if you're adding quotes to the end you'll be disappointed. 
I fixed it, and there we go I saw an added one. =)
**EDIT** never mind got it working with "if undefined". Hey sorry to bother you again but I have another question. In the css this is used to show the author : blockquote cite { color: #fff; display: block; margin-top: 1px; border: 1px solid red; } blockquote cite:before { content: "\2014 \2009"; border: 1px solid green; } Although I'd like to add some lines with no particular author, so I'd like the script to detect if there is nothing after the ^ (or a special character if that's easier) and instead of strQuoteToDisplay = "&lt;blockquote&gt;" + strQuoteToDisplay + strQuoteToDisplayAuthor + "&lt;/blockquote&gt;"; it'll be something like strQuoteToDisplay = strQuoteToDisplay I'm guessing there is something very wrong here but then the text is displayed with : document.getElementById("divTextToDisplay").innerHTML = strQuoteToDisplay; Any ideas ? Edit : maybe removing the "&lt;cite&gt;" if there is no author should be enough ?
Yes, but you already explained that. Now I'm explaining how the random number generation (irrespective of the bug) is dependant on the length of the array (ie, that a 100-item array can never give a random value of 126), while at the same time trying to keep it simple for the (obviously inexperienced) OP.
Example with quadraticCurveTo: http://requirebin.com/?gist=3b09b62ab6d64bbfde6c
Swapped classes for attrs. It's a WIP =)
Imho I would use images for this. 
Thanks, I think I understood that haha
cool! someone have invitations to appbase.io??
 var strQuoteToDisplayAuthor = arrSingleQuote[1] ? "&lt;cite&gt;" + arrSingleQuote[1] + "&lt;/cite&gt;" : ""; This uses the ternary operator `?` -- it accepts an expression. If the expression is "truthy" (i.e. it is not undefined, a string with a length, true, array with at least one item) the first statement will be returned ... the second statement following the `:` is returned if the expression is falsy (undefined, null, false, blank string/array) If there is no `^` in the quote, a split on `^` will return an array with length of 1 so checking for `arrSingleQuote[1]` would be falsy and return the second party of the expression... a blank string. 
&gt;If changing undocumented behaviour crashes your application, then you didn't use the API correctly If I use a valid selector over a large dataset, and the perf of that selector changes without anything else in the library changing, suddenly to you that means I'm now using *undocumented behavior*? The API contract doesn't need to change for breaking changes to occur - not in the real world. Implementation details matter, and changing those with sub-major revisions still means consumers need to check that they haven't been broken by your change. &gt;Testing is always required, but by checking the version number you can see if you need to change your code or not. If testing is required, it means you suspect you might need to make a code change. If you suspect that, it means you suspect breaking changes. If you expect breaking changes with every version number change, then *every change is a major change*. That defeats the goal of semver. Because that's the point, it doesn't matter which version number gets bumped, the exact same integration steps apply. You can't hide behind excuses like "it was just a revision number, it shouldn't have caused an outage" when you're responsible for a service. Either you integrate or you don't. 
&gt; If I use a valid selector over a large dataset, and the perf of that selector changes without anything else in the library changing, suddenly to you that means I'm now using undocumented behavior? The performance changing does not mean a breaking change. No, it does not mean you are using undocumented behaviour, but it means that you will be unhappy with the new version. Does this mean that you need to change code? No. it means that you most likely will want to stay with the old version until the performance problems are fixed. &gt; If testing is required, it means you suspect you might need to make a code change. If you suspect that, it means you suspect breaking changes. If you expect breaking changes with every version number change, then every change is a major change. That defeats the goal of semver. Testing is not to check if *you* need to make a code change, but it is needed to check if you want to use that version at all. If the integration tests fail and you did not use any undocumented behaviour, then the new version is faulty and should not be used. It basically means that the new version should be blacklisted and you should wait for a fixed version before updating. You don't change your own code to accommodate a faulty version. As I said, it is not about just applying a version update and hoping for the best. And using semver does not mean you can. It means that you can see from the version number if you need to change code. That is all it does.
Saves a lot of time: just open up your console and start typing require statements, no need to rig up a new HTML page at all 
Wow that's a great solution, thank you!
It's only specified to work with native objects, but this is a host object. [Host objects are under no requirement to act under the rules governed by the standard](http://perfectionkills.com/whats-wrong-with-extending-the-dom/#host_objects_have_no_rules). 
Eeeuh, why do you call this a twitter application if it has no connection to twitter whatsoever? It's an application mimicking twitters functionality, but that's about it...
Yes, removing the cite will be enough. 
I saw that you signed up for the early access. Shouldn't be long before we roll out access to more devs. Hint: Write to us if you have some cool ideas! ;)
Stack Overflow is probably the best way to go with these things, though you'll need to be more specific in the problem there.
my slightly modified version: http://jsfiddle.net/q8kE3/1/ things that needed to change: 1. you selected the onload inclusion in jsfiddle, meaning your code was scoped in this function and not available for the global context. make it globally by setting window.myfunc = myfunc or just set to nowrapepd in the body tag. 2. extraction of the values must be executed inside the function (when the user hits the button) becaus onload there are no values yet. 3. the onclick needs to call the function -&gt; onclick="myfunc()" 4. nothing crucial: removed unneded attributes, validated html, using helper methods
This also answers 'How do I monetize art?'
It doesn't work on Elements, and you shouldn't use it on the global object either. So the best solution right now is this: Use an Object.observe shim whenever you need to watch Elements, or if a native Object.observe is not present. I also highly recommend that you only watch the specific properties that you need on an Element. Don't watch all properties for changes. (The regular Object.observe method watches all, but if you write or use a shim it might let you specify just the properties you are interested in.)
https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver
This is something I thought of a while ago. Assuming the recording device does nothing to "fix" the vertical video (as in, you play the vertical video in landscape mode will still look rotated 90 degrees), then the flash/html5 video content distributors should not convert the video to "landscape" mode (therefore yielding the horrible vertical bars), but **provide** vertical players. Full screen would be something else, though.
Exactly my thought process when I created this. 
[Mandatory](https://www.youtube.com/watch?v=Bt9zSfinwFA)
[This is the true solution](http://imgur.com/MRDdwhi)
You're freaking awesome!! Thanks for this great project.
Thanks! Glad you enjoy.
I have created similar thing specificaly for MEAN stack. So if you are using angular, it might be a better choice. It has nice fluent API and you don't have to subscribe for events-it supports liveQuerying. You can find it here: https://github.com/capaj/Moonridge
While I like the look of the result, the example looks unwieldy. A little documentation exploring the use cases seems appropriate for a public debut. If it weren't for the render at the bottom, I would have no idea what the software even does.
Youtube^AR Hola che :)
*We are dozens! *
Sweet. I don't know what I like more, your project or how well you handle critique. I also enjoy reinventing the wheel for my own projects as I feel I learn more. Cool project.
cool, it's easy to use~
\*Grumble\* Of course it's a node.js application. God forbid it would work with the rest of git.
These look good.
Nice. It might be cool if this were an extension and there was some way to tag a video as vertical so it was auto, maybe scan for \#vertical in the comments, then maybe a toggle button in case of abuse... maybe. Probably a waste of effort though.
Awesome stuff. I was playing with the styles, and was thinking it might be nice to wrap the other content around the video, something like: http://i.imgur.com/nWW2VvQ.png
Any built in support for labels on the datapoints?
I find [this solution](https://imgur.com/LflguEc) far more enjoyable to look at. As far as I know, no one has offered a fix to make vertical videos look like that in the web browser.
dafuq is BSI?
From the copyright info: http://bytes1.dyndns.org/BSI/website-app.js BSI seems to be a proprietary solution:http://www.bytesystems.com Using this as a reference, since there is a vanilla JS test: http://jsperf.com/jqm3/180 Skimming the source code, BSI just wrap native DOM functions. Example: `BSI.makeNode` wraps `document.createElement`: &gt; ``` b.makeNode=function(a){return new b.Node(e.createElement(a))}; ``` operations like `append`: &gt; ``` append:function(a){this.Node.appendChild(c.scrubDOMNode(a));return this}, ``` Since BSI is just a lightweight wrapper for native DOM functions, it's not surprising its performance benchmark is comparable to vanilla JS. 
React/flux seem like a step in that direction too
&gt; People relying on undocumented features See http://en.wikipedia.org/wiki/Design_by_contract and if necessary http://en.wikipedia.org/wiki/Undefined_behavior Also, I think am important point to emphasize is that SemVer actually talks about changes to the API, rather than changes to the implementation.
You're probably going to have to use the device-motion plugin. The browser in Android 2.3 doesn't support devicemotion so you'll have to use a native module. There's really no other way around this that I can see. You can't just create polyfills for hardware support like that without some native hooks in to the system which you won't get with just plain old HTML5 and Javascript. https://github.com/apache/cordova-plugin-device-motion/blob/master/doc/index.md
thanks - I like the idea very much. I started my book with a discussion of using browserify for newcomers, and your project would have been a nice start for the examples. Now, I bundled the examples manually for an example here: http://pipefishbook.com/ch_3/views/ - it might be helpful for me to hear/see more feedback to teach client-side MVC with browserify. the first feedback I had was the readers found it confusing.
&gt; I would have no idea what the software even does. /me is still puzzled after 6.5s looking at it. 
Slides: https://speakerdeck.com/vjeux/oscon-react-architecture
That doesn't work on the value property either. Tried it and got nothing. Addy Osmani pointed this out as well in this article (at the bottom under limitations): http://addyosmani.com/blog/mutation-observers/ I think it might be because (as someone pointed out in the Stackoverflow answers) that value is implemented as a getter/setter without there actually being a property called 'value'. 
That's essentially what [this video/canvas demo is doing in the first example](http://html5doctor.com/video-canvas-magic/). I don't know if it's possible to re-purpose Youtube's player like that, but it's worth a shot.
That's almost perfect ! If someone could turn in into an extension that recognizes vertical videos and applies it somehow, that would be awesome.
With Backbone you will get better with JavaScript, with Angular you will get better with Angular. Also, have a look at this http://www.google.com/trends/explore?hl=en-US#q=ember.js%2C%20backbone.js%2C%20angular.js&amp;cmpt=q
/r/forhire
You want briefings each morning and have a very specific desired outcome. It sounds like your company should hire and train inexperienced developers who are expected to follow orders, as opposed to having an intern who expects to be guided but otherwise has somewhat free reigns. What if the intern develops an interest in solving the problem without Javascript? The great thing about hiring people is that everybody knows the expectations and you can fire them again if things don't work out. The bad thing about hiring people is that you have to pay them and don't get the free month of trial work your company expects.
This reads like blog spam. I don't think anybody uses volo/jam/ender anymore. Jspm is another contender. Bower is hardly more than a glorified curl script. Component.io has a questionable future (hence why duojs was made). Ironically all of these are installed through npm, which is the strongest and longest lasting package manager. It pretty much does everything listed with tools like webpack/browserify/parcelify/etc. 
Sounds more like an exam than an internship. Internships should expose people to the company as much as you can and let them actually do some work. I don't mean touching production data or risking anything but they can certainly help your development team. Your plan sounds ok for the first week/few days as it can assess where they can help out. But if at the end of it you want to offer them a job you need to get them into the company a lot more to judge how they would fit. 
&gt;Sounds more like an exam than an internship. It is kind of both: we want to hire junior devs that don't necessarily have javascript experience, give them conditions to learn it, help them whenever possible and at the end of this process have some means of knowing if they are capable of learning new things. Afterwards they are hired (if they prove to be able to execute regular tasks) and are given real tasks. Maybe we should call it something like .. pre-internship? I don't really know, maybe I used the wrong term. 
Can I ask why do you think it reads like blogspam?
It's vague and incorrect, and lists package managers that are seriously outdated or practically no longer used alongside new ones as if they are comparable. It hardly has any real value.
Excellent talk! Thanks for sharing
It's because the 'value' attribute is just the initial value of the input field and it does not change afterwards. Note that the attribute is different than the property 'value', which does change after the initial render.
Hey, great library you have there. The code is pretty clean, too. Here's my suggestions: - use npm and CommonJS to structure your code. This will allow others to depend on your module. - anything that can be decoupled (like rgb2hsl, [canvas manipulation](https://www.npmjs.org/package/get-image-pixels), etc) should be put into its own module. I tend to break things off into small files, and then once the library and its parts are more stable, I try to find out what I can break into in its own (totally separate) module and repo. - install and require dependencies where possible. things like promises and string to hex colors might be good candidates. - If you want to, you can provide a UMD build for non-CommonJS users. This is useful for newbies and designer types who just want "cut-and-paste scripts." - Ideally you should just have the library operate on an array of pixels, with no ties to the browser or canvas. See how [quantize](https://www.npmjs.org/package/quantize) does it. This makes it easy to use for server-side, or offline (CLI tool), or in the browser when pixels have already been grabbed. Then, you can always build higher level modules on top, like "get-canvas-palette" for more user-friendly stuff. - after you feel comfortable with everything, you can also look into publishing for different package managers. This will give your module a little more reach. - For rapid development I tend to use [beefy](https://github.com/chrisdickinson/beefy), and bundle my code with browserify. See [here](https://github.com/mattdesl/gl-basic-mesh) for a full example of how I structure a typical module and publish static examples to gh-pages. In this module, you would just run `beefy demo/index.js --open` from root; then you can change the source and refresh the browser to see it updated. EDIT: For testing I would just suggest using [tape](http://www.macwright.org/2014/03/11/tape-is-cool.html). 
Hmm. On volo/jam/ender being outdated. I see no harm in listing them. Helps me get a complete picture. I think the votes speak for themselves; although adding a con stating that they're outdated would be useful. On being incorrect. There are sources for almost every claim. What would you say is incorrect? On being vague. What would make this comparison more specific?
Thanks! Most of it is simply stolen from Google though, I only translated it. - Is it best to use the normal RequireJS wrapper like below, or would you recommend some other format? define(function () { ... return Color; }); define(['Color'], function(Color) { ... return PaletteItem; }); - Would those required dependencies have to be installed through npm or bower, or doesn't that matter? - I know it isn't really library material as of yet, my highest goal is to get it to produce the same (or 99% identical) results as the Google library. For that I need to unit test the different components, to see where the difference is coming from. - Do you have any tips regarding unit testing? I have some experience in [Mocha.js](http://visionmedia.github.io/mocha/) but the website hasn't changed in two years. Makes me think there are newer/better solutions these days. Sorry for my noobness. I mostly feel like a decent programmer, but when it comes to JavaScript structuring I have just no skill whatsoever. With PHP there's Composer and namespaces, but with JavaScript it kinda feels like being in a lawless state.
Thanks for replying! The Ajax load function. And as it is an extension it runs it as if it is from the same origin since the extension is loaded into the page. I was indeed wondering if youtube was serving different formats to different browsers and if so, why do they serve a gif file that is just blank. No I am not calling any API. The data-thumb attribute is the right file though so my work-around is that I just copy it to the src attribute. But I was wondering if I could find out why it happens in the first place.
 $("body").append("&lt;div style='display:none;' class='new_page_feed' /&gt;"); $(".new_page_feed").load("/feed/subscriptions .feed-item-container", function(){ /*Some magic here*/ }); So basically with the ajax load function. It loads all the feed-item-container divs it finds into that one new_page_feed div. Within those feed-item-container divs are video-thumbnails but they are just blank because they turned from a webp file into a gif.
It's called subtraction... EDIT:Spelling
Might want to note that only the first three are currently being maintained, duo is the spiritual successor to Component.
Sorry; I typo'd and meant CommonJS, not RequireJS. d'oh So it would look like this: https://gist.github.com/mattdesl/ebbcd9b3967dae275557 Those required dependencies would be "auto-installed" whenever somebody installs your library. For example, I published a high-level utility for gradient backgrounds in webgl [here](https://github.com/mattdesl/gl-vignette-background). When somebody installs it, they get its dependencies automatically (like [gl-quad](https://www.npmjs.org/package/gl-quad) and its dependencies). The end-user doesn't need to setup any paths or config. This is the beauty of npm / browserify. On unit testing, I've mostly been using tap / tape. It's small, lightweight, follows the same concepts as node/npm, works in the browser and server-side, and integrates easily with [git hooks for nice badges](https://ci.testling.com/). 
I'd simply call "happy-times" hyphenated. For the most part, I stick to camelCase.
Lisp case is the only thing I've seen it called by
Uhh, why don't you post the code?
Wait, then WhatIsThis called? (Ala dot net) 
Upper camel case. 
PascalCase
Look, I'm a big proponent of backbone and I've probably made that pretty clear around here. However, if you look at the data break down linked here, __all__ js frameworks that are currently popular seem to have grown at the same rate here, and the incredibly sad reality is that they all just reached the level of being above 0.1% market share. Part of this is the method seems flawed. Why is Jquery/mootols in there if you want to show backbone market usage? The fact that asp.net Ajax is shown implies that SPAs weren't the majority of what was looked at, etc. So the data may correct in on sense, but it's not very useful without eliminating multipage apps. On top of that, there are tons more popular and complex single page apps that are well known as backbone apps that aren't in the list of 'popular apps' which is odd. 
PascalCase
#####&amp;#009; ######&amp;#009; ####&amp;#009; Section 9. [**Special case styles**](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles) of article [**Letter case**](https://en.wikipedia.org/wiki/Letter%20case): [](#sfw) --- &gt; &gt;Some case styles are not used in standard English, but are common in [computer programming](https://en.wikipedia.org/wiki/Computer_programming), product [branding](https://en.wikipedia.org/wiki/Brand), or other specialised fields: &gt; &gt;* __[camelCase](https://en.wikipedia.org/wiki/CamelCase)__: first letter of each word is capitalized, spaces and [punctuation](https://en.wikipedia.org/wiki/Punctuation) removed. If the very first letter is capitalized, as in "CamelCase" (or "PowerPoint"), the term *upper camel case* may be used; this is also known as *Pascal case* or *bumpy case*. *Lower camel case* describes a variation, as in "camelCase" (or "iPod" or "eBay"), in which the very first letter is in lower case. CamelCase derives from computer programming, but it has also become rather common in brand names of [information technology](https://en.wikipedia.org/wiki/Information_technology) products. &gt;* __[snake_case](https://en.wikipedia.org/wiki/Snake_case)__: punctuation is removed and spaces are replaced by single [underscores](https://en.wikipedia.org/wiki/Underscore). Normally the letters share the same case (either UPPER_CASE_EMBEDDED_UNDERSCORE or lower_case_embedded_underscore) but the case can be mixed. When all upper case, it may be known as SCREAMING_SNAKE_CASE. &gt;* __spinal-case__ or __kebab-case__, alternately __Train-Case__ (depending on whether or not the first letter of each word is in upper case): similar to snake case, but spaces are replaced by hyphens, instead of underscores. &gt;* __[StUdLyCaPs](https://en.wikipedia.org/wiki/Studly_caps)__: mixed case with no [semantic](https://en.wikipedia.org/wiki/Semantics) or [syntactic](https://en.wikipedia.org/wiki/Syntax) significance to the use of the capitals. Sometimes only [vowels](https://en.wikipedia.org/wiki/Vowel) are upper-case, at other times upper and lower case are alternated, but often it is just random. The name comes from the sarcastic or ironic implication that it was used in an attempt by the writer to convey their own coolness. (It is also used to mock the violation of standard English case conventions by marketers in the naming of computer software packages, even when there is no technical requirement to do so – e.g., [Sun Microsystems](https://en.wikipedia.org/wiki/Sun_Microsystems)' naming of a windowing system [NeWS](https://en.wikipedia.org/wiki/NeWS).) &gt; &gt; --- ^Interesting: [^Open ^Letter ^\(Case ^album)](https://en.wikipedia.org/wiki/Open_Letter_\(Case_album\)) ^| [^Greek ^alphabet](https://en.wikipedia.org/wiki/Greek_alphabet) ^| [^Capitalization](https://en.wikipedia.org/wiki/Capitalization) ^| [^Latin](https://en.wikipedia.org/wiki/Latin) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ck6e6sb) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ck6e6sb)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Thanks
This reads more like a criticism of node than JS as a whole. Perhaps node fits better for smaller scopes of work (build systems and the like) than for enterprise websites. But the new wave of SPA frameworks have shown that JS can be pretty awesome on the client side and is certainly not going anywhere anytime soon.
Thanks, glad to see more research of the functional side of JS.
What is the benefits of a messaging system vs using events?
There is no benefit to using the messaging system over events **within the same window** This messaging system is meant to loosely couple information sent between iframes, and windows in a system, from anywhere in your window, frame, and external window hierarchy. **This is where the magic is** The library was written to alleviate issues with a legacy website that employs a ton of iframes and frames that talk to each other directly. In some cases, you would have case statements that look at the current state of which iframes are open in order to decide on *what to reference* and *what to be updating*. With this messaging library, these details don't need to be known, since i'm simply broadcasting the changes, and anyone who is interested can subscribe and perform whatever operations they desire. The library is very minimal, and is meant as a building block. TL;DR Use events if you aren't planning on talking between extremely deep frame/frameset hierarchies, and external windows
Also, thank you for the question, i'm still working on getting the readme to explain this library, and its benefits
I'm surprised ES6 wasn't mentioned at all in the article...
Why can't you just do what every other internship does, hire a temp and out them with an experienced developer for a period of time? Your in house dev gets to delegate tasks to the intern while guiding and teaching, and the intern doesn't have to do useless throwaway tests?
 if(player.isAlive == true){ // do something }else if(player.isAlive == false{ // do something else }else{ // do nothing } could be replaced with if(player.isAlive){ // do something }else { // do something else }
Interesting, although the fact it isn't synchronous makes it inconvenient to use with things you'd come to expect like return values. Other missing features would be instantiating classes and others. Creating pseudo-handles on the client and server would be necessary for that, very complicated. More hype for ES6's "await" keyword. :)
Would reading the backbone source be a good way of learning about java script? Is there a js framework that is known for having readable source code? I've mentioned backbone because it has a reputation for being simple, I may be way off base
It seems that at some point you are trying to add an event listener to an element that isn't there. This stops execution of the inline script, but javascript keeps running so the functions work. Check the console in chrome or firefox. It seems to be happening here: `document.getElementById('tankFlow').addEventListener(` `document.getElementById('tankFlow')` is returning `null` instead of an element.
It's kind of both, but work has higher priority, so I'll probably work on my JS. Thanks for your answer. 
And it blew my browser up. thanks.
Or it's just an indication of how truly abysmal angular's docs are 😉
I would think about it not as of "worker's restrictions breakdown", but rather as of "a bit more convenient way of communication with it". Theoretically it is possible to handle a value returned by a function with something like special return-callback coming the very last on the list of arguments, but that's too ugly, I would prefer not doing this.
I believe that while web components do run in their own context and have their own DOM, they aren't fully sandboxed so you can indeed access data from outside of the component. I imagine this would be a discouraged practice though as the component is supposed to be self-contained. Looking through the Polymer components quickly, I didn't see too much code duplicated across the different components. It seems like any code that would be shared between two components goes in to a parent component which the components then inherit.
My understanding is they are sandboxed. In Polymer you declare a web element and within that you can define it's template (aka shadow dom &amp; CSS) and javascript functions. So it's a pretty self contained unit. Obviously if that element depends on another element you would need both.
We are already doing this with people that have at least basic Javascript/jQuery experience. But I doubt it will work with people that only have only some unrelated c++/java experience from the second year of college. How would we integrate them in an existing angular.js app? Of course we could teach them angular basics and give them simple tasks, but they will still have to learn DOM manipulation, selectors, object instantiation and prototypes at some point. I have seen several developers that know extJS exclusively and have literally no idea how to do a simple thing with plain JavaScript. Some of those developers hold senior positions. But sorry, the last part was more of rant. Do you think it makes sense to learn angular's DSL first by performing some real tasks and at some point later catch up with basics? Because we don't really have projects with ongoing jQuery-based development.
Kebab case
They share the same JS environment. They are not separate environments (and global spaces) like iframes. The Web Component APIs give you the tools to make custom elements and use the Shadow DOM. But how you structure your JS code and share functions and libraries etc between different component implementations is up to you. (Note: I am not talking about Polymer itself, just the Web Component APIs.) 
Brilliant!
Web Components should have a precise goal, but usually they don't fetch the data or communicate with a server: that's your job. Think of it as a visual/interactive element more than a logical one.
No, I think it is most commonly used for SPA web applications, at least outside of Facebook. You can of course just develop certain components inside of your application with React, but I think you will benefit most if the whole application can be modeled in terms of React components.
Have you seen this? http://todomvc.com/ 
Web Components are the bee's knees and the cat's meow. I've been using them in a personal project which runs in node-webkit. It is a 'rich' application and I use WCs to build what are basically GUI widgets, very much in the traditional desktop app GUI style. Widgets are often composed of more widgets. Communication between them is via events and methods/properties on the JS object itself. The encapsulation it gives is great, and I love that the DOM inside the Developer Tools actually resembles the logical structure of my app and isn't a steaming pile of DIVs. I never really got into that templating / "string slinging" approach to rich client development which Angular and friends use. In fact I kind of find it baffling that we moved from templating on the server to templating on the client, even though on the client we have direct access to the DOM. You could use WCs to make 'smarter' custom tags for use with Angular etc, but I don't know if you would get the benefit of being able to use composition (i.e. nesting component) to build bigger components out of smaller ones. The way Angular likes to tear down the DOM and rebuild it whenever something changes bothers me. (Correct me if I'm wrong on this Angular point.) In my project I'm seeing FOUC* and am trying to work around that problem. *=https://en.wikipedia.org/wiki/Flash_of_unstyled_content **Update:** To clarify, I'm not using Angular. I'm seeing FOUC occur when a newly created WC element is placed on the page. The raw unstyled component DIVs etc are visible before the stylesheet which is embedded inside my component kicks in and styles are applied. I have found some work arounds though. 
React is just the V in MVC, but just choose a framework and get good with that! Also consider BackBone! PS. I use AngularJS.
Do you need a framework? I ask because I think they're overused these days. You shouldn't be defaulting to big frameworks just because everyone else does. You should be defaulting to using as little framework as possible and employing the bigger solutions only as needed. Far too many apps I've worked on professionally were over-engineered by their architect when all they really needed was a *simple* router (e.g. [page.js](http://visionmedia.github.io/page.js/)) and templating.
You might want to check out the ng-cloak directive if you see FOUC in Angular projects. https://docs.angularjs.org/api/ng/directive/ngCloak
Polymer isn't a framework it's a library for working with web components. I'd love to see a framework for polymer that dealt with the core requirements of building complex web apps. Personally I think polymer is the right direction of travel but out maybe a couple of years away from prime time. Angular, ember or backbone/marionette seem good for a production site right now.
What do you really need? What is the most suitable for you? 
AngularJS is great if you're going for a full blown client-side application. I think it only pays off if you buy into it very heavily. ReactJS seems better for when you need server-side rendering. And it's faster. But it's also a bit more complicated in certain ways. (It doesn't really help you out with many things, unlike Angular.)
I was actually talking about when WC elements are placed on the page. They flash a bit. 
ReferenceError case
It really depends on what you're doing. I've done a very large project in Knockout, and if I had to do it all over again, I'd do it in React, because React is very good for bringing order (and performance) to stupidly complicated single page webapps. It also allows server-side rendering, if you need such thing. On the other hand, for smaller CRUD projects, Knockout is good, for smaller non-CRUD projects I might go with Backbone, and Angular isn't a bad choice for anything medium-to-large, especially if you don't need really good performance. Alternatively, Vue is meant to be pretty good *and* fast, and would also be worth considering. Ember isn't my thing (I think it's bigger among Rails devs, perhaps?), and I don't imagine I'd pick it over Angular or Vue for anything, but many do. Meteor...is certainly used in production my some people, but I'd probably steer clear for now. (Besides, I'm allergic to MongoDB backends. I know, I know. That being said, it has some pretty nifty demos.) Finally, Polymer is not at all ready for production; it's more of a proof of concept as to how web components might work in the future, but if you need components today you should be using Knockout or React, both of which have very solid implementations. In short: It all depends. Do a bit of research. If you love functional programming and immutable data structures you might find React is amazing. If you're an ex-Silverlight dev and you think MVVM is where it's at, Knockout will be like coming home. If you basically just want jQuery without the spaghetti, and don't need your hand held, Backbone will probably do it for you. If you like Clojure and being so hipster it hurts, try Om; it's quite possibly the best designed framework out there, and I'm not even kidding. But if it's a small and/or simple project *every single framework will be fine*; just start coding. Even if you're using the "wrong" framework, it'll still be fine, just not 100% optimal. And if you spend all your time picking the perfect tool, you'll never get anything done. (Also, while Backbone, Angular, and React all have a lot of mindshare, this isn't a popularity contest.) TL;DR: It depends. Depending on the project, I'd pick one of 3-4 different frameworks and libraries. (Although, if I'm honest, it'd probably be React. I'm pining to try and do a full React/Flux app, but mostly just because it looks like something fun to learn.)
&gt; It's not more complicated than that ...provided OP fits nicely into the tiny niche you're assuming/supposing that he fits in - that being, he is the sole developer on an app where he has plenty of time to learn the framework and doesn't care about job opportunities. It's a metric fuckton more complex than your comment suggests. I've found that people who over-simplify often have very little domain knowledge and awareness of the complexities (thus the simplification). Harks home to the [Dunning-Kruger effect](http://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect). * Which framework gives the best job opportunity? Maybe OP wants something that will be stronger on his resume. Mootools...? * Which framework has the strongest community, and thus biggest likelihood of survival? * Which framework has matured the most, and thus won't be changing constantly with updates (imagine having to update almost every aspect of your code after a year of huge framework developments...). * Which framework has the lowest barrier to entry - maybe OP needs to get started immediately. Angular is known for a steep learning curve. * Which framework is best for the backend framework/language? Which integrates the smoothest? * What do people in the know, on the /r/javascript subreddit, generally recommend - they're a good source of input as they're ... in /r/javascript I could go on but you get the idea. It's absolutely not as simple as "does it line up with your programming philosophy?". Jeez, if it were that simple, why would he be posting?
You're the only person who actually responded to OP's question. Everyone else is chin-stroking with "Do you *need* a framework?" and "What do you *need*?". I mean - how hard is it to give your two cents on a couple of frameworks. Here, have an upvote!
Cant agree more with this. If OP is looking for a MVC kind of framework on the client side, AngularJS is an absolute beauty to work with. The amount of third party tools and utilities are also amazing. 
I think learning react is easier, because react does one thing and you just learn that, but angular has different machinery(or concepts) to learn.
i am thinking the MEAN stack is really going to come alive this year I am actually working on a simplistic webapp now using it. I'd suggest using angular due to the wide adoption and documentation for it
The job market trend is currently with angular at this moment. 
I'm pretty sure it's JSX or React.DOM mappings only. You may be able to generate React compatible HTML with other templating libraries, but I'd think it may be more trouble than it's worth.
That is nice of you to advise him to consider Backbone when it is the worst of all of them and you yourself use Angular.js.
Try different ones in small projects and prototypes. Don't choose a framework that you don't know in a big project. Meteor is a full stack framework and it's good when you have a realtime application, though it doesn't seem like working very well for large and complex applications. React does only the HTML rendering and nothing else, it's very good(faster than others, specially Angular) at it, but doesn't help you with managing your data. Angular tries to helps all things you do on the client side, it reduces complexity and improves testability, it's great for large and complex applications but not for performance critical ones. Knockout only focuses on making changes to HTML(or rendering), it bindings your data directly to the html, so whenever you change your data, the HTML also changes(though a little verbose syntax and uses containers called observables for data that can be changed, angular does the same but with normal plain javascript obejcts in a less performant way).
If OP can live with the fact that one should have all your custom code in directives, then OP and Angular can be best of friends. You don't have to invest heavily into it.
Agree with everything except backbone/marionette, I would not use that for a production site.
You're not alone OP, I'm finding all these technologies very overwhelming.
i have to call bull on that. If you check the numbers, Angular use is not very wide-spread. 1.4% of websites compared to 77% for jquery or 2.6% for backbone or 7.3% for bootstrap. http://trends.builtwith.com/javascript/Angular-JS
we can name call all day, but if you offer no rationale for your opinion, then you are simply adding noise to thread.
go on Dice and do a search on jobs including including the word "javascript" pick the framework that appears most in the job requirements
JSX just compiles to React.DOM, anything which outputs React.DOM is suitable. Om uses EDN and has 2 alternative templating systems (hiccup-style and enlive-style).
Sure, but om's built for React. When GP said React is template independent, I wanted to clarify to others reading that you can't just replace React.DOM with handlebars or something else.
So my approach to the data binding issue was to monkey patch a couple of classes in the soy compiler to allow me to inject a visitor while the soy is compiling (to js) or executing (tofu). we express our bindings like this (adding a whole deltemplate): /** * @param CurrentQuarter * @param Entity * @param CompetitionName * @param FirstDisplayed * @param Id * @param MatchHasStarted * @param RoundName * @param SecondDisplayed * @param StartTime */ {deltemplate ui_basketball_scoreboard_entities_BasketballScoreboard.CurrentQuarter} &lt;span data-bindings="{binding('replaceNode','UpdateQuarterInformation',[ 'target': 'model.CurrentQuarter'])}" class="{css ui-basketball-scoreboard-entities-BasketballScoreboard-CurrentQuarter}{sp}{css currSet}" &gt; {if $CurrentQuarter == 5}Overtime{else}QT{sp}{$CurrentQuarter}{/if} &lt;/span&gt; {/deltemplate} So what is really happening here? I have a visitor when parsing the template (and compiling it to js) that allows me to know in which soy file and in which template or deltemplate I am. then when the binding function is parsed, I have context and I generate a js (AO compatible) binding function which we link in to our app in the background. We have a ton of these binding functions (replace node, model event, dom event, mixin, text handlers event handlers), it works in dev mode (outputs the code when you compile soy to js, so part of a needed existing build phase) and is obviously extremely performant and requires no parsing on the client side and can be prerendered. 
Reasons?
I'm not sure I understand the point of comparing the usage of Angular to jQuery or Bootstrap. In addition, the link you give is classifying Backbone and Angular as "Node.js technologies" which indicates a pretty severe issue on their part.
What back-end are you going to be working with? Certain frameworks go well with certain back-ends. Ember and Rails are a good match, and I've heard that Knockout plays nicely with the Microsoft stack. 
This. Writing good animation from scratch is no fun. GSAP is easy to learn and they've solved most of the headaches for you already. Plus sequencing and timeline sugar. Even google recommends GSAP for complex animations. 
If someone already knows java/c++ it shouldn't take long at all to learn JavaScript. I think you're over exaggerating the difficulty they would have.
Vue(http://vuejs.org/) or Ractive(http://www.ractivejs.org/). They're almost the same. You'l understand what you're doing. Vue proves to be faster though. Both **do not require to learn new concepts** and are **very easy to pick up**, that's what I like the most about them.
You forgot the other side. If you don't know what you want to do with the framework, then you don't need a framework. In most cases, people here on reddit only choose a framework cause someone said you're supposed to use one, and for no other reason.
And you will find the slides [here](https://speakerdeck.com/rauschma/ecmascript-6-whats-next-for-javascript-august-2014)
Funny how you're upvoted on this when, in the past, I would say the exact same thing and get downvoted into oblivion (and only on reddit).
He did not. The question was, "How do you decide?" not "What should I pick?".
Shit. I hadn't even heard of these before today. Add two more to the list I guess...
Backbone is the *worst* of *all of them*? You have reviewed every framework for every purpose and you can decisively say that Backbone is singularly unsuitable?
absolutely
My bad - still learning this stuff! Appreciate it.
&gt; To me communication via events feels very dangerous If you are comfortable with using events on the DOM, then this is the same really. There is nothing global about it. You might be thinking of a more publish/subscribe pattern where components broadcast messages and other components can opt to receive certain messages. That smells like global variables. I've seen and avoided that pattern before. Concerning FOUC. I'm manually doing something similar. Hiding the host element with CSS until later when it has started up properly. 
Is there a framework that helps structure that? I was half toying with the idea of building an ActiveRecord style web component and Controller web component, so maybe ending up with something like: &lt;web-controller&gt; &lt;web-model name={{modelName}} value={{model}}&gt;&lt;web-model&gt; &lt;web-view&gt; ...(web components for the view go here) &lt;web-view&gt; &lt;/web-controller&gt; Idea would be that the web-controller would be responsible for building and controlling the elements created inside it's &lt;web-view&gt; and using the web-model to present the data. So MVC using web components? For navigation possibly some &lt;web-navigation-controller inherits="web-controller"&gt; which you can 'push' or 'pop' controllers onto for navigation. Similar to how iPhone UIKit works. I'm not a huge fan of the declarative way of doing things.
I strongly doubt people of second or third year of university know java or c++, specifically the universities of my country.
&gt; Communication between them is via events How is this different from publish/subscribe pattern? 
That's not what he meant when he referred to components. http://css-tricks.com/modular-future-web-components/
Take a look at http://www.jsdb.io/ here and there. The ones with most popularity won't always be the best though. Maybe the most used ones, but certainly not the best. I'd give **Vue** a 100.
As an old timer, I have to look shit up. It's comical how I have to do every search with "javascript &lt;what I'm looking for&gt; -jquery -angular -everyfuckingframeworkoutthere" I've gone back to just using books, much better with PDFs now anyway. I hated JS in the 90s, I can't fucking believe this is still the best we've done. TypeScript seems like it might be decent.
I work on a team that has two enterprise backbone marionette apps in production. It's completely production ready, and I would even recommend it if you need to control the rendering of views. 
&gt; But I doubt it will work with people that only have only some unrelated c++/java experience from the second year of college. YOU said they knew C++ and Java.
With events you directly connect a handler to the event on one specific object instance. myCustomWidget.addEventListener('action', function(ev) { ...handle action... }); A publish/subscribe pattern often works more like: // Subscribe to the action event. subscribe('action', function(ev) { ...handle action... }); // inside myCustomWidget publish('action', { messageInfo: ... }); The difference is that the connection in publish/subscribe is based purely on the type of event (i.e. 'action'). Anything listening for 'action' messages will get them from anything which publishes them. Normal events are connected by an instance plus an event type. The handle knows where the events are coming from and can't get events from anything else by accident. Publish/subscribe can be useful in architectures where publishers can come and go, and where handlers don't know or care where messages are coming from. The coupling is lower here, but the cost is this shared global message/event space. 
Look at what people who build cool things are using. Usually they'll write up what their experience was like. https://news.layervault.com/stories/31950-rewriting-the-layervault-file-page-in-ember I'd avoid giving too much credence to any particular comment on a Reddit thread. There are a lot of people who dabble and form strong opinions from that, but the stronger the opinion the more inexperienced the developer, in my experience. The views of people who have been around awhile tend to be more nuanced. 
What about Python?
Flip a coin, roll a die.... 
I'm planning on an application with a lot of server side rendering and using JavaScript to add a consistent ui interface. I guess I really don't need a framework do I ? A small library with jquery should work ?
Don't get so stuck into picking one tool. While it's great to learn something and master it, take into account the needs of your project, and don't use a hammer to put in a screw. The lay of the land (IMO): 1. Backbone - the old standby. +: Small code base. Intentionally limited features. Well-tested. Large community. Reliable. -: need to use marionette for anything non-trivial. Lots of memory leak gotchas. You get nothing for free. 2. React - dat new hawtness +: Relatively small API. Handles rendering for you. Gives you a clean API for the DOM. Simple data flow. Encourages SRP an desperate components. Has been in production on Facebook and Instagram for a long time. Passionate and helpful community. -: Not a massive user-base. No books, fewer tutorials, etc. thinks about data flow in a new way that you may need to consider. Pretty much just the view layer. 3. Angular - The new black +: massive community, tons of tutorials, SO posts, etc. lots of tools and add-ons. Binding for free, routing built in. Lots of things for free. Backed by google. -: more of a "toolkit for building frameworks" - you have to decide many conventions and enforce them. Lots of BAD angular code out there (think PHP). Conventions not well enumerated throughout the community. 4. Ember - for the working man +: LOTS of stuff for free. Views, templates, routing. Doesn't break URLs. Large community that is very passionate. Written by some OGs. Lots of resources. Great docs. -: very large API surface area. You have to buy in to the convention. Pretty large in file size. Community occasionally comes off as elitist / pompous. IMO: if you're doing something small, go with react. If you're doing something with a lot of data input, go with ember. Angular is too large to be small, but to small to be useful. It may seem like angular is a better bet than ember, but half way into writing your angular app you'll realize you spent 50% of your time writing code that ember takes care of for you. Try them out and see what works for you! 
I like this idea. Maybe I'll do this and chronicle my journey.
I *do* like Node a lot.
This is a good point. I'll be using Rails as my primary backend but I wouldn't mind learning a full stack JS framework as well and just never changing context.
Thanks for this rundown.
Thanks for the info, I'll definitely look into react. What does SPA stand for by the way ?
just don't let your project manager know this is how you decided unless you want to see them shit their pants. 
Take a look at Ember. Yehuda Katz is a core team member for both projects, and the Ember ActiveModelAdapter makes working with your rails models a breeze. The ember-rails gem is also really good for bootstrapping your app and there's no shortage of tutorials for using them together.
I'm just learning it for fun
Awesome, thanks
One thing I like about the Polymer approach, which goes to the heart of OP's concern, is that you're just working with web components, ie you're not building your entire site under a polymer 'framework'. I could later change my underlying implementation significantly, but still keep the same component names and structure I'd built earlier.
Please note that ActiveModelAdapter makes it easier to use _ember-data_ with Rails, but ember-data is a completely optional (great, but optional) component of Ember. See here http://eviltrout.com/2013/03/23/ember-without-data.html
What device you are playing on? The images should be very retina. However I need to make the card suits show bigger on smaller screens.
Thanks! Best answer so far! Angular, Ember, Knockout and maybe also React are on my javascript framework shortlist.
This is true, but I can't help feeling that the more you play around with them the more that it will make sense to have web components all the way up and all the way down. I'm sure at some point someone will come up with a 'glue-framework' that is itself a component - or maybe people will turn existing frameworks into components. I think there is two ways of looking at web components - one that they are just elements like selects or tables or even a jquery-type carousel that can be bunged onto the page like any html element can using whatever framework you like and whatever backend or frontend language you choose. Alternatively they are a fundamentally different way of looking at web development which is components centric where everything on the page is a self-contained living unit responding and firing signals to other self-contained units. This second view is the more exciting one and why I think eventually it will mature into an alternative to current frameworks although it will still be used by them as 'dumb' widgets. 
This is the sole reason I let Google recommend search results. With as much as I jump around, typing something in the search usually automatically picks results closely matching what I recently looked up. If I'm searching a lot for react, then search for router there's sometimes a hit on the first page for react even though I didn't put that keyword in.
I keep hearing that react can do serverside first page then client side after, and even fall back to totally serverside if needed but I can't find any good resources to explain this in an end to end sense. Do you know of resources that explain this?
My favorite is when someone asks for vanilla JS on stackoverflow and 40 morons in a row answer with, duh use jQuery. Comical.
Keep in mind that if there are 30 total, 20 of them, at least, will probably work well for you. Your mind is telling you that you need to pick the *best* 1 out of 30, which is distressing. In fact, you need to pick one of the 20, which is a much easier target to hit. Pick a few that seem good, try them out with your team, and then go forward with one. It'll work out fine.
You can namespace events in every pub/sub implementation I've ever seen, so you could publish `myCustomWidget.action`.
we were at that point, nobody had the time nor nerve to look into all those implementations. we went with backbone.
It really depends on what you're going to use it for. Don't use a framework "just because". Have a reason. 
I really don't. I really just want to learn one "just because". :)
If you can actually dictate that they will use a new Chrome or Firefox then I would try to do it in Polymer because components are a huge advantage. Might be hard to make it work right but I wish more people got the idea of web components and would give Polymer a chance.
I wrote some code that uses jQuery methods today because the team needs to knock something out real quick and make it better later. I still feel slightly grubby.
I think there's a jQuery library for that.
A dart + angular combo always looked fun -- but too much work upfront for the "we need a prototype next week" deadline. 
LiveScript was never that good. Mocha was the way to go.
d3 for mapping and visualizations
For that matter, why are you even programming for the web? Local applications. That's where data security is at. JavaScript? Pshaw. Why? What's wrong with Assembler? ... why did you even leave the oceans? The water's warm. Come back! Sarcasm aside (and I meant it only playfully), you're right. There's framework mania when often times that's not necessary. Still, frameworks stand on the shoulders of giants, and I am incredibly thankful for the ones that actually save me piles of time (Meteor).
If it's any consolation, I think you did good.
Thanks for that! I did observe Angular performed significantly slower than the others (in Firefox at least) in that demo "todo" application.
Honestly I don't even think React needs a huge tome like ng-book or the like. It's an incredibly small API and really straightforward. 
What do you use for the controller class? Likewise the model? Just a JSON object?
yeah I think too ;)
I didn't say they knew, I said they have some experience. 
can this be used to generate patterns that can be stored and then trigger an event when the camera catches the pattern?
Wasn't sure how long the presentation itself was, so I'll stick to the slides for now. This is helpful, thanks!
Deleted
operations.js is meant for more complex scenarios than promises. For example if we were spawning hundreds of operations that interact with networks/file systems. We can set an upper limit on concurrent operations using queues and express complex dependencies between them, compose them and cancel them. Not seen bacon before though, will check it out.
dig into the css3 keyframe animations, ignore the old shit
So, what exactly does this provide that the built in JS Validation APIs don't have? All I'm seeing is, new (and unnecessary) attributes, slightly tweaked naming, and the addition of a jQuery requirement.
I can affirm that the angular documentation is absolutely turrible. Maybe it makes sense if you are some CS wiz kid. I kinda get a snobby vibe from the angular devs. Luckily enough people are using angular now that there is almost a always a blog post or SO answer to help out us mortals.
Depends on what you want to achieve... We will integrate basic emotion tracking in v3.1, but it's not a face recognition lib, just a tracking lib...
Will you provide an example using pure javascript that will be able to achieve the same functionality? In as few lines and with eloquent syntax? This is primarly aimed at AJAX applications, and heavy decision making based on dynamically changing data in page.
https://github.com/mhart/react-server-example https://github.com/reactjs/react-page-middleware It's wonderful. You generate the server side.. If generated, client-side will only bind events. If it fails, it'll just generate it anyways. Amazing. 
Google does in fact maintain [native Angular directives](https://material.angularjs.org/#/) to implement Polymer-like elements using Material Design styling. They're very much beta, but I used them to quickly create an HTML mockup and they worked like a charm and made the mockup look great with minimal amounts of effort and code. Also, while /u/Capaj's comment wasn't on-target, I do think the OP gave Angular the short shrift in his descriptions. It's flexible, well-documented and maintained, has a wealth of easy-to-use third-party directives and modules, creatives views declaratively and has two-way data-binding. I'm a big fan of Angular and have yet to run into an issue that I couldn't readily solve with the framework.
I think people come full circle; my initial response to this post was - write it from scratch, then make your own framework like everyone else. But honestly I think people graduate from hype to cynicism regularly. It's made worse when it's a trendy field with lots of churn.
You can make fun, but I think this is legit. We all need jobs, and we all want good jobs. Nothing wrong with focusing your efforts in a way that makes you more employable.
Thanks, I'll have to try that in my main program. I tried body{overflow-x:hidden}, but that won't work because the width is still technically there, right? 
Jeah.. so, completely off the top of my head but that could work.
It depends on your personality, If you are more of a get the job done what the hell guy use angularjs, if you like to know what you are doing use backbonejs/marionette, if you like windows asp.net go with knockout.js, If you are very ambitious, and perfectionist, use emberjs. If you like other people to do your work and you don't care what you are doing go with Meteor.
I couldn't even get Node to work properly with my windows machine.
it is both serious advice and a tongue-in-cheek commentary on the state of software development today. i see nothing wrong with doing this in an effort to stay employable. i've got a gigantic problem with the industry developing languages/solutions that are so complex that they require frameworks in order to use. i've got an even MORE gigantic problem when those frameworks become so large that knowing one can become part of a job requirement. in a perfect world, the frameworks would be simple enough to understand with no effort. it would allow you to actually spend time solving problems instead of learning frameworks.
I think MS inventing AJAX was a much bigger deal than jQuery. Not that I'm against jQuery, but the fact it's seemingly become the default is just bizarre. I'm not an MVC fan though.
You had me until "for Visual Studio".
I agree with this. You have to get pretty far into Angular before you realize just how powerful it is. The TodoMVC doesn't reflect this at all at this could easily be made with simple jQuery. Once you get into scopes, dependency injection, services/factories/providers etc. you realize how much time you will save, if you: 1. Are making a decent-sized SPA (otherwise I probably wouldn't bother) 2. Use only Angular (no jQuery) from the get go. 3. Do things the Angular way. 4. RTFM. Although it does suck sometimes. Angular is a much more holistic approach where the entire app should be build according to the Angular paradigm. Not only this, but Angular kind of forces you to make things in a modular, easily understandible way with reusable components that *other developers can easily understand*. It was clearly made by people who work with SPA's every single day and have found a lot of best practices you won't see in many other frameworks.
That's why the browser asks permission from the user to access the camera.
Thank you all for replying and sharing knowledge. It did clear some of my doubts, but I still have a question bothering me. Given my understanding of SPA, which means that you only have 1 full document html ( containing html, head, body) and that gets generated either at client(pure-client-spa) or from server(server-generated-spa) as a one-time thing. After that, all we do is create new views( stick a new DOM to one of the existing div placeholders) or add data fetched via AJAX. In all such scenarios, we are anyways looking at minimal DOM manipulation. Given above, it seems that react doesn't add much value , as long as we just do minimal DOM operations. However, for non-SPA applications, where-in every time server generates a entirely new HTML document structure( head, body...), then it does makes sense , that we use React library, as it provides feature of DOM versioning ( aka comparison via DOM shadowing) and then only write delta to the main DOM. **Which also means, that React library can be used to convert any non-SPA application to a SPA application, as it only changes the delta on the real DOM, and may-be html's head/body may not be completely modified, but some bits of html body are changed, which ensure DOM's statefulness( including javascript memory variables) is retained, instead of full refresh**. Am I correct to say this???? Sorry, if I missed any obvious point here, but just trying to get my basics clear here. Any valuable insight is appreciated, even if you make me understand as ELI5 :)
Agreed re ajax. For me jquery has replaced what i used to use js snippets for back in the day and js itself has grown into a proper language. As for mvc, I'm still getting used to objects!
I like this answer
Finally. This is awesome. 
That name is pretty bad. It doesn't even have anything to do with I/O.
So true. In my current contract I've got a project in which I can pretty much do what I want, so Angular it is!
Pick one and build an app with it. After you have built with one framework, moving to a new framework is much easier. Don't fall into the trap of trying to learn all of them at once. Someone above mentioned Backbone / Angular / Ember / React. These are the best four worth using at the moment. I have found React's documentation to be lacking so I would not recommend it to start. Addy Osmani has a great guide on Backbone (Also try Backbone + Marionette if you want a more defined structure to start.): http://addyosmani.github.io/backbone-fundamentals/ Angular also has great docs and a huge community. Haven't used Ember but I hear it is great with Rails. Pick one and spend a month with it, it really doesn't matter which one as you will be able to jump into any other framework once you have a firm grasp on one. Deep knowledge in one is more valuable since you will be able to demonstrate your skills, and people know it's easy to move if you have mastered one.
I usually setup a wheel of fortune game, put a framework on each wedge, and spin it.
Meteor got a fair bit of PR, got a big investment, and then went a bit radio silent as they actually built the product. There's more people using it now than ever; just a bit less buzz. I imagine once they get a few more major features done they'll do a 1.0 release, and there will be another avalanche of articls and blog posts. :)
I made this a while ago and had hopes of making improvements, but since I can't find the time I want to share what I have in case you find it helpful too. Basically this tool lets you quickly load a JS library onto the page so that you can mess around with the API in the console. It also alerts you to new functions and objects that the library adds to the window object. Check out [the github repo](https://github.com/calebthebrewer/jsenvy) for more details.
Thanks masklinn, and all. I just posted additional info for review
According to some, you don't. You do your own framework from scratch and then when it starts to closely resemble something that exists already you start to migrate.
Pick one that looks interesting. Do a project in it. Pick another that looks interesting. Do that project in it. Repeat until you find one that you like enough that you don't want to change.
Ah, that's right. I knew I'd heard it before. 
See /u/jimschubert s answer. I knew I'd seen it given a name before. 
I disagree respectfully. It's true that it's always useful to learn the inner workings of things. I don't think though that CSS animations (in their current state anyway) will ever replace js animations. Some things are simply not possible with CSS. For example, with GSAP, it's much easier to get a promise/thenable to know when a complex animation, involving many elements, is complete and then trigger another process. Nobody explains it better than [Greensock themselves](http://greensock.com/transitions/) From my experience, the syntax of Greensock is way more flexible to make complex animations than CSS3. For simple things though, you might stick with CSS3.
Just today I set up grunt on a windows machine for one of our websites. There was no good way to publish the site to our local servers and serve statics from s3. I kinda felt bad giving people command line directions for grunt and node but damn it felt good for me. I run Mac and macvim at home so it's nice when I get to play with things like grunt and node professionally. I absolutely love this. I think the more my coworkers see that there are things outside of Microsoft the better
Having a hard time figuring out why the author of the first link didn't render the script tags and `.content` in a component and just render it to the body. They'd have to put their init script in a separate file, but I do that anyway. Maybe they just like typing four to five line comments...
Great choice. Angular is backed by Google and is very popular, which means a ton of learning resources to choose from, lots of help on stackoverflow, etc. The w3 tutorial looks like a really good primer. Good to know, thank you for passing that along. After that, check out their official tutorial: https://docs.angularjs.org/tutorial/step_00 I followed it a year ago and found it quite helpful, though it was an older version, I think this one: https://code.angularjs.org/1.0.8/docs/tutorial/step_00 Cheers!
Great idea! Seems useful for quick cases where I just want to pull in a lib and play with it a bit.
This is incredible! Can't wait to toy with it. Considering the processes, it's amazing how low-latency you've managed to make the demo.
:D give it some more time, if you can. Sometimes it is worth it.
Thanks! Yes, the digest cycle rears its ugly head when you have too much data in a single view, like a 50 x 500 table. Pagination can save you to an extent, but it still can't entirely prevent the performance impact with dirty checking.
Very well done. Going to give React a try
Yeah. If you had the ES6 await keyword, you would be able to much more closely emulate actual RPC. You'd be able to use return values naturally. 
Seems like a nice list. Thanks!
The tracking is done on the client side, no server processing here. And I can't say enough, that emscripten/asm.js is a great innovation of our time.
Thanks for the support! Those quick cases are exactly what I hope to satisfy with this app.
yeah, if you look at freerice.com, it's pretty much that 
That is not even framework.
Agreed, all you are doing is consuming an API. The backend tooling really doesn't matter to the frontend.
You might want to go to [ToDoMVC](http://todomvc.com/). It says "Helping you select an MV* framework"
Meteor isn't a client-side framework like the others so very difficult to compare. It's actually a platform like Rails or ASP.NET are with it's own application server and it's own build tools for preprocessing less/sass/coffeescript. And this is also the reason that Meteor doesn't have much visibility in the javascript (MV*) framework space. The architecture of the Meteor platform however is nothing like you've seen before, which can be intimidating or even downright scary. See it takes reactivity to a whole new level because basically they've moved models (called 'collections') to the server-side and have a (possibly partial) mirror copy of that on the client. Added to that is a reactive system that: keeps client/server data in sync and re-renders (parts of) templates when the underlying data changes. So I guess my $0.02 would be: if you're looking for a javascript MV* framework to go with your existing backend platform, Meteor isn't it. But if you're shopping around for a new full stack framework or just want to try out a whole new (powerful) way of programming you really have to give Meteor a try. 