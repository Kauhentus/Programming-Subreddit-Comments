Website: [https://react-coding-problem.rodrigofcosta.net/](https://react-coding-problem.rodrigofcosta.net/) Github: [https://github.com/fcostarodrigo/react-coding-problem](https://github.com/fcostarodrigo/react-coding-problem) This was a technical test for a job. The test was to write a UI (component) to display the React project issue status from GitHub. I was allowed to use create-react-app and semantic-ui only.
I liked it a lot, but I can’t find where I can add integrations anymore, maybe put it on a FAQ or make it more visible
I’m working on a small turn based game currently 
Cross post this to /r/linux
Thank you for your feedback, I'll add this topic to FAQ. You can make an integration in Dashboard -&gt; Settings -&gt; Integration list. Or in Desktop app -&gt; Settings ( Gear icon, left bottom corner) -&gt; integration list :) If you'll have any additional questions, feel free to make a comment here.
It seems like we used incorrect word for explaining this feature. I'm really sorry, we'll fix it, thank you a lot for your feedback. I'm fully agree with you!
nah that's a significant part of your app, not just the wrong words
I’d be more concerned about the quality of the code than the formatting - linters can handle formatting suggestions. The code as it stands is bad because it has no guards (as in, what happens if a file isn’t there?), isn’t very generic, and has problematic logic around picking a song to play (hint: what happens if the user has a thousand songs?) That you’re worried about formatting when there are linters and when most JS will be minified also betrays a lack of experience. Tl;dr: you’re focusing on the wrong things. 
Yeap, I'm agree with you. But you can manage what application will measure as Useful activity. But let's be serious, it's not an app provide atmosphere like this in a team. When developers think about managers like a "big Brothers". It's bad management, and bad working culture in company, that's my opinion. We just provide handy tool which developer can use to speed up his working routine as planning tasks and reporting and if he want he can share his working data with other team members or manager for example. We're developers, and for us it's first priority be useful for people like we. Thanks for your feedback, we don't want to be tool of big brother, and we will think about our marketing communications!
[https://duefocus.com/privacy-policy/](https://duefocus.com/privacy-policy/) \- meh. I'd love to selfhost this. /r/selfhosted would surely appreciate this :P.
I literally lold
Create an audio context and after that you have choices: do you want to use one oscillator or multiple oscillators? You need to figure out the synthesizer voice or voices. The simplest thing is probably to create a new oscillator for each note and just throw them away. You then need to come up with a sequencer and start scheduling events to change pitches. In short, it's not going to be simple because there are three complex tasks involved: creating the synth voice or voices, creating a sequencer, and writing the algorithm that writes that music. WebAudio works offline-- the "offline" you sometimes see referred to is for writing a file to disk etc if I am not mistaken.
Using a `click` event is definitely the most common way to do it. The DOM has its own API for querying (finding elements) and modifying. The best advice for beginners is to read the documentation for every new function you use because there are many ways to do things. Read other people's code and figure out why they make the choices they do-- you may agree or disagree, but once you move beyond simple exercises the work of programming is more about learning and developing patterns.
Amazing one mate, keep it up
You can try [AdonisJS](https://adonisjs.com/) which is like Laravel for nodeJS. Laravel tries to imitate ruby in php, and Adonis tries to imitate laravel in JS. Fun times.
Looks great!
Hi /u/AndreyOsipenko, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
You can use event listener for resize event. But it will append new link element in head whenever you resize the browser. You will end up with multiple link element. If you want get rid of that problem you can first remove link element from previous resize event and then append link element. Hope this is useful. Btw if you want to make is responsive use media queries 
Hi /u/AndreyOsipenko, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
By media you mean the @media css thing? I used that before but I would like to create a script so I don’t have to have like 1000 lines of css. I changed the code a little from last time changing the width code with with.innerWidth if that matters.
You need to find the last line within the last callback. `d3.json` provides a callback, but inside that callback `d3.csv` introduces another callback. I'd bet that calling `html2canvas` inside of the `d3.csv` callback would do what you want, but I haven't dissected the code enough to know. What is the last line in the d3 script that gets called? ("last" as in time of execution). Answer that question and you'll know where the `html2canvas` call/coordination needs to go.
That's true. But when I did that I had files for every 500 pixels going unto 4000 pixels. I got it partly working thank you. If you spot any bugs then let me know. I am new to JS and Notepad++ &amp; Firefox aren't giving much help. var mobile = false; window.addEventListener("resize", testResize) function testResize() { if(window.innerWidth &lt;= 699) { mobile = true; } if(mobile == true) { var head = document.getElementsByTagName('head')\[0\]; var link = document.createElement('link'); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = 'css/default.css'; [link.media](https://link.media) = 'all'; head.appendChild(link); } } &amp;#x200B;
Lmao bro keep at it 
Nice work!
I didn't read the code, but some thoughts: Looks like the spheres stay in in the same exact relative position as the radius gets resized. Could try randomizing the relative position with a little noise to make it more interesting. Also could add some sort of clamping to prevent spheres from getting too far apart. And I know you were just playing around and that picking the spheres was a stylistic choice, but if you ever decide to make a more advanced sky/clouds, consider using the particle system [THREE.Points](https://threejs.org/docs/#api/en/objects/Points) instead. And if you want to get even more performant/realistic, consider GLSL shaders.
&gt;what happens if a file isn’t there i have &lt;noscript&gt; at my index.html &gt;what happens if the user has a thousand songs nothing, my song will play too with his songs
What a *stupid* sentence, but typical for those empty gaseous single.sentence replies some redditors like to make because they can'tr come up with anything of substance. When you "count" you only count what you decide to count, and what you can count, so that itself already is subjective and also limited by what is possible (reference to the joke of the guy looking for his lost keys under the street light). You just made the stupid assertion that just because you have "numbers" something is magically better. Not to mention that you *do* have numbers, even if you don't write them down, because in this example, when they report on their observations, that is not based on Math.random(). Most medical and psychological studies have plenty of "numbers" - and [most of them are useless](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4978571/) (the entire studies). ([Link #2)](http://www.medicalevidenceblog.com/2017/04/why-most-true-research-findings-are.html) Number fetishism is for people too lazy or stupid to actually *think* (they then go on to write "deep" one-sentence comments on reddit). 
&gt; are you going to want to keep passing in artists to your mainJS function? yup, have any suggestions ?, i mean its related to each other so why make a lot of functions ? (1st code select the word from list &amp; 2nd code select the song) &gt; Are you going to want to match what gets passed in to a static array like this? Are you going to want to keep expanding that if statement? mean ? &gt;Do you want random to always be a part of that or would it help someone else on your team to be able to choose the index for themselves? How would you test something that gives you a different result every time you call it? yup i want "random to always be a part of that" &amp; i'm only at that "team" &amp; finally i testing it while it random &amp; everything fine because i keep reload my website until i get what condition i want &amp; test my code
Looking forward the next time you'll delete it and respam &lt;3
Should've added ISS
That’s not at all what I’m getting at. What happens if one of the mp3 files you think should be there is not? What happens if the library of songs you want to play is not just 2 songs but one thousand? As it is, you would have to add each one individually because the handling for all of this is hard coded to your specific songs. You want feedback - the feedback I’m giving you is to think about what is actually happening at each step and how to make sure that if something goes wrong you have a way to handle it, and to think about what happens if there are N songs, not just two. 
What a *stupid* sentence, but typical for those empty gaseous single.sentence replies some redditors like to make because they can'tr come up with anything of substance. When you "count" you only count what you decide to count, and what you can count, so that itself already is subjective and also limited by what is possible (reference to the joke of the guy looking for his lost keys under the street light). You just made the stupid assertion that just because you have "numbers" something is magically better. Not to mention that you *do* have numbers, even if you don't write them down, because in this example, when they report on their observations, that is not based on Math.random(). Most medical and psychological studies have plenty of "numbers" - and [most of them are useless](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4978571/) (the entire studies). ([Link #2)](http://www.medicalevidenceblog.com/2017/04/why-most-true-research-findings-are.html) Number fetishism is for people too lazy or stupid to actually *think* (they then go on to write "deep" one-sentence comments on reddit). 
Well I did build a bunch of cool features that are ready and would make the game more complete, but I decided to hold off and sell them to everyone in a few months! People respond better to that type of model!
Sweet! Thanks for this!
That's great to hear.. good luck .. 
Beautiful work, but lets be clear. You made a sky using javascript lol...
That's pretty cool as a self challenge. Great way to learn.
well, what you exactly mean ? (im bad at english xd) i mean if i thought about mistakes i will find a lot of it so you have a specific mistake ?
So you answered every single one of those rhetorical questions incorrectly... No, you do not want to keep writing code as your software scales. You want to write something that will work for any number of songs/random entries. The reason to make a lot of functions is so you can modify your code quickly to do other things. No, you do not want random to always be part of your music player. I want to be able to say "Play song 3" and have your code play song three. If you want to build random into it, you'd want to abstract the random part so that you can do things deliberately even if your song playing thing always works randomly, you may need to shuffle the order of a playlist. You may want to play songs randomly but not allow the same song twice in a row. Professionals test code by writing separate tests so that the code runs automatically when it changes and time spent looking at code in a browser, refreshing, seeing what happens is kept to a minimum. If you want to look like a professional, the mark of professionalism is that the code is abstracted in a meaningful way, tested to affirm its correctness, and would be reusable in some context.
yes i just want to make that condition to test what circles are getting drawn improperly. Dataset is my csv
Nice 👍 
Oh it sounds like you are further away from that than your code made it look. If you have DOM elements, they have a `dataset`which matches the `data-` attributes. ``` const circles = document.querySelectorAll('.circle'); circles.forEach(circle =&gt; circle.dataset.fill === 'Blue' ? console.log(`${circle.dataset.country} is not working!`) : undefined); ``` You could also just not bother with the dataset and query for them directly: ``` const notWorkingCountries = document.querySelectorAll('[data-fill="Blue"]'); ```
I think the answer depends on why your consumer project is running integration tests with this a pull-request version of the lib? 1. Are you using your consumer projects test suite to extend the test suite of the lib, for example if the consumer test suite fails, should the pull request not be accepted? - Are you trying to keep your consumer project as up to date as possible? - Some other reason My suggestions: 1. Increase the test coverage of your lib, to account for the use cases of your consumer project. - Just stick to testing against the latest release version of your lib. Running `yarn upgrade` or `npm upgrade` before your integration tests. - Run `npm install lib@1.0.0-BUILD.100 --no-save` before your tests, unfortunately yarn doesn't have a no-save feature despite tons of community requests.
Love it! Nice job!
I like to stay on top of security headers for all of my websites, and found myself constantly re-writing middleware for some new headers, `Report-To` and `NEL`. Initially, I opted to report these headers to the maintainer of `helmet` at https://github.com/helmetjs/helmet/issues/184, but they were understandably denied from being added. I thought I'd take the opportunity to release my first 2 public npm modules, [report-to](https://github.com/Cherry/report-to) and [network-error-logging](https://github.com/Cherry/network-error-logging). A great service for logging and reporting these errors is https://report-uri.com. Let me know if anyone has any feedback or suggestions. Thanks!
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Done
Hahaha, that sounds like preference. Then again, so does my suggestion. 
actually i want the same song play over &amp; over with the same random array list, &amp; i already tested my code &amp; i'm happy with what i made :P (i mean the code did what i meant, so i'm happy :P)
What do you mean with making adjustments in my CSS file?
You'd then have 2 CSS classes to target For example, those with support could have a green background Those without could have a red background 
Why????
Tbh, the reversal has significantly helped the situation. However, simply not having open issues isn't a great metric. Most of my repos have no open issues at all. Perhaps a metric more along the lines of "issues closed this month" might be more effective, or even "issues closed this month / issues opened this month", which gives you an indication of the proportion of opened issues that actually get solved, vs the number of issues that end up abandoned. (Although you should also be careful about that. Closing issues does not mean that the issue has gone away, of course!)
Made a small demo today that shows how to animate scrollPosition (and some mouse parallaxing): https://codesandbox.io/embed/py912w5k6m 
Hmm, I'll try to dig around deeper. If nothing else I'll try to post on their github. Thank you for the help :)
You're not wrong, Alex. You're just an asshole.
I tried it, unfortunately Facebook still exists.
For the love of learning. It's a chance to learn more about WebAssembly, Web Audio, and Web Components. 
Haha
The proper number of instances of the card string are printed to the console, so I know that's not the problem. This is the div it's supposed to go into, so I know that it exists (the script tag to call all my startup functions is just before the closing tag for the body. &lt;div id="left-col"&gt; &lt;!-- To be populated by cards.js --&gt; &lt;/div&gt; Thanks for the suggestions, though.
Made an old space-shooter type of game - Earth Defense - which you can check out here: [https://pecko95.github.io/EarthDefense/](https://pecko95.github.io/EarthDefense/) Currently working on separating my code into modules (finding it really difficult to do it now after I wrote more than 1500 lines) and using some OOP. Some updates to the graphics are also to be made, but all in all, one of my bigger projects so far :D
[removed]
This is beautiful, thank you so much for posting this!
Why exactly are you doing this? Everything you did here is the same as `&lt;link rel="stylesheet" href="css/default.css" media="(max-width: 699px)"&gt;` or alternatively in CSS @media (max-width: 699px) { /* ... */ }
Wow! Yea, they help a lot! Thanks so much. 
I've been thinking about creating a website to create them.
I too feel this and haven't really been using many except for a few novelty (X-Files theme, use it daily to annoy certain people around me).
Have you considered using SVGs instead of JPGs?
If you're trying to play a buffer, are you sure the problem isn't the MP3 not being able to be loaded directly from the file system, as opposed to a server? Can you paste the exact error you're getting? Chrome will be giving a warning about the next version, but shouldn't be stopping it yet.
good job, keep it up and try to improve the results further. 
Wait Wut I just read the media.
Yes, we can definitely convert everything to SVG. Thanks for the suggestion.
Every time they press a key, you grab all the text in the box and go look for words in your dictionary that start with that text. This is the basic premise of how they work, and anything beyond is just icing that you'll know how to add once you have the experience to make the basic idea work. 
I understand that but is there difficulty in making server requests to do that? I asked one programmer and he said it would be almost impossible to singlehandedly accomplish this on my own. 
You sound fairly inexperienced so it will certainly be challenging. You'll need a database of some kind to hold your dictionary, a JS framework to make your lookups visible and pretty and to do the calls to the database, and so on. That said, we all had to start somewhere.
Can you check through the element inspector and see if the content is actually in the div or not?
Thanks.Keep in touch.
Nop ur are correct mate... go is becoming much dominant these days
Check out line 41... you might be prematurely closing the `for` loop - and `else if` needs to follow an `if` statement
I’m on mobile, but try removing the `console.log(100)` from the if statement. The `console.log` function returns `undefined` which will be interpreted as a `false`. This will make it so none of the code in the block will run. 
Thanks brother... 
Thank you. 
Yes it is. 😀
Thank you. 😀
Yes it is. Thank you. 
Yeah sure
Yeah. Probably next time with more features ❤
Well yeah, i just want to add the whole thing. So.. ❤
Thank you for the quick reply. I fixed it but it's still not working. Any other ideas?
Do you have the modified code?
[https://pastebin.com/SB4A8PVR](https://pastebin.com/SB4A8PVR) here it is.
Nice work. Keep going. 😀
Good work. I was also planning to make a website like this. 😀
It looks like on line 35 you have a variable called `gpacalc` that is never defined. I am assuming that you are intending to make this the action upon clicking the button with `gpacalc` set as the id. Have a look at https://www.w3schools.com/jsref/event_onclick.asp
I have a button at the bottom which has the id="gpacalc". when i use the chrome debug tool it is telling me that my function is wrong. Im stuck. How would I go about fixing this problem?
You would toggle display: block or inline or whatever on the loading animation element during the onclick event and then display: none when the search response callback was triggered. 
What would the code look like to know when the response callback was triggered? 
You're getting back results and displaying them. You would turn off the loading element right before displaying the results. Both would be performed as part of a "then" if you're using the fetch API or as part of the callback you provide as part of jquery $get/$post
You can load some variable in before true/false before executing a call to the API, then when after where you've processed the data, set it back to true/false. &amp;#x200B; During the switch ( time when API is chugging), change the interface to display different HTML?
I'd recommend making it a named function (instead of assigning an anonymous function) and using the onclick attribute for the `input` tag containing the button. So on line 34, change it to: `function calculateGpa() {` And on line 255: `&lt;input type="button" value="Calculate GPA" id="gpacalc" onclick="calculateGpa()"&gt;` https://www.w3schools.com/jsref/event_onclick.asp has various examples of assigning `onclick` events.
In the basic case you can think of it as... Function forEach(array, func) { For(var k = 0; k&lt;array.length;k++} { func(array[k], k); } } I'd have to double check the side-effects for any removals or additions to the array in the callback function. 
Your `win.close()` call won’t work that way, because you’re using a function-scoped variable for `win`. You need to use `let` instead of `var`.
Tru
A lot of loud yelling at Deno devs, while doing thing to contribute to the code quality. This is absolutely a great time and reason to introduce a code of conduct. The entitlement of some people who think an source project project some how owes them some level of quality or performance is staggering. "We should be careful about performance in this project, here are some current comparisons to be made, what needs to be done or interested to improve these numbers?" would go over a whole lot better than what this person is saying. Whether your problems are technical or not you still need a certain amount of of tact and social skills. Being "right" is not an excuse to be an asshole.
huh?
I think something like this would work: ```js async function pageRunner() { const questionElements = document.getElementsByClassName('question_link'); const allPages = []; let win; function receiveMessage(event) { console.log(event.data); allPages.push(event.data); if (win) { win.close(); } } window.addEventListener("message", receiveMessage, false); for (const el of questionElements) { await new Promise((resolve, reject) =&gt; { win = window.open(el.href, '_blank'); win.onload = () =&gt; { const thisPage = { url: window.location.href, views: document.getElementsByClassName('ViewsRow')[0].innerText.split(" ")[0], followers: document.getElementsByClassName('FollowerListModalLink')[0].innerText.split(" ")[0] }; parent.postMessage(thisPage, '*'); console.log(toString(i) + "/" + toString(array.length) + " DONE"); } } } window.removeEventListener("message", receiveMessage, false); } ```
Thank you so much for the help . The function is working now but I still can't get it to calculate the GPA. Do you see any other problems in the code? Like I don't know what im doing wrong but it should calculate the GPA with even 1 input however it isn't. 
HTML and CSS carrying the team here lol
It's added only for showing the whole thing to make this. 😀
Nice work mate😀👍
One of the problems is that your server doesn't look very fast. Getting the http://superpowers.surge.sh/favicon.ico consistently requires around: - 200 ms to connect - 200 ms to initial byte - 200 ms to download These numbers do not look good.
But that plugin and the one for events currently do not work in babel 7
Problems solved! Thanks for you reply. I just wasn't doing it right. I was trying to make sense of several not-very-good tutorials and making a mess of it. I finally located [the w3schools idiot-proof page that does what I want](https://www.w3schools.com/jsref/tryit.asp?filename=tryjsref_audio_pause) and finally I have audio. Thanks for your patience.
What should I do instead?
Yes - Google Chrome in newest version support them on desktop. Just go to site like pokedex org and on the chrome menu ( 3 dots ) you can install that website.
I *think* I get what's throwing you. Is your confusion about where and how `index` is assigned its value? `forEach` is a method on arrays. It takes two parameters, but only the first one is usually important so let's pretend it just takes one for now. That parameter is a function. `forEach`'s job is simple: whatever function you give it, it will run once for each element in the array. The function you give it is up to you to write, but it must have *at least* one parameter, which represents an element from the array. The first time it's run, it'll be the first element, the second time it's run it'll be the second element, and so on. If `forEach` didn't exist and we wanted to write it as its own function (not as a method, to keep the example simpler), we'd do it like this. We give the function parameter the arbitrary name `callback`. function forEach(array, callback) { for (let i = 0; i &lt; array.length; i++) { var currentElement = array[i]; callback(currentElement); } } function doubleAndPrint(num) { console.log(num * 2); } let sample = [1, 2, 3]; forEach(sample, doubleAndPrint); This prints 2, 4, 6. You can see that all `forEach` is is a `for`-loop that calls the function once for each element. If you suddenly realize that it'd be really nice to be able to access the element's index within your callback, then you would first change your callback to have an additional `index` parameter, and then you'd make sure to pass a value to it inside `forEach`, like this. function forEach(array, callback) { for (let i = 0; i &lt; array.length; i++) { var currentElement = array[i]; callback(currentElement, i); } } function doubleAndPrint(num, index) { console.log(num * 2, "at index", index); } const sample = [1, 2, 3]; forEach(sample, doubleAndPrint); That's exactly what's happening. `index` gets its value because somewhere inside `forEach`, your callback gets called and is passed the index. If your callback doesn't have a second parameter, that's just ignored.
You could use jquery .change() event when the user types in the search box and use ajax to return your dataset, use regex to filter your result and display the filtered result in a dropdown under your text input - should be easy enough to Google the HTML &amp; CSS. 
Probably easiest way is to use some readymade componet. I've implemented this myself with a div with possible choices. On textfield input you update the list and toggle if it shows. On list click you set the value of the text field and toggle the list off. Of course there's kazillion features you can add on top of that, but that's the basit jist.
your clouds are funny, are you a fan of Paul McCarthy?
My condolences 
😂
This is not very good
The mental image that flashed in my mind when I read this was that animated Gif of a man nailing his testicles to a board which I was unfortunate enough to see a few years back. 
 counter == 100
Why use jQuery for something so simple?
Thank you. 
1. Create a list (array) of options. 2. Attach "keydown" or "keypress" event listener to search input. 3. When a key is pressed, read the value of the input field. 4. Convert input value to lowercase and user Array.filter to filter the list of options to ones where the "optionItem.toLowerCase().includes(lowerCaseInputValue)" to make it a case insensitive search. 5. Render list of options into a container element so a list of results pops up under the text input.
What if you made the balls making up the clouds semi transparent, maybe letting alpha depend on the size, would that help in realism?
Hello, lib author here. The [introduction video](https://www.youtube.com/watch?v=zmojfyNH_EE) compares ObjectModel with TypeScript and shows some practical usecases : validate dynamic code evaluation, DOM manipulation, client-side data storage, form validation... You should watch it if you did not already. ObjectModel is complementary to TS/Flow, because its feature set is really different than static type systems. Models have been designed to use all the advantages of runtime validation, such as complex assertions, mixed value/type checking or custom error collectors. That's why I usually combine the strengths of static and dynamic type-checking: using static TS/Flow types in the business logic layer, and Models at the API boundaries to validate user input, network responses or serialized data. Some users also like it because of its versatility : you can use the same model library on the front-end and back-end (Node.js). For example, if you have to validate a form on the client side and on the server side (classic double check), you can use the same Models but link them to different collectors to do something different, like showing a warning message in the client form or rejecting the request with a descriptive message on the server side. It helps for consistency. I should really add a "What people say about it" section to the website, because I read many interesting comments over the years about how people use this library with a different perspective, sometimes for cases that I had not imagined initially. I saw it used as a layer over a NoSQL database, or as part of an end-to-end testing framework for example. Flow runtime is quoted in the FAQ but does not fullfill the same goal than ObjectModel. It aims to be a transparent layer over Flow, a static type system. So their feature set are very close, and does not really highlight the other usecases for runtime validation. Most of the time, you will end up validating the same thing twice, at compile time and runtime. I think it's a relatively big perf penalty for low added value. &amp;#x200B;
Wow great answer! Thank you so much! How would I go about step 5. Rendering the list? What would the code look like there? 
1. Create an absolutely positioned DIV element. Its parent should be relative positioned so the absolute positioned DIV is relative to that instead of the document. 2. Create an unordered list element inside it. 3. When rendering empty the contents of the UL element and insert a list of LI elements showing the results in it. 4. Show list.
It isn’t implemented in the core engine. Write it as s plugin?
Yeah. That sounds good😀👍
Yea, I'm using Surge for development. I'll have to find something faster for the final product. Or would a CDN fix that?
There's no solution like this currently available. 
jesus, what a failure
I usually deal with angular so maybe theres a better way. But if you just want to see the response you get I put this together: In the html just have &lt;div id="divID"&gt;&lt;/div&gt; Then in the JS: const request = new XMLHttpRequest(); request.addEventListener('readystatechange', (e) =&gt; { if (e.target.readyState ===4) { console.log(e.target.response); const div = document.getElementById('divID'); div.innerHTML = e.target.response; } }); request.open('GET', 'https://api.discogs.com/releases/946'); request.send(); I'm not sure exactly what you are trying to see with the data. 
I've now re-written that entire file, and no longer get that error, but thanks anyway.
Thank you, once I chose my resolve this worked perfectly. Upvoted :)
[removed]
OK, that is a good start, thanks a lot. What I am primarily interested in retrieving is... * Country * Released * Genre * Style * Tracklist I guess it would be nice to see these returned back with the release ID and possibly also artist, title, and maybe even label, cat# and format too, in a neat and easy-to-read way. One should be able to input a given release ID into a form, and have it return data for that release. [user inputs release id] -&gt; [app retrieves data from discogs API] -&gt; [app returns data in browser] What I would ultimately like to do is have this data returned as a .csv file, but for now it would be fine just to have it display in index.html
You're logging an object, which is a reference. You're then updating the thing that it's pointing to. When you look at the object in the console, is not a snapshot of when you logged out, but you're looking at its current state. If you were to use .toString() it would show 3 different log outputs
Do you want to have a web application, who fetch data from an API? From scratch?
Do you think that is very over-ambitious? The code that wowthatsabigpotato provided appears to achieve that result pretty easily, with only a few lines of code, it seems. From what I can tell all I need to do know is make it return the bits I want, and format it nicely. All I'm really trying to do is... [user inputs release id] -&gt; [app retrieves data from discogs API] -&gt; [app returns data in browser] That doesn't seem like all that much, but perhaps I'm wrong to think so.
I don't think the appropriate place to be posting your homework question is r/javascript; if you need help you should speak with your peers in the class, reference your textbooks, and look up questions on stackoverflow. &amp;#x200B; For edit 2, I think you should first look up the different ways functions are defined, specifically here an 'arrow' function. Then you should research how 'call back' functions work and how they are used. Then you should look up the 'forEach' method for arrays which is being used here and how it uses 'call back' functions. &amp;#x200B; Continue to work through your problems, research the things you don't understand online, and you will eventually succeed while learning a lot through the process (that's the point, right?). Don't let anyone just make your solution for you otherwise you'll never learn.
I see, but good luck :)
That's right console.log doesn't get resolved synchronously, OP has to make a copy of the object to observe its changes trough time 
i like it, the power of js canvas :)
The correct term for an API endpoint's response might be payload. The API returns a payload of data. If you're using JavaScript, Mongo, Express, and Node is the popular stack for a web app. You can call the API on the client or from the server, but with React I'm not sure which is best.
Check stencil.js It's build tool for custom elememt webcomponents. You develop very similiarly like React, however, it compiles everything down to vanilla JS webcomponents which can be dropped in any framework. Or be used solely on their own.
Thanks! If it's too ambitious, I will just have to change to any easier task. I'm not committed to this particular project; we just have to write a working JS app of some sort.
I guess I took his question too literally.
Depending on how many items you have in your list array that might get real slow. I would consider not doing a search through that array until the user has stopped typing for a pre-determined amount of time. Otherwise every key-down event is going to trigger a search.
Well most of those won't cast to a float as they're bitwise operations. But in general, use parseFloat. Don't prematurely optimise. 
&gt; The correct term for an API endpoint's response might be payload. The API returns a payload of data. Right, that makes sense, thanks. I want to extract the data I'm interested in from the payload, and just display them in the browser, at least to begin with (ultimately it would be nice to download them as .csv file, but that is way downstream of where I am right now). &gt; If you're using JavaScript, Mongo, Express, and Node is the popular stack for a web app. You can call the API on the client or from the server, but with React I'm not sure which is best. Not sure if I understand you correctly, but I was hoping I could just write the code with Atom and simply run it in my browser. If there are going to be other 'required dependencies' it might be too much, and I may need to change to a simpler project.
I guess that's possible, to run the code only using a browser. There are many tutorials on setting up a web app with a MERN stack (Mongo, Express, React, Node). But in theory, you could write this as a pure frontend and run it in a browser. I just prefer to have anything I do deployed so others can go to a browser and see it.
Don't reinvent the wheel, and it's not that trivial to implement it. Use some existing implementations. You may google one that fits your code/framework.
Sean Larkin from the Webpack team published a notional spec a while back that he dubbed ["unity components"](https://github.com/TheLarkInn/unity-component-specification), which is kinda like this idea. As far as I know, it never got anywhere past that, though.
Well, I think I'm a good bit of the way there already, maybe: https://i.imgur.com/IYvfOrS.png I've created a text input box and got all the data for one release to display in the browser; now I think all I need to do is: * Capture the input as a variable (release ID) * Use it to call API data for the corresponding release ID * Show only the data that's required in the browser and hide the rest I think there should be some way to hide all that data that is being called from the browser window and just have it in the console instead? Is it something to do with innerHTML maybe? If you don't know, maybe someone else can chime in.
I think something like this is quite possible, but I can only imagine doing it if you restrict the context enough. For example, I'm working through a forms design system with a declarative form definition language. It will handle field type checking, validation, conditional field display, that sort of thing. Let's call it Forms Markup Language or FML. 😀 So in FML you'd say something like "this is a checkbox named `shipping-same-as-billing`, when it is *not* checked, display and require a group of fields named `billing-address`". All the "business logic" is independent of whether it's implemented in React, Vue, Web Components, jQuery, or HTML generated on the server side with plain JavaScript helpers in the browser. You'd have an "adapter" to take FML and convert it to the appropriate output, plus of course some helper scripts to implement whatever additional support the framework needed. This problem is hard enough if you just look at typical form-filling task and all the things people want to do there, but I can't imagine trying to write a general app that has even more custom logic that is more general and less constrained than forms.
Haha, this made my day, tears in my eyes from laughing. Or maybe from wasting so much time on webpack.
Alot of people are suggesting javascript to create autocomplete list but won't using html5 datalist just do the same as long as data isn't dynamic? 
These frameworks are way to complex that a tool can fulfill your needs
I like serializing and back again for this: console.log(JSON.parse(JSON.stringify(h)))
Great article thanks
Wow, that is brilliant, many thanks. It is really interesting to see the similarities between your code and the perl code I have that performs (or used to, in any case) much the same function.
Very interesting, thanks for sharing!
Ah i've never used perl I heard it can get tricky. But yeah most of it is dom manipulation though if you want to look into things like getElementById or QuerySelector. Good luck 
&gt; but I can only imagine doing it if you restrict the context enough. 100% agree! But I believe you can limit the scope a lot and still have a viable tool, so it should be ^^maybe ^^possibly ^^perhaps possible? Imo you wouldn't necessarily need access to most of the frameworks' APIs for writing component logic itself (Computed Properties, Suspense etc.), it's fine if all business logic within the components has to be vanilla JS (with some rather basic API to hook into the different frameworks' render process in a universal way). If the component logic itself is Vanilla, but the public API surface is transpiled in a way that feels native to each of the respective frameworks, it would be a big win already. Going further, it could also be extensible, so you write 80% of your component library in a universal way, but for the couple components that definitely need (or greatly benefit from) access to framework-specific functionality, you could have framework-specific adapters. E.g. you have tons of fully universal components, but then your universal `&lt;LoadingSpinner&gt;` also has a `LoadingSpinner.react.uc` (just made up the `.uc` extension for universal components :D) that's only loaded for transpiling the React version. There, you could add some Suspense functionality specific to React... Just like most things in React Native work platform-agnostic, but you can have adapters in native code for some functionality specific to Android or iOS. Your declarative form definition language sounds really interesting, do you work on it openly on GitHub by any chance? :p
So you'd have a universal definition for "take this input (props) and render this markup", some basic access to "do this when stuff updates" which will then run your vanilla code (transpiled to `updated()` for Vue, `componentDidUpdate() / useEffect()` for React, etc.) , some universal API to access `refs` so you can do DOM stuff and not much more as a start.
It's amazing!
Yeah, Chrome even tells you this behavior in the console - any object that you reference and resolve has a little icon saying "Value below was evaluated just now".
I forgot now but I remember a few months back I saw a link to a website that showed computer languages and concepts in a graph format. It was something like "I want to learn.... NodeJS" so it will show ExpressJs, Javascript etc etc.. alongside it with some circles being bigger than others to show more emphasis. It was a really cool website to plan out your journey when picking up a new skill but it would compliment this site soo well. Too bad I forgot the name =/
Creepy
Lol yeah 😅, good catch! Glad it helped.
You are thinking of testing in a different sense than a professional. For more information, look up Unit Testing and Test Driven Development. Those are probably a little advanced for you right now, but just know that there are better ways to test code automatically. Every single thing in your code is "wrong" in my opinion. Why are you using `let` instead of `const` (not a single one of those is reassigned)? Why is the function called `mainJS`? What does that communicate? Why does it take parameters for `ed` and `eminem`? It is clear from looking at the code you don't understand how functions work. Why does `randomwords` (which weirdly isn't camel-cased like the rest of the code...) have some HTML snippets in it? That will make it less reusable. I can't use those indices with `&lt;br&gt;` in the same way as the plain text ones. It's probably lowercase because the ID in the HTML is `randomwords` and the author isn't sure what the difference is between HTML/JS. The structure of this code is poorly designed for many reasons that make it hard to critique. It just runs straight through (so no need for a function at all as it's written). One thing programmers do is look for ways to reduce pointless duplication. See how you're calling the `Audio` constructor multiple times? That's not going to scale. Imagine you had to support 1,000 songs. 10,000 songs? Code that "works" for 2 does not work if it doesn't scale. I think you should first learn to be less defensive. What you have works by mostly chance and good luck with a limited set of inputs. A professional will write code to work for many purposes with a huge number of inputs. You need to work on some of the very basics in terms of syntax. You need a better grasp of how functions work and how to do more work in code rather than by typing (that `if/else` thing has got to go). You need to understand how to avoid repetition and make your code communicate its intentions better. Make your code as easy to understand as possible. Read other people's code.
The wording is super weird on quite a few of these questions, making these more about figuring out what you're trying to actually say than testing your knowledge. Check boxes instead of radio buttons? Wat. Also, no explanations for wrong answers is a definite -1 for me.
The question is not related to onclicks per se, so the title is misleading. More crypto / security related. I'll do my best to handle it as such, but keep in mind that I'm a rusty cryptographer :-) Fetching the entire collection is a horrible idea — a compromised user could then fetch all the passwords of all the messages. Moreover, storing the passwords in plain text is a very bad idea even without sending these (see [https://security.blogoverflow.com/2013/09/about-secure-password-hashing/](https://security.blogoverflow.com/2013/09/about-secure-password-hashing/) for details). Keeping in your design boundaries, I would have a route that accepts the message id and the password, then sends the decrypted message. That's basically the same route you have in mind, just without the page reload. Even then, do not check the password manually, use node's crypto module. Decrypting on the front end might spare the server resources, but I believe there is no established JS crypto implementation (and I'm not even sure that's possible at all), whereas on the server you have OpenSSL. Now that I think about it, why would you store the password at all? The password either decrypts a message, or it does not. Why take the extra risks storing it? A more detailed description of what you're trying to achieve might help. Maybe HTTPS + user authentication are enough?
Will check it out, thanks! But it sounds a little like the exact opposite of my wish: you write it like React, but when you want to actually use it within a React app, it'll still behave like an alien Web Component, not like a component built with React. (and also need additional Polyfills/Runtime for IE9+/Edge/older Firefox?) What I imagine is the other way around: you write it in a way that's not necessarily React, maybe a custom syntax, doesn't matter, then it'll be transpiled to actual React/Vue/Web components.
Agreed. The fastest way is the one where another developer can quickly read the code. That’s the most important speed. 
Not that I know of. If you're thinking of server push, that's for resources to be cached, not for data
An almost identical example is used in [a talk by Vyacheslav Egorov](https://youtu.be/65-RbBwZQdU?t=173) regarding javascript benchmarking pitfalls. TL;DR: use `parseFloat`. The difference in performance is down to the optimizing compiler removing significant portions of the benchmark's loop since the computation made inside the loop isn't used anywhere; i. e. it's entirely specific to the benchmark.
 &gt; I believe you can limit the scope a lot and still have a viable tool Definitely. It's just tempting for people to push a context-restricted tool past its boundaries, and just as tempting for people designing that system to try and make use cases fit that don't really fit. It's something to be conscious of when you're designing (or using) such a thing. &gt; Your declarative form definition language sounds really interesting, do you work on it openly on GitHub by any chance? I'm working on this as part of a project at USDS called [us-forms-system](https://github.com/usds/us-forms-system). I think there are several drawbacks to what we have now but 1.0 is a good proof of concept. It's in use at [va.gov](https://www.va.gov/health-care/apply/application/introduction) for example. In order to make it scale and work in other places I think it needs fewer wired-in dependencies. So the code or form specification language you see in that repo is not really what I'd like to build on. &gt; E.g. you have tons of fully universal components, but then your universal `&lt;LoadingSpinner&gt;` also has a `LoadingSpinner.react.uc` Yeah, eventually each framework renders it down to a different collection of `&lt;input&gt;`s, CSS, event handling code, re-rendering in response to input data (React "props"), etc. Yet *so much* of what defines the behavior of a form input happens above that level. The simplest case to see this is an input for something like a phone number. At the lowest level, it's an `&lt;input type="text"&gt;`. That input needs just a few framework-specific things (user input notifications, framework-triggered changes, DOM events). Other things like input validation, output formatting, AJAXed lookups to see if the number is blacklisted, etc., are all framework independent. So it should be possible to define an `TextInput` that is the basic HTML input with framework plumbing. Beyond that you say "`PhoneNumber` is a `TextInput` with this validation and this output formatting" and "`PhoneNumberWithBlacklist` is a `PhoneNumber` with this extra validation". 
No error or sanity checks (which you should definitely add), but something this would work in your current example. The data format is a little weird with nested arrays. I'm also assuming there's no other elements with class `.item-i-9-4 item-i-orange` - if there are, use `querySelectorAll` and loop through them. const element = document.querySelector('.item-i-9-4 item-i-orange'); const data = element.dataset; const tooltip = JSON.parse(data.tooltip)[0][0][0]; 
Can I ask, what's this bit doing please? if (data.tracklist.length &gt; 1) { data.tracklist.forEach( (track) =&gt; { tracklist += `${track.title}, ` } ) } else { tracklist = data.tracklist; } I think that it's saying if the tracklisting is longer than one character then make a tracklisting with commas to display, but why is it needed? What does it do otherwise (in the 'else' condition)? TIA.
I typo'd the query selector. It should be something like `document.querySelector('.item-i-9-4.item-i-orange');` - you'll probably need to make more tweaks, but all of the information you need should be there. Take a look at https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset for more info.
How tf do you use any website these days with javascript off. The old advice to turn it off by default was meant for a time when most websites were static html.
It seems like an interesting idea, but at the same time, this is a problem that fewer and fewer people have. The bigger React gets now, and it's growing in rates that are insane, doubling per year, it'll become less important to abstract component models since we finally have a more or less concrete model of how a component looks like and a full community behind to support it. The simplicity of this model already allowed some exchange, but things like hooks will make sharing code and components a full reality as they remove everything that ties a component to a framework (and/or a platform, like the browser). Hooking into lifecycles and state will be trivial to implement in any framework and some are already trying it (for instance Vue). Give it a year or two and we'll see frameworks co-operate in ways that would've been impossible before.
Thanks for your reply ,will work on your suggestions.We will improve by adding more features as per feedbacks.
Google has made it compulsory for all websites you are right it is hard to find any website who is not running javascript
And we wonder why websites and electron apps are so slow.
For some reason when I change const to var it works, I mean it grabs the dataset and prints it in console, but when I change back to const it just shows undefined..
I mean no disrespect when I say this but that framework will likely never exist without some serious backing... Whoever tackled such a framework would not only need to track roadmaps on each of the underlying frameworks but also keep up with upcoming web standards. It would be an exercise in futility for a single developer or possibly a small team... 
I'm not sure if it's the wording or the features. And maybe it's a great set of features. But it definitely isn't for me. I have to admit I spent very little effort reading the site and then writing my comment :p At first I was a bit excited, thinking it was an app that could potentially help me track my time to be more effective (currently using Toggle though). But when seeing that and looking at the pictures it seemed like it is for the usecase of managers/employers forcing their employees to put every single second on a specific task or something (I've been there, and it made for a terrible unproductive working environment), and then measuring their "performance" by how well they were able to earmark every second. I think one of the most important things in an effective healthy workplace is a good sense of trust between managers and employees. And peeking over everyone's shoulders, making them account for every second and then judging them by it seems counter-productive. But, like I said, maybe I misunderstand your app completely. I spent very little effort reading the page. I wish you the best!
see my answer here: [`https://www.reddit.com/r/javascript/comments/9xusun/we_made_an_developers_productivity_assistance_app/e9zb7yv/`](https://www.reddit.com/r/javascript/comments/9xusun/we_made_an_developers_productivity_assistance_app/e9zb7yv/)
Hi Vklepov, Thank you very much for your answer. To be more specific, the exact concept is: 1- An user can sign-in on the website and then create a page on which he can send crypted messages. 2- Random users can visit his page, but will only see crypted messages. To decipher them, they need a secret password. 3- The password is given by the page-owner each time he creates he new message. 4- When a random user clicks on a "decipher" button, it trigs function that appends an input field in the DOM, so he can enter the secret password. Until here, I can code it without any issue. 5- If the password typed in the input field matches the requested password given by the message author, then the message is deciphered. Long story short, it's not rocket science, but I don't know which is the best strategy to make this comparison and trigs the deciphering function. For practical purposes, I used simple-crypto.js, which has two basic encrypt() and decrypt() methods. Maybe crypto-js would be a better choice though. I don't know OpenSSL. Only Javascript, express and mongoose. 
Do you intend this as a fun coding challenge, or do you intend to use it production? If that's production code, you might not want to do it yourself without security experience. I would stay away from simple-crypto — with small user base, it's likely to be leaky. crypto-js is a better choice, node's standard crypto module (which uses OpenSSL under the hood) even better. Both run in node, not on the client. As I guessed, you do not need to store the password — you just decrypt using the key (password) provided, and you either get the message or you get garbage. Rolling any checks on your own would likely expose you to a multitude of attacks we are not aware of (especially side-channel attacks). Of course, if it's a game-for-fun, this does not really matter =)
#1: Use Angular instead
Should we move away from using planes since there is a new Tesla model coming?
React doesn't work well with web components; see the tests on [custom-elements-everywhere.com](https://custom-elements-everywhere.com/). TL;DR: React can't pass objects/arrays directly to components. React will only pass strings.
Secret messages are already in mongo? Accept a get request (not a post) on your api, something like api/message/:message, do your db lookup and return either a 200 with a JSON with the message or a 404. Your axios request will .then into your function to expose the data to your user, probably by injecting it into an element youve premade. You'd also have a .catch to surface a "not found" message if they put in a bad password. No page change needed.
i added all in on function because i can't link 2 functions 
I can tell you when we are done :D So far we have a prototype that's working well but isn't feature-complete, some important things are still missing. So far it has been a joy for the people that worked on it (I didn't so far) from what I have heard. Typescript was a big help, plus being able to use ES6 as a supported baseline was quite liberating. Plus we had learned a *lot* of lessons from Vue 2.0, so the things to make better this time around came naturally.
Amazing, thanks very much. https://media.giphy.com/media/MUeQeEQaDCjE4/giphy.gif
This was a super interesting read. I’m just diving into websockets I’m more detail and the background in the post was v useful. 
This is a super informative article. Thanks for sharing.
haha no problem. also I forgot in the else it should be tracklist = data.tracklist.title 
Yup, you might be right, this might happen. Basically, React becoming so big that everyone else needs interop to stay afloat :D But I do think that it'll still take a lot until we reach this time – when we can write components that natively integrate with popular frameworks and are usable without any framework as well. Some sort of Rosetta stone for components
can you put this into a codepen for us to test it there instead of downloading your code?
Having a scroll listener can fire more than you think. If you put a console log in one of your functions you will see how much it’s fired, and if your method is very memory intensive firing it that much can weigh on the browser. What exactly is your function trying to do?
Then just enable javascript?
Please, I'm not here to write code for you ;-) &gt;As I guessed, you do not need to store the password — you just decrypt using the key (password) provided, and you either get the message or you get garbage. &amp;#x200B;
Pretty sure if you make a minimal demonstration of that behavior you can track the bug easier. 
Ah, right. I guess that's like, 'the tracklist is the data which is the tracklist which is the track title(s)', maybe. By the way, do you happen to know why discogs' API looks so different in [Chrome](https://i.imgur.com/26yJmmq.png) compared to [Firefox](https://i.imgur.com/7Tp9tCb.png)? I was wondering what you were on about when you said 'click on the arrow next to artists', until I saw the API in Firefox.
Don't get me wrong, go is fast as hell, but these benchmarks bare pretty thin when comparing entire languages and tech-stacks. Go is not a silver bullet for performance.
Yeah well before the if() i set tracklist to an empty string. during the first loop its really ‘’ += item.title then after the first loop it becomes ‘track 1, ’ += item.title then after the second loop it will be ‘track 1, track 2, ‘ += item.title but if its not going through the loop might as well just set the tracklist to the only track title available(if it is just on object format and not an array. still just a preventative measure) But my bad haha i forget a lot more people use chrome instead of firefox. The developer tools are supposed to be superior in chrome I thought. Not sure why its not organized neatly like it is in firefox. Might have to change settings idk. 
https://codepen.io/Minoo7/pen/MzEjmp
https://codepen.io/Minoo7/pen/MzEjmp
There's actually a data type that does exactly this. It's called a [trie](https://en.wikipedia.org/wiki/Trie) and can be used to auto-complete words with incredible performance. Basically, what it does is store each character as a key in the structure, and then the next possible characters are stored in a an object on that key, and so on. This creates a tree that you can go through character by character incredibly quickly. I wrote a little script to do this for fun and to show how tries work. Use it or do whatever you want with it! https://gist.github.com/PicturElements/1b9a6e37ccee68213499c4aac0278b2e
OK, thanks for explaining what kind of bar you are trying to clear. I've had quite some success with using Vue inside WCs and also using WCs inside Vue. WCs being Custom Elements and Shadow DOM. As you point out it is not 100% seamless, but I haven't found it a burden. It is running inside Electron, so I don't have to deal with polyfills etc. I'm not optimistic about your chances of finding a universal API for making components which work seamlessly on React/Vue/WC/etc. The best approach I can think of is WCs at the core plus a thin (generated) layer for each toolkit to smooth out things like React's prop passing or Vue's events, i.e. a thin translation layer or wrapper around WCs. 
When using anchors as normal with an href="#link" and a id="link" My url script that changes the url depending on where in the website you are currently on (scrolled on). It gets bugged when using id="" so I tried to solve it by giving the id to the header when clicking the link to it and then it getting autmatically removed after so it wont bug the url script but it doesn't work after clicking the links multiple times
Ah, the mark of a terrible dev. When all you have is a hammer, everything's a nail.
I’d absolutely second this, put a 1.5-3 second delay on the search 
No need to be a smartass.
It seems typing helps for big projects
Thanks for the reply. It'd be great to have a follow-up when it's done. Maybe a blog article about the process, difficulties, feelings from the developers, and time involved. I've seen a ton of articles about moving to Typescript but few talk about the time involved and other concerns. It'd be great to hear from a fairly large project because it could guide decisions in large corporations that require examples for cost/benefit analysis.
As someone who has been working with React actively for a year, this is a great write up with some pretty good reminders (at least for me).
Thanks for the feedback mate. There's a part 2 in works as well. Thanks again
I love this. Also, your website's down!
This is the JavaScript sub... were you expecting pitchforks and boo's?
Thanks for the post. About to read it, I’m just starting to learn it 
How'd it go?
On Chrome &amp; Firefox for me it's just a white background, nothing else. We can take this to a DM if you want!
Argh forgot about it again. Will have a look tomorrow hopefully 😀
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
You typically shouldn't bind or make new functions in the render method, if it can be avoided. This is so calling render doesn't have to make a bunch of new functions every time. &gt; We generally recommend binding in the constructor or using the class fields syntax, to avoid this sort of performance problem. https://reactjs.org/docs/handling-events.html
Thanks a lot! Completely forgot about that.
Actually yes. But it would have complicated the example. For the simplicity sakes, I kept it like that. Thanks btw
Very helpful
Thanks buddy. Stay connected! 😄
Why not? You can heartbeat to keep the connection open and ID the connections to allow for bidirectional communication, reconnects, etc.
Time for firewalls to update?
If you enjoy having your teeth extracted slowly without anaesthetic, use Angular
Why use regex instead of a substring match?
Nice writeup! Regarding the `proxy` field in `package.json` (section 6) - it should probably be clarified that it's tied to create-react-app and nothing that "just works" out of the box.
I will update the article to reflect that. Thanks for reading and the feedback, much appreciated.
Happy cake day btw!
Say I have 1 parent and 2 child components. Something like Comments (parent) and List and Form (children). I post a new comment using the Form and I need to tell List to re-fetch the new data. In your opinion what would be the best approach ?
How would you compare our with `json-swrver`?
Hi, thanks for the review, I wanted to test how simple could it be to create a functional storage unit using JSON &amp; my current Node.js experience, so I didn't really think long term about this, but UUID is something I haven't even thought about and will definitely learn more of. Thanks again.
Yeah of course! &amp;#x200B; From what I can tell, you're storing an array onto the file. I think you should look into maps and see if you can store that instead. That way the lookup times are faster and you don't have to iterate each item in your database to find stuff. 
You have created a glorious thing. *Now we get to watch it burn.*
bdd
Time for webdevs to tech support? Let's not.
[removed]
Haha, nice one
I broke it pretty bad. Fun.
This is called a [fluent interface](https://en.wikipedia.org/wiki/Fluent_interface). It's mostly used for domain specific languages.
Design looks nice.
yeah it would also be awesome to hear which patterns stuck, and how it was configured.
I didn't try it, but maybe try using CSS to load your custom font (with @font-face), and then use `-webkit-font-smoothing: none`. Problem is that you'd be limited to Chrome...I don't think other browsers support font smoothing. A better idea would be to use an image of a font, and render it like you would a sprite from a sprite sheet. Here's an 8x8 font from MS-DOS if you want to go that route: https://i.imgur.com/5DPfeXW.png
So just for fun, why not use classes? I prefer class because if it grows or I start to need component lifecycle its there. Functional components appear too limited and don't prevent useless renders. 
If you suddenly remember, pls, write the link, ty mate 💫
that's not a bad approach to take. I actually do the same, and when I'm finished with a component and I think I can pear it down I do so then. This will sometimes involve moving state and logic up so that the functional component is only presentational. 
no, you do, just tap softly while turning them with pliers.
Why don’t you just wrap your css code in media queries?? https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries
As someone who decided to dedicated a large part of the day to learning React, this is very timely. Thank you.
As a beginner, that second is a godsend, thanks.
The example *would* be `foo.should().not().have().lengthOf(3)` Except that chai defines all of these argument-less methods to be [getters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get), which (aside from should) modify and return `this`. That use of getters might qualify as an idiom in and of itself, but it’s certainly *also* a fluent interface.
Are you using the GPU for the simulation of agents as well? Also did I understand correctly that you're running a million neural networks simultaneously at 60 Hz? If so, that's only possible on a GPU for sure edit: realized this is a 2 months old thread, sorry
Glad to hear it! :)
FWIW, Dan has said several times that he rather regrets writing that article because people take it as a set of rules to follow, instead of an observation. The latest example, [from today](https://twitter.com/dan_abramov/status/1064248583229243392): &gt; There was never a distinction between “presentational” and “container” in React. I regret writing that article as people take it as some sort of gospel.
 // Moved this to the top of the file "use strict"; // Moved element names and targets args to a object for look up // This makes it easier to read and expand // I removed 'none' because it is never used var fileTypeProperties = { js: { element: 'script', srcAttr: 'src' }, css: { element: 'link', srcAttr: 'href', } } function removeFile(path, filetype) { // Do a look up var fileTypeProperties = fileTypeProperties[filetype]; if (!fileTypeProperties) { return; // Return early if filetype is not found } var element = fileTypeProperties.element, srcAttr = fileTypeProperties.srcAttr, allSuspects = document.getElementsByTagName(element), for (var index = allSuspects.length; index &gt;= 0; index--) { // Search backwards within nodelist for matching elements to remove. var suspect = allSuspects[index] if (suspect &amp;&amp; suspect.getAttribute(srcAttr) === path) { suspect.parentNode.removeChild(suspect); // Remove element by calling parentNode.removeChild(). } } } function createCSSElement(path, parent) { var link = document.createElement('link'); link.setAttribute('rel', 'stylesheet'); link.setAttribute('type', 'text/css'); link.setAttribute('href', path); link.setAttribute('media', 'all'); parent.appendChild(link); } function resizeChecker() { var cssResolution = window.innerWidth; var head = document.getElementsByTagName('head')[0]; removeFile('css/default.css', 'css'); removeFile('css/changed.css', 'css'); if (cssResolution &gt;= 720) { createCSSElement('css/default.css', head); } else { createCSSElement('css/changed.css', head) } } window.addEventListener('resize', resizeChecker); I've fixed it up a little and optimised it. Main things i've done is clean up the ternaries and moved the create css into its own file. What you are trying to do is supported natively by [https://developer.mozilla.org/en-US/docs/Web/CSS/Media\_Queries/Using\_media\_queries](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries) so you should use this instead.
That worked. Thank you.
I'm glad you could get it working! And regarding the "JS inserted like this won't execute" part, it's irrelevant to your issue, but if you insert JavaScript into the HTML using `document.innerHTML = &lt;div onclick="alert('Hello, World!')"&gt;&lt;/div&gt;` or something like that, I _think_ it might not work.
Keep the fetched comments in state in the parent. Make List a functional component that takes the parent state as props. That way the List re-renders whenever the comments are updated. 
What's the technique/API for this? Are you referring to SSE or something I don't know about?
I am trying to get better at JS and I thought this might be a good way.
I'd still prefer to use asciinema because it is actual text that can be copied/pasted. Gifs of terminals are always a massive pain.
Thank you very much! I appreciate it!
If you want to accomplish the effect in the first link ([weatherstreet.com](https://weatherstreet.com)), I'd recommend doing the following: * Open the video in Photoshop (or any image/video editor that can export the individual frames as images) and isolate each frame you want to use as individual image files. Hopefully you have Photoshop because that's all I can advise on, but you can use the Timeline panel to seek through the frames and then File &gt; Save for Web to export that frame in whatever format you'd like. * For simplicity's sake we'll say your HTML looks like this, style it with CSS however you like. &amp;#8203; &lt;img src="image_01.jpg" alt="Weather Map" id="img" /&gt; &lt;ul&gt; &lt;li&gt;Sunday&lt;/li&gt; &lt;li&gt;Monday&lt;/li&gt; &lt;li&gt;Tuesday&lt;/li&gt; &lt;li&gt;Wednesday&lt;/li&gt; &lt;li&gt;Thursday&lt;/li&gt; &lt;li&gt;Friday&lt;/li&gt; &lt;li&gt;Saturday&lt;/li&gt; &lt;/ul&gt; * Add the following function, either inline or in your JS file. Just make sure the ID "img" matches the ID of your image in the document. &amp;#8203; &lt;script type="text/javascript"&gt; function changeImage(source) { document.getElementById('img').src=source; } &lt;/script&gt; * Add an "onmouseover" event to each of your list items with the source of the image that should appear on hover. &amp;#8203; &lt;li onmouseover="changeImage("image_02.jpg")"&gt;Sunday&lt;/li&gt; &lt;li onmouseover="changeImage("image_03.jpg")"&gt;Monday&lt;/li&gt; &lt;li onmouseover="changeImage("image_04.jpg")"&gt;Tuesday&lt;/li&gt; Now, this isn't precisely how I'd do it if I were going to make something like this from scratch but it's probably the simplest way for you since you're a beginner. It's also essentially how they do it on [weatherstreet.com](https://weatherstreet.com). Good luck, let me know if you have any questions!
Think `&lt;script&gt;` tag needs `type=“module”` and be sure you are serving from a web server.
Font antialiasing issues occur when using css or the canvas api to scale (creating a canvas at a certain size, and outputting the resulting pixels at a different one), and there's nothing you can do from the canvas end that will be able to control how the browser truly antialises this text. Your only options are to draw the font with an image font at different resolutions, or scale the canvas manually, not using css/canvas api.
I totally get that in the spirit of this being a library over a framework, your patterns are pure preference. But honestly it’s an excellent place to start. It gives someone new to react ideas to hang their apps on instead of just “do it however you want”. I’m all for experimentation, and what I build on a daily basis has a mixture or a lot of approaches (no rule is too hard or too fast). But for someone starting out, the concept is a solid foundation from which to experiment. 
I don’t know much about the boot camp world, but if you don’t want to be a web developer you probably shouldn’t continue down this road. It’s basically the 1 job that learning js, html, and css prepares you for. 
Would also suggest if it's a single answer to do a radio button not a select box. Check boxes indicate multiple selections
Depends what your life goals are I suppose? The point was regarding a lack of public github projects affecting a candidate's competition in the market - it's not an issue (at least where I'm based).
Seems like an idiom. Outside the javascript world, people almost always write such things as `foo.shouldHaveLengthOf(3);`
I agree with this point, except that I imagine web development could be a pretty good stepping stone into some other kinds of software development if there's motivation. Modern web development does some pretty advanced stuff, and node isn't limited to web development specifically. Fundamentals are fundamentals anywhere
Right, it's not a _bad_ idea at all. Dan's comment was just fresh in my mind, and I wanted to emphasize that it's not a requirement.
Without a doubt, this is true. Was just answering the question directly/literally.
True, JS is a very capable language and there’s a ton of infrastructure to support it. But be aware that it’s an idiosyncratic language that doesn’t prepare you for compiled languages or even server-side scripting ones. If I were hiring a coder for a stand-alone system or for server-side development, I wouldn’t consider a candidate who had only JS and CSS/HTML.
First create an action for which will take color as an input. Another action for sending data from cell and store it in redux store. Create a reducer for above actions. Please share how you have created actions, reducers so that I can guide you further. I can definitely solve this problem if you share your code :)
For this type of thing wouldn't you just get your own host off site?
Sure, I’d argue that that specific flavor of desktop apps is just blurring the lines around what “web” consists of. If it’s javascript, html, css, and a chromium process is it not still web development?
I'm not sure about the performance of that tho. I'm already calling drawImage a lot of times per second. I'm already using CSS to load the font, I also tried all the different smoothing methods. None of them made a difference.
Thanks! 👍
 fetch('http://localhost:8888', { method: 'POST', headers: { 'Content-Type' : 'application/json' }, body: JSON.stringify({ name }) });
no changes at all
be sure to install express body parser.
double checked, still there
I was really curious about how that worked so thanks for clarifying that this won't work in my non-CRA app haha
I made a fun project called [Daux](https://github.com/dauxjs/daux) a few months ago. It's an immutable model-based state management solution for your JavaScript apps. &amp;#x200B; Last week I created some docs for it.
No problem! Like I said, it’s great stuff. Always nice when I catch myself finding out something new or remembering something that has slipped my mind about React.
Don't add --save flag, ok? 
Thanks for your answer.
This is a good read.
That doesn't make it... Maybe to achieve this for example:- `npm i bootstrap` 1-*npm add it to project package.json* 2-*npm checks the global folder for bootstrap* ---* if there ? that's it : install it globally* 
Regarding 5 (avoiding useless classes) =&gt; It's important to note there is currently no benefit of stateless components vs classes =&gt; they boil down to the same thing: [https://reactjs.org/blog/2015/10/07/react-v0.14.html#stateless-function-components](https://reactjs.org/blog/2015/10/07/react-v0.14.html#stateless-function-components) (although who knows that may change at some point in the future &gt;&lt;).
This is Javascript tho
Cool, I have no problems with web development or web applications. That’s what I’m interested. I was only wondering what else can be done with JS. I also plan to learn Python alongside 
Yarn for example has a global cache for all modules, so it it's been installed once on your computer, it's taken from there making the install a lot faster. If I recall correctly the team (or the team of some other package manager?) is also looking into just linking the dependencies from a global cache instead of copying them.
All I see is 404
This is not entirely true. You have similar paradigmes in other programming languages as well. I've used a few of them in C# for instance.
use app.use(bodyParser.json());
Don't do this, it would cause too many issues than its worth. npm and yarn both do caching but if you need to save on disk usage look at [pnpm](https://pnpm.js.org/) or the new (experimental) Yarn PnP api.
Guys, thank you so much for your feedback! I'm appreciate for your time, it seems like you showed me one of the main problems right now.
If you want to go forth, check React (like you said), Node.js (like you said, also my fav framework is AdonisJs) and perhaps Vue.js. Don't spend precious time on jQuery unless you want to go backwards. Also it wouldn't hurt to know how to design databases.
*(down for a while for safety reasons)* LMAO
I'm very new to Java Script and programming in general, please help me.
You can implement your own logic with SSE. If you work with websockets, it's pretty much the same issues. Clients reconnect and you end up with many duplicates if you don't use IDs to clear the old connections that have the same ID.
No, but I can go full strawman if you want: what do you say to a client that asks why your chat app doesn't work while others do?
Aaaaaagh! Yes of course! Nice man thank you! It worked &lt;3
It's very interesting to note that usually one of the biggest reasons people like to use a flavour/framework etc is due to its perceived "elegance" while at the same time the biggest reason why people dislike the same thing is due to its perceived "clumsiness". I guess it makes sense but funny nonetheless!
Is there a way to pop this open in a full page iframe instead of actually redirecting there?
I think a great improvement would be a list of classes to ignore. such as classes that are used for "state" i.e \`js-opened\` or \`is-active\` you know.. those that a re conditionally added to the dom. &amp;#x200B; Great tool though
You are missing two points here, &amp;#x200B; **- Use** app.use(bodyParser.json()) \- **Try to stringify your JSON data when sending it using fetch,** fetch('http://localhost:8888', { method: 'POST', body: JSON.stringify( { name } ) }) &amp;#x200B;
A good rule of thumb for `eval` is if you trust the code you're `eval`-ing it might be okay if you can't find an alternative solution. In fact the only canonical way to actually run a non-strict classic script from within a module script (or even a strict-mode script) that will work in every compliant Javascript environment is to use (indirect) eval on the source text. Other mechanisms like `&lt;script&gt;` tags, node's `vm` and others are all platform specific.
forget ionic and just use cordova and react.
Ok i will try to do it, after that i will share my code
Great point, there are alot of missing features and bugs, it does not look for comments or media queries etc. I added a way to "Keep" selectors by pressing them in the unused table and I was working on a predefined selector list like "::" but did not finish it. &amp;#x200B; To be fair, it was probably way to soon for me to show it to people since it has a couple of issues :D
I really didn't find a lot of the information in this survey useful. I'm not sure if it's the way it's presented or how a lot of the data is very similar from language/framework/tool to another. The country heatmaps including countries with only 5 responses made them useless (not to mention the bad colors used), the salary information was all pretty similar, the reasons for liking or disliking things were super generic. I think the comparison quadrants were a handy visualization but most of the rest of the data was of no use to me. Also reading on mobile is a pretty bad experience. Lots of things cut off that need to be scrolled left and right to see, can't see much data at once...
its just so hard to read..... like wtf am i supposed to make out of this: https://2018.stateofjs.com/connections/ 
Wtf
I just realized now you can tap the very edge nearest to the labels to highlight. Not the labels themselves of course, that would make too much sense (and they all overlap anyway). 
The colour coding on the charts is a bit weird too. Looking here for example: https://2018.stateofjs.com/front-end-frameworks/overview/ In terms of measuring the interest in a framework, broadly the colour coding is: Red = good, Blue = goodish, Light red and Light blue = bad. It's still an interesting survey though. Always nice to see with the winds are blowing in such a crowded arena.
&gt; Also reading on mobile is a pretty bad experience. It really was. Anyway, feel free to dig into the source data, you can find it here: https://github.com/StateOfJS/StateOfJS/tree/master/surveys/2018/website/src/data/results Maybe someone can make a mobile friendly version that has slightly more meaningful charts. :) 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [StateOfJS/StateOfJS/.../**results** (master → 7c4023d)](https://github.com/StateOfJS/StateOfJS/tree/7c4023d4fffd341e6a143e9a7b46d81228779b97/surveys/2018/website/src/data/results) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply ea13017.)
Never done a boot camp as I did a CS degree, but I’m predominantly a JS developer. I never did any JS at university and picked it all up after graduation. With JS you can work in basically any field, maybe not the AI/ML stuff (yet - it’s becoming more common). I’m a full stack developer and focus mainly on mobile apps using React Native, but I also oversee a React web team. A lot of people think JS is simply web front ends and simple APIs with Node, but there’s virtually no limit to the things you can write. JS is so portable and popular that it’s practically everywhere now - I’ve even embedded a JS app into a Swift app before for a unique use case. You could do front end web, full stack web, mobile apps, backend, IoT, the list goes on. You can even do things most people associate with much lower level languages, like compilation and embedded systems. And you can work in virtually any industry you want, since nearly every business could find a use for a JS dev.
Yippi ka yay motherf*cker
guess what, forget what people are saying that webassembly won't replace javascript, that is a big fat ugly lie. webassembly is going to f*ck javascript
The tweet!!!!!!!! Brendan!!!!! for me it is really bad if js die.
You submitted this just yesterday.
That was very revealing. I was having a really hard time learning angular and related technologies. Seems that's the general experience with it
* Native browser scrolling behaviour - component don't emulate scrolling, only showing custom scrollbars * Ultimate performance - 60 fps with help of RAF loop * Desktop or mobile - scrollbars looks the same on any device * No extra stylesheets required - minimum inline styles out of the box * Fully customizable - want a hippo as a scrollbar thumb? Well.. I don't judge you * No matter what changes the content - scrollbars always stay actual * Total tests coverage * Scrollbars nesting * RTL support ([read more](https://github.com/xobotyi/react-scrollbars-custom/blob/master/docs/USAGE.md#rtl-support)) * momentum scrolling for iOS
I feel like this same article title pops up every 4-6 weeks. Lol
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [xobotyi/react-scrollbars-custom/.../**USAGE.md#rtl-support** (master → 50a552e)](https://github.com/xobotyi/react-scrollbars-custom/blob/50a552e954d37213225be27c0bd753b7db2bc01f/docs/USAGE.md#rtl-support) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply ea15bt1.)
"die hard" is an idiom that means something will take a very long time to go away, and I think that's obviously going to be the case with JavaScript. Eventually, something will replace it. That's inevitable. But it's not going away any time soon and the people who think otherwise are deluding themselves.
Angular is still used in a lot of big companies, and still used because something was originally built using Angular. I'm a very experienced dev who is quick at learning and I struggled with Angular for months. Then I had to take a course on React and I never looked back. React is so much simpler to learn. Yes it's a library and does less than Angular which is a complete framework. Since this debate has already been held elsewhere I won't continue except to say that with Angular becoming less and less popular you might want to invest your time in something else unless you are learning it because you do or will be working for one of the companies that uses it for legacy reasons.
First of all, when I click the link, no actual content loads. Second of all, why are we making tutorials in 2018 about jQuery DOM manipulation?
I was encouraged to see in the opinions section that people continue to be happier with JS year after year. React has been around for over five years. Most of the tools I learned a few years ago I am still using. Maybe the JS fatigue days are behind us by now, which will be great news for people new to JS.
The workspace implementation currently only supports linking for dependencies specified using a semver range. This is because we check to see whether the version specified in your local workspace is an acceptable resolution for the requested dependency, and unfortunately we have no way to know this for tags (that would require a round-trip to the registry each time you'd run `yarn install`). So I'd recommend you to keep using either semver ranges (if you want to allow your workspaces to be allowed to be used with different versions from one another), or semver versions (if you want to ensure that package-1 can only be used with package-2 1.0.1-2 and nothing else, cf example). ``` "dependencies": { "package-2": "1.0.1-2" } ``` 
tell them to update their routers and firewall.
28% of respondents (2018) have never heard of native apps? That doesn't seem right...
Just goes to show that these tools all can deliver what you need and it's down to personal preference. Arguing about "the best" framework is quite useless.
I work at a large bank, and we've just doubled down on Angular. It has a steep learning curve, but for web apps at an enterprise scale, it really does seem to be the right fit. I for one am just glad I'm finally doing something other than AngularJS, I would have enjoyed Vue or React but I'm equally happy learning Angular 6+. But yeah, it's interesting to see how fast the group of "tried Angular and don't want to use it again" is growing. I can totally understand that too, it's not the kind of framework you'd want to use for just any random application. 
It's back up, I had to fix some things (and sleep calm) lel
Actually Im working on my JS skills. when I saw this tweet It’s just like I'm discouraged I don't know should I continuing on with JS?
I've built with all four (Angularjs, Angular, Vue, and React), and your experience is similar to mine. Angular does have a steep learning curve, but that's because it does damn near everything. React *by itself* is easier to learn, but I found it to be a nightmare to use because for anything industrial-sized, it required a plethora of stitched-together add-ons and libraries to get functionality similar to what Angular has out of the box. If I were to rate them according to my preference to work with on enterprise-scale applications, Angular would be in first place, followed closely by Vue, and then React. (AngularJS would be a very distant 4th place).
I wouldn't let that tweet discourage you. Eich is just stating the obvious - JS is not going away any time soon. Nothing on the horizon right now is going to replace it. Browser vendors put enormous amounts of effort into getting peak performance out of JS code, and the JS development community is massive. It is 100% safe to invest the time and effort into learning JS right now.
Thanks alot :)
Thanks a lot!
The $1 is being interpreted at the time you create the alias, not when you run it. Try running just “alias lazy man” to see what actually ended up in the alias. To fix it just swap the quotes (put single quotes around the whole alias and double quotes around $1)
Hi /u/deveid, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/jyourman24, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/Andysmith_is, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
thanks - really helpful article
Hi /u/PixelLogix, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Hayden4126, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/FullyMetalz, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
That's inspiring! a very important tool. thanks !
dark themes are the worst.
Okay, thank you! Sorry I posted here.
Just to clarify your point, they're not saying "don't declare new functions during render", they're saying "be careful when declaring functions as props if you pass them on to lower components, because that might cause unnecessary re-renders". In fact using Hooks, declaring Hooks/functions during render, is exactly how they're used. Of course heavy computation should be memoized so it's not being done unnecessarily on each render.
JS popularity hasn't even peaked yet. It's not dying for another 10-20 years, if it even ever dies. No one knows if web assembly is gonna fully replace JS or just evolve alongside it.
Jewvascript 
In your counter example [https://codesandbox.io/s/jnonrvxw39](https://codesandbox.io/s/jnonrvxw39) you are using increment/decrement so similarly instead of increamenting or decrementing some value just change the color. Instead of plus/minus button add red/blue color so when user clicks on red the color changes to red similarly for blue button. You have implemented counter correctly just add colors instead of incrementing/decrementing value. &amp;#x200B;
Hi /u/rispe, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi, I did read the guidelines before posting just to make sure, just re-read them and I can't find any reason why you deleted my post. As I clearly stated this is for educational purposes, not a single line in the script breaks any law/license terms. If a guy posts a Javascript exploit you also delete the post ?
Hi, &amp;#x200B; I did read the guidelines before posting just to make sure, just re-read them and I can't find any reason why you deleted my post. As I clearly stated this is for educational purposes, not a single line in the script breaks any law/license terms. &amp;#x200B; If a guy posts a Javascript exploit you also delete the post ?
Var did nothing wrong!
That's just a very colorblind friendly color scheme. I don't think there's supposed to be significance from it. 
I will attempt to implement this later this evening, thank you very much for the help. If questions come up I will post them here. Can hosting it be accomplished the same way the following was done using Qgus2threejs and Github? https://sirgeo.github.io/QGIS-BENFIELD.html https://plugins.qgis.org/plugins/Qgis2threejs/ tool 
&gt; for anything industrial-sized, it (react) required a plethora of stitched-together add-ons and libraries to get functionality similar to what Angular has out of the box I believe this is the best argument for using Angular or Vue vs using React 
Anyone else surprised that backend technologies seem to pay less than frontend?
Hi guys. I wrote this short tutorial on building a website with GatsbyJS static website generator. Part two is coming next week. I will be grateful for any feedback on the code, text or blog in general.
ooo this is sleek! I like it :) definitely going to save this
You have the same features with all different "hybrid frameworks" &amp;#x200B; Just download NativeScript preview app and use NativeScript instead or any other service
I've never used GitHub to host a project so I can't speak on it one-hundred percent, but I can't see any reason it wouldn't work.
Rather ironic then that accessibility makes it harder to read!
eval !== evil, just be careful.
Awesome!
Hi /u/JTAlakaina, this post was removed. Please see our rules, and do know that 'Java' !== 'JavaScript'. Thanks for your understanding.
Hi /u/small_talk_dev, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
js won't go quickly or quietly. google has been trying to depose javascript with their own poorly designed, inefficient, and mostly undocumented language for at least a decade and it hasn't yielded. webassembly enables you to write front-end routines in C, and Tim Berners-Lee is working on a platform that he expects will depose the web altogether, but neither technology is ready for prime time. 
OK, but tell how can i get color state? i don't understatnd it :(. [https://codesandbox.io/s/jnonrvxw39](https://codesandbox.io/s/jnonrvxw39) code is updated. &amp;#x200B; There is my error. I think i should do it in another way. i think i should get and save state about color of the counter, but how ?
Sounds good. Sorry about that. Thank you /u/kenman !
Yup. * Angular: * **What it does**: Everything. *Everything*. * **Learning curve**: Steep initially, then really easy after you've learned the core concepts. * **Complexity**: Low. (A lot of people mistake the initial steep learning curve, *sensible default file layouts* and *enforced separation of concerns* for complexity.) * **State management**: Services shared between components. Easy. * **CSS**: Import SCSS directly. Use a global CSS file for global classes, and scoped CSS for individual components. * Vue: * **What it does**: It does *most* things, and for what it doesn't, you don't need a bunch of custom, Vue-only libraries to fill the gaps. Need to make ajax requests with it? You can totally use something like axios, and can even make it available throughout the application as something like `$http`. * **Learning curve**: Easy. * **Complexity**: Low to medium, depending on what you're building. For simple SPAs, Vue is super simple. For larger, industrial-sized apps, there's going to be some additional work. * **State management**: Pick your poison. You can replicate the `service` aspects of Angular, create a state object and append it to the Vue prototype, or use a third-party state management library. * **CSS**: Import SCSS directly. Use a global CSS file for global classes, and scoped CSS for individual components. * React: * **What it does**: Basically, a lot of the same things JQuery does, only with a shadow DOM. Oh boy, that there's a killer feature, wow... * **Learning curve**: Super easy to get started. Insanely difficult to learn all the ways to stitch stuff together to make it work. * **Complexity**: Absurd. Go ahead, try to build something rock-solid and easy to maintain out of your patchwork of React libraries and add-ons, Redux reducers and boilerplate, and all the rest of the unstandardized insanity that is the React ecosystem. I know of exactly one company that has managed to pull this off well at industrial scale, and it's Facebook - the inventors of React. * **State management**: Welcome to hell. Pick up your Redux guide on the way in. * **CSS**: Oh, who the hell even knows? Shove it into your webpack config somewhere, and good luck figuring out how to scope it. Obviously I'm being a bit facetious. There are some great things about React, and it's not quite the nightmare of complexity I'm presenting it as. Still, I will gladly pick Angular to work with every day of the week over React.
You'll still need a UI library to make the app look and feel native-like.
What are your opinions of Elm?
Same story here. Using JS back then used to be _painful_. Now, it's painful thinking about using anything else.
There's so many cool things on this subreddit. Saving this as well :)
That's really awesome, amazing job! Do you know anything about low level GPU programming in JS? Or do you use TensorFlow or the like to handle that for you? I'm asking because I'd like to do audio processing in the browser on the GPU, and I read something about the latency of writing to the GPU buffer and reading the results back being high which is prohibitive for near real time audio
To me, that means: * A sensible file layout for development. That is to say, I don't have to go hunting around very much to find anything. If I'm looking for a custom shared button component, it's someplace like `/shared/components/button` or something. * It has a routing system. * It lazy-loads anything that isn't in the route you're currently viewing. So for example, if there's a slideshow component, rather than loading it even when you're just on the login screen, it pulls in a module for the slideshow only when it's needed. This saves a lot on the size of the initial JavaScript payload for the page. * It can handle extremely large data sets elegantly. If it can't do those things at least, it's not going to scale well.
That appears to be about a 400% increase from 2017. Possibly a data error, or maybe due to a change of process. Or, perhaps the "native vs Web" divide is beginning to close. Much of the software dev world has either conceded to JavaScript's popularity, or have come to embrace its strengths.
&gt;num \* 2, "at index", You could quit easily do the same with a regular `forEach` const sample = [1, 2, 3]; sample.forEach(el =&gt; { console.log(num * 2, "at index", sample.indexOf(el)); }); I can't imagine the advantage of having the index in the way you say but perhaps I'm just not imaginative enough
&gt;It's a very simple http server, so, very useful for quick projects but also used in large applications. I think Express.js is one of the basic packages to learn when you start with Node.js What about when it is compared to the likes of koa.js?
Koa.js is developed by the team behind Express.js and is considered as "Express.js v5". So it might be good to take a look at it. &amp;#x200B; I'm still using Express.js because I like the way it's easy to use it. You can learn both. &amp;#x200B; I'm just saying Express.js is used widely on the web, if you learn it (and it's pretty quick), the day when you're reading documentation of a service using it, you won't be lost.
Yeah, we'll pay you to be performant. Us? Let's just keep making bloated and slow stuff. https://medium.com/@boriscoder/peeking-under-the-hood-of-redesigned-gmail-dd84b532e0f5
You might want to consider reading the rules about spam.
&gt;222. what this post has to do with spams?
It's all written from scratch so no TensorFlow (although I did try to use it first, but it wasn't well suited for this use case). Yeah in my experience CPU-GPU communication is really slow in the browser, unfortunately :/ Reading something back from the GPU seems to come with a 10-50ms penalty on most machines regardless of the size of the data (glReadPixels). If you find a way to make it faster I would be very interested, but I haven't found anything so far.
Probably you are a terrible dev, writing typeless shitcode. Oh wait JavaScript isnt even code, it is script. 
Simply the best
If you cant code, write shit like that
To be fair, I did a bit of a double-take at first because they capitalized it oddly: Native Apps. It sounds like something “official” as opposed to the actual category of “choosing not to use a JS&lt;-&gt;Native bridge”.
OK, but if there's no JavaScript involved, why share it here? Why not in /r/css?
An edit for the state management part of Vue: it has a first party module called Vuex that works very well and is much simpler than Redux. 
Ok i did it :DDDDD [https://codesandbox.io/s/jnonrvxw39](https://codesandbox.io/s/jnonrvxw39) here is the code, can you look at this? I would be grateful if you look at it and give me some advice to do it better. Next my question is ( as you saw in my main app) How can i connect table's values to two buttons: + and - , i want to increment and decrement values in table. But if i do special action for each one cell, in my opinion is bad. Do you have any idea for it ?
That gender graph is really well done. What is it called?
Totally forgot about Vuex! Edited appropriately.
Yep, you're absolutely right. That's a problem, and one of the reasons I think everything in this survey ought to be taken with a grain of salt.
Lol.
Yeah, I kind of agree. It's kind of neat, but was confusing to look at at first.
Interesting that Flow, Elm, and ClojureScript are a large average boost in salary from ES6 and TypeScript... Should I be learning these and adding them to my résumé? :P Or is it the reverse, and that people that get paid a lot are willing to "use ClojureScript again" because, well, they get paid enough for it.
I completely disagree with the "invest your time in something else." Use whatever you want, not whatever you speculate will be around later. I mean jquery was everywhere but now everyone's removing it. Do you think people saw that coming? Be a JS developer, not a react developer. All this time you think you're learning "react" isn't really just learning react. You're learning es6, webpack, async/await, promises, functional programming, js build tools, acceptance testing vs integration testing, how to build UIs with great UX, etc. You're perfecting a lot of skills that translate to just about any JS SPA framework. I love Ember because they never gave me the middle finger between versions and every project is more or less the same. I've written almost exclusively it for my web apps since 2014, and I guarantee you I could be proficient in react in less than a month. It's all the same shit. Same with Vue. I consulted on an angular one app that was terribly written and fixed all the bugs and made the feature enhancements in a week. At the end of the day, building websites isn't that hard. Crafting good UX/UI is way more difficult, but actually implementing websites is very rarely difficult once you work out the behavior. Building awesome, reusable form libraries/components that most of us rely on is more challenging. But let's be real... the majority of front end development is just grab a bunch of libraries and grunt out the UI. It's time consuming, it's a lot of work, but its not difficult. The guys building Glimmer, React, Vue, etc, and all of the tooling, who make the apps run have good performance characteristics...they're doing the hard stuff. Building your multipage web app isn't even on the same planet as building operating systems, compilers, databases, http servers that scale, programming languages, etc. I love building stuff with javascript, but c'mon...there's so much more to being a well rounded software developer than deeply understanding whatever framework some survey says is #1
You could learn either Koa or Express and be able to jump into a project using the other without much confusion. I recommend Koa because it's simpler and handles `async/await` better than Express. Express comes with more conveniences built-in while Koa moves them into separate modules. The most important part is to gain a solid understanding of how middleware works.
I think that's average overall experience with JS for Vue users, not average experience with Vue specifically
And by “our products” they mean the search crawler. Those 200k would be saved in electricy bill before anyone could notice. :)
I can't stand something about Gitter's line spacing. It all just blurs together for me visually.
I think it might have to do with them being less often by small businesses and freelancers compared to ES6 and TS. Newbies or people building fairly simple applications are more likely to be using ES6 since it's so widespread and easy to learn.
vanilla
No, the average vue user has 8.1 years of development experience, not vue experience.
I will definitely recommend taking a look at 05:30 and then again at 27:00 The code is run-of-the-mill and anyone can understand, but that concept explained there, is something most of the time beginners miss when using [socket.io](https://socket.io) 
The graphs look really bad on mobile.
Hi /u/AshishKhuraishy, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
for all the talk about improving js performance, almost universally, google's shipped/production frontend code is abysmally slow.
Right, and that's because they're new functions, I believe - or more specifically, because they aren't the same reference as before. So not only do you have the overhead of repeatedly making unnecessary functions, it also causes those additional rerenders. I suspect the new hooks aren't actually making new functions each time you call them, and that's one of the reasons you have to call them in order and unconditionally.
Google should be mocked for lots of reasons, and broken up, but their FOSS advocacy is top-notch. I hope this money goes somewhere productive. I'm not sure what ~$50,000 per major framework is going to accomplish.
&gt; die hard Yippee-ki-yay, motherf--r!
Since the adoption of modules, IIFEs are not necessary, wouldn't you say?
Hi /u/rudvanrooy, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Are you kidding or what? A lot of browsers don't support modules, including Internet Explorer! Non-up-to-date browsers don't support it too, so, I think IIFE is still the best way to go! 
Highly experienced, highly skilled developers tend to experiment with lots of technologies. It doesn't follow however that learning Elm is going to turn you into one of those engineers, any more than living in London and buying a corgi will make you Queen of England.
Truthfully I think the conclusion I'd draw is that our field is relatively homogeneous. Most developers are using similar technologies to do often quite similar things. Whatever your experience level, whatever your location, you'll probably be using the same things. This is probably how it should be, because it makes engineers and their software portable, and that's good for overall utility.
Generally, it's a performance hit and a security risk. Usually, you don't actually need it, what are you using eval for?
If you can't troll, don't post on reddit
giving users option to execute javascript on a web page
are you looking for something like [Gantt charts](https://en.wikipedia.org/wiki/Gantt_chart)?
A lot of people working on it, with varying level of experience and familiarity with the product.
I'm really struggling with the [first question](https://imgur.com/9devkzJ)
Is the evaled code based on a URL param or anything an attacker can control about another person's request to your page? If it's just an input box and there's no way to link another person to the page with a value to eval then there's not really any risk. Otherwise, there's going to be some risk, depending on what else your domain is used for. If website is just static with no accounts or logins or private data or anything then there's not a major risk but an attacker could link someone to a page on your site that then redirects to a malicious domain or replaces your page contents with their content. This could be spam or other bad content you don't want associated with your website. If your website has private data or cookies/accounts then an worse XSS exploit is possible, letting the attacker craft a URL that sends private data to them or modifies a user's account jf they use a URL made by the attacker. As for "the same server" it matters if the domain name is the same for these other sites i.e. http://foo.com vs. http:// bar.com, but not if the backend server happens to be the same. JS is generally restricted to the same origin it came from (it's slightly more complex than that but that's generally true by default). Subdomains (foo.foo.com vs. bar.foo.com) can also matter if cookies are involved.
"When you install one, small npm package."
You can await any function that returns a Promise. That's pretty much all there is to it. 
Right, it's important to know the difference between a framework and a ui-lib. I've probably have to stick with angular and on the other hand there is aurelia.io i need to try out. Too bad meteor didn't work out.
I’ve started using AdonisJs. It’s pretty much just Laravel in Node. Really enjoying it so far. It includes pretty much all you’d need. Models, Controllers, WebSockets, pretty much everything. If in any case there’s some feature missing, head over to their forum where the developers seem very active. And again, if a feature is missing, you could always write your own package and/or extend on Adonis’ functionality. What’s not to love? (I am by no means an expert on Node, but had trouble with inconsistencies in my Express app, which is why I decided to try Adonis)
First you need to learn how Promises work, because under the async/await functionality Promises hide. In fact when you do await you wait for a Promise to resolve. Here is an article about promises and async/await and how they tie in: [https://medium.com/@bluepnume/learn-about-promises-before-you-start-using-async-await-eb148164a9c8](https://medium.com/@bluepnume/learn-about-promises-before-you-start-using-async-await-eb148164a9c8) And answering your about getUser(id): You can make this function async and preform and await some operation (example findById(id) from mongo schema). OR You can make it return Promise and resolve some result. This result will be given as value to userName. This is what can be said shortly, Cheers.
I’ve written book chapters on the following topics (free to read online): * Asynchronous programming in general (important background): http://exploringjs.com/es6/ch_async.html * Promises (foundation of async functions): http://exploringjs.com/es6/ch_promises.html * Async functions: http://exploringjs.com/es2016-es2017/ch_async-functions.html “[JavaScript for impatient programmers](http://exploringjs.com/impatient-js/)” has abridged versions of these chapters, but they are not free (yet).
I’m sure you can find something on Youtube by Fun Fun Function and Angular Firebase (yes that’s a channel, not only about Angular and Firebase) where you could learn this. Links https://youtu.be/568g8hxJJp4 https://youtu.be/vn3tm0quoqE
Thanks for your inputs. Is there anyway to sanitize the JS code before passing to eval?
They don't need to be fast when they own the marketshare. A certain point _design_ is what makes a product shine. Also they probably only develop on higher end mac's at Google. No one is building this on a macbook air and seeing how slow it actually is.
I'm currently working with 7 other developers on the front-end platform for a mobile banking app that is used by millions of users. As aptly summarized by u/kescusay it contains routing, a basic app structure in which features are lazy-loaded and a collection of generic reusable classes and patterns (event emitters, utilities, etc). Another team of four is working on a component library and styleguide/grid layout system. The scores of features that are lazy-loaded into the app (ranging across the board from credit card transaction timelines to mortgage self-service tools to live chat with a helpdesk) are developed by dozens of teams with varying levels of experience. This calls for a lot of standardization obviously. I've just recently joined the team so I wasn't part of the decision making procress, but I'm totally on board with the choice for Angular (with Ionic and Nx) to tackle this challenge.
Holy crap, this looks like a zombie movie. Lol.
\&gt;69% upvoted
you await the promises themselves, not the functions that return them: await new Promise(resolve =&gt; setTimeout(resolve, 500)) &amp;#x200B;
Name the last time that actually happened? Last I checked, no one was flocking to whatever new framework got posted that week. We've been with the Big 3 for over a year.
I added an authorship system. Now you know who posted what. ;)
Post your whole component and we can help.
There's another component called choice component but it's the same thing except instead of checkbox it's radio. I didn't think it was necessary to post it. But I'm having problems with the condition to say if radio button is clicked toggle the other radio buttons to false. [https://jsfiddle.net/n5u2wwjg/238801/](https://jsfiddle.net/n5u2wwjg/238801/) &amp;#x200B; `class CheckQuestion extends Component {` `constructor(props) {` `super(props);` `this.handleCheckChange = this.handleCheckChange.bind(this);` `}` `render() {` `var checkList = [];` `checkList.push(&lt;Checkbox name={this.props.question.id}` `rulevalue={this.props.question.formCid}` `value={this.props.question.text}` `key={this.props.question.formCid}` `onChange={this.handleCheckChange}` `&gt;` `{this.props.question.text}` `&lt;/Checkbox&gt;);` `return (` `&lt;FormGroup controlId={this.props.question.id}` `aria-label={this.props.question.text}&gt;` `{checkList}` `&lt;/FormGroup&gt;` `)` `}` `handleCheckChange(changeEvent) {` `let isChecked = changeEvent.target.checked;` `isChecked ? this.props.nextQuestion(this.props.question.contents) : this.props.clear(this.props.question)` `}` `} // CheckQuestion`
The process of reposting. This is actually just a single duck, until reddit...
Similarly ES6(+?) is disliked for being "Bloated &amp; complex" but also just below that "Limited &amp; lacking in features", which I found amusing. Though you could hold both of those opinions at once, e.g: bloated syntax but limited standard library.
Hi /u/garrows, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Just write a function that strips commas from strings so you can write numbers like this: n("12,345,678.4");
I believe they didn't record the talks from the first day of the conference :(
Pretty sure he said alpha by end of december.
My for sleep searching brain would suggest: Replace the spaces with a character combination (like %20) and replace that again with spaces after receiving the json. Maybe there is a simplier way, haven’t touch js for a long long time, but that solve your problem.
A simpler version would eliminate the reducer function. You maintain a count and value in the outer function and then the recursive returned function is just an if/else based on count%2 that either adds or subtracts from the outer value. My version seemed to meet all the same test cases as the one in the article. 
Yeah it’s what I was thinking but maybe there’s another better solution so wanted to ask lol but thanks 👍🏻👍🏻
Pretty much what I need is if one radio button is clicked it uses the show method I built and if another radio button is clicked it uses the show method on the new one and the hide method on the previous clicked. 
Hey, I like it!
`collapseLines`
If you redirect to a different help sub, why do you have a help flair?
It's being phase out for the most part, but we do still allow some help posts (the more advanced ones).
Thanks for a more detailed look at what happens behind the scenes of the global window &amp; lexical environment to help understand the execution stack and call stack. It always helps to see beyond the surface. Good info. Thanks. 
Write is as 1000*1000? Avoid magic numbers. Use constants.. 37 * million
I know it doesnt answer your question, but for legibility have you considered const oneMillion = 1000000; const oneHour = 1000*60*60; 
Thank you. Actually \`multiToSingle\` is also an option which is shorter version of your first suggestion. As the point of this method is to improve the readability, it is vital the name to be as short as possible. If I can't find suitable solution, I might even go for single char such as \`\_\` or \`@\`(I know it is preposterous suggestion) 
That's debatable. It's definitely good form. I'd argue the importance of currying tests is purely conceptualizing a function that returns a function: an invaluable design pattern. I've worked with _seniors_ who didn't even know that was possible. Not all applicants come from strong JS backgrounds, despite strong programming backgrounds. Testing for a concept of recursion is another good use case for currying. I also like your idea of testing for concepts of closures, but I wouldn't say it's _the_ intended test.
Agree. Same colours effectively mean opposite thing. TF?
There are unfortunately tons of ways to write dangerous code in unexpected ways in JS, making it very difficult to identify what's "dangerous" code and what isn't. You can search for various attempts at sanitizing eval but I'm not aware if any foolproof solution. I found this in one answer though: https://github.com/NeilFraser/JS-Interpreter This isn't sanitizing eval, it's a full substitute that parses and evaluates the JS given. This would be much safer than any use of eval, but it could also be slower if that matters to you. There are probably other similar JS interpreter libraries out there, that's just the first one I've seen.
If you bundle your modules you can support Internet Explorer 8 and whatever you want, also get a performance improvement.
Would have to involve a preprocessor (also counting TypeScript).
No thanks! That's too much of a trouble just to achieve a basic feature that is supported by almost any programming language! &amp;#x200B; I like scripts to be as self-dependent as possible!
The new YouTube is infuriating 
You can use scientific notation `1e6`. In typescript and future JS you’ll be able to use underscores as separators 
Actually, React 16.6 introduced the [`React.memo()` API](https://reactjs.org/docs/react-api.html#reactmemo) for doing exactly that. Now you can wrap any component in that kind of behavior.
Sounds like React and Node.js are the winners 
Awesome thank you 
Where's the ripple object from? 
Functions return undefined by default. The global undefined property represents the primitive value undefined. Source mdn So can't we say that all function produce a value ?
Not really. Frontend work is much harder to do and the pressures are usually much higher. In addition, things are changing pretty quickly. Topping this off is that demand is much greater than supply, so you have to offer a lot to avoid someone with almost zero experience.
I thought that’s what we were attempting to do here?
`var ripple = document.createElement('div');`
Oops - just checked by putting this in the console right from Reddit, it works: `document.querySelector('body').innerHTML = "&lt;button onclick=\"alert('Hello, World!')\"&gt;hi&lt;/button&gt;"`. But, this doesn't work: `document.querySelector('body').innerHTML = "&lt;script&gt;alert('Hello, World!')&lt;/script&gt;"`
Yupp! Thanks!
FiraCode font
My relpy isn't aimed at you but you make an interesting comment about major frameworks. Why would they spend money on major frameworks? FB already spends hundreds of thousands per year on react via employing core devs and it's in FBs interest for React to be fast. Same with Angular etc. Why would they bend to doing something for google for a drop in the bucket? 
TIL every framework causes clumsy programming style. 
The same way you do everything else in React - call `setState()` and re-render with the new values. I threw together a quick CodeSandbox to show how to do it: https://codesandbox.io/s/5955jxwjk Gosha Arinich has written an excellent series of articles on how to use forms in React, at https://goshakkk.name/on-forms-react/ . I highly recommend you read those. In particular, he describes the concepts of "controlled inputs" and "uncontrolled inputs", which are important to understand when writing forms in React. He's also published a book called "The Missing Forms Handbook of React", which is very much worth it: https://goshakkk.name/the-missing-forms-handbook-of-react/ . Beyond that, I have links to a number of other articles that deal with forms, at https://github.com/markerikson/react-redux-links/blob/master/react-forms.md .
People who work with Elm, ClojureScript, and Reason are harder to replace than people who work with React. They can negotiate better salaries because they'll be low in supply and companies probably have legacy code in those languages/frameworks that would be more expensive to scrap and reimplement in React.
You can see how I use react redux in this gist -&gt; [https://gist.github.com/aditodkar/6adad5169ee4488c5ea92c300631e725#file-venueaction-js-L1](https://gist.github.com/aditodkar/6adad5169ee4488c5ea92c300631e725#file-venueaction-js-L1) See the actions, reducers,etc. See some more examples: [https://pastebin.com/AmT1SMfH](https://pastebin.com/AmT1SMfH) Redux is just a pattern once you use it several times then you will understand that you are doing samething again and again :)
Am I the only one that hates when numbers are shown in scientific notation?
Now for your next question let's say the default table values are zero then create an action which sends the current data of a particular cell and two more actions i.e one for increment and other decrement. So in total you have 3 actions. 1) To get data from particular cell 2) After getting particular value from table increment it. 3) After getting particular value from table decrement it. I hope you understood what I am trying to say :)
Thank you! I have recently moved to using .pipe() because it solved memory issues for me, but I thought I was just getting a bit lucky. I didn't realise it had intentional magic.
They own servers for one and would like to spend less on them. In addition, the faster the rest of the web is the less people notice google on their web pages. 
That's what I was considering, although there's a lot of other variables. Also, if that were the case, wouldn't everybody be going to learn those to add 10-20k to their current salary? (Or wouldn't companies be more interested in plain old ES6 since it would cost them less? etc, there's a lot of variables)
I like reading [Hackernoon.com](https://Hackernoon.com) (though a lot of its stuff lately is on cryptocurrencies which kinda sucks...) but going to medium is good. A lot of people read hacker news like you said, other than that I have an android so I use Google Now and get a lot of good js/webdev/devops/etc content from that
There is also a babel plugin for the proposal (https://www.npmjs.com/package/babel-plugin-transform-numeric-separator), obviously use some care when using plugins for proposals that have no implementations yet (*cough* decorators) but in this case you could *trivially* replace all occurences with a simple code-mod if the propsosal were to change in anyway, so I don't think it's a particularly risky plugin to use.
It's a very roundabout way of doing things. Often devs have no control over the tech actually used, and the majority of slowdown on modern pages is the multitude of trackers and junk, none of which devs have control over. Why don't they give people a google adwords discount if their site is faster or something? That would get the attention of the people that would actually be able to affect change at big sites.
Adblock helps. Look at the counter when you visit youtube.
I'd think so – everything is possible :p What exactly are you trying to achieve here?
FUD on React. Comparing React and JQuery invalidates many of the good points you do make (e.g. Angular has more functionality built-in). React is by FAR simpler and more flexible than both Vue and Angular since it uses Javascript, not a custom templating language, unless of course you don't know Javascript. You missed out saying that Google themselves do not use Angular in gmail, google maps or almost any of the publicly facing web sites. Facebook uses React and it is used by more than a billion users. There is a good reason for that. It is totally OK for you to prefer Angular and it definitely is better in some areas, but that is no excuse to spread FUD on other frameworks. 
Those who do backend work are less likely to fill this survey.
A big Vuex store can get messy fast with boilerplate if you're not separating things across multiple files/using best practice. It is nice to use though and the CLI keeps getting better and better. Personally I think its more fun to program with than Angular. One thing about React though, some of those libraries you have to hobble together are really really good at what they do.. eg. Enzymes' snapshot testing is rather impressive.
A big Vuex store can get messy fast with boilerplate if you're not separating things across multiple files/using best practice. It is nice to use though and the CLI keeps getting better and better. Personally I think Vue is more fun to program with than Angular. One thing about React though, some of those libraries you have to hobble together are really really good at what they do.. eg. Enzymes' snapshot testing is rather impressive. 
Nicely done. It was more fun to watch after slowing down the transitions to 1 second.
It's not useless when there is actual difference in development time/bundle size for a website with same features.
Promise is just a function that returns a Promise, though. 
It will wait for execution and return without an await. That's how JS works. The interesting part is that it (effectively) waits for the promise to resolve. 
Scroll Events + Scroll Methods
They sure are in this age. Also I love Vue.js with all my heart but it's not as much used as React so React is a safe bet for you.
That title is a train wreck
&gt; I can't imagine the advantage of having the index in the way you say but perhaps I'm just not imaginative enough There are two advantages: 1. `indexOf` is an O(n) operation. It works by stepping through the array one element at a time and doing a strict quality comparison. In an array with 1,000 elements, using `indexOf` to obtain their index involves 1,000 unnecessary function calls and at least half a million unnecessary strict equality comparisons. 2. Your example doesn't guarantee you'll get the right index. `indexOf` gets the index of the *first* matching element in the array. If your array has any elements that identify as equal to each other, the first index will always be used. 3. In your example, the user's callback needs a reference to the array. What if you wanted to write a function that could be passed to any array you like? You'd have to write a new enclosing function every time.
Make a comment with the more readable version next to it?
okay, so would using these methods and targeting the html "section" tag do the trick most likely? also is there a way to disable this type of functionality for mobile devices? I'm experimenting with Bootstrap which scales differently for separate devices (i,e tablet, desktop, mobile, etc..)
This is a form of "scrolljacking" and there are several libraries available that implement it. Check out [SmartScroll](https://d4nyll.github.io/smartscroll/).
I think you missed the end where I make it clear I'm being a bit facetious. I know React has its strengths. That said, what custom templating language are you talking about? In Angular, the templating language literally is JavaScript. You want the length of an array? `myArray.length` works perfectly, whether you put it in a component ts file or between curly brackets in a template.
Looks like vanilla to me. No imported js. Am I missing something?
[removed]
You don't use ES6 Modules? What about code splitting?
200k USD from a company worth 120,000,000k... Wow
Wow whaddya know . . . an actual explanation. 
200k seems ridiculously cheap, you can't even get 1month of 3 senior dev work with that.
Before I look at it, are you using `setTimeout()` in the examples, or are you using something from **reality** like reading a config file or accessing a database?
Google can take the long view. And those dime electricity and wasted seconds add up for them but also for everyone else. Plus the PR is worth something too, one could actually think they are not evil...
vanilla spelt wrong in the title I guess is there point
very very creepy
Why does the name need to be so short? Also **never** use a single char function name.
404 :(
I do that a lot with time. `6 * 60 * 1000` is, I think, a nicer way of writing six minutes than `360000`. Depending on your domain, it isn't always necessary to make constants out of these numbers - in the context of, say, a setTimeout call, it's generally fairly obvious what the 60s and 24s are many to represent.
If your aim is to improve readability, maybe "toSingle" is the choice. I think you're going to use it in a chain of methods and it clearly defines what is it doing 🙂
I have no idea what worth has anything to do with this. Maybe you meant to look up the number for their profit? That may have actually been somewhat relevant. But you have to start somewhere. It's 200k more than anyone else has spent. Did you expect them to drop 20 million on a project when they have no idea about the outcome? Who knows, next year, if this pans out, they might add a zero to the 200k.
Right, good point with the registry. I guess i'll stick to semver then :) Thank you!
👍Make this a package!
This ^
Their
But thats like a replacement for Express if i am not wrong. I haven't used it up until now
Nope overnight is just a simple library which adds decorators, you interact with Express the same
Sure. Will try that too
Good points. I generally don't work with huge datasets so having an array of 1000 elements is not a situation I have faced before. Also didn't think of point 2 and 3 situations. Thinking about it, it is quite annoying that you have no way, I know of, to access the array on which the method is being executed.
Depending on what it represents you could use an abstraction. For example I'll often use the \`ms\` npm package to tidy up durations e.g. \`const interval = ms('15 minutes')\`
&gt; Thinking about it, it is quite annoying that you have no way, I know of, to access the array on which the method is being executed. If you mean with `forEach` as it actually exists, a reference to that array is given as the third argument to the callback, if it accepts one. function listArrayContents(element, index, array) { console.log(element, "is element", index + 1, "of", array.length); } [4, 1, 8, 4, 2, 0, 8, 7, 1].forEach(listArrayContents); ["a", "b", "c"].forEach(listArrayContents); [{ name: "Jesse" }, { name: "Becky " }].forEach(listArrayContents); 
Thank you for the suggestion. I decided that \`glue\` should be the name, but your option somehow led me to the final result.
It is in fact very good naming. I opted for \`glue\` as you may put new lines as glue argument. But on second though I think that I can use both names. The practice will prove which one make the code more readable. &amp;#x200B;
It's useful in the contexts that the format was invented for. Who wants to see Avogadro's number in anything *but* scientific notation?
Thank you! will try that.
&gt;Amazing, I appreciate this info! thank you!
Having read the original discussion, unfortunately there was no statement of the expected solution by the interviewer. Somehow I doubt he actually wanted `valueOf`, the whole thing sounded so strange and fishy I don't see much intelligence went into asking the question in the first place. It was definitely *not* a good interview question. If it had been restricted to currying, *and* if currying had actually been important to them, than okay, but that exact question - no way. That was something for the Internet, for a coffee table round, or to think about while commuting, but not for a stressful job interview.
development is a cost center and i think you'd find the dev teams and time allocation of even corp-backed frameworks are much smaller than you think. receiving, say, $200k could hire 1-2 more devs or buy more time which can double the bandwidth of a project like react. for example, imagine if google gave react $200k and simply said it must be used to hire one full-time person to only focus on performance.
const round = arr.filter(item =&gt; item.count === 5);
```` const round = arr.filter((item) =&gt; item.credit === 5) ```` 
what does it matter? 
why not just throw Angular to the trash and adopt their competitors reactive programming with flux methodology (invent something like React or Vue you have a lot of resources)?
I don't think I have explain it correctly. What you have is only step 1. &amp;#x200B; I want now to remove all credits with 5 in it with splice and count all the other credits. When the other credits is total 5; I want it also to push to round.
I think it is good to understand where promises come from. They come from a need to solve a mess created from chaining callbacks known as callback hell. async/await is a pattern in the syntax to further simplify by abstracting away the chaining. I can recommend this video that demonstrates the problem with callbacks and how to create a complicated promise chain. Once you got that hopefully you will be able to get how async await keywords plays a role. https://youtu.be/RRgAdi3gX-s
flair checks out
Is this saved in a database and shareable? If not, I wouldn’t really worry about it.
ops. I didn't notice that. Next time I will be more careful. 
This method could be very helpful for something I'm currently researching! I've also been adding changeable background images, tint overlay layers and inset shadows to mine...
When you say 'opinion about these questions', I'm assuming you mean the answers. Many of your answers are incorrect, and I highly doubt these are the 18 most commonly asked questions.
1. It's closer to functional programming and has more libraries that offer functional programming 2. It's from Facebook. Vue.js got more Github stars, by the way (if that's a popularity factor for you) 3. No, I will use Wasm through Go. I think it's because there is support for C++, which has OO paradigm 4. Sorry, I don't use it
Ok, i understand what you want to say :). I will try to do it :D. Thanks for the help. Thanks to you, my project finally moved on.
People behind Vue will surely appreciate the 200,000 USD. They are not backed by any huge company and also gets its funding from patreon and open collective. 
That wouldn't be inventing. React is the most innovative and Vue is a mix of react and angular. Vue 3 is copying hooks and time slicing from react. At the same time it has a template system and things like directives that come Angular has. Honestly it's good we have alternatives to React I just wish some of the more inocative would be more popular rather than copycats. Cycle js is one that looks quite nice.
Ok, but there's no use case unless you're not sure what you're waiting for. 
You might also want to check out Scroll Snap Points, the native CSS way of achieving this. Additionally, there's `fullPage.js` which is very robust and popular.
1. Sorry? Many popular "OO" languages are not pure OO and support basically the same things as JavaScript. 2. Frameworks come and go, I will use whatever gets the job done. 3. Why would I/we be afraid? Please be more concrete. 4. I don't like it, so I simply disable it.
At least they get the best from the two in my opinion. 
What a useless set of answers. 
&gt;3) Are you afraid of Wasm and why all the OO programmer put so much hope in it ? This question has shown up like four times on this sub and once again, I'm going to ask where this came from. I've never heard of anyone putting "hope" in WASM or being "afraid" of it except in these "why are you scared of WASM" questions. When we do talk about WASM, most implementations are in languages like C and Rust which are not considered OO.
The parts that come from React are good lol. I was an Angular dev for a while and just thinking about using templates, slots and directives makes me cringe.
Yeah, damn crypto
It's a matter of taste and style I guess. I love templates, I think they make the code clearer by separating the markup and the actual code. That is favorable for me. 
Stackoverflow.
What other prototype-based OO languages do you know other that JS? I have a pretty good overview over most relevant languages, and I don’t know any.
that place is intense, lol pros go there lol
I understand. Except the template is code behind the scenes. I rather treat it as what it is and gain the benefits/flexibility of doing so. But if you come from html and css mostly rather than js I totally get it tho.
No one talked about prototype-based OO languages. On top of that, prototyping is just another way of accomplishing the same thing.
Ok, I've solved the problem by editing the gl-matrix code and putting `if (root === undefined) root = window;` at the start of the `(function webpackUniversalModuleDefinition(root, factory)` function. I'm not 100% sure how this function works, but it seems to do with creating a solution for module exporting that works with a lot of different platforms. for some reason `this` is undefined in the module when it's loaded using import. I'm not sure if there's a better way to solve this.
The question is about JavaScript's OO features, and JavaScript uses prototype-based OO. How is this not a question about prototype-based OO? Functional programming also is a way to accomplish the same thing, doesn’t mean that it’s the same.
No, for example id: 5 and id: 6 is together 5 credits. These 2 id should go into Round. &amp;#x200B; With count I meant addition (+) 
Personally, I prefer learning programming language features via small pieces of code that I can understand quickly. Thus, I try to balance this need with the need for realism. A brief look at the content should tell you if this approach fits your style or not.
That sounds awesome. When done be sure to shoot me a link I'm super interested!
I wrote an article that makes understanding immutable structures a lot easier! https://medium.com/@hubert.zub/why-concept-of-immutability-is-so-damn-important-for-a-beginner-front-end-developer-8da85b565c8e
[more material-design-like version](https://codepen.io/karamarimo/pen/PxOvJZ) (forked from your pen)
React works perfectly well with TS, components and templates can be fully typed, which Angular can only pull off using language services. As we speak @types/react is reaching 4 million npm downloads per week. TS supports JSX out of the box. React is popular because it is a really good view-layer with a clear vision and innovative drive. &gt; Are you afraid of Wasm and why all the OO programmer put so much hope in it ? No one is afraid of wasm. It'll be a wonderful tool for backend and computation. Nor do i think OO will play much of a role as [everything and everyone is moving to FP instead](http://blog.wolksoftware.com/the-rise-of-functional-programming-and-the-death-of-angularjs).
The best other options have already been stated. FreeCodeCamp is very popular. I enjoy their educational system. I don't have experience with their forum, but /r/FreeCodeCamp is also full of very helpful folks, so I imagine their official forum is just as welcoming. If you want to consider other subreddits, /r/learnjavascript is great too.
[removed]
Another potential tool which is bundler independent: [https://github.com/pahen/madge](https://github.com/pahen/madge) Useful when developing React-Native (Metro bundler allows circular dependencies but hot module reload does not like 'em) &amp;#x200B; (Personally, I) Try to split up code as much as possible. Compartmentalise into modules and then split up further into layers. The more reusable, the lower it should be. Circular dependencies can be seen as a warning sign to a missing key concept in your modularisation. &amp;#x200B; Interested in hearing what other people have to say about this topic.
Why would you have a circular dependency? You may be structuring your code wrong if this issue arises commonly. I would never add a circular dependency plugin.
Angular is still a really nice framework used in millions of apps. They can’t just stop maintaining it.
you're saying that like somehow that makes it underhanded.
What is FOSS?
&gt; What you prefer in JS that we don't have in OO language ? "OO language" is too vague. C++ and Python, for example, allow and encourage functions outside of class definitions, while Java and C# do not. Every language is different. There's no such thing as a singular "OO language".
Pros and beginners. That’s why it’s the best place to go. 
nice
We use both React and Vue at the company I work at so I see code in Vue, just don't touch it if I don't have to.
Python. Also Ruby. They may not call it prototypes, but when you hear how it works, you'll think, "That sounds exactly like prototype-based inheritance!" In Python, when you invoke a method "foo" on an instance, then Python will search that instance object for the name "foo". If it doesn't find it, then it follows a link/reference/pointer to a class object and it will search for the name "foo" there. If it doesn't find it, then it follows a link/reference/pointer to a superclass object and it will search for the name "foo" there. And on and on down a chain of objects. In other words, Python's class inheritance is implemented as objects linked to other objects. [JavaScript and Python side-by-side](https://i.imgur.com/p9Kw815.png). In fact, since Python's classes are themselves objects, you can even create objects ex-nilo. [JavaScript and Python ex-nilo object creation](https://i.imgur.com/o726cHj.png)
I redid the numbers &amp; Javascript is still the number one tech, used by around a third of startups. As someone said earlier, never bet against Javascript 
[removed]
Depending on what browsers you need to have this work in you can look at the [new CSS scroll-snap property](https://css-tricks.com/practical-css-scroll-snapping/) ([MDN article](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Scroll_Snap)).
I just noticed the "Showoff Saturday" flair.. Should I delete this and repost on Saturday?..
People of all levels share code on stackoverflow, that's why it's beautiful :)
[removed]
I think another important aspect of prototype-based OO besides the linked list of objects is that there are no differences between instances and classes. Python qualifies for that AFAIK (never used OO in Python, all I've ever done was procedural), but Ruby does not.
Four devs for two months at $25k/month/dev is not ridiculously cheap.
Stackoverflow has chat rooms as well and the Javascript one is cool
TL;DR JavaScript array types can end up being stored as non-array data structures, depending on the engine and, surprisingly to me, how you use them.
They picked a version of the Polymer framework which is incompatible with Firefox (not Chrome). So YouTube's performance on Firefox in particular is egregious. At least that was where we were three months ago. Doubt they've updated since then, but maybe. There is an extension in Firefox to help with it. 
http://www.reddit.com/r/javascript/comments/9yj8h2/-/ea3mgfo
Right, why does everyone automatically assume the absolute worst? I get they're a company out to make profit, which drives most companies decisions, but there are businesses out there attempting to push better initiatives for the greater good. I get that it's rare but like, if in the off chance this is a good thing for everyone, why do people try to shoot it down immediately? It's all just negative reinforcement.
I second this. Its where i started out learning over 2 years ago.
 var a = 33; var b = 333;
No, it isn't. OP literally asked: &gt; What you prefer in JS that we don't have in OO language ? I interpret that question as "What JS features do you like which aren't available in other OO languages?". There is no reference to JS's OO features nor prototype-based OO. As for functional programming, I don't see how OO languages (or JS) have much to do with it.
Python allows you to override how classes work, even to the point of changing how member access works. So you can even create prototype-based inheritance, if you wanted; or class-based inheritance, or whatever you want.
That's not an argument, since even Assembly allows you to do that. The qualification is based on what the language provides for you directly. I've also written OO code in C by stuffing data and function pointers into structs (with inheritance by putting the parent struct first), but that doesn't mean that C is an OO language.
[removed]
I'm really liking this approach of paying OSS developers and maintainers to implement features Google considers important. (They're doing [something similar for fuzzing](https://security.googleblog.com/2018/11/a-new-chapter-for-oss-fuzz.html) too.) If this becomes a trend and spreads to other companies, it seems like it could potentially become a viable funding model for open source projects.
Well get ready folks. The days of a new framework every week are coming back!
Just be careful. Lots of wrong answers that are upvoted on SO
I don't think it's meant to pay people full time, just support a project. $2K goes a long way in basic cloud hosting costs, and you could do 100 of those small donations.
You already got some suggestions on how to implement it. Now my suggestion is: don't.
Is that why some YouTube videos/twitch streams have no sound for me only on Firefox?
At least the “let me answer that with jQuery” crowd is gone.
&gt; Why does everyone automatically assume the absolute worst? I get they're a company out to make profit That's it, really. I mean it's capitalism 101
Free &amp; Open Source Software.
I think paying money to make performance worse, or prevent improvements on other platforms would be underhanded. I think paying money to improve something isn't functionality different from contributing to open source projects when they develop something internally. They're not obligated to make things better for everyone.
Learning about layers was a revelation. And dependency management between modules of various layers. Although I've never seen this in JS, only c# would love to see some code that utilizes layers and modules in JS.
Note: do NOT use getBoundingClientRect too often, definitely not inside a scroll event handler. This method actually causes the browser to repaint all the affected elements so it’s very expensive in terms of performance.
It goes beyond personal preference. These are surveys and it's safe to assume the people that take them aren't infallible. This same survey suggests about 30% of the respondents had never heard of native apps. I'd say maybe some people just put a reason they don't like something rather than just saying they don't know anything about the tool.
But you don't await the function. You await the returned Promise. It's an important distinction, because if you `await getUser;` you won't get anywhere. You need to `await getUser();`.
Good clear summary of design patterns for anyone looking to learn or brush up. &amp;#x200B; "When you start a new project, you don’t immediately start coding. You first have to define the purpose and scope of the project, then list out the project features or specs. After you can either start coding or if you are working on a more complex project then you should choose a design pattern that best suits your project."
Given that one is a view library and one is an entire framework I still don't understand why people feel the need to compare them directly. We use React as our view layer in a major enterprise app, and never had any issues with "stitched together" libraries... You simply fine a solution to the problem you're facing instead of using a framework that solves 50 problems you don't have. I get the draw to "batteries included", but I personally would much rather NOT be forced into an opinionated framework to avoid a few npm installs.
&amp;#x200B; Making sense is great but it's in dire need of performance related updates. Google to pay JavaScript frameworks to implement performance-first code - good enough title &amp;#x200B; Google to create $200,000 fund to sponsor the addition of "on by default" performance-related updates in popular JavaScript frameworks - second good enough title. &amp;#x200B;
it would be great if they extended the 'on by default' performance requirement to any of their ad serving platforms. 
Hi /u/SustainedDissonance, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Hi /u/parth110387, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/armancs, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
I know you mentioned being facetious but saying Angular is low complexity and React high complexity made me actually laugh. There are millions of rock solid and easy to maintain React apps in the wild. End of the day React is a different way of doing things and a lot of people hate change. They want templates and a state management system that doesn't require thinking before hand because that's the way it was for more than a decade before React. Vue/Angular means you don't have to really learn a new paradigm.
You can also do 37 * 10e6 I don't know if it is easier for everyone but if you understand this `e` notation is pretty easy
This should be 4 different threads. The questions have no relation at all.
There are so many discords which deliver great help. I am currently in about 10-20 dev servers :)
Thanks for your reply.
`makeRounds = function(arr) {` `// Holds "completed" rounds of form [id, id, ...]` `let rounds = [];` `// Holds references to incomplete rounds of form {idx: round.index, total: sum of round credits}` `let incompleteRounds = [];` `// Loop over input array` `for (let i=0; i &lt; arr.length; i++) {` `const item = arr[i];` `if (`[`item.credit`](https://item.credit) `=== 5) { // If the item's credit is 5, add it to the completed rounds` `rounds.push([`[`item.id`](https://item.id)`])` `} else {` `// Try to find the first incomplete round that we can add our credit to without exceeding 5` `const iRound = incompleteRounds.find(function(r) {` `return` [`r.total`](https://r.total) `&lt;= 5 -` [`item.credit`](https://item.credit) `})` `if (iRound) {` `// If we found a round, add this item's id to the round` `rounds[iRound.idx].push(`[`item.id`](https://item.id)`);` `// Generate the new total` `const newTotal =` [`iRound.total`](https://iRound.total) `+` [`item.credit`](https://item.credit)`;` `// If the round is now complete, remove the incompleteRound record` `if (newTotal === 5) {` `incompleteRounds = incompleteRounds.filter(function(r) {` `return r !== iRound;` `})` `// Otherwise, udpate the incompleteRounds new total` `} else {` [`iRound.total`](https://iRound.total) `= newTotal;` `}` `} else {` `// No incomplete round was found, so add a new one.` `const newRound = rounds.push([`[`item.id`](https://item.id)`])` `incompleteRounds.push({idx: newRound-1, total:` [`item.credit`](https://item.credit)`})` `}` `}` `}` `return rounds;` `}`
Maybe but I really dislike Imba syntax. Maybe because I've never used Ruby or liked CoffeeScript. I like some of the concepts and I see the advantages but I will wait for something more along the lines of JSX. I don't want to google all the things I need to do. Maybe I'm lazy, maybe its ok but I already have a terrible reputation of bringing new things like React to a work environment that would love for nothing to be new/different. 
It's only a blog platform.
What is a protocol designer in this context?
I think it's fine, you can leave it here and post a comment there as well.
The common way of live with circular dependency in software development in general is multi-stage initialization. Common software that does that are Dependency Injection frameworks. Dependency injection frameworks often allow you to define 2nd stage constructor/initializer, so you can run stuff before and after resolving dependencies. Now that's generally considered an anti-pattern in JS cause you are piling on complexity on the same object/module/function. Now that's generally considered an anti-pattern in JS cause you are piling on complexity on the same object/module/function. Note: the most widespread DI in JS -- the Angular DI -- doesn't actually allow circular dependency. 
For me, SO was always the home of lousy questions and lousy/outdated answers. I will never understand why some people post on SO, waiting for an answer for hours or days instead of just googling it and finding the solution within a minute. Whenever I post my advanced questions there, I just get silence. I even got a badge for that some time ago.
Every callback/promise/async example I've seen uses settimeout. I couldn't see it in the real world. Yes I understand what callback hell is, but had no idea how it could come about. Then I wrote a node thing working with files. get the data from front end &gt; callback check if a file exists &gt; callback if/not exists do thing &gt; callback get whole file data &gt; return &gt; return &gt; return &gt; return &gt; put stuff on webpage. Not till I completely finished it, with debugging, did I realize that I just built callback hell. Sometimes abstract examples aren't as helpful as they may seem. The writers knowledge comes from a place of knowing. &amp;#x200B;
You shouldn't really be referencing specific numbers too often in code. Use constants/magic numbers. 
Its not suitable for what I am trying to achieve. Essentially, I am creating a web game with a store. There are many different items in the store with prices going up to billions and trillions. I would need to create &gt;20 variables with names like OneBillionThreeHundredThousand which is dumb af
For any new or experienced developers, I've been trying to grow my own community of amateurs, hobbyists and professionals. Its a general purpose software discord with a few JS/Modern industry professionals. Currently small, but consider joining. https://discord.gg/r6Y4w7
You can check [SitePoint](https://www.sitepoint.com/community/c/javascript) and [CSS-tricks](https://css-tricks.com/forums/forum/javascript-jungle/) forum also though those are not so popular like StackOverflow. Both of the forums have their blog and share quality articles.
Because answer is in SO
[removed]
&gt;And guess what? Saving the world is not the only gift, your efforts will be rewarded with an Amazfit A1612R Pace GPS Running Smartwatch. False. Only the #1 winner will receive that prize. Everyone else gets nothing. (Per the terms.) And that's okay, but it needs to make that clear. That statement is very deceptive at the moment.
Who do you think you are to say that? SO literally exists to ask questions and have them answered.
Spoiler: Angular gets it every year
Because Angular is the most awesome thing JavaScript has ever seen
If you think React is the most innovative you didnt follow Angular's development
[removed]
60 * 60 * 24 * 7 * 4 is 28 days.
I dont see how it helps with large number formattng
This is the fundamental problem with Google paying others to increase performance. They will pay to implement performance improvements that favour Chrome. No open source project can compete with that and it will leave Firefox with no option but to trail Google to catch up on the V8 specific stuff. Do the right thing, install the #1 browser that respects open standards.
Java is a *server-side* language. That means it runs on your server computer, which uses it to generate HTML (or CSS or Javascript) files. Those files are then sent over the Internet to your computer, which runs them, including the Javascript. This is because Javascript is a *client-side language.* You have to understand this basic fact to use the two together. Everything on the server-side (ie. your Java code) runs first. It does everything it's going to do, sends the file to your client, and it's only then that the client (ie. your Javascript code) can start doing its thing. So yes: var setName = "&lt;%=downloadName%&gt;"; *is* the correct way to send information from Java to Javascript: it writes out the HTML/Javascript file with your `downloadName` Java variable included, and then that resulting code is run by Javascript. If it's not working, use View Source (or just browse to your .js file directly for Javascript). If you see the result of the variable, your Java worked and you Javascript has an issue. If you don't see the expected output, there's a problem with your Java. And BTW, when you want to send data back from Javascript to Java, you need to use AJAX in your Javascript and some sort of API endpoint on the Java end.
For sites like this, usually there's a backend that creates the video serverside. You'd pre-track the whiteboard, and create some script that composites the text onto every frame at the right position. Finally, serve the video to the client with a permalink for sharing.
Uh, sure. Anyone can say things and not back them up with actual numbers, but I kind of lean towards "their stuff is not slow".
I feel sorry for you :-(
Lol, no sense of humour allowed? I'll check it out later.
&gt;new things like React to a work environment Oh, ok then. You're covered. Imba is older than React. :D
You might be correct but innovating in the right direction is important. I used angular up to 6. Enlighten me on what is innovative about it since.
please listen to this comment
Dates are weird. Like /u/Meefims said, you're calculating for 28 days, while a month can be anywhere between 28 and 31 days (and varies based on if it's a leap year). Unless you're really trying to save space, I'd suggest using [moment.js](https://momentjs.com/docs/#/durations/months/) for this, as they've already figured out all of the edge cases. Create a duration, then use \`.asMonths()\` to get the number of months.
Wow. There's a whole lot of bullshit to unpack here. 1. /r/gatekeeping obviously 2. SO isn't some obscure secret. It's been huge basically since it first came on the scene. It quickly replaced all the shitty sites out there (expertsexchange, anyone?), much like Google quickly replaced all the shitty search engines that had come before. 3. Reddit predates SO by 3 years 4. SO explicitly exists for users of all experience levels to ask and answer questions. See also point #1 In conclusion, you're not just a douche, you're also super fucking wrong.
[My experience after 10 seconds of experimenting with the website](https://youtu.be/kYGLNKFXV3c). I thought it was pretty amusing. Glad to see that Vue is getting more popular. I was surprised to see no HapiJS, as well? I thought it was doing well? I get that this is a JS survey but I'd be curious to see stats for non-JS WRT the backend. For example, I think a lot of Vue devs use Laravel/PHP.
I don't think it's "so awfully important for a beginner front-end developer" in general. It's important for specific libraries, such as Redux. If your company uses Redux, then it's important to understand immutability because otherwise you'll create reducer functions with bugs. Also, some companies have "jumped on the immutability bandwagon", and believe that immutability is the answer to all of ~~life's~~ programming's ills. They're not right at all (bugs caused by inadvertent mutations are like 1% of web app bugs), but some people like to drink kool-aid, and if you work at such a company they will ... overemphasize the importance of immutability.
It's already becoming my standard. Imba makes it easy. The syntax, coming from templating with pug, it's a no-brainer.
Ha ha 
I changed it to 60 \* 60 \* 24 \* 7 \* 52 / 12 which on the first eye looks ok
That version of Polymer was running on polyfills *before* — it's just that the polyfill in question (I think it was Shadow DOM) was far slower than native Shadow DOM v1, which has only made it into Firefox stable a month ago. 
1. Accessibility, compatability and community which innovates rapidly. A lot of open source mentality going around. 2. React. It's just a powerful tool. 3. Not sure what is there to be afraid. With wasm JS becomes more capable. CPU intensive operations can be delegated to workers implemented in C. Expect more things from back end to be handled by client. As for UI's, JS is not going anywhere anytime soon.
Ah, if it's a new browser feature it makes sense that it would take time to implement. I think YouTube prioritizes support for Chrome before they implement the latest API's in other browsers. Makes sense considering both softwares are made by Google.
I am seriously curious as to why you would need to do this? If you're using nosql, my assumption is that your data model matches one that works with that. Moving to a sql data structure feels to me like somebody who doesn't understand the existing data model enough to maintain and/or scale it. Or perhaps somebody who jumped to nosql without any prior knowledge of what they were trying to achieve in the first place. There are of course countless other reasons, but I'm seriously curious on this one. 
Nicely done
Pretty much the body is fixed with CSS and the content is made up of full height and width sections. When the user scrolls up or down the content translates the height of the window which brings the content into view. Could also be using a type of carousel that shows one sldie at a time and goes to the next one on scroll up or down. Those are just two of the I am sure many ways to do this.
http://turfjs.org/docs#pointsWithinPolygon
There's nothing worse than a redditor who complains about my post and his complaints bring up things I never said and things that have nothing to do with anything I said.
Days should not be accounted for in the logic of finding the difference of months between two dates. And anyway, it would be logically impossible to determine what number of days qualifies as a month - which is the reason OP’s logic was at fault to begin with. It’s similar to saying the number of seasons between last day of Summer and the first day of Fall is still 1.
I have to agree with /u/icantthinkofone. What of anything you said has anything to do with what he said?
Yes, but the performance issue with the polyfill, as I understood it, was not an issue with the more recent version of Polymer. They launched an out-of-date version of the framework. 
SO is not very friendly towards new developers.. Just make sure that your question hasn't already been asked, and avoid asking "homework" questions. The questions should be specific, detailing what you've tried, what you're trying to do, and should list out any specific edge cases you may be facing with the problem
I don't think that's true. Im sure they always use the latest stable release in their projects. When you add packages with NPM, they handle this by default.
Did you write this all by hand!? Quick tip: if you see code repeating, use a loop. In your case, you can either use a for loop or a forEach for every text field. For each is probably the best way since it loops through all the elements.
There you go! Love the idea Just starred the project on GitHub&lt;3 Keep open sauce alive!!
If doing so is to the detriment of other browsers, then yeah that's bad. If doing so doesn't change performance on other browsers - well, that's functionally no different then them paying the same money to their own team to make their browser faster. If doing so makes it much faster on chrome, but also gives slight gains on other browsers, well that's good for everyone.
Just out of curiosity, why?
It breaks user expectations of how scrolling works.
I get why you'd want to remove junk files, but why would you rewrite the actual code itself to pretend it was always ES6?
tl;dr yes if you're a newbie
For fun
But doesn't that undermine the whole point of keeping a history. Suppose you find a bug and want to figure out when the bug was introduced, or find the working code before the bug was introduced - but the bug was introduced by changing from ES5 to ES6. You'll got through the whole history and be super confused as to why it ever worked in the first place, and not have a record of the working code.
their
Not what I was looking to do. I wanted to maintain all the actual source code commit history in terms of what changed over time, who made the commits, task ID associations, etc, because we'll still want to have that info directly in the history for reference as we move forward with development.
Nicely done :) If you wanted to be more functional, you could even do something like Array.from(input) .map((char, index) =&gt; char[index % 2 ? 'toUpperCase' : 'toLowerCase']()) .join(''); 
Thank you, will consider your proposal in next releases!
Same reason as with the auto-formatting aspect. I didn't want a "big bang" commit that rewrote everything at once and disrupted the blame. Since I was already changing the history line anyway because of the file filtering aspect, I figured I'd take advantage of that and do the transformation pass as well. (Also, it was a really fun technical challenge :) )
this is silly. I like it!
These are not the questions I would ask, they are far too basic and don't really give insight into how well you know how to work with the language. The answers sound like what I would expect someone learning js to reply with.
We're kinda shaky on the unit test front, but we've got a pretty solid integration test suite. If anything's actually broken, we'll fix it at the start of the next development cycle and continue with development from there.
but but but how else am I going to get an FWA.... /s
Mind sharing any that are available to join?
&gt;I didn't want a "big bang" commit that rewrote everything at once and disrupted the blame. But that's what happened. Shouldn't your git history reflect that? The file thing is an unfortunate side effect. Ideally you'd like to have a history of everything, but if certain files just take up too much space, it's not practical, especially if they were added accidentally. But the big bang change is actually what happened, why wouldn't you want a record of it?
What is only a blog platform?
Giving running hardware to coders. Do you think I wanna be fit? /s
I use a local slack channel
On one hand I can appreciate a workflow of “I don’t really care what the code was or when it was working, I just want to fix it now”. But sure obviously modifying history is a generally “bad” idea.
The fact that stuff got rewritten is reflected in the fact that we're archiving the old repo and moving forward with the new one. There were a few options here, really: - Hand-rewrite every AMD file to ESM at the start of the next dev cycle. This would have been very time-consuming. - Auto-transform every AMD file to ESM, once, in a single commit. This would have been fast, but obliterated the "blame" aspect for the 80% of our codebase that was AMD files. Not cool. - Transform the history. This took a couple weeks of effort, but resulted in a consistent history, with all the same commits from everybody who's ever touched our codebase, but cleaned up and written "correctly".
Very much my feeling and I have not even seen big codebases yet. Some people seems to love and and all the best to them. I guess its about what you get used to. I come from Java and I love my brackets :) What can I say, they represent order in my mind. 
Ha! I guess 'new' is a relative term then :) 
Sorry, I'm having a hard time even forming a complete sentence lately, let alone a thought. IDK what I was actually trying to get at, but it seems it was as unnecessary and useless as most of what I've bothered to say recently both online and off. The forEach definitely is more readable and looks nice in comparison; and the speed is generally negligible enough when not used for massive arrays. I really don't know what I was getting at, but I think it's time for a break, at least until after tomorrow. Cheers :)
Sorry but to me this has no place on npm. The repository is already filled with useless modules, please don’t add to that pile. 
A boilerplate I can think of would be Atomic React [https://github.com/diegohaz/arc/wiki](https://github.com/diegohaz/arc/wiki) &amp;#x200B; Component module is split into layers according to atomic design principle.
Honestly, that website loads slow as fuck and it completely kills the user experience. Guess the devs at Tesla have gigabit internet... 
Useless is in the eye of the beholder. That you may not be able to convince of a use for it doesn't mean someone else can't find value in it. Also, don't shit on others accomplishments, no matter how minor they seem to you. Tl;Dr: Don't be a dick.
Why would you need a new language when you have template literal view layers like lit-html? They only update parts of the DOM that have changed, without resorting to virtual DOM. 
Gotta start somewhere. I like it!
How does this affect you? Are you worried that you will accidentally download it and use it? Are you worried about the limited space on internet?
ELI5, please!
Well, it's not so much a *move*, since Vue 3 will be a coplete re-write from scratch. So we started with a blank slate and chose a different typing syste, this time. Plus we also have a lot of team members that already worked with typescript a lot, while most had little experience with Flow, which we used for Vue 2. But yeah, we will most probably do such a writeup.
The task asked is not a one month task.
NPM has a long standing welcoming policy to use whatever name you want for whatever package you want. Usefulness is not a concern.
good article on that topic on [css-tricks](https://css-tricks.com/practical-css-scroll-snapping/)
This is really cool, thanks for sharing! I'm noticing some issues with the demo updating the photos from the dropdown selection, but re-focusing on the dropdown seems to force the update. (I'm on macOS chrome btw).
is-thirteen
Will sure do. Thanks for your feedback.
I am just curious what this is? What kind of questions/task? Not willingly to create an account just to see. Is it like Code of Advent?
In case anyone missed this point from the article : all this rewriting was done on a separate fresh clone of our repo. The original repo was not changed at all, and will be archived once we start the new development cycle. We aren't losing any of the original history from that repo - we'll still be able to go beck and refer to it if necessary. The repo we'll be using for ongoing development is the one that was cleaned up. 
You're absolutely right. Nowadays there is that trend that because you're making app in JS and you're working on objects, you should use documents for everything - and Mongo is the go-to database for any node projects. People even don't think about correct architecture of db, choosing right tools, just quickly jump into it because creating a collection and write few lines of mongoose schema takes like a minute or two. And I'm in that kind of project right now; there was a need to make some things working in literally two hours, somebody make a decision... and after a few months we're got nearly 1.5m (!) documents and querying it takes over a minute (fortunately it's an internal tool and not used by many) - because nobody thought it will work for more than a few weeks. And yes, I'm the one who will have to handle moving it to Postgres or MySQL (not decided yet, because project is evolving too). Nosql dbs are great for some CRUD operations, but doing something more when you've got lots of data are terrible talking performance - like in my case even simple filter queries (not to mention one with summing and/or counting) can take really, really long. Maybe it was improved in MongoDB 4 (we're still on 3.6), but you know, well-thought-out application architecture is the key, if there was no time for that you should assume that you're already fucked and somebody will have to clean it up one day.
I really would like to write code like you, I mean, be so efficient, I would have used 4 or 5 more lines to write the same functionality. The package is really a good idea for begin with npm packages, congratz dude :D
https://mostly-adequate.gitbooks.io/mostly-adequate-guide/
&gt; Made just for fun JS devs.
Google chrome was blocking my JS, lol. fml, I fixed it.
Not fully sure I understand what you're trying to do. Your title says you want to push to the array when credit is 5, but then your last statement says you want to skip when credit is 5, what exactly are you wanting to do? If you want to push the whole object to a new array when the credit property is equal to 5: const arr = [ {id: 0, credit : 1}, {id: 1, credit : 5}, {id: 2, credit : 2}, {id: 3, credit : 3}, {id: 4, credit : 1}, {id: 5, credit : 1}, {id: 6, credit : 4}, {id: 7, credit : 5}, {id: 8, credit : 2}, {id: 9, credit : 3} ]; const round = arr.filter(item =&gt; (item &amp;&amp; item.credit === 5)); this will give you [{id: 1, credit : 5}, {id: 7, credit : 5}] // round &amp;#x200B;
Does indempotent mean something different than a pure function (same arguments return same results)?
That's native code implemented per-browser, so you'll need to look into Chrome / Firefox etc to find it
The experiment is over; now if anyone wants to play some more, try hosting it yourselves. Source code is in the description.
Create one function that generates and displays the question (CreateQuestion) Create another that reads the answer and print if it is correct. (CalculateAnswer) Call CreateQuestion once in the beginning. Then also call it at the end of CalculateAnswer to generate a new question. This will show new questions indefinitely. Also try using English for function and variable names and leave the Swedish for GUI text. This is standard in Sweden and will make future questions easier for an international audience to understand. 
In the future please instead of deleting the thread post the answer as a comment or edit, so others that find it can benefit from the answer.
Ok, I got an answer from someone. I'm postiing it here. &amp;#x200B; var input = document.getElementById("end_date"); input.value = "some value"; angular.element(input).triggerHandler('change'); The key part is that you need to use the angular triggerHandler.
Yes, they're different. With a pure function, if you give it the same input, it will always produce the same output. With an idempotent function, i need to be able to take the output, feed it back in as an input, and get the same output as the first time. For example, the following function is pure, but its not idempotent function not(val) { return !val; } If, for example, i call `not(true)` i'll always get out false. But if i call` not(not(true))` i get a different value: true. On the other hand, this function is both pure and idempotent: function abs(val) { return val &lt; 0 ? -val : val; } If i do `abs(-2)`, i'll always get out 2. And i can call abs more times, without messing up the result; `abs(abs(-2))` also results in 2. 
Your teeth.
In Chrome 70, the drop-downs do not update properly. You select something and it only updates when you click the dropdown again. &amp;#x200B; Looks cool though
I've been asked about hoisting twice now.
Fun isn't allowed in other languages!
Full stack React FE
Don't even create an array... ``` input.replace(/./g, (s,i) =&gt; i%2 ? s.toLowerCase() : s.toUpperCase()) ```
[https://30secondsofinterviews.org/](https://30secondsofinterviews.org/) Know why you want to use react, what is the difference to other FE Frameworks, whats new in the react eco system (Hooks, any1?). Good Luck!
cool! What does the normal javascript .sort method use to sort?
Looks legit 👍 One suggestion tho... Please use proper branding of Node.js Do not use following when writing about Node.js: Node Js nodejs Nodejs NodeJS You should always use proper brand name (Node.js) in readme, docs and comments.
Correct me if I am wrong, but I think it depends on the browser. An answer here: [https://stackoverflow.com/questions/234683/javascript-array-sort-implementation](https://stackoverflow.com/questions/234683/javascript-array-sort-implementation) suggests that Mozilla uses a merge sort, while Chrome V8 uses/used quick sort and insertion sort.
Something like https://www.udemy.com/the-complete-javascript-course/ , ideally combined with having a personal project that you work on at the same time -- helps you work out which questions to have as well as something to show for it.
Async functions return a promise, if you want mocha to wait for that promise you have to return it from the handler. In your example if you replace ‘await wait’ with ‘return wait’ then the timing should work out correctly.
You shouldn't use \`break\` in a for loop, thats why it isn't looping correctly, you may also need to trim the value before processing.
There are a lot of great online resources to help you get the basics but long term it would be a good choice to get a CS degree to show validity in development. 
I like scotch.io they also have a slack team.
Why do so many people hate Medium? They host content. For free. The hilarious thing is that they whinge about it here on Reddit... because Condé Nast is a much better company.... /facepalm
https://www.npmjs.com/package/fencery I have this package also. Does what your looking for I think. 
Start with a Udemy course (e.g.: [https://www.udemy.com/the-web-developer-bootcamp/](https://www.udemy.com/the-web-developer-bootcamp/) or [https://www.udemy.com/the-complete-web-developer-course-2/](https://www.udemy.com/the-complete-web-developer-course-2/)). Try [https://www.freecodecamp.org/](https://www.freecodecamp.org/). Read "JavaScript: the good parts" or "Eloquent Javascript". Use [https://stackoverflow.com/](https://stackoverflow.com/) for asking questions and learn how to properly google your problems. Good Luck.
You require my first name, last name, country and city in order to play. Kindly shove it.
Wondering, whats the point in calling garbage collection right before exiting the process?
Hi, so I've manged to get it working somehow, but now how would I get all the names for all the items? because now it always grabs the first item name, but i need to get the right names for the right items and gold values.
Today, i don't finish it, a lot of errors. Tomorrow i will try to understand my problems xD
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors It’s called object bracket notation. You are probably most familiar with object dot notation. Something like Const person = { ‘First name’: ‘john’; } Console.log(person[‘First name’]) // output: john 
NearDB - a simple document db made for globally distributed reads I have been using Now and Lambda Edge heavily, and it works wonders. [https://github.com/leoafarias/neardb](https://github.com/leoafarias/neardb)
that's not what a pure function means, is the thing pure function means doesn't have side effects. an example of a function that, with the same arguments, returns the same results, but isn't pure: function NotPure(left, right) { os.call('format everything --silent --deadly --broccoli'); return left*right; } idempotent functions are mis-defined above. what an idempotent function *actually* means is that if you call it more than once, the first result sticks. that's importantly different than the definition the wrong poster above gave. in fact, most idempotent functions in the real world ***do not return the same thing repeatedly***. consider a bank. you want withdraw to be idempotent. why? suppose i pull $500 from an atm. the network goes down for the first withdraw request, so it sends it again. twist ending: it was the return trip that was down, so though we only got one response, the server saw it twice. a badly written bank would just send the response twice, and not deduct twice, which is valid, but offers a poor opportunity for the remote software to respond a well written bank would, instead, the second time, send the response "i'm declining this request because it was already fulfilled seven seconds ago"
Had saw this before. Meant to take more of a look and completely forgot. Internet stranger, thank you! 😊 
&gt; idempotent means that if you run the operation multiple times, you get the same result as running it just once. this is significantly incorrect, and most idempotent software responds differently on successive calls what idempotent actually means is that successive calls will not cause further changes well written idempotent systems tell the caller they're failing, and nearly always have rate limiting and blocking
can you explain to me any value you could pass to `not` and get different results each time, without resorting to shenanigans like using `.value_of` to set interior members?
Good bot
Thank you, Max_Stern, for voting on frambot. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://botrank.pastimes.eu/). *** ^(Even if I don't reply to your comment, I'm still listening for votes. Check the webpage to see if your vote registered!)
Refer back to point #1 and read further
Are you serious lmao
Very nice, how long it took you? :) 
An Array is an object extended off the Object base type in javascript. NodeList is a WebApi, it's not extended off the Object base type and isn't an Array. The browser has provided the NodeList object as a way to interact with the DOM, but it's not part of the language. With that said, why does the browser choose to provide a NodeList as it's own base type and not an Array? A simplified answer is that a NodeList is not the same as a Javascript Array. Converting a NodeList to an Array does not just provide access to methods that would otherwise exist on a NodeList, but rather creates a new instance of an entirely different data structure. NodeList's are defined language agnostic, browsers have decided to stick to the definition of a NodeList as stated in the standard [https://dom.spec.whatwg.org/#interface-nodelist](https://dom.spec.whatwg.org/#interface-nodelist)
TLDR: NodeList's aren't part of javascript, if browsers implemented NodeList's as Array's it would not meet the standard as defined in the spec for the DOM.
I feel your answer just rephrases the question &gt; A simplified answer is that a NodeList is not the same as a Javascript Array ERm.... yes, but WHY?? &gt; Converting a NodeList to an Array does not just provide access to methods that would otherwise exist on a NodeList, but rather creates a new instance of an entirely different data structure. Yes, we have established that, but.... WHY?? 
&lt; React Animation Component /&gt; [https://react-simple-animate.now.sh/](https://react-simple-animate.now.sh/)
Right. Because where a nodelist is defined JavaScript is not considered. A NodeList is defined by the web api specifications and has no knowledge of arrays 
Even then the size of each strand is usually approximately proportional to the size of the target slice... Not very informative just kind of cool looking. 
It's because the data is biased: https://www.youtube.com/watch?v=UnEPBQvkNrg
There are two different definitions of pure function, but one of them requires both those things. See [https://en.wikipedia.org/wiki/Pure\_function](https://en.wikipedia.org/wiki/Pure_function) &amp;#x200B; In fact, it seems there are two different definitions of idempotent too: [https://en.wikipedia.org/wiki/Idempotence#Computer\_science\_meaning](https://en.wikipedia.org/wiki/Idempotence#Computer_science_meaning)
&gt; why not just throw Angular to the trash and adopt their competitors reactive programming with flux methodology You can use Redux with Angular just fine. I recommend ngrx or ngxs.
I'm working on it now too
My apologies, i approach this topic mostly from a the point of view of mathematical functions. I didn't consider that similar concepts exist for asynchronous network communications.
&gt; you do recognize that pure functions can change their results, right? We may be using different definitions. Would you consider this a pure function? function getNumber() { return Math.random(); } (assume that Math.random initializes the seed with the unix timestamp the first time its called, and then uses its internal state thereafter).
What you propose will work but I’d encourage you to use local storage instead. Cookies get sent on all http requests. That means all xhr and image requests will pass them along. You can avoid all that and keep your cookies lean by writing them to local storage.
What you propose will work but I’d encourage you to use local storage instead. Cookies get sent on all http requests. That means all xhr and image requests will pass them along. You can avoid all that and keep your cookies lean by writing them to local storage.
I love NodeJS + MongoDB together. can't go wrong with those two....
I love open-source.
If people aren’t friendly to you for asking an entry level dev question that’s because you didn’t google for it and find the previously asked SO question 
Have we really reached the point where SQL is the old days? wtf
Only we would be so stupid as to enjoy ourselves
Congratulations! I remember my first package. Making something and then publishing is always a thrilling experience. Don’t stop making awesome stuff.
Wait really?
You need to spend some time learning how the code I provided works. Try logging `data` to see what you have available.
No
Programming is work. Fun is not allowed in _any_ language!
This only works when you use the back/forward buttons.
These things all integrate with one another. For instance, for my larger web development clients, I will often use Mongo as my DB and Node as my backend server for things in real time (i.e. live chat). Typically with Node fetching content from the CMS via a RESTful API and passing data from client to server with socket.io, then use express to serve common cached assets as well as for webhooks to keep all the clients in real-time when content is pushed from the cms or elsewhere. I hate angular, but it can be used interchangeably for React (MERN Stack). Think of it like this: you have different layers. - Your cms is where the content is stored and managed - your cms stores that content in a database (Mongo) - your content is kept alive and served indirectly from the API via the backend (Node/Express) - your content is displayed to the end user by an interface/view (React/Angular) There’s many ways to do it and maybe you go direct from the view to the API eliminating Node/express (I prefer the extra layer of security and ability for better tracking/real-time data), but at the end of the day, React &amp; Angular are different layers. Deciding to learn either a MEAN stack or React is like deciding to learn how to build an engine or a car. One encompasses the other. You could achieve the same results (more or less) with a MEAN stack or MERN stack, however, you cannot achieve the same results with React alone as you could either of those stacks. ~Hope this helps 
Your thinking of “pure” where-by providing the same input(s) results in the same output(s). It could _technically_ be idempotent. But idempotent has a subtly different meaning. You can imagine a function that takes an an array and a new item and returns a new array containing all the elements of the old plus the new, a standard “append” in functional languages, this is a “pure” function. It makes no modification to its input(s) and returns a new array containing the same elements that it was supplied with _everytime_. Now in another system maybe you have orders. And you want to charge them to get your money. Most implementetions will modify the input order and probably update a database with new data. Both of these are _side effects_ which basically means that some non-input state will be modified when the function executes. Making it non-pure. However, it’s probably a good idea to reject charging orders that have been charged. And having those guards means you can call the charge function with an uncharged order and it’ll charge it and you can call it with a charged order and the order _will not be recharged_. This makes it idempotent. So a pure function could technically be “idempotent” and idempotent function may not be “pure.” Personally, I’ve found that pushing for pure functions were possible and idempotency where possible makes for an easy to understand flow and one that is much easier to reason about and modify. 
Sorry, I’m sure the deadline has long passed. I’ll go ahead and give this a response anyway.. There are many ways to do this, but I would probably go with css/js with a fade. Here’s how I’d do it; Only a few steps: - add spawn elements with error messages above or below the fields and assign a class or id to each - apply “opacity:0” and “transition: 0.25s ease-out all” css rule to each error class/id - create “visible” class with “opacity:1” - add event listeners to the validated fields (element.addEventListener(“keyup”, validateFunc)) - validate the form - if failed: document.querySelector(“.failedFormErrClass”).classList.add(“visible”) - if validated: document.querySelector(“.validatedFormErrClass”).classList.remove(“visible”) This way when each key is pressed, it checks the field and shows or hides the error. The transition just gives it a smoother feel. ~Hope this helps
I’d use an &lt;img /&gt; tag. That’s just me. 
JS Basics? What would you consider English basics? It’s hard to answer that question. I would say a sound understanding of fundamentals would mean that you can create a function to do anything a library can do, you just wouldn’t because its already done. Just like with English, knowing how to operate the language and not just phrases or common sentences is crucial to being able to carry on a conversation and construct or convey new ideas. The same applies with JS. In order to be able to functionally program with it, one must be able to construct their own ideas into reality, rather than simply recall pre-composed examples or practices.
Does it install 500 MB if dependencies?
You could replace the pushState function ((history)=&gt;{ let pushState = history.pushState; history.pushState = (state) =&gt; { if (typeof history.onpushstate == "function") {history.onpushstate({state: state});} return pushState.apply(history, arguments); } })(window.history);
That's awesome! A couple small tweaks and you can also add support to use it as a template literal tag.
If you don’t have a schema (meaning there’s no consistent structure), mongo is probably the way to go. Alternatively, you could use something like [Cockpit CMS](http://getcockpit.com) which includes a RESTful API. This would allow you to push and retrieve information in structures called “collections” which can be uniquely defined via the back-end interface. This option would also provide you with a back-end to view and edit stored data. It uses NoSQL by default but can also be configured to use Mongo (more cpu resource usage). *I should note on the cockpit option: the documentation is scarce, so it can be challenging to set up some aspects if you’re trying to heavily modify the system. But there’s a decent community around it for help.*
 {`https://image.tmdb.org/t/p/w300${r.poster_path}`}
You can intercept the `set` method on `history.state`, like this: const { history } = window; Object.defineProperty(history, 'state', { set(value) { console.log(value); } }); &amp;#x200B;
Not sure why, I’d imagine it’s just a visual representation the browser uses to display the structure that only seems like an object. Might be able to use DOMParser to achieve what you’re trying to do.. it’s hard to say without specifics on what you’re trying to do with the NodeList
Source code? What’s the code in your popup.html? The code they provided works fine, there is probably something in your code conflicting, which we can’t help you find unless you provide the code.
1) * massive repository of libraries with reasonable way of telling how vetted it (e.g. popularity) * well defined async programming stack * easy to work w/PlainObject and Array syntax * easy to setup modern build stack with linting and CI * well supported / cross-platform GUI framework/stacks 2) Angular is like OOP programmer trying to programs in JS. Why does everything need to be a class? Are you going to instantiate more two versions of your object -- beyond the 1 for app, 1 for testing? No? Then why waste time filling out your project with all the class syntax boilerplate code? 3) No, if you have done serious UI development in non-web you will realize how unparalleled web is in terms of UI development. Most experienced web developers can build fully custom (branded) UI components/widgets from scratch in matter of hours (e.g. dropdowns, animations). Even complex stuff like charts and infogrpahics can be done in a few days, at most weeks. While those are order of magnitude more difficult in non-web UI world. 4) *Shrug* Google knows more about me than I know myself sometimes
Yh, don't worry I figured it out.
That's quite a rant. He sounded frustrated with Angular. I just thought he might like to hear that it's not just him and that it might be worth trying something simpler.
I haven't tried it yet. 
So many ways to do this. In layman’s: prevent scrolling but catch the events. When events are triggered load a new view. Super simple.
There is also risky that if an old version need to be supported on legacy machines, it couldn’t because use of ES6 which are not available on those legacy machines.
I ended up using the second one, cheers...my original solution was missing the '$'
npm i mockingcase@madeforfun 
Honestly I'd just use SQL, with JSON columns, and Knex to connect to it.
Are all cookies sent on all http requests or just the cookies of the site? 
_If_ we ever need to check out an older build, we'd do so from the old repo, not the new one. Not likely, given our development process.
noted thank you 
helllo ignisiss ,calling the garpage collector call is to reclaim memory occupied by unused objects 
will mvc is a design pattern not specified for a programming language ,its more about what you are trying to achieve with it. yes Type script is a good practice as well as ES 6 ,type script force the developer to write structure well organised code in most cases ,but because most developers this days including me use ES 6 so i tried to achieve that using ES6 ,as type script has its own learning curve and development mechanism thanks for your feed back 
ah, learning from a dubious quality source containing conflicting definitions of unknown provenance
I always thought that objects got copied by reference. How does this work differently?
Ug -- "As you obviously know, the body of our function have received a **copy** of variable someString in its argument, so any changes will be made only to the duplicated string " -- except the string isn't duplicated. Only the value of the someString variable, which is just a pointer/reference is duplicated. This base misunderstanding of what happens with strings leads into much of the confusion in the rest of the article.
Honestly sql is not a good language. It was criticized a lot, before the rise of nosql. What is interesting about it is the tech around it. The rdbms that were built are really some of the best systems in this problem space.
https://en.wikipedia.org/wiki/Idempotence#Computer_science_meaning
parent comment should have seen this coming tbh
Just the ones for the site. Logging these on the server may makes sense as well. That way you could look at keywords which convert. Assuming you assign some type of session id and then join that when the user signs in.
Use the browser version if needed http://dannypage.github.io/spongebob.html
If you aren't using [this font](https://www.dafont.com/gabriele-ribbon-fg.font) in your editor, then you're a chump ;)
&gt; we’ve resorted to exporting, via the JSON.stringify and URL.createObjectURL(), and then ,“maintaining” a stack of JSON files on Dropbox. Yeah rolling your own database with JSON files sounds cool but is a lot more complicated than it sounds. Just use MongoDB, it's pretty easy to learn and it's decently powerful.
LOL YOU HOSTED THIS? Absolute god.
Nope, but was inspired by it!
Lol 20k is a small sample? Yeah this guy just lost all credibility. 
https://discord.gg/PqxBYKA https://discord.gg/pTxrjM7 https://discord.gg/developers https://discord.gg/STs65Z7 https://discord.gg/programming https://discord.gg/zmwjwST https://discord.gg/zQCmjC4 https://discord.gg/qY7FqKA https://discord.gg/code
Use aspect-oriented programming: function around(target, method, callback) { const original = target[method]; target[method] = (...args) =&gt; { const caller = { target, args, method, proceed: () =&gt; original.apply(caller.target, caller.args) }; return callback(caller); }; } function before(target, method, callback) { around(target, method, caller =&gt; { callback.apply(caller.target, caller.args); return caller.proceed(); }); } function after(target, method, callback) { around(target, method, caller =&gt; { const result = caller.proceed(); callback.call(caller.target, result); return result; }); } function on(target, method, callback) { around(target, method, caller =&gt; { const result = caller.proceed(); callback.apply(caller.target, caller.args); return result; }); } Now, you can hook into any object's methods - before, during or after: // runs before history.pushState before(history, 'pushState', (...args) =&gt; { // "args" is the arguments history.pushState was called with }); // runs after history.pushState after(history, 'pushState', result =&gt; { // "result" is the value returned from history.pushState }); // runs after history.pushState on(history, 'pushState', (...args) =&gt; { // "args" is the arguments history.pushState was called with }); &amp;#x200B;
Netlify
Are you fine with open sourcing? I like github pages. It's free and you can set up CI very easily so each push becomes a production deploy.
I see. I have never heard of this. Is it still a good option for professional business websites?
Hmm, I'm not sure. I've only used it for my pet projects. It can only serve static web pages and github has been down quite often recently. So I cant be sure but I'll lean towards no.
Wow due. Don’t be a dick, we all started somewhere. How about giving some constructive feedback?
In Javascript, if you want to modify all instances of an instantiated object then you need to modify the prototype. For example, I want to modify the getDate() function of Date for all instantiated date objects to produce a console message. The code below shows how you can do that. // reassign the original function to something private Date.prototype._getDate = Date.prototype.getDate // define the new function but return the old one // make sure input parameters are the same and that everything is passed to the original Date.prototype.getDate = function(){ console.log("got date"); return this._getDate(); } `history` is a little different since it's already a defined function, but the idea is still the same. You want to modify the prototype, but instead of `prototype` we're using `__proto__`. history.__proto__._pushState = history.__proto__.pushState; history.__proto__.pushState = function(stateObj, title, url){ console.log("new state", stateObj, title, url); this._pushState(stateObj, title, url); } The reason why you don't want to simply define a property or assign a property to history, or the Date object (using the example above), is that objects previously created based on those prototypes won't be affected by the change. For instance, if something instantiated `History`, or if there were a number of `Date` objects already instantiated in the code. When you modify the prototype then all objects get the change because the prototype reference is updated. More info: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain
https://www.google.com/amp/s/techcrunch.com/2018/10/04/the-node-js-and-javascript-foundations-want-to-merge/amp/
Node &gt; all.
Do you think slapping hate labels like this is politically correct? :) Most content on Medium is garbage written by noobs, which means Medium encourages such quality of content. As a resource, Medium has to compete for my time with other content providers, and it fails badly. Reddit is different because it's not a static content platform. I do agree that Reddit has some really ugly shit running behind the curtains, ugly shit that I just began to learn about this year. Which makes me uncertain about my future here, I'm really considering the option of infosuiciding by Christmas if the behavior of a certain reddit admin will prove to meet my worst expectations.
What???
Do you mean what towards the code, or my question?
What... is supposed to happen? What is the goal?
we're supposed to find some hints in the code, that will lead us to an answer. The previous task had something like this (not the full code): `function doit() {` `let pwd = document.getElementById("pwd").value;` `let e = "o"; let c = "i⁢"; let d = "h";` `let a = "h"; let b = "e";` `if (pwd === a+b+c+d+e)`
🤷‍♂️
They do different things. Nothing wrong with jquery, depending on what you are using it for.
We use https://nivo.rocks
It's because Angular 1x is a PITA and Angular.io requires that you learn Typescript, which honestly sounds about as much fun as learning Coffeescript. 
Medium
jQuery and React are not mutually exclusive. jQuery:DOM::lodash:arrays
link
\^clearly never tried typescript
Hooks and time slicing aren't exactly novel ideas. Everyone is copying decades old concepts and just packaging them into frameworks.
These days, if you're not compiling even npm packages, you're probably not supporting IE anyway. There are just too many packages which use parts of ES6 syntax. So.. I'd just give up on the notion that npm is ES5 and we can all be happy :)
While I don't particularly like Typescript that much or need the additions to keep my code clean, I think that the learning curve isn't that big and (especially if you stick to the default configuration) doesn't require that much changes to how you code. Every library or framework that has become a big thing always requires you to have some learning curve to get to know the way it does it things and handle the issues one will have with it. I don't think Angular is that much different from React. Not to mention that the last few versions have improved the documentation and API a lot. I think many are still basing their opinion on early versions of it or just the old one and making it seem like a worse framework than it actually is. Its like somebody basing their opinion of React or Vue or Node on ancient versions of them. Its not really fair and not really giving a view of its real value.
https://github.com/EternityForest/KaithemAutomation/blob/master/kaithem/src/statemachines.py Not currently standalone outside the automation framework, but it's one of the parts of the project meant to be easy-ish to make into a standalone library with a half hour's work. It's got a lot of integration with the web interface, to let you check what state it's in and when it transitioned, and with the thread pool to run events in threads, and with "Virtual Resources" to hot-update stuff, but I tried to keep it modular.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [EternityForest/KaithemAutomation/.../**statemachines.py** (master → eacc503)](https://github.com/EternityForest/KaithemAutomation/blob/eacc50331f5849f884740801268ae75c2c30bd8a/kaithem/src/statemachines.py) ---- 
good bot
Thank you, commander-obvious, for voting on GitHubPermalinkBot. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://botrank.pastimes.eu/). *** ^(Even if I don't reply to your comment, I'm still listening for votes. Check the webpage to see if your vote registered!)
That's a valid point to my response. I'm stating what a lot of other developers feel, I'm not saying that it is correct. But it is the general perception. Also note that people downvoted my response but haven't exactly posted any cogent explanation as to why developers don't particularly like Angular. 
I've worked professionally with both react, angular 1, amd angular 2 and I think angular 2 is overly engineered. I've read somewhere that angular 2 is "well" engineered, but I disagree. It introduces too much overhead when all we are trying to do is build a website. I loved working with Typescript, but I hated working with RxJs and different types of decorators. (I don't hate decorators. I just don't like it when it has to be used everywhere. Compared to angular, react is way simpler and allows me to get the job done way faster. Testing in enzyme is way easier than jasmine too.
at least they teach jquery rather than turbo pascal for msdos
Okay, you tell me why Angular isn't very popular. 
They mixes AngularJS and Angular this year. Then in summary just concluded that most people will not use Angular again without highlighting the method used. It’s just a shitty survey that can not be taken seriously. 
I think you should see Angular mainly as a way to make bigger webapps. To build complex forms and specialized applications. Its not as usable for only improving a current page, but to make some complex stuff its really well for that. When theres lots of nesting and complex applications I feel that React is really unusable at some point, whereas Angular still makes sense. And until there is a better way of doing things, decorators are probably there to stay.
So if I get paid 30k/year for an Angular job am I a slave? I'm in Italy.
They normally use JavaScript 
That is very low ball, yes.
Today
I started from reading books. He obviously has no background at all.
For JavaScript, you should know, above all: how event loop works and promises. If you are looking for good promises patterns/antipatterns overview, check out: [https://diophant.com/blog/master-javascript-promises/](https://diophant.com/blog/master-javascript-promises/)
Yeah, it's not rocket science.
you want us to do your homeworks and you just provide some shitty formatted code without a real goal, way to go
Lol, this isn't homework. He gave it to us to do something when we had some spare time. This is voluntarily. 
The circle needs to follow the svg line on scroll. ive tried it but just cant get anywhere logical with it and im losing my patience with it.
Yes
## Part 1 ES6 Syntax, this should help reduce the ammount of code needed to get and check over the fields. ```javascript // Returns an object of boolean values stating wether or not the field value matches the query string provided const textFieldsQuery = (fieldName, count, query, keyPrefix) =&gt; [...Array(count)] .reduce((obj, val, idx) =&gt; { const fieldValue = this.getField(`${fieldName}.${idx}`) if (fieldValue) obj[keyPrefix + idx] = fieldValue.includes(query) return obj }, {}) console.log(textFieldsQuery('Dropdown14', 52, 'check', 'A')) ```
I understand that, but exitting the process will do that anyway?
I understand that, but wouldnt exitting the process do that anyway?
What you posted isn't valid JavaScript. That symbol soup that is supposed to be set to `init` is definitely not a valid assignment.
I'm going to ask him tomorrow about it. 
Learn both. Both technologies are great, and everything is better than the Java jungle.
Does any in the second case mean that you get to choose? Or that it is undecided?
I am all in on JavaScript 
I've used AngularJS &amp; Angular a lot in the past - mainly for my day job. So I have a bit of experience when saying, they're not nice to work with - in my opinion. Besides the infamous transition of NG1 -&gt; 2, Angular shoots for the stars when the rest of us work down here on earth. As /u/sinefine said, completely over-engineered.
jQuery is in no way comparable to Vue, Angular or React. jQuery is essentially a number of nice shortcuts for Javascript while the others are "all inn" frameworks. &amp;#x200B; &amp;#x200B;
Yes, isnt garbage collection running on a daemon thread making it not a high priority? Also in Js, garbage collection happens when the card isn't reachable by scope traversal not by keep alive references. 
You’re exitting the process... all memory will be freed anyway is what I mean
You’re exitting the process... all memory will be freed anyway is what I mean
True, no need to call gc. 
They might just not like very opinionated frameworks. The makers of the survey and most people surveyed are React devs, and a preference for extreme modularity is very common in that ecosystem. Just look how otherwise very popular backend frameworks like Rails and Laravel did in their backend section. The survey doesn't really represent overall webdev reality, more the reality of a part of the JS community that prefers Node/Express and React. 
Sortable.js is very simple and easy to use. (This is for html tables though, not sure if that's what you want)
It's undecided as it depends upon clients requirements.
Lol, if you don't want to help me that's fine. I'm going to ask my teacher tomorrow anyway, I'm stuck at that one. 
I just don't want to do your schoolwork for you. 
Many developers work below their actual worth, mostly because of lacking self-confidence and self-awareness. What’s even worse is that with the next developer that applies they try to target the same or similar wages, which drags overall worth of developers down. Don’t sell yourself below your worth. When I started out with basic knowledge 12 years ago I already earned 40k/pa, which may give you a perspective. If your boss doesn’t comply, switch jobs. You get a new one faster than you might think. Also, use recruiting services. They are free for you and the more wage they sell you for, the more money they get from the employer, so it’s win-win.
Does this subreddit look like /r/ProgrammerHumour?
`// @ts-check` &amp;#x200B; &amp;#x200B; `const init = \`EvieOOcbtyrvi0.qnAo{vAh(&gt;-/=n|ihh47+vi3u/n|xie/&lt;((.h=&lt;.+J.:&lt;R)-3vi3w5C/CU62&gt;OEnyo|pvUnA]0v~nAh53E)E.dh860DJ)?+PBqnhviop+)0(lsou{n,E.|{iŝſƇŋ­żŉƧÂ¾Ʀƌ¹œŸ¿ŤƃŝſƇƣ°¹ƓºƇÂƧōÃº¹Ƈ­ƈºÂÂ»¬ƊÂſƔ¾±ƌŝqu{nbbVfqlsD\`;` &amp;#x200B; `function setup() {` `let inpPwd = document.getElementById("pwd");` `let divHack = document.getElementById("main");` `inpPwd.addEventListener("keydown", (e) =&gt; {` `if (e.keyCode === 13) {` `let p = inpPwd.value;` `render(p);` `}` `})` &amp;#x200B; `function render(p) {` `let xx = init.split('').map((e,i) =&gt; String.fromCharCode(( (e.charCodeAt(0)-40) ^ p[i % p.length].charCodeAt(0) ) )).join("")` `try {` `let mu;` `eval("mu = " + xx);` `let msg = mu.fu(mu.msg);` `divHack.innerHTML = msg;` `} catch(e) {` `console.log(e.message);` `}` `}` &amp;#x200B; `}`
 // @ts-check const init = `EvieOOcbtyrvi0.qnAo{vAh(&gt;-/=n|ihh47+vi3u/n|xie/&lt;((.h=&lt;.+J.:&lt;R)-3vi3w5C/CU62&gt;OEnyo|pvUnA]0v~nAh53E)E.dh860DJ)?+PBqnhviop+)0(lsou{n,E.|{iŝſƇŋ­żŉƧÂ¾Ʀƌ¹œŸ¿ŤƃŝſƇƣ°¹ƓºƇÂƧōÃº¹Ƈ­ƈºÂÂ»¬ƊÂſƔ¾±ƌŝqu{nbbVfqlsD`; function setup() { let inpPwd = document.getElementById("pwd"); let divHack = document.getElementById("main"); inpPwd.addEventListener("keydown", (e) =&gt; { if (e.keyCode === 13) { let p = inpPwd.value; render(p); } }) function render(p) { let xx = init.split('').map((e,i) =&gt; String.fromCharCode(( (e.charCodeAt(0)-40) ^ p[i % p.length].charCodeAt(0) ) )).join("") try { let mu; eval("mu = " + xx); let msg = mu.fu(mu.msg); divHack.innerHTML = msg; } catch(e) { console.log(e.message); } } } &amp;#x200B; &amp;#x200B;
Dev with 7 years worth of experience here. Started with raw JavaScript &gt;&gt; jQuery &gt;&gt; angular 1 &gt;&gt; angular 4. For me, the biggest difference has not been the frameworks or the coding but the philosophy behind how web apps can be built. For any new dev out there, I would say that there is no wrong or right choice. Every choice you make helps you see a different perspective on coding an app. I would also say that ignore the survey and just focus on how to build better apps. What I learned over the years: *'As best as you can avoid putting logic in the html. Avoid calling methods in html. Avoid too many if blocks... Makes the code very hard to test. * Avoid long JavaScript classes. It gets too complex to understand what's going on at a glance. * break down our application into as many independent and smaller components. Don't build a login page... Build a page component, build a form display component, build an error message display component, etc. * build your ui components in such a way that they can be easily moved around. E.g. It should be easy to take the login box and move it to another page * Avoid duplicating code. Try to build reasonable classes everywhere. I just completed writing a label renderer component . Just so that I can make a change to a label in one place and the change is visible everywhere. * try to build stuff from scratch if you know it is likely to change in the future. Example, I once used an image carousel slider from a popular third-party library. It seemed great out of the box. But later on the business wanted to add more features to the carousel and I found it very hard to customise the carousel. I ended up writing my own carousel and even today it undergoes a lot of customisation. * follow the 10% extra rule. Whenever you complete some work on a class, check if you can refactor the class as a bonus on top of the necessary work. It's difficult to get the boss to pay for refactoring that doesn't add new features and so it's worth discretely refactoring work as you go along. * try to decouple your app from the backend as much as possible. The backend keeps changing and is generally out of your control. Therefore try to keep your domain models separate from your view model. * config your code as much as possible. Try to build configs everywhere on your app so that you can switch on and switch off stuff easily. Perhaps it's a json config or a flag you pass into a config.
I tried to change it now, hope it's a better overview now. 
[Link](https://lmgtfy.com/?q=react+theme+switcher)
Yes sorry if I didn't provide enough detail. I want to sort the underlying data, not the table rows themselves. This way using modern frameworks I can update the model/state, and the table should get re-rendered.
Yes.
Read what you wrote back to yourself, but slowly.
The code in `render` function requires the `p` argument. But the value which is passed to that function is not provided. Thus, the code is not solvable.
Thanks for the help, I need to ask him tomorrow about it
I know, but the event will also trigger when the tab or the browser is not closed.
There’s nothing wrong with learning jQuery, so long as you aren’t neglecting to learn “vanilla” JavaScript along the way. Once upon a time it virtually necessary because browsers implemented certain JS features in incompatible ways that made cross-browser development difficult, and jQuery sort of reigned in that chaos. These days, there is much less variation of implementations from browser to browser, but jQuery is still a very handy library for building out interactivity. It makes DOM manipulations, event handling, AJAX and animations a cinch. It’s great for throwing together quick prototypes. It’s so good at these things, in fact, that a lot of front-end developers never bother to learn how to do these things properly without jQuery, and this fact has contributed to jQuery’s bad reputation among serious JS developers.
It's easy to argue with statistics you don't like. However, it's worth noting that for all the 'selection bias' in who responded (and I'm sure there was), **20,000** people gave their opinion on this survey. It may not be the representative sample they are supposing/suggesting it is, but it's unfair to say the result is totally invalid just because the survey runners are react developers, or you don't like the result. Clearly zippo effort has been put into generating confidence intervals for the results, which *is* frustrating, ...but they're not totally invalid. I worked with angular in a big corp for 2 years; the mess they made with it was bloated, slow, impossible to test, SSR didn't work and upgrading to the new framework versions every year was totally fucked... I think that'd be a pretty reasonable result from any large clueless team picking up angular and running with it naively for a Large Business Application. Who knows? ...but my point is, you can flip off the survey if you like, but **20000 people** said they thought weren't satisfied with angular after using it. That's not great, even if it doesn't represent the entire community. A lot of the 'no that's not right' responses to this survey have been about the trends in angular usage over time, but that's not the point the survey was making; they were making the point that people don't *like* using it. That's a different thing, and it's pretty hard to measure any other way. ...so, maybe not awesome, but my take away from this isn't 'survey was shit', it is: The folk at google need to make working with angular fun and awesome, not boring and irritating. (Like say, not constantly breaking the angular-cli, would be nice...)
&gt; Also note that people downvoted my response but haven't exactly posted any cogent explanation as to why developers don't particularly like Angular. You got scared of all the downvotes and deleted your response before more people could respond to it. Like fr, why do you care enough about downvotes that you would censor your own opinion? Seems to me that you don't truly believe whatever it is you said if you're going to delete it after getting even the smallest amount of push back.
&gt;I get nothing in return. Unless you figure it out yourself, then you get everything in return.
You all can fight about types and react and decorators and I'll be over here in Ember heaven. Most underrated framework IMO.
Yeah, that would be the best. But I've got no clue on where to begin. And one other person said that it's not possible since the script is incorrect. 
I would totally listen to what people tell you on the internet.
But he makes a valid point though.... But I agree on what you said. 
I didn't really have that but my main annoyance is writing interfaces for everything. Especially if your lead developer has denied using `: any[]` (which I can get, but still annoying)
It's not only about bugs, immutability helps with readability, decoupling, reproducing states, debugging, it's pretty much an objectively better choice than mutating for everything that is not performance.
That doesn’t make it okay...
who said it was ok?
Dude,I work in india and get paid 10k/year
I was just clarifying for those who might read your comment and think “ah yes, that’s just the way things are, nothing can be done here”. I actually gave up on CS at uni because the lack of female representation was intimidating – if, by chance, there’s any women reading this thread, I don’t want them to make the mistake I made.
https://datatables.net/reference/api/ajax.url().load()
* ES6: IME, it helps to describe the ES6 benefits in terms of ES5: http://exploringjs.com/es6/ch_core-features.html * TypeScript is a harder sell. Arguments: * Core benefits: auto-completion (show them Visual Studio Code) and warnings at development time that you’d otherwise only find out about at runtime. * TS warning about `null` or `undefined` is a great demo, too. * I often hear from people who don’t like TS that it’s like Java. But it’s more lightweight, esp. due to its structural interfaces (no `implements` necessary). They also make good demos. * The main work required to benefit from TS is to type-annotate parameters. But that is useful documentation for plain JS, anyway.
Thank you for understanding! The intimidation thing is difficult to explain, because on the surface it doesn’t seem rational, but it’s very hard to shake the feeling of ‘I shouldn’t be here’ when you’re looking around at a space filled with people who look nothing like you. As for girls not being interested in CS... well I personally believe it’s due to how boys and girls are treated differently in education, and the enduring perception of boys as being better at science subjects and girls being better at creative subjects – though I don’t have anything other than anecdotal evidence to back up these assertions. 
Thank you :)
Genuine question, why is it depressing? My University has more girls in biotechnology and medical than Computer Science. Nurses is heavily female dominated field too. I don't think it's depressing.
Sure! If you feel like sharing how things turned out: https://twitter.com/rauschma
You could possibly qualify the obvious advantages of ES6 and TypeScript with statistics from this survey: [https://2018.stateofjs.com/introduction](https://2018.stateofjs.com/introduction)
I definitely have the same thoughts. I tried to get my sister into coding, because you know, it's awesome. I personally used to put my work aside to help her out even in the silliest of doubts but the only thing I could achieve was to make her hate programming less lol. At a certain point I stopped bothering her, so as to not force coding onto her. She took economics and finance and she's very much enjoying it.
Glad she found her passion! I’ve been trying to indoctrinate my parents, but neither of them are having any of it 😅
Haha.. i can't even imagine teaching my parents programming. My dad sends me photos of products he'd like to buy on WhatsApp. I'm like dad that big buy button is right there! Click it for god's sake 😂
Using react, isn't any different from the approach jQuery (or any attached library) would use. You'll be listening for the scroll event and interpreting if the movement is up or down, then moving the cursor forward appropriately. jQuery just happens to wrap of all that in convenient package. &amp;#x200B; That being said, there are a few approaches and the one I would use: 1. Keep a linked-list of all the points on the render of the component 2. On Scroll Event find: 1. Going up? Move up one. 2. Going Down? Move down one. One you get the movement of one for every time a "scroll" happens you can extrapolate and fine-tune your movement for multiple movements or movement based on velocity.
Thanks!
Same! I've found it enjoyable for personal projects.
You could duplicate the svg line. For the duplicate, set a custom stroke-dasharray with 1 dash and then a huge space, and animate the stroke-dashoffset: https://codepen.io/wimbarelds/pen/yQvJNK
Promises and async functions
That's why Promises were invented! They keep callback hell in check. Check out https://github.com/jakearchibald/idb for your IndexedDB hell! Even Google recommends it instead of the raw IndexedDB library here: https://developers.google.com/web/ilt/pwa/working-with-indexeddb#comparison_of_indexeddb_api_and_indexeddb_promised_library
How do I participate for next year?
An object with a property that points to itself? What are you trying to accomplish?
[edit] Just updated the pen to basically do what you wanted, so check https://codepen.io/wimbarelds/pen/yQvJNK again :)
lett newObj = { thing: otherThing }
&gt; Angularjs and angular 2 and up are 2 completely different frameworks. I wouldn’t be surprised if a lot devs still don’t see the difference IMO one of the annoying parts of developing angular right now is that quite often when looking for a solution online you'll come across angular js solutions. It's becoming less so, but it's still annoying.
\`\`\` let otherObj = {just: "a sample"}; let newObj = {...otherObj, newProp: otherObj}; \`\`\` &amp;#x200B; I think this does what you want?
Thanks I'll take a look. The issue as I see it is that I it is indeed trivial to sort each columns/keys values, but that what is really wanted in the end is that the rows that correspond to the column/key value are what I want sorted. Does that make sense? Is that something Ramda can help with? If so can you nudge me in the right direction? I'm actually writing my own method for now, and in the end plan would port it to wasm for speed.
would this work if i was drawing the svg based on the elements on the screen?
Try to make your code as clear as possible, not as condensed as possible. 
Tell the program to be patient
For any old callback-style async API that you need to deal with like this: asyncThing((error, result) =&gt; { // Execution continues here }) You can wrap it in a promise: function promisifiedThing() { return new Promise((resolve, reject) =&gt; { doAsyncThing((error, result) =&gt; { if (error) { reject(error) } else { resolve(result) } }) }) } Now you can call it like this: const result = await promisifiedThing() // Execution continues here Most libraries these days use promises though. If a function returns a promise you can `await` it.
The juice is not worth the squeeze with Typescript. I used it for a large project and it was a heavy handed mess to continuously mess with. 
I completely disagree. Scalability is about how you maintain and write your components, it doesn’t really have a lot to do with React or Angular. If you write Angular components which have 1000 lines of code and accept 50+ params then I don’t see how the framework can save you at that point. The same goes for React. That being said, Angular has a bigger learning curve which is there just for the sake of it, imo. Try to read some clean JSX code or some clean Angular templating syntax, I’m pretty sure that JSX will make more sense rather than all that special characters thrown in as HTML attributes. 
Get a new job
you're worth more than that, man. You're hurting all of us working at that price range. 
I’ll bite. While I didn’t respond to the survey, I certainly would have been among the number to give Angular negative marks. I led a seven person team that built its user interface in Angular 1.x for years. Before that, I had built a number of small to medium apps in Angular starting with 1.2. We looked forward to Angular 2 with excitement. When it came out, we did not like the direction they had gone - not an unusual opinion. After a lengthy evaluation we decided to stay on 1.x We began to notice a lot of supplemental libraries that we used stop getting commits. Libraries that used to get updates a few times a week began to languish as maintainers abandoned them. Angular jumped to 4. Didn’t really seem any better. The community seemed to be in complete disarray. Meanwhile, there’s a lot of people using React saying “we have a better way.” So I did an analysis by redoing our most complex screen using React and Redux. Here’s what I learned: I like Redux’s approach to state management infinitely better than anything Angular provided. A number of our app screens are highly complex and using Redux felt like taking Alexander’s sword to the Gordian knot. All the careful code we had written to prevent race conditions simply fluttered away into the ether, unneeded and certainly unmourned. Same with all the complex stuff we had written to emit notifications up and down scope trees. I will never ever miss that code. I was less sold on React initially. JSX felt weird and my PTSD from ExtJS had left me very wary of using imperative code to build a UI. But a couple of days into it as I built components and got used to how it worked, and realized how easy it was to get the state I wanted to and from components, I started to fall in love. Fast forward to today. JSX is a standard and I’m not tied to React - I moved one project to preact in a matter of a few hours most of which was testing to make sure it worked. I’m evaluating inferno which should have a similarly light impact on the codebase. If I wanted to go back to MVC I could switch to Vue and keep my JSX code. The next great JSX rendering library may be around the corner. And Redux is pretty loosely coupled to my React code, so if something better comes along I can swap that piece and just that piece out without breaking my entire app. And given the way it’s coupled, I could probably do it a piece at a time instead of all at once. So now I have a state management system with an emphasis on immutability alongside a malleable dumb-component syntax that’s an officially adopted standard. I can throw in many different libraries without worrying about whether they are going to bump heads with my super opinionated framework (libraries that are expensive to update like open layers were specifically brutal to use with Angular). Now, I’ve heard that Angular is vastly improved. That’s great. But I haven’t heard anything that would cause me to walk away from an ecosystem that’s easily the best thing I’ve used since I started my career in 1995. So, that’s a long version of “used it would not again.” If you think I’m wrong, however, I’m always listening. 
I think you are mistakenly conflating module compilation w/ language polyfilling. There's no requirement from webpack or browserify to polyfill ES6 syntax, and including the babel-polyfill runtime for a one-liner library would definitely be considered bad form.
this is a gif of what the page looks like and why i think what you have built wont work. [https://imgur.com/a/UltAoP2](https://imgur.com/a/UltAoP2)
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/lbjwZG0.gifv** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20ea6a741) 
If you're dealing with callbacks, try promisifying them or look for promise libraries for them. If you're dealing with promises, try using async/await. It'll help structure your code easier while looking cleaner. 