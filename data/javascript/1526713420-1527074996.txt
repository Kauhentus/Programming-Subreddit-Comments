Either [wrap it into a web-component](https://github.com/Wildhoney/ReactShadow) or just render it where ever you want (probably the preferred option): reactDOM.render(Rootnode, document.querySelector('#target')) As for script tags and distribution, the better tool for that is rollup, pack it as a UMD. Just including it still would be weird, that's just not how components work. You need to render it out somewhere.
&gt; I'm exceptionally new to Gulp, and I cannot figure out what I'm doing wrong Maybe not what you want to hear right now, but since you're new to this you still have time to bail out without getting burned. Gulp was a somewhat-ok tool to have when we were still dealing with iife's and modules were only a dream. The insane complexity around copying files around with globs, chaining and gluing pipes together, replacing script imports, etc., it just isn't necessary today. The smallest Webpack setup will give you true bundles where only the things are inside that you actually need, modules, imports, exports, and everything else is just a loader away. Don't waste your time on Gulp.
As a software professional of many years my advice to you is to not bother memorising these comparisons. Most of them are simply nonsensical and don't communicate to the next programmer what you meant. "What did you mean when you compared that empty string to an empty array? What did you expect?" There are no simple and intuitive answers to these questions. If you want to test if an array is empty, then check its length "myArray.length === 0". If you want see if a string and an array are both emtpy, then write exactly what you mean. "myArray.length===0 &amp;&amp; myStr.length===0". Write what you mean, and use `===` and `!==` to avoid these annoying automatic type conversion rules. Everyone will be much happier, and the next time someone says "Wat!?" you just reply "so wat". 
Normally you can control your selection with the arrow keys https://www.w3schools.com/html/tryit.asp?filename=tryhtml_radio
Try JSON.parse(yourStringArrayHere)
place the keyword 'debugger' before the show() and hide() method - you can see when it's being called and inspect each variable to see if they were set to true/false at that point in time when you have the developer toolbar open and the source tab open
You're repeating yourself a lot in `RmaDevice.create`. You might consider a function that extracts properties from an object and then call it with an array of desired properties, eg return RmaDevice.create( getProperties(req.body, [ 'rma_id', 'rma_request_date', // etc ]);
Then came ECMAScriptCoin
AngularJS isn't deprecated. It is fully supported, developed with bugfixes and new features alongside Angular, including side projects as AngularJS Material.
First and foremost: Write simple and clean code. It is **much** easier to debug when you need to and, as a bonus, it usually helps to avoid _having to debug_ to some extent. Also, **do** write tests. Now, once there _is_ a bug and you can't avoid debugging... 1. Learn to use your tools. The dev tools in your browser generally have everything you need so that you can debug without having to resort to _`console.log` all the things!!_. 1.1. Learn to read the console output. It, usually, gives you useful error messages and information about _where_ the error happens. 1.2. Learn to use breakpoints, hard and conditional. Learn to step through code and develop a _taste_ for when to step into a call or over it. You hardly ever need to use `debugger` if you use your breakpoints correctly. 1.3. Learn how to read both the scope and the call stack panels. The call stack panel is particularly helpful to keep track of where things come from and how you got to the point you're at now. The scope panel is _sometimes_ useful but how much depends a bit on your coding style. 1.4. Watch expressions are _sometimes_ useful. I know people who use them a lot and others who don't. 2. If you really feel the need to `console.log` something, you don't need to go back and insert it into the code and reload and restart your debugging session: You can use a conditional breakpoint to log whatever you need to. This also has the advantage of not needing to clean up afterwards. Don't abuse this too much, though. In time you'll learn to need less logging and use your dev tools better. 3. If there's an error in the console, as I mentioned before, you can usually see _where_ the error happens. If not, you need to at least be able to generally guess _where_ in the code the error happens. At least to some extent. This may mean a line, a function, a block, or in worse cases you may only know that it is tied to some _action_ or _event_ that happens. In any case, you should be able to at least locate a _starting point_ for examination. 4. Now, depending on the previous point, you might need some slightly different approaches. But generally: 4.1. Place a breakpoint at the point nearest to the conflict that you can locate. (It is better to place it _a bit before_ the conflict than _a bit after_ it.) 4.2. Use the previously mentioned panels (scope, watched expressions) to inspect the current state of things and if it matches what you expect. If it does, then step through the code until you locate the point where "the unexpected" happens. If not, use the call stack to try to trace back to the last point where it did. 4.3. Once you have the exact point where the problem happens place your breakpoint there (and probably remove others). Inspect all the things there and see what it causing the unexpected change. At this point it should be either generally easy to see the problem or something more complex may be happening. In this second case, try to simplify the problem to its most basic elements to reproduce it. Sometimes you might need to revise what you're doing because it might not be what you actually meant to do. 4.4. Sometimes the problems are harder. Maybe orders of magnitude harder. This happens only a few times, though, so don't start assuming that problems are hard. **Most of them aren't.** When you do find a "really hard to debug" problem, then you might have to reach for additional techniques, but when you reach this point, you'll probably have the experience to confront it. 5. I'll insist on some general advice: 5.1. Write simpler code. Just in case you weren't paying attention: **Write simpler code**. 5.2. Write **cleaner** code. Keep things **contained**. The main goal in the above points is to locate the exact point where something unexpected happens, right? Well, this is **much** easier if the pieces are smaller. Avoid writing large things. Break them down into smaller ones. This helps a lot in locating the problems. 5.3. _Do write tests_. Tests are sort of _pre-emptive debugging_. They help you consider things before they may start appearing as problems. 5.4. **Learn** to use your tools. But _really do_. "Just throwing `console.log` at everything" is the _brute force_ of debugging. Sure, it may work, but you're not really using your tools to their full extent.
Exactly.
I had no idea anonymous functions are called lambdas, neat.
1. You should have expected this from a beta 2. The fix should be a simple regex search and replace
Wow, that is even smaller and avoids one Iteration with .map . Thanks for that.
const myArr = eval(string yrar);
Yes, JSON.parse()
Help me out here, So you would need to test each object item passed against undefined to see if it was actually passed? Can you in the function declaration state defaults for each object item if it is not passed?
If thats dev only and you dont care much about resources at this point - i've done smth similar. You write a file on your server with timestamp and pulling it with ajax every, say 1s, compare to the last one and roload window if changed. I know, polling isnt meant for that but does the trick in quite easy way
Hi, you can set defaults like this: function withDefaults({postCount = 12, allPosts}) { console.log(postCount, allPosts) } withDefaults({}) --&gt; 12, undefined withDefaults({postCount: 5, allPosts: []}) --&gt; 5, [] but you can't do: withDefaults()
Lots of people hate it, that's why we have less, sass, piss and cuss now. 
But a more correct answer would be yes?
Are piss and cuss really a thing lol
The best resource on the topic is language specification [http://ecma\-international.org/ecma\-262/#sec\-abstract\-equality\-comparison](http://ecma-international.org/ecma-262/#sec-abstract-equality-comparison) :\)
Just a tiny update, I've figure out it's NOT Preact's fault, but maybe something I'm doing when I lazy load the "App" component into view? This is how I'm loading my Preact app. \`import\('components/my\-preact\-app'\).then\(modules=\&gt; { //... Execute module related methods here. }\);\`
If the other suggestions posted so far don't work, try JSON.parse
Oh boy not having to support IE anymore this gonna be good times! 
Be a heretic, use eval() üò¨
And if that doesn‚Äôt work try JSON.parse()
To be fair I'm just repeating a trope I've heard on the internets. I'd genuinely like to hear success stories of migrating.
no. but your competitors will. so yes.
This has been the resounding response from most commenters. Gonna suck it up and become a CSS wizard üßôüèº‚Äç‚ôÇÔ∏è
It would be the snarky answer that had better be followed up with the correct technical answer. Justsayin... For interview success :) You know we're going to ask about why the lint rule is there and which you would disable/enable after that and then maybe how, if you don't :)
And if that doesn't work, try \`JSON.parse\(json\)\`.. ;\-\)
I've remade my AnCore 2d game engine under the name Minty using electron. [Engine](https://github.com/AnXPyDev/minty) [A few projects](https://github.com/AnXPyDev/minty-projects)
**Don't** do this: document.body.innerHTML += "\n\n" + templateData[0]; You'll lose any event listener you attached programmatically.
The event listeners are attached after the template is introduced to the dom.
Link?
Why is this comment downvoted...
I thought I posted it [https://github.com/jsguru\-io/react\-image\-lazy\-load](https://github.com/jsguru-io/react-image-lazy-load), my bad
your z-indexing is all jacked up, and your `macOSNotif_Outer` is not actually going back off screen. you make the `macOSNotif_Container` go off screen, but the outer is still being displayed and overlaying the others. because it is still there, it interferes with the click event.
I know, I've read the code. But you're only attaching them to the last notification. The _previous ones_ will lose their listeners when you execute that line.
double check that. dev tools shows it as still being there, even after being dismissed: https://imgur.com/a/0BV5BRJ - changed the text to `meh` in devtools, and added a green outline to the outer. after dismissal, it still appears in the dom and on screen. additionally, if you do add `temp0.addEventListener("click", function(){alert("hey")});` in console (where temp0 is the target), it will fire the click events.
Just check and yes, the outer is removed when the notification is dismissed. [https://i.dabbitpri.me/eo5yxqpkgj.mp4](https://i.dabbitpri.me/eo5yxqpkgj.mp4)
looks good, but I hate those notifications on the mac.
Ig yeah, create element, set its outerhtml to the template and appendchild it?
To make this üíØ I believe you also need to give 'allPosts' a default value as well. That will guarantee you don't run into the can't destruct null/undefined error.
No problem.
I thought you still had to use a lambda, like so: .then(x =&gt; log(x)) Instead of: .then(log) No? I haven‚Äôt tried the latter in over a year, but it didn‚Äôt seem to work in chrome. 
Cool post, we are running into this issue right now, decided to pair this with dependency injection so our tests are easier to write and stubbing our functions out during dev makes debugging much easier. Using a library called awlix to do this.
I wrote a [regular expression compiler](https://jasonhpriestley.com/regex) in 65 lines of javascript
Looping is fundamental to programming. It is impossible to write practical code without calling a looping construct somewhere. Async functions themselves use the event loop. Things like `.map()` or `.reduce()` also use loops (and for loops are faster than the builtin versions because of sparse arrays).
If you're talking about `console.log` specifically, you used to have to do `console.log.bind(console)`, but as of chrome ~57 you don't need to do that anymore.
I‚Äôm learning that that‚Äôs the case unfortunately 
TL;DR passing parameters as an object using ES6 Destructuring. 
Yes that is correct, it might be a good thing to assign default values to all optional parameters, unless you are okay with undefined. If you don't provide default to allPosts, destructing will work, but the value of allPosts will be undefined. function withDefaults({postCount = 12, allPosts=[]} = {}) when called like: withDefaults() withDefaults({}) values will be: postCount = 12, allPosts = [] function withDefaults({postCount = 12, allPosts} = {}) when called like: withDefaults() withDefaults({}) values will be: postCount = 12, allPosts = undefined function withDefaults({postCount = 12, allPosts=[]}) when called like: withDefaults() will throw an error as undefined can't be destructed. withDefaults({}) values will be: postCount = 12, allPosts = [] üòÉ
[https://github.com/prettier/prettier](https://github.com/prettier/prettier)
I didn't even read your post.
You could also use insertAdjacentHTML()
I had gone with this approach before asking the question, but I could not for the life of my get the proper webpack settings. Turns out I had a pesky external for commonjs at the very bottom, once I got rid of that everything worked. I've found the script tag somewhat helpful, and if you wrap the component with a ReactDOM.render containing an element passed in by the function call, it is pretty versatile 
Looks interesting. Two things bother me about the API \(haven't looked too deeply at the code\) 1. The capitalization of getMetaData bothers me. It should be getMetadata. Camel casing tends to be used in place of a missing space, but metadata is one word. 2. The all\-caps OFFICEPROPS seems just wrong, plus you seem to use the words props &amp; metadata interchangeably? It would ideally be \`getMetadata\( myOfficeFile \).then\(metadata =\&gt; iDoMyThingsWith\(metadata\)\)\`
Are you for real? Of course it‚Äôs for accessibility but it‚Äôs very important for SEO as well because google crawls that. 
The original JSON looks correct to me. I think you've mistaken the fact that st_asgeojson contains a JSON string rather than just containing the array itself for the file being malformed. This is often the result of the data being converted from another format: the original data was not JSON but did contain a JSON string, so when the whole thing got converted to JSON the original entry is treated as a string rather than JSON 
Hi /u/Neelix4711, For javascript help, please visit /r/LearnJavascript. Thank you!
It‚Äôs better (and certainly more performant) to *not* add a new event listener for each element that needs to be aware of an event. Attach one listener to the parent, and use that for all of its children. Then, it doesn‚Äôt matter how many children you have, when they‚Äôre introduced (or removed), etc. Adding event listeners per element is very inefficient.
^ this++
If you‚Äôre feeling brave, you can try RegEx :)
&gt;Attach one listener to the parent, and use that for all of its children. I don't think I understood that clearly. How do you use a parent's listener for the children?
There's a lot of reasons to adopt ES6. I think this is a prime example. async function create(req, res){ const { rma_id, rma_request_date, rma_device_receipt_date, imei, defect_statement, power_status, led_status, serial_comm_status, ethernet_comm_status, usb_comm_status, visual_inspection, remarks, conclusion, rma_state, failure_category, conclusion_date, } = req.body const device = await Device.findOne({ where: { imei } }) try{ if(!device) throw new Error('404') await RmaDevice.create({ rma_id, rma_request_date, rma_device_receipt_date, imei, defect_statement, power_status, led_status, serial_comm_status, ethernet_comm_status, usb_comm_status, visual_inspection, remarks, conclusion, rma_state, failure_category, conclusion_date, }) } catch(err =&gt; { console.error(err) const code = (err.message === '404') ? 404 : 500 res.status(code).end() }) console.log('RMA logged') } Even if you're coding for a non-es6 compliant environment (browser compatibility, etc), you can transpile with babel. It makes things so much cleaner and easier to read. It's worth the effort.
It depends on what `this` references exist inside of those functions. If you have `this` references, then you either need to do `.then(x =&gt; myfunc(x))` or `this.(myfunc.bind(this))` (or whatever `this` is supposed to be)
Es6 classes are syntactic sugar. What does private do under the hood in JavaScript?
You da hero
Uhmm üíÅüèø
This covers the concept well: http://jsforallof.us/2014/09/12/event-delegation/
 Thanks a lot for the feedback! 1. I agree, it's very confusing. I think I will change them to simply getData(), editData() and removeData() 2. That's true, I hate naming things, but will try to make it more understandable. 3. They are already listed as dependencies, did I do it wrong? Seems to install correctly. ``` "dependencies": { "xmldom": "0.1.27", "jszip": "3.1.5" } ``` 4. I think it makes the code more readable if working with many libraries. ``` EXIF.getData() OFFICEPROPS.getData() ... ``` I could shorted the name though, in node you choose it yourself by ```myname=require('officeprops')``` 5. The properties object looks bad, but throughout the code I use it mostly for checking if a property is known ``` properties.hasOwnProperty(property){...} ```. Changing the hierarchy would make the code even more complex. 
What? Since the change to Polymer, Youtube got a hell lot faster for me.
In two months there will be no more new features, only support. https://blog.angular.io/stable-angularjs-and-long-term-support-7e077635ee9c
&gt; Maybe they write the backend and frontend separately and manually? For companies like Google and Facebook things like React don't really make sense. What? Facebook is built in React...
You can break up your styling into hocs onst btnStyle = Component =&gt; styled(Component)` background-color: red; `; const MyButton = btnStyle('button'); const MyButtonLookingLabel = btnStyle('label'); // combine styles with composition const sizedStyle = (width = 100, height = 100) =&gt; Component =&gt; styled( Component, )` width: ${width}px; height: ${height}px; `; const adjustableBackgroundColorStyle = Component =&gt; styled(Component)` background-color: ${props =&gt; console.log(props) || props.color}; `; // A utility function you would find in a library like Ramda or Redux... // http://ramdajs.com/docs/#compose const MyAdjustableButton = compose( adjustableBackgroundColorStyle, btnStyle, sizedStyle(400, 100), )('button'); [https://codesandbox.io/s/2vm24kzrxy](https://codesandbox.io/s/2vm24kzrxy)
They‚Äôre not. Lambdas are actually arrow functions in JS
This is not always true. If the listener being attached to multiple elements uses the same function reference, it is almost as performant as attaching a single event handler to a parent. For example: function eventHandler(event) { ... } for (const child of parent.children) { child.addEventListener(eventHandler); }
&gt; (There are also other things you probably shouldn't do, but that one is the one producing your problem) But this in't even about that. This is specifically about doing `document.body.innerHTML += ...`.
 JSON.parse(JSON.stringfy(JSON.parse(value)))
Hi there! Would you like to find a remote full-time job? We‚Äôre launching a platform that makes it easy. When you sign-up for RemoteMore, top companies interested in remote hiring will be able to find your profile and invite you for interviews. Learn more and sign-up on this URL --&gt;&gt; http://remotemore.com/candidates?utm_source=inbound&amp;utm_medium=reddit&amp;utm_campaign=first
At first, I thought this was just a tutorial in ES5 (not sure why we still write those), but then it throws in property shorthand so I'm a bit confused.
Some of your content is outside the viewport and the menu doesn't work on my phone.
I don‚Äôt see any job posts on there.
We do first business (customer) development, before launching the platform. That's the way all startups should function, in my opinion.
What does that even mean? If you want me as your customer but your product isn't up to snuff well... I'm afraid you're not getting me as your customer. I'm not trying to shit on you btw, but these questions seem important to me.
I hate to say it, but I've been thinking the same. I went ahead and just transferred my files over to Middleman, which I love dearly.
Can you use mobx instead of redux? That made react much more bearable for me when I got a new job and had to use react instead of Vue.
Is it for frontend devs only?
It's for all kinds of devs, no restrictions. :-)
when you train yourself to use === and !==, it fucking makes everything more predictable for you.
I think there's a difference between launching early and launching with a broken product. You don't seem to get this. Also, you dodged my question on what you guys did to attract companies. Why should I give my personal information to you by signing up and creating a profile? So far all you offered is a broken website and a lot of deepeties, but little substance :/
I will critique the Sequelize method ``findOne``. If ``findOne`` returned a promise that ``rejected`` with a custom error object.. say ``{reason: 'Not Found' }``... you wouldn't need have the distracting null check and throw in your first .then block. You could extend the findone method support this functionality with some code like this Devices.findOne = function(){ return Devices.findOne.apply(this, arguments).then(function(device){ if(device === null){ return Promise.reject({reason: 'Not Found'}); } }); }
I published the first version of my simple javascript framework inspired by Vue: https://www.npmjs.com/package/lucidum
It's not, it's React. In fact, Facebook created React. https://github.com/facebook/react
Sorry that you are left with that impressions. This is what I wrote earlier about how we signed up the company side: "To be more specific, we mostly did outbound sales for the company side (cold calling, cold emailing)."
I can fully sympathize with you and all I can say is, lead by example! You are right about React-Vue relationship, Vue is in my opinion a "superior" framework. I recently joined a new company and we had to choose a framework in our team. All other teams already used React and I spent one week doing comparisons, held 2 presentations and since then, one more team has joined the Vue train. We are fast, productive and our code base is super clean :)
I am wealthy and live in NYC, so I'm definitely recognizing my privilege as someone who is just incredibly not desperate for a job. However, if an interviewer even gives me negative points for not knowing the tricky rules of ==, either the company picked a bad interviewer, or I don't want to work for that company.
Thank you. :-)
It might hurt on the first load (though the cost can be mitigated by using `&lt;link rel="modulepreload"&gt;`), but it benefits users hugely in the long term. We get to invalidate the user's cache at a module-level rather than bundle-level which makes the subsequent loads much lighter and efficient - so over all, I think it's actually a win for the user both in terms of loading time and data cost.
&gt; Fwiw, even Polymer team still highly encourages bundling Not quite. The Polymer CLI does a sort of in-between thing where it only bundles modules if they are not shared between multiple other modules.
Hi, I'm a Redux maintainer. Can you clarify what you mean by "what package to use to handle interactions among actions, reducers, and the store" ?
This is pretty nice. It is sort of tricky to do plugins with webpack since it wants all modules to be known at compile time and presumably plugins are arbitrarily added after compiling a host app. The libraryTarget variable mentioned in this article seems like it could help bundle the plugin module to a globally accessible place that the host app can locate though!
Definitely, I never use == in practice, I just know you can be asked some of these as a tricky interview question.
I don't understand the title. Why should someone give closure another chance? Everyone should embrace closure to be a better JS programmer. 
Hey, I'm willing to do my best and to learn, so your reading/link list may have just become my weekend reading. It could very well be that I'm not giving React/Redux a chance, but, at first bluff, it just feels messy. I'll explain as best I can--again, from the perspective of a relative novice. So, as best I can tell, one of the engineers on my team has advocated for a source directory structure containing the following directories: - components - reducers - actions - css - utils . . . I think there's more to it, but I don't have my client's laptop handy. Anyway, he's big into functional programming and modularizing concerns into the smallest units possible, which is cool. But there seems to be a lot of boilerplate code to do basic things, and the cognitive load to understand what he's doing in any given module feels high. The other engineer likes using packages that, for all intents and purposes, bundle concerns but which, in so doing, feel magical. I don't recall the name of the particular packages he's using, but there's one that somehow combines actions, reducers, etc. all into one function that interacts with the store. This is all but diametrically opposed to how the other guy handles interactions with the store. In interacting with Vue and Vuex, things just seemed to fit into place more easily, and there seemed to be established conventions for how to accomplish things. Like computeds. React/Redux has these things call selectors, which you gain by using a plugin called reselect. But even building up a selector feels hacky compared to what Vue just *gives* you in terms of computeds. With React/Redux, it feels like attempting to accomplish any little thing invites a world of argument and boilerplate code--at least as I've observed in the debates between the two more experienced client-side engineers with whom I've been working. I'm not sure if this is coming off as petty/whiny or not. I'm just noticing that working with React just seems to outright require a great deal more effort than Vue and, on the whole, just feels sloppier/more convoluted. I especially dislike JSX; Vue's single-file components just seem cleaner and avoid the nastiness of what is ostensibly HTML interspersed with JavaScript.
I'll bite- we started with vue and migrated to react also. Off the bat vue felt more magical, automatic merging of classnames, no explicit setStates, angularjs esque templates, mixins, funky component registrations etc. A week or so after moving to react I realized I prefered the less magic react gave us. For trivial things vue was way more digestible, for complicated components though react reminded you it's all just JavaScript. And for wherever reason typing components with typescript in Vue was a pain, react was a breeze since it was using eswhatever class syntax.
Thank you!
I understand your sentiment however consider few things; * If your site loads slowly for the first time, your user might bounce off before the content even loads, or get the impression that your site is slow. Even if repeat visits are better, they are irrelevant if user won't come back. * You would want to have nice modular code that is maintainable, however this creates a very deep and broad dependency graph, which leaves modulepreload with very little time (before HTML is fully parsed) to go through this huge graph. So even that doesn't help much. * In terms of data cost, you might still lose out on benefits of dead code elimination and tree shaking. * Further, your server knows the route, and the exact assests required to serve it, so code splitting can be efficiently done at build time, which further strips down the bundle size. And you can go as deep as you want. * You can split at route level, making sure changes on one route doesn't bust cache of other one, or at UI component level, so that changes to footer of a route doesn't bust cache for the route, or you can go crazy and split at module level, which is almost same as using native modules, just that here you pay for dynamically loading them instead of browser statically fetching them before page load. So unless you're splitting at module level today, you're still better off using a bundler.
&gt; ^ ++this~~++~~ There, fixed that for you :) 
when you come across something that is new, look it up on MDN \(Mozilla Developer Network\). Just search google like "splice javascript mdn" and you'll see the best explanations.
Look, I wouldn't hire or fire you for knowing or not knowing the specifics, but I'd want you to be aware that there *are* specifics. 
Make yourself a favor and try react with mobx or mobx\-state\-tree. IMHO this will solve 80&amp;#37; of your issues. You get similar state management you're used to with vuex and you'll only need React to actually render the DOM. Mobx is even great replacement for the built in react setState. If you ever do try that instead of redux, please let us know how that went.
&gt;I'm not sure if this is coming off as petty/whiny or not. I'm just noticing that working with React just seems to outright require a great deal more effort than Vue and, on the whole, just feels sloppier/more convoluted. This does not sound petty/whiny. Redux is king of boilerplate and even I as React dev wish that it hadn't caught on so much. Many devs think that if the magnificent Dan Abramov invented it, that it's the definitive solution to state management. It's not. Don't worry about speaking up against it.
I'd like to add the other answers that a lot of the tools you see in the React/Redux paradigm are optional and are just there to provide extras \(when needed only\). React, for example, can work [without Webpack, Babel or NPM](https://medium.com/@clmyles/react-without-npm-babel-or-webpack-1e9a6049714). Those are often used since they provide a lot of nice features, but working on projects without using them is a viable option. I think a lot more tutorials should teach React this way since you get a more fundamental understanding of what you're actually doing. Redux is often criticized for "lots of boilerplate" which I personally find unreasonable. You only really need to know how to use reducers, which are simple plugin-like functions, and already you'll gain a lot in terms of state management. [This 6 min tutorial](https://www.youtube.com/watch?v=ucd5x3Ka3gw) shows how Redux can be used on its own (without React) and how it goes about managing state. The React/Redux ecosystem is filled with smaller packages that you can understand well and use independently. Obviously, when integrating packages, you'll encounter some extra code to make them work together. On the flip side, you can use as much or as little of them you want (React, for example, started as a plugin to multi-page applications).
People that still refer to it as es6
You can use Firebase.io or build something in Python.
Crazy a lot of sites still use it 
I'd suggest doing the free course Practical Javascript on watchandcode.com, it will likely help you start to make sense of all of the craziness. 
I have tried some alternatives \(glamor, css\-modules, styled\-jsx\) and have been using styled\-components in multiple projects for about a year now. Never looked back. It's probably my social media bubble and my hopes but to me it looks like it's the standard for React apps.
puns[id][message]
Okay I guess that's fair. There's a difference between "oh, I don't go anywhere near that" and "what is that?" 
&gt; But the only way to read a JSON property a.b.c.d is eq to a['b']['c']['d']
So, I'm doomed, because this https://imgur.com/a/kxWjVkO dosen't work. Even if I put '' on punNumber
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/Nzqulg8.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) 
Can we see an example of the json document you're reading? 
It's equivalent to a['b']['c']['d'] not a[b][c][d] here b, c and d an undefined variables.
Sure : &gt;{ &gt; "id1": { &gt; "message": "Faire des rimes me prend la t√™te, j'aimerais mieux faire la f√™te !" &gt; }, &gt; "id2": { &gt; "message": "Je vais demander √† mon fournisseur Allemand mon bon copain, s'il n'a pas un cendrier plein !" &gt; }, &gt; "id3": { &gt; "message": "Ce bot est d√©cevant, il n'a qu'une seule phrase enregistr√©e et c'est du vent !" &gt; } &gt;} 
It‚Äôs actually way simpler than people make it out to be. Let‚Äôs say we want to make a (really, really basic) to-do list app. We‚Äôre marking up our list as a simple unordered list like this so: &lt;ul id=‚Äòtodo‚Äô&gt; &lt;li&gt;Shower&lt;/li&gt; &lt;li&gt;Shave&lt;/li&gt; &lt;li&gt;Brush Teeth&lt;/li&gt; &lt;/ul&gt; We want the user to be able to click on an item in the list, and have that item be marked as complete. We *could* attach an event listener to each list item, like this: function markTaskComplete (e) { e.target.style.textDecoration = ‚Äòline-through‚Äô } const tasks = document.getElementByTagName(‚Äòli‚Äô) for (let i =0; i &lt; tasks.length; i++) { items[i].addEventListener(‚Äòclick‚Äô, markTaskComplete) This *will* work. But what happens when that to-do list grows to hundreds of items? This approach gets to be pretty inefficient, quickly. But it turns out that when you click on an element on a page ‚Äî any element ‚Äî what happens in the browser is that target of the click tells it parent that it got clicked. And the parent tells *its* parent, and so on. All the way up the DOM. This is the way that almost every event that occurs in the browser gets handled, whether we‚Äôve instructed any element to listen for events or not. What that means for us is that we don‚Äôt have to attach an event listener to every DOM node that we care about. We can just attach an listener to a container element, and do all of our event handling in one place. Here is how it would look, in our example: function markTaskComplete (e) { e.target.style.textDecoration = ‚Äòline-through‚Äô } const todo = getElementById(‚Äòtodo‚Äô) todo.addEventListener(‚Äòclick‚Äô, markTaskComplete) All we‚Äôre doing differently here is moving one node up the DOM tree to our todo list container and attaching a listener there, instead of attaching a listener to each individual todo task. Notice that our `markTaskComplete` function remains *exactly the same*. That‚Äôs because browser events always (almost always, anyway) ‚Äúbubble up‚Äù the DOM tree, unless we explicitly instruct them to stop propagating. We don‚Äôt have to tell the parent to be on the lookout for events happening to its child, we get that for free. And `e.target` always refers to the *target* of an *event*. In our case, that‚Äôs going to be whichever task our user just clicked on in our list. We can treat that reference just like we would any other DOM object in JavaScript. This simple fact means that rather than create an event listener for every node that we care about, we can pretty simply create a single event listener that handles clicks for our entire application. Not only does this result in cleaner code, but it gives us a lot more flexibility and it can actually have a pretty big impact on the responsiveness of larger apps.
&gt; synthetic sugar
Put the random number and +1 in parentheses, so `"id" + (Math.floor(Math.random * 3) + 1)`
I think what you are not liking in the React/Redux ecosystem might be Redux.
ahah, fixed :\-\)
"How to write a frontend JavaScript plugin using ES6 + SASS + Webpack A short guide to develop DOM dependent frontend plugins in plain JavaScript (VanillaJS) using ES6 + SASS and bundling them using Webpack" I understand that these individual words are English, but it feels like they were selected and placed entirely at random from a dictionary of words related to Javascript. 
Use object[property] instead of object.property
That wouldn‚Äôt be a problem if you attached your listener to the root document node, which is a good idea.
You should log the id you're generating and make sure that exists. Because according to the json you posted in my comment this search should work s
What is a "JavaScript plugin". Can I add a new command to JavaScript?
did you JSON.parse() the json string first?
Get the pun number first: const punNum = // your random number generator Create the id: const punId = `id${punNum}` // pay attention to the type of quotation marks. Then return: return puns['id']['message']; // et voil√°! 
OP: "Everyone got excited getting into a flame war before even double checking :)"? How about you checking first next time?
3 years is a lifetime in web. We'll all probably be coding in DHTML again by then.
If you‚Äôre not trying to learn a whole new language than why not use Python for your server side code? There are plenty of Python frameworks out there to speed you on your way including Flask and Django. Alternatively, you can use Nodejs to run server side JavaScript. I‚Äôd suggest Express as a starting framework.
That's irrelevant. You're the one struggling with something that is praised for it's simplicity and accessibility to people just starting out. I mearly made suggestions based on things you claimed to already know, but not well enough to have heard about Django or how to use SimpleHTTPServer.
Sure you have. That's why you're asking stupid questions and struggling with PHP.
React fan boys
It‚Äôs ok mate...you don‚Äôt have the story.
I've used both, I'm just making this co.ment to remind me to come back to this thread.
Lol ok. I'm not sure how much there is to tell beyond struggling with the basics in the face of thousands of tutorials written for the computer illiterate. But ok. Whatever makes you feel better.
 return document.getElementById(id.value).value;
Use google and stackoverflow whenever you encounter something you don't know. The answers are out there you just have to look. 
Thanks for your kind response. Makes me feel much better. Been sitting at my desk since morning and not gettibg much done, I had started feeling more like a loser.
only time i use webpack is for front\-end. never on the server side and certainly not for a module unless its intended for the front\-end only.
Is the interface heavily inspired by Vue?
Oops yes. Forget to mention that in post. Is that a bad thing?
If you're not concerned with legitimate persistence and your just trying to play around you could look into `localStorage`
No. The question will of coarse be what is the advantage of this over Vue? Or is this meant more as ‚Äúthis is my try at this / I‚Äôm learning ‚Äú?
Great question. The keyword is in the title. It was meant to be a "simple" front-end framework for some basic projects or even mockups perhaps. This surely is not anything close to the power of Vue but it does a decent amount of stuff to the point where you can create some decent applications that can still be lightweight and quick to make. Add in another framework like axios or socket.io or something and you could be making a conditionally rendered stock app or a chat app or something very nicely.
I really appreciate modern front-end right now but this is really it. Your reaction to this title is my reaction when I look at my projects. It's just *so much shit*. Some times it seems like my build has more code than my program. 
you can do it with css: \`\`body { height: 100vh; }\`
Unless you've put an id attribute on the body tag, getElementById won't do much for you.
Use "document. body"
What the fuck is a "javascript plugin?" 
The reason you're having this issue is because `getElementById` needs an `id` in order to return an element. You can use `document.body` instead. However, what you're trying to achieve is very easy to do with 1 line of CSS: body{ width: calc(0.75 * 100vw); }
Not really, I kind of just learned on my own. The rule is that no file should be bigger than 100-200 lines. Modules should not have inter dependencies or tight coupling. It should be like a tree. 10 files make 1 folder. This folder exports a few public methods and has no dependencies. then 10 folders makes 1 file, which also exports a few public methods, and so one. So you have a tree of 10 files inside 10 files inside 10 files. The index file should of a module should most of the time only be imports and exports, no code at all. This is infinitely scalable, 10 files in 1 folder, 10 folders in 1 folder, etc, each folder having 0 outside dependencies. then when you build your app, your outermost modules will need to share state and dependencies. That's fine. As long as you always refactor so that your nested modules have no dependencies. and by dependencies I don't mean node modules, no modules are fine to put anywhere.
It's funny that people are so opinionated about these kinds of things. I'm not a really a front-end developer, but I do have to interact with modern SPA in my day-to-day, and wrote a lot of Angular 1.5 at one point. I cannot for the life of me understand why someone would prefer Vue for anything other than prototyping. Maybe it's because people never had to maintain ball of mud SPA code, but Vue feels waaaay too much to me like Angular 1.5 to not run away screaming (even if it's technically implemented in terms of one way data flow. or whatever). To be fair, Mobx feels a bit like this to me as well. Basically, I think magic is evil, and people who aren't afraid of magic just haven't gotten burned yet. Of course, with infinite discipline, anything becomes tractable. Perhaps I just haven't been lucky enough to work on teams with extreme levels of discipline when it comes to foot-gun programming in dynamic languages.
Thank you! I‚Äôve never worked with dynamic CSS like that. 
Thanks a lot for the reply, that all sounds way too much for the smallish projects I've work on. I did take a look at my code and move stuff to other files that made sense, and refactored stuff in a way that made the modules make sense, so I think I'm starting to get it. I have a hard time conceptualizing things until I run into problems that the solution solves, if that makes sense. 
fuck yeah. 0xproject is also a js based project.
It was poorly worded, for sure. But IE11 still barely supports ES6 and it sadly still has a good chunk of market share, especially corporate environments who may even be further (farther?) behind.
Async/await _is_ promises. You have to await a promise, and async functions implicitly return a promise.
I‚Äôve used both and just went with Vue on a major website overhaul and admin panel. It has been a breeze creating components, so much so that other devs on the project told me that they are stealing my Vue code to learn it. I‚Äôve been knocking shit out so fast they thought I was buying code somewhere. I think the hardest part was getting my Webpack config up and running. Once that was in place I never even thought about React again.
Ehm, correct me if in wrong, but why is the calculation needed? Why not just 75vw?
don't babel support async iterator already? users = getUsersIterator(token); for await (let user of users) { // do something }
Last month I created my own Front-end starterkit based on Webpack 4.8, NPM, ES6 (Babel), Sass and Hot Reloading: https://github.com/jonathanlinat/yet-another-and-really-basic-webpack-es6-starterkit
That design is horrible, and you would do well to search for good designs and emulate one of them if you don't have the design skills yourself.
You're right, for some reason when I read "px" in OPs post it made me initially write `calc(100vw - 75px)`, but when I realized that's not what they meant, I adjusted the formula without just doing the obvious: `75vw` Thanks, haha!
It's probably homework/practice if he's asking simple questions like that. I'd say it's not bad if that's the case, just horrible colors.
Use Angular and (after a short sharp learning curve) you'll get the benefits of both. Im in the EU but there is massive demand of Angular and Ionic devs (far bigger than for react at least in my part).
I've used both Vue+Vuex and React+Redux. I honestly think that Vue is a revolution in terms of development experience and that you can produce really fast using it. I have a personal project that uses Vue. But there's one thing that I really didn't like, which are forms create/edit where you use v-model and Vuex for storing data of your form. I couldn't find an established way to do it, Vue was whining about errors, Vuex also was in the middle, official documentation of both libraries don't talk about it. Because of that, where my client uses lot of forms inside their app, I didn't suggest Vue. Even though the all Vue concept is great and I love it, I can't go to a client and selling this when there's no established way to make forms (couldn't find any on the internet... )
Yeah. I'd definitely want you to be aware of why === is probably better than ==, then I might ask for examples of why == is bad. People who have worked on code where they've fixed an == bug will have that etched into their mind, but I forget all the specific rules, it's not something I hit frequently.
please give this a try https://github.com/hoangvn2404/vuex-simple-form, I pesonally find it very enjoyable working with Vue form
I usually use [https://github.com/insin/nwb](https://github.com/insin/nwb) which is super cool
One thing that is sort of weird about using react vs other frameworks is that it isn't even really a framework, it's more like a polyfill for webcomponents
IE11 market share is still 4% in the Netherlands. And that 4% happens to be a major part of large rich companies that might have some use for our product. No way we're not supporting that. Thank heavens for Babel, though it's a shame for CSS.
It exists, but for some reason, the number is between 01 and 13, not 1 and 3.
I get NaN with that
What is the environment? Can you elaborate?
Codewars is great .
JavaScriptCore in iOS. It execute vanilla javascript. For example let's say I want to use the moment node module. I want to be able to access that library with the variable `moment`.
Oh my god, it actually works ! Thanks ! But cloud you explain what ‚Äòid${punNum}‚Äô does ? Or, a link that can explain it ? I've never saw this before.
It's a string litteral. It does the same thing as "id" + punNumber
But why this one works, and not "id" + punNumber ?
webpack doesn't put all the code in the node_modules into a single JS file, it still references the files from node_modules. i am looking for something closer to browserify but i need to be able to access the variables inside (i don't have the window object)
I've never used mobx - how does it differ from redux?
Yes it does? How do you think your users‚Äô browser gets the node modules off your hard disk? When you write the code your reference node modules, but when you bundle it the code from node modules is put into the bundle and there is no longer any external dependency.
I'm not sure what your JSON object looks like so hard to tell. Tbh it sounds like you should learn how to debug your application, either by using breakpoints or console.log variables to see what result are from your algorithms
Sounds like what you want is a global variable. I did quick search and you can do this with webpage using the webpack ProvidePlugin. If give a link,but I'm on my tablet atm.
&gt;`ExceptionMessage: 'Index was outside the bounds of the array.'` Handy error when you can't see an array :p I'm sure the issue is calculating the HMAC wrong. Looking at the example, you should be doing something like this: const date = "05/17/2018 11:43:11.01z"; const msg = `{date} {publickey} SHA1` let signature = crypto.createHmac('sha1', msg).update(publicKey).digest('hex') Your HMAC ends up being: base64(`{publickey}:{signature`
It definitely does. Unless you‚Äôre doing something in your webpack config to extract them into a seperate bundle. If you want to verify that they‚Äôre there, you can check out webpack-bundle-analyzer, which will let you see all the modules in the bundle and how much space they take up. 
You should give the concept of giving closure another chance another chance man 
is this how i can access libraries and methods that are in the bundle outside of the bundle?
Use `const` instead of `let` when you aren't going to reassign variables. Also consider using a linter, just for the sake of enforcing a consistent style. The big constructor(options) { if (typeof(options) === 'undefined') options = {}; if (typeof(options.delay) === 'undefined') options.delay = .5; // ... 15 lines block is pretty bad. In a case like this, you can use default arguments: constructor(options = {}) { but it's not needed if you use a default object literal instead and *spread*: constructor(optionsParam) { const defaultOptions = { delay: 0.5, // Delay before display (in seconds) autoDismiss: 0, // Delay till automatic dismiss (0 = Never, in seconds) interactDismiss: true, // Toggle swipe/drag to dismiss sounds: false, // Play sounds for notification zIndex: 5000, // The css z-index value of the notification imageSrc: null, // Link of the icon to display (null to hide icon) imageName: "", // Alt/Title text of the icon imageLink: null, // Link for icon click (null for no link, '#' for dismiss) title: "macOSNotifJS", // Main Notif Title subtitle: "Default notification text", // Main Notif Sub Title mainLink: null, // Link for the main text body (null for no link, '#' for dismiss) btn1Text: "Close", // Text for Button 1 (null to hide all buttons) btn1Link: null, // Link for Button 1 (null or '#' for dismiss only) btn2Text: "Go", // Text for Button 2 (null to hide second button) btn2Link: null, // Link for Button 2 (null or '#' for dismiss only) }; this.options = { ...defaultOptions, ...optionsParam }; 182: document.getElementsByTagName("head")[0].appendChild(css); Don't use a method that returns a collection and then select the first element in the collection - just use `querySelector`, or, in this case, `document.head`. 205: let keys = Object.keys(__macOSNotifJS_notifs).map(x =&gt; parseInt(x)); return Math.max.apply(null, keys) + 1 How about const keys = Object.keys(__macOSNotifJS_notifs).map(Number); return Math.max(...keys) + 1; 220 static async __generateTemplate() { // ... return [template, id]; Just my opinion, but when returning something from a function, unless it's *obvious* how the data is organized on reading the function name (like `getCoordinates` =&gt; `[lat, lng]`), it might be a bit better to use an object: return { template, id }; That way, it's more clear to the consumer of the function. 223 let element = document.getElementById("macOSNotifJS_Audio"); if (element) return element; // Create new audio let audio = document.createElement("audio"); You might consider saving a reference to the element once it's created rather than trying to select it every time (assuming the element won't go away after it's created) 252 for (const key in __macOSNotifJS_notifs) { if (!__macOSNotifJS_notifs.hasOwnProperty(key)) continue; If you need to check `hasOwnProperty`, don't use `for..in`. Use `Object.keys` instead. But you don't actually care about the keys, so use `Object.values` instead: Object.values(__macOSNotifJS_notifs).forEach( value =&gt; value.dismiss() ); Same for 258 284: let elmsAbove = 0; for (const key in __macOSNotifJS_notifs) { if (!__macOSNotifJS_notifs.hasOwnProperty(key)) continue; if (parseInt(key) &gt; this.id &amp;&amp; !__macOSNotifJS_notifs[key].dismissing) elmsAbove++; } Better to use array methods to avoid reassignment and `hasOwnProperty`: const elmsAbove = Object.entries(__macOSNotifJS_notifs) .reduce((elmsAboveSoFar, [key, { dismissing }]) =&gt; ( elmsAboveSoFar + Number(Number(key) &gt; this.id &amp;&amp; dismissing) ), 0); 326-334 if (window[fullId + "_AutoDismiss"]) { clearTimeout(window[fullId + "_AutoDismiss"]); delete window[fullId + "_AutoDismiss"]; } Don't pollute the `window` - store data in an object instead. 343 Use default arguments instead 373-396 You're repeating yourself a lot. Better to select elements only *once*. You might consider making a function that takes the `fullId` and gives you an object with the elements, for example: const { Image, Img, Title, Subtitle, Text, /* ... */ } = getElements(fullId); 381 and below document.getElementById(fullId + "_Title").innerHTML = this.options.title; // other assignments to innerHTML Only use `innerHTML` when you're deliberately using or inserting HTML markup (which can have security and encoding problems). When you're setting or retrieving text values, use `textContent` instead. 446 async function macOSNotif(options) { return await (new macOSNotifJS(options)).run() } No point in `await`ing something on a one-line function - just return the promise itself. function macOSNotif(options) { return (new macOSNotifJS(options)).run() }
No it is encapsulated in its own scope to avoid clashes but you can code it in a way to store global functions in windows object and later on call that on any normal Javascript code window.somethingfromwebpack = function() {} then window.somethingfromwebpack() 
AFAIK the implementation of react (jsx, css-in-js, and vdom) is incompatible with the official webcomponents api so you should look at it more as a competing standard
Take a look at pkg: https://github.com/zeit/pkg "This command line interface enables you to package your Node.js project into an executable that can be run even on devices without Node.js installed." 
Comparing the source code between Google Inbox and Google News you can find a lot of similarities and according to this Gmail [blog post](https://gmail.googleblog.com/2014/11/going-under-hood-of-inbox.html) Inbox is written using GWT. &gt; It is odd that Google is super open source about some frontend technologies like Angular, AngularDart, Polymer etc, and super secretive about the framework they use for things like Gmail, Google+ and News. Not really secretive, they just promote it less than Angular or Polymer for example. GWT docs, section [Real world projects](http://www.gwtproject.org/examples.html#real-world-projects) lists Inbox along with Spreadsheets and WebFonts. The list is definitely not up-to-date though and take it with a grain of salt. WebFonts for example is an AngularJs 1.6.4 app probably bundled with some Google Closure Library magic, but GWT is nowhere to be found.
Similar story in Germany. Although IE11 is on the decline, most enterprise companies rely on it as their main browser. And those are the ones with big budget fronted projects...
i looked into it, couldn't figure out how to use it
yea i don't have a window object though in this context
But you just said your gonna run on the browser so you do have it lol
just used it, it is not what i am looking for
With a duplicated list that long, I think destructuring like that is more messy than useful.
Then find any object in whatever environment your running on and inject to that 
I changed two lines below and it now works. You were console.log the wrong name and you don't need id.value, but the value should be on the outside. document.getElementById('submitForm').addEventListener('click', submitForm); function submitForm(e){ e.preventDefault(); const getName = getInputValue('name'); const getPhone = getInputValue('phone'); const getEmail = getInputValue('email'); const getMessage = getInputValue('message'); console.log(getPhone); // I changed this. } function getInputValue(id){ return document.getElementById(id).value; // I changed this }
Aye, can't wait for the day on which all of them have switched to Edge (and Safari switches to a better release schedule)
I gave some advice, didn't I? It wasn't meant as a insult.
Does this work? http://www.thesmythgroup.com/in-development/how-to-use-npm-packages-in-native-ios-apps/
Funny, my life is much better since I ripped out most of the Redux from an application I inherited. Every damn form edit as an action, derived state all over in a store, business logic forced into reducers. I miss being able to save and load state but the drawbacks are too big. Glad you can write good apps in Redux, I've just never seen anyone able to do it.
I don't know WebStorm, but JSLint has serious problems staying up-to-date with accepted modern syntax; consider ESLint instead.
Hey, I suggest you to do your best to get out of manual testing or learn automated testing :\) good luck. I am sorry I can't say much about D3, never worked on it.
First a note on politics: We'd all like to think lib/fw decisions come down to what is best for the product. I've come to observe that many times a lib/fw that has been chosen in the workplace can boil down to personal comfort/bias, ultimately stemming from relying on what one already knows. Learning new things takes time and is not a trivial investment. Without a very clear outline as to why a switch should be made, one isn't likely to. Even then its quite difficult. on Vue: Getting started with Vue was a breeze in comparison to Angular or React. Documentation was pretty clear in illustrating how to use it as designed. Loved the .vue file structure, segmenting portions into familiar HTML elements. Simple bindings and state changes were quite easy to manage out of the box. I could prototype a functional component very quickly! Having certain properties mix-in by default felt very natural when wanting to modify component styling outside of its template file. But there was some weirdness about it that felt a bit off. Authoring new Vue components fall into an expected structure for them to work properly by designating specific properties as objects (methods, events, computed, .etc), and how Vue binds 'this' context to those methods. I was never a fan of using directives as attributes to command logic within a template, and Vue is no exception. While there is some consistency here stemming from its Angular roots, new-comers to both have to learn this additional capability before any sense can be made of more complex controlling logic within a template. Built-in animations within Vue seemed like a good idea, but I've found it to be more frustrating attempting to understand exactly how Vue handles this under the hood. 2.0 adds additional customization and triggers which is nice. But for more complex animation states it was difficult to navigate how to control this, and requires (once again) an investment of time to utilize properly. The 'magic' seems to fade in conditions where you realize that shallow compares on objects and arrays means you are likely to replace them entirely with new object/array states. Coupling State management with Vue transitions is where Vue started to lose me. I would still use Vue again in the future, certainly for smaller projects and things I wanted to prototype or get off the ground quickly. It certainly has its quirks though, and I would most definitely be hesitant to proclaim its superiority over React in its current state of maturity.
What‚Äôs with all this amateur shit? Remember that blog yesterday about using an object for arguments? üòÇ
Rollup might be a better choice for bundling plugins. Also you omit the most difficult part ‚Äî how to allow others to theme your widget.
With vue-cli 3 it is now, "what webpack config?" For me.
In general this is what a bundler does. Might be more straightforward to just bundle everything - your app and the npm libs - into a single bundle. Browserify might be the easiest.
[template strings ](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) 
Yes
I love react because it feels like working on a mechanical watch. Everything that happens is set off by something else in a specific spot. All react applications are just functions calling functions and it shows. It allows me to build a lot of different sized gears (components) then snap them together in various ways to accomplish a whole host of things. And if a single component is getting too big, it's trivial to break it up to smaller components. By making everything explicit and having no magical updating that you can't see, it forces you to structure components in ways that makes it easy to break apart or combine with other components. I came from angular and Vue reminds me of it too much. We're you're putting your code into the framework and letting the framework handle things for you. To me, react feels like a tiny library and I'm constructing the rest exactly how I want it. 
It depends on the module that you want to use and the platform you want to run it on. Node has some apis that don't exist on other platforms. If the module is just pure JavaScript without using any of the node specific apis then you probably can.
`for (i...)` -&gt; As you're not declaring `i` in any of the loops. `i` is leaking to the global scope and so it is being _shared_ in both loops (the final loop and the loop in `questionDisplayed`. Note that this type of question is better placed as r/LearnJavascript
You need to change everywhere you see `for(i = 0;`, to `for(var i = 0;`or `for(let i = 0;`. Not using a variable declaration keyword when using a variable makes JS mark it as a global variable that can be accessed and modified by everything. When you are in the question loop, you set `i = 0` , then execute the display function, which also resets the *same* `i` to zero, but this time it increments it to the length of the answers, and when it finishes the answer loop, `i` is greater than the length of the questions so it stops.
Your two loops in this program are using the same variable i. * On the first iteration of your questions loop, you call the questionDisplayed method of the first question. * The loop in questionDisplayed will start at 0 and print out each of the answers, ending at i === 4. * We exit the function and want to enter the second iteration of the questions loop, but we can't because i is now 4, which is greater than questions.length, so the loop terminates. Always declare your variables in the scope where you expect to use them. It appears you are simply assigning to variables but not declaring them, resulting in each variable being instantiated at the global scope. I suspect your bug will be fixed if you declare the variable i in questionDisplayed like so: Question.prototype.questionDisplayed = function() { var i; console.log(this.question); for(i = 0; i &lt; this.answers.length; i++) { console.log(this.answers[i]); } };
As an aside ‚Äì if you put the following line at the beginning of your file, you get error messages for this kind of thing: 'use strict'; That switches on strict mode.
Space out your photos perfectly At this stage, you have a layout in mind. You know what you want your theme to look like. And you have a filter. Perfect! Your theme is starting to look really good!Now, you need to make it flow. Why do some Instagram accounts look SO good? They look SO good because they know which photos look nice next to each other. Let me explain: Unless you have a coffee Instagram account , don‚Äôt put all your coffee photos next to each other.Instead, space them out. Because you space out your photos, your overall feed will look much more balanced. That‚Äôs what you want to achieve: balance. It will be easier for our human eyes to scan through your feed and appreciate your content. If you just put one coffee mug after the other ‚Äì it might get boring. I went into details about this topic: How to Order / Color Coordinate Instagram Photos How to Arrange Instagram Photos . PS: if you are a coffee shop or a small business creating unique mugs, then that will be your monotheme. But remember, you don‚Äôt have to only share a photo of your mugs and coffee all the time. Be creative with your photos. I will make a separate article about this soon. Here are more tips to improve your [I**nstagram accounts**](https://app.bratix.com/)**.**
Hey thanks for the help. I figured it was a simple issue like that. I looked at it for maybe hour. Thanks a million for the tips! I'll follow that community.
DUUUUUUDE! I thought I made that up when I realized I didn't have to do `bind(console)` anymore. So glad to hear that we used to have to do that and that I'm not just crazy.
To clarify, I need to alter the colors of the strings that belong to output, select1.value and select2.value 
Yes it worked perfectly. I just had one other issue with an undefined iteration due to using \&lt;= instead of \&lt; in the global loop. Thanks for that explanation. I didn't know they roamed around like that. I know 'best practice is to always declare inside loops but have a tendency to forget I guess. I can actually see why the variables are shared like that due to loops not having their own scope. Thanks a bunch though.
Nice eye you have there. You are right about the second part too. I was trying to do something differently and forgot to change it back to '\&lt;'.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), ‚Äúnobody‚Äù starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
What is this and what is it supposed to do?
Interesting, definitely going to look at some of those resources. Problem with these kinds of programs is that I can never think of an application worth making.
It's just a little library, which gives you Haskell\-style variants, tuples, lazy evaluation, and IO in JavaScript.
This.
Did you know that arrays already fulfill the concept of tuples for JavaScript? So I can do ``` const arr = [1, 2, 3]; const func = (a, b, c) =&gt; a + b + c; const d = func(...arr); // d = 6 ``` JavaScript also has has lazy evaluation getters and setter. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get
Although arrays can be used as tuples, they don't provide the "`unpack()`."Sure, "`((a,b,c) =&gt; ...)(...tup)`" works, but it isn't as clear. As for lazy getters, I did not know about them, thank you :\)
I actually just got what you mean by lazy; getters and setters are better described as computed properties, rather than lazy properties.
That just couldn't be further from the truth.
"like" a polyfill
In that case, you'd probably prefer the rewrite that includes lodash: import { pick } from 'lodash' async function create(req, res){ const { imei } = req.body const device = await Device.findOne({ where: { imei } }) try{ if(!device) throw new Error('404') await RmaDevice.create(pick(req.body, [ 'rma_id', 'rma_request_date', 'rma_device_receipt_date', 'imei', 'defect_statement', 'power_status', 'led_status', 'serial_comm_status', 'ethernet_comm_status', 'usb_comm_status', 'visual_inspection', 'remarks', 'conclusion', 'rma_state', 'failure_category', 'conclusion_date', ]) } catch(err) { console.error(err) const code = (err.message === '404') ? 404 : 500 res.status(code).end() }) console.log('RMA logged') } You could "technically" pass the request body to the RmaDevice#create method directly. I say "technically" because it would work as intended, but introduce a new attack vector for a bad actor. You don't know what additional arguments might be in the request body and you don't know how they might affect code further down the chain. By explicitly defining which parameters to pass (using pick in this instance), you hamper the ability for someone to execute malicious code.
$LISK
I find trying to penetrate the jargon to get a high-level understanding of this concept is bewilderingly esoteric. As far as I can gather, there's the so-called Dapps or DApps or DAPPS, which are apps that are open-source, running autonomously on a distributed backend (not sure where exactly), and are controlled by users. It gets murkier from there, when there's terms like smart contracts, tokens and token funding and exchange or distribution, wallets, incentives, consensus, etc. The examples of Nebulas Dapps all seem to be about exchanging cryptocurrencies, and require installing a Chrome extension wallet from a shady looking source.
That's just a silly amount of money to be giving away once a week. Sure looks like the dot com bubble all over again... But this time it's crypto.
You can, however, do let [a,b,c] = tup;
I'm fairly sure that you'd just want to style it in the css.
But I‚Äôm needing to set each of the variables that make up the output variable to separate colors 
Have some tact when giving criticism if you want to be helpful. Your first sentence really starts off the exchange in an insulting manner.
Are pyramid schemes allowed to market on this subreddit?
* Consider `fantasy-land` compliance for fp library interop. * `IO.prototype.bind` can be confusing because of `Function.prototype.bind`. JS fp devs tend to use either `chain` or `flatMap` for this reason. * Thunks have first-class support in JS (by virtue of the fact that functions are values), so there's not much need for a wrapper. What your example shows can be accomplished with a simple `memoize` function. * `TailRecursive.tailcall` is leaking the `arguments` object, which negatively impacts performance. Use `tailcall(...args)` instead. * Again, `TailRecursive` could be accomplished with simple `trampoline` wrappers. In JS, you can also offload work into a `setTimeout` loop and resolve the value with a `Promise`, which might be a better idea when UI responsiveness is a concern. * IMO `new` is generally incompatible with fp style. Much better would be to have factory methods (or make the elements themselves functions). * Along similar lines, using `this` is generally bad for fp style since it breaks when using function composition and delegation. 
You saved me a click. I prefer the term computed property 
I think you've missed some major reasons people like React (or Inferno, Preact, Mithril, YoYo, Hyper, or any other VDOM lib honestly) and Redux 1. Many people, myself included, like to write in a stateless and functional style. React + Redux enables this quite well. You can do the same with Vuex but there's always that easy escape hatch of allowing state to live inside your view. And when presented with an escape hatch, people will take it- even if there's nothing to hide from. 2. All the benefits that come with the above. Determinism, predictability, replayability. The idea that QA can see a bug, export `state.json`, send the file to you and you have 100% reproducability of their error and can rewind/playback. It's a game-changer. 3. MVVM has some major pitfalls. In Vue you basically can pass viewModels to child components. It's often considered bad practice to let a function mutate arguments passed to it- yet this is the main driver behind this convenience in Vue. It is good for fast prototyping, but MVVM over time tends to result in some very twisted up applications as anything can mutate anything.
&gt; I especially dislike JSX; Vue's single-file components just seem cleaner and avoid the nastiness of what is ostensibly HTML interspersed with JavaScript. Don't conflate JSX with React. You can write React without JSX as easily as you can write Vue with JSX. 
&gt; interview I'd personally definitely absolutely immediately get the fuck out if the interviewer tells me that I can't. If he as an interviewer can't comprehend the simplicity, predictability and maintainability of using `!==` and `===` as the simplest answer to this question, I'd rather go to the McDonalds next door and flip patties for free just to maintain my morale.
There's some really interesting points in these comments! I just wanted to say that I'm sort if in the same boat as you. I have a big project coming up where I'm basically free to chose what to use for the frontend and while I feel so much more productive with Vue I'm afraid that the rest of our industry is so heavily invested in react that it would be a smarter career move to chose react, as well as making it easier to find developer for the project later on. Vue's developer experience is really good, and the fact that regular HTML-markup just works with it makes it trivial for inexperienced developers to use it. I also honestly don't think JSX is very readable once the complexity reaches a certain point (though that can be just as true for a vue-template)
Hi /u/tim246, For javascript help, please visit /r/LearnJavascript. Thank you!
Damn thanks for the news!
Duly noted.
It does support constants, according to [caniuse.com](https://caniuse.com/#search=ES6)
Maybe worth using the legal form - "Content Analyst Ltd." or whatever? Always try to avoid ambiguity. 
God, is it really that bad? I suck at code. I didn't even know it was that horrific? Why is it so horrible?
See the articles and videos listed in the [Redux vs MobX Comparisons](https://github.com/markerikson/react-redux-links/blob/master/mobx-tutorials.md#mobx-and-redux-comparisons) section of my links list.
They raised $60m from private investors in 2017 so have quite a bit of money to work with and are targeting developers. The founder of nebulas actually wrote a good piece of the crypto bubble: https://medium.com/nebulasio/crypto-bubble-2018-things-we-can-do-before-it-bursts-3a0d86fcd117
&gt;Or might that be the issue, it should be an array of objects? That is definitely the issue. Try changing it to be `subCatIds: [{"free":2},{"computers":3},{"instruments":4}]` or similar. Do also note that every field name should be quoted, e. g. `"cName": "Buying and Selling", "cId": 1, "pId": null` etc.
All the field names are double quoted. I thought the 'escaping' the quotes were causing additional issues, but fortunately, it works as it should. I will see if I can 'manually' add square brackets...
impressive!!
Relax! Choose a fun project that you would like to do, write it down as a formal specification to yourself and get started. This was for me when I started to go from academic knowledge to really 'getting it' and being creative. Do you like any particular old school game like space invaders? Write your own version! Canvas is not that hard to use for games. You will soon come across problems like how to organise your code... keep on re-writing it to make it better and better until you are really proud of what you made. Have fun, **focus on creating things that are just a bit too hard for your current skill level**.
Wut
Anyone else having trouble when trying to create an account? When I try to sign-up and fill my data I keep getting an alert message saying "err message, please try again." Op can you help?
While you're technically correct, writing React without JSX is pretty clunky, and you'll almost never find a meaningful codebase or tutorial that does. So I think it's fair to group them together. That said I don't understand why people don't like JSX. It's a simple abstraction, doesn't do anything magical, and makes code massively more readable.
Agreed on all accounts. That said, if you don't want to use JSX, there _are_ viable alternatives to writing raw `React.createElement()` calls. There's util functions such as [`react-hyperscript-helpers`](https://github.com/jador/react-hyperscript-helpers), and templating options like [`react-templates`](https://github.com/wix/react-templates) and [`t7`](https://github.com/trueadm/t7). They're certainly niche compared to JSX usage, but they are legitimate options if someone truly doesn't want to use JSX.
No. Nodejs builtin modules won't be available, some globals won't be there (especially `require`) and event if the environment support commonjs, it might not support Nodejs loading algorithm. You need to bundle it using rollup, webpack or jspm. 
It's a driving course, and well, wanted to know if anyone here knows how to skip the "time remaining" counter to just go to the next page since it uses javascript. The source code is linked above as well.
What you want to look into is either 1\) transactions or 2\) websockets to transmit data live and then have an "editing" stage that the individual events can be marked as and subsequently rendered as.
I dunno how you expected people to guess that from your title... Anyway, the variable called `m_34_mozzeltoff_societyER3rpex` defines the time. Look for these lines: ``` if (pe_45_fottenberg_p) { var m_34_mozzeltoff_societyER3rpex = 1200 - pe_45_fottenberg_p; } else { var m_34_mozzeltoff_societyER3rpex = 1200; } ``` Replace `1200` is the number of seconds, replace it with whatever you want.
Yeah, no dice. Is there anything we could try in Console?
Dude, thank you so much.
Well, the original example on github doesn't use y either.
The reason I am angling towards something non-Perl for the back-end, is that it is harder to find hosting services with decent support for Perl on their platforms (unless I want to take on the mantle of admin'ing the system myself). I've actually prototyped about 40-50% of the back-end using Perl and Mojolicious, but like I said... unless I want to manage my own VPS or wrap most/all of it in Docker containers, I have to consider a different platform. &gt; PS. PERL Sucks, get you some Python :P Yeah yeah yeah... I know enough Python to fail in fairly interesting ways, but that's about it.
Come to the slack channel #developers - there should be a link on r/nebulas or nebulas.io
Here's a sneak peek of /r/nebulas using the [top posts](https://np.reddit.com/r/nebulas/top/?sort=top&amp;t=year) of the year! \#1: [Nebulas Technical White Paper Review January 20, 2018](https://np.reddit.com/r/nebulas/comments/7rwllx/nebulas_technical_white_paper_review_january_20/) \#2: [Nebulas SF HQ Grand Opening &amp; Mainnet Launch Celebration](https://medium.com/nebulasio/nebulas-sf-hq-grand-opening-mainnet-launch-celebration-a9d0027763a5) | [14 comments](https://np.reddit.com/r/nebulas/comments/852030/nebulas_sf_hq_grand_opening_mainnet_launch/) \#3: [First Live Reddit AMA with Nebulas Founder Hitters Xu](https://np.reddit.com/r/nebulas/comments/7zci43/first_live_reddit_ama_with_nebulas_founder/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
- https://github.com/enaqx/awesome-react - https://github.com/sindresorhus/awesome-nodejs - etc.
[removed]
Giphy is pretty fun and a pretty well documented API.
Interesting, although I don't think an empty result should be considered an exception. Exceptions should be reserved for irrecoverable errors, like the connection to the SQL server was terminated whilst executing the query, or the query has a syntax error etc.
I would probably write it like: ``` const WHITE_LIST_KEYS = [ 'rma_id', 'rma_request_date', 'rma_device_receipt_date', 'imei', 'defect_statement', 'power_status', 'led_status', 'serial_comm_status', 'ethernet_comm_status', 'usb_comm_status', 'visual_inspection', 'remarks', 'conclusion', 'rma_state', 'failure_category', 'conclusion_date', ]; async function processRmaRequest(req, res) { const device = await Device.findOne({ where: { imei: req.body.imei }}); if (!device) { res.status(404).end(); return; } const rmaDevice = WHITE_LIST_KEYS.reduce((accum, key) =&gt; { accum[key] = req.body[key]; return accum; }, {}); try { RmaDevice.create(rmaDevice); console.log('RMA logged'); } catch (err) { console.error(err); res.status(500).end(); } } ```
What about news? this is a good api. [https://newsapi.org](https://newsapi.org)
it's possible to implement this functionality many different ways. This definitely brings a more functional approach to JavaScript but native methods can also be used to perform basic functional programming tasks in JavaScript.
I agree, this does seem possible.
This actually sounds awesome! I'm constantly in need of a good weather radar that goes beyond my immediate area. It will be awesome to build one to my own personal needs. 
There are two approaches I take when deciding what projects to build for fun: 1) looking at available APIs then building an application idea around them, or 2) deciding what kind of data might be interesting to build with, then search for APIs that may not have been listed in the API directory sites. Here are a few links that can get you starting in your search for data that inspires you: API directory: https://www.programmableweb.com/ US Census data: https://www.census.gov/data/developers/data-sets.html NASA: https://api.nasa.gov/index.html#getting-started There are plenty more that are easily discoverable with Google. Many government agencies have some kind of API with public data available. For example, I'm interested in astronomy. I made a NASA image search interface that queries their API: https://codepen.io/OneCent/pen/RLzyJL It doesn't have to be complicated, just gain access to an API and build something cool! 
Twilio has a wonderful API for SMS and other telecommunuication
Well technically NOT languages. But anything you want to use or learn to do I just search for "boilerplate" code on Github or Google.
I thought I was an intermediate JS developer but I didn't understand half of what you wrote.
http://mesonet.agron.iastate.edu/ogc/ This is the source I used for the radar data. Fair warning, pretty sure it is US only. Once you‚Äôre able to add a Google Map to your page, you‚Äôll be able to add the radar layer to the map. There‚Äôs an example for v3 of Google Maps API in the link above, looking at the source of that page will guide you. You can use Google‚Äôs Geolocation API to find your current location, then initialize the map using those coordinates. Feel free to PM me if you decide to take this on and need any guidance! I‚Äôm by no means an expert but I can show you how I approached this.
Great code review 
My favorite API to play with is TVmaze, but for a truly impressive portfolio project try to get access to a real estate API, there's a huge amount of learning involved to search/filter real estate data as well as coordinating multiple API's to provide information like crime rates, school ratings and local attractions and then after all of that you get to play with google maps. 
If you want to get specific I'd be happy to break down any of it!
Jquery is a little old hat. Come join us in the deep frameworks like react or vue. Live a little ;p 
That sounds like something that should be in your privacy policy. Oh, wait! ... Your site doesn't seem to have a privacy policy. ... I think I'll pass.
Not him, but what did you mean by typing `chain` like an indentifier? Also is `trampoline` a lib or something builtin I wasn't aware about?
Don't go out of your way to learn it... If you need it for a future job and you know vanilla js, you'll be able to figure it out really quick, anyway...
Unless you are going to be working on legacy code that is using jQuery, there is really no reason to learn it now. All of the really useful stuff has been incorporated into the native DOM. I would highly suggest understanding how the DOM really works with vanilla JS, and then jump into a framework. 
I wrote a ZX Spectrum screen memory emulator: https://codepen.io/SarahC/pen/mLQOrr 
Nice! Have you got a live page test?
Sweet!
I'm no expert, but the way I see it is that es6 made jquery redundant, querySelector('.whatever') replaces $('.whatever'), toggle is now in vanilla.js and $getJSON('http://whatever.com') is replaced but a much more verbose but not overly complicated fetch(async/await). With polyfills and babel you can transpile your code to work in older browsers so there's really not a reason to care about jquery in modern times. ** I'm kinda drunk right now, so my code examples might be a little flawed. 
Learning the DOM API is much more useful these days.
Vue, Angular, and React are much better techs to increase your repertoire. Sounds like you already know enough about jQuery to get by, too. 
ES5
&gt;I'm no expert, but the way I see it is that ~~es6~~ES5 made jquery redundant** FTFY
Thanks so much!
Okay, I believe you guys are sincere, but you didn't plan your site or service carefully enough. First of all you need a privacy policy. I mean to say you literally need one if you want to continue operation. If you collect personal information without one you could be liable for legal fines and repercussions. I don't know what they are. I don't run a site that collects personal info... google it. Even better, consult a lawyer with expertise in online privacy. Second, remove the fake testimonials, the *300+ companies* and all the other marketing Bs. It's obvious. You're new... that's fine. You might have a profitable idea. I'm not sure, but you have competition. I think you need to offer your services free for a while. Then you need to seriously re-think your pricing scheme... Assuming a relatively low annual salary of $50k, you're expecting companies to pay $7250 to hire someone... That's nuts. They charge $299 at weworkremotely.com. Have you though of how to charge clients for remote workers that work hourly or work on shorter-term contracts?
Pretty sure this is wrong? Arrow functions preserve the `this` context in which they were written, so your code's `this` !== element. Works fine if you use a normal `function` declaration. You could also instead pass the `evt` argument and get it from `evt.target.dataset.id` or instead of using `this` at all, keep your arrow function and get it from `element.dataset.id` since the element's already in scope.
I see you and your team understand the importance of privacy. There are no names on the about page, just a low\-resolution photo of three guys. Your account here on Reddit is also suspicious... only 10 days old and the only posts or comments are about your website that you're promoting. It was over two months before I could post without my posts being automatically removed because my account was new, so I'm assuming you know some trick that allowed you to post more quickly.
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset) - Previous text "MDN" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
Thumbs up, soldier ;)
Cringes
I learnt jQuery 12 years ago. At that time it was AMAZING. You felt like you had super powers. There is a reason why using css selectors to find elements became part of the standard DOM. But today, with improved browsers, it is no longer relevant. 
This is exactly the type of post that someone who makes no money coding would make. One day you‚Äôll understand what that means
jQuery is obsolete. There's nothing that you can do with jQuery that can't be done better with Vanilla JavaScript and CSS animation.
:rolleyes: 
You can learn jQuery in a dedicated day. I don‚Äôt see a reason not to. Just try to understand enough of the library that you can read a github repo where someone uses it. 
i can asssure you, the life of a centurion is never disappointing (unless you die, then that kind of puts a damper on things)
Another dumb article in /r/JavaScript. You‚Äôve no business calling yourself a JS programmer if you *don‚Äôt* use closure.
/r/gatekeeping
Here's a sneak peek of /r/gatekeeping using the [top posts](https://np.reddit.com/r/gatekeeping/top/?sort=top&amp;t=all) of all time! \#1: [Rob Zombie Shooting Metal Gatekeeping Down.](https://i.redd.it/ukt58tn5q8n01.jpg) | [2783 comments](https://np.reddit.com/r/gatekeeping/comments/868t7d/rob_zombie_shooting_metal_gatekeeping_down/) \#2: [Because heaven forbid non-vegans eat vegan foods](https://i.redd.it/6cjxhg3v6c901.jpg) | [3059 comments](https://np.reddit.com/r/gatekeeping/comments/7pkc25/because_heaven_forbid_nonvegans_eat_vegan_foods/) \#3: [Refreshing](https://i.redd.it/0wn0g8wf5od01.jpg) | [523 comments](https://np.reddit.com/r/gatekeeping/comments/7um5q9/refreshing/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
Oh I see!
Was the purpose just to reenforce concepts? There‚Äôs already a bunch of libraries that do this. I honestly can‚Äôt understand why JS devs are so compelled to make JS like fucking Haskell and OCaml. If I wanted to write production code like this, I would be working at Jane Street and wouldn‚Äôt be using JS at all. A lot of decisions made here don‚Äôt fit the underlying language but even the libraries that made better decisions are usually a waste of time because you‚Äôre never going to be able to quickly onboard JS devs to this style. It‚Äôs fun as a sort of toy but I don‚Äôt really see the point. What am I missing?
jQuery wasn't useful because JS was crap, jQuery was useful because it bridged the cap between maintaining development between browsers, which was an extremely HUGE thing until the advent of transpilers like Babel or Traceur. Suddenly you can do development between web browsers and have a consistent experience while supporting older versions of IE and Chrome at the same time. This was fucking magical in 2008. As for OP, I suggest you continue learning JavaScript while learning other frameworks alongside. Don't try to full into the trap of being a "React" or "Angular" developer, become a Software Developer. Libraries come and go but understanding the fundamentals (data structures, algorithms, design, patterns, architecture, compilers, networks) is timeless.
No. jQuery is obsolete. For modern projects, the only reason it‚Äôs still even talked about is because many developers practically only know how to express their logic with jQuery syntax.
I wouldn‚Äôt go as far as to say it‚Äôs completely obsolete. It‚Äôs useful for some stuff but far less necessary than it once was. You will know if you need it. 
No, JS was crap. DOM manipulation sucked. Selecting elements and iterating on them sucked. jQuery wasn‚Äôt magic because it was consistent across browsers (well, not entirely). It was magic because it turned verbose, clumsy-looking code into one liners. 
You can absolutely be fine without learning jquery, vanillajs that is supported by the browsers nowadays can solve most of the problems jquery aimed to solve 10-15 years ago. I would suggest you to read it and understand how it works, mostly because in our job you don't always get to work on shiny new frameworks, sometimes you need to deal with old codebases, started when jquery was the right solution to most of the front end problems. I think that knowing a bit the syntax will as well help you understand how much in a better place we are now. 
Yeah... But don't get discouraged.
Yeah jQuery has been replaced by `let f = (x) =&gt; document.querySelector(x);`
I like your energy and attitude. Let's prove the naysayers jQuery doesn't do anything for you! $('.foo').fadeOut() Go. Don't forget you have to remove the element from display in the end, so it's not a click target.
There is no use in learning it. We are also trying to deprecate it in our company. If you happen to be working at a company that uses it you can learn it along the way, it‚Äôs not that hard just follow the docs. It has some nasty quirks which are useful to know if your working with it, but don‚Äôt spend time on it when it‚Äôs not neccesary.
for someone being able to write js it should be a matter of minutes to wrap your head around jquery. if acquiring minor knowledge like that feels like a hurdle, good luck working in a fast developing environment like web.
your username ironically checks out. But by all means, import jQuery for a fadeout function. 
Can you please explain "leaking the argument?" I actually don't get gow that impacts performance. Also big bug thanks for the effort! :)
This pleases me
By all means, expect a full and comprehensive list of jQuery features in a short Reddit comment.
A trampoline is a way to fake tail call evaluation by putting the calls to do on it and resolving them with a regular loop.
And I wrote the little library which makes the examples possible.
This angrys me as I just finished my Masters and can't find a good development job around me. I know in due time something will come up, but why the hell wouldn't you want to learn new library's or plugins to better your job or personal experience? Sorry... Just need to rant as well.
This guy knows whats up. Almost all things which made jQuery great in the past have made their way into normal vanilla JS. 
&gt;jQuery wasn‚Äôt magic because it was consistent across browsers (well, not entirely). It was magic because it turned verbose, clumsy-looking code into one liners. It was both. It made it really easy to write unncesserilly verbose and clumsy code into something succinet and readable, at the same time it took browser support seriously and what also a big draw in a lot of companies adopting it (and why a surprising amount of sites still use it). 
It's a good point that people tend to forget. Also the DOM was inconsistent and certain elements in older IEs were read only. This means methods couldn't be polyfilled. jQuery very cleverly solved this problem as well as iteration in one go.
Also interested in this one
I will hold off on the async/await pattern for now. My app is using Promises pattern and i'd like to keep that consistent. Will look into async/await in due time!
[removed]
Right. Custom Error classes should be the way to go. Where would you normally put the Custom Error definition in the file structure of the app?
Libraries and frameworks come and go. Learning the core language very well is definitely a good practice, regardless of which frameworks and libraries you're familiar with. Instead of learning vue right now I'd recommend picking up programming basics if you don't have a strong background in it, and *then* learn JS and any other langauge + framework you want. This is especially useful if you're going into a career in development where employers will care more that you have cs theory and a problem solving mindset more than which specific tools you're familiar with (I do a lot of hiring, so coming from experience).
&gt; Didn't realize there were developers who actually couldn't google to troubleshoot something this basic I don't get it, are you talking about yourself? I've nothing to troubleshoot, as I have no troubles, I just used jQuery. You're the one with buggy code up there. 
Can someone else shed some light on this? Is it good practice to consider 'not-found' cases `null` results as Errors?
He's talking about how you should at least provide some information in your readme when releasing a library. There is no information as to how to install it from npm, we all have to figure out how to import the functions, then we need to allready know about fp to understand what you mean with a Maybe, perhaps your lib does things differently from fantasy land specs,... etc etc... It's just good practice when doing anything open source to provide a readme with these basics in them. As long as there's no explanation, when choosing a library I will absolutely skip over this one. An amateuristic take on OS standards with regards to documentation, makes your lib look amateuristic as well. Code might be well written, but my first instinct is that I'm not not even gonna look at it when I come across something like this. Looks like something someone put on GitHub solely for themselves, if you understand me? So heed this guy's word, and do a write up of what it does and how to use it, next time you release :-).
Probably best to drop all the examples currently in README into a test suite, and then change the README to "Documentation is not cool, read the test suite." 
&gt; Didn't realize there were developers who actually couldn't google to troubleshoot something this basic I don't get it, are you talking about yourself? I've nothing to troubleshoot, as I have no troubles, I just used jQuery. You think copy/pasting snippets of bad code from random sites is *better* than using jQuery? Oh boy.
My favorite JS library is ‚ÄúFuckIt.JS‚Äù - if the line of code gives an error - this library just erases it
&gt;Selecting elements and iterating on them sucked. God, back in the day, I remember turning a vanilla JS project into a jQuery project just for its .each\(\) function. It made some other things easier to do as well, but that was the catalyst, as that project required a LOT of iterating.
Don't bother. 
&gt; I don't plan on hiring you but I'm sure people who don't know any better might. Too bad, I was looking forward to joining *Your Mom's Basement Inc.* so much. BTW I don't even use jQuery that much (more commonly you'll find me using React). I'm just kind of a stickler for facts, and the original statement was a pure falsehood. Not sure how to dumb this down, so you understand it.
&gt; I don't plan on hiring you but I'm sure people who don't know any better might. Too bad, I was looking forward to joining *Your Mom's Basement Inc.* so much. Unfortunately your company's method of Googling and copy/pasting snippets is vastly superior than my approach. BTW I don't even use jQuery that much (more commonly you'll find me using React). I'm just kind of a stickler for facts, and the original statement was a pure falsehood. Not sure how to dumb this down, so you understand it.
&gt; I don't plan on hiring you but I'm sure people who don't know any better might. Too bad, I was looking forward to joining *Your Mom's Basement Inc.* so much. BTW, I'm not a regular jQuery user. I just care about facts, and the original statement was a pure falsehood. I don't know how to dumb this down for you, so you get it.
In that case, ditch JavaScript and web development altogether and learn c, then c++, or maybe java, or c#. JavaScript is a horrible language for large apps, its getting better, but that is why you have so many frameworks for JavaScript. It's doing way more than it was ever designed to do, and not because its a good language, but because its the only browser game in town. 
LOL! I like your thinly-masked doubt. I'll do it on CodePen. Just give me 10 minutes. Standby...
Heh, we already [have a winner](https://www.reddit.com/r/javascript/comments/8kxxo3/no_motivation_to_learn_jquery_is_it_really_worth/dzblwql/) sort of ;-) But sure, if you want.
Bahaahahahaha "your mom's basement inc."
True, but if only $\(\) wasn't the verbose .querySelectorAll that returned a near useless array like object.
I learned Jquery through the use of plugins only. It's not that difficult, and I'm not sure you need to master Jquery these days, if you need a framework, React/Vue/Angular are the way to go. Else Vanilla. BUT, depends of your job around you or what you're aiming for.
A slightly different approach than mine, but just as good. I like CSS, so I did the property change by adding a CSS class. I used the `transitionend` event instead of depending on `setTimeout()`, but I imagine the result is the same for this example. I think your usage of `parentElement` is better than my usage of `parentNode` because it's always guaranteed to be a DOM element.
I might expect a senior who's content with stagnation to behave like that but that's disappointing behaviour from a junior.
You are potentially paid per line in a sense if the payload size matters, which it often does. Also CPU cycles on weak mobile devices. jQuery is bad on each of these counts.
I wouldn't argue against learning to use jQuery for exactly the reasons you point out, but I would argue against actually using jQuery because of the unnecessary overhead and dependency it adds to a project. The real problem is when developers don't bother to learn Vanilla JS.
&gt; You are potentially paid per line in a sense if the payload size matters, which it often does. Also CPU cycles on weak mobile devices. jQuery is bad on each of these counts. I can immediately demonstrate your first claim is false, because jQuery, like other popular libraries is often served from a CDN, like Google's: https://developers.google.com/speed/libraries/#jquery The payload is therefore effectively 0, because the first site to use it will result in the browser caching it, and modern browsers even cache the parsed opcodes and runtime performance analysis for a library like this. As for your second claim, [citations needed]. jQuery always falls back to native APIs when *possible* in which case the extra "CPU cycles" amount to basically nothing. And for the situations when it can't fall back, then the native implementation would also be a lot more complicated.
This guy knows. :D
Will use, just started a project that surely will make use of this. Thank you.
JQuery remains the most commonly used JavaScript library so I is not out of date. There are newer stuff but newer isn‚Äôt always better. As far as your question, don‚Äôt know but I don‚Äôt think removeClass would make it fade out if that is what you mean. I will just remove it. Not sure how to make it fade away but I think there must be something 
&gt; Regarding caching, fewer and fewer sites are using jQuery or even global scripts, so each day that argument becomes less valid. `[citation needed]` Sorry, but pulling convenient "facts" from your rear is not an argument. Not to mention the entire argument about "payload" is stupid, because the [average web page size is 3MB](https://speedcurve.com/blog/web-performance-page-bloat/). jQuery is 28kb. That's less than 1% of the page size. On my sites, a web page is around 450kb-1MB and jQuery is less than 7% of that. And this math ignores caching, because jQuery is downloaded, worst case scenario, on your first page only, not on any subsequent page. Even if we ignore the fact CDNs exist, jQuery is literally, I mean **literally** the least if your bandwidth worries. It's down there with favicons in terms of how much it increases your "payload". Do you strip favicons from your site to reduce "payload"? You don't, do you? &gt; I can't remember, but I saw that claim on here a while ago and was able to verify it myself in dev tools. Sorry, but "I can't remember" is not a source.
Poorly placed punctuation... I meant to say ... &gt; Some would argue that jQuery makes things a little easier. My problem with it is that it doesn't add any new capabilities. You make some very good points, but I don't feel that they're good enough to justify the dependency on another third-party library and the unnecessary overhead. I'd argue that using Vanilla JS and CSS3 wouldn't take longer than jQuery for an experienced developer with a carefully curated set of tools and a proper workflow that we should all have. I'd also argue that, in general, there's as much maintenance overhead in dependence on a third-party library as there is in a slightly more complex code base built on established standards. I'd have to concede that jQuery is probably a more reliable and stable library than most, though. I still say that jQuery is obsolete and should never be used. There were no *blatant falsehoods*. You and I just have different priorities and different ideas about what is better.
Rewrite the whole file with the contents of the puns object would be the easiest. Otherwise, if you absolutely NEED to append it, make sure you remove the previous closing bracket so your new key will be in the same object, not outside of it.
Wouldn't triggering on `transitionend` also trigger when fading the element back in?
You have to add the transition property (https://www.w3schools.com/cssref/css3_pr_transition.asp) to the css class. Take this pen I quickly made as example: https://codepen.io/anon/pen/xjMamp
Both the signature and publickey should already be text, so you shouldn't theoretically need btoa. Other than that, I'm afraid I'm out of ideas.
well, the example makes me think it will do something: [http://api.jqueryui.com/removeClass/#example\-0](http://api.jqueryui.com/removeClass/#example-0)
isn't jquery UI suppose to handle this as shown here [http://api.jqueryui.com/removeClass/#example\-0](http://api.jqueryui.com/removeClass/#example-0)
I totally understand your feeling. Right now at work we have a pretty much moderate functional programming style (no loops, instead map/reduce, React with mostly functional components, immutability). Currently we don't use FP libraries that much, because they are really disrupting the (Scala without Catz etc.) functional programming style. This works okaying but I am super frustrated because it is hard to go one step further. So when the use case changes a bit you are suddenly left with a lot of boilerplate code. E.g. the lack of flatMap, the lack of Maybe/Option, the lack of function composition, lack of pattern matching. On the other hand there are so many solutions out there that do compile to JS and bring all of this. I am heavily invested in them and I have to say that they are all far from perfect. Purescript is pretty matured but lacks docs and ecosystem. I think the same is true for GHCJS and ScalaJS. Reason is a good idea but instead of horrible compiler messages I often get none at all. The ecosystem and tooling of TS or JS+Flow is so hard to beat that it is maybe easier to improve JS a bit than to get mentioned solutions on the JS level.
jQuery isn't something one "learns", it's not a language \- just a simple tool to make some often\-performed actions easier. Many of its features are pretty irrelevant at this point, so not unless you need it!
But what about window.jQuery?!
Paid course.
Actually, it's nothing to do with CSS transitions. You are correct in assuming that jQuery UI will deal with transitions for you \(after all, that's the whole point of it!\) The reason that you're having problems is because the classes you are using set the `background-color` with an `!important` declaration. So technically, your animations are happening but you cannot see them. The !important `declaration` is overriding the inline\-styles that jQuery UI applies \(the transition!\) causing it to basically be "hidden". I've updated your JSBin example to now work. [http://jsbin.com/hiyojureye/edit?html,css,js,o](http://jsbin.com/hiyojureye/edit?html,css,js,console)utput Rather than using the bootstrap classes, I copied their styles but removed the `!important` declaration. I hope this helps!
Well. We should clarify what we should understand by saying "using typescript": - What I meant are the features of the TypeScript language itself. - What you are talking about is using the TypeScript-Compiler for code-checking purposes :) So in this case the OP has to specify what he meant with using TS. Nevertheless your approach is also one typical usage of the TS-toolchain since you can define the output of the Compiler (Transpiler, whatever..) additionally to the built-in checks that can be enabled. I know one project where the devs are quite happy with the --downlevelIteration flag :D. For the OP: You can find more information [here](https://code.visualstudio.com/docs/languages/javascript#_type-checking) But I'd be careful with adding those "extra information for interfaces". At some point switching to TS would make more sense. (I can't know how heavily this is used in your codebase).
I believe that's how your app ends up on /r/softwaregore
I think it just would not work at all and will fall down like house of cards
Thanks!! this finally makes sense :\) much appreciated!
Might Rust not be the better choice these days? It forces you to think of memory management in proper ways, and it has native support for compiling to WebAssembly.
Well, you CAN'T do a clean append because your JSON file will end with a }.. you need to be inside that, there is no way to achieve what you want. I'd suggest using a different kind of notation such as yaml or csv which you should be able to append to.
Or a database, maybe ?
Looks like the Da Vinci virus.
get a vps. use pm2.
don't do that then... use 'fs' package to readfile then parse the json string also the server isn't supposed to crash for doing a simple operation like that
Yep you've got a point there. Sorry for the bad advice. 
Depends what you consider "large". Considering the poor data reception many people have, and the results of studies on the patience (or lack thereof) of consumers, it's completely needless bloat to me. 
I'm not going to spend my lunch break finding a source for the performance metrics, if you'd rather just imagine you won this argument (I wasn't aware this was a debate when we started talking) then go for it. I was just giving my own experience which in a casual discussion is usually taken on good faith. Regarding the use of jQuery and global scripts, perhaps I'm in a bubble as I work with React, TypeScript, and generally modern tooling. Your payload rebuttal is silly. My pages never weigh anything close to 3MB and if you're using such bloated numbers as your yardstick then your own pages will be terribly bloated too. In other words, don't justify your own bloated payload because a lot of other shitty sites out there are doing even worse.
Im guessing you're rolling this at home. Ok dns/domains: if you don't know already, point both A records at your routers IP(google what is my up. This may change regularly depending on your ISP) Since you have two seperate websites/domains you need a reverse proxy of some sort. Nginx is good and there are plenty of tutorials online. Basically you can ask Nginx to route domain1 to localhost:3000 and domain2 to localhost:3001(or whatever machine the server is on). You will need to configure your router to point global port 80(and 443 if your secure. Use letsencrypt) to the port 80 of your server. Because I host a few servers from home and managing all the different parts became a pain, I use docker with compose files to make pulling a server up/down super easy. I can elaborate if you need on any of this. I'm probably not the best person to provide information but it sounds like we're on the same path at different points
Oh I see, thanks for the tip :)
For nodejs I'd checkout http://www.nodejsrecipes.com/
I'd also say that, or a file dropper. Saw some code that looked very similar a year or so ago. In conclusion: Don't try to run it.
I just wrap any code-like stuff with backticks for easier reading. `chain` would just be a property on `IO` instances e.g. `IO.pure(1).chain(x =&gt; x + 1) // IO(2)`
username checks out
Jquery is obselete in modern front end frameworks. That is the point you seem to be misunderstanding. You dont code to the dom apis in any new framework at all. Its data driven uis.
Why do you need a library for fadeOut, when it can be done in under 20 lines of CSS?
Yes, reffering to them with an underscore doesn't make them private, but return a class with public variables does. You cannot access those private variables from outside of the class. 
Well ES6 classes constructor returns "this" by default, but if you pass something else it gets overridden by it. So even returning this object creates private variables from those variables that are not in this object: class Test { constructor() { this._private = "I'm private"; return { publicVariable: "I'm public", fn: () =&gt; { console.log("I'm also public"); } }; } }
How was the previous posters code horrible? it literally does the same thing and there are no performance issues with it. That said, it‚Äôs kind of a waste to use jQuery for small / single cases. The only time I‚Äôd use it is out of consideration for teammates who haven‚Äôt kept up with JS. 
Also this might work even tho I'm not really sure. But "this" gets returned so anything outside of "this" should be private. class Test { constructor() { const _private = { log: () =&gt; { console.log("I'm private"); } } this.public = "I'm public"; } }
So, why do you need to host them yourself on your own PC? That's the first issue you need to figure out. (Hint: You don't). Otherwise, [I'll just leave this here](https://www.heroku.com/). 
 IO.pure(1).chain(x =&gt; IO.pure(x + 1)) // IO(2)
is this a troll post? :D
To be honest all of that boilerplate is redux related. Redux is great, but I do think it's a bit overused in the community. I made the same cal in a project to start using redux from day one, without fully grasping React, and struggled to learn way too many things at one. Then when I went into a project using React only it felt like a breeze. I think that Redux is something that you should add gradually to a project and not from the get go. This helps you avoid putting all the state in redux and just throwing in there whats really necessary. And I found out that most stuff isn't. 
Hi /u/neoniousTR, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Fixed, thanks!
I think they have or will be shutting it down soon.
Ah, well, jQuery certainly makes sense for anything pre-IE9 (standards-wise), Opera Mini included. I forgot to mention that before.
Thanks! I really want to become a software developer, but I'm currently learning only Front End, I just started to learn Vue, because I'm looking for a job. I love mathematics and algorithms all that stuff but I can't study it because of lack of time (college) my goal is to finish it, I'm at the last semester, and then focus entirely on software development, the problem is that i have no idea what to learn, because I love JS and there is still a lot of stuff to it to learn like frameworks and more js.
&gt; Jquery is obselete in modern front end frameworks. That is the point you seem to be misunderstanding. The thing *you* seem to be misunderstanding, is that I reacted to a comment *explicitly* comparing jQuery with raw JavaScript and CSS, not with frameworks. Your entire comment objects to a thing I never said.
&gt; I'm not going to spend my lunch break finding a source for the performance metrics You'd have even more of your lunch break if you wouldn't waste time posting bullshit on Reddit you can't back up. 
How do you know that I don't actually need to host it myself?
You could use a database but that does mean extra complexity and hosting costs. Also that'd be quite similar to overwriting the file in terms of how you use it..
Looks like the code for one of those pop ups you can get on a site that won't let you leave the page and says you've been infected. Just a cursory glance as most of what I'm reading in it is html+css.
Checkout @gettify on github. He‚Äôs got a ton of free books that go DEEP. I‚Äôve learned quite a bit from his material. The book series is called ‚Äúyou don‚Äôt know javascript‚Äù
Jquery itself is treated within the context of "frameworks/libraries" with the way anyone reasonably talks about it. If you are talking about some side project maintained by yourself go ahead and use whatever floats your boat. Who the hell cares. For actual production use cases with maintainer across teams nobody is going to choose jquery anymore. If they do its because they do not understand that the DOM API is impossible to debug in larger single page applications. If we are talking about real world use cases it entirely does warrant that comparison. Take React for example. It serves the same purpose as jquery did back in the day and is more of a defacto choice for "modern" projects. I'm speaking from pretty much every survey I've ever seen from 2018. React is more likely to be used than jquery and has higher adoption rates. Hence, jquery is obsolete. You are arguing about jquery being useful because of animations turning into one liners? Your perspective is very skewed to one use case which it might have abstracted better. There are many many many usecases where jquery struggles at in real world use cases thats why new libraries and frameworks like react, angular 2+, vuejs, etc exist. 
&gt; but return a class with public variables does. Not sure what you mean by this. Right now most approaches to creating private members in JavaScript revolve around the use of closure variables. They're not exactly members of your instances, and come with certain requirements such as having those variables in scope for the members that need access them. The weakmap approach most approximates the proposed private member implementation currently being worked on for the spec. Before I was going by your comments to see what you meant by private variables, and they all referred to the use of the underscore prefix convention. Currently, this example is not syntactically correct, so its a little hard to know what you're talking about. If you have a different, working example, I'd be interested to see it.
Thank you for good explanations. Trampoline method was something i never heard. Is nice to put in tool belt
Right so for context I do all my front-end dev in TS in a fairly OO style. To me, an OO style really isn‚Äôt incompatible what most of what you said. Just like you, I‚Äôm using higher order functions like map/reduce, function composition, etc. That seems like more of a stylistic change up to a point which is most certainly passed when you expect your entire team to know category theory and monads and other shit. What I don‚Äôt really understand is... what is use case is for someone who wants to use these tools? It seems like the FP advocates quickly diverge into academic absurdity. I‚Äôve never had any real problem using TS and classical sort of GOF patterns to solve any problems. 
When trying to do a non-overwritten stream sort of concept with JSON, it's typically accepted to use [newline-delimited JSON](http://jsonlines.org/). This allows you to quickly append new records. 
Wait for it
Get a $5/month DigitalOceab droplet with node installed and follow the tutorial on how to run a node app. You'll have full access to your droplet via ssh.
I see jQuery as an alternate API to the DOM. For that purpose, it‚Äôs just as relevant now as it was before. 
Just because its features have been incorporated into a standard library does not mean it provides no additional value. 
I enjoyed Secrets of the JavaScript Ninja, despite that awful title.
&gt; Jquery itself is treated within the context of "frameworks/libraries" when anyone reasonably talks about it for comparison. All right I'll help you by quoting the original comment, in case you have difficulties finding it: &gt; There's nothing that you can do with jQuery that can't be done better with **Vanilla JavaScript and CSS animation**. I also rarely if ever use jQuery when I use React. This is **not** what we're talking about. Get it? 
1. Ease of use. For all the things that the native API can do, you can accomplish using jQuery with less keystrokes. 2. jQuery does provide some additional logic that is commonly used, such as transitions. Yes, it would be possible to write that code yourself, but reusable libraries were invented so people didn't have to rewrite code that already exists. I use lodash for the same reason.
Sorry i missed the linküôÉ
I cringe every time I see people say "closures". Please just say scope
I can't speak to how effective these are, but you can try these. This one is for Sequelize ORM: https://github.com/sequelize/sequelize-auto This one is for TypeORM: https://github.com/Kononnable/typeorm-model-generator I just googled: "nodejs orm generation from schema" to find these. For my own Node projects, I have just used a query builder (knex), and not a full ORM, since I find writing SQL more intuitive and easier than dealing with an ORM. You may find you don't need one either. 
This is exactly what I meant by ‚Äûcomplexity‚Äú: Having an additional library instead of using standardized APIs incurs a mental overhead for the developer, too. New developers have to learn the library, while they should know the Brwoser APIs. This leads to an increased maintenance burden. Now this applies more strongly to frameworks where a lot of alternatives exist so the chance of the developer having worked with the particular framework before is quite low - e.g. with lodash/underscore/immutablejs/ramda, or with reactive view frameworks. jQuery was (and probably still is) the de-facto standard. But there will be a point in time in the near future where we‚Äòll have JS devs who never learned jQuery and don‚Äôt need to.
Inspired by Exif.js, I made a lib for manipulating metadata in MS office and Open office files. [https://github.com/TorkelV/officeprops](https://github.com/TorkelV/officeprops)
I tend to like Eloquent Javascript. Good resource, and free online! http://eloquentjavascript.net/
If you are arguing that Jquery is not obsolete in the sense that it is not "outdated" then you are clearly wrong. If you are arguing that the abstraction for some features \(e.g animations\) is nicer than creating your own set of functions. I would say you are right because its not worth reinventing the wheel. However, that being said, with "modern" front\-end work the model around view creation is different . Using jquery does force you to work within the context of jquery which is just entirely different model than most libs around the dom and in an ideal world for consistency youd try to solve the solution within whatever framework/lib you decide to use. I think you are not wrong with your rebuttal of the second part of the statement. I took your statements to imply that jquery is not obsolete. In my opinion it clearly is outdated.
&gt; I'm not going to spend my lunch break finding a source for the performance metrics You'd have even more of your lunch break if you wouldn't waste time posting bullshit on Reddit you can't back up. &gt; Your payload rebuttal is silly. My pages never weigh anything close to 3MB and if you're using such bloated numbers as your yardstick then your own pages will be terribly bloated too. In other words, don't justify your own bloated payload because a lot of other shitty sites out there are doing even worse. The 3MB claim was sourced. Your hallucinations don't have precedent over facts. I said my pages are smaller, they're 450kb to 1mb typically, they're typically rated over 80% on Google's Page Speed Insights (i.e. "highly optimized"). How big are yours? And don't just give me the HTML content size, you need to include *everything*: all images, videos, SVG files, XML files, CSS files, JS files, web fonts, and external resources (like Google Analytics). 
&gt; This is exactly what I meant by ‚Äûcomplexity‚Äú: Having an additional library instead of using standardized APIs incurs a mental overhead for the developer, too. New developers have to learn the library, while they should know the Brwoser APIs. This leads to an increased maintenance burden. Writing code so that it can be understood by literally the lowest common denominator of developer may be appropriate in some cases, but I would _never_ want to work on a project where that is necessary, nor would I ever employ a developer who couldn't deal with the additional complexity of a library like jQuery. 
Modify the object in your program, and the overwrite your entire file with the new data by using `fs.writeFile` instead of `fs.appendFile` See what I mean below: else{ //No need to define puns again, it's already in the global scope const idNum = Object.keys(puns).length + 1; const punId = `id${idNum}`; const punMessage = args[0].toString(); //Instead of using fs.appendFile, we'll modify the ojbect, then use fs.writefile puns[punId] = {'message': punMessage}; fs.writeFile('./files/puns.json', JSON.stringify(puns), 'utf8', function(err){ if(err) return console.log(err); console.log("The file was saved!"); }); }
this is what it shows: [https://imgur.com/WeXgIpt](https://imgur.com/WeXgIpt)
"Try harder" at what? If you want to continue with your jquery web applications go right ahead. I am not stopping you. No one is arguing that there is useful functions for animations. You do realize there are a fuck ton of libraries that do it with the same interface in VANILLA JS. You are arguing that the function call is a nice abstraction. Of course it is that is what an API is. They are just functions and libraries that might be dedicated to animations will probably handle them more efficiently. It is certainly outdated in "modern" single page web applications and even the contributors of jquery acknowledge that \(link below\). They specifically point out that Jquery's use case is for "websites" not "web applications". Hence, the shitty blog post that you probably own can use jquery but when it comes to full blown complex web applications its probably not the right tool or library. You should try harder. Its an outdated solution to web development. You do not need the jquery element abstraction to do anything anymore. Modern browsers have made it obsolete. Of course jquery was an amazing choice 5\-10yrs ago. It just simply isn't needed for what it was useful for before.
You don‚Äôt know JS
&gt; "Try harder" at what? If you want to continue with your jquery web applications go right ahead. I don't have "jquery web applications". &gt; You do realize there are a fuck ton of libraries that do it with the same interface in VANILLA JS. What does even "VANILLA JS" mean if you're using a library that implements that interface. I mean, jQuery fits that definition: - It's a library. - It's implements "that interface". - It uses "VANILLA JS". &gt; It is certainly outdated in "modern" single page web applications and even the contributors of jquery acknowledge that (link below). I never said jQuery is the best option in complicated web applications (also you forgot the link). I'm not a heavy jQuery user, dude. I use React ten times where I'd use jQuery once. You keep arguing with a straw man. &gt; They specifically point out that Jquery's use case is for "websites" not "web applications". Yeah, and? What, are "websites" outdated as well? So far your argument makes no sense whatsoever.
Looks promising, but I'd add more examples to the [README.md](https://README.md). Many people might not find the docs link immediately.
Jquery forces you into "jquery" context i.e you need to wrap all elements and use them in the jquery world. When people refer to vanilla js. They would be implying that it actually returns raw js objects and can be manipulated with raw javascript APIs.
Refactoring \- Martin Fowler. 2nd edition's going to be in JS but I think the first one is universal enough. I wouldn't focus that much on the language as I'd invest time in concepts beyond the syntax.
Aye. I'll add a double helping of recommendation sauce for this suggestion.
Sure, you can use jquery exactly where you need it. You can also use libraries which serve the exact purpose of what you need instead of jquery which probably do it better because they are more focused versions than what jquery provides.
I never said jQuery is better than `[some other library]`. The original argument was that plain JS (*no* library) is better than jQuery at the things jQuery does. I objected to that, because it's non-sense. 
Once again, I've no idea why you need to tell me that. Yes, some library is probably better than jQuery at something. Great insight.
Actually. You need to use Array syntax which is proper to represent your data. This will save you prepending object keys as pun+index etc. And JSON is not the proper media type to carry out your data. It requires whole data and does not support differentials. But it's always possible to hack media type. If you have control over clients that need to read the json file content. My poor hackish advice is to use only array syntax in file by not using json extension. Eg: appending file following way. [{pundata}], [{pundata}], [{pundata}], [{pundata}], .... When reading this file you can add [ to beginning and ] at the end so you will have an iterable json array. 
&gt;The website will barely have any visitors and the visitors that do open it up, they will stay for 5 minutes max, so I am not too concerned about security. You shouldn't think about security in this way \- your network is vulnerable for the entire time your server is running, not the amount of time you expect a visitor to stay on your website. &gt;How do I accomplish this? What is the software I am looking for? Keep in mind that I need to host 2 websites at the same time. It sounds to me like you are interested to learn about how to run a webserver, plus Node. I would suggest using a common server \(such as Nginx or Apache\). There are countless tutorials on the web about how to run a webserver with Nginx or Apache with Node.
Cool. I also have no idea why you need to keep implying that jquery is a library that hasn't had its functionality replaced by other solutions. You clearly agree that it has been replaced and hence "outdated" which is what I've been saying a long and why I even replied in the first place...this is a pointless thread. Have a good day man.
Totally. I always learn something new from it, even if I read some parts for nth time
&gt; I also have no idea why you need to keep implying that jquery is a library that hasn't had its functionality replaced by other solutions. I never implied that. &gt; You clearly agree that it has been replaced and hence "outdated" I never said that either.
I rhink if you wanna make games and focus on that, you must not be taking angular or react classes, you must be focusing more on plain javascript 
And also, for first dont learn two frameworks at the same time(angilar and react)
[https://html5gameengine.com/](https://html5gameengine.com/)I must say, game development is one of the most difficult kind, \*but\* if you like difficult things it will be really rewarding. Take a look at the list and pick the one that seems most suitable with your needs.
Tl;dr: This is a library with Vue wrappers for libui-node, like Proton is for React. Since the libui project is still very young, you won't be using this for a commercial app anytime soon (or for anything styling-heavy), but if you love Vue and want an easy way to develop and deliver a small utility application, this could be a good fit!
I just started using Cypress on one of my projects, and so far it‚Äôs been an absolute pleasure to work with.
You seem to be creating a false dichotomy. The argument in favor in jQuery is _never_ put forward in the context where a developer can only learn one API. I wasn't arguing that a developer should learn jQuery _instead_ of the native DOM API, nor do I think that's decision worth contemplating, as it would never occur. I'm always in favor of developers starting with the fundamentals, however that does not preclude them from taking advantage of a higher level abstraction. I started programming with C, and even dipped into Assembly. While I don't use that knowledge directly, I'm certain that it has helped me, and I'd urge every developer to do the same provided they have the means and opportunity. However, once they've learned the basics, it only makes sense to use the most productive tools that are available to you.
Yes. I will add more examples to the README. Maybe a few APIs which are used frequently too.
Hi really liked your approach, I'm Dad!
This article clearly explained dependencies and how they relate to npm. I found it helpful myself. I may forward this to people just starting out with JavaScript.
My original comment said it is *more useful* to learn the DOM. If you had an infinite amount of time you should learn everything, but you don't. And in 2018 there are many other things that are more useful to learn than jQuery. IMO even learning [hyperscript](https://github.com/hyperhype/hyperscript) would be more valuable.
That works if you're ok with `res` being a promise and not the result of the set of completed `async1, async2, async3` operations. There's no way to force async to become sync in a way that would allow that to be the case.
This is the javascript reddit so i can tell you about it.So im pretty new but as far as i know js can be multi tool for web,mobile and desktop with its many frameworks and libraries for both front and backend,its not that hard to learn,you can make simple apps pretty fast ,arguably the most popular language and because of thay has many recourses both free and paid ,these are the reasons i think you should learn JavaScript.
For 2D, consider PhaserJS; it is perfect for your use case. For 3D, have you taken a serious look at BabylonJS? It is a strong contender in the web-based 3D engine world. I‚Äôve got experience with both, and recommend them highly. 
had no idea this was how function decorators worked, they seem really simple, will have to give them a try sometime!
Not sure you'd consider it a framework but this windowing/slideshow JS library I've used for years... highly recommened: [FloatBox](http://floatboxjs.com)
Yes, Applyiing CSS transforms would never account in getClientBoundingRect method, so you can't rely on that to get the coordinates.
awesome bot! xD
Code on codesandbox: https://codesandbox.io/embed/k983rnkl3v
For anyone who searched on Github with no results (as I did), it‚Äôs on ‚Äòt‚Äô not two. https://github.com/getify
How much does your fork really change from localforage? Would it be possible to make a PR and upstream these changes? And are you planning on maintaining upstream fixes in your fork?
As I said, it's an alternative API to the DOM. For all core DOM interactions, it provides a lighter and slightly more productive API. On top of that, it provides a number of functions for common front-end requirements, such as transitions. And I'm not sure how you could be promoting hyperscript as a superior alternative. It is simply another tool available to a developer, which solves its own particular problem. In some circumstances, jQuery may be of more use. In other circumstances, hyperscript may be superior. However, based on my understanding of hyperscript, any situation where I _might_ use it, I'd likely just go for React or Vue instead. jQuery still fills the gap that is still inhabited by situations that only call for direct DOM manipulation. 
If you do a turn based strategy game (like a card game), using typical web dev frameworkds like Vue.js might be a good option (if you have any complex rendering forget it though). Also have a look into Typescript if you have complex game states to handle.
There is also [¬¥SystemJS](https://github.com/systemjs/systemjs)
A Short History of Nearly Everything, by Bill Bryson. It‚Äôs not about JavaScript, but you didn‚Äôt specify. 
Likewise. We just switched some frontend tests over from Casper and it has made life much nicer.
Check out [https://codeincomplete.com/games/](https://codeincomplete.com/games/) He has some great examples and goes in\-depth regarding some common gaming algorithms in Javascript. Start small \(tic tac toe\) or something and work your way up. 
https://chrome.google.com/webstore/detail/simple-websocket-client/pfdhoblngboilpfeibdedpjgfnlcodoo?hl=en
&gt; what is the use case for someone who wants to use these tools? For me, the reason why I push for FP concepts on my teams is for the ability to write Lego pieces that don't _do_ things but _transform_ things. I find that when you have black boxes that you send messages to that _do_ something ( Alan Kay's definition of OOP ), it becomes very difficult ( in my experience ) to be able to refactor/change the code as new reqs or clarification on older reqs come in. More importantly though, I find that it's far easier to re-use solutions across projects/platforms/languages when using FP over OOP. I'm not going to say that OOP isn't reusable ( even if [Joe Armstrong](http://www.cs.otago.ac.nz/staffpriv/ok/Joe-Hates-OO.htm) says that and more ). But I can say that in my experience, it's far easier to fix/update/reuse crappy FP code than it is crappy OOP code and mose code written by the teams I've been a part of or joined has been crappy code of some paradigm.
I'd like to fulfill her promises.
Any advice on what I should use or what I should research?
You‚Äôre right in that my response is gatekeeping, but you‚Äôre missing the point. The point isn‚Äôt that he would only use jQuery if he was making money from his work. The point is that you do whatever is best for your job. Or whatever meets the customer requirements. If you‚Äôre dicking around all day writing JavaScript to get your rocks off, sure you don‚Äôt need to learn jQuery. But today jQuery is trending toward obsolete because as others have already mentioned there are far more modern alternatives which can be used in its place. My comment was snide but only someone who was truly naive would post something like this to begin with. **I say vanilla JavaScript is better** so I won‚Äôt learn jQ. Okay? So don‚Äôt, but it shows how clueless this guy is as when and why jQuery is used
Thank you for pointing this out! I will add these things ASAP. I didn't fork directly from github, instead used the codebase because I needed the support for sessionStorage. see this issue https://github.com/pinqy520/mobx-persist/issues/51 I will soon fix this stuff.
Pure JavaScript, Sams Publishing. 1300+ pages of everything you need to know about client and server JavaScript.
Thank you, I will look into websockets and google docs. 
You can still fork from their repo, rename, re-publish, and add/remove any features you want with a fork. And doing it that way maintains the link between the 2, and you also get the benefits of being able to merge upstream changes and fixes into your fork, as well as possibly provide a PR if you want at some point in the future.
My recent experiences in Javascript.
That is a much more loaded question than you think. Wars can be fought over where to start. I was in your position a year ago and I hopped around a lot so I can tell you the pros and cons of each approach Before you start learning any language get a quick guide on linux and the command line as all of them will need you to know some of that this information will apply whether you work on Mac, windows or linux Then you can go in several directions 1) the computer science approach. If you really want to know what makes computers tick. Or your ultimate goals is to develop games then start with C/C++ approach. These languages are ‚Äúlower level‚Äù meaning they have to be compiled to bytes the computer can run directly. They are very strict with very little tolerance for bugs and syntax errors. The good thing about them is they produce the fastest programs to execute, can be used for everything, and are the main languages games are written in. 2) the easiest approach. That would be python. It is the easiest general language out there, it is fun and logical and resemble the English language the most without having to right tons of brackets and stuff making your code very readable. I didn‚Äôt really write any functional programs until I got into python. The problem with python is that it is a good language for science and backend (server) stuff. It doesn‚Äôt help you build webpages or write graphical applications or games. Yes libraries do exist to do that but they are not very famous. 3) start with the web trio html/css/JavaScript: these three go hand in hand. They are the fastest way to get something something that works and looks pretty. Because web development is by far the focus of most beginners and is almost universally known. There are lots of people that know JavaScript out there. They are also the only way you can make webpages and the only easy way to make them interactive. Because of this, many companies started creating frameworks to make JavaScript people useful in doing other things such as writing mobile apps or sever software. The result is that JavaScript (with some concept borrowed from html and css such as react) is the only language that can be used to do anything other than write operating systems. So you can use it to write websites, iOS and android apps or even desktop apps. You can write games in it etc. here is the catch, because of JavaScript origin as a language designed for web browsers, it is a very weird language with very weird quirks that don‚Äôt make a lot of sense. Some stuff that would be a breath in python can have you banging your head against the wall. It is very fault tolerant, meaning you can make mistakes and your code will run fine but with bugs that will show up later The above three approaches are based on open source stuff. There is the Microsoft world of .Net but that incorporates some other languages like JavaScript and C #. But unlike windows, Microsoft stuff is actually a minority in the programmer world I actually started with PHP, which I don‚Äôt recommend, then went to python where I wrapped my head around the basic programming concepts. But because I wanted to develop web apps I found myself using JavaScript exclusively. It is not bad once you get your head around the weird parts of it. But from personal experience it can be tiresome for a fresh begginer to start with JavaScript 
It seems to be working. Or am I missing something some calculation error? Try checking your javascript console for any errors. https://jsfiddle.net/v5r836ta/
That's pretty cool - I've never seen BabylonJS before ... how does it compare to three.js ?
Secrets of the JavaScriptNinja
I've added localForage's LICENSE file. Since the original repo didn't contain NOTICE file, I didn't add it. Also, I have mentioned Copyright header on modified files (original + new) as per my understanding and this: https://opensource.stackexchange.com/questions/2782/apache-2-0-license-notice-changelog
You reply is all over the place. Not sure what point you're trying to get across. I'm sure that there is a possibility that you could come across jQuery at work. If that's the case, go ahead and learn it. The OP already stated that he's learning Vue so he is trying to stay moden. I think that the OP is still new to web dev and wants to make sure he's on the right path. And there's nothing wrong with him asking if he is on the right path or not.
dont fuck with scrolling.
First, I agree with just about everything the article says. Vue is my favorite JS framework by far, and using Vuex to handle API interaction is absolutely my go to approach. I find it to be elegant and effective in every way. That being said, this article is just looking to start another JS framework flame war. React and Angular fans will swarm this thread arguing why none of this is truly unique to Vue, that their framework can do it all too (which they can). So yeah, good job with the click bait.
would you know a better way to achieve the same thing? I tried with transforms, and the problem is if the user moves the scroll the transform values not be syncronized and it causes a bad experience
Yes. will try to do this. My major problem was to use sessionStorage with mobx-persist which I am able to do now. But it would be better if I provide PRs to localForage.
I have already deployed a project with PhaserIO 2.6 but i didnt like that much to recommend. And it's new version dont have a complete support yet.
&gt; And no, overwrite is the thing I want to avoid... Why? Your best option is to read and parse the JSON, modify the object and write out new file. Trying to munge the stringified version is a losing proposition. 
Yeah but who said airbnb's is best?
I think most people that take their first look at Haskell today (like me a year ago) get quite overwhelmed of all the features and abstractions. But Haskell wasn't always like that. It has evolved in nearly 30 years of development ([this talk](https://youtu.be/re96UgMk6GQ) was a real aha-moment for me). And patterns in FP have evolved just like patterns in OOP. They are solutions to problems that programmers have faced (e.g. watch [this video](https://youtu.be/t1e8gqXLbsU) about monads). When we compose bigger and bigger programs at some point we notice that we need stronger abstractions. These asbtractions can be as small as a maybe monad or as big as category theory. Maybe you remember reading a book about OOP patterns and saying "what do I need these patterns for?" and later came a time when you found a use case and it suddenly made sense. What functional programming has done to me is that I found myself being able to spend more energy on finding the solution rather than on the execution of the solution. That means when I found the solution in my head it is rather easy to write it down mostly bugfree. I could now write for hours why this feels so good but I encourage you to try it yourself. You seem to be a great JavaScript programmer, check out some basic [Purescript](https://leanpub.com/purescript/read)!
None of them are languages xD 
I will have to look at Babylon, thanks! I guess castle crashers is actually a 3d game with 2d graphics and making a dungeon crawler like that would be so cool!
I would suggest to process the first three items manually as in outside the for loop. Then start the for loop at the 4th item such as for ( i=3, i&lt;data.length,i++) I can‚Äôt give you a clear example without knowing what are you using exactly and how you process the tile 
You should re-post this on r/Java or r/programming! Also, lookup Apache Maven or Gradle as alternative build tools
I had no idea about this! Thank you so much.
Yes! A card game would be so awesome, kind of like a hearthstone type of thing with card animations / cool graphics.
+1 to this. I learned a lot reading this after being into JS for a few years. It‚Äôs my go-to recommendation for intermediate web developers. 
Ah, thanks for letting me to know!
I never thought about it like that. I guess I'd prefer angularJS over React if I were to pick one.
The game is called Firmament Wars. It's a Risk-like RTS game with team, FFA, and ranked mode. [Anyone on my discord](https://discord.gg/n2gp8rC) will get a free key next month. I post screenshots and updates, too.
three.js is much slower.
 I recommend that you watch this [https://nosok.org](https://nosok.org/) service possibly solve your problem. 
My advice will be to focus react more than angular, since angular is hard, and also react has more jobs so.. if you just wanna get job, you will not get job as javascript game dev, cuz there are waay better languages for that(like c#, c++, python). Javascript is king of web, bit not in gaming tho, but if you just wanna get job learn MERN stack(its react, node, express abn mongodb). Oh and dont switch from one frameworkto another, focus on one, and put everything in it! But first ofc check which framework you like most. For me Vue is best, becasue i like its simplicity and everything, but its more hobby for me, since in my country only 3 jobs were available for vue last month, when react had more than 50 job postigs, so i had to learn react when i reallydont like it. Just check out which suits your needs and learn that one for first, after you grasp every consept of one framewrok, others will become easy, that you will be able to start making apps from only reading docs(in like 4-5 hours). So yeah! But first learn javascript, everything abouth javascript, I suggest reading ydjks book series, and also watching some es6/7/8 tutson youtube. For game development with javascript i can not give ypu advice, because i amnot competent in that field 
If you are brand new to game development or new to js, I found a course on udemy.com taught by Chris Deleon. Something along the lines of ‚ÄúCoding your first game in JavaScript..‚Äù apologies I don‚Äôt have the link handy but if you just search for the instructor you should find it easily
It was a point against me once to solve a problem without using recursion -- I was like, eh, just use a data structure (I forget which) and presto. Then they objected "no, solve it using recursion". Well recursion doesn't come super natural for me and I stumbled and that was that. Why should it matter? I solved the problem to begin with.
Can‚Äôt write operating systems with JavaScript? Enter [NodeOS](http://node-os.com/).
Why not electron with vue
I like the books: - Functional Programming in JS by Luis Atencio - Understanding EcmaScript 6 by Nicholas C. Zakas 
Since just mentioning the word electron gets people fired up with a passion as if it's the reincarnation of the anti\-christ.
From what I can tell of three.js‚Äô docs, it appears to be more of a renderer. Babylon provides a more complete feature-set (renderer, scene graph, various managers, sound) that is closer to a full fledged game engine. They also have a wildly active community, the lead devs are extremely friendly and supportive, and they have a great ‚ÄúPlayground‚Äù for you to test code and ideas out. (Not saying three.js lacks any of these, just that I am unaware due to lack of experience with it!)
You can use Chrome dev tools to interact with sockets. &gt;Under **Network** tab find **WS** You should see drop down to send/receive [https://kaazing.com/inspecting\-websocket\-traffic\-with\-chrome\-developer\-tools/](https://kaazing.com/inspecting-websocket-traffic-with-chrome-developer-tools/)
Chrome dev tools.
There is a book by Julian Chenard called Learning Babylon.js which teaches how to make ‚Äú3D in 2D‚Äù games like what you‚Äôre talking about (e.g. like the overland world-map part of New Super Mario Bros).
I've been playing around with this one: http://www.pixijs.com/, seems similar to phaser, which I'd also recommend.
Electron isn't native. libui is native.
Phaser is built on Pixi. 
Phaser is built on Pixi. üòé
Shout out to [PixiJS](http://www.pixijs.com) if you want to do 2D and use JavaScript.
Thank you that's very interesting I found the origin of where it came from I got an email asking to download some one drive files I guess tired me just clicked it and left it.
I went to a conference and saw the creator of cypress give a presentation about it. It was almost too good to be true, but it really is that good.
i'll just fanboy. I found this plugin for vuex, which makes it's quite easy to adapt: https://github.com/davestewart/vuex-pathify Then there's this nice computed module, which I've not tested much: https://github.com/foxbenjaminfox/vue-async-computed Gotta admit, vue seems quite easy to structure, but I think it's just an opinion. 
Weird. Are you able to log the state of the gallery checkbox inside the calculateTotal function? Just to see if you're getting a boolean value out of it.
I can't tell you how exactly, but it sounds like something you can do with css grid.
I think maven is mostly used
I guess because they asked you to do it recursively. They could have just as easily been testing your breadth of understanding different programming concepts, as well as the technical execution. Or they were being a pedantic set of dick wipes. 
JS is great and all but I think you'd get further learning Unreal Engine and leveraging blueprints. It's just a logic flowchart so understanding any programming language will be a no brainier and there's plenty of tutorials for what you need to implement. With JS you're going to definitely be writing more code that's already apart of the Unreal package. But as a MEAN stack dev this is just what I'm doing and I think it's the best route for me. Game dev is very complicated and I think phaser is just a small tool in comparison to the giant ecosystem unreal provides. Also the blueprints are pretty fun in a way. 
The new version of Phaser actually has a new purpose-built renderer.
Because they aren't testing your ability to solve any particular problem, but your ability to solve a problem outside of your comfort zone. Ive seen so many interviewees just give up or completely flounder when they encounter a problem they havent prepped for and its a damn shame. A good interviewer should be looking for these pain points, and observing how efficiently the person in question navigated unknown territory. The purpose of this has a direct dollar value. Of course it probably doesnt matter day to day whether your using iteration or recursion to develop, as long as your code is clean and works. It does matter however that one dev is stuck spinning their wheels because they encounter something foreign once or twice a sprint. Tldr, youre ability to solve unexpected problems effectively is ten times more valuable than your ability to solve the ones you expect.
I didn't try it on window, just the element, but I tried getComputedStyle and it doesn't work. I looked at everything and it seems that offsetX and offsetY are the problem... they aren't being scaled due to the transform. I'm doing it manually as a workaround now.
Other comments have talked about security and yes it is super important. There are two aspects. The security of you(the host) and the security of the content. The moment you start forwarding ports through your router you are effectively letting anyone from anywhere into your home/computer. You must always make sure that there are no attack points in your server that someone might exploit. DO NOT open up SSH unless you have disabled password auth and set up a private key! In this day and age it is so easy to set up SSL/HTTPS on your website. I believe that there is no reason you shouldn't set SSL up. Search up letsencrypt and do it.(it's free)
You can do something like this: import { async1, async2, async3 } from 'my-library/internal' const myLibraryFunction = async () =&gt; { return await Promise.all(async1, async2, async3) } then with your library consumer: import { myLibraryFunction } from 'my-library' // executes sequentially, but the three async functions run in parallel/concurrent let res = await myLibraryFunction() // do stuff with res.
The funny thing is this was to convert from temp to perm. The completely nailed the thing they had me white board when interviewing me for the perm position, but that was slightly lucky. They asked me to write my own `parseInt` functionality. Well in the past I used to teach myself more than just "Hello World" to get a bit of a grounding in a new (to me) language by coding a Roman numeral conversion function. It's remarkably similar to how you might code your own parseInt, and they actually interrupted me before I could finish to affirm that yes, I did indeed know how to do that. So they weren't just being, or always being, a pedantic set of dick wipes as you so eloquently put put it.
[smooth scrolling example](https://css-tricks.com/snippets/jquery/smooth-scrolling/) Here you go
* Maps: better as dicts than objects (less can go wrong). * WeakMaps: if I wanted to associate completely private data with instances of classes. * Sets: same as you * WeakSets: never, so far. You could use it to mark objects coming from somewhere else (without changing those objects). Same use case for WeakMaps, BTW.
I use `Map`s frequently and `Sets` somewhat less frequently. I believe I used a `WeakSet` one time and then refactored it away at some point. I think if you're honest with your intentions and you're strict about your semantics, you'll use `Map` quite often. It's also useful in Flow/TypeScript/React PropTypes.
Hah! turns out we all do the same XD
Thanks for the links! I‚Äôll take a look and try to dive in :)
&gt; without jQuery 
Most have already been mentioned, but there were some suggestions in the old subreddit's FAQ: (https://www.reddit.com/r/javascript/wiki/faq)... to which there seems to be no access from the new design... :/
But it doesn't work on IE11 unfortunately :/
You can always start exploring new topics in JavaScript starting from MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript
OMG. This whole use JS for everything thing is so annoying. I love JS, but programming languages are like tools. You use the one that is most optimized for the task you're working on. I don't work on any project today that just uses one language because for a full technology stack I find myself choosing the best tool for the feature. Just my little rant.
How does Cypress deal with provisioning back-end services required for integration tests? This is coming from someone who barely even knows what service Cypress provides.
would you be able to clarify what you mean about maps being better as dictionaries than objects?
&gt; Objects are similar to Maps in that both let you set keys to values, retrieve those values, delete keys, and detect whether something is stored at a key. Because of this, Objects have been used as Maps historically; however, there are important differences between Objects and Maps that make using a Map better. &gt; An Object has a prototype, so there are default keys in the map. However, this can be bypassed using map = Object.create(null). The keys of an Object are Strings, where they can be any value for a Map. You can get the size of a Map easily while you have to manually keep track of size for an Object. https://stackoverflow.com/questions/18541940/map-vs-object-in-javascript
Have you tried TestCafe instead? If yes why you choose cyprees any pros? Thanks
I've used `WeakMaps` to do caching in a virtual-dom implementation. The use case for them is somewhat specialized but it certainly exists. `Set` has completely replaced plain arrays for me, which I used to use for set semantics. I sometimes use `Map` and sometimes use a plain object for a map. Plain objects have a little less syntax overhead, but the keys must be strings. I've never used a `WeakSet` and I'm not sure where they would be used.
The folks that made Cypress are part of my local React meetup; glad to see some love. 
The top example is without jQuery.
*Disclaimer:* I didn't check every single line of your code, but there are a few things I noticed. They might not apply to your API in its current state, but they are useful to know for API development. # 1. Meaningful errors In your [`server.js`](https://github.com/vivekimsit/currency-exchange/blob/master/server.js#L17), it seems that you throw `500` error for everything. It might be worth using meaningful HTTP error codes/descriptions, like 400, 401, 403, etc. [http-errors](https://www.npmjs.com/package/http-errors) is a good package for that. # 2. CORS It looks like your API was meant to be public - in this case you should probably enable [cross-origin resource sharing (CORS)](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing). There's a nice [CORS package](https://github.com/expressjs/cors) for Express. # 3 `catchAsyncErrors`? I get a feeling your `catchAsyncErrors` in [`routes/index.js`](https://github.com/vivekimsit/currency-exchange/blob/master/routes/index.js) is doing something nasty. I get the logic behind it, but I always thought using return values from middleware is undesirable and you should rely on `next()` or `next(error)` instead? I might be wrong on this though. # 4 Documentation One thing that can save your API, even if the code is shit, is good documentation. At the moment both your `README.md` and in-line documentation suck. Consider adding some more info about what the project does to your README.md and write+generate HTTP API documentation using something like [apiDoc](http://apidocjs.com/). # 5 General structure Some people might think that having every single piece of logic in a separate file is a "clean" approach, but there is also a thing called ["premature optimization"](https://en.wikipedia.org/wiki/Program_optimization#When_to_optimize). As it stands, you have a lot of 5 line long files and redundant directories which could have really just been a single file. This is not always bad - if you've done similar projects before and know exactly what project structure you want, you can do as you please. Otherwise, it's best to not make guesses and just keep expanding the code base, refactoring and abstracting away things as they pop up. # 6 Config This is relevant since your project is open source. Configs often contain sensitive, confidential information. Even if they don't, they can still vary from user to user - which is why you don't want to have the actual config in your repository. You can add `config.js` to `.gitignore`, and then create `config.example.js` for people to use as a reference. You will also need to add a note to your readme telling users to create a config. This way, you have an example config in your repo while your personal config is safe. # 7 JSDoc hinting A good JS practice is to add doc blocks to your code. This doesn't really help the end users of your HTTP API, but it helps during the development phase. For example, in your [`lib/index.js`](https://github.com/vivekimsit/currency-exchange/blob/master/lib/index.js), you could add (replace `string` with actual type): /** * @param {object} pair * @param {string} pair.source * @param {string} pair.target */ async function get(pair = {}) { const { source, target } = pair; if (!source || !target) { throw new Error('Source or target missing'); } const exchange = await fetch(); return exchange.get(source, target); } This will help your editor's linter pick any errors when you pass an incorrect parameter. --- There are probably other things that I could mention but at this stage the codebase is pretty small so they might not be significant.
W3schools is one resource you can use to learn programming in JavaScript. it definitely covers a lot of important subjects, but it's also quite general, and it can help to try and do something a bit larger than the example scripts to really drive home what you are learning. that's my experience with W3schools, anyway.
Very old version of pixi though what I remember
Ah, gotcha
&gt; Well recursion doesn't come super natural for me and I stumbled and that was that. Why should it matter? There are a shitload of problems where recursion must come naturally to people in order to solve. If you can't do recursion, then of course that's a point against you. You're not as effective as a person who *can* use recursion. 
Who says I couldn't after doing it a few times which would take me all of about a few hours? I really just have never had the need in the course of ordinary programming.
He kind of glossed over the action creator mock. Why would I use this over Jest?
I taught myself to code primarily using w3schools. As NormalUserThirty said its a great resource but its a little too general. For example w3schools has a section on using JS for form validation. While it might be good to know the fundamentals, JS has come so far and its not likely that you'll *need* to do it this way. w3schools is also missing some concepts like WebComponents. I think form validation is actually a perfect example of where WebComponents could have been used. Basically its a good place to start but its not like taking a college course in web development. If you're looking to get into frontend development I would: - learn JS syntax with w3schools - look into WebComponents https://www.webcomponents.org/introduction - look into a frontend framework If you're not as interested in frontend development you might want to look into node. Node is a JS runtime, so you can run JS in places other than the browser. I'd also suggest you check out some of the courses on nodeschool.io . I personally loved the "Learn You The Node.js For Much Win!" and "Test Anything" courses
If you needed to stand up a number of services I imagine you could wire together a bash script to do so, then run cypress
Could you give an example of an abstract concept that isn't explained? That would help me point you to a resource that goes into the depth you are asking for.
Recursion is a fundamental aspect of programming in general and it should definitely be something you're familiar with. Check out a simple divide and conquer algorithm like merge sort and implement it yourself, that should help you get started.
It depends on your framework or toolset. One of the most common ways is to use what are essentially placeholder strings in your code and views and use a library to 'link' it to a translated string within a file (e.g. yaml or JSON). Internationalisation of projects is a monumental undertaking in many cases. Online tools like POEditor can help make it easier. I can't vouch for any library in particular, but these should give you some ideas; React: https://github.com/i18next/react-i18next Angular: https://angular.io/guide/i18n Vue: https://github.com/kazupon/vue-i18n
Thank you 
Dr. Frisby's Mostly Adequate Guide to Functional Programming 
The fact that people are praising an E2E testing tool as a joy to work with is really a testament to how great it is.
I recommend reading [this](https://resilientwebdesign.com) You should only need JavaScript for advanced animations that can‚Äôt be pulled off with css or a Web app that doesn‚Äôt work without JavaScript.
You can use JavaScript for everything! You can: * dynamically show and hide content or triggering animations * validate form input * implement drag and drop * get data from a server * display that data in an interactive graph or map * make a game * create a Digital Audio Workstation * load an image and create your own filters And thousands more things I didn't touch on. The short answer is that it adds interactivity to a web page.
Is it? Do you mean in terms of performance? Or in terms of development time? I used three.js rather extensively for a web based app that could display / modify 3D graphics. I didn't have any performance issues. 
Thanks for the resources! I‚Äôve actually been chugging through EJS myself :)
What is the performance of these like in comparison to some older objects and methods?
My interviewer didn't even have the courtesy to ask me to convert my recursive algorithm to iterative. He just kept asking me to explain how it could work several times before moving on. The shadow he had understood me the first time and gave me pity eyes. This was a Google whiteboard interview FFS.
Is i
&gt; The good news is that every recursive algorithm can be implemented with iteration. I don't think that is true. Recursion that can be converted to iteration is called "primitive recursion" and is by far the most common sort, but the Akerman function is the traditional counter example. Its not just hard to write itteritively; its impossible. https://www.youtube.com/watch?v=i7sm9dzFtEI
I mean sometimes you do...
I mean sometimes you do....
while (sometimes) do {I mean}
Trivially and unhelpfully, Turing Equivalence says that if you can write it in Lisp or Haskell, there exists a Turing Machine that will execute it, and Turing Machines are iterative. When you speak of ‚Äú simple recursion,‚Äù are you referring to Linear Recursion? I agree it is trivial to convert Linear Recursion to an iterative function that executed in constant space, but perhaps you are speaking of something else?
if (depth === 3) return -1;
Thank you so much!
&gt; ... pedantic set of dick wipes. Kleenex? Tube socks? Fluffy the rabbit?
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [MostlyAdequate/mostly-adequate-guide/.../**ch02.md** (master ‚Üí 7626d8a)](https://github.com/MostlyAdequate/mostly-adequate-guide/blob/7626d8a20dcf786323905c59e7436a89c96177fb/ch02.md) ---- 
&gt; I don't think that is true. Recursion that can be converted to iteration is called "primitive recursion" and is by far the most common sort (in computer programming at least), but the Akerman function is the traditional counter example. Its not just hard to write itteritively; its impossible. Sorry but all of this is wrong. All recursive algorithms can be implemented iteratively in the obvious way (a stack) which is what's really going on when you use recursion anyway (you're just replacing the call stack with an explicit one in code). As for primitive recursive functions, these are ones that can be written with *bounded* iteration (ie you can provide an up-front bound on how many times you'll have to loop), but this is no more the normal definition of "iterative" than primitive recursive is of "recursive". 
&gt; Along similar lines, using this is generally bad for fp style since it breaks when using function composition and delegation. Indeed: &gt; I avoid using this like a dirty nappy. There's really no need when writing functional code https://github.com/MostlyAdequate/mostly-adequate-guide/blob/master/ch02.md 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [MostlyAdequate/mostly-adequate-guide/.../**ch02.md** (master ‚Üí 7626d8a)](https://github.com/MostlyAdequate/mostly-adequate-guide/blob/7626d8a20dcf786323905c59e7436a89c96177fb/ch02.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dzd88mb.)
Also curious about this, I find the idea of WeakMaps and WeakSets pretty attractive, especially when writing desktop applications in Gjs where memory can be an issue. Does anyone have any solid real-world examples (even abstract) where these could be used or should be where they usually aren't? I feel like the advantage of weak types might be more obvious to C programmers so I'm not sure how leverage them.
It is a good starting point to learn syntax and get you started writing JavaScript code. But it is only the beginning of what JavaScript can do. When you are done with it then you can start learning more advanced stuff like react and learn more about how the execution engine works 
Why would you need recursion?
I fully recreated the classic Atari's Pong game from 1972, only using ES6 classes/modules + Webpack 4 in order to automatically run basics tasks: https://github.com/jonathanlinat/es6-retrogaming-series-pong I had a lot of fun and I plan to recreate some classic videogames like Space Invaders, Tetris and Asteroids.
Updated?
Built my bootcamp capstone in phaser. It has its quirks but was a decent project for 2 weeks. Genzed.herokuapp.com Open up a second browser and join lobby to play 
Thanks, I Know a bit of c/c++ so will improve it and get with the trio of html/css/js . Thanks again
For websockets?
No worries! That‚Äôs what we‚Äôre here for!
const convertToSecs = function\(hours\) { return hours \* 3600; }; console.log\(convertToSecs\(4.5\)\); // 16,200
[I mean sometimes you do....]( https://www.reddit.com/r/javascript/comments/8l281i/recursion_we_dont_need_no_stinking_recursion/dzd0ew5) 
what would need to be added in order to remove the word 'hours' from whats displayed on the page?because using var timeLeft = $\("#sub\-header \&gt; div:nth\-child\(2\) \&gt; span:nth\-child\(1\)"\); selects all of "00:00 hours" \(however much time is left when the page is loaded\)
You can reuse that toggle function and shorten the comparisons: function toggle(id, id2) { const n = document.getElementById(id); n.style.display = n.style.display != 'none' ? 'none' : 'block'; document.getElementById(id2).setAttribute('aria-expanded', (n.style.display != 'none').toString()); } // This doesn't actually expand all, it actually toggles all function expandAll() { for(let i = 1; i &lt;= 13; i++) { const id = 'C' + i, id2 = 'T'+ i, n = document.getElementById(id); toggle(id, id2); } }
OMFG I LOVE DOTA AND THIS CARD GAME LOOKS SICK!
I will do this! Thank you very much
I kind of skimmed this so sorry if I missed something obvious, but if you only want to display the newest items, and the newest items are always added to the end, in `render`, can you not just `.reverse().slice(0, 4)`?
You can try reading the You Don‚Äôt Know JS series. It definitely helps demistify some of the JS, but it gets deep. I suggest having a basic knowledge at least before diving in. 
Using parseFloat\(\) will strip any text out of the submitted value and turn it into a float number \(a number with a decimal point\). You'll need to use either version of code depending on how exactly the time is rendered on your web page *If the time is being displayed as "****4.5 hours****" a.k.a 4 and a half hours* let convertToSecsOne = function(hours) { return parseFloat(hours) * 3600; }; console.log(convertToSecsOne('4.5 hours')); // 16,200 Alternatively, if the hours and minutes are both being displayed, you can use parseInt\(\) on the two values which will turn the string numbers into integers \(whole numbers\). *If the time is being displayed as "****04:30****" a.k.a 4 hours 30 minutes* let convertToSecsTwo = function(hours) { let splitTime = hours.split(':') return (parseInt(splitTime[0]) * 3600) + (parseInt(splitTime[1]) * 60); }; console.log(convertToSecsTwo('04:30')); // 16,200 Hope that helps.
I tried the shift..and while that works for the first 4 items visually..as I stated in my OP..if the item you are adding is a state/city, it gets pushed into the geography object which MAY already be sitting inside the MORE. Here is a dumb example. Say I add the following in this order: Majorchamp, illinois, JohnnyRingo, California, Tampa, Rick Because the preset filter object already has objects for 'demographics (0)' and geography (1)...what visually is outputed even using shift would be Rick, JohnnyRingo, MajorChamp, Tampa, (MORE DROPDOWN: California , Illinois) When visually what I would want would be Rick, Tampa, California, JohnnyRingo, Illinois, Majorchamp Hence the idea of a separate array that would basically maintain a state of values for visual reference only. The database we deal with apparently works with the currentFilters objects (using push) for a specific reason, so I've been asked to NOT modify how that JSON is built.
Can you elaborate a bit on the array spread?
Working with indexedDB is more complicated compared to DOM storage. The purpose of indexedDB wrappers is to make your life easier. IndexedDB libraries worth checking out * localForage (~8KB, promises, good legacy browser support) * IDB-keyval (500 byte alternative to localForage, for modern browsers) * IDB-promised (~2k, same IndexedDB API, but with promises) * Dexie (~16KB, promises, complex queries, secondary indices) * PouchDB (~45KB (supports custom builds), synchronization) * Lovefield (relational) * LokiJS (in-memory) * ydn-db (dexie-like, works with WebSQL)
Given that jQuery is written in JavaScript, I'd have to say, yes, absolutely this can be done with just JavaScript, without jQuery.
i dont beleive the source is available for that. Plus, I wanted to do this to jump start my javascript learning adventure. So i was hoping I could find something pretty basic that will show "Okay here's how make the overall container, and this is how we position each text field on the cavas, etc"
God I hate recursion and am scared to death of it. 
I agree completely, it‚Äôs just the point was that it claimed to be an operating system based on JS and Node. Maybe it‚Äôs just fun to think of an OS written with JavaScript.
Oh man I thought this trend died already.
so for convertToSecsOne in place of function\(hours\) I could use my variable timeLeft, right?
Spread operator ftw 
You'll just need to alter your code, as at the moment it looks like your targeting the element itself rather than the content inside. Adding **.text\(\)** at the end of your selector should solve this. var timeLeft = $("#sub-header &gt; div:nth-child(2) &gt; span:nth-child(1)").text(); Then you should be able to use one of the above functions by passing through your ***timeLeft*** variable.
Which of the files is 3kb?
Basically this is what I have. Currently the banner that I need to change colors in the if statement is always green, whether over or under 1 hour. Adding .text\(\) didn't seem to help but it also didn't break it. `var timeLeft = $("#oops-sub-header-view-shipment &gt; div:nth-child(2) &gt; span:nth-child(1)").text();` `let convertToSecs = function(timeLeft) {` `return parseFloat(timeLeft) * 3600;` `};` `if (convertToSecs &lt; 3600) {` `banner.style.backgroundColor = 'red';` `} else {` `banner.style.backgroundColor = 'green';` `}`
Interesting. I just looked that up and it's like a Chrome console helper function. Neat. 
But isn't iterative better because you don't have to worry about the stack overflowing? Or is that only in some cases?
Unfortunately Java and JavaScript have absolutely nothing to do with each other. The names are unfortunate because it leads to a lot of confuses. You should post your question to /r/java.
Dumb title, great read. Learned JS using this and JavaScript: The Good Parts. Both very much worth the read.
I don't think I've ever used most of these, only Sets for the same reason as you. I guess I just take a more don't use something fancy if you don't need it approach, but it could be just me.
If your function (&amp; language) is tail-recursive you don't have to worry about the stack blowing up.
looking at the console.log I get `ERROR: Execution of script 'Flashing header' failed! banner is null` 'Flashing header' being the name of the script. I'm not sure exactly what's going wrong here.
You're storing the function in the variable but not actually running it. You'll need to turn it into an immediately invoked function with the following change: let convertToSecs = (function(time) { return parseFloat(time) * 3600; }) (timeLeft) ; If that doesn't work are you sure your initial targeting of the element with the time in it is working? Maybe try experimenting by console logging the value of timeLeft with or without the txt() suffix to make sure you're picking it up before going ahead with any of the following code. Or in your console,log window, you can try to access the function directly to see if it's working l by typing "convertToSecs(4.5)" without the quotes to see what's returned. Is there any way you can put an ID directly on the span? That also might make it easier to directly target that element and make your code a bit more fool proof. :-) 
How do you think the compiler makes your recursive function run on hardware that can only do iteration? Converting to iterative code just means implementing the stack frames manually. 
Wanna have nightmares? Async recursion with promises!!!
`for..in` can iterate an Object. Mostly, if you use string keys, it's a matter of taste. `Map`s do have better read performance, though. On the other hand, Objects have more backward compatibility.
Not just you - me too. I'm not really sure how any of that crap makes my life better. 
In short, parse out JSON file, modify what you need to, and write out the result.... Append won't help you here. const puns = fs.readFileSync('/.puns') // figure out new_id and payload puns[new_id] = payload fs.writeFileSync('./puns', JSON.stringify(puns)) Or, re-evaluate using JSON. You only have a `message` key there, why don't you use a text document? With text you can append the new message, then the "id" you have as the key currently is the line number. You probably won't need to read the file initially either to figure out the id, etc. just append the new line. Also, completely unrelated - but don't use `Sync` methods outside of loading code (i.e., below `require` statement is fine, but inside a function you'll have problems at scale &gt; 1)
It's a great resource to have, as it's one you can trust. But it doesn't go much above and beyond the basics. 
I think that a lot of people think that way because they're already used to using `Object`s as `Map`s and `Array`s as `Set`s. To me, using an `Object` instead of a `Map` is like trying to nail in screws. If you came at it with a fresh approach and were taught how all the tools worked before your started to form habits would you still carry on hammering in nails?
How deep do you want to go? Things are abstract for a reason.
Thank you
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [louischatriot/nedb/.../**README.md#browser-version** (master ‚Üí aa3302e)](https://github.com/louischatriot/nedb/blob/aa3302e5dcefa471431901a8f3fe63e532a5a7b2/README.md#browser-version) ---- 
Coming from Python, using a mutable key looks scary. What happens when you use a dict as key and then mutate it? I guess what I mean is, is it actually the reference to the object that is the key?
I mean sometimes you do..... 
&gt;The good news is that every recursive algorithm can be implemented with iteration. Yeah and every algorithm ever can be implemented using only assembly, so why don't you fucking use that? Who needs these stinky high level languages that make it ***simpler***?
Yeah bro, fuck recursion, let's spend 30 hours converting simple algorithm so we can run it iteratively even though JavaScript has tail call optimization.
html method replaces content of the element. You are probably looking for the append function!
No, I want to replace the content of the element, if I write append then it will add all the json in the `&lt;p&gt;` tag
npm install ‚Äîsave-dev eslint
I use `WeakMap` in a similar fashion: attach data to DOM elements (same as `jQuery.data` but more efficient and not bothering with attributes). There's a case when Map's syntax is more convenient than bracket access: `reduce` as the map is returned when you set a value. `WeakSet` suffers from the impossibility to iterate over elements, which greatly reduces the use cases. 
Hi friend, Let me try to help you here. I was in similar position of yours a few years back. You want to use JS to build games, because it's the only language you get it, and any complicated lang like Java or C++ is kinda out of your mind (my guess) To be honest, JavaScript is not that powerful to build games. If you study a few computer science classes you will know that, a browser runs on top of an operating system. The javascript runs on the browser. If you are using a framework like Phaser, that means it will run on top of Browser JS. So this means Your Code &lt; Phaser/FrameWork &lt; JavaScript Engine &lt; Browser &lt; Operating System &lt; Power of your PC/Device. As a result you will see very basic 2D type games are possible with HTML5 and JS. **When you build a game in JS, you will learn a lot but you wouldn't play it do you? your friends wouldn't play it, do they?** You are limiting your potential with the limitation of the browser and JavaScript. I suggest you look into C++ for making games. You see if you build with C++, you can run it directly on the windows and it will have a great performance. Making a game in JS is as much complicated like building a game in C++, or any other languages out there. So why limit the performance? Remember, that the languages are not that difficult to learn and master, it's the thing you are building that matters. JS is best suited for web development stuff. Some little mobile like games here and there. **C, C++, Java are the real deal when building cool games.** C++ has many libraries you can use to build games. See this guy makes small games and shows it off: https://www.youtube.com/watch?v=N60lBZDEwJ8 ^This type of basic 3D graphics is a dream to achieve in Google Chrome with JavaScript. Try making little games without big game engines like Unity or Unreal and get the hang of games. Once you are satisfied with your skills, use an engine. Hope this helps.
It's not impossible to do it in assembly, what's your fucking point?
Do you have any education in Computer Science? If not, take a few lectures from Harverd CS50, it will help a lot: https://www.youtube.com/watch?v=y62zj9ozPOM&amp;list=PLhQjrBD2T3828ZVcVzEIhsHVgjANGZveu Also you can look into how websites work: https://www.youtube.com/watch?v=e4S8zfLdLgQ You can look into Douglas Crocfords lecture on JS and the history behind it, how it came into life: https://www.youtube.com/watch?v=v2ifWcnQs6M His site on JS: http://crockford.com/javascript/javascript.html 
It depends. Think of sort algorithms. Some algorithm's complexity are severely reduced by using recursion. 
Thanks for including these stats.
Here's what I ended up doing and it works!`let time = $("#oops-sub-header-view-shipment &gt; div:nth-child(2) &gt; span:nth-child(1)").text();` `const justTime = parseFloat(time)` `let seconds = justTime * 3600` `console.log(time); //xx:xx hours` `console.log(justTime); // xx:xx` `console.log(\`${seconds} seconds\`); // 123456 seconds` Thank you for all your help, I'm super green when it comes to javascript. This little bit of code is going to make my life so much easier at work.
wold love to know who here is using parcel already in enterprise / larger apps. i only ever see "watch how i try parcel" but nothing implemented on a real project.
https://leanpub.com/javascriptallongesix/read opened my eyes!
babylon seems to be better optimized for lots of assets, I tried to put lot of untextured cubes(thousands) to the scene and three had significant framedrop.
I am currently using parcel in production on a few projects at work. It takes no time to set up and runs smoothly in all projects that i am using it
First, you register the click handler inside the success function? Second, you loop over the response and i assume you want to put every result out. But you overwrite everything every iteration. 0 - iteration: &lt;p class="newNews"&gt;0&lt;/p&gt; 1 - iteration: &lt;p class="newNews"&gt;1&lt;/p&gt; 2 - iteration: &lt;p class="newNews"&gt;2&lt;/p&gt; But you want: &lt;p class="newNews"&gt;123&lt;/p&gt; i guess. So replace $(".newNews").html() with $(".newNews").append() and you are fine.
&gt; few projects at work How big of a projects are we talking? 
Nobody wants to steal your code, they are either happy to pay for a license and support, or they will use an open source thing. By all means sell it (and you are really selling a license and support), obfuscate for some extra piece of mind but don't stress too much about all those web app thieves out there that absolutely need your source code.
We use cypress in the next company i'm joining in few weeks, thanks a lot for this! This will help me get started with cypress :\)
&gt;How big of a projects are we talking? The answer we will never get. 
There's two kinds of impossible. Theoretical impossible, and practical impossible. I'd assume every programmer cares only about practical side, and rightfully so. I mean, it's not impossible to break SHA1, SHA2, but it takes so much time, that ***practically*** it's impossible, same with recursion vs iteration. Or will you spend weeks just to rewrite an algorithm interatively to boost your ego?
Do you seriously ask for legal advice on reddit?
Greetings, i think i have the perfect solution for you. Check https://jscrambler.com/ We are the top #1 solution to protect JavaScript applications! We have also a feature called anti-tampering and anti-debugging where you can set the debugger to break if someone tries to use it on your application!
Just read the post I replied to. No one will rewrite recursive functions willy nilly. I haven‚Äôt claimed anything like that. 
TL;DR it's not possible to rewrite every recursive algorithm iteratively in real world programming conditions.
It's really not that difficult to understand, to make it very simple then check the below: var arr=[1,2,3,4] $(".arr").click(function (e) { e.preventDefault(); arr.forEach(elem=&gt;{ $(".a").html(elem); }) }); On click put the element in `class="a"` which is a &lt;p&gt; tag. Now this will always give me "4" inside the &lt;p&gt; when I click the button. But I want to first click the button then it gives me "1" then click it again it gives me "2" then click it again it gives me "3". No need for it to be in the same order also, I just do not want it to keep giving me "4" always. I'm sure it is something silly that is missing in the code..
well then, i would keep track of how often you have clicked the button and only get that index of the response. Like: let counter = 0; if clicked -&gt; counter++ and you set the text with $(".newNews").html(response[counter].news); $(".person").html(response[counter].author); Although, you would have to check if response[counter] exists. I wouldn't recommend fetching all data all the time, if you only want one single dataset to be displayed. Fetch the one you want and display it.
True, however you then need to know how to convert recursive functions to tail-recursive functions. When and if that happens, we will go from arguing about whether recusive routines are easier or harder to understand, to arguing about whether rewriting functions in tail-recursive form makes them easier or harder to understand.
https://medium.com/@michaelsholty/give-parcel-a-try-you-may-like-it-75cd12a2bfb8?source=linkShare-f365f9c1608c-1526985466 I wrote a similar article, with less technical detail :)
It‚Äôs fine on any sized project, if it is put together well and in a sane way
I usually have ideas for sideprojects, but i dont have the motivation to set up webpack everytime and when im at a point where my project is at a reasonable state, i switch to webpack. Note to self: Get to that point with a sideproject.
Why are everybody so obsessed with "zero-config"? For reasonable large project, you would quicky end up with needing to configure something specific. So why strive to zero-config, if the "reasonable small config" is well good? 
I Wouldn't say Angular is \_hard\_ its just more opinionated. and while true that the react ecosystem is currently pretty large, \(and many jobs are available for it\), over time, it will level out, but currently from what i have seen in my local area is that lots of cheap react roles at new startups etc, BUT you get better paid angular jobs at larger enterprises. Though, tbf its a framework; use whatever is right for the job. As For Game Development in Javascript, its possible and there are a few different game\-engines written in JS here a long list: [https://github.com/collections/javascript\-game\-engines](https://github.com/collections/javascript-game-engines) Focus on your vanilla JS experience, and game\-engine of choice. 
I think you need to calm down. "This guy," me, has been using Lisp since the 1980s, and while I am far from an expert on recursion, I think I understand it well enough to write a Scheme implementation that performed TCO with trampolines and another with CPS. TFA clearly states that I find this subject interesting. Nowhere does it state that iteration is better than recursion. Had you bothered to read it, you would find that it goes out of its way not to tell you that you ever should convert recursive routines to iterative routines. Somewhere buried under your "edgy" profanity and dismissive posturing are some good points, but when you wrap them in rudeness, you do your ideas a disservice.
This still does not answer the question. We get all this vague non detail without any kind of baseline or anything and you are supposed to evaluate? I could apply your statement to just about every programming language in existence. &gt; It‚Äôs fine on any sized project, if it is put together well and in a sane way \-Literally everyone about every technology ever ;\)
Then change the title to match your idea, dumbass. I won't read something that makes no fucking sense in it's title, why would I expect anything else than bullshit in the rest of it when the title implies that whoever wrote it is complete idiot?
That's why you use real language for the job instead of trying to drag javascript around trying to solve every problem you could come across, Node isn't the only environment for serverside solutions, get over yourself.
Alternative title: User attempts to brigade when giant of the industry tries to take a package name from a small dev.
I would use the Dom on top of the canvas. I has all you need! Do you have any reason not to?
Good. It's his name/package. Why should he be bullied into giving it up?
Or middle ground: there's really a deep problem in node packages namespacing.
So "fake news", it's actually "(Least Important)"?
Yea, that would work. Thx! 
For the good of the many?
you've never worked in a corporate environment, did you? i for example cant really try it on our enterprise size application since we have a few guys from the webpack core team as partners. so I'd have a hard time explaining to our technology headofs why we all of a sudden wanna switch to parceljs. "personal" projects, tend to lack the size, complexity and requirements to really battle-test parcel. and overcomplicating things just for the sake of using a new trendy tool is for morons and medium.com bloggers. especially since the industry standard **is** webpack, whether we/you like it or not, the amount of people contributing to webpack will ~~always~~ at the moment be more than people contributing to parceljs. there's things like - webpack dev server + configuration - tree shaking - expose loaders - [insert framework name] cli integration (create react app, vue-cli, ...) all build on webpack - loader configuration nesting - loader support for brand new frameworks/languages (how fast is the integration) everyone keeps saying "yeah yeah, parcel does that too and even better" but I've yet to see it used in a consumer facing / enterprise sized project.
What does it matter how many users the project has? Are we gatekeeping what packages are worthy? That's what you get for using a global namespace without reserved words. 
&gt; For the good of the many? How is bullying someone "good". They can quit being pedantic pricks and call their package workerjs or node-worker or any other bullshit. Hell, they could fucking pay the man for his property. He's not obligated to give you or them or anyone else anything. Fuck all you guys crying about how kids are being bullied in school and then you pricks come online and hide behind a keyboard and do the same shit to grown ass adults. Fuck you. Fuck your "many". Fuck Node. OSS isn't a requirement in this community. Be happy this dude is willing to give away any of his code, regardless of how "Active" it is. Let me see your million star repo you piece of shit.
Are you trying to put this guy on blast for not letting himself be bullied into changing the name for his project? Seriously, he's right, just use a scoped package, they kind of look more professional anyways.
Oh noes, you're shouting that I am a dumbass. Dude, you are toxic. Let's assume that everything you are thinking about programming is correct. Do you really think that throwing a temper tantrum and screaming insults at people you don't know levels this forum up? Or drags it down? Do you really think that people reading what you are saying will be inspired to learn more about recursion and languages with a sane approach to design? Or will they mistakenly think that everyone interested in such stuff is an arrogant, toxic, and insufferable boor? Your behaviour is harmful not just to /r/javascript, but to the functional programming community as a whole. --- PSA to everyone else: Almost everyone intrested in Haskell, Clojure, and other FP languages are not like this excrescence. They are polite and welcoming, and will not belittle you if they think that they know something you don't. They often talk about how things like TCO or CPS are implemented, then connect the dots to explain how async/await is implemented in JS. Come on in, the water is fine.
Giving up the name and node using it are two different things: https://github.com/nodejs/node/pull/20876#issuecomment-390912852
It wouldn't surprise me. NPM is a shit company.
Ive worked at Disney, fanduel, and a couple start ups. It‚Äôs not good form to challenge people on reddit to ‚Äúyou haven‚Äôt worked at a place like this before have you?‚Äù Because you might be doing it to someone with a lot of experience. What loader support do you need for frameworks? For languages, yes it works for all forms of JavaScript you could be using, like typescript or ES whatever version. It has a built in dev server that supports even hit reloading It doesn‚Äôt support tree shaking but it is being actively worked on. Anyways my point, although poorly communicated, was ‚Äúyou should try it to form your own opinions about it‚Äù instead of waiting for someone else to tell you theirs. It‚Äôs going to work for whatever project you have, but it will have trade offs like most decisions do.
its got nothing to do with NPM
This is a really bad image for the community...
What? How so? You just linked a fucking post saying NPM is going to take some guy's package name.
Good point. I have actually to include a Secret key into the code to connect to an API that will return whether or not the user is valid and if the subscription is not expired. I could do even worst, access the MYSQL database from the web application using its IP address and user/password, it is perfect to attract hackers who want to get into the database of users. 
I like to traverse my trees iteratively with a custom stack. Makes some things easier, such as traversing algorithms that operate with a state, without having to pass that state down in each call.
With your experience you should understand where [u/kitsunekyo](https://www.reddit.com/user/kitsunekyo) and I are coming from. For one thing I just don't have the time to look into every "it's great ! you should use it !" thing out there. So I look for actual data and facts from others who maybe have. I call this research.
I‚Äôm not saying it can‚Äôt be done, but go ahead and traverse a tree structure with loops..
That's an interesting use case. I would read a code snippet or post about it with interest.
If it isn‚Äôt broke, don‚Äôt fix it. If webpack or rollup do the job well, then there‚Äôs no need to switch. 
/r/Titlegore. 
Oh just hijack this thread for blog promotions. 
I do understand. Maybe there isn‚Äôt enough data out there to help you understand if parcel will work for you. Compared to webpack, it has a lot less contributions and usage. /shrug 
So how would they be able to take the name from him without NPM's support?
So is it bad to refer to an article that is super relevant to the thread? Only if you wrote it yourself?
Yeah it‚Äôs hijacking a thread for self promotion. 
thats a very "austrian" thing to say (we tend to work like that in politics). the result is zero or stale progression, no competition -&gt; no need for looking at uncomfortable / hard issues. having only one option for anything is never a good thing in the business world.
Alright my bad, I didn‚Äôt mean to self promote as much as just say ‚Äúhey I wrote something tangentially related too‚Äù. I‚Äôll delete it
its a medium article, how whe fuck is that blog promotion? XD the linked article fits the topic perfectly and gives another view at the same thing.
So, stupid question then. How would they be able to take it from him without NPM's support or if they don't need it because it's some internal only package, why does the name of his library matter?
Presumably, the internal module will be prioitised over now one, making his package moot. So it doesn't really matter and he can keep his name (but it will be useless)
Presumably, the internal module will be prioitised over now one, making his package moot. So it doesn't really matter and he can keep his name (but it will be useless)
So they want to supersed his package name, regardless of NPM or his wishes? Holy fuck, that's so much worse!
"The greater good" Aaaaaand we're back at fascism. 
again, this has nothing to do with NPM. They have no say here and they aren't affected by any of this. Yes, they are considering superseding the name __in node__ regardless of what the _npm package holder__ wants. 
I assure you, JavaScript is not that easy. It may appear easier on paper, but it has lot of quirks. It's just like another programming language out there. 1. You should look at programming from a higher perspective. How computers work etc. Look into some computer science CS50 lectures and see how programming works. You will see that all langs are similar with different syntaxes. 2. The language and the path really depends on what you are trying to achieve. If game is you thing, then looking at the list of game engines in wikipedia shows most are done in C, C++ https://en.wikipedia.org/wiki/List_of_game_engines If you want to build websites, then use JavaScript. 3. You can't combine JS and C++ as far as I know. It all depends on the implementations. Lets say you learned to build games with both JS and C++, then you will notice C++ lets you make much better performing games. Let's say you want to build web applications. Then JS is the default language in web development. Others langs for web development are PHP, Python and Ruby.
That code splitting hack is ugly af. Part of the point of build tooling is to avoid having build-related code intermingled with application logic, and here the author has decided to wrap all splittable code into a multi-layer HOC. That's a shitload of boilerplate as the app scales.
Hmm. I guess one reason could be that you force a redraw if you change the UI. Depending on how your drawing code for the game looks like and how big of a resolution you use, this could affect things. With that said, I usually do. This, draw UI on top :)
Yeah, I thought I made it clear that I got that realization in my last post. I don't see why you felt the need to repeat it all again. This is shitty and sets bad precedent. The original request was fine. The subsequent bullying and threats to just take it anyway are bullshit. We need these toxic individuals out.
I agree with you, but it's probably just a reaction to the amount of config we have to do in JS to benefit from all of the nice things. You have to set up lots of configs like Babel, Webpack, dev servers w/ hot\-reloading, Git, CI, deployment configs, build tools like Gulp, boilerplate to have packages talk to each other, test runners, linters, documentation generators, etc. before writing even 1 line of business logic. It cluters the code with "background noise", that you'd still like to access every now and again, but you'd like not to have it in your face all the time. However, replacing it with "magic configs" leads to "magical bugs" and countless hours spent unwrapping that magic when you need more control.
Well if you're drawing your UI in the canvas you have to write your own redraw function and handle what gets updated and what doesn't, in javascript, so there might not be a huge performance boost to not use the native CSS engine... But you could actually do both and have another transparent canvas on top on the game canvas and draw you UI there, so you dont have to worry about what's underneath. But again HTML/CSS is made to create UI, and you can make it responsive easily, which might not be the case in pure canvas/javascript.
I see this criticism a lot, and it's pretty unfounded. Let's break down your "list". - Babel - yes, you should be using a transpiler so you can write modern JS. Not that hard to set up. - Webpack - yes, you should be using a build tool. Webpack can appear complicated if you look at a config for a mature application, but if you're just starting out, it doesn't have to be bigger than 10 or so lines. - dev servers - webpack has this built in. 5 lines of code, and you're done - w/ hot-reloading. Not necessary - Git - seriously? You have to "set up" git? This isn't even a JS thing. It's any programming project. - CI - again, not a JS thing. And you don't need to worry about this at the start. Just once you're ready to deploy. And if you're using something like webpack, it's only a few lines of CI code. - deployment configs - redundant with CI - build tools like Gulp - redundant with webpack - boilerplate to have packages talk to each other - taken care of with a proper build tool and package manager. Nothing to do here. - test runners - not critical right off the bat, but highly recommended. And unit testing is part of every programming language, not just JS - linters - Should be built into your IDE. Nothing to do here. - documentation generators - not necessary at the beginning
Yes, right, of course. You could also use preconfigured template projects. However, these configs all have an additional complexity they add to the mix and I think you're just choosing to ignore what people complain about. You can respond with "tough sh\*\*" to these criticisms but saying they are "unfounded" is not true. I didn't say any of these configs are hard to do, just that they are "background noise". And btw, none are necessary \(not even git, if you believe it, which you do have to set up with an \*.gitignore specific to JS\), but they provide lots of benefits that most consider too good to pass.
Thank you for what you said.
I'm not ignoring these criticisms. That's why I responded.. I'm saying they're unfounded criticisms of using JS. There are real problems with JS, but bootstrapping a new application is not one of them. There are countless tutorials, guides, and templates you can use to help get you started. These are non-issues.
I see this like a shit attempt to embrigade more people against this developer. The position of the OP is clearly in favor of taking it to him by force.
Imagine you bought a car but you couldn't just get in and drive, you had to look under the hood and fiddle with this and that. Then the computer inside needed setup and and the steering needed calibration. Zero-config, IMO, is being about to drive the car off the lot as soon as you buy it. If you want to config it later go nuts but the first experience is tailiored to be something useful. For perspective, the opposite would be IKEA-config (I made that up just for you &lt;3) where your first experience is a ritual of setup. 
There really aren't enough. Many times I've looked for boilerplates that simply don't exist. I'm in the process of creating some of them right now. It takes lots of prep time. I didn't say anything about not using JS because it's hard to config. My point is that "zero\-config" is an attraction for good reason. Also, a few points about your list: &gt;build tools like Gulp \- redundant with webpack If all you're building is a simple JS bundle, sure. However, a lot of the times you need to do a lot of preprocessing and postprocessing, and you do those with Gulp or something similar. &gt;boilerplate to have packages talk to each other \- taken care of with a proper build tool and package manager. Nothing to do here. Ever had to hook up React and React Router, and also make sure SSR still works? The package manager and build tool have no help to offer. &gt;test runners \- not critical right off the bat, but highly recommended. And unit testing is part of every programming language, not just JS I didn't mean just the simple unit testing. I meant stuff like integration and E2E testing. &gt;deployment configs \- redundant with CI I for one don't do delivery/deployment in my CI. I have a separate CD pipeline for that, which is based on deployment configs. &gt;not necessary at the beginning Why would config spread across the development cycle be better than all config upfront? &gt;Babel \- yes, you should be using a transpiler so you can write modern JS. Not that hard to set up. Yes, just another layer of indirection. Why would that cause any issues?
Webpack 4 is very good now, few lines of config with reasonable defaults (i know its partially because of the parcel introduced simplified config). Actually, our webpack configs are close to this one ( https://github.com/ArcanisCz/xianxia-game/blob/master/webpack.config.babel.js ) which is very reasonable for me. What bothers me still a bit, is dependency clutter in package.json. For example, our react projects in work in recent years: 1) default webpack, but 2 specific entry points 2) default webpack 3) webpack integrated for Jira plugin needs 4) webpack integrated for Liferay theme needs Parcel's default would be insufficient after a week on each project. 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [ArcanisCz/xianxia-game/.../**webpack.config.babel.js** (master ‚Üí 61dcee3)](https://github.com/ArcanisCz/xianxia-game/blob/61dcee30f05a0a5d4cfea8eb9fd4851bfc99a06a/webpack.config.babel.js) ---- 
First thing I would make sure is that the require('./flatbuffers.js') statement is returning what you expect. Debug or console log that return value, before you pull .flatbuffers off of it. Maybe the path is wrong, or something like that. 
You learn whatever you need for the job you are doing. 
And all of those modifications that you mentioned are choices that you make. You don't have to separate out your CD from your CI. You don't need e2e testing. You don't have to use React and React router. Sure, you can use all of those tools and frameworks, but you don't have to. You can get set up extremely easily and quickly right at the beginning, then add in more tools as you develop. Not all of that is necessary to get started. For example, I prefer Aurelia and webpack. I use their command line tool `au new`, set a few config options, and I'm developing within 5 minutes. If you want to use something more complicated and involved than that, go ahead, but it's not necessary at all.
Hi /u/AcrobatRome, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
So it's not a problem if we ignore the people who have these problems? My list wasn't meant to represent things that everyone uses, but to show things that are used by lots of different people. Just because your setup is really nice and simple, doesn't mean everyone enjoys the same luxury. These configs appear in lots of popular project setups. Even if it is easy to get started, you still have to maintain those configs and adapt them when requirements change. It's not necessary to use anything other than plain vanilla JS, but that's not how we build software past the 500 line checkpoint. You can avoid some configurations, but not all.
So it boils down to whether the language is a good fit and whether the author of the code prefers the recursive style over an iterative style. Same can be said about declarative vs. imperative programming styles. JavaScript is not a great language for recursion due to the lack of TOC. It‚Äôs also not a great language for developers due to the lack of static types and consistent type coercion. But it‚Äôs a language that runs on a ton of devices so it‚Äôs a fantastic compile target. So why not use another language that gives you what you want for your developer experience (whatever that might be) and compile it to JS. The compile output can be optimized for the runtime - not for humans. Take BuckleScript for example: you write your code in OCaml (or reason). It gives you pattern matching and TOC, dead code elimination and more. When compiled, a tail call optimized recursive function will be a while loop. So is this about recursion over iteration in general or just an individual preference. I personally like recursive solutions and would chose a language that gives me the tools to code in my comfort zone. 
Tried it on a Django app once, the main drawback was that it didn‚Äôt let you specify static folder
Tree traversal is a joke and isn't an argument to go out of your way and rewrite recursive algorithms iteratively, it's very simple, instead of calling the function again, you drop entire logic into the while loop and remove the function call, since you can access the next node directly, done. There's more things than trees you know.
Use `Array.prototype.map()`
&gt;Or will they mistakenly think that everyone interested in such stuff is an arrogant, toxic, and insufferable boor? Your behaviour is harmful not just to /r/javascript, but to the functional programming community as a whole. I don't care what people think and this is most retarded way to guilt trip someone I've ever seen lmao. Liking recursion has nothing to do with how you act, shows how much logic you have.
Now do it in assembly so you'll at least put in some effort. For fun.
Sorry I missed that. The simplest option would be to manage a separate array with the filter values. I'd create 2 methods with the sole responsibility of adding/removing filters from state to help manage it. You can also move the current object under a new key on state to help demonstrate its purpose. eg: state = { filters: \['Rick', 'Tampa', 'Illinois'\], serverPayload: { demographics: {}, geography: {} } }
No, you're still misreading. I responded to a comment that said: &gt; You have to set up lots of configs like Babel, Webpack,... Key word is: **set up**. The person I responded to was talking about initial application set up. I agree that JS applications can get complex, sometimes unnecessarily so. But bootstrapping could not be easier, if you want it to be.
Thanks. So based on the additional information I provided earlier...would this even assist me?
&gt; How was the previous posters code horrible? If them using unassigned ternary with side-effects doesn't piss you off, I'd be afraid to see your code as well. Also it's not their code, they blindly copy/pasted it from the first hit on Google.
I'm unfamiliar with the Keypress library itself, however I have thought about this exact same problem in passing a few times, so I can give you a rough example of how I would solve it, and hopefully it'll help you in your app. So, the basic problem is you have contextual keybindings that you need to unbind and rebind depending on where the user is focused on the webpage. And, looking over Keypress's docs reveals it has two functions that will make this fairly easy `register_many` &amp; `unregister_many`. Basically, you'll want to store the which keybindings are currently bound, and when the user's focus changes to a new keybinding context, unregister the current keybindings, and register the new context's keybindings. In some quick and dirty code: const listener = listener = new window.keypress.Listener(); const noteEntry = document.getElementById("note-entry"); const playbackOpts = document.getElementById("playback-options"); const keybindingContexts = { "note-entry": [{ keys: "ctrl c", /* omitted */ }], "playback-options": [{ keys: "ctrl c", /* omitted */ }], }; let currentKeybindContext = undefined; [{ key: "note-entry", el: noteEntry }, { key: "playback-options", el: playbackOpts }].forEach(({ key, el }) =&gt; { el.addEventListener("click", () =&gt; { if (currentKeybindContext) listener.unregister_many(currentKeybindContext); const keybindings = keybindingContexts[key]; listener.register_many(keybindings); currentKeybindContext = keybindings; } }); Now when either of those elements are clicked, it will unregister the other's keybindings and then register it's own. This can be modified to then store the contexts and the current keybindings in a central store if you're using something like React/Redux or Vue/Vuex.
I didn't mean set up as in initial application setup. I meant set up as in configuring. "You have to configure lots of configs" sounded stupid to me at that time.
I guess the prospect of needing to learn all these things that's daunting, though it is easy after you do learn it. 
I feel like I'm not sure what you're asking.. Something like this? https://codepen.io/anon/pen/bMZZRr?editors=1010
Pretty sure .map() qualifies a loop. In order to really do this without using a loop, you would have to define each label, without using any iterative functions.
I'm curious now, can you give me an example where turning a recursive function to an iterative function is harder than that? I remember I've also done "L-Systems with memory" iteratively, but they're basically just trees as well. 
They are not optional. Unless your initial configs magically takes care of 100&amp;#37; of all of your requirements. You don't need all of them, but you need some of them.
I agree with a lot of the negative comments saying that this probably wouldn't be good for any kind of reasonably sized project. However, this thing is fucking awesome for Phaser.js (game library). Parcel sets up the server and allows you to use ES6 modules without writing any configuration code for either. Not a *huge* deal, but definitely a time saver. Thanks for the article, OP
Use a WeakMap whenever the keys are transient; for example, a WeakMap of DOM nodes \-\&gt; state objects. If you are dynamically creating and discarding DOM based on user actions, you can use a WeakMap to save any state associated with that DOM. When the DOM is later detached and discarded, the browser can garbage collect it and the state object, if both are stored only in a WeakMap and have no other references to them.
Yeah, essentially avoiding `map()` or similar functions that constitute a loop is what I'm interested in doing. This is the closest I've been able to come up with; let myArr = sampleData.myObject.myArray; [ myArr[0].label, myArr[1].label, myArr[2].label ] = ['a','b','c'] It achieves the result but I'm hoping that there's something more in line with my original question.
We're splitting hairs with the semantics of our words, I feel like. By "they are not optional", I meant having no configs is impossible unless you have very few requirements that are covered by a tool \(which most people don't\). By "you don't need all of them" I meant that the list I made is not a mandatory one, and some of the items will be missing depending on the project requirements. Is it really me saying 2 different things? Git has configs like .gitignore and .gitremote, no? I didn't mention grunt. E2E tests might be optional to you, but not to a lot of other projects. It still is a lot of configs that must be looked at when you change or upgrade something or have different requirements than the norm. Choosing to not use some tools to avoid configs is side\-stepping the problem.
yeah that's pretty bad.. Although async/await makes it a little better.
I think you messed up your demo classes a bit...
I'm starting to think all online webdev communities are a vortex into an echo chamber of insanity.
 It's really convenient for scene graph traversal where you might want to keep track of things and then maybe stop once a certain number of triangles were rendered, or you may want to return an array with all the visible nodes. let numTriangles = 0; let numNodes = 0; let visibleNodes = []; let stack = [scene.root]; while(stack.length &gt; 0){ let node = stack.pop(); if(numTriangles + node.numTriangles &gt; maxTriangles){ continue; } if(!insideFrustum(node)){ continue; } numTriangles += node.numTriangles; numNodes++; visibleNodes.push(node); stack.push(...node.children); } But what's even better about it is that you can also easily replace the stack with a priority queue. Now, instead of traversing by depth-first order, you traverse by the size that the scene node occupies on screen, and then potentially stop when you've rendered enough detail. let priorityQueue = [scene.root]; while(priorityQueue.length &gt; 0){ let node = priorityQueue.pop(); // do stuff for(let child of node.children){ let priority = screenSizeOf(child); priorityQueue.push(child, priority); } }
As the article talks about, TCO is only implemented by Safari right now, so while yes, JavaScript supports it, you can't really rely on it right now.
If i understood correctly the only way to achieve a play / pause functionality would be one that would pause between setTimeouts. So if a animation is ongoing and user presses pause, it would animate till the end and then pause before starting the next animation. However since that is probably not what you are looking for you might want to look into Web Animation API. Animation in WAA is similar to how they are described in CSS, but it would offer tools to play / pause / chain animations. The technology is still experimental, but there are polyfills available that would fix the issue (depending on which browsers you need to support).
I dont feel like you should be posting this here...
Rereading the chain, I actually did mean the initial application setup. So oops! :D Kinda forgot about it in the endless chain we made. I think we derailed when the conversation changed from the initial config of projects to *"getting started in application development in JS"*. I made the change with you and got confused about your point. I shouldn't have replied with *"My point wasn't about the startup of a project."* nor the other comment where I just blatantly say I didn't mean the initial application setup and which got rightfully downvoted. So my bad. Anyway, the point of the post still stands in that configs are a painpoint in JS. You've found a solution in creating tools that do the config for you, but that doesn't cover nearly enough project types and requirements. If you still want to keep the discution going, I think this will clarify a bit about where we diverged.
I'd have a separate flat array kept in parallel to the existing nested object. The objects within that array contain enough information to look up the corresponding entry in the existing nested object. const flatObject = { category: "geography", key: "city", value: "Gainsville" }\); filters = \[flatObject, ...filters\] This flat array can be passed to components to render the first four items and the remaining items in the dropdown. And any component rendering this data also has enough information to call a "on filter deleted" prop that has enough information to look up and delete the existing nested object in the correct place.
&gt;But, is it really "zero-config", if you need to remember that "this file must be named xxx and placed to src/"? There are no naming conventions for files (other than extensions) for parcel and the only folder you need to remember to put things in is *not* in your output folder. Also, any folder locations (such as your output folder) are overridable. The parcel philosophy seems to be sane defaults and simple overrides (which is what I think we really should strive for, especially for a focused tool such as your build tool).
I really like Dan Abramov's talk about this at Zeit Day in Berlin. [Here's a video.](https://www.youtube.com/watch?v=G39lKaONAlA&amp;list=PLBnKlKpPeagkaVtpmZNK6XiWw8yNZmCxL) He talks about the line between boilerplates and toolkits and the overhead of extensability. Plus he's just a great speaker, worth the watch.
But you do need to have them, don't you agree? Made by a tool, or written by you, you still need a config for Babel and Webpack, at the least. A lot of people don't get the choice to not use some tools. So saying they are optional ignores that there is no choice in a lot of cases. One\-time config, until you need to change something. I'm not adverse to configs, I just think they are noise that prevents us from looking just at the business logic.
&gt; Anyway, the point of the post still stands in that configs are a painpoint in JS. This is what I just can't get on board with. I feel like people who say this don't really do active JS development. I work in modern JS development every single day, as do all of my co-workers, and this is *never* an issue. All of our configs (and we do have a lot, but they have a purpose) work just fine, and we almost never have to touch them. And when we do, it's always an easy update. Most of our configs are just JSON files. So this leads me to believe that people who say JS configs are a pain point either a) don't actually do active JS development, or b) don't know how to properly create a config file.
Certainly a [thornier subject] (https://softwareengineering.stackexchange.com/questions/184654/ive-been-told-that-exceptions-should-only-be-used-in-exceptional-cases-how-do) than I would have thought :) Seems to be people in both camps. Thanks for your comment Usually when I'm trying to find something in a system, I know it **should** exist. If it doesn't exist it's likely a programming error. In programming error cases, I'd prefer an exception thrown ( or rejected promise ) that bubbles up. I'm not so sure anymore what the library author should do (lots of factors to consider such as consistency of return types with the rest of their api) but if it were my code base I would either * overwrite the method * add a new one called *findExistingOne* that does have the exception throwing semantics 
Here's my webpack and babel config (they're combined in my webpack config): &gt; vendor: ['babel-polyfill', 'bluebird', 'jquery'], That's it! Configs are the easy part of development. Most of them are just JSON, key-value files. I just can't get on-board with "configs are a pain", because I work in JS development every day, and I have a lot of pain points, but configs have never been one of them.
I can agree that maybe the more vocal voices are probably just not that experienced with JS. But when you need a more custom setup that goes outside of simple boilerplates, you realise just how many things you have to configure to make these things work. For example, I had to setup Electron, React, Redux, ReactRouter, ReduxObservables. There doesn't exist any boilerplate for these tools, so I had to make one myself. Building packages in JS that go for non\-web runtimes is also filled with configs you mostly have to write yourself. Another time when you have to fight configs, is... when you want to configure things \(duh\). Sometimes the defaults just don't arrange to something you like \(say the folder structure\). But making these changes can be impossible unless you start fresh as the configs are interdependent and the changes are something non\-minor or not visioned by the author. Tools in JS also tend to have arbitrary restrictions in them. For example, I had to fight Yeoman with my Docker configs to get it to generate a template inside a container. All of these make a "gulf of execution" whereas what you intend to do \(write business code\) is far removed from what you must do to achieve it \(write weird configs so that the tools do what you want them to\).
The idea that 50 downloads per week doesn't count as active is some serious gatekeeping. Sure it's not a big hit, but that's not nothing. People are using it. "Active" implies that it's some kind of abandonware. 
&gt; If i understood correctly the only way to achieve a play / pause functionality would be one that would pause between setTimeouts This is exactly what I'm working on at the moment because there isn't any real problem to wait until the current setTimeout stop.
The most important thing is the quality of the guides/documentation you are reading. Spend time researching what other people have found the most helpful and you'll save yourself a lot of time
I don't know if you ever owned a car, but there's a whole lot to configure and maintain.
Read the docs, then the code, usually while working on a project where the tool is useful. 
I think the key point is ‚Äòthere exists‚Äô. Yeah sure, theoretically it‚Äôs possible. But, I won‚Äôt be the guy trying to be fancy with an iterative approach when recursive solutions are generally so trivial to implement.
This is the way to do it. Games are written this way. There's a single infinite loop that listens for input and redraws the screen. Over and over. Ensure that there is only ever one of these loops running at once.
It's funny how webdevs get all haughty about syntax, then seek to avoid recursion. It's like a guy with a garage full of expansive tools he has no idea how to use. A couple of months ago I wrote a tough recursive function. Took me all day. It times, I was guessing. I eventually got it. I did a total fist pump. I was happy for like 2 days. Recursion is hard, but that's why it's fun. Why would you want to be a developer, and not want to write nifty, challenging to create code? 
Just a hobby project to learn things, no productive reason as to why. The problem for me is I've avoided web programming and stuck to doing backend stuff for so long that I feel very lost on the front end. So many terms, and frameworks, and package managers, and this and that, it's nuts. So I decided to try and make a hex viewer for one of my toy virtual cpu's just to start learning, but i still havnt found exactly where to start.
I use it in replacement for a different solution that I already know. For instance, let's say that you were using React instead of Angular but wanted to learn Angular. I would take a small toy project that I built in React ( the think I know ) and convert it over to Angular ( the thing I'm learning ). If you don't have any experience or prior art in regards to the thing you are learning, I don't really know of a "quick" way to learn. I usually re-write the thing myself ( as basic as I can ) to understand how it works. 
Linux is the IKEA-config of os. Mac is the zero-config.
I tried it and thought it sort of sucked. Sticking with Webpack for now
Can you elaborate on "researching what other people have found the most helpful"?
Lets not get bogged down with all that configuration... ;)
If all of that is required to get a car then my analogy is not a great one üòÅ. But, my dude, parcels users are developers. That makes us the end users for parcel. The point of parcel is not that you can't ever configure it, the point is that, off the shelf, it's already useful because it comes pre-configured. There's zero overhead to starting it. Do you see what I mean? It's all about initialization.
Sure - Quora is usually a pretty good place for reading about specifically what programming guides are best, I'm sure you could find some stuff on Reddit also. Just figure out what gets endorsed and what doesn't. Not that much different then researching, say, how people felt about a college they went to 
I agree with [DarleneWilhoit](https://www.reddit.com/user/DarleneWilhoit) that if you just want to jumpstart JavaScript learning, jumping into canvas with a hex editor is kind of strange. Still, I'd highly recommend looking at examples on CodePen. Here are some hex editor CodePens (all using DOM elements, not canvas): * [Untitled by Richard Denton](https://codepen.io/isdampe/pen/YQoVaK) * [HEX by masik](https://codepen.io/masik/pen/ACpGl) Apart from that, if you want to dive into canvas, here are a couple of my favorite CodePens: * [#neonHexagonsWeekend](https://codepen.io/DonKarlssonSan/pen/YXJJNo) * [Dog Puppet](https://codepen.io/andyhullinger/pen/zBYZOK) * [XOR Rectangles](https://codepen.io/terabaud/pen/XebXZX) * [Space Invaders Generator](https://codepen.io/Gthibaud/pen/gWzLPE) 
There's a guy on youtube called traversymedia. He does a lot of "crash course" type videos where he won't explain much about the code he's typing. It's a sort of "accept what you're seeing for now, you'll understand it later" type deal. Doesn't work for everyone of course.
I used to just jump into coding, too. Now, I tend to find the official tutorials and read through them. If that isn't enough, I'll find a beginner course and go through it. Even just a couple videos is usually enough to get the basics. Then I start coding. To me, the key is to get coding with some minimal efficiency as soon as possible. I don't worry about making mistakes at first. I'm definitely going to make mistakes. But I'm not coding anything that I need to really worry about for a long time... And if it magically turns out that I do need to worry about that, I can (and will) refactor it later.
Wow okay, this took off more than I expected (in the author btw). Great to see people discussing this stuff. Happy to answer any question people have in parcel. I‚Äôd like to say odd the bat, I live webpack to and use it at scale. I‚Äôm not hating here üòÇ
&gt;If you came at it with a fresh approach and were taught how all the tools worked before your started to form habits would you still carry on hammering in screws? No, probably not. And its likely I don't understand the differences / advantages. Maps and sets just aren't things I use in the code bases I've worked on. Do you know of any good tutorials or perhaps videos that explain the pros and cons of each, the differences, and why one should use them? If you don't, that's ok. I'll just google it sometime.
Thanks. I will see if this approach will work!
To illustrate, here's the usual implementation of the Ackermann function: function A(m, n) { if (m === 0) { return n + 1; } else if (m &gt; 0 &amp;&amp; n === 0) { return A(m - 1, 1); } else if (m &gt; 0 &amp;&amp; n &gt; 0) { return A(m - 1, A(m, n - 1)); } } And one that doesn't use recursion: function A(m, n) { const s = [m]; while (s.length) { m = s.pop(); if (m === 0) { n += 1; } else if (n === 0) { n = 1; s.push(m - 1); } else { n -= 1; s.push(m - 1); s.push(m); } } return n; }
Right, DOM (or "Document Object Model") elements are regular HTML elements like DIVs, SPANs, TABLEs, etc. for text and document structure. It makes more sense to build a hex editor with those. FYI: Canvas is a specialized HTML5 container for pixel-based graphics. SVG is a container for vector or object-oriented graphics. You could build a text-based UI in either of those (maybe easier in SVG) but they are more geared toward graphs and drawing.
No worries, its still on the long list of interests :D Thanks for the info you did provide, I should have appreciated that up front.
Well, since you didn't specify "extremely hard", even fibbonacy using dynamic programming is a lot harder than probably the easiest conversion that you just mentioned.
I think it's blatantly clear what I mean by "professionals" vs. "end-users". You're ignoring the *clear intent* of what I say, and you want to nit-pick my wording. You're wasting my time, your time, and the time of the people reading this thread.
Why are you trying to do it this way? What's the actual problem that you're trying to solve?
Yes, it's possible. But you should not hold script you can't edit / modify yourself. 
I tried it out on a little React/TypeScript project and found some issues with source maps and other weird compile issues. It probably works beautifully if you have exactly the right conventions, but for me, a 5 min Webpack config solved all my issues.
That fibonacci one was fun, I got to around fib(40), which took 1.5s, and fib(50) just didn't respond anymore. The iterative one, on the other hand, computes fib(1000) just fine. So in other words, this is a perfect example of why it is important to know how to transform recursive algorithms into iterative algorithms. 
That's the thing: I believe there are other tools that do better at this. Create React App is zero config, and then if I need to change anything, I run "npm run eject" and I have all the config at my fingertips. In this respect, it seems good to me to provide a baseline that people can use at the drop of a hat, and then give them the option to configure it.
Nice I haven‚Äôt messed around with VR yet sounds like a ton of fun.. good luck!
https://javascript30.com is a great free course that incorporates ES6 functionality with some of the more meatier aspects of JavaScript. Highly recommend going through it. 
Thanks. Sorry if I came off like an ass!! I was responding early in the morning with no coffee, and on my phone so it was a low effort response.
Essentially just trying to avoid having duplicate calls to the same object/array while adding (or updating) the values of child properties. The main reason is to make code as compact as possible while still clearly defining intent and being readable (which for all intents and purposes, the idea shows an array being updated with values from another array). I just figured something along those lines would be possible without a loop or manually calling each index manually.
This is a great suggestion. You already understand what it does and how it works, now you just need to translate it to a new set of tools. Most importantly BUILD something. 
Considering how much I see people fiddle with Mac's to get them ready for development, I'm not sure that I agree with that. Hmm, maybe the analogy is context dependent.
I was planning to chexk that out.
That‚Äôs how I felt after I read my responses again haha
Long term plan in react ,node react native. And can i ask in what situation are symbol usef cuz i dont get it.
I know lit-html was developed by the polymer team, but it's something totally separate that can be used on its own, right? I just came across it with that CodingPhase guy [on Youtube](https://www.youtube.com/watch?v=p2dEzI3450s), but lately he's been talking a lot about Polymer, too, and I haven't really been watching because I'm not really interested in Polymer at the moment.
I think `map` is really what you want. If you're just trying to cut down on function calls, that's a case of extreme premature optimization. You're definitely making a lot more work for yourself, especially if you ever need to change the length of your arrays. You can define your intent quite well by using a function with a meaningful name. ``` // (Array, Array) -&gt; Array const mapLabels = (arr, labels) =&gt; arr.map( (val, idx) =&gt; ({ ...val, label: labels[idx] })) const myArray = mapLabels(sampleData.myObject.myArray, ['a', 'b', 'c']) ``` You could go a step further, if you'll need to apply the same list multiple times, by currying that function. ``` const mapLabels = (labels) =&gt; (arr) =&gt; arr.map( (val, idx) =&gt; ({ ...val, label: labels[idx] })) const mapAbcLabels = mapLabels(['a', 'b', 'c']) const myArray = mapAbcLabels(sampleData.myObject.myArray) ```
Yea definitely is. I'm speaking from my own experience with Macs and Arch Linux which I've found to be pretty similar to the stereotypical caricatures of the user experience with each machine.
For the record, "npm run eject" will leave you with very messy and needlesly bloated config. Been there. Decided to use our own webpack config from day 1. It saved a lot of time.
I'm not too familiar with polymer, but it looks like they're using lit-html as the templating engine for it starting in version 3. You can certainly still use lit-html on its own.
No. Code is a liability not an asset. Anyone who treats it as an asset has messed up somewhere. 
I'm saying we're not untrained consumers, we're professionals. Simple and clear. Configuration is the last thing that should scare us.
&gt; When I was a junior, I always thought the best method was to start directly coding something with the new framework/language. Wow, we're the opposite people. I have no commercial experience but am always skeptical about frameworks until the benefits of that framework is made clear.
why do you need typescript for this? shouldn't it not matter?
I implemented Actionscript 3's ByteArray in Javascript with AMF0 and AMF3 support [https://github.com/Zaseth/ByteArray.js](https://github.com/Zaseth/ByteArray.js) 
powershell uses backticks to enable special characters in strings like tabs or line breaks \`t \`r\`n Currently the ability to render them is super broken
I would recommend that you take some time to practice what you‚Äôve learnt so far. There are plenty of coding challenges out there if you google around a little, or check out codewars. If there‚Äôs one thing I‚Äôve learnt it‚Äôs don‚Äôt move on to the next thing too soon. 
Read the thread - no one is taking anything by force, nor have I advocated anything if the sortto
I hope to god you‚Äôre being sarcastic.
Ad hominum.
Seeing titles like this makes me a little sad, because it's social engineering targeted at getting your attention. **It was done on purpose**
My understanding is that most of us JS devs use `String`s for keys in maps and objects that don't need all the extra features of `String`s. `Symbol` also has some added benefits: &gt; The data type "symbol" is a primitive data type having the quality that, values of this type can be used to make object properties that are anonymous. This data type is used as the key for an object property when the property is intended to be private, for the internal use of a class or an object type. For example, keys of type symbol exist in various built-in JavaScript objects. Similarly, custom classes can also create private members this way. The symbol data type is highly specialized in purpose, and remarkable for its lack of versatility; https://developer.mozilla.org/en-US/docs/Glossary/Symbol
Now how's nit picking üòÇü§£ 
The strategy depends on how large the technology is. Learning Angular will take a lot longer than learning Redux + Thunk. Learning to be proficient in Angular might take longer than you expect. I recommend taking online courses on Udemy.
Thnx
it doesnt? thats some breaking issue right there :/ thanks man
if its anything mvc related, do a to-do app. you touch virtually every fundamental on the frontend/backend when you're making a todo app that can create, edit, and delete a todo. 
var recursion=function(){ console.log("Recursion? we don't need no sticking "); recursion(); }
The ones that crop up every week or so. I guess the real term is 'library' for most of them, since they are a collection of functions and not a full wrap-around framework to build an application within. I've been using Node for a bit now. Not sure whether that is a framework really. I'd like to look into Vue in the near future. But the default is always vanilla JS since it always feels better to work out something complex first before using a library that does the same thing.
Missing a comma on line 4 ;)
Curried. https://hackernoon.com/currying-in-js-d9ddc64f162e
[`map` isn‚Äôt a loop](https://gist.github.com/robotlolita/7643014)
I don't know the last update. Even if it is a few years old it still has a lot of information.
It has been restricted by your hosting provider ;)
Great! thank you !
&gt; intelligence is to be assumed. &gt; intelligence &gt; /r/javascript ü§î
It is important to know how to do the conversion, it's also important to know that recursion is useful.
drdrero is right, you need to assign an incrementing variable to access the next item each time you click the button. Have a look here: https://codepen.io/anon/pen/KRYdrB
In OP‚Äôs case everything is a loop then, as it needs to change n elements
Nice! Thanks for this code &amp; perspective - I think this solves my problem. In my case the app accepts keyboard input to change regions (some listeners will be global) but the logic is the same, and this this is great for me to study. As it happens, I'm using Vue &amp; Vuex. If you have any further thoughts on using this concept with those, I'm all ears.
I think this was a poor response, but I do think you are right in this discussion about the example of a car and buying it - I would compare the selection of a car and it‚Äôs peripherals to finding parceljs and alternatives and comparing them. As for the part of developers being end-users for this is absolutely correct, no customer or a site visitor is going to care what was used to bundle the result. Lastly, I believe a good tool would provide out-of-box some sane defaults, and when I need to start doing customization to my build process I would have the opportunity to have an in-depth config if need be... but who decides ‚Äúsame defaults‚Äù?
... Have you never adjusted your mirror, seat, steering wheel, radio preferences ...?
md5 https://www.npmjs.com/package/md5
Intro and example redundancy. I learn the same exact thing from anywhere between 3 and 20 sources until I feel extra comfy.
look for docs/books that talk about the architecture, I believe that if you don't know how something works you'd never be an expert in it, but sometimes it's kinda hard to find what I'm looking for.
I'm not involved with parcel and I've never used it so all my info is coming from their site here so it's by no means an expert opinion. But no, it's not a glorified template generator. It's more like webpack with a set of default plugins already configured. It's also includes a framework for allowing you to declare asset types and how to process and package them as well as plugins support. So theoretically it's just as configurable as webpack but it doesn't require you to write a config because it loads those plugins from the `package.json` dependencies array. Basically, the plugin authors are now responsible for writing the default configurations for their plugins instead of passing that task off to the users. The downside here would be that a plugin author may not accurately anticipate your usecase in which case you would probably have to fork the plugin and add the necessary changes yourself or muck around with it in your `node_modules` (which is rarely a good idea). Personally, I don't think this is a big issue because most plugins I've used in other systems have a standard config that most people use anyway. Ultimately, if you've already got a webpack setup configured that works for you, I see no benefit to switching to this tool. If that's the case you probably already have a stack you like to use and a `webpack.config.js` that you copy from project to project. Webpack also has the benefit of having a more mature community so there will be more available plugins. On the other hand, I could see this tool being excellent for people who haven't made the switch to webpack and are currently using something like gulp/grunt for their build process. I can also see this being useful for blog tutorials where the author doesn't want to have to waste time teaching the readers how to set up a build process before getting to the meat of the tutorial. Ultimately, I don't think parceljs is less expressive or configurable than webpack, it just does some intelligent things to move the config burden to the plugin authors and uses the `package.json` to transparently load those configs.
Neither, I think. It doesn't create extra threads but it also does not block the current thread. It just pauses execution of the code awaiting the async results. &gt; So, while the whole interpreter doesn't block (other Javascript events can still be serviced), the execution of the specific async function that contains the await statement was suspended until the promise that was being awaited resolved https://stackoverflow.com/questions/46004290/will-async-await-block-a-thread-node-js
Congratulations on reintroducing in-line JavaScript.
&gt; You can use Node.JS with JavaScript to accomplish the project. It‚Äôs just my personal preference to do it with TypeScript. 
Post it man, more than happy for people to share related stuff on here üòÄ
Write a post on medium about it.
What do you mean by "everything," what are you learning from, and what are you trying to learn? Those are important questions, because often when someone starts learning Javascript, they're really doing three things: 1\) Learning programming 2\) Learning the Javascript language 3\) Learning web development Most people learn #1 and #2 together \_anyway\_: Learn programming in the context of a particular language. Your code is isolated: Everything that happens is something you wrote. Make an array. Assign it to a variable. Reverse the array. Sort it. You're in control of everything that's happening. But Javascript is different. You \_can\_ learn it like that... But often, "beginner's" resources will skip the "learn to program" part and go straight to "start building a web app." The web browser has a \_ton\_ of stuff going on that's got very little to do with "pure programming," and everything to do with the various intricacies of how the internet works: \* HTTP requests. \* The DOM. \* JSON. ...The list goes on. These have nothing to do \_directly\_ with Javascript. They're just things that you need to know about if you want to make web apps. Kind of like in theory, you don't need to know anything about license plates, insurance, or speed limits to drive a car... But in practice, if you want to use a car to get around, you need to become familiar with those things. So if you're finding that your learning resources make you feel like you're following a recipe instead of learning to code, maybe try some more fundamentals\-focused resources. Here are my ideas: * [Eloquent Javascript](http://eloquentjavascript.net/). It's quite "learn to program" focused, for a Javascript book. Hardly mentions the web. * Try a different language, then circle back around to Javascript. I like Python, and [Automate The Boring Stuff](http://automatetheboringstuff.com/) is one of my favorite books for beginners... But pick whatever. * If you want to get \_really\_ low level and learn how computers even \_work\_, you can try something like [Nand2Tetris](http://nand2tetris.org/). You start at the transistor level, adding layer after layer until you have a playable Tetris game in a language that you created.
Define good, you need this to be cryptographically secure, or fast, or maybe intentionally high collisions? What is your use case?
I absolutely second this. In most cases you'll end up with a good code base of self-written pieces from the course and assignments which you'll take as reference later. The pro of this is, you already wrote it yourself and the remembering process kicks in.
I am learning different data structures and wanted to practice using hash tables. Good in this case just means "good enough to practice". Not for commercial use or storing any sort of sensitive information :\)
A mostly pointless project, I wish they would just contribute to Rollup instead! That is made for simple set-up, maybe people are all holding back waiting for the '1.0' version? I hope to just use ES6 modules and a bash script in the near future for simple projects, probably Vue CLI for anything more complex, and that does it all for you :) Here is my Rollup default... job done with just one extra plugin and auto-prefixer, nothing complex and full tree shaking / watch mode compiling along with CSS minification / auto-prefixing / source maps... : import postcss from 'rollup-plugin-postcss'; import autoprefixer from 'autoprefixer'; export default { input: 'src/main.js', output: { file: 'dist/bundle.js', format: 'es', // change to 'iife' for production sourcemap: true, }, plugins: [ postcss({ plugins: [ autoprefixer(), ], sourceMap: true, extract: true, minimize: true, }), ], };
Start from working examples and adapt them. Don‚Äôt be afraid to dive into the source code of the tech. Refactor often in the beginning. Oh, and start with 20 years of programming experience across a dozen languages :)
Yeah, SHA\-512/256 as @Skhmt suggested \(better would be with salting\), you could use this package: [https://www.npmjs.com/package/crypto\-js](https://www.npmjs.com/package/crypto-js) \(In node Environment\)
Configuration after you know you like it and configuration before you know you like it are two different experiences bud. I believe one of the values of zero-config approach is that those unfamiliar with build tools get to see value early with a low marginal setup cost. 
depends on what I want to do &gt; quick and dirty; read Quick Start docs, write a test for my use case, integrate &gt; some degree of proficiency is required. read manual or all available documentation if small module, write a test for my use case, integrate &gt; need to know it well enough that I can explain what its doing to someone else: read docs, watch some videos and read a few articles on it, get a feel for how other people are using it in production, document my thoughts on it compared to other alternatives, write some tests for my use case, experiment with it, integrate at the end of the day I'll pretty much only know it for 14 days even in the best case scenario because I use so many random things
Make sure you install react 16.3
that is fantastic! I'm inspired to make one myself
I use [https://github.com/getify/You\-Dont\-Know\-JS](https://github.com/getify/You-Dont-Know-JS) to learn Javascript, I would take a look, it's really big and very good explained!
I bet you could put together a machine learning system that could look at a large collection of configs, rank options popular by occurence, and group them by language, and framework. Then it could "recommend" you a config and whole dev setup based on what it sees from others. Or, just upload them to GitHub and create an ordered list and voteü§î. Or, get more granular and upload snippets of config, but force the snippets to be accompanied by comparisons and explainations. Toss in voting and rewards and you've got a competitive, crowdsourced documentation platform üòÇü§£
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [darkskyapp/string-hash/.../**index.js** (master ‚Üí 5767caa)](https://github.com/darkskyapp/string-hash/blob/5767caa3ab2aec701ddbd69b3aced7aaebd9b483/index.js) ---- 
You're being downvoted by whimsical buffoons. OP said he needs a hash for practicing hast table algorithms, md5 is perfectly fine for that.
For hash tables you don't focus on "secure" (or salts) like most people are responding with, you want speed and uniqueness, that's all. A lot of people hear "hash" and default to cryptography context, rather than hash tables. Something as simple as CRC16 or CRC32 work for what you're doing, [this stackoverflow is probably up your alley](https://softwareengineering.stackexchange.com/questions/49550/which-hashing-algorithm-is-best-for-uniqueness-and-speed)
You can look through my created posts on reddit to find it, it‚Äôs not too far down. I‚Äôd rather not get policed by people not wanting articles posted and fearing that threads are getting hijacked 
nice
Oh wow I searched for material design and found exactly this project just last week. I thought it was something since a long time already. We live in a strange world.
https://github.com/ArthurClemens/Polythene is a great alternative
You might be correct, it's all perspective. However, I find this repo so easy to navigate from the api docs straight to source code. And the source is really easy to grasp. 
&gt; It has taken us two years to do it, but Material-UI v1 has finally arrived! From the article. Basically this *has* existed for a long time, but v1 means "stable" in typical semver fashion and they weren't comfortable labeling it as such. I also believe I've seen a number of "competitors", but I could be wrong as I've never used any.
Earlier versions have been out for a long time
There are different strategies for handling flakiness. 1. good wait* methods for selectors, and smart-wait which by default waits for element before interacting with it. 2. specify to retry a test or (even better) to retry a potentially flaky step. 3. specify rule to retry failed steps with specific errors. See https://codecept.io/basics/#retries 
Is there any JavaScript in the project aside from the compile target? It's posted in the /r/JavaScript sub so I'm assuming it does.
I didn't vote on this reply, but I wouldn't use MD5 for this use case even just because of the collision rate.
Interesting, i'll have to consider it for my next project. Thanks for the explanation!
There is a fork which integrates chakra instead of v8. [https://github.com/ninemcom/Unreal.js\-core/tree/chakra](https://github.com/ninemcom/Unreal.js-core/tree/chakra)
I made a PR on this :D -- first and only open source contribution. Hope to do more in the future.
Do people actually use material design for their web apps?
I mean the whole documentation site is built in it. Also they have some big demos linked at the bottom
I iterate through guides i find online. First I find one I think I'll like, then if I come across a concept I don't get, I stop and look for clarification on that concept, maybe finding a better guide in the process... Maybe not the best method but it works for me.
Unfortunately. The unfortunate side effect they don‚Äôt consider is as soon as Google moves on to something else and updates all their stuff - the companies using material are going to look out of date. 
It acts just like promises, for example: (async () =&gt; { const response = await fetch(url); console.log(response); })(); is basically the same as fetch(url).then(response =&gt; { console.log(response); });
in case you hit comments, the above is a link because its crossposted
I'm using it in a fairly large enterprise app using React and SCSS. It is a single page app (react-router), so I can't speak to that, but so far I've been very impressed. No issues, quick.
I'm not trying to be a jerk here, but you know its a dev when the comment starts with "I mean..."
Note that these are not "official" Material components - that would be https://material.io/develop/web/, although it's still in development 
Async/await is just a wrapper (essentially) around promises.
If the PHP file is properly hosted, you'd do something like what's described here: https://stackoverflow.com/questions/29775797/fetch-post-json-data The fetch API is still used, just with options to tell it to use POST and how.
It‚Äôs quite popular for back office apps that need the android look and feel, but you don‚Äôt have a lot of web design people. Landing pages and such, it seems to only be used in a heavily modified fashion.
When I was noob level, YouTube, later Udemy. At a bit more advanced level I instead preferred to read official docs (often just README files on GitHub). But lately, to understand idea behind concept better I'd watch conference talk about the technology. 
i remember using this about a year and a half ago and it had some pretty major bugs with components like inputs. hopefully it has matured and improved since then. im glad it wasn't left to die
Honestly node can even scope everything in the future so they don't run into problems like this. '@node/fs', '@node/http', '@node/http2' even sounds all fucking cool. No need to chase after og's anymore like they're xbox gamertags.
And alas that project's fucking cool, just starred and forked it. 
.... and there's a Component Demo section that I did, in fact, completely miss. So, the sarcasm is *much* appreciated. 
Nope, I wasn't correct. There's a Component Demo section that has visual examples of everything. It'd be nice if the Demo section and the API doc section cross-linked to each other for each component, so you could see both how they work, and what they look like, together. But that definitely satisfies against my original complaint. 
It's more like you're a carpenter and you buy a new screw driver, but before every new job you have to rebuild the screwdriver to work in that use case. At some point when all the tools in your toolbox have to be built for every new job, the total time spent configuring and coding is *more* than the time it would take to just do it yourself. Probably the larger the scale the more beneficial it would be to just do the setup so you can scale well, but for small and medium projects it gets a little tiresome I guess.
If you're practicing with hash tables then your hashing algorithm doesn't matter. You may even want to cause collisions to test the way you handling them A simple hash function like the one below could even suffice input =&gt; input % n // where n is the size of your array In uni we'd practice with simple functions like input =&gt; (2 * input + 5) % 11 // where n = 11 In the real world you will never implement your own hash function. Coming up with a good hash function is a hard problem.
Hi thank you: I saw this, I realize it is optional because it works on my end with it, however I am just curious, is this telling the powers to be that a JSON is being sent or that the respond is going to be a JSON ? headers: { 'Accept': 'application/json', 'Content-Type': 'application/json' }
amazing product. thanks to the team!
I was about to suggest FNV-1a. I‚Äôm excited to see it did so well in the tests in that thread. 
It does feel awkward at times. Especially for a desktop app, but what are the alternatives? Bootstrap which is a matter of opinion but doesn't feel any better to me. We use a combination of material and our own pseudo material components we've come up with. They aren't as bulky and are a little more focused on presenting data.
This is a partial implementation of some version of the material spec as react components. That being said, it's the best implementation I've found to date.
I agree, but I suppose the developers who use Twitter's Bootstrap won't mind using this.
I thought the same xD
 fetch(URL, {headers, method:‚ÄôPOST‚Äô, body: JSON.stringify(yourData)})
sounds a little crazy, but i'm all for strength in numbers. it sounds like you're still in the early/planning stage?
Yes and no. I was a WordPress developer a number of years ago, before switching to full stack JavaScript. I've been seeking a better node/js solution ever since, and it fails to present itself. I've been working here and there \(when I can find the time\) on several integral pieces to the puzzle. I'm focusing on some very low level things, like a js\-based version control \(I don't like git\), a better module system, etc. After all, npm and git are basically the same thing...
https://pouchdb.com
I achieved something similar with velocity.js and an iterator that used a single JSON paramer file. The file contained all the element id's, start and end times, and tweens. It was 3 or 4 years ago... not sure if I could locate source but the approach wouldn't be too hard for you to implement.
Bullying isn't good. I asked a question.
dana \- a simple, small and framework\-agnostic database migration tool \(CLI\) [https://github.com/ramhejazi/dana](https://github.com/ramhejazi/dana)
Or you are going to be rekted
I used to agree, but not so much anymore: what makes your project so special that it needs non-standard configs? I've learned the hard way that the further away you go from community conventions, that the more problems you will eventually run into. I'm therefore now of the opinion that you can better stay as close as possible to a standard setup, and only deviate from it when you have a damn good reason to do so. A 0 config should be able to perfectly capture the community conventions, it should just work for 99% of projects.
blueprintjs.com
I‚Äôm a professional developer. I have been developing stuff since the 80s. And I like where this trend is going. Sure, I know how to deal with webpack and its overly complex configuration system, but I won‚Äôt miss it if I don‚Äôt have to deal with it anymore.
Unrelated but... Don't use `innerText`.
Skip angular and go for Vue or React. Here‚Äôs a game that is written in canvas using react https://github.com/svenanders/ReactJSBlueprints_Chapter10 Or learn Phaser (which is excellent)
&gt; I can't figure out how to get JS to let me do something AFTER the refresh You can't. Maybe if you explain more in detail what you're trying to _achieve_ (the goal behind this, further beyond, not just "I want to keep a checkbox checked"), you could get suggestions on how to solve your problem.
Doesn't look very standard to me. Are you saying you're keeping data as &lt;span&gt; tags loaded into memory? That's kinda weird and very hacky as you said so. Arrays have very useful methods that you can use to query deep inside objects. You can look up Object.keys too if you don't want to change your dataset into array of objects.
I'm not aware of anything prepackaged that does all that, and building them would certainly be possible; Stacks; MEAN, MERN Server: Express, spife, feathers Client/views: EJS, Angular, React, Vue Comms: socket.io, Primus Marketplace: npm has themes and component packs for different frameworks, as does GitHub I've not looked into it, but I'm sure JIRA has an api that can be utilized. I'd also imagine NPM will have a wrapper for the API available. Full stack JS isn't like the WordPress or most big CMS space as it doesn't have the marketplaces they have. It is really a case of building it from the ground up. I'd suggest creating some spec docs and designs.
First, your data should be converted to JSON. I'm sure selecting all span elements will return it, but running the jQuery map function over it should work if not. Then, you can use the JavaScript .map(), .filter() and .reduce() functions on the data. I'll try to post a code sample when I'm at a computer.
That sounds like spectrum.chat. Their code is open source and their stack is exactly what you‚Äôre looking for.
Well this is my thread (I‚Äôm the author of the original) and if you wanna post it go ahead man. I have no issues with it. I‚Äôll go check it out today though! 
All TypeScript is distributed and consumed as JavaScript.
No prob, you have to ‚Äîsave or -s for it to be saved to your project folder. -dev tag makes it a dev dependency 
Why not use innerText, out of curiosity?
I have a question about this. As OP i am beginner myself. I have done basic JS courses and now i am half way through JS30. The thing is, i try to code exercises myself (not all ones because for some i just do not know how to start). But even if i do it by myself, when i advance through 3 courses i forgot all about what i learned in that course. If i go back to do it its like starting from 0. Is this normal? Should i repeat each exercise till i know all and to code it by myself every single one or is it ok to learn just a thing or two in each exercise? I do not know how to approach and learn through this courses. And yes, they are quite hard for me, but when i see final code, it makes sense. Any tips?
https://www.reddit.com/r/javascript/comments/8l281i/recursion_we_dont_need_no_stinking_recursion/dzdps2v/
Go back to your cave, little troll.
Sounds simple but this right here is great advice. Bust out a todo list and by the end you'll have grasped most of the basics.
&gt;REEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE Ok
Never claimed to have TL;DR of the OP comment but it's okay, be retarded.
I tried it. And threw it in the trash within a week. IMHO it‚Äôs too rigid, meaning that there is not much room for change outside the google material design pattern. I found myself fighting the components at every turn, from behavior to CSS tweaks. It is very easy to startup and use, but implementing the component framework/design will handcuff an application.
So, something like this should work; let arr = []; $("span").each(item =&gt; arr.push(item)); arr.filter((x,i,a)=&gt;{ return x.attr['data-color'] === 'green' &amp;&amp; x.attr['data-name'] === 'bill'; }); Could be made shorter I imagine but the details of that are up to you.
We like ant.
Or better yet use [https://github.com/material\-components/material\-components\-web\-components](https://github.com/material-components/material-components-web-components) \- which is maintained by google \(this repo should stabilize soon\), and those components will work across all frameworks, not only with react.
Material is just a design specification with official and unofficial implementations, of which you can diverge as little or as much as you want from. For alot of UI interactions, uniformity is good as users can quickly identify familiar elements they've seen elsewhere. So generally you see alot of material on forms, signups, etc, where minimizing friction is a bigger priority than unique design.
To be clear, Material is just a specification, and the "official" components should be thought of as a reference implementation. So by design it's meant to spread out with a large number of different implementations, and not being "official" doesn't really matter
Nice repo. Really appreciate that.
What's the difference between `&lt;div e-click=` and the native `&lt;div onclick=`?
The "Accept" header tells the server that its response should be returned as JSON. The "Content-Type" header tells the server that the message body being sent to it is JSON.
Not nearly as hackey as you think. Ive totally written small transforms to turn objects into vdoms and query with cheerio
So just check it? If it's not accurate \(probably depends on required precision\) you just report time with offset from other app.
interesting. I've never seen a single components library targeting two DOM rendering frameworks.
\`\&lt;div onclick=\` would execute code, it would also bind it on \`xy.onclick\` which isn't really nice... I've just made this for fun, maybe someone has better ideas but I think it's an better solution for this scenario :\)
Sweet, someone redid all of my university CS homework assignments in ES6 and published them to GitHub!
JavaScript doesn't fit on the button on mobile.
 let db = [ { name: ['bill'], colour: ['red', 'blue'], value: 47 }, { name: ['jane'], colour: ['blue', 'green', 'white'], value: 13 }, { name: ['mary', 'jack'], colour: ['red'], value: 35 }, // ... ; let by = prop =&gt; val =&gt; item =&gt; item[prop].includes(val); let byColour = by('colour'); let reds = byColour('red'); db.filter(reds); 
Use Quagga.pause()
That's sort of the point of it though, a team of ice designers came up with the pattern and you aren't supposed to stray from it.
I don't see the issue. `+=` to an outer scoped variable that might also get assigned to by other promises in the meantime *will* be problematic, as expected. Shared mutable state in combination with asynchronous code has always been a bad idea. While you *can* try to get around it by taking advantage of Javascript's single-threaded nature with what you're doing with `alternativeSum`, it's still an easy source of confusion. Better to avoid mutation/reassignment when possible. The problem isn't with `+=`, but with the programmer's problem with asynchronous logic. I would fully expect `x += expression` to always evaluate to `x = x + expression`, and never the other way around. The fact that `expression` might have `await` in it doesn't change that at all, IMO.