If they are running XP and IE8, which Microsoft no longer supports and even encourages users to no longer use any IE version, including 11. That's poor leadership. Leadership requires strategy and mitigation. XP/IE8 dependency demonstrates poor leadership clearly.
&gt; Rewriting jQuery is a waste of my time, period. Keep running back to that strawmen. querySelector is not rewriting jQuery. &gt; Why assume that I'm serving that from my own site? jQuery would be served via CDN. Where exactly did I say you were serving from your own site? &gt; If you want to pretend a few microseconds is a problem go ahead and feel superior over jQuery You're the one that was arguing about time here, I was commenting on your stupid comparison of writing ~60 lines of JS being the same as re-writing jQuery. And I don't feel "superior over jQuery" which is weird phrasing and completely out of left field. I was writing jQuery plugins when you were likely still in school. It was a powerful tool at the time that is no longer relevant. &gt; Don't come back at me with sources like well if they're on a 3G network and the download speed is x it'll actually take like .9 seconds cause I don't care. That's cool that you don't care. Where I work we serve over a billion requests per month to one of the most visited sites on the internet, so I get to think about these things. And latency is part of the puzzle. Developing a UI in jQuery is a special kind of stupid reinventing of the wheel that you're arguing writing 60 lines of code is. 
The only thing that comes to my mind is downtime tolerance, or kind of, and/or confusing. Tolerance because maybe you have multiple URLs in case one fails or is intercepted by an adblocker/antivirus/etc. Or maybe one of the URLs might be down. It might be confusing because the user might reload and see different requests every time. Not that it is difficult to search for the URL or domain in the Network tab of the browser's devtools. In any case, it looks like the code is not very well hidden or thought
This thread literally made me get off my ass and [publish my 2 simple plugins](https://www.reddit.com/r/javascript/comments/azjkso/vanillajs_alert_hover_popup_tooltip_plugins/) to help people reduce their jQuery dependencies. Hope it helps those of you who still use jQuery for alerts and tooltips.
Tldr: &gt; it's extremely important to me, here is an antipattern that shows why 
You don't have to use Array.from. You can use Function.prototype.apply()
Rewriting ANY PART of jQuery is a waste of my time. I guess you needed the verbose version of that sentence.
I think every dev with a little of age used JQuery at one point, and some other comments here do a great job at explaining why the lib became so popular. It’s just less and less relevant with modern developer tools. And I would discourage any newcomer to Javascript to consider learning it.
&gt; Full support for querySelectorAll doesn't automatically mean full support for all CSS selectors. Dude, you are just plain wrong. https://www.w3.org/TR/selectors-3/ The selector specification is *part of the CSS3* specification. And it is [100% supported](https://caniuse.com/#feat=css-sel3) in IE9+. Any selector not supported in IE9 is because it's not a CSS3 spec. It's an experimental feature that may or may not make it into CSS4. This is literally publicly available information.
I'm the author of common-tags, one such library you mention in your "other" section. I read your article at length and you make many valid points, but you also seem to just throw all these libraries into one general basket. common-tags was never about putting code inside strings. It was always about making strings in code look neater because of how template tags include whitespace. If you misuse my library for other purposes, that's on you. 
How would you approach being brought onto a team working on a website that has a lot of legacy code in jQuery? Would you just slowly start rewriting the code or just switch to only using JS for future projects?
I don't like it because there are better alternatives. Once I used React, I only use JQuery for very small tasks that would otherwise require vanilla Javascript.
&gt; Rewriting ANY PART of jQuery is a waste of my time. That's the dumbest thing I've read on reddit today. Congratulations. &gt; I guess you needed the verbose version of that sentence. You do realize the you didn't make the sentence more verbose, you made it an entirely different context in which you are actually now suggesting that it's a good idea to include an 85K bundle in your app to do a single class swap. So not only is it a different sentence, it's stupid advice from someone that, I hope very much, doesn't do this professionally. 
It's really not important to me, just relating the history. Also I'm not showing any anti-patterns, just showing that most don't actually know how much jquery does under the hood, to the point they actually think that a lot of it is now standard. Some of it yes, but actually only a tiny bit. Your characterisation is unfair and ill-informed.
&gt; Unfortunately, I’m seeing a similar trend in the React ecosystem. I’d prefer folks learn to program, and use libraries, instead of considering libraries as “the language”. I dont see that at all. React is a small API, and it encourages good JavaScript.
Use `import * as http from http`. Node API doesn't have default imports.
This right here. The question isn't wether you like or are familiar with an API. It's the cost if using a lib vas writing your own code + the cost of maintenance.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/webdev] [\[VanillaJS\] Alert &amp;amp; Hover Popup (Tooltip) plugins](https://www.reddit.com/r/webdev/comments/azjsd3/vanillajs_alert_amp_hover_popup_tooltip_plugins/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
...you underestimate the size of the typical website's JS/CSS files :D
In my last office, it was viewed as not evil, but just not needed. Especially since we were using Vue.js which has access to the virtual DOM, making jQuery obselete for simple manipulations.
Does it work better if you write 'import * as http from "http"' instead? 
I took over a team not only using jQuery, but using Angular as a directive store rather than for anything SPA. You start retraining your team on best practices and why these are relevant to the specific stuff you’re doing (landing page systems, CMS, apps, etc). You architect a better stack and get rid of what’s not truly needed in it. You build that stack. All new work gets done in accordance of that new stack and, when you have maintenance periods, rewrite the legacy in accordance with the new stack. It worked for us. It never happens overnight.
Older versions have security holes and you'll have to upgrade or replace it constantly if you want to meet compliance. 
IMO, after learning the basics of javascript and markup you should learn some method of writing server side software. Express.js on Node.js will probably be the "least friction" path as you're already familiar with JS. After that you can progress to learning dynamic frontend development and I'd always suggest Vue.js as it's very simple, low friction and as powerful as the other two contenders that are each complicated for a beginner in their own ways. Added benefit is that Vue can be dropped in from a CDN similar to jQuery. 
Oh, for sure. That's not as obvious though.
yeah you clearly don't feel superior to jQuery users lol
What would you encourage one to learn to replace a website full of jQuery? 
The only one personalizing this is you. It's not about my superiority to you, it's about your choice to use inferior tools when better ones exist. When jQuery had it's heyday it's because it was a hammer when everything really was a nail. But you're sitting here arguing you're still using your hammer for screws. You need to be less emotional about your tools. 
Blame stackoverflow for that haha. I have a bad (?) habit of learning stuff while I'm actually doing it and when you search said stuff about javascript on Google, the top answer is always *just use jQuery, here's the code*. It will definitely take time to get rid of jQuery
jQuery if you need to understand the existing code base :) Seriously I have no idea, I think vanilla JS would be a good start, then if we’re talking front end moving to a UI lib such as React or Vue.
jQuery is a library for JavaScript that is meant to be cross-platform. jQuery was initially released on August 26, 2006. This was 12 years ago. The original developer was John Resig. It allows users to select DOM elements using CSS selector syntax. Commonly, the `$` variable is used for jQuery. The jQuery library is bloated. The jQuery library is licensed under MIT. jQuery allows for chaining methods. jQuery is usually a single browser file. This browser file can be served locally or from a CDN. An example of a CDN that hosts jQuery is CDNjs.
Yeah, they’ll bitch about an 83KB framework library but will have no problem sending down a 4MB hero image. 
You mean that extra 33kb which is expanded to 80lb that need to be parsed and executed on every page load? 
This is what I get when I open the page, is this what it's supposed to look like? It's a bit hardto figure out what's what
[https://imgur.com/a/UZVamzZ](https://imgur.com/a/UZVamzZ) This is what I get when I open the page, is this what it's supposed to look like? It's pretty hard to figure out what's what
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/GpYYNrf.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20ei8akvc) 
Oh trust me, I don't. My websites are far from the "typical" (read:garbage) websites. Sadly most devs don't keep such (or any) standards.
Who doesn't hate past?
I understand jQuery fairly well I believe, worked at this company for almost 2 years. But unfortunately I came from an educational background of C and Java, so I learned jQuery much more than I learned JS because that’s what they used at this company. So I think I have to dive into JS and possibly come up with a solution where I can slowly replace the jQuery with JS. We use bootstrap for the front end.
Cached locally, expanded and executed in microseconds...
Try the tutorial here: https://youtu.be/qziN7Ecc_dI . This is what it's supposed to look like but I haven't tested it extensively on Safari. Is audio output working? Can you hear chords when you tap on the roman numerals?
Yes I can, so the app actually works just fine. I think this is more of a UX difficulty, the interface could be use some design. Also, this screenshot is from Chrome, not Safari!
Injecting script tag into DOM from an Ajax call (because why otherwise to have "server affect js state) is an irresponsible antipattern, was so in 2010, and will remain so in the future. 
*cough cough* If you are a web developer at the start of your road and you are happy, remember that this comment shows the worst of all developers. Just because you know C doesnt make Javascript less important. See, the problem is you not the tool. Or react vs angular, or angular vs vue, or angular vs react vs vanilla js. Now just remember we treat every tool the same, with pros and cons. Choose the one right for you and your project. Now go along and go to /r/eyebleach you deserve it.
Yeah thanks for mention it though, I'll try my best to get it fixed.
&gt; What does that even mean? The first tutorial I used for learning jQuery a decade ago stored all application state in the DOM nodes. There was no separation of state and presentation at all.
Yeah, few hundred thousand microseconds 
No, it's not really the correct answer. Jquery still has plenty of life in it. &gt;but as the web apps grew bigger and bigger they become very hard to manage with jQ. Not everything is writing a large web app. In fact I'd bet that most JS that runs on the web is not part of a "large web app". Yeah, jQuery breaks down quickly for large web apps, and shouldn't be used for that, but to say jQuery "had its time" is not quite true. It's still being used extensively for many easy to justify reasons.
&gt; Here's a ~60 line implementation of exactly what .addClass and .removeClass do. jQuery is 85k minified. Not the same thing, now is it? https://en.wikipedia.org/wiki/False_equivalence
There are 3 tiers in an application: Client (UI), Business (ASP) and Data (Database). These tiers need separation because they perform entirely different tasks. Let's give some examples of what happens when we merge these things: I'm tasked with creating an add function and printing out the output to the user. function add(a, b) { console.log(a + b); } Great, task complete. Now, the problem is I need to use that add function when sending out emails. Well crap, we can just add a special case for that, right? function add(a, b, email, isEmail) { if (isEmail) { sendAsEmail(content.replace('%SUM%, a + b); } } else { console.log(a + b); } } You can see how this scales. Everytime I have some new output I need to use add, I create a new if statement. That's why we separate our business logic and ui logic. Now this example is entirely arbitrary, but the more you merge business and UI logic the harder it becomes to understand which is which. So why your Lead may not do something like this, he and all his engineers are *eventually* going to do something similar, because it won't be as obvious that it's what he's doing. To sell this point, find somewhere in your code base that this type of thing happens (it will be everywhere), and show him it after you give him an example like this. The reason we separate our code into units (functions) is the exact same reason we separate our architecture; so each unit (or separate architecture) does one thing *really well*, instead of 15 things really poorly.
Sometimes people are just walking ironies.
"Need" is really broad for newbies who are trying to understand. I read your statement as "it was needed because it was the best tool for the job I needed to do". A professional laborer might say "I need my hammer," to which a pedantic person (I.e. The internet) might say "you could use another whacking device. I can think of other whacking devices." jQuery was the best choice for the majority of pros for a while. Now it's not; it's an artifact for the majority, one that guided the industry and the standards to where they are today.
Is the assignment you got: « remove jQuery »?
Sure, if you use the wrong tool for something, then it doesn't make any sense. Just fyi most "pages" don't even need a state, you know, not everything has to be an application.
Download sololearn on the googleplay store for your android, its essentially rosetta stone for coding beginners 
What do you use JavaScript for on the web when you don't have state? The use cases for this have dwindled dramatically in the last decade.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
&gt; Vanilla JS is more verbose, sure, but it's not hard. I can't think of many reasons where I can justify the added cost of a library like that and would still choose jquery. So your argument is the "extra cost" of a 30KB js library is not worth the time saved avoiding verbose code? You realise the whole point of libraries is reusability to avoid verbosity, right? JQuery is just another JS library. If it has a bunch of functions that reduce verbosity, why not use it? People make out like using it is an inherent evil, or means someone doesn't know JS, which is a rather snobby position to take.
I don't hate jQuery — in fact, I think it's one of the best pieces of code out there. Why? Because its API is just so dang simple. However, for anyone looking for an alternative, I can't recommend starting out with this incredibly simple, but versatile utility library from Wes Bos: - https://github.com/wesbos/Learn-Node/blob/master/starter-files/public/javascripts/modules/bling.js Also, for anyone interested, I created my own utility library too. It does everything you need (selecting elements, event delegation, attaching data) in a very light-weight package. The API definitely isn't as elegant as jQuery's, but it's close. - https://gist.github.com/panphora/b95333ea59e913fea162969390e9c87f
It’s not, but I know how often we use similar blocks of code and I think it’d be advantageous to abstract out the duplicate code. I also obviously won’t be working here forever and think I need to get up to date with es6 for the next place I’m at.
&gt; If you are a web developer at the start of your road and you are happy, remember that this comment shows the worst of all developers. If you are a redditor at the start of your road and you are happy, remember that this comment shows the worst of all redditors. Painting comments with broad strokes shows a weak understanding of the comment. &gt; Just because you know C doesnt make Javascript less important. If you're going to use an an analogy, try to use one that makes sense. I'm literally arguing the opposite: the more complex your code becomes the more important abstracting becomes. jQuery is just an abstraction of existing vanilla JS. React is an abstraction of vanilla JS that also abstracts the work jQuery is doing. &gt; See, the problem is you not the tool. Or react vs angular, or angular vs vue, or angular vs react vs vanilla js. Yes, you are the problem when you're trying to use a hammer to drive a screw. &gt; Now just remember we treat every tool the same, with pros and cons. Choose the one right for you and your project. jQuery is never the right library to use when you need a UI library. Ever. It's a DOM manipulation library. When you *only* need to use DOM manipulation, use jQuery. When you need a fully-fleshed out UI, use a UI library. Your argument is nonsense. I don't need to make a pro-con list to decide if I should use a claw hammer to unlock my window. I can, quite arbitrarily, decide that my hand is unequivocally the better tool in that case. This hand-wavy nonsense with "use the right tool for the job" is pretending that the answer is *never obvious*. Sometimes it is. When you use the *wrong* tool for the job, I don't know, say a DOM manipulation library to build a UI, you aren't being open-minded, you're being naive. This isn't a holy war between Vue and React. If you need a UI library and you choose Vue, more power to you! If you need a UI library and you choose D3, then obviously you need to learn *what* your tools do before you start picking which one is right.
100ms on an iPhone from 2014... Oh no...
I hate this example. You would never be expected to write all of that code every time you want to use it. You create a function, store it away somewhere and call the function the same way you would the jQuery function. That's like saying you are too lazy to write a function once and reuse it in every subsequent project so you'll just import a massive library to use just 1% of it.
Well the comment isn't for you. I never argue with someones already settled idea its pointless. You are right! Now let people think for themselves shall we? 
How about the use cases that jQuery was meant to be for?
Thanks!
&gt; it wasn't exactly a common thing at the time Yes it was. Styling directly in HTML has been the domain of amateur hacks for nearly 20 years. The ACID test appeared in the late 90's along with the CSS3 specification, CSS Zen Garden was all the rage in the early 2000's. By the time jQuery came on the scene we were also using CSS pre-processors like SASS.
When was that time? I always read about no one obeying standards in the "old age" but I don't know when they began to do it. When did jQuery become unnecessary?
There are plenty of use cases where promises are a better fit than a sync/await... For example, resolving multiple promises concurrently can be done with Promise.all. How would you do this with async/await functions? (Hint: you cant)
Oh so you essentially think that ms stands for microseconds? Nice move with deleting your post btw. Classy. 
Of course and development time is expensive and I'm not denying that jQuery simplifies several common tasks. But the vast majority of the time there's a small (2-4kB range) library with a near identical syntax that does what you want and saves 25+kB of useless code. When I import lodash, I don't import the entire library for 1 function - I just import what I need. If you are building something complex, Vue/React are likely better candidates. If you're building something simple, use a tiny jQuery-like library if you want. There are few jobs these days where jQuery is the best tool. Part of development is realizing when to retire a tool. You don't see people using Mootools anymore since it was replaced by better alternatives. It's about time for jQuery to do the same.
I was talking to coworkers about that a lot recently. Not code like you wrote but even more putting templates (HTML) directly into javascript, css inside there in some cases, and it's all perfect. The consensus for why this is okay is because we have build tools and library repositories, etc. So we can rebuild it whenever/however we want. That keeps us DRY capable without actually separating our concerns. Being an old timer myself, I am okay with it in certain scenarios and with certain controls in place (like always use state css classes instead of inline states - which allows full template style changes).
Axios supports progress callbacks, Fetch does not. 
It is the final stage of any library to be part of the standards however for that to happen they first have to understand the very concepts of a web page. Most of the time what I see is websites overusing JavaScript it's a fact even though I love programming with JavaScript I won't sell it. The reason why I used to despise JQuery is because back then when you would lookup every little thing pretty much anything related to JavaScript would be spamming JQuery. If you want to know how JavaScript works, scale your application and understand the concepts revolving around JavaScript. JQuery is nothing more than a wrapper whereas ReactJS is a little bit more than that but it still is a wrapper. ReactJS enables you not only with tools but it gives your application a context and that is what is important. JavaScript and the browser are the context of our application and if we want them to work well we have to respect those contexts instead of hacking them. Libraries are nothing more than overhead even for people who don't understand the coding patterns and concepts inside a browser.
Here you are! [http://notes.eatonphil.com/compiler-basics-llvm.html](http://notes.eatonphil.com/compiler-basics-llvm.html)
&gt; that need to be parsed and executed on every page load So does vue and every other alternative to jquery people suggest - even your own personal wrapper library you made so your vanilla js is not so verbose. So that's not really an argument. Libraries are there to use, just use whatever ones make your life easier.
&gt; I never argue with someones already settled idea its pointless. Yes, because there's a ton of room to argue with my point that you shouldn't ever consider the *wrong* tool for the job a valid choice. &gt; You are right! Now let people think for themselves shall we? People are going to do that regardless. I'm not suggesting anyone should take my opinion as fact, on the contrary, I hope that highlighting what jQuery is will make people research the topic and draw their own conclusions. The Argument to Moderation you provided does a disservice to anyone new to the field, which is why I responded. My comment wasn't for you.
`document.querySelectorAll()`
Standards? There were no standards. The mess that was the different implementations caused the browser vendors (Netscape &amp; Microsoft) to agree on the first standards. I think jQuery only became unnecessary something like 5 years ago... you definitely still needed it 10 years ago. 
You stated jquery shouldnt be used anywhere else unless its a todo app. Do you understand your statement? Jquery is good for anything fast and light weight. Its already proved its worth. Your boilerplate that you do in vanilla js didnt. Angular react etc are frameworks and require writting code in a certain way. Especially react. They are good enteprise and in a big team. Otherwise is clutter. Lets not kid ourselves. If you want to do a website in a week you use plugins not frameworks. You are stubborn stuck in your time age and your own confidence for me to actually make sense. You are already indoctrinated that you hate Jquery. You dont provide proof or pros/cons. You just hate because hate. Others in this thread already provided that there is boilerplate for vanilla js. And the idea is to eliminate jquery not replace it which you just traded a horse for another horse.
I didn’t delete any posts, I have no idea what you are talking about. The best cases *in 2014* in that article I posted were low double digit milliseconds, not hundreds of milliseconds. That was *2014*. I guarantee that my MBP In *2019* will run it in microseconds.
Honestly, pretty much around 2012. When looking at [browser usage](https://www.w3counter.com/trends) around that time, 2012 is when Chrome surpassed Internet Explorer as the most popular desktop browser. Additionally, [IE 10 launched in 2012](https://en.wikipedia.org/wiki/Internet_Explorer_10), which brought CSS animations and other less hacky features to mainstream support. The _need_ for jQuery continued to die down as browser usage for IE 8 and IE 9 kept shrinking. Eventually, the browser coverage for "legacy" browsers was low enough that people felt fine with writing in vanilla JS.
Rendering templates is least important functionality of Express. Build your ownouting and API using Express and do whatever you want with templates.
It is the final stage of any library to be part of the standards however for that to happen they first have to understand the very concepts of a web page. Most of the time what I see is websites overusing JavaScript it's a fact even though I love programming with JavaScript I won't sell it. The reason why I used to despise JQuery is because back then when you would lookup every little thing pretty much anything related to JavaScript would be spamming JQuery. If you want to know how JavaScript works, scale your application and understand the concepts revolving around JavaScript you have to JavaScript. JQuery is nothing more than a wrapper whereas ReactJS is a little bit more than that but it still is a wrapper. ReactJS enables you not only with tools but it gives your application a context and that is what is important. JavaScript and the browser are the context of our application and if we want them to work well we have to respect those contexts instead of hacking them. Libraries are nothing more than overhead even for people who don't understand the coding patterns and concepts inside a browser. What is important is not wether you are using a library it is for you to understand the concepts and stay productive at the same time.
May I suggest template literals? It's native, fast and "literally" has "template" in it's name.
Indeed. However downplaying a 80kb dependency because it can be fetched from CDN is the fallacy what I was after. We could go into arguments about which dependency brings which benefits at what cost but it was all done to death. Transpilers allow cherry picking, but jQuery is too monolithic for that. On the other side of that coin there's things like Svelte that transpile to no runtime. There are so many choices that simply leave very little room where jQuery would be warranted. 
I didn't mention Node. EventEmitter in Node has the same protocol as DOM objects. It's broader than Node or the ECMAScript standard. It's part of JS culture. Just like snobby, unhelpful pedants are part our culture &lt;3
 const selector = '.my-class'; fetch('//api.com/endpoint') .then(res =&gt; res.json()) .then(data =&gt; console.log(data)) for(const element of document.querySelectorAll(selector)) { console.log(element); } document.querySelector(selector) .classList.contains('my-class')
The "not clean" stuff in vanilla JS has been fixed by fetch and you can always add in something like lodash for others.
op didn't ay anything about an API. if op wants an api, go ahead. AFAIK, the template languages only support builting an HTML page.
my hero. was on mobile so I did not bother. :) thanks
When people say they hate javascript, I imagine libraries like this are what they have in mind.
That depends on how much behaviour you'd rather keep out of cached static files, and introduces no issues when done right, also there are excellent optimisation reasons to avoid including an explicit call to eval. It's an engineering problem that has a balance of considerations, you're being dogmatic and falling into appeal to authority fallacy. Besides, there are thousands of other behaviours, that was merely an example.
I agree. And nowadays, you could just import what you want from a library with code splitting. But a few years ago, many of jQuery's features were very useful and code splitting didn't exist, so it made sense to use it.
&gt; You stated jquery shouldnt be used anywhere else unless its a todo app. &gt; Do you understand your statement? Do you understand that statement? It was a lazy one-liner in response to a lazy one-liner. The only case in which jQuery is a good solution *by itself* is when you need a DOM manipulation library but not a UI library. Those situations are pretty rare. &gt; Jquery is good for anything fast and light weight. Its already proved its worth. Your boilerplate that you do in vanilla js didnt. jQuery is good when you need a DOM manipulation library. My "boilerplate" was an abstraction of a very specific solution to a very specific problem. I don't know what the hell you're talking about "proving worth". It does exactly what it needs to with zero dependencies. &gt; Angular react etc are frameworks and require writting code in a certain way. No they aren't, they are UI libraries that serve a specific purpose. Their implementations are moot in this discussion. &gt; They are good enteprise and in a big team. Otherwise is clutter. Clutter? If there's anything this proves, you have never written a web application before. React/Vue/Angular are built around abstraction which by definition works to reduce clutter. You can certainly still add clutter to any one of these, but jQuery is the king of clutter in a poorly written app. &gt; Lets not kid ourselves. If you want to do a website in a week you use plugins not frameworks. I don't make "websites". We're talking about applications here. &gt; You are stubborn stuck in your time age and your own confidence for me to actually make sense. You are already indoctrinated that you hate Jquery. I have no idea what my "time age" means. And for the record I LOVED jQuery. Many years ago, writing vanilla javascript that targeted anything aside from IE was an utter nightmare. jQuery was perhaps one of the greatest products of its time for frontend engineering, and frontend engineering likely wouldn't even exist without it. How about you stop with the personal bullshit and talk about the products. &gt; You dont provide proof or pros/cons. You just hate because hate. Because it's not a pro/con argument. jQuery is not the same tool as React/Vue or Angular (which isn't the same tool as React/Vue). jQuery certainly can be a tool used in conjunction with other tools to make something similar to these tools, but that's more subjective. And I'd be *happy* to express why it's not a good way to write modern code. &gt; Others in this thread already provided that there is boilerplate for vanilla js. Again, not understanding this sentence. &gt; And the idea is to eliminate jquery not replace it but you suggest to trade a horse for another horse.
Sure no boilerplate in react and angular. Yeah... By the way sky is green and Mars is a star. And Earth is flat. Ok you win. I am outty.
Jquery syntax is retarded and makes code harder to understand while providing very minimal
Those are covered by CSS3 now, which is much faster than JavaScript.
&gt; Sure no boilerplate in react and angular. Yeah... Your only response is to something I literally never said. Way to have good dialogue, you must be a fucking joy to work with when people disagree with you.
There's huge advantages to having a single API decoupled from the UI. E.g. a REST API. Some points: Only have to write/update business logic once Other apps or even customers can use the same API Single place to implement security, monitor etc Easier to test Scales better. Servers aren't rendering templates. So you or your boss could implement the REST API and then you could create an Angular or React type site that calls it. I work with companies that don't do this and everyone implements their own business rules and it's a nightmare. Having said all that I think you could create a quality solution using either method and ultimately it's your bosses call. I've done it both ways and there are pros and cons to both. And then when you've finished the new guy can ask you why you used REST and not GraphQL :)
His ask was absurd, but you are an evil bastard. https://developer.mozilla.org/en-US/docs/Web/JavaScript W3Schools needed to die 8 years ago.
and yet 97 of all website use jquery, huh, makes you think hmm?
Most of it is legacy code. My web app has jQuery in there, but only because a component I'm using depends on it.
As someone who's contributed to multiple browsers, I suggest you fact check your statements. EventEmiiter does not exist natively in any browser. The only accepted "standard" for DOM events is [https://www.w3.org/TR/uievents/](https://www.w3.org/TR/uievents/) and [https://www.w3.org/TR/2009/WD-DOM-Level-3-Events-20090908/](https://www.w3.org/TR/2009/WD-DOM-Level-3-Events-20090908/). **Stop sharing misinformation.**
The framework library is a blocking request. A hero image if done correctly is not
I'm not even sure why I talk to someone like you. You do you.
I just recently found out about the classList feature and was like "Well that seems obvious, and nice... oh yes, this is nice." 
Worth noting that the xmlhttprequest example, like many examples on that site - are covering the minimum use case. Watch what happens if you need to do extra stuff vs jquery, your code will double in size and it has extra checks that we silly humans seem to forget...
While I agree that polyfills aren't great, nowadays it's a burden mainly solved by tooling or something like polyfill.io. If look back to when we needed to manually manage all script tags and load order, I don't consider it a mess as it is today. It's more of a chore to go through manual testing in a lot of browsers confirming that your babel-env or polyfill.io did it's job than the hell it was back then. The Beacon API is a novel thing but there are ways to do almost the same thing today, just not with the same efficiency. And it's very easy to detect support for it too (`if (!navigator.sendBeacon)`).
I still use native js without webpack and npm etc sometimes and it feels so good not to have all those heavy additional layers of tooling. 
Because modern CSS &amp; JS have surpassed the convenience jQuery offered. Still it was handy for many years I will say.
I still see very similar “how do I add two numbers with React” type questions (not really that bad... more like, how do I fetch JSON with React) I totally agree that it’s a minimum surface area api. So abuse is not as easy. 
It should be settingsBtn.onclick = function () { openSettingsWindow(settingsBtn.id); }
The difference between settingsBtn.onclick = openSettingsWindow(settingsBtn.id); and settingsBtn.onclick = openSettingsWindow; Is that the first block is assigning the result of the function call `openSettingsWindow` whereas the second is setting onclick to the actual function. It's similar to saying getResult = add(1, 2); Here, getResult will equal 3. So likely what you need to do is either make `openSettingsWindow` return a function, or write a function that calls `openSettingsWindow` Something like setttingsBtn.onclick = () =&gt; openSettingsWindow(settingsBtn.id);
It's so easy to setup babel with babel-env that I do regardless of the project size (only if I have to though). Native ES modules and advanced features/APIs replaces tooling, but once you have to ship the project compatibility is always a problem we will have to deal with. I can't see a future where 100% of code sent to the client being purely runtime and/or app without either chrome or Firefox taking 100% market share. 
I'm not going around claiming that those 16kb minified and gzipped of dependency and it's size is irrelevant because it can be fetched from CDN (which it can). That was entirety of my point. We could also discuss at length what each of these libraries bring per byte and how difficult it would be to replicate yourself but it's been done to death. I have used jQuery for what it was useful for - browser incompatibility, but that problem is solved and a handful of cases where you can save few lines of code don't warrant a huge, monolithic library. BTW, a millisecond is still a thousand microseconds. Your 2019 MBP is not: - what most people use to browse the internet - 109x faster in parsing and executing JS than that 2014 iPhone.
You want to separate concerns to decouple your code to make it more reusable and more maintainable. In layman terms you want to separate your logic from your views so that your views can be reused in other parts of your application, and so that you can reuse your business logic in other parts of the application. If you tie separate parts together, rather then separating the individual parts, then you wont be able to reuse the individual parts because they will be "coupled" to the other parts. Also, if you tightly couple the different parts of your code, then when you have to make a change to an individual part, you may end up breaking other parts of your system. It will also be more difficult to reason about your code because everything is intertwined making your code a mess. 
IMO jQuery is useful for server rendered html that is decorated with JavaScript. SPAs create DOM noses in the browser via the JavaScript api. So, in SPAs, you rarely select elements because you construct them from the start with the proper attributes. This makes query selectors less useful in SPAs. But, your usecase is a great example of how jQuery is really nice for a specific type of web app. 
Ah. Because the only two ways to change state in the browser is: - sending code to running code and then adding it by adding a script tag - doing it and calling eval Ok where is the hidden camera so that I can smile and be on my way? 
And getElementById
If anyone actually "hates" it, then they're just part of a circle-jerk. No rational developer hates jQuery. They of course recognize that it's a relic of a bygone era, and avoid its use, however. Almost everything jQuery provided has been rolled up into HTML5+, so there's really no reason to use it any longer. It was a good library for its time, and helped calm the choppy seas of web development. Unfortunately since it's mostly redundant with the base HTML5 API, all it does these days is slow down your pages by making your users download a few hundred kilobytes of unnecessary code. Also it encourages some really bad UI practices that we should really move past, but again, for its time, it was the best we had and we should always recognize that. 
Why not use a CDN with a fallback option? It's pretty naive to rely 100% on CDN's. 
`const a = Promise.resolve('dont');` `const b = 'talk';` `const c = new Promise(function(resolve, reject) {` `setTimeout(resolve, 100, 'shit');` `});` `Promise.all([a, b, c]).then(function(values) {` `console.log(values);` `});` `async function aa() {` `const a = await 'dont';` `const b = await 'talk'` `const c = await 'shit'` `return [a, b, c]` `}` `console.log(aa().then(values =&gt; console.log(values)))` 
No problem.
&gt; but jQuery is no less right than react Eh. jQuery's direct DOM manipulation outright encourages spaghetti code. I've seen enough sites where the style of a single div is controlled by 18 different lines of code executed at 43 different times to admire how React forces you to really define how a single over-arching application state controls your UI. I would say at this point that React is definitely more right than jQuery. 
I said they share a protocol which your docs show they do. **Stop being a big-headed poo-poo butt.**
But you've now added 100kb+ to your download for that one small helper that you could have just made into your own utility function if you truly use it that much. jQuery was great, but its time has passed.
The third way couples your client version to a server version, again, this might fine, but your decree that it is an anti-pattern remains to be argued, as well as all the other points I made besides the single example you disagree with.
&gt; I know the basic of Js and have used JQuery before [cries]
You can also do this with CSS, but depending on what you're building, it may not be what you need.
Where's the JavaScript?
I think you are missing the fact that they mentioned ajax and es6 fixes that abstraction with fetch. I think you are over complicating a simple answer. 
I should have posted this in the frontend channel. Made this during creating a charting component 
GetElementById and GetElementsByClassName are poor substitutes for CSS selectors. 
I've never needed jQuery except for AJAX... now I use fetch. I also would rather not download a whole library for one function.
That's because they're not CSS selectors
2014 MBPs were executing jQuery in 9ms. I’ll run the test tomorrow on my MBP instead of squabbling. In any case, well see. jQuery is *not* a huge monolithic library. Angular and React are huge monolithic frameworks. Also, you are a condescending asshole.
Wrote this as part of explaining how svg path works. Yes, css works too
jQuery uses them internally.
It's unnecessary and too many people learned how to write jQuery (poorly) and never actually learn Javascript. Those are the main ones for me. 
of course a sane person would use rxjs, this is just to understand the inner workings.
You're on the right track with separation of concerns but one function that does a sum *and* checks if it's a email exists is a huge technical debt no-no. &amp;#x200B;
He can sell it to Russia. Much roubles. 
Yes, it's not properly separating concerns which was the point of the post. A function that does two entirely separate things is a separation of concerns problem in the same way that not separating architecture is a separation of concerns problem. The reason I used this example, is because it's vastly easier to see why separation matters at a unit level (function) than an architectural level.
Any javascript file, whether or not you roll your own, is a blocking request. If this is a problem for your website/app, you have designed it wrong or are hosting it on a potato. Either way, that is not the fault of the library. 
It's a fine technology that was a good solution for when web sites were not as complicated as they are today. There was this transition time when people were writing sites in jQuery when they should have been doing it in react, vue, or angular. 
And a *much* smaller file size. Honestly redux is one of my favorite frameworks for smaller projects.
Keybindings!
What’s the use of it now then? Also what’s the new standard for DOM manipulation? Sorry, newb question 
Nope, not since defer
Or 7, or 8...
It's worth considering (I was a webdev long before the 2012 demarc you've given) that even though FF and Chrome weren't as popular as they are now, and IE reigned supreme in corporate environments, FF offered a nicer development experience. It was common for a lot of the dev legwork to be done within the confines of FF with developer tooling like FireBug and the such, and then have IE support retrofitted, beating the site into submission. Further, the IEs were *not* consistent in their approach, IE 6 to IE 7 was a leap, and IE 6 was around for quite some time and often the only browser available in XP environments. I see it less in 2019 but certainly pre-2015 there were web applications in wide use (often self-hosted) that *only* supported IE6. I had many sites with gargantuan corporate clients that had to support evergreen browsers, but *also* go down as low as IE6 just because that's what they had available in their offices, if their timesheet/KB/whatever application only supported IE6-8 it hung around. jQuery was an incredible oasis in the sparse desert of browser behaviour. A single API from which you reduced your dev-test-dev-test cycle enormously. Due to jQuery's aim of providing a consistent API, it remained *really* consistent between minor versions. Back then, you wanted your site to work across the board, you used something like jQuery. Then plugin authors wanted their plugin to work across the board, so it leveraged jQuery. Webdevs were already using it, so it didn't seem like much of a trade-off to have a lib rely on jQuery. Then browsers as you say 2012+ started getting their act together, HTML5 was on the horizon and in some cases being implemented before the spec had finalized. The walled garden approach had been set aside. Devs then became frustrated that all of these libs that solved problems they wanted to solve, all relied on jQuery. So you're pulling in this library that doesn't always behave in evergreen browsers (especially with mobile web booming and moving forward), you're writing jQuery, not JavaScript. What had once brought the web into a cohesive API was now lagging behind the cohesive browser environment. jQuery undeniably made the web what it is, it provided an enormous service, and still today has it's place. But solely relying on it now actually does a disservice to bringing the web together. We now want lightweight code, not because our applications are lightweight, they're quite the opposite. If you're building a sprawling gargantuan mess of an SPA, every weight reduction helps. This is why we're seeing devs eschew the notion of an SPA framework + jQuery just because you want a neat jQuery plugin. It's not that jQuery is bad, it's that people using jQuery + another framework is largely entirely redundant. ES6 etc is now so nice to write, and cross-platform support today is relatively easy to achieve - using jQuery isn't just lazy, it's likely holding you back in an evergreen environment. 
I made an Instagram profile scraper with an async generator and selenium-webdriver. &amp;#x200B; Live demonstration: [https://youtu.be/AgeqeWW\_hgs?t=1096](https://youtu.be/AgeqeWW_hgs?t=1096) Repo: [https://github.com/tjdavenport/instascrape/blob/master/index.js](https://github.com/tjdavenport/instascrape/blob/master/index.js)
There's a lot of discussion here about reasons to use or not use jQuery, but I suspect most of the actual hate it gets is from people who find themselves having to support an old site that has a lot of code like this: &lt;script&gt; $('#messages').show(); // Don't forget to move this later &lt;/script&gt; &lt;div id="addiv"&gt;&lt;/div&gt; &lt;script&gt; $('a:visited').click(function(event) { doSomethingWeirdInAFunctionFromOneOfTheTwoHundredIncludedScriptsOnThisPage(event.target); }); &lt;/script&gt; jQuery makes it really easy to do stuff in a piecemeal fashion, and you often see it used in places where an organized framework like React/Angular would've been more appropriate (if they had existed when the page was made). Since the code that affects whatever part of the page/app you're working on could be located literally anywhere it can get frustrating trying to see where a bug is coming from. It's more the coding style that's to blame, not jQuery itself, but you'll see jQuery snippets in a lot of pages like that so it becomes associated with poor quality code that's difficult to support.
This entire thread is fucking cancer, jesus. 
No but that's exactly it, jQ falling out of favor was a matter of performance/speed when we were transitioning to heavy js but didn't have all the browser support in place, so vanilla (if we can call js that) was better, and if you remember that's the time web assembly also began to make the buzz here and there. Now I feel like modern frameworks are addressing the mid-large market but many a cost-effective small-mid project is built using some jQ as we speak. But that's just the circle-jerking usual echochamber, and I'm guilty of that too sometimes: there's our "idealistic" view of what's state-of-the-art now, and then there's the reality of building a website quickly because it doesn't freaking matter for the purpose (bottom line is not in the tech stack…) and so you run some basic WP + jQ over bootstrap because guess what. It works just fine. It's cheap. Anyone can take it from there, the largest pool of dev skills on earth (important req. in small projects where developers come and go). It's just a smart choice based on the reqs of many, many projects. Not everyone's building Uber, some of us are still happy servicing the local barbershop and small time influencers, and we'd rather build to increase their bottom line rather than make a show of our opinions in tech. Just sayin'. :)
I thought I'd help you out since everyone is being mean. **1: Double Number** `const doubleNumber = (num) =&gt; {` `return +num % 2 ? 'Weekend' : 'Working Day'` `}` **2: Greatest Number** `const greatestNum = (...values) =&gt; {` `return !Math.max(...values) || [...Array(10).keys()].reduce((a, b) =&gt; a + b, 0)` `}` **3: Weekend or Working Day** `const whatDay = (working, weekend = 2) =&gt; {` `return +working * weekend` `}` &amp;#x200B; Good luck
Meanwhile folks all over the world are regularly streaming gigabytes of video a month on cell plans.
In 2009 jQuery was essentially a requirement. Once you could axe older IE (IE9-) support (depends on your biz) it became much much easier to also axe JQ.
The point here, is could easily write a simple helper function to do what jq's ajax does.
It is just old and the problem it solved has more or less be solved with newer version of vanilla JS. But it is still a tool I would learn because YOU WILL SUPPORT A PROJECT THAT USES JQUERY!
Bullshit its obsolete. Half the sites we support for our clients that we didn't build use jquery or are older wordpress sites that use it heavily. It is not required anymore, but to say it is obsolete is extremely wrong.
How would you write the CDN call without it blocking in case the CDN hangs? I mean, as far as I know, if you get a resource from a CDN, it's going to try to get it from there first and foremost.
Babel presents take care of polyfill, and other better libraries like Axios for fetch
GitHub doesn’t have *that* many dynamic components on their website, and for things that are dynamic they don’t always work properly. Issue cards on project boards comes to mind.
Most popular is frameworks can do everything you need more efficiently. With binding and template updating, you got everything you need for the most part. jQuery directly manipulates DOM. Modern frameworks use listeners or handlers for data and DOM updates. They're not very compatible with each other. They coexist but in separate spaces, which can be difficult to work with. Because of this, and the development of these new frameworks to do all of the things jQuery does, it's becoming obsolete. It's not that it's bad, it just bot compatible anymore. You're basically all in to win with jQuery and most people want a better solution than DOM work.
This is as recent post showing what "asking for help" looks like: https://www.reddit.com/r/javascript/comments/azl4vd/need_help_with_a_dumb_onclick_problem_js_dom/ Notably present is "a specific problem" and "what I've written". You don't get to practicals in a school without someone showing you how to write "hello world", so you can't literally need the whole thing written for you.
There were lots of standards, but what people wanted standardized has grown tremendously over time. The first HTML standards loosely defined what a UA should do when it encounters certain tags. It was fine because there were little graphics and the web was content driven. Then the world needed more control over every individual pixel, so we got new standards that more strictly dictated exactly what a graphical browser should do. But that wasn't good enough, because developers were unable to write strict HTML and rejected XHTML, so and people relied on non-standard behavior. So now we have HTML5 that is all of the previous + detailed information on how browsers should behave in situations that were previously simply invalid documents. Standards have always been there and they've always been a baseline. Without them, you couldn't have chosen between Netscape and Internet explorer in the 90's. Over time they just get more precise. The first IETF RFC is from 1969: https://tools.ietf.org/html/rfc1
That's a shitty attitude to have toward development. Just because you can get away with the bare minimum doesn't mean that's a reasonable solution. 
i dont hate it, just don't see need to use it. it's like importing a library to do console log. 
&gt; so you run some basic WP + jQ over bootstrap ah yes, the trifecta of bad readability, maintainability and vulnerability. great stack!
It’s good as a practice exercise not to lean on tools. There’s a reason why in university we had assignments to create linked list and binary tree objects from scratch rather than just using the native language implementation. That being said, I dig into some of the library implementations of functions I could implement myself now and see optimizations that I would never think of, and I know it’s much less likely I’m going to have a bug in code that’s used by millions of devs rather than the code that I wrote that is used only by a handful of other devs.
I think much like how Wordpress polluted PHP, jQuery did with Javascript. There are many Wordpress devs out there that think they know PHP, but in fact they don't. There are many web developers out there that think they know Javascript, yet their knowledge is almost exclusively based around the jQuery API. 
I don’t consider this to be the bare minimum. I do plenty of work to optimize my code, but there is optimization, pre-mature optimization, and over optimization. 30kb of static content which can be cached by every user for a year is not something I need to concern myself with. I have bigger icon sets of which I use less than 10% of the icons but the entire file is loaded. My time to cut that iconset into what I use and adjust the CSS to match is worth less than the dozens of kbs I would save, and the maintenance nightmare of adding more icons to the strip as I require them and changing the image file so it pops the cache... Where do I stop? The answer is: when my users experience is degraded, I have a problem. If we are talking about milliseconds or less of time, then it’s not a problem.
We don't hate it. We just don't need it anymore. It fixes problems we no longer have.
Yeah… but. I'm gonna move that bad execution has generally more to do with _who_ does it than the tech itself. There are bad developers, and there are more bad developers on more used technologies. There's also this crazy idea that regardless of how others do it, you can always choose to do it well… :) Look, it's usually simple for me and most good freelancers I've known: - you write very readable code because you know the next guy might be some random. That's for readability. - you document the F out of everything because that's the only professional way to do it. that's for maintainability. I might add that it's faster, shorter and easier to make/read doc for some WP/jQ than any major framework out there. - vulnerability, meh, barbershop 1-page with fancy pics and appointment app doesn't care. again, we do it well, hacks are rare, backups save the day instantly. but security is not worth paying for at that level of projects. Better take care of the owner's 2FA in general, that's money. What's an alternative for a cost-effective stack for such small-scale projects in your opinion? Genuinely curious, always fishing for good ideas to improve my bottom line and my clients'.
You can just use raw promises then. Promises are trivially implemented over callbacks with `setTimeout`, if even that's too new a polyfill won't reach a kilobyte.
mo.js is better for complex stuff. I can CSS simple effects faster than I can jQuery them.
Fetch looks promising but its not very supported yet from i see here: https://caniuse.com/#feat=fetch
Fetch is a dom api... 
is fetch widely supported yet?
&gt; I prefer this: &gt; &gt; $.ajax({ &gt; type: 'GET', &gt; url: '/my/url', &gt; success: function(resp) { &gt; &gt; }, &gt; error: function() { &gt; &gt; } &gt; }); Me, I'm better with try { const resp = await fetch('/my/url'); // success! } catch (error) { // Handle it. } &gt; I prefer this: &gt; &gt; $(selector).each(function(i, el){ &gt; &gt; }); Or you could go with the following, and skip the performance hit of running a closure. for (let el of document.querySelectorAll(selector)) { ///... } &gt; I prefer this: &gt; &gt; $(el).is('.my-class'); &gt; &gt; to this: &gt; &gt; var matches = function(el, selector) { &gt; return (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, selector); &gt; }; &gt; &gt; matches(el, '.my-class'); [`matches`](https://developer.mozilla.org/en-US/docs/Web/API/Element/matches) is supported by all major browsers these days. You can skip the polyfill. el.matches('.my-class');
You can inject scripts asynchronously by loading using javascript. Run some JS to add the CDN script to your page, set a setTimeout call to check to see if the script is loaded some short time later, 100ms or so (poll to see if a variable in your loaded script exists, for example), and if it's not, blow the first injected script tag away and inject a new one with your secondary source. Sure, there will be a 100ms or so lag if the CDN goes down. But it's better than a page that doesn't render. More complex methods involve having your server poll the CDN at regular intervals and then adjusting the injection of your script-loading code at render time based on whether or not your CDN is running, but that's more complex than most people need. 
Side question: I understand jQuery was used in a time when there were no standards, and to support "non-compliant" browsers like IE8. Since we have some standards now for DOM manipulation or networking (`document.querySelectorAll()` and `fetch`), in the cases one needs to support old browsers, couldn't I replace jQuery with just a bunch of polyfills, that could allow for the new standard functions to be used?
Ah yes. Because 'fetch' is less readable than '$.ajax' - especially when the oh-so-descriptive '$' also means 'querySelectorAll'
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/u_rabina_bra] [More insights](https://www.reddit.com/r/u_Rabina_Bra/comments/azmubp/more_insights/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
What is the return value for $.ajax? What's this weird object I have to pass? &gt; your reply was to read the documentation. That should tell you something. It tells me you're willing to invest in one's documentation, because you've already invested - but not in the other, because you're willing to fossilize. 
I did like the clarity of `.bind()`, `.delegate()`, and `.live()`, which was all replaced with different `.on()` calls. The same kind of delegated event listeners are available in native events, too, but `event.currentTarget` vs `event.target` still trips up some developers. I do love jQuery's event namespacing. When maintaining a site with a number of small plugins and interconnection functionality, using event namespaces made it easy to call subsets of the handlers or remove all the handlers for a particular plugin. jQuery did make it easy to start and didn't enforce any best practices. I've run into the same issues with Backbone (built on jQuery and Underscore)... It provides documentation and if you already know some programming best practices, you can make an easily-maintained application. If you *don't* know the best practices, you can make a mess.
vanilla javascript is great now and jquery is pretty much completely unnecessary. nowadays most web apps are built with frameworks like React and Vue.
Fairly, but not greatly. IE11 still doesn't support it, as well as some mobile browsers. https://caniuse.com/#feat=fetch
4. // if you consider 0 to be a natural number let sum = 0; for (let i = 0; i &lt; 10; i++) { sum += i; } // if you don't consider 0 to be a natural number let sum = 0; for (let i = 1; i &lt;= 10; i++) { sum += i; } &amp;#x200B;
Hey, I do mostly vanilla stuff in my spare, and still manage to no use jQuery. jQ is purely a vestigial organ of the web these days.
I used to love fluency. Then I worked out what trash it was making of my debugging process.
According to https://caniuse.com/#search=Arrow... 87%. Unfortunately my audience is going to fall largely into that 13%, being older non-technical Windows desktop users.
 I love how people downvoted this. Like, what, are we supposed to just ignore new technology because it proves old superstitions wrong?
...then write it using functions. Arrow functions are largely just sugar anyway, long as you're not counting on `this`.
They're fanboys of other tech. 
You could also place a non-rounded rectangle over the rounded one with the same color, but left-aligned with the thickness of the corner radius.
&gt; That's the dumbest thing I've read on reddit today. Congratulations. Indeed. I feel like "don't reinvent the wheel" has evolved into a weird cult. Sure it's good advice in the general sense, but it's not meant to be 100% literal and rigid. This is how we end up with 500mb `node_modules` folders, and the `left-pad` debacle. Sometimes it's ok to "reinvent" the wheel. When all the wheels that are out there are the wrong size, or the wrong material, sometimes you can write a better version. You don't need to pound an off-the-shelf wheel into the right size! Gah!
Yeah for example all the enterprise applications I work on as a sole front end developer with 60+ Java guys jQuery still has a place because they’re old school everything-posts form apps and the Java guys know just enough that maybe I don’t have to write every single script. It’s certainly not trendy anymore but it’s still valuable in the right contexts. Anyone that “hates” jQuery probably hasn’t worked in the real world yet. 
&gt; I'd argue that the fact that modern browsers essentially adopted core JQuery features is a testament to how successful jQuery was. jQuery was a massively influential library and absolutely essential for a long time in web development. Anyone who argues otherwise is honestly wrong. That being said, the web has moved on. jQuery is no longer as useful as it once was, as most of its functionality has been rolled into HTML5. On top of that, we've evolved into better UI paradigms that don't encourage direct DOM manipulation, which is honestly a spaghetticode disaster. 
I hear you man. It can go both ways (I've seen people argue that the ~30 line, 0 dependency `classNames` library is contributing to dependecy hell). But man, every time I see a package.json with 90 lines of dev/dependencies it kills me just a little bit knowing I'll wait 10 minutes for all that crap to build.
So he's saying that you need a packer/build process. It's really nuts not to use one these days. They are related comments. 
Because it's too hard for them. 
I mean, I have a build process. It’s for my compiled code. It’s silly that I have to transpile my interpreted code. And it also bothers me that the code I debug in my browser won’t match the code that I wrote.
This is a Java project with JS files in it. I’d prefer not to have to add more shit to my build process.
Every day I question more and more the courses that are selected to be in my degree path. I’m a web design major and this is my final semester. I’ve taken two web app dev classes, JavaScript &amp; jQuery, and PHP &amp; MySQL. If React and Vue are so common now I want to be learning them. Sort of feels like a waste of time and money. I’ll probably turn to something like treehouse to learn the actual relevant ones. 
`// your initial array` `const arr = [1, 3, 5, 2, 0, 4, 5, 2, 9, 9, 8, 2]` `// make array unique with Set and filter for odd numbers` `const odds = [...new Set([...arr])].filter(i =&gt; i % 2 &amp;&amp; i)` `// diff initial array against odds array to get evens` `const evens = arr.filter(i =&gt; !odds.includes(i));` &amp;#x200B;
&gt; It’s silly that I have to transpile my interpreted code. It's not, really. There's a billion benefits to this. But ok. &gt; And it also bothers me that the code I debug in my browser won’t match the code that I wrote. Literally every browser in existence supports code maps. This has been a thing for about a decade now. This is not an excuse. &gt; no one ever notices My company did extensive market research and discovered that even a 0.2s second delay in page loading resulted in 30% less customer engagement. You'd be amazed at how insanely impatient modern web users are. &gt; add 25 seconds to every build I run Modern techs like hot module reloading make this unnoticeable. You might want to take a look at some of the new techs that are out there some time.
Clean. &amp;#x200B;
I believe the two most popular tooling setups for testing [Jest](https://github.com/facebook/jest) or [Mocha](https://github.com/mochajs/mocha) + [Chai.](https://github.com/chaijs/chai) Lately I prefer Jest.
I like the gradient on your blog.
100% agree
I did a test earlier and it took 9ms to load and execute jQuery on my phone. No one is going to notice that. How do I get hot module reloading to work with my Java application that hosts my JavaScript files? And I guess I’ve never needed to worry about code maps before because I don’t transpile.
Jest
My personal favorite is Jest. I don't have experience with unit testing in python but I much prefer it over JUnit in Java and NUnit in C#. 
Cause it's old news. Move one to the next shiny library ASAP. Or die trying to keep up with everything.
usually 1 pixel images are used for tracking [https://skillcrush.com/2012/07/19/tracking-pixel/](https://skillcrush.com/2012/07/19/tracking-pixel/) 
I swear I see this question asked at least a few times per week
https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch It’s javascript..........................................................
Easily abort requests without polyfill
Axios over Fetch because if you’re not super-careful, you can mangle error-handling in Fetch. Details fuzzy, but IIRC Fetch returns and looks like a 200 unless you actively ask. Axios is more direct about, “hey, something’s wrong here.” You can also pass an inbuilt delay with Axios, which is useful for stubbing/mocking data-fetch until you connect the source. Not sure if Fetch does this out of the box or with as great ease as Axios. Those are my $0.02, for whatever it’s worth. 
it's part of the DOM and not ECMAScript https://fetch.spec.whatwg.org/
I'd like to commend you for writing out your question well and giving us all the context. You deserve the answer you got (which should fix it!)
I hate jQuery
Agreed. jQuery has made lazy developers who are now arguing “I MUST INCLUDE ALL OF JQUERY BECAUSE SELECTORS” really are showcasing their ignorance of JavaScript in general. No, not because of the many comments pointing out mapping, but… [The selector engine was separated](https://sizzlejs.com/) - five(?) years ago. These arguments ignore that you *can* build custom implementations. That any *serious* company doesn’t serve content from a third party CDN for _one JavaScript file._ This group is relying on a mob of “jQuery forever” based on weak arguments rather than admitting “we could do the same in vanilla JavaScript, but that would require learning something new.”
No body hate jQuery, it is just out of date now with the new frameworks that are coming (Angular, React, Vue). jQuery was the love of all javascript developers only 7 years ago, and no body was doing javascript, and everyone was doing jQuery. &amp;#x200B;
Personally, I love jQuery and use it in most, if not all, of my projects.
The thing I think is that jQuery in particular is mostly implemented into the DOM or core JS nowadays. If you're not trying to fit compatibility with IE8 or below (it's getting less and less common, and it's already a very uncommon browser), jQuery just doesn't have much that raw JS gives you. Even then, I'd generally prefer to use small, modular libraries like fetch polyfills or whatever it is you're trying to use from jQuery than a library that was supposed to be a replacement for a proper standard library. There are more options to do the same things now. You can use webpack to use npm modules, and generally there's an npm module to do anything jQuery could do (not that jQuery would necessarily he a bad choice in this context).
jQuery had benefits and drawbacks. I think it's biggest design benefit, the one that lead to it's huge adoption is also the same reason it's hated so much. That benefit is it's priority on being "easy" to use. what jquery did that was so amazing is that it took something that was generally very difficult and foreign to a lot of people, DOM scripting, and wrapped it in an API that was easy and familiar. All the sudden manipulating the DOM was as easy as using CSS selectors, and huge power was only a few plugins away. &amp;#x200B; However... &amp;#x200B; one lesson that one often learns after they've been progamming a while, the same lesson that's covered most excellently by this[ Rich Hickey talk](https://www.youtube.com/watch?v=34_L7t7fD_U), is that things that are "easy" are not always the most beneficial when dealing with large applications or long term architectural and scalability concerns. In these situations, "simplicity" is much more valuable and ultimately makes work "easier" in the long run. Under that idea, not having to have a library and instead relying on the native browser APIs is much simpler. It's just lamentable sometimes that the native browser APIs don't seem as streamlined or as easy to work with. 
`const evens = unique.filter(i =&gt; !odds.includes(i))` requires an array scan of odds to determine the value is even for each value `const evens = unique.filter(i =&gt; i % 2 === 0)` seems a clearer less magical approach 
This. Problem with a lot of js developers is that they do not know how to produce reusable code.
I think browsers/ecma adopted more from Mootools and Prototype.js than jQuery. Which is strange consider that JQ won the "lib wars" 
ava supercool npm install ava —save-dev
mostly people are bandwagoning and campaign by obnoxius sheep that need to mock jquery so people choose their lovable framework
I hope someone update that site with modern ecmascript so we really get the benefit of it at first glance without questioning again. for know the site obviously showed you how many line that jquery cut vs vanilla JS
I think it's great... but I don't think people should use it as a crutch. I knew a guy that was utterly incapable of doing anything without it and had no desire to learn vanilla JS. Modern JS will do much of what jQuery fixed but it still has much utility... Just don't use it if you can do something as easily without it especially if you're using a framework.
Step 1: don't use a sequence diagram. Despite its name, the primary purpose of a UML sequence diagram is to show where functionality is allocated, not a functional sequence. Use a [UML activity diagram](https://en.wikipedia.org/wiki/Activity_diagram) to show a functional sequence.
I want to pose to you instead of worrying about your own concerns your project now has to work in all domains and all projects you may or may not have ever considered. The developers aren't gods and just saying "Why bad design to begin with" shows extreme ignorance to how software is developed. Certain design decisions work in certain contexts but not universally. Google, despite being one of the leaders in tech actually doesn't have the best applications. Have you ever used gmail lately? It's a slow laggy piece of _garbage_ they're portraying at the next best thing. They're not omniscient, but this goes for all software including react (they rewrote the entire thing semi-recently). Vue has already had two versions as well.
I’m of the train of thought that it’s great duct tape for a website. I think minimized it’s 56kb? If you are having issues with the dom and struggling with vanilla, slap some JQ on that. That comment alone landed me a job as a dev for a fortune 500
It can be polyfilled easily.
It literally says in the preface that it’s a javascript API. Is this a joke?
[removed]
This is an interesting concept in respect to jquery. Question 1 is can you code split with jquery? And question 2 is, is there anything that is necessary that you don’t get out of the box with the newest version of js that you would actually NEED jquery?
dude i've been working in the industry since 2004. CSS was simply not that popular back then. Vast majority of sites i encountered had no CSS at all. you can sit here and claim i'm wrong, but unfortunately facts aren't on your side. Here's [Yahoo via wayback machine](https://web.archive.org/web/20060826104917/http://www.yahoo.com/) from the date jQuery was released, not using CSS to style their homepage. They aren't the only ones. [Amazon](https://web.archive.org/web/20060825084447/http://amazon.com/), and [Microsoft](https://web.archive.org/web/20060824015719/http://www.microsoft.com/) to name a few more. Point is. I'm not wrong. Yes CSS was used, but it wasn't as pervasive as it is today. I stand by my comments, and I back them up, especially when called out from people who don't know what they're talking about.
not everyone was, i've already responded to others pointing out several large sites which weren't using CSS at the time of jQuery's release. Just because you were using it doesn't mean it was this magically popular thing at the time. that's an entirely self centered and revisionist view of what the web was 13 years ago.
Nice. Ever seen writage? http://www.writage.com For your next trick I’d like to convert a word doc to markdown with table support :) to be fair you’ve done the bit I use most. I now just need to wrap this up as a binary. Just out of interest- what version of tables is this supporting? Mmd https://fletcher.github.io/MultiMarkdown-6/syntax/tables.html or the regular version? 
You can definately just serve html. nothing is stopping you as express is just the web server. EJS/handlebars might be handy for some people but you dont need to.
I really like Jasmine. https://jasmine.github.io/ I have noticed Jest can take over a second for a single test while Jasmine takes a few milliseconds. This could be a problem when scaling.
Actually XHR can do cancellation and sort of streaming. Fetch can not (yet). Cancable promises and stream/obserables api is needed before it can replace xhr completely. 
So we have css, javascript, html5 canvas, normal image and svg, how many more is there?
Axios is somewhat abandoned, I suggest looking into Ky and Got!
For all of most projects I use this [config](https://gist.github.com/MrJacz/e016cf17a239892d06e64c58fd7d463c) with the modules eslint-plugin-node and eslint-plugin-promise.
I ask because I was getting frustrated with pug. I was focused on using just express, not express + pug.
&gt;where's all the other jQuery methods I need though? Well you don't need any...
Fair enough. pug is pretty meh. Maybe try something like ejs or handlebars its html 
If you were to write fetch code that does everything the jquery example does, it would be even nastier than the native code example. Fetch's error handling alone makes me want to barf. I'm surprised the community doesn't yet have a de-facto wrapper lib for fetch, you end up having to write your own anyway.
Original question wasn't anything to do with dynamic, he said no large applications use it. 
You're right, I don't need jQuery, hell I don't even need JavaScript! I'll write all my apps in C from now on... no better yet I'll write hex code!
Hi /u/DRAGONKILLER2468, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/NoobclimberNZ, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Eimontas, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/oogboog, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/electrik_sheep, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Chawki_, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Gigusx, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/jeff_coleman, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/dominic_l, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/FlingBeyond, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/la712, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Entropis, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/elvindesouza, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
jQuery is rarely component driven and bypasses virtual DOM in react so it is very maligned in the react world
Nastier? Are you sure you know what you're talking about? Promises are quite easy and clean. And you can use async/await if you really really want with try/catch and get fancier.
No browser comes with jQuery. Polyfill it away (and it's unsupported by some old shite like IE11 anyway. They get the shittiest experience regardless.)
Or just use Webpack.
The easy thing about jQuery is that you don't really need to think about it too much and has an easy syntax if you don't know about ES6 and want to get something done faster than installing create-react-app (or similar for Vue.js) where you can just describe the states of the application and skip all the nasty DOM manipulation, and even add in animations quick and painless consistently with error handling, and it's very comprehensible. It's hard to go back doing all the manipulations once you work with modules and state.
 &gt;jQuery is *not* a huge monolithic library. Angular and React are huge monolithic frameworks. Oh okay then. 
 &gt;There’s no real need for it other than “I don’t know how to do this without jquery” at this point. Not really, jQuery fits a niche for me with minimally interactive pages (static pages which only require JS for small bits of styling/interactivity), having plugins like `jquery-ui` where I can just use `$(".accordion").accordion()` rather than recreating my own accordion function makes a huge difference
Yeah I think a lot of people forgot that the deal thing bloating page size isn't JS but images. A few Kb over a slow connection isn't an issue
You're shuffling words around to make defending a point seem like a bad thing. Shame on you. 
If you think that "jQuery is not relevant anymore and not as elegant and functional as modern vanilla JS" Is a personal attack definitely reconsider your life choices because you might be blinded by your bias for a tool instead of actually picking out the best stuff for the job.
You still need to write yourself everything with jQuery. Laugh all you want about node\_modules: you need to actually include the plugins, the dependencies, everything else with jQuery. You'll be downloading them from a CDN or serving them yourself and you will have to handle each one by itself. By not using a modern UI library you'll have to manipulate each module and effect. While instead you could, like, include React and React only. Or use web modules. And you don't have to bundle your entire node\_modules folder to clients you know.
I very much know what I am talking about. Here's a pretty decent list of why fetch is annoying. https://github.com/elbywan/wretch#motivation
But those aren't the examples on the other website. Don't move the goal post mate
Many web developers never see jQuery. The kinds of web developers who do see jQuery see it as a predictor of oncoming pain. The fact that it was huge in the industry doesn't change that it still predicts a painful codebase. In that way it is similar to PHP -- huge in the industry, delivered great productivity, and a predictor of pain.
what?
They hate it because they don't like it
What's unclear about that? You're telling me fetch is shite because someone has wrote an utility to make it a bit nicer? I can wrap myself the common calls for fetch and save those 2.7kb, and still do a better job than jQuery. It makes zero sense to argue that jQuery "is not as nasty" when a fetch call with promises is quite clear as to wait it does, and you can wrap it up and reuse. That's the entire point of what you linked me. "Oh em gee the error handling" when you can do .then and .catch is stupid.
&gt; Not everything is writing a large web app No, but I bet the majority of posters here and /r/webdev *are* people that get paid to write SPAs all day.
Here's a sneak peek of /r/webdev using the [top posts](https://np.reddit.com/r/webdev/top/?sort=top&amp;t=year) of the year! \#1: [StackOverflow is super toxic for newer developers](https://np.reddit.com/r/webdev/comments/9n24fl/stackoverflow_is_super_toxic_for_newer_developers/) \#2: [Markup horrors of the ad blocker wars](https://pbs.twimg.com/media/Dt23cXZXgAEDdW4.jpg) | [401 comments](https://np.reddit.com/r/webdev/comments/a4k85f/markup_horrors_of_the_ad_blocker_wars/) \#3: [Coming back to frontend after 10 days off](https://np.reddit.com/r/webdev/comments/8vmdcl/coming_back_to_frontend_after_10_days_off/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/afd0dd/blacklist/)
I should be ashamed for calling injecting running code into user's browser an anti-pattern?
Quick reminder to folks that turn their nose up at jQuery that using forEach on a nodelist does not have IE support: https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach Yes you can polyfill or write around it but if the bulk of your code is like this (ew!) then just save yourself the hassle and use jQuery.
Could you link a source that says so? Because I think most web devs love jQuery because it was there, in the dark times when JS was a cross-browser nightmare. jQuery was the first JS framework I worked with back when I also started JS and it saved me a lot of pain. I'm sure others have similar experiences. As others have pointed out though, nowdays better, less feature bloated options exist. Checkout [microjs.com](http://microjs.com)
I think degrees are more relevant for comp sci fundamentals than tech stacks. They change too quickly to be relevant for a "traditional" course.
Why do you post that 2 times? Makes me even less want to look at it...
Noob question. Every `fetch()` example I have seen uses it to grab data from a web APIs URL--a web API that outputs data in JSON format. Is it possible to use `fetch()` to get data from another data source, e.g. an SQL database?
I don't feel personally attacked, I simply disagree with that assessment. I think he's the one that feels superior to me for not using jQuery. I'm not effected by it and I'm still gonna use the best tool for the job which is jQuery. How anyone could think the standard JS methods are elegant is beyond me lol 😂
If that rows your boat.
Also jQuery is still relevant, it's the most used JavaScript library. So it's not just about what floats my boat you're also wrong in that regard.
No shit it's the "most used" when they bundle it with Bootstrap and Wordpress; people who never really does any programming has to have it to run those.
All I'm seeing is [two rectangles](https://i.gyazo.com/df5ced8f766b89bcf1a90309eba20ab4.png).. What's this meant to do?
Generally I would always chose react and maybe nextjs if I need ssr. You should probably share some more info if people should have a chance to suggest tech stack :)
There's a lot of great plugins i use that specifically still depend on jQ - especially stuff that our backend devs are used to. We use DataTables for so many projects! 
I realised that this isn't programmerhumour. Is internet in japan not free. No uncensored porn, no piracy, and this!? 
How is this possible? how a 13 year old girl program like this? Whatever. In future she must be super programming girl. All the best my dear
Am web developer Am hating jquery 
Would be because of existing projects which use Angular
/r/notKenM
Unless you're building complex client-side interaction, I find EJS and jQuery (don't hate me) perfect for almost everything I do! Using react when you don't need to just brings a whole load of unnecessary overhead
&gt;No uncensored porn That's not really an internet thing, porn you buy or rent in stores (which is very much still a thing in Japan) has to conform to the same laws. If anything, it's *less* of a thing on the Internet, where you have easy access to uncensored foreign porn. &gt;no piracy It's certainly true that Japan is a lot harsher on piracy than most places, but it's not as if it's really legal in other countries, either.
Yes 
I would suggest that you should learn it. More and more companies moves towards using TypeScript since it adds an extra layer of error checking. Why do you dislike it?
The point is: if that and a few other bits-n-bobs is all you want jQuery for, why not have that and the few other bits-n-bobs in a small library of your own (or bundle other small libraries) instead of including 30KB^(\[1\]) of jQuery? jQuery had a place, a massively significant place, and still has if you are maintaining legacy projects or perhaps even if starting new projects that must support ancient legacy UAs and/or you don't want to use a fuller framework, or perhaps just because it is the path of least resistance for a quick personal project, but saving 15LoC on a more local function is not adequate justification for including 10**K**LoC of kitchen sink! ^(\[1\] 79KB if your web server isn't compressing, 265KB if you need to look at the un-minified version for some reason)
Why if I don't want to learn Rust, Java or Python? &lt;---same answer applies. 
I'm one of the few that don't have jQuery. I don't really use it myself but I find it useful when I have to build something complex-ish and I'm lazy
It was by mistake.
Well said haha I'm a hacker and a speedy prototyper, jQuery is definitely a tool for the lazy.
Now try to achieve the same level of flexibility offered by [sizzle](https://sizzlejs.com/) ( 4k ), the stripped to bones jquery selector engine: * CSS 3 Selector support * Full Unicode support * Escaped selector support #id\\:value * Contains text :contains(text) * Complex :not :not(a#id) * Multiple :not :not(div,p) * Not attribute value \[name!=value\] * Has selector :has(div) * Position selectors :first , :last , :even , :odd , :gt , :lt , :eq * Easy Form selectors :input , :text , :checkbox , :file , :password , :submit , :image , :reset , :button * Header selector :header
In general, not learning something or choosing other libs, frameworks,etc, doesn't translate into bad career options, there are thousands of companies that probably haven't considered using Typescript. There are many alternatives to Typescript, so there's no true "this is the correct thing to learn". That being said, when you're at a job interview just don't say. "I hate Typescript, so that's a no go for me." This shows that you're unwilling to learn or adapt and could be a reason not to hire you. A statement like "I dislike Typescript because of reasons X and Y, however, Z is a nice thing to have,.... and that's the reason I haven't spent any time on it an decided to focus on vanilla JavaScript...." shows that you're train of thought went further than "I dislike it, so no". 
Most of the times we make things complicated by choosing framework or a library before even we finalize the requirements. So, it depends on what you need. 
For setting up something quickly and without having to think too much about why ES6 doesn't do something the way you'd expect (e.g. you can't iterate an HTMLCollection even though it LOOKS like an array)... new Array(document.getElementsByClassName('myclass')).map( function() { console.log('wee') } ); The above works but it just looks annoying. $('.myclass').each( function() { console.log('wee') } ); And jQuery just makes it look nice. And it works. And you don't need to transpile it for older browsers. It will work even in IE6.
Well, the proximate reason is simple -- there are more angular jobs *that need people to fill them* than there are react jobs that need people to fill them. Maybe there are just more Angular jobs in total, or maybe there are fewer, but angular devs are harder to find. Maybe angular is growing faster. There are many reasons that could explain the situation, and it's certainly a combination of many of them. I'm an angular dev myself, and I can tell you that without surveying the companies doing the hiring, nobody can really answer the question. 
Because anyone with any sense ditched Angular as soon as they saw which way the wind was blowing, and now there are a lot of companies with legacy codebases they can't afford to rewrite.
In short: 1- ditch Jquery ( because it's ... uh ... baaad ) 2- webpack 200k of jumbo framework/react/vue/... js Seems legit. &amp;#x200B; Truth is you can do a lot of things with Jquery, that's just a tool. People feeling hate about a tool are insane.
Why people bother to setup a huge ass toolchain just so they can write some new ClassAbc() when plain JS would be totally fine is something I will never understand. TS in the frontend is cool and all but in the backend it just doesn't seem worth the hassle. Write your backend with .NET core if you just cannot let go of your strong types.
Sorry but, ejs stands for?
React. Dont think about you, think about who's going to maintain it afterwards.
Embedded JS, used for rendering server side. Look it up on Google!
I am :)
I actually suspect Typescript might be a bit of a transitional technology — JavaScript has some (perceived) issues, and TypeScript tries to patch over some of them, but the tooling is a bit annoying (not _super_ heavy, but still), and interacting with external libraries that don't _maintain_ (not just include) their typings can be quite annoying. So, I suspect you might be able to just tide over until something more "decisive" shows up, whether it's a more "native" typed language, everyone switching to Rust on wasm, or people backing off and going back to plain old JS. TL;DR: it is a bet, but it's not a horrible one. I suspect a large proportion of the web developers do the same. 
See what it requires. If barely loads data react is useless. If mostly is a static with barely any logic EJS is good enough.
I am neutral about TypeScript because I do not have complaints using JavaScript as it is. I implemented complex requirements using JavaScript and Type checking had never been a stressing problem for me. The real stressing problem for me was dealing with ever changing libraries of the year in JS community and hype driven development. I was in same situation like you at some point. Stopped worrying about them. So, all depends on type of the requirements you are implementing. If you think that improves your job use it, else move on using comfortable tools. They matter to implement in right way.
Maybe people who don't work have more time to talk about their favourite frameworks :).
Because the power of jQuery is geared towards doing things that go against separation of concerns.
Not sure what "want" means here. If you need to, you do it. 
By "program like this" you literally mean: for(;;) { alert("ha ha ha") } Not exactly Carmack level shit, mate.
Angular is more complicated so you need more developers to accomplish the same tasks? 🤐
*How* is this a crime exactly?
&gt; Tekegram &gt; strated &gt; Andriod For the love of Christ
Because it's totally unnecessary. And only serves as litter in your project. Let me unpack the main points: \- One of the main reasons why jQuery was used is to ensure compatibility in for all browsers at the days when browsers had very different js spec implementations. That's no longer the case. And for those browsers which differ we have transpilers like babel. Babel is better in this regard because 1) it's a build tool and does not effect runtime. 2) it allows to write vanilla js. \- Vanilla JS and standard browser API now can do everything what jQuery used to help us with. You don't need ajax, because we have fetch. You don't need jQuery helper functions because all of them are in vanilla js spec. You don't need jQuery selector because .. well vanilla js has it. \- Frameworks changed how we fundamentally work with UI's. We do not manipulate existing dom, we render dom. This allows us not to couple our javascript to specific html / css structure which required generally very annoying and messy hard to read imperative style code. Rendering allows declarative code which is leaner, easier to reason about and more efficient in terms of development speed.
No, you need something that talks to the database and exposes a web service. You wouldn't want your UI logging straight into your DB anyway because then all your users could find your database credentials
Don't learn it fully until you need to because a job you take uses it. Until then, get a fundamental understanding of what it is trying to achieve and leave it there. Just enough to get through an interview if need be. &amp;#x200B; I don't like PHP. Guess what our legacy codebase is written in ¯\\\_(ツ)\_/¯
I would recommend [express-react-views](https://github.com/reactjs/express-react-views) which you can later switch to full React if required.
Because legacy :D I'm doing shit in jQuery and PHP on a daily basis at work.. 
As the others said: Because most companies used AngularJS in the past. This may resulted in high quality products and they want to keep this high quality level to sell their product for more. Also the new Angular (2+) is more suitable for a large scale application (which those companies probably distribute) than Vue or React are, if you don't know how to organize it properly. The possibility that your project will end up in a mess is low with Angular, since it is an opinionated **framework**. Google tells you, how to solve a certain problem with it. I think this makes it attractive to the management. They do not risk to lose much knowledge if an employee, who set up the project, suddenly leaves. Vue and React are less popular, because they give you more "freedom" and "freedom" is always dangerous from the perspective of a CEO, CFO, CIO, COO, etc.
This. &lt;3 Never polish a angular turd
I don't see the contradiction in your title...? As React is more popular, Angular developers are harder to find. Makes sense. 
It's sometimes possible to connect to your database directly over HTTP, depending on your tech stack, but it's an incredibly bad idea. It's a huge security hole, and you'd also force requests to be made in raw SQL. The general solution is to have a web application sitting between the data store and the web server. There's a data access layer that queries the data store and holds the result in memory, and an interface layer that converts it to an output format (e.g. JSON) and sends the response. There are a lot of other complexities involved, but that's the basic operating principle of all web applications.
 10 PRINT "YOU SMELL" 20 GOTO 10 Go directly to jail, do not pass go, do not collect $200
\+1. Know the fundamentals, other than that. You'll get to know it when you get your hands dirty and a paycheck for it.
Because what you see on reddit and social media does not reflect what is really going on in actual businesses.
This is even better than the 18 year old Hungarian boy who disabled the client side validation of the ticket system made by T-Systems and bought a $40 ticket for 15 cents. [https://techcrunch.com/2017/07/25/hungarian-hacker-arrested-for-pressing-f12/](https://techcrunch.com/2017/07/25/hungarian-hacker-arrested-for-pressing-f12/)
Am teenager: can confirm
I think this is the most healthy and reasonable answer in the thread this far. Here, have an upvote.
What is she claimed that she was bad in programming??
I guess so. I guess I'm just so used to using Vue and others that I have haven't used jQuery because of the stigma attached to it.
EJS is like that tool you use to make a quick applicaton and dont care if it is good or not. If you know React and want to use it, **Use it!!!. A framework is always going to beat some shit render engine :p. React is most likely a better option in any situation.**
JavaScript is literally not necessary at all if you don’t have dynamic elements on your page.
Want to find out? - Go to Japan - Follow instructions at https://github.com/hamukazu/lets-get-arrested#how-to-get-arrested - [important] Ask for the reason when you get arrested
Wow what a way to kill a career in tech for a young girl.
TIL browsers still don't know how to deal with this shit after 20 years
Having been on the wrong end of this (not arrested, but threatened with legal action) I simply cannot understand the thought process behind this. Having someone arrested for discovering and then reporting a flaw in the software is exactly the kind of thing that will prevent responsible people from reporting critical flaws in future, leaving it wide open for someone less scrupulous to come along and truly abuse it.
Due to low amount of crime here, they got nothing else to do. 2 months ago they arrested a grandpa for taking cafe latte from self dispensing machine, just because they guy paid for 50¢ cheaper coffee. I've seen a police called a group of police and they furiously scribbled things and measured a log for more than 30 minutes just because someone put a log more than 5cm outside a construction area. You can be arrested for 19 days without trial just because you forgot to bring your identity card, just because the police are too bored to do anything else.
Great, thanks!
I played this prank on a friend when I was 13, except with pop up windows... thank god I turned away from my previous life of crime
Because abusing a DOM manipulation library into being a full blown application framework are sick of that shit.
The Array.sort() method sorts values lexographically (think alphabetically) but you can use Array.sort(sortFunc) and pass in a function reference to sort any way you want. (By number, by string length, by file extension, etc.) Thus since lodash is built on vanilla JavaScript, the lodash folks just added the ability to sort numerically as a built in convince.
Kill? More like cement. Whenever a hacker is arrested, and then released, they are inundated with job offers
But it's not hacking. You can't code 40 business hours a week because you know how to put an alert in a loop.
Probably wouldn't get a job as a programmer. More like a consultant in a security firm. The point isn't the complexity of what she did, it's that a 13 year old worked out a way to target a vulnerability in a browser and execute malicious code. Who's to say that by the time she's 20 she won't be able to target a vulnerability in ARP/DNS/TCP, and bring down segments of the internet? 
I found a redirect vuln in a payment system i use for work, _that handles my income_, and i was still having to weigh up securing the software i use and potentially facing legal action.
It’s what happens when people who don’t understand technology are tasked with writing and enforcing laws surrounding it. 
Too late. Scarlett Johansson already confirmed for biopic. 
But you have to consider the negative reinforcement of getting into trouble like this at that age. Especially Japanese society, I imagine her family are coming down on her HARD right now, and may scare her out of tech for good. Let's hope the community out there can save this poor girls position right now.
As the others have mentioned, theses are mostly legacy jobs. The job market overall is taken over by React, this is off indeed.com for instance: [https://cdn-images-1.medium.com/max/1600/1\*fLvLBaoQ4FIt7xf5bY8CBg.png](https://cdn-images-1.medium.com/max/1600/1*fLvLBaoQ4FIt7xf5bY8CBg.png) or here's hackernews hiring-trends which is getting insane: [https://www.hntrends.com/2019/jan-react-win-streak-reaches-20-months.html](https://www.hntrends.com/2019/jan-react-win-streak-reaches-20-months.html) &amp;#x200B; Angular lost most of their base on the 1-&gt;2 disaster. The new Angular just isn't that prevalent. Big enterprise is also going React. That leaves lots of positions for aging codebases. In my company we went through the same: Angular 1 (which burned our project to the ground), Angular 2 (the attempt to re-vitalize it), Vue (trying to escape the Angular altogether), finally React (actually escaping Angular plus Angular semantics template/DI and all).
There's a difference between a ptogramming language and a library that was made a decade ago to solve problems that don't exist anymore.
An alert loop isn't a "vulnerability" any more than an unreadable font is a "vulnerability." The browser is doing exactly what it's designed to do. It just happens that what it's doing is annoying.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Unfortunately, to the average simpleton, a bug bounty might mean they get paid per insect
`while(!alert());`
The society is collapsing on itself. From what is considered a crime to what's considered malicious code.
Syntax comes with practice, just keep coding. Don’t focus too much on memorizing it. Eventually it will make sense and just be second nature. You could consider using a formatter to take care of some of the small things for you (autoclosing functions, etc).
ignorance of programming in not a legal defense.
Thank you! Nice to hear I don't have to remember it all. I do intend to keep writing - even with mistakes. &lt;3
Thank you 😊
The very fact that you say "I really want this" says a lot about you. Keep sticking with it and it absolutely will get better. Are you new to programming? If so then it will all get easier and more familiar with time. If you are not and you have come from another language then if you really want javascript to 'get better' it will. Moving to another language when you are so familiar with another always introduces headaches. If you have the persistence and determination to achieve, then you will. &amp;#x200B; Be careful that you aren't inadvertently introducing super-sets (e.g typescript) into your javascript learning (yet) as they will and another learning curve. &amp;#x200B; Id be interested to learn what specifically is causing you trouble? &amp;#x200B;
So having the code `while(true){alert('f')}` on a webpage is illegal? This is beyond stupid.
Why do you think I don't know what I'm talking about? I started building websites in the 90s. It was a time where the general mantra was to avoid javascript if possible and yes I used css and your example links (except yahoo) use css and if you would have any clue you would see that immediately. https://web.archive.org/web/19990129063016/http://teamone.de/selfhtml/tdba.htm
 while(true) { alert("boo"); } This is not a security vulnerability. No one should ever get even a basic programming job on the basis of that.
Hey, thank you for your response. I was answering you and then decided to paste it into my question caption for everyone to see. I hope you have a nice day!
And they can’t even properly render a &lt;blink&gt; tag! /s
Do any of you remember beard.exe?
Yeah, Japan is said to be the worlds society that is least accepting of “failure”. I can’t imagine that this would be spun in a positive way over there.
Predominantly they dislike it as a matter of fashion or taste. It's associated with a lot of bad code (that the same developers who hate also helped perpetuate, I'm sure.) There's nothing wrong with jQuery, it's just not in vogue of the node/npm ecosystem
I'm pretty against it too. I will not give in to another coffeescript. But I have grown fond of typing. I recommend flow https://flow.org
It sounds like you are putting a lot of pressure on yourself to remember everything you learn. Sometimes, the most importing thing about programming is knowing that you can, rather than how to do it. E.g – knowing that you can iterate over an array is more important that knowing how to. You can always look it up on google. Even now, I forget how to do simple things, especially in unfamiliar languages or frameworks. So, don’t be too hard on yourself for not remembering everything that’s being taught. You are certainly not alone. 
We have an Angular 1 app that we keep pushing down the road. It's the absolute worst code to work in. I'd MUCH rather work on our 6 year old Backbone/Marionette/jQuery UIs than Angular 1.
I really appreciate this. I guess I need to just get the understanding of the language rather than memorise it. 🍬
I see far more react jobs on the market than angular jobs
But if you ever get arrested in Japan it's near impossible to prove your innocence. They want you to just admit wrong, pay a fine, and move along. They have a 99% conviction rate. It's fun and games when it's grandpas in cafes but anything serious you're done for. 
Holy shit. Amazing code. Want job for 500k a day?
They do, though, it takes a panicking or incompetent user to get stuck. 
I mean some of us are becoming real dumb. Some of us are holding the line on average intelligence but we haven't had an Einstein in a while.
/s
Jesus man careful with that loaded gun
That’s what references documentation is for. I still don’t remember if it’s array.contains or array.includes. 
The knowledge is dissapearing fast because your not actually programming much, just reading and listening to videos probably (there might be a few exercises just not in enough volume to really help you learn). Go do a bunch of project Euler problems like (30 or 40), the core syntax will get beaten into you quickly. Another option is to built a small project, but that's hard at the stage you're in, there is too much ancillary stuff to learn to get anything done. Also try Eloquent JavaScript, it's really good.
Wow that's a great piece of advice. Thank you!
It should be.
I loled alot
Normally I would help you but I had this question on a assignment back in university once. Either that or your doing project Euler or programming praxis. Struggle more it's how you learn :)
I have found ejs incredibly useful when working with "webpage" developers. The sort that are most comfortable with html/css but can live with a few logic tags for stuff like includes or iterations, or gating sections that should not be sent to all users (it will never leave the server). Much like jsp/asp/php, indeed I've been porting our jsp/php pages over en-mass. As there is too much benefit in being able to share the work. Though I use vanilla/vue for SPA, ejs is great for non-spa, if you don't get too fancy and have someone else who is more comfortable with html/css, or are looking for a quick port from jsp/php/asp to node. Plus it is inherently "isomorphic" if that is your thing. 
Angular is more popular in enterprisy type jobs based on listings I've seem. React/Vue is more popular with younger companies in general. Companies use Angular because it's backed by a big name and there is enough mind share for employees who know it to be fungible.
It is almost exactly like php or jsp or asp but in javascript/node.
It seems to be a requirement to write laws in any way related to programming
I agree, React or something is great for SPA, but my thing IS supposed to be non-SPA. I honestly doesn't like all the complexity React adds just for some more "modularity" 
Reported. 
Fairly new to JS, haven't done much besides a few games and other simple projects. Although today i made a program that autogenerates news titles onto sites like CNN &amp; BBC by randomly picking elements from different arrays that together makes up sentences. I get how lame and basic this is for most developers. But hey, baby steps right. I'm new at this. The code should be in a snippet in the site but if it's not working I'd appreciate feedback. Thanks! [Link to CNN with my snippet of code](https://edition.cnn.com/)
Can an AJAX request get a cookie?
Lack of malicious intent is.
yah, it is gonna be the web page developers who don't do much javascript. I'm glad for all the help I can get.
 Noticed it's not rlly working (as expected) so here's the horrible code! (for CNN) `const title = ["BREAKING NEWS:","LATEST NEWS:","THE DANGER:","THE MYSTERY:","LIVE:","LIVE UPDATE:","ANALYSIS:"];` `const ppl = ["George Bush","Putin","Jimmy Kimmel","Adam Sandler","Peppa Pig","fat man","Brendan Eich","The NSA","a smelly skunk","Trump","Bank of America"]` `const verb = ["examines","searches for","finds","suspects","defends","prosecutes","dismisses","arrests","attacks", "watches"];` `const adj = ["tall","naked","ugly","nasty","terrible","mentaly disabled","amazing","frightening","rude","homosexual"];` `const sub = ["russian troops","LGBTQ people","Thais","students","aliens","money laundering","mexicans","armies"];` `setInterval(function() {` `var word0 = title[Math.floor(Math.random()*title.length)];` `var word1 = ppl[Math.floor(Math.random()*ppl.length)];` `var word2 = verb[Math.floor(Math.random()*verb.length)];` `var word3 = adj[Math.floor(Math.random()*adj.length)];` `var word4 = sub[Math.floor(Math.random()*sub.length)];` `var generatetitle = (word0 + " " + word1 + " " + word2 + " " + word3 + " " + word4);` `var x = document.getElementsByClassName("banner-text screaming-banner-text banner-text-size--char-38");` `x[0].innerHTML = generatetitle;` `// console.log(generatetitle);` `}, 5000);`
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Once a criminal always a criminal. You sir have no place in civilized society.
Why would anyone use a 10 year old framework in 2019 when Google has replaced it with Angular 2+ unless their project is already written in it? What a waste of an article 
Guilty of computerslaughter
Hi /u/manish__tomar, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/kidkai25, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/KingAli1992, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/AlexDeMaster, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/99_Mining, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ReactManiac, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ReactManiac, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle). Please just no. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Colchisgirl, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/dennismphil, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
But the site still won't load as it's still stuck in an infinite loop, you're just not seeing the popups anymore.
Hi /u/jeanjaspermusic, this post was removed. To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I have added a license to my open source project. Thank you for notifying me.
No. AngularJS should never be used in 2019. I've been an Angular developer since the beginning, and there is no reason to use a framework that has been out of date for 4 years. Any new Angular project should be written in Angular 7+ and you should not be advocating for out of date frameworks with a plethora of scaling and security concerns
You are right. But i received news from oficcial telegram bot.
&gt; where's all the other jQuery methods I need though? Look, the argument about jQuery is muddied because we all have different use cases. If you are a backend developer who needs to whip up a working front-end, it's fine. Obviously for quick projects, use what you already know. It's the same reason I use Rails for most of my backends. It works and there's low friction. Same thing for apps built in Electron. It's a great tool for making something that works without learning new skills, but it has obvious downsides (mainly devouring RAM). So, great for an app you work on yourself, but inexcusable for enterprise. Slack, for example, has enough money to develop proper cross-platform apps, but they don't do it. Vanilla JS can be enough to build a full SPA, and in doing so, you'll probably end up implementing some form of UI framework, and it's probably not going to be different enough from or faster than one of the big 3 (or the million smaller ones) to bother, but if the ES spec renders those frameworks obsolete the way it has with jQuery, I'd expect people to abandon those too.
This is literally what I just said. You cannot or do not want to learn how to implement a tiny piece of functionality and you import a massive library to use the accordion method. 
The biggest issue with jQuery is the tendency to use the DOM as your state store, constantly making queries to it to get values from it and what not. Not only is this comparatively slow, it also requires LOT of code to interact with the dom, and encourages bad practices like assigning IDs to every element you want to be a state store. It may seem like `$('#foo).val()` is nice and terse, but if you have dozens of those that you need to query from and write to, it can get really gnarly. It's where the term JQuery Jungle came from. A better alternative is to just model your data/state in memory, in native JavaScript, and only do writes to the DOM to display the relevant values. And it turns out, that the act of querying which elements to write to is something that can be more declaratively abstracted away, which is what libraries/frameworks like React, Angular, and Vue do. That being said, if you *do* need to work directly with the DOM for whatever reason, then jQuery is the shit. It's just that working directly with the DOM has fallen out of favor.
barring the extent to which they're illegal, at least those 2 things are actually illegal (theft for the first one, second one assuming the log thing is an ordnance/law of some sort). I'm curious what law exists there to prevent the pop-up thing.
TS doesn't very difficult to set up nowadays, especially in the backend where you don't need webpack. If you want to use the NPM ecosystem and get the flexibility of JS ecosystem while retaining your sanity in a dynamic language TS is the way to go.
&gt; but we haven't had an Einstein in a while. I'm privileged to be surrended by incredibly smart people on a daily basis. And I'd like to assure you that there are still plenty of geniuses out there and breakthrough's are made every day. It's just that the work of a single person becomes less and less likely to change a field in a dramatic way as science gets exponentially more complicated over time. I'm not saying it doesn't happen, I'm just saying that there is a good reason the individual in modern science isn't as visible as it was in the past. (And that, I strongly believe, is a good thing.)
What the guy wrote is literally her code (with different alert text). It's in the article.
Well, this country cyber minister managed to never use a computer before so I believe law enforcement will manage to use some ancient or ambiguous law to ensure the safety of the public from this horror kid.
Why is this being downvoted? You absolutely should use let and const instead of var, unless you have to support something prior to ES6.
&gt; And you don't have to bundle your entire node_modules folder to clients you know If this is what you took from my post, then I don't know what to tell you. The problem with the node ecosystem extends far past bundle size. It's the fact that pulling in any single project will also end up pulling in 10,000 others which you have no control over and cannot possibly vet for security vulnerabilities and which could be silently hijacked at any time because the maintainer was lax or absent. It's a total mess, man.
:D
I believe you that there's smart people in the world. I myself am surrounded by them. But I don't know if they're Einstein levels of smart. Einstein figured out how to split an atom with a math equation. Where do you work/exist? I'm curious what this culmination of ultra smart people are focusing on.
Never ending angular, react, vue debates continuous... 
Hi /u/emanuelcepoi, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Don't pull "any single project" then. I don't see the problem. It's like saying you shouldn't eat food because you might get fat.
&gt; Where do you work/exist? I'm in mathematical research.
Having lived in Japan and worked in IT there, you'd be surprised just how many computers are still running Windows XP or Windows 2000 and using older versions of Internet Explorer which, as you might expect, do not have that checkbox.
Node-fetch?
while(1) alert('down with authoritarianism')
Ha, hackers reference. 
Looks like you’re good to go upstairs, but currently the downstairs toilet is occupado. It will change as people get into the office today and start using it. It is connected to Firebase with just upstairs and downstairs either 1 or 0. Two reed switches, one on the upstairs and one downstairs, connected to arduinos that update the Firebase db. Site socket connections make updates happen damn near immediately.
for such an advanced country, I did not expect that 
A `blink` is just a bastardized version of a `marquee`.
Thank you, I'll check it out.
What in JQ do you find that doesn't have a functional equivalent in JS?
Learn to code.
&gt; get the flexibility of JS ecosystem while retaining your sanity in a dynamic language TS is the way to go Highly debatable. Most people would be far better of learning JS the right way instead of just copying from StackOverflow and then complaining the JS is so awful. &gt; TS doesn't very difficult to set up nowadays Yeah... only that you need some fucking babel or whatever to run over your code everytime. Very comfortable. Not.
Advanced in many ways, but perpetually stuck in the 90s in others. Even faxes are still a primary mode of communication in the business world. It's crazy how backward Japan can be in some respects.
Off to a bad start &gt;"JavaScript defines two kinds of scope- &gt; &gt;* Functional Scope &gt;* Global Scope &gt;* Block Scope"
*clutches pearls*
Not safari on the iPhone xD 
According to the article, all desktop browsers had mechanisms to mitigate this.
I'm not familiar with the Japanese legal system.
It definitely takes more experience in the framework to be suitable for it. I was interviewed on a bunch of harder angular concepts for a consulting contract and their current devs use none of those concepts they asked me to know.
Well, as they say, there are only two hard things in programming: * Naming things * Cache invalidation * Off-by-one errors
Rewrite it in Typescript and add Redux to the project to bump that sucker up to 900k.
Sick bastard
You guys splitting atoms? Lemme know
I agree with you but I'm not sure what that has to do with the ecosystem or even TypeScript itself. You can only do so much and get good typing. If you're in the backend you don't need Babel, the TypeScript compiler does it all for you. If you are in the frontend you just need to drop in the ts-loader. Eventually you can use deno by Ryan Dahl, the creator of NodeJS, which aims to be a TypeScript runtime. Typically nowadays, a transpilation or compile step is pretty common in JS so there's always support for TypeScript.
A few weeks ago I zoomed into a portrait made with CSS and consumed so much RAM not even the task manager could be opened, I had to push the restart button. That was far more annoying than just having to close the browser for that "prank". This is so ridiculous, so embarrassing that Japan's national prestige went down several points. 
Hi /u/ahmadassaf, this post was removed because your title included a URL. Please use the `submit a new link` option with a descriptive title. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Hi /u/backendnerd, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
*sigh* Hi, folks, I'm a Redux maintainer, and also a moderator in /r/reactjs. So let me be very clear on what's going on here. We've been working on [updating React-Redux to address some performance issues and other concerns with v6](https://github.com/reduxjs/react-redux/issues/1177). We've made good progress on that, and [I've published an early alpha](https://github.com/reduxjs/react-redux/issues/1177#issuecomment-468967107) that appears to be _faster_ than both v6 _and_ v5. However, since I used the new React hooks API to implement it, it's going to need to be a major version bump (v7) rather than a minor version (6.x). I did also try coming up with an alternate v6.x implementation, but [that turned out to be extremely slow](https://github.com/reduxjs/react-redux/issues/1177#issuecomment-469071782) due to [all the constraints we have to deal with](https://github.com/reduxjs/react-redux/issues/1177#issuecomment-469500233) /u/salvoravida took the changes I'd made in my v7 alpha branch, and backported those to both our v5 and v6 branches, then submitted those as PRs. That was great! I appreciated the effort, especially since no one else had taken the time to try coming up with another approach. Unfortunately, the changes in the submitted v6 PR [don't match our constraints, and would _also_ require a major version bump](https://github.com/reduxjs/react-redux/issues/1177#issuecomment-470594995). That made it a non-starter as a v6.x PR. Given that we've already got a viable v7 alpha, [we opted to close the PR](https://github.com/reduxjs/react-redux/pull/1201#issuecomment-470911321) and focus on what we've already got. That decision doesn't seem to have gone over well, and /u/salvoravida opted to fork React-Redux. That's fine - it's an OSS lib under a permissive license, and that's his right. However, the advertising around this fork is misleading: - The fork repo shows results from the [React-Redux benchmarks repo I created](https://github.com/reduxjs/react-redux-benchmarks), but _only_ compares the current React-Redux v6 build vs this fork. It doesn't show v5 _or_ the v7 alpha, which are both faster than v6. - The claimed "up to 98x faster" is _one_ single specific metric in _one_ specific benchmark (average time for a single render in the `tree-view` scenario), and not a good representation of the actual performance differences between the different builds. (It's actually possible for a build with a longer render time to produce a faster overall FPS rate, so the numbers need to be understood in the proper context.) It's also important to note that this fork will _only_ work with ReactDOM, not React Native, because it directly imports a function from `react-dom`. It does this because that's exactly how _my_ branch works so far, and all the work in this fork is based on what I've got in my branch. As I said, I'm okay with the fork existing, as it's open-source. I appreciate /u/salvoravida 's enthusiasm in trying to help out, and I'm sorry we weren't able to use the PR he submitted as-is. (FWIW, if we didn't have a couple specific constraints regarding our public API and versioning, we possibly _could_ have used the v6.x PR.) However, **I _don't_ want any confusion over what's actually official, or what the actual differences are in behavior** (which is why I did remove the submission of this repo link from /r/reactjs, where I'm a mod). I'm currently working on sorting out how to handle the differences between ReactDOM and React Native so that our official v7 alpha works with both. Once I've got that resolved, I think we should be able to publish a v7 public beta, hopefully right around the time that RN 0.59 (The One With Hooks) comes out. Hopefully that clears things up.
Working on a site for an IT services company at the moment, 12% of their traffic comes from IE. Their biggest sale/contract in the last 12 months was to a company that requires everyone to use IE9.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
1) we do not need hooks to make react-redux 6.x great again! 2) if you were fair, you should not have deleted the post on r/reacjs because reddit and open source is not your property. 3) this say much on how reliable is r/reactjs. &amp;#x200B;
 1. we do not need hooks to make react-redux 6.x great again! 2. if you were fair, you should not have deleted the post on [r/reacjs](https://www.reddit.com/r/reacjs) because reddit and open source is not your property. 3. this say much on how reliable is [r/reactjs](https://www.reddit.com/r/reactjs).
&amp;#x200B; 1. we do not need hooks to make react-redux 6.x great again! 2. if you were fair, you should not have deleted the post on [r/reacjs](https://www.reddit.com/r/reacjs) because reddit and open source is not your property. 3. this say much on how reliable is [r/reactjs](https://www.reddit.com/r/reactjs). &amp;#x200B; Can't delete this post here? How do you feel? :D &amp;#x200B;
Thank you for posting this ! 
I was thinking the same thing ;)
The recruiter does not know that. These days all you need to be considered a hacker are - - notoriety - kali linux - indian tutorials - a guy fawx or a ski mask
More like maddening. I will never understand how a country that produced so much of the world's cool tech is so utterly awful at technology. Don't even discuss modernizing systems that are critically flawed or outdated. You may as well talk to a wall.
You can use linked lists in real-world applications too. I have an application that accepts incoming clients and adds them to a linked list since it's the easiest way for me to just allocate the memory needed to service the client and then deallocate the memory for the finished/dead connections after the thread has finished. If I was using an array I would be using too much memory or be reallocating all of the memory and having to pause all the threads to resize the array. That's part of computer science, figuring out what the needs are and having enough knowledge on common data structures and algorithms to know which ones to use instead of just using the same/simplest one.
Supply and demand, basically. - React is more popular; companies find it easier to fill React positions; - Angular is less popular; companies find it harder to fill Angular positions. Also: If React is more popular, then it leads to suggest more people will switch from Angular to React than the other way around. - React jobs are easily filled because there are a lot of developers in the market willing to work with it; - Angular jobs are in high demand because there are less developers in the market willing to work with it. And how long vacancies remain open is affected by all that, too. And, as a React developer, also because of the learning curves: - A React job might be filled quicker because there are many more developers capable of working with React to a sufficient level of expertise; - An Angular job requires a set of skills (TS, the whole Angular framework, etc.) that is hard to master, and there are also less people working with it. So a React job might get 100 applicants of which 50 are good enough and you'll have 15 amazing React developers to pick from in about a week time. And an Angular job might get 40 applicants of which 12 are actually good enough and you'll be lucky if you get 4 great developers to pick from. BUT those developers also get more offers because they are in high demand, so you–as a company–are competing with other companies to sign that developer. So React vacancies are filled quicker; Angular vacancies are left open longer. Honestly, this type of reasoning was my sales pitch to management of a few companies I consult(ed) at. They all chose React over Angular because Angular developers are hard to get by.
my company has a hard time finding angular devs too. most of us just learned on the job.
Absolutely. I had a lot of ideas for modernizing our company's IT, but was met with complete silence on all fronts. The answer was always "We'll look into it" or "We'll think about it". Half of that was because I'm a foreigner, but the other half was because if it doesn't originate as a group decision, it goes nowhere. And how do decisions originate as a group? Well the boss comes up with the idea, of course, and *then* it's a group decision. I could be sitting in a meeting and someone would suggest something, and it would be met with a lot of "hmm"s or maybe a なるほど if they were lucky. But then the boss repeats the exact same thing, and it's met with applause and people patting themselves on the back.
&amp;#x200B; Japanese police in the city of Kariya have [questioned and charged](https://www3.nhk.or.jp/lnews/kobe/20190304/2020003239.html) a 13-year-old female student for distributing malicious code online after she linked to the code on an online message board. The malicious code in question? An infinite loop that popped up an alert message, immediately showing a new message each time you click OK. Those curious to see the code can see it in action [here](https://web.archive.org/web/20180313151740/http://n41050z.web.fc2.com/burakura.html), though it's probably unwise to visit on mobile browsers, as they don't seem particularly tolerant of this kind of prank. Every mainstream desktop browser seems to handle the malicious page without incident. Edge, for example, offers a checkbox to prevent the page from being able to show subsequent dialogs, and Chrome lets you close the tab in spite of the alert box. The code itself is extraordinarily simple; it's literally nothing more than an infinite loop and an alert box that prints a kaomoji and a short message that translates as "It's no use closing it so many times."
Maybe use RANSAC to detect the parameters of the circle, then see how close you are by number of outliers. Maybe not the best approach, it's been a while since I did something with computer vision 
By not writing a recursive function.
犯罪者発見！！！
Also, everything is still paper forms and cash transactions.
All this does is make honest people afraid to report it, so they'll just lose out on millions of dollars without knowing and go under. Much better PR, right? 
Thank you. That ruined my whole day yesterday. Reddits always been a nice community where I ask for help and nice souls actually assist but yesterday changed my mind I got so many angry DMS 
Lets use transpiled script on the backend in a ported browser engine! An idea only a frontend person could love. 
I also can gaslight with conviction. Does that mean me right in every scenario as long as I explain with enough bravado and sarcasm? 
I'm confused. It says: &gt; Convert JavaScript files to TypeScript in a single bound! But when trying the CLI on a JS file it says they aren't supported. Also I think you should provide clear side by side comparisons or examples before and after the CLI did its work, just like what TypeWiz does. Currently I find it personally confusing and hard to understand what TypeStat actually does. &amp;#x200B;
Nobody would have known about it if they just said thanks and fixed their bug quietly. Not sure if it was the smartest move to sue.
What got me into programming was I learned to make a VBScript file that would create a windows alert and you couldn't close it without killing the process. So I'd go into the demo laptops at Walmart and create one, set it to the Internet Explorer icon/name on the desktop, and delete the actual IE shortcut.
That'll teach girls that JavaScript is not for them. /s
Angular does have a steep learning curve, but it is arguably worth it, because you are learning useful programming concepts. I shy away a little from super popular technologies because they can be worlds of toil, mediocrity, and smugness. That’s not enjoyable at all.
Probably I'll not understand the reason, since I don't speak japanese...
They're too afraid to admit that they fucked up so they blame it on the ""hacker"". Typical Hungarian mentally.
Hi /u/Make-U-Believe, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Gedanke, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Gedanke, this post was removed. To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/jennasf, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/speckz, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Spaceisasound, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
*googles "download notoriety free"*
Some of us never bothered to use Redux because it is 95% unnecessary state management junk. The observer pattern is just a way to wire up data flow.
Not as straightforward as it may seem: https://en.m.wikipedia.org/wiki/Halting_problem
Is this an elective that you're taking or part of your major? These are very basic programming problems. If your taking a major that requires a lot of programming your going to have to take classes which are much *much* harder. So, if this is part of your major then you need to either study much harder or you should consider switching majors. Otherwise you'll likely end up dropping out and wasting your money. 
I didn't say it was "shite". I said it was nasty and tedious to write unless you have a wrapper library.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
one of Japan's top sites is yahoo.jp
Why are you allocating memory in JavaScript? Better question, how?
Backbone was legitness tho!! :D
Any thoughts on this? It would be good to know what is ok to do in the future.
I knew something is messed up with Japan when I first watched japanese porn. Now I'm 100% sure.
Browsers don't need to solve that. They just need to keep a counter for the number of alerts and offer to block them if it reaches some number (say 3). And in general browsers don't care about if it will terminate, they care about if it will respond (have no JS running) within some maximum amount of time. If you have a busywait loop that runs for 30 seconds, chrome can still mark the tab as "not responding" and offer to kill it even though technically the JS will halt. 
i hate when people are downvoting every message that they dont understand
see, that's where you can get full value for the taxes you paid. Get someone from your embassy to: - come and translate things for you - work some more to get you released and sent back to your country 
Quietly fixing the bug would've been admitting to an error. When the average Hungarian hears that an 18 year old was arrested for hacking then they're going to assume that he was breaking the law, as the idea that someone is trying to break into something for an ethical reason is far from their minds. They'd say, if you caught someone trying to open every car door on the street, they probably weren't going to find the owner of an unlocked car and tell them to lock it. We have a different perspective on it either looking in from the outside or because we have experience with these sort of things, but nobody cares what we think about it anyways.
Another brief article that is about mocking imported resource files in React.
Hey been using this since I saw this post 10 days ago - I'm a Fan. Feature request though =) **Situation:** Sometimes, I open a new tab with the intention to go directly to a browser and I dont really look at the code example closely but by the time I hit enter on my URL &amp; have a half second to glance at the code I realize 'Oh man I wish I took a second to look at that'. &amp;#x200B; **Solution:** Build in a search functionality. So I can find a code snippet/example by its title.
It's not just management. Anyone who wants the product to succeed who's experienced working on large teams has seen the mess that a lack of structure can create. I'd argue react and vue are more fun because of their flexibility but angular is more suited to companies that need to deal with things like turnover while maintaining a consistent product. I think Angular is a better choice for something that your income stream depends on. 
Does webpack support automatic CDN fallbacks natively? Or are you suggesting to forego CDNs entirely?
This car door analogy is balls ass annoying because bug reports from actual users are a common thing in the industry. It's 100% beneficial and people who think otherwise are stupid
We make products mostly for Japanese businesses. Can confirm, we still have to support IE lmao.
You can either host yourself the artifacts of Webpack or host them on a CDN, Webpack is just a packager
/nottheonion
Unfortunately, this mentality is widespread and nothing to do with Hungary. Idiots are everywhere.
I don't really feel like it's nasty: you can pass a function to a then or catch methods and skip all the anon functions, or you can wrap it yourself in a function, etcetera. It's flexible, not nasty. You don't need to explicitly pass a different function every time. 
This is blatantly false. Maybe this was the case in the 90‘s, but nowadays there ire enough Security people around that you can hire them without the risk of reoffending criminals stealing company secrets. Hell, most companies don‘t even hire people who answer „One time“ to being questioned wether they smoked weed.
Reminds me of that mudkips site my friends and I used to send to everyone in high school. Played the annoying mudkip clip over and over and made infinite alerts in your browser. We all knew how to kill processes even then, though. Apparently no one in Japan knows about that
Works perfectly, and great explanation. Thanks a lot :)
Please reread my comment because you have misread it. I'm not saying that the car door analogy is accurate. I'm saying that I would expect my Hungarian relatives to make such an analogy.
Right, I know what webpack is... But just using webpack doesn't automatically solve the issue of hosting on a CDN by default, with a local fallback if the CDN isn't available. You'd need some sort of loader combined with code splitting to achieve this.
My bad, I got linked to this thread from r/programming and I didn't check to see if it was still in r/programming.
I don't see that as unfortunate. A "simpleton" probably isn't aware of a lot of things so I think we're safe. Unless you're saying that not knowing what a "bug bounty" is would imply that you're a simpleton.
The world is safe again! ***But for how long....*** # =0
Lots of people there don't know how to operate a computer, because they are too used to smartphones.
You're reading wayyyy to deeply into this. And it is unfortunate, because if simpletons knew what one was they could help, or at the very least not hinder, the discovery of bugs
If you're smart enough to know the fallbacks of CDNs and self hosting you're smart enough to figure out how to use it. Yeah, it's not like magically simple, but you can do it. 
Weren't generators always what made Redux Sagas work? 
Right. It is possible. But you didn't explain how. You replied to someone who explained how to use a CDN with locally hosted fallbacks with "just use webpack" which implies that using webpack somehow magically solves this problem, which, as you just admitted, it does not. So I guess I'm just not understanding what your comment "just use webpack" was supposed to accomplish.
Why would you want to load the site? It's a "virus", after all.
&gt; Incompetent user 😎
Glad to help. Passing functions around can be weird at first.
Good bot!
This guy didn't read the article.
Either: - write yourself a Middleware that sends the artifacts to a CDN using an S3 library or something - use some already existing project - add in a step in the compilation to your CI software to send the artifacts to the CDNs and pass in the correct URLs as necessary. Are you a developer or a script kid? Use Webpack to compile the stuff and ship it. If you need the how, you can hire me for money.
Are we gatekeeping “smart” people into particular fields/activities? Breakthroughs don’t have to revolutionize the field every single day. 
Learning to code in the 90's, in the era of Netscape 4, was a fun time. Accidentally writing infinite loops with never ending alerts was a frequent occurrence, particularly because console.log didn't exist, and neither did that checkbox to stop scripts.
I would change my job if I had to support IE in a standard package we offer. You have my sympathy and respect.
Mind boggling, isn’t it?
As a Japanese I see many of us assuming past prestige, which is dubious and unconstructive. I generally disagree with the view given the lack of objective measures. We Japanese have a sense of past prestige because, I believe, when economists measure the performance, we had the 2nd biggest economy, which is now down to the 3rd. An economic measure, however, does not show that we had prestige in other aspects of society or that it is lost by now. In fact, the problems our culture have nowadays are nothing new. We never excelled at software engineering (largely because we couldn't adopt new methods in that area if I am not mistaken). Also, don't forget that laws and policing for software are generally poor in most parts of the world. I, therefore, see nothing that supports Japan's past prestige and its downhill regarding this issue. I also argue to beware of the danger of superficial arguments found here and there in the conservative view we tend to share.
It is 4 lines of js. That is what the world is about. If you dont like it, dont click shit you arent familiar with. 20 years ago, when blacksheep.com was still something, there was a "dont click this" button, that, if clicked, would send a million window.opens around your screen with a skull and crossbones in it, forever, until you restarted your computer. This shit here is rediculous.
&gt; it's probably unwise to visit on mobile browsers, as they don't seem particularly tolerant of this kind of prank
I am baffled at how you've missed the point three times in a row. Nobody is suggesting that module bundling or CDN hosting is difficult. This comment thread is about a hybrid approach where: - you host your build artifacts on a CDN by default - if the CDN goes down the application switchs to using non-CDN hosted assets directly from your server This is so that you get the benefits of CDN hosting, but if the CDN goes down, it doesn't take your application with it. Webpack does not solve this out of the box. Your three suggestions above do not address this issue at all. Your comment "just use webpack" made it sound like webpack had some feature for CDN fallbacks built in, which, as a user of webpack since version 1, I was not aware of. So I simply asked you what you meant. I suggest rereading this comment thread, because I think you missed something somewhere.
Full code for that page here: [https://codesandbox.io/embed/ly0oxkp899](https://codesandbox.io/embed/ly0oxkp899) The abstraction works so well it's just a couple of lines. The svg loader is part of threejs. The whole thing is made possible due to [react-three-fiber](https://github.com/drcmda/react-three-fiber), a react renderer for three i've been working on, but making first progress today breaking into layout-territory.
Full code for that demo: [https://codesandbox.io/embed/ly0oxkp899](https://codesandbox.io/s/ly0oxkp899?from-embed) &amp;#x200B; The abstraction works so well that it's just a couple of lines. This is made possible by a [react renderer for three-js](https://github.com/drcmda/react-three-fiber) i've been working on, but making progress today crossing into layout territory.
The thought process? There's humiliation on the line and arresting a hacker makes the threat look more credible, as opposed to sheer incompetence and neglect.
Yes. But they were clumsily implemented since async generators didn’t exist at the time. 
Japan and Germany are very similar. Advanced in some ways. Stuck in 1987 in many other ways. I lived in Germany for 10 years, credit cards are literally a new thing there.
I guess I am. CDNs aren't made for building artifacts either - you will need to use CI. That's maybe where we're disagreeing really. 
the article doesn't even say she wrote the code, all she did was post a link to a site that had the code on it
Imo using symbols makes an enum not an enum. I'm going off how Java deals with enums here. In Java you don't have to use the enum at all if you want to do a comparison, you can use the value itself. With symbols you're forced to use the enum. Secondly if you are using TypeScript, it does not allow for symbols because symbols cannot be de/serialized to/from memory. It is especially useful for const enums which swaps Enum usage with the constant value.
This is why I hate js in web browsers. 
Recently found out about the open Reddit API, which can be accessed by adding .json at the end of an URL. My main aim was to find out, when is a subreddit most active. Number of posts and score info gives a good indication about when people are posting the most, and interacting the most. So, I made a little tool to help visualise this data. You can play with the tool yourself here - [https://butttons.github.io/reddit-trends/](https://butttons.github.io/reddit-trends/) Code is available here: [https://github.com/butttons/reddit-trends](https://github.com/butttons/reddit-trends) Made using: 1. [Vue.js](https://vuejs.org/) 2. [Charts.js](https://www.chartjs.org/) PS: I made this in a hurry, will be adding an export dataset option. Please report any bugs or suggestions, thanks a lot!
I brought it up today to my PHP teacher and I asked why the program doesn’t offer those courses and he replied pretty much just as you have, adding that it would also be nearly impossible for the staff to master them in order to teach them well. 
interesting. What's the logic? how long does a brawl take?
whoops, added one.
Busted!
Ah man I was just joking.
Stop right there criminal scum!
Assuming you're using mocha: // ./test/im-a-bad-person.js let realIt const fakeIt = description =&gt; realIt(description, () =&gt; { /* instant pass */ }) fakeIt.skip = fakeIt.only = fakeIt Object.defineProperty(global, 'it', { get: () =&gt; fakeIt, set: value =&gt; { realIt = value } }) Then add as a `--require ./test/im-a-bad-person` to your `.mocha.opts` file. &amp;#x200B; And *then* go home and think about your life choices. **"How I you get here?"** **"What went wrong?"** Ect.
Luddites.
&amp;#x200B; What a protest! Read about it. "To protest the actions of the Japanese police and the absurdity of calling this act a crime, Tokyo developer Kimikazu Kato has published on GitHub a project called [Let's Get Arrested](https://github.com/hamukazu/lets-get-arrested)." - ARSTECHNICA &amp;#x200B;
My favorite was back in the days of AIM (AOL Instant Messenger) creating "malicious" links that would change someones name/status. I trolled my friends so often with that stuff, it was my earliest "Rick Roll" style prank.
Not really. There are a shitload of people with tech skills compared to the 80s and 90s, and infosec is a super competitive field. Why would a company hire someone with a record over someone with similar skills with no record? That's not even considering that the "hack" in question isn't even anything complicated
I posted it to Twitter in the following form: while(true) { alert("The Japanese police are retarded."); } If I get deported for cyber crime, then you'll be reading about me too soon.
I’m sorry 😐 no harm, no foul. 
Lmao do people really believe this?
 &gt; The $19m Bugatti La Voiture Noire was custom-made as a celebration of me becoming the world’s first trillionaire. * scrolls down to comments * &gt; The La Voiture Noire was sold to a dude in europe. get your facts straight before you attemp to lie to people, lmao. * scrolls back up to article * &gt; I started Kelsey Coin in December 2017 which has now become the only currency in the world. ... Really dude? The guy just said he unified the world's currencies and you question whether or not he actually owns a fucking car?
it's fine with react native, don't worry about Them. :D
I like where your head's at
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
For each square on the board, a probabilty is calculated based on how many allies/enemies are adjacent. This probability is compared to a random number to see if the square remains its current color or gets converted. The server does this calculation and emits the new state of the board every 200ms. The matches can take anywhere between 5 and 30 minutes, I'm going to try speed it up by adding a small snowball effect at some stage
5
Thanks
Is ten bigger than ten?
who knows
Ricky does
X = 2 😂
but x = 5
quit polluting the global name space
The halting problem for web development: Does it take longer than a couple seconds? It's a problem. 
`[3, 2, 3, 4, 5]`
I feel like you should be doing your own homework.
I like Highcharts for charts. Their gantt product is new. https://www.highcharts.com/gantt/demo 
I just need the answers to compare the code to console outcome
ok
Could you report it anonymously?
I mean you could just run the code and that would give you the output.
You are a legend, but how did you get that.
What do you mean?
Would gladly help, if you ever open an issue or something, feel free to send me a DM.
Thank you so much! I listed out some of my current problems in the ReadMe if you think any of those are up your alley. I’m still new to the open source thing, but I’ll definitely reach out once I open actual issues!
Sure \^\^ I'll take a look and keep you updated. See you around :)
https://georgewl.github.io/lets-get-arrested/
Code is nice; well commented &amp; tested!
Hi /u/BritterDayzz, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
If you're playing around with that stuff at 13, you'll probably be a better programmer out of high school than most CS majors at graduation 🤷
Hi /u/BlindAngel729, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle). Please just no. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/BlindAngel729, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle). Please just no. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Ryan_Elliott, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Does this mean we can arrest everyone involved in the execution of shitty web interfaces?!? :D
I think, she'll have a great future as an internet-troll or maybe a great web-dev. I mean, this is pretty anyoing, but it's just as easy to "get out" of that loop like getting out of these infinite "you cannot go back"-loops on some ad-websites.
Also, I believe there are differences from location to location. For instance, around San Francisco React is comparatively more popular than, say, Dallas / Fort Worth (where more companies are on the Microsoft stack). 
horrible article she was given 補導 which is basically the police telling her what she did was wrong and not to do it again 
no it isnt illegal
its not
I like it man, very nice!
i dont think anyone important cares about a bullshit fake article
Isn't this just Promise but using class syntax to define resolve/reject?
&gt;As a Japanese yet you never once posted in japanese and you post a lot about american politics but never about japanese politics you are a liar 100% 
To be fair, Yahoo Japan is entirely separate from Yahoo at this point. All things considered, it is a fairly organized news source and community compared to most Japanese sites.
Just change yours and a few other random peoples income paycheck anonymously to be 1.5x every 6 months.
Nice!
Also known as a bookmarklet, I neglected to say it in the video but it's in the youtube description.
What is the timezone used while classifying the data?
One can be held for 23 days without charge in Japan, so this probably shouldn't be attempted without a plan to maintain sanity during that time.
Im at this point right now. And it is very slow going. I can honestly say Im a bit bored. But as far as content it is really staggering. Im about 40% done now and can't wait till cookies and auth. you literally implement the db 5 different ways. First using the built-in fs module ( which is pretty cool I think). I really with he would have covered less things ( like maybe just sql), but done more foundational training on the ORM( sequelize, which maps tables to sequelize classes/objects ). I would say to be proficient at that part you absolutely NEED to go through the docs in-depth if you haven't had MySql or ORM experience. Anywho..... good luck. And I'm dearly hoping when I take Meads class the delivery is more exciting
This is really cool! I may have to try something like this soon. That Reddit API looks like a great resource.
Thanks @systoll comment above. It inspire me to figure out this thing. Even if if made me pain headache when tried jumping inside to know what is behind the scenes :) For those who want to know how it works. Here I already make a [demo](https://bitbucket.org/maitrungduc1410/twitter-hacking/src/master/)
Are "elective" and "major" American English words? I'm in Junior College (11th std or 11th grade) and it's just a subject that we have to take
Just looking at the .json file it looks like UTC since the times are in Unix time.
&gt; You can see it above, though that's not quite the same as **single-handedly crashing 1,507 computer systems on one day**. I understood that reference.
TypeScript + TypeORM + InversifyJS + Routing-Controllers 
My own fault, but I'd been playing around with it using my login data, so if it had been reported anonymously, they would've traced it back to me regardless. But there was also no email / method of reporting directly to the vendor, so I was forced to go through my work.
Bruh what the fuck. Your using windows 7, please don't tell me you use github gui.
I think you’re looking at the project I was inspired by, not my reskin lol. 
UTC. I may be wrong but I think most website sends the data to the browser in UTC timezone, and the browser changes it to local time zone. 
I started with his Javascript course first, not knowing any better, and it took 5 weeks. There was an anticipation (maybe even hints from his side) that it was a good preparation for his React course. When I started his React course, it was as if I never took the "preparation". He started using "this" binding (which, as you mentioned, he eventually changed to fat arrow functions (banging the head)), and also map, filter, reduce etc. functions and it was suddenly clear that I wasted 5 weeks of my life. I took Anthony Alicea's "JS the weird parts" on Udemy and it was an epiphany. This is the best kept secret of understanding JS. Took a couple of weeks. Then went with Grider's course on React, about which I wrote a dithyramb above. Grider is a fresh no-nonsense communication genius, comparing to Mead.
Ah shit, I bought the Grider course first, actually, but never got around to it and though Mead's course looked better after taking Grider's Javascript course, which I felt was lacking. He never EVER replied in the Q&amp;A forums and what sold me on Mead's course was stating in the preview that you will always get a response in the Q&amp;A with his courses--and he wasn't lying! They answer quickly and it's the only way I got through the course. That's why, despite the problems I had with the course, I thoroughly respect Andrew Mead and left him a 5 star rating. He is so insanely thorough it just blows that he's come up with this somewhat bizarre teaching approach.
This is reddit. There is almost no japanese communities, and there are american politics in almost every sub Just because you see us speak english doesn't mean we're english
I'm not sure if I'm just easily amused but I love the animations while the program ran! Great job :)
I have the ski mask. Am I getting closer?
Close enough. I have some socks with maple leaves, now most people consider me a stoner anyway.
No I mean you are using windows 7
It looks really nice and does the job well, but it seems to be very slow to load a reasonable amount of data. It looks like you're getting posts in pages of 25 records. Does the api allow you to increase that? And/or could you run multiple requests in parallel? I don't know what kind of rate limiting reddit has in place. 
&gt;6 year old jQuery UIs Idk man, it's pretty rough to think an Angular 1 project is as bad as what I've seen
I think you've missed the point entirely - from a PR perspective, no sane company would have alerted the authorities in the first case.
Interesting tool for karmawhores like me. (= Thoughts: 1. While it's parsing, you might consider changing Start to Stop. Currently, while running, Start is inoperative and Clear will reset the count and start over. Clear could spam the api and may get blocked if people are stupid . . . which we know them to be. 2. The descriptions seem intuitive, but it isn't really, I don't think. Some definition text or hovers would help. 3. Long term, you might put a cap on the number of posts to be sampled, pre-do super dense requests of popular subs once every couple hours, save the graphs, and link them directly on that page there. Like the above askreddit &gt; Hot &gt; 25k (or more). This will keep your traffic and api requests way down. As to point 2, the graph shown by askreddit &gt; Hot &gt; 5000 has a lone spike at 1pm for "Score Total". Is that the total of posts sampled at 1pm, or the total of posts *made* in the 1pm hour? How does that grok with "# of posts" peak at 3am? Does this really mean that while the vast majority of Hot posts were posted between midnight and 3 am, the highest voted posts are overwhelming posted in the 1pm hour? If that's the case, it's absolutely something that I wouldn't have expected, and throws all expectations of distribution right off the fucking bridge. See what you did here? You've already started a conversation. ***GOOD TOOL.*** &amp;#x200B;
Well I didn't say it was you who I was referring to either :p
Hi /u/hugesavings, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/vankh0a, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Grider never replies, but his TA Bobby replies, plus this React course has probably the liveliest peer-QA participation I've ever seen. When weighing Mead's teeth-pulling endless course, with one of the most boring projects, TODO list (again.... eye roll...) all 5 weeks.... , against lively meaningful short projects in Grider's course.... It doesn't even start to compare. (PS: Grider does reply to DMs, to emails, to Twitter). (PS2: I would rather him using his time to create his amazing courses (21 of them, already) than get bogged down in repetitive cycle of QA)
Thankfully it's IE11 so I can still polyfill some stuff. Older versions though, I'm out
No, because you cannot build declarative compositions via Promises, you have to use .then() method and expose data outside. Using async objects you can build such compositions, and encapsulate behaviour inside of your objects.
This is amazing! Entirely your own project?
Awesome work. Looks like a lightweight version of Agenda without some of the bells and whistles.
It's the UTC time. I was thinking of adding a change time zone option, might add it today. 
Thanks for the criticism, it's appreciated. 1. I actually disable the start button when it starts going off. But I forgot to add CSS classes to go with the disabled button, so lol. Will be adding it. Possibly the start/stop logic too. 2. I'm not much of a designer unfortunately. 3. I don't really care about rate limiting, it's fetching the Reddit API directly from that page, I have no data hosted anywhere. I'm pretty sure the good people of Reddit have put in measures to prevent abuse. This tool just recursively fetches /r/(subreddit)/(sort type)/.json and processes the posts, as it goes on. Explanations of how it counts stuff - 1. It parses the posts, and saves only the relevant info, including the hour, it was posted. 2. Total posts = number of posts at that hour. 3. Score total = total number of scores of all the posts at that hour. 4. Score mean = average score of all the posts at that hour. 5. Score median = median score of all the posts at that hour. Check it out here - https://github.com/butttons/reddit-trends/blob/master/src/store/reddit/getters.ts Thanks for the suggestions, I'll try to do something about the bland design :P
I think the best style of Typescript is basically exactly the same looking as JavaScript, except with typed arguments. Just functions in es2015 modules. Crackford-style factories that return simple typed plain on objects `{}` (no class keyword.) The compiler can actually infer many types without specifying them, too, so don't put them where they're not needed.
Was really laggy for me.
 1. If I want to comment about Japanese politics, or write whatever in Japanese, I choose 2-chan because it has far larger Japanese community 2. My nationality is off-topic 3. I am concerned about your username sounding as if you want to harm black people - sorry if I was wrong, but it's hard to get the meaning right as it's in alphabet
I hadn't thought of that! I think there would be modifiers to increase the number of posts given in a response, I'll try to do that. And I cannot run them in parallel, reddit pagination will not allow that. To go the next page, I must get the cursor position from the previous page response. 
Also, you are welcome to counter my arguments if you want, but denying my nationality gives you nothing.
Nice demo 👍 WebGL is the new Macromedia Flash :P
With this logic the job portals have to be full of assembler/delphi/... jobs. But it's not. 
Really? Maybe I shouldn’t re parse the SVGs before each transition... 🤔 need to profile a bit more but this should just soar without lag.
Thanks! Up until a month ago I was the only one working on the code of this project, but now there's another guy making some very cool contributions - Hugo Granstrom - and I'm having bucket loads of fun working with him. Immensly talented and I've already learnt a great deal from the code that he's written... Open source is amazing! In case you're curious about the project and would like to contribute, you'll find it [here](https://github.com/TheHappyKoala/Harmony-of-the-Spheres). Happy Tuesday, gotta get my butt to work now! 
You should also post it on r/dataisbeautiful
your argument is based on a racist lie, there is nothing to counter when 90% of what you state is just false
&gt;2-chan you cant even spell the name properly but ill ignore it, what board &gt;My nationality is not important in the argument it is when youre using your personal experience as an argument &gt;I am concerned about your username sounding as if you want to harm black people it might sound like that to a gaijin whos japanese is about as good as 12 year olds 
I did, but didn't seem to get any traction there. Might update it with some new features and post again. 
/r/newsokur theres a difference between talking about american politics when theyre brought up and obsessing over trump like he has an actual negative effect on your life (which he only would if youre american) https://www.reddit.com/r/NewPatriotism/comments/azwd8m/republicans_against_the_constitution_trump_just/eibdz4a/?context=3 What kind of non american would post in a sub called new patriotism which i believe is a term exclusive to americans, if not the sub certainly is about america https://www.reddit.com/r/The_Mueller/comments/azj1mv/its_5_term_rep_congressman_and_florida/ei8gggo/?context=3 https://www.reddit.com/r/EnoughTrumpSpam/comments/az2ywr/has_reality_finally_jumped_the_shark_florida/ei61lbk/?context=3 what kind of non american would waste so much time on these anti trump subs, if youre not american he hardly affects you for it to be worth the time 
Here's a sneak peek of /r/newsokur using the [top posts](https://np.reddit.com/r/newsokur/top/?sort=top&amp;t=year) of the year! \#1: [今日は1°](https://i.imgur.com/Jg7G2Mz.png) | [18 comments](https://np.reddit.com/r/newsokur/comments/akee64/今日は1/) \#2: [天才科学者スティーブン・ホーキング博士 死去](http://www.bbc.co.uk/news/uk-43396008) | [50 comments](https://np.reddit.com/r/newsokur/comments/84aiyw/天才科学者スティーブンホーキング博士_死去/) \#3: [【ネトウヨ春のBAN祭り】テキサス親父、永久BAN](https://www.youtube.com/user/OUTSIDESOUND) | [66 comments](https://np.reddit.com/r/newsokur/comments/8ocowf/ネトウヨ春のban祭りテキサス親父永久ban/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/afd0dd/blacklist/)
This is code dealing with service workers. It's fairly advanced and I wouldn't worry about understanding it if you're just getting started.
Well Promise.all usually operates on an Array. But there's a filter function being applied to the array. Look at the parameter to `filter()`. It's a function which doesn't return a value. So it will give you an empty array. So in this case Promise.all, operating on an empty Array, will immediately resolve. See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all#Fulfillment
This person is right
That's one subreddit in Japanese, and it's just news. That's still "almost no japanese community" And people outside America post about american politics, either because they care, or most likely because it sneaks into almost every sub (cf this very thread). As someone who posts both on /r/japan and /r/The_Donald I would have though you would know
Did you try running this fancy new tool I saw somewhere that shows when posts get the most traction in a sub? Might help! 
Quite a bit of Delphi and Cobol jobs out there... [9 legacy programming skills still in demand](https://www.cio.com/article/3243575/9-legacy-programming-skills-still-in-demand.html)
Just starred. Nice work man! Very useful
I haven't quite wrapped my head around this, but is it also applicable to Angular? Or does the way it does templating preclude it?
I love watching data grow
https://youtu.be/-5wpm-gesOY
I love Tom! But this is why we have moment, date-fns and other options.
[https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object-oriented\_JS](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object-oriented_JS) [https://github.com/getify/You-Dont-Know-JS/blob/master/this%20&amp;%20object%20prototypes/README.md#you-dont-know-js-this--object-prototypes](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20&amp;%20object%20prototypes/README.md#you-dont-know-js-this--object-prototypes) [https://javascript.info/](https://javascript.info/) 
While not answering OP's question, I'd like to suggest reading up on compositional programming next
I haven’t played with angular, but as he writes in the article, this technique is bout state management in general. Not tied to a speciffic framework or even language. 
You need to declare "status" outside of the callback function. Variables declared inside a function are not accessible from outside the function. You should start reading about "Scope" and "Context".
[fuse angular 7 template](https://themedownloaded.com)
Please visit /r/LearnJavascript and ask about asynchronous calls. Also do search around the web for resources on that subject. Some keywords you may want to use in your search: callbacks, asynchronous calls, promises, "return from an asynchronous call".
Looks interesting. No idea what's up with the waves of updating the graph from the right is all about though?
Doesn't Edge have a compatibility mode for those sites that need it? Surely running IE11 or less is a security risk for any organisation these days.
I guess the usual tutorial posts get less views now as people just watch youtube videos or stackoverflow the doubts. Better to make tools and make posts about the tools and algorithms used in them. Blogs are more of personal portfolio thing now.
Why so wordy? Why is it not just query? Why have the querySelectorAll one when jQuery didn't need that? Really, vanilla JS is too wordy, it's like W3 standards comittee never programmed in their life. document.querySelectorAll bah! Why do I need to specify document? What else would I be querying? A spreadsheet?
You could just use jquery, catch the event and Display the checkbox
- Get the ID of the textbox and the hidden element. - Add event listener to textbox - Inside event listener add function. In it get the keypresses and store them in a string. If atring matches what you want, then change css of hidden element from display:none to display:block
/r/dataisbeautiful
I feel your pain. I struggled with this last year when I got back into blogging. Perhaps blog posts to do with topics like APIs, WebGL, Machine learning and Cryptocurrency. I personally decided to explore the usual topics in the Dart programming language [https://creativebracket.com](https://creativebracket.com) 
Oh okay. Yeah educate in the US is different. We have high school from grade 9-12, then we go to college. At college you pick a major like Computer Science. There will be certain classes that you are required to take in order to pass with a major in Computer Science. In addition to those classes you will need to take additional classes of your choosing (in whatever discipline you'd like), those are elective. 
 Oh okay. Yeah educate in the US is different. We have high school from grade 9-12, then we go to college. At college you pick a major like Computer Science. There will be certain classes that you are required to take in order to graduate with a major in Computer Science (i.e. algorithms &amp; data structures, operating systems, database, discrete mathematics, linear algebra, etc). In addition to those classes you will need to take additional classes of your choosing (in whatever discipline you'd like), those are elective. 
I’d say the function passed to filter is missing its body. basically your example list all available caches, filters it on some criteria (missing in given example, its usually some older caches) and then waits with Promise.all until those are deleted. 
BAD POST, BAD!
Thankfully, [this one](http://vanilla-js.com) is gaining some traction.
LOLWUT
Whichever one suits your needs.
Xaja, surely.
Here's a fiddle: https://jsfiddle.net/yzowL68b/
&gt; Details fuzzy, but IIRC Fetch returns and looks like a 200 unless you actively ask. Axios is more direct about, “hey, something’s wrong here.” ...this is super odd to me. I much prefer having the transport layer errors clearly separate from whatever the server gives me. And looking at the status is 2nd nature anyway, along with any other checks involved in verifying if the request went through OK. &gt; You can also pass an inbuilt delay with Axios This is again something that feels useful, but also Axios crossing outside what I'd expect to be its domain. There's nothing stopping me from adding a delay to a promise, and I'd rather use a tool that does exactly that, for _any_ promise. This would mostly be just a taste thing, except that now I find Axios to be a bit of a jQuery — a thing that somehow ends up in every project, eventually, and therefore something I have to deal with whether I like it or not.
Want to get a job? React. If you're already working, it depends on the circumstances. What your team knows, what your client wants, etc.
Hi /u/myrrtle, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/rajon789, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle). Please just no. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/avezshaikh067, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/dedsechackr5, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/NemoGreen, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle). Please just no. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/nicu2595, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/akif2702, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Why do you need to write anything if you don't have ideas?
Hi /u/RobbieDeemo, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hey all, just wanted to share some stuff I've learned over the past few months with regards to some common functional programming patterns, and what that looks like in typescript with the [fp-ts](https://github.com/gcanti/fp-ts) library.
Although a month has passed since this comment and it wasn't even directed at me, I thought I'd add my thoughts on this list to help others who might have similar doubts! \- We gotta remember that Max has been in this industry since his early teens (and I'm pretty sure he's over 30 now), which would mean he's been learning A LOT in the last 20 years, especially that he spent most of this time freelancing where as you can imagine, people tend to be more versatile in using technologies. \- I've heard many times from experienced developers that all languages (and frameworks) are in the end very similar and it comes down to learning the new syntax and methodologies. I think that plays a huge role in how can Max know SO MANY technologies but still have above-average experience in each of those. \- Final thing I wanna say about his diversity of courses - at least half of his courses are related to Angular, which is the framework he by far knows best. This knowledge translates to other frameworks and especially if you start with the most complete one (Angular). That said, I don't think his courses are as diverse as it could appear if you just glanced at that entire list. \- I agree with Wes Bos' marketing tactics, the sell honestly feels too "hard" and not genuine. I wouldn't mind too much if the content is high-quality, but knowing his JS30 course, I wouldn't have much confidence in getting value for money by buying and of his premium courses. Not that I have, so it's just assumptions. \- If you compare Max and Andrew on the other hand, I feel Max is more comprehensive and will give you a wider exposure to the technology, where as Andrew is more focused and you'll learn each concept just a little bit better. I'm not talking about any specific course here. Think that's it as far as giving Max some love, lol. Since you guys were discussing React course specifically, I myself picked Stephen Grider's and it's brilliant. The guy is very experienced, lessons are very clear and focused and he's doing a great job with the diagrams to help us visualize. Also out of the three teachers, I think Stephen's stuff is the most advanced and the projects most interesting.
He just did, very recently. I think the course gained about 10 or so hours. Any experience with it? I've taken break from Max's Node course (and node in general) to focus on the front-end and thought I'd be learning from both Max and Andrew when I pick node up again.
thank you thank you thank you so much 
Cheers!
No, Edge was a brand new browser engine and a clean break from legacy IE features. IE 11 is still supported by MS and will be for years yet as they've continued to ship it with their operating systems. IE 10 only just reached end of life. You need IE 11 for compatibility mode and legacy features. I'm afraid I'll be supporting IE11 long after I've stopped separately supporting Edge, since it's switching to Chromium.
That's an interesting take! The course was always supposed to be focused on Node.js specifically and not go into any database too deeply, just to show how each implementation would look like given the current scope of the app (which wasn't too advanced). This still ended up being quite mundane and I think could be better optimized. I too got bored by that part of the course and actually took a break from Node.js to focus on React for now. Definitely coming back to Node at some point in the comings months but I think I'll learn from both Andrew and Max at the same time to mix things up a little bit. Andrew recently updated his course(refilmed it) and it's now even longer than Max's despite having nearly 3x fewer lessons. I think it'll be good to get deep into some concepts and then use Max's course for topics unexplored by Max. To answer your worry about Andrew's delivery, I read the comments about the course being very thorough(t.ex. he itnroduces Express only after 7 or so hours) so I'm not sure if it's your best pick. Knowing Andrew from Vanilla JS course though, he does move at a pretty good pace but every lesson also includes a challenge + his own implementation so that'll take a good chunk of the course time-wise.
I always wanted to code something like that, thank you! Looks great. 
performance, no real issue at 200 vs 2000 lines of code. Ideally you minify/gzip but we are getting into lecture territory there. You should run your own tests though.
2000 LOC is nothing.
Thanks for the reply. I'm running as a console app and never considered condensing the code that way but good idea - I wonder if that works...
I don't think the size of your modules will have any effect on performance, especially not on the frontend, unless you have a way to split it up in a way that will reduce that amount of code that's actually run. 
Thanks - that's what I figured but needed some feedback
If it's a console app, there's no point. 
Thank you for the feedback. Running a console p2p with a main async function managing connections and the messaging switch gets large - I probably will break it up over time. I usually lurk but wow got three comments in less than 5 min. /r/javascript is awesome!
2000K lines of code is nothing, A while ago I wrote one file that had over 19K LOC, in total the project was about 53K LOC. It really wont effect anything. look a computer can read it faster than a human thats all you need to know :p
cool, thank you for the example!
All of what you said can be done in both FP and OOP syntax. MDN docs on Promise has a section on composition. You can encapsulated with closure more securely than private member/method, since you cannot expose a closure even with reflection
Actually import/export "slower" when comparing to keeping it all in one file. (you have to read more files, duh) However, we are humans. We do like to split up our code in smaller pieces. So its mostly for your pleasure :D
OK, there was no Bobby in the course I took, so it turned me off him. If I'd known there was a Bobby in the React course, I might've gone ahead and taken that one instead. Rather, I took the advice of the one guy in here who recommended Mead above all others. That's why, when I was finished, I came back to give my opinion of the Mead course to help others make an informed decision.
+1 for MomentJS. It was in one of my JS best practices classes, and I've never looked back.
The observer pattern is coming, like it or not. It is being written into future JS specifications.
Hi /u/supraniti, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Can you write out what the question is? You only stated what your interpretation of the question is.
Does this mean that can also be handled with asnyc and await?
updated. 
In javascript, I am pretty sure a normal string comparison in an array.sort would work assuming `var data = ["Apple has a rather circular shape","Apple is a fruit", ...etc...]` `console.log (data.sort( ( a, b ) =&gt; a - b ? 1 : -1 ).join( "," ) )` &amp;#x200B;
One could, but you'd be fighting redux to do it. What is the appeal of going against a central store? What does observables solve that redux and middleware can't solve in a more developer friendly way?
You are on the right track. Expecting a matching word might chunk your information too much, as we dont know the use case. Its better to expect a similar set of letters, wether they make the same word or not. So you can sort "This apple was" and "This app is" properly. This will inadvertently allow you to sort same words as well
LOC limit per file is not a technical limitation, but code management best practice. If you have justified case of having 10 000 LOC file and people are ok with working on this file, why not?
Javascript string comparisons should handle a lot for you. `stringA &lt; stringB` &amp;#x200B; example data `const data = ["my balogna has a first name", "A is for Apple", "Apples are great", "Apples are beautiful", "apples are sweet"]` &amp;#x200B; normal Array.sort using a sort function `console.log(data.sort((a,b) =&gt; {` `if (nameA &lt; nameB) //sort string ascending` `return -1;` `if (nameA &gt; nameB)` `return 1;` `return 0;` `}).join(","));` &amp;#x200B; normal Array.sort using [localeCompare](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare) `console.log(data.sort((a, b) =&gt; a.localeCompare(b)))` &amp;#x200B;
&gt; above this number in a SPA I run into performance issues? Thanks If you are writing a SPA, its all about resources and dependencies. A single bad choice, like full sized moment.js, can add a ton of bloat to your project which really impacts web performance. With node.js however, you have tons more space to work with. you can easily get a hundred times that size and still have a well performing node.js service. 
&gt; it's like W3 standards comittee never programmed in their life Ah yes because $ is such a clear identifier. querySelectAll works on more than just the document. But since it's the DOM.. document object module.. document is an object. Kinda makes sense, doesn't it? If it really bothers you and you're only using on document, just do: const $ = document.querySelector.bind(document)
thank you! I did not know about **localcompare**.
LOC has absolutely nothing to do with performance. A well programmed 2000 line application can run circles around a badly programmed 200 line application (of course, this generally doesn't happen, but you get the point). Generally, you want to keep things well organised, and that usually means breaking the code into modules, but it's not a hard and fast requirement. An SPA won't run into performance issues if you honour all requests in a timely manner. Just keep to your API contract and all will be good.
Not sure about how to optimize (WebGL is not my area of expertise), but my computer is actually pretty beefy (although to be fair I run a million windows/tabs at once), so I just thought it'd be a useful data point to know that however it runs for you, it's not yet performant for everyone. But again, really cool project.
Personally I felt you put the cart before the horse. You're very last (tiny) section was "Why go through all this trouble?", but that was the first thing I wanted to know. Why am I learning all these ways to make writing a selector harder, with no express benefit? Even at the end there was very little reason given to use the rest of the article. A few paragraphs on the actual benefit of using the pattern *before* you introduce the pattern (especially due to its complexity, and especially for people without a strong functional background) would have really made the rest of the article more palatable ... for me at least.
Very cool!
You are gonna want to indent your code if you want people to spend time on your question. To be frank, I am not sure that I understand what you try to do.
Ah yes. I did it locally. I did it using underscore in JS. If you do end up doing this path, make sure you keep in mind the priority of Capitalization. IE 'A','a','B','b' will be sorted into 'A','B','a','b'. 
Thanks for the feedback! I tried to give a high-level overview in the first paragraph which is basically: _If you do this, you get a bunch of free functions to use!_ I'm guessing this was too general, and not specific enough?
I've been writing a series over the last couple of months going into a little bit of depth on some features that I think (maybe rightly or wrongly) a lot of people don't have a good grasp on in JS. For the most part these are ES6 features or new APIs. Though it's mostly aimed at newer developers, I thought it might be of interest to you guys as well so I made a page for the whole collection. The topics covered are Array Functions, Destructuring, Rest and Spread, Async and Await, Proxies, Class Properties, Decorators, and the Pipeline Operator. 
I was just discussing with a new learner how the JS community has in general moved away from callbacks toward promises (eg. Node has literally introduced Util.promisify which converts functions from one style to the other) ... but events never transitioned. Obviously there are good reasons for this, but the use case from the article was an interesting example of actually "promisifying" events :)
this function inside this.reduceByOne function will also affect the this functions of this.addByOne function...not sure how to isolate that. 
&gt; I'm guessing this was too general, and not specific enough? Yes. I can't speak for anyone else, but if an article is going to make me have to think hard, I want to know that I'm going to get something cool out of thinking hard first.
Inb4 bot attack.
The pipleline operator is not in a single ES standard, so don't call it a feature of JS.
That's awesome.
Related to performance, we'd have to know what you're doing in those 2000 lines. I could write a 10 line function that hangs your entire app. The complexity and amount of I/O used in the code affects performance, not number of lines.
Same with Class Properties and Decorators. All three are still proposals and not officially standardized. To the authors credit, this is clearly spelled out in each case (though, while still not standard, class properties are implemented and available natively in Chrome as of 72).
I see. I think there's some things i can still do to optimize it, like unifying all the render-loops, currently three has one and react-spring drives another. I believe the pixel ratio was also doubled in the first version of this demo. If anything's slow it's most likely still a bug or mishap in there somewhere. I hope i can cancel this out to get to raw gl performance as a real competitor to doing graphics in the dom.
Nice! You should do one on optional chaining
So it's just repository pattern renamed?
From my experience I would recommend to go through JS basics combined with HTML, CSS basics 1. Closure, hoisting, ES6, prototypes, promises, async JS etc 2. Block element, event propagation etc .position, display, Pseudo class in CSS etc
Client-side repository pattern sempai!
Nuxt allows you to pre-render your Vue app server-side. Take it one step at a time and learn Vue first, then dive into Nuxt. &amp;#x200B;
I specifically talk about how they're upcoming features in the articles, and the process of getting them working in Babel. In the series I refer to them as "new and upcoming features", though I didn't in the title here.
Hi /u/chaplino1000, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/osoese, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
When I save the file I lose all the white spaces (that are more than 1) line breaks, Is it possible to save the file to text without losing the formatting? My code : [https://jsfiddle.net/ykqLt59h/4/](https://jsfiddle.net/ykqLt59h/4/)
Hi /u/blockchain_dev, this post was removed. Job and job-related posts are prohibited * Job postings: Please post to /r/remotejs, /r/forhire, etc. instead of here. * Job/Career advice: Please post to /r/cscareerquestions instead of here. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Mobh13, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
&gt;When I save the file I lose all the white spaces (that are more than 1) line breaks, Is it possible to save the file to text without losing the formatting? My code : &gt; &gt;https://jsfiddle.net/ykqLt59h/4/ &amp;#x200B;
Hi /u/ismayil1, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/VersionConflict, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
working link: [https://aws.amazon.com/blogs/opensource/aws-joins-the-graphql-foundation/](https://aws.amazon.com/blogs/opensource/aws-joins-the-graphql-foundation/)
How wonderful, right now I’m doing a boring ass backend and I have like 13 of these in a single page
Last post had a broken link because I'm terrible at reddit. Thanks, guardians of new!
This is amazing lol, nice work :D I'll see if I can contribute as well!
How do you change your name after playing as anonymous 1 time?
If you want to change your name clear your cache or close and reopen the gameand it should let you pick another name. I used a session for making sure the user doesn't keep changing names otherwise it adds to many users to the database. 
Anyone have an opinion on how this compares to TinyMCE 5?
Perhaps I'm preaching to the choir, but shouldn't you be using 1 editor and recycle it to edit whichever content the user selects?
I tried the game. Nice effort Keep it up !
Why make distinction with name? I always thought of repository pattern as layer abstracting access to some data. Never thought about it as a backend only pattern.
Use event delegation. 
Thanks :D
Pretty neat :) A little awkward to play in the phone but still works. I'll read the source after I wake up :)
Yea ik... Canvas doesn't respond to responsiveness that well :#
Sadly they’re all needed
I've just opened [an issue](https://github.com/CromulentCoder/Asteroid-Blaster/issues/2) about a small game-breaking glitch.
That is the idea. Criminals were profiting from that "mistake" and the kid ruined their business model. 
Hey dude I really like the simply proxy example you gave. It helped me understand the use of proxy’s!
Nice Game 4378 Points :))
&gt; 40 business hours a week [In Japan](https://finance.yahoo.com/news/working-towards-death-in-japan-140758364.html)? You have to be able to code 50 hours or more.
Cool, tried it on an iPhone XS Max and it’s great.
But sorry for the 12344321
I dont have exact tutorials handy, but your best bet is probably learning blockchain basics, and some framework, like Truffle. This is going to allow you building on top of ethereum.
Happy Cake Day, teenager! All the best!
Thanks for that. I added a fix for that, should work fine now. 
Thanks :D
Still can't beat 8237
No cheating! 
Thanks!
Is that a challenge?
I remember working on a project that used CKEditor 4, or maybe it was 3, can't remember. But I still get Vietnam flashbacks thinking about it. Hah Esp in a product that needed a very custom version of the editor (with a ton of plugins), and to work inside a React app. My god, that was a nightmare. I hope it's better now, but I'd probably personally refuse to ever work with/in CKEditor again after that.
I'm on the leaderboard:)
Haven't looked into decorators before. Really enjoyed reading about that and I learned a lot. Thanks! 
I hear you :) Luckily, CKEditor 5 is a complete rewrite. We designed and implemented it from scratch which allowed us to straighten out all those pitfalls of the previous versions (which were usually side effects of CKEditor 3 being implemented in really ancient times, i.e. around 2008-2009). &amp;#x200B; Anyway, CKEditor 5 is a completely different project. I don't know why we didn't change the name to make that clear 🤦‍♂️. Or at least named it CKEditor 7 🤣 &amp;#x200B; You can read about CKEditor 5 design in [https://ckeditor.com/docs/ckeditor5/latest/framework/guides/overview.html](https://ckeditor.com/docs/ckeditor5/latest/framework/guides/overview.html). &amp;#x200B; Oh, BTW, and it comes with official \[React\]([https://ckeditor.com/docs/ckeditor5/latest/builds/guides/integration/frameworks/react.html](https://ckeditor.com/docs/ckeditor5/latest/builds/guides/integration/frameworks/react.html)), \[Vue.js\]([https://ckeditor.com/docs/ckeditor5/latest/builds/guides/integration/frameworks/vuejs.html](https://ckeditor.com/docs/ckeditor5/latest/builds/guides/integration/frameworks/vuejs.html)) and \[Angular\]([https://ckeditor.com/docs/ckeditor5/latest/builds/guides/integration/frameworks/angular.html](https://ckeditor.com/docs/ckeditor5/latest/builds/guides/integration/frameworks/react.html)) integrations.
[removed]
Looks like someone bumped you out of it... Try again? ;)
Confused as to why you can't have an export file with your constants defined and make sure people don't edit them? Also off-topic but I can't see any of the links on your site, even when I try and highlight them. Chrome 72.0.3626.96 and Android 9
May I ask why? Are you trying to create a polyfill for JS template strings? Or is this homework? Because the obvious thing would be to do: let [pet1, pet2] = ["dog", "cat"]; document.write(`I have a ${pet1} and a ${pet2}`);
Hi /u/mpalpha, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/MakiBM, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/nikulasoskarsson, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/zacksiri, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/coold007, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/lysywojtek, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse
JSON.parse()
The content of a cookie is 100% determined by the web site that stores it, and probably does not contain anything but a user identification
just a learning exercise. The original requirement was to be able to customize the placeholder wrapper characters "{{" and "}}", so template literals were a no go.
just a learning exercise. The original requirement was to be able to customize the placeholder wrapper characters "{{" and "}}", so template literals were a no go.
CKEditor 5 developer here, so I don't want to go too much into direct comparisons like this. However, there are two major (and objective) differences between TinyMCE 5 and CKEditor 5. &amp;#x200B; Firstly, CKEditor 5 implements a custom data model while TinyMCE (and CKEditor 4) use the DOM as their model (and view). &amp;#x200B; Secondly, implementing a custom data model was possible because CKEditor 5 is a complete rewrite of its predecessor. That allowed us to review every aspect of its design and there are very little common things between CKEditor 5 and CKEditor 4 (besides the name 😜). &amp;#x200B; &amp;#x200B;
I tried this and it didn't work for me. 
The problem flux and redux solves are specific to React-like architectures which rely on unidirectional state change. Flux and Redux solve the problem of updating state in those architecture. There are many more ways to build good software. Observers set up many-to-many event relationships. Redux is to React state what observers are to events. If you try to implement an event based architecture in React, you will end up with a Redux central store that looks a lot like the Observer pattern. But you wouldn't, because it's not a best practice for React. Use the right tool for the right job, and don't tell others their tool sucks because it doesn't fit into your job.
Well, Hypothetically speaking, lets say I want to extract address information from the visitors who come to my website. Do you know how I can do this?
Has potential, it's still pretty rough. I'm impressed that you released it anyway. Kudos to you. 
You ask your users, our you get their email address and use Google or some advert company to provide it. 
Hi /u/Antheny, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Needleless, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Thanks a lot. I made it for fun more than anything else, didn't expect such a welcome response from the community :)
Plus if you are going to take web development seriously it would be your benefit you learn the vanilla js way. Or at least understand it.
&gt; vue-blogfront is currently the fastest, most feature rich and beautiful open source blog solution on the market On which market? The same as Ghost and the other 1000 solutions? That's a very blatant statement without presenting any comparison tables.
As a PC user, I don't like having to constantly hold down the mouse to move the cannon. It should just move with the mouse. Also, the asteroids seem to have way too much health, I can almost never destroy them before they land even when I get near 100% hits.
[removed]
Sorry about that. I meant to post in learnjs but completely forgot. Thanks!
It looks so good. Did you make the icons yourself ?
Does CKEditor support custom, non-editable inline tags? My use case is having small non-editable styled tag placeholders inserted inline where we can later parse the input and dynamically replace the tag placeholder text on the back end. The user should not be able to edit the placeholder (except delete). I've encountered this requirement multiple times at many different companies, but for the life of me, I could never find a library that actually does this, and implementing it using contenteditable=true and nesting the placeholder tags as contenteditable=false causes countless issues. The new inline widgets looks promising, but I'm not sure if it has the features to fit my usecase. Thanks!
The only thing that always disappoints me when it comes to these editors, is the totally broken experience on mobile. On my iPhone, for example, scrolling totally breaks the editor. The toolbar freaks out and pops in and out of existence. I think it's probably preventing some adoption, but I have zero data for that so I'm really just speaking out my ass. I ended up writing my own editor for mobile work using Slate, and wow is it hard to deal with iOS scrolling peculiarities. But totally worth it IMO 
I like it, works fine on iphone 6
Hi /u/darkman_it, this post was removed. Job and job-related posts are prohibited * Job postings: Please post to /r/remotejs, /r/forhire, etc. instead of here. * Job/Career advice: Please post to /r/cscareerquestions instead of here. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Not bad. It took me a couple tries to understand how to survive. Pretty good for a first browser game.
You're completely right. Using `contentEditable=false` directly indeed causes a lot of issues. We've learned a lot about that back in 2013 when [we introduced widgets to CKEditor 4](https://ckeditor.com/docs/ckeditor4/latest/guide/dev_widgets.html). Widgets use `contentEditable=false/true` internally, but add tones of hacks on top of that to fix browser issues. I actually remember dealing with those issues one by one back then 😱. I thought there's no end to them. Selection, focus, keyboard navigation, all kind of browser quirks. The final result is great, though, and CKEditor 4 widgets are by developers in ways that we didn't imagine. When implementing CKEditor 5 we used that experience but also took the opportunity to clean up the concept and implementation. This is most visible in the API and implementation but we were also able to handle some edge cases that could not be tackled in CKEditor 4. We know about companies which started doing really amazing things with widgets in CKEditor 5 – again, stuff that we didn't even consider when implementing them (e.g. widget inside a widget inside a widget to implement structured editing of some parts of the content). Anyway, you can create [non-editable blocks](https://ckeditor.com/docs/ckeditor5/latest/framework/guides/tutorials/implementing-a-block-widget.html) as well as [non-editable inline elements](https://ckeditor.com/docs/ckeditor5/latest/framework/guides/tutorials/implementing-an-inline-widget.html) in CKEditor 5. The latter links to a tutorial which implements a placeholder feature (unfortunately, there's no live demo there 😔 but we're working on it) – just like the feature that you described. I'm really curious of your feedback!
Super fun and addictive! Nice work!
Inline widgets, eh? Got a demo of it? :D I have a small app that a client of mine uses and he relies heavily on placeholders to create the documents from templates. It's a nice feature of CKE4, but it has it has a problem or two... now that you have inline widgets and seem to make pricing a bit easier to understand I might give CKE5 a second chance. Also - how would all those premium features (Real-time collaborative editing, Comments, Track changes) affect the $29 plan? Thanks. (może być na priv)
i got linked to a donald thread so i posted there once, i dont constantly post on american political subreddits and i posted on /r/japan to clear up a lie i dont subscribe or actively post in those subreddits like he does and its one community ok, but if you sign up to reddit and youre japanese its recommended to you, all hes done so far is just given me more evidence hes lying
Looks like it was changed to &gt; vue-blogfront is a fast, feature rich and beautiful open source blog solution on the market!
Just a suggestion, but maybe it would be better if it fired a strobing beam instead of Canon balls? That way it wouldn't have to render as much and as often. Just an idea. Great game though!
iOS makes me sad 😢. Safari is indeed completely broken (Chrome@Android is much much better). We've been reporting these issues but pretty much nothing is changing. The most important problem is the [behaviour of the viewport when the keyboard is out](https://gist.github.com/Reinmar/91c70d2882523f47da7c498050421204) (quite important for us 🤦‍♂️). In short, it makes building a reliable UI rather impossible. You can read more about this [in this research](https://github.com/ckeditor/ckeditor5-design/issues/149). Due to those issues, I don't know of an editor which would work well on iOS. Some projects try but the results I saw the last time I checked that were still pretty bad. Anyway, the only way around this now is to build a simplified UI for mobile browsers. This is something that we planned to do from the beginning, but due to a small interest from developers, we haven't worked on that yet. There's no problem, though, to build a custom UI for CKEditor 5 (e.g. with React). [Neos CMS guys did that](https://www.neos.io/blog/neos-is-in-love-with-ckeditor5.html) and they were really positive with the results.
Gotta turn your computer on first dawg
Yup! 😊 Great to hear that you like the UI. &amp;#x200B; Every designer knows how much work is required to come up with a consistent and readable icon set and it wasn't different in this case – we needed many, many iterations before we came to that point. Big shout-out to [Olek Nowodziński](https://twitter.com/anowodzinski) and Damian Konopka for their work! 🎉
Thank you! I'll take a look at the new inline elements again, hopefully this will save us a world of pain in the future.
best practices are not "learning javascript" you should not have removed my post
I wrote an online widget for the previous version for a project I work on. Interesting to look at the new version.
We skipped the demo when creating [the tutorial](https://ckeditor.com/docs/ckeditor5/latest/framework/guides/tutorials/implementing-an-inline-widget.html). We need to fix that ASAP. TBH, I didn't expect how many people will ask about that. Happy to be wrong 🤣 &amp;#x200B; I uploaded my local copy of that tutorial (its state before the "Creating the UI" section) here: [https://ckeditor5.github.io/misc/placeholder-demo/index.html](https://ckeditor5.github.io/misc/placeholder-demo/index.html) &amp;#x200B; Regarding pricing, please contact our sales team because I don't know the answer (and it definitely depends on multiple things) 🙂. &amp;#x200B;
Hi /u/mohd_sst, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Edit: I uploaded [this small demo of the placeholder feature](https://ckeditor5.github.io/misc/placeholder-demo/index.html) (should be live in a couple of minutes).
Thanks. Seems that copying and pasting works properly on v5. I kinda miss that it doesn't recognize pasted plaintext placeholders, but I might not mind it in the long run. Another quick question tho - can you style tables with classes or something? We usually use regular tables for table stuff.. and invisible border ones for simple layout, MS Frontpage style. I'll try to whip up a revision with CKE5 implementation and see how it goes. I might check with sales, but I guess it's one of those "if you don't know how much is it, you can't afford it" situations ;) Besides, my people would use the thing twice and forget about it.
Very nice game! Well done. Been looking to start getting into browser games. Might start with your source caked at the weekend. Thanks man!!
Not sure of this is good or bad.... Amazon can damage small company's all they really care for is money in the end! 
haha Well, the course is doing a very bad job of making that URL to the next page private so that would shake my confidence... but anyway, when you find that source code, you could just copy the HTML from the link: \`&lt;a class='large button' href='lesson5s3update.php'&gt;Next&lt;/a&gt;\` Or I think you could type \`time\_left = -1\` in the console. I'm not used to seeing script tags used for this sort of thing, but needless to say all of this should be harder to tamper with. 
Thanks!! 👍🏼 idk what I did but I typed “var time_left = 0” Into the console &amp; It only makes me sit through the first minute instead of 15-20 min. I’m gonna keep playing with It but thank you !!
I feel like every 13 year old had a go in Visual Basic doing this in some form or another, me and my friends did it to each other all the time. “ hey made a cool game check it out” “Cool let m— oooo you bastard”
&gt; During my time at Facebook, I worked on the GraphQL team, where our philosophy was: make experimentation easy and prove that new features are valuable at scale before formalizing them. Is he insinuating GraphQL is unsuitable for permanent features?
Does it allow setting colors and fonts for the text with a simple UI? Last time I checked, it required I couldn't find it. When I googled for it, I came up with suggestions like "you can set these colors with this method, and that's it" (aka, Bill Gates "Nobody should need more than 640kb" -) Not possible to use a color picker to set arbitrary colors.
CKEditor 5 supports real-time colas right now?
they bounce back up - you can get out of the way and keep firing.
Shit like this is how you win hearts and minds.
Love it. Great work!
Any ETA for web component/shadow dom support?
Yawn.
Hi /u/distro607, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
You should realise that ES6 is not ES7, 8, 9 or next. In fact, it is currently ES2019 but with stages. 
Nice game, fast and quite addictive. I love this type of game where it seems very simple but in reality it's hard as hell. If you're looking to polish it, along with what everyone else is saying, I'd say it needs a gameover screen that makes it so you don't instantly respawn after you die, so you can breathe a little lol.
I love how the [ambrest.io](https://ambrest.io) currency doesn't even work yet they are looking for business. Yeah, mate. Let me just part with my hard earned. 
Congrats on your first publish, can you give me a real world example of how to use your transformer? 
*Automatic session storage* - Woohoo! Let's go fucking crazy! 
He has many on his github link
Hi /u/BRiddellemon, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I didn’t know there was a separate sub reddit for learn JavaScript thx!!
I'm biased, but I think this is good =). One of the goals of the GraphQL Foundation is to provide an open and neutral environment for the GraphQL specification to evolve. 
Hope so!
Nice job! Clean code, and well documented. I do have a couple of minor pieces of criticism. Normally in the source code repository you don't check in the build artifacts like the dist directory. You might publish it on npm that way, but the point of the source code is so I can build the project myself (assuming it is even necessary). Which brings me to my second issue. If this is supposed to be compiled where are the dev dependencies, and build script in the package.json? 
CKEditor 5 is super nice, but the pricing is just ridiculous. You will end up paying more for CKEditor than the infrastructure of your project since pricing is around $1 per user per month.
You should be using Promises instead of callbacks anyway. What engine are you going to run your server side JS in if not Node? Rhetorical question.
If you added some snazzy graphics, some levels/long-term points system, skins, etc... you would have a pretty addicting little app that would probably sell! I like the idea. Where did you come up with it? Super cool, love it!
fwiw, if it is a low traffic thing, or just a utility for your own use, just use the synchronous version of things. I use them all the time for stuff that just needs to work, and often during initialization, or in "command line" scripts. i.e. fs.readFileSync or whatever. Do more asynch stuff as the need becomes apparent, which may be never, depending what you are doing. Folks can be all hot and bothered about shaving off a few microseconds, but it isn't always necessary or even beneficial if there are only a few users (in fact it is likely to be slower if there is just one user). And you get the productivity gain of not having to switch languages between client and server. Also having laid out WHAT you want to do synchronously, can often make it easier to figure out how to do it asynchronously, kind of in the way you might refactor a program in to modules if it gets unwieldy, you can also break it up into functions that play well with the asynchronous stuff. But working is far better than not working.
It has a dark mode Your project &gt;&gt;&gt; Slack
Yes I know obviously but the reason I ask is because rust has proved to be faster than c and c++ for many operations so I wanted to know if this compiler provides any performance advantages in an apples to apples scenario (hence why I asked about “unoptimized code”)
Check out the async/await syntax on ES6, it is available on node and is a heck of a lot better than callbacks or promises (technically still promises with some syntactic sugar in top). On node: you need an environment to run JavaScript, on front end that is supplied by the browser. On the back end node is pretty much the only game in town, it runs the same engine as chrome, if I recall correctly, v8. There are other options, but none as well developed and documented as node.
Looks like great work! The framework integrations are much appreciated, and agree with the other commenter's opinion that the icons look great.
 [steveob42](https://www.reddit.com/user/steveob42), thanks for good insight. I thought that everything in Node is asynch and no synch. If there are sync equivalents, that will make life good. I am not new to Javascript as I use it for client side, just never tried on server side. I wanted to start to Javascript on server side, because C++ requires more efforts starting from building and finishing with deployment and such. I am going to use node for writing CGI style backend, as it has to be behind Apache and I can not change that.
Sure, check out node-cgi or cgi-node or whatev. Obviously you aren't going to win any races, but you can deal w/that later. Probably next optimization would be to look at a reverse proxy if you are stuck w/apache, as it will eliminate startup times, but have fun :)
i feel like mongodb and modern are a paradox.
it's fun, nice job 
Awesome job on the game. It's well done. I've just started teaching myself web development online and want to make browser games eventually. I'm a few weeks in and really enjoying it. What resources have you used to learn code your first year? 
&gt; But the pipeline operator is stage 1. It’s early days yet. &amp;#x200B;
Scrolling is broken on mobile (Safari). For that reason, I’m out. 
Yes, server side JS means Nodejs. Even if you were to find another ss js implementation that you wanted to use, it too would require asynchronous/callback coding since it’s a *limitation* of JavaScript that makes it single threaded. Incidentally this is true on the front end as well, which is why all your sever calls are likely asynchronous. As mentioned there are better patterns than callbacks to use (promises, async/await). One really nice thing about JavaScript on the server is since you control the environment, you know what is supported and don’t need to worry about cross browser support or shims or anything and you can use all the latest and greatest features. Historically that’s been one of the biggest pains in the asses about being a JS developer. 
We switched from Ck4 to TinyMCE5, ck5 was too expensive and too prohibitive
 1st you can convert any callback function to a Promise (util.promisify) 2nd You can do await to any promise I maintain and develop over 100lambda function daily basis . There is not a single callback or “then” Everything is await async 
Nice job, it's a fun game. I wouldn't call it completely responsive though, the leaderboard is cut off on mobile.
I would check out TinyMCE 5 We switched from ck4 to TinyMCE 5 since it was a better fit than ck5 and more affordable too
Nice, and inspiring. :) 
Nice! But definitely some room for improvement as far as security goes :) The POST to send the score is very easily manipulatable. fetch('https://asteroid-blaster.herokuapp.com/updateTable', { method: 'POST', credentials: "same-origin", headers: { "Content-Type": "application/json", }, body: JSON.stringify({ score: 99999999999 }) }); I also tried putting some scripts in there instead of a number, and it looks like you do indeed evaluate them instead of escaping them. Always be careful with user input or with any public endpoint data. Sorry to ruin your leaderboard but this is a good learning experience!
Great idea for a game, never saw anything like that before. Makes me want to share my game also. Nice job!
Beeilng Stück behind a Webserver ist actually not too Bad. The static files of a Web application are better served by the webserver for a much better Performance. You then need to setup a reverse proxy to redircet the traffic of a specific route to the node backend. Additionally, newer versions of node also include promise variants of the callback functions, so that you can use async await. 
Concat takes an Array, Take a look at the mdn docs, they're awesome!
can you just do t1[position].pcode = pholder.code; and so forth? 
t1\[position\].push({ pcode: pholder.code, pname: pholder.name, phour: pholder.hours, pstring: pholder.string });
&gt; I couldn't get concat, map, splice, ect; to work. You'll have to know what arguments are accepted by methods. https://developer.mozilla.org/
Bad as fuck - time to make some forks quick... I thought the deteriorating situation at Redis labs was bad 😳
Object.assign(t1\[position\], { pcode: pholder.code, pname: pholder.name, phour: pholder.hours, pstring: pholder.string}); 
Your code doesn't make sense. What is t1? What is position? Why are you wrapping objects in parens? What's with the weird formatting? Why are you passing an object to concat?
This. All filesystem functions have awaitable promise-equivalents in the module fs-extra. 
You could look at Deno, I suppose, but it is far less mature. 
Tbh would spend like 10 bucks on a Udemy course. For complete starters. Jonas Schmitdtmanns is pretty good. At least to learn some concepts, get familiar with the lingo and understand what’s possible. 
Wow. I thought the point of making lib is just for people to import and use it. Now I understand more :) Thank you very much for your advice
To expand on his point, typically one would would have `dist` (or whatever build output there is) in the `.gitignore` file, but not the `.npmignore` file. This ensures that the compiled content gets published to npm, but is not tracked in source control. And secondly, yes, people expect to be able to do `npm run build` or something similar to build your project (if there is a build toolchain at all). So, whatever tech you're using to build the project (gulp, webpack, babel by itself, etc.?) the complete command to produce the build should be an npm script
Ummmm... So the default WP rest API is unusably slow? That's not good. 
Nice game. A little suggestion though: some of your assets are waaaaay too large. [asteroid.png](https://asteroid-blaster.herokuapp.com/pics/asteroid.png) and [asteroid1.png](https://asteroid-blaster.herokuapp.com/pics/asteroid1.png) account to 6MB of data for a size of 2000*2160 pixels. Resize them, and eventually change their format to jpg. You won't see a difference in quality, but your game will load much faster and perform better on low-end and mobile devices.
Sure. Assumed my old application uses this schema { instructions: string[], ingredients: string // this contains html } And my new application uses following schema. { instructions: string[], ingredients: string[], machineConfig: any[] } Ingredients is now a string array instead of html. We have a new field machineConfig which is an array of machine values based on instructions, it is used to config a cooking machine. Those configs will be parsed by sending a request to a machine learning app. Then my transformer will look like so: new Reformer({ instructions: [ true, {name: ‘machineConfig’, handler: parseInstructions}], ingredients: parseIngredientsHtml },{async: true}) So I can focus on constructing the transformation. parseInstructions is just a async function sending a request to ML-Model. parseIngredientsHtml is just taking the content out of html and make it a list of ingredients. Hope you will find this idea useful like I do :P 
What is this? __Stack Overflow__? Just kidding. As stated by others... reading the docs on this can be most helpful. 
Uh...
Could you please also clarify why people even use npm run build, while they could just install my package and require/import it in their code? 
Yes I am aware of that flaw but since it was originally supposed to be a single player game and leader board was added only afterwards, I haven't yet made the necessary security changes. Stay tuned, will update them as soon as I get time 
I am not much of a designer but the leader-board is supposed to shift downwards for mobile screens. Is that not what is happening for you? If not could you open an issue on github with a screenshot preferably? Thanks
Great suggestion! If you have in mind any more optimizations do let me know :) 
Thanks a lot :) I'd suggest the coding course for web development by codeacademy. They have some great courses about javascript, html, css along with frameworks like reactjs and some server side on node too. Also if you are interested in browser games I'd suggest you checkout [https://www.youtube.com/user/shiffman](https://www.youtube.com/user/shiffman). This guy has a lot of tutorials and is fun to watch. &amp;#x200B;
Oh man that's a long list of features. Initially it was supposed to be a basic game not sure if I'll continue developing it that much. Thanks though. The idea came from an arcade game I played and I tried to implement that with my own style
Deno. :D although a bit too early 
Have you contacted us for a customized offer? We work with all types of business from little startups up to giants.
*tumbleweed*
You could use Nashorn, if you really insist. Or you could use GraalVM, which is nicer and far more up-to-date. Then again, it doesn't really matter much.
Try /r/LearnJavascript
Hey, I encourage you to reach out to us for a customized deal. We've got full range of options in our hands, starting from startup plans up to enterprise grade projects. The pricing you can see on our website is designed only for a small or POC project with up to few devs working with our code and 25 end users. Bear in mind that in our $29/month we embedded 3 benefits: commercial license, support for developers and business benefit of using RTE features. This is totally fair offer. If your project is of a bigger scale then drop us a note on [sales@cksource.com](mailto:sales@cksource.com). We'll do our best to find an optimal scenario.
This will still ship a massive blob of slower extra code that will hit 99.9% of your clients that don't run IE11. Unless you absolutely need it i would drop IE. [https://jamie.build/last-2-versions](https://jamie.build/last-2-versions) 
Even if your z-index did animate _"correctly"_, it would serve no purpose. You have two cards, one with z-index 10, the other with z-index 20. You animate them in opposite directions... 10|20, 11|19, 12|18, 13|17... During all those the second one still remains on top and the first one below... 14|16, 15|15, 16|4... Pop! Suddenly the first one is on top and the second one is below. There is no real possible animation for that that isn't achieved by simply doing 10|20 -&gt; 20|10. Animating the z-index is not an interesting proposition and I doubt Popmotion even cares about trying because there's no real useful use case (except, perhaps, some extremely specific situation where you would have an element in each z-index; and then the animation would be awful and the performance not really good). So whatever effect it is that you're trying to accomplish, try to think of an alternative way of doing it.
Anyone had the RC or this version running? How's the Android performance compared to pre new-JSC? 
Love RN, will be great to see more desktop apps.
You are doing a great job man :) keep it up!
I guess you're referring to the [Highlight feature](https://ckeditor.com/docs/ckeditor5/latest/features/highlight.html). It's indeed limited to just a couple markers (that you need to preconfigure). While this sounds ridiculous, that's a reflection of our attention to content semantics. This feature isn't about colors (and inline styles), but rather about applying meaning to pieces of text. So if you looked for a background/text color feature, there's no such feature at the moment. However, we've just [started working on it](https://github.com/ckeditor/ckeditor5/issues/1457). I'm afraid, though, that the MVP will still be limited to a predefined palette of colors (no color picker).
Unfortunately not yet. There's a [range of topics](https://github.com/ckeditor/ckeditor5/issues/1483) that need to be taken care of so it's not a quick thing. I think, though, that we'll consider it for Q3/Q4 2019, especially if there will be an increasing interest from the community.
Not for a beginner
You mean this ugly constructions https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises#Composition? I tried work with such compositions, it's not declarative at all.
Yes! 🎉 You can check out the demo of [real-time collaborative editing](https://ckeditor.com/collaborative-editing/?active-demo=collaboration) in CKEditor 5. There are also other collaborative features like [comments](https://ckeditor.com/collaboration/comments/) and [track changes](https://ckeditor.com/collaboration/track-changes/). Building real-time collab editing was possible only thanks to the new data model. We also wrote a piece called ["Lessons learned from creating a rich-text editor with real-time collaboration"](https://ckeditor.com/blog/Lessons-learned-from-creating-a-rich-text-editor-with-real-time-collaboration/) that you may find interesting.
I know this thread is dead but figured I’d respond to one specific line anyway - rampant anonymous function creation and so on are still a big problem in React and co, usually by more junior people. It’s an unfortunate thing that people don’t seem to teach anymore; in fact, I’d wager more people were aware of the issues with it in the jQuery heyday than now.
The government here uses ie11 and it's one of our main customers but we are also b2c so we have a lot of use in modern browsers
MooTools and PHP had it long before jQuery.
Do you mean Java or Javascript? They are two very different things.
can you recommend?
Start with google.
I consider building two versions, and load the transpiled one in older browsers honestly.
In face, server side JavaScript === node.js
okay, well how about java
They have two very different uses. It depends what you want to do.
Angular state is so easy to manage through data
You should head to a java subreddit, this one is for javascript. They are two entirely different and unrelated languages, the names just sound similar.
never put anything online without considering security first. "later" is the worst time to do that.
So? The articles aren't about stuff that's easy or even viable. It's a look at new and future language features. Hell, I don't use pipeline operators myself, though I use nearly everything else (decorators not so much).
Sorry, when I mentioned "ES6 features there" then I was referring to it in the sort of casual "new JavaScript features" kind of sense. I should probably more accurately have said they were mostly "ES6+ features". They range across ESx releases and in some cases (array functions specifically) they predate it.
No problem! To be honest I learned a lot too. Most of this stuff was things I was familiar with but only on a fairly shallow level. So features like destructuring I knew, but I didn't know you could destructure out of child objects, or rename the variable created. Anyway, taking the time to really dive deep into these things has been good for me, and solidified a lot of knowledge.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/webdev] [How to change label text on radio button click?](https://www.reddit.com/r/webdev/comments/b0k4hg/how_to_change_label_text_on_radio_button_click/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Proxies are surprisingly useful, if for no other reason than a lot of libraries use them, so knowing what you're dealing with is handy. 
Well I solved my own problem. This did the trick: const arrayAsObject = allTodos.data.reduce((resultObject, item) =&gt; ({ ...resultObject, [item.id ]: {'id': item.id, 'content': item.process_name} }),{});
**!SOLVED**
Not a bad idea. It's sort of hard to know which ones have real interest to people. 
They can. But what if I want to propose you some changes via pull request or even fork your lib? I need the same tool to build. Also, it's just a bit easier to understand your code if I can see how you're building it. If I want to depend on your lib with github repo link (not npm released one, for some reason) I need build command to be run and to be sure I'm importing/requiring the source code (from src dir) which I've read and can trust
Try /r/LearnJavascript
Did you know that \`moment(new Date(ISO8601\_DATE\_HERE)\` is 7 times faster than just \`moment(ISO8601\_DATE\_HERE)\`? 🤯 We wrote an article about Moment.js quirks and compared it to the other available libraries.
Other than beg then you nowadays can simply close the tab with the popup on it because modern browsers handle Javascript popups modal to the tab content, and not the whole browser.
You should release it as a extension 