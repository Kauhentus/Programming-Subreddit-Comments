Just use https://polyfill.io/ to make sure you have all the functionality you need.
Oh great, i didn't see that. I gonna this today in a project this :D Thank you
I'm not arguing about the usefullness of null. I'm just saying that allowing a type `X` to be null hides *a lot* of errors until runtime. This change in TypeScript makes you write `X | null` as the type instead which makes it very obvious that it can be null. TypeScript will even force you to null check it. And so if you have a variable with just the type `X` you can be sure that it can't be null and a whole range of errors just can't happen anymore.
...hippest trend... That's a dangerous path to take. 
Not sure why people are so excited about promises. To me they're still quite a lot of boilerplate for very simple functionality. We just want asynchronous calls that are blocking within their scope. If only... Wait, there is such a thing: async/await async function getStuff() { const serverValue = await fetch('...'); const otherValue = await fetch('...'); const actionOnValues = syncrhonousCall(serverValue, otherValue); const finalServerCall = await fetch('...', actionOnValues); console.log(finalServerCall); } getStuff() // will not block console.log('normal execution'); // will call before the finalServerCall
https://en.wikipedia.org/wiki/Foobar
The jargon file entry on [metasyntactic variables](http://www.catb.org/jargon/html/M/metasyntactic-variable.html) has some interesting info.
Originated at MIT, based on FUBAR: http://www.catb.org/jargon/html/F/foo.html
Interesting how Baz made a comeback. 
I always create a RPG character generator. I find it's a nice mix of various elements you may use in a normal app. 
```function sleep(milliseconds) { var start = new Date().getTime(); for (var i = 0; i &lt; 1e7; i++) { if ((new Date().getTime() - start) &gt; milliseconds){ break; } } }``` woah dude. 
I like frobnozzle. 
All good. regex! a large topic haha, replied in the issue.
A Promise (also referred to as a Future in some languages) is, as the name suggests, a promise of a value. Let's say I'm using using promises to handle an AJAX request for a JSON resource (typical when using a REST api) with something like `fetch`. The `fetch` function returns a *promise of a JSON object*. The Promise object that get returns is like a contract that says "At some point now or in the future, I will resolve to be a JSON object. The developer can now interact with that contract by saying "**When** you do resolve, **then** I want to perform this action...". As code this would look something like: var jsonPromise = fetchAsJson("www.somejson.com/api/endpoint"); jsonPromise.then( function(resolvedJsonObject){ ... } ); The only other thing to note is that `Promise.then` always returns a promise. When you chain several `.then` calls in a row, then the subsequent `.then` calls refer to the value returned by the callback in the previous `.then` call. If said callback doesn't return a value, then value the returned promise resolves to is the same as the previous call. e.g.: var jsonPromise = getSomeJsonPromise(); jsonPromise.then(function(json){ console.log("Hello"); }) .then(function(json){ //This 'json' param is the same as in the previous call. return "A different value"; }) .then(function(differentResolvedValue){ //differentResolvedValue === "A different value"; }) That's more or less it.
https://www.youtube.com/watch?v=g1xtiuqWFCc
I've always been keen on a local mysql server. I've seen firebase, but am always using mysql. I know it fairly well and I pair it up with php. It gets the job done. Anyway, my Web hosting doesn't support any other backend language. BTW, I made all these apps with angular 1.x. Been interested in react but it hasn't happened yet for me 
I work in both, although I probably spend a bit more time in the C# side of the fence. I think C# is excellent and a lot of things it popularised (I dare not say came up with, as I'm sure it existed elsewhere first) such as async/await are making their way to JS.
They're paying you to learn a new language? Take full advantage of that and learn the shit out of it! You never know when that knowledge will be useful down the road.
You are defining the `__doPostBack` function inside the `send` functions scope, yet trying to call it from the global scope. That won't work. --- Also, jesus christ dude. With the complete lack of comments, and botched indentation, your code is practically impossible to read or follow. If you're asking for help, at least take 5 minutes to make it easier for those who are going to help you if it's as badly needed as it is here. You're also using some... different code. Some of it is just weird, some of it is straight up bad. I've never seen anyone use `document.evaluate` over `document.querySelectorAll`, or use a `setInterval` which checks `document.readyState` instead of just using an event listener. I've certainly never seen a legitimate use for straight up locking the JS thread by forcing an infinite loop. Because it's 3AM and I'm bored, and because criticism like the above doesn't help you much without a counter-example, [here's how I would've written it](http://pastebin.com/GMMxd4Qr) (completely untested, I have no idea if it actually works).
Out of curiosity how so? NeDB can be used entirely in memory if wanted, or a simple file (think like SQLite). Pretty 'embeddable' I'd say!
That would be nice 
After foo, bar, baz, foobar, and foobaz, my go-to seems to be 'bop'. I have no idea why.
I feel like if you really have a lot of async activity, basic callbacks really just don't cut it at some point. Once I learned promises and how to use them I hate going back to callbacks. The control flow just makes perfect sense to me. The best part is really the ability to pass them around to other parts of your application. Then given this object calling then guarantees you that the async activity has finished. Or using Promise.all which is provided in many libraries, easily continuing after some set of async activity finishes. 
I'm a developer, not a JavaScript developer, not a C# developer, not a Python developer. I code in whatever language gets the job done.
[removed]
Heh. There's always a "you must not understand it" comment like this. First, did you notice you contradicted yourself? Probably not. Second, Promises used properly can be useful like I said, but to repeat, they can get out of hand easily where basic callbacks will be more clear. Use them some more, you'll learn.
I'd say that if you only ever have one level of async activity going on, then Promises and Callbacks are roughly equally fine solutions. It's when you get complex scenarios involving multiple levels of asynchronicity, async races, etc, that Promises really shine. To do a the equivalent Promise.all with callbacks, when some of those promises don't fully resolve for 3-4 levels of async calls, would be a nightmare, and almost surely would result in less readable code. The big advantage with Promises is clarity of intent regarding handling asynchronous behaviour. It's similar to how anything you could do with `map/reduce/filter` you could also do with a `for` loop. You can, but it's going to result in less readable code.
No love for `quux`?
My dad was a mechanic and I learned it as fucked up beyond all repair. Same idea though
Yes. I sort of wish they would have given it some more finessing. Instead of 2 new ways (syntax-wise) of handling async calls, we could do with one. And what better way than the way JS already works? I'm a big fan of simplicity. async function doAThing() { try { const first = await doAnAsynchronousThing(); const second = await doAnotherAsynchronousThing(); console.log(`${first.text} ${second.text}`); } catch (err) { console.log(err); // whoops } }
My chrome crashes if I put anything longer than 1 as the argument to that function.
That's a good point. But it would be the same case with any function containing async calls. It's not a new problem introduced with async functions. Using promises in a function in another file would have the same problem. 
With promises anyway, you usually always return the promise chain, and operate on that (with then, etc). Maybe it's just your example since it's over simplified. At least at work, I rarely see a case where we start a promise chain but then don't do something with it, so it's usually pretty obvious. But I get to set the standard there so I'm spoiled :)
I usually get annoyed with some app that I use daily and then try to clone it, adding the features that I want
yea how do i get off this list
&gt; if you're **suing** the paid service, ... ಠ_ಠ
memory footprint is quite different, no? 
Sometimes, but rarely.
flibberty gibbet.
I wonder how long until people start giving their kids 'variable names'. Bonus points for Hungarian notation, of course.
See also Frob. It came from the same MIT background as foo, but also became part of the Zork world of 1980s text adventure games. https://en.wiktionary.org/wiki/frob
use https://github.com/firebase/angularfire there's a lot of documentation/examples/guides
C# is a decent language which is in fairly high demand. Knowing it is quite handy.
Was trying to stay away as it says that it's depreciated.
Thank you so much :) I'll test it in the morning
just out of curiosity, why do you have to use synchronous AJAX calls? I am just trying to wrap my head around any possible reason that this would be necessary. I dont need a super specific (like, including company trade secrets or whatever) reason, but if you could explain the gist of why you must do it that way, I would appreciate the info. 
Hah, same thing happened to me with a Java position. Large scale business application using the award winning technologies etc etc etc... I was honestly curious about how people code a large Java application that's being used on a daily basis in the railways infrastructure and got in to find it's all... ugly D: I'm hardly learning anything from this project any more :/ &gt;I was really oversold what I could be working on. I was enjoying working with actual 'cutting-edge' stuff at my old job such as prototyping with angular 2 even though they paid me peanuts. Yes yes and yes. I could also do the work however I wanted as long as it's done and it was an opportunity to try out some really cool frameworks. Also JS. Got laid off, unfortunately. As for job evaluation, there's not that much one can do unfortunately. At least I learned my lesson to never trust whatever the hell marketing they use on you to make a project more interesting. I have seen some employers do like, practice exercises to evaluate you, and you could use that to assess how they roll. However, the job interview is also a good opportunity to ask THEM questions, what kind of frameworks do they use, what kind of practices, how are teams collaborating etc etc...
I tend to ask the question 'what kind of fires do you guys fight' at an interview and really gauge the response to that question, most notably the look on their face in the first few seconds. Try and read between the lines with their tech stack. If they say 'cutting-edge' and are using TFS and web-forms, then they are either a bit unaware of what and where the edges are or just outright lying to you. Other things you can ask (but don't always expect it to be honored) are things like can you pair with someone on a programming task. What does their delivery pipeline look like for how quick you can get something out the door. How / What plans do they have to manage their technical debt / product backlog. Interviews really are a two way thing. Especially if you don't need the job and are just looking for something new / more exciting. When I was younger it was much more about 'getting the job' these days its more about finding somewhere I believe is mutually beneficial for both myself and the employer. I don't know what country you are in, but in the UK you go through a probationary period where both employee and employer can end the agreement quite quickly and with much less red tape then say after 3 - 6 months. 
Don't build this stuff yourself. It's not worth the effort. Use some single sign in option like Auth0 or Gluu.
My grandad told me they used FUBAR to mark corpses that they couldn't identify during WW2. He was RAF, and was based with US forces who dealt with bombers returning from missions over Germany. Others have posted how this subsequently turned into FOOBAR etc...
what do you mean by (perhaps not on github) ? this kind of stuff (web scraping) is usually a backend thing, not a front end thing (due to CORS issues) Ideally what you would do is have your front end of your webapp basically act like a controller for your backend code, basically triggering the backend, which would do the actual scraping and then send the scraped data to the front end for further manipulation.
We had a CS cafe at university called Mega Bites.
tequila works too fast to be ie6
ES7 is only array.includes and the ** operator. Most browser already have ES7 implemented. 
&gt; can't take a look at their source code With some companies you actually /can/. If it's a web-marketing agency just look at their portfolio and open up some of their sites. And if you can't find anything online there's no harm in asking to see the codebase. Also, you should look for a new gig immediately.
Pretty sure military: SNAFU = normal operations TARFU = problems in progress FUBAR = everything in ruins.
I haven't really gotten the opportunity to look into ES6 proxies in depth, but my first impression is that they are very similar to certain Python magic methods, is this correct and where do they differ?
In Poland we have https://progressbar.pl/en restaurant.
``` .then((path) =&gt; { return fs.readFileAsync(path) }) ``` can be written `.then(fs.readFileAsync)`
I really dislike articles that are actually advertisements for a product or service, but refuse to put that information in the headline. A simple "With SauceLabs" at the end of the title would have been enough to stop my dislike for this article. I'd probably still have read it, but I wouldn't have been really disappointed that I'd have to sign up for a service to use the information in the article.
I own [this](http://i.imgur.com/JEqz7wz.png) T-shirt \o/. If it isn't obvious here... it's an astronaut!
I guess this is a general discussion, not only for react component. As for react component, this is my idea. You can still use `&lt;Cleave.../&gt;`, but it only focuses on its own formatting job, at the same time, you will need to update the `value` / `rawValue` state outside. Eventually you are free to implement the validation anywhere, either use any other lib or do the validation by yourself. The fiddle: https://jsfiddle.net/nosir/gLLsrxxf/
You don't really need to indent your promises, you could assign them instead. Then your code looks similar to your await example. [A fiddle](https://jsfiddle.net/k6s8d6eb/).
'$' will only match 'end of the line' in multiline mode. It matches the end of the input and in this case the end of the string.
Thanks guys, I really appreciate it.
Thank you all.
I usually ask them something I had a problem with e.g. how did you setup code coverage with es6 or how do mock the backend for integration tests and I am able to get from the answer if they really did this kind of stuff, because it was a lot of fuckery for me. Or I ask them if they refactor a lot and then ask what is they test coverage implying that you can't really refactor without tests or you are begging for a bigass regression report that the customer will fuck you over for.
I think *the* power of generators is truly coming the fact they're not coupled to a particular use case. You can literally build anything with them, by writing a custom "controller" or an "executor" or an "interpreter" for a generator. For one, I have used them [to write linear tests](https://github.com/brunch/brunch/blob/1955d0d03785797fb244d27e194450da9b31e4ae/test/watch.js#L208-219) for a [build tool](http://brunch.io): watch({}, function* (compilation) { yield compilation(); t.false(fs.readdirSync('./node_modules').includes('lodash')); const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8')); packageJson.dependencies.lodash = '*'; fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2)); yield compilation(); t.true(fs.readdirSync('./node_modules').includes('lodash')); t.end(); }); The pre-generators code used to pass a callback to `watch`, and increment a counter each time it's called and pick the appropriate branch of the if-else statements. Generators however helped make it very natural to read and write these tests (You can see the definition [here](https://github.com/brunch/brunch/blob/1955d0d03785797fb244d27e194450da9b31e4ae/test/watch.js#L20-37)) In the React scene, Redux is a popular approach to state management, and of several asynchrony solutions, [redux-saga](https://github.com/yelouafi/redux-saga) seems to be the most prominent. It allows you to express any complex chain of actions &amp; reactions in a straightforward manner: function* fetchProducts(dispatch) { const products = yield call(Api.fetch, '/products') yield put({ type: 'PRODUCTS_RECEIVED', products }) } *(For the FP peeps out there, sagas in redux-saga are in a way free[r] monads. With Redux and now sagas, I think we are finally evidencing the rise of FP concepts in our day-to-day work and not only academia)* So yeah, see for yourself — generators are super powerful. If you are looking for a place to get started with the inner-workings of generators, check http://gajus.com/blog/2/the-definitive-guide-to-the-javascript-generators out.
Or you assign anything you need later to a variable in the outer scope so that its accessible. So the first example becomes: // all asynchronous methods have been promisified app.post("/purchase", (req, res) =&gt; { let outerUserData; // Put this here so that all following functions have access to it user.findOneAsync(req.body) .then( userData =&gt; { outerUserData = userData; // Assign userData to the thing we just put there return permissions.findAllAsync(userData) } ) .then( permissions =&gt; { if (isAllowed(permissions)) { return transaction.processAsync(outerUserData); // outerUserData is in the outer scope! It is accessable! } }) .then( confirmNum =&gt; res.send("Your purchase was successful!") ) .catch( err =&gt; handleError(err) ) }); I use promises almost every day at work, I haven't encountered an async problem that they've made difficult to deal with, or had to nest promises inside of each other.
I posted the exact same thing before realising your beat me to it... Promises and lexical scope combined give great power.
I think the best way to do this is to use the DefinePlugin; https://webpack.github.io/docs/list-of-plugins.html#defineplugin. It makes it really easy to set constants depending on what you're building for.
Sure you can! Ask to look at their code. Ask to watch a dev or two over the shoulder as they work. I did that for one of my interviews before accepting a job. Cutting-edge + Angular 1 is a huge red flag. Ask a lot of questions about specifics.
In this example in particular I think it makes more sense to compose an object with the user data and the permissions and pass that to the next function. But in general, I think you solve the problem of accessing the values returned by previous calls by assigning the promises to variables and use that instead of chaining them.
Yes I agree. I mostly was pointing out this author seems to have had an agenda due to the simplicity of solving it without nesting.
Look up code golf and try some of their challenges.
frond-end developer
X-Post referenced from /r/node by /u/keithwhor [Now in Beta - Polybit: Build, Deploy, Host Node.js APIs](https://www.reddit.com/r/node/comments/4snq0r/now_in_beta_polybit_build_deploy_host_nodejs_apis/) ***** ^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
I'd love to hear a list of the devs that you think are worth following on Twitter or their blog or YouTube, I'm always looking for more. And when you say social narcicism in JS, what do you mean exactly? The medium-newbie crowd or something else?
As somebody whose first language was JavaScript and is just starting to learn C#... Do it! C# is a great language, and if you ever use TypeScript it's basically a blend of JS and C#, which means it will be familiar to you. 
*goes to website* hmmm a terminal. What is all this BS? *leaves website*
Pretty cool idea, didn't think of using the Spotify API for a side project before. Out of interest, how would you plan on doing a couple of those planned features? Such as an artist playlist for example
Fixed, thanks!
That's the *exact* issue I had. Not specifically, but the discreps between the Angular calls and new Firebase were causing my initApp() to get called anywhere from 1-4 times, tossing tons of state errors after the first one runs through. 
Hmm, Looks like angularfire was updated for firebase 3.0
C# and JS are my day to day languages where I work But for my personal projects, JS all the way! 
&gt; functions[name] That is not a promise - why are you trying to call .then on it? Also var functions = {'foo', 'bar', 'life'}; this is not valid JS.
 let add1 = x =&gt; x + 1; let times2 = x =&gt; x * 2; let result = [add1, times2].reduce( (array, fn) =&gt; array.map(fn), [1, 2, 3] ); console.log(result); // [4, 6, 8]
Why use that library over async await transpiled? 
I thought this was going to be more than just calling `console.trace`. If you made your title, Nice Tip - Trigger a trace from javascript by using console.trace() I could have saved myself that view. I did enjoy the video authors voice and enthusiasm though, so I would have missed out on that. Win some; lose some, I guess?
You can't just treat functions like Promises, they aren't "thenable". You have to wrap them in `new Promise()` syntax [I did a really basic fiddle \(partly for my own revision!\)](https://jsfiddle.net/4rzm6y3x/3/)
A better option is to compose the functions: const add1 = x =&gt; x + 1; const times2 = x =&gt; x * 2; const compose = (f, g) =&gt; x =&gt; f(g(x)) let result = [1, 2, 3].map(compose(times2, add1)); console.log(result); // [4, 6, 8] Or, if the right-to-left composition disturbs you: const pipe = (f, g) =&gt; x =&gt; g(f(x)) let result = [1, 2, 3].map(pipe(add1, times2)); console.log(result); // [4, 6, 8] 
Hi /u/riotsofnewyork, you're still posting your own channel way too much. Please do not post it again until you've brought your numbers down.
Not really sure what exactly you're looking for, but you could try regular expressions : this is the length of the string excluding letters G til O var q = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890.#-?".match(/[^G-O]/g).length var q = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890.#-?".replace(/[G-O]/g, '').length this counts G til O which can be subtracted from the length: var q = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890.#-?".replace(/[^G-O]/g, '').length you could also do a double boolean count that like start from index 0: var hitG = false; var hitO = false; var count = 0; if(hitG === false &amp;&amp; hitO === false){ count += 1; } if(hitG &amp;&amp; hitO){ count += 1; } if(all[i] === "G"){ hitG = true;} if(all[i] === "O"){ hitO = true;} Also keep in mind all strings are like arrays in that they have random access and have the length property. So take the above and stick it into this: var all = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890.#-?" for(var i = 0; i &lt; all.length; i++){ console.log(all[i]); } 
In practice, if you want to wrap a static piece of data into a promise, you can use `Promise.resolve('foo')` instead. To better understand how to wrap a callback-based API, imagine a callback-based function with this signature: `asyncGet(data, function handleResult(error, result){})`. You can promisify it by doing function promisifiedAsyncGet(data) { return new Promise(function(fulfill, reject) { asyncGet(data, function (error, result) { if (error) reject(error) else fulfill(result) }) }) } Likewise for event emitter-based APIs, you can fulfill or reject the promise on success/error. In the above example, you may also want to wrap the `asyncGet()` call in a `try` block and `reject` in the `catch` block.
Thanks, good to know. I never thought about wrapping an old library function in a Promise like that but it's pretty neat!
[removed]
Still, you're calling .then on a function definition, not a Promise. Might be you're remembering the code wrong, or maybe that's something I'm missing?
I'm definitely not remembering it right. My original plan was, having a list of functions (or function names if you will), to generate a promise-based solution of running all the functions and packing the results into an object/dict and sending it back to server. By using Promise.all() I would have a guarantee that all registered functions returned a value. Alas! It didn't work.
It's worth noting that [generators are not optimized by V8 yet](https://github.com/petkaantonov/bluebird/wiki/Optimization-killers). I worked at a startup that used promise-generators almost exclusively for *everything* ... made for a very "cute" code base (the main author's own word), but it's slow as molasses with no way to really fix things until V8 comes around (as for other browsers, who knows? They got around that problem by "only supporting Chrome"). Use promise-generators, of course, just don't get all [golden hammer](https://en.wikipedia.org/wiki/Law_of_the_instrument) about them (or anything really).
Build an infinite scroll area showing all elements of the fibonacci sequence, but only those elements that are currently visible (virtual scroll) 
&gt; the latter will process your code async No it won't. It just executes your code in the context of the (likely anonymous) function you provide, rather that in the parent function's scope.
`for..of` works with any iterable, whereas `forEach` is only for arrays. `forEach` gives you access to the index, if you want it, whereas `for..of` does not. And no, `forEach` is *NOT* asynchronous. Both examples are synchronous. 
Yeah, I was just reading through the API reference to get an idea what all those calls were about. I'm not totally sure this amounts to `Free`, but it certainly is charging in that direction. It is Free-esque, but only really affords freedom of interpretation by exposing its sequential machinery via generator methods. Since it doesn't expose `Free` via a pure data structure interpretation is really bound within the saga itself and I can't achieve some of the more interesting operations that are possible on a `Free` monad. For example a sufficiently intelligent interpreter can rewrite the structure of a `Free` representation to be more efficient.
Build a simple chat with contacts and messages.
oh wow what a fail haha. Thanks for the update! 
Thanks for this response. It helps to get the perspective of someone who has worked with both :)
Also my two cents: 1. for..of is more performant than .forEach 2. you can use async/await inside for..of but not inside .forEach let totalScoreGain = 0; for( let user in scoredUsers ) { totalScoreGain += await user.addScore( 50 ); } console.log( totalScoreGain );
I just ask to see the codebase. They'll react with pride or shame, whether or not you're allowed to.
For one thing it works on the server, while were still waiting for node to implement async / await and I'm personally wary of running server side code thats been transpiled. Another reason is that it handles thunks like promises, and also, iirc it will resolve object values when yielded. Personally i use co on the server and async / await on the browser.
So only the visible part should be rendered?
I guess I am going to take that advice :)
Damn I hate the year notation. ES2015 implies ecma script spec we should be using in the year 2015, same for ES2016. I hope the simpler numbering format becomes more prevalent.
Why not async on the server too? 
That's right, you need to Delete Facebook, Hit the Gym and Lawyer Up
[JSFiddle of your code. Always a good idea to include this in your post.](https://jsfiddle.net/xv5m8nyv/) If you check console, you'll see that you're getting an error: Uncaught Error: Syntax error, unrecognized expression: .firstIcon &gt; img[src*=war.png] In this case, you're missing quotation marks around the `war.png` string, which is required for the CSS attribute selector. If you fix this [it'll work](https://jsfiddle.net/xv5m8nyv/2/).
Exactly. It is a rash persumption to expect any other advice from reddit.
His code is actually `$( "a[id^='quickpvpattack']" )`, which is a [CSS attribute selector](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors) for an ID starting with `quickpvpattack`. It's just that, since he didn't format it as code, Reddit's markdown messed it up.
I am not certain where that error thrown but you are referencing the entire Dom element, you need the value of the input as opposed to the dom element. Hint http://www.w3schools.com/jsref/prop_text_value.asp
Also your function will execute on page load, when the input will be empty. You would want the multiply func to run on click. http://www.w3schools.com/jsref/event_onclick.asp
I'm curious - why would you do `for const` instead of `for let`? also, one difference hasn't been mentioned is that you can use `break`/`continue` in a `for of` loop. `.forEach` can also be used to achieve a more functional style where appropriate.
tl,dr: how to use saucelabs (a paid product). Not a judgement on sauce labs, unless they are behind this post.
I'm an algorithms kind of guy, so here's my challenge: write a function that returns N unique random integers between some MIN and MAX, in O(N) time.
What do you mean with in a certain time?
&gt; (`.some()` lets you break, though, by returning true) But you should not be using `.some()` for processing data where exiting is required. It's for looking through the array to test if "some" of the content meets a condition. Synonymous with `.any?` in Ruby, et al.
I don't have any inherent loyalty to promises, and I'm not fussed about it general. I just found it odd that your "ugh" reaction to promises actually resulted in more convoluted code. The great thing about promises is that they're an easily recognisable pattern with explicit data flow. I don't think your solution is awful, I just think promises would result in much cleaner and more recognisable code but obviously each to their own.
Why?
Just to avoid the transpile step, if you don't want one. I've used `co` a few times on different projects just to avoid incurring the overhead of something like babel where it wasn't necessary. I love `async/await`, but sometimes it's just simpler to use `co` and avoid the hassle.
Babel isn't perfect, there's always the potential for bugs/issues, including performance problems.
Agreed
No problem! If it helps at all to see more of what's happening inside the reduce: const pipe = function(...fns) { // If we weren't given any functions, return the identity function if (fns.length === 0) { return identity; } // If we only have one function, lets just return it. // // This branch isn't really necessary, as the loop below // will not "run" if there is only one function, but i've // included it anyways for clarity. if (fns.length === 1) { return fns[0]; } let composite = fns[0]; for (let i = 1; i &lt; fns.length; i++) { const fn = fns[i]; composite = pipe2(composite, fn); } return composite; }; And if you aren't familiar with the `...fns` syntax, check out [the MDN page on rest parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters)
:) I have been exploring FRP &amp; RxJS after this - Its amazing. Thanks for the inspiration.
I've only recently dabbled in meteor, worked extensively with rails and have tried express, mean.js and sails.js before. My personal opinion is meteor is the easiest to learn, and use of them all. They've strongly adhered to what made rails such an attractive framework in the past, eg making things easy (automagic as they used to say) but in a manner that is in line with the times (full stack javascript, reactive single page apps, mongodb, mobile ready etc). It's also well supported with what i see is a fairly strong community behind it. On the downside, in order to make things automagic imho, they've had to make tradeoffs. 1) They use node in threaded mode instead of evented. 2) IIRC, although they use mongodb, you have to structure your database like a relational database, and only retroactively denormalize your data for performance. Lastly, they are still actively developing the framework, and while i feel it's ready for production, you'll have to keep yourself up to date with changes to the framework, as i suspect they'll make some major changes in the near future. This is based on my 2 weeks worth of playing with this framework, so hopefully others will step up and correct me if i'm wrong. 
Awesome, all great answers! (except for that one) ;) Thanks for the info.
Ridiculous assessment.
 for(const [index,value] of ['foo','bar'].entries()){ console.log(`index: ${index} - value: ${value}`); } gives us: `index: 0 - value: foo` `index: 1 - value: bar` http://jsbin.com/lelirebizo/1/edit?js,console EDIT: just realized someone else already gave an example using entries and array destructing in a for of loop. not sure how I missed that.
when you create a new connection in `reconnect()` you aren't assigning any event listeners to it.
I'm probably not the best person to answer but I'll give it a shot. Underscore is like jQuery in that it holds a similar relationship to JavaScript. It basically makes it easier to manipulate data and grab elements from the page. Backbone and Angular are both MVCs, which stands for Model, View, Controller. They allow you to organize and implement your code in a way that makes it much easier to scale and maintain. I personally found Backbone much more cumbersome than Angular, but I know a healthy handful of companies that prefer it in their enterprise level applications.
this is great!
* I should've titled this 'Getting Started with Building in the Browser' in hindsight. The assumption is that you know some JS and jQuery and want to practice building things in the browser.
Yes.
meh
Do let me to know once it's done, will make it sure it will be covered on https://nmotw.in
you could have a build step that reads the file, replaces the value, and writes the output to a new file, then you would use the new file instead of the original source.
Hi /u/MCWarriorz, this post was removed -- we don't really take requests here. Thanks.
&gt; instant form validation between the client and the server there isn't too much difference between doing it with old school http request. Data still need to go there and back. Only upside of socket.io is that you don't need to send HTTP headers every time. So it pays off when you actually do a lot of these requests for one client. If you're doing just couple of them, HTTP is better suited. I have couple of apps which only communicate with the server over socket.io instead of http. I even wrote a small lib for that: https://github.com/capaj/socket.io-rpc
I know this is offtopic, but maybe next time, consider using mutable data. This is trivial in raw Javascript. Use [MobX](https://github.com/mobxjs/mobx) to observe your state and reap the performance rewards. Don't get bogged down on immutable.js if you have easier and faster options.
This something I do frequently in my builds, which is made super easy by using a module bundler like browserify or webpack. I'll typically set an environment variable based on the build I'm running and add some logic to my client-side code to check for this. Highly recommend moving your client JS development to using a module bundler.
&gt; They use node in threaded mode instead of evented. what do you mean? I don't think that's possible. Node.js is single threaded and there's no going around that.
Yeah, they're [using fibers](http://stackoverflow.com/a/27693312/671457) so it's still one thread. This piece of misinformation goes to show how confusing meteor docs can be. Meteor on the whole seems like a framework of technical missteps. They opted to do their own package manager and failed. They chose node-fibers instead of going with Javascript native generators. What a shame. Meteor could be really awesome if it only used NPM for package manager and native generators.
Your comment on line 32 of your reduced test case is correct - you need to bind your events to the new `conn` which you reassigned on line 23.
I'd assume OP is using this on a site he doesn't own. If the ID is dynamically generated by the server so the numbers at the end change, it might still be unique but not easily targetable by an ID selector.
It's a React/Redux project, so it made sense to use something like ImmutableJS at the time.
Thank you. This is the way I've currently got it working. It just seems a bit long winded to me, given it's probably something quite common. Anyway, moving on! :)
Yep good tip, I'm probably going to create a little helper method since this is something I'll be repeating a lot in the project.
that first comment nails it on the head. 
[removed]
Expected to see some "whoas" with this title... After looking at the article, everything seems like standard IDE features one would expect today.
Oh and I just did some C/C++ development in VS Code (for doing a NodeJS addon), and I have a NodeJS project I'm debugging in one instance, and a Go project in another.
.any conveys it so much better somehow, any is some but some is more than any, or something like that.
You can use await in forEach if you give it an async function. 
"Considered harmful" considered unimaginative. It's also pretty bad in general. Considered harmful by whom and for what reason? &gt; This doesn’t mean that mixins themselves are bad. [...] we think that mixins are unnecessary and problematic **in React codebases.** Right. Kinda overshot the mark with that headline, eh?
&gt; But then…vanilla JS is too verbose It is amazing how fast abstractions seem to always make this claim and yet consistently fail in this regard. Lower verbosity is why I prefer vanilla JS.
No reason to reinvent the wheel - use Isotope. Really nice plugin I've used several times. http://isotope.metafizzy.co
[removed]
But data binding is so convenient, makes my life so much easier. I don't want to go grabbing elements and creating them and all that. Can we do modules the way you like using browserify or webpack and then use Vue for the data binding? Pretty please? Also about limiting ourselves to vanilla js... I'm using lodash no matter what I'm sorry, not willing to let that go at this point in my life.
Hi /u/Vheissu_, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Please use the [Showoff Saturday](https://www.reddit.com/r/javascript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AShowoff%2BSaturday) posts for these types of submissions.
Hi /u/smm11, it looks like you're new to /r/javascript, welcome! Thanks for the submissions, but please make sure you read our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `leaningtech.com`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [blog.leaningtech.com](/search?q=%28and+site%3A%27blog.leaningtech.com%27+author%3A%27smm11%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|5|63% [leaningtech.com](/search?q=%28and+site%3A%27leaningtech.com%27+author%3A%27smm11%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|3|38%
It's had NPM support for about 6 months. They did start with their own package system, which is still available, but you can also use NPM packages with it very seamlessly now.
Have you checked out slick? http://kenwheeler.github.io/slick/
it runs perfectly but i want to know that it actually has?
X-posting reply from webdev. ---- It's been known for a very long time that multiple inheritance is very convenient in the short term but a maintenance hazard in the long term, but we keep inventing new names for it and we fool ourselves into thinking we're using something different and new. Sometimes we call it traits. Sometimes we call it mixins. And bizarrely, because we like self-inflicted pain, sometimes we call it composition. But it has always been multiple inheritance.
Slick's the best.
I've been using Chrome Canary to avoid sourcemap issues like showing the wrong file, seems to do the trick.
Can attest to this. Love slick. 
[removed]
Replace the script tag with: &lt;script&gt; isFirst = true; function myFunction() { var x = Math.floor((Math.random() * 10) + 1); if (isFirst) { isFirst = false; document.getElementById("demo").innerHTML = 6; } else { document.getElementById("demo").innerHTML = x; } } &lt;/script&gt; 
Wow thanks so much. This works perfectly. You guys rock. One question, just for my javascript knowledge: Why is it that the isFirst = true only after the first click? Edit: I think I figured it out; it's because it has to have a true or false value in order to work at all, right?
Reverse engineering it without running it is a bit beyond me. Here's as far as I got: Essentially there's (at least) three layers. There's the string we'll call "A" at the top, within the `atob()` function. Following that, there's another string, "B", and at the end a small piece of readable script "C". "C" is simple - it just replaces certain characters with full words for the sake of compression. It contains variables `W` and `H`, which are the lists of substitutions. It takes the string we called "B" and replaces each symbol with its longer counterpart - `#` gets replaced with `charCodeAt`, `$` with `function`, etc. When it's done, "B" is now some regular javascript, which is then evaluated (`eval(K)`), taking string "A" as an argument, which I imagine decodes "A" in to JavaScript and runs it in a similar fashion. It's possible you can just remove the `eval(F)` at the end of "B" and print out the resulting code instead of running it, but there may be protections against that. If you can get "B" decoded and in a file by itself, you could possibly use the browser's Debugger to pause it before it executes. I haven't tried that, because I'm willing to bet it's a Windows Script Host exploit. They usually are. But, if you're happy to run it, I'd love to know what "A" comes out as!
I'm trying to understand what you're aiming to do, what if you have rotate = Mouse or Tap Distance from centre/z position e.g. users moves 50px right rotate = 50/100 = 0.2; for the farthest item and 50/1=50 for the closest item i imagine it would be as simple as that, but i'm trying to figure out exactly waht you mean. I added drag controls to the file if that helps where i use the x difference i mentioned to control the tree positions when you drag anywhere on the file left and right http://codepen.io/LuckyDe/pen/vKpKQQ/?editors=0010 Hope that helps 
Here is my fix. It's not shortened code, but you can see that I made it a class now. https://gist.github.com/natdm/411409ef55c4ba38775a5d6bb1a37fbb Any time I have to reconnect, I call the exported object's 'reconnect' method and all is well. 
It's an article about React. What is the general context where Mixins apply that people are going to misinterpret the context as? Java? C++? C#? Python? &lt;insert any of the myriad of languages without a concept called mixins&gt;? Any article with reference to Mixins (and no explicit language) is going to require you to go figure out what context is being referred to. "React Mixins Considered Harmful" would certainly have been a better title. In the article the author identifies exactly why he considers Mixins harmful and provides an alternative.
I'm not sure the question really makes sense. Browserify/webpack are bundling tools which use import/export statements (or require statements) to create a bundled Javascript code file. Node is a runtime environment for server-side Javascript (really any non-browser environment). I don't see how they are conceptually related here. 
Try [this fiddle](https://jsfiddle.net/nv4dbppz/)... I'm not and angular developer, but the code no longer generates and error and `angular` will now be defined within the closure.
This client is in the creative field (where everyone underbids.) No, that's not the case here (but fantastic wording on your part.) Here, the issue is that they want someone good who is available. The problem they run into is that great people have full time gigs. They need someone who can take some piecemeal work, a week here, there for about 5-8 total weeks over the year.
Actually, React-style rendering to canvas does not ship with React, I dig through some internal APIs and made that work myself. (I have a post on that) Where it comes powerful is, you can declare custom components using the primitives, like regular React components. This allows to have for example a "cursor" components which does the blinking (https://github.com/goshakkk/pabla/blob/master/app/components/TextBoxCursor.jsx) and use it like &lt;Cursor x={x} y1={y1} y2={y2} /&gt;
That's a tough find in any industry when you're also looking for someone good and experienced. Seems like they need to reevaluate their staffing needs and work distribution or make the compensation worth the time to attract someone of that caliber for infrequent/on-demand work. My buddy (Canadian based) is a freelance full-stack developer that contracts work through an agent and has 15-years experience. Shoot me a message with the job posting/info and I can send it off to him to see if he has any interest.
http://electron.atom.io/
super helpful. thank you!
The first ensures `k in t` doesn't throw an error if called on something that isn't an object (e.g. null or even a string or number). &gt; 0 in null TypeError: Cannot use 'in' operator to search for 'null' in 1 ... &gt; 0 in Object(null) False The second ensures that `len` is a Uint32 value to comply with the spec, as javascript bitwise operators work with 32 bit ints, and the [zero-fill right shift](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#&gt;&gt;&gt;_\(Zero-fill_right_shift\)) always produces a positive result &gt; Math.pow(2, 32) &gt;&gt;&gt; 0 0 &gt; Math.pow(2, 32) - 1 &gt;&gt;&gt; 0 4294967295 &gt; -1 &gt;&gt;&gt; 0 4294967295 The third sets `value` to the first non-empty value in the array, if you're looking at the spec `(k in t)` takes on the role of `kPresent`. It also throws an error if the array is of length 0 or only contains empty values &gt; 0 in [, 1, 2] False &gt; 1 in [, 1, 2] True &gt; [].reduce(function() {}) TypeError: Reduce of empty array with no initial value ... &gt; [,,,].reduce(function() {}) TypeError: Reduce of empty array with no initial value ... The fourth are the currentIndex (`k`) and array (`t`) that are passed to the callback, you can see the details [at the top of the page on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce) 
Oh god damn i love es6
But the "Considered Harmful" format is arrogant and pretentious, like it is a widely known and established authoritative fact, underwritten by experts and proven over the whole community. But no, it is an opinion by a guy with a blog. This time from someone at Facebook, although they are most exprienced experts they do not speak for everyone (even if they might be right). Title should be "Mixins condiered harmfull by the engineers at Facebook (who after some real world experience realise it was a bad idea to add them to the framework and here is why)" As it stands it is just pretentious blabber. 
That's probably better, so that you don't make a new copy of the private method with each invocation of the constructor.
That author has a good [intro to React](http://courses.reactjsprogram.com/courses/reactjsfundamentals/) where he talks a little about imperative/declarative programming up front.
The article clearly states that Sauce Labs provides free plans for open source code. Do you also dislike articles that mention Github (it has the same pricing model)? Also, the article specifically recommends against using particular Sauce Labs tech (Sauce Connect) in favor of free alternatives (ngrok).
Thanks, but I still can't see any result? Do you see anything?
They're probably all going to have some type of bloat, because that's what a carousel is. maybe this? http://darsa.in/sly/
that's a lot of extrapolation from a headline.
I' assuming you are the author. I've been using [Phenomic](https://phenomic.io/) for a while. They have a pretty fancy site, but their documentation is a little lacking. I see that you linked to them. How does your generator differ? Can you sell me on switching over?
[Codepen](http://codepen.io/) seems like a good place to look. Users can mark their profile as "for hire" and you can see content they have created (and its source code).
Been looking for something like this. Subscribed. 
I appreciate the suggestion. Will definitely look into it.
They may be using the history API. Try the popstate event. https://developer.mozilla.org/en-US/docs/Web/API/History_API#The_popstate_event
Uh, you made vuejs-spotify-playlist too, right? (Not the same as vuejs-spotify.) Is there some reason you killed it? I rather liked it. Randify produces a lot of repeated artists. See [example](http://open.spotify.com/user/secretagentfrog/playlist/445XYQSVfnetPQ6UFPh5Zu). I hate repeats. Also, this playlist has a lot of rap. I hate rap. I am guessing it happened to hit my Blacklisted Tracks/Artists playlists (which I use for Smarter Playlists.)
I literally just hit this at the same time as you. Just tried *popstate* and even *pushstate* just in case, ha, and...nada. I'm so confused. This is gonna be a tough one...Thanks though! **edit : spelling.**
When chaining you don't have to always return a promise. mypromise.then(function(data)){ return 'hello' }).then(function(result){ //result is 'hello' })
Somewhat confusingly the *onpopstate* event fires when neftflix's onscreen "back" button is clicked, but not when opening up a video...hmmm..
JavaScript for something easily done in css is a great way to get a low page score though. 
I don't have time to dive through a solution at the moment, but my initial thoughts are "If Netflix uses HTML5 =&gt; video, then I bet there's a way to look through an example page source, see what the video element looks like, and then set some kind of on change listener"... Doing this lead me to: http://stackoverflow.com/questions/32376587/how-to-access-html5-video-tag-metadata-for-netflix-via-chrome-extension I would try that approach and you could just repeatedly call a functoin that checks if it can grab a &lt;video&gt; element or not e.g. loop = function(time) {setTimeout(function(){if (document.querySelector('video')) {// do something;} else {loop(time);}}, time);} loop(10000);
hmm, interesting approach! will add that to my list of fallbacks if I can't get this to work another way...
Yea, depending on how reliable the HTML format is, it may or may not be a workable solution. Good luck :)
Async / await is not in es7 ES7 is only array.includes and the exponential operator (**) 
Promises are here for quite a while now, but not embedded in the language. I think [Q](https://github.com/kriskowal/q) is 5~6 years old.
You might have forgotten to run `npm install --save webpack` The `--save` option should create a package.json and add webpack to the project's dependencies. If it's not the case, you can try running `npm init`, then running `npm install --save webpack` again which should do the trick.
Star?! I know naming is hard, but come on!
Function calls like `document.getElementById` and `window.alert` are available in a JavaScript environment in a browser. Node.js is a JavaScript environment, but it's not a browser environment. Browser-dependent objects, like `document` and `window` don't exist in Node.js, because it's not a browser. That's why you're getting ReferenceError. Node.js simply doesn't have a concept of document or window. Are you trying to do something in Node.js that should actually be done in a browser environment? If so, Node.js isn't the right tool. What are you trying to do?
hmmm....ok, thanks for your help I did run that as above, but from the nodejs folder. I thought it gets installed there and would be used *from there* going forward...?? I mean.....ok so, I'm on windows, I installed nodejs, then installed webpack using the method shown in the tutorial, *in the nodejs folder. Then I created a project folder elsewhere on my system, C:\webpacktest and created the project structure as shown in that folder Then I created the basic files and from a command prompt *in the project folder* I ran "npm run build" So, every time I create a new project, should I open a command window from that project folder and "install" webpack into that folder? So I basically end up with webpack installed over and over for each project? Thanks! 
I have a question about Promises. In the code I've included below, does the web browser process the functions in parallel in several different threads, or does the system merely emulate threading? function doSomeMath(a){ return new Promise(function(resolve, reject){ start_time = new Date().getTime(); return_value = 0; if(parseInt(a)&gt;0){ return_value = 1; for(x=1;x&lt;=parseInt(a);x++){ return_value = return_value + x; } finish_time = new Date().getTime(); console.log(a + ", start time: " + start_time + ", finish-time: " + finish_time); resolve(return_value); }else{ reject(Error("not a number larger than zero")); } }); } var arrayOfLargeInts = [10002, 87622, 12343, 32429.23, 3425, 07321]; var arrayOfPromises = arrayOfLargeInts.map(doSomeMath); Promise.all(arrayOfPromises) .then(function(arrayOfResults){ arrayOfResults.forEach(function(entry){ console.log(entry); }); }) .catch(function(err){ console.log("in err section"); }); I edited the above code to note the time when the function starts and finishes. I can tell that array map functionality is at the very least operating consecutively rather than concurrently. &gt; 10002, start time: 1468534968370, finish-time: 1468534968371 &gt; 87622, start time: 1468534968371, finish-time: 1468534968380 &gt; 12343, start time: 1468534968381, finish-time: 1468534968381 &gt; 32429.23, start time: 1468534968381, finish-time: 1468534968383 &gt; 3425, start time: 1468534968383, finish-time: 1468534968383 &gt; 3793, start time: 1468534968383, finish-time: 1468534968384
You can use Marionette.js with it and you're ready to go :)
No - there is no multi-tasking/threading at play here. Each promise will kick off it's "calculation", which is fully synchronous - to point of resolution/rejection. Your Promise.all() will then scoop up all promises once resolved. Where promises would shine here in this example would be if something async was to take play - e.g. you have a mythical "HTTP large int calculation API", each promise would fire off a request to the API via XHR and only resolve/reject after API returns. 
Glad it's an interesting topic. Please, do provide any feedback you might have :)
That's because `submitNum` is a number. You want to instead set it to the return of `getElementById` directly.
 types: ['geocode','region','cities']
it's always cool to do something with your phone's geolocation or camera APIs, if the assignment is not restricted to desktop. you can probably emulate Pokemon Go (with relative sizing based on gps position) using a combination of geolocation, gyro/orientation and streaming your phone's camera into a canvas element. Would be interesting how far you can take it.
Last edit**: Got it working - and for anyone who may be in the same boat - I had to uninstall nodejs completely and reinstall - I think once I installed webpack in the nodejs folder first it set that as the go to path to run webpack. So even when I installed webpack in the project folder, it would run it from the nodejs subfolder and not know where to find the project files. Once I did a total uninstall/reinstall of node, and only installed webpack in the project folder, it worked as expected Hopefully that helps someone... Rest of the post for prosperity: -------------------------------- arg....maybe i spoke too soon... When I run `npm install --save webpack` *in the project folder* it does *not* create a package.json file. So I ran `npm init` as you suggested and that did create a file - I just used the defaults, empty fields mostly Then I ran `npm install --save webpack`.....seemed to do something, I get a folder caller 'node_modules' created in the project folder Then when I run `npm run build` (from the same project folder!) I get: (*edited out irrelevant stuff for clarity)! C:\webpacktest&gt;npm run build &gt; webpacktest@1.0.0 build C:\webpacktest &gt; webpack C:\webpacktest\webpack.config.js:14 "scripts": { ^ SyntaxError: Unexpected token : at exports.runInThisContext (vm.js:53:16) at Module._compile (module.js:373:25) at Object.Module._extensions..js (module.js:416:10) at Module.load (module.js:343:32) at Function.Module._load (module.js:300:12) at Module.require (module.js:353:17) at require (internal/module.js:12:17) at module.exports (C:\webpacktest\node_modules\webpack\bin\convert-argv.js:80:13) at Object.&lt;anonymous&gt; (C:\webpacktest\node_modules\webpack\bin\webpack.js:39:40) at Module._compile (module.js:409:26) npm ERR! Windows_NT 10.0.10586 npm ERR! argv "C:\\Program Files\\nodejs\\node.exe" "C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "run" "build" npm ERR! node v4.4.7 npm ERR! npm v2.15.8 npm ERR! code ELIFECYCLE npm ERR! webpacktest@1.0.0 build: `webpack` npm ERR! Exit status 1 npm ERR! npm ERR! Failed at the webpacktest@1.0.0 build script 'webpack'. npm ERR! This is most likely a problem with the webpacktest package, npm ERR! not with npm itself. npm ERR! Tell the author that this fails on your system: npm ERR! webpack npm ERR! You can get information on how to open an issue for this project with: npm ERR! npm bugs webpacktest npm ERR! Or if that isn't available, you can get their info via: npm ERR! npm ERR! npm owner ls webpacktest npm ERR! There is likely additional logging output above. npm ERR! Please include the following file with any support request: npm ERR! C:\webpacktest\npm-debug.log C:\webpacktest&gt; So.....I am tired and I think this "comprehensive intro' ~~is not very good~~ could be more clear. I'll let you off the hook - FWIW I really appreciate your help so far and I'll come back to this after a coffee or something..... 
Thank you for helping me, sorry I'm a newbie. Here are two examples i been trying to figure out what to do. This one is with preventCollision http://jsfiddle.net/q3x8w03y/1/ or this one with revert http://jsfiddle.net/htWV3/1284/ . I can use either one, i'm just trying to make sure the chairs/tables don't stack on top of each other. The draggable code start at 2052. Here example pic of the plugin, when i bring the chairs and tables over i don't want it to overlap on top of each other. http://i.imgur.com/Y0SSu5q.png
I did two professional projects with Meteor and I agree with you completely. I'd also add some of Meteor's caveats: * It can be tricky to do things that are supposed to happen in a defined sequence instead of in real time, e.g., do some DOM manipulation after validating some data on the server. * Deployment is far from straightforward * Windows performance is awful. I had a project which built/ran at least 3x faster if I put it inside a Linux VM.
Thanks. This is incredibly frustrating however because the code that you gave me works in jsfiddle and codepen, but it doesn't work in any browser. Forgive me for being so clueless as I'm a beginner, but why is this happening? http://imgur.com/mbqdqUB
I created this page for fun a few months ago, to test having the game read an image, and convert it into an actual level. Should I turn it into a full on game? http://jdhcodelab.com/test/TileEngine/ (I've uploaded 2 test levels. you can change between them by pressing 0 or 1)
Yeah those examples i found on stackoverflow i'm trying to implement them into my own code but it doesnt work. 
why would you even try to make backbone immutable. round peg in a square hole.
Haha yeah the name is a bit bad; I was just experimenting with something and posted it on GitHub so I could download it from my other computer. I forgot to delete it, but I'm kinda glad I didn't! If you have a different name, let me know and I might rename it
Like this? i just copy most of the draggable and drop functions http://jsfiddle.net/htWV3/1294/
Lots of people tag javascript on StackOverflow and get better answers that use CSS. 
It's done! https://www.npmjs.com/package/humaninput npm install humaninput I *believe* I've got the npm package all squared away with proper src, dist (web version), and lib (npm version) directories. This is my first npm package so let me know if I've screwed anything up.
Because: when you return something that is not a `Promise` from the `onFulfilled` function provided to `then`, it will be wrapped with `Promise.resolve`; as defined in Section `2.2.7.1` of A+ Promises[1]: &gt; If either onFulfilled or onRejected returns a value x, run the Promise Resolution Procedure [[Resolve]](promise2, x). [1] [Promises/A+ Specification](https://promisesaplus.com/) 
Thank you for this.
Also [What the heck is the event loop anyway?](https://www.youtube.com/watch?v=8aGhZQkoFbQ)
Yeah, Bluebird, Q, and Angular's $q service have been great. However, as someone who works in Node a lot and doesn't really have to worry about polyfill much, a native promise is just so welcome along all the other tasty ES6 sugqr
We call "that stuff" Web APIs! Web APIs are new stuff that is being added to the web browser so we can make cool things with JavaScript. If you are making something for the web browser, you will almost definitely be using JavaScript. To begin learning about new features, Google "camera webapi" or "geolocation webapi". Since Web APIs are actively being developed, not all web browsers will support them; you can use [caniuse.com](http://caniuse.com) to see which browsers support the features you want to try out. Good luck with your project!
Since you're writing a Chrome extension anyway, couldn't you simply use [`chrome.webNavigation.onHistoryStateChanged`](https://developer.chrome.com/extensions/webNavigation#event-onHistoryStateUpdated)? Throw it in your background script, [filter it](https://developer.chrome.com/extensions/events#filtered) to the URLs you want, when a request comes in [fire a message](https://developer.chrome.com/extensions/messaging) to the content script and let it do its job: // in your background script chrome.webNavigation.onHistoryStateUpdated.addListener(e =&gt; { // send message to the tab that started watching chrome.tabs.sendMessage( e.tabId, {action: "watching"} ); }, {url: [{hostSuffix: "netflix.com", pathPrefix: "/watch/"}]}); // in your content script chrome.runtime.onMessage.addListener(data =&gt; { if (data.action === "watching") { alert("You just started watching a video."); } });
Ahh, thank you for clearing that up! I decided to take a deeper look into Underscore's documentation and noticed it has a lot of manipulation options for data like arrays, objects, etc., as you mentioned, but nothing for actually targeting and manipulating HTML elements like jQuery does, which left me a bit confused. Thanks for informing me. :)
[Somewhat relevant xkcd](https://xkcd.com/927/)
Wow... Lodash actually does look a lot more diverse than Underscore. It also seems to share the same syntax and pretty much everything I had my eye on when checking out the Underscore documentation and then some. Thanks for this! I'll probably go with Lodash instead of Underscore.
I was exactly looking for something fresh and new since i was going to go staight in to javascript after my python exams! Thanks! 
Subscribed!
Web pages are mobile apps! They do not have the exact same capabilities as a _native mobile app_ but with new Web APIs you can do a whole lot of cool stuff. You can drop a Google Maps into a page and then use the [Geolocation WebAPI](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/Using_geolocation) to make it follow a persons location as they walk. As more Web APIs are developed and implemented web pages will be even more like native mobile apps in the future. Native Apps are not my area of expertise, but they can be written in JavaScript using [React Native](https://facebook.github.io/react-native) but this framework maybe be advanced for your current skill set (I am not sure of your skill level so this may be perfect for you if you feel like an intermediate JavaScript programmer). Many developers will choose to specialize in Web Development or Native Mobile App Development, that choice is up to you and if you are extra ambitious you could be able to learn both if you keep practicing and making cool apps.
Are you talking about positioning the facebook widget thingy? `position: absolute; left: -999px` to the widget, where -999px is the widget's width. Also apply `position: relative;` and `margin-left: 999px` width the same value but positive to the main div to make room for it.
You wouldn't, which is why it doesn't work well with React.
True, but I always install Bluebird anyway. `.props` is infinitely more useful than `.all` and I'm really upset it's not native, `.finally` is super helpful in a lot of scenarios, and... this gets a lot of hate, but I really enjoy deferred promises. (yada yada antipattern SHUTUP). 
Honestly can't wait for async/await, chaining .thens kinda get messy quickly.
It's based off a similar phrase and pops up occasionally, but I haven't a clue where it originated.
So is Backbone worth learning, if you're not inheriting a codebase which uses it? I am trying to spend my time learning things I'll actually be using. Thanks for the replies!
Backbone comes with the same challenge as React does; bring your own architecture. I have supported a couple of really large Backbone/Marionette apps and most of them suffered from the same problems; the lead engineers simply had no idea of application architecture. Compared to other solutions, though, Backbone has some neat advantages: it is small, you can just read through the source and understand how it works, it's really not complex; it is quite extensible; and you do not need a complex tool chain around it to get started.
what about with preventCollision ? also your fiddle is missing the declaration of var counter. looking briefly at the way preventCollision works, I would say you need to essentially do the following: once an object is dropped, make it an obstacle for the draggables. You need to really think about what the process needs to be, you should probably work it out in pseudo code, or just plain logic, before you even try to work it out in actual workable code. I feel like way too many people just jump right into coding, without taking the time to work it out via pencil and paper first.
My thoughts (not a fan): https://rebelliard.com/blog/react-driven-by-facebook-principle-concerns
&gt;Never mind, just add or subtract like a twentieth of z from x on each step and enlarge the tree spawn range. Oh - slow /speed up the trees approach to the player to simulate turning? Interesting. I'll look into it, thanks!
Those are good points, but I feel like when we start talking about making abstractions for our own code, even though finally using those abstractions is "very declarative" because you're just calling a function, because we had to write the more imperative code to begin with, we're still writing imperative code, just with abstractions. The only time (at least in javascript and in my experience) when writing declarative code is actually something noteworthy, is when we're leveraging existing libraries (especially the core libraries like Array's map, filter, sort, etc) to avoid having to write imperative code at all. 
&gt;This ZX Spectrum manual lists functions for COS and SIN: http://www.worldofspectrum.org/ZXBasicManual/zxmanchap10.html : nods : I know the BASIC language has them. It has good floating maths support. But the SIN COS functions via BASIC are massively slow... about .1 seconds for ONE calculation! If you crack open a ZX Spectrum emulator and run a FOR loop using PLOT SIN(rad)*10+50,COS(RAD)*10+50, be amazed at the speed of BASIC. The Spectrums assembly code to draw a CIRCLE in BASIC is itself massively slow: https://www.youtube.com/watch?v=sdccAInujFU (hats off to the guy who created the fast circle drawer! Something similar was created for Elite) What I tried to describe was that the Z80 didn't have floating point functions built into the CPU microcode... or have a maths co-processor. It has to do SIN and COS via hundreds of assembly instructions - covering many hundreds of T units at a minimum. These days a single SIN assembly command can be do in a single clock cycle.
Honestly, I would go into this looking to learn as much as possible, not to win. With that in mind, I would create something that uses technology that I'm not too familiar with. Nothing too crazy or new because of the timeframe involved, but it's always good to challenge yourself. Also, assuming you go into this as a career, you'll probably always be working with others, so joining a team is just another opportunity to learn and grow. I've been on bad teams in similar situations, and while at the time it seemed awful I learned a lot about managing expectations, setting realistic goals, and dealing with egos. If you do have the luxury of choosing people for your team, I would look for people with similar motivation. If everyone's looking to learn and challenge themselves you'll all benefit greatly, even if in the end your software isn't what you hoped it would be. Good luck!
Lodash rocks. If you like it, thank the author: https://twitter.com/jdalton
Idk man I've been doing a project with mobx and react and it's been a joy to use. I don't think mutative stores and react are so bad
Well, now that I have time, I implemented what I meant [here](http://codepen.io/anon/pen/XKVawy). I added some key listeners to change the turnSpeed and use that to make the trees move from side to side as you turn.
You are right, the README is kind of confusing and it's not quite clear what is the main purpose behind my library. I suck in English and it's very hard for me to write an attractive README. Let me explain shortly what it's all about: The reason I have created kindergarten is that I am working in a company that has over 100 developers and soon we will have even more. We are splitting our application into micro-services in the front-end and in the back-end - so we need a simple and consistent way to share some code over multiple repositories. Our authorization logic is very complex (user can have lot of roles, product has hundreds of settings) so I took that into the consideration as well and make it simple for developers to share authorization rules across all projects. Thanks for you comment! Feel free to contribute and improve the README file. I will be very happy to merge such PR :-)
You could call that... A *reactionary* fork. 
**EDIT**: I just re-read the entire thread, and now what I'm thinking is "Aren't methods ideally *supposed* to be shared across instances?" I'll admit that I don't have a thorough grounding in OO, but I wasn't aware that having instances each have a separate copy of a method, whether public or private, was anything other than an antipattern that in JS is much too easy to make. --- I didn't say it *was* the same thing: The post you first responded to was all about making a function defined inside another function accessible outside of it, as in the opposite of private, and then my response was about how your suggestion was better than the straightforward way to make private functions (which is to define them right in the constructor). --- When I posted that response, however, I didn't think to check the context link, so I thought that you were responding directly to some post that said functions defined inside other functions are private by default.
Hey thanks a lot! How is the "friend" function used here? Thanks.
wtf? Imperative: Code that does something Declarative: Data that defines what you want. 
Will do, thanks.
Following you on Medium 
thank you!
That's what I concluded as well after talking to students. Hopefully, I can make a useful course (with your help) :)
thank you!
Thank you! But bear in mind - I'll most likely won't post much on medium itself, I'm planning to do this as a video course. But I will probably do a large post there once I'm done with all the videos
I haven't actually thought about any real-time communications channel. The idea definitely sounds interesting, but I'm a bit afraid that IRC itself can be a barrier for some people. But I'll definitely think about it, thank you for suggestion!
Open source for Facebook is unlike other open source projects: "The understanding is that Facebook and/or any of its affiliates can file a lawsuit against you over any Patent and in doing so would void your use of React... meaning you would have to replace the use of React with something else. Or likewise, if you sue Facebook or any of its affiliates over a patent you own and they are using without permission/license/whatever, would also break your license and again you would now have to rip out any use of React." https://discuss.reactjs.org/t/legal-department-did-not-allow-use-of-react/3309
That's inaccurate FUD. &gt; The understanding is that Facebook and/or any of its affiliates can file a lawsuit against you over any Patent True, but it's also true of any company and any framework. Microsoft could sue you for patent violation if you use Backbone. (Does Microsoft have a patent that covers some aspect of Backbone? Probably.) &gt; in doing so would void your use of React... meaning you would have to replace the use of React with something else. False. First, the phrase "void your use of React" is meaningless. I think this may be intended to mean "void your license to use React" which...Facebook suing you would not do (and indeed, could not do; the code is licensed under a BSD license with no termination clause). Nor would the license to use their patents be terminated. This is just wrong. &gt; likewise, if you sue Facebook or any of its affiliates over a patent you own and they are using without permission/license/whatever, would also break your license and again you would now have to rip out any use of React. Unlike the last half (which is basically entirely right) this part is about a third right. If you sue Facebook, your explicit license to their patents will terminate. Your license to their *code* would not terminate, and there's a decent argument that the license they use for their code contains an implicit patent license that is not terminated, but worst case, you'd lose the patent license in which case... ...you'd be in the same position you would be in if you'd used Angular, Ember, or Backbone. Or, hell, written your own framework from scratch; what makes you think it doesn't violate their parents? (Also, the link you gave is utter nonsense. "The legal department at our company has denied our request to use React because of the patent clause added in April 2015. Legal was OK with previous versions of React."? The change in April 2015 strictly strengthened the license grant, and was made based on direct feedback from large enterprises to ensure they *could* use React. I don't believe any legal department really said "hey, this license grants us *too many rights*, we liked the old one that terminated in all the same circumstances *and more*.") TL;DR: If you assume that the patent grant terminates automatically the moment you download React, you still have code licensed under the BSD license. If that's not "open source enough" for you, you're screwed.
Ha. I'm assuming you're a robot. Of course, I'm not the author of Gatsby (if you were human you should read the page ;-) - Anyways, the Phenomic author has a page for you titled [What are the differences with Gatsby?](https://phenomic.io/docs/faq/gatsby). Cheers.
I suggest you do more research about this, and/or consult a patent/license lawyer, because you are spreading FUD right now and the only thing you're linking to is on a thread where his lawyer didn't approve of it. 
Note: You're saying "visual studio" but it sounds like you mean "visual studio code" :-) Might confuse people thinking they need to original VS instead of the very different product VS Code! Great video too. :-)
From a quick look you have two problems here: **getNewsForCountry** is both: 1. not returning anything. 2. async. You need to convert it to be Promise-aware if the package **JSONP** is not already. [This article explains how to do so using a XHR object as an example.](https://bitsofco.de/javascript-promises-101/)
Yes, I am not returning anything because JSONP is not returning a promise and i need a promise. Thank for the link, I'll see what can be done. 
I came here to say that! Wrapping a function in an anonymous function should be avoided - even with nice arrow notation ;-). Dr. Boolean wrote a nice piece on this practice in Javascript: https://drboolean.gitbooks.io/mostly-adequate-guide/content/ch2.html#a-quick-review
Yes, indeed, I do mean VS Code. That's a good point. Thank you! :)
[removed]
Spent a little time getting everything set up last night. It was easier than I thought. I do love node. Electron is really exciting! 
You'll need to post the full code here for anyone to really help. This could definitely be CSS or JavaScript related depending on your implementation 
Fuck you, man. It seems like everyone else is cool with you using this subreddit to attempt to squeeze a comfortable, lazy, entitled living off your shitty Youtube channel, BUT I AM NOT. Fuck your shitty marketing bullshit. It has no place on this subreddit. You think you get to just sit at home 100% of the time, making easy money from the internet, and do whatever you want with your free time? Nope, sorry buddy, you have to get a full time job and hate your life like everyone else. Fuck you.
Exactly. Start with the bare bones. Only add things as needed. Though one thing that you should definitely do is look into TypeScript once you get past the absolute beginner stage. EDIT: &gt; I don't want to tell my boss I'd rather build everything from the ground up Wait, what? you're hired to work on a javascript project and you have no idea what you're doing? 
Consider using a [CSS transform](https://developer.mozilla.org/en-US/docs/Web/CSS/transform) instead of repositioning the top/left coords on mousemove. CSS transforms usually push the work over to the GPU. *edit: adding a quick example...* var imgX = event.clientX-imagePositionLeft-imageWidthOffset var imgY = event.clientY-imagePositionTop-imageHeightOffset $("#image").css({ 'transform':'translate('+imgX+','+imgY+')' }) Not sure if there's a better way to set the transform property with jQuery; haven't used it in a long time. 
"I think that it's very dangerous to use Facebook's "open source" software. What if your company grows in an area that threatens Facebook, or they expand into an area that overlaps with your company?" https://www.quora.com/Are-people-really-worried-about-using-React-and-ReactNative-with-the-language-thats-in-Facebooks-PATENTS-file Could that really happen? If one built a site using React that competes with Instagram, for example, would one be in violation?
To answer the title question, It started out for convenience, and ended up being for pissing contests.
AJAX is just async web requests you can make without reloading the page. REST is a concept for using different request types to the same API endpoints and JSON is a data format commonly used when using AJAX to make calls to a REST API. None of these are "dependencies". 
yea, pissing contest for sure, but mostly because javascript is a trending language and everyone is using it.
Because JS has the most awesome community on the planet, that's why.
I completely agree with you - if browsers supported another language, I'm sure people would try the other language 
Hey man, thanks for your feedback. Let me just go ahead and clarify a few points once more: 1. My youtube channel, all the videos I make and all the code I publish is not monetized and never will be. It's also published under non-restrictive licenses (CC/MIT). 2. The course is something I decided to share with the world because I thought it could be useful to some people on the internet. I am making this course for the students in the university I work for in the first place. And please, no need to insult people. That doesn't look good.
Why is comparison just "way too slow" without immutability? I would like to see some benchmarks here. I have plenty of spots in my redux app (substantial size) when I do deep equality comparison and everything is performant.
Don't stress about learning the "right" language out of the gate. Learn to program, period. Learn C, learn Python (that's where I started), whatever. The most core concepts (declaration, methods/functions, looping, variables etc) are ubiquitous across languages, so learning one makes learning more much easier.
I wish I had started with videos instead of books. I wish I had started with Python instead of Java. I wish I had saved every scrap of code and mini project I've ever worked on. 
I haven't tested this, but this should clear up the performance problem. Don't add or remove the image, just change the class, the zoom didn't really work because you were checking it's offsetTop and Left after your re-appended the image this Top:0 , left:0 by default. 
&gt; If one built a site using React that competes with Instagram, for example, would one be in violation? If you build a site using any technology that infringes on any patents that any company holds, or which their well funded legal team can semi-plausibly argue infringes, then yeah, you can be in for a world of legal bills. So...sure, maybe your React-powered Instagram-clone might infringe some patent Facebook might have, who knows? But the key question is: *What are you going to do about it?* You can't just say "oh, I'll use Angular to make the site"; you have zero reason to think it would infringe any fewer patents. Worse, now you don't even get a conditional patent grant. Not that you have any way of knowing if the patent grant was valuable of course. How could you? You don't even know what the patents *are*, or even who holds them; nothing says that Facebook is the one with the dangerous patents. Maybe it's IBM. Or Oracle. Or some patent troll. Or maybe they don't even exist. I *personally* wouldn't say that the React patent grant has much value, but it certainly doesn't have any drawbacks. Software patents are terrible, and they impose real risks, but the only way to avoid them is to never write any code ever. TL;DR: Yes, but only in the sense that anyone can sue you for anything. :)
It's not just that code is harder to debug when it's not your own, it's that you don't have control of fixing the bugs. Sure, you can put in a PR to fix the issue, but that's no guarantee it gets fixed because the maintainer has to actually accept your pr and make a release. Even if they do that, their release schedule could be bad for you. So fixing a couple lines bug goes from taking 10 minutes and a push to 1+ months because your fix is languishing in their backlog or next release cycle.
One thing leads to another, the majority of software being developed today is for web, so a lot of developers knows how to develop for the web, so let's use this knowledge to make another kind of software (NodeJS). People says javascript is a "script" language and it is good to make a bridge to different technologies, so it can be useful to do almost anything.
Javascript is dependent on Ajax and REST in the same way other languages are dependent on file systems or graphics hardware. You don't have to use them if you don't want to, but they come in really handy. I think you'd be hard pressed to build Ajax from the ground up.
I was just trying to use something from the article (onToggleHighlight) and yes I realize that is an event handler. The article was exhibiting the component template as an instance of declarative programming, and that particular event handler was just one of the things included in it.
Open up dev tools, go to the network tab, filter by xhr, and do whatever action should trigger an ajax request. You'll see it there.
Hi /u/chungcgungz, this post was removed. If you wish to share a link, please use the link submission option, then add whatever extra text you want as a comment. Thanks.
Resorting to "building it from the ground up" right away is very naive. Just because you are not familiar with how something is built doesn't necessarily make it a mess. And you are already complaining and mashing things together that don't really belong together, and you want to rebuild something that already works from scratch? Now that's going to be a mess. 
If Facebook makes React non open source it won't matter really. There are so many Just like React frameworks, inspired by react, but just have a different diffing algorithm. Unlike Angular, React uses a lot of JS, so it transfers well.
I wouldn't say so many frameworks are a problem, there really is no need to keep learning the framework of the week. If you're looking to build large and medium scale applications, I would recommend learning one large framework like Angular or Aurelia really well, and also a few smaller libraries. I also don't think this is unique to JavaScript. It's emphasized in JavaScript because most people view this from client side development, where you have to use JS, but there are a large number of frameworks to choose from. If you look at server side though, first there are a large number of languages to choose from: Java, JavaScript, .NET, Python, Go, Ruby, Rust, and many more. And most of these languages have at least 2 or 3 popular web frameworks. People don't really see it because you tend to only stick with one language on the server side. 
This is the correct answer. [CSS transforms are hardware accelerated.](https://www.sitepoint.com/introduction-to-hardware-acceleration-css-animations/)
Is what you're given an app or something? If so, how can all of it be broken? 
Friend functions aren't accessible outside of any instances of Foo or it's member functions. So all instances of Foo can call friend(). Calling "this" from inside friend would be undefined, so friend doesn't have access to instance members or privately scoped members. 
I tried this before, but the GPU has a texture size limit that would downsize a 6kx4k image into something like 1k x 1k, so I went back to repositioning the top/left coords.
Lol. I find it funny you're cherry picking comments to reply to. avoiding the other comments that makes sense and are really probably whats happening in your situation. Like the one about how you really don't know what you are doing haha. You're blaming something else for your incompetence to make yourself feel better. In that you want to think it's not you that's the problem. But in reality YOU are the problem. 
Thanks. You basically said what I was struggling to say without having anyone bite my head off. That’s exactly what I mean. It just seems too much boilerplate to me, But the problem it’s trying to solve in general is appealing. 
If you are the only intern doing JavaScript, and you can't find a more experienced developer to guide you through the process, with your boss expecting you to pick it up all yourself, then something is up with this intern gig.
From another comment, it appears that OP is an intern, and the only one with any knowledge of JS so it's all getting dumped on him. 
People are still working out the best way to do front end so you're witnessing a lot of evolution going on. Try not to get caught up on doing the latest trendy thing and stick to things that are good enough for now.
&gt;I don't think I could do anything effectively on the front end unless I build it from the ground up, its just a giant mess! lol.
The work you're doing here isn't asynchronous, so not a good use-case for promises, imho.
It wasn't until I started coding professionally that I realized it doesn't really matter how cool/fancy your code is and you shouldn't strive to be as clever as possible. Because of that thinking I never used any libraries and tried to figure things out myself by flailing around writing really really bad code (php and vanilla javascript, as they weren't taught at my college) that eventually worked, when I really should have been learning from other people's work. It wasn't until I started using other peoples libraries and frameworks that I realized how to write code that other people can actually use, which is usually going to be your future self / coworkers. Organization and readability are about a billion times more important than writing clever code.
Ajax, really? 
I wish I had a better understanding of simplicity. I used to have a great appreciation of powerful algorithms, but now I don't. If the same thing can be accomplished with code that a mere child can understand then child friendly code is then vastly superior. If your code is cute or clever you are a fool. If you believe some pattern, or convention, or tool will always be there to save you then you are only setting yourself and everybody else up for future failure. Always keep it stupid simple. If you want to look brilliant don't do it in the code. Do it by solving hard problems with simple solutions.
Learning that readable code is often more important than performant code
Did you read Steve Sanderson post ?http://blog.stevensanderson.com/2016/05/02/angular2-react-knockout-apps-on-aspnet-core/
npm does this for you. `npm outdated` shows which dependencies are out of date, and semver gives you info about breaking changes. There are various services to help automate this stuff like https://david-dm.org/ and https://greenkeeper.io/ If you're not using npm and moving to npm would be too difficult... then I'm not sure.
That you never really stop learning to program.
Thanks for the info. Unfortunately I'm using npm only for a few Grunt tasks. Moving to npm would be a pain. I still appreciate the info.
Books &gt; Videos if you ever actually want to learn a topic. Videos are great for evaluating technologies and getting started.
Too hard for a first language for a lot of people. Learning basic programming concepts/design patterns along with a more difficult language can be overbearing.
Videos are great when you need to do X thing in a short amount of time. They can be more specific to an issue. Just copy everything they do. Don't learn as well, but it will get done.
Too hard? It's easy. Easier than JavaScript. I don't *like* it but it's probably easier to get right than Python or JS, both of which I do like.
It will take 10 years for you to realize you don't know a fucking thing about programming. And that's good: it's a battle call to improve.
Got any good project ideas for learning Python?
The size of an individual commit is always smaller than you think it should be, and you should try to test and make sure it works after each commit. I wasted a couple years in college trying to build big whole systems in my head and then write it down all at once, thinking I'd save on rewriting. It doesn't work that way - every single one of those systems got like 1000 lines in and then I realized I had zero chance of it working and gave up. Build the smallest possible feature that might have a visible effect, get it working, and then move on to the next one. The bulk of my commits now, as a professional with 12 years of experience, are &lt; 10 lines, and almost all are &lt; 100. And I write some pretty complicated stuff, eg. search engines, messaging systems, unstructured data mining. It always starts with something trivial, and then each individual step along the way is trivial, and then if you're lucky you end up with something pretty awesome.
I'm not sure if it's a good idea, what if the object has custom getters or setters? Why not use Proxy?
For a programmer maybe. I started with Java and C++ but I definitely feel that if I started with JavaScript it would have been easier. Now I look at JavaScript and try to figure out what the hell is going on, but take any Js dev and they are lost with other languages. 
/r/ProgrammerHumor 
Let the fat arrow be your wingman. 
I don't think I'm being patronising when I say that I don't think JavaScript developers *in general* know what's going on with the language either. There's a lot of crazy stuff for which you just need to know the rules. Like I said, I like it, and I know a fair amount of what's going on. Java has more easily understandable rules though, and I really feel that rules help.
Well, Javascript current map function only works on arrays. So you can use lodash.js in order to iterate objects properties. var output = _.map(objectX,function(addressComponents){ return { state: addressComponents[0].short_name, country: addressComponents[1].short_name }; }); //the ouput will be //[{"state":"NJ","country":"US"}]
acording to the documentation it looks like you should be using: types: ['geocode', '(regions)', '(cities)'] have you tried this?
&gt; fun1().fun2() fun1().fun2() 'this' becomes assigned to the value returned from fun1. if that object doesn't have a fun2 method, it will throw a "fun2 is not a function"
He also should be adding it as a listener; e.g. document.somePseudoSelector.addEventListener('mouseover', function() { //foo });
Wow thanks for the awesome response. What is the deal with the nested function? eg. function (imageZoomFunc(){ ? I'm wondering if that's supposed to auto-execute itself. Shorter than writing out the function name again below?
Formatting code in Reddit is not that great in my opinion, I could include an exported HTML which shows highlighted code? Like [this](http://360mediahub.com/demo/image-hover-zoom-highlighted-code.html).
The first attempt was very flawed, for one the image was moving the wrong direction, I have to add a control flow statement that tells it to add/subtract values from the x,y coordinates. It did zoom though I thought. That's why I saw those two people that I didn't notice before haha. But yeah overall it's very bad, 60-80% CPU spike... hmm I should be a virus/malware creator or something
I'm guessing you might be referring to Kyle Simpson's You Don't Know JS? There is one called "`this` and object prototypes": https://github.com/getify/You-Dont-Know-JS/tree/master/this%20%26%20object%20prototypes
Yeah I'm not sure these are even worse, I tried translate and translate3D, the zoomed image would take forever to appear. Going back to my original code though, that too is taking forever, maybe I'm maxing out of CPU or something. I have other tabs open.
were you talking about [this?] (https://rainsoft.io/gentle-explanation-of-this-in-javascript/)
kyle is my javascript god
I'd personally do: var comps = this.v.address_components; var country = comps.filter(v =&gt; v.types.indexOf("country") !== -1)[0]; var state = comps.filter(v =&gt; v.types.indexOf("administrative_area_level_1") !== -1)[0]; return { state: (state || {}).short_name, country: (country || {}).short_name }; Or if you're doing lodash anyway: var comps = this.v.address_components; return _.mapValues({ state: _.find(comps, {types: ["administrative_area_level_1"]}), country: _.find(comps, {types: ["country"]}) }, "short_name");
 [].forEach.call(document.getElementsByClassName("js-block"), function(element){ element.addEventListener('mouseover', function (){ this.style.borderColor="red"; }) }) will work, but like others are saying, this would be better handled via css
You have to teach yourself. Sunny study computer *science* if you want to be an engineer! Learn by doing. Don't take classes that will teach you a bunch of obscure things you'll never use unless you're writing your own compiler. Most importantly, hey involved in open source and contribute as much code as you can. This is the best way to learn, and it's fun! Even more importantly, you're helping to make the entire computing ecosystem, and therefore the world, a better place.
yep
Videos are really obnoxious. Give me a well-written blog post over a video *any* day. I don't think I've read a book on programming since high school. That just seems silly. man pages are your friend!
That sounds like really obnoxious work that should be passed off to a project manager.
I couldn't find a boilerplate with the parts I wanted so of course had to create another. Hope someone else finds it helpful!
at least once...write a parser !
I think that you're spot on. The bookmarklet script seems to run in the context of the active tab's domain.
Don't take your code personally. What we do has a expiration date and someone at some point will come in and wash it all away.
But then it's not random. ;)
* Be explicit. Give things clear, explicit, meaningful names. * Don't abbreviate, ever. EVER. * Terse, abstract code is not necessarily clear code. Writing code doesn't cost time. Reading and understanding code, does. Don't be terse for the sake of saving keystrokes, be terse only when it adds clarity and reduces cognitive load. * Code you can understand after 6 months is preferable to DRY code (to a degree), if DRYing up your code requires esoteric or unclear abstractions in order to DRY it up, think carefully before doing it. Simple damp/wet code can be easier to manage and reason about than super abstract DRY code. * If you find yourself leaving comments, your code is too complicated, not explicit enough, or not expressive enough. Comments are a code smell (how's that for going against the grain!?) that indicates you need to simplify your code. Only when you've simplified it as much as you possibly can, leave comments to help yourself out. You should find that you only need to leave comments explaining *WHY* you've done something the way you've done it, or explaining the purpose for something. The rest of the code should explain itself. * Start with the absolute simplest, leanest solution first. Don't try to design code until you've first solved the problem, THEN design/refactor your code. Else you wind up with abstractions you don't even need, leaving your code less clear than it has to be. * Establish a set of personal rules and conventions for yourself, and ***apply them consistently***. If you write getters, and decide that the getters should *only* retrieve pre-computed properties, then always make sure they only retrieve pre-computed properties, and don't do any actual work in the getters themselves. Just stick to your own conventions to make your code easier to reason about in the future. Break your conventions only when it's absolutely necessary. * Similar to the above, be methodical. * Caveat to the above, base your code style heavily on community best practices and idioms. This helps yourself down the line, and helps others who have to read your code. * Refactor refactor refactor, and always aim for simplification. Simplification should be the #1 goal of refactoring, not striving to implement patterns for the sake of patterns. Just like you should proof read an essay *several times*, you should refactor your code *several times*. Even coming back to something a day later may leave you scratching your head as to why you did something. Use that as a sign you should immediately simplify and clean up your code. * Don't try to future-proof your code right out of the gate. You're not a fortune teller. You can make reasonable estimates about how painful code might be to change *IF* requirements change, and then plan accordingly while refactoring and designing, but avoid saying "In the future, this behavior may be necessary....". You simply don't know that, and even if the requirements do change, there's absolutely no guarantee your attempts to account for those changes will be compatible with them. So now you've not only failed to accurately account for the requirement changes, but you've wasted time building useless abstractions, and now you get to waste even more time trying to adapt them to the new requirements. As you gain experience, you can start making somewhat reasonable assumptions about how to make your code flexible without adding much complexity cost. * You're not a cryptography expert. Do not try to roll your own crypto. Use a cryptography library written by someone who knows what they're doing, and learn how to use it appropriately.
You're not shit. Everyone is shit. The people teaching you are also shit. The world is held together by PVA glue and stickytape. :D
`onmouseover` is an ok way to set an event listener if you're learning. It has numerous disadvantages compared to `addEventListener` but in this case it should work.
I'm going to have to go through your code again and see the difference/understand what is happening. It would be pretty bad if a zoom-function killed a website haha.
&gt; JSON gives us a beautiful and flexible format. Unlike XML, which has a loosely formatted structure, JSON gives us some simple guidelines to follow to allow for easier standardization. Uuhh ...
Yeah that's the thing beginners don't understand. Ive been there though but once you know one it's easy to switch over
There is a space between **$** and **(this)** in the console.log. Also, another space between **id** and **=**
https://csstriggers.com/
Nice it's like a Caniuse?
Hmm, let's see ... if (!document.querySelectorAll) { document.querySelectorAll = function(selectors) { var style = document.createElement('style'), elements = [], element; document.documentElement.firstChild.appendChild(style); document._qsa = []; style.styleSheet.cssText = selectors + '{x-qsa:expression(document._qsa &amp;&amp; document._qsa.push(this))}'; window.scrollBy(0, 0); style.parentNode.removeChild(style); while (document._qsa.length) { element = document._qsa.shift(); element.style.removeAttribute('x-qsa'); elements.push(element); } document._qsa = null; return elements; }; } ... document.querySelectorAll( ... ) versus $( ... ) Oh, and let's not forget that JavaScript is an abstraction over C++, and then some.
I don't really understand any of this, but are you having problem with translating `# Create an asymetry # The right tail can be longer (rtail &gt; 0) if (any(x&gt;top_x)) { x[x&gt;top_x] = sapply(x[x&gt;top_x], function(x) x - rtail*(x-top_x) ) }` into JS?
ajax. just say no
My solution: http://codepen.io/short/pen/oLpQYZ?editors=0111 I only loaded the image once and simply drew a clipped part of it on the canvas.
This. Most programming is not math, it's *communication*.
Out of curiosity, how long have you been using Javascript for? I'm still getting into object-oriented and using deferred/promise. I really like how you can just do whatever you want with DOM manipulation and also work with server-side scripting... jquery is great.
The problem with JS is that is was never intended to be used for most of the stuff we're using it now. I would say it wasn't designed for it, but since it wasn't actually designed at all (more like slapped together in two weeks), I would be stating the obvious. Currently, the language is going through a significant revamp of major pain points in which the "ultimate solutions" of yesterday produce "solution hell" of today (asynchronous, callbacks -&gt; callback hell, promises -&gt; promise hell, async/await -&gt; guess) and complete better languages on top of it (TypeScript), but it has a bright future for sure.
I've been learning JS on and off for the last few years (3? 4?). It's all about learning how to solve problems. I had never built something like this before, but I *have* done stuff like drawing images with the canvas. So that's where I started, just googling for the specifics. The easiest way that I learned was through just building a ton of things. If I wanted to learn how to animate something, I'd give myself a task like "Make a marker move around a navigation bar depending on where I hover". From there, it was googling until I figured out how to make it happen. Over time you learn more and more and can tackle some huge, but really cool, problems! Don't get me wrong, jQuery is a handy tool, but I normally recommend against it. I think it's more important that you understand the language and the APIs provided by the browser. When you start needing larger applications, pick the right tools for the job (which is hardly jQuery any more). The large apps that I'm working on are [Vue](http://vuejs.org/) and [React](https://facebook.github.io/react/). For anyone wanting to foray into the world of frameworks/ui libraries, I recommend Vue. It's crazy simple but insanely fast and powerful.
I think you're going down the wrong path of thinking here, so here's a walkthough: 1. `isFirst = true` sets `isFirst` to `true`. 2. `myFunction` is created *but not run*. That syntax - `function someName() { ... }` - is used to create a function and give it a name. But none of the code inside it is run. 3. Nothing else happens until... 4. You click the button. Because the button has `onclick="myFunction()"`, `myFunction` now runs: 5. `x` is set to a real random number (well technically it's a "pseudo-random" number but let's ignore that) 6. `if (isFirst) {` evaluates to `true` because `isFirst` is still `true`. So, we next run the code in the `if` block, skipping the `else` block: 7. `isFirst = false;` sets `isFirst` to `false`. 8. `6` is displayed. 9. Nothing happens until... 10. You click the button again, and `myFunction` runs again: 11. `x` is set to a real random number 12. `if (isFirst) {` evaluates to `false`, because we set `isFirst` to `false` last time the function ran. So, we go to the code in the `else` block, skipping the code in the `if` block. 13. `x` is displayed 14. Nothing happens until... 15. You click the button again. Because nothing has changed since last time, exactly the same thing as last time happens, and `x` is displayed. And so on for every subsequent click. Clear things up?
That's the one, cheers
You know that there is no image right? Well I mean it's a gray block... but what am I supposed to see with this grey block? The cursor disappears behind it.
I don't know if you'd care to elaborate further on the requestAnimationFrame that's something that I still haven't cracked. I mean I don't know how to tell that it is working... I guess if the animation lags then it's not working.
with jQuery the only thing I usually use is the selector/making things hide/appear. Recently been using css with jquery Why do you say "large apps that I'm working on" what does that mean? You help contribute to the framework/library or you use them for your job? I'm the same as far as finding ways to solve a problem, starting simple is definitely important, to get the concept down... right now I'm trying to figure out how to package 10 rows of mysql entries and call them only once, turn into a json and use that json locally for viewing/re-organizing as it would be dumb to me to call it over and over just to re-organize. I'm going to start simple though, say a couple of fruit objects with few properties haha.
Absolutely! Thanks.
The gray block had some text in the center (though rather small because of the resolution). I've updated it with a different image: http://codepen.io/short/pen/oLpQYZ. Now everything should be nice and beautiful :)
As I mentioned above, knowing about big O complexities and lookups helps to go a long way when you need to build at scale, especially in a single threaded environment. 
Ah, you'll have to excuse me, it's 2am here. I meant to say that the apps I'm working on *use* Vue and React. Yeah, sounds like you've got the idea! Keep hacking away and it'll stick. Trust me when I say there will be a moment when it all "just clicks". And from there out, you'll know how to solve problems 90% of the time. The other 10% comes the next day when you realize that someone made some dumb mistake that gets fixed in about 30 seconds.
Alright, thanks :D
Who is that someone haha
The structure just seems odd... it calls itself from within itself ... anyway I had a project that involved javascript animation and had that problem you mentioned... though the problem wasn't in the animation itself but rescaling... so I have to learn objects and deferred and go back to it.
Have you console.log the obj? What is in inside? Does it have a "height" function? 
hm, obj seems to be the index. because if I log it out, it writes 0,1,2,3,... Does the $('img') selector return a object instead of an array? Because I thought I am using this map funciton: array.map(function(currentValue,index,arr), thisValue)
Three.js is an excellent library for 3D rendering in canvas elements. That might a good starting point for what you're looking to do. 
I agree on both fronts.. Simple probably wasn't the best word to choose. It's only simple compared to some of the other boilerplates I've looked at ;)
the reason why I find the user of $(this) confusing is, that it doesn't work anymore if I change the function(){} to an arrow function ()=&gt;{} what's the reason for that?
It just takes time. Things that started out hard a few months ago will become easy. Everything depends on you understanding a web things that came before - but you will acquire that. Without more details it's hard to give concrete advise, but break it down piece by piece. Ultimately, this would be unit testing - but start testing the units by hand. What's some*thing* that's not working? Isolate it, get a reference in the console, and try good and bad cases with it; clean it up and move on to the next. Things are a "giant mess" when they have poor boundaries. If you can enforce some, it can be easier to figure out. "Clean Code" by Robert C. Martin is a good book about this. (It focuses on Java, but most of it is good for any language.) Can you tell us what some of the dependencies are, or what some of the errors being thrown in the console are? “lot of random texts every where” could be, for example, a symptom of it using Angularjs and hitting an error early in the load process - that's debug-able.
 javascript:var script=document.createElement('script');script.src="https://example.com/example.js";document.body.appendChild(script);
This also only works on Chromium on my end, not Iceweasel (linux browsers). It reminds me of greensock or uhhh... there is another framework with javascript, velocity I think?
It's pretty cool, why not a dark background? The contrast is hard to make out in my opinion, or how about a purple gradient and white stars? Just thinking out loud, sweet "project?" It's smooth.
I made a queue function which takes any constructor as an argument and wraps it with methods to make my life and maybe yours easier. https://github.com/SeanJM/queue
The [`popstate`](https://developer.mozilla.org/en-US/docs/Web/Events/popstate) event *should* do it, but since you claim to have already tested it, it apparently doesn't. It'd require a bit of digging into Netflix's code to determine why. The best you can do with the current solution is to use [an event page](https://developer.chrome.com/extensions/event_pages) as your background page, so it isn't running constantly.
Nothing?
well Im talking about doing a youtube series, not the content, let me give me an exampel from game design, 3 min gamedesign (https://www.youtube.com/watch?v=vw76jqF1nkI&amp;list=PLFFUZ_uHAWMU44iAlkVoXKnsOefNYdsaK) pretty good concepts until you find out its self promoting videos for the authors book. no one is doing it for free, there is always a catch, and btw i dont even understand what the series will teach you 
I published my first npm package! It's Can-restless, and it should make it easier to build front end apps for flask-restless or other json api servers. 
Feedback definitely appreciated, as I want to do a few more posts on this. Especially if you were confused about something!
If you've never built a web app, the easiest way might be to pick up a framework. Frameworks are good for beginners since they set out the guidelines/project structure clearly and the general ideas translate to lots of projects. Plus the best part is you get to have something up and running quickly, and they should all have an introductory tutorial. Reddit gives frameworks a lot of hate, but they serve a useful purpose and the successful ones will be funded and used by businesses. Imo looking at a large project's source without somebody talking you through it probably won't mean a lot to you, especially without experience. 
Seems to work ok for me on iPhone 6/iOS/Safari. I can move the Panda around &amp; dress him up. You've got the right meta tags for scale. I noticed the app has ~20px margin on the right side and the Safari toolbar covers up the buttons at the bottom. Maybe you've some overflow or something that's letting people scroll the page. If you want more touch support I highly recommend http://hammerjs.github.io. It's also in the Google CDN. 
Many people say that the best way to learn is by collaboration and looking at other peoples code. Should I not do it?
Part of the issue here is that the structure of a project can very a lot based on the developers preferences and the specifics of the project. In the past I've looked at a cross section of several projects; borrowed the ideas and concepts that I liked; and applied them on the projects where they seemed to fit best. Three things that I've done in the past (in no particular order): * Get [Yeoman](http://yeoman.io/), then download, start playing with and some of the generators. (This is especially helpful if I'm using a framework I've never touched before and want to quickly come up to speed on how the people using it most are organizing those projects.) * Search [NPM](https://www.npmjs.com) for keywords like "scaffold" and "generator" to discover projects that may provide inspiration. * Look at projects on GitHub to see how people are ordering things. (Just be aware that there can be several things generated by a build system that don't get committed in to the main repository.) * Edit: /u/GuerrillaRobot mentioned Todo MVC. That's another good spot to get antiquated with several types of projects and how they could be structured. I would just caution that some of the project examples on there are overly simplified for the goal of being able to compare frameworks easily. Luckily, many of frameworks listed have several examples.
Collaborating would be great but just looking at code isn't a great way to learn. You should definitely do it for specific things you're interested in, but you'll learn best by actually making things.
For everyone's benefit, I wrote a follow-up to this post based on the response by [@gaearon](https://www.reddit.com/r/reactjs/comments/4sxg76/reacts_driven_by_facebook_principle_concerns_me/d5eht0z). https://rebelliard.com/blog/response-to-react-design-principles-interpretation-by-react-members
I wrote a deferred shading implementation in Javascript. [Here it is](http://mikolalysenko.github.io/regl/www/gallery/deferred_shading.js.html).(note that you need at least a mid-range graphics card for a smooth framerate) It was written in the upcoming WebGL framework [regl](https://github.com/mikolalysenko/regl), and the source code can be found [here](https://github.com/mikolalysenko/regl/blob/gh-pages/example/deferred_shading.js). As can be observed, it is not awfully hard to implement deferred shading in regl. At least compared with raw WebGL. 
On the topic of learning, none has to be strictly exclusionary of the others. Lot's of people like to learn by example, reading code, watching somebody talk through code on YouTube, or reviewing books. Others find that sort of approach too daunting. (I have trouble learning by book.) Personally, I've found that sitting down and discussing concepts or reviewing code with other developers can also be very insightful, but sometimes best when coupled with other learning approaches. This is also dependent on having people around to talk shop with, which not everyone does. Learning by doing, building, and tinkering is also very valid (and necessary if you ever want to get anything built. :P ) There's also not always a strict demarcation of "learning" versus "working." Simply writing code for yourself or professionally is likely to leave you asking questions and discovering new patterns through your career. You probably already have at least idea of how what learning works best for you. But, I would recommend giving any approach a try and seeing if it's helpful in combination with what your already doing.
Hello, I am the author. For this demo, you need at least a mid-range graphics card for a smooth framerate. The demo was written in the upcoming WebGL framework [regl](https://github.com/mikolalysenko/regl), and the source code can be found [here](https://github.com/mikolalysenko/regl/blob/gh-pages/example/deferred_shading.js). As can be observed from the code, it is not awfully hard to implement deferred shading in regl. At least compared with raw WebGL.
Dan Abramov is awesome.
The point is not just about indenting, but how one handles it.
For one thing, borderColor is not valid - try "border-color". The other comments are also correct that CSS is a better solution, assuming you are looking for it to be red when hovering over the element. Because the code you are writing will turn it red when you mouse over, and leave it red forever.
I wrote a small Angular2-based environment for building WebVR apps with Mozilla's A-Frame: https://github.com/brakmic/Angular_VRDemo Here's a live demo: http://brakmic.com/demos/vrdemo/
I like that this boilerplate is pretty minimal, but I can't help but feel bootstrap doesn't belong in there. Mobx looks interesting though.
Ah, I took the idea from a page I saw yesterday where the page's background was made entirely of this animation. So the background was white with little things floating around. It kept the content on the page still usable so that was the idea.
Hey, everyone. I would like to share with you a new free website that will keep you update-to-date with the latest learning resources on web development. https://www.hotjs.net/
I finished a react project last week to help me find people to refer at my company in Chicago! Http://www.referus.online At the same time, i put together a small starter kit with how my company starts projects (they have to scale really well) https://github.com/ozymandias547/webpack-starter-kit
If you care about performance, which you should, then knowing what happens underneath jQuery can help you prevent bad practices like causing reflows, not cleaning up event listeners, etc. It's not jQuery in particular that is bad, it's just that you should be aware of what DOM manipulation is being abstracted away from you by the library that you are using.
Always interested in seeing webgl things. Just a few comments: I find state management fairly easy with three.js since it manages the scene for you. I'm unsure of the usefulness of nested arrays. Building geometry out of arrays is a pretty low level chore, and if you skip the nested-&gt;flat step you can avoid duplicating the buffers. I generally use comments and spacing to organize flat arrays in my code. Can you do instanced arrays with this stack? AFAIK this is something [stack.gl is missing](https://github.com/stackgl/contributing/issues/32). Actually it looks like you're mentioned in that thread, lol. Otherwise, as a low-level stack to make state management more functional, it looks good! I will say that despite its monolithic design and some OOP conventions I'm not a fan of, three.js is still way too useful for me to consider anything else for my own apps. And the type definitions. Really a killer feature for me as I use TypeScript. BTW MS Edge doesn't support WEBGL_draw_buffers yet. :(
As always, it depends on the business case for your application. If you're writing a website for a local restaurant that will see at most 100 page views in an hour, the expedience of getting the job done with jQuery far outweighs the small performance benefit you could gain by writing everything yourself and understanding how all the back-end code works. On the other hand if you're writing a site that gets a million hits a second, then you need to dive into the nitty gritty and understand everything. But how many of us are really writing the next Twitter? We would all like to think we are but very few of us actually are. And even if you are writing the next Twitter, it's more important to get *something* out the door and get it into the hands of users than it is to optimize everything about it before anyone's using it. You need feedback from real users to identify the areas that need optimization the most. Don't engage in the cardinal sin of premature optimization. If you're a beginner it's fine to start out with small projects and just learn what you need to get by. As your projects get bigger and more performance-intensive you can learn more in-depth details.
OP's source formatted: # Parabola function pbfunction &lt;- function(x, top_x, top_y, orig_x=0, orig_y=0, slope=0, rtail=0) { top_x = top_x-orig_x top_y = top_y-orig_y # Shift origin to the right (positive orig_x) or left (negative orig_x) x = x-orig_x # Create an asymetry # The right tail can be longer (rtail &gt; 0) if (any(x&gt;top_x)) { x[x&gt;top_x] = sapply(x[x&gt;top_x], function(x) x - rtail*(x-top_x) ) } # Basic parabola: # This parabola always goes through the origin. # It is defined in terms of the x and y coordinates (top_x and top_y) # of the TOP of the parabola. y = -(top_y/top_x\^2)*(x\^2)+2*(top_y/top_x)*x # Make the slope of the parabola steeper (0 &gt; slope &gt;= 1) y = y + slope*abs(top_y - y)*((top_x-abs(top_x-x))/top_x)\^(1-slope) # Shift origin up (positive orig_y) or down (negative orig_y) y = y+orig_y return(y) }
You learn by doing what's best for you.
The guy mentioned in that thread, [Mikola Lysenko](https://github.com/mikolalysenko), who wrote most of regl, is not me. [I](https://github.com/Erkaman) am just a contributor to regl who joined recently. But yeah, we [do actually support instanced arrays](https://github.com/mikolalysenko/regl/blob/gh-pages/API.md#drawing). Although we haven't tested the feature very much yet, so it may or may not work for you. About three.js, I don't think three.js supports deferred shading, does it? An advantage of regl is that it's fairly easy to implement deferred shading from scratch in it.
Ah, I guess I should have explained. Which makes me realize I should explain on the site as well. This is a planet/gravity simulator. Should I put that info on the site?
Looks like it was removed from three, but I likely wouldn't use it personally until the feature has more complete browser support.
&gt; they just want to randomly set some globals before including that ad script from Amazon true, but I puposefully didn't bother addressing the [DRY](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself) part, because the basic knowledge of "you can't stick HTML inside of javascript" isn't even there. probably worth addressing it though, OP should learn that early on.
Can you ELI5 what deferred shading is? I'm on mobile with 12% battery so I'm scared to click any of your links😬
Yes, I don't know what the equivalent of the if any is in JS.
Sure. You could take it in the direction of an incremental game too, where the objective is to make a Gigantor Planet and there are visualisations that allow you to see your progress, etc. Things that can be done abound.
&gt; Don't engage in the cardinal sin of premature optimization. Exactly. If you know jquery, roll code out! And if you can get a grasp of jquery then straight up dom manipulation is just the same. It's all javascript in the end.
What's the advantage of this over something more complete like Ramda or Lodash?
Cherry picking features.
Nobody will read it. Nobody reads text ever ever. It just has to be intuitive!
Honestly, your feedback on the game is likely the best I've received. I love the idea of starting with a simulation running. I always thought about people playing this game knowing at least that it is a gravity simulator, now I feel dumb for assuming that XD I thought about adding achievements to the game to teach players how to use things, or what they do. Something like `Place a planet! Hint: Click and drag` or `Put a planet in a perfectly circular orbit! Hint: shift+click on a planet, then click on a clear place, and drag to the green dot, then let go` I like your idea about the radio button thing. I don't want to take up a ton of space, but I could have it show you which mode you're currently on like it does now, but when you hover over that icon, a popup could appear to show you the other options.
in a somewhat similar vein, using Proxy and WeakMap allows to build bridges to other environments that don't suck. For example, it would have been really handy to have those features around to build a fairly complete and transparent bridge between Flash and javascript. Flash had both those features since they appeared in ES4, but questionable things had to be done to mimic them on the JS side. Until now. Except now nobody cares about bridging code with Flash anymore. Ah well. 
Here's an example index.html with the Firebase config object: https://github.com/gordonmzhu/angular-course-demo-app-v2/blob/master/src/index.html#L27
ng1.x or ng2?
This is the best tl;dr I could make, [original](http://react-etc.net/entry/your-license-to-use-react-js-can-be-revoked-if-you-compete-with-facebook) reduced by 82%. (I'm a bot) ***** &gt; If you do take legal actions or in other ways challenge Facebook, your license to use React is immediately revoked. &gt; Your license is also revoked if you have any legal disputes if you have legal disputes with any other company using React. &gt; Notwithstanding the foregoing, if Facebook or any of itssubsidiaries or corporate affiliates files a lawsuit alleging patentinfringement against you in the first instance, and you respond by filing apatent infringement counterclaim in that lawsuit against that party that isunrelated to the Software, the license granted hereunder will not terminateunder section of this paragraph due to such counterclaim. ***** [**Extended Summary**](http://np.reddit.com/r/autotldr/comments/4t6zrw/your_license_to_use_reactjs_is_revoked_if_you/) | [FAQ](http://np.reddit.com/r/autotldr/comments/31b9fm/faq_autotldr_bot/ "Version 1.6, ~79934 tl;drs so far.") | [Theory](http://np.reddit.com/r/autotldr/comments/31bfht/theory_autotldr_concept/) | [Feedback](http://np.reddit.com/message/compose?to=%23autotldr "PMs and comment replies are read by the bot admin, constructive feedback is welcome.") | *Top* *keywords*: **any**^#1 **Software**^#2 **Facebook**^#3 **React**^#4 **patent**^#5
Also lodash doesn't have any dependencies either
Just a black page for me in Chrome 51 on Windows, bunch of errors in the console. Edit: http://i.imgur.com/5LRcIBx.png Edit 2: Works fine in Firefox.
This looks horrendous imo, I would rather stick to the actual syntax of the language im writing code for rather than learn some new language that transpiles to that language. Its one thing to use a transpiler to get new features before they are included in the language, its a completely different thing to transpile a completely different language entirely though.
I don't see left-pad. Officially useless.
jQuery doesn't have dependencies either ;) I find the whole VanillaJS advertising to be kind of ridiculous and disingenuous. 
JavaScript already have the built-in toUpperCase() function for strings. So why?
I'd rather use JavaScript when I write JavaScript not some completely different language that compiles to JavaScript.
Jesus that looks like absolute shit
CSS also has `text-transform: uppercase` The underlying filter probably does use toUpperCase behind the scenes.... yep https://github.com/angular/angular.js/blob/6280ec89e3884e91da5c30faf8b4a55218bcac8b/src/Angular.js#L125-L126 as for why, it's probably easier to use a pipe than it is to `toUpperCase()` in the view.... Plus you could accidentally call it on an object or something else that doesn't have a `toUpperCase` function -- abstracting this out could provide a bit of safety.
Oh OK I see. Thank you.
I believe some people brought this up at one point, and it was about patent litigation protection (some sort of mutually assured destruction clause)
1920 x 1080
&gt; your license can be revoked Your license to their *patents*, not to the React code. Facebook cannot revoke your "React license" under any circumstances. 
http://react-etc.net/entry/your-license-to-use-react-js-can-be-revoked-if-you-compete-with-facebook
This may be a stupid question... Am I able to use this library with a my webdev project? I notice the demos use syntax such as the `let` keyword. I assume this may be only valuable with Node?
I presume you would say the same about ES5 and ES6? Perhaps Javascript is inherently ugly, but surely LiveScript is more tolerable than ES6?
It's kind of tongue-in-cheek, but it's a reference to the left-pad debacle : http://www.haneycodes.net/npm-left-pad-have-we-forgotten-how-to-program/ 
Honestly, maybe it's just because I'm familiar with it, but the pure JS version looks way shorter and more readable to me. 
Coincidentally, I just got done mocking that article over [here](https://www.reddit.com/r/javascript/comments/4t6xz4/your_license_to_use_reactjs_is_revoked_if_you/d5f6234?context=3) about twenty minutes ago. It's utter nonsense: &gt; Because of the patent clause you are not allowed to do anything that constitutes as competing with Facebook. If you do take legal actions or in other ways challenge Facebook, your license to use React is immediately revoked. No part of that is correct, or even *sort* of correct, and it disagrees sharply with the actual text of the patent grant included in the post. Not sure if the author is trolling or an idiot, but one way or another... &gt; This is the reason why both Google and Microsoft employees are not allowed to use React.js in their work. Citation very much needed, because as far as I know this is untrue. And from a [recent comment](https://news.ycombinator.com/item?id=12108273) by a React core dev: &gt; The author's claim that Google and Microsoft employees are unable to use React is false. I know there are teams at both companies using React and React Native. Edit: The [entire HNews thread](https://news.ycombinator.com/item?id=12108158) is interesting.
let is part of javascript. im sure someone else can point this out but i think it might be from es6 so im not sure how compatible it is with older browsers. Take this as a grain of salt though, im not 100% sure it is part of es6 or not.
So you don't use ES6? This post was more targeted towards people who write ES6.
Correct me if I am wrong. async-csp is not as "delcarative" as js-csp. In async-csp approach `await ch.put(xxx)`, the `await` just wait the promise returned by `ch.put(xxx)` to be resolved. The promise is created immediately when this code snippet is called. However, in js-csp, `yield csp.put(ch, xxx)`. The `csp.put(ch, xxx)` just returns an dumb instruction that is not executed immediately. Well, the pro of js-csp is that it is easy to be TDD. 
Possibly because, like CoffeeScript, it's a purely syntactic upgrade* that doesn't change the semantics of the language. If you're going to transpile you might as well go for something like TypeScript, Elm or PureScript which bring benefits other than removing braces. *and that is arguable
To be fair, it was a trivial example. Of course, you could achieve the same thing by using a single for loop, and some people might find that to be even more readable. But the LiveScript syntax really shines when you write in a more functional style, which means you'll be writing copious amounts of nested function calls and chains. If you don't write in a functional style, there is no particular benefit of LiveScript. This post was aimed at people who use ES6.
It just looks very bad / unpleasant IMO, I do not think I am alone in this opinion either. it is not javascript without braces, parenthesis, and semicolons up-case-name = (.name .= to-upper-case!) has parenthesis, and doesn't resemble anything close to javascript beyond = 
You can also do it without arrow functions, namely, function(data){ // codez }.bind(this) Of course since you are using es6 arrow functions might be more succint
not that I am aware of, then again, I am not really big on games. I think that the only reason javascript is typically even considered with regard to games is for browser based games, because there are much more capable and performent languages for graphics based programming when it is not limited to running in the browser. Languages that can fully leverage a computer's hardware, not just a single thread on the cpu. I think this is a case of "the right tool for the right job" , and javascript isnt the right tool for the job of high performance games that leverage the computers hardware fully.
Can you export it to 4k by chance? 
The space is **before** the parentheses, not inside it. But it's not the cause of the problem. 
&gt; The license granted hereunder Isn't **hereunder** the React license, not their patents?
Isn't ng click angular 1?
Yeah, that's probably why one doesn't exist. Still, I was hoping someone created something, even if less performant. I guess there's always electron...
here you go http://imgur.com/SQuuZhg
Absolute Madman &lt;3 Do VS Code next.
I have 4 gigs I use LXDE on Debian 8
Odd it must be on my end then, can you see if [the one I made](http://360mediahub.com/demo/image-hover-zoom.html) is bad for cpu usage? 
if he's using javascript then he can use ES6. ES6 is javascript...
It's not more readable if most new team members need to spend costly time to learn the syntax.
I wonder if I have to edit the sources list and add it or something, tried to install firefox/firefox-esr "Unable to lopcate package/no candidate"
Yeah an in browser game can only do so much. I'm a beginner programmer though, so if you know something I can do to speed things up, I'm always open for suggestions
What if they first get involved in a patent litigation because you started a competition and you respond to it? See [my comment](https://www.reddit.com/r/javascript/comments/4t6xz4/your_license_to_use_reactjs_is_revoked_if_you/d5f8ono).
He might not be using a transpiler. Significant amounts of ES6 is natively supported in latest browsers.
... Yes I can https://imgur.com/g05Oha4
It's nice that you personally find livscript to look syntactically nicer. But do not presume what everyone else personally finds syntactically nicer. Unless you have some kind of study to back up your claims, you are essentially arguing that Country music is better than Dubstep because "dubstep is inherently ulgy." That's the problem: some of us hate Country as much as you like it. And some of us hate both.
&lt;3 Enjoy your gold. I think the VS Code colorcode is #006EC5 though. But beggars can't be choosers.
...no, that's nonsense. "Hereunder" means "as provided for under the terms of this document", and the document it is contained in is the **PATENT GRANT**, not the BSD license. This isn't complex, and it's not ambiguous; it just doesn't say that.
wow, thanks ! gradient and solid with #006EC5 : http://imgur.com/a/Ot05f Hopefully one of these are more like what you wanted
yeah I could, but do you want just the s or some more fancy thing ?
There is no equivalent of `any()` in JS, but you can implement one. But for that, `x` and/or `top_x` have to be an array. I can't really tell if `x` or `top_x` hold multiple values in your code. 
This is why I hate this
The argument is plausible, yes. But again, it hasn't been tested in court, and I'm not sure I'd want to bet my company on getting a court to sign off it when there's a team of BigCorp lawyers on the other side. Would you rather have an explicit grant that basically gives you what you need and will certainly hold up in court, or an implicit grant that is super broad but only has a 2/3 chance (or whatever) of being found to exist? Plus, there's a further headache with sublicensability of implicit patent grants; it's quite possible that implicit patent grants, if they exist, only apply if you get the software directly from the original author, which means if you got it via a package manager like npm, or included in another package, you might not have the implicit patent grant at all. (Or not; nobody knows.) Plus, there's *another* theory that says that implicit grants do exist, but that explicit grants don't replace them, so even if the explicit grant is terminated the implicit grant is not. After all, the entire argument is that the BSD license gives you a grant to use the software; if that includes the patents you need to use the software, why would that terminate just because some other document that provides a different grant terminates? My personal feeling? Just don't sue Facebook about patents and none of this even matters. :)
That awesome, and it's nice that you had something to do while waiting for atom to boot up. 
[removed]
Here is my take: JQuery is all about ui logic. But there is also business logic, and transportation logic (Ajax). Keep them separate. You make controllers to glue those parts together. The worst JQuery code I've seen is a big rats nest of logic with all of those mixed up together.
&gt; what will happen if you respond with a patent infringement counterclaim that is related to software? Yes, if you sue Facebook arguing that *you have a patent on React*, then the license they have granted to you for the patents they have on React will terminate. ...is that a serious concern for you? Do you have any patents on the technology used in React? :)
ouch
&gt; if you sue Facebook arguing that you have a patent on React It says just "Software", not specifically React. Which part does it make it clear that it is about React? From how it is written is it possible for someone to use this as a weapon to terminate the license if someone responds to any software-related patent claim started from Facebook? It is just that there seems to be a hole for exploitation there. &gt; ...is that a serious concern for you? Do you have any patents on the technology used in React? :) I have no concern with this. I haven't even used React yet. Can't I just raise the conversation for the sake of discussion? ¬¬
Thanks, I missed this part: &gt; "Software" means the React software distributed by Facebook, Inc.
When I first read this I thought it was some kind of combination of Javascript and Rust...
In either case, yes, the parse ignores white spaces.
While yours uses more resources, it's still not a problem for me. I do think it's something to do with your setup.
Ah, this uses webgl to do some awesome animation. Once you have an understanding of 2d animation, you could checkout Three.js! It is a library for using webgl :D
This should be all you need to install firefox: `sudo apt-get update` `sudo apt-get install firefox` For ESR, it should be: `sudo apt-get update` `sudo apt-get install firefox-esr` If those don't work, you can do a good 'ol search: `apt-cache search firefox`
credit to this guy for the icon that I traced from http://matthewjstrauss.com/ here it is : http://imgur.com/vP8oAlU
Absolutely 100% no. Es6 is great, this livescript shit looks like some Ruby programmer wanted to sprinkle their delightful syntax onto js.
You should check out unreal.js you can use js and npm modules in unreal engine. It's being developed by someone at ncsoft.
I'm not sure how that would work, lets say I'm developing a plugin, that for some reason needs to track objects. If I just modify the /root environment (the method shown in video), neither users nor I need to care about how they use my plugin/library. I wonder how I would "enforce" the users to use proxy, I could, but that kind of is less flexible. Maybe I'm missing something here.
They do not include the license header in the bundle, but it says in the code http://errors.angularjs.org/1.5.8-local+sha.1778d34/ So I'd say it's angular 1.5.8.
I realize that the part where you define the npm build script is not very clear in the article, it's not written that it must be set in the package.json I'm correcting it right now, sorry for the troubles you went through !
`fetch` doesn't reject on a 404, it only rejects if for some reason the request fails altogether, like a bad URL, some sort of network error, no connectivity, etc. My reasoning is that it's a different class of error to any response that can carry data, e.g. a 404, 200, etc. and it's not the type of thing I want to handle every time I call my wrapper function. Like maybe I'll retry the request a few times (instead of just logging it), but I want all that to happen in `fetchData` without having to worry about it outside that. But yeah, your first paragraph is basically correct.
Am I the only one that finds it a little weird to be *that* in love with your text editor?
Seems like keeping them in their own files would be best. Using Babel and ES6 modules (or any other way to import/merge files) in your build step makes it easy. // phrases.js export default [ "First phrase", "Second phrase", ... "Last phrase" ]; // wherever you need to use phrases import phrases from "phrases.js"; console.log(phrases[0]); // "First phrase" You could also store it as plaintext, with [template literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) (so don't go and use `${}` or ` in your strings without escaping them): // phrases.js const phrases = ` This is the first phrase Second phrase goes here Third phrase ... Last phrase at the end `; const outp = phrases.match(/(\n|^)[^\n]+/g).map(v =&gt; v.trim()).filter(v =&gt; v); export default outp;
As far as I know Math.random() does a poor job at being random itself.
Ripping it out is cake (kill the lines in package.json and remove all the composes lines from the css files). I started to modify it for materialize too, although will def be more effort.
That background loaded way too fast to be Atom
jQuery and bad development aren't synonymous. Maybe one day you will have the skill to write code as beautiful as its source. It's an abstraction. The quality of your code depends on you.
Import isn't fully defined yet. No browser implements it. If you want it, you'll need to set up a transcompiler chain, like [babel](https://babeljs.io/)
/u/_princesscode_ if you want you can clean your code up even more, you can update .then(data =&gt; { this.setState({ bio: data.bio, repos: data.repos }); }); to .then(({ bio, repos }) =&gt; this.setState({ bio, repos })); In addition to arrow functions, this also takes advantage of [destructuring](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) for your arguments and it also uses the new object literal syntax in setState(). I can't remember what the new object literal syntax is called but in ES6 you can now shorten `{ bio: bio, repos: repos }` to `{ bio, repos }`. Edit: You can also update function getRepos(username) { return axios.get(`https://api.github.com/users/${username}/repos`); } function getUserInfo(username) { return axios.get(`https://api.github.com/users/${username}`); } const helpers = { getGithubInfo: function (username) { return axios.all([getRepos(username), getUserInfo(username)]) .then(function (arr) { return { repos: arr[0].data, bio: arr[1].data }; }); } }; to const getRepos = (username) =&gt; axios.get(`https://api.github.com/users/${username}/repos`); const getUserInfo = (username) =&gt; axios.get(`https://api.github.com/users/${username}`); const helpers = { getGithubInfo: (username) =&gt; axios.all([getRepos(username), getUserInfo(username)]) .then(([repos, bio]) =&gt; { repos, bio }) } ES6 is awesome :)
Alternatively, http://rollupjs.org/ has better semantics and produces smaller builds. It only handles module resolution and bundling, the other ES6 constructs will be preserved as is.
Me too. For a few seconds, I was hoping for a Rust-to-JavaScript transpiler. 
Saying this is a web server is misleading. It's just another bundler that offers optional middleware for Express.
Rollup is the bundler, Babel is the transpiler. Typically, if you use Rollup you're also using its Babel plugin.
yea, birjolaxes solution is best imo, csv and alternatives: 1. if you want to use one string per line (newline \n will seperate each one) create a .txt file 2. if you want to use commas for each one, .csv if you want to use a comma and edit it in excel (see note on csv) 3. w/ node is: do `var mylist1 = require('foo.txt').split('\n')` or if your using csv `require('foo.csv').split(',')` 4. w/ vanilla javascript its not exactly easy, firefox has filereader apis, but often the easiest solution is to do `var strings = " \n`, then each of your strings, one per line. then at the end put `";` and save it as a .js file, then import it and `strings.split` . * you could write a build script to do this (so it rebuilds the js file every time you save). note on csv: (Csv is just commas, `string1,string2` so its easy, `textcontents.split(",")`.... but new excel uses XML... so its better to save as "csv type", but even sometimes you get extra quotes, `"string 1",string2`, so you may have to tweak it alternatively you could use phpmyadmin and mysql its kind of ez. or google may have a spreadsheet api (but probably not will host your data for you)... or for hosted stuff check into firebase, or someone probably has a firebase+api+admin app for free maybe write a build script, if you save as csv converting it to js is as easy as `return "var strings1=\""+filecontents+"\";"` (then include it as .js `:O`)
I like atom + plugins. Been checking out ternjs and it seems to have been an improvement over the other autocomplete stuff I was using before
The same one recommended the last 127 times this was asked on reddit.
We are not talking about "developer" but about "beginners" If you start from a weakly typed language and then you go to Java/C++ ecc.. it will be a mess If you start from Java/C++, other languages are almost all easy to learn
Visual Studio Code &amp; Webstorm
&gt; they always start off strong, but slowley fades out Exactly. That's why we should shoot it down from the very start to avoid even the possibility of disappointment. Excellent idea.
Yes, that is in w3c I believe.
I created components for Materialize.css with Vuejs 2.0. https://github.com/johnleider/vue-materials
Webstorm hands down for a complete package although atom is huge with the startup kids because it's free and trendy. Jetbrains IDEs are largely a rip off imo as they market towards the enterprise, so I'd recommend pirating it ( get the 2016 version ).
So I could write this nice looking Javascript if I use a tool like babel, and manage a few dependencies?
Thanks for pointing that out. I updated my post
Yep.
https://github.com/whatwg/loader/blob/master/README.md &gt; Section 15.2 of the ES2015 specification describes the syntax for the new import and export declarations, but does not specify how modules are to be loaded. This repository consolidates work on the ECMAScript module loadings semantics with the integration points of Web browsers, as well as Node.js.
This should have more up votes. With system js you don't have to use any transpilers, just include the library and you can import stuff in the browser (although to run in a production environment it is recommended to transpile/build for performance reasons)
&gt; (This is a work-in-progress, feel free to read and even submit an edit, but do not post on Reddit or Hacker News, thank you.)
That is a GREAT write-up, and some excellent bits of advice. Also, thanks for the mention of my links list, and this post will probably be added there soon :)
Wow thank you! "GREAT write-up" means a lot coming from you. :)
fwiw, I have in the past done a server side include which can walk the dependency path (in jsp/php/asp/cgi) or work from a dependency list. The list isn't really much improvement over a collection of &lt;src&gt; tags though. And sorting out dependencies at runtime is more a development thing than a production thing. but I've pretty much settled on typescript modules these days and bundling with a barebones html "bootloader" &lt;src&gt; tag for the bundle.
Thanks for you help. Much appreciated. 
Use timeout() and load the script into the page manually. jQuery can do this with $.getScript()
The only "bad" choice in your stack proposal is Mongo. 
Oh I am very sorry for that. Thanks for the advice!
TypeScript is a superset of JavaScript. So anything you can do in JavaScript can be done in TypeScript (note: except some newer features like Object Spread "...", which is super handy when using Redux. However, you can easily live without it when you've also got Immutable.js in your stack because you're using merge, mergeDeep, etc instead). TypeScript plus Node.js is great for services. I've used that combo on a few projects with great success. BUT... As soon as you bring in React, everything changes. This is because React is just a view layer and you'll need to add dozens of other little libraries. Most of those libraries will have TypeScript definitions (.d.ts files). But use anything obscure and you'll likely need to write your own definitions. And what's even more of a pain is when the libraries you use are updated with new features but your definition files lag behind. Plus, if you're using Redux then you'll have mostly stateless React components and you'll be passing in parameters via destructuring... I don't think there's a way to specify types when destructuring (I could be wrong here... but if not, then your components won't have or need type information so TypeScript is overkill -- extra processing for nothing) If you've got proper unit test coverage, then TypeScript doesn't add much in terms of safety (although Intellisense and refactoring support are still pretty valuable). I've just started a big web project and have decided to go with Babel and will look at using Flow instead of TypeScript.
Hi /u/Tubciu, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Please use the [Showoff Saturday](https://www.reddit.com/r/javascript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AShowoff%2BSaturday) posts for these types of submissions.
I've never seen a form used that way. Just make a button that has a click listener. no form needed.
When choosing an SPA framework, the speed isn't what people look at as they are all going to be 'slow' compared to vanilla js. You need to look at what you're going to need to develop your app and decide from there. You might not even need a framework (but forced to use one?...). These franeworks are used to save time but if you spend that time trying to figure out what's the 'fastest' and 'best' then you're negating the whole point. If you are creating a hybrid mobile app then it will always be comparatively slow. 
&gt; I don't think there's a way to specify types when destructuring There is but it's probably the most awkward, verbose thing about TS syntax.
yeah, `forEach` should really only be used when you're intentionally working with side effects, otherwise `map` all the things
Yeah but how? Those were likely not running on a canvas element in a browser.
You have several problems. * It should be `parseFloat` not `parsefloat` (the F is upper case) * The lines where you try to update the display and alert are only being invoked when the script loads, and have an error because `total` is not defined. Your `total` variable is scoped to the `calc` function. * When you click the submit button it's going to try to submit the form as long as the return value of `calc` is truthy. You probably don't want to submit a form since you don't have a back end. You should learn to use the built-in browser developer tools. The console will show you errors to help you debug problems.
With the second solution, what do you do if components share actions/reducers? I.e. pretty much any real world React project? Or am I missing something? Components can be decoupled from your app by storing your container separately. So the component itself has no concept of Redux - it's just rendering using props and calling callbacks on events. The container handles passing in state and dispatching actions. Although I don't bother with having a separate container directory - I'm usually fine with connecting them in the same file, as they're (mostly) specific to the particular app. It's easy to refactor if you need to later.
Sorry, but that's pretty basic stuff you should be able to figure out on your own. setTimeout( function () { $.getScript(urlOfScript) }, 4500)
You should go with whatever directory structure works best for you. There is no one size fits all. To be honest, I don't particularly like the way my app is structured. But I haven't found a better pattern yet. As far as this structure: components myComponent myComponent.js reducer.js actions.js whatHaveYou.js index.js (export import all) One problem I see is that the shape of your state tree and the shape of your components are forced to be tightly coupled. This is because your reducers and components are right next to each other. Sometimes your state doesn't look like your components. Sometimes there are components that are completely different but both need to use the same piece of state. E.g. you have an OrderList page that sorts orders according to `sortBy`. And you have a Settings page. One section in Settings lets users customize `sortBy`. https://twitter.com/dan_abramov/status/701767939633057793
Thank you!
&lt;3 Thanks!
Haha. What specific part helped you?
I actually have several demos which I'll be uploading to Github (as separate pages) soon but how would you recommend doing a GIF? It'd be hard to demonstrate in a gif that I just pressed a key or clicked a mouse, haha =) BTW: I just pushed 1.1.7.
It's worth noting that in webpack2, resolve.modulesDirectories and resolve.root will be combined into resolve.modules.
Reginald Braithwaite gave a great talk on this: [The Not-So-Big Software Design](https://www.youtube.com/watch?v=arsK-CN5YDg).
TypeScript will also create errors where there are none. e.g. supposing you want to attach a session object to a request in Express. TypeScript complains about this: req.session = session; The solution is a little ugly: (&lt;any&gt;req).session = session; and you'll need to use even uglier syntax when you want to access it: const userId = (&lt;MySession&gt;(&lt;any&gt;req).session).userId; (although destructuring can clean that up a little).
Take a look at Vuejs.org. Somewhere between Angular and React. Simple API, easy to understand. Small download size. Renders quickly.
With restrictions like this, along with the massive swing of JS performance on Android 2.3+ (iOS is *quite* good), you'll be hard pressed to find any singular framework for mobile web -- it's going to be more of a case of "which one sucks the least".
TypeScript definitely isn't perfect yet but its getting better 
I second this. If you're focused on trying to learn other aspects of the stack, then stick with mongo if you feel it's easier for you or you are already are familiar with it. Otherwise, consider going with something that's relational like postgres, which also has some great JSON/document storage capabilities when you need them.
Tacking a property on to an express request object seems fishy to me anyway. I think the compiler is right to warn you there. Note that if you use the express-session module defs, it adds the session property to the types.
then just write a module than handles the database access, and reuse the module in both the CLI and the GUI.
If money is at all a factor, go with Typescript. All of the thousands of the small type errors that your team will generate while developing shift from being run-time errors to compile errors (or, with an IDE, red squiggle errors). The sooner you catch an error, the faster it can be fixed, and time is money. As for small, obscure libraries without type definitions, remember you can always type-down those. At that point you're in the exact same boat as you would be when using plain ES6. Writing your own definitions isn't required (contrary to what you may hear), but if you use a library often enough it is well worth it.
Don't use document.write. It is a mistake from the 90's early before there was a DOM standard. If you defer a document.write it will overwrite your entire document. If you were working with me and I saw this code I would embarrass you in public. I would honestly make you cry and want to quit. Also, beautify your code so that it is easier to read: * http://prettydiff.com/?m=beautify * http://jsbeautifier.org/
Emacs. Make the dive, you'll be grateful. Watch this for an example: https://youtu.be/qwtVtcQQfqc 
This is negative, unconstructive criticism. If you think document.write is bad, why don't you offer an alternative?
&gt; "Its okay to connect many components" - what's wrong with stuffing my data into a connected component? I feel like it gives a domain to my components that live under my container, and it feels right to give X part of my state to XContainer. Maybe I'm misunderstanding something? What has your experience with connected containers been? There is nothing wrong with stuffing your data in a connected component. If that approach works for your app, then why not. ¯\\_(ツ)_/¯ Personally, I sometimes I make one big container for parts of the app, and sometimes I don't. It really depends on the complexity/performance/etc.
Ahh, I see. Thanks!
agreed and +1 for postgres
This is kind of like ducks https://github.com/erikras/ducks-modular-redux
Hm, seems to be kinda the opposite of it, but the same core idea I suppose.
With serve side rendering? 
https://github.com/keycastr/keycastr should help you
Great blogpost, man! I was just at a react and redux talk with one of the co-founders of Redux. One of the big things he pointed out was that redux shouldn't be used with all applications. He pointed out that in-component state is fine in a lot of applications, and that redux should be used selectively. I think my introduction to react was that "It's the V in MVC", and that I was required to have some external libraries like redux to actually get the app working. I was obviously wrong.
Lol people jumping on JDD for "shaming" the Just guy. Can't criticize anyone now apparently. Why would he not highlight how much better tested, performant, and useful his own library is?
Instead of insulting the syntax, I can actually answer your question. For context, I work at a medium-sized company with just around 2 million lines of code in the codebase and I'm responsible for the technology choices, among other things. When you're looking at languages to choose, it's generally best to go for something that's: * Easy to learn * Has a well-established community * Is well documented Now, it isn't that LiveScript isn't any of these things, it's that pure JS beats it in every category. Think of how many people can answer LiveScript questions on Stack Overflow versus just JS! And what are the chances of hiring somebody that knows LS versus JS? Of course we do have many transpiled languages, which are good for many purposes like using ES6 syntax and bundling. In my opinion, something like TypeScript is the winner here, simply because you can forego the TS syntax at any point and write the regular JS that you're familiar with. This reduces time spent looking things up, as well as the possibility of bugs. Plus if you hire somebody, you don't need them to have _ever_ used it before! They can sit down and start writing.
I have a mysql database set up on my computer. I would like a client running on my computer that will right to the database. I have something that reads the data but I dont know how to get it to insert into tables. It's running in a browser so I'm not sure how I can connect it to SQL. https://gist.github.com/khumps/642432ed8f9d8a68adab98dc6238b20e
How do you want to do that? Javascript can't communicate with MySQL or any db directly. You need a back-end to handle the db stuff. But it shouldn't be too hard. If you decide to use node for back-end, [this](http://www.hacksparrow.com/using-mysql-with-node-js.html) is all you need.
My issue was running a websocket client on node.js if I run my current code in node it won't find websocket edit: I hate spellcheck
Personal preference is `exports.foo = function() {...` It's obvious, simple, and is basically the same as the equivalent ES6 syntax. (`export function foo() {...`) If you ever switch to something like TypeScript or ES6, the language itself conveniently encourages that predictable, simple style. I also avoid `module.exports = function()` since it's not compatible with ES6's "named exports" idea. Might as well do named exports for everything. (`exports.foo = function()` or `exports.default = function()`) EDIT: accidentally ended a sentence early
Could you post the code?
ah so Game server &gt; my node server &gt; my node web client?
In the JavaScript world the tooling is done by Node, outside the editor. From transpiling to hot reload and everything that's in between. Debugging is usually done in Chrome's devtools, which are unmatched. If an editor tries to do too much it is not a good thing as it gets effectively in Nodes and your way. It should be focused on project integration via package.json, git integration, editing of course, and plugins for everything might need: linting, enforcing style guidelines, understanding babel, framework integration, single file components, and so on. This is the reason people have started to move away from Webstorm and prefer simpler editors like Atom, which have a powerful community instead of feature overload. Especially Atom has 0-day support for every framework you will come across. 
alright Ill try it.
With es6 you could x = [1,2,3] =&gt; reverse =&gt; head 
so I got the server running but the client isn't seeing it. [updated gist](https://gist.github.com/khumps/642432ed8f9d8a68adab98dc6238b20e) error: request can not load localhost:7000 Edit: netstat confirms that it is indeed listening on 7000 
I would definitely go for ES6, the only way you can be forward-compatible. Any decent editor supports linting and will warn you for almost all the things that TypeScript will also warn you about, given you spend some time setting up a strict linting file. Also, TypeScript is statically typed, not dynamically typed, the latter being the saner option for web-apps. As a frontend framework i must suggest Vue.js, look at the way singe file components are build, very awesome: http://vuejs.org/guide/application.html#Single-File-Components 
I am currently using Webstorm, but my student license will run out soonish. What exactly did you not like about VSCode? I'm asking because I might try it out as replacement for Webstorm...
Try adding `http://` before the url, but that's probably not what's causing it. Change `dataType` to `jsonp`and see what happens.
yep http:// fixed it immediatly crashes though undefined:1 undefined ^ SyntaxError: Unexpected token u at Object.parse (native) at Server.&lt;anonymous&gt; (D:\Users\user_directory\Documents\PS2Census\server.js:18:24) at emitTwo (events.js:87:13) at Server.emit (events.js:172:7) at HTTPParser.parserOnIncoming [as onIncoming] (_http_server.js:528:12) at HTTPParser.parserOnHeadersComplete (_http_common.js:103:23)
There's also [Bublé](http://buble.surge.sh/) by the Rollup author. Edit, and I just discovered their TypeScript plugins, which can also be used as an alternative ES6 complier (TypeScript being an ES6 superset).
There's an official plugin for CommonJS dependencies, and another one for NPM package support: https://github.com/rollup/rollup-plugin-commonjs https://github.com/rollup/rollup-plugin-node-resolve
It's good stuff! I'm glad to see posts on Redux, and this one has unique insights. I subscribed to Horrible Hacks, and I'm looking forward to more posts! I am really enjoying using Redux with redux-saga and redux-crud-store. I was not aware of reselect or ducks. I'm torn between the appeal of ducks and your warning about scalability. I may try that pattern just to see how it goes.
Hi liranbh, Trying to keep up with the number of JavaScript libraries is indeed difficult even for experienced developers, not to mention when you're trying to learn the ropes. Have you thought about what is it that you want to accomplish in terms of using JavaScript: write a server side application in Node.js or a modern web page that doesn't require page reloads, or maybe a full stack ninja that can navigate both? Both server and front tracks benefit from first learning JavaScript the language. Crockfords JavaScript The Good Parts is a good starting point, but it must to be augmented with knowledge from ES5 and ES6 since the book only covers ES3. TypeScript is worth learning if your background is in typed languages such as Java. JavaScript itself is not typed and TypeScript comes into play by adding compile time checking for "programmer typos". Strong typing also allows you to work easier in large projects across larger teams. However, typing divides opinions and some people like the freedom of not being strongly typed. For Node, the event loop and asynchronicity one of the most important things to learn and understand, more so than in the browser. For UI libraries there isn't really a vendor war going on, but the situation is more like that there are a number of equally largely adopted libraries with a missing clear one winner to choose. Angular and React both accomplish the main goal well: creating JavaScript-driven single page applications that don't require any page reloads. Such page reacts fast to user input and is more user friendly. Angular is currently going over a major overhaul towards version 2.0 including backwards incompatible evolution and the inclusion of TypeScript in the project. This has scared away some people from adopting it. React is suffering a little from not being specific enough that manifests itself in the number of available state management and view component layout libraries. Some people might say that Java developers are flocking towards Angular. There are also smaller libraries such as Ember, Backbone that have gained popularity. For actually learning Node or Angular/React, I've always found best to build a small project around a new technology. So pick a subject you're interested in (tracking personal finance, gym workouts, movie collection) and go for it. Start building the app and when you encounter something you don't know then research until you do. The best way to get gut knowledge versus head knowledge is by doing. Good luck! JavaScript is the language to learn right now so you're on the right track.
If you have a flat(ish) component structure, fewer containers work fine (or not using Redux at all would probably work fine!) But otherwise you end up with components needing to be made aware of props simply because their children (or grandchildren, or great-grandchildren) need those props. Just say you have the following structure, where ComponentA and ComponentD need "store.foo" passed into "propX": &lt;ComponentA propX="&lt;store.foo&gt;"&gt; &lt;ComponentB propX={parent.propX}&gt; &lt;ComponentC propX={parent.propX}&gt; &lt;ComponentD propX={parent.propx}&gt; This is the situation you end up in if you don't use redux at all. Whereas if ComponentA and ComponentD are connected to the store via containers: &lt;ComponentA propX={store.foo}&gt; &lt;ComponentB&gt; &lt;ComponentC&gt; &lt;ComponentD propX={store.foo}&gt; So ComponentB and ComponentC are not cluttered with knowledge about propX. You also might want to set ComponentD's propX to state.foo in some parts, and state.bar in another. So you can create two containers and use them wherever: &lt;div&gt; &lt;ContainerDFoo /&gt; &lt;ContainerDBar /&gt; &lt;/div&gt; So if you re-use a component with certain state from the store, a container means you can re-use it very easily. Otherwise you have multiple parent containers grabbing the same data and passing it down in the same way.
I can't help you if you don't post the code :D
same code with html:// :P
Ok bro, I get it. React is pretty neat. I'm currently writing ember.js apps which are component based ( as of v2 ), come packaged with babel for ES6 support and everything is a ES6 module. I'm not aware of any module hot reload support, but that may just be a ( great ) react feature AFAIK. Webstorm hasn't been too annoying to use and works fine for me after a bit of configuration ( largely just a matter of excluding all the npm and bower modules and build related folders from being indexed ). Now saying all that, I'm curious to try out atom again.
in the gist https://gist.github.com/khumps/642432ed8f9d8a68adab98dc6238b20e
What is not mentioned in this article is that using closures is going to be a performance problem in hot code. Also, by prepending any private properties with some short version of the mixin name, or class name, any name clashes are easily mitigated.
["Considered Harmful" Essays Considered Harmful](http://meyerweb.com/eric/comment/chech.html)
but this is only client, what do you pick up for server?
Yep. However, you don't have to use it for the server-side if you already know another language and are fine with it. Now, when it comes to mobile apps: using JS to create a hybrid app can save costs, but can also have certain drawbacks that you may or may not care about (I wrote about it [here](http://goshakkk.name/cut-mobile-costs/)). If the app doesn't require anything unordinary, it can make sense to go hybrid (hybrid app is essentially a browser JS app wrapped into a native package). If you care to share some details and requirements, maybe I or someone else could comment on whether it's feasible. Otherwise, native app development is an option.
In a real-world redux app, it is inevitable that you will have actions that will need to affect multiple reducers. Smaller example apps aren't complex enough to encounter this, so it can give the false impression that somehow an action "belongs" to a particular reducer. So any attempt to group reducers and actions, or use some kind of generator function to generate an action and reducer pair, will end up hindering you eventually.
even when your license expires you will still be able to use webstorm, you will just have to pay to subscribe to updates in the future.
&gt; Also, I saw that TypeScript is developed my microsoft, that means they are moving from C# to JS on the server? I believe they did it so that Javascript can work better in the front-end with C# in the back-end, given that C# is a typed language. Typescript is still plain Javascript the same as C# is still machine code in the end.
Yes, that's the article I've based my component-folder-has-all version on. I'm currently tasked with doing a PoC so folder structure is not a big issue, but would like to start with the best mindset :)
er yeah i wasn't thinking clearly
Author here: Great question! No, we can’t do a more granular version of concatenative sharing for the general case. The problem is that mixin methods might have their own internal dependencies, like a helper method. If you don’t copy that over, the mixin’s functionality will break. The other side of the dependencies argument is mixins depending upon class methods or other mixin methods. If a class has methods `a`, `b`, and `c`, there is no way to set things up so that a mixin’s method or methods depends upon `a`, but does not share a scope with `b` and `c`. We can’t partially copy the class to limit the exposure of the mixin to the class’s dependencies.
I like the insensitive bottom line up front approach: * Angular - MVC framework. It is based upon directives (custom HTML tags and attributes). It will bloat your code and make accessibility nearly impossible. This kind of thing is really handy if you need architecture out of the box because aliasing and planning are too hard. * React - This is also a framework, but it is quite a bit more intelligent than MVC style frameworks. It allows dynamic HTML template creation via JavaScript that then renders into HTML artifacts with attached associated events/handlers. * TypeScript is a completely different language that is nearly identical to JavaScript, except that it is statically typed with Java/C# style type extensions. Otherwise it is really just JavaScript and compiles down to JavaScript. The benefit is that your code is more free of sloppy stupidity, faster, and easier to debug. The bad thing is that it requires a build process and the defects will appear in the rendered JavaScript code instead of the TypeScript that you are actually writing. * ES6 - Just a version of standard JavaScript. The standard name for the language is ECMAScript. * Node.js - A command line JavaScript compiler. This allows you to run JavaScript outside the browser, and it has a handy API for interacting with the file system, issuing HTTP traffic, and issuing execution of other applications via child processes. It is not a war, because frameworks are optional. You don't have to use any of them.
These are excellent points. I prefer the symbol solution myself over the custom prefix version, as it has some technical benefits for the few cases where we need to do some meta-programing that involves enumerating over an object’s methods. But custom prefixes work, and I may update the post at some point to mention it.
Bitwise operations.
Look into [meteor](https://www.meteor.com/tutorials). It's built on node.js, uses the general npm ecosystem and allows you to plug in angular/react/vue/blaze/whatever as your front end easy as pie. Not only that, it has a build command `meteor build ios android` that will wrap your app in cordova which makes applications that run in web view. This makes it a fantastic learning platform which will allow you to explore a ton of technologies without worrying too much about your build system which is what hangs up a lot of developers. 
I don't think there are any dedicated minifiers that support ES6 yet. You *could* use [the Shift AST family](http://shift-ast.org/) to parse the code and then regenerate it (their code generator does not include unnecesarry whitespace) as they support up to ES2016, but I'm not sure how reliable that is (it should work for most code tho). As a side note, I'm really interested in what application you have for code that is both bandwidth dependent (so it needs minifying) and supports ES6 features.
Did you measure it? You did measure it right? We're not talking about optimization without measurements are we? My bet: unless you do trivial work on the data the async housekeeping won't matter and it all comes down to network and backend performance. If you hyperfocus it will matter but then you look at your whole app again and find something more significant. Like sending less data over the line, chunking &amp; batching your data, using more (or less!) caching etc.
Some great thought here, Joel! With React and JSX, I like where the things are headed. I don't think we're far from having reusable SVG components, allowing to express high-level visualizations pretty easily. Given the tendency... I've also recently experimented with using React to draw to canvas, using an engaging image editor as an example ([demo](http://goshakkk.name/pabla/), [sources](http://github.com/goshakkk/pabla), [post on how it works](http://goshakkk.name/react-custom-renderers/)), and I really love how React provides us a baseline to implement, reason about, and use pieces of UI, regardless of where they render — be it native mobile, terminal, canvas, and more.
You can also try what the "cool" kids call "universal/isomorphic" development
Pabla looks like a very cool project! I'll definitely check it out more after work. &gt; I don't think we're far from having reusable SVG components What's standing in the way?
Well put.
Technically — nothing. I guess it's more of a mindset shift. Like only now people are coming to appreciate reusable UI elements in HTML, but I agree that it'll spread to SVG and all sorts of other components.
Nobody. You can't wrap your head around it. It wraps its head around you.
I don't think you wrap your head around it so much as just throw another project into the mix when you want to pad another buzword on your resume. Maybe it doesn't fit your project's needs exactly, but to be a true Javascript developer you musn't let that stop you. There comes a time when you will eventually have to create your own framework that does 99% of the same things as another one, but you'll need to have at least 15 third party dependencies to make that work. On the bright side, not writing any documentation will save you a ton of time in the short run.
Hint: google parseint or how to convert string to int in javascript. You are correct when you say whatever being entered through console is a string and if you want to do numerical operations on them, convert them to int.
for this specific example, maybe throw var z = x + y; Then alert z instead. However, you are right it's concatenating your string sentence and maths together to form a new string which you then alert. FYI it's easier to use console.log and the developer console to print out messages to test your JS. :)
underscore
I have had literally none of the issues you mentioned. React ES6 Webpack.
Jetbrains IDEs are COMPLETELY worth their money. ESPECIALLY IntelliJ.
If you want to do DSP on an image the only way to do it in JavaScript is via the HTML5 Canvas API. You get can load an image with `var img = new Image(); img.src='image.png';` and then you can copy it to a Canvas element and manipulate the data: http://www.html5canvastutorials.com/advanced/html5-canvas-get-image-data-tutorial/ 
That only works on Macs and I already have HumanInput demos that do essentially the same thing on any given web page (actually, that may be a cool feature to tout =). My question was more in regards to "what makes a good JS lib gif (with no audio)" because that seems like the sort of thing that would need a proper video with audio.
Vital context, right there - we **aren't** talking about JS running in a browser, or on the command-line/as a server using Node. I'm afraid I don't know anything about ImageJ, but I suspect you'll need to investigate the Javascript API it exposes to see how it permits you to load/operate on images. There's nothing specific in the Javascript language that I'm aware of to load images or do bitwise operations on them (because that kind of functionality doesn't make sense everywhere the core language might run, so it would have to be exposed by the runtime the JS is running in - a browser, ImageJ, node.js, etc - not the language itself. At best you might be able to load all the pixel data from an image into a javascript array (and then iterate over the elements of the array manually operating on them one at a time), but if ImageJ doesn't offer an API to make this kind of stuff easy I suspect you'll have to write yourself some primitive operations (like the example above) yourself.
Not at all. ASP/PHP are languages often used to dynamically build HTML on a server. Node.js is just a command line JavaScript runtime. You can use it as a HTTP server, or other completely unrelated things. Most commonly now Node is run locally for build tasks, unit tests, fetching dependencies, and such.
Yep. Copy/pasted too much. Edited.
ES6 isn't supported across all the major browsers yet (particularly mobile web-browsers - they're still at ES5). ES6 works well with Node.js though, and I think it's got some good features and would advocate using it if you are sure that your environment supports it.
PHP is a language that runs as a service. Yes, you can run that language anywhere, but it is almost universally run coupled with a web service on a web server. Node is not a language. This is about as accurate when people confuse JavaScript for Java Script.
React isn't a framework, it's a library.
totally understand. You've probably noticed it already, but there's a new thread in this sub-reddit with a presentation by Rob Eisenberg on comparing 6 popular JS frameworks. Might be worth checking out for your decision making.
:) Thank you!
* `es6`: the changes in javascript since `es5`, the last version, from 2009. frustratingly, `es6` is sometimes called `es2015`, because at the last minute they renamed it to try to get us into a habit of being okay with annual changes, which i think is smart. * `react`: a user interface library made by instagram nee facebook, first made public in 2014. * `typescript`: a type enforcement system for javascript, released by Microsoft in 2012. * `nodejs`: a serverside hosting of javascript, plus some standard libraries for things like filesystem manipulation and whatever, released by Ryan Dahl in 2009
Wow great solution, I figured I had to just debounce every single function on an input
Just send it gzipped to the client (with the matching content-encoding header). Let the server and browser handle that stuff if you can.
True, but for someone learning JS, it's yet another 'thing' to wrap your head around. JS seems to be like the world's biggest Smörgåsbord of tech. You don't know what is good to eat...
I'd start with the [reselect docs](https://github.com/reactjs/reselect) and come back if you're stuck on something in particular.
https://github.com/loedeman/AutoMapper "This is a TypeScript / Javascript AutoMapper implementation. The pursuit of this implementation is to mimic both usage and functionality of the original .NET AutoMapper library."
I understand where you stand. Couple of years ago I started working on a exiting large web application, across multiple teams, that uses C# and Typescript. I have came across this topic with mapping many models as well. My opinion, keep doing things manually. Let me explain. On the C# side we have heavy use of AutoMapper to "simplify" mapping to and from DTO's. After long reflections and considerations on this topic I came to the conclusion that for this particular application is more a problem than a solution. AutoMapper can make things simpler if you have vary simple Domain objects, with clear 1 to 1 relationships. When things enter the realm of inheritance, computed properties, type conventions, nullable / non-nullanle types, it will get messy. You will end up writing mapping definitions with tons of .ForMember() where pretty much all properties are actually specified manually and lots of custom IValueConvertr's, so on and so forth. You gain nothing. On the contrary. Your performance went down because AutoMapper is very far from being lightweight, a you end up writing almost the same amount of code, and probably more complex. The only real benefit in AutoMapper imho is .ProjectTo&lt;&gt;(). Tools like AutoMapper can be very powerful, but with great power come great responsibility. I am discussion of the pros and cons of AutoMapper somewhere on the internet the AutoMapper author himself said that AutoMapper should be to map to DTO's and not the other way around. In the application I inherited developers decided to do both ways. Now I do it just manually, as simple as return Json(CartDto.FromCart(cart)); or var something= await _repository.Something .Where(f =&gt; f.UserId == userId) .Select(SomethingDto.FromSomething); You could certainly write some kind of AutoMapper-like library for Javascript/Typescript, probably much less capable than AutoMapper due to limited reflection capabilities in Javascript. But, like I said above, unless your objects are very simple POJO's with pretty much 1 to 1 relationships, it will not make your life easier.
Haven't watched the Video yet, but doesn't Rob's role as Architect of Aurelia make this an inherently biased assessment? It would be nice to hear from Architects and Designers who've used these in the real-world and compare notes. 
This has nothing to do with Typescript at all. you would have the same (much more) problems with plain JS. Also, it is my personal opinion. You can try it and you may end up with a the completely different opinion. And that is fine. Not to pick on anybody as [https://github.com/loedeman/AutoMapper](https://github.com/loedeman/AutoMapper) seems like a cool project. But just for the sake of argument, lets consider this example: var objA = { prop1: 'From A', prop2: 'From A too', prop3: 'Also from A (really)' }; automapper .createMap('sourceType', 'destinationType') .forMember('prop1', function (opts) { opts.mapFrom('prop2'); }) .forMember('prop2', function (opts) { opts.ignore(); }) .forSourceMember('prop3', function (opts) { opts.ignore(); }) .forMember('prop4', function () { return 12; }) var objB = automapper.map('sourceType', 'destinationType', objA); Is this really simpler than class A { prop1; prop2; prop3; prop4; } class B { prop1; prop4; static fromA(a: A){ const obj = new B; obj.prop1 = a.prop1; obj.prop4 = a.prop4; return obj; } } const objA = { prop1: 'From A', prop2: 'From A too', prop3: 'Also from A (really)' } as A; const objB = B.fromA(objA); Moreover, as mapping complexity increases manual mapping becomes much clearer and simpler. In my experience at least.
yeah, been checking some, any special you want to point out?
Why wouldn't you just dispatch events into d3 and let it handle it? https://bl.ocks.org/mbostock/5872848 
[Github link](https://github.com/phretaddin/schemapack) Hi all, I was working on a game that used WebSockets and was looking for an alternative to just sending the JSON back and forth (because it wastes bandwidth, could be faster, has no validation, and there was nowhere I could look at all my messages). I looked around for a bit and couldn't find much so I made this! It's my first open source project and am looking for some feedback! Thanks!
Hi /u/ghaiklor, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `ghaiklor.com` and `medium.com/@ghaiklor`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [medium.com/@ghaiklor](/search?q=%28and+site%3A%27medium.com%27+author%3A%27ghaiklor%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|6|50% [blog.ghaiklor.com](/search?q=%28and+site%3A%27blog.ghaiklor.com%27+author%3A%27ghaiklor%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|3|25%
Hi /u/sigflup, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Please use the [Showoff Saturday](https://www.reddit.com/r/javascript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AShowoff%2BSaturday) posts for these types of submissions.
Good questions, I'll be sure to address them in the blog. In the meantime: http://redux.js.org/docs/recipes/ComputingDerivedData.html https://github.com/reactjs/reselect
You say hybrid, what technology are you using? 
Ionic is the best I've used, but that's just a bunch of angular directives on top Cordova which does all the heavy lifting. Cordova is the most well documented and supported, lots of people have made plugins for it, the most useful of which are wrapped up in ngCordova which Ionic uses. That's if you're comfortable with Angular. Ionic 2 is written in Angular 2, but it's still in Beta. React Native is supposed to be great too, but I don't know how stable that is yet. It looks pretty stable, but someone else will have to comment. Similarly, Microsoft also just made free Xamarin, which I've heard good things about but haven't used them, and that's the same deal -- cross-platform, only using C#. 
He does clearly mention at the start of the talk that it's a highly biased talk because he is the architect of Aurelia, and he worked at Google on Angular 2 and decided to leave because he did not like the direction of the project.
You could consider Ember.js + Cordova, the ember-cordova addon makes getting started incredibly easy. Ionic is much more full featured at the moment though, really depends on what you want out of your framework and app. React native is whole different beast, but I've seen some impressive apps made with it.
Thank you! I'm using [Louvain Method](https://github.com/anvaka/ngraph.louvain) to detect clusters in the graph. For each found cluster I perform a force based layout independently. This gives me information about space required for a cluster node. Now I can "zoom out" and consider graph of clusters (I call it a `community graph`). Again I do cluster detection, and repeat the entire procedure until clustering algorithm cannot find next level. In pseudo code it looks like this: let sourceGraph = our original graph do { clusters = detect clusters in sourceGraph communnityGraph = build a graph where each node is a cluster for each node in communityGraph { node.layout = layoutCommunity(sourceGraph, node) } sourceGraph = communityGraph } while (can detect next level of clusters); At the end we have a hierarchy of graphs, which can be traversed down to build position of a node in global coordinates space. The code is [available here](https://github.com/anvaka/hlayout), yet it's not ready to be reused (no documentation, and API will be changed).
I see, I think I just need to do more research into TypeScript. Currently I'm doing something like this where I'm doing everything manually. class School { public id: number, public name: string, public classes: Class[] } class Class { public id: number, public name: string, public students: Student[] } class Student { public id: number, public name: string } var schools:School[] = new Array(); schoolObject.forEach((school) =&gt; { var classes:Class[] = new Array(); school.classes.forEach((class) =&gt; { var students:Student[] = new Array(); classs.students.forEach((student) =&gt; { students.push(new Student(student.id, student.name)); }); classes.push(new Class(class.id, class.name, students)); }); schools.push(new School(school.id, school.name, classes)); }); 
i tend to use [CSS transitions](https://facebook.github.io/react/docs/animation.html). they’re more performant anyway.
I've used both Cordova, Ionic, and React Native, just weird how the author keeps saying "hybrid" without mentioning what he means. There's so many hybrid frameworks, some bad, some good. 
At the centre is left-pad.
Our guidelines: &gt; * If you would like to submit links to your own content, please be sure to follow the reddit guidelines at ["What constitutes spam?"](http://www.reddit.com/wiki/faq#wiki_what_constitutes_spam.3F), including the page on [self-promotion](https://www.reddit.com/wiki/selfpromotion). Follow the link on self-promotion to find it.
Alright. Fix the grammar and change the title to "things I wish I had known about redux" 
thank you, I'll be more careful.
k
So, how is this better than e.g. avro or capnproto or thrift? 
But if I post them it's ok? Am I the only one who sees a problem with that? And then couldn't he just post 9 crappy links for each one he wants to post of his own. What is the behavior we are trying to encourage and discourage with this rule?
It's ok, it's just that this topic is a more of a general programming topic (it's pretty far removed from the subject of JS itself). Thanks!
I this can be simplified: class School { constructor( public id: number, public name: string, public classes: Class[]) { } } class Class { constructor( public id: number, public name: string, public students: Student[]) { } } class Student { constructor( public id: number, public name: string) { } } declare var schoolObject: School[]; var newSchools = schoolObject.forEach((school) =&gt; { var newClasses = school.classes.map(clss =&gt; { var newStudents = clss.students.map(student =&gt; new Student(student.id, student.name)); return new Class(clss.id, clss.name, newStudents); }); return new School(school.id, school.name, newClasses); }); **and going one step further:** class School { constructor( public id: number, public name: string, public classes: Class[]) { } static create(school: School, newClasses: Class[]) { return new School(school.id, school.name, newClasses); } } class Class { constructor( public id: number, public name: string, public students: Student[]) { } static create(clss: Class, newStudents: Student[]) { return new Class(clss.id, clss.name, newStudents); } } class Student { constructor( public id: number, public name: string) { } static create(student: Student) { return new Student(student.id, student.name); } } declare var schoolObject: School[]; var newSchools = schoolObject.map(school =&gt; { var newClasses = school.classes.map(clss =&gt; { var newStudents = clss.students.map(Student.create); return Class.create(clss, newStudents); }); return School.create(school, newClasses); }); 
The entire library is around 300 lines of code. I just ran it through `uglifyjs` and it looks to be around 5 kilobytes if you are already using `Buffer` and around 25 kilobytes if you need that as well. There's probably ways to reduce it further if you need to.
Those topics all sound good to me. I would also like to read more about denormalizing state. I had an interview recently, and was asked how one can keep state consistent in a complicated React app. I said "use Redux", but noted that things can get complicated when viewing different slices of data in different components. After reading your post I realized that a more coherent answer could involve denormalization. In my own work I'm exploring type-checking Redux code with Flow. There are type definitions available from [flow-typed](https://github.com/flowtype/flow-typed). One of my examples is at https://github.com/hallettj/poodle/blob/master/src/reducers/index.js. (That code is all over the place at the moment; but I'm working on it.) Edit: I got the link syntax backward again.
Awesome, this is what I was missing. Thanks a lot!
 someFunction() .then(SomeObject.someMethod.bind(SomeObject));
I fixed it. Gist has been updated https://gist.github.com/khumps/642432ed8f9d8a68adab98dc6238b20e Im having trouble now reading the json. from what I am seeing online I should be able to access it like an array but that doesnt seem to be working. console.log(json) returns { 'jsonData[payload][amount]': '5', 'jsonData[payload][character_id]': '5428123302633053537', 'jsonData[payload][event_name]': 'GainExperience', 'jsonData[payload][experience_id]': '233', 'jsonData[payload][loadout_id]': '19', 'jsonData[payload][other_id]': '8642015426', 'jsonData[payload][timestamp]': '1468873374', 'jsonData[payload][world_id]': '10', 'jsonData[payload][zone_id]': '2', 'jsonData[service]': 'event', 'jsonData[type]': 'serviceMessage' } I want to pull out the event name so I can put it in the appropriate table
I doubt it.
What version of node are you using? I tested it on the latest (6.3) but it might have problems with older versions.
I am running node v5.11.0, I came across a lot of package related issues when using 6 so I had to downgrade.
Hmmm, that's odd. I just tried running it with v5.11.0 and it ran and all tests/benchmarks ran successfully too. The steps I did were: 1. Clone the repo 2. cd'd to the directory 3. `nvm use 5.11.0` 4. `node index.js` Any more information you could give me that I could try?
You could also use ES6 [arrow functions](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions): someFunction().then(() =&gt; SomeObject.someMethod()); ES6 is the new version of JavaScript. Even if it's not fully supported by all browsers, it's widely used because you can have it compiled to ES5 syntax with tools like [Babel](http://babeljs.io/). 
Sounds like segfault error. Aren't you using different version of node on your localhost and external server and just uploading whole thing without rebuilding modules thereafter? Try removing node_modules on your server and running npm install (assuming you have all your dependancies in package.json) It may come from any library that uses native binary (for example uWebsockets)
Side question, is this an issue because it could impact ad revenue?
Debouncing input actions is a good solution (and one that has nothing to do with redux specifically). I work on an app with a lot of complex forms that require validation, and we put them all in redux. Dispatching on blur will work for some use cases but not for others.
This. If you understand the language, frameworks are _far_ easier to comprehend and ramp up with. I worked through a few books ([You Don't Know JS](https://github.com/getify/You-Dont-Know-JS) and [JavaScript Allongé](https://leanpub.com/javascriptallongesix)) and found that I was able to step into things fairly easily that melted my brain before (e.g. React, Flux, Angular).
I'd like help with these too
Those are pretty old links, but right now the thought is that for the time being using a tool that enforces the checks at build time rather than run time is the way to go. I would suggest you look at Flow or TypeScript. The topic of static typing comes up somewhat often on es-discuss, and even showed up in the last week : https://esdiscuss.org/topic/optional-static-typing-part-2.
Installing it via NPM vs just pasting the raw source fixed my problem. Now I am having issues with getting buffer to work properly on my client. All the readTypeDict methods say buffer.* is not a function. There appears to be scoping issues as 'Buffer' is undefined inside of all the schemapack methods but is accessible via breakpoint at 'byteOffset' declaration.
25kb is quite a bit. Does it gzip well? (I'm not using Buffer on the client)
I ran it through gzip after uglify and looks to be around 8 kilobytes with that.
If 'Buffer' is undefined, then it's probably not finding the [Buffer shim](https://github.com/feross/buffer). Try this: `browserify yourfile.js &gt; bundle.js` to include it. Where `yourfile.js` contains at least this: `var schemapack = require('schemapack');` And then `node bundle.js`
Historically TypeScript has been two things 1. A super-set language with it's own features &amp; style 2. A type checker Originally it seemed that typescript was trying to fully embrace OOP -land in JS with it's strict adoption of classes / inheritance / etc. This spooked a lot of functional developers or people who prefer composition over inheritance, etc. As time has gone on, TypeScript has been shifting to look a lot closer to ES6 and really now mostly just serves as a typechecker on top of (almost) ES6 with a transpiler built in. Flow is JUST a typechecker, it's only there to catch mistakes before you run your code. It was likely created to serve JUST point #2 (typechecker) without the added baggage of Typescript which ironically most of which has been rolled up into ES6.
What causes the circular patterns?
Have you ever had the client decode data that was encoded on the server? From what I am seeing, the ArrayBuffer is simply passed into the decode method which then passes it along into the readTypeDict method. readTypeDict is using Buffer shim methods and not native ArrayBuffer methods. When you encode data it utilizes the Buffer shim but when you decode it is not utilizing the Buffer shim.
indexOf() is a pretty common method to check if there's some content in a string; e.g. if (x.indexOf(' ') &gt;= 0) {}
I'm not sure if this uses activeX, but I used this library for Chrome and ie10 https://www.npmjs.com/package/xlsx
&gt; Recently I needed a library to build query strings This is not JavaScript fatigue... more like programmer laziness. Remember left-pad http://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/ ?
Besides `indexOf` you can also use a regex test, `/ /` is for a single space or `/\s/` is for any white space character. Example usage: /\s/.test(' foo bar '); &gt; true / /.test(' red dog '); &gt; true / /.test('foo'); &gt; false
you could only expose the proxied objects maybe?
I think, at the end of the day, you have to ask yourself whether the phrase is being used in earnest, or ironically. I personally believe that Dan was using it ironically. I know I was, as I have written extensively about how to use mixins, and like them. Dan’s post could be summarized as, “Mixins are great, but they will let you down once you reach 1.6 billion users.” That works for many people. So I don’t believe they’re in the same bucket as `GOTO` statements :-)
Very interesting. I know you volunteer and you are doing a great job. 
What about LispyScript? 
[removed]
The answer isn't immediately clear. Because its organization when you are finished and all the meaning behind those choices will be clearer in the future. At this stage how you choose to start is up to you.
It would be cool if this could somehow work with Typescript and its interfaces. Seems like a match made in heaven. 
Yeah someone below mentioned that too! I haven't used Typescript before but it's definitely something I'm going to look into now. If anyone is very familiar with TypeScript and wants to help out let me know!
I am only really a beginner with Typescript, so maybe someone else has more thoughts on it.
Wonderful tutorial! That intro song though... *shudders*
It kind of depends on your requirements. All of these have wider support and interop than OPs. Some of them may not have any advantage other than that. Thrift is particularly popular in the cross-platform rpc space. Avro has wide adoption, and has become a de facto standard in the big data space. The wide interop there, and lack of substantial difference with other popular competitors like protocol buffers lead my team to choose it for our service communication needs. It also has a smooth interop story with json which is nice. Msgpack I know little of. Probably the more you expect your needs to change, the better of you would be with something flexible. If nothing else, that will lose you some measure of simplicity. That might be good or bad.
Thanks, that's incredibly helpful!
I went through the course a couple of months ago, and it's fantastic/! When I went to write my first Angular app after finishing, I was still left scratching my head about how to organize my directives, controllers, services, etc... and how to properly use scope (particularly isolated scope). That said, it's time well spent.
I either treat them like classes or not. I don't mix patterns like conceptually having "classes" and then borrowing methods to call in the context of that instance. I would only call pure functions from elsewhere or make use of the methods on the class. In my experience, if you try to jumble the classical and prototypal approaches, things get weird.
How are you trying to access it? You should be able to access it like this: `var eventName = json['jsonData[payload][event_name]']`
If the client's device can properly cache it, then an extra 8 kilobytes will pay for itself, regarding bandwidth, in little time (more so for websocket-heavy sites.)
I don't know why I'm doing it myself. It's just a hobby which I love :).
Sometimes one larger cluster can host a large cluster and several smaller ones, which are pushed to the edges. Like on this picture: http://i.imgur.com/5Nf17WS.png - blue nodes belong to the same orange cluster, yet one large blue node pushes smaller nodes away. That produces circular patterns.
Thank you :)!
So, to use npm you want me to install pnpm via npm and don't use npm anymore, so it saves me a couple seconds every time I set up a project? Isn't this one of the most retarded things ever?
Ah yes bracket notation. I have to admit I rarely use bracket notation in general and have never used it for prototypes in particular. Pardon my ignorance but what would that look like? My guess is something like: MyObject[ 'prototype' ][ 'myMethod' ] = function ( ) { // do stuff ... }; (I don't have the means to test this at the moment but I'll play around with this as soon as I am on a proper device) That sure looks odd to me, but there again I rarely use bracket notation and have never seen it used with prototypes. other than the added flexibility in naming methods/properties is there any advantage to bracket notation in this context or is it more of an opinion situation?
&gt; other than the added flexibility in naming methods/properties is there any advantage to bracket notation in this context. Not that i'm aware of, the only advantage of bracket notation is exactly that, to be able to use names that are declared at runtime by the user instead of hardcoded by the dev.
Some food for thought. We could simulate the Symbol solution in ES5 using Math.random. // No hardcoded key name; different on every run; name clashes highly unlikely var bar = String(Math.random()); var snaf = String(Math.random()); // __public methods__ SomeClass.prototype.foo = function(baz) { this[bar](baz); }; // __private methods__ SomeClass.prototype[bar] = function(baz) { return this[snaf] = baz; } 
Mostly for experimentation. It was a good way to bring together many techniques, such as [universal](https://github.com/Wildhoney/Dory/blob/master/server/components/universal.js), [offline support](https://github.com/Wildhoney/Dory/blob/master/public/js/workers/cache.js), etc...
It's true. We should note that with many language features or libraries there's good patterns and bad patterns. Mixins may be one such thing that requires care in design. A multiple-inheritance pattern, when used carefully, can prevent classes from extending each other needlessly. For example, the second of the next two examples is much cleaner, with no unnecessary extending: --- Example 1 // TreeNode is re-usable in other libraries, not extending unnecessary classes. class TreeNode { /* ... */ } // This class is specific to my library class ImperativeBase extends TreeNode { /* ... */ } // and it would be nice for this one to be re-usable, but unfortunately it has // to extend ImperativeBase because... class Transformable extends ImperativeBase { /* ... */ } // ... because Node needs the characteristics of all three classes (TreeNode, // ImperativeBase, and Transformable), which means Transformable is not // re-usable without the user having to be okay with also having the // ImperativeBase characteristics in whatever class the user creates. class Node extends Transformable { /* ... */ } // And I don't want Scene to have the Transformable characteristics. class Scene extends ImperativeBase { /* ... */ } class ScrollView extends Node { /* ... */ } --- Example 2 // This is all much nicer with multiple-inheritance. import multiple from 'somewhere-yet-to-be' // these classes don't need to unnecessarily extend anything. class TreeNode { /* ... */ } class Transformable { /* ... */ } class ImperativeBase { /* ... */ } class Node extends multiple(ImperativeBase, TreeNode, Transformable) { /* ... */ } class Scene extends multiple(ImperativeBase, TreeNode) { /* ... */ } class ScrollView extends Node { /* ... */ } 
On a larger project `npm install` can take up to 10 minutes. This can be especially annoying when you need to install node modules on a build server. Things like ied and pnpm are a great solution for this problem.
I think Redux and async-csp solve different problems, and you can use both if both problems exist. For example, you can listen to Redux data changes in a CSP loop and pipe that through a channel (I'm just making up a random scenario). Redux is more of a manager of state whereas async-csp is a method of communicating arbitrary data from one place to another. f.e. // Redux listener sends data somewhere with async-csp: store.subscribe(() =&gt; someChannel.put(store.getState().someVariable) ) 
Really unsure what you mean here. If you target es5 in tsconfig, Typescript will not include the ES6 type definitions and blow up when trying to transpile. I then have to manually add the typings to ensure it can transpile.
This course uses Angular 1.2. It was good but it's now old in front-end years. I think anybody wanting to enter Angular now should learn 1.5 because of the new component structure. It would be great if they updated it. No need to rewrite the whole thing, just a final lesson on how to update.
Wes Bos is really good at making money...
I'd go with option 2. The problem with option 3 is that it's a bit fragile if you do any other kind of inheritance or composition, like mixins. Option 3 has nice syntax though, since everything is wrapped up all snug in an object literal. Another way to get that without the fragility is to use `Object.assign` (or if you're using underscore/lodash, `_.extend`): Object.assign(MyObject.prototype, { myMethod: function( ) { // do stuff... }, }) You can also do mixins this way. Say you have a mixin called `eventable`, something like this: var eventable = { on: function (eventName, callback) { this.listeners = this.listeners || {}; this.listeners[eventName] = this.listeners[eventName] || []; this.listeners[eventName].push(callback); }, trigger: function (eventName) { if (!this.listeners) return; if (!this.listeners[eventName]) return; this.listeners[eventName].forEach(function (listener) { listener() }); } } Since `Object.assign` takes an arbitrary number of arguments, you can do this: Object.assign(MyObject.prototype, eventable, { myMethod: function () { // do stuff... }, }) Or you can put the object assign right in the eventable module: var eventable = function (Constructor) { Object.assign(Constructor.prototype, { on: function (eventName, callback) { this.listeners = this.listeners || {}; this.listeners[eventName] = this.listeners[eventName] || []; this.listeners[eventName].push(callback); }, trigger: function (eventName) { if (!this.listeners) return; if (!this.listeners[eventName]) return; this.listeners[eventName].forEach(function (listener) { listener() }); } }); } And then: eventable(MyObject) Object.assign(MyObject.prototype, { myMethod: function( ) { // do stuff... }, }) None of this is critical, and all of it can be done a dozen different ways. But it's a nice way to organize your code, and if you do the last option, you're still open to doing other prototype modifications, like adding setters and getters, or generating the methods based on some config passed in: var eventable = function (Constructor, config) { var key = config.key; Object.defineProperty(Constructor.prototype, 'listenerCount' + key, { get: function () { var listeners = this['listeners' + key]; if (!listeners) return 0; return Object.keys(listeners) .reduce((sum, name) =&gt; sum + listeners[name].length, 0); // sum of listener array lengths } }) Object.assign(Constructor.prototype, { ['on' + key]: function (eventName, callback) { var listenersKey = 'listeners' + key; this[listenersKey] = this[listenersKey] || {}; var listeners = this[listenersKey] listeners[eventName] = listeners[eventName] || []; listeners[eventName].push(callback); }, ['trigger' + key]: function (eventName) { // ... and so on ... ... eventable(MyObject, {key: 'Poop'}) eventable(MyObject, {key: 'Peep'}) var obj = new MyObject(); obj.onPoop('butt', function () { console.log('burble burble') }) obj.onPeep('butt', function () { throw new Error('Unacceptable butt'); }) console.log(obj.listenerCountPeep); // =&gt; 1 obj.triggerPoop('butt') // =&gt; burble burble obj.triggerPeep('butt') // =&gt; Error: Unacceptable butt Kind of went on a tangent there, but anyway, point is that prototypes are super powerful, so I recommend choosing a style that doesn't get in your way when exploiting them. `Object.assign` works nicely in this regard. Edit: `Object.defineProperty` was missing an argument
I’ve seen something like this in the wild. The salient difference with `Symbol` is that string keys will still be enumerated as usual. They show up when you use `Object.keys` or a `for...in` loop. Symbols do not, but `Object.assign` copies them anyways. In general, that is a win for `Symbol`, but there are some libraries and frameworks that implement mixins but assume that all the methods have string keys, and if you use one, prefixes, `Math.random` a counter, or what-not must be used. (The essay glosses over all the details of what a robust mixin implementation should do. In addition to handling Symbol keys, for example, a robust mixin feature should handle getters and setters.)
FF is the new IE
[WebStorm](https://www.jetbrains.com/webstorm/) for sure.
That's a short-hand way to declare an object. You can easily add to it as well. var x = { name: "Bob" } x.strength = 85;
Using ES6 is only preferential on a short timescale. No one is doing themselves any favours by not learning ES6. Yes, compilers must be used now. But within a short span of time, ES6 will be native to browsers, and people who write ES5 Javascript will be dinosaurs writing hard-to-read code.
I believe I saw a video about Functors on the FunFunFunction YouTube channel.
Hi /u/CaRDiaK, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Hi /u/josh_carterpdx, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Thanks for checking it out but this doesn't exactly answer my question. I'm curious about whether these patterns are employed as shown more experienced React/Redux users and, if so, what about them makes them worthwhile?
Callback function for setState()?! This made my day! I had no idea! Thanks for this!
Pretty sure css transitions dont work with svg attributes making them useless. Siml is deprecated?
For me the simplest explanation of a functor `F` is "a procedure that, given a type, returns a type" (+ some laws which should hold). So `Maybe&lt;T&gt;` is the functor that, given the type `T` return the type `?T` (aka the set `T` union the set `{null}`). `List&lt;T&gt;` is the functor that, given a type `T` return the type `Array&lt;T&gt;` (aka the set of all arrays whose elements are of type `T`). A functor is not a data structure (e.g. a "container"), is a mapping `F` between a type `T` and another type `F(T)`. Now what happens to functions? Given a function `f: A -&gt; B`, what's `F(f)`? Here comes the definition of `fmap: ((A -&gt; B) -&gt; FA) -&gt; FB`. &lt;= this is the usual signature but if you group the arguments as in `fmap: (A -&gt; B) -&gt; (FA -&gt; FB)` now it should be clear that `fmap` defines how `F` maps functions, i.e. what's `F(f)`
It's some heuristic which goes by the number of characters. Nothing unusual. JavaScript performance is always a bit unpredictable due to heuristics and deoptimization triggers.
Pretty cool project, very thorough.
I am honestly more confused after reading this and I occasionally program in Erlang. Is an array a functor if so why not just use them in the explanation instead of some unexplained wrap function that uses fmap instead of map which everyone understands. Yes I understand that this might not be 100% canonical pure functors but I'm ok with that if it lets me understand the concept. This seems like another example of how the main thing holding back functional programing is functional programmers. 
&gt; Posts must be inclusive to all -- e.g. no beta invites, "PM me for access", "free for first N users", etc.
Ever see that show "How it's made"? Most products are merely extruded and chopped by highly engineered automation machines which have replaced human labour, which makes for an incredibly uninteresting demonstration if you focus on "how". At that point we would rather watch a show called "Why it's made" which explains the machine making it, the economics of it, and the relevant convenience layers in industrial mass production applied in this particular context. I wonder if the author understands the concept enough to produce an example with some useful application.
How are you doing the parse and stringify? Using `JSON.parse()` and `JSON.stringify()`? Do you have a working example?
Very smooth, i like it a lot
Put it back into an array before you stringify it.
you’re right. CSS can only animate properties that have a CSS equivalent (e.g. fill, but not cx) in the end i had to do e.g. all placement that i wanted to animate into transforms (which are animatable via CSS)
Also, HN submission: https://news.ycombinator.com/item?id=12120805
Can confirm that this works great :) The project I tested on does not have too many deps and is deployed on a really fast server, but still... Will definately use this! $ time pnpm-install real 0m10.121s user 0m5.356s sys 0m1.412s $ time npm install real 1m14.845s user 0m13.908s sys 0m1.748s 
Same: http://i.imgur.com/kME9tXk.png
Here: https://jsfiddle.net/37oqugsd/
I was wondering with using an individual force layout per cluster, are the individual clusters also connected('linked') or are they individual entities placed close to each other? 
The game works like this: -Round starts, eveyone throw their coins in. -Multiplier increases from 1x to the infinite (1% of crashing at 0x, making everyone lose their coins) -Game crashes, if you didn't cash out before it did, you lose your money. -Example of how it works: -I throw in my 100 coins. The multiplier starts, I cash out at 1.50x. Now I have 150 coins. -Another round starts. I throw in my 150 coins but it crashed at 0x, now I have 0 coins because I didn't cash out. Answering your question, I'm pretty sure it didn't. All it did was make it cash out at 1x, making no profit at all. (sorry for bad english, by the way)
Ok, well I noticed this line: currentBet *= 4; // Then multiply base bet by 4! Try just commenting it out (disabling) via: //currentBet *= 4; // Then multiply base bet by 4! That's the only part of the code I can find where he's increasing the currentBet. Only other problems that may arise from changing that though could be how it affects his condition checking/etc. So, change that currentBet line (remove it essentially), and keep the raw 100 value in the original placeBet I made above; e.g. engine.placeBet(currentBet, 100, false); - See how that works out.
**Edit:** totally forgot /u/jnd-au helped me understand this a few months ago: https://www.reddit.com/r/functionalprogramming/comments/4e9evj/trying_to_wrap_my_head_around_lift/ First things first, imo Professor Frisby's Mostly Adequate Guide to Functional Programming is the de facto standard for learning about FP in JavaScript. You don't get to Functors/Lifting until [Chapter 8](https://drboolean.gitbooks.io/mostly-adequate-guide/content/ch8.html#the-mighty-container) which assumes understanding of the previous chapters but even without reading the prior chapters it's still more clear than the excerpt posted here. The other problem here is that the author describes "lifting" incorrectly. Lifting is the idea of "teaching" something, say a function, how to work with values inside of a container. Simple example: function add2(n) { return n + 2; } Our `add2` function understands how to work on single values like Numbers. If you give it a number, you will get a new number back that's 2 higher than the one you gave it. Great. But what if I want to do this for a number inside of a container? var myArr = [5]; add2(myArr) // error (in actuality you're going to get "52" as JS will cast to string and + will concat, but I think it's safe to say this is not our desired behavior) The problem here is that `add2` doesn't understand container/functor space. It needs to be lifted into this space, which is exactly what `map` can do for us. map(myArr, add2); // [7] (Side Note: If you want to get a `map` function rather than method try this: `var map = Function.prototype.call.bind(Array.prototype.map);`) Ignore the fact that people usually use map to work on multiple values inside of an array, it's irrelevant for this example. What you see here is a function being *lifted* into container/functor context. Now that you see this working, understand that it can work on all sorts of different containers that can be built to do other cool things for you. This guide may be slightly more advanced than where you're at but the pictures might help you understand what's happening with the containers: http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html 
YES! It worked! Thank you very very much! I wish I had a way to thank you other than words. You are my hero!
I think I understand your point, however shouldn't o2 be "Object {}" by your explanation? var o = {} var o2 = _.cloneDeep(o) _.cloneDeep(o) object {} o Object {} o2 object {}
you must be doing the parsing weird... when i do: JSON.parse("[{\"Id\":null,\"Amount\":\"000001\"}]") I get an array containing one object.
X-Post referenced from /r/webdev by /u/gdev87 [Comparing Javascript Frameworks (Angular, Angular 2, React, Ember, Aurelia and Polymer)](https://www.reddit.com/r/webdev/comments/4tmnnh/comparing_javascript_frameworks_angular_angular_2/) ***** ^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
Nevermind, I found the answer... https://www.reddit.com/r/javascript/comments/4tl1r6/can_anyone_explain_the_difference_between_object/d5ilhda
You're a fucking idiot for using those gambling sites. I hope you lose everything then commit suicide.
This worked in both Chrome and IE 11. Thx!
hmm, that's great but sadly the ad i'm working on for this has heavy limitations in it's platform. I can't use require js or any external sites so i need to host all libraries within the folder of the ad. Do you have a combined version of the library that's self contained with a small demo? Yeah basically the audio's working on mine, but decoding the frequency data returns 0 no matter what I do. 
Here's a video that presents the website: https://www.youtube.com/watch?v=tcI37rw-M3U
Just use ES6 classes. It does the same kind of thing except that it's much shorter and implicitly in strict mode. For one-off objects, use ES6's shorthand methods. let foo = { bar() { ... } };
Start with this function: function double(x) { return x * 2; } Now, image we have an object that's this: { "awesomeness": 10 } Now lets say you wanted to get the double of the awesomeness of an object, that's easy, `var thingsDoubleAwesome = double(thing.awesome);` However, you really want it to be in another object with the awesomeness field filled, so you do this: function doubleAwesomeness(container) { return { "awesomeness": double(container.awesomeness) }; } var thingsDoubleAwesome = doubleAwesomeness(thing); An abstract reusable version of this looks like so: function applyAwesomeness(action, container) { return { "awesomeness": action(container.awesomeness) }; } var thingsDoubleAwesome = applyAwesomeness(double, thing); And a functor just makes this a partial function that returns another: function applyAwesomeness(action) { return (container) { return { "awesomeness": action(container.awesomeness) }; }; } var doubleAwesomeness = applyAwesomeness(double); var thingsDoubleAwesome = doubleAwesomeness(thing); 
[removed]
I would strongly recommend using .webm over .ogg. We've come across several odd quirks with .ogg over the years that are solved with .webm (and both using Vorbis).
The clusters are linked if and only if underlying nodes in each clusters are linked. This connection is weighted. The more nodes are connected in two clusters the stronger is the connection between clusters. If there are no connections between underlying nodes, then the clusters are just pushed to the edge with repulsive forces form other nodes.
Is it because React has no knowledge of the event if it lives outside of React? Without knowing about it, how would it know it needs to batch queues up for performance. 
The performance argument would have been harmful without the disclaimer 'in hot code'. See http://mrale.ph/blog/2012/09/23/grokking-v8-closures-for-fun.html. Even thought the article is almost 4 years old, it is still relevant as far as I know.
Well first off, the example you have is a "CSV-emulated" example (it's not really a .CSV file that is being loaded in). The &lt;pre&gt;&lt;/pre&gt; element is an element that keeps text-formatting (e.g. nice for delimited files such as CSV's to pull from in an example), but if you have something like an actual separate file, then you would need to derive some kind of system to pull that (something like uploading the file and open/reading it to then be transcribed in the JS, using ajax, etc). Nonetheless, assuming your CSV is something like the example where you already have it dragged/dropped into the pre element, well then that can essentially be stored anywhere as long as it proceeds wherever you load your script in the HTML file; e.g. &lt;head&gt; &lt;/head&gt; &lt;body&gt; &lt;pre&gt;your pre content&lt;/pre&gt; &lt;!-- just make sure this comes after --&gt; &lt;script src="mySrc.js&gt;&lt;/script&gt; &lt;/body&gt; Likewise, as far as storing the file, you can store the file anywhere you want and either reference it via an absolute or relative path (your local system just of course needs access to the file; just like you type C:/desktop, etc). Now, as far as an actual "using a CSV file for Highcharts", this is a better example from Highcharts with a relative path for the ajax'd CSV http://www.highcharts.com/studies/data-module-csv.htm (use your editor to view the page source =&gt; right click =&gt; page source). See how they use $.get (an ajax method) to get the CSV data and then load that in - not a &lt;pre&gt; element like you found in your example (note, I want to reiterate that technically loading the data in via a &lt;pre&gt; element is fine, it's just I would imagine you probably don't want to manually copy/re-type/paste a large CSV file into it). edit: here's some more useful examples; http://jsfiddle.net/highcharts/ayycv/ - I think the google spreadsheets one might work well for you.
that fixed it. i dont know why i thought just json["event_name"] would work. now trying to figure out why it isnt receiving them all. every time I start the server it logs 6 jsons and then just stops logging any more. The web app still keeps spamming them though. https://gist.github.com/khumps/642432ed8f9d8a68adab98dc6238b20e
These are not directly related terms. A fullstack developer is simply someone claiming to be able to handle all aspects of a (usually web-based) application build/setup/code/deployment/support/etc. MEAN (not sure what that is), LAMP (a set of tools that work well together) is a possible set of technologies that could be used by a fullstack developer. They could also be used by any developer, fullstack or otherwise. Being able to setup servers, install and configure server side tech (httpd, smtp, rdbms, etc) does not mean a person is familiar with LAMP or MEAN or any other specifically popular sets of tools.
Also see https://github.com/vkurchatkin/typescript-vs-flow &gt; Flow is more flexible and provides much more safety than TypeScript at the same time.
Doesn't MEAN stand for Mongo, Express, Angular, and Node?
Accepting patches for other server languages by chance? We do a lot of C# and I could see this being useful if it has library for additional languages. 
What possesses someone like you to try to answer this question when you obviously have no idea what you're talking about? I'm honestly curious.
It's a HR Phrase for "If shit gets bad, you'll be the one responsible."
While I do agree those are horrible types of programmers, the ones of us that actually like tinkering with the entire stack don't appreciate the mean words. I never say ninja :(
How to import that instance of firebase in my viewmodels so I can use it to fetch data? :-) Doesn't it hurt to have the api key in your html?
You aren't sending back a response. One should go around line 27 in your server. What's happening is that the browser is limited to 6 requests per-host. Since you aren't responding, it hits the 6 request limit and all 6 are just waiting for the server. If you have nothing meaningful to return that's fine, but you have to send a response or the browser won't know that request was completed. Maybe something like: response.end(JSON.stringify({status: "ok"}));
&gt; What are combination exists? Full stack means: - Front end development in HTML, CSS, and JavaScript. - Using associated front end frameworks and libraries, e.g. React, Angular, jQuery, Ember. The list varies widely. - Doing back end development in Java, C#, PHP, Ruby, Python, JavaScript (e.g., Nodejs), or other language. - Using a database: PostgreSQL, MySQL, MariaDB, Oracle, MS Sequel Server, MongoDB, ... - Running on Apache or Nginx (Linux) or IIS (Windows). So if you take all of those, you end up with a lot of possible combinations. &gt; what is the best combination? The ones that (a) you like working with, and (b) companies are hiring for in your area. p.s. - LAMP (Linux Apache MySQL PHP) is a back end stack.
It's not a "comprehensive article", but /u/Cody_Chaos had a _fantastic_ comment a while back about the general reasons for each framework's existence: https://www.reddit.com/r/reactjs/comments/39wsfi/what_are_pros_and_cons_of_using_reactjsflux/cs7msvp 
Thanks for your reply, you're absolutely right the syntax is a lot cleaner. I would love to use ES6 classes but I'm really trying to avoid any pre/cross-compiling at this time. I'm also constrained by a corporate environment so I'm stuck supporting some browsers that aren't yet ES6 aware. In any case I think ES6 is clearly the best solution long term.
No, but i just thought about implementing a js webapp for managing such a list. Searchable, sortable, user edited with realtime syncing, you know? I imagine starting with some express.js or koa as my node.js server frameworks. They provide bits of functionality (which depend on and work with each other ) to setup a server for my apps backend. Maybe i'll extend my server, e.g. with some 3rd party express middleware like cookie-parser. Or Passport.js, a middleware, that would let me easily log users in with their social network accounts, or a dedicated user/pw combination. To connect to my database i could imagine using something like mongoose (for mongoDB) or thinky (for RethinkDB), which make it easier to interface with the db, than using the official db drivers. To connect to my client side in a realtime fashion, so the clientside gets to know immediately, if someone added a new entry, i could use a lib, like socket.io, which has variants for both, the server and the client, to abstract away several lower level techniques for realtime communication. As i am speaking about the frontend: As it very easily gets really messy and hard to read, debug, test and extend to write it with vanilla js or a DOM manipulation lib like jquery, i'll use either a fully fledged frontend framework like Angular.js or Backbone or Ember (these often include functionality for Models, View and Controllers, MV*, ... ), or a set of more loosely coupled libraries, which don't necessarily have to result in a MV* pattern, like React.js for the view part, which works like a state machine, making it's output easy to predict, and Redux for managing the data layer. As i need to sort the list on both the client and the server, i'm happy that lodash is a js utility lib, which works in both, node.js and the browser, since it just provides a set of clever functions for things like sorting, string manipulation and many other tasks, while only depending on core javascript language features. Oh - or i could just use a fullstack js framework like Meteor or derby, which bring nearly all of the above and much more in one package. But i should beware: as i get a running system of nicely interacting gears, it may be sometimes hard to impose my own idea of doing things.
I've actually been able to use mp3 with lame and getting no issue with header and footer silence by encoding it with VBR. Ie I use only off and mp3 for full support
I've actually been able to use mp3 with lame and getting no issue with header and footer silence by encoding it with VBR. Ie I use only ogg and mp3 for full support
No lifecycle methods are necessary, all that is needed is somewhere along the way, something changes and you call `this.setState` which will trigger React's own recursive rendering check. If, for instance, you want to do some specific behaviour as a result of receiving new props from a parent component, you can listen to `componentWillReceiveProps(nextProps)`.
A related term is "full StackOverflow developer".
I think your point and the essay may be talking at cross purposes. There is a pattern for creating “private” data through closures where each instance of an object is created in its own closure and therefore variables in that environment are private to the object’s own methods. In the link you provide, this is something like: function ClosureObject() { var x; return { setX: function (valueX) { x = valueX; return this; }, xSquared: function () { return this._maybeTimesX(x); }, _maybeTimesX: function (value) { if (x != null) { return value * x; } } }; } var closure_object = new ClosureObject(); The variable `x` provides private, fully-encapsulated state for `closure_object`, and there is one closure created for each instance we create. `_maybeTimesX` is intended to be a private method. The problem is the creation of the closure, not the “private" method However, this is not what the article describes when talking about using helper functions instead of private methods. The article describes refactoring something like this: export default class ES6Class { setX (valueX) { this.x = valueX; return this; } xSquared () { return this._maybeTimesX(this.x); }, _maybeTimesX (value) { if (this.x != null) { return value * this.x; } } }; There is no closure created for each instance, naturally, but “private” method `_maybeTimesX` can cause name clashes or dependencies could build up on it. So the article gives this as a simple workaround: export default class ES6Class { setX (valueX) { this.x = valueX; return this; } xSquared () { return maybeTimesX.call(this, this.x); } }; function maybeTimesX (value) { if (this.x != null) { return value * this.x; } } `maybeTimesX` is now a helper function invoked with `.call`. It does not exist in a per-instance closure, and the performance should be roughly equivalent to making any other function call. Or do I misunderstand your concern?
Your summary of what the article says does not match my view of what I wrote. It is possible that I was not clear. The mention of a `subclassFactory` is not germane to the problem or solution in any way, this may have been a mistake as it appears to have created confusion. Subclass factories don’t solve the name clash problems in any way. They are another form of concatenative sharing. The discussion about classical inheritance is to point out that the problems with mixins are exactly the same as the problems with inheritance. What the article attempts to say is that as long as we are using concatenative sharing, the best we can do is reduce dependencies and name clashes with solutions like helper methods or symbols. (Or special prefixes as discussed in another thread). Composite patterns are indeed a far more robust approach, but I am saving that for another article, as they do not “fix” mixins, so much as throw them away.
TL;DR: Both `{}` and `Object()` mean literally the same thing as `new Object()`. --- FTR, the initializer syntax (`{}` for plain objects, `[]` for arrays, `/(?:)/` for regexes, and the many expressions and declarations for both functions and generators) is at its core a way to create a new object that inherits from some public `prototype` property (respectively, `Object`, `Array`, `RegExp`, `Function`, and the `[[GeneratorFunction]]` constructor that doesn't have a proper name in ES6). All of those initializers except for the plain object can be represented in a special way by the console, but for plain objects, Chromium decided to follow the pattern for general instances of constructors: printing the name of the constructor followed by the object-initializer syntax. It even works like this if you use `Object.create(&lt;constructor&gt;.prototype);` instead of `new &lt;constructor&gt;();`, or if you reassign an object's prototype (if you reassign the prototype to `Function.prototype` or `Array.prototype` or an instance thereof, it still uses the general-instance syntax rather than the special function or array syntax), but oddly enough, it prints `Object` even for `Object.create(null);`, which is not an instance of a constructor. (Curiously, even for the special `[[TypedArray]]`s like `Uint8Array`, the Chrome console prints them out like normal arrays `[2, 3, 4]`, rather than something like `Uint8Array [2, 3, 4]`.) --- Oh, also, some of the built-in constructors in JS are designed to do the same thing whether called with `new` or without; it seems like all of the functions for making objects are like this (`Object`, `Array`, `Date`, `Function`), while the functions related to the scalar primitives are not: `Boolean`, `Number`, and `String` convert if called without `new` and make wrapper objects if called with `new`; `Symbol` throws an error if called with `new` and makes a new symbol if called without `new`, and passing a symbol into the `Object` function is the only way to make a wrapper object around a symbol (you can still say `Symbol` is a constructor, because symbols and their wrapper objects *do* inherit methods from `Symbol.prototype`, even if this function cannot be constructor-called). Further adding to the confusion is that `Math` and `Reflect` are named like constructors but aren't even callable; instead they serve as namespaces for a variety of useful functions (`Object`, `Array`, and `String` also act like this, but because they are constructors, those functions are known as "static methods"). The DOM constructors appear to be stricter about this; for example, the `Image` and `XMLHttpRequest` constructors throw errors if not called with `new`. Also, instances of the `Image` constructor, like all other HTML element nodes, are represented in the console as HTML fragments, while instances of `XMLHttpRequest` are printed to the console like general instances of constructors: `XMLHttpRequest {onreadystatechange: ..., ... }`.
Have you tried this? http://codereview.stackexchange.com/questions/tagged/javascript
+1 for Professor Frisby's Mostly Adequate Guide to Functional Programming. I do know what a functor is, and what lifting is. I was perhaps a little cranky, but my issue was that the opening paragraph didn’t seem to presume that the reader hadn’t read Frisby. Putting myself into beginner’s shoes, it felt like it needed a statement saying: “Once you have read the rest of this essay, you will understand THAT a functor is...”
Not yet, but that looks like a great idea thanks
I'd say if you're expected to be really proficient at literally every level of the stack you're basically looking only at people with many, many years of experience. 
Use $.ajax's `error` function to see what's causing it to choke. [This](http://stackoverflow.com/questions/6792878/jquery-ajax-error-function) might help.
Actually found the issue. I wasn't responding to the requests. Whole database is working now xD thanks for your help :P now to make it useful.
 From readme of [feross/standard](https://github.com/feross/standard#can-you-make-rule-x-configurable). : &gt; **Can you make rule X configurable?** &gt; No. The point of standard is to save you time by picking reasonable rules so you can spend your time solving actual problems. If you really do want to configure hundreds of eslint rules individually, you can always use eslint directly. &gt;If you just want to tweak a couple rules, consider using [this shareable config](https://github.com/feross/eslint-config-standard) and layering your changes on top. &gt;Pro tip: Just use standard and move on. There are actual real problems that you could spend your time solving! :P As semi-standard is based on feross/standard, Same applies for it as well.
Same as parent post, but better formatted. ^^If ^^only ^^this ^^was ^^StackOverflow ^^where ^^I ^^could ^^edit ^^any ^^post ^^or ^^answer. ------------ No, but i just thought about implementing a js webapp for managing such a list. Searchable, sortable, user edited with realtime syncing, you know? I imagine starting with some express.js or koa as my *node.js server frameworks*. They provide bits of functionality (which depend on and work with each other ) to setup a server for my apps backend. Maybe i'll extend my server, e.g. with some 3rd party express middleware like cookie-parser. Or Passport.js, a middleware, that would let me easily log users in with their social network accounts, or a dedicated user/pw combination. To connect to my *database* i could imagine using something like mongoose (for mongoDB) or thinky (for RethinkDB), which make it easier to interface with the db, than using the official db drivers. To connect to my client side in a realtime fashion, so the clientside gets to know immediately, if someone added a new entry, i could use a lib, like socket.io, which has variants for both, the server and the client, to abstract away several lower level techniques for realtime communication. As i am speaking about the *frontend*: As it very easily gets really messy and hard to read, debug, test and extend to write it with vanilla js or a DOM manipulation lib like jquery, i'll use either a fully fledged frontend framework like Angular.js or Backbone or Ember (these often include functionality for Models, View and Controllers, MV, ... ), or a set of more loosely coupled libraries, which don't necessarily have to result in a MV pattern, like React.js for the view part, which works like a state machine, making it's output easy to predict, and Redux for managing the data layer. As i need to sort the list on both the client and the server, i'm happy that lodash is a js utility lib, which works in both, node.js and the browser, since it just provides a set of clever functions for things like sorting, string manipulation and many other tasks, while only depending on core javascript language features. **Oh - or i could just use a fullstack js framework like Meteor or derby**, which bring nearly all of the above and much more in one package. But i should beware: as i get a running system of nicely interacting gears, it may be sometimes hard to impose my own idea of doing things. 
I use `standard` and I'm not a fan of the space before a function's parentheses either. But it was pointed out that it is actually useful when searching for a function declaration `func (` vs searching for a function invocation `func(`. It grew on me after that.
Egghead.io is pretty good!
Yeah, I totally understand and agree that I could learn more if its my own. Once I'm closer to being done I might give it a shot, but its not quite "presentable" yet.
[removed]
I take it this has been tested across most major clients? Have you guys been using pure react or have you been sneaking in conditionals where appropriate? I'd be interested to see how things render in a very uncooperative client like, say, Outlook. 
You should be aware of the sexual connotation of this library
Pretty sure I've seen this dude: https://www.reddit.com/r/WatchPeopleCode/search?q=mozilla&amp;restrict_sr=on&amp;sort=relevance&amp;t=all do some code reviews in javascript. Not to mention he works on firefox so it's probably integresting none the less.
this looks promising ty
Thanks for the examples. But, just doing it "this way" or "that way" instead of how I've done in my examples doesn't mean that super should continue not being intuitive. Even if the patterns in my examples are not exemplar, super should still just work. Plus, if `this` can be dynamic, so can `super`.
Best answer - lol
?
The classical approach of ES6 is just sugar for the prototypal approach of pre-ES6, so technically nothing is being jumbled. `super` should just work intuitively. Even with ES6 classes, not everyone will use them in cases where ES5 classes are advantageous. Lastly, the reason I'd like `super` to work intuitively is because it would help me implement the multiple-inheritance scheme I'm imagining, which requires prototype wrangling, method borrowing, and surgical modification of `Symbol.hasInstance` on classes being extended from. Basically, had super worked as intuitively as I assumed, I would've had my planned implementation done already, but now I'm having to see if I can work around the problems I've illustrated. Sure, I could use explicit references in my own code to refer to super, etc, etc, but I don't know which classes someone is going to extend from, and those classes written by who-knows-who may have methods defined with references to `super` which I can't simply modify. If it were dynamic like `this` is, the implementation I was imagining would be easy. I can solve the problem by taking classes to be extended from and getting their `toString` values, parsing, modifying the code to replace `super` with a polyfill of that has the intuitive behavior, then `eval()`ing it, but using `eval()` is the last thing I want to do. I'll use it if that's what it takes. If `super` simply just worked though.
I need to store an index, would null be a good default value?
Because Linux, Apache, MySQL, and PHP all run on the server. You can have a fully functional application with LAMP on the back end and HTML, CSS, and JavaScript on the front end. Or just plain HTML for that matter. It's just that back-end technologies *alone* aren't generally what people are referring to when they talk about full stack development.
NaN seems very strange. If you want a sentinel value other than -1, undefined would work. NaN is a pain to test for.
i usually use `-1` use null if you have to do a loop+cond ex: `while (myObj.selected != -1 &amp;&amp; (myObj.selected = foo.indexOf(bar)) &gt; -1)` use NaN if you want to throw a bunch of errors if its not set/initialized, or if it helps you you write your conditional, i think null is superior though
I completely agree with your assessment. I hire JS devs as part of my job, however, and I've noticed recently that there's a distressing tendency for people to claim they're full stack when what they actually mean is "I know Java Spring development and have screwed about a bit in Angular without understanding *any* of the important front-end concepts like accessibility, SEO, semantic markup, separation of concerns, etc".
I'm on mobile so I can't check if you already answered this, but is it on Github? I'd be glad to read over the app when I get to my computer.
if `myObj.selected` is 0, you will be f***ed
I'm a full stack dev, which means that I do everything. I am not as good at any portion of the stack as I would be if I only wrote one piece, but I believe that I am more effective because I write all portions. JS specialists have a tendency to write JS to solve a problem when CSS is more elegant, or the problem would be better solved for all clients on the server with Python, or Rails. There is no "best" combination. It all depends on what you're trying to do. First, identify the problem, then find the solution. It might be MEAN or LAMP or Silverlight... (Probably not Silverlight). A good full stack dev is a Swiss Army knife for a team. You get sent in to difficult situations to untangle messes because specialist dev's all wrote their own piece, using their specific language to cover for mistakes in another. Most commonly, they made a work around on "their end" because the don't want to wait for the other end to finish their feature, and they're being blocked. The client-side used underscore to filter data that should have been done with an SQL statement, or a SysAdmin is trying to use Linux Environment variables to control supported browsers in a Single Page JS application. Point being... If you want to be a full stack dev, you don't get to say, "I am a LAMP dev" or "I do MEAN". Saying so limits yourself. Full stack means FULL STACK! You do LAMPMEAN. If the problem is load balancing, you do load balancing. If it's CSS positioning, you do CSS positioning. You don't use JS to solve an SQL problem. If it's devops, then you do devops. Most importantly... If nobody else knows what is wrong then it is your bug. You are very valuable to small teams, because you can pick up the bits where your team is missing talent. To large teams, you get called in when people are having difficulty figuring out the communication between multiple layers and need someone who knows all sides. I like being full stack, but it's not for everyone. You often get the jobs nobody else wants. If you are really asking, "what should I learn" I'd say just learn what is interesting to you. There is plenty of work in tech, and the most important thing is being passionate about what you do. If you like MEAN, do MEAN. If you like LAMP, do LAMP. If you just want work, do SharePoint. There's lots of work there, but most people don't like it. 
In HTML the ID has to be unique. Multiple elements with the same ID are not allowed. You should use style classes instead.
I will disagree with this. This is a good answer, depending on the company's software. My company has a single backend supporting a web back end as well as Android and iOS. In order to be "Full Stack" in our company you need to know Android, Java, iOS, Objective C and Swift as well.
[removed]
 &gt;JS specialists have a tendency to write JS to solve a problem when CSS is more elegant, or the problem would be better solved for all clients on the server with Python, or Rails. Agreed re css. There are benefits to sticking to one language throughout front and back though. This seamless versatility of js is a main reason so many organizations including non web based ones like NASA satellite apps are adopting node.
I would guess that it still knows how to batch the updates because it still knows that the component itself is. If anything, I would expect the opposite of the findings - react would know to batch the triggering of the event handlers so any state updates could be applied right away. 
Thank you!
Try the [Exercism JavaScript track](http://exercism.io/languages/javascript). You do small code problems, after which your solution is open to review by anyone else who completed the same exercise and you can also see other's solutions. It is very helpful.
Definitely would go with null. If your code has `if (myObj.selected === null)` it will be really obvious what it means. Never use NaN. I've never used it (apart from having to test for it), and in my opinion it's completely unnecessary.
I'm not addicted though, why so offended? I've already made 4 dollars using this script.
Interesting! Not really clear how this is going to solve the problems NPM faces any better though. Fundamentally it's just another repository, right? Or is the idea that everybody builds their own personal repositories, as a distributed-NPM sort-of thing?
Nowhere on their FAQ do they list supported browsers. As OP noted, having to tun tests on 15+ different browsers/phones via Selenium takes a long ass time but if Cypress doesn't support the same large browser pool then it isn't really a valid alternative to Selenium IMO. 
I guess I'll give it a shot.
well, you always have an entrypoint in your application, correct? Imo you're solving an non issue in a way. Sure, write your own code is good and all, but why reinvent the wheel? Having an extra application analysing your code and watching for changes, writing new files etc sounds a bit overcomplicated imho. But hey, that's the beauty of development, whatever floats your boat, right? :) 
great answer
Not exactly a proper code review, but I found this video https://www.youtube.com/watch?v=Cc3K2jDdKTo&amp;list=PLoYCgNOIyGABdI2V8I_SWo22tFpgh2s6_&amp;index=3 (and others in the playlist and channel) to be really useful for improving your JS and jQuery code, not just showing off the cool things that they can do.
f_add is called, just not with the updates to the values. Use the "input" event instead. This will make sure you have the expected values.
Ok why not, here it is https://github.com/g-harel/agenda/blob/master/js/bridge.js
You and a few other convinced me to do it, hopefully all goes well. Worst case scenario is that I get to fix a lot of issues, so it can't be that bad !
My work uses BrowserStack's C# API to run our Selenium tests. Our experience has been pretty good.
Pretty nifty :) 
Why not separate these two parts? The new utility module implementations from the distributing/auto-bundling bits. A really low-friction way of gluing together small utilities from your own personal or shared repos of modules sounds useful, and moving towards a more distributed mechanism for dependency management is a good thing. But while I'm keen to avoid centralizing on NPM itself too much, and to make pulling in modules even easier, I'm very happy with the actual content of the modules there. Moving beyond just one centralized point of distribution sounds great, but I'm not so keen on rewriting everything to do that. A tool that does the same thing by distributing repositories and allowing easy bundling but which sourced its modules initially from NPM could be really interesting though. Just food for thought :-)
I don't mean to sound patronizing, but it really sounds like you're inexperienced and/or used to working independently. For one app it might be easy to just write a bunch of helper functions - but over the length of your career you'll find that that's not an efficient way to work, especially with other developers.
There is an entire StackExchange site for this purpose - http://codereview.stackexchange.com/
Well that is quite lovely. 
looks like code golf for `undefined`
Sounds good. What the difference between CasperJS and Nightmare ?
Ty!
So could this be used to make a webcrawler?
This is fairly good, but unfortunately it may lead to a potential bug that will occur in your program in the 1 billionth execution, when two mixins actually generate the same private variable key. `Symbol('anything')` solves that problem with the guarantee given by the language definition, not an arbitrary UUID mechanism.
Reading Dan's public Github activity, I do believe that he genuinely considers mixins harmful. Maybe not necessarily harmful that it will cause bugs, but at least a problem in maintainable code.
Nice, although the source code doesn't seem to follow any convention :)
Hey thanks for the info.
Other side note ... what an absurd piece of code. It looks like some hyper-minified code golf, but it's actually longer than a normal solution - *including indentation*. var result = []; for (var i = 0; i &lt; arr.length; i += 2) { result.push({ name: arr[i], frequency: arr[i + 1], }); } So what's the point?
Since we're at it, that code doesn't even need an `undefined` to begin with: reduced=r=[],n=notes_array;for(i=0;i&lt;n.length;i+=2)r.push({name:n[i],frequency:n[i+1]})
Nope - I don't know angular so I can't help with that - but `angular`, as I said, is now defined and the code doesn't error out in the console.
I'm in the ctrl+shift+f group, personally. 
Yeah I see where you are coming from there. I do not think they support multiple devices like that but they may in the future. The tests I wrote with Selenium were more for regression on desktop browsers. This is definitely not a replacement for Selenium for this use case.
Interesting. Basically like using JSX with a custom jsx pragma. Which looks great, but probably doesn't fit all too well into React apps? I've actually worked on something remotely similar: a custom React renderer for canvas. You can then build custom components on top of provided primitive components, which is prettyyyy neat: https://github.com/goshakkk/pabla/blob/master/app/components/TextBoxCursor.jsx Wrote more about it here: http://goshakkk.name/react-custom-renderers/
So I say it depends on what you are doing. Some tests can run in 200ms and others can take 5 seconds. The ones that execute in 200ms are like "it has this text in this div". Some of the things we test make requests to our backend and need to wait for a response. They are inherently slow because of the request latency.
Very clean.
That's many hours of work put into this. Are you the creator? May I ask you? Why did you create it? What problems did you encounter?
Tabs are semantically meaningful, spaces of any count are just arbitrary whitespace. Tab Nation Forever 
Try making your code JSLint compliant. I learned a lot that way.
I think someone minified their code and thought they'd try pass it off as some genius one liner. Clean, readable code &gt; one line mindfuck.
I use both and honestly I am ashamed of myself for not figuring out yet how to properly indent my code. The issue is I guess I am kind of lazy where I copy and paste blocks of code and then modify it. For example I will take a a reduce function: const things = stuff.reduce((ob, itm, ii) =&gt; { ob[itm] = {stuff: itm, ok: ii}; return ob[itm]; }, {}); Then I will copy and paste the above over and over again, and just change the guts, and variable names. This causes whacky out of line indenting that makes my code look like slop. When I paste it, for some reason the indenting is totally off. But what I do is, before I push any changes I copy and paste my code into [http://jsbeautifier.org](http://jsbeautifier.org) (which isn't a linter, just a beautifier). 
Yeah, and that's why I love react, it allows me freedom to break away. 
I start off with a big component, then later refactor that component into smaller components later. 
They are probably using history.pushState https://developer.mozilla.org/en-US/docs/Web/API/History_API
How's this different than some of the other plugins that do what seems like similar task? https://github.com/yeoman/grunt-filerev
You probably would want to skip over socket.io and go to WebSockets. socket.io has functionality for things you wouldn't need, and is basically two layers (engine.io, and socket.io) on top of WebSockets.
Some NodeJS modules are actually binaries with a thin JS shim API. A good example is node-hid. Hard to talk to USB devices with pure JS.
so what are some use cases for this!?
Learning Smalltalk will make you say "fuck that shit, I'm going back to Javascript".
CasperJS is built on PhantomJS while Nightmare is built on electron.
You forgot the type checking and trim but yeah. It looks like they minified their code.
Why not use x-ray?
I maintain a beautifier so that I don't have to care about this nonsense. I will beautify other people's code to my personal preferences and I expect other people to beautify my code to their preferences.
Vanilla.js does not mean anything in this context. It is very clearly an abstraction of default DOM APIs, so how is it vanilla? This word is overused and in this case used erroneously. 
Beautiful effect but man does it chug on a mobile device (Note5)
Note that some of the examples provided (zoom for higher DPI rendering) will not work perfectly on the newest version of Phantom (as he explains later in the comments).
[removed]
True, although we head towards one of those probabilistic prime validation algorithms: If your confidence in the uniqueness of the the key is higher than your confidence in the machine operating without error, is that good enough?
So some feedback: our company reviewed many of the options available (including ideas from my last post). In the end we made a constructive attempt at trying all the libraries/frameworks that our team could attempt to try in a single sprint. In the end, we tried React, Ember, Angular 2, Vue, Mithril, Cycle, Preact and Inferno. We tried the latest Vue 2.0 (https://github.com/vuejs/vue/tree/next) and Mithril 1.0 (https://github.com/lhorie/mithril.js) betas and we had some great results from both. We also tried Preact but we had issues with some SVG namespaces not properly being rendered so we gave up. Vue and Mithril enabled us to finally use our example app on our legacy Android testing devices. The experience with Cycle and Angular 2 was about the same as React (unusable) and the latest Ember was better but the initial page load times were still terrible. We thought we found our library (Vue 2) until someone found a benchmark recently that showed that there was a library out there like Preact and React called Inferno. I highly recommend reading their readme (https://github.com/trueadm/inferno). It makes sense. We ran all our benchmarks and it not only came up quite a bit faster than both Vue 2 and Mithril 1.0, it also had a much more modular breakdown that allowed us to use our own state and router library without being tied to a framework – which was a massive win for the team. I have to say though, the amount of choices out there is insane. We're just lucky we found the right library for us and our needs. We highly recommend checking out Vue 2 though for ex-Angular codebases (which some of our team came from). I hope this helped!
Also: I'm happy to give feedback on any of the projects we tested. A note also: we found Cycle the hardest to build, simply because it was a big departure from what we were used to in the past. We found both Angular and Vue the most familiar and easy to get started with.
You're on the right track. For example. I'd create a Task object with the description, priority, objective, etc. This would live in its own file and wouldn't know anything about the rest of your app. I'd create a TaskCollection object that can hold multiple tasks and understands how to add and remove tasks to the collection. Again, this would be in it's own file and would only know about the Task object. I'd create a Grid object that can take one of these collections, a list of column names and can make each Task in it into a row in the grid. I'd create a Form object that can take a Task object and automatically create the form for it. I'd move the validation for fields (number, string length, email address) down into the Task object. I'd then generalize all of the above to handle projects, meetings, etc. Edit: My goal would be if someone wanted to add a new field ('cost code' for example) to a task at some future point. They can open the Task.js file, add the new field (along with type and optional validation rules) and everything else should just work without being changed - the form, the grid, etc.
AFAIK, the last (most recent) capturing event handler, holds the control. It can cancel the event so the remaining handlers in the chain won't be called.
I didn't forget them, the type checking is just a hack the original code uses in place of incrementing by 2 and `trim` does nothing here (though maybe it was copied from a larger snippet that required it).
No. bluebird isn't bound by spec for implementation, so it can do things like new-ing up as an anti-pattern (it's required for native). bluebird's author goes into more detail [here](http://programmers.stackexchange.com/questions/278778/why-are-native-es6-promises-slower-and-more-memory-intensive-than-bluebird). 
My guess is manual obfuscation. - `[]._` is a much worse way to get `undefined` than what minifiers already do, add an extra function parameter and never set it. - To realize it can reuse an object reference instead of `true` it would need to have done static type analysis, checked for memory leaks, and a few other complex and not-always-possible things. - There are extra spaces and an unused function parameter, which a minifier would have caught. (Or the minified code was later edited.) - Space-saving optimizations are performed inconsistently: `l` uses default parameters, `a` doesn't.
I would recommend https://vuejs.org/ with https://laracasts.com/series/learning-vue-step-by-step. Vue seems to be a popular choice with the Laravel community, and Jeffrey Way is pretty awesome. 
Yeah I noticed that vue seems to be popular with laravel. Can you tell me what is different about vue compared to for example react or angular? And wouldn't it be better to use a framework that is developed by google or facebook? (I assume either will be supported for a long time) 
&gt;Can you tell me what is different about vue compared to for example react or angular? There are a lot of differences but it boils down to three things. - vue is easier to learn and use. With both react and angular 2, you are required to learn additional concepts before starting even the "hello world" app. - On github, [Vue](https://github.com/vuejs/vue/issues) has 23 open and 2484 closed issues. [Angular](https://github.com/angular/angular/issues) 2 has 1231 open and 4878 closed issue while [React](https://github.com/facebook/react/issues) has 501 open and 3005 closed issues. - React is backed by facebook. angular is backed by google. while Vue is *not* backed by any big companies. &gt;And wouldn't it be better to use a framework that is developed by google or facebook? (I assume either will be supported for a long time) if all else were equal then, Yes. it would be better. But, as the github issue counts, mentioned above, will tell you that the world is far different than you might expect. its a trade-off. Each of them has their pros and cons. Though I warn you that angular 2 has more cons than pros. 
That's a sign of a pretty bad CSS engine that browser has.
How fast are we talking? If everything is in the 10s of milliseconds it doesn't matter. If it's more, then my phone being faster than your MacBook should make you think.
Along the same lines, check out [HyperScript](https://github.com/dominictarr/hyperscript) and my own [h3-js](https://github.com/twhb/h3-js). Though, I wouldn't call any of these a complete solution to handling the DOM because they don't construct the fundamental thing the DOM is missing, encapsulation.
Fuck no. Got as far as the diagram, which looks insane. Isomorphic/universal is the way forward, not this.
JavaScript lures you into a false sense of security as it's so flexible. Your code is perfectly decent for a 600 line app, but if you're looking to build something modular and testable that can be developed by a team, things get a lot more tricky. My comments are based on the fact you want to learn how to build something bigger. If your app only needs to have the current functionality then ship it!
Yeah, it will have most of the possible content pre-rendered so it'll be helluva faster ...
I like `make`, easier to use than a bunch of random shell scripts, although slightly harder to write. But I'm not going to install 50 gulp/grunt dependencies for doing something that's equivalent to calling a few CLIs anyway. If you are using many dependencies from `npm bin`, you could just slap `PATH := node_modules/.bin:$(PATH)` at the top of your makefile btw.
I'm really starting to feel like I should be using service workers. If anything, to provide a better "you aren't connected" experience. Hopefully apple gets its shit together so all of my users can benefit. Thanks for the link op!
This looks great. I ran some tests and it seems to work well, however I can't immediately see the strengths of this over http://webdriver.io - which uses Selenium and supports different browsers. 
It's on npm already, so you could use npmcdn as-is AFAIK?
It took me a while to get it as well. I might be able to help. Send me a PM and we can go from there.
Isn't advises from article helpful? 
If you need an image to be available immediately on page load, then your best bet is to inline it as data URI (https://css-tricks.com/data-uris/) or as an SVG object. 
Wow this is good. Thank you for this again. Damn I wish my brain could just read something once and immediately get it. I have to re-read/disect to really understand the benefit/best-case usage of this. That whole "supported" issue is concerning.
Can I use the price gun on this, Flo?
Looks a lot like Mithril. Here are some things that people will inevitably ask :) - why yet another library - show some benchmarks - modularize the codebase - is there a JSX plugin Some feedback from a quick glance: - diff code doesn't look very good (https://github.com/thysultan/dio.js/blob/master/dio.js#L556 - i.e. random access of element.childNodes) - stream don't appear to be atomic (https://github.com/thysultan/dio.js/blob/master/dio.js#L2333-L2337), see https://github.com/paldepind/flyd#atomic-updates - API appears to use promises but has no polyfill (imho you should either include the polyfill like Mithril 0.2.x or warn upfront that it's a required dependency like domvm does) - doc section about hyperscript is missing component usage - I like the curried API
Hi /u/NodingTheGame, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Ah, good point, the issues are really just with HTML5 Audio. For example, in anything but Chrome, .ogg won't start playing until the full file has downloaded (which is the case anyway with Web Audio, but not HTML5 Audio).
I would hazzard a guess that from some community classes you will learn enough to know if you really have any interest in working with javascript, or if it is just not for you. Good luck, please report back. I was going to take some web development courses at the local community college where I live, but, I shit you not, they teach web development with VBscript, so, Nope!
Interesting post: notably while you're right that this is a problem, it's not quite as bad as you're suggesting here. Google does actually run JavaScript when spidering ([announcement](https://webmasters.googleblog.com/2014/05/understanding-web-pages-better.html), [some concrete analysis](http://searchengineland.com/tested-googlebot-crawls-javascript-heres-learned-220157)), so even without this your JS-only app will probably get into their results. You're right in that Bing/Yahoo/everybody else doesn't though (and doesn't even seem to be talking about it). In the US that means JS-only apps miss about [35% of search traffic](http://searchengineland.com/google-controls-65-percent-of-search-bing-33-percent-comscore-228765), which IMO is way too big to ignore. Anyway though, either way, this isn't the best way to do this. It's going to be super big and complicated, and PhantomJS is really not stable or reliable enough for this kind of thing. I've had test suites that have been infuriatingly unstable because of Phantom crashes, I really wouldn't want to put that into production. Caches might help, but you're really going to make your production environment way more complicated than it needs to me. Personally, I think either isomorphic client-side libraries (think Ember FastBoot, React DOM server, Angular Universal) so you can set up a full client-side development approach and that still renders the essentials statically, or going for a real progressive enhancement approach (render your core content and functionality so the basics works statically, and *then* adding JS on top to make it even better) are way better options. Depends how much you need heavy client-side page rendering, but either option will still be easier, more reliable, and less complicated to maintain than trying to delegate out requests to PhantomJS like this.
There's a cygwin port of make that would help you out. Sorry about the anti-windows trolls. Kids today have no manners.
If you want to work in front-end web-dev, don't just learn Javascript - you also need to learn HTML and CSS too. The good news is they're significantly easier than JS, but there's also a lot of theory that goes behind them (read up on "semantic markup", "separation of concerns" and "accessibility").
Just browsing through your code real quick, i have a question: return obj ? __true : __false; Why assign true and false to variables? Is this something you needed for your implementation or is this a convention? I don't think i've seen it. Thanks! Edit: Actually from looking at it further, it seems to be an optimization to keep your character count down when minifying. Really cool technique man! I had two other developers talking with me about how clever that was.
I never heard of that framework and I think ill either go for ember, react, angular or vue.
Before the code was filtered with `true`, `.constructor`, `.prototype`, `.length` keywords that minifiers do not uglify so i just assigned all the javascript key words that i use [repeatedly once](https://github.com/thysultan/dio.js/blob/master/dio.js#L50-L89) then i would instead of `obj.constructor` do `obj[__constructor]`, the later will be minified to something like `obj[a]` while the former won't, i found this to have the benefit of cramming down bytes for minified code when a certain keyword is used more than a few times.
Absolutely NO. This post would have been fine 3-4 years ago Isomorphic/Universal is the way. Anyway it's been a couple of years Google indexes javascript pages, so even a non-isomorphic SPA will properly appear (as long as you have the basics for SEO, like a sitemap and some metadata on pages)
Packing your js is a http2 anti pattern. Unpack it, use http2 and you get your progressive loading. 
Well one might argue that vue is just not as popular as angular and react and thus there are less issues to be found (and less issues fixed) For example, the symfony framework has around 500 open issues while laravel has around 100 and I wouldn't say that symfony is worse than laravel because of that (especially considering that laravel uses some symfony components) I have narrowed my choices down to angular, ember or vue. I like that ember is opinionated because it helps me learn the structure better, but I know that in the long run that shouldn't really be my concern. My primary use case is to consume my own RESTful api , do you think vue or angular is better for that? 
That's if you put them all at the top. No reason to require stuff all right up. You think about what you need and require it then. User clicked a feature? Well then you require the feature and run it in the handler.
Not a `make` user myself, so I'm the wrong person for the job.
Is ember an option? I heard ember has bad performance on mobile. Other than that, ember is as good as they come. Between vue and angular 1 (angular 2 is way too unstable), I would say vue because it is easier to learn. Though if you like angular, you should go with angular. [Don't over think it.](https://xkcd.com/1445/)
Would you gain some knowledge and experience through digging through https://github.com/developit/preact code? I found it interesting that your library 6kb gzipped and react syntax compatible library with virtual dom - 3kb gzipped
Some of us live in the real world where HTTP/2 is still far from 100% adopted.
Use Ramda and embrace immutability and functional programming. Your code will be shorter, safer, and much easier to reason about.
Well, sort of. It's component based whereas I want to have it done 'automatically' based on React Router. Overall it was a nice read and helped me better understand the underlying principles of code splitting / progressive loading.
There is a similar tiny view library frzr.js https://github.com/pakastin/frzr
Same. After accepting my resume/application I was given a 50 question test to answer as many as I could in 30 minutes. First 20 or so were basic math questions. After that it was all vocabulary questions such as: Of the highlighted two words, which of the following are synonymous in the above sentence? Seriously what the fuck does that have to do with my Java skills? Such a weird test to screen programming candidates. I guess they want guys who send out emails with vocabulary as dense as William Faulkner 
By absorption I mean the special case when the returned value is a promise (in which case, a A+ promise library would wait for said promise to resolve and pass the resolved value to the next `then` callback (rather than passing a promise). Not sure if that's what you mean. &gt; wouldn't converting to an array before accessing it be an extra operation In the libraries I mentioned, the array is typically already created by the view function and the dom element is simply attached to their respective virtual dom node (assignments are really cheap, assuming no hidden class deopts). What type of operation are you benchmarking? A noop update has a different access pattern than, say, a sort, a reverse or a splice, and you might also want to throw in some writes in the middle (e.g. attribute updates) to double check that you're not getting random repaints (especially in not-so-great mobile browsers, where DOM implementations tend to be... bad). I'd also highly recommend that you use one or more of the popular benchmark suites (dbmon, vdom bench, uibench) to get a somewhat apples-to-apples comparison with existing libraries. The reason I'm a bit skeptical about the claim that a lib doing DOM NodeList reads performs on par w/ one that doesn't is that all the ones that I've seen do DOM NodeList access tend to underperform in those benchmarks compared to ones that don't.
The Javascript compiler and browsers needs to be taught first..then the language IMO. 
Question: why would minifiers change true/false to !0/!1 instead of 1/0?
If machine is operating with error, there is nothing I can really do, I couldn't even trust more simpler data types like arrays or objects in that case, whereas a problem caused by implicit trust on Math.random for uniqueness would be my fault.
More importantly: all the quirks of the language and new ES6 and ES7 features. I think you can learn the language rather easily, it's just really important to know where potential trouble areas might arise.
Hey, change the if statement to this: if ($imgLocation.attr("src") === $img1){ $imgLocation.attr("src", $img2); } else if($imgLocation.attr("src") === $img2)){ $imgLocation.attr("src", $img1) } What you're doing is you're actually setting the src within the if statement instead of checking the attribute against one of the variables, then changing it. 
 I was doing some code searches with nerdydata.com to find which websites use Stripe's Javascript integration. By chance I searched for Stripe Secret API Keys (using this regular expression sk_live_\w+) and found that there a few sites exposing keys in publicly available source code. These secret API Keys let anyone access a full list of the business's customers' information, including names, emails, credit card types/last4, and other related banking information. Always consider exposed keys as compromised. I wonder how long they have been live and public. https://nerdydata.com/search?regex=true&amp;terms[]=sk_live_%5Cw%2B https://nerdydata.com/search?regex=true&amp;table=jsfiles&amp;terms[]=sk_live_%5Cw%2B https://nerdydata.com/search?regex=true&amp;table=deepweb&amp;terms[]=sk_live_%5Cw%2B
By Angular 3 will we be closer to using WebAssembly and bring down the package size that way? Or will Angular get dropped as Google jumps off to the next big thing. 
&gt; pass the resolved value to the next then callback Yes this is what happens, so every new `.then` will have the returned value of the previous `.then` in the chain. &gt; What type of operation are you benchmarking. No sort or splice operations just writes. [dio](http://jsbin.com/xojara/edit?console,output) [mithril#rewrite](http://jsbin.com/geyayep/edit?console,output)
I disagree. When you call `.then()` the spec must create and return a new promise, but it doesn't require all the overhead of `new`. As the Bluebird author said, `new` requires the spec to create a `resolve` and a `reject` function and then pass them into the first constructor argument. However, for `.then()` those `resolve` and `reject` functions don't need to be created. Additionally, due to the nature of promises, pre-resolving would not introduce shared mutable state since a resolved Promise cannot be mutated in an observable way. Once it's resolved it can't be rejected and the resolution value can't be changed. Multiple calls to `.then()` are kept isolated; they can't affect each other. const preResolvedPromise = new Promise(function(r) {r(undefined);}); export function doAsync(cb) {preResolvedPromise.then(cb);} The problem is that `new Promise(cb);` executes `cb` synchronously but `.then(cb)` executes it asynchronously.