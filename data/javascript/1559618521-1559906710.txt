This isn't accurate. Check my response to OP. Javascript is perfectly happy handling `array['foo']`.
[removed]
[removed]
Very kind of you to provide a readable format!
My statement is accurate. Comparing a number to an undefined value will always evaluate to `false`.
Comparing a number to `undefined` using a comparison operator will definitely always evalulate to false afaict. `+undefined` evaluates to `NaN`, which returns false on any comparison.
My mistake. I misread what you were replying to, due to the context of the conversation. I thought you were saying `array[&lt;non-Number&gt;]` would evaluate `false` due to `&lt;non-Number&gt;` being an incompatible type.
[Here's the announcement part](https://youtu.be/MO8hZlgK5zc?t=2020)
Yea, I misread what was said. [See here](https://www.reddit.com/r/javascript/comments/bwi57b/explaining_zero_check_in_javascript/epy5xiy/?context=5)
I don't know of any guides, but as someone who started out at the height of jquery-based-development, here's some important aspects I think are generally different now: 1. Forget requireJs, AMD, or putting constants on `window`. Pretty much everyone uses webpack (or similar) to bundle code, which means we use ES6 `import` statements--for both synchronous and asynchronous imports. Maybe read [MDN's import page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) 2. Usually people use [fetch()](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) (new standard) or [axios](https://github.com/axios/axios) (popular library) for AJAX requests. 3. Spend some time learning [`async`/`await`](https://javascript.info/async-await). If you haven't used C# or another language with special async syntax, it will take some time to pick up. 4. Remember ember or backbonejs or angularjs? Well, most of the frontend JS community uses an all-encompassing framework like this. React, Angular (NOT AngularJs), and Vue are probably the most popular--in that order. 5. A lot of array/object operations we used utilities like underscore.js for are now standard in ES6+. `Object.keys()`, `Array.from()` are some common ones that are good to know! 6. A nontrivial amount of the community is adopting [Typescript](https://www.typescriptlang.org/), which is kind of like a jslint on steroids. You add type annotations to your code, and it checks them at compile time. Keep an open mind to it! If you really want to get up to date, maybe run [create-react-app](https://github.com/facebook/create-react-app) and try some guides to get into it. I think the infrastructure changes are more drastic than a lot of the ES6 specifics.
Learn it from here: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String
No, it doesn't, because it doesn't allocate the underlying objects, which would be the point in something like Javascript (where you're not doing memory math on array addresses). Even in Swift or Java allocating an array of an object type also allocates the space for that array to be full. Otherwise... why (it's not even a typed language)
&gt; for (let i = 1 Why not just start from the second index? JS doesnt throw errors for undefined members.
Use what best for you. Please be aware of the trade-offs though, jQuery trades speed for ease of development. https://medium.com/@trombino.marco/you-might-not-need-jquery-a-2018-performance-case-study-aa6531d0b0c3
Pro tip: spend some time looking at [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference) to get a feel for all the string/array/object/etc. methods.
This is a fun little coding game that teaches you about the ways that some of these quirks work in JavaScript: [http://alf.nu/ReturnTrue](http://alf.nu/ReturnTrue)
Maybe, I have no way to see it. But the pattern is the same - pressing your point of view, no arguments, playing guess-games etc... Every considered helping people and giving clear arguments for your points, then let them to make their own decision?
Or, easier: the announcement is a new federated packet manager [entropic](https://github.com/entropic-dev/entropic) (WiP)
Thanks for sharing, what a trip! Going straight to MDN for a late night reading of the Proxy object section.
Hi /u/Vaderax, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
it is IMO sufficient reason to never use it with "pure" function
&gt; Every considered helping people and giving clear arguments for your points You're either joking or a troll. Either way, you _deserve_ your down votes, even if they're not coming from me.
Yap, wanted to say the exact same thing
I know MDN I have read it .But I can‚Äôt find a function about my issue.
I watched (only) the announcement part, but feel like I'm not getting the hype. If you feel you can, would you care to elaborate on why this is a good thing and what problem it solves?
I wish I could. People were hyped by the GitHub Package Registry as well. I think the fact that the Former npm CTO is working on it might affect hype levels. We'll have to wait for a more accurate answer.
I had the same idea and toyed with it (in context of auto-vivification), but the strong typings example was really clever!
Why don't you just watch the whole video?
I'm not so familiar with React source code so I didn't know that there is Adler-32 implementation. After few hours of research I decided to prepare my own implementation. I think binary arrays are more flexible - at the end if you need to compute checksum for string, you have to convert characters to binary values.
You can install [https://wordpress.org/plugins/acf-to-rest-api/](https://wordpress.org/plugins/acf-to-rest-api/) to expose ACF in the REST API and then they will be available in Frontity.
Then use fetch, axios, bluebird or anything else Welcome to the world of microlibs.
It also builds up your technical debt insanely fast since it basically promotes spaghetti code
Thank you, let us agree to disagree then
Honestly, the transition aint that hard. You just have to push yourself to not use jQuery. You'll end up being a better developer, with a far better toolchain than before. Now you're ready for everything, not just a dying legacy library
Are there any downsides to using this type of property manipulation for data sets? It seems odd that this type of interaction would exist.
\&gt; I've been occasionally seeing things like document.getQuerySelectorAll() and salivating. This will get you into the same sort of trouble. Just like Jquery, layout inflating is practically dead. You will never encounter the dom api in the working field again. The only function you call is document.getElementById("root"), everything else is declarative from there on. Learn ES6 and React. Modern javascript can be delightful, and React is the default at this point, half the internet is React, practically most of the bigger sites you visit use it (including this one). But it can actually teach you useful programming patterns.
so you think that function that runs in O(n^2) is better than one that runs in linear time just because it's "pure"?
 http://www.tatanka.com.br/ies4linux/downloads/
It actually [looks quite decent](https://i.imgur.com/xfW8BoU.png) ü§∑‚Äç‚ôÇÔ∏è
It‚Äôs hosted on Netlify and is fully static with pretty much no JavaScript. No clue why you are seeing what you‚Äôre seeing.
this is amazing
It all depends on the use cases.
in this use case (reduce function) using pure function just for the sake of it being pure is just stupid, that's why in previous post it was called anti-pattern
This is not a use case.
```js // Example data const input = 'abc::::4653'; const fromChar = ':'; // char to find const toChar = '?'; // char to replace /** * Create a regular expression */ const regExp = new RegExp(`${fromChar}`, 'g'); /** * Randomly replace chars found by the regex */ const ramdomlyReplaced = input.replace(regExp, (char) =&gt; Math.random() &gt;= 0.5 ? toChar : char); console.log({ ramdomlyReplaced }); ```
"Free" but your charts will contain ads... No thanks.
All because "arrays" in JS are not arrays, they are objects, and that's why it lets you set any key you want. `typeof [1,2,3]` `"object"`
really ? what is your country, i'll fix that
Yeah , nativescript is really awesome ! I think this type of framework will be the trend in a few months / years
VERY little text, not worth it - blog spam. To the topic, I used both extensively, including regularly looking at and occasionally solving issues on Github (again both). TS is not any better and in parts a bot less strict than Flow. It isn't "worse" either, just slightly different. TS's big advantage is the "DefintielyTyped" repo with external lib defs. When setting up types, *both* not infrequently require much more work for the types than for the actual code - with the hope that it pays off downstream. Both are undeserving of the fanboy hype (especially TS), even if you (like me) decide to always use them. I recommend checking out issues on Github to see some of the many, MANY pain points people regularly have, It's great when it works (and then either TS or Flow is fine), and it can cost *a lot* of time when it doesn't - when the code being typed requires 10% of the effort of typing it correctly.
It's because JS arrays are not primitive arrays in the C sense, think of them as a list implementation. And like any JS object, you can add properties at runtime. That said, if your array is uniform and doesn't have any extra properties, browsers may be able to optimise it to a primitive array for a performance increase, which these shenanigans will prevent.
Does it unlock operator overloading to some extend?
Default in ubuntu is firefox, it should be ok there, don't know how tor looks like though, should test it from a droplet of mine. I'm not trying to be a dick or something. However, last year when I wrote the first version of a very large project for hospitals, 30 out of 60 people came with laptops running ie 9, not even 11, 9! css --mask was unnecessary, they could have only used plain svgs with preserveAspectRatio = "none"
I agree that would definitely be a dealbreaker, but I didn't see anything about ads? Unless you mean their tiny logo in the bottom right corner? That logo is just as discrete as HiCharts' logo, which is the best alternative imo.
&gt; You can use this functionality to e.g. clean up logs and not store sensitive information in a database Wouldnt that be pretty reckless to assume that your data will be processed with the native stringify method?
It says it on their website. The free version will have ads.
Not sure I understand. For cases like e.g. error monitoring sending data to a third party in an environment I control it seems to be okay for me?
It looks like toJSON still returns a data structure, not a string. So it still hasn't been serialized yet.
JSON.stringify will serialize the data structure into a string. The reason it looks like it's still and object is because I passed \`2\` as a third argument. This formats it nicely. :) If you drop this parameter it's a JSON string in one line. :)
All of these use cases seem to artificially justify using Observables for HTTP calls instead of just using a Promise. ConcatMap: Append HTTP requests and guarantee correct ordering. I'm not sure where your use case is. If the user double clicks a save button? Why not just disable the button until the save is complete? MergeMap: Concurrent execution of HTTP requests. We've had that, it's called Promise.all. SwitchMap: "The user types the first letters of the search query, HTTP call starts and user types next letters of the query." Debounce would also solve this. ExhaustMap: The use case presented is to stop HTTP calls on subsequent button clicks. Again, if your intention is to prevent future HTTP requests based on user actions, why not just disable the button? This is ultimately my problem with RxJS in the context of HTTP requests. It feels way over-engineered for this task. I question the architecture of a system that constantly gets into situations where the user is allowed to create so many requests that you have to start ignoring/cancelling them. I feel like the better use case for observables is websockets, where you've got N number of incoming messages that need to be processed.
&gt; it will not simply ignore the operation Unless the array is a [typed array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray).
It's pseudo-code not necessarily tied to any one language
Im just pointing out that I would much prefer this: var insensitiveData = RemoveSensitiveDataFromPayload(payload) ProcessData(payload) payload.isJSON = () =&gt; {//removesensitive data and return payload}
Fair point. :)
Hi, thanks for your comment. I agree that some of the cases can be easily satisfied with promises. When it comes to concatMap, imagine the scenario when you periodically (let's say every 2 seconds send a snapshot of your workspace to the server, like Google Docs). You have a timer here, so using this operator may be necessary to ensure the server receives requests in the original order. For switchMap, debounce may also be not enough. You cannot guarantee the order of network packets coming back to the browser and the displayed result. If network latency is greater than your debounce time, it will not work. &amp;#x200B; Of course, WebSockets are a perfect use case for RxJS, but using them for HTTP calls can be also useful. In general, when building a reactive architecture for your web app using streams is a really great choice as you can connect all your pieces together.
Although it *works*, I think the point was that sanitizing in toJSON results in too many assumptions to be secure. Namely, you have to ensure that the object is only serialized using stringify or some other method that calls toJSON. A more reasonable solution for something like export to a third party would be to explicitly include a method for sanitization or third party export, and then have some serializer call this.
You could always build it yourself const input = process.argv[2] const output = process.argv[3] Then just run your gulp-thingies `gulp.src(input)...` &amp;#x200B; Cheers!
Or this might be something, not sure: [https://github.com/gulpjs/gulp-cli](https://github.com/gulpjs/gulp-cli)
Hi /u/nigamshirish, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
``` const logger = (data) =&gt; console.log(JSON.stringify(user)); const loggerer = (data) =&gt; { var userString = ''; for(let field in user) { userString += `${field}: ${user[field]} |`; }; console.log(userString); }; const user = { name: 'dummy', password: '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', toJSON: function() { return { name: this.name } } }; logger(user); // good; loggerer(user); // bad ```
You are missing the regex range \[\] and that the string can contain multiple chars (\* or +). So the regex should be this: /\[A-Za-z0-9\_\\-\]\*/. See the \\ before the -. It's needed because - is reserved to declare a range. \* for 0 or more chars which match the pattern before. If you want to check if its at least one char than use + instead of \*.
You're right. That was lazy of me. Nothing wrong with asking for a "TLDR" for a 40 min video, I think, but that shouldn't have been a reply to a specific user.
Typescript every time. Definitley typed is awesome and has types for the most obscure of libraries. public, private protected support for classes. Better documentation than flow. Git issues are looked into and solved. Proper roadmap available.
Great explanation. Thanks for the examples
Thanks. Didn't know you could do that. I cant find an option for that in the gulp-cli
Try r/learnjavascript
A use case is a concrete application. Pure functions may guard against dangerous side-effects with dramatic consequences. They are often slower but not every application needs to iterate over arrays of 100k. And even if it does, it is likely going to be isolated places. In the 99% of other places, paying attention to purity will do good for you. Recommendations to dismiss it entirely for 0.01% performance increase does nothing but disservice to people with less experience.
[https://www.tradingview.com/gopro/](https://www.tradingview.com/gopro/) "Enjoy TradingView ad-free. Although the ads we show are native, and we carefully screen relevant advertisers, you can turn them off on the chart and the social pages." &amp;#x200B; I don't need any third party ads on my charts, can just use another lib. Not the best business model. It does not have that many unique features to switch to it and pay for "no-ads". &amp;#x200B; Am I missing something?
Lol someone has to use this technique to recreate some esoteric language
ADS??? In what world do you think that is okay? echarts is more feature-complete, free, ad-free, and all-around better than this library. So why should anyone ever choose this one over echarts?
Demo: [https://task-management-app.netlify.com](https://task-management-app.netlify.com/) Repo : [https://github.com/techlab23/task-management-app](https://github.com/techlab23/task-management-app) Article: [https://medium.com/@\_shirish/task-management-application-using-vue-js-part-1-df607ca30f48](https://medium.com/@_shirish/task-management-application-using-vue-js-part-1-df607ca30f48) I have a created a task management app, similar to trello to help developers learn how to break down larger user interfaces into smaller components. This is also a second article in the series of "Thinking in components with Vue.js". You can play with the demo, fork the repo, use single click to deploy on netlify from repo home page and i'm open to answer any questions you may have so please keep them coming. üî•üî•üî•ü§òü§ò
Also a nice read: [The TypeScript Tax - A Cost vs Benefit Analysis](https://medium.com/javascript-scene/the-typescript-tax-132ff4cb175b) by Eric Elliott. I'm using TypeScript not because it's useful, not because it's fun, but because I'm a consultant and I'm expected to know it for future tasks, including my current employer. None of the supposed benefits of TS have ever actually helped me out, or my team. In fact, TS reliably takes a LOT more time to get simple things done, and significantly more time with more complex things. I've seen people fiddle with interfaces and types and enums for DAYS, solving absolutely nothing, whereas without TS they would have a functioning set of code (*with* unit tests!) in about half a working day. When (past), if (conditional), and when (future) I get to choose, I would strongly advise to avoid TypeScript. But definitely learn to use it. It's like learning how to drive a stick shift car, yeah it's unnecessary, less efficient than an automatic, more prone to breaking down, and often frustrating, but sometimes you're in a car like that and it's nice of you know what to do. (TS = stick drive car, vanilla JS = automatic car). I think of TypeScript of being a severe downgrade to javascript. It's like they took all the pretty parts and made them ugly. And I (mostly) blame Angular for that. It allowed back-end developers to bleed into the front-end. Now everything is a `div` and your beautiful elegant javascript is suddenly strong typed for no good reason. `&lt;/rant&gt;`
Hi /u/stefanjudis, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/U4-EA, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
&gt; const newChar = shouldReplace ? toChar : char; shouldReplace = !shouldReplace; neat solution, standard in the industry?
Hi /u/kenwang92, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Kethlak, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ainsleyclark, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
The SVG has `preserveAspectRatio="none"` :D The reason I‚Äôm using masks is so I can re-use the same SVG for all the different colors, rather than creating an SVG for each color I need. Masking seemed like the easiest way to achieve that. And it still looks decent even without mask support.
We've tried out svelte and like the possibilities, don't know if the debt is worth it just yet.
Seems tricky to me as well. You'd normally expect the user to be itself so you'd only log user.name if thats all you need. I dont know, I just think its not nearly as "natural" as toString() since toString() has the purpose to be humanly readable (which is the only case I can think of where we ever use toString()). toJSON() seems to copy the design pattern but IMO without the usefulness
Blog spam
Hi /u/TheEpiphanyFactory, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Project Page (?): https://github.com/joeattardi/react-snackbar-alert *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
If you‚Äôre using it just for simple HTTP requests, it is over engineered. You don‚Äôt need it. A good use case for this is in something like iOT. Rxjs is extremely useful when it comes to managing streams of data so for example, you may have multiple devices that subscribe to and publish messages N number of times. Using a promise will not work as well or efficiently in this scenario and will eventually cause performance issues. But yes, you are exactly right and after using RXjs for 2 years, I agree with everything you‚Äôve said.
this was super tight, can't wait to put code like this up to production!
Gotcha. Sorry, didn't know that. And thanks explaining. :)
Could you explain what you mean by "debt" in this case? Just curious
Sure, for HTTP calls Promises work just as well as Observables. But there an infinite situations in which Observables work better, which is why we use them. And then you have a situation where you need to combine Observables with Promises (which sucks), because for some reason you chose to use Promises for HTTP where Observables would work just as well. Why would you ever choose Promises in a codebase that uses Observables?
Don't know. Maybe not. Just come up with this solution by fiddling around and then add comments for clarity.
If people needed to know a programming language before learning a programming language, they‚Äôd be really screwed lol.
&gt;If people needed to know a programming language before learning a programming language, they‚Äôd be really screwed lol. yes already screwd up my life not want to do it anymore that's why i posted here
Hi /u/TheEpiphanyFactory, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
JavaScript is probably the easiest language to learn. It‚Äôs a common a first language. That being said, you‚Äôll want to play around with a language that has static types. Without understanding data types, you‚Äôll be perpetually confused at a certain level.
Depends on the kind of work you want to do. Web developers need to have a pretty firm grasp on HTML and CSS, as most of JavaScript on the Web is about manipulation of those two languages. For backend or enterprise work, you can specialise in nodejs and not have to worry about those too much, but you're probably doing yourself a disservice by avoiding them. In some enterprises you'll need to know multiple backend languages and how to gel them together for different use cases, such as using PowerShell for interacting with AD. As for where to start: codecademy.com and do all the Web development, HTML, CSS and JavaScript courses. It's free and very easy to use.
I don‚Äôt know if this is funny or serious. Maybe both. JavaScript may or may not unscrew you. But it will help you make cool shit for web browsers. Go for it. Build things for web browsers. The more you build the more you‚Äôll learn. You don‚Äôt need to know anything other than what you want to build and how to use google search
English is advisable
&gt;That said, if your array is uniform and doesn't have any extra properties, browsers may be able to optimise it to a primitive array for a performance increase, which these shenanigans will prevent. I didn't think about this at 3 in the morning. Essentially, if it's a temporary addition on an array that won't be used again or rerun it's unlikely to make a difference as you're stuck with JIT either way. If it'll be reused, particularly several times, the compiler has a chance to optimize it which would make this significantly slower. Kind of limits potential uses, but it's a good quirk to keep in mind. Either way TIL, thank you.
&gt;Why would you ever choose Promises in a codebase that uses Observables? Because promises are native and supported by async/await syntax. I use both extensively, but you better bet I use Promises anytime Observables aren't completely justified. If, at some point in the future, Observables are natively supported and have nice syntax, I'll be happy to move everything over.
How does this solve actual, real-world, issues?
My favorite is when they say "JavaScript frameworks, like React, Vue, and Angular". Which one? Do you even know? All of them? Jeez, I hope not.
&gt; I'll be happy to move everything over What do you understand under "nice syntax"? `then()` instead of `subscribe()`?
As I said, async/await. Completely eliminates `then()`.
Yeah, you're fine. It helps to know _some_ html. As a first language, you often want to be up and running, creating world class programs by day two, but often you end up stuck at a command prompt, only able to throw letters and numbers back at yourself there. With JavaScript and HTML you can easily create visual interfaces that you can use code to interact with. That's one of the great things about JavaScript as a first language. It may not be the best for learning classical computer science, but its great for being able to see (and share) results quickly and fairly easily.
Seriously? Fuck off already
You honestly sound like you just started developing a few months ago. Just stop
As always with RxJS, the docs are obtuse, the learning curve is a vertical line and the situations where you really need it are extremely rare. The effort/reward ratio is just terrible with this library and I'll never understand why angular is forcing it on everybody.
Depends on what you want to do. Are the build files doing what they're supposed to?
IMO at this point it's a just a matter of preference. React if you want to do things in a javascripty way Angular if you want to do things in Java EE way Vue if you really liked AngularJS and can't let go
Rather use flotcharts or better yet ChartJS if you want to use canvas charts. flotcharts might not be actively maintained anymore, but is pretty much feature complete and the fastest rendering lib (for canvas) that I've seen/used. ChartJS is actively maintained with much more flexibility and a few chart types that flotcharts does not offer. TradingViews looks in its results exactly like ChartJs, though...just with a branding/ads.
And you sound like a child. Do you want to actually reply to my comments, or pout?
It depends on what you need to achieve. Grunt and gulp as task runners were great for doing all sorts of odd jobs I once had a task to bundle all my assets into a zip which I did with grunt and then gulp. If you need to compile sass or perhaps es6 webpack or parcel could be good options. If there are any custom tasks that you need to port you may need to write node scripts to do them which you will have to take into account. There is no wrong answer, you just have to know your requirements. Though webpack or parcel would probably be a good idea
If what you are saying was true, there wouldn't be so many Rx (reactive extensions) implementations for other languages.
Since you said you know some HTML, it doesn't hurt to start somewhere like here: [https://www.freecodecamp.org/](https://www.freecodecamp.org/)
So because the dev have ported their library to different languages it's now suddenly good? I have no idea where you're trying to get at.
It doesn't eliminate `then`. it's just obscured by the `await` keyword.
Can you compile like grunt does with for example 'grunt build' with webpack?
&gt;So because the dev have ported their library to different languages it's now suddenly good? I have no idea where you're trying to get at. I am saying that RxJS in general (like Rx in general) is useful when you know when and how to use it. If something has a steep learning curve doesn't mean it isn't worth it.
That whole article could be summed up (optimized ;) ) by simply repeating Donald Knuth's ‚ÄúPremature optimization is the root of all evil‚Äù ... ... but it's such an incredibly important lesson for devs to learn I 100% support its repetition.
Obviously! But it completely eliminates *writing* \`then\`, and by doing so reduces nesting and extra functions (superficially, yes, but when it matters) thus simplifying syntax. Async/await, or similar syntactic sugar, is not available for Observables yet. &amp;#x200B; I'm truly, honestly confused why I'm getting downvoted and attacked for this very simple and objective statement. I would seriously appreciate it if someone could point out if I'm being factually incorrect or rude, I'm completely at a loss here.
It's good to have a good idea of how pointers and stuff work, but you should be fine... just understand passing by reference and passing by value.
Sure. You can install webpack plugins which handle different processes like compiling CSS or gzipping. Then you just write some config to tell it which files to process
Sure. You can install webpack plugins which handle different processes like compiling CSS or gzipping. Then you just write some config to tell it which files to process
Since this for an assignment you would have to change "const result" to "let result" and assignment it in one of the branches. let result; if (!conditionA) { result = something; } else if (conditionB) { result = somethingElse; } else { result = iDontKNowWhat; } const a = result; The problem with this is, in the scope of "const a = result;", a static analysis tool would say that 'a' is being assigned an uninitialized value.
Most of the article (there's also some tooling suggestions at the end) could be summed up or "optimized" (to borrow from the article ;) ) by simply repeating Donald Knuth's famous quote: ‚ÄúPremature optimization is the root of all evil", along with another common bit of programming advice that I don't know a good quote for: "keep your code readable" ... ... but both are such incredibly important lessons that I 100% support their repetition in this article.
Study logic
I'm all about code formatting and good-practice (e.g. using const). I'm not sure that I need to warned about every console.log in my code. It's distracting to work flow and AirBnB marks a lot of things as erros that could be warnings. &amp;#x200B; Is 'comma dangling' the requirement for a comma to be after the last element in a static object?
Push monkey is also offering [web push notification](https://getpushmonkey.com/) marketing. Give it a try folks.
This is actually disgusting.
Great question! Not really. This lets you make any variable identifier resolve to any value, but you don't get context about how the identifier/value is being used: `a+b` and `a,b` are the same from the perspective of the Proxy. The execution of operators happens outside of accessing the values being operated on. You can do some fun fake-y things with functions, though. Here's a function called `whichId` that returns the name of the variable passed in as an argument. (This works by having the proxy store each used identifier in an external var called `lastId`, and then have the function return `lastId` when called). var lastId; function whichId() { return lastId; } with(new Proxy({whichId},{ get:(o,s)=&gt;(lastId=s,o[s]), has:z=&gt;!0})) { whichId(foobar); }
Hi /u/bigfatmuscles, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
See also, https://softwareengineering.stackexchange.com/questions/57/tabs-versus-spaces-what-is-the-proper-indentation-character-for-everything-in-e
I kind of did that with an earlier iteration of this idea, by using certain prefixes to serve as operators: [https://repl.it/@apsillers/withinsanity](https://repl.it/@apsillers/withinsanity). It's not as snappy as the final talk, though. Using a \`$\` as a signifier in var names (as I did in the final example) could make this approach a bit cleaner.
not clear. What countries do you support and do all numbers have the same price per sms?
Nobody said it doesn't look decent, but it doesn't render on ie, that's about it. Obviously some time has been spent on those arrows and the theme, so it is not a bad idea that the theme renders everywhere with ie 9+ so your work is seen by all. And if you have preserveAspectNone, it is great. I can see how `cloneNode(true)` or `use` element from svg can pretty much achieve the same thing with css. Not easier than masking, but renders everywhere.
Tabs. Takes only one key press to type and delete. Tab size is configurable.
You are not incorrect. But again, combining promises and observables isn't really clean and I don't see a big problem with one callback in subscribe/then vs using await. I would argue await is even an anti-pattern, since you will block the execution of the everything after calling the awaitable, which isn't case for subscribe/then. In the end you can do await someObs.toPromise(); if you really want to.
Tabs for indentation, spaces for alignment. Best of both worlds - I can then adjust the indentation width in the editor (by configuring how long the displayed indentation shall be), and can still align bits of code in a fixed manner.
Thank you for taking the time to answer! It seems like a good cause and I applaud your effort! Looking forward to hearing more about it (and trying it out) in the future!
Settle in a little. Get a sense of why things are the way they are. Propose a migration/refactor plan and do it gradually.
With a good editor the same configuration is also possible for spaces
What would adding a language transpiler fix? The dependencies are still outdated. Do they even need to be updated? Unless they are based on a framework that has reached LTS, it might not be necessary or worth the effort to update the library versions. We recently migrated to TS only because our app was written in Angular.js 1.7.x and it took a considerable amount of effort to update to Angular 7.
we are not even using es6 features, all is declared with var, dependencies are outdated, do you consider that as OK? you dont want dependencies that are 7 years outdated, you want up to date package json allways, prove me wrong if its necessary
With a good editor it doesn‚Äôt matter.
I‚Äôve started using Sentry on a personal project, and it seems nice
Yes, that's a good advice! Thank you!
i will have a look at this! THANKS!!
Yes, i think so, this is my first day and the code is very bad
I‚Äôve learned about myself that, although I prefer tabs personally, I‚Äôm cool with either ‚Äî until they‚Äôre all mixed up and combined in the same file. Then I get sad.
We also use [Sentry.io](https://Sentry.io). We had a trial account and transitioned to a pay account to monitor our client side issues (and we also route our Java errors on the back-end through it as well).
Sentry can capture and report exceptions. New Relic can do the same and adds performance monitoring. I‚Äôve had good luck with both.
On phone so can't format, but to replace all 0s you would do: str.replace(/0/g, 'somechar');
It depends on the project and what the priorities are. You don't need TS to use ES2015+ features. You can use Babel and continue using JS. Also having outdated dependencies is not always a bad thing. Unless there are serious security concerns, or the new version has features you need for development, it might not be a priority to update. So you need to decide what's important and best for the team and change things as needed.
By surrounding the first parameters with quotes, you're replacing on a string not a regexp. Use / for regexp.
SOLVED! Thank you so much. I can‚Äôt believe it was that simple and that I didn‚Äôt need the quotation marks. well that‚Äôs another thing I‚Äôve learnt today üòä thanks
Yes, that is what comma-dangle refers to (that and arrays). I hear ya, and honestly if you are working on a project by yourself then do whatever you want. But when you start working with a team, consistency is much more important. I don't want to reverse engineer someone else's code every time I jump into a new project. &amp;#x200B; I agree that airbnb is not perfect, which is why we've adjusted it at my company, to more closely fit everyone's liking. It wasn't the easiest process to all agree on, but it has made an enormous impact on our productivity. Code reviewing a PR is so much easier now, and we can focus on important things like architecture, patterns, paradigms, and naming, rather than on basic issues and arguing about style.
Was hoping this would go into some common JavaScript performance issues. My favorite has been using reduce to structure an object from a list of data (usually objects). The common use case is to make a lookup map. Reduce is literally the slowest way to get this done despite it being the most popular answer.
I programmed for many years with out es6 and did ok lol. I use it now but not having it is not a big deal.
I made a simple service to push all client js errors into elasticsearch for the project I work on. That's pretty simple, just POST some JSON when error handler is invoked. There is a js error reporting client for elasticsearch that could probably handle what you are looking for.
Fun fact about replace: the second parameter can also be a function. This allows you to pass a function that handles the character replacement. This can simplify the logic if you have many characters to replace, instead of chaining replace. For example: var charmap = {"0": "O", "1": "I"}; var thestring = "1234567890"; var endstring = correct(thestring); alert(endstring); function mapchar(char){ return charmap[char] || char; } function correct(str){ return str.replace(/\d/g, mapchar) } The above would output "I23456789O".
You can do it but it's going to be painful
Your blog name is EnmaScript yet your logo is a self-closing XML tag üòú
Hi /u/KirstLM94, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/sebaseek, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/DazzlingBelt7, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
&gt;painful Why?
Hi /u/noobDMquestions, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/sebaseek, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/systematical, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Just as a tip - don't disparage the code in front of other developers, especially of they were the ones who originally built it. You'll get further ahead if you offer suggestions to improve the code instead of just slagging on it. (sounds like this post is a good first step! üëç)
Getting the math right for different screen res combined with different PDF res and figuring out where that dot is when PDF is scaled
Fuck this
``` function main() { fireAwait(); // non-blocking } async function fireAwait() { await fetch(url); } ``` It‚Äôs only ‚Äúblocking‚Äù if you care about the result. Just like with .then(). If it‚Äôs fire and forget, it won‚Äôt block anything.
React is a component standard, when you make UI there's nothing that's a more natural fit than components. Even the smallest website benefits from a proper component model. It also may scale up eventually, or you may want to be able to use components that someone else made, for UI matters, animations, etc. If you start a new project in vanilla js, for whatever reason, then yes you save 30kb, but you will end up with more code, more complexity, and you're on your own. &gt;What are its strengths and weaknesses vs using server side script? I wouldn't worry about SSR. There's so much you can do before you ever hit a point where you would need it: bundle optimization, code splitting/async loading, etc.
EnemaScript lamao
Here it goes: 1. Basically any web app (you can build any frontend app with ReactJS) 2. I currently use ReactJS if the customer requires it. I would definitely recommend it though. But because of that, on one of my projects im using VueJS just for fun and to learn that too üòÅ 3. Strengths: sooo many. As a frontend framework, it helps you keep things clean and organized. It also allows you to think in design, as you code Components (pieces of functional design). It's really robust. You can find lots of tutorials / advice / help over the Internet. You also have a large range of already made components that you can integrate in your projects or you can code your own (really cool!). Weaknesses: not the easiest learning curve. Give it some time and patience. Advice: make sure you go to the "Thinking in React" article (Dan Abramov) from time to time, until you master it (google it) In summary, React is a pretty modern, capable and versatile tool for web/frontend dev. Besides, it pays pretty well too üòÅ Best of luck!üëç
1. Technically, no project would necessarily *require* React. When building larger/complex/highly interactive UIs though, it definitely helps. React shines with helping boil down larger UI requirements into smaller, maintainable, and composable pieces. 2. Lately I have been using React in some way or another on most projects, but this is more of a personal preference. With tools like [Gatsby](https://www.gatsbyjs.org/), using React for even simple websites is a breeze. 3. Some strengths would be : reusable components, rendering speed (react has a reconciliation algorithm that allows for efficient DOM updates, to put it simply) and the ecosystem (lots and lots of resources to learn, open source packages, etc. Some weaknesses would be: Poor SEO, some crawlers only capture a webpage before the javascript has loaded, server side rendering would be better if SEO is a priority. Also, it is a special "flavor" of Javascript, meaning that you should know the ins and outs of javascript before you dive into React. This isn't really a weakness as much as it is a trap to some people that only learn React but never learn the language it sits on.
I think you're mistaken. Their main product, which I use, is the full-featured charts at tradingview.com. That product comes at a monthly costs, with a free version that contains ads. The lightweight charting library which you can include on your own page is free without ads.
See my reply [here](https://www.reddit.com/r/javascript/comments/bwmh5t/free_new_lightweight_chart_library_with_beautiful/epzjjwa/). The plans you are linking to are for their main product, not the lightweight charting library
Stop bullshitting. It's right there on their website. Someone else in the comments here pasted the text.
If you actually considered the facts presented to you, you would realize that I'm not bullshitting. The text that someone else posted is for a different product from the same company. I know this because I'm currently paying for that other product, because it's something that's actually worth paying for.
Stop lying.
I can't tell if you're just trolling at this point, but... if you can tell me where it says that the **lightweight chart library** that I posted contains ads, I will delete this post. If it were true, I would agree with you that the product is bad compared to all the actually free alternatives.
The whole promises spec can be fully understood in 5 minutes. In a couple hours, you can fully implement promises from scratch. A couple more, you can implement coroutines (precursor to async/await) In comparison, RxJs seems like a never ending minefield of thousands of little functions to learn, and all kinds of race conditions corner cases and such. Sticking to promises and EventEmitters seems to keep the whole level of complexity down without needing quite some much infrastructure.
Don't care.
Your article is fine, I didn't say anything about that. I just hate angular's decision of pushing rxjs hard when I don't think it's necessary 99% of the time.
make sure you didn't miss my last edit, my good dude. Thanks for keeping me entertained.
React is great. I won't say it is always the right tool (hardly anything ever is). However, for modern development of web apps it's the way to go. React gives you an easy way to create UI for your app and keep it up to date when things change. Traditionally this is difficult to do. It also provides a single page experience so it feel more like an application and less like browsing many different pages. This is a big advantage over traditional server side languages like PHP or JSP which generate a static page based in the request. You get much nicer error handling and user interactions this way. When NOT to use react: - Your app needs to be extremely small (think plugins to make services such as PayPal or Shopify). The smaller the better in these cases since your code is running on someone else's page. - Minimal UI. React is all about UI if you don't have a lot of visuals it's probably overkill. - Non-standard environments. Platforms such as IoT which do not have full browsers may not be a good fit for react. These cases need to be evaluated on a case by case basis given the exact environment and committee resources available.
Hi /u/craxy1337, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
without rust-match: const type = {...}[contentType] || defaultType
Hi /u/DeeEssX, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
npm is junkyard, like android store
Hi /u/drawn-curtains, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/t0mbombadil, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/nigamshirish, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/kapilahir, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
SHOULD. INSTALL. THEM. ALL. INTO. MY. NODE_MODULES.
Gotta catch 'em all!
Good rule of thumb in general: if there is no problem, don't try to solve it.
Plus, if 30KB really *is* too much to add to your project, you can use Preact instead, implements the same API in only 3KB. It's neat to have multiple compatible implementations of the same idea.
Will be interesting to see how the GitHub Package Registry changes the landscape. If nothing else it will centralize.
I would only use it for small stuff that could be rewritten in Vue or React within a couple of days.
How does this compare to other frameworks like anime.js?
The library OP linked doesn't contain ads, it's open source if you follow the link you'll see a button "Get library" which directly links you to the GitHub page https://github.com/tradingview/lightweight-charts The same people that make that library, also make a seperate product that has a free ad supported option, or a paid option. I have no clue why you were upvoted so much, because it literally takes 2 seconds to confirm you are wrong.
Not everyone uses async/await. It's a personal preference, not a given that it's just better.
More than half of my component/service properties in Angular applications are Subjects/Observables. They are more than useful.
It's not really fair to compare promises to Rxjs. It's more accurate to compare promises to observables. Rxjs is an entire library for observables with tons of operators. Yes, Rxjs has a steep learning curve. But it's very powerful. I wouldn't learn it just to do a few simple things, but once you already know it it's a nice tool. What do you mean with race conditions? I've never ran into any issues with race conditions using Rxjs.
So, "This thing sucks because I don't understand it". Yeah, it's probably too much for a lot of situations. But it's a powerful tool and also the amount you need to learn and understand to make an Angular application isn't that bad.
Your comment makes me very happy, I am always trying my best to work with the team, so we learn all together, thank you
haha, it could also be a self-closing component in JSX :)
So, for example, if there is a lot of code in js with old dependencies versions, and it's a big e-commerce who with high load, not updating dependencies in a long term project is OK?
Mind if I suggest simply opening an Internet Explorer (if necessary in a VM) and just trying it yourself, or bookmarking this page: [https://caniuse.com/#feat=es5](https://caniuse.com/#feat=es5) Considering your incrementing an unknown variable i after a previous return, this subreddit might be of interest to you as well: /r/learnjavascript
Not a fan of this library, but the lightweight charting library (which OP posted) does not have any ads. The separate, main product does have a pro-version and a free-with-ads version. Dude might be a shill, but he isn't bullshitting.
what we have learned is that JS desperately needs a more robust standard library to bring it in line with most other programming languages because we can't trust individual developers not to do silly things like depend on modules with wildcard version numbers that are just a few lines long.
I'm not saying it is ideal. But, it's your responsibility to ask questions about the current state of things. Have they been short staffed? Are newer versions not compatible with each other? Have they just been negligent in updating legacy code? You might have to bring up compelling points about how it's in everyone's best interest to start using a module bundler, add a transpiler, change package managers, update dependency versions, etc. Ultimately, it's their choice on how to wanna use their dev time. There are reasons why banks still use COBOL.
NPM is centralised. what concerns me, as a programmer, is, instead of having a central repo like npm, package management will get worse because now there will be a million repos, for any language. Some dark days ahead I think :(
I think it is because it's an immutable update pattern, probably from Redux's examples. Keeping your functions pure is nice but this is probably taking it too far, particularly if you're working with a lot of data.
NPM is centralised for JS, but as I understand it, GitHub repository will bring Python, java and other ecosystems together to create a cross language, central place to get packages from.
How Long would it to npm install all packages in npm? Mission accepted ü§£üò≠üôà
the way I understood it, it means anyone can host a package repository. now, there are some benefits to this. For example, often if you want to use a snapshot/development/beta version of something, you have to point directly to a git/svn repository, which doesn't always play well with tools like Nexus and Artifactory and so on. But considering the JS community's extremist view points on modularity I am expecting that adding a dependency will now require you to add its package repo location along with it.
LOL, you're nuts. obviously that's not all the code. You obviously don't understand the question.
[Many years later...](https://github.com/tc39/ecma262/issues/395)
I see, well then, good luck on your endeavours.
You can disable branding via API if you wish.
Hi /u/rare_design, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/TuckerMcInnes, please refrain from personal attacks. Thanks.
You were sarcastically passive-aggressive, and now try to play it cool. I have a fully functioning JS app I wrote and works great in modern browsers, but IE11 chokes on it. Hopefully one of the other 604,999 members will be helpful and have a good attitude about it.
Could you suggest a google search term that would give me this info then? I couldn‚Äôt find anything which is why I asked here
Yes. `Array.prototype.filter` is supported in IE9+ as per https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter#Browser_compatibility. The code in your filter is a little strange though; `i++` is never going to execute as the `return obj.myPropA === myVarA` will always return early.
Did they ever implement basic scanning of the packages to make sure there isn't any malware or bitcoin mining going on?
Is the faster way a for loop with a mutable object you write to?
Happy cake day
Hi guys! &amp;#x200B; I wrote an article about building a CLI in Node with Oclif framework Article - [https://medium.com/@korzio/a-modern-way-to-build-a-cli-with-oclif-in-node-b7bb0df86623](https://medium.com/@korzio/a-modern-way-to-build-a-cli-with-oclif-in-node-b7bb0df86623) Tweet - [https://twitter.com/AlexKorzhikov/status/1135863242364989441](https://twitter.com/AlexKorzhikov/status/1135863242364989441) Also planning to make a free webinar this Sunday 9th of June. Would appreciate if you can repost Thanks!
I was snarky, oh yes. Because your question is a low effort post. But not passive aggressive. What's so difficult of trying this out on IE with some dummy JSON object in a filter function? You don't have IE available? Use a VM. Can't do that? Fair enough, take a look at the table on caniuse and bookmark that page as it is *incredibly useful*. The spec says via caniuse that IE supports filter. That is your answer, yes it works in IE. What you put into that filter is a separate question. What you put into that function is a JSON object literal. That is supported by IE since forever. When IE still chokes up, it's not that part of your code. Maybe your JSON response is flawed, maybe the concatenated code line just doesn't work. Who knows, you just gave one line of code. You're making blatant rookie mistakes (i++ after return doesn't do anything for one, no matter the rest of the code) and being defensive about it when someone points that nonchalantly out. So I am not playing it cool, I am (after this really) turning away from a toxic response that you gave me twice now when I clearly pointed you to a resource that answers your question. So, good luck with whatever you wanna do and don't take everything like a personal attack.\~
&gt; It's not really fair to compare promises to Rxjs There are often many ways to sovle the same problem using promises instead of observables. &gt; Yes, Rxjs has a steep learning curve. The learning curve is not the problem, the clutter is. &gt; What do you mean with race conditions? observables can be hot and or cold. Also, error handling may not always work out the right way.
Good catch on the i++ as that was leftover from testing. Sorry for the confusion. I found the issue. IE11 does not handle array of objects as an object, and is instead a string, so I check and parse. if (typeof(getDataFile.response) !== 'object'){ var data = JSON.parse(getDataFile.response); } else { var data = getDataFile.response; }
Heh. Good luck.
Js will be around for a loooong time, people have been talking about PHP phasing out and 90% of the internet still runs on PHP. These newer technologies will probably just add new experiences on the internet like smoother game play.
It won't replace it and if it did, it won't be in our lifetime...Javascript is probably the most popular language in the world right now. The paradigm has never been such that anything in programming is "replaced"...everything sort of shifts to share space with the new stuff.
Yes the immediate need low hanging fruit like games will get updated right away. But here‚Äôs the thing if wasm is just a subset of js but much faster and I can use a language I may already be using for back end work why not just move. Additionally I saw this article from one of the guys who created docker and he thinks wasm can even be used on backend
If I'm building a CLI I use Go so users don't have to npm install, they just get a single binary.
Good question. I've never used the full-featured CLI framework but rather the library to parse the arguments. Something like yargs or minimist . Also, quite nice link that can help to shed some light on the popularity of these libraries [https://www.npmtrends.com/commander-vs-yargs-vs-oclif-vs-minimist-vs-vorpal-vs-inquirer](https://www.npmtrends.com/commander-vs-yargs-vs-oclif-vs-minimist-vs-vorpal-vs-inquirer)
Yes, but I wouldn't be surprised if the JS Compilers eventually create a more optimized code path for these kinds of patterns. Generally, I prefer the reduce, since it looks cleaner to me... If there are demonstrable performance issues, I'll then refactor. I will tend to favor Object.assign(agg, ...) in my reducer though, instead of {...agg, ...}, to gain a little bit.
True, that's cool! There are some ways however to make a binary from JS (see [https://oclif.io/docs/releasing#standalone-tarballs](https://oclif.io/docs/releasing#standalone-tarballs)). One of the pros in our CLI design is that we mostly distribute it as Docker containers running on CI/CD, so users don't need it unless they really want to use / develop it locally. And we have lots of contributions because of that.
Yep, yargs and minimist are good old libraries. Thanks for the link, missed it!
No... but it will displace it in some instances and offer more options. I know there are some developers who'd rather jump through massive hoops than actually learn how to use JS well. Blazor is the most recent example, but there have been many over the years and most of them rather still-born. I do think that wasm will offer a \*LOT\* more as standalone runtimes become more readily available and that things like electron and node will be even more useful. I'd love to see something similar to a wasm runtime with canvas and webgl support without too many extras beyond those two interface options.
&gt;There are often many ways to solve the same problem using promises instead of observables. Well yeah of course there are haha that's the point, they both solve similar problems. The point stands that comparing "Promises" to "RxJS" the way you did doens't make any sense. &gt;The learning curve is not the problem, the clutter is. You don't have to use all of the operators. The amount you need to know in order to use Rxjs is a small fraction of the total library. &gt;observables can be hot and or cold. Also, error handling may not always work out the right way. That doesn't mean there's race conditions? It's just something you have to be aware of. I'm sorry but your criticisms of RxJS aren't making much sense to me.
I only know Commander from your list, that's the only one I used
Obviously yes, given the amount of JS development going on. But don't worry, Rust will catch on one day.
A little old fashioned one, but still good! Btw, I didn't know retirejs node part is written on it - [https://github.com/RetireJS/retire.js/blob/master/node/package.json#L16](https://github.com/RetireJS/retire.js/blob/master/node/package.json#L16)
Not this guy again...
The i++ was leftover from testing. No, you didn't understand the question. "Can IEqq filter on 'AN ARRAY of OBJECTS'". I fixed it using: I fixed it. It really was just related to how IE handles array of object parsing. I just parsed it if it wasn't an object already. if (typeof(getDataFile.response) !== 'object'){ var data = JSON.parse(getDataFile.response); } else { var data = getDataFile.response; } Why? Because it turns out that IE improperly casts the array response as a string, rather than an object. Good luck with your attitude.
/u/Funwithloops First of all thanks for your suggestions and review, I really appreciate it. I am always open to improve weak part of codes or mistakes. I will probably incorporate few of your points, for example: - exporting ENVs from Env file: I was thinking about that for longer time Few other notes regarding your points: &gt; ‚Å†if (isNaN(portNumber)) return DEFAULT_PORT; ... You‚Äôre right, that would be better way. I‚Äôll fix it. &gt; ‚Å†You probably shouldn't load both .env and .env-local... The idea behind this approach is that ‚Äò.env‚Äô is commited into git and serve as an example (kinda). Non-sensitive variables can be stored in this file. The ‚Äò.env.local‚Äô file is not commited in the repo and variables placed in this file is overriding variables from ‚Äò.env‚Äô. Honestly I‚Äôm not sure if I know what you mean by ‚Äò ‚Äòconfig.ts‚Äô file &gt; Lots of confusing/redundant naming... You‚Äôre right the naming could be improved in few parts of the code. But you know - naming and cache invalidation is the most difficult parts in programming as smart people say :) &gt; Why use "controller" classes? CommonController doesn't take any arguments or store any state, so you could just define its methods as functions and you wouldn't have to instantiate it. In this minimalized case you‚Äôre probably right but in my projects controller classes are normally bigger and do some initialization, also instatiate db access classes etc. &gt; You could remove CommonRouter entirely and just export the express router it creates. I was used to put all routes in one gigantic ‚Äòapp.routes.ts‚Äô file but the bigger the app is the more confusing the ‚Äòapp.routes.ts‚Äô file can be. So I like to split router by more smaller logical parts (user roter, common router, auth router etc.) and then just import it in ‚Äòapp.router.ts‚Äô &gt; This one is a bit controversial. If you're not using the built-in middleware and/or template rendering features, Express doesn't offer much over Koa. Even though I‚Äôm a big fan of async/await I am quite happy with Express/TS combo. It‚Äôs pretty simple, minimalistic and it always served me well. Koa could be fine but I do not see any real benefit in investing my time to learn new technology just to replace very similar one. Anyway thanks again for your notes. If you have or know about any advanced nodejs app repo let me know. I always look for improvements or different approaches of app architecture.
I think wasm is very useful for large web applications (and I'm in the process of transitioning my large web application to Rust/wasm at the moment). However, if you just want to make a fancy blog, JavaScript makes much more sense, because it's way less overhead. For example, the wasm module of my concept demo for the transition is 570kB, and that's just 822 lines of code. I don't think that it'll grow a lot when I add more code, but for small web pages that doesn't make a lot of sense. I also don't see this changing in the future.
Going to take a shit-tonne of time. Soooo many libraries and pre-spun stuff that's "good enough" for so many things. Sure, the WASM ecosystem will grow and /maybe/ engulf the JS ecosystem, but that's a long ways away. I feel like we're going to see JS mounted on WASM before we see the "death" of JS.
People will publish any old shit. They should have a policy like if no one downloads it for a year it gets removed
I think I must download half of them every time I do a npm install.
@rmrf\_slash\_dot, I've released the React package for Embla Carousel now: [embla-carousel-react](https://github.com/davidcetinkaya/embla-carousel-react). Until I've updated the readme you can see an example of how the package is consumed [here](https://codesandbox.io/s/embla-carousel-react-znjzv) =).
NO WORRIES MAN they already come as dependencies of your dependencies.
CLIs in Node? I stay away....
For real, I always find the whole enterprise argument hilarious considering Angular is not proven or battle tested in real world apps, nor is it stable since no major services use it, not even Google. The whole framework was built to be a product rather than a tool, so it‚Äôs designed with lucrative consulting/support contracts in mind hence the buzzwords and huge marketing behind it. React on the other hand was built as an internal tool initially, only to layer open source thus everything is backwards compatible and tested heavily. If React breaks it costs FB and major companies lots of money, if Angular breaks it makes Google money since they get to charge enterprises to help fix the problem. Note to newbie devs: always avoid ‚Äúframeworks‚Äù with heavy marketing, buzzwords and major promises. Those frameworks are products, so the documentation will be vague, the underlying workings will be hidden and you‚Äôll be pushed towards hiring consultation when you want to implement custom business logic(which will happen). Now Angular isn‚Äôt the worst of these, it‚Äôs pretty Flexible so you‚Äôll be ok if you pick it but stay away from StrongLoop or Apollo
Awesome! Thank you... will report back
Iterate over the object within a recursive function function findProp(obj, name) { var props = Object.keys(obj); for (var i =0; i&lt;props.length; i++) { var prop = props[I]; var value = obj[prop]; if (prop == name) return value; if (value &amp;&amp; value.constructor instanceof Array) { for (var a =0; a&lt;value.length; i++) { return findProp(value[a],name); } } if (typeof value == "object") return findProp(value,name); }); return null; } Please check for typos. Hopes this helps.
For anyone trying to emulate clicks on iphone. Add this to the top of the script: document.addEventListener('touchstart', (e)=&gt;{document.documentElement.click()},false)
That's a very sane position on performance! But then... don't forget to test on old smartphones to check if performance really isn't a problem.
Enemascript.com FTFY
[removed]
It solves a slightly different problem there, moving shit around thread pools without too much boilerplate.
You could always take the [WordPress REST API](https://developer.wordpress.org/rest-api/) and use it with your JS stack of choice.
Ghost
They flag packages now as needing updates (Critical, High...etc) but the only other tool I have seen that says they can do this is snyk though I have not tried them. (They are free for OS). There are other tools that _say_ they can but I have not gotten any value out of any of them.
https://keystonejs.com/ https://strapi.io/ https://www.canner.io/ https://ghost.org/ Are a few headless cms/frameworks that are pretty easy to work with if you don‚Äôt have to build something client facing. Having explored all of them for our solution, I‚Äôd say Ghost is the most akin to WordPress in terms of what it‚Äôs been built for (websites). The most flexible is strapi but this is from more of a catch all headless cms requirement. All of them have docker containers to help get up and running pretty quickly and are pretty well documented. Hope this helps.
What most likely will happen is that JavaScript will remain the glue code tying everything together and providing base interactivity. What WASM will probably bring is functionality JavaScript couldn't do before. Think of Python supposedly being good for machine learning. None of the main libararies are written in Python. It it just interfaces with them. And it only made it more relevant than ever. My prediction is that same will gonna eventually happen in front-end. Expect some powerful API's for your JavaScript applications to interface, which would be as powerful as browser API's just tailored to more particular needs.
Congrats on finding your purpose in life.
You need some technology to write a CLI? I've never heard of such a thing. I always start at the command line. This is just one of the most bizarre things I have ever read.
 [https://github.com/jquery/jquery/blob/cf84696fd1d7fe314a11492606529b5a658ee9e3/src/attributes/classes.js#L112](https://github.com/jquery/jquery/blob/cf84696fd1d7fe314a11492606529b5a658ee9e3/src/attributes/classes.js#L112) You can see in the source code it checks specifically if it is a valid parameter type and only executes the code if it passes that check - otherwise it ignores it.
TypeError: Object.fromEntries is not a function[Learn More] async-worker:55:27
Yes but if second parameter is invalid, just ignore it? shouldn't it warn developer that passed parameter is invalid?
If you are familiar with wordpress I would personally stick with it for the CMS portion. Check out [Gatsby](https://www.gatsbyjs.org/) for a fresher developer experience and a blazing fast site. You can query content directly from wordpress with their source plugin and build static pages that hydrate into full-featured react apps. IMO, this is one of the most exciting projects out there and allows for so much flexibility in the backend, allowing to use existing systems without letting them drag down user experience.
I am just transitioning from angular to react and the last two days I have been researching how to wrap an observable around the axios promise. I've come to the conclusion that I will be ditching rxjs.
You just need to know to write `.subscribe` instead of `.then` and, voila, you have +1 dimensional promises. If you really do need fancy `switchMap`s, `flatMap`s etc., you probably actually need observables anyway.
I don't think you know what race condition means. Also error handling works perfectly. Well, if you know how to use RxJs, which I believe you don't.
Ah so your question is more why it doesn't tell you - well they have documentation on how to use it correctly - so most libraries do not bake that in unless it is a common issue or they want to deprecate something, etc. You could also use typescript / flow / etc to help ensure interfaces are satisfied with the correct types. There are a lot of ways to handle what you're talking about - but I would say it is uncommon for a library (unless it has a way to flag dev or prod versions / etc) to bake in that kind of logging.
How come?
Ah, my bad, forgot it has poor browser support, will change It to a es5 implementation
There goes mcdronkz again, taking all the fun out if over engineering.
I always assumed it was the syntax that was attractive; "reduce, it's functional!". A `for` loop just doesn't look as clean.
I've used yargs, commander, and vorpal. No problems with any of them. Commander is great for simple CLI's, I preferred Vorpal for more "custom" interfaces (multi-color output, font changes, etc.)
Creating a new object should be similar I think ^please ^correct ^me ^with ^benchmarks ; it's the for loop that's better optimized in most engines.
Thanks for answer. Actually i think most developers can't memorize documents fully, they often can't remember what's exact types and definitions of functions. everytime i do a javascript project, most of my effort is on debugging. and it's not just me. i saw alot of people have debugging problem with javascript. i can't understand why jquery/js don't throw errors or warnings , to make development alot easier. i probably will use typescript or a type checker, but i can't understand why it forgive developer errors (it don't even rise a warning).
https://www.reddit.com/r/node/comments/boeq52/a_step_by_step_guide_to_your_first_clicommand/enhdflv/
Probably better to avoid describing actively maintained JS packages as 'old' - unfortunately that's frequently used as a criticism in the fast-moving JS world, so consider describing mature, widely used libraries as 'solid' or 'well-established'. Yargs, for example, was last updated a couple weeks ago and is very well tested and documented full disclosure: I'm a big fan of yargs :)
&gt;Learn how to build Task management app using Vue.js Sorry about that. I have just posted the link now. Hope that's okay. Thanks Shirish
I have written this article on how to build a Task Management App (clone of trello board) using vue.js with the advance topics such as Vuex state management, multi level drag and drop, building reusable components, component communication through event bus pattern etc. You will also learn how to think in terms of components and approaches to design larger user interfaces using Vue.js. Github: [https://github.com/techlab23/task-management-app](https://github.com/techlab23/task-management-app) Demo: [https://task-management-app.netlify.com](https://task-management-app.netlify.com/) Your feedbacks are welcome.
How different is from Twilio. Too expensive and moreover a simplified version of Twilio
Agree, I also found it grating and a bit condescending
Np - i think Timmy answered your question well: [https://github.com/jquery/jquery/issues/4416](https://github.com/jquery/jquery/issues/4416) \- it's not necessary for a production application and it only adds additional overhead to do this (there are other solutions to manage this than manually telling you each time in the developer console \[which any user can access / see in a production application\] that you did not pass the correct argument). In modern development, your IDE can tell you the interface / struct for any definition - I would definitely check out modern tooling solutions - it's a critical part of any developer's toolset!
This is always a tricky problem. There are a couple of options, but the easiest is to actually make the constructor set an instance variable that is the Promise of the call to get the auth token. Then when you want to query the api with the token, wrap that api call in another function that resolves the Promise from earlier (after the initial call it will always instantly resolve to the value), and passes that to the API that requires the token.
Ideally you wouldn't be kicking off any async operations in the constructor. Instead, use a different method for that, and from that method you can chain off other method calls.
Also Check out October CMS. It is built with Laravel and very modern
Feel free to check out my cli tool that I developed for the neoan3 framework (npm i -g neoan3-cli ). I have used commander &amp; inquirer for most of the task. Also, I found "chalk" to be a useful tool for clis
This might help. You can convert it to async/await if you want, but you still have to do it this way in the constructor because they aren't allowed to be async. class TokenAPIThingOfDoom { constructor() { this._tokenPromise = this._getToken(); } _getToken() { return db.getToken(); } simpleMethodWrapper(param1, param2) { return this._tokenPromise((token) =&gt; { return someAPI.method(token, param1, param2); }); } cleverMethodWrapper(methodName, ...args) { return this._tokenPromise((token) =&gt; { return someAPI[methodName].apply(this, args); }); } } //Usage let myThing = new TokenAPIThingOfDoom(); //Simple Wrapper myThing.simpleMethodWrapper('value1', 'value2').then((result) =&gt; { console.log(result); }); //Generic Method Wrapper myThing.cleverMethodWrapper('method', 'value1', 'value2').then((result) =&gt; { console.log(result); });
[removed]
To be clear, a spec-compliant promise library will execute your call on the next turn--not immediately. There's a subtle distinction there, but knowing it could save you some headache when debugging later.
Part of is just because of the dynamic nature of JavaScript. Anything can be any number of things. &gt;Actually i think most developers can't memorize documents fully, they often can't remember what's exact types and definitions of functions. sounds like inexperienced developers. If you can't remember an API or even the base language you should keep reference pages open in your browser, don't just guess. &gt;i saw alot of people have debugging problem with javascript. sounds like they haven't taken the time to learn how the language works. &gt;(Is error checking and rise warnings that hard?) It's not hard, it's just verbose and adds noise to functions for little benefit. Don't pass random parameters to functions?
Yeah that was just a demonstration, I'll fix.
Honestly probably not very long
The JS crap standard library is a symptom that the TC39 design-by-committee process doesn't work. IMO at this point the only sane option is the remove as much functionality from the client application as possible. I say this after working almost exclusively on SPAs for the last 5 years, and having written JS since the late 90s.
[https://ghost.org/](https://ghost.org/)
Most CLIs are for interacting with the file system which is definitely asynchronous
Kinda understand it. currently jquery is only about 10000 lines of code (non minified version). they want to keep it small and maintainable. So i think i should get used to it somehow (by using modern tools, memorizing docs, etc). Thanks again.
Example?
ls, cp, touch, mkdir... Well I guess I was just thinking of command line utilities in general, not command line interfaces.
I think 50%+ of Js developers are not as experienced as you described, and reading documentations and understanding how Js works are not as easy as you described. What i understand from your comment is : \`Js is for experienced developers, not for everyone.\`
I‚Äôve done Gatsby plus Wordpress for a medical practice, there were a few gotchas, but nothing too bad, and the result was fabulous. Turn off anything they don‚Äôt need so they don‚Äôt break it, and just be smarter than me about hosting etc, which is not hard.
We can learn that more packages !== good packages.
For anything other than navigation, I bet that most of the work will be updating already rendered nodes
[removed]
Very poor article.
I don't think any of those use non-blocking IO and if they do it's likely to fail-fast when attempting to open files across the myriad of file types and systems they can be used on. E.g., network file system, character device, etc...
Any advantage of fromEvent(saveBtn, 'click').pipe(map(click =&gt; save())) over the seemingly simpler syntax fromEvent(saveBtn, 'click').map(click =&gt; save()) ?
Yeah. That is a valid point, instantly wasn't the right word to use. I was trying to convey that the async operation (i.e. http request, database query, or etc) would only be run once.
This is a bad idea. We already have basically defacto central registries by language for the most part. This will be a messy web of mini and amalgam registries of different types.
I'd support that
[https://strapi.io/](https://strapi.io/) !
What if we put all packages to a blockchain. ü§®
Do you specifically mean a "pure" version of reduce where each iteration returns a new object? That is definitely going to be slow, and a huge burden on memory / GC making all those throwaway copies of temp objects. However, if you simply mutate the accumulator directly, it's roughly the same speed as other approaches, but still cleaner looking in my opinion (and much easier to chain together with other operations). If the initial value of the accumulator is an empty object (which it almost always is in this case), then the local mutation of it inside the reduce should be just fine.
For a client project like this, I would use a hosted headless CMS like [Contentful](https://www.contentful.com/pricing/). It's about $40/mo for what they need and you don't have to manage it, update it, back it up, etc. You consume the data they put in the CMS over the API and then can use whatever Javascript setup (Gatsby, Next, Nuxt, 11ty, etc.) that you'd like to build the site.
Most of the interactions are things like toasts, dialogs, expanding / collapsing, and, of course, changing pages and tabs. Whether these are "updates to existing nodes" or "replacing a part of the screen with new content" is not that clear though, and, honestly, why should there be a difference? The point of a general view library like React of Svelte is to be generally good at both, whatever the user actually requires, instead of favoring one or the other. &amp;#x200B; I have thought hard about Dan's comments, and I think he's wrong. Async rendering isn't actually that helpful as compared to the efficient rendering provided by library like Svelte. The point of async rendering, as I see it, is to favor interaction as opposed to rendering / running transformations that client code performs. However, why should a low-ish level general library like React choose the priorities for me? How can they decide which part of my JS code is more important than the other? If data changes, it could be the case that current interactions no longer make sense, and I would prefer to define those priorities myself. &amp;#x200B; Then, his whole idea about "*Let components render ‚Äúin memory‚Äù while data for others is still streaming in*" is also wrong. For sure, you can make virtual DOM perform more calculation while certain things are being loaded via suspense API, but the result is only going to be applied after the promise is resolved anyway. If you don't use virtual DOM, you get a better benefit: your CPU does the least amount of work already, and you can customize what's to be rendered while data is being loaded, as opposed to the framework deciding it for you. &amp;#x200B; I'm glad they're solving the problems, but, in my opinion, they created those problems themselves, in this case, by choosing to use (and sticking with) virtual DOM. I don't like the direction in which React is moving, namely, favoring some arbitrary concept of purity and sacrificing developer experience (e.g. removing things like `componentWillReceiveProps`), and not really adding useful features that could help developers with CSS / animations / accessibility. React has so much influence on how the development is done, but they're wasting the potential to make the web better, more flexible and more creative, and instead, make the web less friendly and more "pure" in some arbitrary sense of the word.
Netlify is a fantastic option for hosting Gatsby projects
np - gl!
Hi /u/Mentzz, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Yes, very good question to ask to get keyword search hits to advertise an upcoming webinar. I wonder what this post will look like tomorrow.
So creating a new object each iteration is actually cripplingly slow (and bad for memory) on large data sets. I just created a quick perf test and had to back my sample data set down from 10000 to 1000 because the "pure reduce without mutation" just locked up the benchmark. [https://jsperf.com/transforming-large-array-to-key-value-map/1](https://jsperf.com/transforming-large-array-to-key-value-map/1) standard for, no block scope vars **15,173 ops/sec** const output = {} for(let i=0; i&lt;input.length; i++) { output[input[i].key] = input[i].value; } for...of **15,003 ops/sec** const output = {} for(const { key, value } of input) { output[key] = value; } forEach **13,185 ops/sec** const output = {} input.forEach(({ key, value }) =&gt; { output[key] = value; }) Reduce, directly mutate accumulator **12,647 ops/sec** const output = input.reduce((acc, { key, value }) =&gt; { acc[key] = value; return acc; }, {}) Reduce, mutating Object.assign **2,622 ops/sec** const output = input.reduce((acc, { key, value }) =&gt; { return Object.assign(acc, { [key]: value }) }, {}) pure reduce, no mutation **9.71 ops/sec** const output = input.reduce((acc, { key, value }) =&gt; { return { ...acc, [key]: value }; }, {})
What did you pick for hosting?
Na, it won't be dark at all. In fact you'll probably never notice. Many enterprises have at least 1 (sometimes more) private npm repositories. You just need to toss in a `.npmrc` file saying where certain scopes are and it just automatically hits the right places. Not a big deal at all. You can include these in your projects for it to "just work" out of the box. You can do similar things with most package managers. If anything this may make things a lot better. Maybe certain scoped packages will be more desirable, more reliable or something. Maybe it'll help make people more conscious of what they're installing.
I've suggested this to the ECMAScript mailing list and was told by almost everyone that this is a horrible idea. The committee ultimately sees JavaScript as a small, sandboxed language that should allow platforms provide all of the necessary APIs for it. To me, this creates a dumpster fire of ways of doing everything. The modules proposal is interesting. Kinda like a half measure towards a better standard library.
Why force the consumer to have all of node installed on their machine for a simple CLI? Generally you want CLIs to be self contained and lightweight, this lends itself well to things like Go.
\&gt; *Notice how without the async-worker the page freezes until the primes are calculated. Thanks to asyncWorker we are able to not only unclutter the page but also track progress!* This is bullshit though. If you do calculations in worker threads, the main thread and the UI will not freeze. And you can track progress too.
Totally agree with your position on performance in general. I also used to favor the `return Object.assign(acc, { [key]: value })` flavor of reduce as well, but have moved to const output = input.reduce((acc, { key, value }) =&gt; { acc[key] = value; return acc; }, {}) recently as I think it looks about as good and I thought it was slightly more performant. These comments actually encouraged me to try a simple perf test though and I found the `Object.assign` version was actually significantly slower! [https://www.reddit.com/r/javascript/comments/bwphrq/code_quality_and_web_performance_in_javascript/eq17heg/?st=jwinhgei&amp;sh=0dec3de6](https://www.reddit.com/r/javascript/comments/bwphrq/code_quality_and_web_performance_in_javascript/eq17heg/?st=jwinhgei&amp;sh=0dec3de6) My guess at the culprit is the creating of small temporary objects before merging them in
Soon you'll see another npm package which fakely downloads those flaky packages time to time
anyone know what package was #1million?
Yep. Normally it's not something you need to worry about--and your advice is still absolutely the right advice--but that _one_ time it's important to know, it's _really_ important to know.
Considering you probably already downloaded 2/3 of them in at least one node_modules on your PC
Take it from Donald Knuth: http://wiki.c2.com/?PrematureOptimization https://stackify.com/premature-optimization-evil/
Buttercms
Lately I've been wondering if `reduce` in these sorts of cases is even worth it. In addition to the performance concerns, the `return` is essentially just redundant noise, and you have to look below the function body to have a clue of what `output` is going to be. When you compare that to the alternative I'm not exactly sure what the advantage is: const output = {}; for (const { key, value } of input) { output[key] = value; }
&gt; 1 millionth package &gt; What can we learn? Fewer packages
I think it may be sooner than it seams... Js seams big... Bus its a rain pond compared to the c, c++, python, etc ocean of libraries, code, tools and rules that soon will be possible to (ideally) dump directly into your front end side...
Nice try government
I think he means without a worker at all.
No explanation of what it does, how it works, and an incomplete explanation of *where* it works. 3/10, would not recommend
How many of them check if an integer is odd or even?
Interested to tune into the webinar
Gotta install 'em all!
Ghost is a shell of what Wordpress is. If you‚Äôre just looking for a simple blog, then ghost is good.
I'm mostly doing my project to keep me interested but also reading "you don't know is" by Kyle Simpson whenever I can
Learn to not arbitrarily break so you have to remove node_modules and reinstall every morning.
Just read all books of kyle simpson in order, then you are good to go. Then you can try solving leetcode examples with javascript. Which will help you in algorithms also javascript
I used [gluegun](https://github.com/infinitered/gluegun). It incorporates commander, inquire and some other tools, so part of work is already done.
Please don't write a CMS for a client. This space has been very well developed by smart teams who have built performant, secure, flexible, robust system. A bespoke solution will require more updating and maintenance than one offered by an individual (see also: technical debt). I like and have used expression engine for years. It will hit almost all your targets, and the price is right. All that being said, I wish you good luck in building your JS skills. If you want (for example) implement a data tables instance into your site, you'll need to sharpen your JS skills.
No you are the voice of reason. Not using promises is stupid for most cases.
Second this. And sometimes it went unmaintained for a long time...
The popular Python alternative is Django, it‚Äôs fantastic.
I think we need to demand peer review. New and updated packages should be vetted by enough trustworthy peers before it gets greenlighted. The more downloads, the higher this need
Codecademy's courses try to teach your jQuery and React just a few lessons after learning what a function is -- I don't think it's the best approach, though the curriculum might've changed since I took it. I think they have good content overall but was kind of thrown aback by that course.
I can only recommend to make intelligent decisions here, it was so bad I don‚Äôt want to talk about it lol
Why pay? Learn proceessing.js at Khan Academy Or P5js with the coding train
these are pretty high level libraries that a beginner shouldn't jump into without a solid JS foundation first
Isn‚Äôt authentication wonky with this or have they got that figured out? I remember having to set up a service account and use basic auth to authenticate. That was a no go for me. Highjacking the top comment after sincerely responding to it to say keystone.js is pretty good for a basic content management system. Uses node, express, and mongoDB. I built an enterprise knowledge-base application on this. I had to hack it up a little bit to expose stuff to front end API calls. It‚Äôs used passport.js so it was really easy.
You hosted it on an old computer in the broom closet didn‚Äôt you?
+1 for Keystone.js Built an enterprise knowledge base application with it.
I did this in part recently for a new feature on an existing wordpress website. I exposed the custom fields I needed to REST API and then built an embedded vue.js widget into the page (this was for a non-atypical, live product filter). Need server side rendering or dynamic rendering for SEO purposes, but allows for much better usability and functionality. It worked well and we will be using elsewhere I suspect with lumpy wordpress builds
I am a beginner. But okay.
I would recommend looking at some of The coding trains videos. He has a series about the basics of javascript.
Okay? You should really have a foundation for how a programming language works before diving into more complex libraries and frameworks. Considering OP said they were trying to learn JS, they should work on vanilla foundations and understand how the language works. You can then use that knowledge to much more easily pick up various frameworks and libraries. Diving straight into frameworks and libraries without a solid foundation is setting yourself up for a bad time.
Don't get discouraged or annoyed when you go over to /r/ProgrammerHumor and people shit all over JS. Remember, there are no bad programming languages, just lazy/bad programmers.
I would try making a tic-tac-toe game and restricting yourself to using mainly MDN and go to google as a fallback
Maybe not removed but archived, for historical purposes.
Nah. Learning a tool with no individual use is setting yourself up for a bad time. You can't do anything with pure javascript. To learn it you either need to be working with webpages and html, or you need to be building an interactive project like something with processing. You can't learn "pure javascript". That's bullshit.
sindresorhus needs to calm down
Yes keystone is great. I built a case management system for a small law firm with it.
Having a specific project in mind to try to build is always a good start. If you don't, when I was getting started, it was helpful for me to look at already working projects and tweak the existing code to see the effects. Poke through people's repositories on GitHub and review questions being asked on stack overflow to see common problems and how to solve them.
WHY DOES IT TAKE 2 HOURS FOR WEBPACK TO MAKE MY HELLO WORLD JS FILE?
Dude, I've been a software engineer for over 10 years and do this professionally. You really are talking out of your league here
This is the text transcription of /u/ceejs's conference talk [posted earlier](https://www.reddit.com/r/javascript/comments/bwekfw/cj_silverio_the_economics_of_open_source_jsconfeu/) - great for those, like me, who prefer text to video. Also: [link to entropic](https://github.com/entropic-dev/entropic).
##r/node --------------------------------------------- ^(For mobile and non-RES users) ^| [^(More info)](https://np.reddit.com/r/botwatch/comments/6xrrvh/clickablelinkbot_info/) ^| ^(-1 to Remove) ^| [^(Ignore Sub)](https://np.reddit.com/r/ClickableLinkBot/comments/bor133/ignore_list/)
How about a service like Wix?
\+1. WordPress REST API is surprisingly good. I also just build a complete front-end with Vue.js using WordPress as back-end so the girls I work with can write the posts :P
Why does it matter if a 0 downloads package exists? Someone may be using it to show to potential employers.
Try to create a login system. Figure out how to block of pages to people not logged in or without a certain authority level. Good luck!
Hey guys, Not sure if this is the right topic, if not, let me know and I'll delete it. I'm currently trying to land a sweet JS Internship and could really use your help. I've completed the task that I got assigned at interview and need to submit it by tomorrow, and I would love if some of you could review it and let me know if it looks good or give me some pointers at what I should improve. The code is here: [https://github.com/MichalTomczak/Internship/tree/master/javascript](https://github.com/MichalTomczak/Internship/tree/master/javascript)
&gt; You can't do anything with pure javascript This just goes to show how you really should learn more fundamentals first.
 Problems with the patched operators for dot-chaining are: 1. Any library that imports a patch operator will augment the Observable.prototype for all consumers of that library, creating blind dependencies. If the library removes their usage, they unknowingly break everyone else. With pipeables, you have to import the operators you need into each file you use them in. 2. Operators patched directly onto the prototype are not "tree-shakeable" by tools like rollup or webpack. Pipeable operators will be as they are just functions pulled in from modules directly. 3. Unused operators that are being imported in apps cannot be detected reliably by any sort of build tooling or lint rule. That means that you might import scan , but stop using it, and it's still being added to your output bundle. With pipeable operators, if you're not using it, a lint rule can pick it up for you. 4. Functional composition is awesome. Building your own custom operators becomes much, much easier, and now they work and look just like all other operators from rxjs. You don't need to extend Observable or override lift anymore. &amp;#x200B; [https://github.com/ReactiveX/rxjs/blob/master/doc/pipeable-operators.md#why](https://github.com/ReactiveX/rxjs/blob/master/doc/pipeable-operators.md#why)
While mining Bitcoin
Don't know why you got down voted, because rly tho
Well yes, this is a workers wrapped after all. As mentioned the idea was that without workers the page freezes. Sorry for the unclarity
wow I remember just a few years back the number was something like 57K
Since RxJS 6 `pipe()` is the way to apply operators. The previous approach was using monkey patching so tree-shaking of unused operators was not possible.
Who thought quantity !== quality
yarn
That depends how you see it. I saw it as : When do we hit the 10 millions ? Let's go baby
&gt; What can we learn? Well, looking at packages like [this one](https://github.com/davidohlin/unicode-arrows), [this one](https://github.com/jackdclark/five), or [these](https://github.com/jonschlinkert/is-even) [two](https://github.com/jonschlinkert/is-odd), I'd say we learn that this milestone means nothing at all.
I'd reply something funny, but my computer is really slow because of all the background bitcoin mining.
*JavaScript, the Good Parts*; you must read that at some point!
This message is not related to the new library. It is about their trading platform.
[removed]
Yeah if you're making a big angular app it's not that simple. And you need to emit shit through so that means Subjects and behaviorsubject. And of course if you don't want to put that initial value before sending it (why the fuck would you most of the times), replaysubject. And if you have a function waiting on 2+ async events that returns an observable you have to have at least a switchmap. I don't need that noise, we're using react now.
When I nest ternaries, I use parentheses to improve readability. Also you don't need four lines if your conditions are going to be that short. const result = !condA ? "Not A" : (condB ? "A&amp;B" : "A")
You smart I dumb, also learn to read.
GitHub Registry will compete with other private repository products like Nexus or Bintray. Lots of companies like to have a single place to manage access to various private packages they create, e.g. our company creates packages for four languages - JS (front-end), Java (ElasticSearch and data engineering stuff), Python (data science) and .NET (back-end).
[https://github.com/eslint/eslint-scope/issues/39](https://github.com/eslint/eslint-scope/issues/39) I saw it get a free reign in national banks and at least 1 mega brand before the consultancy covered it up.
That's what github is for, not npm
Why though? Using Vanilla JS on front-end will to achieve the same results will be a waste of your time. You will either write tons of repetitive JS code or create your own shitty version of jQuery to avoid doing so. I mean, if you just want to understand how to do the things, go ahead and learn it - today it would be a waste to write most software in assembly, but that doesn't mean you shouldn't know how it works. As for React, I find its code is messy and disgusting.
`has-npm-got-one-milion-yet`
Thank you for your reply. People have warned me that while I should take theoretical lessons, I must not dive into using all of them right away at risk of burning myself out. I keep this lesson to heart to make sure I leave some complex parts out of my coding routine at the moment. jQuery is included in the do-not-touch-yet pile.
Thank you. I just took a look at his channel and he made lots of short videos on coding simple gains or effects. This is definitely what I will need in the future.
Yes! The "You don't know" series have been recommended by lots of experienced coders so I have bought one book already.
r/learnjavascript
People shit all over JS? I don't understand why... Javascript is the best language for my circumstances so I will stick to it no matter what!
Haha I know you mean well but that "good luck" after you present me a challenge seems so ominous!
Thank you for your insight. This is my view as well. I have had people warned me to be patient and do not jump straight into advanced framework no matter how tempting it is (being able to create something above your level is surely tempting). What I am still ignorant of regarding your comment is the "vanilla foundations" and "understand how the language works" parts. Whenever I look at basic codes, I can only think "This is the code, if I type this down it will do something like this." This is ,frustratingly, not enough, because if I ask "why" to the above statement I cannot give myself the answer. What, exactly, is "understand how the language works?"
&gt; console.log('Smarty Smart Smarter');
at least 2 I know of!
I was recommended to read this book when I reach intermediate level and I am at a total loss as to what exactly qualifies me as intermediate =))
&gt; Remember, there are no bad programming languages, just lazy/bad programmers. Oh please, there absolutely are good and bad programming languages. Yes it's possible to write good code in any language, just like it's possible to hammer a nail with a book. That doesn't make a book a good hammer. Part of being a good developer is understanding and choosing the best tools.
I will do a tic-tac-toe game those I have a feeling none of my brain cells will be left after I'm done with it.
&gt;it was helpful for me to look at already working projects and tweak the existing code to see the effects. Poke through people's repositories on GitHub and review questions being asked on stack overflow to see common problems and how to solve them. I had GitHub in my mind when I thought of researching people's code. It's just I don't know how to navigate the website at all. Is there a section for on-going projects where anyone can partake in?
Crazy how there's only a million yet my package-lock.json has at least 11 million
Bots/tools download them for stats so that wouldn't work. I've noticed that when I publish a package it instantly gets like 2-3 downloads even though I published it like a minute ago and no one knows about it.
I'm waiting a more important milestone: "the first useful and well coded package on NPM"
Multiple lines can make tracking changes to individual conditions much easier when using code versioning.
Use a static site generator like Gatsby and Contentful for the CMS part of it. Performance wise it's going to be much faster than WordPress and it's very easy to create a blog with Gatsby
You mean... Git ;)
Nice one, good luck man
https://twitter.com/quarterto/status/1135963820994846721
Hacker Rank is also a good tool to learn and resharpen skills.
Cool, tell me how that goes, I would suggest doing it on a platform like http://codesandbox.io or codepen so you can just get started quickly.
What do you mean where high performance code can be written in c++ or rust... Both of those languages always have and always will be more performant than JS. The higher level of abstraction in JS provides a nicer development experience than C++, the industry will not suddenly swap to C++for frontend development because it can compile to WASM. &amp;#x200B; The added complexity of unmanaged languages is not something easily learned, let alone mastered. Overall development times would most likely slow down as a result. Most likely there will be some form of transpiling from JS to WASM or TS to WASM, and no large ground breaking changes will happen for the developer, other than a different transpilation target.
this dot
 [https://www.youtube.com/watch?v=M5d7vygUPoQ](https://www.youtube.com/watch?v=M5d7vygUPoQ)
ahh a man of culture i see
So the last 60 were BS anyway, go figure LOL.
Some QoL stuff is still missing and at least in my experience, the Firefox Debugger is a quite a bit less responsive. For serious stuff I use the vscode debugger for that reason. However, there is significant development on the devtools ever since FF 57, with new features and improvements in basically every release since quantum.
Check out the explore section, they have trending projects and collections that might pique your interest
Project Page (?): https://github.com/bhamshu/flappy-shiffman *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Vanilla just refers to framework-less and library-less JavaScript, the functions and methods that come standard with the language. Foundations that come to mind to me are things like, how to use the "this" keyword and how it's affected by the kind of function you call, event propagation and bubbling, making get and post requests, things like that, callbacks, async functions, and how to avoid race conditions, things like this. These are just off the top of my head
Good bot.
&gt; And if you have a function waiting on 2+ async events that returns an observable you have to have at least a switchmap Probably combineLatest. :) &gt; I don't need that noise, we're using react now. Laughs in Redux, which is a bajillion times harder to understand.
Yes TS to wasm is quite possible although since it‚Äôs not official ecma a bit ironic. Don‚Äôt know how dynamic js would convert to typed wasm though.
Thanks for your interest! Here is an announcement - [https://jsplanet.info/cli-in-node](https://jsplanet.info/cli-in-node) And the youtube link - [https://www.youtube.com/watch?v=tWKhE33wOVY](https://www.youtube.com/watch?v=tWKhE33wOVY)
If the CLI is related to node development it may help to have it written using the same tech. Could help increase adoption and contributions from users.
If you also use typescript there is absolutely no reason to shit on JS anymore.
Very interesting, thanks for putting that together. I've got to imagine (or hope) it's pretty unusual for reduce to be used without mutating the accumulator though. I can't think of any reason you wouldn't. Even if you're trying to be strictly functional you can mutate local variables can't you?
It‚Äôs important to have a collection like NMP but for production applications, especially around enterprise, there needs to be a verified list of packages which undergoes a review. I‚Äôm actually not sure if something like that exists already. In the past working with npm my team had to do these kinds of reviews ok packages we selected.
That sounds amazing I had no idea this was possible!!
I ran for the longest time a Wordpress based site with a React.js (Next.js, GraphQL through Apollo) front-end via the GraphQL plugin (Without using the REST API at all and querying trough my GraphQL client). I'm starting to dedicate more time to that project and I'm looking for collaborators who would be willing to help me. The repo already has some traction, a few couple stars(+80) in Github and people using and looking forward to use it. If anyone is interested and likes React.js (And Apollo/Urql with some typescript sprinkles) please message me! I'm looking to develop this into an entire out-of-the-box solution with a one-click interface (with themes and plugins).
But how else would I check if a number is-even or is-odd?
How about &gt;15 individual packages, for a single color each? * https://www.npmjs.com/package/ansi-bggreen * https://github.com/jonschlinkert/ansi-grey * https://github.com/jonschlinkert/ansi-white etc...
ChartJS is really great product but it has nothing to do with financial charting like bars, candles, advanced price scaling, streaming data, etc. This is what TradingView is famous for and was built for... Where did you see that ChartJs which looks exactly like TradingView? May be i'm missing something...
I honestly never thought about network latency's impact, as the vast majority of our products are internal so that concern easily slips my mind at times. That's an excellent point, thank you.
Is this why 'npm install' takes so long on nearly every project? I mean do we really need 1400 packages to make a &lt;form/&gt; ?
No
That sounds like a very sensible situation for me. &amp;#x200B; Could you send me any online resources or links you found useful?
So a student who has built a JavaScript package isn't allowed to say in an interview "I made an open source JS package hosted on GitHub and published it to NPM so other developers could easily integrate into their apps...". They just shouldn't be allowed to do that because their package wouldn't be popular? You can show potential employers more than source code.
Hi /u/JamieLivingstone, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I just used the "Vue CLI" to create a project Then a super simple middleware to talk to the rest ``` getPage (pageId, slug) { return new Promise((resolve, reject) =&gt; { let url = 'pages/' + pageId if (!pageId &amp;&amp; slug) url = '/pages/?slug=' + slug api.get(url) .then(response =&gt; resolve(response.data)) .catch(error =&gt; reject(error)) }) } ```
[https://github.com/EvanAgee/vuejs-wordpress-theme-starter](https://github.com/EvanAgee/vuejs-wordpress-theme-starter)
for $40 a month I expect a car, not some shitty hosting :P
I wouldn't call someone a "JS developer," as in someone holding a job primarily working in JavaScript, if they're unable to read reference documents like [jQuery's API](http://api.jquery.com/toggleclass/#toggleClass1) or [Mozilla Developer Network pages](https://developer.mozilla.org/en-US/docs/Web/JavaScript) and use the information there while they are developing. An experienced developer would know a lot without needing to look it up, but if you can't lookup a reference of a function to learn how to use it, I would consider you still a beginner. It's ok to be a beginner, but people shouldn't need to change their libraries to assist beginners who may not be familiar with all the paradigms of a language. &gt; Js is for experienced developers, not for everyone. Every language has parts that are difficult. C++ doesn't hold your hand with memory. Lisp doesn't prevent you from making really unreadable code. Haskell forces you into immutable, pure code by default. Java doesn't make it easy to do functional code. PHP is highly inconsistent. Javascript has a really dynamic type system. I think the problem is that you can quickly write up useful code that works without running into any issues like this to hide a button: $("button").on("click", function () { $(this).hide(); // hides button }); And this to make a server request: $.ajax({ url: "someurl", success: function () { alert("response received"); } }); This isn't too difficult for a beginner to write out and modify, especially when there are examples in the code base they're working in. But, not taking time to learn the language before diving in will lead to mistakes like this: $("button").on("click", function () { $.ajax({ url: "someurl", success: function () { $(this).hide(); // incorrect } }); }); I see it all the time and the developers will start blaming the language as poorly designed rather than trying to learn how it works. It's not impossible, it does take time, but I don't think it's unreasonable to learn the tools you work with.
`api.js` ```js import axios from 'axios' const api = axios.create({ baseURL: '//website.com/wp-json/wp/v2/', }) // More info: https://github.com/axios/axios/issues/362 axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded' export default api ``` `page.api.js` ```js import api from '@/api/api' export default { getPage (pageId, slug) { return new Promise((resolve, reject) =&gt; { let url = 'pages/' + pageId if (!pageId &amp;&amp; slug) url = '/pages/?slug=' + slug api.get(url) .then(response =&gt; resolve(response.data)) .catch(error =&gt; reject(error)) }) } } ```
We need a better solution, like namespaces packages or something. I've published a lot of nom modules that I only I used, because it the best way I know to organize my projects. I feel bad for polluting, but I don't have the power to properly solve that problem, only npm does.
Does anybody want to start an open source frontend for it? Sr. Frontend engineer using react here, 5 years xp.
Hi /u/Stripestar, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ya3ya6, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Did you pick all of these concepts up along the way, as your coding career progressed? Or you learned all of them in 1-2 months?
Hi /u/MyyHealthyRewards, please refrain from personal attacks. Thanks.
I build them from scratch every time. I hate dependencies tho :P
Hi /u/ASilverStorm, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/zadysscg, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Unable to get the image drag/drop to work, no console errors either so over to you. Looks cool!
Having looked at all the options people have posted Keystone seems to be almost exactly what I want. &amp;#x200B; Can I ask what stack you used for the front end and if you would recommend it?
Alright! Sorry for the inconvenience!
:) Commander.js follows the same tactics - [https://github.com/tj/commander.js/blob/master/package.json](https://github.com/tj/commander.js/blob/master/package.json)
Thanks for the review. I just tried the feature after your comment and it is working perfectly for me. Which browser are you using?
 I noticed some URL patterns not underlined when using text-editors such as Notepad or Jira, so have decided to make a library to parse as many URL patterns as possible using regular expressions. &amp;#x200B; 'Javascript URL parser using a robust combination of regular expressions' &amp;#x200B; [https://github.com/Andrew-Kang-G/strict-parser](https://github.com/Andrew-Kang-G/strict-parser) [https://jsfiddle.net/AndrewKang/xtfjn8g3/33/](https://jsfiddle.net/AndrewKang/xtfjn8g3/33/)
Oh my god this explanation is so good i read it 4 times. Thank you so much
Browser: Google Chrome - Version 74.0.3729.169 (Official Build) (64-bit) &amp; Version 75.0.3770.80 (Official Build) (64-bit) &amp;#x200B; System Manufacturer: HP System Model: HP ProDesk 400 G3 SFF System Type - x64-based PC Processor: Intel(R) Core(TM) i3-6100 CPU @ 3.70GHz, 3696 Mhz, 2 Core(s), 4 Logical Processor(s) BIOS Version/Date: HP N03 Ver. 02.04, 06-Jan-16 SMBIOS Version: 2.7 Embedded Controller Version: 5.38 BIOS Mode: Legacy Hardware Abstraction Layer: Version = "10.0.17134.765" Installed Physical Memory (RAM): 16.0 GB Total Physical Memory: 15.9 GB Available Physical Memory: 6.64 GB Total Virtual Memory: 31.9 GB Available Virtual Memory: 16.5 GB Page File Space: 16.0 GB Hyper-V - VM Monitor Mode Extensions: Yes Hyper-V - Second Level Address Translation Extensions: Yes Hyper-V - Virtualization Enabled in Firmware: Yes Hyper-V - Data Execution Protection: Yes &amp;#x200B; I have tried all standard image formats (SVG, PNG, JPG etc.) &amp;#x200B; Hope the above helps!
By the way, the dropped image is stored in a variable called userimg. If you enter userimg in the console before dropping, it'd say undefined. After dropping, it should say something like "p5.Element {elt: img, _pInst: undefined, _events: {‚Ä¶}, width: 1024, height: 1040}"
React
Had less than 1 FPS playing that game on a 2019 flagship phone.
I think there is a lot of potential for doing data analysis with Javascript, In that field, I like what the UW Interactive data lab is doing: [http://idl.cs.washington.edu/](http://idl.cs.washington.edu/) notably their data-lib library: [http://vega.github.io/datalib/](http://vega.github.io/datalib/) their voyager demo: [http://vega.github.io/voyager/](http://vega.github.io/voyager/) or their Lyra Visualization Development Environment project [http://idl.cs.washington.edu/projects/lyra/](http://idl.cs.washington.edu/projects/lyra/) How about Machine Learning in Javascript: did you look at tensorflow.js: [https://www.tensorflow.org/js](https://www.tensorflow.org/js)? Google is backing it and it provides a nice extension to the python library of the same name. Some time ago I did a presentation on the topic [https://bondifrench.github.io/ml-in-js/](https://www.youtube.com/redirect?v=BEquEEsr6_Q&amp;event=video_description&amp;q=https%3A%2F%2Fbondifrench.github.io%2Fml-in-js%2F&amp;redir_token=a_qTfA-aIuPogFOXI9IeiesyjOp8MTU1OTgyNTM1NEAxNTU5NzM4OTU0) it needs to be updated and there are lots of libraries. I don't think it's a question of functionalities missing, some of the most recent models [https://naifmehanna.com/2019-02-27-scaling-a3c-multiple-machines-tensorflowjs/](https://naifmehanna.com/2019-02-27-scaling-a3c-multiple-machines-tensorflowjs/) can be rewritten in Javascript (or NodeJs), you can use GPUs with WebGL or do distributing computing with web-workers. I believe it's above all a matter of marketing, education and developer adoption. More people need to showcase its capabilities. &amp;#x200B; P.S. I just saw your Rent vs Buy website, great app! I am planning myself to do a finance website using Javascript. One comment would be that using D3.js when you are using React is a bit redundant, have you looked at VX ( [https://vx-demo.now.sh/](https://vx-demo.now.sh/) )?
Try a 2025 flagship.
&gt; Probably combineLatest. :) And another one! Not really advertising the ease of use there. &gt; Laughs in Redux, which is a bajillion times harder to understand. Or hooks. And maybe you find RxJS easier, I don't. But judging by the popularity of redux and redux-like libraries I don't think I'm alone.
Did you try tilting it to landscape mode?
The game on iPhone X: FPS is like 3 in Reddit app‚Äôs browser and maybe 10 in Chrome/Safari.
I'm currently building a CLI using [Cobra](https://github.com/spf13/cobra) and it's been a great learning experience. Are you using the same?
Resizing the window made the game just a blank white page. The donut started flashing between images of faces. Could not get drag/drop to work.
Git is in a sense a blockchain as well, as it also uses a merkle tree, where every commit is a new "block"
Did you read the article at all? You literally copy/pasted the piece of code that the article uses that I was referring to.
He is now working on a decentralized (federated) alternative to npm called entropic. I think its an effort in good direction.
Yeah she is, and it looks good - hence why I linked it :)
True! But it's still 27.5kb, in most of the cases I just need to get the process.args and be done with it :-D But I suffer hard from Not.Invented.Here syndrome, so take my words with a pinch of salt :P
Create an organisation
$$$$$ They should have free public orgs.
Your goal is to become an advanced user of js. Once you start feeling confused about the keyword ‚Äúthis‚Äù and how object orientation works in JavaScript, it‚Äôs would probably be time to have a look at this book. It‚Äôs a thin book but not a very easy read. Some of parts of it seem to require a little knowledge about language design how interpreters work (I don‚Äôt have that knowledge, myself).
[removed]
I did. The example shown in the thread is just one-lining and my example does this without the lib. The article also does not show the one-line example.
There's a lot of things to unpack in here. I don't know how much of this argument holds up under scrutiny. There's a bunch of non-factual information (e.g. second-hand or plain rumor) presented as facts, as well as opinions treated the same way.
Well, it _is_ preceded by this disclaimer: &gt; I'm going to tell you the version of the story I know how to tell. I'm one human with imperfect knowledge and a point of view, so the story is not the only story anybody could tell about it, not by a long way.
They do have it now! &gt; Orgs are free for public packages, and cost $7 per member per month for private packages. https://docs.npmjs.com/orgs/
Oh I missed that. Damn. No one to blame but myself then haha. Thanks friend!
Only just seen this. I can see that it is storing in the variable `userimg` but it isn't then showing my custom image. From looking at the source I think you may need to re-consider how you are doing this part. Could you not have your images in the variable from the get go? Without dissecting I can't give a proper answer but it seems weird to me to use a variable for `userimg` and then do different logic for your default ones. I would always use this variable and base logic off of that.
Changing to landscape fixed this for me (not sure why it's super low FPS until you do that).
Galaxy S8 in Firefox and can hardly play over 4-5 FPS...
I would ask this on r/learnjavascript or a similar sub. My best advice would be that knowing JavaScript is great for understanding back end technologies. It is always a must in my eyes to know HTML, CSS and JavaScript before you even dabble in back end. udemy has some pretty good courses for like $10
NodeJS is JavaScript and what you want to build is definitely achievable with JavaScript. Would I recommend JavaScript to you? Hell yeah, I would recommend JavaScript to anyone. JavaScript is the most versatile language right now allowing you to build complex websites, servers, native desktop and mobile apps. Plus there is a huge community behind it. As for learning it, I'm not sure I can recommend it anything, it's been a while when I learned JavaScript. I'm pretty sure there are some good courses on uDemy
Hi /u/AForAlternative, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
You are obviously learning and on the good path, just need to carry on practicising a bit more, that is all
Hi /u/tapu_buoy, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ZakariaK10, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
damn okay bot!
thank you mate, where can I practice more? I will keep doing more projects even from youtube channels or articles, but yeah. And also this post has been removed by the bot so I don't know if you will be able to see my response
The context being: "When your conditions are going to be that short", I don't see how this is going to make a huge difference, TBH.
The Storybook team released v5.1 today! Hope this makes your day to day that much smoother. TLDR: * React Native is back and better than ever * Overhauled accessibility addon to highlight violations as you develop * New contexts addon makes it easy to provide data context to your component * One-line configurations for popular integrations (typescript anyone?) * Doc auto generation docs from stories in technical preview
"language design" as in actual human language like English and human interpreter or computer language?
Thanks a lot for looking at the code and a helpful review. I have changed the tutorial to check for the case when the user has already uploaded an image. Your comment about using the same variable/array for all images also makes sense but I don't know what you mean by "Could you not have your images in the variable from the get go?". How else would I manipulate them? Also, is the drag/drop feature is working perfectly as it should after the latest commit?
I hated this library. It was confusing, and so far off from typical programming -- more analgus to opengl, which is by no means fun. I wouldn't recommend anyone 'dip' into programming this way to make something personally. Working with a beginner, they were totally frustrated by the api and the documentation.
Wanker probably has "*author of dozens of popular NPM packages*" in his CV.
I meant the DOM setup of elements of charts. Looks exactly like ChartJS. My point being, it does not look like it does something that is better than what open source is already doing that justifies ads or a branding. I don't mean per se it's a bad lib, that it couldn't have features that are "new" or alike, just being sceptical about this specific one as I have tried literally dozens and dozens of chart libraries for my own projects and TradingView gives off this commcercial vibe upfront but does not convince me personally.
Answering his question - I hope he'll get ban. I don't care if you can get banned on npm, in real life you get ticket for littering.
Even in the landscape mode?
I am aware of the blank white page problem. Though I have no clue how to fix that and luckily, it happens only like 10% of the time. I have made some changes, is the drag/drop working now?
Even in the landscape mode?
I can understand the sentiment. But I think it's great for beginners to build something that they can see and feel proud of. Also, Shiffman's tutorials are a delight to watch.
I'm very into [Strapi](https://strapi.io), as it's just incredibly light-weight and easy to use for quick-n'-dirty API development. It's basically ACF as a CMS. I've been using it in combination with Vue.js and [Gridsome](https://gridsome.org/) specifically, which is basically a Vue-based clone of Gatsby (because I hate React).
It's for sure a very nice project for someone trying to land a first position as a developer! &amp;#x200B; Some things that I'd improve are: * Make the font size bigger and clearer, it's difficult to read in a 13" laptop. * The game could make good use of a start button so you have time to read the tutorial before the combat starts. &amp;#x200B; And the most important of all, your whole game is living under a 3513 lines userInterface.jsx file, that's super crazy to maintain and to review. React is a modular oriented UI library where you should be dividing your application in Components (i.e. the character, the enemy, the menu window...) and then import them in a file where you display them. So in case you are looking to nail that position, I really recommend you to start by doing that first of all, and then giving a good refactor to the code. &amp;#x200B; If you need help with don't doubt asking me anytime! I really enjoy helping and teaching new devs if I have the time to.
I'm personally shocked by some of the price points on these hosted CMS solutions. The average going market rate is *too high* and everyone's like, "Well, it's comparable to everything else out there." But it's not when I can spin up Strapi on a $5 Digital Ocean server.
Does this disclaimer make it OK to not do research and to use fallacious logic? It's like it says "resemblance with people and events, definitely real, is intentional, but it's also, like, totally not my fault if what I say is wrong".
Thank you kindly for such a prompt reply! &amp;#x200B; I am going to fix these issues that you mentioned as soon as possible, especially the font size - I need to take accessibility and varying screen size more into account. &amp;#x200B; Concerning the 3513 lines userInterface.jsx file, I absolutely agree - I am going to make it my priority right now to divide it into various components, as I clearly waited too long to do it. &amp;#x200B; How would you recommend to split the components? As in - what criteria do you think would be the best? E.g.: &amp;#x200B; userInterface.jsx holds battleScreen.jsx which holds enemy.jsx and player.jsx OR userInterface.jsx holds enemy-jsx and player.jsx directly and renders them into a div? &amp;#x200B; I am afraid that I am not easily able to word it in a clear way, but what I am trying to say is, what do you recommend to be the criteria to 'create a new component'? &amp;#x200B; Thanks in advance - especially for your availability to help, I really do appreciate it! It's really kind of you.
Your Weekly /r/javascript Recap **Wednesday, May 29 - Tuesday, June 04** Top 10 Posts | score | comments | --|--|-- Google to restrict modern ad blocking Chrome extensions to enterprise users | 407 | [246 comments](https://www.reddit.com/r/javascript/comments/bum37q/google_to_restrict_modern_ad_blocking_chrome/) In light of what Google did to Chrome...are they really superior to FF in terms of web dev? | 288 | [265 comments](https://www.reddit.com/r/javascript/comments/bvhw78/in_light_of_what_google_did_to_chromeare_they/) [8 Useful And Practical JavaScript Tricks](https://devinduct.com/blogpost/26/8-useful-javascript-tricks) | 242 | [111 comments](https://www.reddit.com/r/javascript/comments/bvweza/8_useful_and_practical_javascript_tricks/) javascript seems to make more sense to me than python | 236 | [206 comments](https://www.reddit.com/r/javascript/comments/bvtr3u/javascript_seems_to_make_more_sense_to_me_than/) [Just discovered the ES6 Proxy object. If you haven't played with it jet go do it now, super cool stuff!](https://blog.nicco.io/2019/05/31/the-powerful-es6-proxy-object/) | 191 | [47 comments](https://www.reddit.com/r/javascript/comments/bv8ny6/just_discovered_the_es6_proxy_object_if_you/) [npm passes the 1 millionth package milestone! What can we learn?](https://snyk.io/blog/npm-passes-the-1-millionth-package-milestone-what-can-we-learn/) | 190 | [71 comments](https://www.reddit.com/r/javascript/comments/bwrlul/npm_passes_the_1_millionth_package_milestone_what/) [Compiling C to WebAssembly without Emscripten](https://dassur.ma/things/c-to-webassembly/) | 178 | [24 comments](https://www.reddit.com/r/javascript/comments/bw8fn9/compiling_c_to_webassembly_without_emscripten/) [Zdog - a 3D JavaScript engine for &amp;lt;canvas&amp;gt; and SVG. With Zdog, you can design and render simple 3D models on the Web. Zdog is a pseudo-3D engine. Its geometries exist in 3D space, but are rendered as flat shapes](https://zzz.dog/) | 131 | [16 comments](https://www.reddit.com/r/javascript/comments/buem8i/zdog_a_3d_javascript_engine_for_canvas_and_svg/) [Code quality and web performance in javascript, the myths, the do's and the don'ts](https://enmascript.com/articles/2019/06/04/code-quality-and-web-performance-the-myths-the-dos-and-the-donts) | 130 | [20 comments](https://www.reddit.com/r/javascript/comments/bwphrq/code_quality_and_web_performance_in_javascript/) [Ant Design 4.0 is in progress!](https://medium.com/ant-design/ant-design-4-0-is-in-progress-d46e53327038) | 127 | [29 comments](https://www.reddit.com/r/javascript/comments/bv2s40/ant_design_40_is_in_progress/) &amp;nbsp; Top 7 Discussions | score | comments | --|--|-- [Functional JavaScript: Five ways to calculate an average with array reduce](https://jrsinclair.com/articles/2019/five-ways-to-average-with-js-reduce/) | 85 | [63 comments](https://www.reddit.com/r/javascript/comments/butp45/functional_javascript_five_ways_to_calculate_an/) [Flattening RxJS Observables with switchMap(), concatMap(), mergeMap(), exhaustMap()](https://angular-academy.com/rxjs-switchmap-concatmap-mergemap-exhaustmap?utm_source=reddit_javascript) | 34 | [41 comments](https://www.reddit.com/r/javascript/comments/bwmnem/flattening_rxjs_observables_with_switchmap/) [5 Programming Patterns I Like](https://www.johnstewart.dev/five-programming-patterns-i-like) | 52 | [37 comments](https://www.reddit.com/r/javascript/comments/bv53na/5_programming_patterns_i_like/) [9 JavaScript Interview Questions](https://medium.com/@bretcameron/9-javascript-interview-questions-48416366852b) | 23 | [36 comments](https://www.reddit.com/r/javascript/comments/buah7p/9_javascript_interview_questions/) Angular2+. What‚Äôs you‚Äôre opinion? | 9 | [31 comments](https://www.reddit.com/r/javascript/comments/bvg31t/angular2_whats_youre_opinion/) Which technologies do you use for writing CLIs? | 10 | [28 comments](https://www.reddit.com/r/javascript/comments/bwtlhb/which_technologies_do_you_use_for_writing_clis/) Showoff Saturday (June 01, 2019) | 18 | [28 comments](https://www.reddit.com/r/javascript/comments/bvjzpb/showoff_saturday_june_01_2019/) &amp;nbsp; Please let me know if you have suggestions to make this roundup better for /r/javascript. I can search for posts based off keywords in the title, URL and flair. If you would like this roundup sent to your inbox every day send me a message with the subject ['javascript'](https://www.reddit.com/message/compose?to=subredditsummarybot&amp;subject=javascript&amp;message=x). Or if you only want a weekly roundup, use the subject ['javascript weekly'](https://www.reddit.com/message/compose?to=subredditsummarybot&amp;subject=javascript%20weekly&amp;message=x) However, I can do more.. you can have me search for any keywords you want on any subreddit you want. Send a message with the subject ['set javascript'](https://www.reddit.com/message/compose?to=subredditsummarybot&amp;subject=set%20javascript&amp;message=200%0A25%2C%20keyword 1%2C%20another keyphrase%2C%20last example) and in the message: specify a number of upvotes that must be reached, and then an optional list of keywords you want to search for, separated by commas. You can have as many lines as you'd like, as long as they follow this format: 200 50, keyword 1, another keyphrase, last example You can also do ['set javascript weekly'](https://www.reddit.com/message/compose?to=subredditsummarybot&amp;subject=set%20javascript%20weekly&amp;message=200%0A25%2C%20keyword 1%2C%20another keyphrase%2C%20last example) And you can replace javascript with any subreddit. See my wiki to learn more: [click here](https://www.reddit.com/r/SubredditSummaryBot/wiki/index)
Yes
Not a problem, They way I would do this is: 1. Have the `userimg` as an array with your images in. Lets say 4 for the sake of this explanation. 2. Do a check from when the array is &gt; 4, if it is then set the `userimg` variable to target the 5th element in the array as you know this will be the users dropped image as a new element added to an array is always added to the end. 3. If it is =&lt; 4 do your normal randomisation of the array It has caused a few more bugs, do you want to PM me? Might be a bit easier!
&gt; an undocumented Swiper API feature [Yes](https://github.com/nolimits4web/swiper/blob/8d0dd34f87a48a497389f2cc8ed9503c0ba351b3/src/components/core/core-class.js#L42-L49). Also: &gt; If you have questions about Swiper don't hesitate to ask them in our [Forum](http://idangero.us/swiper/forum/). If you prefer [StackOverflow](http://stackoverflow.com/) then don't forget to tag your question with swiper tag.
Not a bot.
Hi /u/programmer1111, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/pierreburgy, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/celestialvagabond1, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/pereVush, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
oh sorry I thought it was a bot thanks for the info
It's really nice that you are going to separate the file first of all! Will make it all more readable and easier to understand later. &amp;#x200B; The first approach you said is better for sure. Let's see: &amp;#x200B; UserInterface.jsx --&gt; BattleScreen.jsx --&gt; \[ Player.jsx, Enemy.jsx\] \--&gt; StatusWindow.jsx --&gt; \[HeroStatus.jsx, PetsStatus.jsx, QuestStatus.jsx, Stats.jsx\] &amp;#x200B; And so on... (you can see that the files are in camelcase but start with an uppercase as they are Components, so we differentiate them from variables when importing into a parent file). &amp;#x200B; That's a simple example of how I'd organize them, but may be good for you as a guide to start with the refactor. &amp;#x200B; Good luck!
Actually, no. It runs great like that. Why does that matter?
[Here's your code in jsperf](https://jsperf.com/js-chunking/1).
Excellent! #SHUT IT DOWN
The best thing about P5.js is the documentation. Very clear with examples.
Ok I didn't know. Thanks
The really interesting thing about that is their results are completely different different from what I was able to achieve otherwise. I am wondering if that is because of the size of the arrays I was using or if it is because nodes integration with the v8 engine is different.
Its worthwhile to even just use non single page, just to get off the wordpress bloat. Keystone can be setup with PUGjs which is pretty good.
In the chunkForChunks you could try different array copy mechanisms, such as `array.slice(0)` instead of destructuring. That might improve the speed a little. I'm not sure why splice would be a different speed than slice, other than the array copy. The recurse method is pretty obvious in that it needs to execute a new function and add the result to the stack. This is a pretty expensive operation that is similar to executing an anonymous function in a loop.
Add eventlisteners to every button and change [GreenBox].innerText to [whatever], when it's called
I just finished working on a rebuild of an app I made a year ago to initally learn React. My initial implementation was terrible but I really enjoyed working on it. A year later and I have rebuilt it. The app/site is sort of like Tinder laid on top of the Foursquare API where you select a category and it will give you places nearby that you can swipe left or right on. A live demo of it can be found here: https://findr-rebuild.netlify.com/ The repository is here: https://github.com/Pjaerr/Findr I used Node and Express for the "backend" (just a layer on top of the foursquare api) and then I used React, Next.js and Styled Components for the frontend. Any feedback is greatly appreciated!
It's before its time.
&gt;t's ca can you give small example of code?
Im on my phone and I forgot my pw so cant log-in on pc, let me retrieve my pw and I'll get back to you
This is a pretty cool idea that I think has some real potential. I often am unsure where to go or do and this gamifies the decision process. Two things I would improve are the instructions about how to do and how it works and try providing more information about the restaurant on the card based on the returned info JSON. Great job on the codebase. I really liked the use of stylized components and prop type definitions. Something I find useful for building repeated elements is to de-structure the presentational components to improve performance and then use the spread operator to display whatever prop arguments or key value pairs are available then conditionally render the available fields. A good next step would be account creation and stored placed.
My phone is now on fire.
There are 2 easy ways to do this.. &amp;#x200B; &amp;#x200B; &lt;body&gt; &lt;button onclick="MyFunc(this)" name="btn1"&gt;Button&lt;/button&gt; &lt;button onclick="MyFunc(this)" name="btn2"&gt;Button&lt;/button&gt; &lt;button onclick="MyFunc(this)" name="btn3"&gt;Button&lt;/button&gt; &lt;button onclick="MyFunc(this)" name="btn4"&gt;Button&lt;/button&gt; &amp;#x200B; &lt;p id="snus"&gt;&lt;/p&gt; &lt;script&gt; function MyFunc(btn) { var p = document.getElementById("snus"); switch ([btn.name](https://btn.name)) { case "btn1": p.innerText = "btn1 was clicked"; break; case "btn2": p.innerText = "btn2 was clicked"; break; case "btn3": p.innerText = "btn3 was clicked"; break; case "btn4": p.innerText = "btn4 was clicked"; break; } } &lt;/script&gt; &lt;/body&gt;
You can't. Either use async...await, or do whatever you need to do with the response inside the callback.
This fixes but, but i think you should fix this :) its possibly definitely bug
Nice work
Scary.... dependency hell hahahahahah
Cool, what kind of encryption is used?
The array copy is almost certainty all of the difference. Splice will have allocate a new array and then copy the values over. On the other hand slice will simply generate a view into the parent array, so no new array generated. Now copying an array is a pretty fast operation, but slicing an array may compile to only a handful of machine instructions.
AES-256-GCM is used for all the ciphering. We also use Scrypt to hash all cipher keys prior to ciphering in order to make brute-force near impossible.
I mean, there is a disclaimer that it works best in landscape mode.
this.results is available to all methods in the app. Basically just have the axios call store the results in the data section of the app, then have all further operations operate on this.results.
The fastest option should be using a typed array, because the sub arrays (DataView instances) are just views and not actual copies.
The fastest option should be using a typed array, because the sub arrays (DataView instances) are just views and not actual copies.
Using array.slice(0) seems to be only slightly faster than array destructuring. In jsperf it could process 30,000 more ops/sec. https://jsperf.com/js-chunking/3
Your best bet is to learn a little JavaScript, rather than ask people to do it for you. Here's w3schools reference for onclick events, which will get this job done: [https://www.w3schools.com/jsref/event\_onclick.asp](https://www.w3schools.com/jsref/event_onclick.asp)
Thank you kindly for the detailed information - it's really helpful! &amp;#x200B; I just pushed a new commit to the repository which (hopefully) includes what you suggested me to do; if you could find a few minutes to check it out - and maybe give me more things to fix, implement, and what not... I would be really, really grateful! &amp;#x200B; I just want to say sincerely thank you for finding time to help me out.
Oh my goodness! It's very cool but everything is just in one huge component? I second cyxneer's input -- this badly needs to be split up and organized. Part of the philosophy of React (although this really applies to programming in general) is to create code that's modular and reusable. A production app will be split into many folders and files. React is kind of like Legos, the idea is to create building blocks that you can reuse again and again. In order to land a developer position you need to get to this workflow down and understand the ways in which data and information are passed around and reused inside an application. I don't know if you're familiar with [DRY](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself) or not, but make sure to keep that in mind whenever you are coding. I've made [a visual mockup](https://i.imgur.com/lBzuxl4.jpg) of some parts of the screen that will almost certainly be split out, but don't forget the possibility of using higher order components to split out areas of abstract logic and don't be afraid to split even further than this. I think that organization is the most important problem that you can focus on right now. Good luck, I am a professional React developer and it's a lot of fun. I love clicker games too. Feel free to message me if you would be interested in collaborating on a similar game or another project sometime. I have the next month off and I plan on spending a lot of time working on side projects. PS. It's really good that you have a working demo live, that's a big thing we look for in applicants. Definitely include the link on your resume!
Lool. I love the amount of bugs being discovered here. Not a good first impression. I'll check out p5js more in depth tho, see if it holds any ground.
Programming languages.
Hello, thank you for your message! &amp;#x200B; As I said in a reply which I posted little ago, I already "tried" to split the main component into various individual components (counting 13 so far); would you say that my last commit gets closer to what you would expect? Also, I really appreciate the input - you and Cyxneer made me realise how much cleaner, compact and scalable it is to have my code split into different components. &amp;#x200B; Also - thank you sincerely for taking the time to send me the mock-up; I did something similar, but I believe that by following your guide image I will be able to optimise it even further and make the code ever clearer and more readable. &amp;#x200B; Concerning DRY - I did not know it, thank you for pointing it out! My last few commits have been about make the mode less repetitive, trying to abstract always more and more. It is definitely something that I need to keep working on. &amp;#x200B; But again, I just wanted to say that I really appreciate your time and effort - I would be really happy if you had anything else to add, be it tips, ideas, or anything! The more, the better. &amp;#x200B; For the project, I would love to! My main focus at the moment is to become employable ideally before September, but even after then I would love to keep working on these kind of games when I am away from work - so yeah - I would be more than happy to collaborate on a project as such! &amp;#x200B; Again, thank you kindly.
Awesome idea, like the codebase too. Think the API might be down at the moment, I'm just getting loading icons but no data.
Hey thanks for your feedback! If you get the time could you expand more on what you mean when you say: &gt;de-structure the presentational components to improve performance and then use the spread operator to display whatever prop arguments or key value pairs are available then conditionally render the available fields. I think the idea is good if executed correctly, I have obviously used this to apply the stuff I have learned but if I felt like taking it as a really serious project a lot could be done with the idea. One thing I am trying to do is create GitHub issues and then if I don't get around to things, hopefully somebody else wanting to contribute to open source could have a go (although I am aware the project isn't contributor centric) I'll definitely take your advice on board and add tasks to get around to them, so thanks again it is really appreciated!
That makes sense, I think the splice in the loop body is were the bulk of the time is spent. So in chunkForChunksWithSlice the difference appears to be the initial copy is faster than chunkForChunks
That definitely looks like a step in the right direction! :) I don't have time to look in much more detail but I can tell you that change alone makes a big difference in terms of the impression of the repo and your own ability to think about it. And on large applications, this kind of thing becomes very crucial. Honestly the game looks very nice and seems to work -- where did you get the art? I've always wanted to make games but I never know where I could get graphics for them. I guess I would end up commissioning an artist or something. To become employable, I suggest you try building out a full [CRUD](https://en.wikipedia.org/wiki/Create,_read,_update_and_delete) app with an Express or AWS backend or something. You want to be able to show that you understand how to move information in and out of a database, essentially. If you want to continue working on this project, consider adding the ability for users to sign up, log in and save their progress (maybe even a leaderboard would be cool?). Integrating an external API is another skill that I would try to demonstrate through a project, although I can't think of how it would fit into this project.
Coding is already accessable to artists, designers, educators and beginners. What they mean is that they want to make it accessible to those not willing to put in the work to learn it at the cost of performance and overall product quality.
My most recent project: https://github.com/RuurdBijlsma/emoji-camera it's a camera that turns pixels into emojis, built with Vue. I'm pretty new to Vue and made this just for fun, but I'd love to hear it if someone has feedback or something. Live demo: https://ruurd.dev/emojicamera
I really want to know that too
Hi /u/mrfrontend, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Thanks. Your answer worked! Now I can move on to the next question tomorrow!
But can it run ~~crysis~~ p5js?
PUG is great! I got into that a year ago and keep wanting to go back. Just hard convincing people of learning it.
A Virtual DOM is really not some critical aspect of modern frameworks. The argument is academic.
which argument, specifically, are you referring to?
yeah, pug , [stylus](http://stylus-lang.com/) and coffeeScript are the minimalist trifecta. I've built with all 3 but never all together.
Hi /u/kaptan8181, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Not bad. Simple, short and to the point. I totally forgot what these two were after college.
Hi /u/AmperHD, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/MyyHealthyRewards, please refrain from personal attacks. Last warning.
That was very very clear. Well done.
You may want to make these into #90seconddev. Felt a little rushed
text. text is king.
agree 6000\^‚àû%. Just write it up. Offer an optional video.
I made a tongue-in-cheek nom package called purify-int. Basic idea is you stuff in something, and get back an integer. https://github.com/karnthis/purify-int Thanks for looking!
Static typing can be solved in the editor, ala TypeScript, so that is not going to motivate much. The trouble with compiled code (not transpiled script) is that you won't be able to debug it in a browser, you could only debug it in a IDE. Still, that is not impossible. WASM is not going to have access to the DOM, so it cannot replace JS by design. Again, it could, but script is fine for that. They will probably always work in conjunction.
I use yargs and then, to spice things up, node-emoji.
[OK](https://tylermcginnis.com/imperative-vs-declarative-programming/)
[( ‡≤† Õú ñ‡≤†)](https://tylermcginnis.com/imperative-vs-declarative-programming/)
nice, cheers.
I think one thing that isn't explained well is what 'Imperative' actually means. It kinds of means 'urgent', and that's how your code reads... "Do this! Now, do this! Now, do this!". Whereas declarative is more like a manifest of what you want, and behind the scenes an imperative process carries out that order in hopefully the best way possible, in a way that actually improves with time.
For 60 seconds, not bad. Of course, in reality every programming environment is a mix of both. And it's especially toxic to not consider declarative statements like configuration "not code" because you're basically lying yourself about what your dependencies are, what your architecture is, and what, basically, your code is.
No, there is no great need. Script does just fine for client-side work. If raw speed was always the top consideration, why would anyone buy a Ford Focus instead of a Dodge Challenger? Because your commute time is dictated by traffic, not top speed. Also, the store is only 5 blocks away. If you need to go cross-country in a hurry, you fly. People can only click buttons so fast. You are hardly ever crunching numbers from user input in a browser. If you need to do that, offload the work to a web service.
That's not what imperative means in this context. It refers to writing your code in the imperative mood, i.e. a series of commands. It has nothing to do with time or urgency
Totally fair. But I like the pattern of a condition/filter/operation per line for a few reasons, and I like being consistent with my patterns.
Thank you so much for having both. I'm sure the video's great, and I'll bet it takes a lot of time to figure out how to fit complex things into 60 seconds. But a ton of my day's spent at machines without headphone ports and it's a PITA to get my headphones unpaired from my phone and paired to the right computer (if it even has bluetooth). So I really appreciate the text version. It took me a bit longer than 60s to process it, but at least I could process it!
Thank you!
Hi /u/mikeyt1234, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
That visual mockup you made is great for his understanding of the adequate structure of the project! Great one there! &amp;#x200B; u/revoltpircsavaj you should take a look at what a CRUD is as said up here, if you use Express it will be really easy and fast to make a proper API with some GET/POST methods in it so you can save the game data.
Did I just see HTML presented as code? I thought that was just a [flower pot](https://m.imgur.com/gallery/CfSwf).
Yes, I think you can just look to what the words mean in natural language to understand what they mean in programming languages. - In natural languages, imperatives are commands. (e.g. Eat! Die!) - In natural language one dictionary definition for declaration is: "an announcement of the start of a state or condition". (e.g. I am hungry. He is dead.) - It's not hard to make one look like the other (e.g. Know that I am hungry!, Kill him!, I need you to eat, You're going to die). - Some audiences respond well to declarations (e.g. "I'm hungry" -&gt; "Here's a bag of chips", "I'll have a large iced coffee" -&gt; "Ok, here, that'll be $2") - Some audiences require direct, precise orders (e.g. "But I don't know how to land a plane!" -&gt; "Okay, we'll get you through this. Sit down in the pilot's seat. Do you see a green button below the dial that say X? Ok, press it. Now . . . "). Programming language meanings aren't really unique from those general meanings of the word.
[removed]
I‚Äôve apparently been missing out on drama
&gt;‚ÄúYou know, imperative programming is like how you do something, and declarative programming is more like what you do, or something.‚Äù I see this explanation a lot but it's never quite clicked for me. Both examples of code offer a "how". One uses loops, the other uses map. Isn't map just a more concise way of expressing the same thing though?
&gt; And it's especially toxic to not consider declarative statements like configuration "not code" Eh, I feel like the better question is, "Why are people arguing about what is and isn't code?" I have a feeling what's really being argued is, "Configuration isn't *work*", which is very different and very wrong. That's just jerks being condescending. But I think we have to talk about "configuration" to decide if it's "code". I have a simple definition for "Is it code?" I expect a file that is code to represent a verb. If I look at a C listing, I can describe what inputs it takes and what outputs it produces. A declarative example is a NAnt file or a set of MSBuild targets: they're a list of things that are going to happen to a mess of files, what kinds of outputs are expected to be produced, and where those outputs are going to end up. I don't care what the implementation language is, that's code because it describes work. But when I think "configuration" I'm also thinking about name/value pairs. Here's some text in XML, which can be used as a declarative language. But is this really "code"? &lt;Servers&gt; &lt;Server role="Authentication" hostname="auth-internal-somecompany.com" /&gt; &lt;Server role="Storage" hostname="storage-internal-somecompany.com" /&gt; &lt;/Servers&gt; Nah. That's data. I can't look at it and say, "What does it do?" Instead, it describes some data that *something else* uses to do something. That something else is "code". But someone had to make this data file, just like someone had to make the code. Take one away and the other doesn't work. So in the end, the person who wrote the configuration has as much value as the person who wrote the code, even if we think one is objectively harder than the other. I hate making data files, it's tedious. So I want to buy a beer for the people who make them, not condescend. People who think otherwise should get to have to write their own data files for a few months and see if they change their mind about the worth of the people who do.
Nice work dividing the components! &amp;#x200B; As u/melody_elf said, React is like Lego, you should make the little tiny pieces with enough information to work by their own and be used in a big structure. In my case, I'd definitely divide some of these components even more, but don't worry about that for now and just try to improve in some JS concepts too. &amp;#x200B; Something I noticed is that in some components, for example in `heroMenu.jsx`, you declare the class methods as arrow functions, which is nice, but you could definitely improve this. An arrow function creates an instance of the function itself but binding the actual context in which you declare it, so that's a great solution for event oriented methods (onClick will keep the class context if the handler is declared with an arrow function), but a method like `renderUpgradePriceParagraph` is being called in the render directly, so there is no need for you to bind the actual context. This is good to know as you will find for sure some events like onChange or onClick where you may declare the handler directly inline in the render (a map with certain values) and that will create an instance in every render. Why does this matter? Because binding every method can be expensive in large apps and hinder the performance of the web itself, as you are instantiating every method you create. So knowing when is a good time to use them and when not will make you a better dev in the long run. In you case is not something really needed, but I think it's nice to know these little things that we look at when interviewing someone for a position. &amp;#x200B; Another CSS thing I think you could improve is the class naming, I notice classes such as *userInterface-userSettings-menu-tab-button* which may look right to you, but as you are using scss to add styles, could improve drastically if you learn BEM naming [http://getbem.com/naming/](http://getbem.com/naming/) and apply nested selector in the styles file. &amp;#x200B; I think you could keep working with these things and improve little by little, but for someone with no job yet, you are doing a wonderful job at this! Keep the good work!
 Frameworks are often overkill for simple tasks. The point of the decision should be, ‚Äúwhich requires less code written, and secondarily less code sent to the user‚Äù. You‚Äôll sometimes see jQuery, or worse yet Angular or React, sent down the pipes to support something ridiculously simple like sorting a table. Or something that is orthogonal to their purpose like drawing a chart, just because there‚Äôs a chart plugin for the framework. This is a waste of a programmer‚Äôs time and a user‚Äôs bandwidth. It makes a site less responsive, and requires a big pile of tooling that isn‚Äôt necessary, when a few lines of Javascript embedded in the header or a small library would have done the job.
Still seems like a bug. Certainly that‚Äôs not behavior that anyone would expect or desire.
My write-up took longer than the 10k characters that reddit allowed, so I pasted it in here: &amp;#x200B; [https://pastebin.com/RJSKFyEc](https://pastebin.com/RJSKFyEc) &amp;#x200B; The TLDR though, is very important, and more important than all my disagreements, so I'm pasting it here too: &amp;#x200B; \&gt; Ohhhhhhh... Yeah ..... Entropic is Diasporah/mastodon for packages. Well, this was a really bad sales pitch,but the good news is, this is probably an instance of right tech at the right time. Dockerization here means that the baseline technological expertise required to put one up is pretty low, and it's auto-federated, which is very cool. This will probably do some jumpstart for the inevitable implementation of OTP in node.js (Greespun's tenth rule and its variations), which is another really good thing for node.js.
sorry you struggled, fixed this.
Nice.
Ultra novice here. I made a tic-tac-toe app in vanilla JS: https://github.com/starchturrets/tictactoe I first tried to do it on my own (with the exception of the function I used to check for winners, I got stuck on that). Then I watched a youtube tutorial from /r/LearnJavaScript and tried to improve based on that. I‚Äôm curious to know if I‚Äôm making any major mistakes.
Yes, pretty much. I think pretty much all declarative programming abstracts over a lower layer of imperative programming. I honestly think map vs. for is a poor example because the levels of abstraction are so close together. A better example, in my opinion, is a SQL query (declarative) versus looping over a data table (imperative). In this case is extremely obvious why you want to do as much work declaratively as you can.
CMV: Constraint based programming is a much better name and encapsulates what most people mean by declarative.
Actually I found a case where this can result in an error. If you're using react native, when you run on Android, if the first value is a falsy primitive, like an empty string or 0, this can happen: TypeError: In this environment the sources for assign MUST be an object. This error is a performance optimization and not spec compliant. This won't happen if the first value is null or undefined though, so think carefully. To prevent this, you can use a ternary instead: `{ a: 'a', b: 'b', ...(c? {c: c} : {}) }` Which also makes your code look like an emoji, kinda. ¬Ø\\\_(„ÉÑ)_/¬Ø
No
 [https://dexygen.github.io/blog/articles/2019/01/04/AccidentallyDeclarative.html](https://dexygen.github.io/blog/articles/2019/01/04/AccidentallyDeclarative.html)
I see loop and map as the same thing implementation-wise: map is just a function iterating over the array, like the explicit loop. It's shorthand rather than something else.
That's a distinction without a difference. Both blocks in the array-element-times-two example are machine instructions on how to iterate an array and multiply each element times two, the author just decided not to show you the code that makes up map. &amp;#x200B; You can't "just call a method" all the way down your code. somewhere you've got to actually spell out what that means.
Thanks. I'm probably a minority but I just don't watch writeup videos. So I appreciate the option to read.
Totally agree. I can read at my own pace. Skim, dig in, whatever I want.
Configuration is work. But more specifically it is toil.
Lol
That was so, like, declarative
Just to clarify, declarative vs imperative programming isn't a dichotomy, it's a spectrum. Some code can be said to be *more* declarative than other code, or *more* imperative than other code, but it's not a black and white distinction between "this code is imperative, and this is not".
It's interesting (especially because the effort for putting this in _only_ 60 seconds) But as said above there's no need to hurry like that.. If someone is interested he would probably handle a 3 minutes video as well.. Also, I know that it can be hard to define the boundary between the HOW and the WHAT in computing (because of the abstraction levels - [relevant xkcd](https://xkcd.com/378/)) **but** the last actual code example is really HOW imho..
Why would anyone want to answer this?
Maybe someone would like to give some hint to an aspiring programmer who seeks knowledge, I do not know.
in general, it's pretty hard to use the same base language(ie. Javascript) to apply both declarative and imperial paradigms. When considering them, you need to go a bit more abstract -- and that's because programming languages are at their core *either* one or another and in order to have both you need to create abstraction layers that map one paradigm to the other. Consider haskell's way of saying "I want the array with it value doubled": doubleArr xs = [2*x | x &lt;- xs] *that* is much more "declarative" than whatever we have in Javascript. It's a map function(mapping elements *x* from array *xs* to result *2x*), but it's entirely declarative -- we first say *what* we want(2x) from somewhere, and we don't care *how* we get it. In particular, we don't know *how* it is done(is it really an iteration over each element? Or are there hidden optimizations?), and in that sense it's not very different from *map*. When you get into RXJS observable streams, where you can chain multiple operators and they'll be consumed lazily, or when you get into Java Streams, you'll realize that the declarative way helps you reduce your cognitive load. You don't care *how* these opperations work, what you care is that they do. Let library authors figure the optimizations.
If someone manages to replace the accumulator object in a reduce function then you have bigger problems.
Do you often use poll taking to kickstart a quest? I'm troubled by how low effort this post feels and how it lacks any relevance to you. I could understand launching a conversation around any opinions you may hold that deserve scrutiny and give us some idea where you're coming from. Each language has its advantages and some projects can leverage both and more. Have you done any personal research on these technologies?
Why stick with one language? If you like the company, go with their new dependencies. Javascript knowledge doesn't exactly expire and you can employ it in your personal life.
--- I started by studying Python on my own, I confess that I fell in love with the logic of language, and I did not find it difficult to learn. After a few weeks, some friends come to me and say I'm wasting my time and that I should have learned JavaScript. According to them, JS is in greater demand and much easier to get a job in the area of web dev. All this has confused me. So I thought I'd better evaluate what I should learn.
I see. I apologize if I came off too bluntly. You seem to be more sincere than I anticipated. If you want potentially fog clearing advice, I can simplify the confusion but multiply your chore instead: try everything reasonably available and applicable to your interests. Do some basic tutorials, get some syntax familiarity, develop a sense of what each is appreciated for. In the end getting your mind familiar with the widest variety of computing approaches will enhance you in the long run. Once you have some preferences on what you want to do / practice then I'm sure anyone will welcome their input on your quandary s.
Learn it, and if you don't like it, change :).
If you only know JavaScript you definitely have to learn more languages. Dart is a pretty new and relatively modern language. Even if you are planning to stick with JavaScript in the future, the knowledge of another programming language or languages will only make you better at JS. I‚Äôd stay in the company and learn as many new technologies and languages as I can. If you know more that JavaScript then you know what am I talking about.
Way too verbose. Should have kept it succinct. At the very least get to the heart of it ASAP. TLDR... Get an editor if you want to be a writer.
Go Tyler!!!
No man, 1 minute is good. We have this button called replay if it‚Äôs too fast for someone.
Wow it's amazing!!!!!
Udemy
She also tries very hard to guilt monger the NPM author and turn this into a "capitalist vs socialist" Stallmanist debate. Her point is that node author Ryan Dahl doesn't earn much today as he gave away his IP to the Joyent company, whereas the NPM author didn't and capitalized it by starting the NPM company. I don't exactly understand what's the NPM author's fault here, he did pretty much what every other dude does. She also tries to bad mouth ESR (Eric Raymond) which I didn't like at all. She somehow makes it his fault that companies aren't embracing GPL but going for permissive licenses like MIT and BSD instead. Its as if ESR is a corporate messiah who's advice the Silicon Valley IT companies regularly take!
It's not about the speed.. It's about the completeness and the amount of information bound to be limited in 1 minute..
Very clear. :-) This also re-enforces the necessity to understand \*both\* well.
I gotta stop sorting by new.
I meant, how ie display the page? Since you're talking about CSS mask and the aspect ratio, I guess it's about the chevrons separator.. If ie display the separators as flat lines it's some kind of graceful degradation which should be fine..
JS will never die, but I can definitely see wasm challenging its dominance. It won't just be statically-typed or high-performance languages either. Languages compete on all sorts of metrics, only some of which are performance-related.
Yes, and if a house is burned due to lack of warning caused by your leaky reduce function resetting a variable it does not own, your problem will be even bigger :)
Looks like OP edited his article to match /u/JFGagnon's suggestion, but has anyone mentioned a ternary? You could do something like: `...emailIncluded ? { email: 'john@doe.com' } : {}`
Thank you for the reference. So even `.map` is not working? I can see the merit to remove some 100+ operators that you don't need, but would some prioritisation not be possible for 2-3 most used ones? While [there are valid complains about promises](https://stackoverflow.com/questions/45712106/why-are-promises-monads/50173415#50173415), one thing they did right was to identify `then` and `catch` as 2 most important operators they can safely patch on your prototype without blowing your bundle. :)
&gt;I think pretty much all declarative programming abstracts over a lower layer of imperative programming Isn't it the other way around? All imperative programming abstracts over declarative. If you look at the for loop code, it's never told *how* to double a number. And if you go all the way down to machine code, you never say *how* to bit shift or push onto the stack. Ultimately, at some level, the computer just has to do what we tell it.
I'm not sure I'm understanding, you really need to post your code. By the sounds of it, you already have the data to return to the user since you just submitted it to the API endpoint. I'm assuming your code is like this const yourData = ... api("https://...", yourData, function(howQueryAffectedTable) { // Do what you want with yourData and howQueryAffectedTable }) If that's the case, what's the issue with using the data you just submitted to the api endpoint?
It has to do with the size of the int32 type in C++ (Javascript engines are written in C++). int32 can represent 2^32 numbers (because it has that many bytes), but half will be positive and half negative (this is in contrast to uint32, where each combination of bytes always represents a positive number) The maximum positive value possible in int32 is 2,147,483,647, so if you go over that, you get a [integer overflow](https://en.wikipedia.org/wiki/Integer_overflow) and you get a negative number. `setTimeout` takes that to mean that you meant zero, since you can't have negative time. As you go even higher, with a number like 5,203,793,434, you're overflowing again back to a large positive number. If you keep going higher, you'll eventually overflow again back to a negative number and so on.
Thank you so much for this insightful answer. That makes perfect sense. Granted you probably never actually need to a setTimeout over 2,147,483,647 milliseconds and even if you did, there are better ways to handle it haha.
I‚Äôll try saying the same thing in a different way. Wasm will slowly get more and more features over time, many of which will be the same as js. If then it will do these things in a more performant way than js and I can use my favorite non-js language to use it, why do I need js for?
Yeah, if you really need this kind of long-ass timeouts, just check if the number is greater than `2**32` and nest setTimeouts recursively with each having a maximum delay of 0xFFFFFFFF ms
Hey! Thanks for the reply. Excuse my english. I'm posting my code. router.post('/', authenticate.authenticate, (username, req, res, next) =&gt; { let title = req.body.title; let author = req.body.author; let isbn = req.body.isbn; let quantity = req.body.quantity; let id = uuidv4(); if (title == null || author == null || isbn == null || quantity &lt;= 0) { res.status(400).json({ Error: 'Enter all information correctly (title, author, isbn, quantity)' }); } else { mysql.getConnection().query('insert into books values (?,?,?,?,?,?)', [id, title, author, isbn, quantity, username], (err, data) =&gt; { if (err) { return res.status(500).json({ Error: err + 'SQL Error' }) } else { return res.status(201).json({ Success: 'Book Created', }) } }); } }); The authenticate is a middleware function which checks the basic auth token which is unrelated. The data that I get from the mysql query contains information about how the query affected the table and not the actual data that the user has entered in the request body. I want that user entered data to be returned back to the user in the response. Is it possible to do that without using a select query? I know that I can simply just take data out of the req body, wrap it up in a json and send the response. But I want to know there is any in-built way to do this with the mysql nodejs module.
MySQL does not support returning data from an INSERT query.
In a sense functions. Hide the code in function and just call them. Give it a cute name and nice sugar syntax.
If you have a 2,147,483,647ms (~24.8 day) timeout, it is probably time to refactor something. For some reason my psychic power is saying I'm going to be writing a 20 day timeout tomorrow.
I've got no idea if there is some built-in way to do it with the mysql module. The best way to find out would be to read the API docs for the module and see if it's possible to get the inserted record with the .query API. But it would seem like the obvious way would be to just return the data the user submitted in the req.body. I don't see anything wrong with doing that. Also a few other pointers, you should be using "const" instead of "let" as you are not changing the values of those variables after you initially set them. You can also simplify that whole first part where you declare your variables like so const { title, author, isbn, quantity } = req.body; Much cleaner syntax with far less typing
I mean there are definitely people here who could do that, but what it sounds like you are asking is for someone to make you a tf2/csgo gambling site.
If they're paying you to learn on the job, that's actually a pretty good deal, if you ask me. With that said, Flutter hasn't really proven itself yet as a "real" stack as far as job opportunities are concerned (compared to plain iOS+Swift/Android+Java), so if you want plunge into it, I'd take it as an intermediate step towards a native mobile career (meaning you should be prepared to learn native SDKs if you want to continue growing as a mobile developer). Doing so could mean more money and different opportunities down the road. People say JS changes a lot, but I think you can always go pick it back up too if native mobile isn't for you.
no i want to learn how to make one using html5 and javascript
Cool. Learning to create an application in HTML5 and Javascript with the complexity you describe is a long journey. You should probably start [here](https://developer.mozilla.org/en-US/docs/Learn/JavaScript).
how long do you think this thing will take?
Not gonna lie, I've done written code that required some pretty ridiculous intervals (e.g. bots). But at that point you're better off with something like https://www.npmjs.com/package/cron
From knowing nothing at all to a fully functional site that integrates with Steam, checks users' inventories, allows for trading and so on? Heh. Years. Under a year if you are absolutely brilliant. In any event, surely you are aware, that Valve no longer allows that sort of shit?
Thank you for the tips. I'm still an amateur but learning everyday. Nodejs is very fun to code and learn.
[tf2hunt.com](https://tf2hunt.com) [tf2blaze.com](https://tf2blaze.com) i want to make sites like these
What this guy said.
0 downloads in a year doesn't mean not popular, it means literally nobody is using it except maybe the author.
Oh! okay. I guess I will just return from the request. One of my TA's was adamant that there must be a way to do it and was thinking that I was slacking off. Hence the post. Thanks!
Yea. You want to build a scam site. A noble pursuit to be sure. I guess everyone is just lucky you don't know how.
no i dont i genuinely want to have a gambling site to make profit and to let other people have fun. and i assure you these other sites arent scam sites i know because i have played many times on them.
Postgres supports RETURNING, but MySQL does not.
Thanks
The else is a guarantee that it would be assigned.
So, imperative-vs-declarative actually has a little dark secret: they are often interchangeable. For example, React render calls are imperative (in the sense that you can step through its code line by line), but also declarative (in the sense that the way DOM updates are applied are completely abstracted away from the tree of React.createElement calls). Surprisingly, this happens even with code that looks 100% imperative. Compilers can take something imperative like a `for` loop and turn it into one of dozens of different assembly code variations because different scenarios can be made faster using different strategies. So even though you're specifying a "how" (by saying "loop over this"), the compiler reads it as a "what" and implements a "how" that might not even be a loop at all (e.g. loop unrolling) `map` in JS happens to be not as interesting as its Haskell counterpart, but it could be in theory, given a sufficiently-smart-compiler(tm). JS map/filter is still fairly infant in terms of implemented JIT optimizations, whereas Haskell map/filter do go through some incredibly aggressive optimizations, similar to how gcc does shenanigans to otherwise imperative-looking loops in C.
A pure functional reduce with no mutation is incredibly slow. For our project we had around 100k objects in a list and reduce took about 2 minutes to construct an object (lookup table) from that list. Changing it to forEach (which is still slower than an imperative for loop) got us down to around 13ms with the same data set. Mutating the accumulator is also slow; and I'd also say a misuse of reduce overall. It serves no purpose as each iteration assumes its updating the accumulator when it returns, but you're directly modifying the accumulator. &amp;#x200B; Reduce is great when you have to construct the object from scratch anyway (constructing hierarchical data is a good example of the penalty paid by using reduce being worth it).
This is exactly what it comes from. Reduce looks cleaner, however it's an un-optomized mess.
Thanks for doing this. I had no idea jsperf even existed. It would've made our benchmarking a lot easier. hah!
Thanks for the video, very nice explanation. One thing I really did not appreciate is how loud the music at the beginning is in comparison with your voice, I had to bring the volume down to 5% and then back to 100%
How is vue similar to AngularJS?
Flutter is a really great framework and dart is very similar to Javascript. Also flutter follow very nice patterns and force to follow some good practice for separation of you data and Ui (not so obvious in react for example). If you plan do mobile applications, flutter is really worse to look at it in comparison to react native.
Thanks for the feedback! I just checked and the API is up at the moment. I don't have something like node forever running so I don't think it went down. (unless heroku automatically brings things back online)
I feel like if the Sql query didn't return an error than it's safe to assume the information you just passed to it was saved as a record, and can be sent back to the user. Writing a unit test would further validate this.
\+1. Stephen Grider or Maximillian Schwarzmuller are both great
Don't think of it as "leaving" it's not like you're going to forget everything javascript when you pick up another language. Plus it will broaden your horizons and make you more marketable.
Google MDN
Wasm will not replace javascript. Wasm is great if I'm worried about performance. There are so many simple things we need web pages to do that don't need to be ultra performance that javascript just makes more sense for.
Learning python really helped me write better formatted js. I prefer node over python for web development. Python really shines for security, network and systems programming. Use the right tool for the job.
So ES6 enables Declarative Programming in Javascript.
Yeah I think you're right. I wouldn't really consider either using `.map` or functional programming in general to be "declarative" programming personally. They're basically just wrappers over lower-level imperative code. I think something like Ansible or SQL migration systems (the ones that can sync from a canonical definition) would be better example of declarative programming. We all know that... * Declarative says what you want * Imperative says how to get there So technically the way I see it is that any system that "does" anything needs some imperative code somewhere... it might be that you wrote it yourself earlier, or use a library/framework/language that does the imperative part for you. Either way, the imperative code still needs to ***exist*** somewhere. Declarations can't "do" anything on their own. Most of the work I've been doing over the last year has been on a large declarative system, but I still had to write the imperative code or use other libraries to actually "do" anything from the declarations. A couple of analogies: * Order a meal in a restaurant * Telling a driverless car where you want to go ...are both "declarations", but only for the person ordering. The chef or driving software still need to get the imperative parts done.
Time to learn some web history so that you don‚Äôt repeat it.
I am having trouble getting it to work how I would like, maybe you could help. It seems to be too strict even with the "match" configuration set. Take for example `index.add(0, "drugs")` ; when i search for `index.search("drugx")` it returns nothing despite that being a one letter typo. I've played around with the threshold, depth and resolution settings but can't get it to work. Another example is if I have the doc parameter to be set to `doc : { id: "id", field: ["tag"] }` and then `index.add({id: 0, tag: "bears_and_beets"})` ; if I search for "bears" it gets returned but not if I search for beets. Thank you for your assistance.
Why did you decide that it had to be exactly 6 use cases? The first one, wording aside, is literally the definition of the `map()` function as stated above, the most basic use. The second is a niche case for React or any rendering library which technically conforms to the first example and the definition of the function, this should just be a special case example. The fourth is just an extra ternary inside the `map()` callback, not a special feature of this function. The fifth, `filter()`, is a completely different function which really has no connection to `map()`, they both just exists in the context of an array. The sixth one is very verbose, obscure and honestly just bad practice for the intended result - `'foo'.split('');`
There's been some drama inside npm, the company, I believe, but nothing that affected the wider ecosystem too much. There's a lot of potential drama in npm's ownership, though.
Well, I haven't seen anything outrageously false, so it would be nice if you could correct those claims here for those like me who missed them. For me, it mostly was an account of her experience and prediction of the future of things.
Funny, I didn't interpret those as guilt mongering and bad-mouthing at all. There might be more nuance in the presentation itself (I didn't watch that), but I guess text is just open to interpretation.
It may also be that the TA has mixed up what frameworks can do with DB capabilities. Many node-based frameworks return the full query result after an insert or update operation. e.g. Strapi, AdonisJS.
This. I bought a 10 usd, 40+ hours course with Stephen Grider and he is indeed Great
I just don't know what to make of these: &gt; The first thing this new CEO wanted to do was change npm‚Äôs culture‚Äî you know, the thing it had exported as its marketing message. The sustainable, compassionate culture was the first thing to go when this new guy arrived. &gt; npm's sole owner decided to try something other language package managers hadn't tried: he decided to try to take VC funding and turn his software into a company. She is trying to suggest that NPM owner is bad just because he kept the IP to himself instead of transferring it to Joyent like Ryan did. And then she somehow turns this into a capitalism vs socialism debate: &gt; They aren't wealthy, despite the enormous value created by the software they wrote. Capitalism is supposed to reward people like them, but in practice it does not. She is basically confused and mistaken. On one hand she talks about this great commons brotherhood and how they aren't interested in any money. And at the same time, accusing the "capitalists" of stealing their value creation. If she isn't interested in money, why should she care about how wealthy the so called capitalists are?
Odd. My iphone 8 is running it perfectly fine in portrait.
I see. But then the `.pipe` is "monkey-patched" instead of `.map` :) Wouldn't it then be cleaner to use the purely functional pipeline as in https://github.com/dmitriz/cpsfy#api-in-brief? pipeline(fromEvent(saveBtn, 'click'))(map(click =&gt; save()))
&gt; She is trying to suggest that NPM owner is bad just because he kept the IP to himself instead of transferring it to Joyent like Ryan did. OK, I didn't interpret it as that. But even under your interpretation, that's still clearly an opinion, no? &gt; If she isn't interested in money, why should she care about how wealthy the so called capitalists are? As I understood it, her point was not resentment about the wealth of the investors, but how good behaviour (i.e. writing valuable software) does not get rewarded to the extent that potential bad behaviour (i.e. closing down the registry, selling our data, etc.) is, and that she expects that not to be the case for a decentralised package manager.
You should ask this question to the RxJS team :)
Well, at least you don't need to pipe your subscribe. :) [https://twitter.com/thekiba\_io/status/1131566351812890624](https://twitter.com/thekiba_io/status/1131566351812890624)
I think a slightly better simple explanation might be that in imperative programming, *desribe how things work*, while in declarative programming, you *define what things mean*
&gt;Either way, the imperative code still needs to exist somewhere. Declarations can't "do" anything on their own. I'm glad you said that, That's the biggest hangup I've had trying to understand declarative programming, so I'm glad I'm not just missing something big. Do you think it would be fair to say that declarative programming works strictly on abstractions? More than that, simply writing a reusable function is a way of making your code more declarative? (particularly one with no side effects). Thanks for your explanation!
I have no purpose to convince you, but I must say that Lightweight Charts is intended for an absolutely specific purpose - to display financial charts, i.e. changes in the price of securities over time. Users of such charts are traders, investors and just people interested in securities. For such data, there are strictly defined ways to display. The most popular ways of displaying are bars (financial bars) and candles, which are simply not in ChartJS. They are not there not because it is a bad library, but because it is intended for other purposes. Also, as one of the developers of Lightweight Charts, I can comment on advertising. Once again I want to say that the one who wrote about the advertisement simply misunderstood that he found an advertisement on the TradingViev platform, where users can view data and trade. This is in not related to the open-source library. Indeed, there is a small attribution (text "TradingView") in the library, but it can be turned off via the API if it interferes with the display of graphs. In this case, it should be written somewhere on the site that it uses the TradingViev library with a link to the site.
Considering javascript's max safe integer is 9007199254740991, should't this behavior be considered a bug?
I'd also say side-effects in \`map\` are a bad thing. It should be mapping from one shape to another. The idea of calling functions inside a map call, should be done in a forEach at a minimum
This comment is scary
&gt; Eh, I feel like the better question is, "Why are people arguing about what is and isn't code?" Surprisingly most often the reason is to pretend they have an architecture they don't. For example you tie up your project to a dependency it requires, but you do so through configuration. "We're not supposed to be dependent on this package..." "But we're not, this is not in our code, it's only configuration!"
Which use case are you referencing? I don't see any side effects anywhere.
No. Using int32 for the argument makes much more sense than letting IEEE754 number be inputted. 99.99999999999999999999999999999999999% of usecases aren't going to need such a big number as 2,147,483,647 anyway so increased CPU overhead of encoding/decoding IEEE754 number would almost always go to waste. This would not be desirable especially for a such a function which runs all the time.
Hm, majority of people seems to accept this as a definition of declarative programming. This is just bs, using .map ads a level of abstraction, it does not change the programming style in any way, because if this is true, you are just saying that declarative programming uses more abstraction, which is factually incorrect, since nothing says that you can't use abstractions in imperative coding, and it does not stop being imperative just because you call a function.
&gt; Do you think it would be fair to say that declarative programming works strictly on abstractions? Yeah I guess that's one way to put it. A simple .ini / JSON / YAML configuration file is probably the most pure form "declaring" things... because you typically don't put in `if` logic in them. So basically any code you write that's leaning towards looking a bit like a config file, and then also the imperative code that does things based on those definitions is what I'd call the "declarative programming". One example: It's pretty common to see CRUD websites built that have separate routes/actions like: * /user/edit * /user/delete * /blogpost/edit * /blogpost/delete * /category/edit * /category/delete * etc... ...and the devs write HTML form code, and JS+backend submission code for every one of them. I stopped doing that a few years ago, and abstracted it away, and now I generally just have a single endpoint that all forms submit to. Each form has a definition/configuration with stuff like: * Name of the form * Access level needed to view/submit the form * All the fields to display, and where their data goes * Anything special about the form like extra code to run before/after submission etc ...and the one-and-only form submission endpoint just loops over all the defined fields on the form to process them. And any form that doesn't need a custom design can also auto-generate the HTML to display the form based on the definition. I could have instead just used .json files to define each form... but writing configuration in an actual programming language gives you a lot more flexibility. So if you can look in two different areas of your code as see that one area looks like a "configuration", and the other area is the imperative code that does the work based on those configs, then that's basically declarative programming. If there's very little distinction between the "configs" and the "doing" code, then you're further away from using declarative programming. &gt; Moreover, that simply writing a reusable function is a way of making your code more declarative? Quite often, yeah. Especially if the function's arguments tell the function what the caller "wants" rather than telling the function what "to do". But it's really getting down into the nitty gritty of the definitions of words, haha. &gt; Particularly if your function has no side effects. This doesn't matter too much. That's probably more relevant to functional programming concepts and immutability.
Erk, I misread when I saw the "use it as a for-loop". Ignore me. :D
This is rather trivial and a link to a tweet to say Array.isArray exists isn't needed.
Relevant link [https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Maximum\_delay\_value](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Maximum_delay_value)
Thank you for further elaborating. That's very helpful!
That'd be nice, but I'm hanging out for [the pipeline operator.](https://github.com/tc39/proposal-pipeline-operator)
It really does turn JS into a power house of shareable abstractions!
In that case, be sure to fill in [this survey](https://qsurvey.mozilla.com/s3/2019-TC39-Feature-Experiment)! (Context: [they're trying to learn from developers](https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/) in developing the spec, using the pipeline operator proposal as the first use case.)
This year i took a private course on SQL, when i came to the exam it turns out I never learned any advanced SQL functions and instead just looped through literally every single query result when i needed to find foreign keys and many-to-many connections, which was a lot of times, when i simply could've used select from where inner join on. Got the highest grade tho
Is there any standard on which one you should be? I'm imperative 100% of the way, so just wondering.
It's pretty sad that I can't use this awesome plugin with Typescript now...
Same here. There is not one single video I was able to learn something from.
It's not a plugin, but a proposal for Javascript language features. Until it's at stage 3, the exact syntax might change, so starting to use it in your code base today is probably not a good idea....
I think "await #" is really awkward. Why it should be different from one-argument function?.. I'd rather prefer something like "|&gt; await someFunc(#,2)"
Pretty nice!
I believe he was referring to https://babeljs.io/docs/en/babel-plugin-proposal-optional-chaining And yes, using something that is stage-2 or lower is risky - look at decorators. There are some big apps already using them and the specs move slowly.
You can use it, there are babel plugins that translate non-standard typescript like if (menu.languages?.[userSelectedLanguage]?.menuObjects?.title?) return true; else return false; to standard typescript, which can then be compiled to js. If you don't want to deal with build systems and want to avoid longwinded crap like if (menu &amp;&amp; menu.languages &amp;&amp; menu.languages[userSelectedLanguage] &amp;&amp; menu.languages[userSelectedLanguage] .menuObjects &amp;&amp; menu.languages[userSelectedLanguage] .menuObjects.title) return true; else return false; you can write your own wrapper function to test all of that for you automatically so you only need to type something like: `deepIf(menu, 'languages', userSelectedLanguage, 'menuObjects', 'title') ? true : false;` In fact the typescript handbook recommends writing certain wrapper/utility functions for certain workflows.
&gt; you can write your own wrapper function to test all of that for you automatically or just use lodash.has. Anyhow, since you can't really write a universal type guard for deeply nested values, if you actually want to work with those values instead of just checking for their presence, TS will produce errors. There acually *is* a correct typing for lodash.get (generated algorithmically), but it doesn't work anymore: https://www.npmjs.com/package/ts-get-safe
I tried web dev programming for a little bit. The tools are out there. The issue long term is that, by itself, I can‚Äôt multitask fast enough. I need to switch to debug or test the view every few changes and sometimes you can‚Äôt switch quick enough and I felt slowed down. That said, I use Duet to turn the iPad into a second monitor (fourth really lol) so that I can use it to display things I only need to see at a glance or take notes.
We've been using idx ([https://github.com/facebookincubator/idx](https://github.com/facebookincubator/idx)) as type safe alternative until this lands in TS :)
golang
That‚Äôs also nice, but I‚Äôm holding out for [promise pipelining](https://capnproto.org/rpc.html) :)
How long does it usually take from stage 2 until it's ready?
Oof, those decorators. With any luck, that [won't happen again](https://github.com/tc39/proposal-decorators/blob/master/README.md#why-is-decorators-taking-so-long).
You don‚Äôt need anyone here to teach you. YouTube is filled with free tutorials to get you started. If that isn‚Äôt fast enough for you, I‚Äôll be happy to do it for you if you pay me. I accept Bitcoin and Monero.
They have been waiting to add this to Typescript for years. I‚Äôm sure it‚Äôll be in a release very soon now
I used to be all for that, but then I noticed how little I actually use it in Elixir. Once your codebase becomes sufficiently complex (and structured/organized), you end up using `with` all over the place and `|&gt;` sparingly
Base on tc39 the whole process take atleast 1 year. There are 4 stages
\+10yr caveman dev with no interest in fancy tooling/transpiling here. My question, is this gonna work?: &amp;#x200B; a?.hasOwnProperty?.("b") ? b.apply(a,[...args]) : null As far as I can see, `?.` has stacking context, then if `a` would a primitive, let's say Boolean `false`: \- Engine wraps `false` with `Boolean` object. \- `Boolean` object is not undefined/null so it proceeds `[Boolean].hasOwnProperty` \- `[Boolean].hasOwnProperty` maps to `Boolean.prototype.hasOwnProperty`, so it is not undefined/null, next `?.` proceeds, still remembering `a`. \- Last `?.` calls `a.hasOwnProperty("b")`, returns false. &amp;#x200B; Is my assumption above correct?
Right :D Fucking insanity, who in their right mind would fork up 40 a month :D
Why aren‚Äôt you a fan of code review? I think it‚Äôd be more valuable for you to actually post code and get feedback on it.
[Trying it out in Babel's playground](https://babeljs.io/repl/build/master#?babili=false&amp;browsers=&amp;build=&amp;builtIns=false&amp;code_lz=IYfgdARg3AUDqTAYzAE1vcFnnXBA2gOQREC6shEFmYAFAJRRA&amp;debug=false&amp;circleciRepo=&amp;evaluate=false&amp;lineWrap=false&amp;presets=stage-0&amp;prettier=false&amp;targets=&amp;version=7.0.0-beta.2) it does indeed appear to return `false` - assuming the playground is up-to-date with this proposal.
I think that's practically impossible to tell, as it depends on many factors. The primary bottleneck appears to be whether a browser vendor will implement the proposal. Don't let the four stages fool you though - [once it's at stage 3, it's safe to start using it](http://2ality.com/2015/11/tc39-process.html) (with a transpiler, of course, but the syntax won't change).
My projects are really small, so I would rather learn from examples. Im trying to find out how experienced programmers actually code.
I don't think TypeScript typically includes stuff that's not on stage 3 yet. (Decorators behind a flag being an exception, but I think that was mostly due to the Angular team pushing hard for it.)
Just because they‚Äôre small doesn‚Äôt mean that you can‚Äôt get valuable feedback from code review!
To be entirely honest, I don't like this. I don't mind the pipes but that placeholder business is grotesque.
&gt;a?.hasOwnProperty?.("b") ? b.apply(a,\[...args\]) : null \+1. Yes, I checked it, compiles to this: var _a, _a$hasOwnProperty; ((_a = a) === null || _a === void 0 ? void 0 : (_a$hasOwnProperty = _a.hasOwnProperty) === null || _a$hasOwnProperty === void 0 ? void 0 : _a$hasOwnProperty.call(_a, "b")) ? b.apply(a, [...args]) : null; So it means it returns `false`.
Looking at github is free and you dont have to ask anyone to share.
It's a guarantee that something will happen in one of the branches. Not that something is assigned to 'result'. You know it happens by inspection, but it isn't forced by the language. That's what I mean, using a language feature (ternary) to ensure it.
Hi /u/KeepltSimple, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Miles99740, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/TheSaasDev, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Flexed_, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ketanIP, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/mrpbennett, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/MasHary911, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Please be careful with the poster. He ripped me off $150 for posting campaign and he never replied me again till this moment. I paid him via bitcoin and i have proofs of payment and how he moved the money out of his bitcoin account. Y'all be careful of @DanielB2B; he has not replied me since i made payment on may 26 2019. He's a scammer. please take him down. &amp;#x200B; proof of payment &lt; [https://www.blockchain.com/btc/address/3Ex1KZeUfgte38qZ4YDPDmNAnMZy8cUPo4](https://www.blockchain.com/btc/address/3Ex1KZeUfgte38qZ4YDPDmNAnMZy8cUPo4) \&gt;
Big hmms
Hi /u/pixeleate, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Didn't notice this reply til now. So sorry for necroing a thread but: First, I haven't worked with C in a number of years so don't focus on any syntax errors I might make. This is only supposed to get the point across, not compile. So implementing fill in a pseduo C like language so it acts the same way as js when an object is passed might look something like this: Object foo = new Object(); Array *a = malloc(size * sizeof(Object*)); Object *ptr = a; for(int i = 0; i &lt; size; i++) { ptr = &amp;foo; ptr++; } Again, that's just pseudo code but the point is that's an array of allocated memory where the size is the size of the array multiplied by the size of a pointer to the object; `size * sizeof(Object*)`. It's an array of pointers, or in js an array of references, not an array of Objects. Then each entry in the array is a pointer that is pointed at the same individual instance of the object: `ptr = &amp;foo`. So if you modify any of the array entries they all point at the same underlying instance but the array is properly memory allocated and all that.
What placeholder?
Pastel is pretty unique and easy to use.
Some very very nice changes here. This is what gives VS Code its great reputation. In particular: 1. Smart selection for JS/TS 2. Merge conflict side-by-side pane
I was one of the few CoffeeScript lovers, it‚Äôs probably my favourite language still. But as JavaScript got better, I don‚Äôt need CoffeeScript anymore but still really miss features like this
They're just not adding native support. vue-class-components will still work, just like it did until now.
I mentioned the same thing about new Jar(#) in the feedback. Seems like the default should be to automatically 'curry' the first argument, and only use # to override that behavior.
It looks like /u/TaskForce_Kerim is talking about [the pipeline operator proposal](https://github.com/tc39/proposal-pipeline-operator) instead.
it's weird that they don't aim to support all native JavaScript. Coming from the Java world, the class syntax is very pleasant to use
In related news: - [Dynamic import](https://github.com/tc39/proposal-dynamic-import) is now stage 4 - [Top level await](https://github.com/tc39/proposal-top-level-await) now stage 3 - [Nullish coalescing](https://github.com/tc39/proposal-nullish-coalescing) now stage 2 - [Array.isTemplateObject](https://github.com/tc39-transfer/proposal-array-is-template-object) now stage 2 - [for-in mechanics](https://github.com/bakkot/for-in-exploration) now stage 2
Hi /u/Dorus_harmsen, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/frankleeT, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/DevNewbCom, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
That's exactly what I put in my comments. I think it's much cleaner, readable
It's a shame you're this late to the game - this comment should really be at the top. Excellent!
That's why we implement it in the first place
thank you!
Depends who you ask. Integer overflows are historically considered "garbage-in, garbage-out" (because historically, one had to be aware of data type widths and this "bug" relates to physical limitations of hardware). Another example is `9007199254740991 + 10`, which clearly gives the "wrong" result mathematically, compared to `BigInt(9007199254740991) + 10n`, but which would normally be shrugged off with a "well, don't do that" if you were to make a bug report about it. Some languages (e.g. Clojure) can autodetect when an integer overflow happens and automatically switch over to a BigInt implementation under the hood if needed in order for mathematical operations to remain correct under all circumstances, but most languages don't do this because BigInt is really slow, compared to int32, and even the overflow check can add a non-trivial amount of overhead if you're doing heavily mathematical operations.
It‚Äôs definitely possible. The implementation will vary depending on where you want to run your code (browser vs. Node), and how you want to interoperate between languages. You could, for example, have both applications read and write to a JSON file in your file system in order to determine the current state of the game, along with instructions. Both JS and C# can handle that. If you want to implement a GUI, your best bet is probably to use the browser‚Äôs built-in API, but that won‚Äôt be easy if you don‚Äôt know HTML, CSS, and JavaScript. You could also implement a GUI on the C# side, perhaps as a CLI interface. I would be hesitant to interop between the two languages over a network connection due to potential latency and many other complications. I‚Äôd probably stick to running everything on your local machine. If it were me, I‚Äôd probably set up two servers on different ports and have both of them watch a specific file that contains info about the state of the game, and have them pass messages back and forth to each other for updates. The output can be viewed in several different ways. Depends on what you are most comfortable with.
Strictly speaking, this is not about running async/await in parallel, this is about running any async function in parallel with another async function, regardless how it is implemented either with async/await or Promises \`then\` or callbacks (converted to Promise), etc. With [effectfuljs](https://github.com/awto/effectfuljs/tree/master/packages/es) transpiler you can write async/await functions with parts running indeed in parallel. It will analyze its dataflow e.g. ```javascript async function parDemo() { const a = await A; const b = await B(a); const c = await C; } ``` Will be equivalent to handwritten: ```javascript async function parDemo() { let a; const [b, c] = await Promise.all([ (async () =&gt; { a = await A; b = await B(a); })(), C]); } ``` Not how much it more complex, and the complexity will increase exponentially with the number of operations and dependencies between. Simple dependency change may require a full code rewrite. This works for any JS statement including loops, it will parallelize loops if iterations don't have dependencies between each other.
which transducers are you refering to?
The previous version of the article was using a ternary. I suggested something that‚Äôs a bit shorter
Argh. My bad! I meant to comment on the pipeline operator.
Please elaborate. Surely, you've used the logical or operator (\`||\`) in the past to set a default value instead of using an \`if\`. So why is it different with the logical and operator (\`&amp;&amp;\`)? &amp;#x200B; Just because you are not comfortable with a syntax doesn't make it an anti-pattern...
Or more strictly speaking, running concurrently, not necessarily in parallel ;)
nice and easy explanation
I'm into that.
Minor correction here (not related to optional chaining): Boolean doesn't implement its own `hasOwnProperty` so the lookup actually goes further and pulls `Object.prototype.hasOwnProperty` false.hasOwnProperty === Object.prototype.hasOwnProperty // true
Right, but not necessarily, the A, B, C actions can do some calculations in WebWorker, or napa js, or whatever. And it is there effectfuljs is useful again. It can provide access to the program state so runtime can marshal it to other context, thus implementing clean code parallel computations.
Bit strange that: (obj.foo.bar)?.baz
Hi /u/Mario_NP, this post was removed. Job and job-related posts are prohibited * Job postings: Please post to /r/remotejs, /r/forhire, etc. instead of here. * Job/Career advice: Please post to /r/cscareerquestions instead of here. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I'll try not to panic next time haha
Then you don't seem to really understand how JavaScript works. It's very clear why what you wrote is happening. Parathensis don't do anything on their own, they just group an expression, like in a mathematical context. You're asking for \`obj.foo.bar\`, and THEN you're asking for \`?.baz\` on whatever the object path evaluated to. Changing the behaviour of paranthesis just for this operator would break a lot of stuff. Also: it's "would have", not "would of". The latter doesn't make any sense.
Would it be possible/advisable to use optional chaining at work already (using Babel)? We‚Äôre using a lot of _.get for this, but this would be shorter and easier.
It's prone to abuse and can easily lead to writing unreadable mess. The logical or example is the one exception because it's so widespread - and I have seen that abused too &gt; Just because you are not comfortable... oh stop trying to play childish mind games
Actually, now that you have rewritten #5 to include `&amp;&amp;` instead of an if, which is an anti-pattern that leads to messy code, I am not so sure anymore...
One hell of a post with lots of useful and interesting information (at least for me) bundled like a webpack bundle üëè Thank you!
I thought I was on r/cycling or r/peloton for a second...
My largest node_modules is currently at **211 MB**, with **38,597 files** and **4,789 folders** from **19 dependencies** and **26 dev dependencies** (only counting top level of course). And that's just the web client for one of my projects, not counting the server half and other standalone modules that use npm. Better yet, if you're willing to count puppeteer's local copy of Chromium, then throw in another ~318 MB and 76 files.
I thought there was no way of observing those implementation technicalities in javascript, as i was under the impression all positive numbers bellow Number.MAX\_SAFE\_INTEGER were safely represented. It's good to know about such things and a shame to need this knowledge. HTML's official docs don't mention this behavior, nor does ECMAScript, but, as mentioned by u/TnTakara, there is a small section about it on Mozilla's site, so i'm guessing this is browser dependent?
Map, filter, and reduce Not true transducers, but closest we have without external libraries
Hey! Not a bad first attempt. The first thing I see is that you have a script element that has both a src and a script inside the tag. Give the mdn reference for the script tag a read: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script And try separating out the script reference and the embedded script, see where that gets you. Fun project!
I actually liked `await #`. Since `await` is just a keyword, it does need to be applied to something. Putting that `#` in there makes it more in line with the standard use of it.
I never understood the ‚Äúpeople will abuse it, so we should not use it‚Äù mentality. Bad programmers will always find a way to write unreadable mess, regardless of the syntax they use.
This line will throw an error: `document.getElementById('outputDiv').innerHTML = + response +;` It should be: `document.getElementById('outputDiv').innerHTML = response ;`
1.25GBs... A CRA with Typescript/Sass and react-google-maps.
At a broader level, I've always viewed this relationship as "intent" vs "method" where intent means "this is what I want, I don't care how" and method is "this is what I want to do (regardless of whether it actually gets the results I wanted)". I guess the mistake most people make is not realizing that you need both an intent and a method, it's just how much you're letting something else decide the method for you. The more you want full control, the more imperative your programming. The more you want to say simply what you want done and letting the language figure it out for you, the more declarative your programming. I mean, this is basically low level vs high level programming in a nutshell. You could tell the processor exactly how to do everything, and that's more or less about as imperative as you can get with a computer. But of course very few people want to do that. No, let the computer decide how to accomplish a low-level task for me. To use JavaScript, compare the different ways you could check for the existence of a value in an array. The intent is to get a boolean, true for containing the value, false if not. The more imperative way of doing it would be to manually loop over the array with for and check each index value until you find a matching one. We control most of the method. The hybrid way from darker years was to do indexOf(x) &gt; -1. We declaratively request an index, not caring how it's actually done behind the scenes, but then we imperatively decide that the array contains the value if the index of that value exists, that part we still dictate. And then there's includes(x). Now we don't need to do any of the implementation ourselves. We simply ask "hey, array, do you have this value?" That's what we're moving toward because it's more convenient and definitely more readable, while performance impacts are usually insignificant, -usually-. It'll be interesting to see where AI-assisted programming takes us. Programming itself is just a stopgap in getting computers to do something useful for us. For now we have to tell computers how they should do something until they're smart enough to figure it out for themselves. But otherwise we as humans are generally very faulty. We make bugs. We make suboptimal decisions and algorithms. We make bad design choices.
[Empty because I don't have one üòõ](https://yarnpkg.github.io/berry/features/pnp)
Fair enough on the branding and ads, so I take that back. :) But ChartJS does have candlesticks: [https://www.chartjs.org/chartjs-chart-financial/](https://www.chartjs.org/chartjs-chart-financial/) According to [https://www.chartjs.org/docs/latest/charts/](https://www.chartjs.org/docs/latest/charts/) it's not a built-in type for some unknown reason to me, but it is by the ChartJS devs: https://github.com/chartjs/chartjs-chart-financial
I didn't say Boolean implements its own prototype. I said it "maps" to. And that in turn maps to: `Boolean.prototype.__proto__.hasOwnProperty`
Hi /u/Chawki_, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/the_magical_bucket, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Very glad to see this. The other day I had to check parent nodes before accessing deep objects and just felt it looked sluggish and inefficient. :)
Anyone who wants to use functionality like this today without waiting for language features should take a look into **lenses**. They're a concept, not a library, but there's a good (and simple) implementation in Ramda ([https://ramdajs.com/docs/#](https://ramdajs.com/docs/#)) Using Ramda, if you had: `const obj = { foo: { bar: { baz: [1, 2, 3] } } }` You could do: `R.view(R.lensPath(['foo', 'bar', 'baz', 1]), obj)` And get 2, or do: `R.view(R.lensPath(['foo', 'bing', 'baz', 1]), obj)` And get undefined with no errors about "cannot read property baz of undefined". You can also use them to set values the same way as reading them, and they're immutable by default. There's literally too much to type about them in a single comment, but suffice to say they're powerful.
Considering how prevalent 'Cannot read property foo of undefined' errors are in JS development, this is much appreciated. Yes, you can rant that people should do null guards better and write less brittle code. True, but better language features help protect users from developer lazyness.
The most problematic thing here is that they tried to act as gatekeepers to knowledge which wasn't even their's to being with. Its also wrong to justify them by saying "users put the walls, not medium" as many seem to be doing. In several cases, they coerced and even back mailed the users to put their content behind walls as the leaked email by FreeCodeCamp founder clearly shows. Medium sucks for a whole lot of reasons not just one, people should just stop using it.
Thanks for the feedback! I'll fix it in future videos.
&gt;Assuming what [Free Code Camp says] is true, Medium quite literally extorted a charity. The author has some other points I'm less convinced by (eg. yes Medium forcing you to use a 3rd party for syntax coloring is lame, but it's hardly a reason to hate the platform). But really, who needs other points? You're threatening a non-profit devoted to teaching people to code with legal action because they didn't *choose* to go with a paywall or sell themselves to Medium? Yikes!
When people are so negative they go out and find and point out the negatives in the world instead of positives... smh
Fuck Medium. It's not even that they treat their authors badly, it's that they've created a horrible user experience. I'd rather miss out on a good article than read it on Medium.
I agree, the other points aren't as hard hitting. I actually have received more information on the FreeCodeCamp front that I plan to verify and publish later. Medium might even be worse than you currently think.
Absolutely.
We should just let big companies take advantage of people?
Is this a self-referential comment?
Lol good catch
Hi, I re-read your comments and I totally, totally, get what you mean. I was staring at my site for so long, I didn't realize that what I had was almost placeholders for describing what makes Spyne worth trying out and using. I made significant improvements, and I know there's lots more to do. I hope to get it to a place where developers will consider downloading the example app, play around with it, and ultimately use spyne to build amazing web experiences. Thanks again for your insights, Frank
I'm comfortable with both ways, and don't mind using any of the two. The &amp;&amp; option is just more readable in this case. Depending on the situation, I will use one or another. The point of the #5 was not about should we use &amp;&amp; or if, though.
They started out with commendable values. They didn't want to ever become an advertising company because then advertisers could force them to keep the content advertiser friendly, forcing out edgy or political content. It was about freedom of speech. Sadly they're a VC funded business, which means they do need to make money eventually, and the paywall is their only option. All the negative actions reek of desperation to find a profitable business model, and their lack of an internal content strategy means they're depending on platforms like freeCodeCamp. $5 a month isn't much but when the content is so wishy-washy or simply companies trying to feed you PR blogs, you're really just paying to give other parties value, rather than yourself.
Okay folks, we're safe from a recursion loop!
;) You should update your example to better show a difference between normal property access, since `obj.one.three` (`notV`) also returns `undefined`. Something like... var notV = mi(mi(mi(obj).does).not).exist
Formatted: function isPandigital(num) { let n = num.toString(); var array = n.split("").sort(); let n2 = "0123456789"; var pandigital = n2.split(""); console.log(array) for (var i = 0; i &lt; array.length; i++) { let j = i + 1; if (array[i] == array[j]) { array.splice(j, 1); console.log(array) } }
Even though this isn't directly related to `javascript`, it does directly relate to r/javascript, as [we've had the paywall discussion](https://www.reddit.com/r/javascript/comments/8njmic/re_mediumcom_membership_paywall/) previously. I also want to soapbox a minute, because Medium is a big pain in my ass. Missing from the article is my chief complaint against Medium: they allow sites to `301 Redirect` to any target site they choose, without any indication in the URL that such will happen. In short, they're offering URL-shortening services which are disguised as articles. I came across this a couple years ago, submitted a support ticket to Medium, and was told that it was working as intended. Recently, it came up again, because some redditors are using it to spam their site. &lt;digression&gt; Automod allows us to action content based on a number of factors, and one of the most important is the actioning of content based on the domain of the submission. E.g. `myspamsite.com` is spamming us and creating new accounts to get around bans, so we add the domain to the automod config, and it will never show up here again. This is why we're so insistent about using the "Submit a new link" option instead of just pasting your link in the text field. &lt;/digression&gt; We (and most every other sub) has standard automod configs to block URL-shorteners; I don't think I need to elaborate why, but suffice to say, that a site offering redirection on URL's that otherwise look like blog posts is a huge problem for content moderation. So recently I warned a user that they were submitting their domain too much (over 80% of their submissions). They didn't stop, so I blacklisted the domain. The next day, a different 'user' (likely the same person), asked if the domain was banned. I found this odd, so I investigated their posting history. At first, everything looked ok, yeah they had a lot of submissions from that domain I banned, but they had an even greater number of submissions from `medium.com`. That appeared fine though, because pretty much every Medium submission was from a different author, so they weren't just pimping out their own Medium blog. HOWEVER, I started clicking the Medium links, and one after another ended up forwarding me to the now-banned domain. So, even though we could have automod block `medium.com/@user`, it's impractical (and ultimately ineffective) to block every single `medium.com/@user` because they can apparently just make more at any point. Again I contacted Medium support, and specifically referenced their ToS which states: &gt; ### Spam &gt; * Posting content primarily to drive traffic to, or increase the search rankings of, an external site, product, or service &gt; https://help.medium.com/hc/en-us/articles/213477928 I then referenced 30 instances where the redirects were all pointed to the same domain. They replied back a few days later: &gt; We are reviewing this matter in terms of our Rules, and will take action if appropriate. That was 10 days ago, and nothing has been done, so I believe that they condone this behavior. For reference, here's 30 Medium "articles" that all blindly redirect to the same domain. I'd like to point out that these were from 1 of 3 users tied to this domain, over a period of just 3 months, all posted to r/javascript: * https://medium.com/@luis_sserrano/testing-with-jest-and-vue-js-pocket-guide-7be290d20954 * https://medium.com/@ilker/fa5b67d4965e * https://medium.com/@noringc/d094ac72e1fa * https://medium.com/@.gc/architecting-the-store-in-ngrx-e4955641d746 * https://medium.com/@taniarascia/writing-a-snake-game-for-the-terminal-in-object-oriented-javascript-node-js-fc14158e7218 * https://medium.com/@dee_bloo/fb48408af6a * https://medium.com/@tigranbs/ddbdc6a3f013 * https://medium.com/@paul.motionimaging/why-you-need-prettier-in-your-life-if-you-work-in-a-team-8b0658dc1d89 * https://medium.com/@wesgrimes/automatically-remove-all-unused-typescript-imports-in-a-project-afd4eb0e84b7 * https://medium.com/@thatisuday/es5-29c14f3972fa * https://medium.com/@activenode/e95241d061f * https://medium.com/@andreygoncharov/4aba7af755d6 * https://medium.com/@malimirkeccita/98c6de7a16e0 * https://medium.com/@PavelLaptev/the-simpliest-d3-map-and-way-too-long-article-about-it-even-its-title-fc0f1d0bdf3f * https://medium.com/@lironhazan/20a5682935 * https://medium.com/@jacobedawson/uploading-files-to-digital-ocean-spaces-with-vuejs-node-express-5d2361553518 * https://medium.com/@simonlhoiberg/javascript-wizard-whats-up-with-this-92ca309172d6 * https://medium.com/@hendrikwallbaum/2e80bc3391dc * https://medium.com/@kastepanyan24/3a03d699d255 * https://medium.com/@paigen11/d3c4d7aa56d4 * https://medium.com/@jjaybrown98/31ae35176eb0 * https://medium.com/@anton.holmberg93/4d5dc4c1dd06 * https://medium.com/@pavelpomerantsev/1829a69a0a56 * https://medium.com/@jkeohan/f63e0244f77d * https://medium.com/@martin_stoyanov/81f81809275e * https://medium.com/@BrodaNoel/b06893f4974c * https://medium.com/@apechkurov/a-pragmatic-overview-of-async-hooks-api-in-node-js-e514b31460e9 * https://medium.com/@metalculus84/vue-custom-route-hooks-3f50cc30bb87 * https://medium.com/@dai_shi/injecting-a-client-side-script-in-graphql-playground-in-apollo-server-d23b6e3c901b * https://medium.com/@gokulchandrapr/48491c79ec74
Thank you!
Anything you pass to a component prop is surrounded by curly braces so that React knows it's code, not a text value.
Ahh thanks!
Anything value of a JSX node's properties that aren't a string need to be wrapped in curly braces `{}` `onClick={() =&gt; alert('click')}` is saying, when I click on this node, a callback `() =&gt; alert('click')` will be called To see that function run in v8, you would need: `const func = () =&gt; alert('click')` `func()`
Haha you're right, I changed it :D
It seems like you're confusing two different things. When you say "javascript type cs problems," that basically equates to cs problems done in js. However, you close by asking for ways to build on javascript skills. The difference between these two is that one is logic (cs) and the other is syntax (js). &amp;#x200B; If you want to keep your CS skills sharp, google "computer science practice problems" and you'll find no shortage of exercises (math problems, maze solvers, etc.). However, if you're looking to improve your javascripting, then side-projects are the way to go. Maybe get into node/server-side js programming and write full-stack applications that force you to efficiently deal with the data layer. Oh, and don't use unnecessary libraries that make things quicker, which will force you to know how everything works underneath. &amp;#x200B; Some ideas off the top of my head would be writing a chess or card game. The chess board or deck of cards would likely be stored in arrays, so making changes or shuffling/sorting things will provide opportunities for you to flex your cs muscles. Best of luck.
The brackets on the onClick are needed to run a JavaScript expression inside of jsx. If you were to use quotes it would just be a string, nothing and it wouldn't be valid syntax.
Interesting... I don't entirely understand it from that description but I'll have to play around with Yarn.
You win. I hope.
It's the same as algebra though, equate what's in parenthesis as precedence over what's outside.
The call variant of Optional Chaining is going to make React component properties which accept optional callbacks a little nicer. **Before:** `onChange &amp;&amp; onChange(value);` **After:** `onChange?.(value);` &amp;#x200B; As with most modern JavaScript, you could argue the "Before" example's verbosity makes it more readable. I find that readability in these cases comes mostly from convention and formatting, rather than verbosity (with exceptions, of course).
You just posted this same question 20 minutes ago. I answered it for you and you deleted it. Why are you reposting it again? https://www.reddit.com/r/javascript/comments/bxkkmh/meaning_of_curly_brace_with_single_value/
Same, I read it twice and still didnt understand it? I guess I'm an idiot. So does yarn just have 1 place it puts everything and pulls it form there?
That‚Äôs JSX. Within JSX curlies are the syntax for inserting JavaScript.
another way to think about it is it works just like all properties. It has the same requirements. For example, focusing on just the "className"... you could have written it this was a well: &amp;#x200B; &lt;button className={"square"}&gt; or &amp;#x200B; &lt;button className={"squ"+"are"}&gt; &amp;#x200B; or &amp;#x200B; let myClassName = "square"; &lt;button className={myClassName}&gt; &amp;#x200B; the brackets are just the place you evaluate. now back to your example... you could also write the code like this: &amp;#x200B; function myFunction(){ } &lt;button className="square" onClick={myFunction}&gt; &amp;#x200B; And as you may already know you can assign arrow functions to variables as well. &amp;#x200B; let myFunction = ()=&gt;{ //dosomething } &lt;button className="square" onClick={myFunction}&gt; &amp;#x200B; So in your example... you've just gotten rid of the variable declaration and declared it within the brackets &amp;#x200B; &lt;button className="square" onClick={() =&gt; alert('click')}&gt;
Hi /u/betaros, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Marija_Bit, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/XJaaxk, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/CardinalHijack, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
‚ÄúPardon the interruption‚Äù Every. Fucking. Day.
I just did and would to see this feature soon!
I liked await # for consistency though!
What would be the advantage of your platform over CodeAcademy, FreeCodeCamp, and all the other ones? I'm not being snarky, I am genuinely curious. A project like this would demand a lot of labor, so it'd be interesting to know what the end result would offer that isn't already offered elsewhere.
Or an online sandbox with pre-fab projects you start, like [https://codesandbox.io](https://codesandbox.io) ? That way students start by creating a GitHub account, and just with that they're already a step ahead.
Optional chaining + nullish coalescing will make for cleaner and more readable code!
Just block Medium altogether. Those who post useful articles may as well post the full text as opposed to the link. We'll miss out on a few images, but they are usually annoying animated gifs anyway.
I wouldn't recommend it; between stage 2 and 3, the syntax might still change, meaning you'd have to update your code or stick with an older version of Babel. That is likely more work than adding the nulls checks now. But do keep an eye on this - once it hits stage 3, it should be safe to use.
or just https://www.npmjs.com/package/npm-check-updates
This is my understanding of it.
Yep, you add a pre-startup hook that loads your modules from a central cache.
An offtopic, but why vue.js? It is probably a biased view, but after spending some time with Angular I had to work with Vue.js. My first impression was (and still is) that Vue.js is like Angular after dropping 95% of useful features. Honestly have no idea why people choose it.
Because 95% of the times you only need the useful, uncluttered 5% that Vuejs gives you in a simple and elegant way.
Or you can use Lodash _.get
`du -sh node_modules` 817 megabytes. Less than I expected.
[Here's a great workaround for this.](https://stackoverflow.com/a/42349521/9711106) I add a second parameter to the function to act as a value to return in the catch block.
How is that better than something like \`\_.get()\`?
Minor note. Common Lisp has this implicitly as most accessors (e.g., assoc, car) return nil when applied to nil.
We're doing it. Hopefully it doesn't bite us... But it's so nice...
They started out cool but when they tried to monetize they went to hell. I‚Äôm guessing their funders were pressuring them. Unfortunate because as I said when it started there was a lot of promise.
&gt; Nullish coalescing this kills the switch statement
I wish framework developers would stop catering to the bizarre fear certain people have of the word 'class'.
Is it just for me or are some of the images in that survey not loading? [This image](https://lh3.googleusercontent.com/0zZc8pL1GtSDX1Zmr_QuOQs5c4io2OJslFUTYW2D6pIsaKz_QuGzvOBBXHUPo8hxS3KDLuoafnGNKcQxzJyGDO9-P4Ec50natUImre8FfKFGh1_uGwD-4-hxmdw8uEjdscA1mqxZqN0h24LXOFd3d6eUVCNveFPeFv-rLckfcEuPU1QhRwVmntCNFkLPUDiRduA03H7RFhWnDQ2AC_POq6wzqnhpkCKxB1k8j-PfBifqzCBNqILDIRhSwMdbrumGE2tDGNS752qPuHNji0yRgaVFTp48Kipu1SermOsjGZ9CLv58iq__rvy8lnnGTgb3qlZ-nv0ubgzmGWQXEWLdwvnjM9h9_cD1aj5TO-ue36p4O1buY4l9ho9MGiqVbaN8jO-XWmPJJ38L3QOt6Dy7yJbevxCxiaBSMfo2dAS4ov0IWMa9NCzRSynIYk06lI2s9wIIf9FOzT07e9mI7dfXjj-ZW7kn1_miTWWXd-IRbBx7b3TIZLAIvzTVy7cMRBDcq3MrP30YXPI4H7GL8ipQPlafVSrkjRzF_U_BKw10De-wuC7cnVOIKiWvp-5BpdynTycOru-VDKSdEYist5Eiet7xz21XQMt9_T4=s1930-w1930-h476-no) for example gives me a "blocked" sign.
After using rambda in a few million+ user applications, I am of the opinion that it decreases code readability so much that it is more of a decrement than addition. The function chaining calls get broken regularly because they are non obvious in their naming and order. I'm a hater, so ignore me lol
That's how people used to code in 2009 with jQuery. Luckily we saw sense and as a rule don't store application state in the DOM. Nowadays we save state in some sort of JS object, in memory. This can be a plain object, a Redux store, or a myriad of other possibilities. I don't understand why web storage. Are you trying to persist state between visits? Then it's pretty much the _only_ sensible solution, saving data in the DOM won't help, and neither saving it in memory unless we are talking single page apps.
If you are only using that one function, it isn't.
A lot of the industry heavyweights seem to be against it, sadly, so it may drag on a bit. Hopefully they won't be able to stop it though.
I never use early stage proposals, but I'll make an exception for this. Even if it gets dumped I'll carry on using it and treat it as a third party library.
We went through an evaluation period with Angular, React, and Vue. While Angular was appealing for an enterprise level application, between the cons like the steep learning curve, verbosity, and framework lock down made us shy away from it. Not to mention Google owns it and they have a tendency to abandon their own products or throw them to the community where they may or may not survive. Vue and React both give us a solid UI component architecture. But React was literally nothing more than that and most of our developers weren't a fan of the HTML in Javascript concept. Vue is just dirt simple and offers officially maintained packages beyond the component framework. &amp;#x200B; Anyway, my problem stated above would be an issue regardless of the frontend technology we ended up with.
I do get tired of seeing ‚ÄúHow I built something incredibly basic with React, hooks, GraphQL, and some other trendy tech‚Äù though.
I have a 2 GB one for a monorepo with some 20-something web services... and I'm working on tooling to scale that monorepo up to some 200 services lol
&gt; and to take it down would require the team of hackers to hack into every single phone and take them down. Welcome to every open source project ever. With that being said do you have a link to to project?
Thanks for your reply &amp;#x200B; &gt; I don't understand why web storage. Are you trying to persist state between visits? Then it's pretty much the *only*sensible solution &amp;#x200B; No, what i want to do is: based on the user input, display a chart, whose container is a div. And then, if the user submit a form again and it has totally or partially the same values, keep the charts(divs) whose values match with the new input
All 1MM packages, probably.
TBH, that's why every time I use ramda I pretty much always end up using `R.pipe(bunch, of, operations)`, and storing that as a const. Super convenient in that case, since the code is effectively already broken out into the smallest pieces I'd need (for refactoring), and an additional bonus that it's super easy to follow.
https://tarekraafat.github.io/autoComplete.js/
That‚Äôs a problem I‚Äôve never dealt with, but maybe you could have some Java that creates the JS pojos on build and pushes them to a library that you could import from the Vue app?
Break something and don't fix it. ;)
That might be a good idea actually! üòÇ
It's just a mechanism for development that allows you to time how ling a function takes. The parameter you are passing in is just used to distinguish different timers. console.time('outer') for (let i = 0; i &lt; 5; i++) { console.time('inner'); let q = Math.someComplexBullshit(i); console.timeEnd('inner'); } console.timeEnd('outer'); This will print the time it take each iteration fo the loop to run, and the total time it took all of the iterations to run.
I think I didn't clarify well enough what I meant. I know what `console.time` is for, but look at the timings in my example, why would this simple code take 13ms in **script2.js** just because I changed the order a little? The timings measured is what I'm confused about.
I think you totally missed the point. Hint: Look at the results.
Yep I totally whiffed this. My bad.
No. Thats my bad. I just didn't read all the way through. As for you question, I have no idea but I agree this seems weird as hell...
&gt; When you call console.timeEnd() with the same name, the browser will output the time, in milliseconds, that elapsed since the timer was started. &gt;(param) The name to give the new timer. This will identify the timer; use the same name when calling console.timeEnd() to stop the timer and get the time output to the console. https://developer.mozilla.org/en-US/docs/Web/API/Console/time So in the first script, you're calling timeEnd('1') right after calling time('1'), then again for the others, hence they'd be very similar in what is output. With the second script, you're running timeEnd() after each time() is already called, so the result would be different. My results (simply copy/pasting into console): script1: 1: 0ms - timer ended 2: 1ms - timer ended 3: 0ms - timer ended script2: 1: 7ms - timer ended 2: 3ms - timer ended 3: 2ms - timer ended Now, why your second script is taking so long and increasing in time... I honestly have no clue.
"We've seen you hear 54 times, why not make it official!" I have an acc! I just don't log in you fucks :@
My recommendation would be to use TypeScript. It will be convenient since your codebase is already typed and you'll have much more confidence that things are correct.
Is anyone disturbed by his declarative function taking an array and then mapping over it instead of just mapping a double function over the array?
Yep, my problem with medium is that the content is usually very shallow.
The way you have used timers, makes the time accumulate for timers. Timer 3 includes timer 2 and 1.timer 2 includes timer 1. Notice how the timer 1 is almost same. But wait... There is still time difference even if we sum all timers. This is because in the second implementation there is one extra thing being accounted for, that is console printing itself. Which takes some besides the script itself. So let me wrap this up as: T3=t2 script run + t2 time print + t1 script run + t1 time print
My guess is that in the first example, when you call timeEnd, the timer object is freed up, and then reused for the second call, and the third call. In the second example, new objects will be allocated for the second and third call, and some kind of stack data structure will have to be managed too, so more work is being done.
^^ Typescript's syntax is also about as similar as you're going to get to java. There are also typescript packages that can help you translate the API endooint response schemas and in many cases completely generate the api module calls n all. If you guys have / can generate swagger docs ( assuming you have a rest API ) it gets easy from there with their codegen packages
In earlier times I once made the mistake of committing node modules Never. Again Also, holy shit dude. 2gb is a size AND security nightmare. Have you audited it recently If you use yarn there's a resolutions field you can put into package.json, which makes sure that you only use specific versions of certain packages. IME a lot of the size bloat comes from duplicates or minor version changes that add the same files over and over again
I feel bad because I literally just posted an advanced topic on medium because I was tired of all the basic shit, lol.
It's funny how they'd think that while pushing async/await, which is basically an antipattern by design.
There's a bunch of things going on. In script1.js, measurements 2 and 3 are faster than 1 because of JIT (the engine basically warms up into faster code _after_ the first time it runs through some code). 3 is faster than 2 for the same reason: v8 can compile to even faster code after the second run. In script2.js, something different is happening: you're measuring the time it takes to print to stdout for measurements 2 and 3. Writing to stdout is relatively expensive compared to a timing measurement API (this is why production-quality loggers like Winston log asynchronously) You can verify that this is the case by measuring how long it takes to console.log something, and it should take around the same amount of time. I can't be entirely sure why measurements 2 and 3 are roughly the same without looking into V8 source, but my guess is that the bulk of the one-time value increase is a memory allocation (with subsequent calls reusing the same memory pool). If you console.log before doing a measurement (thus, allocating the memory ahead of time), you can see that all of the measurements drop by around the cost of one `console.log` call. This is also probably why the person trying it Chrome was seeing faster measurements (because Chrome already ran a crap ton of code before they popped open the console). In my machine, this is what I get: // script2.js 1: 0.175ms 2: 2.222ms 3: 2.408ms // script2.js preceded by console.log 1: 0.235ms 2: 0.658ms 3: 0.789ms So, the memory allocation costs about 1.6ms, and each timeEnd call adds about 80ms.
Hi /u/silent-lad, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Why isn't this just called the *Null Conditional operator*?
I was just thinking yesterday how I wish JavaScript had a safer version of `with`
I have to disagree on this one, personally. I'm really excited about optional chaining! But the readability of Nullish coalescing is not great, and worse when used together with optional chaining.
Not a fan of the syntax. But cleaner chaining would be neat.
Oh, way ahead of ya, it's 2GB _after_ we ran yarn-dedupe and a bunch of file deletions via `yarn clean`. It's crazy how many library authors publish their tests and docs alongside their library code :) We also do use yarn resolutions for various things (e.g. that event-stream vuln from a while back, webpack because reasons, and a bunch of others I forget why). If we count non-production repos, a few months ago I actually put together a proof-of-concept repo by copying some 120 real projects into it, for a monorepo scalability stress test. That one had so much code in node_modules that it took most of a day just to `yarn install` and my laptop started warning about low hard drive space and I had to go delete old docker images to free up space... Needless to say, we went with a different approach :)
oh THANK. GOD
cryptic as hell to read that
What are these stages?
yes, same thing, i find it too cryptic
lost me at &gt; in Ramda I could do any number of things in some metalanguage no one uses or builds for, but guess why I don't lol
I see that for some now as well - I left a comment on the blog post, hopefully they'll see that.
I see that for some now as well - I left a comment on the blog post, hopefully they'll see that.
Fuck Medium even more because now I've cancelled my subscription it's become almost useless as it hides most of the content. I [moved myself](https://tane.dev) off Medium and couldn't be happier - now I have full control over my content and host it free off Github and no one needs to pay to access it. What I will admit is I get nowhere near the coverage or hits now based on previous articles, but I care little for this now - and I do miss the content editor [but I'm building my own now](https://tinynodes-ngx.firebaseapp.com/ngx-editorjs-demo/angular-form) that I'll eventually use to generate Markdown content.
Just an unrelated tip. ``` await Promise.all( processes.map(async process =&gt; { await run(process); }) ); ``` can be further simplified to: ``` await Promise.all( processes.map(process =&gt; run(process)) ); ``` and if we know for sure that `run` accepts a single argument: ``` await Promise.all(processes.map(run)); ```
Maybe try a test run with pnpm? https://pnpm.js.org
Yes, please! I think this is completely worthwhile. Right now I have to use \`as &lt;type&gt;\` everywhere if I want to use a babel macro.
how does this affect module exports? something like export default await someLongPromise() export const value=2
This article is completely wrong, it's not running concurrently, each promise is run one at a time, you can only gain concurrency in javascript by using workers.
I cannot await
sounds like Cancer
or `yarn upgrade --latest`. But this post is also about separating and documenting packages that shouldn't be upgraded.
my 2 cents - &lt;table style="height: 258px; width: 770px;"&gt; &lt;table class="sortable"&gt; //Why are there 2 table tags?? &lt;table style="height: 258px; width: 770px;" class="sortable"&gt; //this might be what is needed While there is a &lt;tbody&gt; , i dont see a closing tag like &lt;/tbody&gt;
See: https://www.valuecoders.com/blog/wp-content/uploads/2016/11/Angular-vs-vuejs-1.png It's pretty much just AngularJS without the cruft and a simpler syntax. I'm sure since 2016 they've added new stuff, so perhaps it has diverged more from AngularJS.
&gt; But the readability of Nullish coalescing is not great, and worse when used together with optional chaining Wholeheartedly agree. Nothing like a coupla '??'s to remind you "wait, what the fuck is that other thing again?"
Does it count if it's a function that receives things, returns things and that's it?
It changed the state of memory and even moved electrons (and/or holes) around - permanently too! That's not really a "pure function" /s
I appreciate your enthusiasm for sarcasm, but to become a master you mustn't use /s. *I'm a human being, and this action was performed manually.*
You really are the worst bot. As user Labubs once said: &gt; Piss off bot *I'm a human being too, And this action was performed manually. /s*
Does it always do the exact same thing if you give the same input?
Not if it runs on real-world hardware and you don't ignore those real-world effects hinted at in my other reply.
Could you provide whole piece of code? It seems that there's extra closing bracket in the end.
Adding an `await` to get `return await` instead of returning the promise directly in later V8 versions lets the runtime produce asynchronous stacktraces. That's because with the `await¬¥ the context information of the calling function still is easily available to produce a full stacktrace if there is an error. If you don`t `await` that is not the case, the information about the caller will be gone and getting a full async. stacktrace would require much more expensive runtime infrastructure.
This seams like a potential bullet In the foot.
why ?
Hmm, I see you aren't programming in the right conditions. Can I recommend ``map``, ``filter``, and ``reduce``? **verdict:** Not functional. :(
If anybody particularly enjoys the interactive image zoom behaviour that Medium has, this library emulates it using the same solution https://github.com/michaelbull/zoom.ts
Can you Promise to be patient?
Can you please void these puns? This is a serious discussion!
Ok I get the catch but what happens then?
+1, make it a pastebin or something. Reddit is going to eat code this obfuscated.
What does any of what I said have to do with what functions you use, and/or map/filter/reduce? Did you just learn some keywords? Do you think map, filter, reduce has anything more than a very superficial relationship to what is called *functional programming*?
If I see a link to medium, I immediately dismiss it as low quality rant wrapped in a user hostile web page.
Are you kidding me? Fuck angular. Angular is 100 times worse than Vue or React. Vue is pure joy, intuitive, takes 5 minutes to master. Crazy good eco-system. Community driven.
Omfg dreams are coming true
Could anyone explain why such feature is so useful?
hahaha, +1. :D
It finally ends the jokes
I'd think it's the use case where you have a little node script and you want to call some async function. When you run an async function at the root level, the node process executes before you get a response, so you have to wrap it in a function
It isn't the fear. Developers often face classes and try to implement their API with them - that's not fear. They just come off it since it often doesn't deliver on expectations and writing them with TypeScript in mind requires decorators. That's disappointment, not fear.
What does this have to do with Javascript?
I've tried it, seems like websockets are not well supported?