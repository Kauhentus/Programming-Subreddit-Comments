Is this a joke post or something? Unless I'm missing something, the above bug report / article sounds like fearmongering that web servers have the audacity to send you javascript that your browser executes, and that a sufficiently sophisticated attack can frame you by dropping objectionable content on your machines hard disk. Thus, javascript should be disabled by default? Bizarre.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
license created [https://github.com/odykyi/idgaf-js/blob/master/LICENSE](https://github.com/odykyi/idgaf-js/blob/master/LICENSE) thanks
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [odykyi/idgaf-js/.../**LICENSE** (master → 1f11080)](https://github.com/odykyi/idgaf-js/blob/1f1108080237dba74a5b9e0ae205405c8fbea0f1/LICENSE) ---- 
no last } in JS [https://github.com/odykyi/idgaf-js](https://github.com/odykyi/idgaf-js)
Its just a fake war between people starting out who are afraid all the effort put into learning their framework will be wasted, and they will become unemployable. 
Yeah this was tough to read
what it does?
Yep, specifically checking if something is `null` or `undefined` is probably the ONLY time I ever use `==` instead of `===`
Hi /u/exc3ssive29, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
No code to share I'm afraid, but I'd be very careful with the structure of your data if you're going full functional; this is coming off the back of having to do a massive refactor from that sweet sweet map/filter/reduce life, to using naked for-loops and mutating objects in place because of the way our UX and db tangentially interact, causing HUGE slow downs in the front-end Good luck and godel speed!
A lot of it is in good fun and just banter. I do PHP work too so imagine how much crap I get, but I still think the comments are funny. The people who are serious about it are somewhat rare or still new.
This helped me. Got me to go back into the docs and better understand what Babel is
&amp;#x200B; 1. You can use either context menu, or menu bar at the top of the window, if that's what you want? Or you can always make your own menu by making visual elements and adding event listeners on them if that's what you want. 3.You can use remote from electron module and load URL into current window. ([https://github.com/electron/electron/blob/master/docs/api/remote.md](https://github.com/electron/electron/blob/master/docs/api/remote.md)). Or simply use load function that you've used at the begining of the project to initialize main window with a html page. 4. You will have to use eval() to execute script inserted via innerHTML
Then add a check on `e.value.length`.
If they have a concept of "truthy" (as opposed to just plain "true"), I'd say it's problematic.
 **JavaScript idiosyncrasies** [https://github.com/odykyi/javascript-idiosyncrasies](https://github.com/odykyi/javascript-idiosyncrasies) 
No. It's a bug report that explain how to forge several different **Remote Code Execution** attacks from the server that can **target specific group of people** through **JavaScript served by CDNs** or by malicious Web sites and **leave no evidences** on the target machine. The illegal content caching attack (with the flip side of providing actual criminals **plausible deniability**) is just an example. Other examples are - timing attacks against the browser cache to verify certain pages have been recently visited - timing attacks that (with the control of a DNS and proper document domain) can let you check open ports on the local machine or local network - using the browser to bridge a connection towards such ports - using the computers of [specific Chinese people to mine BitCoins](https://www.investopedia.com/news/bitcoin-banned-china/) (to earn something while putting them in throubles) - using the browser to execute (or even coordinate!) DDoS attacks... There are so many possible attacks once you realize that you can gain control of the IP, bandwith, CPU, RAM, disk (and potentially other resources too, if you consider that the operative system might be vulnerable by itself) that you just need a bit of understanding of the topic and some fantasy to invent new ones. Also [the solution I propose](https://medium.com/@giacomo_59737/i-compiled-a-detailed-bug-report-for-mozilla-where-i-described-some-of-the-possible-attacks-and-41843f7e84d8) is not just to disable Javascript. It's basically to **make the user aware of the risks** and asking them to **opt-in** (instead of leaving them vulnerable, and **making opt-out unusable**). What's bizarre here is just that a **WHATWG founder** that designed these "Living Standards" **does not say if their users are vulnerable to these sort of attacks** while claiming to be "built for people, not for profit".
Use a hammer for nails and a screwdriver for... Meaning procedural is often more readable and especially easier to change and further develop than functional. But sure many problems are solved much more elegant functionally, but your use case may not be the best fit for functional only. 
Look why even OOP was introduced into enterprise. Maybe we could change that. Not stating actually that functional is better. I just think this argument is not valid.
Akin to the Vanilla Js framework joke
i guess eval is fine to use since it won't be online right?
Ah, good ole California Style Sheets https://medium.com/cool-code-pal/this-1-neat-trick-for-pixel-perfect-web-pages-3f10a496b515
Hey everyone! Very excited to be bringing you Byteconf React today. We brought together eight wonderful speakers for a free React.js conference that anyone and everyone around the world is welcome to attend. Also, I'm super excited to announce that our next conference will be Byteconf Javascript, on March 1st-2nd of next year. I'll be around to answer questions here, on the Twitch chat, and pretty much everywhere else online today. In the meantime, consider checking out [our Discord](https://byteconf.com/discord) if you want to chat about Byteconf React and future conferences we have planned!
It's also completely insane, banks use functional programming, I don't know how much more enterprise you can get.
Lol.
A year or two ago I was drinking heavily from the FP kool aid fountain. It works great, but I would say don’t shoehorn yourself into full functional purity. In a UI, it often does More harm than good. 
[http://moutjs.com/](Moutjs) is nice for this too.
It doesn’t really matter in JavaScript since the behavior is the same but I prefer declaring functions before their use because I have spent years writing in languages in which the ordering does matter. I’ve gotten used to expecting a function is declared in a file before it is used. I suspect that people who follow this convention have had similar experiences or have much of their experience in code bases written by people with such experiences.
I use a vscode plugin https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer for serving my static sites while developing. For a html template, maybe https://github.com/h5bp/html5-boilerplate/blob/master/README.md
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [h5bp/html5-boilerplate/.../**README.md** (master → 2e754d8)](https://github.com/h5bp/html5-boilerplate/blob/2e754d881ccd925290c48883ed97712f5a6ef51f/README.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e55t1wz.)
 Facebook uses OCaml and Haskell and has created many functional libraries, too.
Why would you do such a thing
What is your base for stating that procedural tends to be easier to read and to extend? 
We're on quite a similar path. We started a huge rework of our services almost 4 months ago with ES6 + Ramda + flow and, even if it has been difficult to start with the stack, people have started to work quite comfortably with. We're going into production in about a week, so we'll know how it works out soon :) Regarding the frontend, we started with Vue.js but I haven't liked it much so far. I was considering going to Elm, but how you found Vue + RxJs? 
If you just want to test out ideas i'd use codesandbox for this, they have a vanilla box with reload and all: https://codesandbox.io - other than that parcel is probably the closest, it won't se up index.html and so on, but you'll have a dev environment up and running quickly. As for hot reload in vanilla, technically yes, you get that in webpack and parcel, but since vanilla has no components it probably wouldn't be usable except basic module reloading.
It's very strange that this uses `props.children` for each page. They will render no matter what, even if the parent does not explicitly choose to render them.
This is a very dumb idea. Someone thought to themselves "Hey, I'd love to use that *new hotness* functional programming!". Since we have this new project to work on, how about we all use it for that? You have no idea what you're doing. I'm not saying you can't succeed. It's just that your risk making a crappy, unmaintainable mess due to your own team's incompetence while at the same time stretching the development time for the same reason. Also, while ramda is pretty cool with it's auto-curried, functional approach, `lodash` is pretty much the standard and it has `lodash/fp`. I suppose the danger there is people in your team falling back to the non-curried versions included in the library.
You don't have to, they are just quick demonstrations. Currently you may use `component` or *function as child* to avoid this issue.
you have earned my upvote
It replaces the body of the function with the function in the decorator. Compare to https://pbs.twimg.com/media/Dl2IW_mXgAASV7L.png :P
This. I love everyone that open-sources their software, but I can't use it if the documentation isn't good. 
Perfect.
If you're creating an enterprise intranet app and want to do functional programming why not use SharePoint and the SharePoint Framework (SPFx) - they recommend React to develop components. SP is pretty much the gold standard for enterprise intranet - everyone uses it - so you can't really go wrong.
This is no different from a non-commercial reuse license.
I'm actually relieved that what actually counts as OOP today is having to cede more and more mindshare to FP and that a lot of the principles and best principles of OOP even _call for_ FP concepts like immutability and first-class functions. FP is catching on all right.
this article is nice https://www.robinwieruch.de/react-testing-tutorial/
As the author refers to python as well, it is worth to mention, that the truth value of every built in type is clear and [documented](https://docs.python.org/3/library/stdtypes.html#truth-value-testing) So nothing wrong with it! Besides that: what's a better solution? 
They go from top to bottom but from inside to out So if you have a function that is being called with the result of another function - that function has to run first 
If you know functional programming then you shouldn’t be asking this. It’s not enough for someone to say, “here’s an app written in a functional style” and then you go off that. You have to understand core functional programming principles, the what and the why, so then you’ll understand when and where to use them. First of all you’ve got to ask yourself why you even want to write your app in a functional style. What is it you’re looking for? Because different situations call for different paradigms. For example, you might be surprised to find out that functional programming is actually less performance than OO code. It’s computationally expensive to constantly create and destroy objects. For this reason, you rarely see non-OOP games. Also worth pointing out that RxJS is reactive programming, not functional
This plugin allows you to set files and directories permissions after bundle compilation. &amp;#x200B; **Installation:** npm i --save chmod-webpack-plugin **Example:** // webpack.conf.js const ChmodWebpackPlugin = require("chmod-webpack-plugin"); module.exports = { plugins: [ new ChmodWebpackPlugin([ {path: "dist/dist/", mode: 660}, {path: "dist/bin/**"}, {path: "dist/public/", mode: 640}, ], { verbose: true, mode: 770, }), ], };
There are only 2 things I can't stand: intolerance and PHP devs.
&gt; to your own team's incompetence Incompetence and inexperience are not the same thing in any way whatsoever.
Then why not use a functional language? Like [Elm](http://elm-lang.org)? 
&gt; Yet there are virtually zero open source apps we could look into, to get inspired how common problems in big codebases are solved with functional approach. It's very hard to wrap our heads around many of the concepts and even harder to figure out the real world usage. So why do it? I mean if you have time to complete your project using new stuff, go for it. Better to learn on the company dime than your own. But you should also ask yourself what problems you are solving by doing this. Worse still is that RxJS and Vue are already forcing you into an OOP approach. So if you want to make an FP application using OOP frameworks, you're just going to give yourselves unnecessary headaches. As well, JS is not a functional programming language by design. It might be easier to look at other programming languages that are. For example, the popular message queue RabbitMQ is made in Erlang. That's a nice big robust OSS project written in a functional language. Honestly, UI work is not a great domain for FP imho
Libraries, basically. Lot of them extends built-in types
Elm is definitely a great suggestion. If your team can't switch to a full FP language, I would suggest trying out JS libraries which are actually designed that way. Vue is an interesting framework, but I felt my project was quickly becoming a mess. Some of the built-in "features" were just not a good fit for my programming style. I'm a huge fan of [hyperapp](https://github.com/hyperapp/hyperapp). It's &lt; 2kB, and takes inspiration from Elm (particularly the upcoming 2.0 release). I know there a bunch of other libraries doing similar things, like [Choo](https://github.com/yoshuawuyts/choo). These amount of concepts you have to learn to be productive in these libraries is very small, so you can focus on your application concerns and spend less time in the library docs.
Last version of RxJS is very much functionnal.
Strongly second this. Elm expresses functional front end concepts much better than JavaScript. If you want *super hardcore functional programming* you can check out PureScript. But with a team that's still learning, just go with Elm.
Why is this tagged nsfw?
Ember is always good for long-lived projects. Very easy to upgrade, too. (It's just a CLI command)
Because people will be too productive once all this is implemented?
:( stupid mootools
Is it the way to go now, I worked a little with React 2 years ago but haven't kept up. Is this now the way forward instead of Redux? 
Dr Axel's [JavaScript for Impatient Programmers](http://exploringjs.com/impatient-js/) just came out.
It depends on what you want to do. Context API has its uses, Redux has its uses, MobX has its uses... even simple local component state management may be the right answer. And the answer is no black/white, but rather grey though. Know them all, and choose the right tool for the right job.
You learn as you go. You don't need to learn it before you learn a framework.
Yeah man, makes a lot of sense! I will try to implement it. R u using Electron nowadays?
&gt; Q. What's the result? function f() { return 'foo'; } (function() { if (1 === 0) { function f() { return 'bar'; } } return f(); })(); &gt; Uncaught TypeError: f is not a function
You would learn it concurrently. If you already have experience programming then learning js won't be difficult. You don't need to go out of your way to learn it. OP was talking about reading Javascript the definitive guide. That's completely unnessary. Just start building stuff, learn as you need it and fill in your gaps of knowledge as you go. 
I know you're probably not going to want to hear it, but Adobe AIR is actually still pretty viable desktop option. And there's an pretty active open source ANE for a WebView thats really solid if you want to go the HTML route instead of AS3. https://github.com/tuarua/WebViewANE 
It's illegal to define a function in an if statement. 
I think this is stranger than what the OP posted, that page says the answer should be `bar`. If you comment out the entire if statement, it's `foo`. If you change the function's name in the if statement from `f` to anything else, it's `foo`. But if they have the same name, it's a TypeError.
Not recently, but I have for a side project. If the product you're supporting needs to new features, and has a budget to keep evolving it, then it might be worthwhile to build something newer, where you can give 95%+ (or however many) users that use a newer OS a much better experience. That said, re-writes are very time consuming.
Well, I obviously can do that but its not formatted in any nice way(HTML) xD...so that's still a no. Thanks for helping tho
\-2? Come at me boys! :D
&gt;What are you using to support XP? Extra Strength Tylenol
Why are you supporting XP?
&gt; Although now thinking about it, shouldn't if "fallback" to the global f ? That would be my expectation tbh. That's what I thought too. 
It was illegal in ES5, but engines allowed it anyway with varying degrees of compatibility.
It's all this crap: https://www.ecma-international.org/ecma-262/9.0/#sec-block-level-function-declarations-web-legacy-compatibility-semantics Basically browsers allowed them even though the spec didn't specify it, and now non-strict code has all this terrible optional behavior. All of this weirdness goes away as long as you write your code in strict mode.
that's useless, buddy
Call the police!
Most of them are pretty odd, but Q. What's the result? (function(a, b) { arguments[1] = 3; return b; })(1, 2); A. 3 seemed fairly obvious.
Let XP die already ^^
Add this as an bookmark(let) to your bookmark bar then click at needed page. javascript:for(person of document.queryselectorAll("YOURCLASS"))if(confirm(person.innerHTML))open(person.href);0 it will open all page with href which has YOURCLASS as class. 
...it’s the 11.0 being parsed as a number instead of a string meant to denote the version.
This throws in strict mode, arguments is not allowed in strict mode. This is what puzzles me constantly about these clickbaity articles. Strict mode IS JavaScript, these frivolous browser engine interpretations are just like IE quirks mode - their sole purpose is not to break legacy software. You SHOULD NOT write new software in non-strict mode because it is non-standard JavaScript and thus your warranty is now `undefined`. 
This is because `function` is uses a `var` type variable function f() { return 'bar'; } is equivalent to var f = function() { return 'bar' } `var` is function scored instead of block scoped. Therefore: (function() { if (1 === 0) { function f() { return 'bar'; } } return f(); })(); is equivalent to (function() { var f; if (1 === 0) { f = function() { return 'bar'; } } return f(); })(); ​since `1 !== 0`, `f` is never set to the function, thus `f` is `undefined`. If you try to call a variable that is `undefined`, you will get a type error saying that the variable is not a function (because undefined is not a function). 
I’m very frustrated by the lack of so called monolithic frameworks for node, but that is not its function really, it’s meant to be decoupled and in a form of micro services, I think the name node was even inspired by this, and its something you can achieve with no mvc basically, with something such as express, maybe even loopback or hapi. The closest I got to a so called monolithic framework is nestjs because of its type safety mvc very inspired by angular 2&gt;, provided by typescript, and sometimes when I want to make my architecture from a good starting point, I use routing-controllers and type-di for dependency injection of services and typeorm for my ORM, of course I like typescript on my backend. Also, I can’t wait for loopback 4, IBM backed backend nodejs, I really liked loopback 3 but it has too much magic and no typescript support for models routes and such which the 4 should have.
[removed]
bottom up testing sounds good, thank you!
will check it out, thanks!
Why
If you want to do something meaningful, I see that you have two options: - Do something that is meaningful to you. Maybe combine JavaScript with music or electrical engineering? Create new hobby projects or contribute to existing open source projects. - Do something that is meaningful to others. In other words: start working as a front-end developer. The world is full of problems and people are willing to pay to solve them.
Sorry I assume your link has constant tag, if not javascript:for(A of documents.links)if(confirm(A.outerHTML))window.open(A.href);0 That will ask you open any link in the page, you can use this to open after checking confirm dialog, or use it to check if they have same class. if they have you can use it in first code or javascript:for(A of documents.links)if(A.className==="YOURCLASS")if(confirm(A.innerHTML)) window.open(A.href);0 
Express, Koa, and Hapi are the big ones. Sails is a more full featured framework like Rails, but not many people use it. It's based on Express. Express probably makes up 75%+ (guesstimate) of framework usage.
I've bet on EmberJS - not because of job prospects, but because it's a really nice framework to work with (I went from no JS experience to completing my first SPA with Android/iOS Cordova apps in about 3 months). &amp;#x200B; Sorry it's not much help for you, but just putting it out there...
JSON will keep it a frac while YAML will assume it's a digit.
I don't like Java and C# is just okay but let's not pretend that they're not faster than Ocaml and Haskell.
Thanks for the advice!
Are we really at the point where we can't even execute a single line of bash without a module to do it for you? The module even assumed that you understand the numbering system, in which case the programmer already knows how to change permissions from the command line. What does this simplify? 
&gt; Q. What's the result? &gt; &gt; (function() { &gt; 'use strict'; &gt; &gt; let type = typeof foo; &gt; let foo = 1; &gt; &gt; return type; &gt; })(); &gt; &gt; A. ReferenceError: foo is not defined What is the idiosyncrasy here? I'd be concerned if this was anything other than a ReferenceError.
Sails is hella outdated.
The IIFE has its own isolated scope so f() wouldn't fall back to global scope and won't be defined in the impossible if statement. Makes sense...
1) Mostly if you need to change permissions it won't end up with a single line. 2) The idea is to keep all build logic in one place. I case of shell command you'll have to move them outside of webpack config. Or at least to use the plugin to execute arbitrary bash scripts after the build. But there is another nuance. 3) Shell commands are not cross-platform. 4ex I am working on Windows but my servers running on Unix. So I'll have to implement logic to run different commands depending on platform, to be able to perform build both on workstation and server and copy or rewrite it each time I need to configure new project. So.. no, shell command aren't easier, at least in my case. 
I only threw it in there because that is the sort of thing OP was looking for. I wouldn't have suggested using it when it wasn't outdated.
\`arguments\` is not completely disallowed in strict mode. [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict\_mode#Making\_eval\_and\_arguments\_simpler](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode#Making_eval_and_arguments_simpler)
Fair enough!
Maybe, but I would probably pick a scripting language such as JavaScript or Python over .Net if Java was being too clunky. At this point with Java now having var and other nicities I still don't see enough benefit using .net, other than not being under Oracle's thumb. 
I think JavaScript and Express lend themselves towards micro-services, more-so than Ruby/RoR or Scala/Play. The latter examples utilize languages that lend themselves toward DSLs, which can then abstract away most of what you'd need to write for a web application. They make great monolithic frameworks that accomplish 99% of your common tasks. On the other hand, JavaScript's strength is asynchronous eventing. It's only recently that we've been able to avoid callback hell via async and await. ES6 promises haven't even standardized a \`finally\` feature. Even with these, you'd be hard pressed to create the sort of compositional patterns that make monolithic frameworks so simple. Express does a great job at reducing the work required to create a micro-service.
react is really popular. Moreso than vue. Also react feels much more futuristic. 
??? Can't comment on OCaml performance but Haskell is typically faster than Java and approaches C in some limited cases. But I see your point. OO is at a disadvantage because they have to carry Python 🤣
LINQ is a better version of streams IMO, their reflection is a lot better and less clunky than Java’s, also annoying stuff like being able to instantiate a list with new List(){“a”}; instead of the super verbose workarounds that Java has, although maybe newer versions of Java have fixed that? Having a nice *using* keyword in C# for automatic disposal of resources is handy, while Java has a more verbose version. There are more I’m forgetting I’m sure. Java does have Optionals which are sweet...not sure if C# has them yet.
LINQ is a better version of streams IMO, their reflection is a lot better and less clunky than Java’s, also annoying stuff like being able to instantiate a list with new List(){“a”}; instead of the super verbose workarounds that Java has, although maybe newer versions of Java have fixed that? Having a nice *using* keyword in C# for automatic disposal of resources is handy, while Java has a more verbose version. There are more I’m forgetting I’m sure. Java does have Optionals which are sweet...not sure if C# has them yet.
Damn you downvoted me over YAML? This is a new low lmao
Ember still used jQuery?!?!
It really depends, Vue would probably be better if you want to hit the ground running since it's more opinionated. I think react is really good If you want to work specifically on improving your JS.
I recommend using Hugo https://m.youtube.com/watch?v=6U3emx29rKg I use it in combination with Gulp. Works really well and fast for me. 
Ugh. No.
Awesome. I've been having so many problems with events in my current and very complex project. I'd love to see a move away from synthetic events altogether.
&gt;to get inspired how common problems in big codebases are solved with functional approach. like most people here, i'm wondering why you're taking a functional approach when you don't have any experience with it. does management know the risks involved and that this app will be used for the people writing it to learn a new skill on the company dime? cause that's what it sounds like is happening. if the management team is on board, then GLHF. but usually management is not on board with these kinds of things, especially when they learn that the truth is a little different from what they feel they've been sold. &gt;It's very hard to wrap our heads around many of the concepts and even harder to figure out the real world usage. this is a huge smell / warning sign (even with management buy in). you're talking about building an application "using functional programming" but you're not even sure what constitutes functional programming. which kind of leads back to the original point: why?
Thank you!!
What are people using this days that’s similar to Sails? I used it a couple of years ago for a smallish project but I have been completely out of the NodeJS scene for at least a year.
I really only use js to change style props when doing like a drag n drop translate which isn't practical with css
You sure like to use bold font.
Couldn’t agree more. I spent a few months using Vue, and while it is sort of cool to know, that was time not spent getting better at React. Most Vue project that have been developed my current and previous workplaces have been moved to React. The Vue ecosystem and careers opportunities pales in comparison to React. At this stage in the game I’d say go all in with React, and the time spent learning Vue would be much better spent learning something like a backend technology. 
I’m an active developer just trying to think of where the market is going. I’ve been using Vue 1 for awhile and previously used Angular and I believe Vue has a lot of advantages and is catching on. Just also see a lot of people still making new stuff in React. Trying to figure out what’s best if I move companies in the near future.
I wish people would stop saying that the "NaN != NaN" is a JavaScript error.
I don't think it can. Events bubble through components in React, not elements. This is particularly notable when using portals.
Love most of it, but *really* not feeling the `className` —&gt; `class` change.
Check out nest.js
I'm in the same boat. What I've been doing when creating an app is creating user stories of what I want my app to accomplish and then making test appropriately. At first I was just going through each component and testing every aspect of it and it ended up being frustrating. I've been thinking of using react-testing-library - do you know if it's similar to Enzyme? 
Those websites are the best that you can find: \- r/https://javascript.info \- r/https://eloquentjavascript.net \- [https://developer.mozilla.org/en-US/](https://developer.mozilla.org/en-US/) 
WHAT!? that was one of the most oft cited bad decisions in react.
React is probably more in demand, however I would say that they are close enough that I would choose Vue if it has a drastic effect on your motivation. 
welcome to discuss it at the /r/ReactJS sub too! https://reddit.com/r/reactjs/comments/9bx8qb/react_fire_an_exploratory_effort_to_modernize/ (sorry idk if shilling r/ReactJS like this is against the rules but this showed up on my feed, figured its relevant)
Interesting. What other animation libraries would you suggest? I use React a fair bit too and I would probably still use GSAP. Keen to hear some alternatives though!
JSX in general still feels like a big old hack. It's just as possible to create purely js api that as concise as JSX with plain functions, you just have to put some convenience methods over your \`#createElement\` calls.
Nice to see other people talking about ember here. It doesn't get the exposure it deserves imo.
It's not the change I care about, it's reserved word conflicts and API inconsistency that I care about. 
This is awesome
I’m not sure what exactly you mean here. What is a JavaScript App? Does this mean a node app that has no face? Or perhaps you have a portly designed GUI that you want to redesign? It’s hard to say, but if you’re looking for HTML/CSS/JS libraries, there are literally so many it would be impossible to list them here. If you’re looking for building an app from scratch with JS that’s fairly complex, there’s React, Angular, Vue, etc etc. If you’re looking do design a simple app or perhaps a web page, there many many many many out there, such as bootstrap (the old standard), materialize, UIKit (my personal favorite). More context here would better help us to assist you. Good luck!
I think Vue is hot right now in the hipster sort of sense. I’ve never used it but I will at some point get around to it. As for what is best to know (assuming for jobs and whatnot), that’s easy. React hands down, without a doubt, end of story. Angular is the closest second. If you want proof, pick a job board, type in react, angular, and Vue. The results for react are leagues beyond that of the latter two. Leaves them in its dust, actually. With that said, I don’t think react is necessarily the best out there, but in terms of adding value to your potential employment, react without a doubt.
Did you read the bit about the possible solution to that? Just refire the event in the portal. Seems like a hack, but if it's just a refire of an exact copy of the native event, it should be fine.
Polka! 
Learn them both, they're not hard.
I find that it often very poorly maps to the actual rendered output, whereas createElement is a little more obvious.
Likely I'd be using REACT. I am building a js app from scratch and will probably involve the googleapis node package. Can you list some benefits of UIKit?
so... no? If you have to install node_modules locally then it's not dockerized anymore, you have to install node.
https://github.com/feathersjs/feathers is interesting
Your claim about the 12.0 -&gt; 12 conversion was nonsense so yeah I downvoted that. I upvoted it again if it helps :P it's just useless internet points and doesn't mean anything. That you're deflecting to this makes me think you have no more relevant arguments for our discussion. I'd still like to know which YAML implementation gave you 12 from 12.0. You should probably report a bug for that
Came here to say this. Nest is by far the best node framework IMO.
I expected people to say Express, Koa, and the like. Those aren't frameworks. They're routing libraries. If you want a full featured framework checkout [nest](https://github.com/nestjs/nest).
&gt;I’m very frustrated by the lack of so called monolithic frameworks for node You may want to checkout [Nest](https://nestjs.com/)
Really, UIKit is just my personal preference, though, it would be irresponsible for me not to mention there are many I’ve not used but heard really great things about. Usually, it’s more based on the clients preferences, which unfortunately, keeps me repetitively using Materialize (everybody seems to want to look like Google). I would recommend checking lots of them out and finding which fits for you and your project. Materialize and UIKit I find, specifically, to be excellent for things like back-end sections and control panels. Though, I’ve used UIKit for lots of public facing projects and they always seem to wow. Some I’ve heard great things about and personally find aesthetically pleasing are semantic ui, foundation, spectre, and kube. I haven’t had a chance to use them in production yet, but I plan to at some point (possibly). I’ve heard the most about bootstrap and have used it numerous times in the past, but find it a bit antiquated. UIKit is my preference for several reasons. Among them are it’s smooth and snappy performance, excellent looks, easy customization, and just in general I find it covers the most bases (meaning that I seldom find myself writing supplemental css/js for styling). I also like it’s practice of prefacing every class/prop with ‘uk-‘. Not to mention, it’s very versatile in that it suits both app/control panel and public-facing style applications exceptionally well. I find most library’s seem to pull a bit in one direction or the other. With that said, I’ve been using and loving UIKit religiously since UIKit 2, so I’m also a bit biased.
Haha hey man this is pretty cool :) I love to see people create unique things like this 👍 I can see this being a fun way to mix up the chat world, I suppose, though I can also see it possibly becoming a bit nauseating lol. I would definitely jump on the mobile functionality, though, given that 55%+ of users are on mobile. Cool Project though!
Neat little thing, very cool. Couple comments on the code if you are interested, perhaps if you are planning to make a little module to release it into the wild, * Dont be inconsitent with var! You are already using let, might as well use it throughout * Favor stricter equality convention with "===" over "==" * Use camel case versus snake case in JS * Consider factoring out your dom selectors * If you have a function for a callback that you just call immediately e.g, &amp;#8203; generatecard.addEventListener('click', function () { randomCard(); }); -&gt; cleaner syntax generatecard.addEventListener('click', randomCard); &amp;#x200B;
This is the best card number fishing site i've ever seen
very slick, nicely done. works well with chrome autocomplete too, which is great. one thought: i believe most, if not all amex cards have their security on the code on the front of the card... i have one myself and can confirm, 4 digits on the front right side. it would be annoying to have to prevent the 'flip' animation for only one card type, but it probably provides a less confusing experience for for those particular customers.
It’s called phishing FYI 
It's not a big idiosyncrasy, so if you already understand the concept it may sound logical. But I'm guessing you didn't get it: Remove the `let foo = 1` line and run again. You can use typeof even if a variable doesn't exist (it will return undefined)
Should be more upvoted, just finished a project with Feathers + React and it was unbelievably cool.
Not if he puts an animation of a guys fishing line on the card its not, Get to it man!
&gt; Svelte builds this one is a little on the nose haha. as a react guy i'm pretty happy about this. ember seems to be doing some really cool stuff and i'm increasingly keen on learning more about how it differs internally.
Sorry I’m the stupid one here... but what is it for? 
You could also use a React framework like Next or Gatsby. 
Can you give an example?
Ah, I missed that. Phew.
Thats pretty awesome! Good job! 
[AdonisJS](http://adonisjs.com) is pretty good
&gt; does management know the risks involved I have no doubt management saw one of the many blogs doing the rounds telling them that 20 years of the OOP hype train has ended and now we have the functional hype train, accordingly all management know is that they need to write functional code.
what i would do is: figure out how much % of money XP makes you and if its less than 5% or 10%, stop supporting it? C# + HTML is also a nice combo, i think most moved their XP stuff to HTML+PHP so it works anywhere.
From the Express website's home page, verbatim: &gt; [Express is a] Fast, unopinionated, minimalist web *framework* for Node.js Don't be pedantic
Those functions are indeed a library. For pure javascript my goto is [mdn docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript) for usability. This is probably a good time to do some research on polyfills and also make friends with [https://caniuse.com/](https://caniuse.com/). If you find yourself overwhelmed don't stress too much, it is indeed a lot to take in and comes with time. Welcome to javascript! also for simply executing javascript I always felt node was more suited for teaching since you don't get bogged down in all the web dev stuff. You won't be able to play with browser stuff but for simply learning, it strips a lot of the wonky parts of web dev out so you can just focus on the language. Food for thought, best of luck! &amp;#x200B;
ClassList should be good alternative then.
Looks like you might be using commands from the p5.js library. Try adding this HTML before you open your script tag: &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.7.1/p5.js"&gt;&lt;/script&gt; 
Possibly something like this? Not sure. const elementIds = [ 'name', 'cardnumber', 'expirationdate', 'securitycode', 'output', 'ccicon', 'ccsingle', 'generatecard' ]; const elements = elementIds.reduce((obj, id) =&gt; { obj[id] = document.getElementById(id); return obj }, {});
From what I understand it seems like a different approach than Enzyme - it is basically testing the app the way the user would use it. For example enzyme you would be searching the input in the DOM by CSS class, ID, input type or even children of certain element - but this way you are tied to the specific CSS classes or even HTML structure - if in future a designer decides to change CSS classes / HTML structure, you gotta rewrite the test. The way this is solved with react-testing-library is to basically find the input by the text as an user would. (getByText, getByPlaceholderText,...) so you do not care about HTML structure or CSS classes and if in the future the CSS or DOM structure is changed, you are still GREEN with the tests. That's sort of what I understand as a main differences, BUT still missing the right and correct approach how to really test React Apps. I would even pay for a thorough explanation and working examples to get really deep understanding as it has been bothering me for a while now..
You're mapping ids to elements, why not use `map`?
You need to make a case study proving xp is shit, and unless you want problems in security confidentiality user interface etc. That shit needs to die.
You need to make a case study proving xp is shit, and unless you want problems in security confidentiality user interface etc. That shit needs to die, remind your boss that they are liable for the security of an app / web portal, if you can do it in writing as when the shit hits the fan, it sinks very quickly
Sadly things like this are no linger flying in the easy PCI levels. 
Really?? How is it less complicated than java? Also, I'd be wary of codepen, its cool to skim projects and toy around but I think its an overall poor learning tool for beginners, too much magic.
AFAIK, very little if any was used, however jQuery was part of the release dependencies for backwards compatibility - this is going away.
There's a ton of cool stuff in Ember, I highly encourage you to take a deeper look! :)
That looks awesome. Unfortunately, and it might be because I'm on my phone, there was no masking. The input boxes and the card image itself showed the values I typed in all the time - except obviously when it flipped around...
&gt; which is function scoped instead of block scoped Function declarations are block-scoped in ES6+. function foo() { return 'outer'; } { console.log(foo()); // inner (hoisted) function foo() { return 'inner'; } console.log(foo()); // inner } console.log(foo()); // outer
Now just become PCI DSS compliant and you're all set!!
Awesome work mate. Try and optimize it to the mobile screen next!
This is so true it hurts. I love learning about and doing web development and have been studying/doing it for about two years now. So much to learn and it's all fun and exciting to me. 
Exactly right. If I made this production ready I would totally do this. Thanks for checking it out!
\+1 for this. coming from php's laravel and adonis is like laravel but only in js goodies
Spellbinding insight! Good thinking!
Vue is the hipster alternative to React, but not the React killer.
Keep up the good work man. Maybe try to make it responsive next?
Not quite - there shouldn't be a `var f` inside the IIFE. I.e, the function that returns bar overwrites the global function. 
Actually, the official dom api is className, not class: https://developer.mozilla.org/en-US/docs/Web/API/Element/className But then again, most people are surely are accustomed to class due to html so maybe it makes sense.
It's a sad day when one needs to choose a technology based on market moves instead of engineering.
Nice work. I think it would be better if it can replace the word with emoji.
the intended use is to make your text appear like it was written by a student athlete (meme) &amp;#x200B; [http://www.smosh.com/wp-content/uploads/2017/03/student-athelte-meme-fb.jpg](http://www.smosh.com/wp-content/uploads/2017/03/student-athelte-meme-fb.jpg)
Nice demo (even though these kinds of things always have practical concerns if you were dealing with cards for real). FYI, on Firefox both the card number and date fields get highlighted with a red border and a "Please match the requested format" tip, even when literally just typing 16 digits for the card number and 4 digits for the date and letting the code do all of the other formatting.
what? e.value.length? are you sure what u have said
Expiration field should probably also allow 4 digit years, unless you want to get a flood of "2020" entries.
Cool to play around with JS, but if this were a serious project I'd point out that this can all be accomplished in pure CSS. Position in a circle with CSS, then use a CSS animation to rotate them all (preferably on a wrapper, so only one animation required).
alright. thanks.
Not too be cynical, but this is exactly what the react docs tell you to do... The docs even explain it better.
&gt; Also, is there any way to keep the "spacing" between the trapeziods constant regardless of window size? At the moment it changes a lot as I change the window. This is because you use relative units for the sizing of your borders (vh and vw are relative to the size of the viewport). Use px (absolute unit) and the spacings will be fixed. Oh, and besides other smaller fauxpas, your .trapezoid class is missing it's closing bracket. ;) Keep it up!
AFAIK: convention. 
Seems a rather petty issue to accommodate for new users. As one of those users, I can honestly say this wasn't a source of friction for me. Just saying
Koa is most definitely not a routing library. You have to explicitly install one alongside it. 
I am from Austria (not that it matters). We can't really give an opinion if we don't see the code. Put it on GitHub, sharethe link and we'll take it from there.
ES6 lets you use the spread operator for any number of arguments, including arrow functions. (one, two, ...infinite) =&gt; {}
 const elements = elementIds.reduce((obj, id) =&gt; ({ ...obj, [id]: document.getElementById(id) }), {});
After removing typed word in name - the first letter from the previous word was left on the back side of the card Is it a bug a feature ? to reproduce: 1. enter some name 'test' 2. delete word test using backspace 3. flip the card it seems that you need to fix this in that part of code name.addEventListener('input', function () { if (name.value.length == 0) { document.getElementById('svgname').innerHTML = 'John Doe'; } else { document.getElementById('svgname').innerHTML = this.value; document.getElementById('svgnameback').innerHTML = this.value; } }); change to list this: name.addEventListener('input', function () { const value = this.value.length === 0 ? this.value : 'John Doe'; document.getElementById('svgname').innerHTML = value; document.getElementById('svgnameback').innerHTML = value; }); &amp;#x200B;
Does anyone know how this compares to AdonisJS?
Nice catch. I'll take a look when I can!
LINQ works with anything that implements IEnumerable&lt;T&gt;. It’s like streams in Java 8. Also Entity Framework now has versions for MySQL, PostGres, and SQLite.
It's not global, but yes. It's an array of the function's parameters.
this
You can use typeof on variables that don't exist. It returns 'undefined'.
Not a number is a number, but number is not not a number.
Id say you can go as far as the example given with a reducer and string values to dynamically generate them. Simply just putting all dom declarations after dom ready and use them throughout is nice as well. Good for visibililty and just not repeating document.querySelector or document.getElementById a bunch of places.
Safe to say you didn’t get the job. But there’s not point in guessing about why. Follow up with them and ask! And keep interviewing. Everybody with any semblance of a successful career has heard a lot more Nos than Yeses
But you can make all that tool chain incredibly easy for others to use. Just a one command in npm run.
What would be needed to become compliant?
Yeah I'm hoping for some clarification on this from the OP too. 
like '371449635398431' for american express? should work... I only did 7 major CC brands... easy to extend in the future though. Thanks for takin a look at my work!
Not sure why I said global as it only exists within the function’a scope when it is called. 
Sounds like an interesting and useful project. I'm just wondering why do you want to make this open source? What is your goal here? Do you, for example, want to create a more generic solution? I think that the most important thing about open source is documentation. You could just dump the source code on GitHub but this would be pretty useless without any documentation on what it is or how to run it. Secondly, I would separate your project as much as possible from Google Cloud Services. I believe that open source projects should be easy to run and self-host anywhere.
Normally we don't like shilling, but /r/ReactJS IS the main subreddit for React related topics, so no worries here. Glad to see you cross-posting to let people know!
I'm on mobile so I have two comments :) - add support for mobile. This really is essential in 2018, unless you have very good reason to totally omit mobile - loading times are long for me, especially considering I had to load what's basically an http "4xx not supported" screen with one image! If you can help it, fix it; if it's the server's fault, nevermind haha
What do you mean accidentally?
yea im just here to connect people haha. glad everyone is fine with it
Yep, I want it to be more generic. That's the ultimate goal. A library that just "fills out" a form for you. The two main reasons I didn't put it on GitHub right now are that it's a total mess as I said, and that there are still many "proprietary" parts in it, which my brother understably doesn't want to be online and free. The separation from Google Cloud is already in the making. I thought I need a Linux system and a imagemagick binary back then, for merging the pages to a PDF. Turns out, I don't really do, so ideally the whole thing should be one simple npm module that you can feed with your html form data, coordinates of the fields and a PDF or pictures of the empty form. I even created a webapp where you can upload the empty form image and then click somewhere on it, so it gives you the x and y positions of your fields in a json file, so you don't even have to figure out the coordinates by yourself. So yeah, it's a big mess but it's perfectly working. That's the main problem and I just wanted to collect some input from you guys before I start to kinda rewrite it into something generically usable. Thanks for your comment. :)
&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; what are thse ?? why appeared them left side ??
Burning the hay stack and magnets? Lol
Can you put this on npm as a react element?
@all @channel you are welcome to contribute thanks
Issues: [https://github.com/odykyi/javascript-idiosyncrasies/issues](https://github.com/odykyi/javascript-idiosyncrasies/issues) Pull Requests: [https://github.com/odykyi/javascript-idiosyncrasies/pulls](https://github.com/odykyi/javascript-idiosyncrasies/pulls)
Issues: [https://github.com/odykyi/javascript-idiosyncrasies/issues](https://github.com/odykyi/javascript-idiosyncrasies/issues) Pull Requests: [https://github.com/odykyi/javascript-idiosyncrasies/pulls](https://github.com/odykyi/javascript-idiosyncrasies/pulls)
Kind of a basic thing but I'm learning how to properly use MongoDb in a node application. Previously I would try to avoid using a database because I didnt understand how to configure it and instead just write to a JSON file. Now I'm learning how to set up a database to use CRUD operations as opposed to reinventing the wheel
Now i can truly feel like one of those people who type in that shitty way
I called back two weeks in a row asking about the process. 
Ah, cool didn’t see if you mentioned that. Rest of my advice still stands!
&gt; In fact, you should always follow up after an interview. Your lack of doing so might even be why they passed over you and went with another similar candidate who did follow up This might be true, but I've never passed over one interviewee for another because one followed up and another didn't. Then again, I don't think I've ever explicitly ranked candidates against each other. If we found one that we thought was a good fit, we made an offer, we didn't wait around and see if someone better would come along.
I'm aware of that, which is why I said "This is JSX, not just plain-old JS." React should be used with JSX, which means you should be looking at it more like HTML than JS, hence `class` providing more consistency than `className`, even though technically it's all JavaScript where `className` _would_ be more consistent.
Ikr, did they literally ask that, lmao At first i thought it was an metaphor
To you know the number will be a fixed length? 123456789 % 1000 would five you the last four. 
This is amazing. Where can I learn to dynamically change an image? or add those animations?
No it isn't but you can `Math.floor ( x / d );` to get the same result.
Are you joking? If so it was a funny response. If not...look up the needle in a haystack problem 
Are you joking? If so it was a funny response. If not...look up the needle in a haystack problem 
Math.floor(123456789/100000)=1234 I suppose that solution only works if you know the place value of the first digit.
Well done, looks cool.
Check out Big.js or one if its related incarnations. Has some pretty neat functions that may interest you. Probably overkill though, depending what you're doing.
Ouch lol I mean I guess its not a problem per se as long as the codebase is consistent. However id be pretty annoyed with an external api that are typically camel case and then the code vars would be snake case. 
sometimes companies just change their mind and close recruitment or delay it (especially bigger companies with a lot of politics and bike-shedding - recruitment process sometimes is like months because they can't just "hire a programmer", but there's a more sophisticated process, decisions, approvals, lot of talking and other forms of procrastinating). So usually it's not you, it's them. But what you can do is ask politely for feedback, and apply to other firms. &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B;
&gt; Copyright (c) &lt;year&gt; &lt;copyright holders&gt; &gt; Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: &gt; The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. &gt; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
I'm currently playing with the WebAudio API and csound (also available as a webassembly lib for the web) On a more practical path there's also tensorflow.js which is really fun and might get you a ML job if that sounds interesting to you. 
It would be easier for Reddit, SO etc. to simply deny traffic from EU IP addresses. At least on a cursory level. If you don't operate within a jurisdiction, you're not subject to its laws. Better yet, the pages that deny access should tell visitors to instigate mass protests against the laws.
({ a = 1 } = {})
 https://www.topcoder.com/community/data-science/data-science-tutorials/introduction-to-string-searching-algorithms/
Thank you so much! This helps me so much!
Thanks!
Whats “that EU shit” ? Pretty hashtags but a bit more objective info instead of link dump would help
Thank you for the constructive comment! Can I probe you for more info though? Because this sounds like a really useful things to learn. One of the harder things I found was getting all the trapezoids centre correctly on a single point and rotate about that point. How does one go about positioning them all in a circle with CSS (total beginner here! sorry! Feel free to just point/link me in the right direction!). Thanks again!
Haa, the idea is eventually to make this into a javascript project showing how the mass of a star affects its properties, so these were meant to be sunbeams (as well as a good chance to try to code something up without a tutorial!) Thanks! Will do!
The book *Headfirst JavaScript programming* Is really good. At least I enjoyed it. Although I need to go back and see of I can get battleship to work. There's some OOP chapters at the end you may not need. Or only of your class covers them anyway. You could try one player *screeps* (there's a demo on the site) as a way to practice. Also YouTube. 
To get the most out of JS you need to learn a few other technologies alongside. Don’t panic! It’s not very hard, neither that much time consuming . Learning HTML and CSS is very straightforward. Also JS itself is one of the easiest languages to learn. I suggest looking for a “Web Development” course rather than courses that only focus on JS. Colt Steele’s “Web Developer Bootcamp” is my favorite. A comprehensive starting point for beginners. I’d suggest taking the course to get familiar with the jargon and opportunities you face when learning JS. Then you can use JavaScript.info or YDKJS books to broaden your knowledge. [Udemy - Web Developer Bootcamp](https://www.udemy.com/the-web-developer-bootcamp/) 
There's a very good reason; poor programming skills =p Thanks though!
Hey man -- check out transform-origin. I think that will help you center things where you want them. Also I second this guys comment -- everything here can be done with CSS, which is actually a pretty powerful language itself and well worth spending some time with. Regardless -- cool work man, nice job. Whether it's JS or CSS it looks great!
JSX is designed to resemble HTML, which is why most people don't like the className thing. JSX should look like markup.
Thank you! I'm finding it really useful. I've completed up to day 4 (about to do day 5) but wanted to practice a bit of what i've learnt, without having the answer only a small skip of the video away. Learning a lot! It's a really good course! 
Thank you! I will try to do so! I found the positions and whatnot probably the hardest thing about all this!
American Express has the security code on the front of the card, don't need to flip for that.
"the syntax is hideous" This kind of thing with dedicated syntax (Dart): foo({x = 5}) { ... } foo(); foo(x: 7); "[...] the default values aren't restricted to "compile time" constants. Allowing arbitrarily complex expressions is completely unnecessary and also problematic for tooling and documentation." An arbitrarily complex expression isn't something you can display in call-tips or documentation. It also makes for a horrible API since you can't easily communicate what the default values are. There simply is no point to any of that. Flexibility isn't needed there. If the default value isn't something simple, you should handle it in a different manner. Even simple examples which make use of that flexibility are rather confusing: function foo({a = 1, b = 2, c} = {c: 3}) { console.log(a, b, c); } foo(); // 1 2 3 foo({c: 4}); // 1 2 4 foo({a: 0}); // 1 2 undefined And instead of "b = 2" I could have also written "b = /* expression with 100 lines of code here */".
Like others have said, they may just be looking for different personality traits. Not much you could, or should, do about that. You don’t want to work somewhere where they are just filling seats without considering personality fit on the team. On the skill front, if you haven’t started already, you could look into some of the ed6+ array and object methods. [like filter, map, some, and reduce](https://medium.com/front-end-hacking/stop-array-foreach-and-start-using-filter-map-some-reduce-functions-298b4dabfa09) or [Object.keys, values, entries](https://javascript.info/keys-values-entries). being able to speak to these also lets interviewers know that you’re staying up on the cutting edge. They’re also super helpful in your own code and worth knowing for that alone.
Problem is that if you use any native methods or third party libs it's not going to be consistent. eg: function add_classes(some_selector, class_list) { const my_element = document.getElementById(some_selector); my_element.classList.add(class_list); }
Here's an example I just made: https://codepen.io/anon/pen/jvByEa I'm confident that the way I've positioned them all with `translateY` is worse than how I once did it at work, but it works!
It's not our fault we live in Europe. It'd be nice if you'd be less egoistic.
I started using a slightly more complicated convention that has been really great for my side projects, I don’t expect it to catch on but it’s really helped me to understand my own code more quickly: camelCase for anything that is a function PascalCase for classes snake_case for references that are not functions $leading_dollar for DOM node references CAPS_SNAKE_CASE for true constants, mostly reserved for literal constants declared at the top of a module I could see why people might say that’s confusing, why not keep it more simple. However, it’s helped me keep my personal projects very organized, I can see a reference name and immediately pull more meaning out of it than I would otherwise.
"i was to make a calculator program, but it ended up like this. No idea why..." Not sure how you can accidentally make a program. :S
So, the string-approach of /u/mcaruso obviously works and is probably the easiest solution. If, for some reason, you want to stay purely number based, you can use `Math.floor(Math.log10(x) + 1)` to calculate the number of digits the input number has and use that to do the appropriate integer division: function clipNumber(number, numDigits) { return Math.floor(number/Math.pow(10, Math.floor(Math.log10(number) + 1) - numDigits)); } clipNumber(123456, 3) // returns 123
Yeah. I'm dumb. I totally understand. I think at that moment my brain just completely ceased functioning.
Came her to ask this. I'm ready to be outraged at a moment's notice, but I at least need to know what I am supposed to be outraged about.
All in due time. Honestly I was shook finding out mongodb was basically the same thing I was trying to implement. I felt like a real noob when I realized it's essentially just manipulating JSON 
I’m doing a bunch of tests with component compilers like stencil, hybrids and skatejs. Web Components are the greatest thing since es6
Have you checked out FreeCodeCamp? They have a curriculum for lots of different web dev abilities, if you see stuff you don't know how to do it can fill in some holes in your knowledge - [https://learn.freecodecamp.org/](https://learn.freecodecamp.org/)
The movement rate is tied to the frame rate - I'm on a 240 hz gaming monitor and I can zoom around 4x faster than everyone else. :D
Recently I have been overhauling the animation in one of my game projects. I’m using generators to implement cooperative multitasking, so that each object runs it’s own animation in a separate “thread”. Play online here: geon.github.io/flup Use wasd and arrows. 
This is cool. Potentially controversial in a code-review, but I can see it having its place. I looked into it assuming it was a hacky side effect (like i++), but looks [well documented](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator). Thanks for sharing!
Hey there! So for my first real JavaScript project, I followed FreeCodeCamp. I built a Weather app! Then I moved on and built a WikiPedia Viewer app that would show various articles from Wikipedia under a certain searched topic. Then I moved on and have used Reactjs to build a CryptoCurrency Tracker. Next, I’m thinking of building something more difficult using a backend. Anyways, as others will say, it doesn’t matter what you necessarily build, but more of just building something. Anything! A Weather app is good or a Random Quote Generator is good too! Then after that, always make it more difficult and step up to the challenge. Good luck and enjoy the process! PS: A good starter project could be just using GitHub for version control (google this), and then use JavaScript to connect to an API (google this). Once you have it connected, display the data that you want, then when you feel satisfied, host it on Github Pages. Don’t forget to make it look somewhat decent to show others!
It seems like no-one has suggested [Codecademy](www.codecademy.com) yet, so I'll go ahead and do it. Its really good at teaching you the basics in a beginner-friendly environment, and it's free. There is some content locked behind a pay wall, but that content is not really necessary to understand the language, so it can take you quite far, without requiring you to waste a dime. 
Just wait until you're handicapped by relational databases, because you want a dynamic schema.
 var x = 10000000000; // original number var xString = x.toString(); // convert it to a string var xFirstFour = x.substring(0, 4); // grab the first four characters var y = parseInt(xFirstFour, 10); // convert it back to a number, if you want
Very cool. It would be cool to have buttons to reverse it or change the speed.
Check out Hapi.js
It may be a bit overkill but it would be a quick way to get SASS and auto reloading.
Would still have to set up a separate process for the CSS but looks interesting all the same. Thanks!
Its a question about problem solving, not coding. They want to see how you think about solve issues.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
I added one shortly after I posted. MIT license.
That arguments thing is annoying but is leading me to use `debugger;` a lot more
Ever since ecma made import().default a thing i guess no can really complain. :-P
It's a bot
Oh I need this.
Keep us posted on your progress and stay at it ;)
You should be able to find some ideas on [codepen](https://codepen.io). Also, in the past, I've browsed [dribbble](https://dribbble.com) for inspiration for fun little projects to build out. Another great motivator is if you have a problem in your dev workflow, life, etc. that you could write an app to solve
The reply was for you, not the bot. :)
Absolute positions are a pain the ass. If their dimensions arent hardcoded, you could try setting the container to be responsive and max width 100vw. From there youll see if you need special media queries to resize the actual elements
Golang 1.11 has support for compiling to WebAssembly, so you can write Go to write JavaScript to run in the browser!
Gotcha. Wasn't sure if you noticed as it had negative score.
Please keep us posted it’ll be awesome to watch it progress
If the function took arguments youd have to bind them in like, randimCard.bind(this, arg1, arg2) but I was specifically talking about a 0-arg function in this case.
I meant more like taking the event that is passed automatically in this case, so you wouldn’t necessarily use bind and it’s ambiguous. It’s purely a style thing though. :) 
Oh I see. I think its mostly implied an event listener actually passes in an event arg but yea I hear ya.
If you execute that code in chrome you get inner inner inner &amp;#x200B;
Misinformation, lack of information, call to action with nothing to persuade sensible people? Yeah, it does sound like Brexit. 
Do you expect people to read that code? Use a gist or pastebin.
You can make the same think using only few lines of simple HTML and CSS. I've made you an example: [https://codepen.io/anon/pen/yxMbPb](https://codepen.io/anon/pen/yxMbPb)
&gt;dit don't want Of course not. Thx for suggestions SC: [https://pastebin.com/e7c4gD22](https://pastebin.com/e7c4gD22)
Of course not. Thx for suggestions SC: [https://pastebin.com/e7c4gD22](https://pastebin.com/e7c4gD22)
JSX is a hack. HyperScript is much more cleaner. 
Write a node app that fetches some data from an api and then does something with it. That's pretty much the basis of what most real apps do. If you can do that, the "something" is just an implementation detail.
Feathers is also more like Sails, and I think is a more active project. 
Yeah, if I was reaching for a Node framework myself it would be Feathers 
It was/is mostly used for the selector engine in the testing framework. The other usages are apparently pretty trivial. 
Mithril core dev here... (Yep, [*that* framework](https://mithril.js.org/)) I'm somehow not surprised, in the same way I wasn't when Angular decided to try out virtual DOM and components instead of further propagating the jQuery spaghetti mess it previously encouraged.​ When you keep things simple and aim to stay intuitive, aligning yourself with the DOM itself rather than trying to replace it with your own idioms and magic without good reason, it avoids messes like these in the first place. If this helps, we have nearly everything proposed there in some capacity already: * "Stop reflecting input values in the value attribute": we never did that in the first place. We have always used the \`input.value\` property directly, for performance reasons but also because if you're managing the DOM directly, that's almost certainly what you'd do anyways. * "Attach events at the React root rather than the document": We simplify this further: we just attach the events on the element directly. It's much easier to avoid issues when you just let the browser handle things correctly. Besides, you have to do this anyways for \`onclick\` handlers; otherwise, screen readers get the wrong impression on whether something is a link or not. * "Migrate from onChange to onInput and don’t polyfill it for uncontrolled components": When you just use the event names directly without modification, you avoid screwing with people's intuition on what things should be like. * "Drastically simplify the event system": Well, if you're going to introduce a synthetic event system *on top of* the natively implemented one in this thing called the DOM, *of course* that's going to complicate your library a ton. If you *really* need some sort of synthetic event propagation, leave it to the renderer to invent the concept, not the library where it doesn't usually make sense. Besides, it's not like you can hook into that via components, so how useful is it *really*? * "className → class": If you want a framework that's easy to use, learn, and understand, it's better to accept both DOM and HTML idioms. That way, users can flip between the two and use whatever's more intuitive at the time, and nothing becomes a problem. And if you want to pick one over the other, prefer HTML idioms - it was designed for both developers *and* designers, so it's accessible to both already. It's also less for them to learn. Let's just say when that popped up in [Mithril's Gitter](https://gitter.im/mithriljs/mithril.js), we all kind of collectively chuckled at it.
You could use the code tags.
Your code would be waaaay more readable if you used async/await insteads of naked promises. Can you use those?
Have you checked the DevTools console? Are there any errors? I have the hunch that a file is failing to load.
I had no idea this was possible!
If I understand correctly, you want to make speech bubbles. There’s a CSS trick. Take a look at this [great demo](https://leaverou.github.io/bubbly/) by Lea Verou.
What's the hacky side effect of `i++` that's not well documented?
https://en.wikipedia.org/wiki/Payment_Card_Industry_Data_Security_Standard
Why would you ever want alphabetically sorted rules? It makes no sense
Thanks for replying! I have checked the console, and there aren’t any errors. All the files load in the editor and act like normal but when I export it or put it into html it doesn’t work.
https://www.pcisecuritystandards.org/pci_security/maintaining_payment_security
Seriously ... this! Alphabetic sorting ”looks” nice, but generally goes against the way CSS is supposed to work ... previous declarations build the foundation upon which further ones work out of ... alphabetization of declarations *might* work occasionally, but ... I do see a ”million” of situations where it simply makes things f***ed up as heck.
my brain is so good that the illusion doesn't fool it
Actually, I rechecked again and saw many errors. It turned out I was hosting my assets through an HTTP website and not an HTTPS website. It now works, thank you so much!
I hate to break it to you, but those were the heart of the list. Those plus the command line, git, and browser dev tools seem pretty uncontroversial. (That said, I agree with your basic point: focus on the foundations and leave the trendy landscaping for later) 
Are you meaning to wait for the trendy landscaping til you have a firm grasp of the other three? If yes, I agree If no, I'd have to disagree and say that you definitely should worry about the trendy landscaping eventually. That's where the jobs are. You're very unlikely to get a job unless you know a bit about that side of things.
The former
I never thought promises were necessary to solve callback hell, I used some function call lists that had an array of functions, their \`this\` and the params, as well as optional individual callbacks. Then I used a \`call\_multi\` function to call them in sequence, all together, or in a queue where a given number would be processed simultaneously. &amp;#x200B; Now that promises have caught on and are usable with async/await I find them useful. I just don't buy the argument that they were necessary to solve callback hell.
I'm assuming (hope I'm right) it's not sorting the CSS rules, but rather the properties in each rule. Example: ``` .image { &lt;-- NOT sorting these background: white; &lt;-- sorting these position: absolute; } .button { ... ``` You're right in saying that sorting the **rules** makes absolutely no sense. Sorting the **properties**, however, is a pretty common practice to keep CSS written consistently
Why no open source? The fact that you don't have a repo tied to it is pretty shady imo
I played once in easy mode and 9 was checked as a prime number for the game
What's your programming background? Self taught, going to school? How long did this take? It's pretty cool
change strokeStyle to `rgba(255, 255, 255, 0.5)` and you won't need to draw the circles.
Its npm and there is a repo there tied to it :)
He should also drop the imperative programming and go declarative.
cool!
Glad I use Vue. ;-)
These are really great questions to have asked in return. The only thing I asked was, "Do you mean an actual needle in a haystack or a digital representation". When they said actual, I was taken aback, probably visibly. They explained it was a creativity question. To see how I think. Issue with applying to other jobs out here is that there just aren't many of them. I live in the Winston-Salem area of NC. I've only found, maybe, five places to apply to. I do so every time someone comes open that I feel I'm capable of doing. 
Thanks for the feedback. You're right though. There's still the human element so it's not always machine like when it comes to decision making. 
You should try it with React. Also, not sure if you intended but hovering over cards will display what's behind it.
I would like to second this. OP, you've done a good job and if you are interesting in improving, your next step is to completely abandon jQuery and ES5 syntax. Learn ES6 and you will enjoy JS so much more. As to the specifics: 1. It's good that you were able to figure out `this` and sometimes it's a required tool, but the game doesn't really call for this sort of approach. It would be a lot easier to read if you had several simple functions, which you'd then call from within the main game loop or as necessary. 2. More of a minor bug report: If you hover the mouse over any of the cards, the tooltip will reveal what it contains. =)
r/iamverysmart
Suggested having the boss take off his shoes and walk around in the hay. Didn't get the job either.
Oh damn, sorry about that. I will fix that at once.
Yes, that's intended, just to help me debug.
I've been programming for years, since the web first came around, but never had any lessons or classes, just self-taught and googled.
&gt; Further, your code makes heavy use of the imperative paradigm, as well as heavy amount of mutation. The structure of the app could be better organized, as well. Could you give an example of what's imperative and how it could be done differently? The same with mutation.
Sure, tomorrow I can post an example.
&gt; It would be a lot easier to read if you had several simple functions So it was better the old way? Take a look at this: http://negative12dollarbill.com/mmm/ This was the old way I did it, which I felt didn't seem professional.
no, i have not thought about it. i have an old program that converts a tab into 8 spaces in html. what would you suggest? i guess two spaces?
I can’t imagine a scenario where you’re using maps correctly. 
I mean.. you could provide constructive advice or help him out, instead of telling him he's not using maps correctly?
You need to implement your own comparison function: `[1, 2, 3].sort((a, b) =&gt; a &lt; b)`
What constructive advice? Maps don’t work this way and OP provided zero info what this is intended to accomplish. I’m not a mind reader, but I can tell OP that they’re seemingly way out in left field. 
There is no "correct" way to use maps, as long as the way I'm using them works and is not overly costly. If my current way of sorting is inefficient, that's why I asked how to make it more efficient. 
There is no "correct" way to use maps. As long as what I'm doing works and is not overly costly, it should be valid.
Maps are, in general, not ordered and are therefore not sortable. Their values are, by design, tied to their keys. Speaking of sorting a map’s keys and having the result of that sort reassign values doesn’t make sense. 
"Maps don’t work this way" There you go, buddy. Tell him "Maps don't work this way". Other people are telling him that he can sort it by key, he just has to create his own function, so I don't really have any idea what you're talking about. He also gave an example of exactly what he was trying to do, and if that wasn't enough for you, he stated it clearly in the title.
They definitely are sortable, because I can sort them the way I described. If you mean they're not supposed to be or are generally not sorted, then you would need to make a case for why stepping out of convention is invalid in my case...which you would need knowledge of my specific problem to do, which you admitted to having "zero info" about. 
Ugh, Canvas... The last part of Javascript I've yet to tackle.
This! Whenever you need the entries to be sorted, I’d convert the Map to an Array and sort and then use the. Array: const myArray = [...myMap]; myArray.sort((a,b) =&gt; b[0] - a[0]);
Not from taking a class exactly but from reading. I guess I thought it was more professional for everything to be inside an object. Not that it would affect my little game but that if you were programming this in a more mixed environment. Hence my question about immediately-invoked functions before.
Is there a good reason to do this in JS over CSS? As I came to understand, it would be better to do stationary graphical stuff like this in CSS if possible.
[p5.js](https://p5js.org) is a good starting point
I guess I'll have to buy a VPN in the US soon (if that even helps?)
Wanted to brush up my node skills a little bit so I made a pretty simple CLI. [https://github.com/dshaw1/cryptfolio-cli](https://github.com/dshaw1/cryptfolio-cli) It takes values from a portfolio.json file and tracks individual crypto values and your total portfolio worth with real-time updates. Probably going to add some more features in the future if anyone has suggestions.
Dude... if you are not seeing it, your brain is actually malfunctioning. In all seriousness, I'd see a neurologist as soon as you can. This might be a sign of something serious happening.
Maps can be 'ordered' by the order the entries are added in and that order can be observed when iterating over all the items in a map. In JavaScript, Maps are ordered. That said, not all implementations support this. Python ha both regular dicts which are not ordered and collections.OrderedDict which are.
Hi /u/regexp_, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Maps are iterated in the order that the keys were inserted. This is one of the differences between Maps and primitive objects in javascript. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map People often make the mistake of using objects as maps and assuming that they behave the same way, but objects are not guaranteed to iterate in any predictable order. But for OP's case, he's using a map, the order of the keys are dependable, so sorting them is perfectly reasonable.
Hi /u/jishan121, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Hi /u/ajmey, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
Fair enough, I'm sure I could learn it if I tried. Just not something that's super useful in day to day frontend (also math!)
[This article](https://medium.com/@uistephen/style-guides-for-linting-ecmascript-2015-eslint-common-google-airbnb-6c25fd3dff0) does a comparison of the three popular style guides. Particularly useful is the common features of all the guides: * Indent: 2-Spaces * String Quotes: Single * Brace Style for Control Blocks: Same Line * Prefer Const over var: Yes * No Trailing Spaces: True My advice would be to pick the style you like the look of and get a linter to validate your code. You can get command line linters or ones built into your editor.
None of those will be achieved without murdering trade, so they will never be achieved and only the worst liars ever suggested they would be. 
Nice summary. Although I would argue that currying is not just "used out of habit". Partial application of arguments can be pretty useful. I haven't seen it used almost ever in Javascript, but I've seen currying produce some pretty clean code in Haskell. For example being able to write something like the following is pretty nice: map (+ 5) [1,2] 
Love the beginning. Very straightforward with some points I hadn't considered before. I think your _Advanced Topics_ section needs work. I understand you are trying to avoid in depth explanations, but I think they are so ambiguous they would only confuse new learners more. In the same number of words I think you could explain currying and composition in a way that is more specific and meaningful, without diving into a full explanation.
Really cool Monica! I like your work with canvas. I also really love working with canvas. Do you know of any communities around JavaScript canvas, or non-webgl JavaScript graphics? codepen.io has canvas stuff pretty often, but the community aspect is a bit lacking.
Thanks man
Thanks
From someone with a varied programming background and an interest in math: If I were to follow these guidelines instead of object-oriented ones, what problem would I be solving?
This is a more in depth look at a lot of these topics and more besides: - https://github.com/MostlyAdequate/mostly-adequate-guide
How is this any cleaner than `[1, 2].map(x =&gt; x + 5)` in JavaScript? As someone who writes Scala everyday I'm not sure why I would ever write something like `def mapAdd(n: Int)(list: List[Int]): List[Int] = list.map(_ + n)` instead of just writing out the map on the list it's being applied to every time. Maybe if there's more complex logic, but I certainly wouldn't curry the function.
Why you say CSS isn't designed to do this stuff? background: repeating-linear-gradient( -45deg, rgba(255, 255, 255, 0.5), rgba(255, 255, 255, 0.5) 5px, transparent 5px, transparent 30px ), repeating-linear-gradient( 45deg, rgba(255, 255, 255, 0.5), rgba(255, 255, 255, 0.5) 5px, transparent 5px, transparent 30px ), #000; This is clean, simple and [very well supported](https://caniuse.com/#search=repeating-linear-gradient).
I think you make a good point that there's really no point in messing with currying in Scala and JS because the syntax for writing curried functions is cumbersome, and lambda functions already do a great job. But why write map (\x -&gt; x + 5) [1,2] when you can write map (+ 5) [1,2] if you can in Haskell. I wouldn't say it's significantly better, but I do think it's super easy to read and understand.
&gt; If I were to follow these guidelines instead of object-oriented ones I'm going to take issue with the word "instead". Object oriented and functional are not mutually exclusive. An easy example from the OP's post is .map() .reduce(). These are _methods_ on array objects, yet these methods are _also_ pure and referentially transparent. In my view, the benefit of these guidelines is a reinforcement of good practices that lead to better architected programs. How many code bases have you seen that relied heavily on global or nearly global variables? How many functions have you seen whose behavior depends on the state of the larger app? In object oriented circles, we tended to call this problem [spooky action at a distance](https://en.wikipedia.org/wiki/Action_at_a_distance_(computer_programming\)). The functional guidelines of purity and referential transparency helps to cut down on that problem.
My point is the syntax in Scala would allow for it. I could define `map` as `def map[T, U](f: T =&gt; U)(t: Seq[T]): Seq[U] = t.map(f)` and call it with almost the same exact syntax as your Haskell example, `map (_ + 5) (1 :: 2 :: Nil)`. You can write functionally without relying on currying and it's not super useful in all applications of functional programming.
functional programming is a style. Like any kind of style, one is not necessarily better than another. But each style does have benefits. Functional programming doesn't solve any problems object-oriented design doesn't, but it might make the code written to solve the problem cleaner, or faster to write.
Currying is an inherent property of the lambda calculus, the computational model that functional programming implements, so I wouldn't describe it like that. All functions in the lambda calculus are functions of one argument - because it doesn't matter; a function of two arguments is precisely the same as a function of one argument that produces a function of one argument. We use function composition in JavaScript! Assume we have a string. We want to lowercase the consonants, uppercase every 'Y', and ROT13 it. Compare the JS and Haskell code: const myFunc = input =&gt; input.map(char =&gt; char.lowerCons().upperYs().rot13()) myFunc("My String") // zL fgevat myFunc = fmap (rot13 . upperYs . lowerCons) myFunc "My String" -- zL fgevat They're practically the same, except the order of the functions is reversed. And in Haskell we can and do drop the argument altogether ("eta reduction"). 
There are plenty of benefits of functional programming compared to more imperative, object-oriented programming. For one, pure functions are much, much easier to debug than impure functions because they do not have side effects. You can always be sure that a pure function will always do the same thing no matter how many times you call them. They're independent of whatever 'state' the program is in, i.e. the value of any variables outside the function. This also makes these functions much easier to test, and allows you to perform easy, free parallelism, since these functions will never cause race conditions. Functional programming is also convenient in event-driven development paradigms since they allow functions to be first class objects - they're allowed to be passed around used as arguments for other functions. For example, providing a function as a parameter for an HTML 'onClick' event Functional programming is the driving design principal behind React, a popular front-end development library for JavaScript. It relies on the side-effect-free property of pure functions in order to re-render elements of the virtual DOM, without having to worry about how many times functions in a component are called. In React, all internal state (i.e. variables) associated with Components of a web application are modified in a controlled way, using the React.setState() function, which re-renders components using the new values of the state. This model relies on functions being as pure and stateless as possible. Hope that explanation made sense! Tried to give a general gist of why the functional is practical and becoming more popular.
Oh the partial application I was trying to highlight was in the `(+ 5)` not the map function. 
It depends on your purpose. Sure, you can do this *specific* example in CSS because it's very simple. Eventually you will run into too much complexity and SVG will be a better fit. It all depends on what your purpose is. The use case as I see it is `making static optical illusions`. SVG excels for this use case. CSS is designed for document presentation. This is what I mean when I say 'CSS isn't really designed to do stuff like this'. Stuff like this = making optical illusions.
Even then, you just have a different form of the concept of a callback function. How are the 2 concepts different and why is the partial application of `+` in haskall more useful than just writing `x =&gt; x + 5` in JavaScript besides saving a couple of characters?
If that doesn't work, it's possible you're using ProcessingJS which also uses rect() ellipse() and fill() You can try this link to the library: &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/processing.js/1.6.6/processing.js"&gt;&lt;/script&gt; 
It's just a bit more readable in my opinion. Here's another slightly more involved example. in Haskell: sum = foldl (+) 0 in JS: let sum = (list) =&gt; list.reduce((acc, x) =&gt; acc + x, 0);
Yeah, it looks like they did use that, either way p5.js and ProcessingJS both work for my needs, thank you very much!
So it's pretty useful for readability in Haskell. I'm not sure how that applies to functional programming as a whole.
HTML, CSS is a must, instead of going towards JS, first conquer html and css.
&gt; A pattern that was developed to compensate for the shortcomings of really old languages that only supported a single parameter per function. Now used out of habit and not actually supported by JS. When people speak of currying in JS they really just mean using closures. This is incorrect. Currying is the process of transforming nAry functions to a function which returns a unary function until all parameters have been supplied to complete the calculation. This is useful especially in cases such as map or filter, where it is very common to have the transducer or predicate function argument at compile time, but not the data to be transformed or filtered. In this scenario and many others, currying is an invaluable and useful technique that is entirely unrelated to the concept of closures.
Likewise, whatever reason you had to bring up Brexit and downvote people having a real conversation.
Thanks for your insight. Are people still using global variables though? I thought that was ancient stuff. I know Wordpress still uses them a lot, but that’s hardly an example of a good code base. I’m a pretty big fan of OOP because at its heart it already solves these problems. I don’t know, just reading about what “functional programming” is supposed to mean just sounds like using best practices that have been around forever, yet it seems to be a “buzz phrase”. It’s late here, but I’ll read more about this tomorrow. Cheers
I agree with this BUT, with the advent of typescript, es6+, and UI Frameworks I think new devs have a lot more to learn than we did starting out. modern sites require so much now(well if you discount the browser compat nightmares and fun work arounds in javascript and CSS). just take es6 functions as one small example. Map(), Some(), First(), Find(), Filter() just off the time of my head. Then take the whole OOP design of ES6. In the CSS world you have a whole skew of animation declarations and properties, CSS Grid, and FlexBox. In HTML its HTML 5 and a huge number of API's along with SVG and Canvas. You have to Understand concepts like Mobile First/Responsive design, various design patterns like the observer, factory, and singleton. The browser itself has a whole skew of features that didn't use to exist(though its also lost some anyone remember VRML/X3D IT WAS THE FUTURE!) Its a weird world right now where its almost better to learn a UI Framework and start from there instead of just the core skills because the core skills have expanded so dramatically. While you can build a page with the fundamentals building a modern page requires SO much more. I've actually struggled with this when building a team. When I look at resumes (we mainly work with angular/reactjs) we look for those items on the resume. Every resume lists css/javascript/html but if you don't have a framework on your resume your not getting an interview. We get a number of developers with 10 years experience but in the interview you ask them what unidirectional flow or what the observer pattern is and you get a bewildered stare. From a business standpoint I prefer someone who has done the tour of heroes tutorial rather than focused on the fundamentals.
Instead of running shell files you could combine it with https://github.com/TalAter/annyang with the trigger api :)
Appreciate your feedback. I can’t think of a situation I’ve been in where race conditions were an issue, or calling a function/method would return a different result based on the arguments passed to it. Perhaps I haven’t worked on large enough projects....
does it check dependencies? If c depends on b, it's going to break code.
That requires Chrome or another browser. NodeJS doesn't include the SpeechRecognition class. I'm currently working on testing [mic-to-speech](https://www.npmjs.com/package/mic-to-speech), but it still requires a speech to text engine, such as pocketsphinx. I was also considering publishing an npm module wrapper on top of pocketsphinx to make installation easier.
Really amazing what you are trying to build. One thing I noticed on the website is that we can't search based on a tag, like React or any JavaScript package name or Vanilla JS. Maybe it's in the pipeline. All the best! If possible could you share a detailed post on Medium about your tech stack and the reason behind choosing a technology. Maybe tag me if you do. Thanks. 
Agree but you don’t have to know everything about it at start. You should be able to build simple pages with HTML and CSS and know its possibilities. That will let you find rest informations on the web.
Might be worth considering using SVG for this - you can eliminate the scaling problems and get the animation for free with CSS .. https://www.ottaky.com/star/ (Uses JavaScript to create the polygons, but you could hard code them if you wanted to)
RxJS (esswntially a set of combinators) forcing into OOP? What are you smoking 😂😂😂
Following up, a few people have said "don't use jQuery, learn the fundamentals". I've really only used jQuery for things like the animation where the cards disappear and the calculations/values appear. Would you really have me create opacity animations for the different platforms from scratch, then test them in 20 different browsers? I mean, yes, I used it to pump HTML into a div and to update the points for the user, but I certainly could have done that the vanilla-js way. It's just easier to use `$('#elementid').html('foo')` than the `getElementById()` version.
If I see this somewhere in a project I'd expect it to be returning a bool value, which might be a little bit confusing if you want a shorter syntax you can write it like this function setStatus(id, msg) { $('footer .status').find('span[data-id="'+id+'"]') ? $('footer .status').find('span[data-id="'+id+'"]').html(msg) : $('footer .status').append('&lt;span data-id="'+id+'"&gt;'+msg+'&lt;/span&gt;') } if you use completely ES6 syntax const setStatus = (id, msg) =&gt; { $('footer .status').find($(`span[data-id=${id}]`)) ? $('footer .status').find(`span[data-id=${id}]`).html(msg) : $('footer .status').append(`&lt;span data-id=${id}&gt;${msg}&lt;/span&gt;`) } now its easily readable u can read up on string interpolation (ES6) vs string concatenation (ES5)
&gt; if(element.length &gt; 0) because jQuery 
&gt; Maps are, in general Just as an example in C++: http://www.cplusplus.com/reference/map/map/ &gt; Maps are associative containers that store elements formed by a combination of a key value and a mapped value, following a specific order. Which is why there is also the unordered_map class. 
I find that an unreadable mess. First of all, cache your nodes e.g. `$footerStatus = $('footer .status')` function setStatus(id, msg) { const $footerStatus = $('footer .status'); if ($footerStatus.length === 0) return; const $statusMessageContainer = $footerStatus.find(`span[data-id="${id}"]`); if ($statusMessageContainer.length === 0) { $footerStatus.append(`&lt;span data-id="${id}"&gt;${msg}&lt;/span&gt;`); } else { $statusMessageContainer.html(msg); } } I only use || for flow control for default values `var a = 1 || aDefaultVar;` otherwise a || buried in the middle of a long line of code is very hard to spot
Can you show me an example? 
Javascript:fetch(".json").then(i=&gt;i.json()).then(r=&gt;alert(r[0].data.children[0].data.title)); Simplicity of this as bookmarklet on Reddit
The explanation about clojures I'm afraid is actually wrong. In no particular order: * Closures aren't necessarily "functions inside functions", they are functions that retain the lexical environment in which they were declared. That environment doesn't necessarily need to be a function. For instance, a function bound to an object will function as a closure of that object, and can access it via the `this` variable. * The engine does not destroy the context of a function when it stops running if it has referred variables in that context which are still referred elsewhere. It specifically does *not* garbage collect those variables and that context. That's why it remembers the value of those variables, not in spite of it. It's important to know these things because closures in JavaScript can be the source of many headaches: * [Clojures can cause memory leaks](http://point.davidglasser.net/2013/06/27/surprising-javascript-memory-leak.html), which are bugs caused by programmers who are using closures without being careful to delete references to outside variables when the function exits. In general, this is not an issue because the culprit variable is short-lived and/or small. But sometimes it is long-lived (global, or referred by long-running functions, or referred by frequent, multiple, overlapping functions, such as those that you might define in a loop, hint, hint, slap on the wrist) *and* large (such as contents read from a file, or buffer etc.). Bottom line, one way or another they manage to stick around in memory being referred forever, and add up. * Another issue is that, since JavaScript doesn't support immutable variables (`const` is a half-hearted attempt), it's very easy to make closures impure (in the functional sense). They can modify external variables and this introduce side-effects. Or they can base their output on external variables whose values can change at any moment, so the output of the function becomes basically unpredictable when it's not based exclusively on its parameters.
Lads - it's EmberJS...
Both, but particularly the one with the || Too much selectors noise for my taste, YMMV, I like to separate the 'that's how you find that node' part and the 'that's what you do with that node'
Can you recommend any sources for learning functional programming in JS that don’t have the issues you’ve (very helpfully) pointed out above?
They are different approaches to solving problems. You should pick the appropriate one depending on the problem. I'll give you some examples from the real world: * When you're baking a cake you use a recipe. It involves specific ingredients, in certain quantities, and a precise succession of steps, in order to result in the cake. This is similar to variables and instructions in imperative programming. * When you are looking at a clock mechanism, or a bycicle, you are analyzing it in terms of smaller interconnected pieces. This is similar to OOP. Unlike imperative programming, it doesn't have a beginning and an end, you can rotate a piece here and several others will move over there. * When you order food at a restaurant, you're using higher-order concepts and knowledge (about food, wine, how restaurants work etc.) to delegate the process of preparing and delivering the food to an already existing, experienced mechanism (the restaurant staff). This is similar to declarative programming, such as SQL. * Last but not least, functional programming is math. Whenever you need to work with numbers and map one value domain to another, you will use mathematical functions. You can arrange data in a computer's memory to resemble any of the above scenarios. Which one makes the most sense (most intuitive, most performant, most light on resources, easiest to maintain etc.) is up to you. 
Yeah, Do you have any thoughts / preconceptions / etc about it?
Microsoft is not progressive you scumbag. You are a lying retard. How the fuck could you know so little about the military industrial worshipping company you choose to work for every day day after day without ever making a better choice, you continue to be scum? How could you know so little? Are you fucking retarded? MICROSOFT IS NOT PROGRESSIVE YOU STUPID DIPSHIT
&gt; While I was in university I wrote an app that calculates how much you get paid to poop. How is that in any way political lmao Being allowed to produce anything of worth is entirely a political act. Many people in the world starve to death for that act.
What?
I think that it depends on the environment and these isn't really one right way. `./` is used to distinguish local file imports from npm dependencies. Just `/` might work in some environment and this would mean absolute path to the file. Also you should be able to omit `.js` here.
If you put the entire thing in an iife it produces the same result 
Anything to back this up? I'm not seeing it but I used to see the dots (maybe a year or so since I saw the illusion last). I was planning on seeing a neuro opthalmologist because of some other symptoms (reflex syncope, VS, floaters, pulsatile tinnitus, etc)
Well it's a nich platform, so if people are not interested I have saved them a click :-) 
why is it niche? ember has solved the 95%+ case for webapps. :-\ fwiw, I've also been doing react professionally the past 2.5 years.
It's also a modern approach to building an SPA using native, modern JS...
and / or typescript! :)
I didn’t think I would have had to clarify this, but I made it in my spare time. Weirdly enough good universities don’t assign people coursework to write poop apps, computer science tends to be more maths and programming rather than poo. Crazy, I know. &gt; Most people every day go into a factory and work for 12 grueling hours building things. No they don’t. Factory jobs are heavily unionised and nobody is working 12 hour days. &gt; If they make an error at any point on any day, they get fired It’s almost impossible to fire them. &gt; and there are almost no other jobs for them to go find. Actually there are lots of jobs out there. Most just require an education. 
Upcoming EU laws, for short "Copyright Directive". With few hilarious articles in it. [https://blog.github.com/2018-08-24-EU-copyright-action/](https://blog.github.com/2018-08-24-EU-copyright-action/) [https://blog.github.com/2018-03-14-eu-proposal-upload-filters-code/](https://blog.github.com/2018-03-14-eu-proposal-upload-filters-code/) 
Omitting .js is not recommended, as it is needlessly implicit - in a Node.js environment, it could mean .js, .mjs, .json or even `my-module/index.js`. If you specify `.js`, Node.js won't have to poll the file system a number of times first. In a browser environment, `.js` is nescessary unless your file exists as `my-module` without an extension.
thanks! sorry, don't know any canvas-specific communities. have you tried any game dev communities? they won't be 100% dedicated to canvas, but most games are canvas-based.
tl;dr - Each request is doubled due to the additional OPTIONS request.
Since you're already making calls to Mailgun, you could add calls to something like AWS S3 to read/write state (if the API key and path environment vars are provided) to let you persist state across restarts.
True that! You could also connect to mongo(or any other db) instance to store the state, to make it scalable. 
There's a youtube channel called fun fun function, worth checking out for sure
While I do -somewhat- agree that the explanation is _not very correct_, I think there are various degrees of wrongness, which is why I decided to focus on the confusing part of the explanation and concede a bit of _benefit of the doubt_. Hey, I'm not completely sure I would even _mention_ closures in an FP introduction. But, well, that's a different matter. In any case, I do not agree with your explanation either. And I most certainly would _not_ include in an "introduction to FP" an explanation about how closures _could_ cause memory leaks. I think that is _way beyond_ explaining the basic concepts, which is the focus of the original writing.
Get help
You're the one who works for Microsoft, you scumfuck. Did you ever even bother to think twice before you went to work for the military industrial complex? Why do all of you genocidal warmongerers pretend to be concerned about mental health? Get yourself checked out for whatever led to you working where you work at you fucking garbage
Yes, I have thought twice about that. It's why I no longer work on F/A-18
Do browser environments even have support for es6 or do you have to transpile it first?
So you freely admit to working in the military industrial complex before you thought twice about it? Do you even know how English works? And you now work at Microsoft, which is part of the same problem. God, you people are fucking retarded. You've changed literally nothing except for which military industrial complex corp your paycheck comes from, dipshit. You're also actively part of an violent online mob attacking a developer of an open source project, and that makes you even worse villainous scum, on top of your self-described disgusting history of abuse. Everything you are doing is being carefully documented. If you google search your own name evidence of your actions in this incident are the results. Congratulations. Here's a question for you, how does ICE's semen taste as it runs down your throat?
Spoiler: it's not.
Frontend development at Google sounds like a nightmare 
Lmao
Just set the max age header properly. 
Sounds like a fun way to spend a Sunday afternoon, thanks!
I'm not familiar with async/await yet. Thank you for advice
If I have two similar candidates and one of them has followed up and engaged me in an active conversation I will, even unconsciously, lean towards that candidate. 
Trendy bloat frameworks and toolchains people are zealots about and loose sight of practical goals. So. Probably the same:). I’m enjoying vue.js for front end. Node is still node. And electron has progressed for making bloated but easy to create native apps such as slack. 
Can't go wrong with a todo list
BUT, it’s only if you don’t set your CORS headers correctly
I use currying in Javascript all the time. It's pretty common, for example in [Redux middleware](https://redux.js.org/advanced/middleware)
It is a energy meter monitoring system. Arduino sends meter reading through GET request. https://github.com/paurakhsharma/Smart-energy-meter
Your mom
Hmm, so higher order functions act as the f(x), as seen in the statements in OP's writing for this post? Forgive me if I get the variables wrong. I guess this in part is why I didn't do too well in algebra in school.
/u/DuckDesk I've done some front-end work at Google as a software engineer and I wouldn't say it's a nightmare, but it's definitely not pleasant either :) Using Closure Compiler for type-checking even on a mid-sized project can easily take 40 seconds and there's no incremental compilation so everytime you change one file, it's another 40 seconds for type-checking. Certainly, it slows you down and using Typescript for projects at home is such a breeze in comparison (I haven't had the chance to use Typescript at work). That said, there are some good things about front-end at Google. It's remarkably consistent across a very large codebase according to the style guide (auto-formatting thanks to clang-format helps a lot) and there's a lot of robust libraries that Google's built (e.g. [https://github.com/google/closure-library](https://github.com/google/closure-library)). I definitely agree with the author that Javascript / web dev @ google feels like an alternate universe, and it's great to see people like him trying to bridge the gap.
for real though, do you have something against people who use ember? (I notice you keep editing your comment) :-\\
As an ember early adopter that has lost interest in the past couple of years, the recent developments have definitely made me want give it a second look.
This is next level Ember, I love it.
I wonder how Angular fits in this?
It's a bitch. It really makes you think about levels of coupling between things and why frameworks (react/redux, etc) developed State. Hopefully you're using es6 at least so you have classes which can store their own state, then it's a matter of making the class objects talk to each other in a parent class as necessary 
Depending on the browser, the CORS responses are cached (iirc Chrome is around 2 minutes and I think Firefox respects whatever is set in the response headers, can't remember the other major browser's behaviors) so it's only a few extra milliseconds every x minutes. Not something to make a big fuss over in a lot of cases. 
Ok, thank you, yeah, probably still the same then, I was wondering if maybe with time some standards or consensus had emerged. Yeah vue.js looked really cool, and I don't think I remember about electron, I will check it. How about the state of ECMAScript, is learning in ES5 still useful, or is everything now using ES6?
That is total bullshit. [https://www.madewithangular.com/categories/google](https://www.madewithangular.com/categories/google)
From what I understand (and I never used it so take it with a grain of salt), as long as you build the forms on their website, you're good to go. But if you plan on building a complete tool embedding the builder, I guess it's considered commercial use, even though you make no money out of it. Commercial use, from experience, means "in use in a commercial setting, e.g. a company", not necessarily "used to make money". Could you perhaps contact them, to get a clearer answer? 
Yeah that's good. But I am wondering if there are any disadvantage other than readability by not caching the Dom. I mean like speed issues etc?.
it's pretty much a necessity to know both right now and how to translate between them. some libs or examples will be in one or the other.
mmmm, ok, thank you. I wish I could stay in ES5, I'm sure ES6 has great features and syntax, but I've been learning a lot in ES5 (I mean that in programming generally, the most understanding and progress was made learning ES5), so it might be a bit hard at first to switch to new ways of doing while still in the same language, but I guess it's just a matter of habit. If you say both are necessary, maybe I'll keep learning in ES5 first, and when I feel more assured see what's up with 6. 
Spoiler: it is if said site lives on the same domain. Only cross domain requires cors.
It won't take long to learn the [main new features of ES6](https://github.com/DrkSephy/es6-cheatsheet) and they will make your life easier. I'd say you can learn both at the same time.
You can at least use [immer](https://github.com/mweststrate/immer) in combination with redux to skip writing out nested reducers. What remains are action types and action creators, but they belong to reduxes core principles, if you don't like these i wouldn't bother with redux to begin with. If you don't want powerful middleware, you could use react 16's context for state. I've made myself a little wrap that pretty apes some of reduxes ideas to get me by, also driven by immer: https://github.com/drcmda/immer-wieder
Spoiler: no, it does not mean that the problem is unique to SPAs, normal websites with JS observe the same "issue".
React-Redux's use of context is an implementation detail as far as the public API is concerned. That said, we are working on rewriting `connect` to use `React.createContext()` internally. We've got a couple potential reimplementations we're comparing, and currently trying to investigate performance behavior of both of them to make sure things don't get slower than the current v5. The changes will eventually become v6. See the [React-Redux roadmap issue](https://github.com/reduxjs/react-redux/issues/950) I posted a few months back for discussion and links to the various tasks.
I will be learning about ember in my web development class later this semester. I will check out the discord!
1. you can have a different config for prod, which does not have publicPath set to `/dist` 2. you can use the `window.__webpack_public_path__` variable to control this at run time
What do you about using something like mobX in vanilla js?Thnx.
woo!
Dunno, haven't touched mobx. If you're trying to get state, just go for it and do react / redux or vue to or Angular etc.
Yeah but applying that state in the DOM without a framework is the hard part
just a suggestion, I think there should not be tool-tip shown when I hover my mouse over the card.
The boilerplate has never bothered it's the best practices that seem hard for people to follow. What I'd like linter that could point out duplicate or redundant state, opportunities for reselector or normalisation. It would be hard to build but maybe that's because doing Redux well at scale is hard.
Spoiler: what’s this spoiler game about?
Frameworks like React and Vue make working with the DOM with libraries like redux or Mobx fairly transparent, but it’s not especially hard to do DOM manipulation without them.
haha thanks
The current internal suggestion is refactor to typescript, then migrate to angular. Some PAs (cloud) are pushing that more heavily than others.
I'm really not sure what to do here. I added this to to my code: process.env.NODE_ENV = 'development'; const devMode = process.env.NODE_ENV === 'development'; module.exports { //....above stuff publicPath: devMode ? '/dist' : '' What I THOUGHT would happen is if it's in development mode, the publicPath will be **/dist**, but in other modes (like production), publicpath will be blank. Unfortunately, that didn't work, it always goes to **/dist** no matter what. 
The definition of niche: &gt;denoting or relating to products, services, or interests that appeal to a small, specialized section of the population. &amp;#x200B; Yes, Ember has a smaller user base, but it's goal is to appeal to as many people as possible by trying to closely align with modern, vanilla JS - so I'm not sure your use of niche is technically correct... ;) &amp;#x200B;
The comment was sort of joke, since "Perfect" isin the eye of the beholder. 😊
Including the music?
This might be a dumb question, but what other request types are there? 
Game is beautiful
Nah too big of a file to add
Once upon a time yes, I think these days JQuery meomizes selectors internally but to be honest I haven't been paying attention, I have stopped using it years ago
&gt; process.env.NODE_ENV = 'development'; &gt; const devMode = process.env.NODE_ENV === 'development'; Well if you really added process.env.NODE_ENV = 'development'; to the file, it will assign the value when the file is parsed. You should remove the line, and then change your package.json scripts (assuming you're using an unix-like system) to: "scripts": { "develop": "NODE_ENV=development your-start-command", "build": "NODE_ENV=production your-build-command" } 
Use `let` to declare a value that can change, e.g. `let clickCount = 0;` Then, when something happens that changes the state (in this case, when the user clicks something), increment the variable like so `clickCount++;` You can reference `clickCount` directly in your code for to read it also.
Yo. Great visual. The kite looks like a sperm though. And the dots things look like eggs. .....intentional?
Nope, unfortunately music will not fit within 13kb. I am considering programming some soft synths / pads and "rustling grass" sounds but I'm not sure I'll be able to reach the fidelity I'm hoping for in 13kb. So the 13kb version will probably end up being a 'bring your own music' game. :) 
Technically state is just a global object. What beyond that do you mean?
The reason I never like tutorials or explanations like this is because they're always too simplistic and never show any real world code so it's hard to see its usefulness. It's the same when I try to get into unit testing, I find things like test that 2 + 2 equals 4.....ok.... Can I have a real world complex react component or something that actually shows the merit of this?
If I put NODE_ENV into my package.json scripts, I get errors. How can I use the **window.__webpack_public_path__** variable?
It's not "hard" to do DOM manipulation. It *is* hard to do it in a scalable and maintainable way
Looks very cool
This is fantastic! Can't be understated how fantastic it is that google is putting their resources behind an already widely adopted tool. 
Really great!
Fair
That’s really cool! Do you use a library to paint the canvas or just write a little engine? 
All just Canvas2D and my own engine. I'm also using some code from "simplex-noise" and "gl-matrix" modules, but only taking the bits I need and refactoring it to compress better.
Cool thanks for the info. Never done games in JS. Looks like fun! 
Functional programming 
One solution is to put your api as a sub resource. some-spa.com talking to some-spa.com/api
Use the split method to generate an array of key value pairs and then again to separate the key from the value. You might wanna check the map function too. Also, check [this](https://stackoverflow.com/questions/2274242/how-to-use-a-variable-for-a-key-in-a-javascript-object-literal) too, you might find it useful for when you want to use a variable as a key name. [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\_Objects/String/split](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\_Objects/Array/map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
I'm not even sure what point you're arguing anymore
`var data = {}; var string = 'value1^key1,value2^key2'; var arr1 = string.split(','); for(var i = 0; i &lt; arr1.length; i++){ var arr2 = arr1[i].split('^'); if(!data.hasOwnProperty(arr2[1])) data[arr2[1]] = arr2[0]; }`
That's mutation and is inherently non-scalable.
What if you anchored the string to the center(x) of the kite rather than the tail and/or have it pulling the kite? Your current design kind of resembles a fish in water(which would be cool conceptually too!). This is beautiful as is, just thought I’d give a suggestion!
Thanks for the feedback! Yes definitely I will make the string less stretchy. I am hoping to give the kite and string real physics so that touching the screen it will “lift off”, and the string dangles, flying around it will tail behind, and letting go of the screen will gently let the kite fall to the grass (and push aside flowers). But let’s see what I can do in my remaining KBs... :) 
Thanks for the link, prof frisbee is a good read
Might want to sharpen up your reading comprehension skills, then, because it’s really not that hard to follow. OP’s question was how to manage state with vanilla JS. Redux is one way that he could do that. The difficulty of developing a complex web app has nothing to do with it.
Thanks! I agree. The concept is still evolving. I’m brainstorming ideas like “achievements” that you unlock as you discover more of the world (eg: unlocking color schemes like triadic, complementary or unlocking new worlds like windy/grassy/mountainous worlds, or quirky things like empty worlds). Another option is to give the game an end state that you work toward (ie: like Journey) but since everything is generative/procedural I’d love to find a way to not weave in a linear story. I’m also open to other ideas. :)
Someone's already given code that will handle it, in many cases. (Heaven forbid you need a comma or carat.) Instead, you should just not create the string like this in the first place. Instead, turn the array or object into JSON, then transfer it to your client, then parse the JSON back into an array or object.
Thank you! I'll be giving it a try later on!
“State” is just the condition that *something* is in at any given time. The question is, how do you keep track of the state of some thing or things within your app using vanilla JavaScript. It could refer to the state of an entire application, and you *could* keep track of that state in a global object, but that’s not what state *is*. 
Variables.
What does vanilla mean to you? Are you rolling everything yourself? A couple decent patterns are: * pub/sub * flux * observables
You don't *need* them, but that doesn't mean it isn't a good idea at least some of the time.
Using variables is non-scalable? I like immutability as much as the next guy, but man...
Using closures randomly? Yes. Encapsulate it in a state object and transition it immutably.
Well done.
It's only getting better! The ember core team is working closely with TC39 to make sure Ember is only an architectural layer on top of the native language :) (but also, I added typescript :) )
Tip: if you're hosting this on Github, when you release it you can put two separate files into the one release, one ZIP with the game and one ZIP with the music. That way they can install the music if they would like, but it still falls under 13kb and the user doesn't have to 'bring their own music' Hope this helps!
Thank you. That was just to make it easier to debug and would be taken out in real life use. 
A more idiotmatic version of /u/qolf1 's snippet: const input = 'value1^key1,value2^key2,value3^key3'; const output = input.split(',').reduce((data, pair) =&gt; { const [value, key] = pair.split('^'); data[key] = value; return data; }, {}); console.log(output);
Beautiful
Mind if I ask where you got your experience to code stuff like this? I'm considering to jump into game development too and I would like to know if you can recommend any books/tutorials for that :)
It doesn’t matter. “Just use JSON instead” is the answer to literally every data formatting problem. /s.
Managing state is more than just the state manager itself. Apps generally don't exist as a state on its own; you need to *do something* with that state. What do you usually do? Update the DOM in some way based on it. This is arguably a **much** bigger problem to solve around state management than managing the state itself, and I gathered that this was actually what OP was asking
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/16UpNt8.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) 
Or you know, a certain other game by the same company involving wind and flowers...
I hadn't actually heard of it before your comment, but for anyone wondering, they're talking about [Flower](http://thatgamecompany.com/flower)
What is the reasoning in the interpretation that mutation is not scalable? Are there any articles about that? It is a genuine question, because I have found, in practice, mutation scales just fine, so long as you handle your asynchronous parts well.
Yeah, I didn't mean that state isn't a difficult problem in general, just that in the context of Javascript, there's a ton of good solutions (like your first comment says). I would hope someone asking OP's question would easily be able to discover Redux from a simple google search. What's not easy to discover, though, is how to use Redux if you're using plain ol' vanilla js
Yes but I need a way to change all the object sizes. Without using hardcore values. All my systems don't always work.
I absolutely love the js demo scene type stuff. dwitter.com is great. Wish I was skilled enough in js to contribute. One day
Plus, music is copyrighted...
A lot of music/sound effects aren't
I’ve been following you for a while on Twitter, I loved seeing your progression on this. :) Keep sharing your work! 
GitHunt is a react application that you can [use online](http://kamranahmed.info/githunt) or [install it as a Chrome extension](https://chrome.google.com/webstore/detail/githunt/khpcnaokfebphakjgdgpinmglconplhp) that replaces your new tab with the application and shows you the most starred projects on GitHub created during any selected period. * Each "trending project" is a project created during the selected period and most famous (starred) among the other projects created during the same period, making it different from Github trending page that considers the most starred project in the given period, allowing to bring up the projects that might not be able to hit the trending page on GitHub but were famous enough among the projects created during any period * You can filter projects by language * Check the most starred projects in past years, months, weeks or days * Choices are saved and presented to you on your next visit The recent update has some major improvements over the existing version. Here is the overview * Rewritten in React - Dropped jQuery * Redesigned with better interface * Filterable languages list * Can be used without installing * List and Grid Options * Remembers the selected options
Depending on your views of when to use `var` this is potentially valid usage. Using `let` may force you to use C style variable declarations at the start of a function, and if that's what you want, then great, otherwise use `var`. I don't think `var` is depreciated, just fallen out of popular usage.
Yes but this is an actual song. I've heard it before. I'm guessing Philip Glass
 This project is appreciated highly on many resources, the potential is big.
What "this"? There was no specific music mentioned, was there? Are you high again Billy?
&gt; I can't for the life of me come up with a good reason to disallow the first If the code is encouraging a bad habit, like this is, then it's perfectly fine to reject it in a review -- especially if the fix is simple. It's valid in javascript and not likely to change, since var has function level scope (only let has block level scope), but in other languages, it would definitely be a compiler or runtime error -- or an outright crash. Developing good habits (and codifying them into your org's coding standards) that work cross-language is always a good thing. 
str.split(', ').map((pair) =&gt; ({ [pair.split('^')[1]]: pair.split('^')[0] }))
Even if you choose to use var, I'd still have it declared before the loop like the let example. In this specific case the issue isn't about var vs let, but clarity of intent. Whichever you use, there's a certain obfuscation to the logic when the variable is declared/initialized within the loop but not constrained to the context of the loop. Setting it beforehand corrects for that. Following that, it's both matter of defaulting to let for convention, and also that using let outside of the loop actually conveys meaning. Since there's a distinction in scope based on whether it's in the loop or not, seeing it outside the loop tells you that it's outside the loop for a reason. 
Classes are just syntactic sugar over constructor functions, whether they are a good idea or not depends on the programmer (most likely what he/she is familiar to).
For me it's about readability: After only glancing your second example I understand that there is a new veriable called x.
You also could try to change all `^` to `:` and use `JSON.parse(string);` but that would be a more dirty approach.
Does this work in IE 11?
OMG, this is beautyyyy
You are facing issue because this keyword does not work the way you think in arrow functions. There is no implicit binding of this and this is based on the context where are arrow functions are defined. If you use normal function the code works fine. [https://stackoverflow.com/questions/28371982/what-does-this-refer-to-in-arrow-functions-in-es6](https://stackoverflow.com/questions/28371982/what-does-this-refer-to-in-arrow-functions-in-es6)
https://kangax.github.io/compat-table/es5/#test-Array.prototype.reduce
More at https://github.com/dubzzz/fast-check/blob/master/documentation/Tips.md#model-based-testing-or-ui-test
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [dubzzz/fast-check/.../**Tips.md#model-based-testing-or-ui-test** (master → 7c12e8f)](https://github.com/dubzzz/fast-check/blob/7c12e8f201a6b6e70f75ad5a42028d880a8e59ee/documentation/Tips.md#model-based-testing-or-ui-test) ---- 
There's no need to think of es5 and es6 as different things to learn. If you want to ignore some nice modern language features that's up to you, but they're not different languages. Just use const instead of var (and maybe even understand the difference too) and you're good to go.
[@mattdesl's latest tweet](https://i.imgur.com/Vfo7TDG.jpg) [@mattdesl on Twitter](https://twitter.com/mattdesl) - ^I ^am ^a ^bot ^| ^[feedback](https://www.reddit.com/message/compose/?to=twinkiac)
Looks like sperm
Why does he expect algebraic properties to apply to non-numbers? Why does he expect a finite number type to support an arbitrarily large number? Why does he keep taking == to mean “equal” about a decade after everyone knows == does not mean “equal”?
It should be written like this: &amp;#x200B; `(window.cfg.render = window[CFG].render || []).push('onload');` &amp;#x200B; So this is clear that bracket notation is for using string varable (`CFG`) as object property name.
Right. But its not _any_ website that uses Ajax. But you are right at PWA or SPA does not change anything. 
Strongly typed programming languages are great in my opinion, but general problem is that those languages are mostly C++, Java and those languages have a lot of boilerplate code and basic setup before you get to the fun part of the project. With weakly typed languages, which are mostly script languages, you see results fast, but in the long run, code could get really messy, there is no compile time error checking, etc. Strongly typed languages are used in huge companies, with a lot of legacy code, that've been written like 10 years ago. On the other hand, startups would like to get to MVP asap so they could raise some money and continue to build on that.
I don't "want to ignore some nice modern language features", all I'm saying is I'm still in the learning phase and it might be confusing for me to make changes in what I've learnt so far. There are things in ES5 that become different in ES6, aren't they? Or is it just an addition of new features?
ok thanks
That line is basically the same as: var CFG = "cfg"; if (!window.cfg.render) { window.cfg.render = []; } window.cfg.render.push('onload'); I'm not sure why it uses `'cfg'` as a string in one place, but the variable `CFG` in the other; likely a mistake. It's essentially saying: if `window.cfg.render` exists, I will assume it is an array and push `'onload'` onto it. If it doesn't exist, I will set it to a new array, and push `'onload'` onto it. If `window.cfg` is `undefined` this will throw a wobbly. If `window.cfg.render` exists, and is not an array, this will throw a wobbly. If not, the end result is that `window.cfg.render` is an array, with the last element being `'onload'`.
I prefer typing in a language, and the stronger the better. Explicit typecasting is tedious, sure, but implicit type conversion without the developer explicitly coding checks is the source of so many bugs that the effort spent to do things right in either system is about the same.
It is not a 'modern approach to SPA building' it is an EmberJS ad. Doesn't necessarily mean EmberJS is not modern. Just saying this is not an 'approach'. The title is very misdirectional
My opinion is you shouldn't use terms as "weak typing" and "strong typing" without first explaining what you mean, because [they don't really have a universally agreed meaning](https://en.wikipedia.org/wiki/Type_system#Strong_and_weak_type_systems). [Additional link; interesting read.](http://blogs.perl.org/users/ovid/2010/08/what-to-know-before-debating-type-systems.html).
We're likely missing the rest of the code that can redefine CFG to be a different value. Perhaps the library lets the user configure the name of the configuration, perhaps allowing multiple configurations. If so, it's sloppy to then throw that into a global config before using it, instead of just using the selected config internally for the library. But I'm sure they had what they thought were good reasons at the time.
Likely, yes... but the problem I was pointing out was the usage of both a string and a variable to address the same object in the a single line. That's just wrong. It should be (window['cfg']['render'] = window['cfg']['render'] || []).push('onload'); or (window[CFG]['render'] = window[CFG]['render'] || []).push('onload'); but in the former, there's no need to use array-like indexing anyway (as you know the names of the properties at design time) and it should be: (window.cfg.render = window.cfg.render || []).push('onload');
You're right, sorry. Edited the post. 
Sorry, you're right, it was a mistake from moving the code around. Edited the post. Thanks for the explanation. 
I use the Observer pattern.
Variables are not managed. They don't trigger updates on changes, etc. State management can only be done with variables if you proxy them.
Go also does a good Job of avoiding too much boilerplate. 
IDK, approach can be pretty broad. Like, you're typical react dev will do things differently and have their own approach to solving problems.
The comment just seemed unfairly critical / bitter, imo
But yeah, I'm trying to get people to check out ember :) Technically an ad - using my own experiences, and my own side project in the screenshots
As I said, they're probably taking an instance-specific config and making it the global config. Which is obviously sloppy.
Honestly, something like redux is already far more basic than what you're going for here. State is the single most important aspect of the application and the hardest to get right, if there's any place to use a well-established and tested lib it's for state. Doing this with a OO monstrosity with setter/getters and event subscriptions will work, but it'll grow, demands will increase, you'll want to log, send error reports to a remote, etc. Like with all libs, in the end you write a bad one yourself with little to no benefit for you or others. 
Es6 and up, modules are common now, script tags and iife's are rare to find. Webpack is still the main build tool, Parcel is up and coming but far from reaching Webpacks status, React has pretty much ended the frameworks war, and if you need a framework today use React no questions asked. There are still others, but they're flatlining or cater to niches. Vue is successful but only in a very limited market for people that like older approaches: DI, OOP, controllers, mutation, mixing pseudo-code into html. Typescript has established itself, flow is still there but doesn't reach it and probably won't. 
Tbf I'd conceded that there were a number of issues I hadn't originally considered around my OP. I'm an Allman guy when it comes to braces and I have genuine difficulty reading K&amp;B style code, I think it's deeply unfair to lay that at the door of stubborness or not being a team player, rather than a real issue. It strikes me as being a bit of a tyranny of the majority, if you can just hit the fat middle of the bell curve then you've got enough backing to enforce a one true style on everyone and can dismiss any criticism out of hand. I'm fortunate enough to work somewhere that hasn't felt the need to dictate a code style and while it means some other peoples code may be hard to grok, everyone is happy where they spend most time. I guess I'm not convinced of the arguments that an enforced style is gaining you anything. 
Nice. Good job. Love it. Made my life much easier. Thanks 
Awesome! I was just looking for something like that 2 days ago! I add it to my toolbox, next to [regex101.com](https://regex101.com) Thank you!
Thanks! Sorry, I should have introduced myself properly - it's our company account for both myself (Holly Jones) and my colleague (Ola Denslaw) :)
https://lodash.com/docs#isEqual
Not everything, but mostly. I would start with VSC, and if there are specific features that aren't available, look into Webstorm. 
Really cool tool. It should end up saving a lot of time for me. Thank you!
Looks useful!
Sure is, in plain JS. * check if lengths are equal * for each element in array1, check if it exists in array2. Any false comparisons mean the arrays aren't equal. Best case is O(N^2) without sorting. Sort, and you can bring it down to O(N lg N), and if you can guarantee both arrays are already sorted, its O(N)
Is it? We can only consider information we have. Thus we cant change the order of these pairs.
Using for... in on an array simply lets you iterate on the "keys", that is the index for which a value is set.
Dot means current directory. Slash means root directory. I always use dots because I don't want root to be open to interpretation. In other languages or environments, root can be server or file system root. Dot always means the same thing.
What features are available in Webstorm that is not available in VSC?
It works on a surprisingly varied range of genres. Examples I enjoy: * Iron &amp; Wine – Such Great Heights * The Postal Service – Such Great Heights * Radiohead - Paranoid Android * Dan Deacon – When I Was Done Dying * Michael Jackson – Billie Jean * Animal Collective – Peacebone 
Sounds like originally it was passed objects (probably with a number index). They probably used `arr[arr.length] = handler;` rather than push. I would still check the forEach loop and check for length of `Object.keys()`
Yep, just found it. lol
I would pass on webstorm, VSC has everything you need baked right in. If anything there's features that WS doesn't have that VSC does.
I did agree. Your logic would validate that A, A, B equals A, B, B.
Modifying the default Array prototype could have been made in a less dirty way (not making it enumerable to start with). There are many other reason why you should not, as a more general rule, modify objects you don't own. For example what if two libs decide to make conflicting modifications ?
I just rewrote the lib to use defineProperty without enumerable. The other guy shall clean this up.
Is using a plain JavaScript filter an option? [Example](https://stackoverflow.com/questions/44459591/find-difference-between-two-arrays)
`typeof exports === 'object' &amp;&amp; typeof module !== 'undefined' ? (module.exports = lib) : (this.lib = lib)` This will export `lib` in a Common JS environment (Node), so you can do `const lib = require('lib');` or `import lib from 'lib'` (when using something like webpack). Outside Node it will add `lib` to `window` or whatever the global object is. Note that to export `lib` as an ES Module, you'll need an additional build `lib.min.esm.js` where you do `export default lib`, as once you use `import` or `export` to your script you won't be able to include it in your HTML etc. the normal, non-module way.
Yeah it’s Glassworks, first movement
This is the third or fourth time you've submitted this tweet to /r/javascript in the last few days. That seems awfully spammy.
Just trying to figure out what title get's the most interaction
Yeah I like it too. Going through it a second time this weekend. The Cardio days are my favorite. If we want to share solutions let me know and we can directly message each other. I'm doing cardio day 2 this morning :) Good luck!!
that's where you have to decide the depth of comparisons to use. whether you're checking literals or actual instances, and whether you need to box them beforehand.
It's just weird, cause one of my other posts had some very anti ember people commenting, and I want to know why? I'd also like to get more open minded people discussing things, ya know? Being closed off just hinders learning.
That's fine, just don't repost. 
Yet it ain't going anywhere. This is a law that will directly impact our access to information. Yet, just by the way it is, Wikipedia would be blocked in EU. No way, this site would be blocked one day, and there won't be thousands of peoples in streets. Remove access to github, and our IT skills will just drop, making EU projects most costly than anyone on earth. This is just terrible design, it won't pass.
This looks quite nice! This will definetly shown to co-workers to explain them a few parts of flexbox.
Imagine having a worldview this narrow. Yikes. 
&gt; SSCCE Thank you! The best term that I didn't know I needed to learn (I knew the concept but had no way of referring to it). This is very nice: http://sscce.org/
Hi /u/ExtraCloudyBoy, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/michael1026, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
You have a very similar one on StackOverflow, the [MCVE](https://stackoverflow.com/help/mcve)
To be honest, if your code becomes complex enough that you actively have to worry about state and a few variables clearly don't cut it, you either bring in a small state management helper or write your own. - [Valoo](https://gist.github.com/a0430c500f5559b715c2dddf9c40948d) - [Immer](https://github.com/mweststrate/immer)
You can use [`Object.values`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values) to iterate your values here. for (const handler of Object.values(_onSaveHandlers)) { handler.function.call(handler.context); } Object.keys/values only return an object's own properties without walking its prototype chain.
AWESOME!! Inspired me to build this on stream: https://emoji-writer.now.sh/ Replaces words as you type.
It does if you replace `const [key, val] = pair.split('^')` with var valueKeyArr = pair.split('^'); var value = valueKeyArr[0]; var key = valueKeyArr[1]; and replace every `const` with `var`.
I have found it makes little difference.
Would be cool if it was not only for justify-content
simple and good
&gt;Is there any kind of way to test it using Mocha? Yes, you'll want to write a client for your server and start your server for each test [suite]. &gt;Or do I have to set up another instance of it to use it in my tests? I don't know what you mean. If you mean simply run the server, yes. 
With the speed VSCode is getting updates a lot of those points are no longer relevant. I used WebStorm for years then switched to VSCode and was mightily impressed. Database access is about the only feature that it is missing and I'm sure there are extensions to cover that. 
What about this evil regex version? const input = "value1^key1, value2^key2, value3^key3"; const re = /(\s*)(.+?)\^(.+?)(,|$)/g const output = JSON.parse(`{${input.replace(re, `"$3":"$2",`).slice(0,-1)}}`); console.log(output);
I understand. Thanks.
I also thought about regex. Im just not good at it...
Its cool but I agree it would be nice if it incorporated align-items.
Technically, the object rest operator isn't part of ES6. 
&gt; if you need a framework today use React no questions asked Hmmm. Not sure I agree with this. For a start, React only offers you a view layer, and I wouldn't consider it a framework. It's not prescriptive about how your application should be designed. Here are some examples of things I would consider javascript "frameworks": * Angular (or AngularJS) * Ember * Meteor * Sails
Thank you very much, that's a very useful answer. May I ask, what do you think are structural differences between React and Vue? You're talking about OOP for Vue, and, I had only given a very superficial look to React and I basically don't remember anything significant, but my idea was that Vue was like "basically the same sort of structure as React for very general ideas, but then made cleaner and simpler in how things are organized in the code". But from what you say, it sounds like they are structurally different and don't rely on the same general paradigms. Would you mind developing that? I remember debates about the DOM updates in React, but it sounds like you're talking about something more general than this particular point. React's website says "Build encapsulated components that manage their own state, then compose them to make complex UIs". Is a components structure very different from OOP? Thank you very much in advance if you have time to answer this!
Hey thanks
This is outright false, and you know you can’t support your claim
Good to know someone found it useful. The idea came from another reddit comment, earlier last week. I guess there *is a demand for online tools like these.
I plan on adding it next week.
Thanks, these are the types of things I need to see/hear about! I think many designers, myself included, add overflow: hidden; to fight this artifact. Thanks for the great idea, will include overflow-hidden next time I update the flex tool! :)
Don't you have anything better to do with your life then start shit on stale reddit threads?
I‘m getting a pedicure at the moment so no
Just three days? Impressive work!
And you still clearly can’t support your claim
Yes, but *full three days. I noticed that staying focused on the same task for a long time helps accomplish it sooner. But it's basically all I did around the clock. I wanted to include vertical examples (flow-direction: column) too, and thought I would make it for the first demo release, but started to burn out toward the end of the coding marathon. Even if you work hard, it still takes x3 longer than you initially think :/
not sure what you mean, you just use the equal operator and assign a new value var obj=[]; var obj='i am the very model of a modern major general'; etc
Seems almost stalker-ish.
But `Object.assign()` is, which can do the same thing... const newObj = Object.assign({}, object, { foo1: 'like this' });
I dunno how large your set of numbers is, but if you wanted for example, 1 to have weight of 3, 2 with weight of 2, 3 with weight of 1, you could do: const numbers = [1, 1, 1, 2, 2, 3] const r = numbers[Math.floor(Math.random() * numbers.length)] 
wow thats so strange it was just working, thats an error message I have. Thanks for the feed back Im going to give it a big overhaul to simplify things and make it mobile friendly. That should take care of the basic design flaws.
What are people's thoughts on ember?
can you give an example of what youre trying to do
This is great! 
I have heard of ember in passing. I will not try it. My thoughts are that it is another framework which just alters syntax of javascript. There are so many of them at this point that I make it a point to ignore them all. They rarely add much of value, and then you have the issue of having someone 15 years down the road maintain it once the fad of the thing has passed and everyone has forgotten about it. I create singular page websites exclusively. There are no features I desire, the concept of the framework itself is becoming undesirable. 
You really made the effort for IE11??? :o
Alter js syntax? Elaborate
Yep, I've used Ember. I've built pretty big apps in Ember, React and Angular - and Ember is my first choice. React has some lovely developer ergonomics, and it's sleek as all hell, but at scale across multiple projects I find it too variable in implementation. With Ember, I can look at any Ember project and know how it works. I'm also a big fan of where Ember is going - albeit I wish it had got there a while ago. Getting down to ES6 class syntax, decorators and becoming more modular is a huge win.
Well that is what a framework is, it just creates custom code to insert that translates to regular javascript. Each one coming up with their own syntax for doing the same thing
all the major JS frameworks use babel. babel is pretty great. awesome team behind it, too. :D
Really great!
It's just a small change!
I have heard of Ember, and I've watched few talks by Tom Dale and Yehuda Katz on various topics (glimmer, general intros, js etc). I have browsed through some RFCs and goals of Ember, and generally love how the whole ecosystem is coming together to make Ember better. That being said, no I will never switch to Ember. I've used varioius web technologies in the past 10 years, from jquery, mustache/handlebars, angularjs (1.0), angular, but since I tried out React like 2 years ago it was like a whole new revelation for me. At first I was pissed because I knew so many (now useless) gotchas/abstractions from angularjs (1.0), and the simplicity of React was like a slap in my face. I will never ever go back to string templates. For this very reason I will never try out Vuejs as well. JSX (and the simple Component lifecycle) is that amazing. And I know that there is an integration in both Ember and Vuejs for JSX, but honestly I don't need any other abstractions that the frameworks offer. 
I create complex frontend trading applications and use ember on a daily basis. We've created trading platforms with native JavaScript in the past and I can say with certainty that a fully fledged framework Ember gives us out of the box has given us a better way of working by reducing complexity in the app and has given us a clear and concise way to structure our code. It has made it ten times easier to onboard new developers into the team allowing them to start adding new functionality in a short space of time without needing to know all the nuances of our apps. Ember also makes it quite easy to share functionality with add-ons so we've been doing this quite a bit recently. I've used it for several years now and since this time Ember has improved a lot. I would recommend it for a fully fledged SPA.
Remind me
Thats true. Didnt expect you to care for it though.
Not exactly. Angular, for example, uses Typescript. And both Vue and React can be written in ES5. If you want JSX (or ES6+ features for that matter), Typescript can handle that as well, bypassing any need for Babel.
And flex-wrap! Cool project man
that's not what a framework is.
How is it not just javascript? Elaborate
you are welcomed!
Can you elaborate on what Big O is?
babel 7 does typescript now :D (the ember tooling (as we speak) is testing this out)
The Typescript team at Google is effectively part of the Angular team, but they support the entire Typescript ecosystem at Google as well - we all sit together :) Source: I'm on the Angular team at Google. &amp;#x200B; Here's a good talk from a couple of members of the Google TS team at //BUILD this year : [https://www.youtube.com/watch?v=sjov1k5jexA](https://www.youtube.com/watch?v=sjov1k5jexA)
Sure, I didn't think it would. I was giving a hypothetical prediction of corporate behavior in the scenario where it did pass as written.
I \*think\* I understand where you're coming from, but can you talk about how you're using react? I use react at work every day, so I think I see a lot of parallels between successful big react apps and ember in general. &gt; I will never ever go back to string templates. &amp;#x200B; Why is this? For a most react apps, you typically have a container (or "smart") and display (or "dumb") component, and it's effectively the same as js and template. New ember even lets you do js-less components as well as template-less components, so you only have one file for the simple stuff. For example: components can look like this: r/https://twitter.com/nullvoxpopuli/status/1036088548754169856 (I think 2 years ago, you had to use curlybraces for everything, and it looked kinda weird). here is an [example of a template only component](https://gitlab.com/NullVoxPopuli/emberclear/blob/master/packages/frontend/src/ui/components/field/template.hbs). here is an [example of a js only component](https://gitlab.com/NullVoxPopuli/emberclear/blob/master/packages/frontend/src/ui/components/keyboard-press/component.ts)
When I need to generate things, I just make a little object called 'gen' and use it to generate dom elements. You pass in the dom element you want it to attach to in the options. var gen={}; gen.pop_button=function(o,c){ var btn=$('&lt;div&gt;').addClass('button'); btn.on('click',function(e){ e.preventDefault(); window.alert(o.text); }); o.dom_element.append(btn); c(null,btn); };
See it's all magic strings in a html-like template. Really hard to what is coming from where and what that thing is. Stuff like {{#if @label}}, @name='keyboard-shortcuts' as |isActive toggle|, or the way you would have some more complex for|if|else logic in a mustache/template (if it all possible). React is just a function call, I know my state, I know my props and I can use the full fledged power of JS to have concise rendering logic. In general I really dislike the handlebars/mustache synthax... It was good like 6 years ago... maybe. \^_^ 
Hey! Coding Math comes to help you with your problem! https://youtu.be/MGTQWV1VfWk Here you go, Cheers! Also, I encourage you to check out another videos of the channel because I found them very interesting :)
&gt; See it's all magic strings in a html-like template. the templating ember uses isn't _really_ handlebars anymore. Personally, I'm trying to get a name change, because of all the bad connotations with handlebars in its early days. But, what ember uses is actually a super set of HTML, where all valid HTML is valid ember-templates (this is not true of JSX). ------------------------------------------- &gt; Really hard to reason what is coming from where and what that thing is. Stuff like {{#if @label}}, @name='keyboard-shortcuts' as |isActive toggle| In my personal opinion, I think this is actually easier than react / jsx. In jsx, you only have 'props', so like `&lt;SomeFieldInput value={value} onChange={someFunction} role='whatever' /&gt;` -- how do you know what the difference is between an HTML attribute and a prop? what if the component you're consuming doesn't pass along `className`? what do you do? With ember templates you'd do the same thing as `&lt;SomeFieldInput @value={{value}} @onChange={{action someFunction}} role='whatever' class='pull-right' /&gt;` So, I think that's pretty cool, that there is a way to specify a difference between your arguments to the component, and the attributes to the element. the `as |isActive toggle|` bit is a syntax for yielding data back up to the caller. So, maybe this is more natural for me, since I started out my professional career in ruby, So, what that means is that in `&lt;ModalStatic /&gt;` component from the screenshot, there exists a property, `isActive`, and a function, `toggle` -- and both of those are yielded back to the caller via that `as` syntax. The code for those can be viewed here, if you're curious: [component](https://gitlab.com/NullVoxPopuli/emberclear/blob/master/packages/frontend/src/ui/components/modal-static/component.ts#L18) and [template](https://gitlab.com/NullVoxPopuli/emberclear/blob/master/packages/frontend/src/ui/components/modal-static/template.hbs). This enables the child component to use the data of the parent component. This is pretty much the higher-order-component pattern from react-land. :) --------------------------------------------- &gt; React is just a function call, I know my state, I know my props and I can use the full fledged power of JS This is a great feature of react! and I like the simplicity of it a lot. fwiw, in Ember, props are "arguments", which are passed in, and state is anything you use within the component itself. Pretty similar, I think. :) ------------------------------------------- &gt; It was good like 6 years ago... maybe. ^_^ Things good 6 years ago can (and are!) still good now. take a look at C#, ruby, javascript, java, python, etc.. :) hope this helps. :)
VueJS is way better! EmberJS was aweful. Putting business logic in routes and components are not components they are just view files. And the template engine why just why... I really wanted to like Ember but the framework was not constructed like my brain things.
Firstly, thanks for sharing your experiences! I use react at work, and I know how customizeable things can get -- you literally have control of _everything_. Vue is something I've been meaning to look at -- their community seems great! -------------------------------------- &gt; Not being able to manage my own build tool in Ember was a huge setback for me. was it just the bundle stuff you wanted to look at with the build tool? if not, what all did you want to manage? --------------------------------------- &gt; The apps I built with Ember were massive, weighing in at over 2MB+ in prod, and I had no way to see what that weight was composed of so it was near impossible to optimize. yikes! that's pretty gnarly! Not sure how long ago you were using ember, but now we have this: https://github.com/stefanpenner/broccoli-concat-analyser which can give you output like this: https://emberclear.io/bundle.html (that's the bundle of a live ember PWA). Speaking of PWA -- making my ember app a PWA was as easy as `ember install ember-service-worker` -- it set up some default caching, and that was it (of course, I still made my own icon for https://emberclear.io, and later added server-side-rendering, but pre-rendered due to the particular serverlessness of my app, but all-in-all, pretty easy ). :) ---------------------------------------- Re: your ember-data concerns -- all valid. But I think APIs may be more difficult than people let themselves believe. ember-data, by default, uses the http://jsonapi.org/ standard for payloads, and if the server is set up correctly, you get all that niceness you get with graphql, but with http-layer caching. you can get nested records, say only what fields you want. etc. I'm also of the opinion that routing is 100% a frontend concern.. and it sounds like you just had the misfortune of working with a bad API. GraphQL is neat, because it doesn't build on existing technology, and it forces you to do everything deliberately. The flip side to that is (and especially with https://github.com/json-api-dotnet/JsonApiDotNetCore ) the tooling you use changes your experience a toooooon. Like, the jsonapi-dotnet-core package does everything for me -- allows me to use nested data, specified fields, and -- gives me CRUD for every resource without me having to write more than 1 line of code per resource -- because all the behavior is implemented via inheritance (and has documentation for how to customize stuff, add your own resources, etc). It's pretty cool, and I think graphql could / should / will get to that level of automation eventually. I've just yet to see a backend framework written with graphql in mind -- only seen graphql exist as an implementation detail. Also, I didn't know how to put this in there, but ember-data is totally optional, and not required for routing :) you can use graphql with ember if ya wanted :) But yeah, if you have time, I personally think ember is worth another try, esp when you are in control of everything, and you follow some standards, and care about your architecture (backend, too). It seems where most people learn to hate ember is when their backend teams don't know what they're doing. :-\ idk... I hope my word vomit helps in some way. :-\ 
&gt; VueJS is way better! I've been meaning to check out Vue! looks like a fun community, and the tooling looks great! ------------------------------------- &gt; EmberJS was aweful. Putting business logic in routes This is not an ember-recommended thing to do. The pattern to use is services, which kinda mirror a common backend pattern by the same name. -------------------------------------- &gt; and components are not components they are just view files. what do you mean by this? &gt; And the template engine why just why... what do you mean? ---------------------------------------------------------- &gt; I really wanted to like Ember but the framework was not constructed like my brain works... that's fair. the learning team is working a lot of documentation / guides update to making learning ember more like learning react or vue. component first, followed by services, everything else is addons.
I haven't heard of Aurelia until recently -- what are the major similarities / differences between it and ember?
Look at this https://guides.emberjs.com/release/components/defining-a-component/ they name it component but its hard coupled with the route. Components are basically just html files with variables you need to fill. Maybe I have a news component in the first I want to show poltic news in the second component I want to display Entertainment. In Ember I have to fetch the data in the route or use a store in the route and then set the data to the conponents or as i call them view files. In Vue or React you would make a component which can live on its own. You tell the component with some settings what you want to fetch and in the component the data gets fetched after that the data gets displayed. All in the same file if you not using stores. Ember names it component but they are just smart html files with no logic. Components in ember cant live on its own they need soneone who sets the data to them...
&gt;Look at this [https://guides.emberjs.com/release/components/defining-a-component/](https://guides.emberjs.com/release/components/defining-a-component/) they name it component but its hard coupled with the route. honest question: why does it look hard coupled to the route? ------------------------------------------------------- &gt;In Ember I have to fetch the data in the route or use a store in the route and then set the data to the conponents or as i call them view files. how long ago did you use ember? now a days, you can do this (not that this is technically typescript, but it's pretty much the same as js): export default class AddModal extends Component { @service('notifications') toast!: Toast; @service store!: DS.Store; // much of the component omitted for brevity async tryCreate(identity: IdentityJson) { const { name, publicKey } = identity; const exists = this.store.peekRecord('identity', publicKey); if (exists) { this.toast.info('Friend already added!'); return; } await this.store.createRecord('identity', { name, id: publicKey, publicKey: fromHex(publicKey) }).save(); this.toast.info(`${identity.name || 'Friend'} added!`); } [source](https://gitlab.com/NullVoxPopuli/emberclear/blob/master/packages/frontend/src/ui/components/add-contact/component.ts#L16)
If I could offer an alternative, the websocket. socket.emit('todo.add',{todo:todo},function(err,res){ if(res){ //catch the todo coming back from the database with //its _id tag and display. } }); It will allow you to send and receive information to/from the server without the need to reload the page. jquery also has a $.post command and a $.get command if you desire a page reload event to occur.
I'm curious that you throw jQuery in with vanilla JS but eschew frameworks. I will say this from my personal experience, whether you learn JS or a framework when working with a framework is on the developer. I personally have gotten way better at vanilla JS and programming in general in the same time frame I've been using frameworks (since KnockoutJS, AngularJS, Ember and others). I've been where you are as well, where I thought vanilla JS was the way to go and have built quite a few vanilla or vanilla plus jQuery apps and I find frameworks, currently beer for now, help me be more effective and efficient. And I believe the same can be said for most developers. 
Probably need more info to completely answer the question. But your assertion is largely correct. Most APIs I have worked with receive create calls via POST. That said, this is all up to the API provider’s interpretation of what thy mean. For instance, I’ve used APIs that use POST for everything. And I’ve used some that use PUT to create, DELETE to delete etc etc. 
They're similar, but somewhat different in their core methodologies. Perhaps the biggest difference is Aurelia takes a convention over configuration approach, you can use it without having to configure it if you're happy with the defaults. It's also quite unopinionated, Rob and the team opted to follow as close as possible to web specifications like Web Components, Shadow DOM, etc. Your models are ESNext classes, your views are HTML files with intuitive templating syntax (supports ESNext syntax out-of-the-box as well as TypeScript). Aurelia has commercial support. If you get stuck you can hire someone from the core team for training or even to come onboard and help you write code. It works well with other frameworks and libraries. I have used React inside of Aurelia before and slowly migrated Angular applications on a page-by-page level. The learning curve is quite low. It's intuitive, so you can grasp the basics quickly (especially if you take a convention approach). An often cited downside to Aurelia is it has a small community, but I've heard people cite that as a concern with Vue and Ember before as well. It still doesn't change the fact it's a great framework and if it's well-engineered, it should be somewhat self-documenting. One of Aurelia's biggest problems is marketing. You don't hear about it because it's not backed by a Facebook or Google, still they're working on Aurelia 2.0 as we speak and it's going to be fantastic.
&gt; they name it component but its hard coupled with the route In my project, I have some components I use all over the place. I'm not sure what you mean. &gt; Ember names it component but they are just smart html files with no logic. Just put some logic into its .js file and it has logic. &gt; Components in ember cant live on its own they need soneone who sets the data to them... They can also fetch the data from somewhere else, using `fetch` or asking some service (like the ember-data store). 
A couple of thoughts which might help clarify things for you. I'm still learning myself so lurkers feel free to correct any mistakes. JSON is simply the data (in a particular format) being transferred between the client and the server. Knowing the specific format of the data (JSON) helps the client and server understand how to interpret the data. GET, POST, etc. are HTTP verbs that are part of every request sent to the server. Which one you need ultimately depends on the app you're communicating with on the server. The particular example you linked seems to be an API, which is essentially a URL you can interact with via HTTP requests to get or send data, without the need for a UI. Thinking of things in terms of API actually makes things easier in my opinion. Simplistically, when the server receives a request, it checks the HTTP verb and the URL. If that combination has been defined in the API code, it will respond accordingly. So again, in your example of r/https://api.github.com/users, the API has been programmed to respond to a GET request at that URL by sending back some JSON data. In a POST request, you're sending some data that the server will need to process your request. So imagine the github API has an endpoint of r/https://api.github.com/newUser that accepts a POST request and a JSON of a user in the body of your request, something like { firstName: "John", lastName: "Smith", username: "cooldude18" }. The server receives your request at that URL, sees it's a POST request, and takes the JSON you sent to create a new user in the backend code. An additional consideration about POST requests is that they don't always have to be for creating or updating information--they can be used to request information just like a GET request. Let's say you want the information for a particular user. How would you get that with a GET request? You can't, because you need to tell the server which user you want. So you send a POST request. For example, maybe the github API has a URL of r/https://api.github.com/user/[username] where providing a username will return the user JSON. You would send a POST request to the URL (.../user/cooldude18) and receive a response with a JSON object containing the user info. Now if we look back at your todo app example, it should be more clear what's happening. To add a todo your client would create a POST request with a JSON object in the request body, which would be received by the server and created in the database by the server app code. If you're interested in trying this sort of thing out, the Microsoft Azure docs have some great tutorials for exactly this type of thing. See here: [https://docs.microsoft.com/en-us/azure/cosmos-db/sql-api-nodejs-application](https://docs.microsoft.com/en-us/azure/cosmos-db/sql-api-nodejs-application). Linking the node.js tutorial since all communication between client, server, and database is all in JSON! This is something I've been playing with recently and find it very intuitive.
I prefer React + Apollo, but I maintain an Ember app that I had no hand in originally building. Aside from that I have little experience with Ember from the ground up. To me, Ember feels like a dinosaur. Components that you can’t route to without a separate route, the need to still have at least one controller, awful templating system and what really irks me is Ember Data. All the “magic” in there is such an annoyance to figure out. This is with Ember 2.16. I haven’t been bothered to upgrade it any further so not sure what 3.x looks like.
Huh, aside from the commercial support, I could swap Aurelia for ember, and everything you're saying still makes sense. The difference currently with ember, must just be that the docs in ember don't show es classes, and that typescript support needs an add-on. I'll have to check out Aurelia - sounds pretty similar. Thanks!
Then your solution is probably pretty good. Given enough weighted numbers to choose from then I guess it's possible the search may get slow (like in the range of thousands or millions.) Maybe a binary search could speed that up. If each random number and its associated weight is stored as an offset like: const weighted = [ {offset: 0.1, value: 1}, {offset: 0.4, value: 2}, {offset: 0.41, value: 3}, {offset: 0.48, value: 4}, {offset: 0.85, value: 5} ] (Eg. the weight of 1 is 0.1, the weight of 3 is 0.07) Then you pick a random number `r = Math.random()` and perform a binary search through the array to find the 2 elements bracketing it. Which gives you a O(log n) rather than O(n) search. It's possible an array of objects won't be laid out in RAM very well however, so instead you could drop down to a typed array to store those pairs (without the convenience of having named properties.) The code gets a bit uglier but should be pretty fast. const weighted = new Float64Array([ 0.1, 1.0, 0.4, 2.0, 0.41, 3.0, 0.48, 4.0, 0.85, 5.0 ]) I don't know anything about the nature of your weighted numbers though. If 99% of them are all weight=1 and only a few have higher weights then you'd be better off splitting that into 2 special conditions.
React and Apollo integrate so nicely together, it's nuts. Only done one project with that combo, but it was fun on the frontend. (Graphql on the backend still needs some love) Components not being able to be routed to is an intentional design decision. As you'll see even with large react apps, esp those using react-router, they'll have a component that functions the same as one of ember's routes. For the controllers, they've been massively misunderstood throughout time. Ember 3 and the coming documentation updates hopefully resolve all that. But with the dependency injection container, you can inject the router, store, etc right into components, allowing you to not pass props down an entire hierarchy. (I've seen that happen in react as well.. it really just depends on how much experience the devs have) Ember-data definitely needs some clarity in the documentation, so I feel ya there. I've found It's hard to explain things to other devs when I can't point to a specific example that fits their situation. For rest apis, ember-data is perfect, because the models, serializers, and adapters are what you'll need to normalize your data. If your API is a well thought out JSON:API (jsonapi.org), it's 0 config, and a dream. All that said, ember-data may not be for everyone. Graphql works with ember, too :) 2.16 is an LTS, no that's good :) I'm unsure if the router service is in that version or not. 3.4 was just released this past week, and will become the current LTS soon if it isn't already. But, with 2.12 onward, you can convert everything to angle brackets in the templates, using this: https://github.com/rwjblue/ember-angle-bracket-invocation-polyfill Sorry for the vomit. On phone.. it's probably incoherent. What makes you feel like ember is a dinosaur? Is the app you're working on poorly architectural? Also, have you seen: https://twitter.com/nullvoxpopuli/status/1036082782890614786?s=20 
If I could make a suggestion: drop ES5 and jQuery.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [emberjs/rfcs/.../**0232-simplify-qunit-testing-api.md** (master → 2cdc8cd)](https://github.com/emberjs/rfcs/blob/2cdc8cd6fd711ae6ca06484c9bf8ec95e420e19a/text/0232-simplify-qunit-testing-api.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e5cvq4s.)
I'm sure a binary search is the more efficient solution over arbitrarily large data sets, but I wouldn't be surprised to see a straight iteration O(n) solution outperforming a binary search on reasonably sized number sets. I wish I had the time to benchmark it, but between a better caching strategy on the linear algorithm and the relatively slow (compared to just incrementing) divisions of the binary search, it just seems like the O(n) solution is potentially faster here.
[Big O notation](https://en.wikipedia.org/wiki/Big_O_notation)
the parts I don't like: - can't configure your own environment variables. - DO NOT USE EMBLEM, use handlebars, literally ANYTHING besides emblem. FUCK EMBLEM. Not really an ember issue though. - actions are annoying and confusing at first, `this.send` vs `this.sendAction`, also sending to a controller vs route. Easy to start writing confusing bs like `this.sendProxyAction('actionManager', 'blah', data)`. favorite parts: - The naming conventions make it super easy to find what you're looking for. - Easier to get things right, unlike angularjs where it was easy to write horrible code if you didn't know about "best practices" that were sprinkled throughout the web. - built-in testing local server is amazing
It has its uses. It’s a solid choice if you have a less experienced team or want something more opinionated (easier to learn, less opportunities to do something wrong). The fact that it is so opinionated is both a strength and a weakness though. Vue could also be a good fit if those are your needs. If you have an experienced team or don’t mind the learning curve, go with React. 
Nice job man! It‘s a cool tool for visual learners! 
Shouldn’t of deleted it OP. Sometimes these fan boys need to slapped into line. 
It a little late to use the computer, but in the morning I can bring a hand with your doubts :)
Thanks for that so I should always try to do import something from ‘dependency name’ first as I take it?
This looks really, seriously interesting. I'm all about anything that can save time and abstract away tedious boilerplate. Thanks!
From the perspective of someone about to enter the industry it seems like that's a majority of people within it rn. Please, god, let me be wrong.
I'm a junior full stack dev and aside from my own curiosity, it's not used that much in France. I prefered vuejs for the simple syntax which lead to develop great things fast, and component are perfect to embed whatever you've done into another vue project. 
I just want a table that resizes like this but without the possibility of white space between columns
But can you export the css? Great work man.
You can copy it to clipboard. No export yet :) Maybe next feature?
Which is good, imo. Until he tries to fuck with something directly related to TC39, he shouldn't be booted.
That's pretty fucking reasonable.
&gt; honest question: why does it look hard coupled to the route? Because it's business logic (Controller-Part) is in app/routes/index.js &gt; how long ago did you use ember? 4 years ago for about 2 month. After that time we throw it away because it seems we did not understand the ember way. You code example is good it shows me that components can have a logic part. But how does this code "know" which view to render? Automatic by folder structure? See VueJS everything is clear eben if you never have wrote one single line of VueJS Code: https://vuejs.org/v2/guide/single-file-components.html 
Asiri someone with not much modern day web development experience, is it true that React is more like a library, and Vue, Angular etc. are much more like frameworks?
What's the difference between this and yeoman?
Wow that is hard to read, it's so long. Looks like decent content tho
Bookmarked, thank you I will be reading this later. +1
Jesus, it runs on my iPhone. Holy cow. Can’t click though.
Not really, but you can try to force it: ((x | 0) / (y | 0)) | 0
&gt;The javascript *with* keyword Yeah, don't use that.
I use ember everyday in my job. I think it's an amazing framework, very little configuration required out of the box and the range of add-ons available is great. The community alone is enough reason to work with ember, they're very helpful and keen to teach you how to use the framework. Many occasion, they have steered me in the right direction. It's extremely easy for me to look at another large webapp written in ember and just understand what is going on. &amp;#x200B; The CLI makes development extremely productive and maintaining upgrade is a matter of typing in a command. I really like the fact that no public API is removed in a minor release meaning only major releases can really break an application. React for me is great but I feel that there's too much decision making required in terms of managing state etc and ember does all this from get go.
its called spread operator and it is ES6 feature
Pretty
looks like plop with a better name
Yes, the only thing it can't do is work across multiple monitors on a single project. 
This is sweet. Putty, and some browsers as installed programs...with outlook.
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://github.com/emberjs/rfcs/pull/228#issuecomment-330271837) - Previous text "RFC" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
Just booted up Pinball. This gon' be good. 
Being closed off to things hinders learning... and we're all here to learn, yeah? :D
You're saying React has a big learning curve? could you expand on that? Also, under what conditions would you recommend react?
Thanks for sharing your experiences and criticism! It's very important to be able to see the negative aspects of a technology. &lt;3 &gt; Query-Params. Ember makes a big deal of "not breaking the web" and obeying the browser location. That mostly works, but query-params support is pretty terrible. It requires declarations in multiple classes and doesn't work well during the initial boot process or with query-params that persist through all routes. Could you expand on this a bit. This is mostly what I use controllers for: [a controller](https://gitlab.com/NullVoxPopuli/emberclear/blob/master/packages/frontend/src/ui/routes/invite/controller.ts#L8), [access in route](https://gitlab.com/NullVoxPopuli/emberclear/blob/master/packages/frontend/src/ui/routes/invite/route.ts#L29) But, I'd love to know more about your use case, as mine is pretty simple. :( -------------------------------- &gt; Ember data. It's just impossible to upgrade. The division between adapters and serializers makes no sense if any of your models can be accessed via multiple MIME types. A Service Worker might be a better place for much of this logic, though it's hard to run those on http in development. ember-data doesn't have to be used -- so.. maybe it's not a good fit your project? I imagine it would be a real struggle in the circumstances you're describing. maybe the API is non-REST-ful? ember-data shines with REST apis, and the adapters and serializer pattern is a common way to normalize data so the backend doesn't have to cater its api design to the frontend (yay separation of concerns!). But ember-data _really_ shines with jsonapi.org formatted payloads. The name is horrible though. jsonapi kinda fails at marketing, so it's not anywhere near as popular as graphql (which is a great name!) --------------------------------- &gt; There are unnecessary distinctions between route actions, controller actions, and component actions. I just use component actions. with the dependency injection, I just inject the router / store / whatever into whatever component I'm using. makes maintenance a breeze. ---------------------------------- &gt; TypeScript. I wouldn't bother using TypeScript with Ember. TypeScript isn't (and probably can't be) compatible with Ember's get(object, 'foo.bar.baz') syntax. Ember's injection system further complicates things. I am pretty sure that way of getting things is no longer recommended. In ember 3.1+ you can just do `object.foo.bar.baz`, and typescript knows what types things are :D The dependency injection system has an interesting work around for letting TS know what types things are. The registry entries at the bottom of TS files are basically just incrementally built lookup-tables for the services/models/controllers/whatever. Personally, I love typescript with ember! and wouldn't go back to normal JS. 
Same situation on my Motorola
Not sure about Vue (as I've yet to play with it), but that's mostly accurate, I'd say. It's really hard to build an app of any reasonable size with just react. you need a build-system (transpiling, bundling, etc) (otherwise you don't get jsx). The only state management react has out of the box is the context api, which is fairly new. No way to manage api calls / data in general (true of even angular) -- there are recommended packages / approaches though. I think Angular and Ember are the only ones that have decent testing out of the box -- though, personally, I find ember's testing more ergonomic. I'm sure there are a bunch of other things, too. All that said though, React is fun, and I've learned a ton from it, and been able to bring what I've learned over to my ember projects. :)
 const component = (element, content) =&gt; { element.on('click', () =&gt; { yourPopupFunc(content) } } const yourPopupFunc = (content) =&gt; { modal.open() ...logic to generate and populate modal ...bla bla modal.close() or whatever } &amp;#x200B;
So ... what does React give me? I though the main point of React, Vue, etc. is the data binding between states (that are touched by both the server backend, through Websockets for example, and by UI elements) and DOM elements. And now I hear that state management is new in React? Or am I confusing things here?
Runs smooth AF on iPhone X. Such a shame that the author didn’t give mobile users a way to click.
You're very close! I think you're just getting a couple different kinds of state mixed up. React and Vue do abstract away binding states from the DOM. But you have to implement the interaction between the backend or websokects). Though, maybe I wasn't as clear as I could have been. UI apps in general kiiiinda have 2 types of states (from the developer's perspective -- whereas the above dom-level stuff is an implementation detail that we don't need to worry about). There is the local state, which could be within the scope of your component, and then there is app-level state, which is where things like the context api, redux, mobx, etc come in to play. Hope I made sense?
Okay, so React on its own provides you the local state management, but not the app-level state? Another question. I'd like to use React for web-based configuration interfaces. I found lists like [these](https://reactjs.org/community/ui-components.html), but it seems like it is more commonplace that there are smaller projects that implement maybe 1-2 types of widgets. I come from native application land, where we have toolkits like Qt5 and Gtk etc. and these have a fully-featured set of widgets. The thing is, I'd prefer a fully-featured UI library on top of React because I am not experienced at all in CSS, and if I see this right, if I pick these individual libraries with 1-2 widgets each, I'd have to invest a lot of time to make their look'n'feel match, right? Also, do you know of any UI library that implements widgets that have a "classical" look? I love how the [Skulpture KDE/Qt theme](http://skulpture.maxiom.de/) looks like. [Here is one example.](https://i.imgur.com/pykR3hH.png). [Here is an OS news article about it, with a screenshot.](http://www.osnews.com/story/26651/Ode_to_Skulpture)
How do I install Flash?
This is amazing. It ran on my Samsung Galaxy Note 8. I was able to take out the stylus, hover over the screen with it to move the mouse around, and click by tapping the screen. Incredible.
Yup, start the server and a client in one of the before hooks (I like beforeEach, so I don't need to be as careful about contaminating server/client state across tests). 
Well this might help: https://stackoverflow.com/questions/2673121/how-to-check-if-object-has-any-properties-in-javascript
Thank god it's W2000 not ME.
&gt;I don't want to import libraries for a single method With lodash you can import a single function without having to import the whole library. So by the time you find your own solution, create your own module, and share it across your app, just could just import `isEmpty` `import isEmpty from 'lodash/isEmpty'` Or if you don't want to npm install all of lodash they break everything out in individual npm packages as well. [https://www.npmjs.com/package/lodash.isequal](https://www.npmjs.com/package/lodash.isequal) Hope this helps!
That is VERY helpful. Thank you.
Yep that solved it, &amp;#x200B; I will include the solution in the original post. &amp;#x200B; Thanks loads.
Good job man! Awesome...
This is the second ME joke I've seen today, and it's only 8:30am. I feel like I've been transported back in time to the beginning of the millennium. 
If all you are doing is looking at whether an *object* is empty (rather than something of unknown type), they way you are doing it is still arguably superior, since that is all that [lodash would be doing](https://github.com/lodash/lodash/blob/master/isEmpty.js). Don't be reluctant to use JS language features just because they seem indirect. 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [lodash/lodash/.../**isEmpty.js** (master → 6018350)](https://github.com/lodash/lodash/blob/6018350ac10d5ce6a5b7db625140b82aeab804df/isEmpty.js) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e5deph7.)
React itself has the smallest possible learning curve of all javascript frameworks. Especially in the beginning there is not much to learn: 3 api functions, 4 lifecycles, 2 jsx semantics, class &amp; function - the learning effort spans more or less an hour, see [egghead](https://egghead.io/courses/react-fundamentals) for instance. He's probably referring to React not being a framework in the first place but a view layer, so if you need routes you have to know react-router, if you need state, redux et all, and so on. In other words, you have to pick and choose additions, if you need them, and there's a greater choice among them which could be confusing, especially if you *don't* want to just go with the established options.
I don't like to be negative. I understand that this framework has made some choices for whatever reasons etc etc. However i feel i should provide a counter POV &amp;#x200B; I find ember very hard to work with. Yeah its got great tooling, for superficial stuff like creating some empty files. the flip side is that it wraps pretty much everything. \- Ohhhh don't worry i see the problem, don't use \`npm install\`, use \`ember install\` \- Ohhhh don't worry i see the problem, don't use \`\[\].filter\`, use \`@ember/object.filter\` \- Ohhhh don't worry i see the problem, don't use the browser inspector, use ember-inspector \- Ohhhh don't worry i see the problem, don't use the \`Promise\`, use \`RSVP\` &amp;#x200B; &amp;#x200B;
I'm on an S9 and I got Firefox running, but just barely. If you had told me 15 years ago when phones were getting tinier and tinier that I would have one that would run Windows off the internet in an emulator in my browser, I don't think I would have believed you.
About Array on 6th revision : [https://www.ecma-international.org/ecma-262/6.0/#sec-array-initializer](https://www.ecma-international.org/ecma-262/6.0/#sec-array-initializer) About Object on 9th revision :[https://www.ecma-international.org/ecma-262/9.0/#sec-object-initializer](https://www.ecma-international.org/ecma-262/9.0/#sec-object-initializer)
So you do want to use underscore (lodash)? Or don't? If you do then a simple `_.get(post, 'attachments.data[0].media.image.src', null)` would work Also avoid using `map` if you aren't returning anything. Best to use `forEach` for plain iterations. Your `crawl` var will become and array of arrays that contain `undefined` or `false` in your example.
If learning postgresql is among your goals, then there's no reason using an ORM. The [node-pg](https://github.com/brianc/node-postgres) driver can be used on its own without problem.
I was wondering the same, I don't know enough about WebAssembly yet to figure that out. If anyone knows, please share!
&gt; superseded lol
I did not understand why defining your own function `const isEmpty = o =&gt; if(Object.keys(o).length)` wasn't the best solution for you.
The way you're doing it would probably be the most "beautiful" way and most efficient. The lodash import you want to use actually imports a bunch of other lodash functions to do its thing: https://github.com/lodash/lodash/blob/master/isEmpty.js
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [lodash/lodash/.../**isEmpty.js** (master → 6018350)](https://github.com/lodash/lodash/blob/6018350ac10d5ce6a5b7db625140b82aeab804df/isEmpty.js) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e5dfwy8.)
The rest/spread operator for arrays is indeed in ES6. This is the rest/spread operator for objects, which is a [Stage 4 proposal](https://github.com/tc39/proposal-object-rest-spread/blob/master/README.md). 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [tc39/proposal-object-rest-spread/.../**README.md** (master → 6ee4ce3)](https://github.com/tc39/proposal-object-rest-spread/blob/6ee4ce3cdda246746fc46fb149bb8b43c28e704d/README.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e5dg513.)
I've just woken up so my grammar might not make sense here but if you can bare with me - If you are new to PostegreSQL, and databases in general, then you should stick with plain SQL before touching an ORM. The reason I say this is because ORMs typically abstract concepts in SQL under API methods and do a little "magic" that hides simple things like JOINs under some arbitrary "relationship" mechanism, and some ORMs even do automigration. If you start out with an ORM, you will miss out on learning how to do these things without an ORM which means you will not understand the mechanics the ORM is using which makes your code a "black box" when perceived by you. I would stick with `node-pg` as u/compteNumero9 suggested, but you can also get by with Knex.js as it's API methods map almost 1:1 with SQL concepts.
WebGL. Emscripten translates OpenGL calls to WebGL
At first I thought it was a gif. The future is now!
I agree about knex. It's a nice ORM for what I looked at (never did anything big with it though).
Thank you, it works with Lodash :) 
Yeah, it sounds like it would be a much better learning experience to just use plain SQL, thanks for the advice!
Got it, thanks a lot for the recommendation! Will give it a try.
I agree. I don't think there's anything "beautiful" about importing a third-party function just to be able to take advantage of some syntax sugar.
Officer, seize this man!
True, but you will never get global update to all connected clients with get/post unless you do long polling which doesn't work well, uses additional bandwidth needlessly, and causes a network storm for the server.
FYI, in your example of using the lodash isEqual function, you could take advantage of ES6 object literal shorthand and simply it to just: const isEqual = require('lodash.isequal'); Vue.mixin({ methods: { isEqual } }); If the property value has the same name as the method name, then you can omit it.
&gt;I don't like to be negative. I understand that this framework has made some choices for whatever reasons etc etc. However i feel i should provide a counter POV perfect! I appreciate the willingness to share thoughts / feelings :) \---------------------------------------------------------------- &gt;Yeah its got great tooling, for superficial stuff like creating some empty files. the flip side is that it wraps pretty much everything. &gt; &gt;Ohhhh don't worry i see the problem, don't use \`\[\].filter\`, use \`@ember/object.filter\` &gt; &gt;The promises of "stable API", "it just works" , "convention means you can just be dropped in" does not exist in real life. none of this is true anymore (not sure when it was). :-\\ How long ago did you try ember? I wonder if your experience pre-dates when I started? &gt;Ohhhh don't worry i see the problem, don't use \`npm install\`, use \`ember install\` But yeah, you can use npm install or yarn add, and for most things it just works. The only reason you'd need \`ember install\` is if the addon does some setup stuff / blueprint running after install. maybe npm has the ability to do that now run scripts after installing a dep? idk. But many js frameworks with a cli do this, because they have addon hooks for apps to tie in to. &gt;Ohhhh don't worry i see the problem, don't use the \`Promise\`, use \`RSVP\` Native promises can be used. The only thing I use RSVP for now a days is the \`hash\` helper, which doesn't yet have a native equivalent. &gt;Ohhhh don't worry i see the problem, don't use the browser inspector, use ember-inspectorThis is pretty much the same as using a react, angular, or vue inspector. the tools provide special hooks to allow you more insight into what is going on in your app. &gt; Superficially a developer might know where the routes are, but realistically this is the smallest part of ramping up a contractor / whatever on your code base. what kind of contractors did you use? / what kind of app was this? / how long ago? (just wondering) &gt; Observables pretending to be imperative objects means "it just works". till it doesn't. good news! observables (as you probably knew them) are very recommended against now. :) ------------------------------------ &gt; then you spend 2 days down a rabbit hole only to find that its extremely hard to reason about what has triggered a re-render or not, and how to do reasonably simple things "the ember way" I know this frustration very well, and have experienced it with react and angular as well. Learning a new framework, especially in the early days can be daunting. Simple things that you know are simple in one ecosystem _should_ be simple in the ecosystem you're trying out... and it can be really frustrating until you get to that "a-ha" moment (This was me with redux, honestly). ​ But yeah, thanks for sharing! :)
I'm a little confused by your last sentence. So, typescript is a language on top of javascript -- a superset -- so all valid javascript is valid typescript. Ember, and Vue can be written in just javascript. Angular requires typescript I think now, and React is the only one that (JSX) is not a superset of javascript/html, and has different apis from HTML / also requires transpiling if you want to use jsx, just like everything else requires transpiling if you don't want to use es5. But I think I agree with you on the React vs React-and-its-whole-ecosystem-which-is-required-to-make-any-sort-of-production-app thing.
\`\`\`js const isEmpty = obj =&gt; Object.keys(obj).length === 0; &amp;#x200B; isEmpty({}); // true \`\`\`
Cool, thanks! that will chop 70 kb file size that Lodash gives
&gt;I really hate Handlebars with the passion of a thousand suns. It's just so senseless. I don't want or need a separation of the view and the rest. With good react patterns you end up splitting this out anyway with smart / container components, and dumb / display components. :-\\ &gt; Handlebars are a pain in the rear. If you want to do anything with any type of logic then you're screwed. Can you explain this a bit further? here is an example of logic happening: ``` &lt;div class='message-header'&gt; &lt;span class='from'&gt; {{#if hasSender}} {{#link-to 'chat.privately-with' @message.from}} {{senderName}} {{/link-to}} {{else}} &lt;em&gt;removed&lt;/em&gt; {{/if}} &lt;/span&gt; &lt;/div&gt; &lt;p class='message-body'&gt; {{{messageBody}}} {{#if (is-present urls)}} &lt;div class='flex flex-wrap'&gt; {{#each urls as |url|}} &lt;EmbeddedResource class='flex' @url={{url}} /&gt; {{/each}} &lt;/div&gt; {{/if}} &lt;/p&gt; ``` [source](https://gitlab.com/NullVoxPopuli/emberclear/blob/master/packages/frontend/src/ui/components/chat-history/message/template.hbs) &gt; The reason for Handlebars eludes me entirely. so, handlebars is a superset of html, which means you can use `class` and every other html attribute. See this comment I replied with to someone else in this thread for more syntax things: https://www.reddit.com/r/javascript/comments/9cp8j2/serious_what_are_peoples_thoughts_on_ember_how_do/e5cl46i/ The update model of a component is really cool, I think. because properties _used_ in your component are only computed when they need to be. whereas in react, they are computed every render. So, [this is kind of a big component](https://gitlab.com/NullVoxPopuli/emberclear/blob/master/packages/frontend/src/ui/components/chat-history/message/component.ts) (it's the js for the above template), but it shows the dependent keys for all the properties' computed values. Later this year the dev team is going to make it so you don't even need to specify the dependent keys, like what Vue does. :) &gt; There might be a purpose to it but I've always found working with it to be exhausting. that's fair -- how much time have you spent with it? / how long ago?
From a different perspective: In what cases is it useful to know whether an object is empty or not? Most often I only care about specific properties.
&gt; Internet Explorer 5 is not currently your default browser. Would you like to make it your default browser? FUCK YES DUDEEEEEEEEEEE
So you can call webgl directly from webasm? Or do you mean it translates to js webgl calls? 
😂
Ember's main sticking point for me is small teams + high productivity. This applies to an application in a large organization or your own indie application. You are able to move very quickly given the addon ecosystem and high convention. There are downsides; however, Ember and the community has proven over and over again that it will solve those problems.
I wept a little bit
If you just want to check if an object is empty your solution is great, I wouldn't import external lib just for that and if u dont want to write all of that everytime why dont u just create your own function that will call that code? Maybe something like this: const isEmpty = obj =&gt; !Object.keys(obj).length isEmpty({}) // true isEmpty({ key: 'val' }) // false &amp;#x200B;
9th revision was released on june 2018, so this feature left the stage-4 and she's now in the official specification ;)
For the edited version, how do you know that's better and/or faster solution than yours? I think yours is more simple.
I've seen some back and forth discussing improving the documentation. I've had some trouble getting into ember (haven't spent a whole lot of time), but I'll definitely keep trying as they make it easier!
yay! this warms my heart :)
Minesweeper!
Apart from have a decent DOM api yet
Exactly this: `{{#if (is-present urls)}}` That `is-present` thing is a helper you need to register and deal with first. In React I would just do: `urls ? urls.map(url =&gt; &lt;Something {...url} /&gt;)` or something similar. JSX just feels like vanilla JS to me because it offers literally all of the processing power of JS, all its functions and the context of your code is fully available. Handlebars are just separating it into HBS files for... well, no apparent reason. I don't see the benefit. &gt; that's fair -- how much time have you spent with it? / how long ago? Last time was 2 years ago and I had been using it since 2012. So about 4 years in total in a professional setting. It just never struck me as particularly nice, always unnecessary. I come from a time where we did everything with XML and we used XSLT templates to render the frontend. So maybe that kind of syntax is more familiar to me when I'm using JSX. I've enjoyed working with Ember but never with its templating. And I tend to love writing HTML and CSS :) Just a personal opinion: React is easier and more intuitive to work with. Nobody really needs to learn a new thing. It's just HTML and JS combined, with a few caveats.
### Query-Params: * Work great for simple cases, like sorting a list of blog posts by title, createdAt, etc. * Must be declared in controller; must _also_ be declared in route if changing the query-param refreshes the model. This duplication is avoidable. * Can't easily be restricted by user role. For example, try declaring a query-param that can only be used if `user.isAdmin`. You'll come up against weird behavior on the initial render. See [RFC 192](https://github.com/emberjs/rfcs/pull/192) ### Ember-Data You're right that it doesn't have to be used. Some of my issues have been with poor project fit. But I've also found that ember-data is always the thing that is hard to upgrade. It seems to me like its internals leak through more than other projects. ### TypeScript `object.foo.bar.baz` is great… until one of those can be `null`. Null-safety was one of the great benefits of `Ember.get`.
Lol also noticed that
3 taps to double click. 1 is used to focus the phone, 1 more zooms and also selects the icon because it propagates to the container, and the third one opens the icon. It's not perfect because you're fighting the phone zoom effect. The developer needs to prevent zoom and focus the container for us. Maybe make an effect to show that the container is in focus.
Thanks for taking the time to elaborate! I super appreciate it. re: query-params -- interesting use cases. I hope to see some better support for that in the future. Do you have a solution for it today? how weird is it? re: ember-data, I'm with ya there -- from my perspective as well, it seems to have the most regressions between versions. I'm personally trying to help convert the codebase to typescript to catch these kinds of mistakes at build time before anything gets deployed. re: typescript yeah, typescript _makes_ you be very explicit with you want to handle that scenario. I know lodash's types are pretty good -- not sure how they're `get` works though for the nested case.
&gt; TypeScript. I wouldn't bother using TypeScript with Ember. TypeScript isn't (and probably can't be) compatible with Ember's get(object, 'foo.bar.baz') syntax. It should be noted that in modern Ember the `get` syntax is largely optional. 
function update() { setInterval (update, 1000); let... } update();
This should be shoved off into a utility function and kept in a helper module. The implementation is irrelevant.
&gt;Minesweeper! Goddammit ! Humanity is saved, we build a full OS in webassembly just to get the full experience of Minesweeper back in early 2000 ! &amp;#x200B;
You can polyfill Map if needed and use Map instead of Object. if (myMap.size === 0)
There's also [ember-cli-dotenv](https://github.com/fivetanley/ember-cli-dotenv) if you want to use a .env file.
If it can be written in native JS, and you don't have any Libraries installed to assist, I recommend something like this. It's not being called externally, it's light, it's re-useable, and it's yours. No disrespect to lodash; it's awesome. However, if you are adamant on using it, do what others here have mentioned and install the individual **isEmpty** bit from lodash.
I know this is /r/javascript but I seriously can't wait to do full stack Ruby one day
Details. This is Fabrice Bellard here. WebAssembly networking is just a matter of time and interest.
Welp, I played solitaire on [Windows 95](https://github.com/felixrieseberg/windows95), and now Windows 2000. When's the Windows XP port coming? I want to play some 3D pinball
It's x86 emation so he is emulating on the hardware and not the software/kernel level. 
Technically you can pass weapper methods around Dom functionality that you want to your wasm setup function from JavaScript. The thing is, at least how I understand it, calling JS from wasm is quite slow. Not sure if this extends to calling webgl being slow from wasm too.
\&gt; It seems where most people learn to hate ember is when their backend teams don't know what they're doing. :-\\ Probably a very valid point! To be realistic, I probably won’t try Ember again until React isn’t giving me something Ember does. But hearing that Ember can be a thinner layer does make me think more positively about it in hindsight. Thanks for your response!
`Object.getOwnPropertySymbols(p).concat(Object.keys(p)).length === 0;` &amp;#x200B; This will check for any Symbols in the object as well, Object.keys doesn't see SYmbols &amp;#x200B;
Thanks for taking the time to provide some thoughts! :) &gt; Basically the problem is that you end up doing a lot of manual loading, and state management I'm not familiar with this situation, could you go in to a bit more depth? ------------------------------------------ &gt; The Ember Object model is crusty, though I doubt we'll be using it for much longer. We're fast approaching a world where it'll be a relic. I agree. It came from a time pre-babel. Which is kind of unfortunate timing. What is cool now is that you can use native js / ts for everything -- see my series of tweets on all the new stuff: https://twitter.com/nullvoxpopuli/status/1036082782890614786 (in case you haven't been keeping up to date with all the bleeding edge stuff) &gt; No clear real time solutions. Web sockets are a thing, and we're not really talking about them as a community. I'm using websockets in https://emberclear.io (with a phoenix / elixir backend). Here is how I manage a websocket connection with concurrency-handling via ember-concurrency: https://gitlab.com/NullVoxPopuli/emberclear/blob/master/packages/frontend/src/services/relay-connection.ts But I do agree that having some baked in super nice solution would be stellar. graphql for ember has this, and I think it'd be awesome to see something similar added to ember-data / jsonapi as a whole.
I think its important to remember this is functionality that is specific to VSCode. Anyone hoping to actually make their JS code more type-aware should really look into TypeScript; especially library authors. Every other IDE isn't able to take advantage of these type-comments. 
thank _you_! if you have any questions that come up, feel free to ask! :D :)
Thanks for the feedback! I have spent some time looking at redux and it seems more interesting than I imagined. I did not know it had a sub/pub built in and was done in a functional style... and most importantly only 2k :) I can't help but think you might be guilty of breaking the KISS principle, and the premature optimization principle. You mention avoiding using a library 'for no reason', but I can immediately think of a lot of reasons not to use someone else's library for just about any situation. This logic seems backwards, we need a reason TO use an external library rather than not to use one? What if I am doing a computer game with many objects and they all have their own state with things like xPosition, yPosition. Surely redux or similar would be crazy keeping each previous state on an update? What solution would you use in this case? Cheers.
The gist is that since every relationship you define in Ember Data is, by default, async, you have to load it at some point, and deal with the loading, loaded, and error state. Obvious, right? What's not obvious is when and how you load this data. * Do I load it in the route? Okay, fine, but now when I \`instance.get('myRelationship')\` I'm dealing with a Promise Proxy. Barf. * Do I load it in the template? Probably not a good idea, and handling loading and error state is gross. There are helper solutions to this, but they tend to muddy the water by requiring a series of helpers that invariably end up with an unwrap helper. E.g. [https://github.com/fivetanley/ember-promise-helpers](https://github.com/fivetanley/ember-promise-helpers) * Do I use Ember Concurrency? This works pretty well overall. In some ways it's similar to the above, but at least you have a single function to coordinate the work. I tend to prefer this approach.
Thanks both. I'm still unable to get it to update however. I've tried both setinterval and timout... but it still only updates the clock when i refresh the page. My code looks: *function* updateClock () { setTimeout (updateClock, 1000); *let* hours = today.getHours(); *let* mins = today.getMinutes(); *let* secs = today.getSeconds(); *let* display2 = document.getElementsByClassName("alteringtext2")\[0\]; display2.textContent = (hours + ":" + mins + ":" + secs); if (hours &gt; 11) { display2.textContent = (hours + ":" + mins + ":" + secs + " PM"); } else { display2.textContent = (hours + ":" + mins + ":" + secs + " AM"); } } updateClock(); &amp;#x200B; &amp;#x200B; Am i missing something? 
\&gt; ember-concurrency is great. and it's one of the bigger things I miss while in react-land. Indeed. Honestly it's so integral to modern Ember that it should be moved into the framework directly.
You could use WebAudio to simulate a modem https://github.com/martme/webaudio-modem/
Do you get any errors in console? It might help if we know what the second script does 
hmm -- I wonder if anyone has tried an RFC for this. cause.. that'd be great. at the very least, it'd be cool to see it become part of the default blueprint.
Thank you so much for this info. I was really confused about creating data, I thought the goal was to write directly to the Json file. But it looks like I need to check out mongoDB or something to create data and store it. Thanks!
Another non-Lodash solution which I have used before is to wrap the value in an expression then try catch it. ` let myNested = { property: [ 123, 456 ] }; function getTruthy(value, defaulted) { try { let tried = value(); return tried || defaulted; } catch(e) { return defaulted; } } // 123 getTruthy(() =&gt; myNested.property[0], null); `
Now what is web assembly? Is it running Windows 2000 on a server somewhere? Or is my iPad actually trying to boot up Windows inside of safari?
This works so smoothly it's disturbing
This has it! I just played for a few minutes and was delighted to find that I'm just as bad as ever.
It is actually running / booting locally in safari. Assembly is a really low level way to talk to hardware. So low level that almost all programs that are coded with a programming language that is vaguely understandable for humans are most likely transformed into some kind of assembly specific for a processor architecture. Assembly then tells the hardware what it should do to get the desired results. Honestly im not really sure how this all works but my uneducated guess is that somewhere allong the line this thing is translating the normal assembly stuff done by the windows 95 to something similar within webassembly. On the fly. Correct me if im wrong, im really interested in this and hope to fully understand it someday. 
 console.log('x is:', x) console.log(`x is: ${x}`) console.log('x is: ' + x)
What's powerful is the hardware that you're holding in your hand.
Something like const {attachments: {data: [{media: {image:{src} = {}} = {}}] = []}} = {}} = post Then you can use src Btw written in phone so syntax could be wrong slightly 
that's fixes it thanks i know it is easy for you i'm a beginner :p
log() is a function of the console object, so it works just like any other function, so you pass it values as you would any other function. The only real difference is that this function can handle multiple arguments (as shown already).
YOU MUST CONSTRUCT ADDITIONAL PYLONS
Performance-wise, calling Object.keys is extremely wasteful. If the object you are testing to see if it’s empty happens to have 100 properties, Object.keys will allocate a new array with space for 100 string pointers, only to check if it has length 0 and later garbage-collect it. Also, why do comment threads here keep bouncing back and forth between isEmpty and isEqual? Calling isEqual with an empty object allocates a new object just to do a comparison with it, not to mention bringing in isEqual as a dependency (if you are going for minimalism) brings in a ton of code to do deep and shallow equality on objects, arrays, typed arrays, etc. Either depend on lodash/isEmpty or copy and paste the six lines starting here into your own function: https://github.com/lodash/lodash/blob/6018350ac10d5ce6a5b7db625140b82aeab804df/isEmpty.js#L61
It's literally trying to run on your ipad. It's not running on a server. In the past there was asm.js, a subset of javascript that could be compiled into efficient assembly code. WebAssembly builds on its success, filling in the feature/performance gaps that can't be expressed well as javascript, and giving it a binary format.
 var data = {}; var string = "1^count$3^dfn$EIGHT,PATIENT^patname$BEHAVIORAL^flag$ZZ ALBANY-PRRTP^orgsite$ZZ ALBANY-PRRTP^owner$N/A^reviewdate$0^due$INACTIVE^status$NEW ASSIGNMENT^action$07/07/2005^assgndt$PROVIDER,PRF^approvedby$shows signs of potential violence^narr$New record flag assignment.^comment,\n2^count$3^dfn$EIGHT,PATIENT^patname$HIGH RISK FOR SUICIDE^flag$CAMP MASTER^orgsite$CAMP MASTER^owner$11/18/2018^reviewdate$75^due$ACTIVE^status$INACTIVATE^action$12/18/2007^assgndt$PROVIDER,ONE^approvedby$TEST^narr$NA^comment,\n3^count$3^dfn$EIGHT,PATIENT^patname$WANDERER^flag$CAMP MASTER^orgsite$CAMP MASTER^owner$08/10/2018^reviewdate$-25^due$ACTIVE^status$INACTIVATE^action$12/18/2007^assgndt$PROVIDER,ONE^approvedby$TEST ASSIGNMENT^narr$NA^comment,\n" var arr1 = string.split('\n'); for(var i = 0; i &lt; arr1.length; i++){ var arr2 = arr1[i].split('$'); for (var j = 0; j &lt; arr2.length; j++){ var arr3 = arr2[j].split('^'); if(!data.hasOwnProperty(arr2[j])) data[arr3[1]] = arr3[0]; } } console.log(data); Hey there. So i tried implementing your code and it seems to be working but I have a question. So my string compared to the one I gave you has more to it. The way we differentiate between keys/values is with a $ sign so i switch the comma to that. I also have to add in another loop to handle the first split which is a \\n return character. So at this point there are 3 arrays within 1. &amp;#x200B; When I console.log(data) it only returns the object from the last array. It seems like it just skips over the first 2. &amp;#x200B; Is there something i'm missing to handle multiple arrays? 
yeah i had 1 before and it did the same thing but let me recheck. One second. &amp;#x200B;
What is this data?
The `HIGH RISK OF SUICIDE` made me curios.
Did you change `arr2` to `arr3`?
&gt;'$' was used before it was defined. Your code is before the \`jQuery\` script. Either put the scripts first or wrap your code in an \`onload\` handler. [https://stackoverflow.com/questions/588040/window-onload-vs-document-onload](https://stackoverflow.com/questions/588040/window-onload-vs-document-onload)
To add on to that, I think there's a lot of value in opinionated design. Even with React it's worthwhile to have one. The nice thing about React is that you can design it for your specific team and use case in mind. It requires extra effort to enforce though (like stricter code reviews).
Using third party libraries to evaluate simple equality checks? A true indicator of the state of 2018 JS development.
Can it run Chrome and inside Chrome can I load this link? Can it run Chrome and inside Chrome can I load this link? 
This check smells - maybe just use null instead of empty object.
Oh nice will test it! So bad we can't get the web from 2000 too! 
Like, I should upload a music and it can read it? Or try to get a stream for IE? 
If you're using docker you can deploy them as multiple containers on a Linux webapp. Otherwise you could deploy them as two separate web apps, one for the server and one for the client. I'm not sure how to deploy both to the one app as we use docker for that 
Sorry you got downvoted but you're 100% right. Absolutely ridiculous.
Apart from IE 11 being a bit finicky, there isn't really a reason I could think of as to not use `Map`. Think it just comes down to people being used to using objects for the same reason. 
I like this joke :D But i tend to be agree with it seriously, maybe with WebAssembly one day facebook etc. will be full in webasm and we'll not be able to inspect anything anymore, at least not with the same facility :(
On my laptop, IE starts in just a few seconds. Over a minute later and Firefox is still starting. Checks out.
{count: "1", dfn: "3", patname: "EIGHT,PATIENT", flag: "BEHAVIORAL", orgsite: "ZZ ALBANY-PRRTP", …} {count: "2", dfn: "3", patname: "EIGHT,PATIENT", flag: "HIGH RISK FOR SUICIDE", orgsite: "CAMP MASTER", …} {count: "3", dfn: "3", patname: "EIGHT,PATIENT", flag: "WANDERER", orgsite: "CAMP MASTER", …} &amp;#x200B; That's the expected result. That one only returns the last object which in the beginning is count: "3" &amp;#x200B; I did change the one line you said from arr2 to arr3 and changed the j to a 1. &amp;#x200B;
"Today I learned that something called the Lerna project has added a codicil to its MIT license denying the use of its software to a long list of organizations because it disagrees with a political choice those organizations have made." Open source software is just that well said politicians need to stay out of software development.
OK, so code looks like it: window.onload = function () { var arrow = $("#arrow a"); $("#arrow").on("click", function () { $("html, body").animate({ scrollTop: $("main").offset().top }, 700) }); }; But I still get errors like jQuery is not properly loaded. Should I change Brackets to VSC or what? :|
Try this. var data = []; var string = "1^count$3^dfn$EIGHT,PATIENT^patname$BEHAVIORAL^flag$ZZ ALBANY-PRRTP^orgsite$ZZ ALBANY-PRRTP^owner$N/A^reviewdate$0^due$INACTIVE^status$NEW ASSIGNMENT^action$07/07/2005^assgndt$PROVIDER,PRF^approvedby$shows signs of potential violence^narr$New record flag assignment.^comment,\n2^count$3^dfn$EIGHT,PATIENT^patname$HIGH RISK FOR SUICIDE^flag$CAMP MASTER^orgsite$CAMP MASTER^owner$11/18/2018^reviewdate$75^due$ACTIVE^status$INACTIVATE^action$12/18/2007^assgndt$PROVIDER,ONE^approvedby$TEST^narr$NA^comment,\n3^count$3^dfn$EIGHT,PATIENT^patname$WANDERER^flag$CAMP MASTER^orgsite$CAMP MASTER^owner$08/10/2018^reviewdate$-25^due$ACTIVE^status$INACTIVATE^action$12/18/2007^assgndt$PROVIDER,ONE^approvedby$TEST ASSIGNMENT^narr$NA^comment,\n" var arr1 = string.split('\n'); for(var i = 0; i &lt; arr1.length; i++){ var arr2 = arr1[i].split('$'); for (var j = 0; j &lt; arr2.length; j++){ var arr3 = arr2[j].split('^'); var tmp = {}; if(!tmp.hasOwnProperty(arr2[j])){ tmp[arr3[1]] = arr3[0]; } data.push(tmp); } } console.log(data);
Is this really web assembly? I have checked the source can only found two Javascript files, term.js and jslinux.js: "term.js" I understand is a JavaScript console/terminal and "jslinux.js" is, I presume, a Linux like emulator in JS. So where does web assembly come?
Thank you, fatgirlstakingdumps!
You will need to install the newest Chrome and I'm not sure you can)) By default there is only IE5 and FF12
I've heard high praises for it, but that because it isn't as widely used as its competitors, choosing it could making finding a job using that framework or hiring someone who knows how to use the framework a more difficult task. So I kind of made the decision that I'll probably stick with react and vue. 
 const isEmpty = obj =&gt; !Object.keys(obj).length; ​is slightly shorter, and since `Object.keys` always returns an array you don't have to worry about non-numeric values for `length`.
Were you able to connect to a server with putty?
Because Map is awkward vs. `{a: 1}`, and doesn't offer any real benefit? Map is more performant, but it doesn't make a *meaningful* performance difference in 99% of cases, and otherwise its inferior.
\[Nice\]([https://i.imgur.com/5SVdJkC.png](https://i.imgur.com/5SVdJkC.png)). Can we go deeper?
Web Assembly is _super_ powerful. It's only ~10% slower than native byte code. The shit is bananas. 
Use knex, or even better, objection.js. They are not ORM.
Blimey, you are like a one man Ember-bot army!
Instructions clear. Phone still opened a portal to some eldritch dimension and sucked itself in.
Not sure how you can describe code as powerful honestly. You need the processing power to handle all that in a reasonable amount of time and also execute the code.
thanks! I just care a lot, that's all. &lt;3 
I see that :-)
&gt; To do an object dictionary properly, you need to declare it as const foo = Object.create(null); Huh? What's wrong with object literal syntax?
If you're doing symbols, I would use `getOwnPropertyNames`, as well, to catch non-enumerable string properties. Additionally, I'd write it in a way that doesn't create a third array: const isEmpty = obj =&gt; Object.getOwnPropertySymbols(obj).length + Object.getOwnPropertyNames(obj).length === 0 &amp;#x200B;
No, I loathe Firebase. If it's multiplayer you should use a DB or DBaaS. [React context](https://reactjs.org/docs/context.html)
Does Lodash method count?
Helps that half the login time is spent getting a very pre-WHATWG `mshtml.dll` up for the shell.
LOL why the Firebase hate? Just curious, haven’t used it enough to develop an opinion. DB or DBaaS like a cloud service (maybe AWS S3)? Was considering MongoDB or learning GraphQL. Text RPG is more story-line and puzzle based. Thanks for the link!! I had no idea this was a thing, you’ve expanded my React world!
I think this question on stack overflow is related to your problem https://stackoverflow.com/questions/42796499/p5-js-libary-the-random-function
... or you can just use `hasOwnProperty` or, better yet, use libraries that already have it baked in.
[This](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random) MDN page should help you. Math.random() * (max - min) + min \^From the linked page should solve your issue.
This tool looks nice. I've added it to my list [https://github.com/hex13/javascript-visual-explanations](https://github.com/hex13/javascript-visual-explanations) (it's a list of links to pages in which concepts from JavaScript/frontend ecosystem are explained visually - pictures, diagrams, animations etc.)
ohno
I meant powerful as in very empowering to developers. 
Your RPG will have a lot of relations and some non-relational, so I'd recommend a relation DB with a JSON datatype. GraphQL isn't a database at all; it's an alternative to REST.
I've used webpack quite a lot but not for this specific use case. I think it's possible and not too hard with webpack. A repo like this ([https://github.com/alexnoz/webpack-pug-scss-boilerplate](https://github.com/alexnoz/webpack-pug-scss-boilerplate)) gets you most of the way there. That said, this might be easier with Grunt/Gulp if you are more used to those tools or manual processes.
If you include Lodash just to work with object literals, something is wrong with you.
WASM wouldn't run in browser available for Windows 2000. */partypooper* ^(..i think)
If you don't want to import an entire library you can just use this: export const get = p =&gt; o =&gt; p.reduce((xs, x) =&gt; (xs &amp;&amp; xs[x] ? xs[x] : undefined), o); use it like get(['attachments', 'data', 0, 'media', 'image', 'src'])(post) it is curried so you have to call it like that. Returns undefined if the path isn't valid. 
&gt;Optional Parameters &gt; &gt;`Use []` `around a property name to indicate that it is optional. Although JSDocs has several ways to indication optionality, this is the only technique that works with Visual Studio Code and TypeScript.` Is WRONG. It is better to use the `=` sign as this is also compatible with the closure compiler and is the same syntax as the ES6 optional parameter... double win! [https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler#optional-parameter-in-a-param-annotation](https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler#optional-parameter-in-a-param-annotation) &amp;#x200B; /\*\* \* @param {string=} textAlignment \*/ constructor( textAlignment = 'center', ) 
I wasn't aware developers were short options. Frankly this whole make web apps instead of desktop one seems lamentable to me.
Enjoy staying in the past
This is pretty inefficient. An `isEmpty` function could return `true` immediately if there are no keys, and `false` otherwise, but with this implementation performance (in terms of both time and space) will degrade linearly with the size of the object. In other words, the further you get from not being empty, the worse this will perform. Altogether going with this approach probably won't have a huge impact on performance*, but it's still kind of irksome to see an O(1) problem given an O(n) solution. \* And it's possible some browsers can optimize something like this away
I am not more familiar with those, but that's what I was going to review next if it wasn't possible with Webpack. Is it easy to do something like this with either of those out of the box?
We should use abici instead of calculators too
Could you suggest an O(1) solution? To my knowledge every method would involve enumerating the keys at the least.
If you are going to use `hasOwnProperty` for every check, you might as well just use `Object.create(null)`, time is precious.
 const isEmpty = o =&gt; { for (var i in o){ if (o.hasOwnProperty(i)) { return false; } } return true; } My point is that you don't need to iterate over every key (you can bail out on the first hit). You also don't need to instantiate an array of all the keys in-memory, which `Object.keys` will do.
You've got my upvote for recommending fuse
... or just use object literals and Lodash like a normal, sane programmer.
Really not the same thing. Discord has a web client but that doesn't make it better than a desktop client.
Nothing more to say. https://www.destroyallsoftware.com/talks/the-birth-and-death-of-javascript
Your snippet and mine have the exact same profile; [https://i.imgur.com/yENu4mk.png](https://i.imgur.com/yENu4mk.png) Stage 1 uses 152mb of ram, before anything has executed with object in memory. Stage 2 uses 167mb, a delta of 15mb, after doing object keys. Stage 3 uses 182mb, a delta of 15 mb after your suggested method. Each execute in the same amount of time also, I think your suspiscion about V8 being smart are probably correct. `const testObj = {};` `for (let i = 0; i &lt;= 1000000; i++) {` `testObj[\`key-${i}\`] = true;` `};` `const isEmptyObjKeys = obj =&gt; !Object.keys(obj).length;` `const isEmpty = obj =&gt; {` `for (var i in obj){` `if (obj.hasOwnProperty(i)) {` `return false;` `}` `}` `return true;` `}` `const used = process.memoryUsage().heapUsed / 1024 / 1024;` `console.log(\`The script uses approximately at stage 1 ${Math.round(used * 100) / 100} MB\`);` `console.time('Object keys')` `isEmptyObjKeys(testObj)` `console.timeEnd('Object keys')` `const used2 = process.memoryUsage().heapUsed / 1024 / 1024;` `console.log(\`The script uses approximately at stage 2 ${Math.round(used2 * 100) / 100} MB\`);` `console.time('Suggested way');` `isEmpty(testObj)` `console.timeEnd('Suggested way')` `const used3 = process.memoryUsage().heapUsed / 1024 / 1024;` `console.log(\`The script uses approximately at stage 3 ${Math.round(used3 * 100) / 100} MB\`);` &amp;#x200B;
Might wanna brush up on your big o notation kiddo
Who cares if it's less efficient to import and compile lodash, we need to know if this object is empty!
Too late, lodash is the solution. Full steam ahead for importing all of lodash for a single function. Just in case you need something later.
What are you talking about? This will only ever pass through the loop at most once, regardless of the size of the object. It's O(1) in both time and space complexity.
That's probably because of my double use of a property accessor. In V8, \`try\` / \`catch\` sidesteps the optimize compiler, which should make the \`try\` / \`catch\` method slower. Try benchmark it against this version: var image = path(post, ['attachments', 'data', 0, 'media', 'image', 'src']); function path(obj, keys) { return keys.reduce(prop, obj); } function prop(obj, key) { var value; return !isNil(obj) &amp;&amp; !isNil((value = obj[key])) &amp;&amp; value || null; } function isNil(value) { return typeof value === 'undefined' || value === null; } &amp;#x200B;
That is functionally equivalent to the more readable: post.attachments.data[0].media.image.src &amp;#x200B;
It also returns undefined if the value at the path is falsey. (false, '', \[\], {}, null, undefined, 0, -1, -2, ..etc)
Video course available on Udemy: [https://www.udemy.com/draft/1880978/?couponCode=ANIMEJSCP\_20](https://www.udemy.com/draft/1880978/?couponCode=ANIMEJSCP_20)
if you want efficency, I'd say try the following but it's ugly tho ```javascript function isEmpty(obj){ if (obj){ // check if obj is null or undefined for(var k in obj){ // if there's anything in the object we know it's got something so it's gotta be not empty return false } } return true // all other conditions failed to detect if the input is not null or a non-empty object } isEmpty({}) isEmpty({foo: "bar"}) ```
The loop grows in size as the object does, so it’s not O1, but On as it scales linearly. It may exit early but on average increasing the number of keys in the object by 100x, your function would take 100x longer 
Or you could just use the Map class instead of doing all types of hacky fuckery to make an object work like you want/expect it to. 
... and have your site break in IE11, excellent idea! Personally I consider stuff that doesn't work in my users' browsers because it's super new and not fully supported yet more like "hacky fuckery" than using the basic constructs Brandon Eich gave us over a decade ago.
This is a beautiful example
&gt; image = path(post, ['attachments', 'data', 0, 'media', 'image', 'src']); &gt; That one also returns null if the value at the path is an empty string. Good solution otherwise though. 
I've used Ember recently and I probably won't go back to using it again. Here's a few reasons why it wasn't for me. 1). Where did my component from? Was it an addon? Was it an addon's addon? I had no idea where anything came from and it was magical. With React / Vue you have import statements telling you where the components came from (majority case unless you specified a global component), in Ember, you import an addon in your app that may come bundled with all sorts of components. I remember writing a new component just to find out another component existed with the same name and it took hours to figure out where it was being imported. 2). Ramp up time was incredibly long. It took me a few weeks with Angular, a few weeks for React, about 2 days or less with Vue, and a few months with Ember and still had a difficult time remembering how to do things. Arrays were particularly painful, and I had to consult the Ember API on a daily basis. This especially made it difficult to teach Junior developers because of all the gotchas. 3). No Hot Module reloading (yet). Sure this may not seem like a big deal, but having to make a change and reload the entire page and lose all your state was painful. Coming from React, transitioning to Ember felt like taking a few steps back. 4). Handlebar templates were too restrictive. Sure adding logic in the templates is a religious debate, but I had to add quite a few helpers to do what I wanted my template to do. We even pulled in a library full of template helpers like gt or lt helpers because the template didn't support it. 5). If it's not JSON API, you might have a bad time. Ember is very opinionated about your project. Your backend developers will have to cater to the front end, and I feel that's very restrictive. Ember devs encourage the use of Ember Data, and if there's not a plugin for the API you need to support, you will need to learn to create your own adapter to make it work. ----------------- Passing the downsides, I really did think they had a good idea with the CLI and upgrading the project was something really well thought out. That was one of my favorite things about Ember, and I feel that Vue is actually getting there with their latest rollout of Vue CLI. I could see Ember being a great choice for a project that spans numerous teams that need a heavily opinionated process. But with that comes with a project that's hard to change it's ways. I'd much rather run a little risk and have lots of flexibility. You should really play around with Vue and see why people have enjoyed it so much. The concepts are very simplistic, the CLI is great, everything is JavaScript and Arrays are cage free, but best of all - I mold the project to what it needs to be, not how my JS framework tells me how it should be.
At the bottom of the page you should see an "Export" button. You can click that and download a ZIP of the pen to your computer. 
Yeah, I'm not much of an artist. I like Reason logo because it looks like extended JS logo.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [ChromeDevTools/devtools-frontend/.../**console** (master → 39452ff)](https://github.com/ChromeDevTools/devtools-frontend/tree/39452ffb18d2316a5d643a8fff3e6768939f4c63/front_end/console) ---- 
Thx, I will check this out !
Probably not the best place. If you have more questions, I'd recommend coming by Babel's Slack support channel since it's the easiest way to get answers to quick back-and-forth questions. The info is at https://github.com/babel/babel#looking-for-support If you're coming from Babel 6.x, I'd recommend reading http://babeljs.io/docs/en/config-files#6x-vs-7x-babelrc-loading first. With a monorepo, you probably want a http://babeljs.io/docs/en/config-files#project-wide-configuration at least. Whether or not you have to do work to get Babel to detect your config depends on how you're running Babel though, since `babel.config.js` is loaded from the working directory, so if the monorepo root isn't the working directory, you need to pass Babel extra params to tell it where your config file is.
She's an amazing presenter. I still remember her talk from elixir conferences.
We started our very first app in Ember a little over 3 years ago. If I remember correctly 1.12. Luckily our app wasn't very large for the 1.13 upgrade (that caused some issues with others), but recently we upgraded that application to Ember 3.3, by just fixing the deprecations. Our code has only become healthier. &amp;#x200B; Ever since we have migrated most of our front-end logic to Ember, and have written new applications in Ember exclusively. &amp;#x200B; I often ask others, give me an example of a Javascript app built 3 years ago, that is now running on the latest version of whatever framework you've chosen back then. Without considerable effort, or rewriting everything from scratch? I have yet to hear an acceptable answer to that question. Only for that reason Ember is worth choosing. If you consider that since we started, Ember changed the underlying rendering/view layer 2 times to improve performance, and we didn't have to do anything for that, just upgrade to the latest version. &amp;#x200B; I am glad we have chosen Ember 3 years ago, and still love writing applications in it. I have tried Angular, React and Vue, but honestly I keep getting back to Ember, even for my personal projects. Ok, the learning curve to get into Ember is higher if you compare it to React or Vue, but the time investment is well worth it and pays back in development time many times. &amp;#x200B; Also, **Conventions** \&gt; Having endless debates in our team what way to structure our app, or what new flavor of the month package to use
And a scary example of user tracking. “Hey, you’re not looking at the ad, you can’t watch this video, sincerely, YouTube”
yeah had a feeling this wasn't a good place but thanks for helping! Didn't know about the slack channel :).
Based on the docs, it seems that p5.js adds random() to the global scope.
In an older project, I had to write a web based configuration interface. I ended up using PrimeUI, jQuery, and code that worked [like this](https://dpaste.de/ebSv). In this example, I keep application state in the Network object (states like the SSID, passphrase etc). Code inside Network would then synchronize the UI elements and these states. The wschannel would update the states by calling functions from Network, which in turn update the states and the UI elements. So if I used React here, the part that updates the UI element once the states are updated would be taken care of, right? And besides introducing React, what would you do to improve code like this?
I am way too tired to open up my laptop and 100% verify my answer, but I think you wanna look up variable hoisting 
as far as I know 'let' and 'const' do not support hoisting. Hoisting only works with 'var'
Had to do some learning tonight, but this stackoverflow says that all things are hoisted, but there is a slight difference to let and const vs var https://stackoverflow.com/questions/31219420/are-variables-declared-with-let-or-const-not-hoisted-in-es6 It’s interesting that it seems to suggest that calling “typeof” doesn’t count as accessing the variable, but if you were to do say “
[They are hoisted](https://stackoverflow.com/a/31222689)
The issue is that `typeof` basically [allows undefined types as its operand](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof) without any risk of runtime error. In fact, if I am reading [the spec](https://www.ecma-international.org/ecma-262/6.0/#sec-typeof-operator) correctly there is no way to actually throw from `typeof`. That's why it is so much safer to use than, say, `unknownType.constructor`, even if it is less informative. Your intuition is correct though that it should be undefined because it is out of scope.
Try just running: console.log(typeof value); The result is `"undefined"`. The [typeof operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof) return `"undefined"` when you pass something that hasn't been declared in the current scope. And `let` makes `value` only defined in the block scope inside the `if`. Try /r/LearnJavascript for this type of question.
thank you
This isn't hoisting: it is an automatic globals issue. At that point value \*is\* undefined. Using it without declaration makes it an automatic global variable. To stop this happening you can use [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode#Converting_mistakes_into_errors) to force declaration (i.e. error when using an undeclared variable). &amp;#x200B; The block scoped "value" declared by your "let" statement is just that. It overrides the automatic global within that block only, just as it would if you had actually declared "value" at global scope, it is not being hoisted out of the block. &amp;#x200B; So you have two "value"s: one global that was declared automagically and one that exists only in (and takes precedence in) the scope of that one block.
For future reference, lodash provides imports for individual functions, so there's no need to import the whole library. https://www.npmjs.com/package/lodash.map
No, sorry, but that's not correct. Using `typeof undeclaredThing` does **not** generate a global variable. You can just try it in your console or anywhere. console.log(typeof undeclaredThing); // "undefined" console.log(undeclaredThing); // ReferenceError: undeclaredThing is not defined 
https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet#GUIDELINE_.233_-_Use_document.createElement.28.22....22.29.2C_element.setAttribute.28.22....22.2C.22value.22.29.2C_element.appendChild.28....29_and_similar_to_build_dynamic_interfaces
This error occures beacuse you are trying to reach the API from localhost:3000 which is a cross origin for the API. I've read the articles and saw that (if I'm not mistaken) Zoho doesn't have an option for disabling cross origin access. If you can reach the API codes maybe you can disable cross origin with: app.use(function (req, res, next) { res.setHeader('Access-Control-Allow-Origin', 'http://localhost:3000'); //and other headers you may want to add } Or maybe if it's possible add `{mode:'no-cors'}` to place where you are making API request (in your React app).
I'm not using Express to serve my files. Create-React-App is using the webpack dev server to do that. How do I set headers in that case?
An article on promises with node in 2018 which totally forgets to mention async/await ?
You're right it does sidestep it in older versions of V8, not newer versions however... https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#2-unsupported-syntaxhowever I updated the test with the new snippet. It still pales in performance comparison to using the `try catch` it would seem. Interesting result, as using a `try catch` would be the most readable solution in my opinion. 
Hello redditers! OP is here. My company have been working on lots of react native projects recently and we have extracted some sort of a starter project that helps us to bootstrap development of mobile applications. We decided to give back to the community and open sourced it. I would appreciate your feedback and comments! Thank you
That’s not the scary part. [This is](https://www.frontiersin.org/articles/10.3389/fnhum.2018.00105/full). You can use eye tracking to detect the user’s personality.
thanks for taking the time to write about your experiences! I super appreciate it. :) I understand the your concerns, and wanted to let you know that the future is not bleak! &gt; Where did my component come from? Was it an addon? Was it an addon's addon? This is something no one likes. Ember is and has been moving to a point where everything can be known for certain -- because the goal is to allow "go-to definition" from within templates, and other static analysis tools provided by the IDE. This was actually _just_ talked about recently on this podcast: https://twitter.com/emberweekend/status/1037009097969819648 There is also this RFC describing exactly how to tackle the problem of uncertainty: https://github.com/mixonic/rfcs/blob/mu-packages/text/0000-module-unification-packages.md (and this is one of the RFCs talked about in the podcast) but yeah.. that paid you describe is very real. But it should be gone with the release of "module-unification". :) --------------------------------------- &gt; Ramp up time was incredibly long. I think this is partially because of how ember has been taught in the past -- too many software engineering concepts right out of the gate, perhaps. Ember now has a learning team and is very aware of this common feedback. They have some guides being reviewed right now that have a component-first focus, services second, and then everything else ember comes after that -- but components and services are the key pieces to understand ember. :) ---------------------------------------- &gt; I had to consult the Ember API on a daily basis. I do this professionally for every thing I use. Not just for ember, but for react, orbit.js, bigtest.js, typescript, etc. looking up API docs isn't a bad thing. that said, typescript helps you out a ton of with intellisense. :) ----------------------------------------- &gt; No Hot Module reloading (yet). Personally, I've never found value in this when working on react projects, but I know a lot of people care A LOT about it. There is some experimental work going on with HMR: - https://github.com/toranb/ember-cli-hot-loader - https://embermap.com/topics/the-embermap-podcast/toran-billups-on-hot-reloading Currently, the default ember dev server just hot-reloads styles. I personally have no idea when hot reloading will land in ember's default blueprint, but I haven't asked. ---------------------------------- &gt; Handlebar templates were too restrictive. this thread (in this same reddit post) may be a good read: https://www.reddit.com/r/javascript/comments/9cp8j2/serious_what_are_peoples_thoughts_on_ember_how_do/e5dogkt/?context=8&amp;depth=9 there are some pretty slick solutions to the problem you describe. and the ember-core team has been thinking about adding more general helpers to the language. it's just that no one has opened an RFC for it yet. ------------------------------------ &gt; If it's not JSON API, you might have a bad time. ember-data is optional :D you could use apollo + graphql, or just fetch if you wanted. :) &gt; Your backend developers will have to cater to the front end, and I feel that's very restrictive. This isn't true, and is a really bad practice. Granted, API design is really hard to get right, and I think focus on it is undervalued. &gt; Ember devs encourage the use of Ember Data, and if there's not a plugin for the API you need to support, you will need to learn to create your own adapter to make it work. This is actually beautiful -- though, maybe it's heavy for your particular project, but if your API has _any_ conventions -- you can implement those conventions using serializers and adapters so that your data on the frontend is normalized. The backend should definitely not cater to the frontend, but sometimes the frontend needs to make up for weirdness in an API implementation. The pattern of serializers and adapters with models is tried and true, and is even used on a lot of backends as well. :) ---------------------------------------- &gt; That was one of my favorite things about Ember, and I feel that Vue is actually getting there with their latest rollout of Vue CLI. &lt;3 Also, Vue has that slick GUI thing right now, made all the ember people jealous. lol (so some ember folks are working on implementing a project GUI) --------------------------------------- &gt; But with that comes with a project that's hard to change it's ways. This is actually fine. Large projects or long-lived projects do not want to go through re-architectures. :) ----------------------------------------- &gt; I'd much rather run a little risk and have lots of flexibility. to each, their own :-p &gt; You should really play around with Vue and see why people have enjoyed it so much. On the to-do list! :D Thanks again!
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [mixonic/rfcs/.../**0000-module-unification-packages.md** (mu-packages → eabb012)](https://github.com/mixonic/rfcs/blob/eabb012db395d12ac105f13c61d5e0312e37d68c/text/0000-module-unification-packages.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e5fcdtj.)
I started using Ember (2.10)? I think... for a project at college, back then I only knew how to PHP and do some JQuey.... 3 years ago, so I went from 0 to 100 into single page js apps and Restful apis (jsonapi) in like three months (this project actually got funded and it's currently one of my main businesses 🎉). For my final project - thesis - at college me and my teammate had to build a restful authenticated api with a crud dashboard, and two mobile apps (iOS and Android), with documentation, client meetings, and tests, in four months, while also working half time and like two classes at that last semester... For the mobile apps we didn't had any time to learn Swift and/or Java with the burden of the dashboard and restapi, so two choices: go full Ember.js (wrap everything with Cordova) or go React/React Native... So we splitted the work load, we had to build like 70 rest endpoints, so 35 and 35... As the hype pressured, I convinced him to use React Native... Erhmm no, more like I told him, hey bro, I got the mobile apps (I wanted the hype secretly), you go ahead with the dashboard, he sticked with Ember for that - I should have known better - I was there alone, jr developer vs React Native... I still have nightmares about how hard everything was outside of the conventions of Ember.js every React Native tutorial out there had a *insert bad word* different file layout, different dependencies... And so on... Even I used Nativebase components I still had tons of issues. As I remember, with React Native you need some state management, how can I explain the pain of trying to learn redux and React Native and how to connect your router with redux. I was so ember-data sick, that I googled for days for any library that would give me at least 1/8 of ember data (I used this, by the way https://github.com/beauby/jsonapi-datastore/blob/master/README.md) So I found the library, but then, HOW do I connect this to Redux. OMG. In the meantime my teammate was having fun and being super productive with Ember.js ... ember install college-degree We survived, the live demo failed and the project died, anyway, we learned a lot. When I graduated I got an interview for React frontend, as it was an Startup they gave me a few todos for the trial week to test my abilities, I spent - days - reading the code base trying to figure it out what on earth this senior developer had in mind, just to be able to do even the most basic todo. I got the offer, but visas take long, so I end up founding my own company which uses Ember at it's core, the secret weapon. I hope this story tells [something] in a different perspective about why or how I ended up choosing Ember.js to power most of our apps, and how I feel about it. Today I maintain 5 production ember apps in a daily basis mostly by myself or with one or two colleagues at my company. From PWAs, Engines, Fastboot, Cordova... We do everything with Ember. Don't get me wrong: I do like React and I use it for some projects, we are even testing a hype stack React Native, Apollo 2.0, GraphQL with Golang... but this is now that we have a bit more experience to jump in... there is just so many ways to do things wrong in the React World... Some words about the future of Ember: I really like what Ember Octane promises, it will be a total refresh to Ember perception and I bet it will catch lots new devs or experienced ones, also managers that value the conventions, without compromising hype (dev happiness) or performance for apps. A list of things that may exist but I don't know about them and would love to: 1. Blogs or tutorials about how to devops a Fastboot app, cache or whatever to make it super fast (premeber is not an option in some cases with meta tags) 2. Ember Meetup organization guides 
Why?
'HEAD' method did the trick.
What is your Node server that is working properly?
tl;dr - Please don't use innerHTML.
Is incredible how [google.com](https://google.com) works perfectly in that old system. Can't say the same about bing.
You state it’s working when in the Node server but then doesn’t work on local host. 
It depends on what kind of data is available. If it's a string, `innerHTML` would be used in most cases. If it's an object, `appendChild()` would be use in most cases. Other cases would either be a matter of choosing between code readability or performance. In general, `innerHTML` is slower than `appendChild()`, because with `innerHTML`, the browser need to parse the input string, create objects for elements/text, then add them into the DOM. `appendChild()` on the other hand, only accept objects. So the browser doesn't need to do any string parsing and object creation. However, calling `appendChild()` multiple times in order to add multiple objects can be slower if the whole process can be done using a single assignment to `innerHTML`. This is because the JavaScript engine needs time to parse the script itself, and the code which does the actual work for `appendChild()` and `innerHTML` are native code which runs much faster than script code.
no
Still waiting for an in-depth book or Udemy course on TensorFlow.js :-/
Right. So I was able to console.log the response that fetch returned in my text editor.
Read the link.
Thank you
It's still in its early shoes, and no one has had enough experience yet to start a full course... But hey, that's your chance! The API is very similar to Keras, so I would recommend you do some Keras tutorials, then combine that with your JS skills and fresh ideas of how to use the browser, and bam! You're the one teaching others :)
It doesn’t say anything about as to why. Either way, I know why, but newbies don’t.
Good idea. I think I'll actually do some non-TensorFlow Machine Learning first via JavaScript, then move on to TensorFlow.js once there's more resources.
Okay, so I did it. scrollTop script works, but when I'm placing the second script on the end of the "body" as script src or just between &lt;script&gt;&lt;/script&gt; inside html, scrollTop and the second script doesn't work. No matter what I do, the second script which is countdown timer just doesn't work. Strange, because on codepen it works perfectly.
&gt;DOM based XSS is extremely difficult to mitigate against because of its large attack surface and lack of standardization across browsers. The guidelines below are an attempt to provide guidelines for developers when developing Web based JavaScript applications (Web 2.0) such that they can avoid XSS. &gt;GUIDELINE #4 - Avoid sending untrusted data into HTML rendering methods &gt;element.innerHTML = "...";
 You are correct in saying you need a concurrency strategy that is deterministic, and going by Id order is a simple way to do that. At the start of each transaction, you could add a SELECT * FROM users ORDER BY user_id FOR UPDATE where user_id in (1,2,etc) , then run the rest of your transaction as before. You could make a utility method for this as you will probably use it all over the place (passing in the transaction and a list of user ids). Less work and less risk than trying to change all your queries. The row locks will be released when the next commit / rollback happens. Other processes will "wait" until the first transaction completes if they both want to operate on the same user. You are trading some performance for safety in this case. This makes it safe to do something like move money from one account to the other. (of course banks would have way more protection than this) For this to work though, ALL transactions must use this same locking mechanism. 
If you're going to add multiple children, you should add them all to a document fragment first, then add that fragment to the DOM. This avoid repaints which cause massive slowdown.
Do note that innerHTML is insecure when dealing with unfiltered, unescaped inputs. An input field directly writing to innerHTML poses an attack vector: XSS / HTML/JS-injection. For text, use textContent. Otherwise, try to work with DOMNodes. Either way, always strictly validate your inputs.
For fun :)