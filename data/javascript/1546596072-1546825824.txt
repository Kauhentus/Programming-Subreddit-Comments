&gt; I noticed quite a few people are getting offended by the idea of working for free. I don't think this conclusion is entirely correct. Most of the problem, IMO, comes from the combination of: working for free + a company getting the value for free when they would be paying otherwise. That is, I know many people who give out code, and I mean **a lot of code**. They do it because they like it, but mainly because it's something they _believe_ in, in some sense. It may be something they will _use_, or something they think will _help_ other people, or whatever. But it's something that comes _from within them_. On the other hand, what you're proposing is fundamentally different in nature: It comes from Red Bull. This doesn't mean it's _bad_ or anything. It may be a great thing, I'm not discussing that. But it is fundamentally different, because it's a _company_ that produces a net benefit for themselves (in this case, publicity, public image) and does so with _minimal material compensation_. Note that I said "material". I understand that it's "an experience". But you can't disguise the fact that this is **work**. It's a development project in a month. Which is presented as relaxing and fun, but developers (especially experienced ones) know deadlines and when you say that there's a fixed deadline of one month it automatically brings the reality back: This is work; there will be stress and there will be rushing and it will get bad towards the end... And so, they can't help but feel this is _work_, and then it is _unpaid work_. Because you _could_ say it's "somewhat paid". You _could've_ presented this saying that you pay for all expenses, for travel, food, housing, leisure activities... But you did not. You went and actually said this is unpaid work, you said "hey, you can work **for free**". And I'm sorry but that does **not** make it sound appealing. I guess this will only sound attractive to a smallish number of developers. Could you make it sound more attractive? I don't really know. I'm afraid it will be hard. "Work for free on a one month deadline for a project from scratch! And even if you do it well, you won't even win anything!" (Because, well, you said "we managed to build the most successful game of the year" but didn't mention any sort of reward or even award or anything at all. So it doesn't sound like there's actually anything at stake.) If I put myself in the shoes of a developer suspiciously considering your offer, I would think of a couple of additional things. Like, is the project already defined to some extent or is this completely from scratch? Because to a _designer_ this **is** a great thing. They get to do whatever they want. But to a _developer_ this means total in-definition; it means probably a week in which they won't advance much at all, and a second week in which "things begin to take shape" and that leaves two weeks of rushing... Also, is there a defined schedule? I mean, sure, Bali looks cool, the video looks cool, riding bikes and painting and beaches and whatever, but... how much of that will actually be happening? Are there working hours and leisure hours? Oh, also, something I'm pretty sure a number of people will ask them selves: Do you work for Red Bull or what's the deal? What's your involvement in this? And, do _you_ get paid? (You don't need to answer me; I'm just telling you things people will think.) I've done some _similar_ stuff, though at a much smaller scale (a week, a weekend). It was always _work_ (paid work, I mean) and it was _always_ very energy consuming. Fun? Yeah, sure, it _can_ be fun (though it can also very the very opposite of fun, too). But even when it's fun, it can still be a very tiring experience. (And you propose no reward but the experience itself.) You know, maybe the problem is that experienced devs have already seen too much and know where things can go wrong. And your presentation doesn't address any of those points in any way. I don't know; these are just some quick thoughts.
Just got it working, Rather than appending and storing it again in an object, store it in an array and you can push both objects in it... XD
that's not what you asked though. now you have an array with two objects. you said you wanted to merge two objects into one.
Yeah but I still can't find anything related to appending objects so tried this and it's working
lodash has a helper function _.merge
Okay .merge is doing the same thing, merging of objects where over writing of key value pairs occurs if present in both 
[removed]
You can try object.assign [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\_Objects/Object/assign](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
Thanks 
It is merging both the objects, what I want is something like this.... Assume I have two objects obj1 and obj2 and after appending I want them as obj1, obj2
Can you give one example for obj1, obj2. A bit confused on what exactly you want :(
Suppose I have a object {one: valueone, two: valuetwo} and another object as { four: valuefour, five: valuefive }... What I want is after appending these objects as, { one: valueone, two: valuetwo }, { four: valuefour, five: valuefive }
Which is how it avoids running .getImageData() on a canvas with a large width &amp; height. The 1px by 1px canvas will be software rendered, but that‚Äôs fine since the big canvas will still be hardware rendered.
Yes, but why use a second canvas at all then, instead of an arraybuffer?
unsure what you want to do... const newObj = {obj1, obj2} const obj1 = {obj1, obj2} maybe one of these will help?
Because that would involve running .getImageData() on the main canvas, which is what the browser detects &amp; switches to software rendering?
Good question, yes I encountered this problem with an offline canvas
You‚Äòd only have to do it once, which doesn‚Äôt trigger that heuristic.
I have two separate objects, obj1and obj2 and I want to append them in the way, { obj1, obj2 }
Per frame, which does. If it happens in 3 consecutive .renderAnimationFrames it triggers software rendering mode. The solution you‚Äôre suggesting is what OP tried first &amp; got awful performance from.
Without knowing the use case, it‚Äôs hard to make recommendations, but one option would be to delay for one frame every other frame.
That‚Äôd make sense if it‚Äôs running on a user input event or something - from the sounds of things the normal behaviour is to do whatever involves running the .getImageData() call every single frame. You could cache the value for the odd frames and read it for the even ones, but that would be use case dependent &amp; wouldn‚Äôt make sense if the value changes enough. If the solution they‚Äôve got is fast enough then I‚Äôd stick with it. If it‚Äôs not &amp; they knew which pixels they wanted to read (presumably a subset of the total) beforehand they could change the 1px by 1px sub canvas into a 1px by (number of pixels)px canvas, which would reduce the .getImageData calls to 1 per frame - but once it‚Äôs rendering in software anyway I don‚Äôt think that‚Äôd speed it up. Might speed it up for browsers which don‚Äôt switch to software rendering though. ü§∑‚Äç‚ôÇÔ∏è it‚Äôd be something to performance test across the browsers it‚Äôll be used in.
so... const newObj = {obj1, obj2}
If you were to destroy the secondary 1x1 canvas and then recreate it, would that avoid the software rendering fallback or does .getImageData() always cause the bug no matter the age of the canvas?
my theory is its because some SEO guys went nuts caching jquery answers to any javascrpt questions in search engines
Exactly I was trying the same but It returns object Object
r u trying to print it out in html or something? it should look correctly in console.log() if you are, try to wrap it in JSON.stringify({obj1, obj2})
I am writing jQuery code right now for a huge German company, even though I am experienced with both React Angular from a previous job. I was hired (and relocated to Germany) as a developer who "would write frontend code with the latest technologies". And it appears that they don't want to change ¬Ø\\\_(„ÉÑ)\_/¬Ø
Your magic-eye video is awesome!
because i read so many garbage medium posts from reddit. much of the time people are just using it for views so they can earn money. posting it here shows the OPs motives are pure.
Ah that's a shame
It is a great tool for interactivity, too, so long as you don‚Äôt need anything too complex, which is the vast majority of web interactions. jQuery has a bad rap among developers these days because it makes working with the DOM so easy that non-developers can use it without too much trouble. JS has come a long way since jQuery‚Äôs ascension, which had as much to do with its focus on eliminating the need to fret over differences between browsers as its low barrier to entry. In that sense, it‚Äôs not as useful as it used to be. But it‚Äôs still a wonderful library for simplifying DOM manipulation, event handling, XHR, etc. It endures because its popularity is driven by its utility, rather than hype. 
That's not a thing. You could either have: { one: valueone, two: valuetwo, four: valuefour, five:valuefive } or [ { one: valueone, two: valuetwo }, {four: valuefour, five:valuefive} ] or { first: { one: valueone, two: valuetwo}, second: { four: valuefour, five: valuefive } } 
Just keep doing. My way of improving is through projects - clone a web game, develop a video chat app or something you want to have created by yourself. You learn way more through that than sticking to a specific topic and trying to git gud.
I knew wasm can do some awesome, but not that!
Hey there. I think you're on the right track. If you have a good foundation for JavaScript, data &amp; dom manipulation, then you should start to strengthen your ES6 understanding. Learning how to use Promises effectively, how to use async/await, how to use Maps, and how to apply functional programming to your daily tasks is ideal. Things like Function Generators and weakmaps and weaksets are good to know, but aren't highly required at this point. Dr. Alex is a fantastic resource. YouTube has tons of great tutorials for basic-to-advanced stuff. React Hooks you can learn as part of the most React Alpha release. My advice would be to build a basic React application using create-react-app and go from there. Just find reasons to use some of the stuff I had mentioned above, but only for learning. Don't use Function Generators in a real project unless there's a need for them (for example). 
&gt; by yourself. You learn way more through that than sticking to a specific topic and trying to git Thank you, appreciate it. And interesting ideas, added to my list. 
Think function generators are too advanced for my level at moment. But for promises and think ur right, used async await though. About small projects using CRA did them so many (smaller ones) but it's mostly repeating the same thing. And what you mean by this? "how to apply functional programming to your daily tasks is ideal." You mean the basics of FP ? Eventually didn't cross my mind to try using lodash? But just to mention never used it. Think definitely need to do more smaller projects. But focusing only on ES6 and react still doesn't feel like some higher goal is set :) 
&gt; It endures because its popularity is driven by its utility, rather than hype. !!!!
Hmm. Best to look at it this way: everything that you'll work with requires JavaScript knowledgeable. React is a library that helps you manipulate the DOM, but you could also do the same thing writing raw JavaScript. So, it is better to learn the basics and then the intermediate/advanced functionality of JavaScript rather than mastering a Library or Framework. FP is using functions like Map, Filter, or Reduce to manipulate data and to maintain immutability in your primary data objects. While lodash is amazing, you should try to do as much as you can without needing it. I make it a rule to try and solve everything FP using raw JavaScript first. If i become stuck, I will look for a library solution, but only if I have no other choice. 
All the tools for this are awful, and you have my full support. Awesome project.
Thank you!
Interesting thought:), used functions like map, filter, reduce, implemented many times filtering (but in react never in vanilla js ) Don't want to ruin my previous question anymore. But for end may I ask to recommend me any article/youtube video for functional programming, I've started reading a book ([https://github.com/MostlyAdequate/mostly-adequate-guide](https://github.com/MostlyAdequate/mostly-adequate-guide)) but never managed to finish it. 
Good project 
Saw on mobile, Your site wasn't responsive but it seemed nice to create the signature. For a moment thought it was Gmail related because I read the URL like mysi Gmail.
Oh good old WTFJS... they gave up updating it as ES.next became a thing though, about 3 years ago
Oh, really funny coincidence with gmail, i didn't even think about it before ) Really an app unresponsive for mobile now, need to make it responsive in the future.
This is really awesome. Take my star. 
Excellent work
very nicely done. i love the presentation. some more customization options like "no avatar" would be great. but you're only getting started ;)
Thanks for the proposed new functionality, I added this to the notes for future additions.
I tried opening it and the screen went blank, and I got this message in the console: `Error: The database is opened failed indexedDB.js:25:10`
Great project, and do continue making it even better! Few things that I could recommend function / UX wise: 1. For color picking, I'd get rid of the "OK" button. Make it live preview, on color picker focus lose, consider it accepted, but retain the cancel button in case someone is dissatisfied with the current pick and wants to go back. Or even better, add two color "minatures" (but still make the preview live) that will show the old color and new color. When they wanna go back to old color, they just click the minature. 2. I bet this one is in plans, but a custom content textbox is a must, imo. While there is one for "main" data, I think there should be one to go where you put your disclaimers. 3. Custom icons / images in the footer of the signature. Often times, business people have logos of certs, prizes and all the other fancy stuff, so they need a possibility to add those. 4. I feel like Job - Name separator should go somewhere in the basic tab, but it might be just me.
More information is needed to determine the error. For example, in which browser the application was opened, etc. Please use issue on github for this purpose - [https://github.com/antonreshetov/mysigmail/issues](https://github.com/antonreshetov/mysigmail/issues)
I just figured it out as I was writing the issue in Github - it fails under Firefox 64 (tested on macOS Mojave) when opened in private browsing. (Information is in the link for about:support - that should contain plenty of information)
Many thanks for such a detailed comment. I added this to the notes for future additions.
Hmm, that seems to supply me with today's date rather than the date returned in the query. 
Great tool, thank you for sharing
I prefer using types when it comes to shared components (same project but many places or across teams) or critical ones. Otherwise it just increases the line count, decreases development speed and readability.
If you look up my comments on previous posts, you will see I really dislike typescript. It's not a good static language and it just gonna become c# or java overtime. JavaScript is much more flexible and much nicer to code in, even without the boosted ide . Best of luck.
That's just the way you're doing it. As a lead developer myself, I sincerely hope that there is more to why your leads have made those decisions and it isn't _just_ loljavaderp. I also hope that you are challenging your lead devs and getting a satisfactory answer. It's always disheartening when I don't get my decisions challenged, the ensuing discussions is where the real value of those decisions comes from in my opinion.
man I can't wait to see what more interesting stuff will go down with WASM and WebGL.
I only make things classes if the object needs methods. Otherwise a POJO is just fine. Are they making you create getters/setters for all the properties too?
C# is awesome tho
Java has "var" now. I may have to take another look at it. My biggest grievence with Java is the verbosity. C# was much nicer in this regard, partly due to "var".
[removed]
Really nice idea! I'll for sure use it when i need to update mine :) And pass it on to my less tech-savy co-workers in the support team :D
How big is your team? In my experience strongly typed languages work better with large distributed teams. Could this be the reason why the leads are imposing constraints? Imagine having to share code work other team members that you don't have direct contact with but you don't know the shape of the objects you are dealing with. Better to have that communicated in the direct code itself rather than having to rely on documentation (which may not exist let alone be up to date).
It's ancient (2014). And it's not a port. It is a cross-compilation via emscripten. There were a lot of those back then
Why are the primarily java devs leads on a react codebase? Is it because you don't have any front-end leads so the (primarily) back-end guys become the de facto leads?
[For free, spend part of this weekend on youtube](https://www.youtube.com/results?search_query=es6)
It's definitely just the way your team is using it. `I find it harder to leverage some of the cooler features of ES6+, such as spread operators because we've been told to use class instances instead` &gt; has nothing to do with TypeScript.
How is the logo handled? Is it inline somehow or is it a remote URL. I‚Äôm just tired of all my clients having logos that show up as attachments when I reply or forward. So I‚Äôve never put my own logo in my signature in order to avoid doing that to others. If I can inline the image with this tool, that will be amazing. 
I'm cool with java the language. I don't like the frankenstein standard library, weird verbose abstraction-happy conventions, over-complicated tooling, and fragmented ecosystem.
test
https://github.com/eslint/eslint-plugin-markdown
Will do. I'll try and only watch videos from the last year. Any other beginner projects or interactive tutorials worth a look?
It's one trap of Typescript, you start to want to give types to everything and then lose some of the benefits of JavaScript. The other aspect is managers used to OO programming forcing you to use classes for everything, but you would have the same problem with vanilla ES6. Personnally I love Typescript, but I only use it as a way to enhance my VS Code experience with useful auto-completion and tooltips. I basically write vanilla JavaScript with custom types where I feel it will help.
Sorry, could you explain POJO? Regarding getters and setters, not yet, but it's been discussed.
I have to agree. I feel like I love JS because of the way it's written. If I wanted to be a Java dev I'd have learned Java.
Yeah, by all means create a VM to run a VM ehich runs a VM, residing in a VM to execute your hello world application hunderds of thousands time slower than it would normally run. Absolute rubbish!
I have been getting quite involved too, and implementing more standards all over the place.
Typescript is a really good tool. 
My team is "leading the way" in our department for tech - we're about 10 people. So we're working in React Native, TypeScript, Redux, etc. and soon other teams will be utilizing us as a model to emulate when re-platforming. If we account for other teams that will be following us it totals about 50+ people.
Such a great idea Creating email signatures should be so easy but it really isn't ! And making sure images are there properly and the whole link images vs embed images debate Keep going !
Pretty much. We've searched for senior react (even just plain senior JavaScript) devs for over a year. Either no one bites or they stay for 2-3 months before dipping. This obviously puts us - especially me, as I'm the most "senior" react dev with 1.5 years exp - in a precarious situation.
True, I realize this can be said of just plan ol' JS. But I think I tied it to TS because we're using TS for typing, and it's being hijacked to look like Java, thus the reluctance to use some of the more cutting edge features of JS.
I definitely ask a lot of questions and push back when I don't understand something, but I'm also self-taught so a lot of these principles about classes and interfaces are pretty new to me as I have little to no CS background.
I have this complete aversion to want to learn Java. I'd rather learn C++ over Java. I'm not sure why I dislike it so much.
Yeah I feel like I used to use TypeScript this way. Just using it for certain type checking, but otherwise I liked to leverage some of the features and quirks of JS in my code.
freeCodeCamp has a shortish section that's worth doing 
It is, I guess I just feel like I'm starting to write Java-like code in JS - which I'm not a fan of.
Thanks, I'll check it out.
Here's a link to repo: [https://github.com/cztomsik/slack-app](https://github.com/cztomsik/slack-app) It's done with node-webrender: [https://github.com/cztomsik/node-webrender](https://github.com/cztomsik/node-webrender) &amp;#x200B; It's rather PoC of what's possible but I'd like to turn it into a real thing eventually, so if anyone is interested in helping me with that (I'd rather focus on node-webrender), contact me.
That's absolutely fine. I'm self taught, too, and this was literally the biggest way for me to learn - ask away, no matter how basic or stupid you may think the question is because the only thing worse than a stupid question is an unanswered stupid question. Have confidence when admitting you don't know/understand something, it'll really get you far. The people that hide their gaps in knowledge are the ones that get stuck in ruts.
That's your coding practices then, and not a critique of TypeScript. You can write inheritance heavy object oriented Javascript and immutable functional code in TypeScript. You also shouldn't be missing out on ES6+ language features do to the adoption of TypeScript.
Yeah I'm sort of bummed about it. Granted I'm a bit biased, because JS was the first language I really dove into, but I think ES6+ is magnificent - it's robust, fun, versatile, overall just a great language.
Like, a plain old JavaScript object. For example: passing options to a function using an object literal.
C++ is worse tbh ... I prefer C 
ah yeah gotcha. Yeah, truth be told, I think I'm more of a fan of functional programming and composition than I am of OOP and inheritance.
I'm getting into a bit of C for CS50 on edx, hehe. 
If you upload an image, it will be converted to base64 and inserted inline. If you insert a link, it will be just a link to a third-party resource, and not an attached image to the email.
There's no reason to use classes when an interface and object literal will suffice, i.e. when you have a DTO, a class with no methods. I always hated the fact that Python and Ruby have no easy way of creating such object and liked the fact that Scala and TypeScript do have it.
Well, it's easier to write functional-style code in TypeScript, because, well, types.
So this is exactly my last point of contention with some of the devs. I originally made an interface for an API response object. The object always has the same props and no methods. I defined an interface just detailing its shape, but was told to change it to a class. Granted I accepted because I realize I'm no expert at this, but it just didn't make sense to me.
Don't discount how you learned. Different backgrounds and experiences add to the value of that conversation. Sometimes simply asking "why" and having it explained may lead to the realization by someone that their approach is incorrect. Sometimes I ask my team members "why" even if I understand and think I know what they're going to say.
It doesnt matter when you have leads with limited vision, they will find a way to destroy your fun.
The create react app one seems like a cop out to me, this not really a 'practice' that anyone should know - anymore than any other useful library. I didn't know about fragments though, those seem like they could actually be useful. 
Great job, and nice project!
Great project. What motivated you to get to the purpose and implement this?
where are you located ?
Well, unfortunately it's not about the tech, it's about persuasion and office politics. I can't give any advice especially because I am pretty bad at persuading people to abandon their ways and write idiomatic modern code unless they are willing to. Worst example in my career was with some Java developer who wrote incredibly buggy piece of software that included his own "web server" (buggy as hell), "HTTP parser" (buggy as hell), some concurrent code (buggy as hell). I've rewritten this shit in a day or so, but he still was adamant - "I don't give a shit about your \`Promises\`, fancy libraries and build tools, I'm gonna write the code as I damn well please". &amp;#x200B; One thing that could work is asking them for reasons about specific decision and trying to explain why idiomatic TypeScript solution is better, if these people are into "new stuff" they'll will like union types, sum types and all other TypeScript goodies. If they aren't, well, you're SOL.
You can change the defaults by just creating a `.prettierrc` file. https://prettier.io/docs/en/options.html
When I upload my logo (10KB PNG, 110x61 px) it repeats the image on the Y axis instead of centering a single copy of the image. Is there a specific format/size of image I need, or is this a bug?
Typescript was developed precisely to bring "enterprise" developers and architect on board - meaning Java / .NET. And yes, that's what they tend to do. It's unavoidable. That's why I keep well clear of TS
Nice! I made a Mandelbrot set imager over the holiday break w/ the canvas and found it easier to work with than I expected. 
This is amazing. I remember buying it at release and being blown away by the shadows. The fact that it runs in a browser on my loathsome MacBook Pro in just utterly mind-blowing!
Perfect 
C++ is just as beastly as Java but in vastly different ways.
I don't understand the problem. W typescript, u can use plain JavaScript. Or u can go further &amp; use ES6. Or u can go even further &amp; use TypeScript. More features and enhancements, optional. Makes context and object oriented concepts much easier than usind bind and prototype. You can use instead fat-arrow and classes, even generics. Any significant code-base conversion would probably show dozens of typing bugs. IDE experience with autocomplete and errors is fantastic. Similarly, you can also use Visual Studio Code like your favorite text editor, but it can do so much more. They are like normal buffets with 4 5 star options, enjoy! Cheers
I agree with those first two points, but I'm not sure about those last two. I find most of the standard goto tools for Java to be very straight forward, but tedious. Take maven for example. Maven is dead simple, but it's all XML configuration which is just awful. But it's still very easy to grasp what maven is doing. As for ecosystem fragmentation, I don't really see how Java is worse than JS or any other language for that matter.
[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_2015_support_in_Mozilla)
I'd start with Eloquent Javascript and then refer to MDN when you want clarification or just need a quick brush up on a specific concept. [https://eloquentjavasc](https://eloquentjavascript.net/)is[ript.net](https://eloquentjavascript.net/) [https://developer.mozilla.org/en-US/docs/Web/JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript) &amp;#x200B; You are going to do the most learning by building and breaking things - the hard part will be picking the right scope of project so you don't get bored or frustrated. The projects covered in Eloquent Javascript walk that line well IMO.
Yes, this is a bug, please open the ticket by creating an issue [https://github.com/antonreshetov/mysigmail/issues](https://github.com/antonreshetov/mysigmail/issues) so that I do not forget to fix it. It is better to upload a square image, because the possible avatar shape in the application can be either a square or a circle
It sounds like you've had some sort of front-end lead but they only stay 2-3 months, is this correct? If so, why do you think this is? Do you have any exit interview feedback?
Thanks so much, this seems like a great resource. 
&gt; easier to write functional-style code in TypeScript, because, well, types. Not necessarily related at all. Types are a rudimentary "compile"-time check - they can hurt **OR** help FP design. Classes &amp; inheritance are the real problem. FP is about immutable data &amp; state machines. Classes are [`Rube Goldberg state machines`](https://en.wikipedia.org/wiki/Rube_Goldberg_machine) Types (and mostly other language constructs/features) **can easily** get in the way of a functional-style approach. Java devs tend to try mutilate JavaScript into their extravagantly verbose language of choice. It's not pretty, and makes it worse for both Java &amp; JS devs in the long run. Classes are used in Java to tightly couple state/storage, logic &amp; behaviors. This leads to brittle codebases. You better have types if this is your approach to coding. TypeScript enables poorly designed apps to "feel" well-built, while pretending tightly coupled code doesn't lead to code aging poorly. JavaScript doesn't need this baggage. 
Thank you, always good to read the docs.
I still don't understand how my maven-shade-plugin configuration works and would never have gotten it working without seeing examples: &lt;transformers&gt; &lt;!-- This bit sets the main class for the executable jar as you otherwise --&gt; &lt;!-- would with the assembly plugin --&gt; &lt;transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"&gt; &lt;manifestEntries&gt; &lt;Main-Class&gt;...&lt;/Main-Class&gt; &lt;/manifestEntries&gt; &lt;/transformer&gt; &lt;!-- This bit merges the various GeoTools META-INF/services files --&gt; &lt;transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/&gt; &lt;/transformers&gt; &gt; As for ecosystem fragmentation, I don't really see how Java is worse than JS or any other language for that matter. Oh ... I'm not saying it's better. Js is THE worst of the bunch.
Cool project! Please add an option for no avatar.
great project! thank you for this!
[https://javascript30.com/](https://javascript30.com/) has a lot of fun small projects, all vanilla es6. His teaching style is fun and popular throughout the community as well. Completely free just have to sign up. &amp;#x200B;
Looks great! 2 small tips: on the live demo the footer text "MySigMail ¬©2018" text clips outside of the purple bit on my samsung s8+. Oh and its 2019 ;).
Maybe, I didn't test on mobile devices. Yes, already 2019, need to fix )
in your maven example, do you think that's the fault of the plugin configuration or the fault of using xml to configure it or both/neither?
Yes we did. I believe he left because our region isn't a "tech hub" per se, and the salary reflects that. He was poached by a fairly large company in either Portland or Seattle - I can't remember which. 
Richmond, VA.
Yeah, I have to say I think TypeScript itself isn't the problem, it's probably the way we're being forced to use it. It seems like it's an "all or nothing" approach. And seems like we're leaning towards Java-like architecture and design patterns.
While I agree TypeScript's development was driven by Microsoft's desire to bridge the gap between JavaScript and C# (or whatever), I don't think it's a reason to avoid TS... especially if you are a C# developer wanting to do some JS stuff.
Weblink: $('#modalweblink').html(`Weblink: &lt;a href="${event.weblink}"&gt;${event.weblink}&lt;/a&gt;`); Undefined should be blank string: $.each(response, function(idx, e) { events.push({ start: e.start_date_time || '', end: e.end_date_time || '', title: e.meeting_title || '', ...
I found this overview longread very helpful: [https://medium.freecodecamp.org/the-complete-javascript-handbook-f26b2c71719c](https://medium.freecodecamp.org/the-complete-javascript-handbook-f26b2c71719c)
So far I've only used TS for a project at work I was working on solo and side projects so I don't know what your team dynamics brings to the table. &amp;#x200B; My favorite language is C# but I also really like javascript and really like typescript. Essentially how I see it is you should primarily be writing typescript with just interfaces and generics. Obviously classes have their place but functions / methods like this are what I really like about TS. const genericFunc = &lt;T extends IPropsINeed&gt;(input: T, otherStuff: number, ...): somethingElse { // stuff using known properites of IPropsINeed } Essentially you are going to keep all the normal js awesomeness but just avoid some silly error down the pipe when some object you pass in doesn't have propertyWhatever undefined. &amp;#x200B; Besides that you are essentially paying a cost of front of defining types and fixing the compiler errors. But, when you need to refactor or change something you're going to recoup that cost very fast. If you decide later that `IPropsINeed` need something else then you'll know all the object literals that are not invalid immediately instead of in testing at some point down the line. 
\&gt; I find it harder to leverage some of the cooler features of ES6+, such as spread operators because we've been told to use class instances instead. &amp;#x200B; Huh?
I'm no fan of XML, but I can look past that. It's the fact that I have to jump through all these hoops to do something relatively simple (make a standalone jar file).
You should be able to access it just fine. You should find a "console" tab in the inspector window, which is where you can write JS straight and run it. There you can write `document.getElementById(your-id-here);` or `document.querySelector(#your-id-here)` and press enter. If anything appears you should be good. You can save the element as a variable by doing this: `let button = document.getElementById(your-id-here);` --- Now, if you intend to call `.click()` on the button, the same rules apply as when you click the button manually. There are several ways developers can disable clicking: 1. If the button looks a bit like this `&lt;button type="submit" class="Component-ElementDisabled-button" disabled&gt;Submit&lt;/button&gt;` you will need to remove the `disabled` attribute, which you can do like so: `button.disabled = true;`. 2. If you can't click on the button now, it's possible that the button has been disabled using CSS. Try doing this: `button.style.pointerEvents = "auto"`. pointer-events is a CSS property that tells the browser to ignore the cursor on that element and its children, which includes clicks, and setting it to `auto` resets it to accept clicks. 3. If it's still not clickable, it's possible that the button is a placeholder element for a real button. Check if the clickable button is the same as the one you found.
Interesting. I was never really sure what proxies were, as I stopped programming with javascript around the birth of ES6, I only really use let, const, and arrow functions, but proxies were confusing. It almost reminds me of merging underscore and an array haha
You can use a function parameter in `Cas`: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#Function_declarations
My hero, have an upvote! Thanks!
Yes.
No. If you want types, use Typescript. 
Came here to say exactly this.
I know about TypeScript but what are the benefits of not having strict types? (Not saying there are not any I just want to know)
Right, *if* Prettier has an option for it. But Prettier, by design, has very few options.
If \`event.weblink\` is user-editable or comes from some user-input data and it isn't sanitized, then there is likely a XSS vulnerability here.
Less learning curve, faster development
Saves you in average 0.8secs if typing per line of code. Keeps your learning curve lower and saves compile time because the compiler needs not to support you.
It's a lot easier to write code when you don't have to worry about types. That may come back to bite you, but for smaller projects it's often simpler. Also, it's easier to write generic code that accept different types of input. 
It sounds like you don't really know what you're talking about when it comes to TS and ES6. This isn't meant to be a jab as much as a call out. You should ask your leads why they are doing it this way and actually listen. I have no idea what their plan is, but Typescript by no means would ever restrict anyone from using modern JS functionality. 
There is actually whole book on design patterns in JavaScript...well actually node to be precise but still you should look it up. Great read.
No. There are plenty of dynamically types and non type safe languages. Ruby, Python, PHP don't have strict types either but people don't complain about them... After doing pretty much exclusively JS development for the last 8 yrs, I see this as a feature not an issue.
I believe it should not. The reason for that is because strict typing can limit you in situations where you cannot be sure of the type of the data you are working with (ex. an API). On the other hand, type hinting like the one PHP uses could be the optimal solution between no typing at all and strict typing. That way you can make sure your code is used properly and in other situations you are more flexible.
Please tell us the non-convoluted way please.
Great, I've signed up. I saw his full JavaScript course page too through some googling, do you think that would be worth it as well?
Thank you!
Hey, thats an awesome project, keep it going! Are you accepting contributions? Any contribution guideline? (I would actually love to contribute.) Where did you find the icons (facebook, whatsapp and so)? &amp;#x200B;
Cool idea, but HTML in emails is mucky business; does the final result appear correctly across email applications?
I do know ES6 tbh. I have mentioned in other comments that it wasn't entirely correct of me to say that TS restricts the usage, but rather that the design style that we're being enforced to use, via TS, is restricting its use.
There's literally no reason to switch from your usual coding practices when using TypeScript. Switching anything to classes because of TypeScript makes no sense.
Reading the first part of that paragraph helps understand this sentence.
My best advice would be to hit up a bootcamp, depending where you live the costs may be very different. Or depending on how skilled you are, you can either create projects to add to your own portfolio or contribute to open source projects so you have something to present. You don't have to have an education, but it makes everything easier. You can get jobs without an education. &amp;#x200B; I was lucky and was able to get a job before studying where i wrote unit tests and worked tech support for roughly a year. I think by doing that will boost my skill set from an employers point of view. As long you got enough to present about your skills, you can definitely get a job without an education if you want to go down that route. &amp;#x200B; I'm currently 20 and i'm in my first year in college studying web development in Sweden. I find that getting an education is a more secure route, but to be honest, i learned much more from self-taught and doing projects than this education. But college is free in Sweden, so if college is an option for you, I would rather spend my money on a bootcamp rather than college.
Not use JavaScript
/r/itrunsdoom
What are _strict_ types for you? [Recommended reading](http://blog.steveklabnik.com/posts/2010-07-17-what-to-know-before-debating-type-systems). Not trying to be an asshat, but really: there's no such thing as "strict types" and I think you might benefit from reading that before going into the _decades long discussion on type systems_.
You should mention to the leads that writing TypeScript in this way is likely to increase turnover and make it more difficult to retain good front-end developers, because those good developers will want to be writing idiomatic TS and not Java-style TS. And that's not a knock against Java - I've written lots of Java and C# and I enjoy them both. But I don't pretend I'm writing Haskell when I'm writing Java, because that would lead to code that's non idiomatic and awkward to read for other developers. One caveat, though - you mentioned that it's tough for the company to bring in good front-end leads because you're not in a tech hub. This same thing might make it difficult to hire front-end developers in general. In non-tech hub areas, it tends to be easier to be hire Java developers. So if the company planing to hire full stack devs with a lot of Java experience, writing TypeScript in a more Java-like style might be a good way to have a codebase that's easier for new devs to get up to speed on. 
It has its uses, these object-oriented design patterns. Maybe you have not had the need to use them or have not compared or used to a different way or it's not super beneficial how you are using it. Maybe look online for why it's useful and some sample real-world scenarios where it would be so painful and messy and redundant without it? For example, let's say you had 100 different data models and they all have create read update delete with some REST API, using base classes, generics, observables, and fat-arrows would make the code so clear and concise! Lots of help from IDE and compiler also. It is really hard to go back to plain ES5 or no OOP for anything serious. I hope you find some good fun examples! GLHF!
Why are you instantiating the classes before exporting them? If you don't do that, you can extend them like normal: base page: export default class Page {} search-page: import Page from './base.page'; export default class SearchPage extends Page {} search-results-page: import SearchPage from './search-page.page'; export default class SearchResultsPage extends SearchPage{}
&gt; But I am unable to extend one default new class from another default new class. When you `export new class...` then you're not exporting the class, you're exporting an _instance_ of the class.
Surprisingly useful read. 
ok, so that works but now I get an error on one of my step definitions (its a cucumber webdriverio framework with a simple test to search for reddit) Error is... 1) 01. Search and select a result4 I search for "Reddit homepage": _search.default.searchFor is not a function running chrome TypeError: _search.default.searchFor is not a function at World.searchFor (/Users/chronicideas/Documents/DevProjects/JavascriptProjects/TestifyQA/javascript-web-webdriverio/src/test/steps/send-keys-steps.js:5:14) at new Promise (&lt;anonymous&gt;) at new F (/Users/chronicideas/Documents/DevProjects/JavascriptProjects/TestifyQA/javascript-web-webdriverio/node_modules/core-js/library/modules/_export.js:36:28) I made a branch for this which can be found at https://gitlab.com/testifyqa/javascript-web-webdriverio/tree/reddit-help Really appreciate any help. Thanks. The searchFor function and step etc worked fine using the original class extending I had with 'new' instances extending from base page.
Like today I had a very bad typescript day. Trying to update our test suites to use mocha and ts-node. Creating stubs and mocks for our unit tests was extremely painful. Another good day lost doing something I would of done in an hour in js. Loving it. 
Could just select p element. const para = document.querySelector('p'); Then select all list items const listItems = document.querySelectorAll('li'); const listItemsArray = Array.from(listItems); Then forEach over the array and add an event to each element. listItemsArray.forEach((item) =&gt; { item.addEventListener('click', () =&gt; { const text = item.textContent; para.textContent = text; }); }); I'm on my phone and haven't tested this üòâ
So in that case, you want to use an instance of the class instead of the class instead. If you want an exported instance (kind of global) you could export the class itself as an named export, and also an instance of it as the default export &amp;#x200B; base page: export default class Page {} search-page: import Page from './base.page'; export class SearchPage extends Page {} export default new SearchPage() search-results-page: import { SearchPage } from './search-page.page'; export class SearchResultsPage extends SearchPage {} export default new SearchPage()
Not a big fan of this, hurts portability
It's been a while since I've used Pug however, here is one way I had used it in the past: id have a \_layout\_main.pug where I'd have: include ./mixins/contentHeader include ./mixins/card_folder //etc etc doctype html html(lang='en') head block title title MyTitle meta(charset='utf-8') meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no') meta(name='description', content='description') meta(name='keywords', content='keywords') meta(name='author', content='author') meta(name="robots", content="index, follow") //- ----- link website ----- // link(rel='shortcut icon' href='img/favicon.png' type='image/x-icon') link(rel='icon' href='img/favicon.png' type='image/x-icon') //- ----- CSS Files ----- // block css link(rel='stylesheet', href='css/main.css') body block content +instantiatorModalNew() block scripts script(type='text/javascript', src='js/jquery.min.js') script(type='text/javascript', src='js/bootstrap.min.js') script(type='text/javascript', src='js/main.js') then in say your index something like this: extends ./views/incl/_layout_main block title title ScoreBoard - Home block content -var toasts=['toast-success','toast-warning','toast-error','toast-info']; #toast-container.toast-top-right(style='pointer-events: auto;') -for(tst of toasts) +toast(tst) .container-fluid .row #gNav.col-xs-1 +gNav('home') #content.col-xs-11.col-xs-offset-1 +contentHeader('Home') //begin Home content #contentTitleBar.row .col-xs-10 h2#contentTitle.fw100 Good Morning! .col-xs-2 #contentTitleActions.btn-group.pull-right a.btn(href="#"): i.fa.fa-th.fa-lg.text-muted a.btn(href="#"): i.fa.fa-list.fa-lg //recent folders .row .col-xs-12 h3.sectionTitle.fw100 Recent Report Folders: .row - for( var i = 1; i &lt;= 12; i++ ) .col-xs-12.col-sm-4.col-md-3.col-lg-2 +folder() //recent folders .row .col-xs-12 h3.sectionTitle.fw100 Recent Report Folders: .row - for( var i = 1; i &lt;= 12; i++ ) .col-xs-12.col-sm-4.col-md-3.col-lg-2 +folder() block append scripts script. $(function () { var folders = $('.folder'); for (var f of folders) { f.onclick = clickit; } function clickit(e){ window.location = 'report-folder-exee-group.html'; } $('.toast-close-button').on('click', function(e){ $(this).parent().fadeOut('fast',function(){ $(this).parent().remove(); }); }); }); Webpack and Pug are in JavaScript so I . don't see a problem posting it here, hope this helps!
That worked :D Thank you so much!!!!!
To put text on the page, you need an element to contain it. So, have a DIV element in the page. e.g. &lt;div id="output"&gt;&lt;/div&gt; Retrieve the object of that element like this: (note: ID is case-sensitive) var ele = document.getElementById("output"); To set (read: replace) its contents with a text, use this. ele.textContent = "hello"; To append... ele.textContent += " world!"; 
Honestly the fact that you guys can't get anyone to stay should be a red flag. I don't know what level you are but you sound pretty junior? You have enough experience to easily make a lateral move.
your solution [works](https://codepen.io/anon/pen/WLzpmG)
That's hard for me to really say. At my current company I'm a mid. I might be a junior somewhere else though. 
The whole system is kind of fucked. People get promoted based on nothing all the time. There is no criteria. I would say mid-level is something you hit with around 3-4 years of experience.
If the LI element is not used for other than the list you want to be clickable, you can listen click events on the document object instead.
Just reading your brief context, I feel like you lack of experience, basic TS philosophy, and perhaps JavaScript knowledge to even know why your team lead is pushing the code to go certain way. If you pick up typescript and continue to use JavaScript the it is, then what is the point? If you don‚Äôt leverage TS purposes, what is the point? It‚Äôs like saying I‚Äôm practicing functional programming and continue to write imperative functions and get upset when your code get shredded apart.
Awesome!! Might not be THE BEST solution for large lists due to the number of individual events this creates and if you are adding new elements to the DOM and expecting this behaviour for new list items as each element would require it's own new event - Event Delegation is the way to go for that. Glad it worked :) happy coding!
there is no user editable function on the site, the site only returns data from another site. it can only be viewed. 
Thanks so much for the reply! Your example looks totally logical. The issue that's coming up for me is that anything utilizing the "block" functionality is just being ignored/omitted during compiling. So where you have the content block, my program wouldn't pick it up. And I just don't even know where to start debugging that, since on the webpack side everything is green. It's totally possible I missed something in your example that addresses this, and so I'm sorry if so. Or if you have any thoughts on where to start with debugging, that would be great too! In either case, thank you for even taking the time to read through! 
I‚Äôm sorry. 
I've not seen any tutorials on that front. I have worked on an app that used d3 to achieve that kind of editing ability. I implemented a bezier curve editing tool on that one so it's totally possible
Thanks A lot man! Very impressive work!
I definitely lack TS experience. JS I've been working with for almost a year. It's not so much that TS isn't letting us use ES6 it's our implementation I guess. 
right. that's how it works.
No it doesn't. I truly have no idea what you're talking about. If I want to spread an array into another array, or spread an object's properties into a new object (like in redux changing the state) ... what does that have to do with "class instances"? Care to show an example?
sorry on my phone now but came across this recent article with your setup so maybe you will find your answer there: [https://medium.freecodecamp.org/make-multipage-html-development-suck-less-with-pug-fb23bc8e7874](https://medium.freecodecamp.org/make-multipage-html-development-suck-less-with-pug-fb23bc8e7874)
This is a better post for /r/learnjavascript 
I think you are asking if we should get rid of Type coercion. ‚ÄúStrict type‚Äù doesn‚Äôt have a really formal technical definition. 
do you remove the rest of the image, or otherwise optimize it, before you convert it to base64? I dont like it when people email me a 4 megabyte signature image that should only be 40k. 
That‚Äôs awesome thanks a lot mate for the great reply, I‚Äôll give that a go :) thanks!
Surprisingly fun to play with ! Do you want to build a snowman ? [https://imgur.com/a/s1M8RLW](https://imgur.com/a/s1M8RLW)
So your obj.maplink is an object not a string, the object is also not a key:value pair. If you want to reference object.maplink it needs to be a string, ex: maplink:"https://someurl.com" 
The best JS dev I have ever worked with dropped out of college. CS/SE is one of the rare valuable trades where being self taught can be a significant plus. At the very least, if they explain something in a confusing way, try to have them break it down a little bit more... at least to the point where your own google-fu can help connect some loose ends
I'd urge you to use TS in your personal projects so that you can see how beneficial it is regardless of paradigm.
They were referring primarily to this comment: &gt; if long-term use of TS tends to follow similar trends or not The answer is no. :-)
Too bad! Let me know if/when that changes!
Our first try out in August went well. This isn't meant to scale, so we can put a lot of time in sourcing members, which might make a difference. Keeping the groups small (up to 7 members) means nobody feels left out. All members of August turned into good friends. Some are even coming back in Feb.
Thanks these are great tips!
It really sounds to me like you have some Java people pushing to write Javascript in the most Java-y way possible. I've been in the reverse situation (wanting to write Java more like Python or Javascript) and what I found was that you to use any language well you have to respect the styles that work best for it. In Java that 100% means writing lots of classes. But in Javascript it means respecting the fact that JS is largely a functional language (just with some OOP bits tacked on), and so the best way to use it is to minimize, not maximize, your OOP tendencies.
Yes it‚Äôs possible, learn about the CSS position attribute
Any link to it? I know it's possible with paths but I can't seem to find anything works on closed shapes.
The $() wrapping also makes it a self calling function
Nice! What's the licensing on this? I ask because frankly I'm tempted to use it for commercial purposes. ;)
Unfortunately I have not control over the data source. was hoping to figure out how to convert it to a string that I could manipulate later. 
I started to learn React.js like, 1 month ago, and I found that web development can be fun and exciting due to React.js. I lack some basic JS knowledge because in my school, my teacher didn't know how to teach us well. I only had, like, 3 classes of JavaScript.
I work on a huge UI project that has over 1000 files in Typescript (with Angular 1.x). Having everything strongly typed saved me many times. TypeScript is great on large projects with many data entities. More than 50+ interfaces/classes. I use Visual Studio Code so it helped me with a lot of method calls. I've refactored a ton of code with confidence. The only time I'm not using TypeScript is when I work on small projects with less than 3 classes. Mainly when writing AWS Lambda NodeJS functions. I've written a little bit of ReactJS code but I haven't used TypeScript with it yet. It will be something I am looking into doing this year. &amp;#x200B;
I, too, read http://fabiensanglard.net/doom_fire_psx/ on hacker news last week Nice adaptation
Can't supply a link, as it was an internal application. Sorry.
The biggest benefit of ts is for whoever has to look at / work with the code later.
str.replace(/[.,\s]/g, '')
var now\_a\_string = JSON.stringify(response);
I also don't like when my decisions don't get challenged. I could be missing something huge!
From a purely tactical perspective, types in JavaScript will remove some bugs happening in production and remove the amount of tests you need to write in order to do the type checking. We found that most of our tests were actually trying to assert what typescript would have built in. It's a similar problem in Python for example. That 'compilation' is an invaluable check. When I write .net I never have to worry that someone is going to pass something I don't expect (other than at my api layer) and I can instead spend that time on features or refactors. 
[removed]
Definitely a problem if you aren‚Äôt writing the same great code in ts as in js. As others suggested, write some on your own and turn off all those silly errors. 
Good ideas. I‚Äôd bet those looking for internships (free work anyway) would also jump at this opportunity.
`string.replace` returns a new string. It does not mutate the old string. 
This.
Hey all, OP here. Just created a simple tool inspired by lint-staged, but for the use cases of automating commands developers run often in a team after a file has been changed. E.g. one person adds a dependency and the others need to install it. &amp;#x200B; See the common use cases I've thought of in [https://github.com/hkdobrev/run-if-changed#use-cases](https://github.com/hkdobrev/run-if-changed#use-cases) &amp;#x200B; This is similar to [https://github.com/frontsideair/yarnhook](https://github.com/frontsideair/yarnhook), but more generic than just dealing with lockfiles. It's taking advantage of husky, execa and npm-which. &amp;#x200B; Issues, feedback and PRs are very welcome! Thanks!
I love React! One of my favorite libraries for sure. I think once you get to integrating stuff like Redux (assuming you are), the flux methodology will transition your view of react into a more application-oriented one ‚Äî at least it did for me which is something new for the JS world (mainstream anyway). Stick with it!
Unfortunately this doesn't work as an internship. You can't put a collaborative hobby project done by random people from various places as an internship in your resume. For someone looking to add an official label, this isn't what they're looking for. For people looking to learn though, especially those that are self-taught, this is a great way to improve
His JS course isnt free if were talking about the same one. So I would suggest to stick to links posted above and youtube videos. Theres a tremendous amount of good content for free. If indeed you find his way of teaching to be far superior than anything else, then of course you can considering buying his courses. 
Of course, but I would suspect someone looking for internships might be more-open to the idea because while you can‚Äôt put it on a resume, you can certainly add it to the experience column. Also, it shows passion and drive to learn/advance. Also, (unfortunately) most people in America live paycheck to paycheck and have little to no saving skills, therefore commitments such as rent or mortgages cannot go unpaid and most would be vastly under equipped to handle such a scenario. Those looking for internships I would think might be more likely to be in a position to take risks and have less financial commitments. Just my $0.02 though.
Very true. It's not official but it certainly belongs somewhere in the resume. And for some flex during interviews.
Duck yes. I've been building URL-parameter based signatures for years. I hate doing email did with a passion. Thank you!!
You can use `window.encodeURIComponent(str)` to encode bits for URLs. No need for regexes. You pass the address to that function and put that in the URL, like so: var endgame = 'https://example.com?address=' + encodeURIComponent(address) + '&amp;key=...';
https://scrimba.com this site has an ES6 intro course for free along with heaps of other ones, I like that it's not video either so you can explore the code as you learn
You could always build just that component in React and copy the compiled code directly. Not ideal for editing though.
This might be better suited for r/learnJavascript
Why not just create and import a lib file that imports and exports all the scripts that way you simply var importName = require(‚Äò./lib‚Äô).importName ?
Yes, but I‚Äôd advise against it. Browsers as a whole don‚Äôt seem to get along too well or in a uniformed manner with regard to position:fixed.
What are you trying to tell us?
It‚Äôs pretty impressive you were able to put together a group that live &amp; work together and remain civil and productive. That kind of sourcing takes some real skill. I‚Äôd tell most people ‚Äúbad idea‚Äù, but it sounds like you have a unique talent for assembling teams that work well together in close quarters. I bet you‚Äôd be able to attract an even wider range of good candidates if you provide details and photos of your previous successes with this.
Publish that component independently of your app, and make sure that it's built to be ES5 compliant and it should be usable in any application. You may still have to import react itself into your app if you don't require it explicitly in your components package.json 
&gt;/\[.,\\s\]/g, '' Thanks for the reply! The API requires that I replace the "," 's with something as well. I tried using your template with the logical operator &amp;&amp; like this &amp;#x200B; Endgame.replace((/\[\\s\]/g, '+')&amp;&amp;(/\[,\]/g,'%2C')); But the compiler isn't having it. Any idea how to use .replace to substitute both at once ? &amp;#x200B; You are my hero
Yeah even if I agreed, I don't think the trade off is worth it. 
Hmm.. React/Vue seem like the perfect libraries for this to me.. Other than that, I‚Äôm not sure I understand why you don‚Äôt just use fetch to pull in the data and vanilla js to update the content. Doesn‚Äôt get much simpler than that..
This is exactly what I was looking for. I'm not crazy experienced with JS but figured there had to be some internal method for it to do it on it's own. &amp;#x200B; [Many Thanks](https://media.giphy.com/media/iiS84hOJXh1Pq/giphy.gif)
I definitely recommend Atom. What could be better for writing JavaScript than an app written in JavaScript?
This functionality is built in to Node.js‚Äôs fs package.
Hey thanks for the reply. I'm just getting familiar with API's and have never had to manufacture one through JS like above. Before all I've had to do is set them as an src in the HTML but because this one is built in the script, then held in a variable, I'm not sure how to do that while it's still in the script....if that makes sense?
What framework are you using? React? It should be pretty simple to roll-your-own if don't want to use a old package. Whether your roll-your-own or use a library, just abstract it out so that it is easy to swap out if needed. &amp;#x200B; &amp;#x200B;
Still not completely understanding. Any chance you could throw up a repo on github? Code makes things much clearer. 
Why would it look strange if you did projects to beef up your resume? If you have zero experience, like in my case, aren‚Äôt those projects the only way to demonstrate potential value?
VSCode is my favorite at the moment.
&gt;encodeURIComponent you can just do `newStr = str.replace(/[\s]/g, '').replace(/,/g,'**')` however, I'm sure [timseverien](https://www.reddit.com/user/timseverien)'s answer is really what you were looking for.
Hi, I took a quick look and I understand how it works when using the command line (the .sh script)... But, how does it work automatically? For rails, if I pull the repo and that there are changes (like migration or new gems) will the commands (eg. `rails db:migrate` or `bundle install`) be automatically ran? If so? How to set up?
Yeah, I know it's not free, just wondering if you thought it was worth the cost! I was also looking at courses from Traversy Media and Programming with Mosh, to expand upon their free YouTube videos. Both are $10, not sure if they're worth it. I'll probably stick to free stuff for now. 
have you tried with VSCode. I've hated MS for so long, but man VSCode is great. 
The script tag will be executed immediately unless there is the async / defer tags on it with an external resource. So really, it‚Äôs your preference. When do you want it so download / run? The concern with putting it at the beginning (say in the &lt;head&gt;) is that you run the risk of the JS running without the DOM being complete. As for me, I try my best to always add scripts just before the end &lt;body&gt; tag. Reason being is I want the styles / DOM to take priority on the bandwidth, and then load in the JS. Hope that helps! :)
upon further review, encodeURI substitutes commas exactly as needed for the API (%2C) but translates spaces into (%20) instead of the needed (+). But after combining both your method with very\_veritas's I was able to update everything in a nice automated manner. &amp;#x200B; Now it's more coffee and figuring out the API lol thanks again!
Typically, you would place it toward the bottom. Reason being that some of your code might depend on DOM elements that have not yet been loaded if it's placed at the top. Libraries and such can usually be placed at the top (and must if you call a function from said library in your code). It's all about dependencies. It's best usually to load the content before any scripts so that the user has something to look at while the scripts are being loaded in (AKA render-blocking).
Never had to do that before lol I'll check it out and see what's what &amp;#x200B;
One big difference between mid and senior is the ability to make a case for style and code base practices and drive adaption on the team. Maybe this is a chance for you to try to do that. Make some proof of concept stuff and build a case from the react community at large and try to make it happen, be confident. They are wrong if they want javascript to feel like enterprise java.
Well, it's easy to do function types, but I've not been able to find a good, simple solution to a lot of functional data types without a truck load of generics on every call. Hell, TS pretty much breaks when currying. I love TS, but it isn't quite there yet for a lot of this.
It's neat but I'd never use it in any codebase where I'm not the sole developer. Being concise is never better than having readability.
yeah just stringify it to see whats going on
I guess I'm antiquated but the way I do it is just ad an id to the p and write an onclick event for the li where every time I click the li document.getElementById('your-p-id').innerText = this.innerText or something to that effect (or you can use innterHTML instead of innerText) 
I only use farm to table &lt;script&gt; tags
Using proxies where you could just write a class that contains an array and exposed clear functions seems like a bad idea..
Look up Net Ninja and React Casts to name a couple. Alsoz subscribe to some newsletters. They also come with useful info. JavaScript Weekly is decent. 
Just running in the head also blocks the page from rendering, so long running loops will block the page. It's best to put it after the body unless necessary.
look into [paper.js](http://paperjs.org/) 
I think ff private browsing disables local storage - probably something with that
Good job! Thank you.
Looks great, Stenio! Thanks for sharing :)
Great Summary!
"[This page is a collection of the best articles, videos and presentations we've found on the topic.](http://superherojs.com/)"
It would be easier to give the exact code if you posted your code here. I believe you should be able to use [getComputedStyle()](https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle) to get the value of overflow from the body. Then use an if statement to check the value of that before triggering the scroll event.
Could you please recreate the bug on codepen?
Prepare for a C&amp;D from slack in 3...2...1...
Can I ask where you work or at least what industry/product that you can keep that many high skilled engineers employed and seemingly happy? Sounds too good to be true üòÇ
The recommended set up is to use husky which would take care of installing the Git hooks. Checkout [the recommended setup](https://github.com/hkdobrev/run-if-changed#installation-and-setup) and [the husky docs](https://github.com/typicode/husky). You can set up either manually with Git hooks and using a configuration file like `.run-if-changedrc` and then running a globally installed `run-if-changed` binary. However, I'd recommend installing via Yarn/npm and configuring in your `package.json` as described in the readme. Please let me know if you can or can't make it work and any suggestions to improve the readme for non-JS setup are welcome!
Also, see the "When using Bundler" in the use cases section: https://github.com/hkdobrev/run-if-changed#install-or-update-dependencies-when-lock-file-changes
Came here to recommend grass fed &lt;script&gt;s
No cross origin scripts either. You never know if they pay their servers a living wage.
I fucking love TypeScript, but I also prefer OOP over functional programming, so maybe that's not surprising
We had a bit of time where we had new React code in Webpack but our old Rails asset pipeline was not using anything. We used Webpack's "library" build feature to ship code that was browser compatible and then our component became something like \`window.ReactLib.MyComponent\`. We stored these components on npm in a separate repo and brought them in through version bumps. &amp;#x200B; I assume you could do something with require.js although I've never used it. Library built modules (UMD) will be available in any environment.
Definitely using lolthingderp on my kids.
How come whenever someone posts GitHub the mobile Reddit app always posts a big unflattering picture on it? 
Tbh, what I have seen of Java leads me to believe I would *love* writing in it, but the fact that every single Java application I have ever used looks like ass on Windows has kept me away from it. I guess this wouldn't matter in the context of writing back-end code for the web though. Honestly though, I don't even really know what that means. What sort of server even runs Java? Fuck me, I used to think I was a senior-level developer but the more I read the more I feel like a complete noob. 
Hi /u/immawizardhagrid, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Firstly, your code is dangerous, opening your database to be easily hacked with an SQL injection.
I wouldn't approve this PR. I'll start with this: if you don't have a \`=\` or \`return\` to the left of a \`map\` or \`reduce\`, then you're using them incorrectly. \- Your input handling \`|| \[''\]\` results in wasted iterations. \- The second reduce should be a map. \- The second reducer looks like a hacky (potentially accidental) way to skip the first element. \- The second reducer's first argument is unused this time? Also, \`initialValue\` argument provided, but why? \- \`\[...currentEntry\]\` is pointless/wasteful. \- \`currentEntry\` map is used like a \`forEach\`. \- \`currentEntry\` mapper argument "digit" should be named "letter".
mine from years back: https://codepen.io/zyklus/pen/gykbc
It is the gaming industry, so rare for us. It's just the company culture is very strong and positive. Money could be better.
Classic case of not paying enough
I have not thought about it, a little later )
You are absolutely right. Typescript is a huge negative which adds malfeatures to appeal to people who love the java style.
No, the application does not optimize images uploaded by the user. When uploading, there is a 10Kb limit for converting to base64
Unfortunately I don't share your opinion on the fact that HTML in email is a dirty business. At the moment I receive an issue for improvement and do my best to ensure that the signature is displayed correctly in all clients
Great for you guys! What aspects of your company culture do you think the team values the most? It's always the hardest problem in management that has no clear answer because it's very soft skill based but it's endlessly important in keeping a company on an upward trend imo.
So far, there is no guideline on contribution. Icons I found on https://www.flaticon.com/
Great job!
Be aware that if you use the upload function, it turns it into base64 which will not load at all if your recipient is using Microsoft Outlook. The best option is to have your image hosted somewhere. 
It's a mess in Outlook right now, but it's an easy fix. 
Nice writeup. While eagerly awaiting private fields and methods, I really hope this proposal dies. 1. Why on earth would it be considered good, to have to change every access and callsite when visibility changes? Why would I even care about visibility when calling methods? 2. I don't buy the argument of "having a private and a public field or method with the same name is great". In fact I think that's terrible. Really really terrible. Like designed to be a foot gun. 3. Additionally, I'm entirely convinced, a TypeError should be thrown if a private field is accessed when forbidden. All this talk about "hard private" is nonsense and will quickly become a thing of the past anyway once this is used in the wild. Next thing I'm sure is a Reflect counterpart to get and set private fields. 4. I can't think of a good way to implement protected fields later. And it will be a wish, trust me. Shigil again? All the above points apply, only much worse. Decorators? Please no, no.. Three very different methods for dealing with visibility, what should primarily be an enforced convention? No thanks. I'd rather not have private fields than this inherently broken and clumsy implementation. 
so node.js console for mac?
The upload is limited to 10kb. So it needs to be optimized before you even upload it. That said, base64 has no support in Outlook so I wouldn't recommend using it. 
Add overflow-y:scroll. That way the scrollbar will always be there and content will not jump around
I‚Äôm on a phone and don‚Äôt have access to a regex repository right now, but I can tell you that your code has s returning true because it‚Äôs treating the number ‚Äò20‚Äô as two numbers, ‚Äò2‚Äô and ‚Äò0‚Äô, both of which are between 0 and 9
It matches with [0-9]$. Either change it to ^[0-9]$, or the full RE to ^(-[1-9]|blah|blah), i.e, add the brackets.
This. Page is probably "jumping" because of appearing/disappearing scrollbar.
`/^(-[1-9]|-?10|[0-9])$` will work. This is because **Anchoring (^$)** has more precedence than **Alternation (|)** see: [RegEx Precedence](https://stackoverflow.com/a/36870447) 
This is a typical problem organizations (or just society at large) have when adopting something that one silo likes very much. The snarker in me needs to say that some people in this sub ought to read your post as "this is how it feels when you decide everything has to be callbacks just because it can be callbacks" but for the sake of your sanity and that of your coworkers... Bring it up. This is an efficiency disaster at best, and the beginning of a breakdown and destruction of you department at worst. They are going overboard. Doing the dev-enamored-with-new-toy thing: and you think they're "accidentally, subconsciously" (so it's clear you're being neutral toward the motivation) turning your Javascript department into a Java department just because it seems so cool to them that they can.
**UPDATE:** Looks like the max-width property of the &lt;img&gt;'s is causing everything to shift when the scrollbar appears. The scrollbar changes the width of the page, and so the images change dimensions in height since they are allowed by the extra space and "max-width" to get closer to their true dimensions (width AND height-wise). &amp;#x200B; I will work on a code pen that has dummy images since this is a personal project and I'd rather not use my own images. 
I would but I am intentionally getting rid of the scrollbar since there is a fixed overlay that appears on top of everything and it looks much better when you can't see the scrollbar and cannot scroll. I've seen it done before but I'm not sure how it was done without this issue.
VSCode for me though but the extensions are very cool. Auto-completion and indentation is faster on it. However, some people prefer sublime because of its powerful search tool with Regex, quick refactoring of codes and switching between couple of code files.
You've misspelled February
Considering there's even a comma after it and you don't have control over the data source, it seems clear the DB was designed for the possibility of those URL fields being used as lists of URLs. Build a *for (let i in obj[fieldName])* and get over it.
***SOLUTION (Works IE9+):*** ***margin-left: calc(100vw - 100%);*** ***This prevents the scroll bar from jolting the page around when the overlay menu is toggled (which intentionally sets body to overflow-y:hidden for aesthetic and UX reasons).***
To make /u/ageown's solution more scalable, do two things: in the HTML, change this: &lt;p&gt; to this &lt;p id='output'&gt; And in the Javascript, change this: const para = document.querySelector('p'); to: const para = document.getElementById('output'); That way you're guaranteed to replace the specific paragraph even if the page changes.
I don't care about that proposal, I'm just gonna use typescript's private fields in same way and be happy. If TC39 wants to maintain quirky nature of JS - whatever but this gonna steer people towards TS even more.
Great alternative to Quokka.js
I *JUST* started using jQuery. For that matter I just decided Javascript was finally for adults, and put it front and center. Some of us are **not f'ing around** about that "obsolete is stable" mantra. I get a good laugh on the regular, watching the fad-chasers living in their security sinkholes and paradigm shift treadmills. I imagine they must hate their home lives an awful lot, to be constantly seeking these new excuses to build it again but this time in biodegradable waffle irons or whatever.
In my current work we actually write full blown Java-style code in plain javascript and that's simply a nightmare. I would be happy if we could use ts. 
They are so out of touch with reality sometimes. The # proposal is awful.
Your points are spot on. Please join the committee. They could use a dash of sanity.
Also so far I've seen nobody that would say 'yeah I think that # is better than private keyword'.
thanks hero
thanks
All I know is that I found moving things into a callback (even when it seems dumb to me or causes me to fix race conditions that wouldn't have existed otherwise) to be a lot easier than understanding async and await.
 &lt;script src="https://unpkg.com/react@16/umd/react.development.js" crossorigin&gt;&lt;/script&gt; &lt;script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js" crossorigin&gt;&lt;/script&gt; const e = React.createElement ReactDOM.render(e(SomeComponent), document.querySelector('#like_button_container'))
It's hard enough making a simple website that'll appear correct across browsers; when you multiple the potential clients by including email readers, you're asking for trouble. This is common knowledge in the industry; I'm surprised you'd disagree. Oh well, each to their own I guess. Good luck!
&gt; I don't buy the argument of "having a private and a public field or method with the same name is great". Agree, also this is not possible in other programming languages, so what kind of weird idea is that. &amp;#x200B; &gt;I 'm entirely convinced, a TypeError should be thrown if a private field is accessed when forbidden Exactly - Errors exist for some reason, just throw them when user do something stupid, don't create a new bunch of errors like 'implicit type conversion', we don't need fuel for another 'JS WAT?' &amp;#x200B;
Yeah, you need some real talk. Internships are basically a giant red flag on a resume that says "timid, aimless, has no confidence, easily exploited, has a 100+ year old picture of how the world works". And FYI freelancing is a losing game. You will dedicate more time to chasing jobs and doing customer service than you will spend on billable hours, by orders of magnitude. And you will compete globally on price, meaning a constant slog through idiots who want to pay you 50 cents an hour and watch you sleep. Just spend all your free time getting good for about 4-6 months. Then do one or two decent portfolio projects (another 1-2 months) and then go get a job. Then dedicate all your private time after THAT to inventing something you own (e.g. a game or app), because it won't take long to discover, corporate work is much worse than your cushy union job of smiling at your neighbors.
Suck that Discord cock harder will you lmao pathetic creature.
{Stop, Advising, Pros, Noob} = YourVotesAreTalkingToYou [hashtag bestpractice]
I think you need `bodyParser.urlencoded` as well: https://stackoverflow.com/a/31435938
What's wrong with [guard](https://github.com/guard/guard)?
I think he forgot his link. I found it. [https://hk.saowen.com/a/b9d5352b31f034a3ab2388d77c724a0845056cc06190bbf237109cfa1e7aa21a](https://hk.saowen.com/a/b9d5352b31f034a3ab2388d77c724a0845056cc06190bbf237109cfa1e7aa21a) It says a lot of things, but doesn't say much to back them up. Could be great or awful... No way to tell without digging into the code.
I may be the only person on the planet who feels like I don‚Äôt even care about private variables. I‚Äôve been writing code for decades and did a ten-year stint in Java prison. I‚Äôve done C#, ruby, JS, Scala, Clojure, and plenty of dabbling in other languages. I‚Äôve been on teams ranging from just me to fifteen people; I‚Äôve written tiny little apps for myself and ‚Äúenterprise‚Äù large scale b2b applications. I feel that private variables add very little to a language. I rarely even use class inheritance. From my perspective it‚Äôs a dead end. So I guess this I just hope this dies on the vine and nothing ever replaces it. There, I‚Äôve said my piece feel free to tell me why I‚Äôm wrong now. 
Pssst single quotes
Not valid JSON. But, valid JSON5. I thought of that ‚Äì once someone has a use case, will think of a solution.
This is funny because I don't even know what build tools are for. I call them fiddly bits, and I generally accuse people who use them of just looking for excuses not to go home from work. Either that or they're basically the equivalent of nuclear bomb blasts set off by infiltrators from the C++ and Java camps who are jealous at the superior work flow, so they destroyed it. Good on ya. I think you will find that the difference seems to be that you just signed up to remove a lot of useless work from your pattern.
great work man keep going!
awesome man thx
If your project becomes less than 51% your personal work before you make a SAAS (or any other business model) from it, your company and reputation will be attacked viciously for it, by people who will then immediately turn around and do the exact same thing you were doing. (It's still a risk even if the project is 99% your personal work, really.) They will say you stole their code, and then go on to create a global jet-setting community around the code they stole from you.
Don‚Äôt you mean ‚Äúbutton.disabled = false;‚Äù ?
(not OP) I'm waiting for a concise answer like this that doesn't say "I like it because it reminds me of the language I used before Javascript which makes me feel more comfortable because the mammalian brain likes that". Why? Because that's 100% an argument *against* typescript for anyone who already likes Javascript ;) Strong typing and interfaces are good selling points but you can take that "more work is easier" crap to the swampland auction ;) (I'm only guessing here, but either adding features to the language requires both learning *and typing* extra keywords, or my mom's a horse)
"modern" is a bit too much. I don't think there are paradigms "better" than others, rather just different, but all have their pros and cons. Also, "bad or good" is subjective.
I'm guessing you're going to wind up using Unity or RPGMaker.
&gt; Also, "bad or good" is subjective Mostly, to an extent. It's certainly reductive enough for the margins, but there's an ace up my sleeve that makes this a trick question: Because when, exactly, does a JS programmer ever write code that doesn't go into an object? Not in the browser when their scripts are all nodes in a DOM object. Under the hood, is there even any escape from our scripts being wrapped in an OOP capsule at the engine level, served almost all our datatypes as OOP, calling language methods that are mostly OOP, etc? Hence some of the tonality... I've seen a lot on this sub that sounds to me it sounds exactly like children eating daddy's food while complaining about how daddy never did anything for them.
Definitely none of them. But that is also my recommendation for an experienced programmer. They are all massively invasive bloatware which completely take over your project structure. The best front-end library is the one you write yourself on the day when you finally actually need one. &gt; Is it possible to make good websites without using them ? In much the same way as it is possible to go from Seattle to Tacoma without first going to the North Pole, yes.
Too much text, this is much shorter and clear https://developers.google.com/web/updates/2018/12/class-fields
PHP: HAHHAHAHHAHAHAHAHAH. As someone who got trapped in this language for too long, I will pass along a lovely joke that helped me escape it. "Coding in PHP is like riding a bike, except the bike is on fire, and you are on fire, and everything is on fire because you are in hell." Java: Compared to Javascript, Java is not at all distributable. Nevermind the question of it being cross-platform. Java is a brick glued to the bottom of the ocean and until it can accomplish some kind of distribution partnership with the OS's, that's where it's going to stay. C++: I don't work for the space program and I am not a bureaucracy, so I will not be filing my code in triplicate. C#: Microsoft filth Python: I just never got around to it, and now that I know Node, I probably never will.
Imagine if we removed all of the railing from a staircase. People would probably still have no problem walking down the stairs most of the time. They may have to be more careful, but they probably wouldn't get hurt. But sometimes people might not be paying attention, or maybe it's their first time using that particular staircase, and they could hurt themselves. The solution clearly wouldn't be to tell every person that gets hurt to learn how to walk down stairs, or that they should just go find another staircase. The solution is to make things as foolproof as possible. In other words, people are always going to end up making mistakes, I might reread this and real The best way of dealing with this is mitigating the damage that mistakes can cause. If you can turn unsafe behavior into a compiler error, you can save a lot of headaches and maybe even grant yourself some extra security. I'm not really talking in terms of JavaScript but the same ideas can still be applied.
I have to agree with you, while I don't have such experience as you I only see myself use privates if I'm writing a lib that will be consumed by dumb people and even then, I sometimes cheat
&gt; In other words, people are always going to end up making mistakes. The best way of dealing with this is mitigating the damage that mistakes can cause. Some people are always going to be incompetent, so the best thing is to foster a culture that frowns upon and/or deprioritizes the techniques of competent people. Correct paraphrasing?
OOP is not about JS "objects", you're taking it literally. OOP is about classes. Of course, from a JS point of view that would be the same thing but anyway it's not all about the "capsules" there's more to a paradigm than that.
I dropped out of corporate ten years ago. I'm almost done with therapy. Aside from that hacky prototype bs that has probably colored a lot of JS devs' judgment about OOP because of how awful it was, I get what you're saying, but (aside from that hacky prototype bs) you don't make objects without making classes, so the point of your semantics is a tad lost on me. Yeah, you use things statically when it suits, you use things instanced when it suits. You do things competently. Er, I mean, I do. I hope you do, too. I think maybe I just turned your entire reply into nothing. What were you saying?
Almost. Everyone is incompetent a fraction of the time, but hopefully their mistakes can be caught by their compiler/linter/etc.
I think, maybe, you didn't understand my reply, or genuinely have no idea about OOP. I think, maybe, you are taking to heart and becoming a bit aggressive, so I'll just stop here.
&gt; Everyone is incompetent a fraction of the time, Truth af &gt; hopefully their mistakes can be caught by their compiler/linter/etc I prefer we should develop the mentality of a binary between "dev mode" and "strict mode". Dev mode is "I'm prototyping, shut up, I'll tidy up before deployment" and everyone laughs at you if you deploy using anything but strict mode. You're confirming my impression that the anti-OOP mentality is about opening up the engineering field for failures and participation award winners. I'll leave my mind open for other views, though ;)
[https://github.com/tc39/proposal-private-fields/blob/master/FAQ.md](https://github.com/tc39/proposal-private-fields/blob/master/FAQ.md) &gt;Why aren't declarations private x? &gt; &gt;\- (...) implies that access would be done with this.x. Assuming that isn't the case (see below), in JavaScript this would silently create or access a public field, rather than throwing an error. Then make it throw an error? &amp;#x200B; &gt;Why not do a runtime check on the type of the receiver to determine whether to access the private or public field named x? &gt; &gt;\- Property access semantics are already complicated, and we don't want to slow down every property access just to add this feature. \#programmingIsHard &amp;#x200B; &gt;Why doesn't this\['#x'\] access the private field named #x, given that this.#x does? &gt; &gt;\- This would complicate property access semantics. // #programmingIsHard &gt; &gt;\- **Dynamic access to private fields** is contrary to the **notion of 'private'.** What? You mean your notion of private, because any other language has no problem with that. &amp;#x200B; &gt;Why doesn't this proposal allow some mechanism for reflecting on / accessing private fields from outside the class which declares them (e.g. for testing)? Don't other languages normally allow that? &gt; &gt;\- Doing so would violate encapsulation (see below). **That other languages allow it isn't sufficient reason on its own** Ok now I see, **other languages are wrong**.
&gt; didn't understand my reply Possible. &gt; you are taking to heart and becoming a bit aggressive That's where this post *started* ;) Be well
TypeScript. I've never used it, but I understand what its featureset offers well enough to say it pretty much elevates JS out of a certain sub-engineering ghetto of looseness. I wouldn't consider TypeScript mandatory for many things, but if you're using JS in big-pants-with-hardhats capital-E Engineering jobs, *without* TypeScript, I'm terrified for the life of anyone affected.
I find private and protected variables and methods very useful for one reason: I know that these are not in use by external code so I know they are safe to rewrite or delete if they are no longer in use by the class (or inherited classes). If I want to modify public variables or methods, I will first have to find all references to it and rewrite them too. Sometimes, like in class libraries, those references are in a different project and cant be rewritten without breaking backwards compatibility. But modifying a private method or variable I know I will never break backward compatibility. It simplifies code maintenance a lot. But I'm not that experienced in how different languages deal with classes.
You're setting the HTML of the modal everytime instead of appending it.
I'll dig into it and get back to you
I continue to work on task manager. On this week dockerize app. [https://github.com/taskill/taskill](https://github.com/taskill/taskill)
Doc; u; mate: nobody cares unless you at least say what it does in the title. Otherwise your post is indistinguishable from something so worthless that the only way to get clicks for your website is not to say what it does. Splain'dYerDownvotes, happy New Year, /psa
Vue, mostly. j/k, j/k. I liked its demo video so much, I implemented live data reflection into my own home-brewed libs. It was fun, only took most of a day. Okay, maybe I should add the four days when it was broken during the next refactor... /u/JustSub has the right answer. Turns out there are actually a lot of companies interested in reducing their IT dependence on FB and Goog. But I imagine there is a definite upper end to adoption that comes from the same complaint that turned me away from the other alternatives: they all completely take over your project structure.
IMO, nothing will replace learning by experience. It is the fastest way to learn. Make lots of mistakes and learn what not to do. The people who can open up the docs and start tinkering have a good understanding of the language, a lot of experience with past projects, and a clear idea of what the library is supposed to do. Don't force yourself if it's not your style. Once you have enough experience, your intuition will be develop to the point that you'd be able to do that, too. What specific problem are you looking at that you can't solve? 
https://mjml.io/ might be useful for you!
There's only one short answer to this that fits everyone: &gt; Please guide me the path to improve my skills. Make a permanent hobby of finding little projects you're terrified of because you have no idea how to approach them, and doing them in your spare time. ---- ... And the most important bit of advice it's *possible* nobody has taught you yet... I don't mean to insult your intelligence with this next bit, but, 1-2 years doesn't tell me whether you already know this or not: always be working on code libraries. On average, about half of all code you write should be going into a module file that can be reused outside of that project. This creates a growth of accumulated progress that goes beyond the current project; it helps sharpen your mind a lot because you are both solving problems and identifying patterns of formulas;and, a big deal for both your enjoyment and your employer's bottom line, it also makes future projects much easier to start and faster to finish.
&gt; OOP is the only good and modern programming paradigm No it isn‚Äôt. &gt; the best, most experienced coders think this way No they don‚Äôt. The guy who invented C++, for example, encourages free functions over methods, and encourages avoiding side-effects. Private data is meant to solve a specific problem, to maintain an invariant, and inheritance is also meant to solve a specific problem, to implement substitutability. Saying that OOP is the only good paradigm is a sure way to overuse and abuse that paradigm. 
&gt;&gt; What possible argument is there against this that can't be dismissed wholesale &gt; The guy who invented C++, for example, encourages free functions over methods, &gt; ... &gt; Saying that OOP is the only good paradigm is a sure way to overuse and abuse that paradigm. THANK YOU! Your answer is like an origami made of correct answers. Now, delete it, this post is actually a litmus test for morons. *snort* j/k. About the deletion request part.
&gt; You're confirming my impression that the anti-OOP mentality is about opening up the engineering field for failures and participation award winners. I'll leave my mind open for other views, though ;) I wouldn't phrase it like that. Just because it isn't as hard as it could be, doesn't mean it's as easy as showing up. &gt; I prefer we should develop the mentality of a binary between "dev mode" and "strict mode". Dev mode is "I'm prototyping, shut up, I'll tidy up before deployment" and everyone laughs at you if you deploy using anything but strict mode. I kind of like this, it's similar to the concept of "unsafe code" in Rust and Haskell. But I think normally people just get used to writing safe code and don't bother with unsafe code unless they have to.
Yes, it works! Thank you so much /u/ageown
Fantastic! Would love to see what you use it for in the end üòâ
&gt; unsafe code Gotta have a place to put all the deprecated, transitional-quirks, standards-mixing, and so forth behaviors. In much the same way as babies have a lot in common with the elderly, the things noob programmers do as mistakes, expert programmers do because of experience.
Holy moly that's bad. I'm sure I'm not the only one that initially interpreted those lines as comments. 
I can‚Äôt speak for everyone but it used to be hard for me until at my job where YouTube is sorta blocked so you have to read the docs and then tinker with some code snippets until you understand it. Now I can read docs &amp; get some code going but I realize the docs (depending on who does them) doesn‚Äôt necessarily show everything or the ‚Äúbest‚Äù way to do whatever actions so I‚Äôll have code that looks hacky until I come across an article or repo that has the code done a better way. TL;DR I typically use the docs as a guiding point for a simplistic view then find articles bashing out the complicated principles when necessary. 
Inheritance is class based approach thing. You don't need classes for OOP.
Since that's what I've always done, for 4 decades now, it's hard to even understand the question. You sit down with a book or the tutorial/API docs, read it, do the exercises; don't just skim the source code, type it in and run it so you get muscle memory. Now you know the language. Write something new in it to make sure you remember it. Last year I learned Julia, took about a week to be productive and write a text dungeon crawler in another week or so. Most languages are harder or just further from my comfort zone, maybe 2-4 weeks? Of course, many people get thru life pretending to be programmers just copy-pasting from stackoverflow, and they never need to read docs. 
Doesn't explain the classes and other bloatware concepts.
Thank you. This will really help me
Codepen?
Thank you for taking your growth responsibilities seriously. Programming should be only for people who do.
It dereferences the arrays value with the randomized index. What's the issue? 
Talk to your leads, and ask WHY, always ask WHY, if you do not know why and don't see the clear benefit you will be demotivated to do your job hurting everyone at work. It is leads responsibility to make sure that you are on track
NoSQL is easy to distribute. Sometimes adding a few missing features to a flatfile storage mechanism is cheaper than a license that costs 100x its usefulness, or an include that just makes you go ugh for all its overhead and back-end support possibilities. Otherwise agree 100% but if your app already has reasons to transform the entire dataset during runtime, and you already have reasons to package transactions and callbacks at runtime, it makes a number of RDBMs features superfluous -- and those things tend to have big overhead. And writing code for a flexible, normalized index system can be much, *much* faster than reading distribution licenses for a DBMS/ODBC/ORM stack.
If you understand the concepts beneath the tool, the docs should be fairly straightforward. If you don't understand them, Google helps.
&gt;OOP is about classes. No it isn't.
People tie too much language-specific concepts (mainly java / C# I guess) to what OO is as a whole. For example: classes. You don't need classes for OO. You don't need inheritance for OO. Structs are sufficient. Composition over inheritance is truism in OO too.
I was thinking this exact thing. If you're using a map purely for its side-effects, it's not a map. One more thing I'd advise against perhaps; using a constant array as your accumulator of sorts. 
Thank you for your help but this didnt fix my problem. Now it shows me every number from 1 to 150 in the modal. 
&gt; You don't need classes for OO. You don't need inheritance for OO. Structs are sufficient. We're gonna have to agree to disagree. Structs predate OO albeit by a hair. AFAIK, classes and inheritance have been the defining features of OOP for ~40-50+ years. I'll be gracious if proven wrong on that basis, but I'm not into revisionism.
In that case, can you explain a little more of the intended goal? Your currently posted code creates a const variable of a single element, starts a loop, creates a new h4 element with text set to the index of the loop, and sets the HTML of that single element each time essentially erasing what was there before. That means only the last element will ever be shown since everything is being overwritten each pass. *if I missed something please let me know*
Oh there is no issue. I am just practicing dissecting every line of codes. I came across that particular line and have no idea what it does. The purpose of it and what it is trying to achieve. Do you have any resources for me to read it somewhere else ?
The problem is your example doesn't show anyone actually calling that function. If you looked at an example of the function being used and the output you get, I think it would end up being a lot more obvious to you.
Using JavaScript your best options are cookies, session storage or local storage if you would like to persist a variable across pages.
Do you know of a tutorial that is easy to understand how to do what you recommend?
Last time I heard someone talking like this about OOP, I was sitting on university lectures. That was over 15 years ago.
The normal way of doing this is saving this "over 18" flag in a cookie, then checking that in each page load and run your code if it's there.
Maybe... Fixed!
OOP points out a strange fact about human nature. I'll leave the summary conclusion to the observer, but as long as it's been since functional programming was supplanted by something equal-but-better, most people still treat it like a fad. It's not entirely analogous to the way analog watch users who emotionally feared the possibility of outright *failing* to learn how to program a digital watch, felt about digital watches; but it mostly is.
`sessionStorage` (and `localStorage`) is just a global (always available) object whose properties persist between pages. This should work for you: ``` function removeAgeGate (){ document.getElementById("AgeGateID").style.display="none"; document.getElementById("AgeGateID").style.visibility="hidden"; sessionStorage.over18 = 1; } if(sessionStorage.over18){ document.getElementById("AgeGateID").style.display="none"; document.getElementById("AgeGateID").style.visibility="hidden"; } ```
PS because of your tone being just as frustrated as mine I didn't immediately read your 2nd and 3rd paragraphs. Belated response to those: preach it :)
Come work on this large, 5 year old coffeescript project at a large company that has had about 30 different developers touch it. It'll change your mind overnight.
Occasionally I‚Äôll spend 3 hours trying to learn something on YouTube, Udemy, LinkedIn Learning or from one of the coding sites. Then I‚Äôll give up and spend 15 minutes reading the steps on Mozilla Developer‚Äôs Network. It feels easier the first way. It gets done the second way. The steps are the steps, and they are just so plainly demonstrated in the text on MDN. We‚Äôre coding in text. It makes sense to follow the steps in text. I do love freeCodeCamp though. I treat it like an interactive doc with well placed challenges that encourage me to integrate new concepts with foundational knowledge. My best learning experience seems to be from building something while referencing docs as needed. Then saving what I built for future reference. freeCodeCamp is a guided tour through the process whenever I need that kind of structure.
Base64 parses like shit on Cordova for some reason.
Thanks defproc, Curious, I'm not at my computer to test this. Do you know if this will work if the div I'm displaying will hide since im displaying it via HTML CSS? I'm wondering which operation goes first. The JavaScript or the html CSS. I guess I will know when I run it. Also, in your if statement, do I have to have the if statement say: if(sessionStorage.over18 == 1){ ? Thanks again for your time and help Line
Thank you!
Sounds good, I just don't know how yet. User defproc above is suggesting a global warming solution
so regex?
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array 
Well the purpose is to pick a random element of the holes array. Generate a random number, use that number to reference an element of the array. That way you get a random element, so you can get a random hole 
Depending on the libraries documentation and your learning style, your (and anybody‚Äôs really) to do this will vary. I was taught to learn this way, and generally do, but documentation that does not speak to ME in particular is common (I imagine it‚Äôs the same for everyone) and I‚Äôm generally forced to learn tools by fiddling. I do not like YouTube tutorials because it generally feels to me like they‚Äôve just given the source docs a quick glance and are fiddling around for the first time at the same pace I was before I opened up YouTube. If what your asking is ‚Äúhow hard is it to read the docs and use any tool flawlessly,‚Äù my answer is ‚Äúthat‚Äôs very rare, and I haven‚Äôt seen that happen‚Äù If what your asking is ‚Äúhow hard is it to learn enough of a tool to fiddle around and teach myself‚Äù my answer is, ‚Äúgenerally not super hard, but your mileage will vary depending on the tool‚Äù
So TC39 should base their design decisions on the inability of some developers to compartmentalize? Do you also get confused by RGB hex codes and fragment identifiers? The best part about this ridiculous interpretation is that if you confuse the new private field syntax with commented-out code, then this syntax has served its purpose. These are *private* fields, after all. The whole idea is that third parties shouldn‚Äôt meddle with them. So you‚Äôre actually making a pretty good argument in favor of this syntax while attempting to argue that the opposite.
bunch of regex, yes
Yes kore you are right. If you look at my project you will see that the buttons are my pokemon and if you click on them modal pops out. Since the information in the modal gets always overwritten i can‚Äòt give them a unique model. And here lies my problem I want to create unique modals for every pokemon with some basic information but I can not get how I can achive this. 
The SpeakJS server already exists with a huge membership... https://discord.gg/tYsGUzS
Yes kore you are right. If you look at my project you will see that the buttons are my pokemon and if you click on them modal pops out. Since the information in the modal gets always overwritten i can‚Äòt give them a unique model. And here lies my problem I want to create unique modals for every pokemon with some basic information but I can not get how I can achive this. For example: the title of the modal is: charmander And the discription shows shows basic pokedex information like type height discription...
Could you pass the information to the modal using HTML data tags? i.e. data-modal-title="Pikachu" data-modal-description="This is a Pikachu" Attach those to the buttons in HTML and then grab them using jQuery(this).data('modal-title') in the onclick event.
They rejected the keyword for a reason.
Should do, all else being normal. Setting `visibility` is kind of superfluous though since `display = 'none'` will effectively remove it from the DOM. &gt; if(sessionStorage.over18 == 1){ That'd work too. Leaving out the `== 1` works because it exploits JavaScript's implicit conversion to boolean. So, let's say we haven't yet set `over18` to anything. Trying to read the property would give us `undefined` and inside an `if` condition that converts to `false`, whereas `1` converts to `true`. The way a value converts to boolean is usually called "truthy" and "falsy" values.
A couple of suggestions: 1. /r/LearnJavascript is the correct place for your question 2. Learn to use reddit syntax to make your code readable when you put code in your post 3. Take some time to put your ideas in order and structure your questions correctly so that they don't read like a stream of words. Writing effectively takes effort but that effort pays off when people can understand you more easily and feel more inclined to help you. Writing better will also help you program better.
A couple of suggestions: 1. /r/LearnJavascript is the correct place for your question 2. Learn to use reddit syntax to make your code readable when you put code in your post 3. Take some time to put your ideas in order and structure your questions correctly so that they don't read like a stream of words. Writing effectively takes effort but that effort pays off when people can understand you more easily and feel more inclined to help you. Writing better will also help you program better.
Thanks kore I think that this should work. This gave me so new ideas how I could achive this. 
Cool. Happy to help. Good luck with your project üëç
The article states that "the hold-over opinion from other languages" was the reason they aren't using the "private" keyword so they already are taking into account other languages in their decisions. I don't get confused with those examples because they usually appear within the context of a line of code. In this case it was at the beginning of a new line. It just seemed odd they would pick a character that already has a common meaning in many other languages. 
[This](https://stackoverflow.com/questions/18548465/prevent-scroll-bar-from-adding-up-to-the-width-of-page-on-chrome) question in stackoverflow might be helpful
Function accept an array (list) of holes Generates a random number within the range specified by the length of the array and sticks that in idx Gets a hole from the array at position idx.
In JS we use mixin instead of OO.
I'm not sure they do. Behavior becomes a thing long before we find a verbal name for it. And when it arises, the fact that it's named Object oriented and not Class oriented is rather telling.
I wouldnt say that JS has some OOP bits "tacked on". It's an object oriented language form the ground up, considering that pretty much verything are objects. It's just OOP in a different way than say, java or C#.
No it wasn't. Just look at typescripts own codebase. No classes or or other Java, C# shenanigans.
After reading the rationale I will say it. Yea I think that # is better than the private keyword since it allows for true information hiding where private by itself does not.
[removed]
any ideas for a better name? :-)
&gt;function removeAgeGate (){ document.getElementById("AgeGateID").style.display="none"; document.getElementById("AgeGateID").style.visibility="hidden"; sessionStorage.over18 = 1; } if(sessionStorage.over18){ document.getElementById("AgeGateID").style.display="none"; document.getElementById("AgeGateID").style.visibility="hidden"; } Thanks defproc, seems to have worked :D
This **#** would be a big mess for those making dynamic js from php: [\# is a comment.](http://php.net/manual/fr/language.basic-syntax.comments.php) Not talking about url hashtags/anchors. Bad idea!
I'm really curious how useful this will be in practice. Closure state is private and so it is hard to test, so what I often do is that I introduce an object where I can override whatever I need during unit-testing. Which means private fields are useless for me because I cannot override them :-) &amp;#x200B; being able to override fields is one of the coolest things in javascript.
Underscored private method names give you that benefit without any downsides ... as long as your team is mature enough to understand that any method with a leading underscore needs to be treated the same as a private in another language.
It's going to happen, and there's nothing we can do about it. This proposal is at Stage 3. We're all going to be stuck with this terrible new addition to the language, and there's nothing anyone can do about it because the a small number of out of touch people think it's a good idea.
Made a barebones view pager https://codesandbox.io/embed/n9vo1my91p and the lib around it that makes gesture handling pretty simple.
Do you know much about JS's history? Brandon Eich wrote it in an extremely short period of time, and the OOP bits really were "tacked on". The "Java" in Javascript was tacked on also, because at the time everyone thought Java applets were the future of the web.
I think the # is nothing when compared to all other issues discussed in that proposal. [https://github.com/tc39/proposal-class-fields/issues?utf8=%E2%9C%93&amp;q=](https://github.com/tc39/proposal-class-fields/issues?utf8=%E2%9C%93&amp;q=) and especially this one (which is in private methods proposal but the thread is actually about fields) [https://github.com/tc39/proposal-private-methods/issues/10](https://github.com/tc39/proposal-private-methods/issues/10)
So my customer has given me the string `"I will pay $2.00" and I extract it like so: extractPrice("I will pay $2.00"); And that gives me the result of: [ { amount: 200, currencySymbol: '$' } ] I now charge my customer $200...
It's a brain-dead proposal. And the response from TC39 to any criticism is just "nah, we're going with this". Astoundingly this isn't the first time they've done this. People kept asking for Promises to be fully turned into monads (which they're 90% of the way there), and it was dismissed as being a "functional programming fantasy" ... Last I checked JS _was_ a functional language, so WTF TC39.
I have tried to give them my feedback and have pointed out so many issues with their proposal. I guess I have come to the conclusion they are going to just force it through, just to have it, at the expense of the community. Not one person in any of my programming circles likes the proposal or thinks it's a good implementation. It's honestly a joke at this point... [https://i.imgflip.com/2qflg9.jpg](https://i.imgflip.com/2qflg9.jpg)
All prices are returned in cents. It is the preferred way of handling currencies. Refer to https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency
I am not a believer in copying source code from books or "muscle memory". You end up introducing typos and chasing down these errors instead of learning anything. Just read the code, it is just plain faster too.
Hi /u/arkainrdk, I'm letting this one stay since I missed it originally, but in the future, please use the "Submit a new link" option when posting a link. Thank you.
Hi /u/HolidayInternet, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/FriendlyMinimum, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Technerd88, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/olcay030, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/poor-toy-soul-doll, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/dominic_l, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/mcheung63, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/EthanPrisonMike, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Incendras, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Poky17, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Incendras, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/LowMousse, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/DharmikSpartan, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/monkeybrainz_, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/immawizardhagrid, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/immawizardhagrid, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/andrazte, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/LineDetail, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/dominic_l, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/rdegges, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
 Guessing that is a response to this: &gt;&gt; Structs predate OO albeit by a hair. &gt; I'm not sure they do. Upvoted for quality sophistry because of the following, which I argue all the time in history debates: &gt; Behavior becomes a thing long before we find a verbal name for it. One holdover from the not-garbage side of how JS OOP differs from other OOP, is the anonymous object, which I love. But it still has a class, the Object ;) It's lol good, I felt like turning my frustration at knee-jerk anti-OOP trends I was seeing, into a badminton game. Getting some quality perspectives out of it and I thank you among others for that :)
Hi /u/jmdawson, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Thanks for your understanding.
Hi /u/CADBOT, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/shredgeek, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/dejanzr87, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/chronicideas, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/goanpixie, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
Hi /u/CrazyCabster, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Safarli, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Just because a Medium article written by OP says it doesn‚Äôt make it so. A desire to avoid design decisions made in other languages is not *the* reason or even a major consideration for why they aren‚Äôt using a `private` keyword, and I challenge you to find anything official that contradicts me on this. At best, it is a minor *post hoc* justification. The reality is that there is hardly a non-alphanumeric character on your keyboard that isn‚Äôt used as a comment delimiter is some common language.
Sophistry? That's documented reality of human behavior. We act out first before we can codify it in speech. For example little children of age of 4 can play co-operative game. Having them play means they do agree on common rules and goals of the game, however when pulled out of the group they cannot name what those exact rules are. There is loads of studies done on the phenomena by many well regarded people, for example Jean Piaget, who was probably first to document it in such detailed manner.
Thanks for posting. I will be checking this out today! 
Oh hey man, did not expect to get a reply. Quick question. Is there anyway the zoom can zoom out further? i see you put it at Math.Max (for the zoom coding) so I think you cannot zoom out any further. Is this correct ? 
ok thanks
Underscored gives the intention but not the guarantee.
It also would be nice to post in a more mobile friendly form when you repost. A big screenshot for a few words seems like overkill.
Continuing work on **Video Hub App**: Thanks to my collaborator we have a script for translating the app into different languages. I added instructions and a request for others to contribute: [https://github.com/whyboris/Video-Hub-App](https://github.com/whyboris/Video-Hub-App) Together we merged \~10 PRs this week and I'm working on more this weekend. Biggest improvement: variable number of screenshots for videos (e.g. taking a screenshot ever 5 minute of the video rather than a fixed number per video). And the collaborator added video previews that play when you look at the gallery - the effect is awesome!
This is a good point, and could easily be enforced on a team with linter rules. IDEs could also support it by not providing autocomplete for dangling-underscore-named members of another object. I'm not sure we need a language change, certainly not one that seems far more convoluted than necessary.
Under the section ["Why does this proposal allow a class to have a private field #x and a public field x?"](https://github.com/tc39/proposal-class-fields/blob/master/PRIVATE_SYNTAX_FAQ.md#why-does-this-proposal-allow-a-class-to-have-a-private-field-x-and-a-public-field-x) in the private syntax FAQ the following is stated "This is something other languages with private fields generally allow. E.g., the following is perfectly legal Java:". This shows that they do not want to use a keyword that has different meaning in another language. As for your second point, there's plenty of characters that aren't used as comments delimiters but there's no reason they should have to use one. Pick a different keyword.
Whack
mjml is overkill for this. 
Luckily an email signature is pretty simple. It's not hard to make it bulletproof in 99% of clients. 
 Anything you wish to ask and clarify, i would be glad to talk to you here. 
Good point, but.. &gt;Underscored private method names give you that benefit without any downsides There is one downside to using underscores (and using the # that is proposed for javascript), if you want to change its accessibility, you need to change its name everywhere. Not a biggie but I like my diffs clean. &gt;as long as your team is mature enough to understand that any method with a leading underscore needs to be treated the same as a private in another language. A lot of the old code I inherited was filled with local variables starting with underscores. Public variables got underscores sometimes. Private variables sometimes had underscore. Made no sense at all. With typescript I'm happily just removing the underscore and just mark them with the correct access modifier instead. Makes the code a lot cleaner just doing that.
Funny thing is that PureComponent is still more efficient than functional with React.memo
I feel there will be a transformer in TypeScript that replaces `private` with hashtags and I will never see that stupid character in my code. So there‚Äôs that going for me which is nice. 
Where did you read that sophistry wasn't a documented reality of human behavior?
With only that How, not the What or Why which are really the most important part. 
I can understand not wanting to slow down every property access, but I'm truly baffled at the "dynamic access is contrary to the notion of private" bit.
??? If they do the same thing but are denoted differently, what's the difference?
&gt; fool proof javascript... deep cloning Ask me how I know you don't know much about built-in browser objects and APIs. Hint: there are plenty of objects available *to* JS that are impossible to deep-clone *in* JS, which makes the claim of "foolproof" deep cloning impossible.
Oh, that's what you meant. In that case I agree.
&gt;Please join the committee as they could use a dash of sanity. If only it were that simple. You have to pay to get in, or have a company pay for you.
I see coming the: ¬´ Hash in Php8.0 no more for comments, proposal by tc49 ¬ª
Ahahahah if someone is so fool to try to clone Browsers (but also some Node) built-in objects there is nothing I can do to stop him. Anyway it is fool proof for lot of common cases...I've done my best üòÄ
¬´ Private keyword interpreted as hashtag in Php8.0, proposal by tc49 ¬ª
Call it Black and only support dark and not light themes. üòé
Here's me explaining it in another thread a while back https://www.reddit.com/r/javascript/comments/a1c53y/private_class_methods_support_has_been_merged/eapucbf/?context=3
Huh, I had no idea. Well... that seems like a pretty bad idea.
MDN is very high quality too. It's one of the best sources for anything web, imo.
awesome :-D
I knew there had to be a catch. Email clients are too convoluted for a single solution to just work. 
For books, I recommend the [Exploring JS](http://exploringjs.com/) by /u/rauschma
Awesome! Using right now!
&gt; The demo above will testify to the fact that my UI/UX design experience is my weakest attribute Oh, you're new. Do you want to create a new account? [ Yes ] [ No ] *clicks no* You need to create an account to play. *gives no way to go back and create it other than refreshing the page* ---- I'm not interested in poker, but I'll give you _the_ one UX rule you always need to remember: "Don't give the user options which will make them _fail_". You either make sure all paths end up being _successful_ in some way, or remove the paths that end up with the user in a no-way-out failed state. UX experts can, of course, tell you a thousand more rules. But if you keep this one in mind, you've got at least 50% done.
You probably meant to write a `for` loop on line 10. You also probably meant to post this on /r/LearnJavascript
How can I combo it in my script code? I tried.
It's lovely!
I'm with you on this. In the off hand instances where I did want private variables, the factory pattern was around so I used it. 
I don't quite get it... Does it replace vue/react or is it a layer to help with the data transfer or where does it fit in? 
I see what you mean. I don't think I see anything different regarding hiding information, but rather accessing it. Maybe it's been too long since it was relevant for me, but I just don't understand how you access this.x if there's an x and a private x. So, I guess that means I'd be at least in favor of the #.
This looks great -- thanks for the project, jfet!
thanks you :D
Slack is well known for C&amp;D any third party clients they find. People have built exactly what you did before, added a dark theme, and then slack killed it. I was using one of these when slack killed it. Our dev team was pissed cos we all need a dark theme in our low light dev environment. We switched to discord instead.
&gt; Maybe it's been too long since it was relevant for me, but I just don't understand how you access this.x if there's an x and a private x. Sorry it was unclear but the point is that you *can't* have a public and private variable by the same name if we just use the private keyword. If a variable is declared private then trying to access or assign a value to it outside of the class it will throw an error, giving clues to external programs about the internal functioning of the object. That is why we need a way to prevent trying to deduce object states by their private internals in a way that is completely invisible, hence the sigil, any and all access attempts outside of the implementation are considered errors no matter if the property exists or not.
I don't see preventing deduction as a positive use of effort. If it's JS, the source code is going to almost always be visible and obfuscation will be a pointless effort. I think with java and other languages it's not invisible either if you try to access a private member, it will tell you that it's private.
I like how you total bypassed the actual reasons they provided. The actual reasoning they provide is that unlike in Java, using a ‚Äúprivate *x*‚Äù-style declaration in JavaScript would break encapsulation.
So based on what you did I can assume you tried to do a for loop but you failled to use proper the proper syntaxe, you can learn more about that [here](https://www.w3schools.com/js/js_loop_for.asp). &amp;#x200B; As for your problem I did fix it with the foor loop and tried not to change much of what you did ( it only works for numbers higher or equal to 3) &amp;#x200B; function myFunction() { var value = prompt("What number do you want to check?"); for (i = 2; i &lt; value; i++) { if (value % i != 0) { txt = value + " is a prime number"; } else { txt = value + " isn't a prime number"; break; } } document.getElementById("demo").innerHTML = txt; } Basically it checks if the number you typed can be divided by **i** (starts as 2) and adds 1 to **i** for every time it goes through the loop. It exits the loop when **i** is equal to your number or if you find an **i** that is a divisor - proving your number is not a prime.
&gt; A common mistake that people make when trying to design something completely foolproof is to underestimate the ingenuity of complete fools
interesting, can they do that, actually? they provide an API so why is making an alternate client a problem?
ehehehehehe &amp;#x200B;
Thanks. I'll check that out. Yea, I just started and I find it very interesting (with some css and html background). I also tried to change the console.log function into this. Is that possible to create a console.log data through html? like a button that sends console commands.
They do it because they are assholes I guess.
Make sure you understand the problem. A prime number has exactly two factors. You'll need a loop to test for additional factors but there's no need to keep testing once you've determined three or more factors. There's no need to test all numbers smaller than the number being tested, just all numbers up to and including the square root of the number being tested. Throw in some error checking to make sure that only positive integers are being tested. Hint: No perfect square is prime, so you can eliminate those right away. &amp;#x200B;
I am trying to transition into development and I made my first app that works this week. It watches the weather for you (I had a career in aviation before and was constantly refreshing windows), so this little app does it for me. The front-end is Vanilla JavaScript managing what's on the screen and bootstrap to make it pretty, the backend is python with flask! ciegoservices.pythonanywhere.com
but what about numbers like 6? no perfect square, no prime.
Happy cake day automod (:
it's fine. I'm reading about it on wikipedia.
That's a terrible idea anyways...
Classes in Javascript are such a shit-show. I avoid it whenever possible, but sometimes they're convenient as simple state encapsulation.
In typescript if your object doesn't have methods then you can use an interface.
If clean git diffs are really an issue you can always do the mass find/replace in its own commit, so I don't really see that as a limit. But having programmers on your team who understand both the concept of a private field, and the idea of an underscore signifying a private field ... that's something there's no way around.
Right: for the guarantee part you need professional and competent co-workers who respect the convention. And to be fair, not every team is made up 100% of such people.
Regardless of how I feel about the proposal itself, I cannot fault their choice of notation. It's a natural side effect of how they decided to attack the problem. It really is the best choice given the limitations of their approach. What's wrong with the proposal is the approach they took. It forces them to make too many trade-offs, none of which are balanced by an equivalent good.
In order for 6 to be prime, it can only have two factors - 1 and 6. List out the factors of 6: 1, 2, 3, 6. Therefore, 6 is not prime.
Also: &gt; Make something idiot-proof and they'll invent a better idiot
Right. I was just pointing out that "foolproof" is overstating the case. You can't call something foolproof then wave away its flaws because "only a fool would do that" - that's literally contradicting your own claim. ;-)
Unfortunately, the proposal will have an effect on TS if it chooses to translate "private" into "#". Since the semantics are different, you may get unexpected side effects, some because of "the bad" in the article, and others because of some other consequences I didn't bother to mention. In all, almost everything using private-fields in anything less than the most simple of cases is going to experience something surprising and/or unwanted.
Did you ever asked "exactly why?"
But when I set square root in the function, and the number of it isn't perfect, will it check ONLY the perfect numbers until the squared number? (no need to make it to the next perfect number no? for example: sqrt(20) =4.47 nk need tk check 5 right? only the perfect numbers until 4.
Don't think so. They could just use MJML on their side to make the resulting HTML responsive.
Feel free to try it. You can either use Babel or you can turn on the "Experimental Javascript" chrome flag.
Its not prime because it has more than 2 factors - 1, 2, 3, and 6 &amp;#x200B;
yea I know, read what I sent.
Great work! I wonder. Simultaneously rotating the canvas...
I made a simple podcast player/search and called it [Podi](https://lewisshaw.me/podi)! I learned that a lot of Podcast RSS feeds can be very inconsistent and services like FeedBurner can be a massive pain. But I greatly enjoyed the learning experience and hope to do more with podcasts!
the library both transfers and reacts. It mainly fits in website builders and exporters such as [www.webflow.com](https://www.webflow.com) which the only option you have is to add attributes in the interface "data-entangle='...'" &amp;#x200B; Not only is good for builing websites and apps such as facebook, etc. but it is also very good for multiplayer games.
Checkout the ‚ÄòSieve of Eratosthenes‚Äô
Thanks for the notice. I'm still getting used to some of the conventions on Reddit. It took me a minute to figure out how to get rid of the "help" flare.
I know what it is...
This seems interesting, any interface with RxJS? Seems like that would be useful to interface with pre-existing systems (Angular, for example) I‚Äôd also like to know performance and bandwidth information
Exactly right - factors come in pairs (with the exception of perfect squares), so 20 and 1, 10 and 2, 4 and 5. By the time you've hit the integer value of the square root you've hit each of the available pairs.
I think that that is literally what you want to implement. There are probably some javascript examples with memoization out there to make it work swiftly :)
sqrt of 20 is 4.47 -&gt; does checking 5 as an option is needed?
You should've gotten a PM with directions re: removing flair -- did you not, or was it confusing still?
Thanks!
Yeah, seems like really high quality documentation! Thanks. 
You don't need MJML to make the signature responsive. It's not rocket science. It's a few lines of code. Also, it's an image and some text. There isn't a whole lot you need to do. And without the ability to include a &lt;style&gt; block your options are severely limited anyway. What would you want to see in terms of responsiveness?
Not necessary, you've already found any possible matches. In this case you should have exited your loop already. Once you had discovered 2 and 10 you'd know the number wasn't prime. If you were checking 82 for instance, by time you'd checked 9 as a factor you'd be done. &amp;#x200B;
I still cannot get the point of your criticism. It does not provide any benefit for the project. The function is foolproof enough for everyday use. If someone wants to get in trouble on purpose, it's not my business.
I have a better solution: Typescript. 
That‚Äôs OK (still not great, but passable) for organizations and internal teams, but what about Open Source projects? This line of thinking negates half of the entire JS ecosystem. Some guarantees can be made by using Typescript, but if someone isn‚Äôt using TS then it‚Äôs still a problem. 
In fact, I like Javascript and I can deal with all its flaws ... at least for this project. Otherwise, I would have used a "real" typed language, but I don't really enjoy the "transpiled js workflows"
:D &gt;Behavior becomes a thing long before we find a verbal name for it. I ment it for this one.
Not sure if the 10000 was intentional or not (for reasons I don't know), but there are 1000 milliseconds in a second.
yes. best practice would be to jsdoc the class so ide's can help with usage, or move it to the strictures of java and use Typescript. Fail first is usually a good choice. 
you're right @Lyzonee...edited
On mobile so can‚Äôt type out much code but you may want to look into Array.reduce(), seems like it could be a good fit here. 
Not transpiling js. Good luck with browser-support.
In fact, [support of classes is pretty good](https://caniuse.com/#feat=es6-class). Plus, it's a side project and I don't really care about old browser-support Also it might finish as an electron app or something like that 
Oh, i see. I thought you were making a library or something.
\&gt;I'm not sure if this was the intention of TypeScript, or just the way we're using it, Just the way you are using it. If you are writing class heavy code you are doing something wrong.
You could: 1. Sort the array by millisecondOffset 2. Store a start index (start = 0 initially) 3. Find the next chunk's lower bound (nextChunkLowerBound) - for example, if array[start].millisecondOffset is 2,200 and chunk size is 1000, then nextChunkLowerBound should be 3000 4. Use the findIndex method to find the next out of chunk range index (nextChunkStart = array.findIndex(a =&gt; a.millisecondOffset &gt;= nextChunkLowerBound) 5. Slice the array to get the chunk (chunk = array.slice(start, nextChunkStart - 1)). 6. Continue this until findIndex returns -1
&gt;It's one trap of Typescript, you start to want to give types to everything and then lose some of the benefits of JavaScript. This is not a trap of typescript, what benefit do you get from not giving types to everything?
&gt;ms like that would be useful to interface with pre-existing systems (Angular, for example) Hello, thanks for reading :) Performance is very high although i can't compare with others. Bandwith i also didn't do any testing yet, but it's designed to be as less bandwidth as possible, since it only updates the part of the data that is needed and only to the clients that request it. It's more of a simple and powerful solution for now. Maybe not the best "performance" but that will improve over time. &amp;#x200B; Here is some visual testing: [https://www.youtube.com/watch?v=f3BV2lhcSR8&amp;t=138s](https://www.youtube.com/watch?v=f3BV2lhcSR8&amp;t=138s)
 any interface with RxJS -&gt; not yet :/
It's not just responsiveness (which is already difficult in email), it's also cross-client compatibility.
I don't think he's being pedantic. You can't be like "it's foolproof except the cases it isn't." All he's saying is that particular claim doesn't make any sense. You could label it as robust, or easy to use, or reliable, or whatever. Foolproof for everyday use is a contradiction. That said, I'm personally curious how this is different from lodash cloneDeep? I'm on no way a "deep" javascript dev. More part of that crew that reaches for lodash right away haha. So tell me why I should use this! &amp;#x200B; And, props to you for building something and putting it out there.
Generally no since constructing an object should not have side effects. There are a few exception cases though, such as when you involve the file system, connecting to a database, etc. Then, failing fast is generally a good idea.
Use Typescript or Flow to ensure callers pass the correct arguments. This will make your code easier to read, review, and write. As far as I‚Äôm concerned throw whenever know something is amiss. Constructor or not.
Foolproof means even the most foolish person can‚Äôt possibly use it wrong because it‚Äôs been designed so well, so perfectly that it cannot possibles fuck up in any case If you stop using the phrase, people will stop criticizing you for using it.
Thanks :D Lodash do not support circular references and the base cloneDeep do not call constructors. You can pass a custom functions to handle each node but...handle each case is not simple. Mine could do lot of interesting stuff fith symbols, getters$setters, non-enums props....but the ability to recreate a circuar structure is the stronger point I think 
Productivity. In a 5 lines function that uses an integer, you don't really need it.
I've removed the phrase but...do you think is it a good point to criticize here? I have not share the function here to create a discussion on terminology...here we talk about javascript so I think that the criticisms should focus on that. 
I dunno, I just popped in to explain why people were having issue with the phrase. No idea what your tool even does, to be honest. I subscribed to this sub with the intent of picking up js and never did. Hope your tool is rad, I‚Äôm one of those fools that you need to proof for üòâ
I think rather than offering opinions, proposing alternatives and addressing committee concerns with those alternatives is more helpful. At this point though many alternatives have been discussed, so it is worth researching previous discussions and how the proposal reached its current form too.
&gt;Nice :) &amp;#x200B;
Beware that instanceof is problematic in JavaScript
Just for fun?
I have been looking for something just like this, nice job.
thanks Obann :)
I wrote this function to solve this problem: const chunkOnPropertyByValue = (array, propertyName, value) =&gt; array.reduce((acc, val) =&gt; { const index = Math.floor(val[propertyName] / value) if (typeof (acc[index]) === 'undefined') { acc[index] = [] } acc[index].push(val) return acc }, []) Simply call it like this: const result = chunkOnPropertyByValue(bigArray, 'millisecondOffset', 60000) This will return an array chunked like this: `[ [0-59999], [60000-11999], [12000-17999], ... ]`
one minute is 60000 ms Will something like that to the trick? let result={}; bigArray.forEach(item =&gt; { if(!result[round(item.millisecondOffset/chunk)]){ result[round(item.millisecondOffset/chunk)] = []; } result[round(item.millisecondOffset/chunk)].push(item); }); and if you still want an array let arr=Object.values(result);
No one has brought the following points up, even though I think they‚Äôre the heart of your story/conflict with leads. What I read from your story is summarized as two programming paradigms: 1. The one of the leads (that have their knowledge mostly from Object Oriented Programming) namely, Object oriented inheritance and composition where you have adopted 2. The more functional composition paradigm. There‚Äôs also another important difference between you and the leads. That is that you (probably unknowingly) use the power of the concept in TypeScript of duck-typing (look it up and see what the difference is with Java classes). The leads probably don‚Äôt even know that this exists and don‚Äôt know the power of it. If you can explain them this last mentioned difference, and explain the power of duck-typing as opposed to OOP classes, I believe you can convert them back into usage of TypeScript ‚Äútypes‚Äù and ‚Äúinterfaces‚Äù. If you need more explanation (in-depth/detailed with examples), I‚Äôm here to answer follow up questions. 
Very nice! The other really good article like this I've seen is [Build Yourself a Redux](https://zapier.com/engineering/how-to-build-redux/). Folks might also appreciate my post [Idiomatic Redux: The History and Implementation of React-Redux](https://blog.isquaredsoftware.com/2018/11/react-redux-history-implementation/).
You could store whatever value you want to log in a variable, create an html button that logs that variable. It just needs to be in scope for both the place you assign it and the html buttons click handler function.
I clicked thinking "oh yeah, let's see another 'Doom running on XX' port". I totally missed the 3 in the title and was subsequently floored.
Here's a solution which will give you empty chunks where no data exists for the segments. &amp;#x200B; const chunkArray = (data, interval = 100000, min = 0) =&gt; { // Sort elements by millisecondOffset into new array const sortedData = [...data].sort((ele1, ele2) =&gt; ele1.millisecondOffset - ele2.millisecondOffset) // Determine the span of milliseconds between the largest and smallest elements const spanMin = min != null ? min : sortedData[0].millisecondOffset; const span = sortedData[sortedData.length - 1].millisecondOffset - spanMin; // Create an array to store our chunks const chunks = new Array(Math.ceil(span / interval)).fill() // Walk through the chunks array, return chunks.map((currentIntervalItems = [], currentInterval) =&gt; { const maxMsForChunk = (currentInterval + 1) * interval // Walk through the sorted elements, remove them from the sorted data array and add them to the chunk array if applicable while (sortedData.length &amp;&amp; sortedData[0].millisecondOffset &lt;= maxMsForChunk) { currentIntervalItems.push(sortedData.shift()); } return currentIntervalItems }) } Hope this helps.
Looks cool! What does "isomorphic" mean in this context?
Whose scary face is this?
Buuuuuu
Thanks! It means that it could be used on both browsers and nodejs. Because the function use only js stuff 
Private teams can already benefit from other tools, practices, conventions, etc. that OSS projects can't. There are inherent benefits to running a private company vs. running an OSS project.
Lol rust is better than ts.
2 seconds of typing \`: integer\` for the guarantee that the function will never be passed an incorrect type as a parameter? 
I thought you should almost always be able to construct an object and then DO something with it. If something is going to fail, it should happen when you try DO it. And that should be in a method on the object. I think it makes for awkward user-code having to cater for construction throwing an exception rather than when actually doing something with that object.
The first thing these folks are gonna ask you to do is format your code. We‚Äôll be happy to help when we can read everything. Classes can be tricky!
I've been looking for an easy to understand guide to redux, and this fits the bill nicely, with very clear description of the various pieces and how they work. Great job, and many thanks!
*FOOL PROOF??* I will be the judge of that.
Yep. Had an array, needed to move *every other element* into another array. Found this slick Bitwise AND filter to do just that: newArray = oldArray.filter( (_,i) =&gt; i &amp; 1 ) right here: http://stackoverflow.com/questions/52723904/every-other-element-in-an-array
It is an object's responsibility to be in a valid state, so that client code does not need to do messy checks. This is part of encapsulating state and behavior in an object. To me, I want to be able to rely on my objects, so I check for argument validity in my constructor (especially for things like ranges, min, max, empty strings, etcetera). This is part of defensive programming (invariance protection) and makes code easier to work with, because the application's building blocks are always in a valid state. Besides meaningful and intent revealing abstractions, this is what appeals me most about DDD's value objects.
Doesn't ever seem that way to me.
Right. Specifically this is because two objects of the same JavaScript *type* can come from different *realms* and therefore not be the same instance of the type. So a test like `obj.constructor === Array` or `obj instanceOf Array` will fail if you test an `Array` that came from an `&lt;iframe&gt;` child document. [Jake Archibald did a great post about this.](https://jakearchibald.com/2017/arrays-symbols-realms/)
This is the ideal way to do it. All the type checking happens at transpile time rather than runtime so there's no need to throw. If the checking does need to happen at runtime it would be better to do all of this only in a development build and get good code coverage so all the type-check code and overhead can be removed for production.
It‚Äôs such a strange edge case that I don‚Äôt think you have to worry about it. The only problem historically was `arr instanceof Array` but that‚Äôs been mitigated by `Array.isArray`. Typically if you‚Äôre comparing objects from different realms you probably already know or want to throw anyways.
thank you all! My brain was not functioning today and needed this for a kickstart. I'll try out some solutions...
I'm sorry if this is not the place to ask but I just noticed this: const store = createStore(reducer) Why is createStore a function instead of Store being a class in an OOP fashion? For example: const store = new Store(reducer) 
data\["Variable One"\].name &amp;#x200B; What are you asking exactly? How to go two levels deep?
This would be quite a large project. But the biggest issue is the security would be abysmal. All I'd have to do to hack into someone's account is have their picture, which is pretty easy to come by these days. 
Oh wait... it's an array. &amp;#x200B; data\[0\]\["Variable One"\].name
Sorry, let me try to phrase my question again. I guess I'm really just trying to iterate over every item within the JSON and acquire their name. So, rather than data['Variable One'].name, I'm trying to get data[i].name.
Or maybe something like this... `var keys = Object.keys(data[0])` `keys.forEach(key=&gt;console.log(data[0][key]))` &amp;#x200B;
There are two things going on here. First, you have a single element array. So you need to access it manually, like `data[0]`, or by looping through it, like `data.forEach(obj =&gt; {console.log(obj)})`
Since it varies, it sounds like you might be iterating over these in a loop? If that's the case, could you provide some context for how you want the `name` values? Are you displaying them? Do you just need to return them as an array? 
How exactly would you be able to hack into someone‚Äôs account using a picture? I think I‚Äôll start with a small version and try and make it work with one person to begin with. The idea is to link to their other social media sites like Facebook / instagram and those can‚Äôt be hacked using a picture. 
&gt; Fail first is usually a good choice. Seconded. Fail early, and fail *loudly*. Nothing worse than when the source of a bug is divorced from where the error actually occurs. The closer you can throw an error to the source of a bug, the more sane you stay.
How will you verify the person sitting at the computer is the same as the pictures you have. Most likely a webcam. Well it's a standard 2d image, if you hold a picture up to the webcam, facial recognition won't be able to tell the difference.
How will you verify the person sitting at the computer is the same as the pictures you have. Most likely a webcam. Well it's a standard 2d image, if you hold a picture up to the webcam, facial recognition won't be able to tell the difference.
There are two things going on here. First, you have a single element array. So you need to access it manually, like `data[0]`, or by looping through it, like `data.forEach(obj =&gt; {console.log(obj)})` The second thing is looping through the key/val pairs of the object. You can extract the keys values in a few ways. Either `Object.keys(data[0])` or `Object.values(data[0])` or `Object.entries(data[0])`. &amp;#x200B; If you're trying to simply extract the name values, I would do the following... `var names = [];` `Object.values(data[0]).forEach(val =&gt; names.push(val.name))`
I don‚Äôt want to verify the person who‚Äôs sitting at the computer. I want to monitor the browser to recognise the faces of people that come up and link to their social media‚Äôs. Of course for someone the upload the photos they would have to be some way to verify that that is them. 
Reading alone doesn't teach you anything, only the physical act of enetering code forces you to learn, same as taking notes in a lecture forces you to understand what you hear instead of "in one ear, out the other". You stop making typos by learning to type by typing, and that's good debug practice.
Where's the github link? 
I found this to be most readible so thank you!
Thank you. This looks like it'll work.
I guess this is what you are looking for (saved it in a [Codepen](https://codepen.io/anon/pen/JwLqqP)) &amp;#x200B; Here‚Äôs the updated code, just in case there‚Äôs something wrong with the pen: &amp;#x200B; var canvas = document.getElementById("canvas"); canvas.width = 1000; canvas.height = 600; var ctx = canvas.getContext('2d'); canvas.style.border = "solid 1px black"; //function for deawrect function drawRect(x, y, w, h, color) { ctx.fillStyle = color; ctx.fillRect(x, y, w, h); } //background "path to follow" drawRect(0, 0, canvas.width, canvas.height, "darkgreen"); drawRect(100, 100, 100, canvas.height, "grey"); drawRect(100, 100, canvas.width - 600, 100, "grey"); drawRect(canvas.width - 500, 100, 100, canvas.height - 300, "grey"); drawRect(canvas.width - 500, canvas.height - 200, 300, 100, "grey"); drawRect(canvas.width - 200, 0, 100, canvas.height - 100, "grey"); //////////// START OF CLASS ////////////////////////////// class BOT { constructor(n) { this.width = 50; this.height = 50; this.x = 125; // this.y = canvas.height; this.y = canvas.height + this.height * n + 10 * n; this.velocity = 3; var c = Math.floor(Math.random() * 360); this.color = "hsl(" + c + ",100%,50%)"; this.speedX = 3; this.speedY = 3; var slump = Math.floor(Math.random() * 4); if (slump % 4 == 0) { this.speedX = -this.speedX; } else if (slump % 4 == 1) { this.speedY = -this.speedY; } else if (slump % 4 == 1) { this.speedX = -this.speedX; this.speedY = -this.speedY; } else { this.speedX = this.speedX; this.speedY = this.speedY; } } draw() { ctx.beginPath(); ctx.fillStyle = this.color; ctx.fillRect(this.x, this.y, this.width, this.height); } move() { if (this.x &gt; 122 &amp;&amp; this.x &lt; 128 &amp;&amp; this.y &gt;= 125) { this.y -= this.velocity; } if (this.x &gt;= 125 &amp;&amp; this.x &lt; 525 &amp;&amp; this.y &gt; 122 &amp;&amp; this.y &lt; 128) { this.x += this.velocity; } if (this.x &gt; 520 &amp;&amp; this.x &lt;= 525 &amp;&amp; this.y &gt; 122 &amp;&amp; this.y &lt;= 425) { this.y += this.velocity; } if (this.x &gt;= 520 &amp;&amp; this.x &lt;= 525 &amp;&amp; this.y &gt; 422 &amp;&amp; this.y &lt; 428) { this.x = 525; this.y = 425; } if (this.x &gt;= 525 &amp;&amp; this.x &lt;= 825 &amp;&amp; this.y &gt;= 425 &amp;&amp; this.y &lt; 428) { this.x += this.velocity; } if (this.x &gt; 820 &amp;&amp; this.x &lt; 830 &amp;&amp; this.y &gt; 422) { this.x = 825; this.y = 425; } if (this.x == 825 &amp;&amp; this.y &lt; 650) { this.y -= this.velocity; } if (this.x == 825 &amp;&amp; this.y &lt; (-50)) { this.x = 825; this.y = (-50); } } } //////// END OF CLASS ///////////////////////////// var nrBot = 10; var bot = new Array(nrBot); function init() { for (var i = 0; i &lt; nrBot; i++) { bot[i] = new BOT(i); }; animation(); } function animation() { drawRect(0, 0, canvas.width, canvas.height, "darkgreen"); drawRect(100, 100, 100, canvas.height, "grey"); drawRect(100, 100, canvas.width - 600, 100, "grey"); drawRect(canvas.width - 500, 100, 100, canvas.height - 300, "grey"); drawRect(canvas.width - 500, canvas.height - 200, 300, 100, "grey"); drawRect(canvas.width - 200, 0, 100, canvas.height - 100, "grey"); for (var i = 0; i &lt; nrBot; i++) { bot[i].move(); bot[i].draw(); } requestAnimationFrame(animation); } init(); &amp;#x200B;
Tangential: if you do throw an exception like this, use `new TypeError()`
It's only strange until you encounter it and don't know why an Array isn't an Array. Plus, yes, the Array case is handled now but not all the other types of objects. The blog post I mentioned above describes a way to make cross-realm detection work properly. If you're writing an application, you either need to avoid it if possible, handle it yourself, or hope that the people writing the libraries you use (lodash, jQuery, React, etc.) have handled all the cases you encounter well enough for you.
Yep. Enforced rules &gt; conventions any day. I think we‚Äôve all worked on code where a ‚Äúprivate‚Äù method is used anyway because... you know. It‚Äôs useful. Or where a method used to be private and is now public but still has the underscore, etc. 
U can instead use a map function to achieve the same like let names = Object.values(data[0]).map(val=&gt;val.name).
It‚Äôs just a design decision. I guess that the author wasn‚Äôt too fond of OOP. 
If you're simply trying to extract summary values, you can something I call a "Summary Variable." `const segmentSize = 60000;` `let summaryVariable = {};` `bigArray.forEach(val =&gt; {` `const segment = Math.round(val.millisecondOffset / segmentSize);` `if (summaryVariable.hasOwnProperty(segement)) {` `summaryVariable[segment] = Math.max(` `summaryVariable[segment],` `val.heartRate` `);` `} else {` `summaryVariable[segment] = val.heartRate;` `}` `});` Basically, it'll give you an object with each segment as a property and a corresponding value. It has the added benefit of you not needing to know which segments you're looking for. &amp;#x200B;
JSONPath https://www.npmjs.com/package/jsonpath https://goessner.net/articles/JsonPath/index.html#e2
I‚Äôd argue that 90% of the time you simply don‚Äôt need them. 
Actually people complain about it a lot in PHP. PHP also types objects reasonably well, so you **can** insist on a `Page` object vs JavaScript‚Äôs ‚Äújust cross your fingers and hope the object has what you need and expect. 
Hash values are static length meaning whether the password is 2, 10 or 20 characters the hash will always be the same length. Md5 32 char. Pop it in crackstation.net see if someone already did the leg work for you 
Apple has facial recognition that uses 2d cameras to build a 3d representation of your face. Don't be so naive if you're going to criticize
Thanks, but I actually managed that a few minutes after posting the article.
Do you mean the face-id? If so that's a completely different technology and is way more than a 2d image. It's a infrared dot-grid that is analyzed by a camera, but it's most likely not using a single snapshot and the face that the grid contours your face allows the algorithm to identify a 3d space. A normal 2d camera cannot give you this. 
At this point, the board is proceeding forward on tacit agreement internally, and presuming based on reviews from groups they've introduced to it (without mentioning the problems) that they've got a workable solution the community won't reject. At this point, the only thing I can think of that will stop them would be a mass petition with 10s of thousands of signatures asking them to stop. Short of that, or a really big bug showing up last minute, ES will be "blessed" with private fields.
Real answer imo. Map over all the things when possible.
That's not quite true. You wouldn't be able to have a public and private field with the same name declared, but pubic properties with names matching private properties could always be tacked on later. I'm trying to get them to accept this. If they do, it'll partially solve one of the issues I listed in the article. Linters would fix the other half.
1) Generate an array that consists of all the keys in the object. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys ```js Object.keys(data); // ["Variable One", "Variable Two"] ``` 2) Dive into each one individually using object bracket notation https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors ```js const keys = Object.keys(data); // ["Variable One", "Variable Two"] keys.forEach(key =&gt; { const item = data[key]; // { "name": "Bob" } }); ```
I wouldn't suggest using a package for something this simple
Redux follows the functional programming paradigm, so it doesn't use classes :).
Data wise, take a look into javascript web scraping. As for image recognition, I know there's some good Python libraries for that out there. 
More people need to hear this advice. 
Very cool project indeed
I'm just gonna use typescript's private fields the same and don't get bothered..
Having read your article, i'm not sure if you wanna blame TypeScript or your practices.
For closure vs class, have a look at this: https://medium.com/engineering-livestream/javascript-classes-vs-closures-cf6d6c1473f Also, implementing classes with prototypes in es5 is troublesome, and using es6 requires polyfill for old browser compatibility. Redux is not React-specific.
Very cool! Enjoyed seeing that. 
Didn't realize that existed thanks I'll keep that in mind
Transpiled JS workflow is not really a big deal IMO. You just run a watch command once and it continually transpiles as files are changed (practically instantly), plus it allows you to make use of ES6 modules and a bunch of other features.
In DDD you fail in the constructor if you put in invalid data. This is to ensure that objects cannot exist with invalid data at all. This also means that if you modify data, data gets checked again, so the actual checking logic might be in other places than the constructor, but still checked in the constructor
Convenience Tools FTW!
I find immense value in explaining it the verbose, less efficient way first. It is helpful for visualizing and puts more emphasis and value on "shortcuts" like map
It's because of your inconsistent use of closePath(). Here's a revised version: var Canvas = {} Canvas.element = document.getElementById("canvas") Canvas.ctx = Canvas.element.getContext('2d') Canvas.objects = [] Canvas.element.width = 1000 Canvas.element.height = 600 Canvas.element.style.border="solid 1px black" class CanvasObject { constructor() { this.canvas = Canvas.element this.ctx = Canvas.ctx this.objects = Canvas.objects this.objects.push(this) this.id = Math.random(0,1000).toString()+Math.random(0,1000).toString() this.render() } destroy() { let i = this.objects.findIndex(x=&gt;x.id==this.id); if (i&gt;0) { this.objects.splice(i, 1); this.render() } } rect(x,y,w,h,color) { this.ctx.beginPath() this.ctx.fillStyle = color this.ctx.fillRect(x,y,w,h) this.ctx.closePath() this.ctx.fill() } render() { this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height) this.objects.forEach(obj=&gt;obj.draw()) } animate() { this.animation() requestAnimationFrame(this.animate.bind(this)) } } class Map extends CanvasObject { constructor(w, h) { super() this.width = w this.height = h } draw() { this.rect(0,0, this.width, this.height, "darkgreen"); this.rect(100,100, 100, this.height, "grey"); this.rect(100,100, this.width-600, 100, "grey"); this.rect(this.width-500,100, 100, this.height-300, "grey"); this.rect(this.width-500,this.height-200, 300, 100, "grey"); this.rect(this.width-200,0, 100, this.height-100, "grey"); } } class BOT extends CanvasObject { constructor(velocity) { super(); this.w = 50 this.h = 50 this.x = 125 this.y = this.canvas.height this.velocity = velocity || 3; var c = Math.floor(Math.random()*360); this.color = "hsl("+c+",100%,50%)"; this.speedX = 3; this.speedY = 3; var slump = Math.floor(Math.random()*4); if(slump%4 == 0) { this.speedX = -this.speedX; } else if (slump%4 == 1) { this.speedY = -this.speedY; } else if(slump%4 == 1) { this.speedX = -this.speedX; this.speedY = -this.speedY; } else{ this.speedX = this.speedX; this.speedY = this.speedY; } } get inBounds() { return (this.y &gt; -50 &amp;&amp; this.y &lt; this.canvas.height &amp;&amp; this.x &gt; -50 &amp;&amp; this.x &lt; this.canvas.width) } draw() { this.rect(this.x, this.y, 50, 50, this.color) } animation() { this.move() this.render() if (!this.inBounds) { this.destroy() } } move() { if(this.x &gt; 122 &amp;&amp; this.x &lt; 128 &amp;&amp; this.y &lt;= 600 &amp;&amp; this.y &gt;= 125 ){ this.y -= this.velocity; } if(this.x &gt;= 125 &amp;&amp; this.x &lt; 525 &amp;&amp; this.y &gt; 122 &amp;&amp; this.y &lt; 128){ this.x += this.velocity; } if(this.x &gt; 520 &amp;&amp; this.x &lt;= 525 &amp;&amp; this.y &gt; 122 &amp;&amp; this.y &lt;= 425){ this.y += this.velocity; } if(this.x &gt;= 520 &amp;&amp; this.x &lt;= 525 &amp;&amp; this.y &gt; 422 &amp;&amp; this.y &lt; 428){ this.x = 525; this.y = 425; } if(this.x &gt;= 525 &amp;&amp; this.x &lt;= 825 &amp;&amp; this.y &gt;= 425 &amp;&amp; this.y &lt; 428){ this.x += this.velocity; } if(this.x &gt; 820 &amp;&amp; this.x &lt; 830 &amp;&amp; this.y &gt; 422){ this.x = 825; this.y = 425; } if(this.x == 825 &amp;&amp; this.y &lt; 650){ this.y -= this.velocity; } if(this.x == 825 &amp;&amp; this.y &lt; (-50)){ this.x = 825; this.y = (-50); } } } var map = new Map(1000, 600) map.render() var initBots = (numBots, interval, velocity) =&gt; { for(i=0;i&lt;numBots;i++) { setTimeout(()=&gt;{ let bot = new BOT(velocity||~~(Math.random() * (5 - 3) + 3)) bot.animate() }, interval*i) } } initBots(10, 1500) &amp;#x200B;
Why is this getting so many upvotes? Redux is stupidly simple (and mostly outmoded by now)
Your for loop isn't formatted correctly. `for(var i = 0; i &lt; nrBot;i++) bot[i] = new BOT();` &amp;#x200B; Also, you're starting them all on top of each other and animating them all with the same animation, so they look like one. It's best to break things up and have an animation action built right into the class itsself -- or better yet: a class super if you plan to work with multiple different objects. I modified it to allow for individual animations and more structure (probably overkill for something this simple, but it's always better to plan for expansion in my book). Here's a the revised version: [https://codepen.io/anon/pen/Ydamog](https://codepen.io/anon/pen/Ydamog) var Canvas = {} Canvas.element = document.getElementById("canvas") Canvas.ctx = Canvas.element.getContext('2d') Canvas.objects = [] Canvas.element.width = 1000 Canvas.element.height = 600 Canvas.element.style.border="solid 1px black" class CanvasObject { constructor() { this.canvas = Canvas.element this.ctx = Canvas.ctx this.objects = Canvas.objects this.objects.push(this) this.id = Math.random(0,1000).toString()+Math.random(0,1000).toString() this.render() } destroy() { let i = this.objects.findIndex(x=&gt;x.id==this.id); if (i&gt;0) { this.objects.splice(i, 1); this.render() } } rect(x,y,w,h,color) { this.ctx.beginPath() this.ctx.fillStyle = color this.ctx.fillRect(x,y,w,h) this.ctx.closePath() this.ctx.fill() } render() { this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height) this.objects.forEach(obj=&gt;obj.draw()) } animate() { this.animation() requestAnimationFrame(this.animate.bind(this)) } } class Map extends CanvasObject { constructor(w, h) { super() this.width = w this.height = h } draw() { this.rect(0,0, this.width, this.height, "darkgreen"); this.rect(100,100, 100, this.height, "grey"); this.rect(100,100, this.width-600, 100, "grey"); this.rect(this.width-500,100, 100, this.height-300, "grey"); this.rect(this.width-500,this.height-200, 300, 100, "grey"); this.rect(this.width-200,0, 100, this.height-100, "grey"); } } class BOT extends CanvasObject { constructor(velocity) { super(); this.w = 50 this.h = 50 this.x = 125 this.y = this.canvas.height this.velocity = velocity || 3; var c = Math.floor(Math.random()*360); this.color = "hsl("+c+",100%,50%)"; this.speedX = 3; this.speedY = 3; var slump = Math.floor(Math.random()*4); if(slump%4 == 0) { this.speedX = -this.speedX; } else if (slump%4 == 1) { this.speedY = -this.speedY; } else if(slump%4 == 1) { this.speedX = -this.speedX; this.speedY = -this.speedY; } else{ this.speedX = this.speedX; this.speedY = this.speedY; } } get inBounds() { return (this.y &gt; -50 &amp;&amp; this.y &lt; this.canvas.height &amp;&amp; this.x &gt; -50 &amp;&amp; this.x &lt; this.canvas.width) } draw() { this.rect(this.x, this.y, 50, 50, this.color) } animation() { this.move() this.render() if (!this.inBounds) { this.destroy() } } move() { if(this.x &gt; 122 &amp;&amp; this.x &lt; 128 &amp;&amp; this.y &lt;= 600 &amp;&amp; this.y &gt;= 125 ){ this.y -= this.velocity; } if(this.x &gt;= 125 &amp;&amp; this.x &lt; 525 &amp;&amp; this.y &gt; 122 &amp;&amp; this.y &lt; 128){ this.x += this.velocity; } if(this.x &gt; 520 &amp;&amp; this.x &lt;= 525 &amp;&amp; this.y &gt; 122 &amp;&amp; this.y &lt;= 425){ this.y += this.velocity; } if(this.x &gt;= 520 &amp;&amp; this.x &lt;= 525 &amp;&amp; this.y &gt; 422 &amp;&amp; this.y &lt; 428){ this.x = 525; this.y = 425; } if(this.x &gt;= 525 &amp;&amp; this.x &lt;= 825 &amp;&amp; this.y &gt;= 425 &amp;&amp; this.y &lt; 428){ this.x += this.velocity; } if(this.x &gt; 820 &amp;&amp; this.x &lt; 830 &amp;&amp; this.y &gt; 422){ this.x = 825; this.y = 425; } if(this.x == 825 &amp;&amp; this.y &lt; 650){ this.y -= this.velocity; } if(this.x == 825 &amp;&amp; this.y &lt; (-50)){ this.x = 825; this.y = (-50); } } } var map = new Map(1000, 600) map.render() var initBots = (numBots, interval, velocity) =&gt; { for(i=0;i&lt;numBots;i++) { setTimeout(()=&gt;{ let bot = new BOT(velocity||~~(Math.random() * (5 - 3) + 3)) bot.animate() }, interval*i) } } initBots(10, 1500) &amp;#x200B;
Why redux when mobx
unless you're building a library that get's used by non typescript users, then you still need runtime checks.
Don't want to be pefantic, but JavaScript *is* typed: it's not statically and strong typed, but definitely not non-typed.
[Also](https://github.com/vuejs/awesome-vue)
So you want to make alternative of google image search?
If it's a function parameter then yes sure I agree, that's a case where typing is useful. IMO the trap is not to use typing at all, it's to type each and every variable. My rule of thumb is to type anything that's an input or output of a function, or something that's used across several functions, and the rest is a judgement call. Also the 2 seconds of typing is for simple cases when the variable is a primitive. When it's an object sometimes we have to think how to name proprties properly, and maintain that, it adds up and can be a time sink. And beyond time spent, it's an impediment in the thought process that's hard to quantify.
typescript compiles to javascript.. once it gets past the transpiler and into the browser there's nothing left to validate it. ts isn't a solution here.
[removed]
I think they were following on from their first point about jsdoc, suggesting that it would help in IDEs
Thanks !
Yes, thanks !
Thank you so much for this! I'm just about finished with watch and code and this post is very inspiring. Cheers!
This would be an interesting read. I've done some work with https://github.com/krakenjs/zoid before, but there are many comparable tools out there.
lol wtf.. talking about *realms* n shit.. ok, sure, maybe that's one extremely rare condition that may cause 1 in every 1 billion users a problem but it's not the real reason `instanceof` is a problem. that article you linked was only even tangentially related to `instanceof`. the problem with `instaceof` actually has to do with prototypal inheritance. programs that don't use the new class structures are left to define and implement inheritance on their own. with classes you are forced to call `super()` in a child classes constructor, but the fact that that constraint doesn't exist elsewhere makes `instanceof` problematic. consider the following: ``` function Thing(){ this.color = "red"; } function Thing2(){ /* properties n stuff */ } Thing2.prototype = Thing.prototype var myThing = new Thing2; console.log(myThing instanceof Thing) // true console.log(myThing.color) // undefined ``` our instance of `Thing2` is also an instance of `Thing`, but that doesn't *necessarily* mean they have anything in common whatsoever. that is why `instanceof` is unreliable.
Thanks. Would mind if I grab some ideas for your repo?
Here you go. This is what you asked for, but I'm guessing there's probably a much better way to do whatever you're trying to do, unfortunately I can't see the code in context. It's best to provide as much context as possible. &amp;#x200B; var onCheck = e =&gt; { let selected = [] document.querySelectorAll('#num-locations input[type="checkbox"]:checked,#num-cities input[type="checkbox"]:checked, #num-provinces input[type="checkbox"]:checked') .forEach(x=&gt;selected.push(x.getAttribute('data-location') || x.getAttribute('data-city') || x.getAttribute('data-province'))) document.querySelectorAll('.manage-wrapper') .forEach(x=&gt;selected.includes(x.getAttribute('data-location') || x.getAttribute('data-city') || x.getAttribute('data-province')) ? x.classList.add('hide-on-check') : x.classList.remove('hide-on-check')) } document.querySelectorAll('#num-locations input[type="checkbox"],#num-cities input[type="checkbox"], #num-provinces input[type="checkbox"]').forEach(x=&gt;x.addEventListener('click', onCheck)) &amp;#x200B;
Because they are almost completely different things. Mobx is like having a global state object with functions you call to update the model with the results of your actions. With redux you‚Äôll dispatch events both run effects and update the model based on those events. In redux the former is not first class so always feels broken.
Fail first is usually a good practice, bit throwing an excception isn 't the only way to do it. Fail fast just means you don't continue with the positive scenario. Most of the times, a simple return will also do it, and you might want to do it So as not to confuse the user that expects a new object being created. What you do have to do, however, is to figure out what is the "error" state of such object. For example, a new Number('asdf') will not throw an exception, but return an object in an "error state" known as NaN. So, it's not just the internals of the constructor you should pay attention to, but also the ergonomics of using it by the caller.
IDE isn't like running the code in the wild, so even if documenting it for static analysis might be helpful, once the (compiled to JS) code is released, people might find all kinds of ways on combining it with other software
1¬∞: nothing because is a useless library
I‚Äôd be particularly interested in how to share authentication across them all
And here we have the classic constructive comment :)
Oh come on i was joking üôÑ
same here, you're not alone at all
What isn't clear to me is why you feel that 10s of thousands of developers need to object. Reading your "bad" list, none of it sounds terrible and not a deal breaker imo. Which of those are a deal breaker to you? Do you just fundamentally disagree that hard privacy is a requirement for JavaScript classes? You say they don't mention the considerations made before but they are all listed here https://github.com/tc39/proposal-class-fields/blob/master/PRIVATE_SYNTAX_FAQ.md. which of these are unreasonable to you? Trying to find what you would propose instead, I saw you linked to your own proposal that uses "let". In my opinion, I don't see that proposal as a viable alternative because it implements many new meanings for keywords and new syntax, and so is ultimately very complicated and would be hard to learn. The current proposal is clear and easy to learn, and manages to satisfy the many different requirements of different use cases, which is essential to approving something in a committee. 
I think you image is really unfair given how much effort the committee puts in to listening to feedback. What hidden requirements are they making? Where are these issues not discussed? 
As I understand it he wants the browser to automatically scan any face on any image, and if a face is recognized then show their social media links. But only if the person has signed up to this 'service' or whatever it may be.
you're going to have to test the whole class as black box. No other sensible way around it. IMHO it's not that bad. Blackbox testing is a good practice if the box's public methods make sense.
Good point. I have couple of ideas that I am working on but nothing mature enough yet. 
well, yeah, this is fine in some cases but once you're doing some kind of DI (like that you want to inject db connection or auth service, or whatever), it falls short quickly, nobody wants to create &amp; configure DI container just to get an instance so it can then be finally unit-tested (it's a lot of ceremony which is bad because people are then very reluctant to writing unit-tests -&gt; less tests -&gt; more bugs) on the other hand overriding field is super-simple (and it's how people are doing it in java-land too - a lot of tests are written in groovy just because of this)
One solution is using https://github.com/zendesk/cross-storage. Unfortunately this is not maintained anymore, and this won't work on desktop and mobile safari 7+.
Unfortunately this was for a previous employer so is closed source code. The app was structured with a toolbar and menu panel on the left, content on the right. Each menu entry would render a micro front end on the content area on the right. 
would you stop saying "realm." it's not thing and you sound goofy. also, the idea of using symbols for this purpose is potentially useful, but also goofy. Under the hood `Array.isArray` is just checking the objects internal [`[[Class]]`](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6.2) property. This property is isn't directly accessible, but it is used in every object's `toString()` method. &gt; The value of a `[[Class]]` internal property is used internally to distinguish different kinds of objects. Note that this specification does not provide any means for a program to access that value except through `Object.prototype.toString`. A malicious program could always change or overwrite the toString method in their own window, but not in your local context (or "realm"). The solution is simple. Use the local `Object`. This is exactly as reliable as `Array.isArray` and it works for any native class whether the class is a constructor or not (eg, `Function`, `Date`, `JSON`, etc). ``` function isType(arg, type){ return Object.prototype.toString.call(arg) === `[object ${type}]`; } ``` I even wrote a class to create new "Reals" for testing. Check it out: ``` class Realm{ constructor(){ const iframe = document.createElement('iframe'); iframe.setAttribute('style', 'display:none'); document.body.appendChild(iframe); this.win = iframe.contentWindow || iframe; this.doc = iframe.contentDocument || iframe.contentWindow.document; } runCode(code){ const script = 'script'; this.doc.open(); this.doc.write(`&lt;${script}&gt;${code}&lt;/${script}&gt;`); this.doc.close(); return this; } getGlobalVariable(arg){ return this.win[arg]; } } var arr = new Realm().runCode('var arr = []; console.log("greetings from another realm, lol")').getGlobalVariable("arr"); console.log(arr instanceof Array); // should be false because it's in another "realm" lmfao console.log(Array.isArray(arr)); // should be true var func = new Realm().runCode('var func = function(){};').getGlobalVariable("func"); console.log(func instanceof Function); // should be false because it's in another "realm" lmfao console.log(isType(func, 'Function')); // should be true var date = new Realm().runCode('var date = new Date').getGlobalVariable("date"); console.log(date instanceof Date); // should be false because it's in another "realm" lmfao console.log(isType(date, 'Date')); // should be true function isType(arg, type){ return Object.prototype.toString.call(arg) === `[object ${type}]`; } ``` enjoy. 
you seemed to have missed my point. typescript compiler errors and ide hints are on the same level. neither is relevant once it gets passed the browser.
I just got to know and like Redux. Also indeed because it is simpel. What other techniques are there now that make Redux outmoded? Javascript stuff changes too fast for me at the moment to keep up.
Yes pls write it. 
Thanks for sharing 
Yes please do. Our development team has just started to explore this concept within one of our main react apps. We used react, webpack with an express backend for relevant endpoints. We dealt with a couple of problems such as the best way to kid the micro frontend components into our app and how to share dependency libraries to reduce our compiled js size. After a few weeks of experimenting we ended up using webpack externals to handle dependencies. Our production code went from around 300kb of compiles js to just under 50kb. I‚Äôve been working on a boilerplate repo for others to use with examples on how to embed within primary apps. Really look forward to more articles written about the micro frontend concept.
I hope we can find the opportunity to discuss further when I finish the prototype and story
To further my comment. We explored using iframes to embed the micro frontend components. This just felt too risky. I‚Äôve had some meh experiences with getting iframes to display and style properly with other elements on the screen. In the end we worked out how to lazy load and import so we could use the component like any other react component. We can pass props etc. I know that not everyone uses react but I‚Äôm sure it would be just as straight forwards with angular or any other js framework. 
You are asking the wrong question. What do you mean by "asynchronous JavaScript"? Why do you want to learn it? Read the MDN article for async / await and - if something referenced in it doesn't make sense - read up on it. There is no set course for these things and it usually depends on the problems you're trying to solve. 
I also went iframe road but like you said it is meh! Then I discovered [caja by google](https://developers.google.com/caja/) but I am not sure that‚Äôs the solution we deserve. 
I know, my I7 now runs it as smoothly as a celeron...
Its not a good practice to use classes at all.
you simply don't joke about javascript frameworks.
Woah sorry to hurt your feeling üòØ
Well, I just read somewhere that before moving to frameworks, you should learn Async JS first. So I am trying to find if I my knowledge is enough to start learning Async. Yeah, I know that‚Äôs really bad, but I am not trying to build anything right now.
It‚Äôa also cool to have a more in depth description, several screenshots, and an easy way to... dunno... see what‚Äôs new.
There is no such thing as a *JavaScript code*
Thanks. It's a good insight for a prototype app/micro frontends
I‚Äôve added it to my must read page on my iDevice. It would be great if it had an `apple-touch-icon`. Right now it‚Äôs the infamous thumbnail screenshot, basically showing the ad. https://i.imgur.com/uk6rMTR.jpg
`window.setTimeout(alert('this'), 0);`
What?
#I THINK APOLLO STACK IS LITTLE BIT TOO COMPLICATED RIGHT NOW. I WOULD LOVE TO HAVE SCHEMA AS A SOURCE OF TRUTH NOT RESOLVERS.
Thank you... The immutability provided by map functions is an added advantage here. 
I think it's just avoiding the complexities of \`this\` and prototypes. There's not much benefit from using prototypes if you won't have many instances (which you won't with Redux stores). Often a factory is just simpler.
What is interesting about other package managers by default? Do you have special requirements those don't satisfy or just want to explore? &amp;#x200B; If you are just learning node for hobby it's fine to go the way you want and expand where you want, if you are building/following a study plan you'd better throw this away, there is so much more value in many other topics for you. &amp;#x200B; Source: I never thought about this because once you get into node there is so much valuable knowledge to learn that anything fancy goes under the bus if you want to keep it real.
&gt;apple-touch-icon Already added apple-touch-icon, thank you for your suggestion.
Pnpm caches packages in a single place, and then uses symlinks in every place you install that package. So your node_modules folders have almost nothing in them, and there's no duplication of packages between projects. 
&gt;EDIT: Judging from the downvotes, do people use iframes and encounter this realm issue frequently? no, it's reddit. people here love being contrarian and pointing out all the little edge cases they know. the comment you're replying to is really not great. `instanceof` *can* be problematic, if you use it foolishly or you don't understand the quirks of the language. but to just say "beware this is problematic" is a really typical reddit comment here.
Could also be worth mentioning the much more verbose for..in loop. let names=[], d=data[0]; for (let k in d){ if (d.hasOwnProperty(k)) d.push(d[k].name); } It's not as succinct, but it carries significantly less overhead than Object.values.map. In my microbenchmark (tested on a million keys) the for..in loop way is twice as fast than the Object.values.map way (1s vs 500ms).
Made a static site generator for ghost blogs [https://github.com/Fried-Chicken/ghost-static-site-generator](https://github.com/Fried-Chicken/ghost-static-site-generator)
The internet wasn't like this until it took no effort to get here.
Who?
It looks even worse for you now, I mean javascript frameworks are dime a dozen but we take our humour seriously here. If you think that this lame, zero-effort, unfunny cringeness is "a joke", you should have your internet rights revoked. 
Lots of creative coding projects - [https://anuraghazra.github.io/CanvasFun/](https://anuraghazra.github.io/CanvasFun/)
Hm, TypeScript doesn't have any syntax for type classes, so implementing higher level abstractions is probably impossible, though I don't think it's a big deal, in Scala I tend to avoid libraries that rely heavily on type classes (Shapeless, scalaz etc). As for currying, it looks like you need to have a bunch of functions like `curry2`, `curry3`, `curryN` and it will work just fine.
All right i'm sorry, i mean, i wouldn't seem to be rude. Take care.
I tried to do a function that change its value with mouse scroll, but it required to resize window so i don't added it, but in latest experimental version ([https://github.com/TBM13/Superhex.io-Scr1pt](https://github.com/TBM13/Superhex.io-Scr1pt)) i added a config button next to zoom hack checkbox, where you can change the value.
That sounds pretty cool. I'll have a look at pnpm :D Thanks for replying.
Oh and btw, i was "joking" about Vue and not about the libraries. But i mean is ok, i was rude about that, so i'll take it. 
I just wish the file size of Electron apps was closer to Native Apps
Thanks for the reply. I was mostly curious because I found yarn optimizations quite fascinating and I wanted to see if there are any other package managers which have adopted cool ideas which aren't in npm. Also thank you for the advice. I've been learning node for about 3 months part time. It's a really awesome framework and I look forward to learning more :)
Token based auth that relies on cryptographic signatures makes it easy, JWT is a good place to start looking. Using an API gateway in front of your services, and having your services trust the gateway also helps.
 var randomnumber = Math.floor(Math.random() \* (maximum - minimum + 1)) + minimum; [https://stackoverflow.com/questions/1527803/generating-random-whole-numbers-in-javascript-in-a-specific-range](https://stackoverflow.com/questions/1527803/generating-random-whole-numbers-in-javascript-in-a-specific-range) &amp;#x200B;
The `awesome-x` line are pretty consistent; most things you can search awesome-thing and get a list not unlike this. Not quite as good as in-depth, but pretty good for starters or veterans to see what's there without needing to know lots of details.
but can I put it inside of my message where the $$$ are
They've recently made new strides toward documenting both the proposal itself and its issues. For that, I am thankful. The number I threw out there is just my attempt to explain how entrenched this proposal is. What are the deal breakers? 1. Proxy won't work unless it's membrane-like. 2. Decorators are not yet ready, even though solving many of the issues has been pushed off to that proposal. 3. It invites developers to break inheritance. There's more but these are the big 3. I have no doubt that many will like this proposal. But it's going to cause unexpected issues in production. In the end, as more developers try to use this proposal for increasingly complex tasks, the cracks will slowly become canyons.
One popular way of generating random (random enough anyways) numbers is just simply getting the current system time in milliseconds and using modulo on it. Simple modulo example: 7 mod 4 = 3. Or one other solution (of many possible solutions) you can use math.random(). https://www.w3schools.com/js/js_random.asp
You're on the right track. You really need two dependency managers. Webpack for internal dependencies and using its externals for placeholders when you have dependencies between individual projects works great. You can combine it with require.js or another dependency manager to do runtime dependency management to handle wiring those projects together. And for extra fun, you can retrieve your runtime dependency manager's configuration from a service and deploy each of your projects with the name of the project AND it's version as folders above the contents and that will allow you to run different configurations and different portal applications at the same time, even if they depend on different versions of your reusable applications.
I've been doing this stuff since around 2014 so if you have any questions or want feedback on anything, I'd be happy to help.
and how would I put it where the $$$ are
``` ‚ÄúMy number is: ‚Äú + theNumber + ‚Äú!‚Äù Or using es6 template literals `My number is: ${theNumber}!` ```
How can I get notification when it is done?)
Oh awesome, I'm definitely gonna try this 
http://2ality.com/2011/10/string-concatenation.html
I also would like to read this. I am not even %100 clear on what would be a micro-front end, but I have definitelly been pondering the need for something like "micro-apps" - so a step above service layer. I am working with react at the front-end at the moment, but lets ignore the framework choice - just as a thought experiment: Lets say I am building a small real estate app (which I am), where owners can submit listings for sale, others can search, post comments, etc. How awesome it would be if I could just hook it all up by combining something like the following "micro-apps": - Authentication: Login/Singup/Registration micro app - Review/Comments threading micro app - Search and filtering micro app - Content upload and management micro app - Workflow review and approval - Virtual currency / payments / gamification rewards micro app - Map Providers / Tiles / Geolocations micro app By micro app in my mind I envision something that provides you with both UI components and backend service layer and a way to glue them all together, yet not completelly lock-you into any specific technology outside of that app implementation needs. At the moment I am piecing it all together individually and I find myself sometimes sacrificing a really awesome backend service implementation bc of its lack of matching UI needs. Not sure if that makes sense, maybe just gives you some good thoughts for your article. 
Fad rhymes with bad
Thanks. I‚Äôm familiar with JWT and using it in standard SPAs. But a bit lost when it comes to micro-frontends and not re-implementing the same auth technique multiple times. Not sure how the ‚Äògateway‚Äô would be implemented, though I agree with the concept. 
Sure. Thanks
@onerzafer at medium or @onrzfr on Twitter 
Oh, for the front-end side, to avoid re-implementing authentication repetitively, I generally will implement a re-usable library to make ajax requests. I know this is less popular now, given that fetch is a thing, but having all your ajax requests flow through a single point is immensely useful, even if it just wraps that fetch api. This gives you the ability to add a hook/behavior injection point at the request/response side. With this, you could easily (I suggest doing this from your portal application that contains the index.html) use that hook to intercept http status 401 or similar and prompt the user to login. On its own, this doesn't buy you a ton, because all of your components still would have to know how to handle that error and recover--but, if your API is promise based, it's easy to just make your calling components wait longer for the authentication to finish before you respond to the promise you returned to them--and in your ajax handling code, you can just re-send the original request after authentication is handled. On the api gateway side, you'd implement it as a reverse proxy, all requests from the ui would hit it, and would specify which service they want to hit as part of the path of the URL, which you would then send off to the correct host/port combo for that service (don't forget load balancing). For authentication on the service side, your gateway can handle the requests from the ui, look to see if the JWT in the cookie is valid, and if so, let it through; if not, you'd respond with a 401.
You might want to to make this fine piece of code as a function that takes the parameters 'minimum' and 'maximum', since you'll probably sell more than just apples with different random ranges. 
They're both perfectly good package managers with strong backing from established organizations. You can't go wrong with either. If you specifically want one of the features yarn has over npm go with it, and it will be great. If not, I'd recommend sticking to NPM, if only because it saves you the step of installing another package manager. But again, either one will work.
The devs at NPM are experimenting with a new package manager right now: https://blog.npmjs.org/post/178027064160/next-generation-package-management
I implemented some Design Patterns in Javascript. [https://github.com/adoi/node-design-patterns](https://github.com/adoi/node-design-patterns)
Thanks. There are definitely many good insights in your comment. 
Learn how promises work imo
It‚Äôs just understanding the concept that there will be multiple moving parts. Read up on JS promises. When you‚Äôre getting data from a server, it will usually take a little more time than your code that is not interacting with the server. In this situation you want to make sure your code that uses the data received from the server does not run UNTIL the data is actually received. For example ‚Äò‚Äô‚Äôfetch(apiEndPointHere) .then(response=&gt;response.json()) .then(JSONdata =&gt; { Console.log(JSONdata) // Now you have the data from the api // do stuff with the received data here }) Console.log(‚Äúthis message will appear before the JSONdata console log because of async. The previous console log occurs after the data is received but this will run immediately.‚Äù) 
npm has greatly improved since the original days of yarn. With lock files and better dependency tree management, I find very few reasons to use yarn. I'd say use npm until you find a good reason to switch. npm is included with every node.js install.
Thanks for the reply, I'll be sure to check it out :D
Interested in this as well, NPM is really slow on my mediocre laptop. Yarn is much faster but doesn't fully support git dependencies.
yarn has some nice features like resolutions, workspaces and upgrade-interactive. The main issue I ran into it was buggy handling of npmrc (specifically around private registries). It also incorrectly warns in some peer-dep cases that it doesn't need to. Warm `yarn install` will also clean up node_modules (to some extent), which npm doesn't. This is good most of the time, but there are times when it isn't. I've found neither to have bulletproof lock file mechanisms and have experienced lock file corruption for both. (But to be fair, my day job projects have ridiculously large dependency trees) 
[removed]
There is actually a meta repository for this kinda stuff: https://github.com/sindresorhus/awesome
Congrats on landing your first job as a React Developer! Functional programming is a large topic but here are some articles I've found useful: [https://medium.com/javascript-scene/tagged/functional-programming](https://medium.com/javascript-scene/tagged/functional-programming)
I absolutely agree with you about two dependency manager. I already created one as a prototype and it can be replaced with any other dependency manager out there. Thanks, I am feeling more confident about what I am doing.
At this point it feels like they are pushing along what they have due to sunk cost fallacy. It's somewhat understandable given that some of the community is in the "do-not-do-private-fields-at-all" camp, and I get that you have to draw the line somewhere if you're treating this as a project with a defined scope (as you should). The problem is that when you have a million disjointed features, you get an overly complex language and end up suffering from death by a thousand paper cuts syndrome. I foresee JS will become the new C++, where everyone uses a different subset of the language. Except that compile-time syntax (akin to C++ macros/templates) that is widely used in the wild are not in the actual spec.
&gt; https://medium.com/javascript-scene/tagged/functional-programming ohh thank you so much, yeah at job i'm working on `node+expressjs+nextjs+react+redux` so its almost I can say full-stack dev, I can add that on my resume as Full stack, right?
You can actually use nix to make JavaScript apps and also there are npm‚Äôs predecessors like forgot the name had a parrot for a logo https://bower.io https://github.com/svanderburg/node2nix The later is for the box build. Nix has several prebuilt packages you can use with projects.
[https://cdn-images-1.medium.com/max/1200/1\*jtgbxZDq6l0OhAVPKNenhw.gif](https://cdn-images-1.medium.com/max/1200/1*jtgbxZDq6l0OhAVPKNenhw.gif)
And the results of my custom UI built using this Mouse class :D [https://cdn-images-1.medium.com/max/1200/1\*jtgbxZDq6l0OhAVPKNenhw.gif](https://cdn-images-1.medium.com/max/1200/1*jtgbxZDq6l0OhAVPKNenhw.gif)
Learn the difference between sychronous and asychronous code executions. Know how asychronous code is executed, and can do a simulation of it in your mind.
If you used all of these yes you can add full stack to your resume, just don't forget to state the language and frameworks.
&gt; Is it considered "good practice" to throw an exception in a constructor ? Yes, because not all constructors are meant to be used directly. Take for example, the `HTMLElement()` constructor. It'll throw an exception.
yes sure that's exactly what I am using. Thank you once again.
Never heard of micro frontends before and I'm wary because the term combines SDLC/organizational concepts, code organization and app delivery mechanisms. How do you define the term yourself? 
thanks for reminding me
thanks earthpyy
As far as I am concerned feel free to be rude if you're going to actually be either actually funny or (on the flip side) have a useful and informative opinion. 
&gt; When it's an object sometimes we have to think how to name proprties properly, and maintain that, it adds up and can be a time sink. Yes, I think this is the one spot where you don't need typing. When you have some intermediate javascript object that is in the process of being created and it is not an input or an output. 
I think your comment is really unfair given how much effort the community has put into pointing out just how many critical flaws this proposal has, providing alternative solutions that address said flaws, and the committee just dismissing it all. The community does not have a comprehensive list of the requirements, even after repeatedly asking for one. The common theme is someone in an issue proposes a solution, a committee member comes in and says something to the effect as "that does not meet requirements internally discussed", and then it's asked for a list of requirements only to be met by completely ignoring that request. So no, there isn't known a list of hidden requirements (else they wouldn't be hidden). That's with the presumption that they actually exist, and are not just a tool to arbitrarily dismiss anything but support for the proposal as written. I didn't say the issues are not discussed. The community discusses them quite a bit, with random showups from the committee. I said the issues are closed with weak excuses (with the implication that the issues raised are left unfixed). And to be quite honest, the meme format only allowed me to make 2 statements about the feedback process. I have a number more that didn't make it to the meme. I am sure everyone who has upvoted the comment can come up with 2 more unique critiques that are just as harsh, if not more so, and just as true. Also, I find it telling you to have objections to the image, but you don't even try to debunk the idea I presented in my text that the committee is just forcing this proposal through. If the feedback process has done anything, it has quashed my willingness to go to the effort and give the committee any more feedback in the future. I have used JavaScript for 20+ years, and it's currently my goto language. After my interactions with tc39, I am actively looking to leave JavaScript behind, and that's a shame really because this proposal is just a bad apple in a bushel of apples I was really excited for.
Why not just use last pass? 
Deno is a TypeScript runtime that basically has no package manager. Imports use URLs or relative paths and Deno caches it. https://github.com/denoland/deno This combined with import maps could work as a package manager. https://github.com/domenic/import-maps/blob/master/README.md
I don't get why people see fetch as being so useful when it doesn't have any features beyond the basics. Axios already solved this problem with interceptors and other config options. Using fetch requires you to reinvent the wheel.
When I am referring the term "micro frontends" actually I am referring to the definition on [https://micro-frontends.org/](https://micro-frontends.org/) Personally I feel like as frontend developers we are always building a monolithic app. So my motivation is to find a way out. Even if we are using npm packages, components or libraries we are still compiling them into one single big monolithic app. The goal of my experiment is to create a toolset/ stitching mechanism to have the opportunity to develop standalone apps on different stacks (a react app and angular and vuejs app) which can work together on a single web page.
I like yarn because it handles the lock file in a way you would expect. In npm the lock file can change when you run npm install which is just insane and a deal breaker for any kind of team 
Maybe it seems like it, but it's not. What you have to understand about standards is that they are 100% worthless without browser adoption. It doesn't matter if you get the 1000 coolest web developers in the world to all agree to a standard with 100% consensus: if Apple, Google, Microsoft, and Mozilla don't implement that standard those 1000 web developers wasted their time. So having a standards org require that only serious players contribute to the standards discussion is actually a very logical thing to do: without it standards would be dragged down by millions of changes from people with no power to effect those changes.
What?
Rush lets you pick between npm/yarn/pnpm, and more importantly, enforces that the same version of the package manager is used by every team member. It's designed for monorepo management, so if you have a bunch components, it can help with organizing development workflow.
&gt; "a chinese" okay bud
Shouldn‚Äôt your girlfriend be the one writing about micro frontends?
Got em
Projects for the sole purpose of resume beefying are likely to be contrived and uninteresting. I'd argue practicing for interviews would be more valuable. But by all means, if you have projects add them to your resume, and if you have a different reason to work on a project (learning new language/library/framework, or do something cool) then work on that project and add it to your resume. But in general a project for the sole purpose of resume building is lame and probably not helpful. 
I wish I could do something like this but the use of custom elements make me hesitant to actually use it in production. I have requirements to support older browsers like IE11.
Find some useful case studies, we looked into this at work but it seemed like a very new concept without much support. We looked into web components and such too but they don‚Äôt seem totally ready for production especially on large teams for enterprise software. I spoke to someone giving a talk on this at a web dev conference recently and she more or less confirmed that this works primarily on small teams where the business organisation can reflect the architecture - I.e a team handling the entire stack for checkout, another for product, basket etc. Good luck!
If you want to support older browsers, you need to transpile/polyfill.
Created an app for personal productivity. https://play.google.com/store/apps/details?id=com.mindright.mindright
[removed]
[puppeteer](https://github.com/GoogleChrome/puppeteer) 
Let's say for the sake of discussion I only want to support modern browsers
I created a lambda middleware for serverless applications [https://github.com/juliantellez/lambcycle](https://github.com/juliantellez/lambcycle) 
Hmm. If you want to do it without Javascript, the best way is for each step of the form to be a different page. Each page can have a copy of the progress bar, but more filled up. This is what was intended historically with HTML and forms. If that‚Äôs not what you want, you‚Äôre gonna need JavaScript I think.
Off the top of my head, one way to do it is to create a div with x width and y height and then create another div inside of it with the same height and 0 width; lets call this div "p\_bar". Let's say your form has 5 steps, in javascript all you have to do is make it so each "next" button increases p\_bar's width by 20%.
[removed]
I think create-react-app uses the transform-class-properties babel plugin. Class properties are a stage 3 proposal [https://github.com/tc39/proposal-class-fields](https://github.com/tc39/proposal-class-fields) There could be other reasons. &amp;#x200B;
Then it depends on a case-by-case basis whether they all support all of the specific ES6 features you want to use.
At the end what you are looking is into clean architecture in frontend . I hesitate you to look into repos like clean architecture react and take some ideas. 
I recently started an electron project. Feels so good not having to heavily transpile everything. Modern browsers understand classes and modules! 
I want to use JavaScript :) so... how do I do It? haha
Thanks for your suggestion. I will definitely take into account. 
Maybe [ProgressBar.js](https://kimmobrunfeldt.github.io/progressbar.js/) could help you on the way 
Thank you easy to understand aswell. I kinda knew in the back of my head that it would be a simple solution. 
Which keyword?
A bit to compicated for me but i will try to understand it the best i can
This
I will try to format it better next time 
&gt; Imports use URLs This sounds really dumb imo
You can use the native progress element ([https://www.w3schools.com/tags/tag\_progress.asp](https://www.w3schools.com/tags/tag_progress.asp)) and easily set the progress with javascript. &amp;#x200B; [http://jsfiddle.net/tuf5L0dz/](http://jsfiddle.net/tuf5L0dz/)
that\^\^
Yarn also updates the lock file when you install. If your package versions have carets an install will bump patch versions in the lock file.
Rather than using forEach, use filter.
Really stylish thanks, so I'll just include this js code in my project folder on the page's folder right?
I'll try It out thanks :)
If you only care about modern browsers, you can definitely do it. You can also replace JSX with this: https://github.com/developit/htm I recently wrote this thing just for fun: https://michael-klein.github.io/medieval-cat-meme-generator/ It uses preact, htm, redux and a few more libraries as well as es modules. No build step at all. Obviously, it will break horribly in anything but the latest chrome, safari and firefox(? haven't checked actually) One thing you can actually do is write your app this way and test it in your modern browser and then later run parcel on it. It will transpile and bundle your code nicely (usually) without you having to configure anything. So then you can have a package for production that should work anywhere (you might still have to mess with babel/webpack configs though).
mmm thanks, I'll try that If everything else doesn't work out :)
Have you tried using .some instead of .forEach?
At work, we save/commit lockfiles to our repos. The diffs are sometimes massive and often times, really weird (i.e. sha1 vs sha512, \`dev\` field turned on, sub-dependency version changes even though dependency for module was not changed, etc). Reading online sources, it is recommended everyone use the same npm version. Even then, if your OS is different, it may still produce a different diff. Also, I am often required to use \`npm cache clear\`, removing installed packages, and reinstalling. We have open source repos as well, so its really hard to enforce users to use a specific npm version to submit PRs with correct lock files. Generally not enjoying using npm for lock files. Wondering if yarn also has the same problems though or if yarn has other problems besides the lock file diffs?
You still need it if you want your site to run safely across todays browser scene, but check this out: https://twitter.com/jamiebuilds/status/1022568923726639104 especially the size differences (if you scroll down a little) are incredible if you drop a couple of really old browsers. Generally babel isn't for polyfills only, you'll always and ever transpile: for upcoming specs, bundle optimization, minification, macros, dsl's like typescript, flow and jsx.
It is just good practice to have Babel in place. Even if you aren't worrying about IE11, an older version of Safari might not support the ES feature you want to use. If doesn't have to convert everything back to ES5, but you might want to be able to write ES7 code. ES Modules are probably the most important feature to ensure you are handling. That is more on the Webpack side of things, though. If you are really OK with supporting only the latest browsers, then yea, you can get away without using Babel, or even Webpack. --- Sidenote, Babel can also perform some before-runtime optimizations to improve your code. Webpack also give you more control over how you load your JS files (chunks), and in a medium-large app, I would include both these tools for the flexibility and extra features they provide.
On this line? .forEach(name =&gt; console.log(name.toLowerCase().indexOf(this.search.toLowerCase()) &gt;= 0))); Doesn't seem to be doing it..
Great mention. Worth to save to use later. Tyyy &lt;3
Agreed. Fetch has never been useful for me outside of jsfiddle. It simply doesn‚Äôt have the feature set needed to produce any production applications. 
Sorry ignore me. Just noticed you were using a filter function already. Do you want to return the whole object if it contains the search value inside the name property?
It's not as portable as simple file ;) 
I have to admit I dread this happening at my company. To have to rely on some other teams shitty component as a dependency in my project makes me shiver. In fact devs at my company are building something that sounds like this. Where I am supposed to build my site with a bunch of prebuilt components, and all other components I need for my page I will have to be generic configurable components that go into the collective project. Am I missing the point here? I am happy to be corrected :) &amp;#x200B; &amp;#x200B;
You could make something like this, an underscore is a convention for a private property, variable or method. ``` class Foo { _bar() { // Do something } } ```
I'm not really sure. The thread linked showed me how to access the name property through Object so that is what you see there. I'm trying to filter through my data by their name property.
this is also an option: ``` const functionName = (x, y) =&gt; { return x + y } ```
why might I need to prepare for those trends? 
Thank you, that is technically the solution, but i'm keeping the post flair unanswered because there might be other solutions, thank you a lo anyways :)
Yes. You include the file named `progressbar.min.js`. There's a example you might like [here](https://jsfiddle.net/kimmobrunfeldt/swc64gg3/) which shows you how to get started with it. Good luck on your project :D &amp;#x200B;
No, there is currently no way to have private methods JavaScript.
Ok. The problem of you‚Äôre using forEach, which won‚Äôt return anything. You need to return true or false because you‚Äôre using a filter function that will only return a value in the list if it returns true. Your function would be a bit cleaner if you map the names first, then filter those values using the indexOf logic. 1. Use Object.values to get an array of the nested objects. 2. Use map to pull the name values out of those objects into an array. 3. Use filter with the indexOf logic in your forEach. I can‚Äôt write the code out for you because I don‚Äôt have access to my laptop at the moment, but hope that‚Äôs enough to point you in the right direction.
As mentioned in another comment, using an underscore is the current convention. There is a stage 3 proposal for private fields/methods though as per https://github.com/tc39/proposal-private-methods, and is already implemented in babel with [`@babel/plugin-proposal-private-methods`](https://babeljs.io/blog/2018/12/03/7.2.0). I'm personally not a huge fan of the syntax chosen, but that's just taste.
Thank you, but i don't know if there's something wrong with the solution(which i apologize to think that way, the solution is problably correct and i am missusing it) or my code, because when i type the following: class Foo { const a = (x,y) =&gt; { return x + y }, it throws the "SyntaxError: Unexpected indentifier".
Oh I'm sorry, this is not supported inside classes
Is that sarcastic? If so i am sorry to offend you, i didn't mean to, when i searched this question on firefox i didn't get an equivalent answer, and as i mentioned i'm new to javascript, sorry.
Absolutely! Maybe you can find some more inspiration here: https://github.com/CanopyTax/single-spa. 
Who chose the `#` as a prefix when `_` is already widely used ü§î
Yeah! I saw it and getting inspirations from. 
As per https://github.com/tc39/proposal-class-fields/blob/master/PRIVATE_SYNTAX_FAQ.md &gt; `_` would cause compatibility issues with existing JavaScript code, which has allowed `_` at the start of an identifier or (public) property name for a long time. so I get it, but it's going to take me some time before I'm used to typing `#`.
Npm because you have to sell me on your big-ass tool for me to take a risk on it, and the only selling point of yarn is the lock files, which npm has now.
This could be very viable if you targeted pure electron, for example. But you'll miss out on a lot of fun advanced spec stuff
Add the lock file to your .gitattributes file with the -diff option. package-lock.json -diff This tricks the diff viewers in every system (git diff, github, Phabricator, Bitbucket, etc) to think that the file is a binary file that should be collapsed. You can still uncollapse the file if you need to verify the changes.
\+1 Underscore is only a naming convention and the method is still accessible, so technically not private. It's good practice as it basically tells other developers that this method is currently used as a private method so don't expect it being used elsewhere.
Huh why is this downvoted? This is technically correct. While there are conventions for methods that are supposed to be private, there is no way to make code‚Äîmethods or variables‚Äîprivate or inaccessible in JS. 
yarn workspaces are a killer feature for me personally. Much easier to setup and maintain over lerna in my experience.
Awesome!!! Made progress. getFilteredData: function(){ let objValues = []; let arrOfNames = []; let filteredDataBySearch = []; this.filteredData = cards; objValues = Object.values(this.filteredData[0]); arrOfNames = objValues.map(val =&gt; val.name) if (this.search !== "") { filteredDataBySearch = arrOfNames.filter(name =&gt; name.toLowerCase().indexOf(this.search.toLowerCase()) &gt;= 0); this.filteredData = filteredDataBySearch; } } The issue I'm running into now is it's only displaying the name rather than the entire object...
I learned function programming from [other programming languages...](https://clojurescript.org/)
https://microapps.netlify.com
Ok that‚Äôs straightforward to change. Remove the map, then tweak your filter function to access the name property, eg: filter(x =&gt; x.name ....) Rather than simply using name. Hope that makes sense.
No they won't. Only if you add or update dependencies. Running \`yarn install\` will never result in a lockfile update
Thank you for clarifying!
Ahh alright! Definitely learned a lot breaking this down, thank you.
Hi, newbie here...just joined. Been coding games, desktop, and mobile professionally for 25+ years, but this is my first serious foray into javascript and HTML. I wrote a reactive templating system for components. I wasn't super interested in React or Vue, so thought this would be a fun way to "learn by doing". Here's a jsFiddle for the code, with a little demo showing how it works at the bottom. Feedback appreciated...thanks! [https://jsfiddle.net/an57etg2/2/](https://jsfiddle.net/an57etg2/2/) \-John
They are available on every platform. Done by professionals and the most important part, they offer secure offline accessibility. I am assuming you download (and store, too?) your password file in plain text and unencrypted. Really bad idea having those files laying around in your various devices and readily available in your self-made password online vault. If you encrypt your password file well enough, you can store it on your Facebook wall for everyone to see.
I‚Äôve used puppeteer for this job and it‚Äôs insanely cool and fast. But you should know little bit of writing nodeJS code for you to parallelise browser automation jobs on the same machine(Vertical scaling). In case of multiple machines(Horizontal scaling), you can try out HAProxy and many others.
Mithril.js also supports a pure JS syntax that is pretty nifty and requires no transpiling: https://mithril.js.org/#dom-elements
You can condense this down a bit. You don't need all of the ceremony of the additional variables. if(this.search !== "") { this.filteredData = this.filteredData.reduce((acc, obj) =&gt; acc.concat(Object.values(obj).filter(x =&gt; x.name.toLowerCase().indexOf(this.search.toLowerCase()) &gt;= 0)) , []); } Also, if you don't care a lot about IE support you can use [includes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes) over the indexOf strategy.
Just tested. The problem i've run into is when using caret versioning (the default behavior), and a lock file isn't present (deleted), it will be lock to the version downloaded (the latest patch version), and therefore is potentially "changed". I see that if a lock file is present, even with caret versions, it doesn't change when you run yarn install. Do you not use carets?
Not a huge sample size, but Yarn was significantly faster for installing dependencies at my last workplace. Instead of 210 seconds, it would take something like 160 seconds. These were gigantic projects, so the difference may be negligible in reasonably-sized projects. I imagine most of the speed was the algorithm used to generate the lock files.
i'd do something like: ``` let foo = function (...) {...} class Bar { foo: function (...) { ... foo(...) } } ``` not sure this accomplishes what you're looking for but the idea is that your exposed class makes calls to functions that only it has access to. but "foo" won't actually be private unless you're importing the class in its own file (ie with require or some other modular-type-thing). you also won't have access to `this` in the private foo unless you bind it before calling from the public one.
Thanks for the feedback! I'll add something other than a refresh to restart the process--maybe instead of a "yes/no" I'll change it to a notification with an "OK" to start the process. Not much point in continuing without an account anyway.
Thanks for checking it out :)
I use rc-progress for this, no need to reinvent the wheel when it‚Äôs got such a friendly api
Oh all libraries similar and including react do. This is actually what JSX compiles down to (and what htm produces). It's just that most people would rather not write this by hand, which is why JSX got popular.
Does it need to be a class? You can achieve this with a closure: ``` function myFunc() { function privateFunc() {} function publicFunc() {} return { publicFunc } } ```
Thanks! This will be convenient for sure but still annoyed that massive diffs exist
It is prefferable that it is inside a class, thank you!
It then is a global function not a private one, thank you anyways for the information!
Yeah. Changing it to just "Ok" should work alright.
NPM has an interactive upgrade now as well. 
Yes, I think this concept will become more and more important as older technology companies attempt to rapidly update their aging monoliths. I work on a team at a large healthcare company that is doing exactly this. We build React widgets that are then used by another team to add large amounts of functionality very quickly. The integration point is a function that returns a top level React component. This function takes arguments like auth token, user id, an HTML id to mount the app to, and a whole host of other meta data the React app needs to function. Developers in the monolith then call this function, simple as that. The React app in turn speaks to its own micro service backend. We've successfully launched our micro frontend and it has been considered a big success by our engineering and product leadership. There is also a huge bonus in that the company can hire great talent that wants to work with modern front end tech without all the overhead of the monolith.
Yarn was good when npm sucked, but it improved and its official so yarn is more and more pointless. Tink and pnpm are future anyway.
Of course you can. The point of frameworks is to provide some structure and familiarity for new devs joining projects. There's nothing special. But doing that you would end up either with a framework only you know, or a horrible not reusable mess.
Sorry. Got it solved anyways :)
You can get closer to real private methods by naming them with symbols.. const privateMethod = Symbol( ‚Äòprivate‚Äô ); class MyClass { [ privateMethod ]() { ... } publicMethod() { this[ privateMethod ](); } } It‚Äôs still possible to call the private method from outside of the class, but it‚Äôs a lot more work if you don‚Äôt have the symbol in scope..
i prefer using npm, as it ships with nodejs and I dont want to set up another tool just to do exactly what npm already does. here are my reasons why i stick with npm: - speed: npm and yarn are pretty much the same - yarn has huge lockfile issues when working with different versions. (eg. version 1.1 and 1.2 have different lockfile formats. super annoying. nvm makes this a breeze. - workspaces: use lerna instead, is way better - `yarn upgrade-interactive` is nice but you can do the same with `npm-check` - i get autocomplete on `npm run` (scanning my package.json), which i dont get when using yarn the fact that we have a competitor to npm is great for the development of npm itself. if yarn didnt exist, npm would have never gotten lockfiles, major speed improvements, etc. so don't take this X vs Y too religiously.
Dont use classes. Encapsulate using files and export/import.
Oo thank you. 
Reference Error: This is not defined.
That tweet thread is kinda exactly what I was looking for! Thanks. It seems like with the right project config the transpiling can be pretty light weight which is exactly what I want.
Yarn is fast, but I use NPM because of the npm audit.
What you're talking about is intermediate developers. Experienced developers are often happy to do the minimum amount because they do consider things like performance, page-weight and _time/value_ - and are also typically library-_averse_.
Could you explain more behind this method? sorry i didn't really understand. Thank you anyways!
Yarn is still faster than npm for me. The difference isn‚Äôt as big as it was before but it‚Äôs still noticeable 
What the hell are you even talking about? Why would you delete your lock file? And if you delete your lock file then obviously the lock file will ‚Äúchange‚Äù because it wouldn‚Äôt exist in the first page. Just admit you were wrong with your initial post instead of typing up more bullshit. 
Completely anecdotal, but from my personal experience, `npm ci` is just as fast, if not faster than `yarn` in most cases. We've reached a point where it doesn't really matter though, in my opinion. They're both great and fast.
k
KeePass is a single file that you can take with you and works on nearly any device. Not as nice UI and they don't do the cloud stuff for you like LastPass, but it is worth trying.
This is a class... if you babel the class object it will output a similaire structure. The class syntax is purely syntactic sugar not more.
Use image magic bindings.
This is with Node. If you want to do it in browser you could use Canvas and data url or save the canvas 
No what i meant by "it is prefferable that it is a class", i responded to your question: "does it need to be a class?". Sorry if you missunderstood
React's non-JSX syntax is really unwieldy. At least the one I am familiar with. I actually prefer Mithril's `m` function to JSX.
In addition to Eric Elliott's stuff, I highly recommend Professor Fisbee's Mostly Adequate Guide to Functional Programming, which is just great: [https://mostly-adequate.gitbooks.io/mostly-adequate-guide/](https://mostly-adequate.gitbooks.io/mostly-adequate-guide/). There's a video version that's also great, but it goes really, really fast: [https://www.youtube.com/watch?v=h\_tkIpwbsxY&amp;list=PLK\_hdtAJ4KqX0JOs\_KMAmUNTNMRYhWEaC](https://www.youtube.com/watch?v=h_tkIpwbsxY&amp;list=PLK_hdtAJ4KqX0JOs_KMAmUNTNMRYhWEaC) It's not in JS, but I've found the material that's not specific to F# on [https://fsharpforfunandprofit.com/](https://fsharpforfunandprofit.com/) to be really helpful and interesting. (E.g., [https://fsharpforfunandprofit.com/fppatterns/](https://fsharpforfunandprofit.com/fppatterns/), [https://fsharpforfunandprofit.com/series/thinking-functionally.html](https://fsharpforfunandprofit.com/series/thinking-functionally.html), [https://fsharpforfunandprofit.com/posts/recipe-part2/](https://fsharpforfunandprofit.com/posts/recipe-part2/).)
I do, which is the exact reason why I would never want a simple \`yarn install\` to not download the exact version from the lockfile. You should always check in your lock file, so builds are reproduceable, every team member has the exact same version of packages in their project and continuous integration and continuous delivery are trustworthy. One of the reasons you use carets is that when you run \`yarn upgrade\`, it will update your lockfile with the latest applicable version. 
Man, classes are such a shit show in Javascript. Kind of tangential, but your post inspired me to investigate alternative ways of containing state. I wrote this article about it: https://medium.com/@adrianmcli/javascript-state-encapsulation-without-classes-in-2019-97e06c6a9643
I know a bit of nodeJS code, would hypothetically put all this up on a cloud service google cloud or sauce labs. Have 10-15 separate instances going on there.
You can use private fields without classes. All you need is a [simple function and Javascript objects](https://medium.com/@adrianmcli/javascript-state-encapsulation-without-classes-in-2019-97e06c6a9643).
https://paulhammant.com/2011/11/22/google-accounts-architectural-meaning
If you want to avoid a lot of complexity/tooling, mithril might be a good choice. Don't need any commandline tools, you can juts include the library and get started. It does the usual DOM-diffing rendering, routing etc, but is a fraction the size of react/vue/angular.
Yes, use a 1280\*87 width canvas and add every image as they load, some relevant links: [https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage) [https://stackoverflow.com/questions/6011378/how-to-add-image-to-canvas](https://stackoverflow.com/questions/6011378/how-to-add-image-to-canvas) &amp;#x200B;
You have several way to do that, I think the simplest would be to fill the cell count equivalent to the step number at each page reload. Isn't there an html5 method to fill a cell of a certain color ?
I believe you can just use a closure in the same way the poster above mentioned, just return a class instead of an object.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), ‚Äúnobody‚Äù starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Fixed! Good bot
All functions in an ES module are private unless exported. Basically the same as wrapping the whole thing in a function, but with nicer syntax.
Have a look at the original Ember Engines RFC - https://github.com/emberjs/rfcs/blob/master/text/0010-engines.md, might give you some ideas. I believe LinkedIn and few other big teams are using it in production. 
You can specify what versions of browsers you'd like to target with your .babelrc config.
If you can apply classes to the container as the user progresses, SVG makes this really easy and you can make it look cool. [This is a simple example on codepen](https://codepen.io/audreybrockhaus/pen/mxRmgz)
That‚Äôs neat. Thanks
Babel docs now officially recommend part of it, see https://jamie.build/last-2-versions and https://github.com/babel/babel/issues/7789 
Npm ci will read the lock file as the source of truth. Npm install will use the node_modules as the source of truth, and updates the lockfile, which is just plain weird.
Godamn thank you for linking this. I was frustrated that someone was trying to make another one. 
1. Use Typescript. You‚Äôll love it. 2. Use private keyword Call it a day. 
Yeah, for small little demo apps it seems fine, but it‚Äôs better to have a more robust method, even if you end up writing that method yourself (reinventing wheels...)
That's how modules in the browser work and Deno is sticking closely with the spec to make code interoperability easier.
+1 for adding require.js, I‚Äôve had very good experiences with it in addition to webpack.
iirc, if you just do `var h = React.createElement;`, React isn't particularly unwieldy, either.
I don't think this would work unless the images were resized to be smaller. I tried to create a 1280*87 width canvas in chrome and it didn't work. I'm unsure as to whether this still applies but I found a stackoverflow article about max canvas size: https://stackoverflow.com/questions/6081483/maximum-size-of-a-canvas-element
that = this;
Good bot
Good human
Yeah I don't like their approach. I think it'd be better if they did it like the Guardian where some content is premium but only from professionals, so people can still read content from 'amateurs' for free
Well, then OP is screwed :(
RIP my fucking ear drums
Medium is a content farm with virtually no editorial standards, leading to poor-quality content that's instilling awful habits in new/aspiring developers. Couple that with their "monthly allowance" of free articles, their annoying popups, and so on, I'm surprised Medium is as popular as it is.
yarn, because it's better.
It‚Äôs not just the length of the function name actually. Mithril‚Äôs function does a lot of smart parsing of things like CSS selectors that make it a breeze to work with. 
Wow been at this for 3ish years and I've never seen this before!
The point of the lock file is to check it in to 'lock' the dependency versions. You don't delete the lock file.
Just to be safe you can use babel with preset-env and target specifically the browsers you want to support. This way there'll be no increase in bundle size if they all support the features you are using, but if it happens that at least 1 feature is not covered by one, you're covered. 
Yarn. I really tried to use NPM, but I gave up after the 100th time my lock files got corrupted with react/react native. Switched to yarn a few months ago and haven't looked back
npm unless you find an in-practice pain point. These days both are of a similar speed and provide near-identical functionality. npm is 'first-party' so there are less moving parts.
I thought it was only the "partner program" posts that are paywalled?
I appreciate the clarity. I do have mine checked in but when things have run amok I've deleted it and yarn installed to see what happens, sometimes mistakenly checking in that whole new lock file...woops! 
They are, but some of those posts are low quality, I've found posts behind the pay wall that you can read in a minute and it's like any other post that is not behind the pay wall, sometimes I don't even notice that I'd read the monthly 5 paid posts
New aspiring developer here: what kind of content of theirs is misleading? You know, just so I know to avoid that line of thinking?
Incognito mode FTW getting past their paywall.
Same. Why are people excited about such a crap platform.
Depends what do you want exactly. If you want to just show them as one, you could use a canvas or event a set of divs and apply the image or Smth. But if you want to join the images and save the file, you‚Äôll need to find a way to edit images with js which I don‚Äôt know if it‚Äôs possible, probably yes.
I never knew there was a monthly limit. 
IMO it‚Äôs the frog in boiling water adage. The development community flocked to it because it was simple, looked nice, and was frustration free when it started. Then it, like a lot of our beloved services around the web, needed to add things to increase subscription rates for their paid offering to pay bills and attract investors, so they slowly added these things to accomplish that. I‚Äôm not sure what the answer is with these sorts of things (and people seem to have yet to figure it out IMO), but I do know if someone said ‚Äúhere‚Äôs the old Medium with none of this crap, but you need to leave your computer on overnight once a month to retain access so medium can mine crypto and pay their bills‚Äù, I‚Äôd take it in a heartbeat. 
Most of the articles are created by people trying to develope their personal brand. They rarely have anything new or insightful to share. It's content created solely for the purpose on marketing one's self.
A lot of libraries/projects these days fall under this too. The desire a lot of people have to become a ‚Äúfamous‚Äù developer isn‚Äôt healthy.
It seems to be pretty new. I first encountered it the other day.
 - I still find yarn to be slightly faster - You can use `yarn run *` too - fair. There's [yvm](https://yvm.js.org/docs/overview) but I've never used it and you really shouldn't need yet another tool for that - lerna can be combined with yarn workspaces for better hoisting - k - that depends on your shell, there's plugins available for yarn too
What‚Äôs your general opinion on it? I work with about 200 other devs on the same FE repo and there are downsides but I honestly can‚Äôt imagine doing what we do without having core repo tech built upon and improved by a core team while product teams reap those benefits. How is code sharing done? Tons of little internal npm modules? Or not at all?
Sorry bout that. I hadn't compared it to normal volume levels and now it's baked into the url forever...
Very interesting
So what are good alternatives? The author mentions HackerNoon. Any others?
But that aspiration to provide free work, helps people like me who want to learn. If it happens to make me look up to them and improves their reputation. Shouldn't it?
https://github.com/KnicKnic/WASM-ImageMagick in browser:)
I have run into this limit before chrome will not throw any console errors just silently you will not get anything drawn on screen/to the canvas
We're in the process of re building a monolith, by monolith I mean it's all PHP dealing directly with the database with only a separate auth layer. So Im not sure when it comes to monoliths building a large front end is really 'monolithic'. A lot of our app depends on data that needs to be shared. And meaningful views can be derived from looking at the data in different combinations. I think this could work for very simple front ends, maybe I'm wrong and I would love to see a non-trivial application that uses this pattern.
Wow impressive! I might have to play around with it :)
I would recommend this method as well. You can round the borders of the div with css for a modern look.