 I'm just guessing that the root of the problem is a while loop. Javascript is event-driven and the while loop blocks the event loop - and therefore your onkeyup (or any event) function is never executed. In general, progressively changing a property requires some kind of timer. A small example. &lt;!DOCTYPE html&gt; &lt;head&gt;&lt;meta charset="UTF-8"&gt;&lt;/head&gt; &lt;body&gt; &lt;script&gt; let ruddiness = 0 let direction = 1 window.setInterval(changeColour, 10) // 10 milliseconds function changeColour() { const colour = "rgb(" + ruddiness + ",127,127)" document.body.style.backgroundColor = colour ruddiness = ruddiness + direction if (ruddiness === 255 || ruddiness === 0) { direction = direction * -1 } } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;
I haven‚Äôt use this yet, but I‚Äôve been keeping my eye on it and it has been gaining a lot of traction [Slate](https://github.com/ianstormtaylor/slate/blob/master/Readme.md) 
Very cool - I‚Äôd assumed react was cleverer and wouldn‚Äôt have done these renders, so very interesting!
Yeap, can confirm, the catch in the libraries I use seem to only treat their own exceptions but never throw the others. Nice tip about the break points, never used that tab before lol
Fantastic tool. Do you have a Github repo for this?
Just had the idea to do this a few days ago to build up my JS skills and confidence. Here‚Äôs what I did: https://something-weird.herokuapp.com/ (May take a moment to load due to dynos going to sleep) I share this only to show people that it could be dirt simple, but sill worthwhile. This is an app that stores a bunch of weird links, and will send a user to a random one when they click the ‚Äúget weird‚Äù button. Users can submit links, and there‚Äôs a page I can go to so I can approve or delete them. 
are u serious dude
I second this...why are you using a package for basic native functionality? I can't understand it. Well, I suppose if you go all in on a framework and they have something built-in, then sure. But otherwise, throw a light wrapper around the native API and import into your files as needed: maximum control and minmal duplication.
[jscompress](https://jscompress.com/)
oh yeah i have [this page](https://davecode.me/minify) which is a sort of list of minifiers
Thanks for the feedback pratik! We'll definitely look into it.
totally srs rn dude
Thats an interesting point that we hadn't given any real thought into. In fact, we haven't really considered caching data at all. Swell's written in JS with an Electron wrapper, so for HTTP/2 requests we're actually using the built in node http2 package which doesn't add to cache at all. But for HTTP/1, we're using a browser fetch, which would add to cache. &amp;#x200B; Thanks for the feedback! I'll definitely bring it up with the team
I'd like to get feedback on three related libraries for writing to and consuming data streams using async/await syntax. It's an alternative to EventEmitter and event listeners. &amp;#x200B; [https://github.com/SocketCluster/stream-demux](https://github.com/SocketCluster/stream-demux) [https://github.com/SocketCluster/writable-async-iterable-stream](https://github.com/SocketCluster/writable-async-iterable-stream) [https://github.com/SocketCluster/async-iterable-stream](https://github.com/SocketCluster/async-iterable-stream)
Use the search method: https://www.themoviedb.org/documentation/api Example: http://api.themoviedb.org/3/search/movie?api_key=NEVERSHOWYOURAPIKEY&amp;language=en-US&amp;page=1&amp;query=hypercube 
I agree about fetch, but xhr was pretty bad...
Dev laziness is my hypothesis. It's simply easier to import a module than to write a wrapper function. I'm all for being lazy if it means writing helper functions or shell scripts or whatever to make developing smoother, but there's a limit to how much laziness is beneficial. If you're too lazy in front end it can straight up be detrimental.
Thank you!
Until that money starts rolling in!
Nevermind I fixed it! In Angular you are sort of protected from this pointer problems, in raw typescript you are not. Once I did a deep dive on it, I resolved my problem and my test library is working! YASSSS! lol
Fantastic tool. Good work!
&gt;coffeescrjpt Thanks! Good idea! I think I can add an option -r/--require like mocha to inject a custom compiler.
It's the concept of a stream, it makes sense if you've ever worked with streams before. The solutions provided in that issue are completely reasonable ways to avoiding this issue. &gt; If you encountered the issue by doing normal things, that means someone else will. I think they should fix it. If someone doesn't understand your library and uses it incorrectly it's not your fault that their code doesn't work. 
Now I gotta wait for Windows support.
Also found this flex generator useful http://the-echoplex.net/flexyboxes/
I always use this one: https://codepen.io/enxaneta/full/adLPwv
Wow.
Maybe something like this? &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt;&lt;meta charset="UTF-8"&gt;&lt;/head&gt; &lt;body&gt; &lt;script&gt; document.body.style.backgroundColor = "rgba(0, 0, 0, 1)" window.onkeyup = function (event) { const colorString = window.getComputedStyle(document.body).backgroundColor; const match = /rgba?\((\d+),\s*(\d+),\s*(\d+)/gi.exec(colorString) let red = parseInt(match[1], 10) let green = parseInt(match[2], 10) let blue = parseInt(match[3], 10) red = red + 10 document.body.style.backgroundColor = `rgba(${red},${green},${blue},1)`; } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;
Nah
You've literally said you're new to developing. It's **your** job to understand the libraries you're using, not the library to understand every workflow every user can potentially have. Would you rather after pulling the json data the original request and transformed object both stay in memory for all requests coming in? You may not have considered the underlying architecture decisions that were made that make just changing it to appease people who don't understand streams not worth it. You can say "nah" but it just shows that you're an ignorant coder. Appreciate the downvote because you pulled the reddit "but am **I** in the wrong here???". Yes, you are.
I am supposed to use the link to the JSON provided from my professor and nothing else
I wrote a really cool event stream library for node you might like. Are you into bit coin?
I think it's because people are unaware fetch exists, which is why this article was written. Despite my comment below, it's a great article and I love the fact it gives actual use-case examples.
I upvoted your comment but it was really a downvote for people including angular for $http
As a Windows dev. God I hope not. 
Hi /u/Akseliak, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/scarcella, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/warriorz3k, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
This got resolved in /r/jquery -- can you please mark this as "Solved"? Would save people some clicks.
Please mark this as "Solved" to save people some clicks.
Saw this article posted in another programming subreddit. One person complaint that they didn‚Äôt like using a function called ‚Äòfetch‚Äô to do post request, another didn‚Äôt like that the response from is not automatically parsed into json. Different folks different strokes, I guess.
I suppose... "Fetch" for anything other than a GET does kind of make my eye twitch a little... now that you mention it. I suppose if the endpoint always returns a response that helps lol!
Calm down, I don't mind the downvotes really, not the end of the world
I didnt.... First I created a simple class (40 lines maybe?) to turn xhr into a promise. Dirt simple. Then I started using fetch, because it was just there and I didn't need to include anything. Then, one day, I wanted an upload progress bar. My options were either to spend like another day figuring out how to add that to my class, or just include axios. So, axios it is. 
Hahah yeah that‚Äôs how I think of it ‚Äî even if you do a post request, you‚Äôre still ‚Äòfetching‚Äô the responses... Unless a majority of my users is on explorer or edge, I just can‚Äôt imagine pulling in axios on the front end just because I don‚Äôt like the name of the built in api... 
Personally I use the _incredibly_ light wrapper (fetchival), as it makes fetch that much easier and cleaner to use. 
Check out fetchival! It's 0.5k minzip, so it's not like it's a huge dependency.
cookies/sessions are not persistent tho, so if anything where to happen to your server, you will lose all data. Cookies are a way to store temporary data on the client, session can store that on the server. It's one way to do things, generally people tend to use a database for persistent data, however in your case you probably want to do both. I'm not sure how in your case you can identify users, but I assume Twilio has some logic to maintain conversations?
Mqtt support would be swell!
you should utilize [history.replaceState\(\)](https://developer.mozilla.org/en-US/docs/Web/API/History_API#The_replaceState\(\)_method) :)
Someone should build a web app that gives people ideas for web apps. ü§î
Thanks a bunch
This, alongside Visual Studio Code, are an excellent dev experience. When you're making something that needs to be maintainable it pays to have type safe intellisense, it speeds up coding amazingly.
I love this. It puts the idea of a single simple function (or perhaps 2) in action and gives me hope that I too can figure out my first real web application. 
*Flex Box*
The important bit is to create a wrapper / abstraction that ensures separation between application code and apis like this. Refactoring to use the module of the day, or even better to replace the module of the day with a native api, then becomes a matter of updating &lt;100 lines vs your whole app. 
I just saw this link on a Flex tutorial too. Thank you!
 If you can't use anything else than this URL then, you could probably use an array of promise (on promise for each page), and after all of them are completed, concat the results and filter on the title to get yours. I don't say it is the best solution, but it is one :)
You can use a Node or bash script to do that. 
Me?? I didn't make the thing. 
Yeah but what are you gonna do? Shit‚Äôs moving too fast. Easier to just include accessibility features in the next Big Thing(tm) No but really, this is what happens when projects like Angular effectively die before they even fully mature. Will React fall prematurely in the same way? 
&gt; I think they should fix it Native fetch in the browser behaves the same way, it's not something specific to the `node-fetch` library, so when you say "it" you're actually referring to the standard created by the browser vendors (a.k.a. WHATWG). While it's not ergonomic in this particular case, it's done for a good technical reason, and is one of the very few caveats you have to remember (just like the fact that 4xx/5xx responses don't reject the initial promise). But in opposition to the article, I would just recommend using Axios if you want these things smoothed over for you. `fetch` is intentionally barebones - it's first and foremost a replacement for `XMLHttpRequest`. While there's definitely an improvement in ease-of-use compared to XHR, that's not its primary concern - the intention is that external wrapper libraries (like Axios) fulfill that role.
100% agree. Unfortunately, many people don't seem to understand that.
Yeah upload progress is basically the one major thing `fetch` still can't do.
The funny thing is that I hate deoendencies (hence the custom class) but when I looked at what is required to implement it, it was just ckear as day ‚Äúfuckit, we‚Äôre bringing in axios‚Äù. 
You‚Äôre not going to get far as a developer with that attitude. 
So hold on, is the issue at hand (unable to resolve a body multiple times) only an issue for node-fetch or is that actually specced? My initial impression was that's it's node-fetch specific, which in that case I'd expect it to work to spec ... But if it _is_ working to spec than its purely a non-issue ...
It's specced, you can try it in your browser console if you want.
This is great advice. Thanks for taking the time to write all this and share with the community. If you don‚Äôt mind, I was wondering if you could explain something I‚Äôve struggling with. I‚Äôm a graphic designer and front end developer, and I want to get my hands dirty with either Vue or React ‚Äîhowever, no matter how many blog posts I read, I simply don‚Äôt understand how those frameworks are able to speak with and write to a database. For a simple site, how do you go about setting that up?
Weird flex but okay
React is clever enough to not try to magically prevent these because it costs too much. It's up to developers to understand how renders happen and to prevent what has to be prevented.
To add to all the other comments, checkout Johnny5 and Skynet, 2 projects to allow you to use JS to program on devices like the Arduino.
Have a github with more than just the github example in it. I see this garbage on resumes all the time.
&gt;**Streams and cloning** &gt; &gt;It is important to realise that **Request and Response bodies can only be read once**! Both interfaces have a boolean attribute bodyUsed to determine if it is safe to read or not. &gt; &gt;This decision allows easing the transition to an eventual [stream-based](https://streams.spec.whatwg.org/) Fetch API. The intention is to let applications consume data as it arrives, allowing for JavaScript to deal with larger files like videos, and perform things like compression and editing on the fly. &gt; &gt;Often, you‚Äôll want access to the body multiple times. For example, you can use the upcoming [Cache API](http://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#cache-objects) to store Requests and Responses for offline use, and Cache requires bodies to be available for reading. &amp;#x200B; From [the fetch API introduction blog](https://hacks.mozilla.org/2015/03/this-api-is-so-fetching/), emphasis mine -- it looks like it's the standardize behavior.
 const yell = (str) =&gt; `${str}!!`; const expressEmotion = (str) =&gt; `${str} ü•≥`; const upper = (str) =&gt; str.toUpperCase(); const meRn = 'hell yes' |&gt; upper |&gt; yell |&gt; expressEmotion; console.log(meRn); // HELL YES!! ü•≥
Make sure file import paths are correct. ``` import { HttpCaller } from './httpCaller'; ``` Cannot find this one.
Proper error handling. Making assumptions that you're end points will be always returning what you are expecting is foolish. Secondly, it returns javascript object, not JSON. So that's a little bonus.
Why would you use this over standard function composition? This forces data first. I've been baffled by this weird infix gimped version of compose ever since it was proposed. const compose = (...fs) =&gt; (...args) =&gt; fs.reduce((acc, f) =&gt; [f(...acc)], args)[0];
There are parts of functional programming that come in handy in JavaScript. Before I rant let me say that I am by far no expert in any functional language, instead I‚Äôve only taken a programming class that went over lambda calculus, higher order functions, currying, and stuff like that. That being said my favorite use case for functional programming in js is how easy it is to work with arrays. Using filter, reduce, map, etc make my code way easier to read and I can reuse those lambda functions I pass in at different parts in my project. Also this allows you to work with your arrays as immutable objects, which when dealing with mvc it makes life a lot easier because you don‚Äôt have to worry about side effects. Besides that, recursion has its powerful use cases as well
Yeah, for HTTP/1 postman uses the same, and is a problem when you want to see fast changes. Making it hard request for each request (or option to do so) would be great!
great work you should take it further i am definitely going to use this in my web designing 
Yup, I thought it was Adobe Flex.
Wait... you're saying you can't do proper error handling with fetch? And that getting back a parsed object is better than a serialized object (fetch has an easy to use string to object method)? Also pretty sure you can cancel and do progress bars (article says as much). And cookies can be done by setting just a one-line config property, I believe. None of that stuff seems difficult to do with fetch. 
Think this is what you're looking for. const apikey = "1234"; const baseurl = `https://api.themoviedb.org/3/movie/popular?api_key=${apikey}&amp;language=en-US&amp;page=`; const userInput = document.getElementById("searchBox"); const searchBtn = document.getElementById("searchIdButton"); const moviesList = document.getElementById("moviesList"); const queryAPI = () =&gt; Promise.all(Array(10) .fill(0) .map((_, i) =&gt; `${baseurl}${i + 1}`) .map(url =&gt; fetch(url))) .then(mapToJSON) .then(formatResults) .then(enableSearch) .catch(console.error); const toJSON = res =&gt; res.json(); const mapToJSON = arr =&gt; Promise.all(arr.map(toJSON)); const concatResults = (acc, page) =&gt; acc.concat(page.results); const formatResults = arr =&gt; arr.reduce(concatResults, []); const search = (arr, query) =&gt; arr.find(x =&gt; x.title.toLowerCase() === query); const enableSearch = results =&gt; { searchBtn.addEventListener("click", () =&gt; { const result = search(results, userInput.value.toLowerCase()); if (result) { console.log(result); moviesList.innerHTML = ` &lt;table&gt; ${Object.keys(result).map(key =&gt; ` &lt;tr&gt; &lt;td&gt;${key}&lt;/td&gt; &lt;td&gt;${result[key]}&lt;/td&gt; &lt;/tr&gt; `).join("")} &lt;table&gt; `; } }); }; window.addEventListener("load", queryAPI); 
It is very difficult to help you without a code example. So, I'm just going to fish in the dark. Do you store your test data as a JSON file? I may be wrong but imports are just for executable code. A JSON is not executable, it's data, right? So, you'll have to [tell node JS to open the file](https://code-maven.com/reading-a-file-with-nodejs) and \[parse the JSON\]([https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\_Objects/JSON/For](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/For) more detailed info on file reading, check the [node JS documentation on fs.readFile](https://nodejs.org/dist/latest-v6.x/docs/api/fs.html]). Another solution would be to make your JSON executable. JSON stands for JavaScript Object Notation, meaning that any JSON must be a valid JavaScript object. Just declare it as an object or array or whatever you need, and turn your .json file into a .js file. You just have to export the object you declared. Does that help?
I agree with all that. I use Ramda heavily which lead me to look at the Fantasy Land spec and other libraries like Folktale. To me it seems like there's a line between the "normal" FP you describe and the quasi-academic stuff--basically constructors with array prototype methods and algebraic proofs and hindley-milner signatures that make easy concepts appear difficult, u.map(a =&gt; f(g(x))) === u.map(g).map(f). I can't tell if the latter is just JS for people who wish they didn't have to use JS or something that I would actually find useful. 
First-class functions are arguably *the* FP concept, and they are super handy (which is why every other language had them now). Probably nothing to argue about here. Rx libraries do use FReactiveP concepts to do something neat. I feel that the learning curve is a bit too steep, but it's leveraged by this API being available in many languages. Also, immutable data structures would have been super useful on the front end had they been native. Immutable.js always tends to turn into horrible mess where it interfaces with imperative code. The guys who use these at syntax level (cljs and friend) don't complain though. 
As an obvious side note, unless the JS is calling some compiled language in the majority of the cases anything performance sensitive(or just a desire for it to be fast) is going to suck. That said when FFI is supported to offload any heavy/long running processing tasks to a more performant language, you can use the both of best worlds. Personally I quite enjoy Rust and JS.
I've seen this concern before, why is data first considered a bad thing? Doesn't that make more sense because it's input -&gt; output?
JS can be cool for some embedded projects or prototyping, but not usable/reliable when you need determinism(eg strict window of time when data is available to read or write, then unavailable for period of time temporarily). In one project I worked on, I had to an arduino device eavesdrop on communication(RS485) between a server and client(touchpad device with an old digital display and physical buttons). There was a very small time window where communication was permitted from the server or client and then it'd switch to the other direction, so if you wanted to read/write as one of those to hijack/immitate the device, you'd have to do so and complete the operation within a short time frame(so short that trying to log a string caused a bug by offsetting when code would run missing it's time needed to execute in).
You don't say!
Hey, I dont think that you are slow, sometimes the doc is bad made. You should see how other APIs work its a good way to learn how to read doc
It probably depends on what you define or include as an "FP concept". There's been a strong trend over several years for taking influences from functional programming and applying them to javascript. Immutable data structures are popular, including [immutable.js](https://github.com/facebook/immutable-js). Redux is uses function composition and shares/borrows concepts from Elm. Reselect also plays well with function composition and even leads to cases where partial function application is actually useful and readable in real-world code. Ideas about pure functions and managing side effects are pretty central to most of the above libraries and also to React and similar libraries/frameworks of the last few years. You don't often hear people talking about monads or other "academic" concepts outside of blog posts specifically about that, but certain concepts have certainly been widely adopted. And if we describe FP as basically "organize code around functions acting on data" and OOP as basically "organize code around objects encapsulating both data and behavior" then I think it is fair to say that the trends in javascript mostly favor the former.
Is there a good place to submit portfolio projects for peer review/feedback? I've a bad habit of working on a lot of projects in the past but never getting them to a point of completion or being embarrassed by the state of the code(variable/function names that random words/letters as I was more focused on getting stuff functional, commented code from iterations that I kept around because just maybe I might still have a need/use for it while I was iterating, etc). Sometimes I stopped those projects because of circumstances and too much time had passed by the time I could get back to them, one in particular that I want to get back to and complete as I try to get back into web development again is probably suited for a rewrite, I don't think the technologies used back then are skills many jobs list for anymore and there are some better ways or choices to make today(been a couple years). They're not too complicated/big for projects, this one I'm talking about used a few templating languages for HTML before settling on marko(earlier choices like jade/pug were not able to do some feature/integration well iirc), it would then read in some json and markdown files to populate the template with partials and output the html, gulp had a few thing setup mostly to do with SCSS, the output HTML+CSS files then rendered a nicely formatted and professional styled CV. That then was rendered to a PDF via a Docker container service(just start up the docker container and point it to the html file). I'm thinking to pick that back up, but switch from marko to react. Maybe use styled-components for the CSS this time as that seems to be quite popular with React apps. Once that's in a good state I think I can make quite a few small projects/improvements on it(eg use an actual database instead of markdown/json files, add an editing form/CRUD feature), or is it better to make another separate project for portfolio? (I have an old project for TEDx event in 2014 that used Twitter API to retrieve tweets with a hashtag, and a 2nd hashtag would affect what colour the background was, nothing exciting, it was a project in my first week diving into web dev). Is there any value in keeping my older code for the CV project? Perhaps as a tagged git commit or branch? I doubt anyone hiring is going to bother to notice/look at that, if anyone has done portfolio reviews for hiring, what do you do? Look at or possibly build/run a github project, glance over the code from the master branch? Ideas I have plenty of, but I'm a bit more concerned about what will help me get hired as it's very competitive here, I have quite a few negatives to fight against(large employment gaps(6 months+), no prior professional web company experience, no relevant degree(I've made it to final candidates but this one has often been why someone else was chosen), no good references(worked at some startups but they weren't fond of my resignation)). That said I am certain I'm quite capable for junior roles.
A generator(probably bit silly) or submit and upvote(more useful, probably bigger scope depending on implementation)?
&gt; I want to get my hands dirty with either Vue or React ‚Äîhowever, no matter how many blog posts I read, I simply don‚Äôt understand how those frameworks are able to speak with and write to a database. For a simple site, how do you go about setting that up? First perhaps just focus on the part without accessing a database. Use an external JSON file or similar. Reading helps raise awareness, but going through the experience of coding with the different technologies is going to help it click and connect the dots a bit better for you. Start of simple/small, if you insist on tackling your own project from the get-go then break it down. Create the front-end in Vue or React, plan out how you want it to look on a piece of paper, break that design down into components, then build those and piece them together, look at existing projects or articles/tutorials that can help you get there, don't just keep reading them without doing any coding though :) Find something and code it, you can go read more about it later and decide what's a better option/way to do so later, else you might find days/weeks going by with little to show for it. One the UI has come together, mock that database data, it's not important yet, you're still trying to learn how Vue or React works. Get it functioning as if the database data was already there, then you can tackle the database part. Database with React could populate component state via GraphQL, or you could consider managing state with something like Redux or Mobx, try not to lose too much time into reading too much into these, set a time limit if you feel you're going to have a problem with reading too much, then when you reach that you have to make a choice(about whatever it was you spent all that time reading(or watching) about) and just do something, implement something that works, get a feel for it, form your own opinions from experience. With Redux, database queries would be async state, so you'd use some middleware like redux-thunk, redux-logic, etc, you don't need to actually bother with state management either for now if you want to focus on keeping it simple. **TL;DR:** There's a lot of choices, a lot of combinations/variations of how you go about things, but that's usually the case with web dev afaik? So my best advice is to take your project and break the scope down into smaller pieces/projects/milestones, any research/choices you need to make, set a time limit, experiment by just coding something that works, it'll be understood better and give you some new opinions and questions to either choose something else or learn how to do it better in future.
Really? I don't get the point of linking to your github account if you don't have anything to show there. Does your activity on it matter much? I used to have a decent activity graph thing of participating in other repos(issue discussions mostly) as well as committing to a project of mine that I maintained for about a year or so before letting the community I had since left take over(they forked it instead of deciding to continue contributing to the original repo..), but for the past year it's pretty empty. What are some of the things you look for when the resumes actually have stuff on their github accounts? I'm trying to get back into web development, especially react looks nice(was still pretty new and not used much when I had to shift to a different role).
**VueJS is my favorite.** 
React 
For large application it is very worthy. Angular is created in Typescript and VueJs is also re-written in Typescript.
&gt; Also pretty sure you can cancel and do progress bars (article says as much). I remember reading about an issue with implementing progress bars, I think it was with fetch and file uploads, the article that pointed it out then suggested using axios which didn't have that issue. Cancellation seems to have been an issue with fetch at least [in the past year](https://news.ycombinator.com/item?id=16655112), perhaps that has changed since, but you can imagine that people who ran into the issue back then and used an alternative like axios as a solution probably don't bother checking up if their opinion "A is better than B because of X problem" has changed, they just stick to what works unless given good reason to. That's the case with lots of libs/api/frameworks/etc, probably even languages. fetch is also not supported on the backend with node and perhaps other uses of JS where I think axios is?(there is also node-fetch for node users). There is a rather long issue about it on nodes github about adding fetch and it doesn't seem like it'll happen. Sooo... in this case it can just be use axios frontend or backend, remember how to use just that and not bother about switching between the two.
Thanks for the clarification. It makes sense now. Didn't know about the Cache API either. Will definitely check it out!
Thanks for the help. You were right especially in that last sentence.
&gt; I second this...why are you using a package for basic native functionality? I can't understand it. Besides the point of people that aren't aware of fetch because they've been doing web dev for a long time(or perhaps new and never heard of it), so they stick with what they know. fetch doesn't work on node natively, you can use node-fetch package for it apparently, or you could use axios on either node/browser. I've read in the past that fetch couldn't be used to get progress events (for file upload iirc), but with axios you could show the upload %. [In the past year](https://news.ycombinator.com/item?id=16655112) fetch also wasn't able to cancel requests? If that's no longer the case, great, but if you were doing dev around then and tried fetch out and ran into that issue and axios solved it, that's probably why you'd stick to axios and not fetch. It's not that common I think to make choices like that and then keep yourself up to date with all the other alternatives to see if you should reconsider, you just stick to what works well for you, and maybe if there is enough noise about an alternative at a later date you'd give it some thought.
According to the comments above, it is to spec. Given that, I can't complain other than to note my own failure to read and/or understand the original spec.
Data first is probably only considered a bad thing to people that utilize currying. Most people think the data last mantra is confusing, and I did too until I started actually using currying in a real capacity. For a really trivial example considered this not curried map function (and ignore that it‚Äôs just call the Array method): const map = (arr, functor) =&gt; arr.map(functor) const strs = [‚ÄúA‚Äù, ‚ÄúB‚Äù] map(strs, s =&gt; s.toLower()) // now we have lowercase strings // but turns out there‚Äôs another array const more = [‚ÄúC‚Äù, ‚ÄúD‚Äù] map(more, s =&gt; s.toLower()) // damn! had to repeat myself Now if we look at a curried data last version: const map = curry((functor, are) =&gt; arr.map(functor)) const strs = [‚ÄúA‚Äù, ‚ÄúB‚Äù] // just in case I have to do this again, make a new function for it const mapToLower = map(s =&gt; s.toLower()) mapToLower(strs) const more = [‚ÄúC‚Äù, ‚ÄúD‚Äù] mapToLower(more) // wow that was easy Yes, this example is trivial, and if your takeaway is ‚Äúwell you should‚Äôve just stored the toLower functor in variable and just reused that‚Äù, you‚Äôre missing the point. It‚Äôs a lot easier to compose a lot of functions together when they‚Äôre not expecting to get passed data until it‚Äôs time to do something with it. It won‚Äôt click with everyone, and I still find it slightly annoying, but there is a reason people advocate for it, but like most things we argue about it‚Äôs a personal preference that won‚Äôt make your code infinitely better or worse, it‚Äôs just a way to do something. If you like the pipeline operator, and don‚Äôt like data last, then check out Elixir, the pipe operator passes the return value into first argument, and any other args provided to the function get shifted over.
One of the keys to programming in general, not related to a particular paradigm, is the correct management of different levels of abstraction -or levels of detail, if you prefer to call them so-. This means that you're able to define and build different _contexts_ where you worry about different concerns. This should be nothing new, as it is the application of the principle of _separating concerns_ taken to its full consequences. A second idea to consider is that building different projects requires different efforts -budgets-. That is, for different projects it may make more or less sense to build and define a different number of levels of abstraction. (This is true, of course, for many other aspects of programming; it's called _economics_.) E.g. One should not apply the same criteria for making decisions on a 20-year, million LOC project, than on a small project that will be run once for a specific task and never again. What you're talking about is a _part_ of FP that is concerned with levels of abstraction. They are, though, a _certain kind_ of abstractions. That is, while most projects _generally_ do need various levels of abstraction that are directly -or more or less closely- related to the _business_ of the project, many of the things from FP you refer to, provide abstractions over the mechanics of _programming itself_. This does have a worthy goal. It's the exact same worthy goal that the principle of separating concerns provides... because it's actually the same thing. But it separates concerns that are, in a sense, _more abstract_ because they are mostly unrelated to the business side or more practical side of the project and focus instead on the separating concerns over the more generic parts of your code. Now, all this, I insist, **is** generally worthy. But than again, I insist too, different projects have different needs. This means that, yes, in a -large? debatable- number of projects you may indeed not need many of these things that much or at all. notice, though, that this can be said about most of programming ideas. ---- On a different note, about the _difficulty_ -or not- of some of this stuff. It _is_, in a way, more difficult. But it is also, in a different way, much easier. The problem is that most of the times these concerns apply on **very abstract** levels, and this is at the same time, easier because they are very general -close to universal- concerns, but also much harder because they are so general -too far removed from the things people are used to think about-. If one wanted to approach these things and successfully reach the point were they become _easier_, probably most effort should be expended on the idea of clearly identifying and understanding those abstractions that are focused on the more generic concerns of the code and of programming in itself. As an easy example, given that you've mentioned using _collection methods_ heavily: All those `map`, `filter`, `reduce`, etc methods, what they do, what they _are_, is just defining a level of abstraction over the _generic operation_ of **iteration**. That is, they each provide an abstracted way to iterate over a collection -each with a different goal, yes-, by separating your operation from the specific mechanism of iteration itself. They define and build a level of abstraction over the concern of iterating. If you think about it, you're probably accustomed to thinking about, say, "abstracting over the operation or concern of getting active users from the database", so that you write a `getUsers('active')` or a `getActiveUsers()` or whatever. This is the same thing. The difference, once again, is that _iterating_ is more abstract and only directly related to concerns about programming itself. To extend it a bit more and make things worse: `Maybe` abstracts over "doing an operation on a result that you may or may not have". `Either` abstracts over "doing an operation on a result that may be of one kind or a different kind". But then we can abstract over the details of both `Maybe` and `Either` and use the concept of a `Monad` which abstracts over the idea of "doing operations on stuff". You can always -not always but you get the idea- abstract things more. Note that other paradigms also work this way. Say, OOP in itself is concerned with things about programming, and not so much about your _business_ concerns. But then again, OOP is very much related to _data structures and relationships_, which are still very directly related to modelling your business concerns and concepts. So they don't _appear_ to be so abstract. Still, there are certain aspects of OOP which are indeed there only for _programming concerns_, such as say "virtual methods" or "interfaces". Anything where you hear mentioning that it is about "code reuse", it is to some extent removed from the more _practical_ aspects of the program and closer to the more _programming_ aspects. ---- Finally, about the "in JS" part of your question. FP is _unrelated_ to the language you use. Of course, it is, in certain aspects, limited or constrained by the capabilities of the language. But once the capabilities (or some of them) are in place, it doesn't really make much difference what language it is. The thing is that, _mostly_, JS is still tied to a certain kind of development / project. If this is what you were thinking -as in, "is FP worth it in X type of project?"- then that question is then more relevant than asking if it's worth it "in JS". But _still_ it depends. Things are worthy depending on a number of different things, and it's not generally feasible to give a valid, general answer. I'm pretty sure you will find _a lot_ of situations where you won't get much benefit out of these things. And on many of those it _may_ well be because it requires too much effort to balance out the possible benefits you get. But I'm also pretty sure that, yes, of course, these aspects of FP _do_ have practical benefits and will, in some circumstances be very worthy.
 function scan(list, reducer, seed) { const tmp = list.slice(); if (arguments.length === 2) { seed = tmp.shift(); } return tmp.reduce((results, item, index) =&gt; { return results.concat(reducer(results[index], item)) }, [seed]); } const x = scan([1, 5, 2, 10, 100], (a, b) =&gt; a + b); console.log(x); // [1, 6, 8, 18, 118] &amp;#x200B;
Vue
No problems, I learn something new thanks to your comment!
Hey there! I have a really minor quibble about the function for creating guids. It looks like you're doing a search and replace on a string with a bunch of random numbers. The purpose of a guid, as the name implies, is that the ID is *globally unique* - that is to say that guids are guaranteed not to conflict with any other ID that's ever been created. While for all intents and purposes it might appear like you're creating guids, this isn't the case - completely randomly generated numbers do not fit the bill, unfortunately.
Vanilla JS
I've used all three of those professionally, and I think there are different advantages of every framework. But I will just give my opinion, just based on the code. What I enjoy about Vue and Angular is that you have different sections for HTML, Javascript and CSS. With React you have some of the logic inside the HTML, which I dislike. React is very satisfying to write though, using class components or functional components. Angular seems bloated for smaller projects - but it has very good tools for adding serverside rendering and other things. I like the services as well. Great when scaling up as well. Vue syntax is very clean. It's like Angular and React made love! The perfect from both world! So, TLDR: Vue.
There are a few projects, like Elm and ReasonML, that bring strongly typed functional programming to the web. I think it's the future tbh - the same kind of step up over typescript and Redux as those were over angular and ES5.
&gt; FP is unrelated to the language you use. "Any sufficiently complicated C or Fortran program contains an ad-hoc, informally-specified, bug-ridden, slow implementation of half of Common Lisp."
Could someone please explain why it doesn't compile straight to \`var meRm = expressEmotion(yell(upper('hell yes')));\`?
Having worked with all three, I'm also using react exclusively nowadays. Although not Facebook's react, but preact, since it's way lighter and faster than react, while offering pretty much the same functionality. My take on the three, in case anybody is interested: **React**: a minimal VDOM library, not a framework. Can be used in conjunction with basically any other library/framework you want to use it with. Provides a very intuitive and lightweight VDOM model. My main pain point with it is its abstraction far away from the real DOM, since it's trying to allow for other outputs/renderers aside of the browser/DOM too. If you don't need that, it's useless and costly overhead. Using preact fixed this for me, since preact is meant only for use with the DOM, so it throws away all the overhead that react introduces. **Vue**: a very opinionated VDOM library, with framework-like addons. If you like its style of organizing code, then go for it. It's a great tool with a very dedicated developer behind. It offers a lot of features and integrations out of the box, but is still very flexible. **Angular**: a monolithic framework that also brings its own VDOM implementation. I really disliked pretty much anything about it, so I'm not the right person to argue in favor of it. It's big, it's super opinionated, it's complex. If you're working on a web app similiar to YouTube or GMail, then Angular might be a fitting tool. For smaller projects though, I'd not use it anymore. &amp;#x200B;
Could someone explain why this doesn't compile straight to this: var meRm = expressEmotion(yell(upper('hell yes'))); &amp;#x200B;
Remember though: Still **Stage 1** and with syntax detail still unsettled and various different proposals and variations being discussed.
Bit buggy but a nice tool
Keep your eye on [https://github.com/Polymer/lit-html](https://github.com/Polymer/lit-html)
I ended up making the class a default export and doing this: import HttpCaller from './httpCaller'; It works now. Weird anomaly! You can view my code if you like on Github. Its not pretty right now but its a start: [https://github.com/psotos/pubonjs](https://github.com/psotos/pubonjs)
Umbi irikkunn 
Umbi irikkunn 
You're most welcome!
u/ArtfulAusten what I'd do is first learn how it works without using any frameworks. Why? Because that way, you'll have a true understanding of the workflow. And, you'll understand what problems these frameworks actually solve. PM with your project and I'll help you get started.
 Keen is a solid option for event tracking and attribution, but agreed that it can get quite pricey, quite quickly. Other options I‚Äôd check out are: [Mixpanel](https://mixpanel.com/) for A/B testing and event tracking [Appsee](https://www.appsee.com/?cpnid=7010N000000hdsE) for UX analytics via touch heatmaps and user recordings [Localytics](https://www.localytics.com/) for uninstall tracking 
You have summarized nicely. (I don't even want to talk about Angular) JSX is another plus for React/Preact. With preact-compat all react libs can be used with preact. I've my own very illogical reason to use react over preact. 
I am currently learning ReactJS, and my idea was to create a Checkers game. Maybe it helps someone with an idea.
You have summarized nicely. (I don't even want to talk about Angular) JSX is another plus for React/Preact. With preact-compat all react libs can be used with preact. I've my own very illogical reason to use react over preact. 
When I've hired developers to collaborate on projects with, the most important thing was "style". What I mean by that is I'd look out for how the dev thinks. Do they have a thought process or are they just copying from SO? Personally, I've always preferred devs who are not perfect but are creative. Devs who solve problems and understand that each project has it's own challenges. In other words, they face problems head on. Bigger companies probably do things differently.
react 
Definitely all fair points. I totally agree that there are circumstances where using something else (in the examples you mentioned and others) it makes sense. In my experience, however, that isn't the case. I see many people rushing to npm before even bothering to see what the native capabilities are and that is a bit troubling.
Post a link to your repo or send me a PM. Every company has different criteria but mostly they want to see if you know what you're doing. Other things that have varying impact: - your habits - such as commenting, how you name variables - what concepts you implement for example, OOP, - how much effort you put into your code. Depending on a company, even spaghetti code may not make you look bad. The most crucial thing is, in my view, your grasp of what you're doing. And, whether you have a good foundation on which you can build on. I think good companies are looking for people who can learn and grow quickly rather than perfect developers. Of course, it all depends on what they need at the time but it's my overall experience.
Nice job! Learning by teaching is the best way in my opinion. Do you plan on adding flex properties like align-items, align-content, flex-wrap, flex-direction/flow and maybe even some flex child properties (flex-grow/shrink, align-items, etc)? 
In Node you can just require a JSON file and it will be returned correctly. You don't need to use fs. 
That‚Äôs pretty cool. Didn‚Äôt know about that. 
Really enjoyed reading this, thank you for the writeup!
Thanks for sharing, will come in handy.
It also works. It will defer to the native implementation when possible and emulate the API otherwise, that's what polyfills do. Contrast it with ponyfills that always emulate to ensure a consistent behavior in the face of an implementation discrepancies between the native code and the emulation.
That's a calculated choice on the part of the TS devs. They're not going to provide support for a bunch of stage 0 proposals that are more subject to change or be rejected. If you want access to these bleeding edge features you can just use TypeScript via Babel.
&gt; Post a link to your repo or send me a PM. Only decent project I have up on github is a lua one that isn't too relevant, others are of less value(eg some php test for a role I didn't land). I'll keep you in mind for my web project I'll be tackling this month, so perhaps you could provide feedback next month about it? :) Thanks for those tips, I'll hopefully demonstrate them well as I build a portfolio over the next few months. &gt; I think good companies are looking for people who can learn and grow quickly rather than perfect developers. Of course, it all depends on what they need at the time but it's my overall experience. Well I'm pretty sure I've done that a few times, but it's not web dev related(embedded C, python, rust, lua) but anything that was for a startup and proved valuable to them, I'm not able to publish, so it's mostly just my word. I do have a lua project which took a bit of time but it's very specific/niche(game mod). It was very well received in it's community and the code was in good shape there, I just don't see it giving me much help with jobs in web dev, it should demonstrate good code quality, maintaining, collaborating, etc(generic github project stuff) for the 2 years I maintained it. 
Ah yep, well I'd be the type of dev you'd like in that case, although I've had some strong disagreements with past employers(with valid reasons to back up why) as well as concern for security or quality where they insisted on speed(which I can I understand and I am ok with under some circumstances depending on project).
There seems to be more to it than just that. According to Paul Thurrott "Microsoft is briefing people about a pending announcement this week". 
[https://www.pluralsight.com/paths/javascript](https://www.pluralsight.com/paths/javascript)
That's pretty damning evidence. "Microsoft is bri**E**fing people about a pen**D**in**G** announc**E**ment this week".
Take a look at /u/wesbos course - www.javascript30.com Some of the concepts may be new if you‚Äôre just starting but you can follow along. He‚Äôs also looking at creating a beginners JS course, so it might be worth keeping your eyes out for that. 
Thank you, that was pretty well exactly what I was looking for.
Keep in mind that the points I made are a starting point. So within 3 - 6 months there'd have to be major progress.
Glad I could help. His courses are excellent. Enjoy!
This is great too! Thank you sm
This is actually such a cool idea, I looked at the scss, is a majority of styling done with bootstrap? 
Not quite what you're asking for, but you can use Prettier together with ESLint using [the instructions on the Prettier website.](https://prettier.io/docs/en/eslint.html) Now when you run `eslint file.js --fix` it fixes linting issues and formats for Prettier.
Yep &gt; Free responsive design blocks based on Bootstrap 4.
&gt; So within 3 - 6 months there'd have to be major progress. 3-6 months since hiring? Major progress in what sense?
I started using LESS with create-react-app without ejecting. I'd like your feedback for my blog post and repo. Using LESS With Create-React-App Without Ejecting &amp;#x200B; Thanks. [https://github.com/malithmcr/cra-with-less](https://github.com/malithmcr/cra-with-less) &amp;#x200B; [http://blog.malith.pro/using-less-with-create-react-app-without-ejecting-%F0%9F%A4%90/](http://blog.malith.pro/using-less-with-create-react-app-without-ejecting-%F0%9F%A4%90/)
In the sense that you don't want to be at the same spot after that period of time. For instance, you are expected to schedule a couple of hours (paid ) every week. These hours were for learning at least one new thing. No matter how small. Then, you'd have to write what you've learnt in an email by the end of the week. You choose what you want to learn - but learn something. When you apply what you learn you make progress. You do it consistently, you make major progress. Result? In 3 - 6 months time you're way better than when you started.
Hi /u/st3dy, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
I can‚Äôt speak to personal experience with the Lynda course and I don‚Äôt know if it teaches ES6 syntax. But in my experience I think that anywhere you start is a good place. The majority of your learning isn‚Äôt going to come from an online course, book or bootcamp. You will learn almost all you know as a Dev from constant practice after you learn a technology. As far as the actual stack goes I think the MERN stack is a great place to start (as a MERN dev I may be a little biased though). The most important part is starting and not stopping. 
What about a window manager does Vue fail at where React would shine? 
&gt; I don‚Äôt think that sharing a single UI between disparate platforms is desirable from any perspective that isn‚Äôt cost savings Doesn't allow you to still tailor the UI/UX to each platform when you want to, but for common elements/components, you get consistency where possible? Rather than having to know how to build/write UI/apps for each platform each with their own differences, rewriting shared logic(different languages) and UI across platforms? Better for maintenance, devs can do a feature/component and move on rather than re-implement for each platform, devs can collaborate far better if you don't have a divide in languages they can develop in(or additional cost of sourcing devs that are capable in both), sure they're all ultimately cost savings, but I don't think that's a bad thing. &gt; Know these technical and usability problems even exist Part of evaluating technologies is being aware of key features you're after working. It's pretty clear that React-Native is providing some abstraction, so questions like this should be considered and investigated if things like accessibility are very important to your app/users? &gt; Implement a native bridge for posting accessibility notifications If support like that is missing, you could put the effort into implementing it, but then making it public for others to not have to? Either or, it'd be a one time thing that you should be able to re-use in other projects with React-Native? &gt; Most projects won‚Äôt even clear the first hurdle. Fair enough. &gt; Flex box as a layout idiom loves to have a hidden element to make stuff center properly. I thought RN collapses layout/empty views despite the nesting in markup? &gt; The React Native accessibility is missing a LOT of the native iOS accessibility API. I think it's much worse for Android... But there was [an update last August](https://facebook.github.io/react-native/blog/2018/08/13/react-native-accessibility-updates) that should be a good indicator that the devs care about improving Accessibility with RN? I assume as that support gets better so will things like the navigator. There is also [airbnb's native navigator](https://github.com/airbnb/native-navigation) which I think addresses the accessibility issues for a navigator, but if I'm not mistaken, they've since moved away from RN? So that project perhaps isn't going to get anymore love and reach 1.0 status? wix also released v2 of their RN navigator but that doesn't seem to have any mention about accessibility, there is [an issue about android](https://github.com/wix/react-native-navigation/issues/3984) that indicates it's probably not quite there yet..
It comes from Elixir, which is basically Erlang with better syntax, and currying isn't really a thing in Erlang like it is in Haskell. So data-last makes a ton of sense when you stick to the Haskell style of FP, but there really isn't a point to it if you come from an Erlang/Elixir background (and all of the proponents of the pipeline operator do). So all I can really say is try to make a project in Erlang/Elixir and see if you like it.
Oh, well I already do that regardless :) Would be nice to be paid while at it haha.
There‚Äôs a significant amount of value in FP principles apart from specific techniques like monads. React is FP in the large: it takes a previously stateful function and effectively makes it pure (ie no state). Before React, we mostly mutated the DOM directly, so that our view function `f(application-state) = ui` depended on the current state of the DOM. This dependency is ‚Äúinternal state‚Äù; it‚Äôs not clear from the function declaration that I need to think about it nor do I know how it affects the result. React changes it so our view function no longer has that internal state. And while Lisp is not a requirement for FP, many possibilities open up when everything, including code, is viewed as data instead of objects. A couple digestible but nontrivial examples: David Nolen wrote a [cool ClojureScript example](http://swannodette.github.io/2013/08/02/100000-processes) that approximates separate processes in the browser. Here‚Äôs a post I wrote [implementing `Promise.all` in ClojureScript](http://clojurescriptmadeeasy.com/blog/promises-with-core-async.html). Both rely on `core.async` which implements [communicating sequential processes (CSP)](https://en.m.wikipedia.org/wiki/Communicating_sequential_processes). One of the biggest benefits of FP is better state management. When you write FP, you realize how much state you carry around in your mind and how much it complicates reasoning. As you learn to hate the additional complexity, the value of FP tools/approaches becomes more apparent.
Yeah thats a great point, and it wouldn't be that hard to implement anyways since we're already using node for http/2. It wouldn't take a huge rewrite to transition over to using the http1 module
Probably not a great idea to read a Haskell textbook then try to apply it to JS. While there are plenty of people who use Haskell for real enterprise projects, it's certainly not the most practical language in the world. Your goal as a programmer should be: 1. To write declarative code 2. To write predictable and easily tested code 3. To solve generic problems then apply them to your specific case Achieving those goals in a functional programming paradigm is easy and natural. You can write the same quality code in OO and imperative languages, but it'll feel like you're going against the grain and the codebase will only get more chaotic as it grows. If you're interested in how functional programming is used in practical applications, [you can read up on Erlang](https://learnyousomeerlang.com/content). I don't think this book mentions monads, lifting, or functors at all. But again, no one's really writing Haskell-style FP in production. Or at least they shouldn't be, because that'd be ridiculous. Most functional programmers have adopted a more pragmatic, informal style.
&gt;streaming Coming soon! We're using electron to wrap for OS X so its already in the works.
You can use JSX with Vue as well. 
What are you looking to do with JavaScript? Full stack, front end, back end? You can learn vanilla js for sure but I would rather you start moving on into the direction you want because vanilla js is great, but not all there is.
How hard is it to convert a medium sized project from js to ts? It's a Create React App.
Can you elaborate on this: &gt;My main pain point with it is its abstraction far away from the real DOM, since it's trying to allow for other outputs/renderers aside of the browser/DOM too. If you don't need that, it's useless and costly overhead. Using preact fixed this for me, since preact is meant only for use with the DOM, so it throws away all the overhead that react introduces.
I think it's a matter of how deep down the rabbit hole you want to go. If you go deep you're bound to scare people off, so stick to the surface, if that's where you're comfortable. &amp;#x200B; \- Use pure functions cause they're testable. \- Control state so it's predictable. \- Curry and compose functions to make each function as useful as can be. &amp;#x200B; In regards to lenses, they don't have to follow a single path, so there's one difference. If that's all you do though, probably you won't see a difference so don't sweat it and keep using Ramda. Ramda's awesome. &amp;#x200B; I started with Ramda and then started to go deeper. I'm studying lenses, monads and the like but, atm, I get most of my value from Ramda and the points I listed above.
Yep, I used many Linda courses and can't say nothing bad. If you can get if for free - what are you waiting for?
&gt; Xhr wasn't all that bad. Xhr was dog shit back in the day. If I remember right you had to check for window.XMLHttpRequest and if that didn't exist it was a series of try/catch blocks for *various* ActiveXObjects depending on the versions of IE you were supporting.
I have to disagree. I know Python is appealing to beginners. Heck, I've even written a guide for beginners struggling with functions. But, I'd only recommend Python to people who don't want to be professional programmers. It's a great language if coding is just a side task in your main job. Otherwise, it's much better to choose a specific domain and learn the languages that will help you there.
It definitely takes some work. Fortunately, depending on how you've written your JS, a lot of time the types can be inferred. Some will say that because its a superset of JS that you can do it incrementally, but its difficult to do incrementally within a single project. I'd recommend pulling things into packages and converting those until you're comfortable with it.
Wow, thank you for the thorough reply. I‚Äôve been building portfolio websites with WordPress for 3 years (yes, yes, I know), I have a solid understanding of JavaScript, but I really want to take it to the next level. It sounds like I need to dive in ‚Äî I‚Äôm not sure if I‚Äôm even diving in the right direction.
Ah yes! I completely forgot about it. 
&gt; fetch is also not supported on the backend with node It's not?? I thought Node was fine with fetch... Pretty sure I've used fetch with Node.
It evaluates in a different order.
&gt; it was a series of try/catch blocks for various ActiveXObjects depending on the versions of IE you were supporting Lord... never had to deal with that. That does sound awful.
The semester to end. üòÖüëç
Hi Guys! I know that i'm in r/javascript put I've just develop a simple tool to easily schedule backup for any web app. Hope it will be helpful! 
I'm probably no good at advising correct direction :) I have been distracted so much over the years diving down many directions that didn't amount to much(many of which were reading lots and expressing similar thoughts that you have, then something new had come along or a tech choice updated making it drag on..). Hence the advice to add a time constraint and output something sooner. Breaking a project down especially with lots of new stuff to learn has helped a lot too. Goodluck :) 
So imagine I was going to write you instructions how how to paint a fence, but before I could write these instructions I needed a fence, and paint, and paint brushes. This is what data first is. Being able to define your behavior without your data allows you to write more modular, more testable, and more predictable code. Imagine your behavior as being a black box that you feed your data into and get back the result. Then compare this to feeding a black box to your data, or putting the two together in a blender and somehow getting a result back. Data last simply doesn't make any sense, nor does it provide any benefit. 
I wrote this blog as I wanted to get an understanding of how Redux might work when hooks are fully released. I learned a lot by starting with the most basic solution and incrementally adding features until I had something that had async actions, middleware, and a way to partially subscribe to the store to avoid unnecessary renders (like `connect`). It‚Äôs quite a long blog post but IMO worth a read if you‚Äôre curious about how Redux works. Hope you guys find this useful and interesting as I did.
Then node-fetch wouldn't be necessary and there wouldn't be a github issue about fetch support being made native in node? 
That‚Äôs exactly what I needed to hear. Thanks again!
Well.. I'm delirious. You're right.
Not the OP, but where would you go for game development?
If you want to do front end web development, Freecodecamp.com is what I would suggest. It takes much more time than codeacademy, and really helps you learn through writing. It doesn't hold your hand as much as codeacademy which can be frustrating, but it helps prepare you for real dev work which ends up being a lot of googling. Codewars is great for practicing efficient functions but I'd recommend learning how to build crappy little projects first (freecodecamp will help with this), and then refining your skills from there. 
As with any language, it's not a case of using all of it, it's a case of knowing the bits you need to use, and what they're good for. The key practical benefits I get from using FP are: - less code duplication since you break up code into re-usable concepts - easier to refactor - it's easier to amend or update compose/pipe chains than an imperative shaggy dog story - discourages coupling - easier to test - more portable, pure functions don't get embedded in local scope
Now that's a fair point
Could be many things. Firstly I‚Äôd check to see what kind of plugins or add-ons you have going on in your browser. Secondly, do a virus scan, you may have some processes running in the background.
Most of the free sites teaches you the basics but if you're planning on mastering JS, you would require a well structured platform and a mentor who can guide you all along. Even if you're planning on learning JS related framework, libraries or tools it might be challenging if you haven't mastered JavaScript. 
In the first example, couldn't you just define: const mapToLower = x =&gt; map(x, s =&gt; s.toLower()) 
I recommend Javascript understanding the weird parts: [https://www.youtube.com/watch?v=Bv\_5Zv5c-Ts](https://www.youtube.com/watch?v=Bv_5Zv5c-Ts) &amp;#x200B; This focuses on the fundamental concepts of javascript. &amp;#x200B; &amp;#x200B; &amp;#x200B;
The very weird way &lt;component&gt; is handeled by Vue, wheres React can just display any pre-rendered JSX.Element or array thereof in any context, like directly as return of the render() method or within some wrapping elements. With Vue, I had to define wrapper components around my content, which made handling props very awkward and cumbersome. With React, I can simply render any combination of JSX.Elements and display whereever I want.
React is split into multiple packages, mostly \`react\` and \`react-dom\` for the browser environment. This adds a necessary abstraction, which preact is missing, since it's a single 3kb module that is designed to run in a browser environment by applying its VDOM to the browser's DOM directly without an intermediate abstraction.
It should be, but only for that session. The user can still navigate backward and forward. 
Thank you!:D
Until async/await is handled I wouldn't touch this.
Not sure what your skill level is, but https://phaser.io/ is a wonderful javascript game framework.
It probably has less to do with Javascript and more to do with DOM/Window manipulation. Is your CPU old? If you open task manager do you have any processes taking up a ton of CPU? Harddrive is almost certainly not the issue. Theres kind of a lot of ways this could happen. What kind of phone do you have?
No it doesn't, it evaluates in that order but i'm assuming they are using variables to hold the returns for when async/await is included in the spec.
Lol. Thanks for the submissions guys!
that's like the only kind of makefile i actually *can* do myself.
So, partial application disguised as currying? The answer is yes you could do that, but again that wasn't the point of the example. It was to show how you can use a curried function to create a new function that you can then apply to different data, because the data is the last argument. The curried functions with data last makes composing a bunch of functions together feel natural **(in my opinion)**, without having to monkey around with things like your example and use partial application or something else to try and make a function fit in. I'll stress this again though, it's a personal preference they both accomplish the same thing, some people just like it the curried data last way some people the data first regular(?) application method. Yes, my example sucked, but this is one of the concepts I struggled to get for a while and still (obviously) struggle to fully explain to someone. In my defense though I was (still am) bored on my phone at 7 this morning, and coming up with an actual code sample demonstrating the concept that isn't trivial, and wouldn't take me several hours to put together, AND would also be digestable enough for someone to read isn't really worth the time. I just thought I'd throw the a basic example of a use case to see why functional weirdos (like me) appreciate the data last method.
Cause you can read it and understand what is actually happening 
&gt;Side note: ‚ÄúHindsight is 20/20‚Äù is a strange expression since 20/20 vision really isn‚Äôt that good. It‚Äôs adequate vision. So it would translate as ‚ÄúHindsight is reasonable‚Äù. No it isn‚Äôt. Hindsight is perfect. The 20/20 part makes zero sense. I was about to get really angry at this level of autism until I saw the paragraph following it: &gt;If that side note tired you, imagine being me. This my brain every second of the day, spending compute cycles on useless shit. At least he kind of apologizes.
I am also looking for Sails.js beginners out-of-the-box guide for testing, similar to Laravel doc here - https://laravel.com/docs/5.7/testing - sails.js only has this - https://sailsjs.com/documentation/concepts/testing - but this is greatly lacking. It makes clear that boilerplate is needed but I can't get that boilerplate to do: * Before running each test file, it should clean everything to as if it was just `sails.lift()`ed and `bootstrap` run * Use `Cloud` SDK in tests Does anyone have any super beginners guide for testing in Sails.js?
yeah idk i guess it would be useful if you wanted to save some time making it. I dont expect this website to be used by a lot of people, if any. It was just a fun project for learning html/js.
This guy gets it. Haskell isn't functional programming, Haskell is Haskell. Because it has a very functional design/focus, you can learn a lot about functional programming by learning Haskell, just as you can learn a lot about OOP from learning Java. But you can't you can't make protected properties/methods in Javascript, or even private ones really. You can't create interfaces, or generics. But you can apply the ideas. You can make terrible but literal privates, or you can make foo._bar privates. You can't make interfaces, but you can use the basic pattern of consistent methods across multiple classes and define the "interface" in JSDoc. Or you can use Typescript. And of course you *can* make a class hierarchy, albeit a prototype-based one rather than a classical inheritance one. Functional programming is the same way. You can't use monads (well) in Javascript because they're JS wasn't designed to have them. There's lots of other functional stuff in Haskell or other functional languages that you can''m still getting through "Learn You a Haskell for Great Good!" myself and I'm no expert). But that doesn't mean there aren't still lots of functional concepts that can be applied in JS, as Hefticus detailed. It just means you can't apply everything Haskell (or Java, or any language) to Javascript just because there are design/philosophy overlaps between the two.
Start making things. You'll learn vastly more by running into problems, figuring specific things out, etc, than you do by reading. Especially if you're new to coding.
Looks good, keep it up! :)
Thank you!
Don't worry, I'll still use it, i hate writing makefiles, even simple ones! Thanks
udemy has a great selection of javascript courses for cheap prices. But the best thing you can do is just get creating and working. Take it slow and make sure you understand the basics. Create simple apps and remember that it can always be improved or optimized. Take a look at different frameworks and libraries (React, Angular, Vue). I'd take a look at node.js as well. In all honesty you'll never feel like you've mastered it. JavaScript is huge and powerful, and there is always new things to learn. Just immerse yourself in as many different things related to JS as you can. One thing that worked for me was getting the "medium" app, they always have great articles on JS topics that are quick and easy reads. Follow what interests you and be constantly curious about new topics :) 
JS doesn't have monadic do-notation, or applicative-do etc., so these kinds of concepts are a lot more painful in JS. I think that naively porting Haskell concepts into javascript is a waste of time. That said, by working with what javascript does give you, you can make some pretty neat programs. ADTs are ugly in javascript, but you can represent an ADT type by a fold over it easily (Church representation): for an example, see [my post on LR parsing](https://jasonhpriestley.com/lr), the grammar type is represented as a fold. ES6 generators are another way to encode some advanced FP stuff in javascript, for example you can implement parsec style parser combinators or other unusual control flow. They're not quite as general as Monads unfortunately, but I've found several interesting uses for them that don't require excessive boilerplate.
13 day old account. Has literally only spammed these.
Thank you! Im an absolute beginner and currently use RMMV to make my games and it uses JS but this website looks awesome
I just bought the course on udemy! I‚Äôll be watching it after my beginners course in JS. 
Watch and Code. Practical JavaScript is free. Give it a shot! 
Sounds great! If that is in place, I‚Äôll switch in a heath beat after it comes out for windows!
Start with projects you want to build, and work down from there
https://blogs.windows.com/windowsexperience/2018/12/06/microsoft-edge-making-the-web-better-through-more-open-source-collaboration/
Nothing specifically relating to JavaScript in this article.
&gt; real dev work which ends up being a lot of googling This is what I try to stress to anyone that‚Äôs new to programming, don‚Äôt feel ashamed/stupid because you constantly have to google how to do something, everyone, no matter the experience level, is doing it **literally all the time**. I‚Äôve been programming (‚Äúprofessionally‚Äù) for about 4-5 years, and as a hobby a little longer, and the amount of most basic shit I google on a daily basis never ceases to amaze me. The few times I decide to reach for a switch statement in JS always result in me googling ‚ÄúJS switch‚Äù and opening the first MDN article because I can‚Äôt remember the syntax. Hell, just this morning I was working on something in Ruby and had to look up how to strip the first `n` characters off a string, and basic string manipulation like that is one of the first things most people learn. Don‚Äôt be afraid to google anything, no matter how stupid it may be. The fact that you can‚Äôt remember it/don‚Äôt know how to do it doesn‚Äôt mean you suck at programming. However, there is a right way to google everything, and a wrong way. The wrong way being just copy and pasting stuff until it works, and then moving on (unless it‚Äôs literally basic syntax you‚Äôre just blanking on ‚Äî in that case just copy away). The key to becoming a good programming is taking the time instead to look at several different sources, and not just the first SO post, and try to understand why the thing you found on google works. And even after trying to do that, sometimes you still may not get it, and that‚Äôs fine too! So many times have I found something that worked, had no idea why, but moved on and a while later find myself googling the same/similar thing and then on the second (or third, fourth, etc...) time around having an ‚ÄúOh shit, I get it now‚Äù moment. Programming is weird, it‚Äôs almost all entirely abstract ideas that people try to shoe horn into real world concepts which may only very slightly be similar. Nobody understands everything, but all the good programmers I‚Äôve met have all shared the same quality of having a strong desire to try to understand, and not giving up until trying something until they either get it, or find yet another thing they need to understand that takes the focus. Which brings me to my final point, the only way I‚Äôve had success with this is by never stopping tinkering around, make weird probably useless things, read new ways of doing something, and pretty much always googling. So, while codeacademy and codewars are nice for learning and practicing the basics, they won‚Äôt teach you the key skill of how to figure out how solve problems on your own through an abstract mechanism, that maybe nobody has the cut-and-paste solution for. The only way to get that, and become a software dev/programmer and ascend from the ranks of just a code monkey is to just build something, and then something else, and something else, then maybe try the old thing again, and eventually it‚Äôll get easier. But, you‚Äôll still be googling shit like how to concat two strings together, and that‚Äôs fine.
I think the author misses the mark when it comes to the effect browser engine competition has on speed. Yes, the major engines are currently similar in performance, but that‚Äôs because there was essentially a JavaScript performance arms race for years that has now mostly stabilized. Without competition, engine developers have little incentive to continue heavily optimizing engine performance when new features are introduced. After all, who‚Äôs going to benchmark their work when there‚Äôs nothing to compare it against? Users will suffer as a result.
Indeed. I think OP just considers /r/javascript his home and didn't bother to find a more appropriate subreddit.
Wait are there Babel plugins for Typescript now? For example do they build a separate plugin that transforms syntax such as optional chaining for ES but for TS as well?
Check out thinkster.com.
When I saw the headline my first thought was, *why*? Then I looked at the actual article and realized the headline did a terrible job of selling it. You're not trying to create your own crappy version of Redux (what the headline sounded like), you're trying to understand Redux while re-inventing it. I still think a much better idea would have been to use Redux's actual code, as "teaching" Redux's implementation with your own, non-Redux code is a bit like adding your abstraction layer when you don't need to. But maybe someone could triangulate between their current understanding, the actual Redux code, and your Redux-like code, to learn something. 
It was said in a discussion regarding this exact topic. And as you can see he was right... https://www.thurrott.com/google/194556/microsoft-confirms-it-will-adopt-chromium-for-microsoft-edge#
I'm new to this stuff, but wtf is a main file?
It‚Äôs very niche, but a wonderful place to learn game development is in the roguelike community. We have a pretty dedicated discord and subreddit. I myself am making this game https://github.com/Larkenx/Rotten-Soup which uses PIXI (what phaser uses the under the hood or at least used to). I don‚Äôt think phaser is super beginner friendly despite there being a lot of examples on their website. Something like rot.js is super easy to learn - it‚Äôs what I started building my game with at first 
I guess this is on the motivational side? As an adult, you won't get too far leaning programing if your goal is... to be able to program. Could you get into back-end development with flask then?
&gt; Really? I don't get the point of linking to your github account if you don't have anything to show there. That is the point, if you don't have anything in github, don't link it. As an interviewer, I get excited when I see a link to github, then totally let down when there is only the standard github tutorial stuff. I'm always like, "Why the F would someone put this on there?!" &gt; Does your activity on it matter much? What are some of the things you look for when the resumes actually have stuff on their github accounts? I'll answer these two questions together. This turned out much longer than I expected, sorry no TL;DR. It really depends on what you're interviewing for. I have interviewed many people for various companies I've worked for presently and in the past, I've been in the industry long before github existed. When given access to someone's github account, I am more interested in the candidate because they have released something they did for free for the public to see. Though this is not rare these days, it still kind of shows that this individual wants to have people examine what they've worked on, which means in a multi-developer situation they're more likely to accept constructive criticism. Though this is not always true, I did hire a junior one time who turned out to be extremely stubborn and took any attempt at constructive criticism as a personal insult to his over inflated ego, he one time said to me, "Well ack-tually, I have like 20 years of experience, because I've been coding since I was a kid." I replied, "HR doesn't doesn't give a fuck about your pre-college experience, a bachelor's degree is worth +4 years of experience, plus what you've got on your resume so that's 6." Personally in my github I have a bunch of repos of free stuff, all of which pretty much no one cares about at all, which is okay. I use my github to show off some code to potential employers, I also use it to show off my ability to write g'damn documentation... which few people bother doing. I also like having my stuff in github for my home lab so I can easily clone tools I've written for whatever I'm working on. On a resume I'd like to see previous employers with minor descriptions of projects and/or technologies you've used. I'm not extremely focused on how long you were at a company. DM me and I'll link you my github.
Makefile* In C++, a makefile is a file that automates code compiling. To run code in c++, you normally have to do something like: g++ -c example.cpp g++ example.o -o output ./output When you have a makefile coded and in the directory of the project files, all you have to do is: make ./output So when you are compiling a project 100s of times, a makefile speeds up the process. Select the first option on my website and fill in the box with ‚Äúexample.cpp‚Äù to see what it looks like. 
Yes hindsight is always 20/20, my point was 9 commits were made to a repo last month and people went apeshit with the story.
I learned JavaScript mostly from this free online book https://eloquentjavascript.net. It‚Äôs been a while since I‚Äôve checked it out but it‚Äôs a lot of fun. One of the chapters involves building a platforms game in pure JS which is pretty cool! 
Find the method by which you learn most effectively, then follow that route. If you learn best from reading books, read Eloquent JavaScript, then the You Don't Know JS series. After finishing Eloquent JS though also build stuff using Node, Express and React by following docs and tutorials. If you learn best from interactive courses, follow the FreeCodeCamp curriculum and supplement your learning by creating and building out your own projects (following docs, MDN, etc) If you learn best from video courses, do Andrew Mead's Modern JS course on Udemy, then follow up with various recommended web dev courses such as Stephen Grider's React courses, Wes Bos' free javascript30 course, maybe his paid courses if you can afford them, or Traversy Media courses. Find instructors whose style you learn from most easily. But also, like the other routes, supplement your learning by building your own projects. Important common denominator there is build your own projects. Once you get past the initial wall of not knowing how to actually scaffold and create an app, building your own projects and traversing documentation is how most of your learning is done. All the tutorials and courses only cover surface level topics or generalized use cases. 
I could change the title. The blog isn‚Äôt meant to teach Redux specifically, more just helping out those who may be unsure what the internals of *any* state management library might look like by showing an example of how one is made. The implication from your comment that the end result is a crappy version of Redux is a bit unfair IMO. Redux doesn‚Äôt have it‚Äôs own hook (yet) and I‚Äôve also used hooks internally to greatly reduce the amount of code necessary. Furthermore the final result is a mere 2kb and has all the features necessary to be used in some production apps where a large, complicated state management solution isn‚Äôt necessary (think unstated, but with hooks).
Affiliate advertising.
Summary found on JS subreddit: https://blog.indorse.io/popular-coding-challenge-websites-5e330d3bd353 You‚Äôll find a lot of medium posts like this, just an example. 
Except... They are. https://www.thurrott.com/google/194556/microsoft-confirms-it-will-adopt-chromium-for-microsoft-edge# 
Yes hindsight is always 20/20, my point was 9 commits were made to a repo last month and people went apeshit with the story.
https://store.steampowered.com/app/464350/Screeps/
jsforcats.com
What does PKG do that npm doesn‚Äôt?
Omg yes, I used to be held back so much by thinking I shouldn't have to google the basics. Now I forget the basics all the time and it's no problem! Just takes a second to google to be reminded. You can't remember everything, so just use the internet as a secondary memory bank!
Instead of just putting a string of text for radiobutton labels, use the `&lt;label&gt;` tag. Make sure to include the `for` attribute. The first thing I did was click on the labels which should select that radio button if the for attribute is there.
Ok. Yeah I did the radio buttons before I discovered what labels were lol. I used labels for my other inputs so I‚Äôll have to fix the radio buttons. Thanks!
Yes. They. Are. https://blogs.windows.com/windowsexperience/2018/12/06/microsoft-edge-making-the-web-better-through-more-open-source-collaboration/
Did it hurt when you fell from heaven you f\*\*\*ing angel person! Bookmarked even faster than /u/Extracted (sucker)
Got another one for you. The `type` attribute of submit buttons should be `submit` that way when you press enter in the form, it will be the same as clicking the submit button. I'm looking over your actual code right now.
Oh cool. I was wondering why the enter key wouldn‚Äôt work. 
Haha, you wrote a book there, but I completely agree. This is good advice. The best thing to do is just to build cool/useless things, and google the shit out of the stuff you don‚Äôt know. I usually have like 20 tabs open when I‚Äôm trying to wrap my head around a concept. It‚Äôs just part of the game. But one other thing I strongly recommend is to type out (not copy/paste), line by line, somebody else‚Äôs working code, and make it work for yourself. It really helps you break down all the little details into a logical concept. A month from then you might not remember some of those details, but you will remember the basic concept, and you‚Äôll know exactly what search terms to use in google to look it up. And then you‚Äôll be back to coding instead of scratching your head.
I can‚Äôt accurately express my total disdain for the fantasy land stuff. The concepts are all well and good, but they present it as some walled garden only approachable by programming savants. It‚Äôs complete crap that makes people like you question the applicability to useful everyday development. A few colleagues and I, all with more than a decade of development experience, 5+ years of professional Clojure development, hate the fantasy land levels that came out. We‚Äôve built large, complicated systems without using much of what they say is required. There are huge improvements to be made well before requiring someone to be an expert in category theory. 
To add to the other answers, promises can be considered monads and are very useful in web development. If you're interested in functional programming and web development, I highly recommend ReasonML. I had tried getting into Haskell before, but it wasn't until I tried Reason that I really began to understand the practical application of FP. 
I think it depends in the details of how these strings are built, and what they‚Äôre used for tbh.
the-complete-javascript-course by jonas schmedtmann on Udemy was extremely helpful. He also gets into object-oriented JS sooner than later, and as a developer who learned OOJ later than sooner I was happy he did it this way. For reference, I'm a front-end developer who goes back to basics once in a while to strengthen my core-knowledge.
Yes hindsight is always 20/20, my point was 9 commits were made to a repo last month and people went apeshit with the story.
Seriously learn vanillajs before learning all of the foo foo frameworks. You wouldnt believe how many people i interview want to show their answers in jsx(react) vs plain old javascript. I know there will be people that say that there is nothing wrong with that. But believe me, knowing how everything works underneath the hood of all the syntactic sugar will take you very far. Also, i advise into inderstanding both Object oriented programming as well as functional programming. Those are the two common paradigm used. That way you understand when people throw around lingo such as: curried functions, function composition, pipe, inheritance, single responsibility principle, etc. Please understand concept of promises! Very very important that you know this! (I know this is way too advanced but try to understand the concepts of monads.psst a promise is a type of monad. ) and why you would prefer promises over callbacks. Please read the promise A+ specification. Learn the difference between synchronise and asynchronous programming. Very important becauce your error handling is dependent on this. I.e trying to wrap future code in a try catch is a no no.... unless your using async/ await (pauses execution) Also, read code! Go on github and go through the source code of projects (angular, react, ember). I promise you that youre going to be reading more code than writing. The more you read the more you'll start to see the common patterns and solutions to everyday problems. And please understand the problems each framework is trying to solve. Dont say you use react because facebook made it. But most importantly, do not fall for the imposter syndrome. Where you think everyone knows everything and you dont and its only a matter of time before they find that out. Stop it. Its bs. Anyone can become a js dev does not mean everyone is a good js dev. Its going to take A LOT of time to be javascript ninja. Gl! 
My opinion is that if you have the strongest working knowledge of Javascript (vanilla) as you can you more easily understand how frameworks are doing things. You'll also find yourself finding shortcuts that can be contributed to the main library if good enough! &amp;#x200B; Keep at it, and good luck!
That's really sweet
In that _specific_ instance it doesn't matter, but if the functions aren't pure then it absolutely does.
Absolutely! TC39 is just having the various proposals (minimal, smart, F#) be implemented in Babel so they can gather feedback. Pipeline _as a whole_ is stage 1, the smart pipeline (the one I linked to) is stage 0.
package name being "Premium" or "starter"? or is it the entire line?
Is it always space separated like that? Because if it is, you could use something like this: \ \-\ ([A-z0-9\ ]*)\ \-\ 
forgot escaping, it should be \\ \\- \\ ([A-z0-9\ ]*)\\ \\- \\ 
You could use the lookahead operator. This is what I came up with but there may be a better/cleaner way: `\ \-([A-Za-z\ ]+)\-\ (?=\d+\/\d+\/\d+)` [https://regex101.com/r/hWYbbg/1](https://regex101.com/r/hWYbbg/1)
Plagiarized from https://codepen.io/nelsonr/pen/KrGYvM
I think you could do something along the lines of `/.*?\s*?-\s*?(some package)\s*?-\s*?.*?$/` With this, you would be getting whatever is in between the last 2 hyphens on a line, with whatever whitespace in between the package and the hyphens. I am no expert in regexps but i would give that a try.
 - ([\w ]+) - \d{1,2}/\d{1,2}/\d{2,4}$ Should only match the last instance as long as the next pattern is always a date, and won't match any other dates that might show up in the middle. At least works with your example?
It's not always "package", so it has to be everything between the dashes.
Just invest more time and don't post semi started projects.. 
Lol it was a 1-2 hour thing, it's functional. Younger a Q you choose an answer. My goal is not to have a shippable product here. 
I can't say for certain, but if you're running into performance issues the difference between indexof or includes and push or appending isn't going to make or break you - I doubt they have any performance difference. I would look at the data structure you are using first. If you really wanted to though you could time what is fastest. [https://stackoverflow.com/questions/313893/how-to-measure-time-taken-by-a-function-to-execute](https://stackoverflow.com/questions/313893/how-to-measure-time-taken-by-a-function-to-execute)
Yes, you could - that's still Python. But, if that's your goal, I'd recommend Node JS or PHP 7 any day. My point is, there are things that attract beginners to Python. For instance, the apparent pleasant syntax. As you said, in the data science community, that's a powerful tool. Again, if that's your goal go for it. Being an adult has nothing to do with it. The biggest challenge adults have is thinking that they will find it harder to learn. That's true only because they believe it's true. It's like getting into a fight expecting to lose. 
Adding +1 to Wesbos, this is seriously the best class I have encountered. In fact follow that, understand and practice it and you will be in the top percentile for quality programmers because you will be using best practice, clean code and have cut through shit most of us take so long to get rid off. 
 - ([\w ]+) - \d{1,2}/\d{1,2}/\d{2,4}$ This has worked in Google Sheets where I tested it. But I'm building a dashboard in Google Data Studio where it throws a syntax error "Syntax error: Illegal escape sequence: \w." Can't figure out why, but I'll just do the edit right in the sheet. 
&gt; With React you have some of the logic inside the HTML, which I dislike. I never understood how templates don‚Äôt count as logic in the HTML. I mean there is conditionals, loops and all sorts of logic. The only difference is that all of the variables and instance objects are implicit.
I'll definitely check that out but you think even if you're dealing with 30k lines of Json that the differences between them won't make that big of a difference? I saw something online that in chrome it takes 0.4ms to execute .push and in IE8 it's 21.7. I would assume 30k lines would do a bit of damage for performance. I need to build for IE as I work for the government. 
Freecodecamp is a nice start id recommend.
Because you define swapped inside the do block, then later use ¬´swapped¬ª outside of the block. Not a problem with var, because var hoists variables, so it is available everywhere in that function. With let however, you have traditional scopes without hoistinf, which means you‚Äôll have to define ¬´swapped¬ª before the ¬´do {¬´ line to make it work.
you should build something. pick a project no matter how small &amp; see if you can get it working, then build on it or pick something bigger. only way to learn is by doing 
If you want to practice puzzles try codewars.com you can select the level of difficulty so it should be great for building your confidence
You should not compete to be better than others. You should compete to be better than your prior self.
ahh okay, thank you for the help ! Much appreciated :D
It's often worth engaging with the source of your data to see if any processing can be done server-side for such things, so it can be delivered to you in a way that makes it easy for your app to consume. That's not always possible, but it almost never hurts to ask. Plus, you get to see if you can make some other team do your work for you!
To me, its how Vue and Angular handles loops and conditions. In Angular you use `&lt;element *NgIf="this.value" /&gt;`. Something similar in React is `&lt;div&gt;{this.value ? &lt;element&gt; : null}&lt;/div&gt;`. Maybe was a bit inappropriate to use the word logic, but rather the syntax itself
Yeah, my thought after the reply was also maybe you should look into server side rendering.
It depends on the size of the project. A big project would load faster because of the minification and other build properties. A smaller project would benefit less from building in terms of speed
There‚Äôs a space right after `\w`, thats why you get a syntax error. My suggestion would be: `\s-\s([^-]+)\s-\s[^-]+$` if you‚Äôre not sure of the content pattern.
Just a bit off-topic but, why would somebody want to generate a makefile like that considering the fact that it's not hard to write a generic makefile for all your projects?
Use neither of indexof or include if you want performance on old browsers. In new browser, you need to check how indexof is implemented. If you have an ordering on your array, you can implement your own search on it. If not, and a more general solution is to, use a hash table to get the array index from the value. As for push vs array[array.length], the second can be faster for old browsers. However if you already know the size of the data you shall be pushing to the array, or an upper boundary to that size, then simply set array.length to that size or boundary. That should be the fastest.
Build something. Start small - see if you can build a dropdown menu or expandable panels. Personally I came across way more problems to solve while building something from scratch, as apposed to following along some generic todo-list tutorial. Jump into the documentation on https://devdocs.io/javascript/ and see what's available and what the API looks like. Once you start doing stuff (even if you fail) you'll start understanding. Good luck.
String manipulation in JS is stupid fast. I once tried to build something along the lines you are describing, but it was about 20% slower than just using a bunch of + operators. :P
Measure, adjust, measure again. Also data structures and algorithms before details like .indexof and .includes. 
I wrote it so quick from scratch in EditPad Lite, that I haven't had the chance to Github it yet. But yes, I will package the class and make a repo. If you want to follow this project, the only thing I can suggest, is to subscribe at the bottom of the page. It isn't technically a "list", and I rarely send messages, I'd hate to annoy people for no reason, but when something significant happens such as Github repo, or my next project: interactive CSS grid with flex editor for each grid cell, I will announce it there.
* You use `var` instead of `const` and `let`. * line 15, you create `brElement`. This represents 1 `&lt;br&gt;` element. On line 90, 96 and 108 you append the same element 3 times. This is not creating new `&lt;br&gt;` element. It's just moving it each time you append it. * line 19 you're getting value in a round-about way just do `e.value`. Also don't forget to cast it to a Number. All input values are strings. * `e` is a terrible variable name :P * always use `===` or `!==`. This checks for strictly equals (basically the same way it works in other languages) * You mix between `''` and `""` in the `removeOldDivs` function. * lines 25, 26, 27: `element`, `element2` and `element3` are awful names * lines 29, 31, 34: You're getting elements that you already got in the function, just do `element.remove()` * lines 28, 31, 34 you can just do `if (element) {` because `getElementById` always either returns the element itself (which is truthy) or `null` (which is falsey) * lines 175, 328, 335 instead of getting an element by id you can just do `document.body` * lines 89, 101, 129, 143, 156, 183, 191, 200 use `textContent` instead of `innerHTML` as this is more performant for the browser since these changes arent adding any HTML, just text * line 340 no need to re-find the `completeMakefile` element since you already have access to it from line 333 * instead of putting the onClick events in the html I would keep your Javascript with your Javascript and put eventListeners at the top of your page. Something like this: // &lt;input id="single" ... /&gt; document.querySelector("#single").addEventListener("click", grabRadioInput); * in `grabRadioInput` if you use `addEventListener` then you do not need to add `1`, `2`, `3` to the HTML, you can just use the value attribute. // &lt;input id="single" ... value="1" /&gt; function grabRadioInput(event) { removeOldDivs(); const selection = parseInt(event.target.value, 10); if (selecton === 1) { // the rest } // else if } * line 181 you have a type, it's `label` not `lable` * line 188 you create `menuOptionArray` but never use it anywhere after you set it in the loop. * for `printLines` store `document.getElementById("textArea")` in a variable instead of getting it every time. * line 286 you don't need to explicitly check for `true` you can just do `if (event) {` * lines 309, 310 just a fun fact `console.log` takes unlimited parameters so you could just do `console.log("CPPIndex:", i, ":", pairArray[i].cpp);` for the same effect. * regarding removeFileExtension you can just do `return file.split(".")[0];` * im not sure I would bother with polyfilling the `remove` function since the only modern browser that doesn't support it is Internet Explorer which also doens't suppor the `class` syntactical sugar
Oh, so that's what happened ‚Äì that explains my recent back pain.
Very cool, awesome I am always humbled when someone puts my stuff in their stuff.
I made a new response to your topic with the list of things that I found that you could improve.
What feature recommendation do you have? I think I maxed out my own creativity on this one. But I am always open to suggestions :D
Oh? Can you explain what bug in particular you have encountered? Thanks!
&gt; modern browser &gt; Internet Explorer 
[Airbnb's rules](https://www.npmjs.com/package/eslint-config-airbnb) are pretty popular. I always just default to them and manually add anything that annoys me. I don't care much about single vs double quote, semi vs no-semi, so i just pick one standard and stick with it as best I can.
That sounds like a natural progression. Or add another flex inside flex? You have to be \*very careful about adding new features, to maintain pristine integrity of the software. It's easy to clutter, but yes... it can be taken a few steps further, if I just think about it...
The way many analytics tools do this is by making an assumption that when a user leaves the site for more than 15minutes, then it counts as them actually leaving. One solution is to set a cookie with the current time stamp. On each page load, check the value in the cookie and compare to the current time stamp. If less than 15 minutes has passed do nothing, if more than 15 minutes has passed then fire off whatever you want to happen for a returning visitor. In either case, update the cookie with the current time stamp. 
Do you have any idea of where the bottlenecks are in your system? I would say the first step is to use tools to profile the code performance wise. Once you have that you‚Äôll be able to investigate the areas of the code that perform the worst, and try to reason what‚Äôs going on there. It will also help in quantifying how much better it will perform with the enhancements. 
How are you determining what code to optimize?
I‚Äôm not familiar with that. Maybe if you need a different makefile for a different file layout? I guess it‚Äôs just mainly for beginners who‚Äôs don‚Äôt really know how to do that. For one of my cs courses I have weekly labs where the professor requires the makefile to be turned in with the lab, so I use it for that. Where before I would just copy and paste the makefile from the previous lab and change all the file names. 
I do! I've been trying to figure out how to refactor it but not entirely sure I can without refactoring the entire application. I know this will be tough to explain without you guys seeing the code but pretty much each object in my Json has a type of either radio, checkbox, textfield which are individual form elements. Inside my render I have a switch statement that if it's a radio type push to the radio form builder component. Ultimately building the entire form each time is what's slowing it down. Inside each object there's also a show property set to either true/false. In each form component is where I deal with the show/hide. My next goal is to be able to just check if the show property is changed and only update that object but that's where I'm having trouble and not sure how to check if something specifically was changed. 
there's an older book called [a smarter way to learn javascript](http://www.asmarterwaytolearn.com/js/index-of-exercises.html). It's all based on repetition of exercises, which makes you think that unless you've memorized how to do everything through repetition, you're not ready to move on. It basically made me give up javascript because I felt that I could never remember all this syntax. 
People still use Internet Explorer. It's a modern browser by definition. Netscape isn't used anymore and it is not a modern browser. You can have modern browsers because something being modern doesn't automatically make it good.
Always use `push()` for a couple reasons: 1. It's idiomatic. People reading your code know exactly what your code is doing, why you're doing it, and there's no confusion. You're adding an item to the array. 2. It's less prone to programmer error. With `arr[arr.length] = thing` without a comment I have no idea if you're modifying an existing item, or if you meant `[arr.length - 1]` and it's a bug, or if you meant `arr.length` or `anotherarr.length` or even `length` or some other variable. Having an off-by-one bug here could lead to a holey array which will degrade performance As for includes/indexOf on modern versions of chrome performance will be nearly identical for as much margin as you would care about and still write the code in javascript. I say that because this is an insane micro-optimization; if you are thinking about performance this closely it's also possible Javascript isn't the best tool for the job.
Holy crap thanks so much for taking the time to do all of that. I probably should have cleaned up the code a lot more before uploading the final website. You helped me a lot for future projects. Really appreciate it. 
30k lines of JSON isn‚Äôt that many, even when assuming the worst case that it‚Äôs an array with 30k items. I wouldn‚Äôt go into micro benchmarks for how browsers implement push, includes, indexOf etc before exploring other avenues of optimizations. Like others have said do your search server side. 30k items today may become 1 million next year. 
I need to learn pixi! RMMV uses pixi too
&gt; everyone, no matter the experience level, is doing it literally all the time Just to echo this. I've been writing software professionally on a variety of platforms and languages for over a decade and I strill google something programming related at least 3-4 times a day. I can't begin to count the number of times I've googled something as simple as "ngClass angular" as the specifics of syntax are much less important than the overall understanding of programming.
Step 1 should be learning to use a profiler. It can tell you exactly where your program is spending most of it's time. Never optimize blindly.
Start with actual requirements, don't optimize things that don't need to be optimized. Measure actual performance, don't guess and hack. Run a profiler, if possible. Do load tests to verify actual performance.
In both cases, the [ECMAScript spec](https://www.ecma-international.org/ecma-262/6.0/) provides an exact answer for us. In the case of [Array.prototype.push](https://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.push), the JS runtime must first call `toObject` on the argument passed to `push`. It must also do a bit of work to handle the case where more than one item was passed to `push`, since you are allowed to make a call like this: `abc.push(1,2,3)`. After from calling `toObject` and checking how many arguments were provided, it then goes through each one and does a regular property set call, which ends doing the same as `myArray[myArray.length] = obj`. If you're only adding one thing to your array, you may as well call `push`, since it is easier to read and the `toObject` call and args length check is going to make an immeasurably small difference to execution time. If you're adding multiple things to your array, then call `myArray.push(things)`. because when you do that, the JS engine's compiled C++ will handle all of the iteration, instead of thunking back and forth between native code and JavaScript if you're looping through yourself and calling `push` every time. In the case of `indexOf` vs `includes`, you'll find them right next to each other [here in the ECMAScript spec](https://www.ecma-international.org/ecma-262/6.0/#sec-string.prototype.includes). The only difference is that `includes` checks if you've passed it a regex instead of a string, and throws an exception. `indexOf` will accept a regular expression but always return -1. So while `includes` will be a tiny, tiny amount slower because it has to check if you passed it a regex, in reality this will make no difference to how fast your code runs. You should use `indexOf` if you care about *where* the substring is in the original string. If you don't care, just call `includes` because it makes the intent of your code more clear. 
The element creation, and entering the elements into the dom is going to be miles slower than your push you are worrying about, Is this a big list of items? Can you employ lazy loading with a virtualized list? &amp;#x200B;
&gt; but not entirely sure I can without refactoring the entire application. Huge red flag. Don't be "that guy" who heroically re-writes everything because he was too lazy to understand the original code.
I agree with you! I do understand the code at least I believe I do I just don't understand the fix. 
You might need to double-escape all of the back slashes `\\`
When I first tried using it and added a 2nd block to the first row it refuses to remember it's width and just kept resizing to what it was when it was first added....if that makes sense.
Ah, I've had similar performance bottlenecks before. Ultimately this is why client-side libraries like React exist - they do the _heavily_ optimized diff check to perform minimal updates to your components, and when your components are updated it batches the updates together in a single frame to reduce problems. If your code looks like this: ``` formElements[i].innerHTML = '...constructed form element...' ``` then after each assignment of the innerHTML it is parsing the HTML again. if you're doing this multiple times outside of a `requestAnimationFrame` or `setTimeout`, you may also be causing the multiple unnecessary re-renders of the page. If you _can't_ use React or another client side framework (you mentioned that you're in government work, and they can be particular about third party libraries), then I'd check out [this stackoverflow post](https://stackoverflow.com/questions/45110029/is-it-possible-to-buffer-dom-changes-that-happen-in-a-loop-to-increase-perfor). 
I've never looked at lazy loading before. In really dumb terms can you explain what it does? 
If you can, I‚Äôd suggest looking at ESLint instead. It‚Äôs become something of the standard and is quite extensible if you need support for JSX, TypeScript, etc. We use [prettier](https://prettier.io), along with the [plugin for ESLint](https://github.com/prettier/eslint-plugin-prettier) that disables style rules and does Prettier formatting. 
I would argue any news about browsers impacts js especially when one of them continuously ignores the standard. For most js developers and any web developer a browser is the os.
What generates the string? You‚Äôre going to want to break it up.
Sounds like you're rerendering an entire page when a small part changes. I would attempt to use a new front end framework that allows for partial rerendering, or use CSS to hide/show elements instead of modifying the html
 JSON.stringify({value: undefined, test: 1}); "{"test":1}" JSON.stringify({value: null, test: 1}); "{"value":null,"test":1}"
I'm not going to go for deep detail but you don't manually need to specify each file. That will be a pain in th ass. Something like: ``` %.o: %.c: g++ -std=c++17 $&lt; -c $@ ``` Will compile it correctly for you. Also, clean is usually a PHONY target. Thus not a rule specifically. you should mark it as a phony: https://www.gnu.org/software/make/manual/make.html#Phony-Targets You may also replace output: with all: allowing you to do: `make` and will compile just fine
Got it. Thank you
I use [JavaScript Standard Style](https://standardjs.com/). I really like how it enforces judicious, regular use of intra-line spacing, and the lack of semis and double quotes really reduces visually noise. The resulting code is just really pleasant to read through and it goes pretty far to encourage a coding style that removes ambiguity and overly verbose coding structures.
You're welcome :D
Determine which parts of your code are taking the longest, ie. the bottlenecks. Then look at the time complexity of everything involved ‚Äî is something running n^2 when it can be n? Is something running n when it can be running at constant time? Are there multiple network requests being sent out that can be consolidated into one? Can you consolidate multiple db ops into one transaction?
Is it blockchain based otherwise I am not interested 
Yes it uses shitcoin to retrieve trivia 
http://lmgtfy.com/?q=lazy+loading
Don't take this the wrong way, but ANY library written by a single developer for a single application is going to be crap compared to a library that's been used for years by tens of thousands of apps/developers.
The Java (not JS) compiler now reworks all of these things into StringBuffer appends internally ... so it's plausible that JS is doing something similar.
Those are not worth optimising. Rethink your data structure if you‚Äôre really seeing these calls as significant.
Hi /u/NudeJr, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Thanks for your understanding.
Yeah, but at the same time, Microsoft has decided to stop supporting it and replace it with edge, so maybe don't jump through hoops to support it.
I second this. Every newbie I work with, I advise them to get away from the course websites as soon as they have a basic grasp of syntax and what building blocks are available to them, and start diving into real projects of their own. They progress so much faster when they have to confront and solve real problems that haven't been pre-picked with clear right or wrong answers. 
&gt; Airbnb's rules are pretty popular. I always just default to them and manually add anything that annoys me. Exactly this, though only manually add what your team finds annoying, not just you or someone else.
Hi /u/theresamouseinmyhous, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Alijah69, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Thanks for your understanding.
Hi /u/jyourman24, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/zSacrety, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/RadhooRS, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
If you wan't a serverside rendered application, why would you choose for react?
Damn
&gt; I just read r/javascript guidelines, and for personal projects, I had to explain the source code. To be clear, you could provide a project page with the source instead. &gt; I have already written an article that walks through the code one step at a time, here it is, if anyone is interested. That alone is perfect and would cover all requirements. Thank you!
And now they're replacing edge with chromium. Fantastic world we live in
*surprised pikachu*
A great tool you may or may not have heard of that can help with these things is called a linter. A popular one for javascript is called ‚Äòeslint‚Äô. It‚Äôs pretty much an automated way to do most of what ‚Äî- just did.
also, if it hit the "remove -" link more times after there are no elements left, i have to hit "add +" that many times to get back the first or additional elements. &amp;#x200B; example: there are two blocks, click "remove -" 9 times, i then have to click "add +" 8 times to get the first block to render again
Hi /u/PiotrekKoszulinski, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Probably those things won't matter too much. See if you can decrease the amount of data you loop over, or if you can access it as objects instead of arrays. Obj[id] is constant speed, array.indexOf is linear
Not sure what if it can do it now. It wasn't been able to do it in clean way earlier like 8 months ago. And obvious option was Axios. If had to do something new ground up, I would maybe check it. However, I'm doubtful it's on par, though.
To add, It also helps provide with certificates if you finish their projects. Great for your Resume and helps provide projects that you can show off. 
I just use prettier and whatever the team wants. It‚Äôs great to not have opinions on linking, and to just format to your team‚Äôs standard.
If you are using a React look at Pure Components.
Hi /u/Jimc26x, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Completely disagree.
Use split and take last index of result
You can check out this link to validate email address https://www.w3resource.com/javascript/form/email-validation.php
I avoid all linting rules that are not about preventing bugs other than a very few basic conventions. Other stylistic choices have nuance in their reasoning and/or people mistake "what I'm used to" for "more readable as a universal scientific truth". Applying linting rules prevents these from ever exploring alternatives. Use prettier if you need to, but of far more importance are your data models and apis, not your syntax.
Udemy, check for coupons if you buy a course. You should never pay more than $12 or so. 
So Lazy loading is just the act of not processing/not doing everything at once and instead deferring until it's actually needed. In this case for example instead of rendering 30k form elements (am I misunderstanding that?) that a user cannot see, you make use of scroll events to detect which elements should be shown and then render only what's in view. It can be a bit difficult to do though especially if you're not using a framework. 
Have you actually opened the post?
ES6 methods including functional programming ones like .map and .include are more often less performant than the alternatives
Thanks! I'm still in the basics and dont know a lot about javascript at all. This helped a lot and pointed me in a direction to look into learning.
Thanks for the advice! I've heard a lot of people telling me to create projects along the way of learning JS. It all seemed so simple while I was learning it all at once but I had to go back and relearn some stuff because I went through it too fast.
Thanks! Straight to the point lol.
Wow! Thanks for the help and advice. That's a lot of sources I'm sure I'll find an efficient way to learn with all of that:)
Where do you recommend starting?
Performance is like going to going to the gym or trying all those "life improvement" tips, you don't want at first then you want to over-optimise everything even if it doesn't matter after all and in the end you end up doing nothing with no perf improvements. You have to figure out what is really important, the real bottleneck causing your performance issue and THEN going for performance improvement ! Today most of JavaScript methods are well optimised si just take the one that suit you best and if it is to slow for you then take a lower level langage that suit your case better. After all programmation langages are only tools to craft whatever you want ! 
Yah I've been learning a lot in the past week. I dont have a lot of time to learn after school but what time I have I've been learning. Thanks for the advice. What's the difference between vanilla JS and normal JS
This is glorious, I love weird, give me all the weird. &amp;#x200B; Hey also just maybe add in a wee bit of color, make it look nice. &amp;#x200B; Here ya go pop this somewhere in your html or add it as a link tag: `&lt;style&gt;` `:root {` `--primary: #ff5f5f;` `}` `#weird-button, #give-weird {` `outline: 0;` `border: 2px solid transparent;` `margin: .5em;` `padding: .5em;` `color: #fff;` `background: var(--primary);` `box-shadow: 0 0 4px rgba(0,0,0,.12);` `transition: 135ms ease-out;` `cursor: pointer;` `}` `#weird-button:hover, #give-weird:hover {` `box-shadow: 0 2px 6px rgba(0, 0, 0, .14);` `border-color: var(--primary);` `color: var(--primary);` `background: #fff;` `}` `#weird-input {` `margin: .5em;` `padding: .5em;` `outline: 0;` `border: 0;` `border-bottom: 1px solid var(--primary);` `box-shadow: 0 4px 4px -3px rgba(0,0,0,.14);` `}` `&lt;/style&gt;` 
just change this line ``--primary: #ff5f5f;`` to any color you like.
I dont think you need to use a bundler/webpack on a library? I only transpile with typescript
Other way around, there's now a TypeScript plugin for Babel. I haven't used it but as far as I know it has only exceptionally minor limitations versus the TypeScript compiler.
Here's my take on email validation: don't do it. If you're using email validation for something like distinct users, simply send them a confirmation email. If someone wants to put in "butts" as their email address, well they won't get the confirmation email, and the account they're trying to create won't be activated. There's really no other reason to validate email addresses.
Most email validators are full of shit. Email addresses are specified in the Mime RFC. A Mime address must follow this format: .+@.+ That's not much to go by, but every check more strict than that will cause edge case problems. So, what to do? Use an email checking service. 
@mods, this is a repost of a (since deleted) post I made earlier today. I've changed the title of the blog to better reflect the content. Please let me know if this breaks any rules.
IF you don't want to use an extra service, you can open a socket on the STMP port of the part after the '@' and see if it says 'HELLO'. That's a good first step.
I don't know man, windowscentral is probably now more credible in my eyes. But on your comment, just LOL.
A profile, from a profiler. :)
Click too early and the page will error
Fair enough. I'm curious (genuinely, not trying to compare whose is longer) how long you've been involved in software development?
Start with YouTube and look for a basic JavaScript tutorial (vanilla, don't worry about frameworks yet). Once you get your head around that and you're enjoying it, have a look on Udemy to see if they have any good courses for cheap. 
\+1, however I will say that when I started using the Vue validation library, vee-validate, I couldn't find anything wrong with the email validation. It uses the \`validate\` library, source here: [https://github.com/chriso/validator.js/blob/master/src/lib/isEmail.js](https://github.com/chriso/validator.js/blob/master/src/lib/isEmail.js) &amp;#x200B; It's pretty complex, but it's wayyy better than any single regex I ever used.
I assume you meant to reply to /u/Cheshur as I was just being a smartass. :)
Truly a happy-sad day for the Great Interwebs.
oof. Yeah lol
When optimizing, it's almost always the best choice to start by trying to do fewer thing and do the things you have to do less often, and then move on to making each thing you do take less time. Others who mention data structures and/or algorithms are usually getting at the first kind of optimization, but sometimes it can be as simple as being smarter about code layout (e.g. noticing when you can factor some steps out of a loop).
Or you could just let the browser do it for you? https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email
Here's the RFC compliant regex: (?:(?:\r\n)?[ \t])*(?:(?:(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t] )+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?: \r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:( ?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t])*))*@(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\0 31]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\ ](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+ (?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?: (?:\r\n)?[ \t])*))*|(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z |(?=[\["()&lt;&gt;@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n) ?[ \t])*)*\&lt;(?:(?:\r\n)?[ \t])*(?:@(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\ r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n) ?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t] )*))*(?:,@(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])* )(?:\.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t] )+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*) *:(?:(?:\r\n)?[ \t])*)?(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+ |\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r \n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?: \r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t ]))*"(?:(?:\r\n)?[ \t])*))*@(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031 ]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\]( ?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(? :(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(? :\r\n)?[ \t])*))*\&gt;(?:(?:\r\n)?[ \t])*)|(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(? :(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)? [ \t]))*"(?:(?:\r\n)?[ \t])*)*:(?:(?:\r\n)?[ \t])*(?:(?:(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|"(?:[^\"\r\\]| \\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt; @,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|" (?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t])*))*@(?:(?:\r\n)?[ \t] )*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\ ".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(? :[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[ \]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*|(?:[^()&lt;&gt;@,;:\\".\[\] \000- \031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\.|( ?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t])*)*\&lt;(?:(?:\r\n)?[ \t])*(?:@(?:[^()&lt;&gt;@,; :\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|\[([ ^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\" .\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|\[([^\[\ ]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*(?:,@(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\ [\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|\[([^\[\]\ r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|\[([^\[\]\r\\] |\\.)*\](?:(?:\r\n)?[ \t])*))*)*:(?:(?:\r\n)?[ \t])*)?(?:[^()&lt;&gt;@,;:\\".\[\] \0 00-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\ .|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@, ;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|"(? :[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t])*))*@(?:(?:\r\n)?[ \t])* (?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\". \[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[ ^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\] ]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*\&gt;(?:(?:\r\n)?[ \t])*)(?:,\s*( ?:(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\ ".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t])*)(?:\.(?:( ?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[ \["()&lt;&gt;@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t ])*))*@(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t ])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(? :\.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+| \Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*|(?: [^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\ ]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t])*)*\&lt;(?:(?:\r\n) ?[ \t])*(?:@(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[" ()&lt;&gt;@,;:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n) ?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt; @,;:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*(?:,@(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@, ;:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t] )*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\ ".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*)*:(?:(?:\r\n)?[ \t])*)? (?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\". \[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t])*)(?:\.(?:(?: \r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[ "()&lt;&gt;@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t]) *))*@(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t]) +|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\ .(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z |(?=[\["()&lt;&gt;@,;:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*\&gt;(?:( ?:\r\n)?[ \t])*))*)?;\s*) &amp;#x200B;
`[,,foo]` means destruct array and take third element as variable foo
If in fp you mean monads and functors, than yea maybe. But if in fp you mean function composition your program can benefit a ton. Some of the benefits: make data transformation easier to follow algebraic composition (easier to modify) less code 
Great thanks! Seeing that the first and second parameters for `reduce` are `accumulator` and `currentValue` respectively: * I can see that `currentValue` as `[,, xyz]` makes sense if the array is nested * But is there a way the `accumulator` could be an array? (note the initial value of 0)
Why is this even a thing?
Same difference, just different ways of saying it! Also, Plain JS.
Or at least a tiny api for offloading jobs and render the results.
I learned JS creating my own Pong game, based on HTML5 canvas and ES6 features. Just start a tiny project and read a lot of resources.
Hard to say without source data.
Chances are there won't be much difference between the two and if one improves the performance it will either be unnoticeable to a user or it will be difference be between being slow and slightly slower. When trying to improve performance you are usually looking at 90% 10% type rule, where 10% of the code is taking 90% of the time. While you can get performance gains looking at the 90% they are usually insignificant compare to dealing with the problems in the 10% and often take a lot of effort for little gain. The trick is find the 10% you need to deal with - this is where code profilers come it so it is worth Googling JavaScript Profilers and tutorials. But something easy that can help is just to step through the code in a debugger and often one procedure/section just takes most of the time as you step over it (always jump over large loops - set a breakpoint after it if needed) - alternatively add log/debug statements with time Once you workout what is slow - you need a strategy to solve it or hide it e.g. if slow process, sometimes you can do it async and make it appear much more responsive to user.
Serverless-side rendering? wtf.gif
30k lines of json isn't much. also, always consider perf differences at the algorithm level first before you microbench methods.
Thanks! I had actually purposefully left it un-styled, but I kinda love how the random collaboration adds to the weirdness of the thing. I've updated it to include your CSS.
Running the profiler. It'll then tell you where your program is spending real amounts of time so you don't try to optimize 5 ops out when the billion op loop is your actual problem.
Lol wtf is going on man 
Dat SEO
I think you‚Äôre supposed to fetch the data using Next‚Äôs getInitialProps lifecycle method if you want it server rendered. componentDidMount will only fire on the client side, making the whole point of this moot unless I‚Äôm missing something. 
We can't render in the client anymore, and making cloud based things is the latest hottest craze, duh. 
Correct!
I've been a coding for 7 years, employed for 6. Experience counts for a lot, the more you have the better, but in an industry as fast-moving as software development, and especially in web development, it is certainly not the be all and end all of how to judge a developer's skill. I could fire back by asking if you have a computer science degree, whether you're solely a front-end developer, if you attended an "elite" university, how long you've been leading projects for, or which company you work for. That would be pointless though, as while all of those things count for *something*, just how much they count for varies from person to person - as does experience. I'm going to address some of the points of your previous post to show why I think your reasoning is off: &gt; ANY library written by a single developer for a single application is going to be crap compared to a equivalent library that's been used for years by tens of thousands of apps/developers This to me shows a lack of understanding of why new libraries come about, and how when a project grows larger it often tries to become all things to all men, leading to bloat. Many would argue Redux is simply too much for a lot of projects, [Dan Abramov included](https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367), and this is why libraries such as [Unstated](https://github.com/jamiebuilds/unstated) were written. &gt; And before you say "well X library started out with one dev and one app", yes you're absolutely right ... in its 0.01 version This is where I decided I did not want to engage further. Not only does your attitude discourage anyone who doesn't consider themselves to be as good as Dan Abramov from trying anything new, but it shows me that you did not read the blog nor did you bother to look at the library you are criticising, since my library isn't even in it's 0.0.1 release yet and still has a beta tag on the version. &gt; however awesome you may be, I'm strongly inclined to believe you're not "Dan Abramov awesome" ;) And what would you have said to Dan himself when he first released Redux? Unless you're psychic, the only logical conclusion is that you would have said the same thing to him. Furthermore, you seem to have gotten the idea that if a library does not compare to the biggest in it's field it's pointless to even try a new take on the idea. If I'm quite honest, you seem to be held back by a very rigid, black and white thought process whereby you try to rank people based on arbitrary attributes when a truly experienced developer would understand that it's impossible to know how much of a factor is for each individual. You come across as disingenuous, like you are poorly trying to hide an elitist attitude. Looking very briefly at your post history I came across this: &gt; If you're doing OOP in Javascript, you're doing it wrong. If you're using private properties, you're really doing it wrong. Javascript is a functional language with incomplete OOP bits; it is not an OOP language. Which further confirms to me that your mindset is rigid to the point where you are actively harming your ability to learn. For OOP in JS, it *is* preferable in some scenarios, most notably in games development where performance is key. This is something I would expect a developer with a lot of experience to understand. I would expect experienced developers to weigh up the positives and negatives of different tools to understand where each could be better. They would understand that it is *very rarely* the case that one tool is simply better and should *always* be used. As for the private properties comment, this again confirms my belief that you are at least somewhat an elitist but also that your elitism is wholly unwarranted. Not only are you wrong about OOP in JS *always* being the bad choice, but it also shows me that you genuinely consider yourself to be smarter than the entire TC39 committee who have decided to add [private class fields](https://github.com/tc39/proposal-class-fields#private-fields) to the ECMAScript spec. Finally, you are dead-wrong about JS being a functional language. JS quite probably the biggest example of a multi-paradigm language. Don't just take my word for it, [the following quote is taken straight from MDN](https://developer.mozilla.org/bm/docs/Web/JavaScript): &gt; JS is a prototype-based, multi-paradigm, dynamic scripting language, supporting object-oriented, imperative, and declarative (e.g. functional programming) styles. Unless you are claiming to have more authority over what exactly JavaScript is than a site co-founded by the creator himself, then you have a quite a fundamental gap in your knowledge. Such fundamental misunderstandings of the language even further confirm my belief that your seemingly-elitist attitude is wholly unwarranted. Something you will notice about the leaders in our field is that they are humble and always open to new ideas. If they were not they wouldn't have been able to climb as high as they have done. I think you could learn something from people like Dan Abramov.
Good point on the \`accumulator\`, since it's initialized as 0, the code will break always.
I found really useful the YDKJS series, but they are books. [https://github.com/getify/You-Dont-Know-JS](https://github.com/getify/You-Dont-Know-JS) If you're willing to pay here there are many great videos [https://frontendmasters.com/](https://frontendmasters.com/), including YDKJS's author's videos. 
Maybe [JSON-schema](https://json-schema.org/)? Or [OpenAPI specification](https://swagger.io/docs/specification/about/), maybe, although it's really verbose.
I think you should jump through hoops to not support it. The primary point was that he is using `class` without polyfill so it seems useless to polyfill other things to support IE. Its easier to just say `remove the polyfills` for a newer dev then it is to tell them to go get a precompiler to compile out `class`
Not sure it's a very sad day. Chromium is an open source project so I think thats much better that whatever closed source project they were using before.
Ah yes, side rendering! That when pages render on other devices? 
Always returns 0 tho
avoid looping within loops on large arrays, even functions that internally do the same under the hood. That‚Äôs because x number of items will do x^2 operations with one loop within a loop. Usually you can avoid this. This type of stuff is often described by big O notation . 
I mean, I guess you could prerender every possible template/page/component and stick it on a CDN?
Wow, that was ... quite a response. Have you ever been talking with someone, and they said something (or some things) and it made it clear that they had a whole lot of personal stuff they were dealing with, and they were talking to that more than you? For instance, maybe they projected all kinds of things you didn't say onto you and attacked you for saying them? And then, as a result, did you maybe figure that your best bet was to quietly walk away and not further engage that individual?
Look at a cool interactive element you like on a website and try to implement it yourself. If you get stuck, do some googling of the individual problems. If you are finished or totally stumped, peek at the site source in the developer console and you'll see how they did it, that way you can learn by comparing what you did to them. Of course there's no guarantee they didn't do it with shit code, but you gotta learn how to do stuff before you learn how to do it well. 
Every API I've ever implemented simply used data tables with name in one column and possible values in the other column. If the value is a data type, create another table to describe that data type. Google for 'data dictionary' for examples.
Second on the OpenAPI spec. We've just started using it ourselves - we recommend using 2.0 of the spec (it's currently on 3.0) due to tooling in node being very stable and usable for 2.0. The OP should check out the Swagger Editor (OpenAPI's former name was Swagger, the name is now applied to the OpenAPI brand of tooling for generating APIs using the spec). Once you've designed your spec, you can use the tooling to auto-generate an http client for 3rd parties to use, along with express scaffolding if you want. It's got an example spec and you can see sample generated output. [https://editor.swagger.io/](https://editor.swagger.io/)
I mean.. axios is just js, right? It can't do anything you can't do with native js.
V8 is using ConsString[1] (ropes[2]) for concatenation. And to flatten this string you can use this hack[3]. 1. https://chromium.googlesource.com/v8/v8.git/+/13d38e4a87153ab3b0a8d0612ea1c7ee3f664d77/src/objects/string.h#558 2. https://en.wikipedia.org/wiki/Rope_(data_structure) 3. https://github.com/localvoid/ivi/blob/74140526398c32746ce14eeb07ebe0fb4cfcb98d/packages/ivi-ssr/src/flatten.ts
Man I really needed this. 
maybe just create a javascript file that validates the expected json.
I use [Swagger UI](https://swagger.io/tools/swagger-ui/) to document my API and provide an endpoint for easy testing and facilitating use in a self-explanatory manner. [Here](https://petstore.swagger.io) is one of their live demos. All open-source.
This gives example parameters (JSON body, etc.) as well as example responses. Both the parameters and responses have example JSON values as well as *models* which describe the format of the input. https://imgur.com/a/cPDtyGB
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/edrsblb.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20eb9au3r) 
If you truly felt that way and weren't just attempting to get back at me on a personal level because you can't counter any of my points then you wouldn't have written any response at all. Funnily enough, I felt that way about you. Hence my two word reply earlier. Shame on me for going back on that.
I‚Äôll check them out, thanks! We replaced Keen for Google BigQuery, and couldn‚Äôt been happier.
Are you appending all of your generated elements simultaneously to avoid excessive reflow?
Thank, I appreciate the time you spent on this. I wasn't aware of that approach. I will definitely try it
Oh, I'm sure there are better options, especially for precision work (eg Processing), but for simple things, it's nice to know that JS is an option.
Yup, fast to prototype things :) 
Okay, is this the thread where we drag out all the people saying "Some Microsoft employee made a few commits to Chromium, this doesn't mean anything!"
Take a look at this FREE course: [Learn Web Development from Scratch](https://www.educative.io/collection/10370001/5686791109607424).
yes
What would you say would be the best way to start? &amp;#x200B;
Very easily... One of the most common expressjs tutorials out there.
Also if there are frameworks and tools you think could make it easy then please let me know!
Asked and answered.
React, Vue, Angular, Ember, Aurelia, Meteor, Adonis, Preact, Marko, etc., etc. 
Thank you for the awesome help, I'll look into it!
&gt; especially programming days and dates I definitely thought it was universally accepted that fiddling with dates was one of the worst parts of programming, and nobody actually really knows how to do it without at least consulting the documentation after every line. Yes, time zones suck, parsing dates sucks, epoch* (mostly) sucks, but holy lord fuck format strings. I can safely say I will never be able to use them to format a date without having the docs open write next to the editor. And I still mess it up. JS also easily has one of the worst date implementations and supporting ‚Äústdlib‚Äù for working with it. If it weren‚Äôt for Luxon (moment.js without the enormous bloat), I probably wouldn‚Äôt even try doing anything fancier than displaying it in the window. Ruby with ActiveSupport is the closest thing I‚Äôve encountered to enjoying working with dates. Need to get the date for 2 months ago? `date.months_ago(2)`, or the always annoying adding n number of days to a date? `date + 5.days`. If you haven‚Äôt had the pleasure of working with the active support date api, [I highly recommend giving it a look over, I haven‚Äôf found anything quite as easy to use in any other language.](https://edgeguides.rubyonrails.org/active_support_core_extensions.html#extensions-to-date) \* Mostly only because if everything you need is in epoch, and you don‚Äôt have to worry about being able to read any of the data, it‚Äôs actually easy to work with. But, that‚Äôs because they‚Äôre just plain numbers, no other bullshit that usually comes with dates.
A bunch of horse feathers. No wonder other software disciplines don't take us web folks seriously. 
The sadness is the further consolidation of web technologies. I won't miss IE/Edge, but the fact that another vendor is out of the game is disappointing.
If you're new to programming and would like to start with JS, I'd recommend looking into MDN: https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics For a basic website, you'll need to learn JS, HTML, CSS, and how to host a website with those technologies working together. MDN will probably help you in learning all of those things. Good luck!
I could be mistaken, but based on my understanding of Firebase / Firestore, I don't really recommend anyone to use it for any project, to be honest. They charge you per database operation, and the actual queries that you have available to access data are a lot more limited and primitive than any traditional SQL database. The main benefit is that it's a little bit simpler to set up and start working with, but then using a regular database isn't that hard and is something you'll have to learn at some point anyway. You'll probably want to look into other options for your backend - the one I have the most experience with is Django, which has suited my needs well, but there are lots of good options out there. If you're not familiar with using some sort of stack to create url mappings, API endpoints, database structure and queries, etc then you'll probably want to familiarize yourself with that stuff. After that, you just start designing pages, have the JavaScript send data to the server, make updates in the database, and do stuff. I'd probably start with getting user logins/accounts to work, then create a subreddit creation functionality and make it so that URLs are dynamically created based on the database content, then add a submission table to the database and create functionality for submissions etc and just keep going.
[Scotch.io](https://Scotch.io) and Scrimba.com
Not if your content is at all dynamic, and if it's not then you can just use a static site generator like gatsby
Probably, what was meant is ```arr.reduce((ac, [,,xyz]) =&gt; ax + xyz, 0)```
finally. MS has been fighting chrome for too long. I remember talking to some MS employees a few years ago that were working on Edge, and they complained that chrome is actually the bad-guy in the browser world because they make their own standards and expect everyone else to follow. Which, I mean, could be a valid point if they were doing anything malicious, but chrome has actually been ahead of the game implementing new javascript standards, websockets, webGL, indexedDB etc, faster than the others. &amp;#x200B; Besides, it'll be cheaper for MS to use/contribute to existing software rather than build/maintain their own. &amp;#x200B; Huge win for web developers too IMO, less differences among browsers to keep track of
I made an API wrapper for the NASA Insight Lander images API. This is my first time making something that I actually intend for other people to use, so any feedback on that front is appreciated as well as feedback on the code itself. [link to repo](https://github.com/erik4github/nasa-insight-api)
Well said, man! :)
Checkout Tyler McGinnis (.com) He teaches in a very comprehensive and linear way. Many good educators out there sometimes move through some advanced features (like Promises, or the challenge of ‚Äúthis‚Äù) in a very hurried or curt way. Tyler explains it in a way that puts you on the path of understanding and having those crucial ‚Äúaha‚Äù moments. He mainly teaches React, but he has two or three JS courses that you gotta start with. And the way he teaches React, only makes you see JS in action. $20 per month, but worth it. /u/tyler-mcginnis
Thanks so much!
This is the realest comment ever
One of these days, I will meet you in person and tell how much you helped boost my career. 
&gt;you can't make protected properties/methods in Javascript, or even private ones really. Tell that to my closures ;)
&gt; would you use .push(obj) or array[array.length] = obj Push was a little bit slower in the past. Nowadays, that micro optimization is completely pointless. Use push.
Can't wait :) 
Lol, it's a win for people who the standards respect. Here is a perfect example of them jumping the gun and backtracking multiple times because they broke a **lot** of games on the web with this change. https://developers.google.com/web/updates/2017/09/autoplay-policy-changes The only reason I know is because it broke the flow of my application. This breaks any autoplaying or auto-syncing website. 
Yes
I was one of them, but I also said ‚ÄúI‚Äôll believe it when they have an official announcement.‚Äù So‚Ä¶ now I believe it. 
At this pace we might soon expect Linux windows 11 ü§©
If you are just appending, it is probably fine to just append. Most modern string implementations has special optimization for append that's re-uses existing string. If you are doing non-append string construction, array will be faster for non-trivial cases, as big-O of immutable string wins out
Help us help you. I see the working date picker, but I need to also see the not working one. "The link to the HTML for that page" is not enough, I need to run it somewhere. Can you deploy your code to some temporary environment?
Could have used this article and repo a few months ago. Next + AWS is cheap. Heroku is a whole lot easier to deploy get set up however. 
I think this is real life example of " If you can't fight with them, Join them". 
I've also been affected by this at work but as a user I'm glad Chrome blocks autoplaying with sound.
&gt;For the past few years, Microsoft has meaningfully increased participation in the open source software (OSS) community, becoming one of the world‚Äôs largest supporters of OSS projects. If this were the 1990's, everyone would think this was an early April Fool's joke. Bill Gates did everything he could to destroy OSS when he ran Microsoft.
I'm not op, but this answer was really insightful! Especially the hack listed in the third link. It never would have occurred to me to call the number constructor to flatten the underlying data structure.
Reason is a super cool language, but this is a JavaScript sub
YYYYEEEEESSSSS. consistentcy
Wouldn't open in my phone
Great work! I will mention that custom element names should have a hyphen in them :)
thanks! It had hyphen, but when I'm building a vue library with ``` vue-cli-service build --target lib --name foo-bar ``` The `demo.html` is generated with a bug, where component name is assigned to window as `foo-bar` and used as `window.foo-bar` which is invalid js. So I just dropped the hyphen without much more investigation
So, web developers aren't people? And a serious part: I'm glad that Microsoft not only build something on top of chromium, but actually contributing into it. 
Articles like this are posted so frequently that they're no longer contributing to the signal vs. noise ratio. Every fp tutorial only ever discusses pure functions and then briefly touches on functors without saying the name. It would be really nice to get a slightly more advanced article focused on more interesting topics (of which there are plenty). OP, if you want to be the one who turns around the "fp tutorial stigma", maybe try writing about some more advanced topics like monads and their uses. Or perhaps even talking about monoids could be fun!
You could point a gun at me and I'll still instinctively write a semicolon after every statement.
Oh that‚Äôs interesting. Might give TS another shot then since that was a major blocker for me. I‚Äôve been using flow and it‚Äôs a huge mess. TS has typings for so many packages
Those number are highly dependent on the size of the array being operated on, but I would be shocked if something that took .4 seconds in chrome took 21.7 in IE. THAT SAID. If you‚Äôre looking for fast insertions (ie *push*) and fast inclusion checks (ie *includes*) you really want a map (or just a regular JavaScript object/dictionary). 
Im curious, how did chrome - by changing the autoplay policy to only play once the user interacts with the page - mess up the 'flow' of your game? Even if your game did rely on autoplaying video/media, wouldnt you just place some kind of button/input to start the game, and then everything else would be alright? 
They have really done a great job when they created VS Code. It honestly has converted me away from atom. 
I don‚Äôt understand how people having so hard feelings about semicolons. I had a similar discussion in the company I work for and people just bluntly reject just because how they used to it. In the end it turns out it adds no value and you can perfectly live without it so why bother in the first place. If you are you are using vscode, it has a feature for auto fix these kind of trivial issues on save so you can go on writing code as you used to but editor deals with semis automagically. This applies to similar rules with double quotes and trailing whitespaces as well. 
You certainly won't lose anything when you add semicolons. If you don't, you won't be able to use those nice sexy one liners whenever necessary. I mean, for someone who writes both JS and C#, I'd rather not forget about semicolons.
I've wondered for years why they haven't used webkit or chromium for Edge's internals. It's not like users know or care what the underlying rendering engine is, so I don't understand the value to MS or to MS customers of Edge having its own proprietary rendering system when two exceptionally good ones already exist in the open (webkit and chromium).
It's based on a metric, one click = play. It affects music playing when you _load_ the game, old games specifically are affected. The whole point is to not break 100% of something when you release a feature. Now for me I wasn't making a game, I was making an audio tool. Originally when this feature was pushed it broke all autoplaying audio, this included when you clicked to create a request to a web server which notified you via a websocket that something in the DB changed. This would play/stop audio files which is outside of the "gesture". The reason being it was for collaboration, I didn't want to allow the user to play sound locally unless everyone else on the server saw the message. I don't think this is an unreasonable approach. Essentially what I have to do now is make sure when the play event comes over the socket is attempt to play, and run a loop in the background to check to see if it's actually playing, because the API shows it in a playing state and the audio progressing. If you call sound.seek() multiple times the value would be increasing. So from an API point it _looks_ like it's playing but it's not. If the audio is in this bastardized state I have to pop up a modal or some button that makes the user click to _enable_ the audio again. It's a stupid _feature_ that broke [**a lot of websites**](https://bugs.chromium.org/p/chromium/issues/detail?id=840866). Whether you actually agree with it or not... this is a chrome-specific feature that went through zero discussion with the community.
Thats what i thought too
I doubt Edge's autoplay policies would be affected by MS adopting Chromium internals for Edge's rendering engine. We're just talking about the rendering engine here, not the entire functionality and behavior of the browser.
Embrace. Extend. Extinguish.
My friends released this cutie yesterday, really love this thing!
MS is so badly maligned historically with OSS and webdev too ("IE hell") that I think we're probably looking at a generation-level shift. One's view of MS's relationship to OSS and web standards will depend simply on their age, which is basically a proxy for: did they ever had to make a site work on IE 5-10 (where each decreasing version correlates to a deeper level of hell)
Where there's a will there's a way
I want to learn backend and thanks for that feedback I am gonna look into more options I just wanted to start a little bit early but I agree with you 100% I will start learning more about backend soon!
&gt;they make their own standards and expect everyone else to follow These must be young-ish Edge developers, who don't remember how MS did this exact thing with IE back when it held leading market share but to much more nefarious purposes than the Chromium team's goals.
thank you for sharing it, spent a lot of effort of hours to make this dark angular template real :)
Hi - I can set it up but I can't keep it up for too long. Are you online now? If I get a message I can deploy for you to review. Chrs.
node --debug --inspector .
That is unless they're going back to "embrace, extend, extinguish"... 
Not optimized for phone screens for now. Works good on PC.
50% seems like a stunningly high amount. I feel like your example is something that every programmer stumbles upon fairly easily. If you have any kind of prior experience you should know this type of logic.
Their ownership of chromium has also led to the forcing upon us of WebComponents that noone actually wants
That's being caused by the slow heroku setups. Perks of deploying stuff for free. You can play with the source code and the project is based on create-react-app so just clone, npm install and then npm start would work good then.
It is not currently optimized for mobile screens. Need to add that. But do check it on your pc. 
Thanks for the suggestion. I have a little bit knowledge in C.
The whole point is this autoplay policy is by Google's decision alone. There were no discussions on this feature change it just showed up and broke a lot of websites.
I would argue that JavaScript is a vastly more easy language to pick up and use. There's no compilation step, data types are elided, it doesn't dictate program structure (like wrapping everything in a class), which means you can attack is straight away and make things with very little friction. And to that end, and as a way to "cope", just make a lot of things. Discover the quirks, Google their origins, understand why they exist and how to overcome them when they arise! For those of us with a very good understanding of JavaScript, we also started out as you did (for the most part), and though any new language may seem daunting at first you gradually learn through doing. And while yes, while JavaScript does have some weird parts, is it really *that* much harder than c? I've learned both and I would say no. If you know c, you can learn js, so stick with it! You'll get there eventually.
There is already Linux included in Windows 10.
It was rumors at the time.
Oh nice. It‚Äôs like google chrome frame all over again, but a little better this time I guess. Lol
Why is everybody saying "Chromium"? I thought the engine was called "Blink", and Chromium was just a fully open source browser that uses it. Am I wrong?
[http://es6-features.org](http://es6-features.org) &amp;#x200B; &amp;#x200B;
I won't say it's "easy" but it's actually pretty _simple_. There are just three rules to keep in mind. When you need to _cope_ with the _real pain_ of JavaScript's _weird parts_, you: 1. remember that all languages have quirks 2. stop whining about it in public places 3. grow up
[removed]
The only way for linux to go mainstream.
You must be too young to remember the dark times of IE dominance. The bigger they get, the more they'll try to abuse their power with custom crap that breaks other browsers. 
What does this have to do with MS adopting Chromium for Edge's rendering engine though? It's entirely up to MS how Edge will handle autoplay and a zillion other decisions they have to make on their own that may or may not match what Chrome does.
These days with transpiling and polyfills being common, it has been less of an issue. I'm honestly I bit surprised at this since I regarded Chakra as an ok contender in the JS/browser engine race. If Edge starts to use Chromium, then I don't have any idea how it's going to compete with Chrome with being "Chrome in all but name" (not really but close).
The point is if MS goes chrome and chrome becomes the only real browser it opens up total control by Google.
Same here, would‚Äôve never thought that I‚Äôd use a Microsoft product again in my life.
MS is still in control of their browser overall. They're just adopting the \*rendering engine\* of Chromium. It's still going to behave, to the user, like a MS browser. Users will not know that anything changed, other than perhaps some sites will work a little better / faster.
Hey /u/Trout_Tickler and /u/fatgirlstakingdumps tell them it's [not true](https://www.reddit.com/r/javascript/comments/a3bgvh/edge_goes_chromium_in_the_future_would_it_be/eb4wl4a/)!
It's a sad day [https://blog.mozilla.org/blog/2018/12/06/goodbye-edge/](https://blog.mozilla.org/blog/2018/12/06/goodbye-edge/)
Yes. Vs Code is really awesome
Unexpected but great twist
Yep, this. Play around with it, and then you read an article or watch a YouTube-video, whatever floats your boat.
Java was the first language I learned, then C/C++. JavaScript was not that hard to learn, stop being dramatic.
&gt; but chrome has actually been ahead of the game implementing PNaCl, AMP, ...
If the pot calls the kettle black, that does not mean that the kettle's not black...
Yes, it'll take more work than switching between very similar languages like C++ to Java etc., but that's just the nature of learning new things.
Blink is a rendering engine. For modern browser you actually need javascript engine (V8 in this case) and, probably, window manager. Chromium already have all this parts, so while you can use it as browser, it's pretty barebones. Every vendor uses it as base for more feature full applications. So it's really kind of browser (and not just rebdering) engine.
I'm still convinced this is a divide and conquer tactic. "Collaborate" with a few big OSS projects (bash, linux), take control of OSS platforms (github), then split the community, make the project they control proprietary and start charging.
so what youre saying is 2019 is the year of Linux on the desktop?
What are you struggling with? If you know java and c I don't see why you would find JS hard. I come from the same background as you and I actually found it SO much easier,and this for a lot of reasons (no pointers, no need to declare every damn objet, ect.) Just be open minded and embrace JS quirks. 
Yup. I guess it's just that people like to complain when trying to learn a new tech... Logically, JS is miles away easier than C/Java. 
Of course it is! &amp;#x200B; I'd say use Firebase, it works like a charm, easy to setup. &amp;#x200B; Or If you wanna keep the control yourself, use couchdb + pouchdb with [socket.io](https://socket.io). &amp;#x200B; Cheers
&gt; HTTP response that has been parsed to a friendly JS object from the JSON string. I don't understand this, and it's tripped me up with axios, as also another PHP library that does web requests. Generally speaking, it's horrible to use the same variable for two different things, and especially for two different types (string vs object). &gt; This reduces the number of repetitive tasks that you have to do (manually parse JSON like in Fetch) But it doesn't... it actually creates a bunch more work. Now I need to write conditional code for every web request to determine whether `data` is a string or an object, and then write more code to account for dealing with both data types. You can't assume what a 3rd party server is going to send back. The developer is expecting to either operate on string or an object, so why wouldn't `response.data` just stay consistently as a string, and have a method like `response.dataAsObject()` to return it as an object? Please let me know if I misunderstood something, but this "it saves work" point just seems completely the opposite to me.
It is more that their business model has shifted significantly and OSS is no longer a direct competitor for what they see their main revenue streams to be going forward. In fact OSS has become part of their target audience. Back then their main revenue streams were Windows and Office on the desktop and Windows, SQL Server, and Exchange server-side. F/OSS was or was trying to be a significant competitor in all of those places. A key difference was idealigical, and when people fight over ideology they tend to fight dirty. Looking forward their business model is focusing more and more on SaaS &amp; PaaS constructs, particularly server-side. They'd prefer you to run Windows, but they don't care if you run something else as long as you run it on Azure. Don't want to use SQL Server / Azure SQL? Fine: postgres, mysql &amp; various nosql variants are well supported on Azure too. Want to run something else entirely? There is an Azure VM for that, pick a size and go. They are playing nice with F/OSS not as a long-game extinguish play, but because playing nice with F/OSS instead of fighting it increases the likelyhood people will consider Azure when deciding which platform to use. F/OSS is no longer a competitor in those areas: Amazon &amp; Google are, and F/OSS stuff is just tools any of them can use as part of building their kingdom. On the desktop I don't think they particulaly want to sell Windows any more - it is a hassle to keep people happy and secure with such a wide range of hardware, software, black-hats, &amp; idiocy the OS is exposed to. I think VS/Code is a testbed for a future where all their desktop output is truely cross-platform so you'll eventually run the practically same Office and friends on Liunx or iWhatever as you do on Windows. Linux is no longer a competitor: it is just one of the platforms on which their apps can run. Better yet, why care about the OS at all? If apps run well enough via Electron, run them in-browser and now people are using their cloud-based subscription services - why sell you something for ¬£150 now when they can get ¬£8 a month out of you for years to come? That is the long game now in place of extinguishing competing tools: recuring payments for what tools you do use and for the platform you run them on. Maybe desktop Windows will eventually die out and become nothing more than the OS that x-boxes and other specific devices run: let someone else worry about building an OS to run on all those complex combinations of kit and circumstances. That would be quite some time in the future though. Server Windows has an easier time, especially running on cloud infrastructure, even other people's cloud, where they are dealing with a relatively constrained set of (virtual) hardware.
Unlike most other languages, JavaScript was designed in a hurry and thus contains some weird elements that you have to simply ignore and never use, like `var`, `for‚Ä¶in` and global-by-default variables. Since browsers have to keep source code compatibility to pages written in the 90s, these warts also can never be removed.
Cool story.
I really wish I was better with heavy accents
5 years to late!
Using a linter helps a lot.
No, but it's the fact I do work a full-time JavaScript job that means I have absolutely 0 interest in doing it during my free time. Work to live. In your case, eat your heart out. Go nuts. Enjoy it!
So JavaScript is just a job to you...not my target audience for the question, but good for you I guess.
this is clearly a case of embrace/extend/extinguish! Microsoft is going to kill Google! /s
Your reply is super constructive and it makes sense, but my grumpy ass is still bitter for being treated like shit for 20 something years. I will never trust edge, even a chromium based one. I will never trust an MS OS again after the disrespect starting from Windows 8. I seriously hope all their mainstream software die and are replaced by electron based apps such as vscode which I use on a daily basis, but I dread the subscription model they'll implement, already. All in all, I hope you're right.
Will it have Chrome‚Äôs dev tools?
They have made some official announcements
Stop being so rational!
Loads of bullcrap, the web needs standards and standard implementation - having one engine is the best thing to happen to the web in a long time.
&gt; they complained that chrome is actually the bad-guy in the browser world because they make their own standards and expect everyone else to follow Well, they are not wrong though. It's not because MS has done it in the past htat Google isn't doing it today.
you're alway welcome :)
Close to it ye
We had one engine not that long ago, but it looks like people forget the past quite quickly...
And it's THE BEST desktop Linux experience ever!
This has always been how web standards evolved though, they're shipped in products and slowly settle into a standard, not the other way around. It's always been like this. 
Writing in all caps is rude.
One engine that wasn‚Äôt open sourced, that‚Äôs not an engine. as a web developer I find the chromium project to be a wonderful thing, mozilla are just trying to pick up some percentage after failing so hard. I can‚Äôt see any reason for this to be a bad thing as long as it keeps its open source idiom - which ai don‚Äôt see changing in the near future.
The solution is simple - you force the user to click somewhere to start the app (login button, some kind of splash screen, whatever) and you play silent empty music file on this click. Then you can re-use AUDIO tag instance at any point in time. ez
You don't remember IE6 days, don't you?
Go with TS, if not go with ES6 or ESNEXT (and use babel). I'll never get it how such crap like JS&lt;ES6 could become such a popular language. Using a linter is also a good option. (tslint) Those arguing that JS is much easier than Java for example should be asked how often they get "unknown type errors". Check out this page: [https://medium.com/@Iren.Korkishko/10-most-common-javascript-errors-dfdca7dbf3f5](https://medium.com/@Iren.Korkishko/10-most-common-javascript-errors-dfdca7dbf3f5) 0.5 bugs in average in military SW \~3 bugs in "normal" SW \~12 bugs in web-applications Always per 1000 LOC... &amp;#x200B;
Until innovation stops because there is no longer any incentive to innovate. Basically nothing improved in the web for about 10 years because of MS monopoly. 
There will always be an incentive to improve, allowing google and ms to create apps that weren‚Äôt possible before is quite the incentive, and that‚Äôs not going to change. Comparing 10 years ago web to now is comparing apples to oranges.
There is a general economic trend where monopolies stunt innovation, will the web be an exception? Maybe, but it would be a pretty rare exception to a relatively consistent economic rule.
Perhaps I‚Äôm naive but I look at chromium as a tool - not a product, hopefully this union will do it good the same way nodejs and iojs worked out.
Sure bet they wish they could. But looks like MS will not be following Google. Not a big fan of MS or their software as security is important to me but less competition is never good.
I was like 20 when got interested in Front-end and web dev is general. Worked as window cleaner for years. Studying while off work and got freetime. At 25 with friends help got internship in a good firm with good policy that didn't give a **** about previous work experience and just checked knowledge, logic and passion for web.dev
Everything is a conspiracy these days. 
[removed]
Woah! I‚Äôm gonna need you to pump the brakes on that one, champ! WSL is currently a crutch for people stuck developing on Windows. Disk/IO performance is horrible, it‚Äôs slow to start and it‚Äôs still missing a ton of features present in Linux - some of which are real hurdles when doing development. Maybe I missed the /s but they have a long way to go before you can make statements like that.
I always use `Object.getOwnPropertyNames(‚Ä¶)` for that.
You really think you are "grown up" because you are using JS?
Nah, you grow up so you stop whining
My friend, Chromium is an open source project that handles the actual rendering of web pages. Google Chrome is not Chromium *it‚Äôs built on it* and *Edge* will be built on it too. If Google decides ‚Äúour browser will not allow videos to auto play‚Äù that change would be made in the Chrome project, not the Chromium project. If google decides ‚Äúwe will render white as red from now on‚Äù *that* change would be made to Chromium, it would be open sourced and hundreds of not thousands of developers would be confused and angry, followed of course by users when the change is merged into Chrome. Additionally, if Microsoft decides they are unhappy with how the Chromium project is run, they can fork it and make the changes they feel fit best.
To expand a bit the problem is the following. You have multidimensional data in crossfilter (two of those properties being start time and end time of the data point). The problem is to select all intersecting intervals (data points), given a start and end time range. This sounded like I would have to use an interval tree instead, but a little more thought led to a very simple and elegant solution.
I am of two minds about this. I agree that more competition in general is good. But it would be nice to have only a single target for development, knowing that all browsers are "standards compliant" because there's essentially just one standard. As a consumer, I want choices. But as a developer, it's easier for consumers to not have choices and only one development target. I basically spend half my day as a developer and half as a consumer so I guess it makes sense that I'd have two opinions.
One thing that really grinds my gears is when input validators are wrong. For instance, I usually do something like `iambeard+nameOfSite@thisIsntMyReal.gmail.com`, but over half of the websites complain that `+` is not a valid email. I like doing this so it basically fingerprints who is passing around my email address to which advertisers. There are two very basic validation routes I'd recommend: 1. `&lt;input type="email" required="required" /&gt;`. Great, now let the browser decide what is a valid email. But, this only works when you're using a submitted form (which you should be doing, but not everyone does, and that's fine). 2. `const isEmail = /.+@.+/;` This is the best check that you can do. Some email providers have strict names (no dots, underscores, caps, etc.), and some (like gmail) allow all sorts of things, including optional dots, and `+suffix` names. In 5 years, maybe some email service will allow `@` symbols in the username. I do think you _can_ do email validation, but I don't think you can do anything with much complexity. The safest bet, like /u/BabyLegsDeadpool said, is to just send them an email. If they can respond to it in some way (ie click a link to activate from the email), then you have a way to manually validate. Definitely don't prevent a user from continuing a form based on the format of their email address, because what is and isn't allowed will most certainly change over time.
JS was built for manipulating documents in a web page, which mostly involves gluing strings of one sort or another together, so most JS implementations are highly optimized for string manipulation. Different environment with a different set of concerns. I dug up this jsperf example: https://jsperf.com/javascript-concat-vs-join/2 On most browsers, just concating strings together is about 4-10 times faster than joining stuff with an array! (Also, if you're in Java-land, you generally want to use StringBuilder instead of StringBuffer, unless you're building a string from more than one thread at once - StringBuffer is fully synchronized, which means it is quite slow by comparison to StringBuilder.)
They don‚Äôt really need to compete directly. Microsoft probably sees Chromium (and I guess Electron) as a tool for cross platform application development and they‚Äôre all about it. They can deliver a good experience to Windows users who keep using the default browser, but they can also use the built in Chromium to develop and improve their own apps on Windows (which will translate to MacOS and Linux). Google has a project (forget the name) that allows webish applications to share resources from built in Chrome instances. For M$, this means less development time, and more opportunity to get their tools onto machines that previously they were basically excluded from because they lagged behind in features and performance (Old Office on Mac lol). It also makes it easier for them to push their cloud based suite of tools, and on desktop they can probably leverage large parts of the web application in the desktop version. Just my thoughts but **tl;dr** they don‚Äôt really need to compete and this means less work for them in the long run. 
Seriously why the fuck not? Just slap a closed source desktop environment on a Linux kernel and call it Windows 11. The only reason I keep windows around is to play Overwatch and PUBG. Linux runs all my other games. Almost free!
I fear the normal MS mantra of Embrace, extend, extinguish. I don‚Äôt know how they‚Äôd do it but I‚Äôm willing to bed they‚Äôll try. 
&gt; everything that Object.keys returns IS an own property of that object, and everything else IS NOT. There is your misconception. Each property also has an enumerable flag that control whether stuff like for..in loops and Object.keys "see" that prop. hasOwnProperty ignores the enumerable flag.
Heya! Here‚Äôs what you missed: `Object.keys()` doesn‚Äôt just return the object‚Äôs own keys, it returns the object‚Äôs _enumerable_ keys. In your example with Error, your object definitely has its own message - it‚Äôs the string 'test' you passed in. However, ‚Äòmessage‚Äô is not enumerable. You can check by calling ``` myErrObj.propertyIsEnumerable(‚Äòmessage‚Äô) // false ```
It isn't neccerily "just a job", it can still be a "job he/she/it/other enjoys". I rarely code or otherwise do very techie things for fun at home these days (it occasionally, usually when I have an "itch to scratch") because I have other time consuming hobbies and doing the same things all day every day can leave you feeling like you are trapped ina rut even if those things are something that you enjoy.
GC has been proposed for WASM for a number of years now, right? Which would probably allow for its use as a compile target for JS code. Not much has happened on that front though, and it can't be used as a replacement for JS until it also has access to the DOM and other browser APIs. So maybe this is good solution that can be delivered while those headaches are figured out, or maybe WASM could be left as way to run C/C++/Rust etc code, which would afford it a certain purity of purpose I suppose. Having three different compile targets for the web would be a bit weird, though, but I guess tooling would be able to make it so most web developers don't really have to think about it.
When I started out I was recommended "JavaScript: The Good Parts" for core concepts. I later found the "You Don't Know JS" series of books, which tackles JS at a more granular level. Book links: * [Douglas Crockford, JavaScript: The Good Parts](https://github.com/NorthPaulo/research/blob/master/Frontend-books%26research/JavaScript%20-%20The%20Good%20Parts%20-%20Douglas%20Crockford%20-%20May%202008.pdf) * [Kyle Simpson, You Don't Know JS series](https://github.com/getify/You-Dont-Know-JS)
Hi, can you help me? how did you use it in next config? how buildid is updated with precache in workbox?
Currently in a pharmacy. The job itself is pretty great but I have a bunch of type A women who feel they need to micro-manage. Theres also not a lot of positive feedback. I'm so done with it. Trying to get into coding
Let me guess - by drastically reducing productivity?
Great, I totally forgot about enumerable. Thanks a lot! 
Thanks for your suggestion.
Thanks a lot, I knew something was off in my understanding of it! 
&gt;Oh, and this feature broke Youtube, they quickly added an exception of course though. This feature included a list of exception sites before it was ever deployed. It was pre-seeded to include sites like Youtube, but was also heuristical and grew to encompass websites you frequent.
It's not a conspiracy with their track record in sabotage.
Chromium is not Chrome. Chromium is open source and developed by many people and many companies. Chrome is built on Chromium. So is Safari. So is Opera. So will be Edge. Google can‚Äôt just decide something that affects all other browsers built on Chromium. 
It's the only software I actually read the release notes, because every release has some amazing feature.
I use Airbnb rules, but strip out all the styling rules that conflict with Prettier manually using this CLI tool : [https://github.com/prettier/eslint-config-prettier](https://github.com/prettier/eslint-config-prettier) Of course I amend it to single quotes and line length of 80, as I am not insane :) Now I save the rules folder and .eslintrc.js file and add them to my home folder so they are universally available in VS Code with the ESLint extension.
It sounds like you're looking for what is usually called a schema browser or schema visualizer. I'm not sure that example with Paris and the closest cities is actually soemthing that's based on a foreign key relation, as presumably Paris and all of the other cities are all in a cities table. And unless every city has a 'distance_from_paris' column, it would be difficult to query the database for the cities closest to Paris, or anywhere else. If you use Postgres and PostGIS you could probably do kind of query. Or a graph database like Neo4j, where the cities could all be connected in a graph with the edges of the graph representing the distance between cities. In writing all of this, I'm not trying to give you a hard time; just trying to make sure I fully understand what you really need so I can give proper recommendations. :)
It‚Äôs almost like we should trust TechCrunch over some random Redditor. Go figure. 
Bingo. It's a job I love. But it's a job. I draw a strict line between hobbies and work.
If it's like Opera or Safari (Desktop) then yes the tools will be virtually the same.
This might sound like a weird answer, but coming from a Java heavy background, I became better at JavaScript by ignoring JS for a while and reading [SICP](https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book.html). Even reading just chapter 1 will get you a long way. In particular, once you finish chapter 3 and understand [the environment model of evaluation](https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-21.html#%_sec_3.2), some of the weird bits of JavaScript like `this` will no longer seem very weird. This isn't the right path for everyone, I know. The book doesn't teach you JavaScript at all. But the concepts you learn are directly applicable to JS, and will probably make you a better JS developer. But the book is a pretty tough slog to get through, which is a downside. If you're looking to get up to speed with JavaScript immediately, it's probably the wrong choice. I just figured I'd mention it in case you find it useful. 
That's a really cool idea. I always assumed that eventually we'd just be compiling JS to WASM, but given the amount of time it's taking to bring WASM up to feature parity with JS (DOM access, GC, etc) I can definitely see how a JS-specific binary format might make sense in the interm.
Try Mosh's JavaScript courses on Udemy
W3c school is free (not the best; but free) 
Start with w3school.com
Oh Burn!! I was going to go with TDD being over-engineering by itself :P
Ya may be, will think about it next time
Ya you may, if you work on it 
Hey mate. &amp;#x200B; My advice is to start with W3c for the basics. After that you could try a code academy course or for some advanced stuff check out Wes Bos's courses on ES6 (payed)
This sounds much more like you need a task runner than a bundler. Consider looking into Gulp.
This post was removed due to our / Reddits rule about excessive self-promotion. If I see another post promoting your service as shamelessly, I'm banning the domain. Thank you for your understanding!
You really don't add anything when you add semicolons, either. It's not like adding semicolons will make your code any better. Not using semis is clearly an abuse of automatic semicolon insertion, but so what? The net result is essentially the same with or without semis. If it's a convention you're not comfortable with breaking, fine. It's certainly not a bad habit, and habits are hard enough to break that one probably shouldn't concern oneself about breaking habits that aren't harming anything. Personally, I really do find that avoiding unnecessary semis makes code more readable. I've heard people say semis are like a period at the end of a sentence. To me, they read more like a comma at the end of a sentence fragment. Just as a sentence with too much punctuation can be difficult to read, so too can a code block with many expressions terminated with a semicolon. At least, that's the case for me, and for many others.
The original phrase is not ‚Äúthe pot is a hypocrite because he‚Äôs black too.‚Äù It‚Äôs because the kettle is so shiny and polished that the pot is seeing its own reflection.
[This was pretty helpful](https://www.udemy.com/understand-javascript/), it usually costs $10
Ah, well, that's an interesting tidbit I didn't know :) The point is the same though: just because the pot is black itself, that doesn't mean that even a shiny kettle cannot be black itself. Or to jump back out of the metaphor: just because Microsoft used to set their own standards and forced everyone else to follow, doesn't mean that Chrome won't do the same.
Backwards compatibility to support decades of bad ideas that were integrated into production software.
This is actually a fucking interesting idea...
&gt; support it within Dojo once it is an option. TIL Dylan and Dojo is still a thing. 
Holy sh\*\* :O! Commit your 600+ changes :O.
Rumors confirmed. Eh. Fine. 
&gt; hands over control of even more of online life to Google Can anyone explain how the open-source [chromium engine](https://en.wikipedia.org/wiki/Chromium_Embedded_Framework) gives control of online life to google? Other than that point, the rest of this gloom and doom is just a pitch for the last paragraph where they tell you to sign up for their [failing browser](https://imgur.com/a/GdiKJdn). The fake outrage is so obvious, their competitor just unlocked a power weapon and can now compete in the same space as google.
While I agree that competition is healthy, IE/Edge haven't been competing, so exiting is a good thing from my view. It's done nothing for me my entire career other than slow down development significantly, and users don't give a fuck.
stop wasting your time at this. thanks.
Basically when all you needed to have everyone on Redmond take up arms against you was whisper the word "Linux", not everyone had internet, broadband was a pipe dream and computers were (up to a point) mostly used / tinkered with / considered part of a house by enthusiasts. So, yes, MS was asserting dominance. After some point, when web 2.0+ happened and when Apple used an elegant way to put internet in peoples' pockets, the whole "proprietary OS / fat client programs" paradigm started waning. Node, Electron, Azure, web "apps" were direct consequences of internet use becoming kinda hassle-free-ish and semi-ubiquitous.
`divOneObject = $('#div-one');` is a reference to the jqeury object, so writing `$('#div-one')` again, is basically the same as writing `divOneObject` `$('#div-one').html('&lt;p&gt;This has replaced the lorem ipsum text.&lt;/p&gt;')` is just changing what the html for `#div-one` is. You could do something like, store the html and replace it, instead of the object. var divOneObject; $('#change-html').click(function(){ $('#div-one').html('&lt;p&gt;This has replaced the lorem ipsum text.&lt;/p&gt;') }); $('#btn-set').click(function(){ divOneObject = $('#div-one').html(); console.log(divOneObject); }); $('#btn-reset').click(function(){ $('#div-one').html(divOneObject); console.log(divOneObject); }); I would recommend trying to learn javascript without jQuery at first, but it's up to you. if you stick with jquery though, i recommend storing `const divOne = $('#div-one')` as a variable instead of writing `$('#div-one')` all the time. each time you do `$('#div-one').someMethod` it's searching the dom looking for the element. To do this without jquery const divOne = document.getElementById('div-one'); let divOneHistory; document.getElementById('change-html').addEventListener('click', changeHtml); document.getElementById('btn-reset').addEventListener('click', resetHtml); document.getElementById('btn-set').addEventListener('click', setHtml); function changeHtml(){ divOne.innerHTML = '&lt;p&gt;This has replaced the lorem ipsum text.&lt;/p&gt;'; } function resetHtml(){ divOne.innerHTML = divOneHistory; } function setHtml(){ divOneHistory = divOne.innerHTML; }
Enabling it just blue screened my windows comp and corrupted my HDD. Good times. 
Yea, it may look weird but is kinda valid. The problem is that \`0\` cannot be destructed to \`\[,, abv\]\` and that's why it throws error.
You had been reported to the w3c
&gt; You can make terrible but literal privates (with function scopes)
From my experience it depends what kind of company you want to work at. Typically but not in all cases Angular is popular with large corporations and for smaller companies React and Vue is more popular. If you see yourself working at larger companies I would go for it. If you do go with the Angular job, you'll also pickup Typescript which is quite a valuable skill.
I'd take the Angular job because it's going to give you much better experience. You can obviously continue to look for a React or Vue job while you're earning income.
Thanks u/captain_k_nuckles. That makes perfect sense! So I was not storing the object itself but a reference to the object. Therefore when the reference was called, it got the latest state (or current state) of the object as opposed to the previous state. I have amended the script and it has sorted the problem out! Thank you very much again.
I'd say take the job. It's not like Angular experience will be useless. It'll let you add lines like "Experienced in building complex, component based SPAs with serverless backends" or something like that. So moving over to work that uses React eventually probably won't be too hard. Sure, there are some places that want you to already be a rockstar in the *exact* stack they're using. But in my experience, that's not the majority of them. And regardless, Angular + serverless experience will probably get you a lot closer to where you want to be than staying where you are now. Also, it's not the absolute popularity of Angular that is most important - it's how much Angular work is available relative to the number of people who have the skills to get the work done. React is very hot right now, but there's also a massive amount of competition. There are a ton of skilled React developers, and a ton of bootcamp grads entering the market with React as their primary skill. So while Angular is a much smaller pond, there are also far fewer fish. 
Thanks for your advice. This is probably what I'm going to do. 
That's the problem. We *don't want Firefox to fade away*. If it does, Chromium becomes the only browser and webkit the only renderer. Remember when w3c was basically forced to define a standard for DRM? When chromium is the only browser implementation, suddenly all standards depend on it. Oh by the way, ad blockers are now broken forever, and you can only use extensions from the Chromium Store‚Ñ¢ and no, you do not get to skip ads. Firefox is the only browser that allows extensions on Android by the way, and it's not due to some technical limitation.
 The framework you use is way less important than you think.
1. They thought that by having their own browser top to bottom, they could differentiate it and that by adopting something like Chromium they'd lose that ability. I think they've since realized that differentiation under the hood is either not something they were beating the competitors at or not a real selling point for mass market users. 2. With Windows 8 they were pushing native apps that ran basically in IE containers, so I think they were looking strategically at their browser not as a program for viewing websites, but as a fundamental application API to Windows. In that lens, the risk of adopting another browser engine is that changes to that engine made by others in the community might place substantial constraints on Windows itself. But I think between the time of Project Westminster (Windows and app store gaining the ability to gobble up websites as apps) and when the PWA stories of Google and Microsoft merged, Microsoft started to see a value in losing some control of their app platform in order to ensure the ability to attract developers. Just like how collaborating on PWAs with Google made sense, adopting Chromium does as well. They both substantially increase the selling point of targeting a Windows-compatible platform in a time when app stores are severely competing with it.
SHOW ME THE PRICE. Is this cheaper than having a server?
Take the Angular job. Framework popularity shouldn‚Äôt matter on your resume - experience does. You will also then have the ability to objectively analyze and speak to the differences between the two toolsets. I‚Äôd *much* rather see Angular on your resume than vanilla JS scripts for marketing sites. I‚Äôve interviewed hundreds of engineers in my career and seeing vanilla JS, Angular, and your spare-time React projects on your resume would only be a good thing in my book. Basing tool usage on popularity is a huge red flag to me in interviews - that is not objective decision making when picking development tooling. 
lol...the *standards body* w3c? Please tell me you aren't being serious...how does one report someone to something like that? ...you sound more insane by the minute.
Having framework experience on your resume is valuable. Which framework matters less as you can generally transfer skills between them. There'll be some learning, but if you handle 1 major framework, you can probably handle any of them.
No,. we had four (rendering) engines (Presto, KHTML, Gecko and Trident). It was just that one of them was very dominant.
You should watch a video from creator 'Angular Firebase' on youtube. He dismantles that Javascript survey you mentioned and explains how Angular is still popular and the survery was con conducted as well as it could have been. 
Thank you for these points, they are well said.
Well, they already ditched the legacy requirements with Edge and its EdgeHTML layout engine, which abandoned active x, browser helper objects, all the old IE quirks etc. My question is really around why did they bother to develop EdgeHTML instead of just using Webkit or Chromium for the layout engine.
Just server side rendering the html that was supposed to be rendered on the client side, which before all these client side rendering explosion shit about 10 years ago was already rendered on the server in the first place when web servers were created. Nothing weird happening here. I'm waiting for the next wave, when the serverless rendering job will be delegated back to the client side again. You may ask how? Simple: Now that we have wasm at our disposal, we should compile Node to wasm, and push it down the client and bingo: serverless in browser. Nothing weird happening here. Just normal Javascript community disorders where Javascript developers have that phobia of hitting the end of new shiny stuff, which means back to writing boring code. With reinventing the wheels, we can always rewrite, instead of getting shit done. The former is always less boring on a blue Monday morning.
Thanks, I will.
Few things: * Chromium runs on Blink, which while originally a Webkit fork has changed dramatically. * Webkit itself runs on Safari, meaning even without Firefox there will still be two major renderers. * The DRM standard was a *good* thing. If it didn't exist, there would have been 50 different plugins you had to download to watch videos. DRM isn't going away. This would have heavily favored industry giants (YouTube). * Chromium is, in of itself, a browser and open-source. It would be arbitrary for the community to fork it if Google did bad things. I'm fine with being diligent about ownership of markets, but not at the expense of honesty.
whats the syntax error?
FeedPet and RestPet functions doesnt has the close '}'
&gt;Oh by the way, ad blockers are now broken forever, and you can only use extensions from the Chromium Store‚Ñ¢ and no, you do not get to skip ads. Chromium is open source
I heard edWisor provides good learning skills in JavaScript along with other related frameworks such as Angular, Express etc. for a developer role along with job opportunities.
This is great advice, thank you!
I hope Firefox doesn‚Äôt submit. Choice is good.
Current window linux is garbage
also that state of Javascript survey has been shown to be extremely biased. In the business development world outside of silicon valley Angular is king for greenfield projects. Angular is pretty new it has way more out of the box than any other framework. 
&gt; not at the expense of honesty That's what gets me about this mozilla announcement. As you say, it's just dishonest.
You should take this opportunity to read up on byref and byval interactions, especially in JavaScript.
Make sure you like the people you work with. You can work a shitty job but be content because the people there are great. On the other hand, the best job in the world will be a grind if you're surrounded by arseholes.
I recall reading in the IE blog back in the day that they had invested a lot in the internal HTML parser in Trident and as such they wanted to keep that as they built Edge. I think as they pushed ahead they got Edge into a much better place, but Edge never managed to claim the browser share from IE. Speed wise I think Edge was great, but for me personally I could never accept the UI. It was flat to the extreme, drop downs didn‚Äôt feel like drop downs with hideously thick borders, Auto-linking phone number like values to links to make Skype calls failed hard, no support for plugins, (a terrible built in PDF viewer) and a lack of settings/control just didn‚Äôt let me feel like I could call it ‚Äúmy‚Äù browser. Sadly as a web app developer... many of the bugs in IE transferred over to Edge. I still hope for a multi vendor, multi engine web world. 
Look at that: [https://www.youtube.com/watch?v=s-G1m23Emlk](https://www.youtube.com/watch?v=s-G1m23Emlk)
No syntax highlighting for AppleScript... Besides that, I'm personally quite impressed. I was expecting a lot less, but I enjoy the minimal design and simple, intuitive interface. The left panel could be redesigned - the button effect is dated, and it occupies an entire column length of the page for just a handful of elements. I like that you don't have to log in, which is always a chore. In your view, what's the advantage of this over other pastebins out there ? Or what makes this different from the others, apart from its lack of AppleScript syntax highlighting ?
And why would he should have done any different?? MS is a software company,which makes money from it's software,why would thry want it to be open source? I think one just needs to look at today's landscape of OSS and all thst naivety of free code for all goes away pretty quick. Majority of companies pushing OOP are either consultancy based or their core product isn't software product as such. For Google,Facebook and others OOP became a free labour source and a R&amp;D department,where idealistic devs contribute to their projects( used internally for commercial gain),. which should normally be paid work.. CEOs couldn't have dreamt of a better situation. Even today, anything MS pushes is purely to market it's own products,such as Azure.Another example is JetBrains,that created their own language Kotlin,which isn't their product, but IntelliJ IDE is and guess which is IDE is best( or very good) for Kotlin? The more Kotlin grows,the more money they'll make from selling IDE.
Yup, ActiveX, XML Data Islands, VML, VBScript, DHTML Ugh... I think I need a shower.
I'm as excited to not have to deal with MS's rendering engine as the next guy, but how is this fake outrage? Mozilla has always stood up for diversity in the web space.
Use an API, if you scrap you have to rewrite your code on small design changes. Also an API is faster because it only loads the needed part and not the whole website.
&gt; Current linux is garbage. FIFY
Thanks for the feedback :) I'll add AppleScript highlighting support. I think the main difference is in not only the simplicity of the design, but the way in which you can communicate code with others. For example, you can password encrypt your code share so that the receiver must enter the same password to view it. You can also mark the share as removable by the recipient, so that if need be the receiver can delete the post when finished. This works well when sharing information between yourself and another that you don't want out in the world after the recipient has seen it.
Thanks again for the feedback, I've added the AppleScript support you requested. I'll also revisit the design of the left panel. If you could, what specifically stands out that should be changed design wise?
Not bad. Few things. SSL not secured error should be resolved. Auto indent when creating body of function would be nice
Hey folks. I just found the rules for this subreddit (I am new to Reddit, apologies) so I wanted to make it clear: yes, this is self-promotion. I don‚Äôt intend to make a habit of it but I wanted to share this and I was told this was a good place to do it. Alfie is our tribute to the joy of JavaScript. We hope you like it. üôÇ
TypeScript is fantastic also.
I've done nothing but Angular my entire dev career, and I make a pretty decent income, working from home. The need for Angular devs is huge. The need for competent Angular devs is even bigger. Don't screw yourself out of an opportunity because of a stupid survey.
Let me get back to you on that. Thanks for adding the AppleScript syntax highlighting. Now I'll definitely give it a proper go.
The fact that Angular isn't that popular according to some fancy survey clearly isn't an issue, since you have an actual job offer that uses it. If you hadn't the offer, it would probably be better if you learnt Vue/React and started looking for job, but you already got offered to work with Angular, so what gives if the survey says that it's not popular? It's clearly popular enough to land you a job. Also, it doesn't really matter the framework, since it's all JS, once you get the hang of Angular (even better, while getting paid for it), learning another framework will be piece of cake. It will also take you career to a whole new level, getting more proficient with JS and gaining more knowledge. tl;dr: Go get the job.
Thanks for the feedback. I'll check into adding auto indent. Right now I have shift + tab handling indenting. I'll also take care of the SSL, it's just a bit pricey and I wanted to see if this was at all useful before taking the plunge. Thanks again :)
Awesome! Thanks :)
When you recruit you get a ton of people who seem to have experience, but don't. That's why a decent technical phone screen is important - you waste at most half an hour.
Thanks. Others have also mentioned that the survey isn't such a big deal, and I agree. I just wanted to hear what other developers think about data like that. [u/FNTNBWIH](https://www.reddit.com/user/FNTNBWIH/) mentioned a great video by a YouTuber called 'Angular Firebase'. In the video he talks about why the survey isn't entirely an accurate representation of reality.
I've added the ssl support, the url is now accessible as: https://code.collaboradev.com Thanks.
Don't get caught up in the churn. Angular Vue React all that crap comes and goes. If you are concerned about it being relevant or something keep in mind Angular came before Vue and React and is still a much sought after skill. A lot of companies made huge applications in Angular and need people to maintain or update them to Angular 2+. General JavaScript and web knowledge is more valuable than framework specific knowledge also IMO
Am I to understand you have created a lite clone of pastebin? I'm not seeing anything about it that stands out, that is original to your site. About that sensitive data option, there are many ways you can copy it. "If you can read it, you can copy it". It seems buggy. In chrome I typed some random letters shared it, went into incognito mode and opened it. So far so good. How ever I repeated with new random letters, used the sensitive option and encrypted it and shared it. Opened it in incognito mode and it showed me the previously shared text instead of requesting for password and such to open the new shared text. Am I doing something wrong or is this a bug? Other than that, good work. Cloning is a good way of learning.
It sounds like this would still be much heavier to send over the wire than WASM bytecode. But in a lot of situations parsing time is more of a problem that network time, so I could see how it would be helpful. &amp;#x200B; Looks like this proposal has been around in some form for about a year and a half, mind. Talking it up as an interim solution only makes sense if it's actually going to happen...
Try this: [https://github.com/getify/You-Dont-Know-JS](https://github.com/getify/You-Dont-Know-JS)
You can get SSL for free with lets encrypt and cerbot - https://certbot.eff.org/
Next, you should configure http auto-redirect to https
On the bright side, at least you get to use Typescript.
I'm not seeing this "huge" difference https://jsperf.com/with-braces
I wasn't aware of that video, and i'm glad i wasn't mistaken about the survey not being as important or accurate as the actual job market data so yeah, go for it and don't even think about looking back. Also, serverless architecture is an absolute yes, it's getting really popular even in small companies so if you can get to learn that kind of stuff, it'll be a huge plus for your resume lol.
Hi, thanks for the feedback. I wanted to create something that wasn't exactly a clone of pastebin, but something that had some of the same features along with some rather new ones as well. For example, the ability to password lock your shared content as well as the ability to allow recipients to remove the post if needed. This lends itself well when sharing private code between yourself and an other. Regarding the chrome issue you described, try this. Create your share, encrypt it, then open a new window and paste the url. The content isn't cached so if you're seeing content in the window that's what's being shared out. You may also want to verify that you're not pasting into an already open window. If you are, you may need to refresh being that this application uses "#" (hash url). Thanks.
Hi, I just checked on the JavaScript syntax and I see the auto indent working. Which code syntax were you using where the auto indent wasn't working? Thanks.
Done :)
Actually, this is really good feedback. I think I'll check the "#" to "?" so that the issue you've described no longer happens. Thanks.
Done, the application now uses "?" in place of "#". The issue you've described should no longer happen.
[From MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description): &gt; If `undefined`, a `Function`, or a `Symbol` is encountered during conversion it is either omitted (when it is found in an object) or censored to `null` (when it is found in an array). 
Windows &gt; Linux üò≤üò≤üò≤
/r/ComedyCemetery
Here's a sneak peek of /r/ComedyCemetery using the [top posts](https://np.reddit.com/r/ComedyCemetery/top/?sort=top&amp;t=year) of the year! \#1: [Deadpool is becoming the Minions of nerds.](https://i.redd.it/fo7h2vv259z01.jpg) | [1306 comments](https://np.reddit.com/r/ComedyCemetery/comments/8l32qv/deadpool_is_becoming_the_minions_of_nerds/) \#2: [i swear if im gonna see this same post uploaded here..](https://i.redd.it/st5jcer2dp911.png) | [386 comments](https://np.reddit.com/r/ComedyCemetery/comments/8yj8wv/i_swear_if_im_gonna_see_this_same_post_uploaded/) \#3: [Justice for Adam](https://i.redd.it/ft6nw7rwcjr01.jpg) | [708 comments](https://np.reddit.com/r/ComedyCemetery/comments/8bta5w/justice_for_adam/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
The Linux part of it sucks but the desktop part is pretty good.
It doesn't explain why `null` is treated differently than `undefined`. Having a key without a value is a totally valid situation. To change the shape of an object while converting its type is an asinine step.
More power to Google/Chromium means more power for them when introducing standards.
How did you sandbox the javascript? Couldn't escape it, but I'm a bit of a newb!
https://trends.google.com/trends/explore?date=2016-11-07%202018-12-07&amp;geo=US&amp;q=react%20js,angular%20js,vue%20js
FUCK THOSE MOTHERFUCKERS PULL EM OUT BY THEIR FEET AND STAB OUT THEIR EYEBALLS THOSE FUCKING BITCHES. DIE DIE DIE.
There is no difference in scope between your two examples 
I've recently been getting into Vue.js and noticed that the Shopify Storefront API doesn't have any examples in Vue (currently they have React, Angular, and Node) so I created this project. I would love any feedback as I'm just starting out with Vue.js
Chromium is a browser. Blink is the rendering engine.
[Simple Hangman game (my first 'project').](https://github.com/merkur0/JS-jQuery-Hangman) Bring it on and have no mercy!
Oof good catch don‚Äôt tell anyone.
I just called all my friends and told them. You‚Äôre fucked dude.
Oh my god my reputation
Dunzo 
hmm yeah i see what you mean. I edited the OP to clarify that it must just be Leetcode's interpreter/engine
i know there's no difference in scope. there's a difference in how the scope is defined however. it just runs faster on leetcode, it must just be a quirk of how they interpret/compile/run the JS
Ahhh... When you're waiting for the back end team to finish the rest of the project. :P
is the event firing for the icon and then the button when it bubbles up? if you remove the icon do you get the double events?
Yep, Im still getting the double event even if I remove the icon. It's got nothing to do with the icon, which I also figured out by printing event.target to make sure I was clicking the button, not the icon.
ES9 is not a thing.
Create a function in javascript. Then when you press enter key between the two braces('{}'), it does not auto indent.
You're right. It's not only a thing, it's a life choice :D
Because the [original spec for JSON](http://json.org/) does not understand `undefined` bot does support `null`. Remember in any case that JSON is not, despite the name, the same as JavaScript's objects notation, but a subset with particular restrictions. Transformation from one to the other _are_ bound to have at least some friction.
I'm not super familiar with jSFiddle and so debugging in it is a bit weird, but the problem is that your addEventListenersToNotesButtons() function is adding event listeners to every button every time. So you are adding a second event listener to the first button when the second button is created. Let me keep looking at it, but I think you will need to pass an element or selector to your addEventListenersToNotesButtons() function so you can target just the buttons you want to add the event listener to. 
you attach event listeners every time you add a new item calling \`addEventListenersToNotesButtons\`. calling \`$('.editNoteButton')\` will attach event listeners to all matching elements. so the first time it adds to item 1, the second to 1,2, the third time 1,2,3. leaving the first item with three listeners. You have to ensure that you are only attaching the listener to the most recent element eg. \`$('.editNoteButton').last()\` or attaching an listener on a wrapper element that exists on dom load (and will not be removed) using \`$(''#notesBox').on('click', 'editNoteButton', function() {..})\` there you have to figure out which note was called.
The issue you are having is that you are creating choice2 as a multidimensional array UNLIKE your first choice... Ie: Choice2[1][0] = 'hat' Choice2[1][1] = 'cap' Choice2[2][0] = 'pants' And so on... So your "choice2" random number is selecting choice2[random] but not randomizing for the second dimension... Sorry if my example code is not exactly correct because I'm writing on my phone and can't see your code at the same time .. but hopefully this puts you on the right track - lookup more on multidimensional arrays and you should be able to get it... 
You also need to return value from your functions "return value;". AND "var value - "should be "var value =" or just "return " and then the random selection of a value from the array...
This was the issue and using jQuery's last() method works like a charm. Thanks!
I can see that now, thanks!
Another thing you could do is use this a good practice for object oriented programming. You can create a Note object and a NoteList object. You instantiate one NoteList and ask it to create a new Note for you each time and add it to its list. Note can then have a constructor that handles most of what you are doing now in your .click callback. Note can also hold references to its buttons and you would tell the Note to edit itself, mark itself as done or delete itself form the NoteList. These are just ideas. A simple project like this is a good place to start with OOP principles. 
Yeah I actually thought about this too while I was coding this but I figured I'd just try to get this to work with whatever knowledge I have now and once it's done I can dive more into OOP and basically build it the better way.
Makes sense. Glad you got it working. Keep up the good work!
I love this gadget, see my tweets [https://twitter.com/theNeomatrix369/status/1071168508854222848](https://twitter.com/theNeomatrix369/status/1071168508854222848)
Probably vm2
Edge will be made cross-platform. Surely.
Original tweet - [https://twitter.com/\_MattWay/status/1070965320393707520](https://twitter.com/_MattWay/status/1070965320393707520) &amp;#x200B;
Original tweet - [https://twitter.com/\_MattWay/status/1070965320393707520](https://twitter.com/_MattWay/status/1070965320393707520)
&gt;I still hope for a multi vendor, multi engine web world. Provided that the major engines aren't woefully deficient in implementation. For a long time, Edge didn't implement the disabled property on html buttons. I mean c'mon. That's not even remotely a minor bug, that breaks a ton of stuff. I'm all for diversity on the web so long as the major players take the task extremely seriously. In the last decade, even including Edge, I've never gotten the impression MS really did that, at least not as seriously as Google and Mozilla and Apple do.
You're welcome to hold those opinions, but you'll find yourself antiquated for dismissing the research and findings of modern technologists and programmers. There are benefits to server-side rendering, and benefits to cloud-based infrastructure. I'm sure you know that. :P
From the page: &gt;Our goal is to do this in a way that **embraces** the well-established open source model that‚Äôs been working effectively for years: meaningful and positive contributions that align to long-standing, thoughtfully designed architecture, and collaborative engineering. Together we seek the best outcome for all people who use the web across many devices.
Wtf
stack overflow 
NYPA
Check out this post: https://stackoverflow.com/questions/37848494/is-it-possible-to-control-the-camera-light-on-a-phone-via-a-website If that doesn‚Äôt work you might have to use something like Cordova. 
Tip: it's pretty much universal that if you: 1) Format your code readably, preferably indented properly, and 2) Describe the problem you're having and what you've already tried to fix it you will more likely get an answer - if you don't answer it yourself in the process of formulating the above.
Or when you're the backend team and the waiting for the front end team to get their damned input correct
Hi, thanks for this. I think the reason it isn't indenting in that specific case is because the cursor is on the new line directly in front of the '}' character. I noticed that when I type the following it works: function(){&lt;hit-enter&gt; I'm not sure what I can do about the specific case you've cited. Thanks for letting me now about it either way. If I come up with a solid solution for it I'll implement it.
Start with Codecademy! I like their platform, and am learning javascript through them. It's free, too. 
THANKS SO MUCH.
yep, braces were missing. thank you for the help it works now.
I don't think you get it
upvote for using MongoDB
My favorite is [http://jsonplaceholder.typicode.com/](http://jsonplaceholder.typicode.com/)
Yeah, dont even dare to touch my front-end then, you back-end pesant! :-D :-D &lt;3 Cheers buddy
an overengineered development strategy is not the solution to overengineering code
Sorry for the delay, had trouble logging into Reddit. Subscriber: [http://reactivex.io/rxjs/class/es6/Subscriber.js\~Subscriber.html](http://reactivex.io/rxjs/class/es6/Subscriber.js~Subscriber.html)
What do you expect, the guy refers to himself as a "DeveLover."
I need this thing's grid brother.
Of course time wasting is bad &amp; if u think so
https://scrimba.com/g/ghtml Hands down the best, you can interact with the code in real time. 
Try looking into .cshtml
If the REST api you're calling allows cross domain then it's possible. I think it's a cool idea to use a Webcomponent for this! Sorry I haven't got much practical experience with webcomponent frameworks. 
You have to get good at breaking problems down into smaller problems. And then arranging everything together to create a solution. Math is also often like that.
personally how you increase your problem solving?
I solve simple problems. Then I try to spot the same simple problems as sub-problems of more difficult problems. 
I genuinely enjoy it. I've even come to love many of the language's quirks. But I do it for 8-10 hours a day. There's not much drive to do it at home. I've been doing more rust/python at home these days. I'm garbage by comparison at both of them, but I think that's part of the fun.
Yes, an excellent resource I've found is, _You don't know JS_ by Kyle Simpson. The easiest way to not get bitten by the "weird" parts is to learn about them!
I would look into the canvas API on mdn. There you can read up on canvas‚Äô fillText() and strokeText() methods you‚Äôll need to draw text onto the canvas. Then to clear the screen of text to display something else you can use fillRect() to draw a rectangle the width and height of your canvas object the same color as your original background color. You set the color of this rectangle by setting the fillStyle property to, say, ‚Äòwhite‚Äô for a white background before you use fillRect(). Sorry if my explanation is unclear I‚Äôm also currently trying to learn JS.
I just googled 'numpy javascript' and found this for you which claims to be simillar to numpy: [https://github.com/nicolaspanel/numjs](https://github.com/nicolaspanel/numjs) &amp;#x200B; Not sure if its the best though
I was mainly making a joke. 
for me its just practice to be honest. ive written tons of bad code in the last few years, but I feel that every new file I write I start to write it a bit better. Still far from perfect lol, but I would definitely say I've gotten better. &amp;#x200B; IMO just start working on stuff that interests you and youll improve over time.
Libraries exist, as /u/ns_helloworld showed you. But for a lot of what it does, numpy is a python wrapper over C and Fortran, which happens to be a language designed for this purpose. Depending what you're doing exactly, you may never manage acceptable performance in straight Javascript.
A canvas isn't generally a great candidate for text output. A plain old &lt;div&gt; element will do and you can style it easily with CSS. Use element.textContent to output text into that element. Use a &lt;textarea&gt; element for input. You can accomplish basic text input &amp; output with a [few lines of code](https://flems.io/#0=N4IgZglgNgpgziAXAbVAOwIYFsZJAOgAsAXLKEAGhAGMB7NYmBvAHgBMIA3APgB00ABC0YAPYhgBOMDAIhsAvLxAQ0ABwCuxJdxYB6UeKkY+aPRx792XEwKEAjTcXqyFSuOrtYIWkNwDKHl7Eeg7ETmgmZtaW5i6KILSaGj4C1FAYcHDxicTJ2lEWaJQgcDCw1MQQ9AiIIABsiADMAAwgAL4U6Ni4tfgAVghUdAxMxHjDcMSyapoC8gJstNTqOAz4AOYwxACisKvEAEIAngCSbAAUAOQqyZcAlPwTUznJcwtLK6MbW7sw+8dnK4vTT3R7VKahcJvRbLfbfHZ7UYAi6XdyebygtD8MDqNAVKqCADuEm8MAAMioYAJzpMJHcBMB+LZgcR8AYAML0RgMAQAanmtL5AkuvH4IrQbX4-Eh9HwGDYbG2nFGFMmTBgEiuaQg1AA1pcKNT6fJuAymQJiaSKWgYOcbpp8JwMFB1DAHoJpslHc7XW9LuK2u72p0QJgcHh8NRMsVhtyxr0WWaPVhJOsVABaJyqRACACMfwA3Oa7LQJGwNTmAMSNGt51QiARwWhQORFj2Ewik9NwVQYagwHOqKTpls2-htYqlcqVap4RqIABM7QAum0gA). Maybe you'll wanto to build the output out of paragraph elements instead of just appending to a string. Then, sure you'll need to use more `createElement` calls. Pretty much any GUI system requires something similar.
[ml-matrix](https://www.npmjs.com/package/ml-matrix) is useful if you need to work with complex numbers.
React and Typescript is a thing too, but perhaps not so widely adopted yet
1. It really depends on the complexity of the component. If it is fairly simple, I would recommend just doing a completely native web component, since it won't have to carry a library with it. If you want the sugar from those libraries just for data binding, I would recommend lit-html or hyper. Any would do fine, but which one depends more of what features you want to use. 2. It is, though you have to work with your environment a bit sometimes to get it work. I would say just try it, then google any specific errors that pop up. 3. You didn't have a third question, but I just wanted to say web components are awesome. Good choice for something like this.
Who are the haters?
If your goal is basic javascript, you won't need to pay for anything like Udemy. Codeacademy freeCodeCamp are great and free. There is an incredible number of free resources that teach it pretty simply. MDN is always great for documentation when you get stuck.
"Sorry if my explanation is unclear I‚Äôm also currently trying to learn JS." The best advice with regard to learned skills often comes from people who aren't knee-deep in the academia and jargon. Your explanation seems solid to me and I very well just might implement it. Thanks.
Formatting your code and explaining in greater detail would help us help you, a lot. This may not be the issue, but it does look like your first return statement (in the 'if') returns a Promise.resolve, which is fine. Your second return returns a Promise alone. If you are calling this synchronously, and the second return gives a Promise, then whatever tries to use this function will get the promise, not the user object.
That's some nifty little code you got there! This has cleared up a lot of issues for me. Thanks for the tips!
This has been a forecast of my team‚Äôs bickering over the next 5 sprints‚Äîbrought to you by StackoverflowCareers.com‚Ñ¢Ô∏è
Thank you let me check lit or hyper first. As you said I will google as well , but would like to check with someone who already worked and faced issues.
don't go looking into canvas. [https://codesandbox.io/embed/1vx13q7r84](https://codesandbox.io/embed/1vx13q7r84) created small example how I would start with this, hopefully you find it useful
A lot of people (devs) struggle with finding what is the actual problem before solving it ... just my 2 cents to think about
&gt;Lower menu buttons should show up only if element is minimized. They just clutter up the space if the window is small. Thanks for your advice. An option has been added to show buttons only if element is minimized. You can get a preview here: [http://az.ht/ui/build/curr/window.html](http://az.ht/ui/build/curr/window.html)
If you want to check if the name starts with "Jane" you can do `name.startsWith("Jane")` Also, I'd suggest using the built in array filter method https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter 
I just have a little time today so... only one small thing -but which may give you ideas to look for similar situations. It's about _global variables_, particularly about [this one](https://github.com/merkur0/JS-jQuery-Hangman/blob/0f6b0da733c8902fef12654c230d1f0b1112b876/script.js#L6), `contains`. If you look at it closely, you'll see that `contains` is: - [defined](https://github.com/merkur0/JS-jQuery-Hangman/blob/0f6b0da733c8902fef12654c230d1f0b1112b876/script.js#L6) as a _global variable_, - only ever [written to](https://github.com/merkur0/JS-jQuery-Hangman/blob/0f6b0da733c8902fef12654c230d1f0b1112b876/script.js#L172-L184) in function `checkLetter`, and - only ever [read from](https://github.com/merkur0/JS-jQuery-Hangman/blob/0f6b0da733c8902fef12654c230d1f0b1112b876/script.js#L127) in function `playLetter` after having called `checkLetter` first. What does this mean? Why is it relevant? What am I getting at with this? Well, what this means is that `contains` is actually the result (one of the results, I know) of calling `checkLetter` and that result is of concern only to the place that actually calls `checkLetter`. But, as a global variable, it is still open to some other piece of code modifying it for whatever accidental reason. This means that `contains` would be better communicated as a return value from `checkLetter`, and that in `playLetter` that result should be kept locally. Something _like_... function playLetter(letterID, gameMode) { var contains = checkLetter(letterID); // ... } function checkLetter(letterID) { var contains = false; // ... return contains; } ^(I'm aware that a similar argument could be said for `lettersCorrect` and/or `positionsOfLetter`, but as a first step focus on returning `contains` as those others have a little more complication.) On a related note, a similar thing can be said about other _global variables_. Some of [these](https://github.com/merkur0/JS-jQuery-Hangman/blob/0f6b0da733c8902fef12654c230d1f0b1112b876/script.js#L1-L7) are clearly only the concern of one or two parties. In general, you have a number of functions reading some global variables and receiving no parameters at all. This should generally be a sign of warning to you and make you think that _maybe_ -but _probably_- this could be better written by passing that as an argument. Try to avoid having globals... as much as you can. Some people may tell you to even avoid them completely and while that's a _generally good_ idea, for now I'd recommend to avoid them "as much as you can".
My mistake, I read it a certain way. I am curious about what you thought of the article.
Interesting
Generally you can't. People are born with cognitive capacity as innate trait. Where there numerous studies and even attempts, like luminocity training, it failed to change anything. You can learn how to approach problems correctly, to utilize IQ, but your IQ itself cannot be increased. Frankly it only decreases as the years go, and best tool to prevent that is not constantly keeping your mind occupied, but physical training, keeping blood flow to the brain healthy.
Best üëçüíØ tip
I think many developers overlook how important physical training is for their job. Especially one turn 30.
Numeric: [www.numericjs.com](https://www.numericjs.com) or [https://github.com/sloisel/numeric](https://github.com/sloisel/numeric) Numbers: [https://github.com/numbers/numbers.js](https://github.com/numbers/numbers.js) &amp;#x200B;
S√≥ THATS why Chrome has been going to shit with every update. I get it now.
That looks insane! Great work
The Net Ninja and watchandcode are good. I prefer more the net ninja since he has other learning tracks
Care to elaborate? You have already setup formspree that should send you an email with all the details the user fills in. You email them thereafter. You can also set this up the old fashioned way by using one of the contact forms if you have a server handy or you could also use a service like Netlify that provides feedback collection at no cost.
Make a calculator or weight converter. 
Often, it's best to create an HTML/CSS version first then you add JavaScript. Here is a thread I wrote that describes the process: https://www.reddit.com/r/javascript/comments/a3egay/how_to_start_your_very_first_portfolio_project/
This is really cool
i don't think its the correct subreddit..but you need JavaScript for a webrtc connection to be established on a browser..so yeah webrtc is disabled
Assuming the data is in a array of objects, you can use Array.prototype.reduce method to get what you want. Look into its documentation at mozilla developer website. (If you are using ES6) Anyways, it would look something like this: ************* const groupedArray = data.reduce((accumulator, currentItem) =&gt; { if(accumulator.hasOwnProperty(currentItem.name){ accumulator[currentItem.name] = accumulator[currentItem.name] + currentItem.count; return {...accumulator}; } else{ accumulator[currentItem.name] = currentItem.count; return {...accumulator}; } }); ********* This should provide you with an array that looks like this: [{Alice: 39},{John: 30 }] Make sure to test this first, you might need to do some minor adjustments to get what you need. Cheers
What are you struggling with? PM me if you want to.
One the first things i remember making was a clock, which got me to try some basic but useful API's and language features Basic clock display: String manipulation and usage of built in Date class. Stopwatch/Timer: Event/user input handling. Theming/l18n: localStorage/cookie API's
Do you mean something like this? window.addEventListener("keydown", function(event) { if (event.code === "Digit7" &amp;&amp; event.shiftKey) { console.log("Ping") } })
I've made this repo called Senzill-Pagination about a month ago and already have a to-do list, but i think some more feedback would be nice! Anything is appreciated :D [https://github.com/yak0d3/senzill-pagination](https://github.com/yak0d3/senzill-pagination) &amp;#x200B;
# [Data Pixels Playground v1.1.0](https://electronjs.org/apps/data-pixels-playground) / Create Pixel Art Programmatically What's new in version 1.1.0: * **Added setting for automatic code execution** - Code can now be run automatically when changes are made by selecting the option in the settings panel. * **Added image controls and info labels** - Compiled images within the Frame View can now be moved, scaled, and/or reflected using either the mouse/wheel, HUD controls or application's View menu items. * **Updated ./build dependencies** - Updated all build dependencies to the latest versions (including Electron, Project Foundation and Gulp) and implemented ESM modules to refactor and share constants between the Main and Render processes. * **Refactored code** - Moved File logic into its own module and refactored Sass code.
A todo list 
same here. I play Frontpunk, ONI, Cities Skylines. Mostly using MAC for programming.
Looks great. How about putting it in front of some beta uses to get feedback? Ship early and often and let your customers guide you, right?
loving this: https://www.class-central.com/course/edx-nature-in-code-biology-in-javascript-6881
RemindMe! 8 weeks "Is this out yet?"
I will be messaging you on [**2019-02-02 12:32:02 UTC**](http://www.wolframalpha.com/input/?i=2019-02-02 12:32:02 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/javascript/comments/a45n9v/first_look_at_a_creative_javascript_studio_were/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/javascript/comments/a45n9v/first_look_at_a_creative_javascript_studio_were/]%0A%0ARemindMe! 8 weeks ) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
This is awesome! I will definitely be playing with this.
Popup Gallery ========== The idea here is really simple, just run `popup-gallery` at the command line in whatever folder you want to view and visit http://localhost:3000 in your browser to browse all of the images in that folder. Installation ------------ `npm install -g popup-gallery` Configuration ------- Configuration is stored in the root application directory in the file `config.json`, but a front-end configuration tool is provided at http://localhost:3000/config. So far, there are only a few configuration options: * Privacy Mode - if enabled, gallery will load as a blank page. Enter the "konami code" to unlock * Auto-open in browser - if enabled, app will launch a browser tab for itself automatically (requires restart) * Port - set the port number for the server to listen on. (requires restart) * Images Per Page - set the number of images to display on each page * Cleanup On Exit - delete thumbnails directory on exit (requires restart) To-do ---- * CSS could obviously use a lot of work. * Allow gallery to be viewed as thumbnails are being generating, pushing them to page as they are completed. * Infinite scrolling? * User-configurable color scheme, themeing * Slideshow mode ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî- This is my first serious attempt at an open-source project. Any contributions or critiques are more than welcome!
Is there an `npm` package? I could find this useful in a few projects I've got my fingers in.
You might find some ideas here: [https://github.com/imlinus/LilQL](https://github.com/imlinus/LilQL) Cheers,
[https://github.com/imlinus/LilQL](https://github.com/imlinus/LilQL) My friend was needing some help sorting data, so i hacked together a little "query language" for him to play around with. I though I might share it with you guys as well :-)
hahahaha
Or any kind of wrapper, like a local/sessionstorage wrapper, a XHR/fetch wrapper or something, then you don't need to do any css/html just focus on programming
This is a good idea I think. Working with strings/dates is something that you'll actually have to do quite often as a dev.
Bad examples to prove my point :-D [https://gist.github.com/imlinus/e12878284d401c612f20ed6225673198](https://gist.github.com/imlinus/e12878284d401c612f20ed6225673198) [https://gist.github.com/imlinus/4079d087354a3cd8a52ddf7067093a07](https://gist.github.com/imlinus/4079d087354a3cd8a52ddf7067093a07) [https://github.com/imlinus/Fettch/blob/master/src/index.js](https://github.com/imlinus/Fettch/blob/master/src/index.js) [https://github.com/imlinus/Portr/blob/master/index.js](https://github.com/imlinus/Portr/blob/master/index.js)
&gt; **Developers will need to learn GraphQL.** It might be too early to put GraphQL into production, especially if an organization‚Äôs API is already done, but 2019 is the year to get up to speed on the concepts of GraphQL. There‚Äôs a good chance developers will be using them in new projects later in 2019 and beyond. I don't see that happening. REST is good enough for most use cases and GraphQL adds a lot of unnecessary complexity for a lot types of applications. &gt;**Developers will abandon one of their current tools.** Frameworks and tools don‚Äôt last in JavaScript. The average framework has peak popularity of three to five years, followed by years of slow decline as organizations maintain legacy applications but move to newer frameworks for new work. Developers should be prepared to learn new frameworks, and not hold on to current tools too tightly. I don't agree with this as the case either. JS went through a huge transition phase where people adopted ES6 and started transpiling code. That transition is now over and things are starting to settle down. 
Elevator simulator! Put four or five buttons (floors) on the HTML page and log to the console where the elevator is. There's a lot of things to think about. What if somebody on the fourth floor presses the button and then somebody on the third floor presses their button? Who do you pick up first? What if the car is going up and somebody presses the down button? It's a fun exercise in asynchronous programming. 
do a project you wanna do else youll loose interest. for example, i made a test generator where u load a bunhc if questions and answers. then the program randomized the order of the questions and went through each one so each time you take the test, its a different one. this helped alot to memorize the useless stuff i was studying in engineering
Some unconventional ideas: 1. Unit tests, these little nuggets of code are completely isolated and allow you to gain a deeper understanding of what's happening in a project. Adding unit tests to an open source project helps the community and can give a beginner easy access to the neat social aspects that come from contributing. I would especially focus as a beginner on stepping through code using a debugger, most unit tests using node can be [debugged using chrome](https://nodejs.org/en/docs/guides/debugging-getting-started/) 2. [Chrome extensions](https://developer.chrome.com/extensions/getstarted), they're relatively easy to write, don't necessarily have much html/css, and help a beginner read and understand [api documentation](https://developer.chrome.com/extensions/api_index). Reading and comprehending api documentation is one of the pillars of a good developer. 3. Project euler/code signal projects. Much of developing is knowing patterns that fit whatever mold you're creating, project euler and other similar lists can give an early developer a head start on foundational patterns.
Did something similar: [http://www.blowson.com/](http://www.blowson.com/)
1. Make a tic-tac-toe game. Simplest thing: two human players, no checking for wins, only keeping turns and making sure you can't play a move on an occupied cell. 2. Keep going and implement a way to check for wins / ties. 3. Build a computer player to play against. Make it silly/simple (doesn't try to win, just plays random) 4. Make the computer player better. First make it so that it at least tries not to lose. Then make it so that it actually tries to win. 5. Make it so that two computer players can play one another. 6. Prevent global thermonuclear war. (optional)
I would be happy to mentor you. Send me a private message. 
Would it work for hot reloading webaudio type stuff?
idk if you can really call it end to end testing if you only test a single browser. puppeteer is a great substitute for phantom or for unit/coverage testing though..
GraphQL does not have to be part of the server. It's used in many ways now, it's a query language. GraphQL queries can be executed as part of REST API endpoints. Obviously the biggest value is when you set single endpoint and accept GraphQL queries and mutations from the client. It's also a very suitable tool for describing data models and relations - arguably more than any other ORM. See Prisma. Learning GraphQL concepts and basics of this query language is IMO very important if you are aiming for the top of the market.
 document.write("hello world") congrats you're a programmer now.
I dont know what you're trying to say but I'm sure you could find the answer in the docs..
Anyone know something similar for xml? Asking for a friend. 
Thanks for your respond. Let me explain. I create a form with many drop down input field inside it. I want to convert the whole form to pdf document. I put the form inside &lt;div&gt;. But when i pass the id of div to fromHTML($('#mycontent').... like this then i call the funtion from button click to save the pdf and it done nothing
&gt;let me explain There's nothing to explain. You're trying to kidnap what I've rightfully stolen.
if you post a jsfiddle link or something I'd be happy to take a closer look when I get home in a. couple of hours.
u/boredinclass1 let me know if you still need help - feel free to PM me.
ES6 reduce is what you are looking for.
You're welcome - let me know if there is anything else I can do to help.
You may find this thread useful: https://www.reddit.com/r/javascript/comments/a3egay/how_to_start_your_very_first_portfolio_project/eb5yh1t
+1 for chrome extensions!
If you want to use your GitHub for your portfolio, take a look at this thread: https://www.reddit.com/r/javascript/comments/a3egay/how_to_start_your_very_first_portfolio_project/
make a simple card game. just a higher / lower guessing game it's how I started on the c64 :) 
u/davebees :D
TypeScript is just a type linter. All the supposed benefit of type safety vanishes as soon as you build. So the claims about the benefits are less that they hype. Main benefits are supposed to be catching various bugs: undeclared variables, typos, wrong use of types, etc., and the tooling in IDEs (Intellisense, code completion, etc). However, with modern IDEs you get most of these without TypeScript. Most editors will flag an undeclared variable/typo right away. And in VSCode you can turn on type checking for plain ole JavaScript and TypeScript will infer the types in the code for you. Microsoft toots how you don't always have to declare types in TypeScript because it can infer types. On top of that, you could include some JSDoc comments and, boom, you get the same Intellisense that TypeScript provides. Except you don't have to write TypeScript and compile it to JavaScript. Just write JavaScript and provide so standard JavaScript comments to document the types. In my package.json file I set up a script like this: "checkjs": "tsc --allowJs --checkJs --noEmit --moduleResolution node --target ES6 src/*.js" Then from the command line I can run `npm run checkjs` and TypeScript will check the types of my JavaScript based on the JSDoc comments. This is so much easier than having to actually write everything in TypeScript. This lets me write the JavaScript I want to, while catching any weird type usages that I didn't foresee. Still, TypeScript is a static checker. It only lives up to build time. After that all the type information vanishes and you're left with JavaScript's loose typing and dynamic typing. My main pain points with TypeScript stem from the fact that it's just a static type checker. It can know and therefore can handle the simple coercions that JavaScript does in the browser. Things like where you get a node of type Node and then want to add an attribute to it. Problem, `setAttribute` doesn't exist on Node, but on type Element or HTMLElement. JavaScript will borrow the `setAttribute` method from Element with you invoke it on a Node. TypeScript cannot understand this. Or, try passing a number as a value for an attribute value, use as the `max` or `min` value of an input. TypeScript can't handle that because the spec says that attribute values are strings. You have to tell TypeScript to coerce it to type 'any'. While JavaScript in the browser will graciously convert the number value to a string for you, TypeScript will force you to use type 'any', which means no type information at all. That's why you'll never see TypeScript running in a browser as an alternative to JavaScript. It's strict typing goes fit with the dynamic nature of DOM manipulation in a browser. When I see all these articles going on about how TypeScript is the solution to JavaScript's weaknesses, I can help but remember all the similar articles some years back by developers saying the same thing about CoffeeScript. What happened to that? That said, nothing against types, and yes, I used TypeScript for a year. Now I find that JSDoc is good enough, providing about 90% of the benefits. In fact, all the great intellisense that developers enjoy when using TypeScript are only possible because Microsoft uses JSDoc comments in the d.ts files that come with TypeScript. When you get the popup or fly-out that shows you a call signature and parameters types for a function--that's a JSDoc comment that Microsoft provided. Without JSDoc comments, the TypeScript's Intellisense would be bare bones. Every time I've written TypeScript, I've felt like I'm wearing a shoe on the wrong foot. TypeScript makes it feel like you're writing Java or C# instead of JavaScript. TypeScript is trying to force strict typing on JavaScript, whereas JSDoc was created to document the dynamic and loose nature of JavaScript's type system.
I like to stay on top of security headers for all of my websites, and found myself constantly re-writing middleware for some new headers, Report-To and NEL. Initially, I opted to report these headers to the maintainer of helmet at https://github.com/helmetjs/helmet/issues/184, but they were understandably denied from being added (Evan is awesome though and offered to help whenever he has time). I thought I'd take the opportunity to release my first 2 public npm modules, [report-to](https://www.npmjs.com/package/report-to) and [network-error-logging](https://www.npmjs.com/package/network-error-logging). A great service for logging and reporting these errors is https://report-uri.com. Let me know if anyone has any feedback or suggestions. Thanks!
Wes Bos just released a video where he controls a drone w/ JS. Pretty cool! [https://wesbos.com/drone-javascript/](https://wesbos.com/drone-javascript/)
US/Canada only. Too bad, but understandable considering shipping costs.
We use Jenkins to run Nunit tests nightly. These tests make sure that any new code checked into source don't change the expected values of data during a process. It depends on who you ask, but I believe that every single line of code should be covered by a test before it is checked into source control. Those are developer responsibilities. The client side is simple enough for a BA to write tests for. Our BA uses selenium. I don't know a whole lot about that part. But that is my 10 cents on testing. Every line of code should have a test.
Yeah, I don't think many people will be able to enter this. &gt;The Program is open to users who have been approved as an IBM Advocate and who maintain their IBM Advocate status for the current award year. This Program is open to **employees of a government or a government-owned entity** such that these employees can participate in the Program by completing challenges and earning points So, it sounds like you have to be a government employee to enter the program and compete.
Jquery is a js library, and doesn't rely on any specific dom elements to be present to expose itself. Its fine to have in the header, just make sure your js which does rely on the dom is after the body tag.
I used swagger for a recent project. Spec-inf our the api in the dock let‚Äôs it generate pretty exact mocks for you when you‚Äôre developing, pretty awesome imo.
If the page requires the script to be loaded in order to render the content, then declaring it in the head is fine. Declaring it at the end of the body is related to the architecture design where the page content can render with markup (html) and styling (css) only and the loading of scripts are to enhance the user experience in the page. Loading scripts can cause some delay in rendering the page, so if you can design the page to render without them, then users can reach your content quicker and loading them at the end of the body would be preferred. Note, jQuery is so prolific that it's cdn is likely already cached in the users browser. So unless you're facing some really bad performance issues, and assuming you're using jQuery cdn also, this is likely a change that you'll see no noticeable improvement by making.
That's my lifes problem. I collect articles and tutorials and concepts and courses but never actually put the code down. I never pick anything and stick to it. I need to light a fire under my ass
I'm working on something that might help. It would be great to get your opinion PM me if you're interested!
This is awesome! Now you/they need to add a support for JetBains!
Yeah I read about jqery being cached in the users browsers. Thanks for the reply. I'll leave it in the header and include the codes needed on a specific page in the body when that page is loaded. Thanks 
You're welcome. Also the defer attribute tells the browser not to execute the script until the document is parsed but before the document loaded event is fired. MDN has great docs on web standards. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script
&gt;I don't see that happening. REST is good enough for most use cases and GraphQL adds a lot of unnecessary complexity for a lot types of applications. You could say the same thing about jQuery (vs. React), component state vs. Redux, or even DOM manipulation vs. jQuery. Just because something is "good enough" doesn't mean it can't be improved. And if you're working with increasingly large and complex web applications, you want the want the very best tools possible. If you've ever seriously used GraphQL I *strongly* suspect you'd find it superior to REST. It's just that kind of technology.
Oh you can do that? Thanks a lot I'll look into it once I get home. 
Always use SSR if you worry about low end devices
The last evaluated value in your script is returned as the result - which in your script is the function you assign to `window.onload` (try it in the console to see it in action - assignments evaluate to the value). By default, the contentscript will run at `document_idle` anyway, so you don't need to trigger it on the onload event, just run `scrape()` as your last line and its result will be returned. You should see the result in the background page now, though it'll be `[ undefined ]`, as you also aren't returning `tp` from `scrape()`.
i made a javascript program thats a simpler version on autocad used for plotting and making field notes. im going to also use an x-y plotter to automate the drawing process because it has to be done in pencil 
&gt;how important is it to make custom websites which works without JS? Is it still a thing? Mostly I think the answer is no, but it does depend on your site. Two factors that would argue for a JS-less version: 1) is the site for a really big company? They tend to care even if 0.1% of their visitors can't see the site 2) is the site almost entirely static anyway? In that case, why not go the progressive route But otherwise, I really don't think supporting non-JS clients is necessary. Browsers on virtually all desktops, laptops, tablets, and phones all support Javascript. Hell, even Google's crawler supports Javascript. For most practical purposes JS *is* the Web today.
Not at all. When you remove spiders from the data, the number of real users that don't support js is tiny. Although, in the case of a SPA, I'd still ensure all pages are getting indexed properly, so it still might make sense to do serverside prerendering.
Even spiders (or at least the one that matters, ie. Google's) can parse JS now.
https://javascript30.com/
When sharing code like this, it is best to paste it into codepen jsbin or something similar so devs can play with it, create a solution and send it back
progressive enhancement was a great idea, but usually just wasn't worth the cost in practice. the only people who really disable javascript anymore are (neck|grey)beards who are trying to prove something or live a nostalgia trip. &gt;but when I make functionally equivalent non-SPA (just because some natural splits within the website make it simpler) am I suddenly required to add JS support? it depends. what is the site used for? is it displaying static information for consumption? does it show information for editing? does it try to capture information from the user? the intent of what you're building should inform what techniques you use to build it. if you're displaying static information, you probably don't need js. if you're collecting information, you definitely do, if for nothing more than form usability.
If you can‚Äôt easily sense ‚Äòoverengineering‚Äô you‚Äôre a poor developer.
Well, that wasn't in our plans honestly, but we should try to work on more extensions for IDEs/editors in the future provided we have the time to do so. 
you need to find a project that you really wanna make and go for it. Break that project up into its required functionalities then go one by one. write em, test em and a project that your interested in will keep you motivated. for instance, a randomized quiz generator. the functionalities would be file reader, file writer, question displayer, answer displayer, proceed to next question. then you can throw in some more advanced components like storing the question in a database and such. son go into declaring variables (const and let), array manipulation (map, reduce, etc), file reading (may need node environment and node modules for this, google how to run your js file in the node environment and use node modules), how to declare objects (JSON is the most important) and access properties and assign listeners to them. alot of courses in udemy have projects built from start to finish utilizing the newest software tools and such so you may wanna check that out too
Google is about 75% of search engine traffic. Most of the others (Yahoo, Bing, etc.) don't parse js. Losing 25% of SEO traffic is a pretty big hit imo. Web development is always a rabbit hole of how far into obscure support is worth it. There's no single answer, and every site has to make its own decision. The bigger the site, the more it's usually worth the time sink. Imagine an e-commerce site selling $100k of product a month being told they could increase SEO traffic by 33% by just adding prerendering.
I'm no better than you but it sounds like you keep coming up with reasons why your projects arent good enough, or relevant or whatever. I'm in the same boat but just wanted to say, you never know what they will see, have confidence in yourself. I'm facing the same problems (no degree, large gaps in employment, most work experience is in a different field, etc) 
Yep can't agree more with this! 
Plus USA/Canada citizen
Well that was supposed to an example and if I put that html in codepen it wouldn't be very helpful as I haven't provided and css. If this is they only why people can help me... \[than here is my website in codepen\]([https://codepen.io/anon/pen/xmKvPW](https://codepen.io/anon/pen/xmKvPW))
A show hide toggle, here is the question on stack overflow and some answers in jQuery and pure JavaScript https://stackoverflow.com/questions/4528085/toggle-show-hide-div-with-button
I guess it's a case of self criticism, or standards I expect myself to meet before sharing to the world. I'm working on a small project today that automates a task I've done a few times for a friend. Using Google for text to speech due to the quality, but via the free service it splits audio files into groups of no more than 200 chars, I'd then go into dev tools, open the resources, get the clips and combine them via a free audio online service into a single mp3 file. I want my friend to be able to have it on their computer easily, so I'm trying to avoid ffmpeg, they're not a technical user. So I've found the browser web audio API works a treat, but my requests to Google for the audio clips is blocked due to CORS via browsers.. Finally got a solution working by using electron to bridge the two that I should be able to package into an exe file. Spent 2 days doing this so far(some time refreshing, and most of 1st day thinking how to process the text to chunks that produce the same output Google does(there's an npm package but it doesn't do this part). Promises were a bit problematic working with again but sorted those issues out, I need to read up on async / await which is new to me. Looked at doing some functional approach with lodash or ramda, but in the end good ol regexp(with string methods) seemed best suited due to all the white-space pruning and splitting rules. It was a good feeling getting the core functionality working as desired finally. Now just need to tidy up the code, suss out front-end interface and package/deploy the app over the next few days. --- It's tough with those negatives working against us trying to break into the industry, I wish you all the best! :) feel free to pm me if you'd like another dev buddy. 
The rules of the sweepstakes say you can‚Äôt be a government employee, so I‚Äôm not sure what‚Äôs up with that. Entering anyway and seeing where it goes.
Not even all of Canada. Am bummed.
Unless the hosting website already have such libraries, avoid them. They only add cruft and idiosyncrasies. Do native web components ! Unfortunately currently the only reasonable choice is doing Custom Elements v1 (with or without extends); which is already a big improvement. It is easy to polyfill with https://github.com/WebReflection/document-register-element and with https://github.com/ungap/custom-elements-builtin. Stay away from HTML Imports of course, and know that Shadow DOM is hard to polyfill so the safe side is to not use it. Let me add that you'll be happier with polyfill.io or/and with some babel magic too.
Because HTML Imports is dropped and being replaced by script type=module.
This. It's the perfect combination of logic and interactivity with views.
For the pure JS version, is there any way for it to not toggle back to invisible? For example, one click makes it visible and it stays visible no matter how many times you click it and only changes until you click another button to show something else.
Once I make my account, where do I go to actually enter the contest?
Are Government employees usually not forbidden from accepting gifts? I know when I worked for the DoD it was a huge issue if I accepted gifts. 
There is not btw. Which is unfortunate.
I think you're trying to make an SPA that acts like a normal website. The simplest thing is actually not to use JavaScript at all and just make separate web pages. If you do it with JS then you also want it you affect the history with the history API. Honestly if you can't figure out showing and hiding a div with JS then it's not fair for you to pass the class with someone else's work from the internet when other people have to figure it out on their own. But to be fair when you get into the CSS and JS at the same time it is a fair amount to figure out if you just started very recently. https://developer.mozilla.org/en-US/docs/Web/Events/click https://www.w3schools.com/howto/howto_js_toggle_hide_show.asp https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector https://developer.mozilla.org/en-US/docs/Web/CSS/Class_selectors
If the ROI that the &lt;1% generates can pay for the developers time for the changes then it might be worth it (but still probably not)
Instead of checking if it‚Äôs displayed, just change it from none to block.
You're right. I should just learn the damn thing and stop trying to take the easy way out. Besides, I can't pass the entire module by cheating so I'm gonna have to learn it anyways.
Looks amazing! Any way to keep us posted outside of Twitter? For mental health reasons, I can't be glued to it.
Okay, I looked up multidimensional arrays, but I'm not finding what I want to get a random output for the code. I've found a way to pull random pairs from a multidimensional array, but that's not what I want. I want it to cycle through the array and only pick one of the choices from the inner array. &amp;#x200B; Any help with this would be appreciated.
That's such blatant discrimination against green card and visa holders Omg. 
always test before optimizing
Ahh one can dream! Thanks for all the hard work.
I could be wrong, but would this even count as a "gift" if it's an award?
Lol no it's not, it's because of legal issues when entering contests. Half of ibm is from India on a green card anyways.
You should challenge yourself and keep practicing your problem solving skills. I recommend websites like codewars or hackerrank to do this. I went to a coding bootcamp after graduating Maths (TL:DR didn't really know what to do after graduating) and during my time there we always had a morning coding problem to solve and I believe this has helped me massively in my career. I also studied maths and personally for me the main transferrable skills for programming were logic (ie truth tables are useful to double check your if and else statements), big O notation (helps with understanding algorithmic complexity), matrices and linear algebra (really useful if you want to get into machine learning). The thing with Math is that if you abstract all the theorems away, it's just problem solving, you may not see the connection yet but when you are constantly trying to solve equations it'll help transfer to general problems. You can also try and look at Test Driven Development, which goes hand in hand with &gt;You have to get good at breaking problems down into smaller problems. And then arranging everything together to create a solution Unfortunately there is no quick "...Master Problem Solving in 5 minutes"
Definitely codeacademy, then I would move onto freeCodeCamp which has excellent up to date resources. Obviously working on your own side projects as well will help a lot. It's great to hear your goal about working on apps, as an alternative to Electron, have you heard of Progressive Web Apps perhaps ? The cool thing about them is that've recently gotten support for desktop web apps in the latest version of Chrome I think and they don't need their own instance of chromium compared to Electron.
This line &gt;let status === "stopped"; When you're declaring a variable it should be &gt;let status = "stopped"; &amp;#x200B;
Hey, yeah thanks again it worked
Since tomorrow is my father's birthday, I programmed a [basic birthday card](https://studio.code.org/projects/applab/87XD-1TGJ0wXblUkQvRsfWc1Vru2UQ4zG4-CHysXoVc).
[https://medium.com/@leemartin/creating-playlists-out-of-setlists-from-chris-cornells-live-history-e8c83d87fed6](https://medium.com/@leemartin/creating-playlists-out-of-setlists-from-chris-cornells-live-history-e8c83d87fed6) I just published a blog (and some code snippets) from a recent project for Chris Cornell
Thank you so much, you're a lifesaver!!
Depends on how much you value your job and if you are private or public sector. 
I've tried to enter and sign up a few times on different days and I keep getting an error.
Hai JS friends! I recently wrote a way for you to easily add/remove `resize` event listeners to DOM elements. https://github.com/ItsJonQ/eventlistener-resize The goal was to create a way to do this with the default `el.addEventListener('resize', callback)` API :). For extra fun, I've added `resizeStart` and `resizeEnd` events as well. This was written with plain vanilla JS, no dependencies. I'm planning on adding more tests to get coverage up to 100%. I have a demo Storybook playground here: https://eventlistener-resize.netlify.com/ Thanks for reading!! Hope you folks have a great day :)
That's the plan. Would you like to be one of them? Pm me :)
I'll post updates here as well. This one seems to have been well received. 
Haven't looked at the implementation, but I'd imagine it is accounting for holes/partials. Iirc, a part of the proposal was also to allow something like: const six = 4 |&gt; add(2, _) Though I don't remember if they reached consensus on what character or sequence to use for holes.
Half? Try "nearly everyone except the corporate executive board and the janitorial staff."
I mean I know exactly what you're saying when referring to gifts. I have to take the training every year, but it would probably be a question to take up the ladder. A drone you win is not the same as someone walking in with a chocolate basket worth over $25.
I think it means that "this program is also open to..." being inclusive of otherwise forbidden groups: government employees, as long as they are allowed to complete the challenges. Could be wrong though. I signed up. 
I got the 500 error after signup, and just hit the back button. I think the auth callback is messed up, but still authenticated me in and was able sign up.
Yes! I'm not sure if this is exactly what you mean, but we also have a demo where the webcam is on and all the blocks are filters (like edge detection or hue), and we can play with them, reorder them to manipulate the video output etc all while the video is still running.
Ah... webaudio is a different thing. It's oscillators and music and stuff... audio. There are "music live coding" videos online that use web audio, such as [this](https://www.youtube.com/watch?v=PRUcYLlRfGQ).
sounds to me like you've got something weird happening with yarn since it operates under more agressive caching then npm.
# [DEITY Falcon](https://github.com/deity-io/falcon) - Build (Headless) PWA's with React, GraphQL, NodeJS and SSR - Fully Open Source Quick start: npx create-falcon-app my-app or for latest build (lots of changes) npx create-falcon-app@nightly my-app Github: [https://github.com/deity-io/falcon](https://github.com/deity-io/falcon) Documentation: [https://falcon.deity.io](https://falcon.deity.io) Slack Channel: [http://slack.deity.io](http://slack.deity.io) Feel free to reach out to me on Reddit or Twitter ([https://twitter.com/CaneLagerwaard](https://twitter.com/CaneLagerwaard)) for any questions!
This is expected behavior and allows you to implement specific catch statements between promise chains. Its easier to visualize by thinking of it as promise().then().catch().then.catch()
Maybe a silly question, but could someone please enlighten me to the purpose of writing an async task when every single statement within the task is either not async itself or awaited? That would make it almost equal to a synchronous function, no? I feel like there is little point to that unless you can run several tasks with a single invocation on the command line, so that the tasks themselves run in parallel. It's that possible? (Maybe I just missed it, sorry!)
You can return a Promise.reject(‚Äòyou can pass whatever you want in here, var, obj, or even a str like this one‚Äô); Hope that helps 
Your React repo is amazing. I will contribute to it when I have the time, maybe even this week. Thank you!
Thanks this gives me a starting point to look into. Not a problem you generally run into then?
Great tip.thnks
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), ‚Äúnobody‚Äù starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
They‚Äôre looking for salesman for their ‚Äúcloud‚Äù.... 
People that think SEO died the day google started rendering js websites are idiots. There's more to the world than google. Maybe some future weirdo would want to curl your site, or build a Reddit Enhancement Suite on top of it. Building crappy applications is fine, but please build thoughtful websites.
I made a Minesweeper clone: https://sweeper.games Code: https://github.com/mikehodgson/minesweeper
Choice2[x][y] The first number x IS CHOOSING one of the choice2 arrays - the second value y is choosing one of the values in that array so x=1 and y=0 is selecting choice2[1] and then Y is choosing the first, second, or third value in that array. As for placing that string back into your result you need your function to RETURN the selected string something like .... Var value = choice2[Math.floor(Math.random() * choice2.length)]; Return Value; } Then change the calling code to something like: document.getElementById("outift").innerHTML="The man is wearing a " + getValue() + getValue2() + "."; ‚Äã 
Catching a rejected promise means dealing with the rejection (think try/catch) so anything you return from it will be the resolved value for the next chain. If you want to catch just to log something for example then you'll need to rethrow in the catch or return a value wrapped with Promise.reject. Again if you think about how try/catch works then this behavior makes perfect sense.
Thanks for the link. Appreciate it 
You improve at solving problems by solving problems. The more you solve, the more you will notice patterns and discover systematic methods to analyze and break down or reduce complex problems into simpler subproblems. &amp;#x200B; If you find a problem that you cannot find a good solution to then it is probably a good idea to look for other people's solutions to similar problems. By doing so, you should be exposed to well known and refined techniques for solving problems. &amp;#x200B; Most of the time, what you need to solve a problem efficiently is to apply some well known pattern to the problem you are solving (this includes algorithms and data structures). To be able to do so effectively, you must first understand not only the capabilities of such patterns but also the reasoning behind them and their drawbacks. You must not dive head first into trying to apply some pattern just because \_it works\_ without considering if a different, simpler, or more efficient solution exists. &amp;#x200B; Of course, all of this is useless if you don't put a bunch of practice in. So, as with everything else: practice, practice, practice. &amp;#x200B; Cheers!
Best free option is probably Visual Studio Code. Paid option is intellij IDEA or Webstorm. 
I work with Visual Studio Code and I really like it.
With Javascript?
Thank you. Is there a page or tutorial that shows how to set the ide up ? 
Thank you for the response. Any tutorial on how to set visual studio ide for java script ?
Sublime text 3 is a good one, I started on that then moved to Visual studio code.
[Vue CLI plugin that generate chrome extension project that works with Vue JS](https://github.com/superoo7/vue-cli-plugin-chrome-ext) &amp;#x200B; It was done yesterday, and you can use it now! Simply run `vue create test-proj` and `vue add chrome-ext`
I use Linux, I download it, install and that is it. Should be the case for Windows and Mac I think as all three versions are built upon electron js.
Can't say for sure, i don't use yarn, but i'm aware of the principles behind it and how it differs from NPM. I use NPM, but to cut down on install time i also run an NPM registry cache via Verdaccio.
The IDE is irrelevant to the language you use but the answer to your question is the same answer the last 2974 times this question was asked on reddit.....today....
The IDE is irrelevant to the language you use but the answer to your question is the same answer the last 2974 times this question was asked on reddit.....today....
Here is Wes Bos' dotfiles: https://github.com/wesbos/dotfiles If you don't know him he's pretty good at Javascript ;)
This might explain some of the answers you've seen here: The term `canvas` has a different meaning in JavaScript than it does in some other environments. `canvas` is a graphics area that you can perform drawing operations on. A `div` is a generic HTML block element that you can play text and other controls inside of.
Pretty sure IntelliJ has a free community version. Does it not support Javascript?
You make it sound like `c` doesn't have weird parts. Undefined behavior, non-standard `int` sizes. Heck on some systems even `char` can be 6 bits long, or even 9. Non-shortcutting `&amp;&amp;`and `||` operators.
Nice twist with the emoji, but it's a rehash of the same old 'replace for loops with array.map &amp; co' which has been done to death already years ago
I am working on some synth demos at the moment. Will do a full write up explaining how the system/state/reloading works. I've got some simple ones working, but it depends on how the libs are written. Definitely want to create a good audio experience though.
Yes, that's how it is supposed to work. Don't forget that `catch` is still a `then` under the hood. People forget that `then` takes two arguments, a function that resolves and one that rejects. `catch` is just a shorthand for a `then` that only has the second case Promise.resolve('john') .then( a =&gt; console.log("RESOLVE", a), null ) .then( null, a =&gt; console.log("REJECTED", a) ) .then( a =&gt; console.log("ENDING WITH", a) ) is equivalent to Promise.resolve('john') .then( a =&gt; console.log("RESOLVE", a), ) .catch( a =&gt; console.log("REJECTED", a) ) .then( a =&gt; console.log("ENDING WITH", a) ) You can use that to your advantage and create chains, for example Promise.resolve('start!') .then(() =&gt; ... open file x and pass it on ...) .catch(() =&gt; ... create file x and return it ... ) .then((file x) =&gt; ... either way, use it ... )
I had to turn off adblock and privacy badger to get around the 500.
Pretty sure just repeating Visual Studio Code has more emphasis than upvoting someone else who has already said it. Its source documentation is pretty good and it's "setup" and UI are pretty intuitive. Emmet is preinstalled, Ctrl + ~ opens a terminal. Here's a link to a [video from Traversy Media](https://www.youtube.com/watch?v=fnPhJHN0jTE) that you might find helpful.
I have implemented snap to container edge and published it now. I found it a great idea and fun. Thank you.
yes, these two functions are equivalent: const foo = () =&gt; { return promisable().then(handler).catch(errorHandler); } const fooAsync = async () =&gt; { try { const response = promisable(); handler(response); } catch (error) { errorHandler(error); } } if you want to handle an error in a `catch` but still send the error along to error handlers, not resolve handlers, throw an error from it. function getStr() { return new Promise((resolve) =&gt; { if (Math.random() &gt; 0.5) resolve('Resolved!'); else throw new Error(); }).catch(() =&gt; { // handle error here throw new Error('Thrown!'); }); }
your problem is your tables. jspdf doesn't support colspan.
Since I mostly write heavy weight Java day-to-day I use intelliJ. Since I use intelliJ so much I am very productive with all the other jetbrains products and so I use WebStorm. WebStorm is very nice IDE for JS.
Read the API documentation... Usually you'll get a token that you send/sign with each request and a refresh token to update right before expiration. I can't speak for FB or whatever tools you using though 
You can use shims for promise and modern JS all the way back to ie8. There are limitations that may prevent certain UI tools... But with babel can definitely run stuff writing modern JS to transpile to code that can run in in.
+1 for vs code.
I have to support older IE. Damn right I forgot babel is a tool to use, thanks, but I still have to support IE older than 8
I like webstorm, but prefer the responsiveness from vs code more.
Why?
Their cloud was one of the worst experiences I ever had.
It could be a number of things... Sometimes you may have caught a module's point release with a bug in some scenarios.. the next point release may have fixed it.
Depends on what you add. Depending on what you're doing, inferno or preact may be better options. Test and confirm yourself in reasonable target devices. Get an iPhone 5 or Nexus 4 and try them.
Some customers on legacy systems still use old IE and probably won't change easily. (e.g. Hospitals, military, etc.)
When a web page is an interface for some device configuration mode, like a router or a camera, I often wish it had a way to access it from console/lincs. Does not have to be fancy, just login, view the list of key/value pairs, submit a new value for a key, that sort of things. Right now it has fancy pages with flash animations and custom activex controls. I have to keep a Windows XP machine just so I can change a damn setting. TLDR: Making no js site ensures that it will be usable for a long time. It is not an issue for traditional sites, but IS for embedded "sites". &amp;#x200B;
Looks pretty neat, nice job.
I mean, IE 10 is no longer sufficiently secure to process credit cards, I sure hope you're not doing anything related to those industries.
Pretty aware of that, and nope! Nothing related to payments!
How important is search engine support for new users to you? Can you serrate SPA functionality behind a separate base URL if it only applies to logged in users? It really depends. Adding dynamic components to mostly static content isn't too hard. Vue is a good option here. If you need client+server rendering, react and similar are options. Walmart for example does partial server rendering. It just depends on your use case. It mostly comes down to how expensive dual rendering is or how much you need search engines.
Hey mate, since you're using the SocketIO for your multiplayer game then You can test and debug all the SocketIO, WS request visually with the GUI dev tool [https://firecamp.app](https://firecamp.app) (beta) you can directly download it from the [Firecamp Chrome Store](https://chrome.google.com/webstore/detail/firecamp/eajaahbjpnhghjcdaclbkeamlkepinbl) 
Great article, Saved it for the future implementation with the ReactJS. Firecamp can help here to test and debug all the SocketIO, WS request visually with the GUI dev tool [https://firecamp.app](https://firecamp.app) Can directly download it from the [Firecamp Chrome Store](https://chrome.google.com/webstore/detail/eajaahbjpnhghjcdaclbkeamlkepinbl) I‚Äôll share the insight on it soon.
It really depends on what part of government you are working for, position, role etc. If you have a sweet gig then would you risk it for a drone? 
Thank you! We're looking forward to it!
Absolutely would not risk. I wasn't strictly suggesting to attempt to bypass any policies, but my thoughts or reasoning.as to why it may not be considered a gift. Always check with your supervisor or HR.