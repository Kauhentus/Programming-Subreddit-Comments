Learn to draw.
Subscribe to desginer lists and watch for the trends and examples of top designs. Keep your eyes open as you surf the web and use apps n things. When you're making design choices take the time to think like an end-user and avoid thinking like a dev as much as possible. I often try to ignore anything i know about the software and approach the app (or website) as though i know nothing about its internals. From this point of naivity i start asking myself what would i want to or expect to see on the page as i interact with things. We devs tend to analyze things very logically instead of what will "feel best" to end user. I have found as a dev I often want to put way too much on the screen at a time, so finding ways to minimize it can help things look nicer (hiding things into tabs, modals or tooltips are some possible strategies). In general, I take the mindset of "less is more" for designs. Start with a plain old no-style (except maybe reset.css) and build it up slowly, adding only what is needed to give it style and personality. Don't focus so much on styling specific elements at first either. Focus on the bigger picture, as many minimally-styled elements together can create a stunning overall design. Also typography and negative space are hugely important for nice designs. Using pre-calculated responsive type sizes will save you a lot of effort and make your designs way better than trying to come up with your own type-sizing scheme (there are sets available online that provide type-sizing and appropriate margins). Similarly colour palette is a very important decision as well and there are many tools available for generating nice ones. Animations are a pretty standard expectation these days. They definitely add to the overall smoothness of how a design feels. Again there are lots available online as libraries or snippets/demos. Choose natural feeling animations over novelty "cool" ones - in general it should only soften the user experience, not be a distraction or point of focus.
He sure installed powerline! It gives you codeninja POWERS!
Learn the design principles first. For example, Contrast, Repetition, Alignment, and Proximity. Understand how to use a Grid in web design. Apply the Golden Ratio for spacing as a test. Learn Color theory to understand why some colours work well together and others clash. Learn about accessibility in design and how to make sure your design works on different viewports, devices, and interaction types. Realize that Design is incredibly hard and requires just as much effort to learn as Engineering. How much time have you dedicated to learning JavaScript, Browser APIs, React, and so on? Expect the same amount of time to be invested into Design if you want to be as good at Designing and Software Engineering. You can learn the fundamentals quickly, but it takes time and effort to learn how to apply and use the principles.
I think that for a developer, the natural way improve is to see and work with things that are designed well. If you are working with really nice designs at work, you sort of get patterns of what looks good and what doesnt ie. typography, colors, accents, everything. If you are unfortunate and work with a shitty designer, go to places like dribble and behance and look for free online sketch resources online, they will already have some pieces of design you can use for free and get the habbit of making things look pretty good on your own :) Whole another thing is like whole brand design, its really tricky to pick what will look good in a context of a large website with tons of brand related colors that tell a certain story and have some function.
Wow, I'm here because I'm having the same issue, only that my issue lays in Android, not web development. I guess take a look at what makes a site beautiful and try to recreate it or slightly modify it? As far as my knowledge goes, Bootstrap is a framework that can help you a lot, but I'm not primarily in web development (it's a hobby of mine), so don't take my advice for granted. From what I've seen, Bootstrap has a decent documentation, lots of samples to work with... Take a template and modify it?
I do this all the time
Pretty neat demo page. I dig.
Maybe you shouldn't? There is value in being specialist - you just have to aim at bigger teams. Just presenting a different angle. If you want people have already said what you could do. 
I think that site looks really good. At my last job we did some digital versions of shareholder reports for a pretty big company (like fortune 50) and that was the worst because everything had to be approved by like 25 different people all of whom where some sort of department head and clearly felt they needed to show it. There is a lot of weird - i'm just gonna call it "dominance posturing" - in big corporate environments like that. Like basically someone making us tweak random things last second just to display to everyone that they could.
It's a bit like chocolate and strawberry. Some folks like chocolate, and some like strawberry. Which is peculiar, because anyone with half a brain can see that chocolate is better.
A UX designer that I had for a class told me a great layout designing session trick. It helps brainstorming ideas quickly. Fold a piece of paper up until you have 9 squares and then say you want to design the main page, you give yourself 2 minutes to fill up each square with a different layout concept. After the time is up generally you’ll have something to run with or parts of this and that from each box you like to fit together. And repeat for each page or section you’ll be conceptualizing. After you have a layout I feel like a lot of the rest comes together easily.
This article was a good stepping stone for me. https://medium.com/refactoring-ui/7-practical-tips-for-cheating-at-design-40c736799886
It really depends on the product. For small things I can easily do all the things and have my own tools to support that. A bigger product needs more. 
If you like spaces, you should type all your spaces one by one. Otherwise, you're just a tab guy who didn't realize it yet.
&gt; Expected to be skilled in front end, back end, and design If you're building websites, it absolutely helps to have an eye for design, and the designer(s) will appreciate someone having an informed dialogue with them. If you're building UI, knowing info architecture, ux design, and/or ui design best practices helps you not only understand what you're developing, but allows you to more seamlessly go through the flow. This is especially pertinent if you're working with CSS or any other styling system. Often times if you run into design issues or quirks that may have been overlooked by the original designer, you can highlight the exact problem and raise it with the designer, rather than waiting through a round of QA or stakeholder review. Hopefully no one asks you, a web developer, to fully design an entire site and its UX/interactivity, but having even a basic understanding will help you collaborate with a team far easier than not having those skills at all. 
I am currently going through this process and I am getting better. Read lots of books from lots of sources on design, there are already a lot in this thread. Lots to learn from layout, fonts, colours and good UI. The good news is that good design doesn't become outdated so old books are still good. These two websites are written more for developers who want to learn design. [https://refactoringui.com/](https://refactoringui.com/) is excellent, make sure you do reading too though it really helps. [https://learnui.design/](https://learnui.design/) has a news letter with good tips, it is trying to sell a course that is out of my price range but still useful stuff. The biggest difference for my design was using a design tool instead of going straight into the code. I like [https://www.figma.com](https://www.figma.com) as it works in browser but there are quite a few options like adobe XD [https://www.adobe.com/products/xd.html](https://www.adobe.com/products/xd.html). I first layout the general layout of the component, what needs to be on the page, honestly it looks terrible. I then duplicate the layout and play until it looks a bit better but still terrible. Next I go to dribble and choose a small area of the design to look at; Menu, notification, column layout. I steal like an artist from lots of design. Suddenly your design sucks a little less, then you need to remember what you learnt from your books to tie everything together. Bonus. I found this really useful, I have never seen a designer thought process before from start to finish. I think there are 3 videos in the series Design Thinking – Adobe Live Event Day 1 [https://www.youtube.com/watch?v=tsePToj6nw4](https://www.youtube.com/watch?v=tsePToj6nw4) &amp;#x200B; I would say good luck, but honestly it is just work you can do it. 
No, JavaScript will catch up before you know it. Strong typing will probably take a while, but you can just handle that in the development environment.
Design has a totally different mentality. You should be a creative / artistic kind of person. Your question is basically: I'm a robotics engineer, how do I become a better oil painter? Well, your starting point should be to study art and design in general. How do artists work? How to designers work? What frame of mind do they think in? You're trying to engineer your way into an artistic discipline - "where are the 3 step instructions for making a good design?" - that's not going to really work. You have to start with the fundamentals of art: form, color, layout, composition, etc. 
most of silicon valley as well. didn't steve jobs use the quote "good artists create, great artists steal", or however he paraphrased it
and then we end up where I was beforehand... right. Thank you.
when using jquery it‘s very easy. just remove all script tags on document ready: $(document).ready(function(){ $(‚script‘).remove(); }); As js code lives in memory, there is no need to maintain scripts in sourcecode after they are loaded.
Sounds like the researchers at stack overflow would do well to scrap the user survey and just call up the recruiters of "Silicon Beach" instead.
Im happy to answer questions here if anyone has them. I wrote the article and a large portion of the app.
Kinda. Sometime in the early 2000s. "Good artist copy, great artist steal" Basically if you can copy something then your pretty good at dupicating it and if you can steal something and improve on it then your even better. Nothing wrong with the ideals though. We couldnt have LEDs today unless someone said "Lets make lightbulbs, but better"
It's funny because if editors never bothered to support tab-&gt;spaces replacement in the first place tabs probably wouldn't actually be mixed with spaces nearly as much as they are. But most of them do do tab-&gt;spaces by default so this is probably something we're just stuck with.
I'm a designer turned developer. I don't think either have to be mutually exclusive. Good design thinking is a lot more similar to writing clean code than people think. A function that has one clear responsibility is similar to creating a design component that has one clear intent. Building up that intuition takes time, but you also don't have to reinvent the wheel. A lot of design patterns have been documented on sites like [UI Patterns](http://ui-patterns.com/). Once you've done the research and taken into account all the variables, it's easier to eliminate what *won't* work and create variations of the things that do.
Evidently not.
Thanks for posting this. Saving this for later, as I'm very interested in getting more skilled with JS. Every little bit helps. 
It's a test you can't, as far as I can see, usefully use. It doesn't catch the exception and execute the catch(). It crashes the parser and stops processing further code before it gets to it.
Well, do you have any better data to judge the popularity of a programming language? Can you support your claims that ES6 is in fact the most used version of the language, and that TS is "niche at best"? Also, what percentage constitutes a niche language? Because, you know, TIOBE and PYPL (which are commonly used to determine popularity) cannot paint the full picture either.
Great eye candy, but poor usability most of the time.
much better, but still needs a better design over all. Don't take that as insult. It is something that need to be learned and you have a really good start. I suggest looking at similar mobile apps and mimicking their designs since they probably have more UI/UX experience.
Irrelevant, as long as it's consistent and easily fix automatically.
Yeah, I'd say this, given that *terrible* question, I would answer "Express is to Node what Apache is to PHP". And then I'd wrinkle my nose at the interviewer
hmm, I need to read this a bit closely. &amp;#x200B; I've been unhappy with Sagas - having disparate bits of code listen for (*take*) events and then acting upon them makes it hard to reason about once you have a whole host of them grabbing the same thing, and I was about to throw all in with \`redux-loop\`. I still may.
Awesome. I noticed you mentioned sampling &amp; metrics -- are you using any libraries for this? I am curious if [OpenCensus](https://opencensus.io) would be useful in your situation. Also, is there any way to get involved as a contributor? Your project seems F'ing awesome.
Glad I could help.
I did not. I’m just trying to gets things where the company expects them to be :/
Can't say I'm good at design but, I'm in the same boat as you and this is what I do. Read. Design is a discipline, so study it. Design of everyday things is a pretty good read. Information dashboard design by stephen few is a good one that covers the psychology behind how we notice visual things and how to use that knowledge in design visual systems. There's also tons of blogs and websites out there. Probably news groups too ( I think smashing magazine has one.) Regarding user experience (UX) Design is all about the users experience; Its about discoverability then efficiency, then beauty (imo) so make it obvious, then make it simple (and quick), then make it pretty. If you want to learn something, in general, you need exposure and the more the better so practice and be conscious of design every where all the time (the design of everyday things helped with this for me). Notice when a door with a handle needs to be pushed. Remember, design is everywhere. It's part of everything. Doors, websites, code-bases, etc. Design things for yourself and you can practice design every day easily! If you're a developer, ask yourself if you can do something in fewer clicks. Got a pet? Is the food bowl close to the food? Literally anything can be designed and if you're good at noticing and improving then I believe those general skills will help with UX work on websites, apps or w/e. Regarding user interface (UI) Be minimalistic. If you keep it simple you can focus on the basics. Font, color, space, and feedback go along way. Practice with those things first. Get more complex as you go. Get inspiration from everywhere! The company behind inVision has a medium site called muzli that I like to get inspiration from. I'm also a fan of codrops. Video games can be a good source of design inspiration too. Video games have a huge interest in letting you know what you can interact with and what to do next (visual cues like things sparkling every few seconds, lights in the distance, etc). Like most learning, you'll do best with a fast feedback loop. Personally I like to style everything in dev tools (chrome) but try a design tool like invision, or sketch. You won't have to code so you can achive rapid interations and focus on look and feel. Practice and you'll improve. 
Tab that opens itself to create a uncontrolled tab explosion. Also will do an alert before leaving to make it almost impossible to stop(unless your browser blocks the pop-up) https://gist.github.com/justchen1369/28cd7f231bb7f795b62a3fda83d75113/revisions 
You can disable JS in the browser settings or view the page source with CTRL+U or somewhere in the menu.
Sorry for my poor question. I meant using JavaScript
To get the nth child of a class in vanilla JS, you can only do so by getting the elements with that class, and then iterating through the array of elements like this: `document.getElementsByClassName('stack')[n]` Then from here you can add the style you want using [PawelDecowski](https://www.reddit.com/user/PawelDecowski)'s suggestions.
There's enough demand that you can be picky if you've got some experience. Unless you're entry level or trying to push your general knowledge, make sure you know what the job entails or at least let them know you don't want to be doing design work. My job with a fortune 500 company has me doing full-on Javascript programming some days and others, I'm spending hours tweaking CSS to get the animations and look just right, but thankfully, the design layouts are already done by the time they get to me, I just turn it into an actual page/app. 
Hi u/Zeeesty, I'm interested in learning about the conversation your team had regarding using a type checking tool (flow/typescript). It seems you guys are using vanilla javascript from taking a quick look at the repository. Was this ever a talking point in the decision making process?
You could make a new XHttpRequest or use fetch API to get the content of an URL then.
My apologies, thank you.
This needs more upvotes
My most used design principles. 1. A GRID System, keep things in line. Things that are randomly placed and unorganized seem "messy". You can still be random, just be intentional, don't guess, we can tell. 2. CONTRAST, opposites attract. The classic black and white system, or dark grey and light grey, blue and orange, red and green, squares and circles, geometric and organic (like putting plants in a building, or laying a block path in a garden). 3. HIERARCHY, the most important thing should be the first thing you see, and least important the last. There can only be one "king of the jungle". Don't put a really bold decorative font with a very busy picture. Either the picture is the attention getter or the title, the goal for the 2nd in command is either emphasize the leader, or lead the eye to the 3rd in command. 4. PINTEREST, find graphic design boards for inspiration and see if you can spot the 3 principles above in action. The more you see, the more you learn; the more you learn, the more you see. 5. WHITESPACE
Mind if I ask what were the main takeaways for you from that online book that you leverage the most in your designs?
That's some fantastic advice! 
Funny because this was also said by Pablo Picasso and TS Eliot
From who? Worse artists? How does that make sense? 
I personally live array textures, used them on the desktop and really missed them in the browser until webgl2 came along. They also avoid the issue of having to pad textures to avoid low accuracy sample artifacts.
Take a look at [immer](https://github.com/mweststrate/immer) for handling object changes. Works wonders for simplifying reducers.
Learn the fundamentals of typography and layout. Learn the rules. Then break the shit out of them. ;-)
My favorite time of year. Remember that most lib docs are hosted in code and typo-fixing PRs are a great way to eases into Hacktoberfest.
Those event listeners won't work as expected, because `option` element doesn't generate the needed event. Move the event listeners to the `select` element instead. If you want the `creditcard-country` selection to imediately set right after the `contact-country` is changed, listen to the `change` event, instead of the `blur` event. If `blur` is used, the `contact-country` will change only when the `creditcard-country` is unfocused. Also, the `click` event listener is not needed for this purpose. And finally, you're still missing the `inlist()` function in the script.
Sure :) That's exactly what middleware are intended for - logic that needs to respond to specific actions, or interact with the store while doing other things.
Why reinvent the wheel, Am I right? Hahaha
I like to take a site for a small company with a bad design. Use their current look to make a better feel and sell it to them. Practice makes perfect.
Don’t forget infrastructure as code, cloud optimization, cyber security, app testing, scrum mastery, ci/cd, operating system administration (windows and various Linux), application architecture, disaster recovery, high availability... and people skills required to work with clients to gather requirements. 
Absolutely 100%, do not hesitate. 
&gt;Users will take a hot shit on your million dollar, world-changing app if they don’t like your UI Jira. Although, that doesn't explain its popularity.
Design is very much feel. There are some tricks out there. Rule of 3rds Color theory (steal a palette from colourlovers.com) Golden mean Blur your eyes Typography Really though a good design is more about feel. It's hard to communicate over reddit.
Fuck yeah
No pain points on my end, honestly once the overall concept sunk it it was a godsend and didn’t feel heavy at all. Even though there were clearly easier ways to set things up (as you mentioned). I’ll look into configureStore(), thanks for the tip.
He wasn't a designer nor a developer. Him using that quote makes it sound bad actually. That's like Ray Kroc commenting on fine dine.
A test you can use is to invoke the parser via `eval` (or `new Function`) var letIsSupported; try { eval("let x = 12"); letIsSupported = true; } catch (err) { letIsSupported = false; } However I can't think of any way to actually make use of this, you still need to transform the `let` into `var` at least at some point which you can't do in the browser trivially.
If it's a coding test we treat it like a pair programming exercise, it's totally OK to ask my opinion on how / why to do something, and you're allowed to google, stack overflow or whatever. If it's white-boarding just say you don't know, or ask clarifying questions. Explain how you would go about finding the answer in a real scenario. I'm more interested in seeing the way you think, what you're like to work with than any specific implementation details.
Can confirm this is the reasoning behind my example responses. 
Best money I ever spent. 
Whilst you're right, that might be enough to call alert("Your browser should be upgraded"); 
[http://jpmalloy.com/index2.php](http://jpmalloy.com/index2.php) for fun..still working on [http://jpmalloy.com/demo/ongallery.html](http://jpmalloy.com/demo/ongallery.html)
I've watched a ton of these videos. His stuff has its cringe moments but overall it's good stuff. I've learned a lot from him, as a self taught developer I eat this kind of stuff up -- guys with no ego dumbing down hard concepts. In one video, a comment described him as the "Bob Ross of coding", and I can't think of a truer comparison.
&gt; "Bob Ross of coding" Nailed it.
Well ain’t that a peach
My upgrade was pretty easy. I just had to change the way I loaded a component with codesplitting.
At school my teacher suggested me to use AccuWeather API. But Google also have a good weather API.
I started off designing. Copying other designs pixel by pixel was key. It is a mind exercise to follow the design. After awhile you recognize patterns. You will know what flows well. Start following designers on Twitter and suggestions will keep popping up. I am now a full stack developer. I studied other people’s codes and copy/use existing patterns. I follow devs on Twitter. Both design and code are the same to me. It is art.
And Salvador Dali in a way as well
Very cool, feels weird to be called 2.0 when there are really any significant new features
Did you know that Stack Overflow turned 10 years old recently?
Can i use this to create a vue app?
`() =&gt; { return true }` is the ES6 fat arrow syntax, which is (with some differences) the same code as `function() { return true }`. One of the features of fat arrow functions is that if it’s only one line, you can omit the return, and the return value of the function body is automatically returned. So, the above can be rewritten as `() =&gt; true`. So, the code you have posted is passing a fat arrow function to map that takes the item and returns the value of `x.charCodeAt(0) / 256`, which is the character code of the first character in the string divided by 256.
No.
 x =&gt; (x.charCodeAt(0) / 256) ...is a shorthand way of writing: x =&gt; { return x.charCodeAt(0) / 256; }
if a fat arrow function only takes one simple argument you can skip the parenthesis. Also fat arrow functions can have an expression rather a block as their body. So `(x) =&gt; { return x.charCodeAt(0) / 256; }` can be written more concisely as `x =&gt; x.charCodeAt() / 256` 
It is very strange example about PHP and Apache server. Apache is rarely used in new modern applications. NGINX + FPM is better due to performance and convenience. Node.js application is a server itself. When you write down app.js you use http module to create a web server. V8 is a node engine which compiles javascript code to machine code. PM2 is a process manager intended to manage Node.js applications runtime So I think the right answer is: “node.js application might be used as standalone http server but it is better to use it with NGINX as a front proxy and run application under pm2 or similar” Also I think it is completely ok to ask for the right answer on the interview. If I don’t know the answer I always do this in order to improve the skills. 
Take a look at Todd Motto's list for weather APIs and see which one suits you the best. [https://github.com/toddmotto/public-apis#weather](https://github.com/toddmotto/public-apis#weather) Have fun :)
Bahahahahaha
Very useful Thx bro
This has caveats that the request will probably be denied due to CORS and there’s no real way around it. Node.js would allow it but many sites employ techniques designed to block scraping in this way (there are ways around many of them), usually by means of scripts that perform some rudimentary calculations. These can be beaten but it requires extra attention. Additionally, many sites bring in content via JS after these mechanisms have run to try and ensure content is still notoriously difficult to scrape.
Yes, in fact [Vue CLI](https://cli.vuejs.org/guide/) was also recently upgraded to 3.0, which similarly comes bundled with Babel 7 and Webpack 4. 
By experience, I was more or less forced into enjoying user interface design at low level. Not so much by principal but rather a desire for control, I don't even use jQuery in my web apps, so I have some insights I'd like to share. My designs are usually as minimalist as possible, and though my projects rarely reach the scale or complexity that would require data heavy content or even context menus, I put my emphasis into what I dub "s.a.f.e" principals. Scalability. The app should adjust to its environment, from smartphones to laptops to televisions. What about viewing distances? Your pixel isn't my pixel. CSS is your friend, but don't be afraid to get your hands dirty with scripting. Processor cycles are relatively cheap, but a design that doesn't scale well isn't. Accessibility: Is the user using a mouse? Is this application usable entirely without a keyboard? What about controllers, remotes, etc. Are focus navigation routes as short as they can be? Are they logically consistent? All things to consider that aren't very prevalent yet in the public web world. We live in a time now where the only web paradigm is not just mouse and keyboard, and I think it's worth embracing. There's also consideration for the hard of seeing, those with limited motor functions, and - in reference to kids - those who are still learning their fine motor skills :) Fast: Responsiveness speaks a thousand times faster than flashiness. Making your UI look good is important, but making your UI work good looks a thousand times better than just "making" it look good. Easy: the UI should be easy to use. Expect your users to expect familiarity, but don't be afraid to introduce them to new things, but when you do, guide them. Then, not only will you expect your users to do something a certain way, but likewise, your users will expect you to do something a certain way and you will have established a formidable user relationship.
Basic: function(a,b,c) { console.log("Hei"); return a+b+c; } (a,b,c) =&gt; { console.log("Hei"); return a+b+c; } Variations: Only one argument? Argument parenthesis are not required, but can be used: (a) =&gt; { console.log("Hei"); return a+3; } a =&gt; { cnsole.log("Hei"); return a+3; } No arguments? Then parenthesis (empty) _are_ required: () =&gt; { return 3; } Only one expression in the body? braces and/or `return` are not required but can be used: (a,b,c) =&gt; { return a+b+c; } (a,b,c) =&gt; a+b+c () =&gt; 3 (a) =&gt; a+3 a =&gt; a+3 (x) =&gt; x.charCodeAt(0)/256 x =&gt; x.charCodeAt(0)/256 Only one expression in the body but it is an object? You need to put parenthesis around it: // Nop, this won't work: (a,b,c} =&gt; { d: 3+a, e: b+c } // You need to: (a,b,c} =&gt; ({ d: 3+a, e: b+c }) Actually, parenthesis around expressions _can_ always be used if you so desire. So, also valid: (a,b,c) =&gt; (a+b+c) () =&gt; (3) (a) =&gt; (a+3) a =&gt; (a+3) (x) =&gt; (x.charCodeAt(0)/256) x =&gt; (x.charCodeAt(0)/256) There are [probably a couple of combinations more](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions). This is not meant to be extensive. This type of question is better suited to /r/LearnJavascript
You first called it `button` (`var button = ...`) but later tried to operate on `submit` (`submit.removeAttr...`).
I thought major versions were for breaking changes an seeing that this won't work on a previously created app I think it makes sense 
https://developer.mozilla.org/en-US/docs/Web/API/Blob#Blob_constructor_example_usage look at the usage example
no
I'm really happy about the simple Sass integration setup. Install `node-sass` as a dev dep and done!
Good example. The elegant, serif font made it instantly clearly that someone was acting fancy and wanting my money. :P
* Handle feeds in parallel - if feed A stalls, feed B should carry on updating, etc. * Isolated state - your feed updates should be running independently of each other, and shouldn't share any data between them * Care of resources - you need to do things like close down any pending requests when the page is closed. You need to verify the data coming in to make sure it's sane before displaying it. Likewise you should handle when a request takes a long time (wait an adequate time, then give up and try again) * Theoretical limit - basically if you've written your code properly, you should be able to handle two feeds or two hundred feeds without changing your code (other than config values for the new feed locations) - if you have to make significant changes, or copy/paste blocks of code for each additional feed, then you've not approached it right.
Thanks! This clears things up.
i might to that. i.e. check source create other regular solid ones. When i get some time. More interested in how you do it. The algorithm, 3d lib used etc.
Anyone has some docs to try out the new plug 'n play feature from yarn?
Aren’t people moving away from sass?
We'll need more info. What exactly are you having difficulty with? What have you tried? People here aren't going to do your assignment for you, but we'll help nudge you in the right direction if you show you've actually tried
There are lots of guides online that describe the differences between javascript and &lt;language X&gt; e.g. https://blog.angular-university.io/javascript-for-java-developers/ Your best bet is just to get coding, and look at existing code.
As I love this project it, in current form, lacks behind vue-cli: \- don't have ability to modify configuration without eject (in vue-cli [https://cli.vuejs.org/guide/webpack.html](https://cli.vuejs.org/guide/webpack.html)) \- don't have ability for instant prototyping, with build system installed globally (in vue-cli [https://cli.vuejs.org/guide/prototyping.html](https://cli.vuejs.org/guide/prototyping.html)) \- don't have plugin support that can be added to project in any momemnt of it's lifecycle (in vue-cli [https://cli.vuejs.org/guide/plugins-and-presets.html#plugins](https://cli.vuejs.org/guide/plugins-and-presets.html#plugins)) \- don't have UI with ability to start new project, add plugins, run task, show bundle analysis (in vue-cli [https://cli.vuejs.org/guide/cli-service.html#using-the-binary](https://cli.vuejs.org/guide/cli-service.html#using-the-binary)) &amp;#x200B; Not mentioning targeting Web Components or modern build (please correct me if I'm wrong). 
I'm probably not the right person to answer this, but from the minor experience I have with working with websockets. But for handling disconnects and such. Socket.io do have disconnect events both on clientside and server side where you can handle what happens next. Similarly with dropping the internet connection, Native JavaScript have an event for that called "online and offline events". When the user sends the app to the background I think the connection is alive. But I honestly don't know, have not worked much with PWA's / apps if that is what you're working on. Here are some quick and dirty examples: Server side (node.js): io.sockets.on("connection", socket =&gt; { //Handle connection socket.on("disconnect", () =&gt; { //Handle disconnect }) }) Clientside: socket.on('reconnect', attemptNumber =&gt; { //Handle reconnect }); socket.on('disconnect', (reason) =&gt; { if (reason === 'io server disconnect') { // If the server DC's you need to manually reconnect socket.connect(); } // else the socket will automatically try to reconnect }); Native JS events for internet disconnect: window.addEventListener("online", handleReconnect) window.addEventListener("offline", handleDisconnect) I'm new to Reddit and I hope my answer was sufficient enough :)
IMO, anything simple enough to not warrant typescript is simple enough to not bother with a virtual DOM framework like vue, angular or react.
For this project, there are no 3D libs used. Just plotted polygons using simple canvas 2D API in JS similar to the codepen in the linked article. Most of my core insights i've logged in there, except details of algorithms which stitch the stickers into twistable cycles. Will keep you posted if I cover them in depth in some thread..
Thank you very much !
As @mediumdeviation said just use vue-cli for setting vue projects. It has few things sorted out - [https://www.reddit.com/r/javascript/comments/9kmfsc/create\_react\_app\_20\_babel\_7\_sass\_and\_more\_react/e70qpbz/](https://www.reddit.com/r/javascript/comments/9kmfsc/create_react_app_20_babel_7_sass_and_more_react/e70qpbz/)
Hi and thank you for your answer ! Honestly, this post was kind of a last attempt before giving up my initial idea and find a workaround and finally finishing my website. I already posted a more detailed version of my issue on stackoverflow last week and a french version on a big webdev french forum, neither of them gave me any answer so I was prepared to change my idea and already have some design-based solutions in my mind ! I'm a graphic designer, so my website/portfolio kind of *have* to be original and personal, although you're right, it have to be usable to ! My website isn't that much avant-garde or something but the fact that my issues are quite precise explain why I haven't go any answer and why I should start to think about another design for it as, as you said, it's not worth the time as I'm not even a professionnal developper. Your post motivated me to finally let go my idea for good and try something else, thank you ! And sorry for my poor grammar :(
To?
Hah? Why would they?
Styled Components or some other CSS-in-JS solution.
What is -race detection? I only know race detection from multithreaded programming, but JavaScript doesn’t have that.
i like styled-components but because of the way it assigns class names it's a pain in the ass to work with css animations
Sass works just swell for most people. Sometimes hype is non-reflective of industry adoption
Yeah that's a good point on the need for padding, I ran into that when I was using the texture atlas approach.
Well I guess it's time to try React now *Vue-elite passings by*
FWIW, there are no pointers in JS, function or otherwise. That notation is for a function object, not function pointer.
I don’t think this will ever be a concern for CRA. You might want to check out Gatsby, Next.js, After.js (https://github.com/jaredpalmer/after.js). 
race conditions can happen in any type of code. Even if we don't take asyncs, fibers or workers in consideration, making two XMLHttpRequests to two different feeds should result in a consistent state displayed. E.g.: only the correct feed should be printed, in any condition. Poorly written code could inadvertently switch between feeds, maybe because one timed out. 
Just to be explicit - Does create-react-app 2.0 support decorators? 
What have you tried so far?
&gt;var str="a3l52x7"; &gt; &gt;var res = 0; &gt; &gt;for (var i = 0; i &lt; str.length; i++) { &gt; &gt;if (str.charCodeAt(i) &gt;= 48 &amp;&amp; str.charCodeAt(i) &lt;= 57) { &gt; &gt;res += parseInt(str\[i\]); &gt; &gt;} &gt; &gt; } &gt; &gt;document.writeln("Result= " + res); &amp;#x200B; The for loop iterate on each char of your string, then it check if this char is between 48 (Its the 0) and 57 (Its the 9) then it add it to the Res variable, parseInt is converting the string into integer 
It's a bit of a shame not spotting the bug in the `getWord` function while you were refactoring ;) I mean, sure, it was already there in the original code, but... what good is learning to refactor and organize code if you don't spot easy bugs? To a certain point it makes the whole thing look at least _not as good as it should've been_.
Oh. You mean how it should be Math.floor instead of Math.ceil? I did see it when I first looked at the code. I agree I could have fixed it, but this is an article about refactoring - by definition, when you refactor, you *do not change behaviour*, even if that means I keep a bug.
The parseInt in your reduce function and the map function are reduntant.
But wait until you run your build script. It’s the first law of preprocessor dynamics: Sass will always find something to be upset about in a new environment. 
Why post a documentation page? This is just noise.
This is an intentional decision - CRA is supposed to offer a minimal, convention-over-configuration tool that makes it easy to create a React project. That's it. vue-cli is excellent and I'm glad they keep adding cool new stuff to it. They're not trying to do exactly the same thing which reflects the somewhat different philosophies I believe each team follows. Also I'm just salty that vue-cli throws an unfixable warning when you import .graphql files and it pollutes my console ʘ‿ʘ
No. The reason (a very good one imo) is that decorators are still an experimental proposal with changing, unstable syntax. They'll support them once they even out, probably.
JavaScript in a browser has no concept of files, so no, you can't get at them - you either need to request the URLs, or bundle them together.
Considering that he's not sure how to approach the problem, I doubt regex would be something he's learnt yet. @op what have you tried and where are you getting stuck? 
dammit.. thanks.
^^^^^^^^
When you say don’t use arrays, can you be more specific?
I've been looking for something like this but using Apollo graphql and look, there's just that exact thing linked! Thanks for sharing.
i see. thanks for the info. btw, i blogged your software at http://xahlee.info/math_software/magic_polyhedrons.html 
That's my preferred choice. PostCSS gives me everything I wanted from sass, and I needed postcss anyway for autoprefixer. Much cleaner and faster to eliminate sass.
Your welcome! In case your interested I have another GitHub project that is using React Apollo &amp; GraphQL Link: [https://github.com/simpletut/Universal-React-Apollo-Registration](https://github.com/simpletut/Universal-React-Apollo-Registration)
I know, I love his videos. Also he has great and big community around him, so he can do a lot.
ooh sorry its the p5.js library
This is the correct and expected behavior.
Yeah right, just a little interesting.
Need to make it a Chrome Plugin. =)
For complex questions maybe, but even then it'd have to be a small fee. Like $2-$5 max per question.
// Array &amp; shit free 💩 `function sum(string){` `let total = 0;` `for(let i = 0; i&lt;string.length; i++){` `let char = string[i]` `if(char === '1' || char === '2' || char === '3' || char === '4' || char === '5' || char === '6' || char === '7' || char === '8' || char === '9'){` `total += parseInt(char)` `}` `}` `return total` `}` &amp;#x200B; `let result = sum("a3l52x7") // 17`
Why did people get cars when horses worked just fine for most people?
Learn floating point before shitposting, please.
Openweather is good. Its free and theres a lot of tutorials on how to use it if you get stuck. I've used it for two projects already.
Thx I will look at it
&gt; it would probably be useful for you to have a bit of background on [Zesty.io](https://www.zesty.io/) and what this app is responsible for. Having read this paragraph 4 times now, I still have *zero* insight into what this app is or how it might be useful.
Hi /u/erkansivas35, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/iainmoncrief, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/CoqeCas3, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/spencemister, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/ToxicPhantomVibe, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Thanks for your understanding.
I'm very much grateful. Thank you!
Google.com
Ah okey, thank you
Great question! I run the youtube chan @designcourse and I'm going to feature your question as the topic of my video tomorrow. I'll report back with the link.
Meme maker which \*doesn't\* uses any backend or any JS library. Can toggle between dark and light themes and save the meme too. Site [live at here](https://meme-creator-live.netlify.com) [Github](https://github.com/ajitid/meme-creator) link 
Stylelint plugin to validate CSS with 8-point grid guideline https://github.com/dcrtantuco/stylelint-8-point-grid
Users can have multiple websites on our service, this is how they can access meta information and manage users, teams, and other non-content related information on each instance. It is also used to start a new instance, manage user information, and create and manage teams.
[Github repo](https://github.com/ajitid/meme-creator) link
If you split the x-string you can parse the two parts and use the second and third parameters of [Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date). Just remember that month starts with January as 0.
done
Heyo! Marketing Manager for [Zesty.io](https://Zesty.io) here. Our SaaS Content Management System 1. is a SaaS product, no infrastructure to manage (good/bad depending on your project's needs) 2. decouples content, meaning you can use our platform to build websites or *decouple* that content from it's presentation and send it to other destinations (Mobile/Web Apps, IoT devices, Amazon Alexa, etc.) all from one platform, but still maintains 3. a super user-friendly content manager, so marketers/non-technical folk can manage this content and where it needs to go without IT friction. Opening up the account manager app means that now developers can access information that was locked previously and manage users, teams, and other information per content instance independent of the accounts app. This is working toward a future where developers will be able to still use their workflow, allow users to use SSO to access their instance, etc. independent of Zesty.io.
WOO for SASS
Yes
What are the 3 biggest missing features?
Used bitbucket at a company I used to work for, struggled with the PR diffing, has it gotten better?
I usually do that using visual studio, so dunno. either by rebase or merge
/thread
I am a project manager / developer, and may be interested in assisting with open source. 
Needs a corresponding Yarn release first. Stay tuned
Have you considered [moment?](https://momentjs.com). With your example you [can check if a date is in range](https://momentjs.com/docs/#/query/is-between/) in one line: const isInRange = moment(y, “DD/MM/YYYY”).isBetween(moment(x.substr(0,5), “DD/MM”), moment(x.substr(9), “DD/MM”), null, “[]”); (On mobile so may have a typo)
There are umpteen billion open source project management tools already out there, and another umpteen billion private ones. I'm highly skeptical that if you seriously considered ten or even just five of them that you wouldn't find one that meets your needs. BUT ... there were umpteen billion email services when Gmail first came out. There were lots of social networks before (and after) Facebook, lots of electric cars before Tesla, etc. If "satisfying your needs" means you need a tool that truly is different or unique compared to everything that came before, then maybe you do have a case for building it. I'm just skeptical that that's the case, and in my experience far too many "not made here" engineers feel the need to re-invent the wheel rather than spend an hour or two exploring existing solutions.
Planned for later in the 2.x series, probably this year.
Just upgraded react-scripts and it worked. Thank you CRA team!
&gt; Admitting that you don't know something is always better than trying to lie about it. To expand on this, depending on where you're looking to work, there is often going to be situations where you are the 'source of truth' on a particular tidbit of knowledge, maybe not even programming related. You don't want to be surrounded by people who will guess at the answer to an important question rather than admitting they don't know. (Speaking as someone who sometimes guesses at answers based on vague recollection)
`care of resources and shutdown the subscriber gracefully` I'd assume if this was a browser it would send a unload signal. If it was a server-client, it would send the data source a message on shutdown, and any clients connected to it. Possibly have established reconnection logic. `primus` comes to mind. Sounds like they want you to build a `pub/sub` client with multi feeds that it combined in a view layer.
Hi /u/BraisWebDev, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
I'd second this, they are asking rather a lot for an interview screen. That said, a quick trip into RXJS should tick most of the boxes. My concern would be, what follow up questions are they going to have? 
Da fuck is a gourmet developer? Are we just flipping through the thesaurus now?
[https://github.com/reachpriti12/t-rex-runners](https://github.com/reachpriti12/t-rex-runners) 
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/typescript] [r\/javascript - How Pixling World is implemented (Typescript\/WebGL evolution simulator)](https://www.reddit.com/r/typescript/comments/9ktrjc/rjavascript_how_pixling_world_is_implemented/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Sorry Mr license-bot but the package.json file states the license as ISC. You need an upgrade.
Could you upstream a patch with the features you need?
For security reasons, javascript in the browser has very limited access to the file system. You will only get notifications about file uploads when the user chooses a file to upload. You won't get notified if they update that file unless they hit the button and choose the file again.
Thanks, that is all i needed to know!
Hm, of all the complex projects I've seen people encounter for interviews this one actually seemed not *too* bad. But then again I've written similar stuff in my free time, so perhaps I'm biased.
I've had similar feelings recently. I need a tool that basically allows me to track requirements instead of writing and keeping specification documents up to date as requirements evolve. I've spent a while looking and trying different platforms, but haven't found anything that really works. So yeah that makes two of us. I'm primarily backend webdev, but have only dabbled with node &amp; mongo. I'd be happy to contribute where I can, time permitting.
I've watched a bunch of this guy and Fun Fun Function. While the FFF guy is funnier and gets into more theory and opinions on techniques and syntax, he steers away from the subject and isn't great at explaining things, where Coding Train is much better at explaining concepts. I come away with one watch of a Coding Train episode feeling much more confident about a topic I was unfamiliar with. FFF just seems better at discussing a topic than explaining it.
Agreed. You'll probably be more interested in [folktale's `data.task`](https://github.com/folktale/data.task).
I used to struggle with overthinking code before writing it. Initially when seeing some of his videos, it really bothered me how little thought he put into his code and how nonchalant he was about it. I started to realize, though, that he makes a ton of shit, and gets a ton of experience along the way. He's really helped me to stop overthinking stuff and just start writing out a messy solution
thank you :) I'll make sure to make a github project and send it to you :)
thanks :) I'll keep you updated :)
my ongoing project for footy lovers. I'm living in NZ and follow EPL and other European leagues is a challenge. Most games are during the night and I watch games I'm interested on the following evening. But sometimes there're other games which I don't mind to know final results but not for the games I will be watching later on. So I developed and fixtures listings with hidden score :) and you need to click to learn the final results [https://footballresults.xyz](https://footballresults.xyz) React/Redux + material-ui + football-data API I know it's ugly, but serves the purpose. Yet to work on champions league results
You know I think you're right. I might have actually missed the point I was trying to make. 
&gt; it feels like if an error is thrown its for a reason Well, you're not wrong here. If you're having to test for the existence of the property first it means you've put yourself in a situation where you have to handle an object that may or may not be initialized, or may or may not be the "type" you expect it to be. This isn't all that abnormal in javascript, but the way to avoid it and all the property tests/checks is to not put yourself in such a position. If you're in a code path that expects the object it was handed to have property `foo`, don't pass it objects that don't have property `foo`.
The best way to handle the situation is to find out why the object is not defined and to figure out how to pass in the correct data. The problem is either that your code is meant to handle undefined but isn’t or it isn’t and something is causing bad data to be passed in.
You could use an arrow function it automatically binds (this)
Is it just me, or wouldn't it be easier to just measure everything in cents and use integers? Nobody has $2^51 and then you don't need an additional library or learn a new api
that's just binding/creating a new function and then throwing it away - not getting assigned anywhere so it won't be used or stored.
does your onChange reference `this`? If not, no binding is needed, and it might not be if it worked with just `this.onChange.bind(this);` which does nothing. 
Didn't like the sugar syntax at 9min. Barely readable.
Some of the proposals are really interesting
I wouldn't worry too much about what HR thinks. It's really the hiring manager's call. If you are a cultural and technical fit, then the fact that you honor your commitments to your current employer would only speak in your favor. So don't stress about it.
Mhm I guess that this could be in your favor, since they didn't declined right out and worked a reschedule with you.
Might be worth mentioning, you can isolate the nondeterministic code from the deterministic code. You have a function that both makes an API call and then applies a transformation on the result, but you can split off the transformation code and unit test that. Then just compose that transformation with the function that makes the API call... e.g. &amp;#x200B; await someApiCall().then(unitTestedTransformationFunction) &amp;#x200B;
Probably just you! 🙂
I got really stressed because I really don't want them to think I am careless or something. I have been working my ass off for the year doing everything I can do to set myself up for success with potential switching of careers but this one really got me today. I can't really walk out of my current employer but at same time I don't wanna look foolish to a potential one. Hopefully them rescheduling immediately is a glimmer of hope
One obvious thing is that you can compose both promises and awaits on a single line in a functional way if you want to. And you didn't try to do that. So I'm sorry but I don't think you really know what you are talking about. I think you're getting upvoted by people who really invested in writing nested then clauses all over the place and haven't gotten used to the await syntax.
Work around it by replacing the file input element with an empty one, each time the file has been processed. After the page has finished loading, during the page initialization and after the file input element is already set up, clone it and attach the event listener, then save it in a variable. When a file is inputted and has been processed, replace the file input element on the page with the clone one from the variable. Then repeat the above cloning process again.
I think you should be less pompous in the way you attempt to provide feedback and advice.
Basically adapt an existing open source project to your needs. Rewriting from scratch is pretty unpredictable and will probably entail a few unforeseen pain points. Plus if your needs are shared by other companies, you could get free work and bug fixes. Stone soup and all. 
The large enterprises that I know of shifted to Agile and tools like Jira (&amp; seem to be happy). We backtrack features through user stories to find out the "evolution". I had come to expect that no one really wants a PM tool anymore. If your problem is about requirements: did you also check out the many requirement management tools that have minimal process outside the requirement management (OR/AND) ALM tools that claim to cover the universe? (Rational suite, et. al.)
&gt; But what if we wanted separate catch blocks for some awaits and not others? Imagine what that would look like! Huh? So it'll look like normal exception handling code. And...? IMO promises should never be used directly if possible. They completely break the language's exception handling and make it really easy to swallow errors.
If you have this code: edible.fruit.color And you have an error message e.g. *can not read property fruit of undefined*, it means that `edible` has `undefined` in its value. JavaScript engine need to read the object first, in order to retrive its property, so that it won't retrieve the property from the wrong object. The reason why the object has become `undefined` is because during the variable assignment of `edible`, the source value is already `undefined`. And the reason why the source value is `undefined` is due to non existing property from whichever object it supposedly resides. You'll have to debug the source code to trace which part of the code that actually evaluate to an `undefined` value.
I've written software like this in the past to track construction work. It was waterfall and had to deal with lots of time/dependence related complexities (which probably is a bit similar to your requirements need), but still even would I not have those challenges added on top, I feel like this is a big, big task at hand. I took nearly a year for 2 experienced devs (it was basically a tailored, in-browser, MS Project replacement). I'd say maybe your approach is the one to change (it might not, but hear me out). I feel like you'd be better off splitting everything in a typical Epic/Stories, and making real good use of it. Document all requirements in the stories, and whenever you update things, append comments to it describing what motivated that change. Basecamp and Saleforce aren't designed for that, but something like JIRA or Clubhouse might.
I have hired 1000's of employees over the years, shit happens. If they drop you because of it, you are better off, because that would be a terrible place to work. 
It sounds like you work in a not great place. It doesn't sound like there is any desire to invest in good software practices. It sounds like you conveying your values might be seen as hostile. I suggest you exit asap and take everything you've learned there with a grain of salt. You'll find a good job, just don't stop searching.
No worries mate
Thanks a lot for the answer, Could you elaborate Q1? Should I send a request once the user closes the window, isn't this risky?
 for (var animal in data) { if (data.hasOwnProperty(animal)) { var value = data[animal]; // ... } } 
Personally I would do it recursively, like so: const increment = (x = 1) =&gt; { console.log(x); if (x &lt; 10) { setTimeout(() =&gt; { increment(++x); }, 1000); } }; increment(); &amp;#x200B;
It will probably be OK, they probably believe you, and understand. You can help avoid situations like that by scheduling out of the office time to do the interview. Its OK to fib about what you are doing.
You could use canvas to base64 encode that file and compare that way. I think the FileApi can do it without canvas
If you're going to be a front end developer you don't need to know about data structure or algorithms.
Yeah I found dash to be a bit laggy on scroll and has ad delays too
wrong
The [optional chaining operator] is a Stage 1 proposal right now. It would let you write your example as `const foo = object?.property?.x`. If your team is using Babel and wanna give it a shot, [there's a plugin for that](https://babeljs.io/docs/en/babel-plugin-proposal-optional-chaining).
this is javascript not C++ keep that opening bracket at the end of the previous line! or else!
God damn I wish I were smart
* private/protected properties * ensures function calls give the right number of arguments * lots of other safety stuff like this, outside of typing * optional arguments with default values * interfaces, and they're much more powerful than in most other languages. you can use interfaces without actually implementing them in a class - I do this a lot for config objects and stuff like that. many of my classes now have a "config" interface and "result" interface, which works much more neatly than a bunch of top-level properties, and allows a more functional style of programming. * some polyfill type of stuff, especially around classes, based of the ES version you choose in tsconfig to be emitted. * probably more stuff I can't think of right now JS is way too loose and silent-faily for me to trust, and I'm coming from a PHP background. I was already longing for many of PHP's features that were missing when I started with Node... but Typescript solved pretty much all that stuff and more.
"Lambda out of parentheses" has been in the Kotlin language, and I also didn't like it at first. But now I am in love with it, as it makes method chains look much smoother. saveResource = itemToSave .on { scheduleItem.valueIsNotNull() } .map { Pair(scheduleItem.value!!, it) } .switchMap { (item, assignment) -&gt; if (assignment.id !== null &amp;&amp; assignment.id!! &gt; 0) { return@switchMap groupAssignmentRepository.updateAttendee(item, assignment) } groupAssignmentRepository.createAttendee(item, assignment) } .onLoadingPostTo(loading) .onErrorPostTo(errors) (Sorry if the formatting is off, I'm on mobile) In my opinion it looks cleaner. Also a side note, Kotlin also has the "null coalesce" operator as well, ex: val result = user?.property?.other ?: "Default value" The "?:" Is called the Elvis operator, and if any of the values are null it will default to whatever is after it. 
In a life of broken promises, this was refreshing.
replaceAll would be nice, but you know what would be even better? Not having a broken replace to begin with. I think replace should have had an additional parameter to specify how many instances to replace, defaulted to infinity "Hello world".replace("l", "") // Heo word "Hello world".replace("l", "", 2) // Heo world
Await forces you to name intermediate values and encourages a more procedural style. I use it all the time where appropriate, but raw promises just read better in situations where a more point free style reads better getUser(id).then(getCarsForUser).then(doSomethingWithCars) This is cleaner as long as you don't need to hang on to the user reference to do something. As soon as you need to hang onto a reference, then you are nesting promises and it gets hard to parse. In those cases async/await is much nicer. It's not much different than Haskells do-notation, which is purely functional.
Super awesome! However, Save button doesn't do anything for me on mobile
You can downvote me into oblivion but holy fuck am I sick of seeing the same articles being rewritten over and over and over again. No offence to you OP but for the love of god y’all need to find some new topics. 
*Harmonica plays one note, Barbershop duo with piano slides into view* We heard it was your cake day and we're here to sing to you this little stupid song that we made up right on cue. *Singer falls down trying to tumble* Damn -- play me off, Johnny! *Piano solo as duo slides out of view* ---- Yes, it is the two from Family Guy.
This guy .gets it
What browser and OS are you using? (I tried it on Chrome/Android and it worked as expected.)
Neat idea! Just a suggestion you should probably have a sample image loaded as a demo.
It's actually called "optional chaining"; "null coalescing" is a similar but somewhat related operator: `a ?? b` meaning `a != null ? a : b`. And optional chaining is incredibly nice, exists in plenty of other languages, and developers have been asking for it for like five years now, but it keeps getting shot down in committee. The main problem is that committee members think `a?.b`, `a?.()`, `a?.[b]` is ugly, and veto it, demanding something more consistent, but they also think `a??b`, `a??()`, `a??[b]` conflicts with null coalescing, and veto that, too. The proposal to change null coalescing to `a??:b` was also shot down. https://github.com/tc39/proposal-optional-chaining/pull/48#issuecomment-377612223 I _vastly_ prefer `a?.b`, `a?.()`, `a?.[b]`, and `a??b`, but ugh, committees.
Just remember that what actually comes up in interviews - and really, the skills that they'll find meaningful - can differ *heavily* depending upon the company you're interviewing for, and particularly the kind of work involved in being a frontend developer there. You'd probably actually be far better off in working on the skills that actually apply to the tasks you're likely to have to complete as a frontend developer. Speaking from experience here. How well you know CSS, or possibly basic familiarity with something they use elsewhere in the stack, or owning a copy of photoshop, is a lot more likely to matter to most people hiring junior front-end devs than how much you know about algorithms. Either way, you're looking for one of [these](https://github.com/haseebr/competitive-programming/blob/master/Materials/The%20Algorithm%20Design%20Manual%20by%20Steven%20S.%20Skiena.pdf), [three](https://github.com/haseebr/competitive-programming/blob/master/Materials/Introduction%20to%20Algorithms%20-%203rd%20Edition.pdf) book, or [books](https://github.com/haseebr/competitive-programming/blob/master/Materials/Algorithhms%204th%20Edition%20by%20Robert%20Sedgewick%2C%20Kevin%20Wayne.pdf). Pick one, then find one of the accompanying lecture series from a university that uses it to teach their second year algorithms course; you don't need to watch the lectures (though you should) but they're a good way of knowing which content to cover and in what order.
Do you mean “treat these functions as synchronous” ?
No, you. 
No, I meant what I wrote. I guess, to elaborate: if you were to treat the functions as synchronous, you may call them as if they were quick calls that could be executed procedurally with minimal overhead. Conversely, if you're treating them as asynchronous, you may assume that they could take several seconds or minutes to complete, meaning it may make sense to run them in parallel (see: Promise.all). 
Nope. Also that guy doesn't deserve the advertisement he is getting. We should not endorse a mysoginistic, diversity hater with a history of insulting or being condescending to young developers and alternatives ideas.
I guess if it was only available with call and apply that'd avoid the ugliness, although would reduce the brevity and require the 'this' parameter.
[https://www.youtube.com/watch?v=XKu\_SEDAykw](https://www.youtube.com/watch?v=XKu_SEDAykw) &amp;#x200B; Basic solved in O(n\^2), then O(nlog(n)), identified appropriate data structure (set) to optimized in O(n).
No problems, I hoped it would be of use to someone!
If only Typescript were a thing.. ;)
Could you give us info on what the DOM looks like? That would help us help you faster :)
Kept skipping the video waiting for one guy propose the other. Completely misunderstood "proposals" :(
if you consider videos [https://frontendmasters.com/courses/data-structures-algorithms/](https://frontendmasters.com/courses/data-structures-algorithms/)
give me a non-video version and we'll talk then
Angular templates already implement a very similar "[safe navigation operator](https://angular.io/guide/template-syntax#the-safe-navigation-operator----and-null-property-paths)" and I assure you the syntax is a delight.
Hope this helps you. ```html &lt;div class="stack"&gt;&lt;/div&gt; ``` ```css :root{ --color: black; } .stack{ width: 50px; height:100px; background: var(--color); } ``` ```javascript // This returns a HTMLCollection ( Like Array ) const obj = document.getElementsByClassName("stack"); // Loop through all elements in the collection and add Event Listeners for(let i = 0 ; i &lt; obj.length ; i++){ obj[i].addEventListener("mouseover",handlemouseover); obj[i].addEventListener("mouseout",handlemouseout); } // Fires when mouse is over an element function handlemouseover(e){ e.target.style.setProperty("--color","red"); } // Fires when mouse has left an element function handlemouseout(e){ e.target.style.setProperty("--color","black"); } ```
Electron
aids
One more issue: Since functions are suspended right in the middle by `await` you suddenly have issues never seen in single-threaded Javascript. Now the value of a variable might be change by an outside "thread" (using that word because in threaded programming you have that issue). A function you called with `await` might change a local variable if scopes allow it, or a variable in the outer scope used by the function might change in the meantime.
I _never_ use this shorthand any more. Too many times did I refactor a function - weeks later - that in some other place was called through this shorthand. I added a 2nd and maybe even a 3rd parameter used from some other place that used that particular function. Guess what happens: `map` sends 3 parameters to the callback, most functions only use/need the first one so the 2nd (index) and 3rd (the array itself) are ignored and forgotten. Now I always write it down explicitly, if I only want the array-item itself to go to the callback I say so explicitly.
Right. 
You don't have to nest promises. Especially when you don't have pure chains but more complex dependencies between the asynchronous tasks you are better off assigning every single promise to a variable, and then use const `otherPromise = myPromise.then(doStuff)`. If it's just a chain this would look similar to (but not behave quite like) a chain of `await` variable assignments. This style's greatest benefit is with complex dependencies though, as mentioned.
Does it need a GUI or will a CLI program suffice?
Really? I had a discussion with a teacher of mine about learning from books vs learning from videos. I learn better from videos while he learns better from books. What is the benefit from learning from books vs videos? I like coding with the video and than testing it out and playing with it is a lot more fun, the teacher agreed.
but ublock
So this was downvoted to -1 but it is 100% valid. What on earth are some people here smoking? Look up "nondeterministic" on Wikipedia if that is what triggered you, the word is not misused. OP says code that depends on "3rd party state" (random data somewhere else, remote server) should be separated to be able to test the code that delivers predictable results. That should be a fairly uncontroversial observation, since how you test such two kinds of pieces of code is very different, since you don't know what to expect in case 1 (unless you simulate a fixed environment for such code - extra work) but you do in case 2 (much easier, just a normal test).
**JSON is a string.** You have an object.
good
&gt; What is the benefit from learning from books vs videos? Being able to learn better from books is often a sign of generally better learning abilities. Your teacher might be able to read a book five times faster than you, but I doubt he's able to watch a video at 500% speed and assimilate both the video and audio info streams with the same accuracy. This is a severe limitation of audio/video. You can train yourself to read and think faster and faster, but it's hard to perceive visual and audio information running at much higher speed. This is when it comes to textbooks. Digital text is even better - you get much faster data access (I use to joke that textbooks lack Ctrl-F or / or whatever hotkey you use for search), it becomes much simpler to annotate and copy/paste snippets, make backups etc. TLDR: text still remains the best info carrier, at least until we humans learn telepathy :-)
That’s our job, making telepathy possible 😜 You’re right about the limitations of video, didn’t thought about that. But co-writing with a book takes up a lot more time than co-writing with video. Both has it’s own pro’s and con’s. Maybe I should give it a go. Do you have any recommendations?
I had seen konva, but I'm kind of starting my journey with drawing on canvas and have been trying to stick to learning the basics for now. Drawing declaritively is appealing, particularly within the React world, so it's on my list to check out. Thanks!
What happened to that bloody awful #class #variable #proposal #that #looks #like #crap? Swift does it much better, it uses a .
upvote
This youtube playlist has 519 videos in it. I mean, really?
Q1: it depend how you define a session time. For example GA count session time by using the timestamp of the last event subtract the timestamp of the first event. If we also have the same definition then everything can be calculated on BE side. &amp;#x200B; Q2: You can't check that. But do you need to check? This question depend on the purpose of your service. If you want to provide a service so you can monitor other people then too bad for you. If you provide a service so that your customer can self monitor then you don't really need to care about that. Q3: Do you need to collect data in offline mode and then send them latter when the connection is restore? If so you can apply service worker. &amp;#x200B; Q4: Depend on the data you want to collect. Browser and OS can be extract from User Agent so it fine to do this on server side. Screen Size/Viewport Size need some JS code to extract.
anyone can make one of theses, but making a good one? thats really difficult and this isnt one
Btw.. how the hell can I indent code on reddit?
&gt; But co-writing with a book takes up a lot more time than co-writing with video. If by co-writing you mean writing the examples from the book/video and making them work, well I never do that. I always read technical programming books as fiction and never try the examples. Sometimes I just return to particular parts in the books for reference, but that's it. For the practical part I do my own things. I don't have time to retype the examples from the books, my life is too short. I got plenty of needs that imply writing software to solve my own personal practical problems. If I think about it long enough, I always come up with some really small project that's (at least theoretically) possible to be made by an almost complete language newbie. I don't know how useful my personal experience would prove to you, but here you go. My JavaScript journey started when I was living in a cave with no internet access and a very old computer with such a small amount of RAM that it could only run Opera. I found three books about JS on some old CD and picked the basics from them. Having a bit of prior programming experience helped, but I wouldn't overestimate that influence. Here are the books: https://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742/ https://www.amazon.com/JavaScript-Enlightenment-Cody-Lindley-2013-01-10/dp/B01FEKKCSA/ https://www.amazon.com/JavaScript-Bible-Danny-Goodman/dp/0764531883/ I found the first one most interesting and useful, the last one was good to use as reference and replacement for the lacking access to online searches. As you can see, all of them are quite old (and maybe outdated already, since the JS ecosystem moves ahead so fast). I'm pretty sure there are tons of newer books nowadays. Very recently I was suggested to have a look at http://javascript.info/ but I didn't manage to get some time to have a closer look at it, so I can't comment on the content there. HTH
In my experience, books breed an understanding of a concept where as videos generally just give instructions. A video will be do x, y and z and now thats how you do concept a. Where as books tend to explain why we do those steps and what the larger concepts role is... If that makes sense? books also allow you to progress at your own pace where as videos make you progress at the "teachers" pace. And I think one of the main advantage is all the extra bits in the books. Most video tutorials will just be the required knowledge but a lot of books have extended knowledge and exercises without step by step guides to get you more aquanted with what you're learning which is incredibly useful when you're new.
&gt; Being able to learn better from books is often a sign of generally better learning abilities. Don't want to come off as a "but res3arch!!", but do you have any sources for that statement? I actually curious about it as it's a bigger discussion within my family, but also daycare and my munciplaity at the moment. Would be nice to be able to read up on it! Cheers! 
Thank you very much !
Animating it was what I aimed for so this is perfect ! 
I don't really know how to do, or even what is a DOM, sorry. I think the others comments covered pretty much what I needed to know but here's my codepen if you want ! https://codepen.io/Goo_m_Ba/pen/zJmopr/
Why not using Node.js ?
Firefox nightly on Android
OK, thank you for the reply - I don't agree but I understand the argument. 
Didn't think of that thanks!
I'm not preaching it, this is just what works for me best.
Your solution is basically what I'm looking for, and thank you very much ! Do you know how should I proceed to make that windows disappear when i'm clicking elsewhere ? I already changed the onmouseover property by onclick, but I don't know any offclick or something...
We like to keep the will-they-won't-they tension high
I’m not _that_ easy, you know.
That is correct. Most of the proposals have a section called “Prior Art” or similar that lists what other languages have this features and how it worked out for them. Example: https://github.com/tc39/proposal-optional-chaining/#prior-art
That’s the class fields proposal which just recently got to stage 3: https://github.com/tc39/proposal-class-fields It’s in development for Chrome: https://www.chromestatus.com/features/6001727933251584 
Oh well, it joins a whole list of other bloody awful JS ideas like mjs, and yet JS was bloody awful in the first place. The real skill is in taking what you have to work with and making it work, whereas most of CS seems to be saying "if we had this, then we could do that". So lets see where it goes. But I will say this. Swift has a deprecation management process where you can load in an old bit of code and the IDE says "recommend you upgrade to this"... then it recommends you upgrade again... and then again... and then it works. I can now read this vast spectrum of old documentation and still have example code that actually works after a few guided upgrades. We need more of that, not this wasteland of the best intentions. People writing documentation really cared, and then it's obsolete. Introduce the Swift upgrade mechanism for old JS code and we're in a much better place.
You're one of the guys in the video?
You could say that we are the two guys from the video.
Too human for me, just tell me what the assembler output is, and we'll make it work.
It’s not that easy, sadly, as the web is special (tm). In contrast to Swift, C#, Go, Rust and many other modern languages, JavaScript is obviously not compiled and one of the Web’s core features is that it’s backwards compatible. Sites from 1990 still run today the same way they did back then. Deprecations are virtually impossible as lots of code out that has literally no maintainer. So while we can add new features to JavaScript to try and make it a decent language by modern standards, we can only do that in a way that doesn’t break the old code at the same time. Hence why they resorted to the admittedly unusual (or ugly) `#` for private fields. I hear your frustration, but it’s hard balance to strike. The people on TC39 care deeply about JS and the web, so some sympathy for the difficult decisions they have to make goes a long way.
Hey thanks for telling! I just fixed it for Firefox. Check it again. It'll work.
`let base64Array = []` `for (let i = 0; i &lt; this.blobArray.length; i++) {` `let reader = new FileReader()` `reader.readAsDataURL(this.blobArray[i])` `reader.onloadend = () =&gt; {` `base64Array.push(reader.result)` `if (i === this.blobArray.length - 1) {` `console.log('calling the api')` `}` `}` `}` &amp;#x200B;
So to recap: You set the time, then missed the time. 3 hours later, they contacted you to reschedule and you did. Yes, you're starting with a mark against you. At the very least, you should have called just before 1pm to tell them that you couldn't make it. Not contacting them for hours, and them having to contact you, were serious mistakes. There is no interviewer in the world that wouldn't take that as a sign of how reliable you are. That said, you can still overcome it, but you had better tell them that you understand how bad that was and make sure that nothing like it happens again during the interview process.
Awesome, thanks!
Thanks for your answer. Yes it was a stupid mistake of mine\^\^. However the code still doesn't work. Any idea on how to fix it? 
1. Looks for projects with CoC. 2. Doesn't contribute to projects with CoC. 3. Enjoy life more.
I know that it's too late to change it now, I was saying that it should have been different since the beginning. But what about the last parameter is not clear to you? Seems pretty straightforward to me. 
7 hours to learn a new skill is a blip compared to the amount of time you’ll actually be using it, which for me has now been thousands of hours.
/r/iamverysmart &amp;#x200B;
Thanks!
&gt; But what about the last parameter is not clear to you? What it does. It's similar to the `true` in `el.addEventListener(callback, true)`. Sure, I can look at the docs, but there's little in the structure to jog the memory. Compare to `el.addEventListener(callback, { useCapture: true })` - if you understand the concept of capturing, this is much clearer.
&gt; any personal real life experience beats any research This is the story of how Mr. Anecdote defeats Mr. Science in the theatre of the mind! Seriously though, even in your example just now, you are giving absolutely no allowance for psychological conditions like Dyslexia or ADD. Some of the most intelligent people I know in, for example, my field of software engineering, have ADD bad enough that videos are the first thing they reach for when diving into longer topics. And their intelligence isn't just anecdote because you can see and to some extent quantify the quality of their code solutions, in code review, in subsequent fixes to their original submissions, in counting connascence &amp; cyclomatic complexity, etc. And according to the University of Michigan, of people who struggle with reading, 70-80% are estimated to be dyslexic. Dyslexia does not make you less intelligent. It makes it harder to read. So if you can find alternate media for consuming learning materials, like videos, audio books, or lectures — or if they can use digital devices to change fonts on text to something like OpenDyslexic, then reading becomes available... but not in *print media.*
“You are the two guys from the video..” Wow. He ain’t lying.
Code of Conduct. The open source equivalent to an adult diaper.
The assumption you're doing in your comment is that there's a maintainer which, as /u/dassurma said, there often isn't.
Only if you are doing it professionally or freelancing. Like me unemployed it's basically useless unless I go freelance as well.
Yeah, how dare a project expect people to act with common decency?
Hey, OpenCensus seems cool but as far as I can tell it wouldn't run in a browser right? Yeah absolutely! I think the best way to contribute right now is by getting involved; join the discord, building a couple of world and if you want, help expand the wiki: http://wiki.pixling.world
Thanks for that. I think I've fixed it.
I really hope some form of it sticks. Does the proposal allow you to chain multiple like this: `user?.data?. entries?[0]` 
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Yep, the writing is on the wall. I would never volunteer to use Sass over CSS-in-JS.
Heyyyy thank you for sharing! I made this project. Happy to answer questions about it if anyone is curious.
Doesn't this go against what React is about? Composition over extension? Besides, this exact thing can be handled with the Context API, which is already built into React.
Do you use source control to manage your javascript workflow?
Can’t watch atm but does it have pipes? That’s the only proposal I’m gagging for 
I hate it too. I think there's a good chance someone will write a babel or webpack plugin to mark `_` as private instead so we don't have to deal with `#`.
Does it matter? I also use a text editor but that wouldn't make an article about Vim relevant. 
Listening for a precise amount like that will never be consistent across mouses or even browsers. Consider Apple Magic Mouse that doesn’t even have notches. I ran into an issue recently where safari only registers 1 in any direction unless you specifically prevent the default behavior. Something to do with safaris own scroll inertia. I’m guessing you want to fire an event once only on wheel. So just fire the event and then don’t allow enough one to be fired until the triggered action has finished or a certain amount of time has passed. Might be worth looking into a debounce or throttle function. 
Here you go! [https://www.youtube.com/watch?v=Ha\_ooKAWAJI](https://www.youtube.com/watch?v=Ha_ooKAWAJI)
&gt; Compare to el.addEventListener(callback, { useCapture: true }) You'd still have to look at the docs.
If it's all 1 app at the end of the day, idk if splitting into repos makes sense. I would imagine a lot of stuff can/should be shared between the "sections" you would have managed to "partition" in addition to the data cache you mentioned. A simplistic option would be to group your pieces under the same repo still but with a structure like src/ *section1* ...*section n* sharedStuff If you really want to stick with the separate repos, consider another repo / package to be shared between them for some kind of caching service and other stuff. Now you have to build each repo though and inject the shared dependencies / download the shared package so each can be built and not rely on magic globals when coupling three scripts together. Doing it that way though, make sure that your overall bundle of all built assets doesn't include the shared dependencies multiple times.
Could you explain to me what \`a?.b\` is doing? I get \`a ?? b\`. If \`a != null &gt; a : b\`. But the \`a?.b\` looks like you're using dot notation on whatever is returned if \`a\` is null.
Most likely the operating system time is different. Try if time synchronization does not help...
It's almost as relevant as Java is to JavaScript!
Thats what I thought too. I dont like that this might cause issues for me.
Yeah prettier sucks imo. Mainly because it’s very non-configurable.
What if you synchronize using the same ntp server on both computers?
&gt; work autonomously and independently &gt; a way to share What you need is, first of all, making a decision. And I'm not saying this to mock you or anything. No, really, You need to make an important and careful decision. Will each part be autonomous and independent? Or will you share something across them all? Consider that this is not a trivial decision. It will affect both the work you need to do and the way you will do that work. This decision will affect the organization of your teams... or, from a different perspective, the decision will need to consider the organization of your teams to be made. Having completely autonomous teams and developments, will mean you "just" -mostly- need to bundle everything together and that's it. Each team will be _free_ to do as they see fit, and at the same time will need to build their own internal infrastructure. On the other hand, you could provide a common infrastructure for, say, data retrieval, or authentication, or storage, or a number of other common tasks. But this will require _orchestration_ and coordination between your teams. They should no longer do as they please. For the defined tasks they should go through the common established API. So, the key to this decision is... well, making the decision itself. The technical part will greatly depend on the decision made, on how much, or how little, you want to share. If you share nothing, you just need that packing and little more. If you share more, then you might go from simply selecting a number of additional libraries. To be more concrete, you might just decide to implement **only** a cache system and decide that all "apps" go through that cache. You might then implement some sort of minimal API `request(url)` -or whatever- which manages the cache and -if needed- makes the actual requests. This is pretty minimal, but still it requires _something_ from the "apps", that they make all their requests through it. But you may also think that, given that there is a common data request system and that [some of those] requests will require authentication, then authentication is also a task that should be shared across all "apps". Not only that, at some point, you might realize that all those "apps" will also be _sending_ data. And some of that data might be shared in some way too. Or at the very least, it may need some notification system across them all, because if one "app" updates, say, the currency, many other "apps" may need to recalculate and update too. So, you may decide to implement some minimal common message bus or notification system. And... You see where this is going. In one extreme there's a monolith, in the other a lot of completely independent "apps" sharing nothing. But in between you can have _many_ different things. From a "just a couple" of common services, to a fully fledged plug-in based architecture. And no, I'm not saying this _has_ to go this way. Or that you _will_ need that. What I'm saying is that this is the important part of your decision, not if there is a certain library that provides one, some, all parts of this. The important part is to do the analysis and know exactly what you need to, want to, and can do. (And again, you need to consider the technical POV but also the organizational POV, the teams, the coordination, the plan...) This is the thing that matters. This is what will _then_ determine what you actually need. This is the important decision. If you don't define this clearly, then it doesn't really matter much what library or _meta-library_ you use.
I was thinking something like that. When the aplication starts I am saving a timestamp in my remote db, and then to calculate time elapsed, comparing javascript timestamps with that timestamp. Because of this, the timing between users is different.
Yes.
You absolutely can't guarantee the clock settings on a user's machine. Users are totally free to set their time and date to whatever they please. The only thing you can guarantee is the time on your server.
Hi /u/aman041, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Why are some folks busy downvoting instead of helping in a meaningful way? :D
Thanks. For some reason I just never thought of the connection between the users machine time and the time in browser (pretty obvious now). &amp;#x200B;
Thank you. I am going to switch up my logic a little so that my timestamps are always calculated directly from my server
&gt; Also do you know the easy fix to not have to look at the docs? An IDE. Sure, but that requires clicking around, and I might not be in an IDE environment, such as GitHub, or I might be in an IDE but the type isn't inferable. I'm not making this stuff up btw, it's regnogised best practice https://w3ctag.github.io/design-principles/#prefer-dict-to-bool.
This git tutorial #999999999997 was really needed. 
No, but we cover it in https://www.youtube.com/watch?v=lsd2-TCgHEs. I don't think you're going to like it.
I bet a sizable number of JS devs have only ever used regex for "replace all" operations because the default replace behavior is so bad lol
If you need the exact same time to be shown to two users on the client side you’re going to mostly be out of luck. You can likely achieve this for the most part down to the second. 
&gt; Sure, but that requires clicking around No it doesn't. ctrl+q, ctrl+p, ctrl+space - all ways to see parameters in JetBrains IDE's. &gt; I'm not making this stuff up btw, it's regnogised best practice Maybe for multiple arguments. `foo({ something: true })` is just stupid when you can do `foo(true)`.
Are you the other one in the video? Congratulations. :)
 a?.b // undefined if \`a\` is null/undefined, \`a.b\` otherwise. [https://github.com/tc39/proposal-optional-chaining](https://github.com/tc39/proposal-optional-chaining)
Maybe we wouldn't need it if people weren't asses to each other but that's the world we live in. 
noob explanation since im new to this, basically decoupling the modules and features of your app, example emailing has a different set of container to your ordering, and notification, to put it simply each module has a set of api, either your own microservice consumes the api or outside the app consumes its functionality. in laymen explanation, you have a bakery , traditional monolith, youll just order a customized cake and if the kitchen blows up so is your whole bakery, and it but on microservices , the shop may be different from where the kitchen is , and the storage of the ingeredients and designing of cake, and so on.
Well, I guess you helped shift the tide of voting but I'm legitimately confused why people would have ever down-voted it to begin with. As you said, I thought the comment was pretty noncontroversial and IMO is actually often a best practice for this type of code :shrug:
Thanks man! I understood everything from that Git Repo. Really damn good README :D 
I've re-read your first paragraph a few times and I'm failing to understand how the shorthand call was a barrier to your refactoring. 
I use shorthand when I know there are tests on my code since I can be confident that anyone changing the function will break tests. I also search for everywhere the function is used regardless if it's called with parens or not.
Hi Sir My post is very well for our community, so i don't understand it was removed. Thank you! 
Awesome! Was looking for something like this! :)
&gt; according to the University of Michigan this is already sliding into politics and the "scientifical" lobby for socially accepting and including people with Dyslexia and ADD, which I'm not a fan of
I wish
Yep, thanks!
We've been fine without them for years, we don't need them
Hi /u/kaarujan5, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
I don't agree. Again, it's pretty acknowledged as best practice to avoid that, unless the usage is really obvious https://ariya.io/2011/08/hall-of-api-shame-boolean-trap.
Hi /u/ThrowAwayJacket92, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/ldthompson, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/MonsieurLeland, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Lasha9, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
No it's not, it's for beginners. /r/javascript is not for beginners.
Awesome! thanks for sharing
I wouldn’t say we’ve been fine without them. There are [plenty of examples](https://mobile.twitter.com/issuesfromhell) of developers who do not interact politely with other contributors.
The entire argument is stupid, and keeps starting with the premise of "*Without looking at the documentation*". But how are you supposed to know what to put into the dictionary without looking at the documentation? Or even knowing that you're supposed to pass a dictionary for a one-argument function in the first place? Work smarter, not harder. There have been tools for decades that solve this problem already. Just use them.
This shows how silly of an idea contributing to open source projects is when you’re not a top-level developer. How am i supposed to contribute to something like three.js? I’m a good programmer but it’s hard to know what to look for/what needs to be done.
I wrote a library called jscii a while back that does something similar. I actually always wanted to rewrite it to respond to shapes and patterns in an image rather than just the lightness.
It's more about reading code than writing.
three.js is probably an extreme example. * [Ace has a pretty standard Chrome unicode character bug](https://github.com/ajaxorg/ace/issues/3753) * [Chart.js has plenty of open issues looking for someone with expertise in math](https://github.com/chartjs/Chart.js/issues) * [Clipboard.js has an iOS copy bug](https://github.com/zenorocha/clipboard.js/issues/574) * [Dragula is just a simple drag and drop library](https://github.com/bevacqua/dragula/issues) It's very easy to feel intimidated with examples like three.js but most developers are just regular people with too many regular issues.
A blockchain implementation couldn’t solve this issue. In fact it’s is a really bad approach to solving this issue because it requires distributed consensus. Each additional network hop required to achieve consensus adds N+1 exposure to the effects of network latency and error. 
You're not limited to just the popular repo's you can pick anything that anyone is sharing. If it's someones vanilla JS project where they need help with a Timeout, that's it. The point is mostly to get involved, go as challenging as you wish. The tougher the better. 
No, we absolutely have not
I just finished this article yesterday. Very open to feedback in it, especially from the Javascript community, since parser combinators are usually associated with functional programming and I wanted to make this article accessible to mainstream JS users (though mainstream JS is fairly functional at this point). &amp;#x200B; Note: the article uses Typescript, but Parsimmon itself is a pure JS library. Drop the type signatures and it's all normal Javascript.
What would make prettier a really good app is if it was configured by your linter settings. With options to exclude certain settings from auto formatting.
Neato!!!
You can share data in Single-spa. Here is an example https://github.com/me-12/single-spa-portal-example
The projects with a CoC probably enjoy life more as well, not having to deal with your crap.
Use typescript
Does it have to be truly native? If you use Cordova it connects to the phone features and you can do it all through JavaScript. 
Your jokes in your blog are fantastic too 😂
For an app I worked on, we would include a DTS in the response for our "login" api call. We then take the difference between that DTS and the users system time and use that as an offset. Then anywhere we show time, we add that offset.
No, but you can use react-app-rewired (I think it's called) to fix that.
You mean this one? https://www.reddit.com/r/javascript/comments/9g83l3/a_smarter_way_to_learn_javascript_index_of/?utm_source=reddit-android
What's Drome ? A task runner.
Thank you so much, you're ending more than a week long series of struggles :)
This is awesome! Any chance of getting an improved editor with some intellisense for the API? The \[Monaco editor\]([https://github.com/Microsoft/monaco-editor](https://github.com/Microsoft/monaco-editor)) from VS Code is open source!
TLDR; Built by Storybook maintainers, sign up for early access, focused on: * Review &amp; discussion * Access control * Easy integration with Git/CI
!remindme in 8 hours
Hi /u/ewliang, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Do you have more than one server?
It wasn't that, but I am soooo saving this! Thank you!
as i've never heard of FFF and he is indeed really funny, i decided to make a sub about funny videos about programming: r/ProgrammingVids please post your favourite videos there
&gt;Any good resources for canvas/geomethry involved? Thanks :)
please post your favorite videos of this kind in my new sub r/ProgrammingVids I‘m trying to build a collection as existing youtube playlists mostly are shitty as fuck
exec(“tiger_blood.js”); //winning
Sounds like a good use case for TweenMax.staggerTo(). See https://greensock.com/docs/TweenMax/static.staggerTo() Questions like this are perfect for the GreenSock forums, too. https://greensock.com/forums
If it’s a first year programming class maybe explain Boolean logic and lower level stuff then work your way up
I have a coding keyboard on my phone for the odd time I need to write something out for a coworker while I'm away from the office. Even with that I would not consider it fun to use.
Can I use this to redo my web stores Api and integrate to ten other systems? I heard it’s a new JavaScript framework 
You aren't replacing or defining res.render; you're just calling it. So every time the route handler runs, it will call the same function. 
So do I need to do this? app.post('/justdoit', function(req,res) { let newRes = res; dontlet.yourdreams("be dreams, function(){ //assume lots of time passes here newRes.render("/stopgivingup"); }); }); Since let creates variables with block scope. 
If you like that sort of game you may also be interested in the (now pretty old) ruby version: https://www.bloc.io/ruby-warrior#/ I’m not the author but I really like it back then. Can’t wait to give this one a try!
I just started learning Javascript this week on codecademy, and I did this project today, a rock-paper-scissors machine. I keep getting an undefined printed below the main functions I call, but I'm not sure what to do about it. Any more experienced eyes would be appreciated. [https://gist.github.com/636d8b20f0ced98ab9b968dc9715b901](https://gist.github.com/636d8b20f0ced98ab9b968dc9715b901)
I'm glad you won't contribute anything of value to the world because you couldn't handle anything but the safest spaces.
Enjoy life in the lowest common denominator. 
It doesn’t matter. Not even worth the cognitive capital to be consistent throughout the codebase. https://en.m.wikipedia.org/wiki/Law_of_triviality
Can we fuck a princess if we rescue one? I have some thing from Mario to work through and more JS practice is never a bad thing.
It looks like all of the warrior’s abilities are listed on the game page, and then all of the nested function are either to do with spaces or units, which become available from the `feel()` and `getUnit()` functions 
In JavaScript, a function is a value just like 655355, 3.131592 and “string here” are all values. Just like numbers support the + operator for addition, functions support the “call” operation, which is invoked by writing a list of arguments inside a pair of parentheses. So if I write a function like function apply2(first, second, func) { return func(first, second) } What I am doing is telling JS about a function called “apply2” that takes three arguments. Here the first and second are arbitrary and can be anything, by you can clearly see I expect the third argument to be a function. I choose to call this function “func” and call it with two arguments. So “apply2” should be called with a third argument that is a function that takes two arguments. Now I can call my function like so apply2(10, 32, function (a, b) { return a + b }) And I’ll get 42 as the result. If I call apply2(“hello”, “world”, function (a, b) { return a + “, “ + b + “!” }) I will get “hello, world!” In each invocation of apply2, I am supplying two different functions that are bound to the name “func” inside apply2. No one else will ever be able to call those functions because I did not declare them with a name and inside a scope where they would live for any longer than these calls to apply2. If I had done something like function add(a, b) { return a + b } apply2(10, 32, add) I’d still get 42 and I’d be able to call add directly because I declared it with a name outside the scope of the apply2 call, after which the “func” binding no longer exists. I hope this makes sense. try to think of functions as normal values like numbers that just work differently than other kinds of values. 1 is always 1 and a function is always that function. Remember that the names we give these things (like a, b, add, apply2 and func) are temporary labels that take on specific values in different contexts. An important thing to learn about JS programming is what these contexts are and how they work. For starters, you can read about the difference between the var and let keywords to get a sense what I mean.
Thanks! Does this also mean that all variables declared inside the function are unique to that instance of the function call? So this would be correct? app.post('/justdoit', function(req,res) { **var foo = randomNumberGenerator(); //lets say it generates 7** dontlet.yourdreams("be dreams, function(){ //assume lots of time passes here **console.log(foo); //should print 7 right?** res.render("/stopgivingup"); }); }); 
Correct
&gt;mmm &gt; &gt;So I tried Thanks for this, I'll be looking into it
The undefined prints you are getting are normal, it's just because your functions have no return statement.
Thank you so much for your comments. I'll go back and check for those missing returns. I'm so new to this that I don't really know what good code looks like. If you don't get around to an example with the premise, I'd be happy to look at something else that would show more flexible code.
Look for collision detection in p5.js. Or you could code something simple by calculating the distance between the ball and the player on every frame. If the ball is less than x distance then the player is dead. For that it's just simple math and you can find examples on how to do it in plain js just google.
Thanks! In this case "function add(a, b) { return a + b } apply2(10, 32, add)". If add(a,b) was add(a,b,usersName) and it did something different depending on the what the user was called - and took along time to figure this out. Say ... add(a,b,userName) { var preComputedUserName = userName + a + b; compute(function(a,b){ //take a long time to add a and b computedUserName = takealongtime(a,b,preComputedUserName); //lets say it concats a and b and preComputedUserName console.log(computedUserName); }); return a + b; } Then you call them with add(1,1,"billy"); add(2,2,"bob"); Would I always get the following output in the console? billy1111billy bob2222bob or could I get billy1122bob bob2222bob Sorry for the overly lengthy questions. I appreciate the help. 
I dont get what you mean by player is dead. is it a seperate function you make from the original? 
I'd suggest you post this over on /r/Angular2
Lol. My PC is dead so I've been using my mobile exclusively -- running Ubuntu 18.04 through UserLAnd for development (just Bash + NodeJS toys) and though it's obviously not ideal it works. Also see SoloLearn and plenty of other mobile-friendly coding apps.
On level 3, I'm trying to debug some code as the warrior isn't doing any action for 200 turns. When I fail the level and dismiss it, I click run again, but nothing happens. I have to refresh the page to get it to rerun my code. Code is https://pastebin.com/RwEnEbSe
Thanks! &amp;#x200B;
Oh there's no single way to do this. I'm not sure in p5.js but I know it has a draw loop right. Well were are you storing the player's position? Basically you need to reset that value when a condition happens. I just told you how what you can do regarding the condition (collision or distance).
 const healthPercentage = this.health / this.maxHealth; const decisionTree = [ { condition: healthPercentage &lt; 50, This condition will always be true, because the heltPercentage is a float in range 0-1.
Eloquent JavaScript JavaScript: The Good Parts Not a book, but Tyler McGinnis' courses on teachable.com. 
Flowcharts and diagrams... Draw the flow of the program on something, napkin, anything.. Then code the pieces.. chunking is a good a place as any to start. For example, Can't have a menu bar without a layout.. so let's code the layout first.. then once we have the menu bar added to our layout, start adding the next bits.. one piece at a time
The Erlang section references several projects from Basho - a dead company. None of those have had commits in 18 months. You really don't to take any "awesome" list at face value.
Read that Eloquent JavaScript does not sufficiently go into DOM and HTTP requests, would you agree?
You guys probably missed it. 70's and 80's. You had to see these ASCII art images on glowing green monochrome monitors!
My only issue is how much of a really awesome unbias and not circle jerking dumpster fire /r/javascript is. I just wish I could hate this place!
I do appreciate you, definitely using this approach on more complex pages. &amp;#x200B;
I'm definitely doing this for my smaller pages
&gt; TIP: You can walk backward by passing 'backward' as an argument to walk(). Same goes for feel(), rescue() and attack(). Archers have a limited attack distance. ...documentation is done only in TIPS????? I still don't know what to pass to look forward. I also keep getting "Error: warrior.shoot is not a function". I added a `warrior.think()` before `warrior.shoot()` and suddenly the error disappears.
We've already seen it used a political tool and a silencer. I think it's not very honest to imply that it's a collection of rules to enforce common decency.
Nice game.. @lvl 3 already..
It's a great idea and I absolutely love whoever came with it first. However, this one is so very poorly executed. Editing JS in the textbox sucks, when I press a key inside the textbox is moves your scroll so that the editing line is the last visible line (very frustrating). `warrior.health()` returns an integer? Oh great I was expecting it to return a coffee! But seriously what kind of number? 0 or 1 are numbers, so are number between 0 and 100, how i'm supposed to know it's between 0 and 20? Well, of course, by using `console.log()`, which was changed to `warrior.think()`, that's ok, but why not polyfilling it, at least? a console message saying "No, using warrior.think() instead!" would make life a lot easier. So I'm a `Player` instance, controlling a `warrior`? Why is there two abstraction layers? I mean, will I ever get to control different warriors simultaneously? If not, is this second "agent" abstraction really necessary? 
However, in a loop, a function literal will be reused in some situations, causing unexpected results. https://stackoverflow.com/questions/750486/javascript-closure-inside-loops-simple-practical-example
Yeah for sure. I think he said in one of his videos he's been going for more than 10 years. Pretty good that he's still enthusiastic about it.
I can recommend webstorm it's pretty nice. But now that we are moving to cloud based workspaces you should try out cloud9 a real game changer.
Get js books http://gen.lib.rus.ec
As total newbie, I found it more helpful to treat JS purely as programming language anyway, to learn the syntax, the common patterns and antipatterns. The web side of JS is just an advanced topic that fits nicely on top of this basic knowledge.
I’ve written my JavaScript books for programmers; most of them are free to read online: http://exploringjs.com
/r/LearnJavascript
The health is displayed up top of the logging, so I'd say its pretty logical what number it returns?
I can’t actually answer your question but personally I would not use us for making a game and would reach for something specifically designed for making games (like unity) 
Yes. The only time I'd be interested in playing a game related to code (rather than doing productive coding) is if I find myself bored with only a phone on hand. 
Hey that’s a good idea! 
Why does warrior.shoot() hit nothing in level 2?
!RemindMe
**Defaulted to one day.** I will be messaging you on [**2018-10-05 09:17:42 UTC**](http://www.wolframalpha.com/input/?i=2018-10-05 09:17:42 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/javascript/comments/9l4ix3/in_warriorjs_you_are_a_warrior_climbing_a_tall/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/javascript/comments/9l4ix3/in_warriorjs_you_are_a_warrior_climbing_a_tall/]%0A%0ARemindMe! ) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
ekhm, learn unity. Javascript has terrible performance
That's because string.replace returns a copy of the modified string, it doesn't change in place. You want to use result = result.replace...
Eloquent Javascript university lecture notes of stanford, CMU etc.. usually terse but useful. https://open.umd.edu
I've been in this spot the past few months. There are some frameworks that allow you to build micro frontends, but they require that all frontends use the same technology. I didn't want to force a choice of framework for all micro frontends. So instead I wrote a small library that allows you to include external html at a specific spot in a page. I'm working on releasing it as part of a larger set of components, but I made a gist of it here: [https://gist.github.com/poef/a1caa8e785583f7a25127f819cfdad2c](https://gist.github.com/poef/a1caa8e785583f7a25127f819cfdad2c) This doesn't automagically fix potential naming conflicts, all javascript will be run in the same global context, so you must figure out some kind of namespacing yourself. Hope you find it useful
Thanks, will do \\\^\_\\\^
 function someFunc(arr) { return arr.sort((a, b) =&gt; b - a).slice(0, 3).reduce((a, b) =&gt; a * b); } console.log(someFunc([10])); // 10 console.log(someFunc([10, 10, 5, 2])); // 500 console.log(someFunc([10, 2])); // 20 console.log(someFunc([2, 10, 10, 5])); // 500 
what will do if array look like this ? \[-10,10,-5,2\] ?
You should set the state in your promise return. Your render method would always have the state as undefined. 
Hello, yes, the illustrations only make sense if you read the full text. So they are not intended to be self-explanatory.
1. because i don't know c# 2. I'm trying to learn js better 3. I doubt i'll need to bump the performance on a solitaire game
Here is an alternative to sort with less superfluous processing, and if you want simply the largest magnitude product, then wrap the numbers in the if expressions in math.abs(). function maxProd(ints){ var num =[0,0,0]; for(var x = 0; x &lt; ints.length: x++){ if(ints[x] &gt; num[0]){ num[0]=ints[x]; } else if (ints[x] &gt; num[1]) { num[1]=ints[x]; } else if (ints[x] &gt; num[2]) { num[2]=ints[x]; } } return num[0]*num[1]*num[2]; }
Hmm, I guess it will return 100. 10*2*-5 = -100 Interesting, completely overlooked the double negitive: -10*-5*10 = 500 
here, -5 is bigger than -10, so 10\*-5\*2 , correct ?
Don't see any reference to the bread numbers. The inheritance illustration makes *less* sense if you read the text. Not saying it's a big deal, but good illustrations can be quite helpful when explaining abstract concepts. 
yes....
From my experience as a user, unity games have tendency to have terrible performance. Based on my batery life and subjective feeling of game responsivnes. Not comparing to js (because of lack of comparable games in both engines), but unity alone is not performant enough.
Same deal for `trim()`: result = result.trim();
Phaser is incredible and the docs are really good too!
&gt;\[-10,10,-5,2\] Math.abs
fuck off with your low IQ social justice warrior shit. programming is a meritocracy and bob martin is by far the #1 resource on clean code.
I assume that you want the data from the API call in demoObject? &amp;#x200B; The problem appears to be a lack of understanding of how promises work. When you invoke something that returns a promise (e.g., your API call), it is not returning the result of the API call (i.e. the data you are wanting to fetch from the remote repository), but rather a promise to provide the data once the request has been fulfilled (or fails). Once the request has been successfully fulfilled (resolved) it will invoke whatever you passed into the "then" callback. If it fails (or something in your then does) it will invoke what's in the "error". In your case you are calling fetchAPI, but if you look closely it doesn't return anything which is why you get "undefined" as a result. The promise has not been fulfilled yet (as you can see in your third console message), and even if it has already been fulfilled it wouldn't matter because nothing links demoObject to the result of the API call. The "return" in your "then" callback just returns the data to the caller of the "then" which is the promise logic, and not your call. I don't know React, but I have worked with promises in AngularJS. I see a few simple ways to fix this depending on your needs. 1. If you need the API data to be available to demoObject before the console.log, you can do the following 1. In fetchApi return the call to the API without the "then" which will return the promise immediately 2. use the await keyword before the call to fetchApi. This will wait for the promise to get resolved, and will return the value passed into the resolve which will be your data. 2. If you need the data from the API, but not necessarily when the component mounted handler is called, then you can... 1. Create and return an empty array in fetch API. This will cause your second console.log to print an empty array (because the data is not yet available due to the API promise not being resolved yet) 2. In the "then" callback, copy / concatenate the result of the API call into the empty array (don't replace it). This will automatically update demoObject since the reference to the array has not changed (just its data). Hopefully this helps as I didn't have time to test this out first.
Your point sounds valid. I will likely approach learning it in this way, but it would be ideal when purchasing something that it’s comprehensive enough to be useful even when I’m not a newbie to JS anymore. Thanks for the tip nonetheless!
Incomplete function, "clockwise spiral" is ambigous. It is not specified if the spiral is concentric or eccentric, so you have to implement both directions and display both results clockwise+concentric and clockwise+eccentric. 
You want an example of a JS browser based app that doesn't do any IO after being downloaded? I'm sure there are many single player games that fit the profile, though most will do calls to the server to record scores and stats. Your title is asking about nice browser based apps in JS, and the reality is that almost all of the nice apps out there written in JS will talk with the server either constantly or occasionally. Your phrasing of persistent connection OR AJAX is ambiguous. Are you just asking about apps that can function even when the user is offline, but take advantage of the connection when they are? Then you might want to ask about PWAs (Progressive Web Apps).
Autocompletion and refactoring is tough in JS, because of its dynamic nature. You are never going to get as robust and precise tooling as you would get in Java or C#. You can try WebStorm, but that is about as far as you are gonna get IDE-wise. There is a lot that can be done with other tooling though to reduce overall friction in development. Examples: - As is usual, a well written test suite can make refactoring much easier. Most testing tools can also run in watch mode, where they run the tests on every file change. - Use the latest JS language version and transpile it into something browsers can universally grok. Correct use of these modern language features results in much more maintainable code. - Bundlers also have a watch mode. If you are developing something server-side, use nodemon. - You can also take this one step further and use Hot Module Reload, where the bundler automatically rebuilds the code and then pushes it into the browser without even reloading the page, all the while maintaining all the state. This feels like magic even after using it for months. Note that HMR only works with some front end libraries out of the box. - Some of the more popular front end libraries have their own browser dev tools extensions (eg. Angular, react etc.) Also, TypeScript has better support for tooling than vanilla JS.
Doesn't work if I call it twice :( console.log('result 1', run(input, [])); // [1,2,3... ] console.log('result 2', run(input, [])); // []
But you global build proposal requires to have package.json with proper dependencies defined. It defeats the purpose of rapid prototyping. &amp;#x200B; As I wrote in the last sentence 'react-app-rewired' is there but comes with potential problems (may break at some point, even their readme states it)
&gt; Please explain your comment, for better comprehension
Well my life has been fine and projects I follow are doing great. It just seems like people like you are the ones missing out.
You have /r/LearnJavascript for this type of question.
Please continue your great work by implementing a better version of [Gif to ASCII](https://www.phpsecure.info/gifanimscii.php), with the help of [OMGGIF](https://github.com/deanm/omggif) library.
&gt;You just get it to work and then you don’t dare to touch it because you are afraid it will break. 😂 I spent way more time than necessary this week getting webpack-dev-server setup for my dev environment. From a new comers perspective, the docs are incomplete. Had to read through most of the source to figure out what was going on. Thanks for sharing the article
Thank you :)
My work-mate and I played a bit through this together. I think it's a neat concept. One thing I found frustrating was the lack of memory. I'd really like to be able to store things in the warrior object rather than feel like cheating and use a global/outer scope variable. That said, I think this type of game could be very useful for teaching javascript, and I'd love to take a stab at doing my own version in the next few months.
[Impact.js](https://impactjs.com/) has been used to publish plenty of full games with great performance, most recently CrossCode. It's definitely worth taking a look. Also, this isn't strictly in JS but [Haxe](https://haxe.org/) and [HaxeFlixel](https://haxeflixel.com/) are fantastic tools to develop cross-platform games, and you can compile to Javascript or most other platforms. Haxe is based on ECMAScript like JS is, so the syntax is relatively similar.
In typical js fashion, it's also horribly documented!
Unreal.js is a js runtime for unreal engine...so that could work for your needs
Just use Unity and export to WebAssembly.
Thanks I had been thinking of this for a while and I forgot to bookmark it. 
Do you also provide a usable lib for javascript? Might as well ask since this isn't the /r/typescript sub.
1. You probably want `getPropertyPriority` to be `getPropertyValue`. 2. `toString()` is a method called from objects. If you just want generic string conversion use `String()` instead. using `toString()` ends up calling `window.toString()` (window being the global object) rather than converting your value. 3. Be sure to add 'px' as a unit to your style values.
Love it. A bit confusing because at first, I was like... if(!warrior.feel.isEmpty) { warrior.attack(); } I get "player does nothing" about 10x before I clicked skip. It takes some getting used to. Also the use of const is overdone, I feel let would be just as easy, and it's one less letter to type! I can't think of any other criticisms. I love it!
VS code really is probably the best option IMO. Highly recommend looking into TypeScript; the autocomplete and refactoring tools become much better once you add in static analysis. There may be some learning curve, but in terms of tooling, that's going to be a big productivity boost and can save you a lot of pain. The typical workflow these days (for UI development) is to use something like webpack &amp; webpack-dev-server to get a page that does live reloading, i.e. when you make a change and you're running the app at localhost:1337, the app automatically recompiles and reloads the page. I think there are alternatives to webpack (rollup, Parcel, fusebox, probably more), but webpack has a fuck ton of plugins and can be used to handle just about any scenario you can think of. Debugging is a different deal. For UI stuff, I think maybe there's a way to do connect your IDE debugger to say, Firefox or Chrome's debugger, but I've never bothered with that and I'm not certain it would be a big productivity boost.
Is this `#Coding Problem` or `#Interview Question`? Hmm...
Thanks for catching my typos and the `toString` error. Still having troubles so I opened the inspector and found [this](https://imgur.com/a/EwEqRS6). Is this schrodinger's width and height? How do I grab it?
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/vPVukGM.jpg** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20e75gekm) 
Well there are a lot. One of my favorites is Figma, it’s an alternative to sketch(it’s actually much better), it works offline.
I always feel that founder dating is very difficult. I heard most successful founders already know each other for a while. But it takes courage to ask. Good luck op!
You do know that js is just a language, and the performance is tied to the interpreter? V8 is a monster and you should respect it. Properly written js can outperform c++
Also your desturcturing of the object in your forEach is wrong. You have keys for condition and action, but are destructuring keys for condition and method
I think you're more likely to get a helpful response if you just post the code you're having a problem with, rather than a video of it. 
Yeah I kept getting weird errors like that as well 
Yes, I caught that after I made my comment, and promptly forgot that I had made a comment. Thank you for pointing that out, and making me look foolish though, if you didn't, this would not be read it! :-)
I haven't looked in a few months but phaser definetely seemed like the best 2d engine available right now. 
Threes js is a good 3d library. 
Hi /u/NA__Scrubbed, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/stringParameter, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Isn't ECMAScript just another name for JS?
Technically what we all write is ECMAScript, the word JavaScript is owned by Oracle.
It also uses Pixi.js as a rendering/animation engine lol
Thanks. That makes sense. So assuming that the object you receive is not being mutated - when would you need to use **let** or **IIFE**. Is it only when loops are involved?
This link might give you some useful tips. https://medium.com/the-node-js-collection/modern-javascript-explained-for-dinosaurs-f695e9747b70
Wouldn't that not be correct for a lot of other array cases? func([-10,10,6,-5,2]) = 120 due to: sorted = [10,6,2,-5,-10] [p1, p2, p3] = [10,6,2] [n1, n2] = [-5,-10] return (50 &gt; 60) -&gt; p1 * p2 * p3 -&gt; 10 * 6 * 2 -&gt; 120 
Nowadays there's less value for IIFEs. They were mostly used to avoid the global scope and variables that appear to be local to loops (or even each iteration). Javascript environments that follow newer specs introduce new scope mechanisms (module scope and block scope) so IIFEs became a thing of the past and nowadays are mostly used for backward compatibility reasons. Always prefer `let` or `const` over var. They have much better scoping mechanisms.
&gt;warrior.look is not a function
I only ended up watching the first one. He does a good job at explaining some of the tools that functional programmers can use but I'm not sure if it would be good motivation. You have to show that the code makes their life easier. Functional programming can be cleaner, easier to maintain, easier to test, and make concurrency easier to handle. It some instances it might even be 10x better. I think you need to find someone who they really respect who talks about why we should be using a functional approach. That's probably your best bet.
Uncaught SyntaxError: Unexpected token &lt; 16.bc92a63f.chunk.js:1 Uncaught SyntaxError: Unexpected token &lt; main.752573f2.chunk.js:1 &amp;#x200B; Good job.
[Superpowers](https://sparklinlabs.itch.io/superpowers) [Cocos2d-x](https://github.com/cocos2d/cocos2d-html5)
Here is chart of different HTML/JS engines: https://html5gameengine.com/
&gt;zlib.inflate does something, but the final values don't match the PNG values AIUI, the data you get out of the decompresser isn't pixel data, but Filtered data. The first byte of your extracted data should be `0` (the Filter type). That Filtered data gets turned in to scanlines, and the various passes (if any) are extracted from that. I'd hope your zlib library would error or warn if the data doesn't decompress correctly - you can check that by editing the zlib checksum (the last four bytes of the zlib stream).
Since i can assume at the least three integers in the list const slicer = (xs, acc=[]) =&gt; { if (xs.length === 0) { return acc } const head = xs[0] const tail = xs.slice(1) return acc.concat(tail.map(t =&gt; [head, t])).concat(slicer(tail)) } const gtMult = (xs, acc=[]) =&gt; { if (xs.length &lt;= 2) { return acc } const head = xs[0] const tail = xs.slice(1) return acc.concat( slicer(tail).map(([x, y]) =&gt; x * y * head) ).concat(gtMult(tail)) .sort((x, y) =&gt; y - x)[0] } It's not better, but it's covering the double negative
Hi /u/fedesangueblu, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/trifek, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/mishaphoenix, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
I mean, this is all nice and dandy, but who in their right minds can utter the phrase "enhance operational excellence" with a straight face? :P
For those not aware: ["The jQuery Foundation is now the JS Foundation"](https://jquery.org/)
Yep! Haxe was developed as a successor for ActionScript 3, which was itself a superset of ECMAScript. JS and Haxe both *started* from the same language spec, but both have developed in different ways. They're both still very similar though.
I've been using rewired with beta / earlier versions of react-scripts 2, babel 7, and webpack for months now, no issues. Even if there are issues with the latest public release, it's not a terribly hard thing to redo by hand (I had to do something similar with Angular's cli to get support for aws's cognito package). &amp;#x200B; Though, to be honest, for rapid prototyping purposes, I probably wouldn't need or use rewired at all. &amp;#x200B; As for needing to create a package.json file and declaring your dependencies, if you need to prototype so rapidly that you can't afford the time to do that, well, I guess you have other problems than I do; for my rapid prototype needs, I wouldn't let a package.json file get in the way of which technology I would choose.
Fucking committees.
I don't know if this is a good news or not. I have mixed feelings. Node.JS foundation doesn't a good reputation regarding what happened in the past (io.js and ayo.js). :/
I used [melonJS](http://www.melonjs.org) for a game. I liked that I could use Tiled maps with it, and that it didn't try to do too much for me. I ran into a couple of bugs along the way and so it's one of the few OSS projects I've contributed to (a tiny contribution). [What I made](http://thegirlsand.me) was pretty simple. It was a fun project with my kids.
I saw that right before i posted. That list is largely the same as the one I linked, with the addition of much older items. Which is unfortunate.
I've seen that. It's not JS, it's JS-like... similar syntax, none of the features, much more limited than the embedded C#.
oh no... i have a bad feeling about this. will we get again functions that either gets or sets depending on their argumentlist like in jQuery...
Chef Excellence could utter that.
The real concern
Lol, it's appreciated, for all reasons, humor mostly! :)
I don't understand your point, the node.js foundation was created when node.js and io.js merged back together. Don't know much about the ayo.js incident, besides the basic reason why it was forked and that is pretty much dead now?
Yeah, a project shouldn’t be judged by its forks 
Your second condition is also running after your first Condition. Change "if(this.click==1)" to "else if(this.click==1)" &amp;#x200B; Line 53 - 54
I need sprite management of some sort. threejs doesn't have that. It did however remind me of twojs... which i'm reminded does not have sprite management. But wait, it's in the patch notes... but it's not in the docs. "Just read the source." I'm not that great with JS to begin with and I don't know how that works.
I considered doing it manually. Phaser 3 docs are a riddle wrapped in a conundrum. I couldn't make heads or tails of a definition. Phaser 2 seemed greatly underfeatured, but well documented.
ok. it worked. but why? i mean the value of the variable was ==1 or ==0. why the second condition was running after the first one?
I totally don't agree - but hey, that's just my opinion. Take care, regards! 
The readmes are bugged for the early levels. You don't get access to warrior.shoot until level 8.
Neat, there's source!
&gt; We've already seen it used a political tool and a silencer And by this you mean "they won't let me say bigoted shit and act like a piece of garbage on the mailing list," when you think you're "just telling it like it is."
Right, the NodeJS Foundation was created in order to not have node owned by one company and return control to the community so that there was no need for a fork. Since so much JavaScript is used on both the client and server side today there's a lot of overlap between these two foundations.
Aren't they variables and functions?
so JS Foundation isn't related to ECMA?
We've seen it used as a weapon using something that was said many many years prior to complaint. What stops someone from digging up a social media post from God knows when, take it out of context, and use it to oust a productive member of the community? How do you know that what you say today will not be out of style and not considered offensive in N years? This feels a little too much like politburo tool for silencing dissent rather than a guide for civil discourse. 
And how does TC39 fit into the equation?
&gt;How do you know that what you say today will not be out of style and not considered offensive in N years? The answer is to not say offensive shit. Decades ago, it was commonplace to call people ni\*\*ers, but it was still offensive. It's socially unacceptable now to call people that in pubic, but it once wasn't. Doesn't change the fact that it was offensive then, and it's offensive now. Your statement is nothing but an excuse. &gt;productive member of the community Doesn't matter how productive someone is. If they're hateful and poisonous, they shouldn't have a place in the community. Being "productive" doesn't erase someone's hateful stances. 
&gt;A committee is a cul-de-sac down which ideas are lured and then quietly strangled. -Sir Barnett Cocks 
Interesting for a desktop product, but not suitable for mobile.
My point is that what's offensive changes with time and cultures. There are topic which are universally bad, sure ( ie racism or sexism). Suppose in the future refering to a professional occupation as *man will be considered offensive (policeMAN, fisherMAN etc.), can you guarantee that those who have mentioned those professions on the social media in some form at any time will not be targeted by CoC? Why not make CoC better defined, put forward more rigorous standards for what is considered offensive and off limits and keep current with the times instead of using ambiguous language which opens the door to abuse.
Yours can return 0, and depending on the algorithm used, this may end up using fewer swap operations. Thats a micro optimization either way. I would do it your way, it seems more meaningful. 
Ha! Yeah that one is straight from the [BS Generator](https://www.dack.com/web/bullshit.html)
There isn't, it's legit. You can get rid of those extra parenthesis in the subtraction though
Thought it is js packed code using. [http://dean.edwards.name/packer/](http://dean.edwards.name/unpacker/) and can be unpacked using [http://dean.edwards.name/unpacker/](http://dean.edwards.name/unpacker/)
[ChefExcellence.js](https://i.imgur.com/Blyg3xu.jpg)
Their members are actively involved in both foundations but "Ecma International" isn't itself associated.
&gt; Suppose in the future refering to a professional occupation as *man will be considered offensive (policeMAN, fisherMAN etc.), can you guarantee that those who have mentioned those professions on the social media in some form at any time will not be targeted by CoC? This is so unbelievably absurd. That’s a bad faith argument and you know it. You’re acting like a CoC defines a hit squad that goes looking for offense and people to ostracize, when that couldn’t be further from the truth. Don’t be a dick. Don’t say offensive shit. Don’t say bigoted things. How hard is that?
jQuery was designed like decades ago, in a very different js culture. I doubt even they think it's still a good idea.
Hi /u/NA__Scrubbed, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/funnybunnycrayola, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/andreispkd, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
[an excellent library]
I didn‘t get what was n1 and n2 for, but now I get it and its great. 
Nice
This is neat, but to be fair, you only really have a small handful of filters: brightness, tint, noise, patterns, and offsets. Then you just have 70 "presets" of those. But this is a cool project. JavaScript error here: &gt; const get-image-data = require('get-image-data'); &gt; ^^^ &gt;SyntaxError: Missing initializer in const declaration Can't have hyphens in variable names. 
Great post. The walkthrough from object to class was really insightful!
Nice fun way to play around with JS :D
As long as the npm people are not involved why not?
So how does this compare to the handful of other charting libraries out there?
Written in TypeScript, but compiled to javascript. So both users can use it. :)
I would recommend https://www.udemy.com/the-complete-guide-to-angular-2/ . I took the instructors MEAN stack course first, which gives a surface view of the entire stack. After that, I felt the most complex of the parts was the A, so I got his Angular course which I linked above. I like it a lot so far!
Thanks very much, I’ll check it out. 
This post was deleted, but thank you for your reply. Are you (/u/mlebkowski) saying I optimized the `sort()` and made it more performant than wes did?! If so, giddy up! 
Thanks /u/tiridlol yea they can be removed. Not sure if I was having a brain fart or bad copy/pasta from one of the earlier function exercise I did in that challenge. Either way, your input is/was appreciated :)
Thanks for explaining this!
NodeJS Api? https://discord.js.org/#/docs/main/stable/class/VoiceChannel Ctrl+F for joinChanel
Really well written, thank you!
question: why, when I console.log something like this: console.log(leo.play(10)) (following the example on the video) the result is the expected log, and then an undefined? on youtube someone said that it was "Because the function has no return value " but i'm not sure what does that mean. 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [getify/You-Dont-Know-JS/.../**this%20%26%20object%20prototypes** (master → 0cc17c5)](https://github.com/getify/You-Dont-Know-JS/tree/0cc17c53ff772e20dfd6a7072c965df2486116e8/this%20%26%20object%20prototypes) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e76j80m.)
Angular is so 2012. We're all about that Vue and React in 2018. MEAN is a dead stack.
The latter one all day my friend. It’s just cleaner and lends itself to human visual parsing; once that conditional block closes you’re done with it Vs. having to keep it in your memory all the blocks until the final close. Also save a few keystrokes, remember you only have a finite number of them until you’re gone, make em count! ;)
Well, the highest seat of power in my country did say that we should use "peoplekind instead of mankind" with a straight face. He did get rediculed for it over here, but I think this paints a convincing argument. "Don't be a dick" should be something adults sort out themselves with words. People being mean should not be an excuse to put forward vague rules which are too easy to exploit. 
I see where you’re coming from and you’re definitely not wrong, but if there is an existing convention in a codebase or company, use that for the sake of the next poor bastard that comes along and needs to maintain it. Consistency, even a non-ideal one is better than every yahoo doing whatever they think is the right thing or convention of the day. But yeah, making any decision is better than none.
Where does random come from? You maybe wanted to call Math.random?
Thanks for the greate explanations!
oh sorry im in the p5.js library i dont think you need to call Math. 
There’s no compiler that I’m aware of. But there are things like wrappers that help to build that mobile functionality out of a pure JS app. Ionic is an alternative to Apache/Cordova for building native mobile apps out of JS. Keep in mind deploying to the App Store might add time / money to your dev process. Emulate your native app to see how it would look on a native device 
Im mot sure why you wouldn’t have to write Math, is there some kind of aliases in p5?
I agree that it doesn’t matter but I of course I think the second is more readable. That aside though, the second, as others have mentioned, using the guard clauses will end up yielding a more stable codebase which will end up being more maintainable. Liking the readability is just convenient for me. If I felt the first way added more maintainability, I would use that instead and just not liked it. Quick aside, what is bike-shedding? I’m not familiar with the term (and also apparently too lazy to google.)
Whenever you invoke a function from the console, it will always say what the function returns. In the case that the function doesn't return anything, it'll show `undefined`. ``` function doNothing(){ } doNothing() // still shows undefined ```
https://p5js.org/reference/#/p5/random this is what i know, sorry only a couple weeks in
Also Math.random doesn't take arguments and just returns a pseudo randomised number between 0 and 1
Javascript that has been put through a minifier/obscurer to change the variables/parameters to be non-semantic
I never used p5, but maybe you forgot an import of something. If function are not declared within functions in javascript you either have to import them or they are global
You probably need to use a combination of the docs, examples and tutorials. The docs are comprehensive, but they are aimed as reference not really a learning material in my opinion. Regarding the docs, to confirm, are you using this ones: https://photonstorm.github.io/phaser3-docs/index.html And accessing the details from the dropdown? Example: https://photonstorm.github.io/phaser3-docs/Phaser.GameObjects.BitmapText.html I only ask, because they transitioned from Phaser2 to Phaser3 somewhat recently and so its possible to end up in the wrong docs which can be confusing. Lots of examples at: https://labs.phaser.io/ In terms of actual tutorials you could check out https://www.emanueleferonato.com/category/phaser/ He has lots of examples and tutorials on his site. Although I understand your comment about the docs, I just can't agree about your assessment of Phaser2 - if you are creating a 2d game for the web it has you covered with almost too much stuff. 
Codeabbey has programming challenges that you can use javascript on. Have you considered python though?
It's also deprecated IIRC.
Make an AAA-grade game in JS or any other ECMAScript, I'll be waiting here.
but isn't it leo.play() returning a console.log? or that doesn't count?
Thanks so much for checking it out! :D You're right, I do have a small amount of filters, but I'm hoping to expand on these as time goes on. I made various presets of these to give devs more flexibility when it came to what they preferred, and hopefully this library will gain more filters with time. :sweatsmile: Oops, you're right, that's an uncaught error right there; I'm gonna rectify that now! This isn't deployed on npm yet, which is probably why that error exists lol Your comment made my day, so thanks again! :D
Serious question: What is the point of using older ES versions where this type of work is necessary? Why not use Babel/TypeScript/etc &amp; take advantage of all the new language features, which include much more succinct/idiomatic ways of doing the things explained in the guide?
Node CLI (or your browser, whatever console you're using) is logging the output of console.log(), which is undefined. If you type 1 + 2 in the console it will log 3 without you having to do a log statement.
Dude get outta' here with that straw man -- no where did I imply you should use JS for that. It would be a _nightmare_ to make that large of a game in it. If only for static code analysis and a more robust IDE.
As someone who learned basic Java first, then JavaScript after, this helped me out big time. I’m having a hard time grasping JavaScript. I’ll be using these new ES6 patterns for sure!
I don't feel the need to virtue signal. But go ahead.
I don't need external validation about the things I do.
Unless you need to find objects via the keys often, you should just use an array of objects: [ {...}, {...} ] &amp;#x200B;
You're welcome, and keep up the great work!
animal.poop()
Eh, maybe I just played terribly coded Unity games, but I don't exactly equate that engine with high performance.
I need this, thanks! 
☑️ SQL is hot stuff again after learning that NoSQL sucks at relations, but not just any of your old SQL, the [NewSQL](https://en.wikipedia.org/wiki/NewSQL) ☑️ Client side rendering is out. [Server Side Rendering is back in](https://github.com/zeit/next.js/). ☑️ Node is as cool as ever. ☑️ Express is so 2012. [Koa is in](https://koajs.com/)
You can just do this now: class Thing { ... } class ThingyThing extends Thing { ... }
Its a good object model to learn. Its more complicated but it gives you more freedom, and allows you to observe the moving parts. But I don't recommend getting into the nitty gritty of this I'd recommend a solid grasp of OOP first.
Jesus, this is like the Microsoft/GitHub levels of fearmongering. I hope you're not being serious, because jQuery is only like 3 of like 28 different projects they manage (?), including eslint, mocha, and webpack.
Why do they need to lazy load? Unless you loading like 20 slides you’re not really saving time or band width.
You gotta be fucking kidding me....
Love your stuff Tyler. Everytime a collegue comes to me asking about learning React I point them to your courses. Keep doing what you're doing.
I'm still relatively new to JS (and, to be sure, programming in general) and this is absolutely the goofiest and most awesome concept ever for a game. I have to say, though; regarding the comments that are along the lines of 'this is a great way to learn JS', I don't see how that makes sense. If this game is, in fact, 'teaching' anything it would appear it's lesson(s) is more geared towards game logic (or, more generally, computer logic). I'm on level 6 and so far, basically, all I've composed is a series of \`if...else\` statements which, to my knowledge, is a concept found throughout all programming languages. &amp;#x200B; So I guess I have to pose a question: is there anything in my statement here that is incorrect? Have I just not made it far enough in the game?
Thank you! Means a lot.
JS is a web technology. If you hate web I’d recommend a different language. 
I really liked your solution! I'm still really new to coding in general, so seeing something laid out so cleanly is really great for me. Thank you so much! The way that you created the moves matrix is a neat way to do that. I like how that's a lot easier to make than all kinds of functions for each possible outcome. Thanks again for your feedback. As a novice learner, it really helps :D
In that case, I learned something new today. :-) Thanks!
I've had a look at this, the whole thing decodes to: location.replace( "LINK" ); Obviously I won't paste a dodgey link here, but you can see it now 404's so it doesn't matter.
I came from C#/PHP and JS/jquery to ES6/typescript (starting about 1.75 years ago) and ES6 is a damn godsend for those coming from other languages. Old JS was so bad...it still isn't great, but it is so much better now than it used to be.
Doesn't look like it's returning a `console.log` -- but even if it did, it wouldn't matter. `console.log()` itself returns `undefined`. Every function in javascript returns _something_. Technically. It's just that the something being returned may be `undefined`. var stuff = console.log('logged'); //=&gt; "logged" // undefined stuff === undefined // true
npm is part of the node foundation. https://foundation.nodejs.org/about/members
what do you mean?
Ideally, yes I'd have a lot of images, but lazy loading because... quick Load times are lyfe
1. Cannot delete warrior from account. 2. Can create two warriors with the same name. 3. "Oops something went wrong" error message. The game worked yesterday. Has stopped working. 4. "SyntaxError: expected expression, got '&lt;'" from 17.c490042a.chunk.js:1 5 Source map error: SyntaxError: JSON.parse: unexpected character at line 1 column 1 of the JSON data Resource URL: https://warriorjs.com/static/js/main.752573f2.chunk.js Source Map URL: main.752573f2.chunk.js.map
This is great timing for a project I'm working on, thanks for posting. 
https://davidwells.io/snippets/traverse-object-unknown-size-javascript/
I've read your other post on r/Python in which you said you can't stand web stuff and you asked if Python is very web focused because you're interested in learning it. If you're looking to focus on implementing any other type of software, then javascript / node.js is not the best choice, although javascript (via node.js) these days is not used only for web related stuff, you can do other stuff with javascript but mostly it's web related. Python on the other hand is a general purpose programming language that is far better suited for pretty much anything else as well. And it's also better designed than javascript. It would help if you'd know the difference between implementations and their limitations for certain types of software projects, that would easily settle your mind, for now you'd have to make do with what you have. But if I understood you correctly, and I think I did, choosing javascript is making the wrong choice in this case. You'd have more possibilities with Python and you'd be happier with it. Also if you're looking to be a professional javascript developer, it would be kind of hard or nearly impossible to find a job where you would use javascript / node.js for something else than web related things.
Tyler's content is the best! Highly recommend signing up to his courses!
Parkinson's law of triviality is C. Northcote Parkinson's 1957 argument that members of an organization give disproportionate weight to trivial issues.[1] Parkinson provides the example of a fictional committee whose job was to approve the plans for a nuclear power plant spending the majority of its time on discussions about relatively minor but easy-to-grasp issues, such as what materials to use for the staff bike shed, while neglecting the proposed design of the plant itself, which is far more important and a far more difficult and complex task.
I think that is the best option though it can be laggy. You could further add cordova-plugin-inappbrowser to directly load all your js in the mobile app.
 The recommended way of setting the prototype (object.getPrototypeOf()) remains the same as in ES5, but it is also good to mention that the difference between ES5 and ES5 in this case is that In ES5, it will throw a TypeError exception if the parameter isn't an object. In ES6, the parameter will be coerced to an object (forced in some sense)
It's good to understand it thoroughly because if you ever work with anyone else's code you will run into it from time to time. If you ever work with polyfills you see this a lot. You can probably do anything you want to do without needing it though. It is your choice.
Normally in old style `.prototype` thing I would've expected this: Object.setPrototypeOf(Point.prototype, Object.getPrototypeOf(EcPoint.prototype)) Given that's not the case if you're not able to change `ecPoint` to a `class` this is a little bit less trivial to do. If you're free to convert `ecPoint` into a class then a better pattern would be this: class EcPoint { constructor(x, y, isRed) { // Whatever EcPoint does with these values } // other methods } class Point extends EcPoint { constructor(x, y, isRed) { // This calls EcPoint.constructor with a new Point object // with the correct prototype chain super(x, y, isRed) } validate() { /* stuff */ } // other methods } If you're not able to convert `ecPoint` then you will probably just need to mix with the old-fashioned way: class Point { constructor(x, y, isRed) { const point = ecPoint(x, y, isRed) Object.setPrototypeOf(point, Point.prototype) return point } validate() { /* stuff */ } } Object.setPrototypeOf(Point.prototype, Object.getPrototypeOf(ec.curve.point())) 
This is absolutely incredible!!!
You answered your own question. Learn d3js and you can make anything your heart desires. 
You don’t need the compiler. Just use PWA https://developers.google.com/web/progressive-web-apps/
Javascript has long been independent of the web. Node.js is platform independent and a good choice for backend and shell, then there are things like react-native with multiple targets reaching anywhere which rip javascript out of the browsers context to let it run native applications. Many desktop applications even coming out these days run entirely on javascript, though lots of them still use Electron (which packs a browser again). Also consider that even the web, which is agreeably the worst part, has been mostly abstracted. If you use a framework the only thing left is css and a few html primitives, the entire dom api is irrelevant.
You could look into [code splitting](https://webpack.js.org/guides/code-splitting/) if you use Webpack 
Are you sure that original code is correct? The last line overwrites the effect of the line before it. Also, try having `Point` extend `ecPoint` and call `super()` instead of `ecPoint()`. ES6 classes can extend ES5 constructor functions.
The purpose of this task is learning how to get the bytes myself instead of relying on a library. But the pngjs source seems to have everything I need and - as expected - it looks way more complicated than I first thought. So I guess that's enough input to fill the next slow days in the office.
The thing is, I don't really want the pixels or RGBA data - I really want to learn how to get all this out of a raw file. pngjs is a good read though!
it has to be 0.
\`\`\` function Food(){ // what are width and scl? they are not defined? this.x = random(width/scl); // random needs to be imported to this file or a global so you can call it this.y = random(height/scl; // missing closing paren before ; this.theRest = youGetIt(){} // remove the "{}" after the function call } \`\`\`
Why don't you use a control variable instead of comparing values? Something like: `var clicked = false;` `$('#plusminus-check').click(function() {` `clicked = !clicked;` `clicked ? $('#plusminus').val('0') : $('#plusminus').val('3')` `});` &amp;#x200B;
Do something like this. Heres the updated fiddle: [https://jsfiddle.net/1fo3ty7v/1/](https://jsfiddle.net/1fo3ty7v/1/). const $plusMinusCheckbox = $('#plusminus-check') const $plusMinus = $('#plusminus') $plusMinusCheckbox.click(() =&gt; { const val = parseInt($plusMinus.val(), 10) $plusMinus.val(val === 3 ? 0 : 3) }) &amp;#x200B;
if you do the if statement (like in your fiddle): if($('#plusminus').val('3')) it will actually set the value to 3. But you want to check if the value is 3: &amp;#x200B; if($('#plusminus').val() == '3') &amp;#x200B; this can ether be true or false so i would recommend using else to handle if its false. Here is the full working code: &amp;#x200B; $('#plusminus-check').click(function(){ if($('#plusminus').val() == '3') { $('#plusminus').val('0'); } else { $('#plusminus').val('3'); } }); &amp;#x200B;
Oh my, well I’ll be, TIL, thank you!
I am not exactly sure if this is what you are looking for, but this generates a sentence by picking a random word from each of the arrays: [http://jsfiddle.net/q4dbk9rf/](http://jsfiddle.net/q4dbk9rf/) const nouns = ['dude', 'car'], adjectives = ['red', 'green', 'blue'], verbs = ['eat', 'sleep', 'code', 'repeat'] function createSentence() { const allWords = [nouns, adjectives, verbs] const randomWords = allWords.map(xs =&gt; xs[Math.floor(Math.random() * xs.length)] ) return randomWords.join(' ') } console.log(createSentence()) &amp;#x200B;
Im pretty sure he meant lazy loading images in the frontend though?
This is a pretty good image slider for jquery, that has lazyload support: [http://kenwheeler.github.io/slick/](http://kenwheeler.github.io/slick/)
If you know javascript then React native. It's pretty easy to learn the basics.
[https://angular.io/guide/quickstart](https://angular.io/guide/quickstart)
TBH, the raw graphql seems more readable. Also, how does this deal with more complex queries with nested fields? Also, [graphql-tag](https://www.npmjs.com/package/graphql-tag) is a thing for compiler level support and static analysis for graphql.
Have you seen this guys if statement? Like wtf is that? I was also serious and I then seen the code in the edit that's an infinite loop of no good.
Nice work!
You've got the right idea using a Boolean 
Come on mate it's a Boolean.
Boolean
what are you talking about? 
So. I have a two year old codebase using the primordial version of Babel (and es2015, oh.. fuck) ... How hard would it be to switch all that mumbo jumbo into a rollup thing? (Since I don't need Babel anymore, but would still like to keep a "distribution" folder that is a bit more contrived to read than the ES6 source) 
First condition sets it to the value the second condition is looking for.
Just tried pnpm and it seems to work perfectly, much faster than NPM and no wasted disk space. I have no idea why everyone is not using this?!
100 ? If these are 100 my hamster is 30cm tall.
ionic uses cordova though.
 The ultimate goals of the merger are to “enhance operational excellence,” to increase collaboration and to increase the collaboration across JavaScript ecosystems and to create a single organization that can become the home for any JavaScript project. 
I'm aware of what he meant. I was just referring to code splitting because (depending on how he fetches the images) code splitting could improve his pageload speed. 
1) There is only one CSSOM which is built after all CSS stylesheets have been retrieved. 2) They all do because everything runs on the CSSOM 3) I ran out of time.
I am sorry but that website is just horribly annoying to use.
100 ? If these are 100 my cat moos.
Nooooooooo........
There's js libs for robotics, plc programming, desktop applications (nw.js / electron) and more, figure out what you'd like to do then see if there's a js lib out there to do it, probably will be.
100 ? If these are 100 my dog's an astronaut.
&gt; var is rather a keyword, which defines a variable globally regardless of block scope. Well, you’ve just lost all credibility after only 3 answers.
It gets worse if you keep reading. 
Idk but I appreciate the honesty of computer language 
This is horrible 
So function *myOtherFunc() is wrong and it should be function* myOtherFunc() ? thanks
Hey thanks for reply. This can be used especially for small/medium or hackathon projects. Basically this helps you to describe your logic in JSON format rather than the String based query so the chances of error is minimised. The query creation is handed over to the helper function.
https://www.onlineinterviewquestions.com/list-comparison-operators-supported-javascript/ `==` and `!=` need to be mentioned.
http://youmightnotneedjquery.com/
YouMightNotNeedjQuery.com This is a 1 to 1 comparison. You don't need to do a 1 to 1 conversion, infact you shouldn't. You should do things in ways that make sense with the given toolset. Thr reality is that jQuery was created and got popular for cross browser compatibility issues, with a side benefit of adding in a ton of awesome helper functionality that was desperately needed. Today, cross browser compatibility is not a big issue (outside of s few things like dates) and all the things jQuery brought you can be done natively. For animations, CSS is the way to go. The animation in jQuery were hacky as shit, anyway. But even disregarding that. If you're doing a Vue app, you're not messing with the DOM directly, so why would you even consider using a DOM manipulation library?
Your code is already on the right track. You just need to add another INPUT element for the number of array elements, and make use of it in the `spliceArray()`. Also, instead of specifying the INPUT element's ID as `myNumber`, specify it as e.g. `startIndex`, and `numElements`, so that it's easier to know what an INPUT element is for.
OMG, the author needs to unpublish this article before they embarrass themselves any further.
Add \n to the end of the string. 
What do you mean by double line? If you want to add a linebreak inside a string you can use the "\\n"-character. Like: const text = "this will be on line 1\nthis will be on line 2" &amp;#x200B;
Move it to a separate module and export it. 
Typescript at the end is still javascript. Sometimes understanding under the hood is valuable when you have to debug js scoping issues. 
you're literally signaling your own virtues right now you idiot.
if you didnt, then you wouldnt bother talking about them in a public forum.
Thanks for the answer! Not sure what you mean with your last paragraph. Could you explain what you mean? :)
&amp;#x200B; &amp;#x200B; &amp;#x200B; let openings = \["The", "A little", "The person who I think is ", "Any", "Some", "A", "A old", "There are many", "Tomorrow there will be a", "There was a"\], adjectives = \["large", "tiny", "skinny", "cute", "gorgeous", "aggressive", "courageous", "fit", "gigantic", "generous"\], nouns = \["girl", "tiger", "cat", "boy", "lady", "dog", "person", "teacher", "tutor", "worker"\], verbs = \["ran", "threw", "plays", "jumped", "bought", "drove", "jog", "shot", "ate", "sprinted"\], pro\_nouns = \["he", "she", "his", "hers", "you", "me", "I"\], adverbs = \["oftenly", "poorly", "honestly", "rapidly", "safely", "seldomly", "loosely", "obnoxiously", "hastily", "tediously"\], closings = \["gives up.", "quits.", "plays better.", "has a fun time.", "goes home.", "goes to bed.", "play computer.", "watch tv.", "goes to work.", "gets mad."\] &amp;#x200B; function createSentence() { let allWords = \[openings,adjectives,nouns,verbs,pro\_nouns,adverbs,closings\] &amp;#x200B; let randomWords = allWords.map(xs =&gt; xs\[Math.floor(Math.random() \* xs.length)\] ) &amp;#x200B; return randomWords.join(" ") } for (i=0;i&lt;10;i++){ console.log(createSentence()); } &amp;#x200B; When I run it in terminal it outputs 10 sentences like this: Tomorrow there will be a generous worker threw she hastily goes to bed. Some aggressive cat threw I safely gets mad. Tomorrow there will be a skinny worker sprinted you honestly gives up. Tomorrow there will be a aggressive tutor bought hers loosely has a fun time. A old generous tiger threw you seldomly quits. There was a skinny cat jumped you oftenly gives up. Any tiny worker ran you poorly plays better. There was a cute person bought me loosely goes home. A little tiny dog shot I poorly goes to work. A cute worker threw I seldomly gets mad. how can I make it skip a line and then generate a new sentence?
Log the newline character here: ... for (i=0;i&lt;10;i++){ console.log('\n') console.log(createSentence()); } ... &amp;#x200B;
Hi /u/Tomyssz, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/B3M3W5, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Please provide evidence! Modmail if you're not comfortable sharing here.
Hi /u/evilgenius82, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/vijayhackr, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/HoloCroc, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/snakemanuver, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Thanks for your understanding.
Hi /u/Erketuu, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Yurrrnamean, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/JuicyJesper, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Guys, at least questions are on the point... (I mean most of them, that with negative infinity is like math basics so what they even consider as valuable question?)
* Yes * Meh, you can take it or leave it * Stop trying to make Deno a thing. Its still under development for christ's sake * Express is still the leader in node world. But honestly, I may take some time to look at Koa 
In what way is this comment helpful...
If you use Vue or any framework for that matter there is no need for jquery and/or dom manipulation. The dom is nothing but an implementation detail now, you don't query, you don't innerHtml, you don't imperatively set classes/styles/attributes. All of this is now declarative. In other words, you will never, ever have to touch the dom again. You don't need to study jquery slash "vanilla" comparisons, simply throw everything out that starts with `$` and move on. Every control or extension you have used has a component counterpart otherwise.
You have to be aware that jQuery and Vue solve problems in a different way. jQuery is good at manipulating existing HTML, Vue (and similar Frameworks like Angular and React) is good at generating new HTML (and managing that). Some problems you can solve in both ways, tough. At work we have a lot of websites with existing HTML (HTML that gets generated by a CMS or something else on the server). Using Vue isn't that super intuitive in these cases. Sometimes it works, but in our current project I'm thinking about removing Vue entirely, because I can't make it fit. (I still use and like Vue though) What do I use instead? First of all: a [DOM4 polyfill](http://webreflection.github.io/dom4/). This polyfills all the latest DOM methods which offer a lot of possibilities similar to jQuery. Another thing I started to like in situations like this is [StimulusJS](https://stimulusjs.org) by Basecamp. A framework that works primarily with existing HTML (I think it kind of looks a bit like AngularJS 1.x). I really like this idea and I think it's really a pity that there are no real alternatives to it. So it's kind of a one-of-a-kind framework but still has some room for improvement IMO. When you're in need for ajax requests, I'll recommend [axios](https://github.com/axios/axios/). Other than that I think simple JS and the DOM API is totally fine today. jQuery doesn't give you that many advantages anymore.
Started using React.
That hoisting answer explains everything but hoisting...
Vanilla, then wrote my own [lib](https://github.com/wdub/jspine) which include the most used functions.
I tried to move from a WordPress/PHP/jQuery workflow to React and couldn't wrap my head around it. I kept being tempted to import jQuery, despite how stupid that is, because I couldn't figure out how to do the things I wanted to do, or it seemed needlessly complicated to do so. A few months ago I started using Angular and it's been a MUCH smoother transition. I have yet to run into a problem where I thought "Damn, I wish I could just do this with jQuery," which I was running into constantly with React. And I'm doing much more sophisticated work with Angular now than I ever attempted with React or even jQuery. YMMV obviously, and I'm not trying to say that Angular is the best, or that you should be using Angular, or anything like that, but basically I think it comes down to practice, practice, practice, really learning how to use all of the tools whatever framework you're using makes available, and coming to grips with the core concepts and design patterns underpinning it. Angular was an easy transition for me because 1) I took a great course on Udemy (Maximillian Schwarzmeuller's), 2) Angular's documentation is fantastic, and 3) Angular is really powerful and provides really comprehensive functionality out of the box. After digging into Angular some, I explained my troubles with React to a React developer friend of mine by saying that I couldn't figure out how to manipulate the DOM without jQuery, and his response was that the point of React is that you shouldn't need to manipulate the DOM. So my problem with React was that I was having a lot of difficulty wrapping my brain around the fundamentals of how it's supposed to work and how it does things differently. Ultimately I decided it just wasn't a good fit for me personally, but maybe I'll come back to it after some more experience with modern frameworks and find that the concepts "click" better. I don't know anything about Vue so I can't really give you any super relevant advice there, but if you're having the same conceptual problems with Vue that I was having with React, maybe try a different framework and see if that "clicks" better for you. Maybe you'll find React easier to learn than I did, or maybe you'll find Angular as intuitive as I do.
The question here is if you need data binding or if data binding would make you much more productive on projects where there is a lot of client rendered dynamic content. If you don't need data binding, you should probably either use vanilla or a jQuery substitute like Cash, Zepto, etc. If you need data binding, then you can start considering other options depending on your team's skillset. If you are not so great at using JS/ES6/etc Vue might be your best option as it's the closest one to old school paradigms. Also the most approachable for designers that only know HTML and CSS. React is more for JS ninjas. Angular is best suited for people that come from a heavy OOP background (.NET, Java, etc) or people wanting the structure of a framework.
You can set the debugger to break on unhandled errors, and then it will say what the error was. 
Switched from Backbone to React at my workplace.
Every Senior front-end dev should know it to. This has been a real problem for us in finding developers. We will interview a guy thats been developing in es5 js for like 20 years but he stopped learning new things 10 years ago.
Speaking as someone who has not used jQuery in many years (I work in Angular 6 / Vue), there's nothing honestly wrong with using jQuery for the right project. If you have simple needs and just need to augment an HTML page, you should honestly just keep using jQuery. If you want to have a more advanced library that can augment pages then you should spend some time with Vue on a new project and apply your learning to old projects in time. If you're interested in building SPAs (single page applications) and PWAs (progressive web applications), then something like Angular 6, Ember, or even Vue/React (you just need additional libraries to supplement the view layer) are great options. 
I wish it did matter. I always wonder which is "better" syntax, though since moving from Koa v1 to v2, I haven't used a generator once.
New projects didn't use jQuery. Going back through old projects to remove jQuery just for the sake of removing jQuery is not worth it.
I tend to favor `function* name` since its a modifier of the function and not part of the identifier (name). MDN examples (see previous link) use this as well which makes it feel standard. But as with many things JS, white space can always sneak in there and it not make a difference.
A couple of things I miss when not using jQuery: - `.parents(".selector")` - `:contains('text')` - .not(".className") - Concise selector (this one I've sorta fixed by aliasing document.querySelector to `qs` and `qsa`) If I spent a moment I could probably just re-create parents/contains/couple of others I can't think of now.
As far as convincing your colleagues, that's a tough one and really depends on the type of people they are and the type of work that you do. There are some use cases where the old LAMP/jQuery stack still works just fine. If you're mostly building static websites for clients who just want some online presence in the typical About Us/What We Do/Contact Us sort of format, there might not be a whole lot of reason to make the switch. BUT, I think the market for that sort of work is quickly diminishing with the ubiquity of social media and the advent of services like Wix that let anybody build their own decent looking website without a lot of effort. On the other hand, if you're building any sort of sophisticated web applications, a modern framework really shouldn't be a hard sell unless there are some underlying problems with the organization, like an unhealthy resistance to change. I just left a place where the CTO was an arrogant megalomaniac who thought his own poorly-written, bug-ridden, abysmally performing, unmaintainable proprietary toolset was God's gift to software engineering. It was all written in jQuery. Ain't no fixing that organization, so I had to get out before it was too late. The thing about the tech industry is that technology moves at a breakneck pace, and if you're not willing to be flexible and agile enough to keep up with the changes, you're just not cut out for the industry. I really hope you're not in that sort of situation, but if you are, it might be time to polish up that resume. Don't feel obligated to stay in an organization that insists on standing still, because it'll hold back your own growth and leave you stranded and unprepared for the job market when it inevitably fails. Maybe a little cynical, but that's my two cents.
Beat me to it
I've never used a generator in my life, and I can't say I regret it.
If your work place still using jQuery the only solution is to quit.
Yeah, people need to realize that, esp for something like an intranet site, if you're supporting IE9 and spending a lot of time worrying about refactoring JQuery out of the equation, someone somewhere is making very bad strategic decisions.
Turns out that you are right, and that my try...catch wasn't actually doing anything. I added the code at the same time as adding a 'event.preventDefault();' following a form submit. So it seems that the error was being shown by the console, it just was disappearing immediately when the form reloaded- even though I selected the 'preserve log' option, do you know why? Further, the error was 'uncaught' according to the console, even when I had it within a try...catch thing, shouldn't it have been labelled as caught? 
I can only talk about my personal experiences but I was a heavy jQuery user. Once I started using React and Angular, I didn't have a need at all for jQuery about more. These frameworks provide everything that you need. 
They were useful a few years ago if you wanted to write "modern" async code with co-routines in Koa v1. Of course now with async/await, there's no need. The only other modern use I can think of in my code is using mobx-utils flow to keep disparate async side effects within one transactional action.
I'm a bit too young so I didn't use it that much, but as far as I know it gained popularity because it's a cross-browser alternative to DOM API and now when it's pretty much cross-browser by itself and overall kinda fine, why would you even bother using it except you depend on some jQuery plugins? Also, why the hell React, Vue or any framework basically stands like a modern alternative when you're not even working with any kind of DOM API in those? Those are different level tools. If anything, it would be the framework developer's choice whether to use jQuery type library or not (spoiler: not to use), because it's mostly their code which makes all the DOM manipulations when you're using something like React or Vue.
[Redux Saga](https://github.com/redux-saga/redux-saga) is a popular library that is based on generators. 
thanks! I have been playing with the 'pause on exception' and I have a new question see here https://www.reddit.com/r/javascript/comments/9lnrmm/chrome_js_console_only_pauses_on_exception_if_i/? any chance you could help?
It depends on what the error is and where it originated. Do you have an example? &gt; even though I selected the 'preserve log' option That should keep your console even after page reloads. Something funky happening there. Maybe the setting didn't take or something?
debuggers connect to a page instance and will lose that connection when the page reloads, the newly loaded page requiring a new debugger.
That was a lot of writing to communicate a relatively simple idea.
That's the reason why I started this post actually. Our back-end team moved from Classic ASP to .Net and now .Net Core. Our Front-end team used jQuery then and still does now. I want to move forward but wanted to start with not depending on jQuery anymore for simple JS stuff (I think jQuery made my basic JS knowledge worse). As to what we build. We build websites mostly, but quite complex. For example custom webshops, websites with lots of data, websites with custom components (like saving articles to reading list). How would Vue fit in that picture? Or do those not count as sophisticated web applications? (SEO is obviously a big issue when developing websites)
Hi /u/trifek, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi Kenman, Sorry for breaking the rules, was not my intention. I went over the rules and the only thing I saw about self promotion was it was OK as long as its not the only thing you are posting in the subreddit. It was my first post of self promotion so I thought it would be ok. If I wanted to share similar content like this in the future, what would be the rules ( save it for show off saturday? )
But then you couldn't make a sick ass blog post on how fast you dropped jQuery.
Thanks for telling us not to read it. I was worried it would be super long and now I know.
You can't make that post because dropping it from old projects is anything but quick 
That's what I'm here for.
On medium!!
This is otherwise known as pub/sub, or building pipelines. This is event-driven software development.
nice article
Very short answer: Vue + Axios.
How many projects and developers are their in your firm? Do you maintain projects for a long time or do you build and forget? Changing from jQuery to Vue should almost always be looked at as a long term strategic investment by any firm. Plus, why Vue instead of React? Why not Ember (I'm a _huge_ fan of Ember). Do you build SPAs already or do you build server rendered pages? Is SEO important in your projects. I've seen too many Jr developers go crazy for a technology and push it as the greatest thing ever. They typically have no concept of what the ramp up time to get proficient will be for their team or how much harder it will be to maintain old projects. My brother consults for big companies and his advice to strategic changes like this is to fire all the devs who've been working with jQuery and hire a new team for Vue. If you think that's an extreme position, you're probably underestimating how difficult the transition will be.
Using jQuery!!!
Or tell them to Google it and learn it that evening, because they're a senior developer and it shouldn't be difficult. Just because they haven't learned it yet doesn't make them incompetent or incapable. It doesn't take a year.
Vue and React don't really work properly when you manipulate the DOM itself. Components will not refresh correctly. Vue and React make changes to a "simulated" DOM and then push it to the real DOM
not really its fairly new to the front-end though. The first implementation I remember is backbone. In the back-end world event-driven has been around forever and functional libraries have been around forever. 
Why axios and not fetch?
Reactive programming is new
Titled "What we learned in our journey beyond jQuery" 
yah this helps. that is exactly what i want to do, no web stuff i.e. i hate html/dom crap. thanks 
What kind of projects are we talking about? * Traditional websites? jQuery will work fine if you need features it offers. Adding something like Vue/React will do nothing but confuse everyone (unless you're using some hybrid solution of traditional website featuring "widgets"). * Single Page Applications? Use a reactive framework. If you at any point think you need anything like jQuery, you're doing the whole "reactive" thing wrong.
Yeah, that one too. I usually use redux-promise these days.
Can't you replace jQuery with `$ = (el) =&gt; document.querySelector(el);`
I just stopped using it and went straight to vanilla and never looked back. You feel so much relieved knowing all your pages are at least 150kb lighter. 
I just stopped using it and went straight to vanilla and never looked back. You feel so much relieved knowing all your pages are at least 150kb lighter. 
It happens you need to make mini helper functions to help with common things. The &lt;10 lines you write in a utility function to toggle classes can't be the reason.
`$('element').toggleClass()` `toggleClass is not a function`
For the love of god whoever reads this. This doesn't mean start doing: try { throw new shit(); } catch {} Catch errors that you want to handle and throw to a higher function if you don't know what it is so you don't swallow potentially dangerous bugs.
http://shouldiuseacarousel.com/
jQuery minified is ~83kb.
I think I broke it, whoops. &amp;#x200B; Test your app against these: [https://www.owasp.org/index.php/XSS\_Filter\_Evasion\_Cheat\_Sheet#Tests](https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet#Tests)
Fast is a relative term.
`querySelector` only returns a single item, so `querySelectorAll` returns all items that match the selector. that said, it's a NodeList so it's still not going to be a 1:1 match.
I‘ll disagree on this. Even for the simplest things I use React. That’s the fastest way I know to kickstart a project is CRA, just one command, drop in a few components, and you’re ready to go. Not sure about Angular, but I think the same goes for Vue using vue-cli
1. Find out what people are using jQuery for 2. Show them how to do it without jQuery 3. Open the door 4. Everybody do the dinosaur
It's funny because I actually think CRA is a great way to start a non-react project as well. Remove the React dependency and you've got transpilation, bundling, live reloading, and more.
I totally feel you. But I think it is important to use a solid build system for many reasons - optimized bundles, autoprefixed css, assed name substitutions for caching etc.
Hi /u/dead4586, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/PumpkinFeet, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/PumpkinFeet, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Small team, 2 Front-end and 3 Back-end developers. We mostly build websites, webshops, sometimes web applications. We maintain projects for many years (5+ though not much active development for most of the websites, just some new features if clients ask for them). All server rendered, and SEO is indeed important in 90% of them. I'm feeling I'm being hold back in my personal development as a Front-end dev, because everything is so focused on Back-end techniques. I'm just looking for information on how something like Vue could help the company (if we continue on this jQuery only path I foresee a lot of problems on finding Front-end developers in the future), and to help my personal development.
You shouldn’t be afraid of web. Simply dont be dumbass like me and follow best practices. lol 
Yeah, I completely agree with all that. I realize that my way of thinking is a problem--that's why I said I feel like a luddite.
Quick turnaround! I'll attack it a bit more later on, cheers.
please between 9-5 tho. lmao 😂
I was joking mostly. But jQuery is not needed as much as before. 
Mostly traditional websites yes, though we do some web applications here and there that could be made as a SPA (but are handled like traditional websites right now). For my personal development I was thinking Vue would be a great start because you can implement it and use it on a single component for example without the need to change the way the rest of the team works. Or am I thinking wrong here?
`- &lt;script src="`[`https://code.jquery.com/jquery-3.1.0.min.js`](https://code.jquery.com/jquery-3.1.0.min.js)`"&gt;&lt;/script&gt;` Then git commit -am "Remove jQuery" &amp;&amp; sudo git push -f origin master &amp;#x200B;
You probably can't drop it from existing projects easily. And if you do, it'll be replacing the common jQuery functionality (create an element, query an element, add an event listener, etc.) with the DOM equivalent. If you're hoping to backport something like Vue or another framework over an existing jQuery app, don't. You write apps in a completely way and it'll simply be more effort than it needs to be and a terrible way to learn.
Although I agree with you, there are just simple stuff that you should know as a senior developer and this is one of them (IMHO of course). It's okay to hire as a junior developer or a "medium" developer with lacking that kind of knowledge, but if you're making project and team-level decisions I expect more than "one of the lucky 10000" on basic high-level patterns for gating a promotion. It's the difference between learning implementation stuff versus logical concepts; I will hire you (as senior) if you tell me you've never worked with $LANGUAGE_OF_CHOICE but at least know pub-sub, than if you know the language we use but don't know pub-sub. Because you can learn a language easily overnight, but knowing those concepts and how/why/when to apply them takes experience.
Unfortunately, slick [doesn't support continuous smooth scrolling](https://github.com/kenwheeler/slick/issues/1068). The author linked to a hack - http://coolcarousels.frebsite.nl/c/23/ - but using this hack you can't use dynamically sized images, and it also totally messes up the horizontal viewport... Spent a good two hours on it... Looks like I'll be coding this from scratch.
I haven't worked with Vue but React is _bad_ for SEO. Google says that googlebot will render the JS but it just doesn't work for my SPA. What's your backend technology? You can use node for server-side rendering to get good SEO with an SPA. I've never done this and I'll bet dollars to donuts that it's a huge time sink to get it right. I'm a huge fan of SPAs and PWAs but the last project I built was Rails because SEO was the highest priority. Honestly, I wouldn't let my team make this change. I would try to find you a project where the client wanted Vue because I like to hang on to developers who are motivated to learn new things. But, I'd be sure you explain why jQuery was going to be in our stack for a long time. It sucks but you'll probably need to change jobs to work in Vue (or React or something). If you explain to interviewers that you've taught yourself Vue and have examples to show them, they shouldn't have a problem with your lack of professional experience in it. And, if you explain that jQuery is a strategic priority for your current job and that's why you're looking for something more interesting, that's a very good reason to change jobs. Anyway, hope I wasn't a buzz kill. It's awesome you're learning new things and as long as you keep that up you'll keep moving your career forward.
&gt;!= Thanks done
Interesting. I have known of OWASP for a few months at least, but haven't deeply looked into them as of yet; this seems like one of many possible good reasons to do so though, even though I'm not much into anything beyond client side. Thank you :)
well the thing is - I knew about xss and I know how to get covered (simple library will do the trick). But it wasnt priority and I forgot about it and this is the dumb part! lol. 
Are immutable variable are not Final ? Are you able to change the value of immutable variable/objects?
Sorry for title, I are in process of posting more questions
&gt;var is rather a keyword Thanks for pointing. Updated the answers
If you have a heavy frontend and none of the other developers want to use frontend frameworks, I suggest looking for new colleagues. On the other hand, not every website needs Vue/React/whatever. Maybe jQuery is a sensible choice for your projects.
`&lt;div :class="{ myClass: toggled }"&gt;&lt;/div&gt;`
The only thing to watch out for is that .each treats objects the same as arrays but foreach does not.
Hey no problem! :)
This one is a bit outdated. You may want to have a look into Aurelia
This! I work on a lot of e-commerce sites on a few of the big platforms. You probably could use vue or react with them, but it would be painful because of a lack of access to what you need. I don't get why people hate on jquery so much. It still has a place, albeit smaller than when it came out, in modern web development. 
Ehh alternative, similar. What’s the difference?
I started with this https://www.smashingmagazine.com/2018/02/jquery-vue-javascript/ 
I think that's plenty sophisticated enough to warrant a good modern framework. In my mind (which, I'm probably not the best authority on this because I'm pretty new to frameworks), you want to use a front-end framework any time you have a lot of user interaction that's going to change what's on the page. So if you have something like a blog where the users are mostly passively reading stuff, it's probably not super necessary (even if it's a big site). But if you're dealing with user authentication, shopping carts, a lot of custom searching/filtering, etc., it's going to be easier, and probably a better experience for the user, to do that stuff in a front-end framework.
He also posted here https://www.reddit.com/r/learnprogramming/comments/9ljxp8/javascript_fundamentals_for_absolute_beginners/?utm_source=reddit-android And the first 3 comments were all accounts that were 8 days old and had comments on the same other posts. All deleted now
Thanks for your answers, really appreciate it! 
Depends on the project. If you’re starting from scratch, just don’t use it. As others have said, unless your current projects only have a few hundred lines of jquery, it’s not worth going back to refactor it out. I’m currently going through something similar to get other devs at my company to ditch Bootstrap in favour of writing their own Flexbox code (we have to support IE11 so CSS Grid is not currently an option) . I think the best argument for avoiding frameworks/libraries is that it teaches you to solve problems yourself. Yes, you might end up solving the same problem that someone else’s code already does, but understanding the problem and being able to write a solution will make you a better developer.
I kind of feel the same way. It bothers me when to many important components of a project are "magic-ed" away; it makes isolating an issue difficult. That said, build tools these days (my favorite is webpack) have extensive documentation and active communities, which is why I spent a few hours getting a build system put together that has all the benefits /u/oguz279 mentioned that you can market as benefits to clients/customers. IMO, those benefits are becoming more and more technically standard and expected by future clients. Long way of saying that I'm ok with some magic if it's provided by a well supported technical resource and the benefits to clients/my workflow outweigh its implementation overhead.
Generators should finally be used for what they are... A lazy sequence of data. We should stop adding the same methods (map, filter, reduce) for different kinds of collections (array, map, set, nodeList) and start embracing the iterator protocol and add more utils for iterables. With generators you can easily define an infinite sequence, filter this, and take the first 3 results without allocating memory for the complete sequence. 
Depending on Browser support, I usually start with a basic ES6 application. The code will be re-usable when I move it into a framework like Vue if I wanted.
Element.closest
jQuery is fine for small traditional websites yes, but they can be done with other framework. Maybe on your next small traditional project where you will be solo frontend developer, build it in Vue completely, present it to your colleagues and then hold on a meeting with prepared presentation on why you should think the company needs to use Vue. Just dont be scared to do it, take a weekend or two to wrap up the things, or work few more hours per day if you are not comfortable with Vue.
Like this: ‪https://medium.com/@adrai/a-tale-of-the-last-10-years-in-web-development-9c74ead7e6a5‬
Question 41 has the best answer. 
Set a variable equal to true every time something is added to your object. In your interval function, check to the value of the flag. If the flag is true, do whatever it is that needs to be done and set the variable to false so it is ready to go when the object is updated again.
Called "Why We Dropped JQuery and Why You're Dumb For Still Using It" and posted on Hacker News.
I think it depends on the definition of "just for the sake". We transitioned gradually to Vue in our application and rewrote older pages when we had the chance. We don't have it as a full SPA yet but working with Vue is lightyears faster. 
No one said coping would be easy.
Max is a fantastic instructor. Somehow he has managed to created quality courses on Vue, Angular AND React not to mention other topics. Where does he find the time?
Wut?
We transitioned our ASPX app from jQuery based to Vue bundles about 8 months ago. Each of our ASPX pages is its own bundle since that was the easiest way to slowly transition the application. We started with new pages and went back to update previous pages as we had time or if we were adding new functionality. There were many pages with a lot of complexity in jQuery that became rather simple in Vue. I would say the biggest factor is making sure you have a good transition plan in place before moving forward. The top reason we went with Vue over other frameworks was the ability to do single file components and use those inside our ASPX pages. We didn't have to start over and recreate everything as a whole SPA. Just start small and work in manageable chunks.
Late to this party, but this is a great reference for trying to figure out how to do things cross browser wise without jquery also. https://plainjs.com/
Talk about overkill
If you don't care about IE? https://developer.mozilla.org/en-US/docs/Web/API/Element/closest
Can you not just use an observable? And support subscribe to the data source, in that function do whatever you need to do?
Tried like hell at my job. Bossman just kept pushing for jQuery. Fuck that guy.
Tried that...but writing a method to animate page scroll takes too much time
I would have to agree. Just bought his React course today because I want to see whether I prefer React or Angular. I really like Typescript, but React has some appealing things that I've seen early on - states seem nice!
I mean do you even read the stuff that you post? &gt; Note: Durandal has been discontinued in favor of Aurelia. 
I'm still pretty wet behind the ears, but why not just use jQuery with a tree shaker to strip the parts you didn't use out of the final minified code?
That will work too but i'm not sure js tree existed almost 3 years ago.
Vue and React are libraries :P
You must be a very not-in person.
Hi /u/dev-nadersl, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
It's 2018, tell 'em to get a grip already.
In that link the functions aren't being reused, it's just that all of the functions refer to the same `i` variable which has been mutated by the time they're called.
I did a tidy up on a series of static login pages some back end developers built. Quickly realised jQuery was only used for getting elements by id... So I swapped them all out for `getElementById`s. And halved the download size
 /** * Scroll to an element with optional offset * @function scrollToElement * @param {Element|Node|string} element - element or selector for element to scroll to * @param {number} [offset=0] - cast to int, pixel offset from element */ function scrollToElement(element, offset) { if (isString(element)) { element = document.querySelector(element); } if (!isInDom(element)) { return; } offset = toInteger(offset); window.scrollTo({ top: element.getBoundingClientRect().top + offset, behavior: 'smooth' }); }
 /** * Check if a value is a DOM object * @function isDomObject * @param {*} object * @returns {boolean} */ function isDomObject(object) { return !!object &amp;&amp; (object instanceof Element || object instanceof Node); } /** * Scroll to an element with optional offset * @function scrollToElement * @param {Element|Node|string} element - element or selector for element to scroll to * @param {number} [offset=0] - pixel offset from element */ function scrollToElement(element, offset) { if (typeof element === 'string' || element instanceof String) { element = document.querySelector(element); } if (!isDomObject(element) || !document.documentElement.contains(element)) { return; } offset = Number(offset) || 0; window.scrollTo({ top: element.getBoundingClientRect().top + offset, behavior: 'smooth' }); }
This is awesome, thanks for posting!
Easy. Locked up Angular 😂.
Wouldn't it be better to convince them to use Vue, rather than convincing them to go vanilla? Once you convince them of using a framework (tons of tips on their sites) it follows from the nature of Vue and React (idk about Angular) that jquery is not only unnecessary, but might cause bugs, as it bypasses the virtual DOM. It follows logically that you should immediately stop using it. You can keep the legacy code though.
Good bot
...which had been discontinued in favor of vue. 
&gt; (that YouMightNotNeedjQuery.com unintentionally highlights) I don't think it was unintentional. YouMightNotNeedjQuery was better than other replace-jQuery sites because it was realistic about what jQuery brought to the table. It wasn't YouDontNeedjQuery.
Schweet 
See?!?
I've never used PIXI - but the problem as I see it is that you pull out a cached item `texture`, and mutate it as part of the operation, setting `frame` to `rect` every time.... the last one is used, and you wind up with the same texture referenced by all cards, with the frame pointing at the king of spades. According to this -- https://github.com/pixijs/pixi.js/issues/4053 -- it's not a public API so I'd probably avoid using it like so. What you probably want to do (again, never used PIXI so I'm not entirely sure) is create a new texture with each iteration, or maybe create one outside the loop and `clone` it.
PHRN: replace express with Hapi, and you’re there.
Commercial products for one do not want the inner workings of their software to be announced to the world. There are multitude of ways to handle the exception anyways, it all depends on the situation. Some erroneous situations are recoverable from and some are not. Basically the short answer is that people are supposed to have proper error handling which "printing to console" hardly usually is.
Yeah man I'm a reasonml guy myself
Oh, damn, thats too bad. I was able to make use of it on a couple of projects, but I guess if you need a highly custom slider, then its best to code it from scratch. That way you have full control of it too, so thats nice also.
Great article! It explains in depth what is going on and ramps up in complexity over the course of the article.
Here is full code: [https://bitbucket.org/trifek/dropzone/src/master/](https://bitbucket.org/trifek/dropzone/src/master/) I'm trying to add one file and many at the same time.
As /u/tswaters says the problem is that you're mutating the frame on a single texture. You need to create a new texture for each frame, each of which will point to the same base texture. const baseTexture = PIXI.utils.TextureCache['images/card_spritesheet.png']; const cardTexture = new PIXI.Texture(baseTexture, rect); Additionally, textures are automatically looked up from the cache by url. The cache itself is intended to be private, so you should just do: const cardTexture = new PIXI.Texture('images/card_spritesheet.png', rect); 
I try a lot of method for convert HTML into an img data. This seem the best way to start a complex converter, the beginning is just 4 lines of code. And the main function to convert html (svg with foreignObject inside) into an IMG is this: window.btoa(mSvg.outerHTML);
whitelist your payment IP with gateway
You'd be much better off going to /r/LearnJavascript with this, but even before you do that: 1. Yes, you're doing something wrong: You're doing something without knowing why you do it. If you don't know why you do something, start by **not** doing it. You don't know why you'd use `bind`? Then don't use it and see what happens. 2. Right now, though, the only place in the code you've shown where you're using `bind` is on `net.createServer(this.handleConnection.bind(this))` and the problem is that you haven't shown the `handleConnection` at all, so we don't know what it is or if `bind` is actually needed or not. (It probably is, but we _can't_ know.) 3. As for the rest, your code doesn't make much sense. The code you've shown doesn't seem to correspond at all to something that would fulfil the descriptions you've written. It seems mostly like a skeleton or placeholder and the little pieces present (e.g. in `get` or `use`) look **way off**. I don't mean to offend but it may be that you've taken on a project that is too complex for your current knowledge. I don't mean you _shouldn't go on_, though, just that this (writing some mishmash thing and then going around asking about the smaller details) doesn't seem like a good approach. You either need to scale down your problem by focusing on something much simpler before you attempt this, or you need much more extensive help than just explaining `bind` usage.
 ## What's new * Angularjs [template](https://github.com/neutralinojs/neutralinojs-angularjs-template) for Neutralinojs * Reactjs [template](https://github.com/neutralinojs/neutralinojs-reactjs-template) for Neutralinojs * Vuejs [template](https://github.com/neutralinojs/neutralinojs-vuejs-template) for Neutralinojs * NL\_MODE global constant - see [docs](https://neutralino.js.org/docs/#/gettingstarted/quickstart?id=neutralino-super-globals) * Custom global constants can be defined from settings.json \- see [docs](https://neutralino.js.org/docs/#/configuration/settings.json?id=globals) &amp;#8203; { "globals": { "AP" : "Njs", "FOO" : "Bar" } } * See sample for Neutralino cloud [here](https://github.com/neutralinojs/neutralinojs-cloud-samples) * Bug fixes 
No he actually doesn't mind the use of libraries as making a whole payment gateway would be out of the scope of the course project. He just wants us to make improvements to the existing architecture to make the process more secure. 
Thanks for the suggestion. I don't know how to do to that. I'll research on this and see if it helps. Additionally if you could provide some links from where I could start I would be very grateful. 
As both a chemical engineer and amateur web developer, I appreciate this a lot :).
What??!?
Still nonsense
Very insightful and educative article! Well worth the read for anyone using Javascript.
The article is titled with a question, but it's not asking for JS help. This removal was wrong.
why reload the page?
Hello. Just been having fun with a game I've creating about being a bartender in hell. Using a lot of javascript/jquery. twitter.com/TimeHeroCliche
Actually if the intended audience is junior devs, it's a good way to teach them the "why", as well as the how. 
Even though the statement begins with a "why" it's really a statement and not a question.
/u/grinde I thought I'd ping you on this convo over here. I'll take your non-cache suggestion as well. Thank you both for the reply! I didn't think I'd get meaningful responses. So in my original code up there, \`texture.frame\` is being referenced, not created, with each \`texture.frame = rect\`. . . is that what you're telling me here? I had thought that the coords were different on each \`fulldeck\` array item, but it's not, they're all the exact same. Is that why? Further, I found that apparently I was loading the texture wrong as well. I Posted entire solution in the OP. &amp;#x200B;
Ofg ♥ :o 
Pluralsight has a course on Technical Documentation, not checked it out though. Markdown is the best for all documentation!
&gt; My brother consults for big companies and his advice to strategic changes like this is to fire all the devs who've been working with jQuery and hire a new team for Vue. Christ, at least give them the chance to work with Vue before giving them the boot. We're techies, we're able to adapt and learn new tech and perhaps even look forward to it.
Thanks, man :)
Hi /u/GokuJP, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
We have totally shoehorned html2canvas in our project, this might work out suuuupper slick instead. Thanks!
Just a tip, your examples should be the simplest possible code example. There's so much going on in your examples I honestly can't tell where your library's code is
Thanks for the tip! i will include a simple example on top before that then :)
https://developer.mozilla.org/en-US/docs/Web/API/Location/reload
Good point, I'll update the removal text for these situations then. We've been removing "beginner" content for quite awhile and referring them to /r/LearnJavascript.
Thanks found that interesting and hope it will be useful. Do you think there's anyway to simplify this a little to work somewhat similarly to the once function in Lodash?
This content is clearly relevant outside of a beginner context; it touches on a deep subject (async modeling) and does it in a questionable way, which could have been discussed if the article wasn't removed.
Yep, Markdown for actually writing. Then there are all sorts of ways to PRESENT the documentation later. Just note that defining “vanilla Markdown” can be difficult, but a quick glance makes it seem like CommonMark is finally becoming the de facto standard.
Very good post! I find it cool that you mentioned a pattern as a "Pseudoclassical instantiation". I feel that JS is used right as a "pseudoclassical" language with the \`class\` keyword and such, although it's nature has more to do with prototypes (it's closer to Self than to Java). The idea of instantiation comes from the classical mindset, where you have a blueprint for the objects to be created from. In the prototypical world (although JS doesn't work that way) the idea is to clone a "prototypical object" in order to have an object of certain kind (you would clone the prototypical dog to have a new dog) and define in the cloned object the differences that it has with its prototype ("this new dog is like the prototypical dog, but it has curly hair"). In that aspect I think JS has some mixed traits of prototypical and classical languages as that isn't the prefered way to create new objects. Very cool post! 
You get too much animosity on teams if some get to work on the new shiny and some don’t. I’ve seen this kind of change result in a mass exodus more often than not which is why I think it’s a big strategic move for a company. 
[removed]
Yes, last updated 13 years ago, spawning dozens of variants that have tried to fill in the gaps since then. Perhaps I should have said “the common, modern Markdown standard.”
Hey Everyone! I've been working away at [makerspartlist.com](https://makerspartlist.com) Its a site that allows makers to find parts they need for projects. I'm trying to tighten up the design and loose ends this weekend.
Dude, some of these are great even if you ignore the fact that they're &lt; 13 kB!
On line 26, when `card.used` is true, you call `drawcard` again to draw a different card, but: 1. You call `drawcard();`. i.e. you forgot to pass `fulldeck` as in `drawcard(fulldeck);`. 2. You don't return anything in that case. So, line 26: drawcard(); // bad return drawcard(fulldeck); // good Of course, there may be other problems with the rest of the code not shown. /r/LearnJavascript
yes that code I linked was very rough I was just working through the details trying to understand it I made a lot of significant changes, let me know if you can follow this better: https://hastebin.com/tinurupiva.cs 
While I don't have any use for this, here's a small suggestion: Eliminate those IDs. Remove the `taskMeta` Map. Eliminate completely the need for IDs in client code. Make `insist` return an object with methods `cancel` and `replace` and have it hold internally any needed metadata. Making client code manage and keep track of some form of IDs forces ugly practices on that code. (Also, making `taskMeta` a full-on `Map` instead of a `WeakMap` raises some concerns about memory management.)
You can, but that won't be pure any more. A pure function has two important properties: 1) Should produce same output for same input(s) 2) Shouldn't produce side-effects &amp;#x200B; Any function using async await returns a promise. Also, if you tried out the code below, the outputs won't be equal, hence the argument remains. &amp;#x200B; `const test = (x) =&gt; new Promise(( resolve )=&gt; { resolve(x) })` `let a = test(1), b= test(1);` `a===b // false`
 `(x, y) =&gt; Promise.resolve(x + y)` Is referentially transparent and has no observable\* side effects, so yes, I think so. &amp;#x200B; \* depends on context, though. What is an isn't "observable" is a judgement call.
CommonMark is the actual modern spec: [https://commonmark.org/](https://commonmark.org/)
That test fails because they are referencing different objects. This is not a valid argument against it being a pure function. 
the site charges some dollars to get answers to any of those 26 questions...
I'd recommend handling cards differently. The `used` flag is inadvisable. Also, just use a 1-D array. [`lodash`](https://lodash.com/docs/4.17.10) would be really useful, too. Consider this code: const _ = require('lodash') const SUITS = { 0: 'hearts', 1: 'spades', 2: 'diamonds', 3: 'clubs', } const RANKS = { 0: 'Ace', 1: 'Two', 2: 'Three', 3: 'Four', 4: 'Five', 5: 'Six', 6: 'Seven', 7: 'Eight', 8: 'Nine', 9: 'Ten', 10: 'Jack', 11: 'Queen', 12: 'King' } const orderedDeck = _.range(0, 52) const deck = _.shuffle(orderedDeck) function drawCard(deck) { return deck.pop() } function getSuit(card) { return SUITS[Math.floor(card/13)] } function getRank(card) { return RANKS[card % 13] }
p.s. I did some modify, now you have a better and more cross-browser script, it create also a demo png image and add it to the page, so you can right-click on it and save ;)
Here's another update to my App class and a few more questions if you know the answers: https://hastebin.com/ehafaroxoz.cs If I set a property in my constructor with "this.prop = prop", and I'm altering that property or checking for it in a different function within the same class, do I write "this.prop = newvalue" or do I just write "prop = newvalue"? And if I'm checking for it, do I write "this.prop &gt; x" or "prop &gt; x"? In the description for handleRequest (https://imgur.com/X6XNAvU), when it says I have to turn handleRequest (description for handleRequest: https://imgur.com/I1TPhuu) into a function that takes one argument instead of two, what does it mean by that? How could you have that happen unless you're overriding a function which I don't think I'm doing here? In the processRoutes description (https://imgur.com/9k1DAeQ), where it says "if the path and method combination doesn't exist in this.routes, then send back a 404 and a plain text response saying Page not found.", am I just printing a string or something? And finally, is my listen function right? It says it's supposed to bind the server to the given port and host. I made an adjustment but I'm not sure if I accomplished what I needed to do
&gt; As a general rule Nonsense! You asked a question, you got a specifc example. **Of course** you can construct an infinity of non-pure functions! What does that have to do with "synchronous vs. asynchronous" and your question? Your answers in this thread are all kind of ridiculous.
Please, consider reading what I wrote above. No, I won't be answering _all those questions_. No, _this isn't the place to ask them_. You **need** more general basic knowledge before trying to focus on those details separately. Please, do search the web for a complete book or tutorial that goes through all this at a slower, more careful pace.
Those two concepts seem orthogonal to me. One is about side effects and the other describes control flow.
Your not comparing the right things. First, promises are just syntactic sugar for callbacks. So, your function is really returning another function. That _function_ will always be the same. But, the input to that function can change based on the state of your program. Basically, you're pointing out that the return value of a function can be different if the input to that function is different. That's a perfectly reasonable result and should not be considered an impure function.
Yeah, that's definitely not a requirement - you are correct. Two promises that both resolve to 5 should be considered the same output.
If people have any questions, about the content in the article, or the framework as a whole, I'd be eager to answer any of them here!
Yeah, I agree. A batch function would be more reusable
&gt;// ==UserScript== // @name Remove Promoted Reddit Posts // @namespace http://reddit.com/ // @version 2.0 // @description try to take over the world! // @author You // @match https://www.reddit.com/\* // @grant none // ==/UserScript== (function() { 'use strict'; const promotedPosts = document.getElementsByClassName('promotedlink'); let totalPosts = 0; const hidePromotedPosts = () =&gt; { if (promotedPosts.length === totalPosts) return; totalPosts = promotedPosts.length; Array.from(promotedPosts).forEach((post) =&gt; { post.style.display = 'none'; }); }; hidePromotedPosts(); document.body.addEventListener('DOMNodeInserted', hidePromotedPosts); })(); use dolphin browser and install tampermonkey and you will be able to add userscripts...
Why use something like a state management when the rule when using custom elements is “the dom is your api” ? I think it would be better if it had something to help managing the creation of custom events instead of a redux like state management
You should use camelCase: `drawCard()`, `fullDeck`. Not only is it the standard, it's much more readable/scannable.
I would love to get feedback on [ferp 1.0](https://github.com/mrozbarry/ferp), a functional javascript app library. Design goals included keeping it similar to Elm, keeping code highly reactive using update/reducers, composable effects, and just having fast apps. I've also intentionally left out any UI layer, and want to encourage people to build effects that handle UI renders. Thanks for having a look :)
I see, is a problem connected to the crossorigin protection, I think it can be bypassed but working on a webserver, maybe codepen don't admit cors, anyway, the canvas data are good to send via form to the webserver and in php save the image.
While node streams are push based, we do also have pull streams for lazy data: https://www.npmjs.com/package/pull-stream
Well done for answering the OPs question rather than making irrelavent remarks like the others.
Awesome 👍🏽
To a point, agreed. I mean nobody was being pushy, they're offering advice. It's hard to shit on it.
When you say "help managing the creation of custom events" what are you referring to? Just something simpler than redux? A lot of what inspired me to make Tram-One is actually the frustration of having to pull in all these libraries like redux and react-router and so on... So the intention was to have something from the get-go. 
ok
Actually, one of the nice things that Tram-One does is bind a `.events` to each DOM element that lists all the eventListeners on the element. Attaching them is pretty easy (and I recognize not really highlighted in the article). ```javascript const Tram = require('tram-one') const html = Tram.html() module.exports = (attrs) =&gt; { const clickEvent = (event) =&gt; { console.log('click event') } return html`&lt;div onclick=${clickEvent} /&gt;` } ``` Also, these events can be passed down as unique attrs. ```javascript const Tram = require('tram-one') const html = Tram.html() module.exports = (attrs) =&gt; { return html`&lt;div onclick=${attrs.eventHandler} /&gt;` } ``` If you're referencing pulling the store values from `window.engine`, that is actually a fairly new feature just to allow developers who want to pull actions or value really far down the DOM tree possible (however it's completely not required) 
To clarify, I'm not actually not a huge fan of pulling values from a "conntected" component, that pulls from a global store, as oppose to inheriting them down from parents. This was an ask, that was fairly easy to implement, with a small technical ask. 
I've built a reusable component that you often see on websites for things like search input. It's an input that expands when you press on a button. The beauty of this component is that there's a "core" component, which is style independent, and there are examples how you can use that core component to build an app specific component. Check it out: https://github.com/DmitryEfimenko/ng-expandable-input
Yes. See https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation
[Package Phobia](https://packagephobia.now.sh/result?p=color-stacktrace) shows that it "costs" 103kB to install this as a dependency, but it's only 49.2kB published. Because it's only a 594 byte single-file module with one dependency, that means the colors module is also about 50kB to install. Since you're only using a single color though it would be much cheaper to just use the color directly (along with "reset") as a constant in your script rather than adding unnecessary bloat by using an existing module. Of course, you could setup some custom color usage and etc, but even then I believe you could do it in far less than 50kB+. Also, why the requirement of the path module although it doesn't seem to be used internally? Finally, you could drastically decrease the publish and install sizes of the module by setting the [files entry in your package.json](https://docs.npmjs.com/files/package.json#files).
You want css blend modes: [https://css-tricks.com/basics-css-blend-modes/](https://css-tricks.com/basics-css-blend-modes/)
Does this carry through to canvas elements if sourced from tags?
path module is used.. to detect if line is referring to a file or not.
Ohh, duh. IDK How I overlooked that =)) I even read over it **multiple** times to try to make sure I wasn't missing where it was used, LoL. Sorry.
I already have tried eliminating the IDs extending promise was pain in the ass with typescript \^\^ there is some sort of bug somewhere, i'll give it another go, and actually extend the lib more to more than just insist, a general extenton, thanks!
lol i take coding is your day time job. that happened to me when i was working. at one point i lost ability to read text completely. like it'd not click in my mind. i knew im looking at a sentence but could register a word.
I already have included Jest in hope to add tests, however i found that it is hard to test with it as the conditionals are pretty random and things can be more complex, i can still find some tests to throw in there i guess \^\^, will do for the examples, rewriting some parts atm, thanks!
this is going to sound petty, so please don't take this as a huge criticism, because admittedly it is petty, small gripe. I think the ideas you're going for are fantastic, the syntax is certainly clear and concise. But the name, maybe you should think about a better name, Tram-One is just an odd name to be honest, and doesn't convey anything about what this is. I'm all for more competition in the react/vue/angular landscape, so good luck with this, i'll certainly keep an eye on it going forward.
I wish it was; I'm just a hobby programmer &amp; overall nerd though. Yeah, lol; those are fun times. Also enjoy remembering one word from a train of thought that's been going for 5+ minutes and trying to trace back to it from only that word after a massive brain fart destroys everything. Lol.
Firefox's dev tools already lets you see all listeners bound to an element. It's the only really reason I use FF during development...heh
True, a not so useful package, given \`chunk\`. Published it, because I kept copying this particular function from one project to another. Thought I'd be better off with this as an npm package.
I think the real question is: "Is there a demand for your software?"
For front or backend? 
Backend, trying to make a node application that fetches some data from the internet and saves it to a text file.
How can Node every be frontend?
I just `npm init`, `tsc --init`, install `request` and some type declarations, and then tab completion makes writing the code go pretty quickly.
Front-end / middle-end can use Node and some isomorphic solutions can include lots of grey area usage. It’s not served down but my question was more about your application not location of execution. Express is the go to backend framework for building REST APIs. Would make your project a breeze to get started. 
Microsofts node typescript starter was an inspiration for me.
After reading through the repo landing page *(aka README.md)*, I understood that it provides some caching-related enhancements to the data layer and appears to be quite configurable. I think the "Efficient data fetching" tagline might be a bit ambiguous/vague. I could tell it's a javascript module by the yellow language bar github puts and as soon as npm is mentioned of course, but I don't recall reading the word "javascript" once in the text (not sure if it matters, but might help at least with searchability?) I think it would be helpful to be more explicit with the "Loads of features ..." bullet-point, since the bracketed items are each some of what make this a bad ass add-on (It's also listed under the "It features:" heading ... so like "It features: Loads of features" ;P) To be honest, I only realised how key those bracketed features are after reading through the more detailed docs on the wiki page. The examples were clear enough that I felt like I could plug it into an app pretty easily. The options look well documented (I appreciate how the defaults are clearly listed), although a first question I have: what is the expected return value of the \`resolver\` function? My first guess would be a promise that resolves the data? Maybe the example could include a facetious \`getItems\` implementation? Also any other \`function\` options don't appear to have return values documented or hints for parameter types/valid values/ranges. The "Zeta Distributions" link peaked my curiosity, so I clicked it to discover the more detailed docs! I think it would be worthwhile to explicitly mark the link as "Learn more" or something like that (probably placed at the bottom of the "How it works" section). It might still make sense for "Zeta Distributions" to link to a particular part of the wiki though since it is a bit of an esoteric term. &amp;#x200B; I noticed the word Parallel is spelled wrong in the images, but no other major spelling errors jumped out at me. (Oh, just noticed the nit-picky "It's goals are to" should be "Its goals ..." - no apostrophe in possessive "its", I think there might be one or two other spots as well) If you want to be sure about the spelling and grammar, maybe copy and paste the texts into an editor with spell check? &amp;#x200B; I didn't dig into the code, but overall it looks like an interesting project with some cool optimization features for data requests.
I'm currently writing 4chan clone in typescript/react/node.js/mongodb stack. Image posting is not working at the moment. Would love to get some feedback.[https://github.com/OlegStotsky/321-ch](https://github.com/OlegStotsky/321-ch) 
Very cool project, but [this page](https://github.com/picovoice/porcupine) is more likely to be of interest to a JS subreddit. They're also missing a trick here - if they exposed a wrapper API that was compatible with the Web Speech API (SpeechRecogniser, etc) this would then be a drop-in replacement for browsers that don't support that API naively, making it orders of magnitude more useful.
A promise is not a side-effect. 
A promise is not a side-effect. A function that returns a promise may have side-effects just like `add(1, 2) // 3` might have side-effects.
have a look at this maybe.. https://github.com/gwuah/blaze
What exactly do you need a boilerplate for? Node 8.9+ supports all of ES6 and even async/await. You won't need Babel or anything.
I was using bobril 1.5 year and It can really scale well and compilation with new bb core by Boris Letocha is so fast.. Rebuild really huge project &lt; 4s :o? Yeah! Just give it the try and u gonna love it..
Good news, it did work as expected. You can check the updated behavior on github.io [https://aditya-r-m.github.io/twisty-polyhedra/](https://aditya-r-m.github.io/twisty-polyhedra/)
Starting today, Monaco is the editor of WarriorJS!
While that's (arguably) true, any async function that does anything useful (like API call or I/O operation) will be inherently non-pure (because such operations can always fail, if only due to a possible hardware/network problem). &amp;#x200B; That being said, it's exactly the same as in case of regular functions - the moment you do anything else than crunching bytes, you automatically lose purity. You can use various tricks to control and abstract away those inpurities to maximize benefits of purity, but you can never truly avoid inpurities. &amp;#x200B; It just so happens that primary use of async functions are API calls and I/O operations.
I would say this is caused by a faulty minification pipeline. They fixed it a day later, but I encountered a similar game breaking bug the day after, so I gave up. 
They solved different problems. Vue developer here, but on projects where jQuery would have been a good fit, I'd rather juste use ES6 and native DOM now. Vue is when I need to build something more app-like.
&gt; much more sophisticated work with Angular now than I ever attempted with React or even jQuery. YMMV obviously, and I'm not trying to say that Angular is the best, or that you should be using Angular, or anything like that, but basically I think it comes down to practice, pract People are just wrong we the only advice is "switch to react/vue/angular". They are for a different use case. I'm a Vue dev, but sometimes there's no need for it if the only need to to toggle a couple of classes, managing attributes and the likes. For this very case, jQuery could do or just plain ES6 with the native DOM. My problem with jQuery is that you're importing a whole lib for just a couple of functions. I'd use it more if I could import it with ES modules and just pick what I need.
I ran a few experiments with python and javascript libraries recently. Had a few working demo's up and running from scratch quickly. Silly me didn't blog or reddit at the time. This looks more mature. Definitely interesting times as these browser based deployments makes fast rollout potentially easy.
Did you even read the comment above /u/TheGreatBugFucker? It states that I **AGREE** with your answer except some sack of bullshit you threw in between. Happy fucking with the bugs!
I’m going to have to play with this. Thanks for mentioning that. I was reading it and thought, well, it’s not working on my phone...so, why?🤦‍♂️
Bit late to the party but I would like to show off my D3 3D chart library d3-x3d: https://github.com/jamesleesaunders/d3-x3d https://www.npmjs.com/package/d3-x3d Combining the power of the D3.js data-driven documents visualisation library, and the X3DOM declarative 3D DOM framework, d3-x3d makes it easy to quickly produce beautiful 3D data visualisations with minimal code. Inspired by Mike Bostock's reusable charts, d3-x3d is built on a foundation of building blocks, called components, which can be combined to create a variety of different data visualisations. I would welcome anyone who is interested in contributing 😀
Love the documentation, and the library itself looks very neat. Nice job.
Yeah, that's all true, but I think that is why OP asked. Async functions are pretty much always impure, but they *can* be pure.
They can be pure only in an extremely contrieved example, and only if we agree to ignore certain classes of very real side effects. I really think that answering this question with a simple yes is misleading to someone who might read this later.
What is the most important class of side effect we are ignoring here?
That's not how this works. I can't prove there is absolutely no way to use this, but you have the power to try and find ONE way where this is useful.
I'm a bit tired of reinventing and bringing my own helpers everywhere, that's why I'm asking. Isn't that what programmers do, use libraries for common things instead of wheel reinvention? It is specifically Object.entries...reduce *relative* sluggishness I'm aware of. Could be several times faster when done right. While Lodash performance is great, it's the footprint that makes me look for alternatives.
Hi /u/Own_Classroom, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/csulit, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
lodash / underscore, you can import specific methods if you don't want the whole library.