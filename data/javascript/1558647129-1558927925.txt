The callback's arguments are same as `map()` callback's.
[https://medium.com/material-ui/material-ui-v4-is-out-4b7587d1e701](https://medium.com/material-ui/material-ui-v4-is-out-4b7587d1e701) &amp;#x200B; Maybe this is the new one.
&gt;I'm not telling you that you're wrong or need to change your mind. This line makes me wonder whether you responded to the wrong comment. Because we are in completely in agreement all the points you made.
Wish we had something like the null coalesce operator in Javascript. Something like &gt;let postId = user??post??id : ''; Which will basically set postId to an empty string if any of the levels fail.
lmao I did respond to the wrong comment 😆
Ah, yes, I see what you’re saying. Yeah, there’s not a lot you can do to protect a third party from shooting themselves in the foot. But the best way I’ve seen of handling that is to use some kind of API wrapper that gets exposed as the official public API. Then for each of those API methods/functions, you would declare their parameters as `any`, and legitimately handle each possible case (or throw a `TypeError` for unexpected cases, with helpful messages). You could even abstract that ‘wrapping’ logic into its own function, which takes the real API function as one parameter, along with an object that maps error handling functions to possible data types (the types could be expressed as the object keys). Internally the wrapper function would handle all unspecified types as TypeErrors). That *should* confine all of the potential type-danger to the outermost edges of your library code. That’s convenient for both you, the author, and for the consumer, who can trace the error directly to the API call, rather than digging through your code to determine the root cause.
You're confusing the null condtional operator with the null coalescing operator.
What ever the thing is that makes it do be like that that, I want it.
Hmm, that’s basically what the `Either` (a.k.a. `Option`/`Maybe`) monad does in a functional language.
Whoops, will do
Hahaha, it happens to the worst of us ;)
What makes this better than Hugo?
userId is better than userID anyway in my opninion. First one actually is camelcase. HtmlParser also reads better tham HTMLParser
Normally I'd probably inline `doSth` so readability would be more closely matched I think. But generally I use for loops for imperative/side-effect stuff, so I kind of like that indication. Plus it's more likely that you'll want to `continue` or `break` in imperative loops.
Okay but why are they passed in at all? They don't show up in the function...
Lol. C# (and probably other languages) syntax would be `var breedName = cat?.breed?.name` where if cat or breed don't exist, `breedName` is `null`.
It's good, but would like to set the returned result. I guess if there's no : then set it to null by default.
C#: var breedName = cat?.breed?.name ?? "Text"; If cat or breed or name is null, "Text" will be put into breed name.
Sure! That works!
Not native JS, but would lodash's _.get() function help you with this?
Personally and amongst my team we even prefer that back end properties stay in snake case. It helps us more easily recognize what is a view variable and what is a resource property. I’d be pissed if someone shoehorned in some middleware for no reason other than pleasing a linter. We’ve never once had an issue come up where snake case was used inappropriately, maybe partially thanks to typescript interface defined objects being the only time we ever touch snake case on the front end.
If you use es6 and Babel there’s a plug-in for the proposed conditional operator
 &gt;Really, I'm not sure what it is about both the JavaScript and Python communities that makes them so... rigid about Oh I highly doubt that it's just those communities. That's just tribalism rearing it's ugly head again. If the culture of that company isn't geared towards resolving stupid things like that, I'm not optimistic about their ability to solve larger conflicts. My favored solution to disagreements between two entrenched parties is the scorched earth approach. Someone with authority over both teams tells them to pick one or the other as the standard, or the authority figure will pick a third option that is deliberately horrible.
Will people stop using ES + Version? It was ok for ES6 because Eich &amp; co. stupidly decided to change the name at the last minute, but since then the official ES + year convention is the one to follow
It's not a "bad habit". We need a name for everything post ES5 (not "post babel", what does it even mean), ES6 is the best we can do,
Downside is that you kinda lose typing, if you are working in TS
What have semicolons got to do with ES5 / ES6+ ??? And "higher-order functions vs. for-loops" - what?
That code got mangled - I just wanted to hide the URL. Assume that it looks like an actual URL. &amp;#x200B; Something like "https://google.com/loginsso.aspx?gettoken="
Oh come on, they also need to make a living. Or do you think those servers, dev ops, devs and all the rest of it are free?
Yup the above link works... lots of good news/stuff in v4
ES7 ES8 It's a _standard_ and every feature belongs to a version. You wouldn't call your PS4 a PS2, you'd use its brand name to be lazy. It's a very bad habit to talk about everything as part of a frankly quite old version of a standard. That's just confusing for everyone trying to pick up the ecosystem.
There is no ES7 and ES8 /facepalm I repeat, we obviously need a collective name for any version &gt; ES5. If you have a better suggestion than ES6, let's hear it.
I’m not qualified to answer that question.
&gt;var breedName = cat?.breed?.name that syntax was/is proposed for JS btw
&gt; There is no ES7 and ES8 What? Yeah okay semantics: they would rather we use the year because it's less confusing. But we have finalised versions all the way up to ES9/ES2018 https://en.wikipedia.org/wiki/ECMAScript#7th_Edition_-_ECMAScript_2016 &gt; we obviously need a collective name for any version &gt; ES5 "JS" is perfectly fine when you're using babel to add whatever features you like, as most teams are. JS is not like (for instance) .NET where you know which C# and .NET versions you're deploying to and we need to care about the version, the web is a mixed bag of implementations and everyone uses babel to manage that on our behalf, so adds piecemeal whatever language features they like. It's just "JS".
Have you tried `window.location.href`?
I remember reading about that and thinking the character that used was really dumb
&gt; Okay but why are they passed in at all? It is so that a function can accept variable number of arguments. &gt; They don't show up in the function... What do you mean? What don't show up in where?
 [https://github.com/tc39/proposal-optional-chaining](https://github.com/tc39/proposal-optional-chaining) &amp;#x200B; apparently still stage 1 :/
jfc just use something composable like styled-components already.
decode/encode.
JSON APIs mostly uses the naming of JavaScript. So in my opinion is quite clear that your Python backend should produce this style of names. It can use whatever it wants internally for the source code. But it should produce properly formatted output for its APIs.
I know what the functions do.... did you read the post?? &amp;#x200B; After for research the "a" and "b" stand for a(scii) b(binary) &amp;#x200B; src: [https://twitter.com/BrendanEich/status/998618208725684224](https://twitter.com/BrendanEich/status/998618208725684224) &amp;#x200B; but it doesn't really make sense since the "b" is not binary and "a" is not ascii. &amp;#x200B; The "binary data" is binary data parsed as ascii The "ascii data" is base64 and not a ascii text string. &amp;#x200B; //shrugs
Your `await` is in the wrong place: async function functionName () { for (const asyncOp of obj) { const something = await asyncOp() } }
It's in the right place. [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of)
`for await..of` requires an async iterator (is `obj` one?). It's also newer and looks like might not be supported in your environment. But you should be fine with a normal for loop and `await`-ing each promise in the loop body. for (let i of arr) { await fetch(i) // or whatever gets you your promise }
maybe its just 'A to B' and 'B to A', i chuckled when i first saw them years ago and thought i was just lazy naming.
 The b stands for bytes, not base64. Base64 is an ASCII string.
Where's the snake?
The answer is probably "because javascript".
hey is this available in some library? i will soon need to start porting a mui web to native,
My bad! I've just found your problem though: "functionName()" should be: function Name() E.G. async function Name(asyncIterable) { for await (let num of asyncIterable) { console.log(num); } } var asyncIterable = { [Symbol.asyncIterator]() { return { i: 0, next() { if (this.i &lt; 3) { return Promise.resolve({ value: this.i++, done: false }); } return Promise.resolve({ done: true }); } }; } }; Name(asyncIterable)
Try "href".
Welp, I'm an idiot. The phone automatically adds "https" but the desktop does not. It works perfectly well if I specify "https". I will fix http-to-https redirection tomorrow. Thanks everyone!
It's in a class, so it's the correct syntax, but I appreciate the help.
Poor wording on my part. Obj is an array of objects. So it would go something like: \`\`\` let arr = \[{id:1}, {id:2}\]; for await (let i of arr) { await db.fetch(i.id); } \`\`\` &amp;#x200B; Strangely enough, this code does work on all of my other instances, except the one that's having issues. It's the save version of node. The only difference is I've updated Linux. So maybe that's it, but that would be odd.
This line needs a space added to make it correct (between `function` and `Name`): `async functionName() {` If you run my code from the previous comment in the console you will see it works: https://imgur.com/JeM8mGl
Well it's not a port of mui to native, as much as I would have liked that I found that to be difficult due to limitations in React Native, but it does have almost all the components in the material docs. The ones I'm missing from Material UI are Layout Components, AutoComplete, Pickers, Breadcrumbs, and Steppers. But I do have some extra ones likes Backdrop, Fab Speedial, and Ranged Slider. [https://github.com/codypearce/material-bread](https://github.com/codypearce/material-bread)
You still want a regular `for`, not `for await`. I mean, it should still work, but `for await` is extra overhead and if its causing the problem, getting rid of it could fix things for you.
I think I see what you mean? My last attempt: class Test { async Name(obj) { for await (let i of obj) { console.log(i); } } } const test2 = new Test() var asyncIterable = { [Symbol.asyncIterator]() { return { i: 0, next() { if (this.i &lt; 3) { return Promise.resolve({ value: this.i++, done: false }); } return Promise.resolve({ done: true }); } }; } }; test2.Name(asyncIterable)
Only you're not dealing with an async iterable
The problem is, that just using `for` without `await` doesn't have the synchronous property that I'm looking for. I could wrap it in a `Promise.all()` I suppose.
Read more about the terms you're using: it's not named in reverse, it's an old naming convention for ascii_to_binary and binary_to_ascii. [Base64](https://en.wikipedia.org/wiki/Base64) is used to represent arbitrary binary values in an [ASCII](https://en.wikipedia.org/wiki/ASCII) string of "safe" characters. The fact that you'll (basically) always be working with strings is a JS legacy quirk, if you read about the functions they'll link to [this binary strings](https://developer.mozilla.org/en-US/docs/Web/API/DOMString/Binary) page that explains how the JS string is interpreted by the btoa function and how cumbersome it actually is to work with binary data that way. Modern JS includes native image functions, typed arrays, and the like that largely replace any of the string munging that you would have had to do previously, not that JS would have been a first choice for anyone working with binary stuff back then anyway. Probably it was included to deal with transferring the low-number ASCII range that could get lost or mangled in transfer formats and he used the conventional name (as seen by Eich linking to a man page) for them since that's what programmers would have been familiar with.
How is this being funded? Seems a little fishy, wouldn't support anything to do with liberals....
`await` is asynchronous. Always. It lets you write synchronous _looking_ code, but its not synchronous. `for await` is special in that iterates through async iterables which are iterables that are a collection of promises. These promises are automatically `await`-ed as part of the iteration. You are not looping through an async iterable, rather just a regular array of objects. So you don't need `for await`. All you need is a regular `for`. `Promise.all()` doesn't help unless you want them to all run concurrently.
I haven't done the Mac to Windows transition (always used Windows) but I've got a Dell XPS 15 as well and I like it, but I've got my eye on the Surface. WSL is great and improving. My only real complaint about Windows development is if you do any iOS app development, MacOS is required for publishing and running MacOS in a virtual machine isn't a great experience.
I went from a MacBook Pro 15 to a dell notebook, a latitude 3340 that dell gave me to work, it’s doing just fine running a windows vm ( company only allows us to work inside vm). I’m using windows 10, never used that much Linux to know about.
But if I run the code: let arr = [{id:1},{id:2}]; for (let i of arr) { let c = await db.fetch(i.id); console.log(c) } console.log('hello'); // output: hello 1 2 I want the output to be: 1 2 hello
That's how slack has become a resource hog and a laptop battery eater while being a dumb chat client.
 of([{id:1}, {id:2}]) .pipe( map(i=&gt;i.id), flatMap(id=&gt;from(db.fetch(id))) ) .subscribe(record=&gt;console.log(record)); RxJS to the rescue!
&gt;RxJS Trying to learn vanilla, but this looks pretty sweet. Thanks for the intro.
I haven't had a chance to use it :-( were just now starting to get nice weather so I'm hoping in a few weeks to be able to work with it.
Even after re-reading the MDN doc, `for await` should still work, but `for` alone actually works-works... so... thanks again.
The fuck are you going on about?
Several Liberal acts in Liberia, Sibera, several places of Russia Github is allegedly funded by these organizations, I would Be Weary of any Money Scams... Javascript is Popular Language, &amp;#x200B; Be Weary![https://en.wikipedia.org/wiki/Liberalism\_in\_Russia#Union\_of\_October\_17](https://en.wikipedia.org/wiki/Liberalism_in_Russia#Union_of_October_17)
What does any of this have to do with this dude’s repo? Are you even a developer? Just trolling, or are you really this dumb?
yeah `for await` should work on your stuff too (falling back to sync iteration), but since you were getting an error that looked like your linux instance was choking on that syntax, getting rid of it looked like the fix.
valiant effort!
We use camel front/snake back. To simplify the process we use Axios as our http client on the front, and use an interceptor to handle converting snake to camel case for us.
Hi :)! There is Several Evidence That Github is funded by Liberals As you Can see in this [Image](https://i.imgur.com/gF9NyTo.png) Confirms Some things (((DO BE WEARY!! :)) BUT it doesn't Warrant any Discliplinary Action ;)
Only on Reddit!
So, your evidence of this conspiracy you've got is that Github raised money? Seriously?
i assume we're talking about JSON though, where it's ok. plus it's more fair if nobody gets what they want.
Ghetto version: const breedName = cat?.breed?.name || ''
Game Over in 1 second .. takes me back to the original game. Cool project, thanks for sharing!
Github is owned by Microsoft
This is dangerous and does the wrong thing with potentially-falsey, nullable values. ?? Only falls back on null/undefined and not falsey.
holy shit this looks amazing. that documentation is top notch too, so many examples. so is my understanding correct - i can just use this to build the native app, but in theory i could also port my current web solution from material-ui to material-bread and just have a single codebase for both? it looks so good and extensive - are u running this in production anywhere?
Ignore this person. They’re trying to sow discord.
Yeah. What does ‘per server’ even mean if I serve my site from S3 or Netflify or other static site host.
Are you using a ForEach to create them dynamically or does your HTML already have the DOM elements hardcoded to be filled in?
I have the same situation except for the fact that nobody in our team cares so much about what is a stylistic choice. Your interpreters don’t care - even if you name your variables or props as - SoMeCoOlProp: “val1”. The very sane compromise is that whatever comes from the backend and is too big to sanely cast to camel case manually in react will remain snake case in the components that deal with this data. And surprise - nobody has stroked out yet. My best advice would be - if you’re stuck having to absolutely comply with both sides categorically having to have this format - write a helper to camelcase incoming stuff prior to destructuring.
I hard-coded all the elements into the HTML, but now I'm wondering if it would be any better to use createElement or something to create them as I go instead. The big block of variables just looks stupid to me, so it feels like there's a better way to do it. And yeah, beginner here too! I'm doing my best to not copy-paste everything but it's proving to be easier said than done.
Thanks! I tried to add a ton of demos and I have plans for more. &gt;so is my understanding correct - i can just use this to build the native app, but in theory i could also port my current web solution from material-ui to material-bread and just have a single codebase for both? Exactly, you build all the components in a single code base and then set up the proper configuration (like I have in the example repos) to render them on each platform. &gt;it looks so good and extensive - are u running this in production anywhere? Besides the documentation, the company I work for is starting development on a cross-platform app using this library and there's another project in the works. Personally I'm working on a tutorial project with it as well as porting a previous web app of mine to it so I can release it on native. Essentially for these projects I'm attempting a mono repo where `src` contains all the components, screens, redux, navigation, etc, and then `android`, `is` , and , `web` folders only contain configuration to compile and render all that code on their respective platform. &gt;Can you clarify - what does that mean? What would be a port of mui to native as opposed to what you are doing? Yeah it's somewhat confusing the way I worded it, I meant that I didn't take mui components with their styles and methods and just rewrite them in react native nor did I build any transpiling tool to literally port mui components to work on react native. I built each component from scratch in react native, but they are heavily inspired by mui components. Yeah all the components are built using react-native components which means you have to use react-native-web or another project to render them on the web.
Hi /u/Bj2110, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/frickinbradd, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ShockinglyShy, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/throwbirds, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
The element that would contain all the other elements you want filled in can be hard-coded, then the sub-elements for the specific datas, if all are a repeated nesting of elements like &lt;div&gt;&lt;etc&gt;&lt;/etc&gt;&lt;/div&gt; can be created as the data is being retrieved. createElement, with ID, class etc, depending on your naming convention of the IDs, uniquely from the variable data or incrementally i++. One function to retrieve the variable blob and then a "ForEach" or "while" to insert the data into the elements as its created. Seems to work in theory. Not sure how else.
Hi /u/Whiskeysip69, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Excellent, thanks so much for your work, its gonna save me so much time, cant believe I just accidently stumbled on it.
&gt;thanks so much for your work, , its gonna save me so much time, Thanks that means a lot, I've been working on this for many months so its great to hear that effort will be useful to others. &gt;cant believe I just accidently stumbled on it Yeah I just started sharing it yesterday, I need to start sharing it more places and maybe write some articles about it.
No actually I DM'd you asking what kind of proof you need. You're just justifying your actions. Well you are entitled to your opinion, just be aware this isn't going to go away, he's 11 and with skills like this we will be around longer than anyone else posting here. If you want to continue to embarrass yourself more go ahead, all your doing is bullying a child.
Yeah well the ghetto is a dangerous place.
.forEach(..) isn't the 'functional-style'. It "violates the functional programming principles that all the other sequence operators are based". Which you can read more about [here](https://blogs.msdn.microsoft.com/ericlippert/2009/05/18/foreach-vs-foreach/). &amp;#x200B; There is no need to use .forEach(...) anymore. The language provides superior iteration support with 'for-of' which supports break, continue as well as Symbol.iterator and Symbol.asyncIterator. This despite popular linters like [this](https://github.com/airbnb/javascript/issues/2019) that still needlessly mandate on the use of .forEach(..). I urge you to try and find the reasoning here.
Love these 100 lines. Great job OP!
In that case you would have to pay a per-site license, otherwise you'd have to pay for every instance of S3 your site is delivered from. Looking over it again some tiers are a _subscription_. Not only do you pay per server you pay a subscription per server...
Now, imagine getting your balls busted for this, and yet you're not allowed to refactor the file that loads the entire jQuery library just for a single method call. SMH
It doesn't needed at all.May be for purpose of clear code,telling you,the params are not needed.
Nice placeFood function, when I did it a few years ago took me a lot more code to make it so the food didn't spawn on the snake.
Please apply for membership to my club, to read the answer to that.
But I imagine JS would implement it as undefined instead of null? It would make more sense given how it works for everything else in the language. Not that much of JavaScript makes sense anyway.
Very cool stuff. I’m still looking through it but it looks solid.
I got over it when I started working in Node. Now I use jQuery only when it is available already, like with WP plugins. It makes life easier when I have it for front-end, but I am so comfortable with vanilla that I can do what I need to do without it.
Really cool work you did there! I'll be using this for my upcoming RN project, thanks a lot!
Maybe you are still leaving in the 00’s
If you want to learn how to program, one suggestion is to open your mind and try to learn some other language without framework (or library) like python for example. And then go back to learn vanilla JS. Other suggestion is to use TypeScript. It’s very good for beginners because of the IntelliSense that it serves.
The important question is to ask yourself for who you wanna learn vanilla/es6,etc. When your company widely uses jquery, you should at work not just silently switch to vanilla, because new tech should be decided by the team, everyone has to live with the tech. If you want to learn for your personal improvement, then the initial extra time to develop smth should not be your first indicator. When learning smth, the more time and repetition you invest, the better you get.
Hi /u/debugeverything, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Oh god - I hate JQuery.
I love jquery! It took me forever to understand both jquery and JavaScript but I first had to understand the fundamentals. Now I use jquery for Ajax only and I love es6 object oriented js now. But if you really want to get better at vanilla JavaScript, try htm5 canvas. So much fun doing all sorts of rendering, graphics, and game design that it forces you to learn and memorize concepts that it becomes second nature!
100% this. Our customer base is 20% IE11 because of old government IT solutions :|
Yes, I was. It's really easy to fix. You just need to become addicted to React. It will surely break the addiction to jquery!
So you are telling us that you are plugging in jQuery just to use ajax and nothing else? Wow :)
document.getElementById(“”); document.getElementByClassName(“”);
From what you wrote I assume you are not working with any frontend framework. AngularJs helped me a lot to “overcome” my dependence on jQuery back in those days. I think you should play around with some modern frameworks like Vue or Angular. As soon as you get the feel of how to manage your DOM differently (data binding, components etc.) I bet your jQuery addiction will be cured 😃
That's because the form is posted without js. Form submission is not protected by CORS, only AJAX calls are. Unfortunately, there is nothing you can do about it without having the right headers on a backend side.
jQuery has been around for 13+ years. I'd say a ton of people here got introduced to jQuery before fully learning vanilla JS. Most of us have just had to kick the habit at some time or another. It's easiest if you go cold turkey. I don't know your overall skill level or workflow, but I would ask yourself what features of jQuery syntax you like the most. See if you can replicate some of it in ES6 syntax. I think you'll quickly find that you're not leveraging a whole lot. I think you can probably pick up a lot of it on company time. Just stop using jQuery for the things you know how to do in vanilla JS. When you're about to lean on jQuery for something, just google how it looks in vanilla JS. So much of it is a handful of extra characters to save yourself a ton of overhead.
What version of node are you using?
This came at the right time. I just got rejected for something due to lack of understanding of DS. Thanks for sharing!
You should look at the fetch api, eventually to the library Wretch if you need some sugar...
Very helpful stuff.
Yessir!
I LOVE Syntactic sugar!! :D
Are you a time traveller?
Thanks for the replies Thinking about a surface book as the keyboard and trackpad seem great And don't really need a super powerful machine
A bit repetitive but still readable: user &amp;&amp; user.post &amp;&amp; user.post.id || ""
A bit repetitive but still readable: user &amp;&amp; user.post &amp;&amp; user.post.id || ""
Nice one! Extremely useful
It's being put forward for stage 2 at the next meeting
Just remember master Miyagi... Focus on the basic. We have too much people knowing to use a framework and not the language. It's not only a JS concern, it can happen in other languages. I'm used to prepare some friend before they start a bootcamp, usually i'm focusing on the vanilla basic, and they don't understand why we don't start by creating fancy things with framework. Till the moment they realize, either during the bootcamp by easing the learning of a framework, or either after at work when they that their salaries are better than the other people who just learned a framework. Popular framework change, vanilla still stand here. And it should not take more than a week for an experienced JS developer to learn a framework. jQuery used to ease development, making it faster... But the goal of jQuery was jut to normalize browser's JS API implementation in a dark age of the web. now every browser support querySelector or those kind of API, and if you still need to support ie6 for some obscure reason, you can use babel to keep your source clean and future proof. Actually there is more gain to use a modern framework (let's say react, view, even angular) to speed up development. ... Now wax on wax off my car !
Hi /u/_CocoZz_, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Learn JS in general. Then some additional tools that allows you to create data driven UI like React or Angular or Svelte. But you need to know JS. jQuery is ok but the more complex the app will be the harder it will get to do it in jQuery. jQuery was created so we could manipulate document easily and to cover browsers quirks. Since few things were implementing differently in each browser - jQuery was detecting what you are using and used right API to do it. For this company jQuery will be probably enough but doing more complex stuff will be tougher and tougher
Write your own version of jQuery. You’ll learn so much about Javascript by doing so and it’s actually surprisingly simple to do.
 document.querySelector() document.querySelectorAll()
[http://youmightnotneedjquery.com/](http://youmightnotneedjquery.com/) is a good site to quickly look up most used jquery function and their vanilla counter part
`for..of` is better in those cases where you want access to `continue` and `break`.
Learning how JS can manipulate DOM and CSS is what is much more intriguing than JQuery but yes the ease of JQuery is something beautiful after dabbling in JS, HTML, CSS.
It's not about not being able to read it, it's about it being another mutable variable to track which increases cognitive overhead. Take this example: for (let i = 0; i &lt; arr1.length; i++) { for (let j = 0; j &lt; arr2.length; j++) { doSth(arr1[i][j]); } } for (const item of arr1) { for (const index of arr2.keys()) { doSth(item[index]); } } Don't pretend like the first example is as easy to read as the second, even if both are technically "readable" to any competent programmer.
I always actively avoided/boycotted jquery and if some company used it I wouldn't work there.
Okay, so my remark was of course somewhat tongue in cheek. Both Jekyll and Hugo do a whole lot more, and are based on a different principle, the use of markdown being the only common trait with iru. All in all it looks like an interesting toy, that someone might find useful. Most features one would like to see are missing though, but I guess it's at an initial stage.
There are a thousand ways, one from the top of my head would be: `Array.from({length:5}).forEach(async function(d,i){` `this.then(function(){console.log(i);});` `},Promise.resolve());` That'll give you the functionality you want.
I'm not sure it was worth it though :) Thanks anyway!
&gt; Is person.setName('John', 'Paul') intuitive? No, it's not. Your point is... ?
You need to be careful with that though, it won't work on this: const user = { post: { id: 0 } }
If it can take any object it is **NOT** explicit. You may want to look up the word in a dictionary.
You should never use async await inside a loop. You can run all the requests in parallel if you use Promise.all().
Yes, it is.
&amp;#x200B; could you please correct me i tried the below code its still not printing in proper order urlsArr.forEach(async(e,i)=&gt;{ getJson(e).then((jsonData)=&gt; { console.log(i, jsonData.someField); }) }, Promise.resolve())
Excusing a bad code with another?
jQuery is great. But it's time to move to vanilla. I think most of us learned jQuery first because of its inviting syntax. &lt;3 And I think most of us left it because of the spaghetti it ended up leaving behind :D &amp;#x200B; Now it's time to get addicted to Vue or React or both ;D
I could read the answer alright
i just tried this its working responsePromise = urlsArr.map(e =&gt;{ return getJson(e); }) Promise.all(responsePromise).then((val)=&gt;{ val.forEach((e, i)=&gt;{ console.log(i, e.someField) }) }) thaankyou!!
Isn't that basically a calendar?
and id:"" where the default might be a string like "no".
API seems nice. Why isn't the library itself written in TS? There's lots of nesting going on, and the code needs to be better separated in multiple files with their own responsibilities. Having 500 lines in the same file is a bit too much. Good start though, keep the idea going.
The WHOLE DISCUSSION is about semantics of ESX / ESY, so you should get it right. You can't give shit to people for using the wrong term and then do the same thing yourself. JS is _not_ perfectly fine because it doesn't distinguish between ES5 and post ES5. Babel for example converts from "ES6" to ES5. JS covers both, so you need a term to distinguish between the two.
You did not pay attention to 'this'. You are passing Promise.resolve() however you are not using it.
Hello chaos! :) do you mean a build for macos? if yes.. I do not provide any binaries for macOS yet. I need some help with that because i do not own a mac :)
getElementsByClassName is plural "elements" because it returns an HTMLCollection rather than an Element
I didn't do this myself, but i think you have to use RxJS. Convert your promises to observables using 'of' operator then use 'concatAll' function to concat observables. However, please note that this library is a huge one. Only import the parts you need.
Listen to me - you're getting a lot of bad advice in this thread. The solution to your dependency on the jQuery library is not just to choose another library / framework. Becoming dependent on a lib is what got you in this mess in the first place. Learn how jQuery works internally - how it implements its convenience features. If you like you can dig into the source code, but it's a little meaty and convoluted, so instead just try to implement these things yourself in vanilla js. It'll pay dividends for you in the long term.
 urlsArr.forEach(async(e,i)=&gt;{ this.getJson(e).then((jsonData)=&gt; { console.log(i, jsonData.someField); }) }, Promise.resolve()) &amp;#x200B; i tried this, not working :( not sure where 'this' goes not comfortable using 'this' in javascript
thanks for suggestion i'll look into it
Test below: &lt;code&gt; urlsArr.forEach(async function(d,i)=&gt;{ this.value = this.value.then(function(){ return getJson(d); }).then(function(jsonData){ console.log(i, jsonData.someField); }); }, {value : Promise.resolve()}); &lt;/code&gt;
You're welcome. This requires less memory than 'Promise.all' if you're dealing with huge data response from your server.
yes i noticed that promise.all required a lot of memory
 urlsArr.reduce(async(a,e,i)=&gt;{ return a.then(async () =&gt; { return await this.getJson(e).then((jsonData)=&gt; { console.log(i, jsonData.someField); }) }); }, Promise.resolve()) if you want to loop sequentially (one after another), then you have to use reduce(), you create a big chain of promises, you can't do that with forEach(), firstly, because the initial value is ignored, secondly, you can't pass a value to the next sequence, but the whole point of reduce() is to pass the value across all iterations and get a result, in this case sequence of promises, if you want to await the whole loop, just add await before it, you can use then(), catch(), everything, it's like a big Promise also, you have to await the getJson function, because otherwise it doesn't await the Promise
I use Function.bind for this.
 urlsArr.forEach(async function(d,i){ this.value = this.value.then(function(){ return getJson(d); }).then(function(jsonData){ console.log(i, jsonData.someField); }); }, {value : Promise.resolve()} ); tried this its working thanks a lot !!!!
Good code. `for..of` is very useful with promises &amp; async/await too.
Okay, thanks for the pointer. Still it's pretty weird that this should be necessary. Do you see any serious shortcoming in my workaround?
!RemindMe
**Defaulted to one day.** I will be messaging you on [**2019-05-25 10:25:15 UTC**](http://www.wolframalpha.com/input/?i=2019-05-25 10:25:15 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/javascript/comments/bsf58f/i_need_help_with_draggable_image/eomotft/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/javascript/comments/bsf58f/i_need_help_with_draggable_image/eomotft/]%0A%0ARemindMe! ) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! eomovt6) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
jQuery has its place. It is obviated by virtual dom frameworks like React and Angular. If you're not using such a framework, then jQuery can help. As a professional in a corporate environment, you can't simply "use React". You don't need to feel guilty about using the tools available to you. I know jQuery is largely derided today - this is due to its ubiquity and the changing paradigms of web development. This doesn't mean you can't learn how to do without. And don't lie to yourself - you can afford 15 minutes to LEARN base javascript dom selection rather than using jQuery. It happens a couple of times, then you know it. It's probably not worth putting the time into, though. Legacy codebases typically are already using jQuery, and newer codebases won't need direct dom manipulation.
create an array with all the calls then forkJoin (rxjs)
Well, the downside with your solution is that it's non-standard and thus other developers would be very confused by it. The whole issue makes sense when you look at the way JavaScript is designed: methods are just functions collected in an object. `this` is a hidden parameter passed with a function call, not an inherent property of a function itself. This is why you don't have to declare what `this` is when defining a function, and it allows to reuse the same function for multiple objects (like in prototype inheritance), saving memory.
If you send me your code, i will look over it
It is simpler to have the array of slides and an array to select three of these slides, selecting the actual, the previous and the next (with circular array selection)...
You want people to try your application and you force them into having to register and provide not only an email but also a mobile number? Cool story.
Do you have a resource for replacing jQuery DOM traversal (methods like find() and closest())? They’re the only things I struggle with without jQuery.
I assume you don't do much CSS but the first thing for me is, why are you putting width and height dimensions on the body? The body never needs these properties and is really poor practice to do this. I wonder where you picked this up from! &amp;#x200B; Also like others have stated you are asking for a hell of a lot of information, is this really necessary?
Sent! Thanks beforehand!
I made your whole app crash trying to log in with false credentials. I'd love to have a look at your app for you but I'm not going to register with my email address and phone number..
Get good at writing CSS queries and using document.querySelectorAll, ideally your HTML is formatted well enough that you don’t need to use loose things like “find” / “closest” much.
It’s a fucking blog post. Medium puts more effort into wrecking their UX than they do actually serving up other people’s content.
I believe closest() exists with DOM but it’s not supported in IE
Just think of all the time you’re going to save by not creating intermediate array! Seconds. Precious seconds.
Maybe you can ask coworkers if they might be interested to extend their knowledge and together getting your boss convinced to give you some "meet up spare time" (like 30 min a week) to improve your knowledge as a group. You then might plan "Meetups" where some prepare some special topics that might be interesting for everyone in your team (10 min talk, 20 min discussion?). For example using zepto.js instead of jquery ... or just insights why using zepto might be better than using jquery. So mostly a "presentation" with a connected discussion. There are so many topics that can be introduced and will probably help everyone to get your job done quicker und better. Its not only about JS! For example, a quick intro to Chromes / Firefox Dev Tools would help everyone to get a deeper understanding of everything, like loading (Network) and parsing times or "Time Budget" in general or Debugging or or or ... so many topics. &amp;#x200B; I'm sure that NOT everyone will be enthusiastic about this (because some think they know it all, but are actually stuck 5 years behind), but as soon as the first talks are good enough to awake curiosity in some, curiosity will spread and most will rediscover the fun being a programmer.
This is totally going in my annual self-evaluation. Promotion, here I come!
A sample of the code would help those wanted to dig in and assist. Sending it to people over PM just slows everything down. Also just a heads up the automod might remove this due to breaking rules 2 &amp; 3.
Async/await? That would be the next step. JQuery isn’t really just syntactic sugar it’s a complete abstraction. Try async await. It’s super easy. But really understanding promises is really important I feel.
Yeah, I'm realizing that now. Sorry, new to posting on reddit, new to this forum and new to js. Thanks for the heads up though! Will keep it in mind for the future.
Not a problem was just pre-warning you. This question would be best suited for r/learnjavascript it is always worth reading a subs rules before posting to ensure you are following the ground rules set. Happy coding!
Please read around that line and the parent comment for context. Not interested in an internet handbag fight btw.
Oof
What NodeJS version? `for await` wasn't supported till v10
```javascript const pendingRequests = urls.map( url =&gt; fetch(url).then(res =&gt; res.json()) ); const responses = Promise.all(pendingRequests); responses.then(responses =&gt; responses.forEach( res =&gt; fs.writeFile(filename, res.body) ) ) ```
This slide is about SurrogatePair, RegExp unicode flag and Unicode properties. Talked in lightning talk.
cant even register because i dont know the format of the phone number i need to use
OK, I won't pretend. For me this the top example is easily more readable. The line doSth(arr[i][j]) in particular screams 2d array iteration. I know instantly what's going on there. I had consciously question if the second example did the same. Can we please dispel the notion that the new loop iterators are easier to read for everyone? It's simply not true.
could you correct me `urls.map` returns array of promises and `promise.all(pendingRequests)` returns array of resolved promises ( does it contain Json from the response ?? so `responses` contain array of json responses?) but i am not able to figure out `responses.then` is `responses` a promise??
thanks for the suggestion i'll checkout rxjs i am still new to JS could you recommend some resource to learn it
Promise.all returns a Promise that will resolve when all of the promises given as arguments have resolved.
And you are just proving my point, doing exactly what I said.
thankyou !! understood i was wrong i thought `promise.all` resolves all promises and returns array of resolved response
try this +447555666888
And I used the code from my previous canvas-animations-drawing jQuery plugin: [EscapistDeluxe](http://www.sabiland.com/escapist.html) Both are written as jQuery plugins on Canvas element, so you can easily take JS file and use it on your site.
If you want to sequentially do requests like your first code: ``` urlsArr.reduce((prev, url, i) =&gt; { return prev.then(() =&gt; getJson(url)).then(jsonData =&gt; { console.log(i, jsonData.someField) }) }, Promise.resolve()) ```
there you go [https://www.learnrxjs.io/operators/combination/forkjoin.html](https://www.learnrxjs.io/operators/combination/forkjoin.html)
/\* when all observables complete, provide the last emitted value from each as dictionary \*/ forkJoin( { google: ajax.getJSON('https://api.github.com/users/google'), microsoft: ajax.getJSON('[https://api.github.com/users/microsoft](https://api.github.com/users/microsoft)'), users: ajax.getJSON('https://api.github.com/users') } ) .subscribe(console.log); &amp;#x200B; The result is an array with the last value emitted by every single call;
&gt; ...instead of the one the method seems to be bound to? This might be your problem here. In JavaScript, methods _are not_ bound to their instances. Not inherently. This is what allows the delegation process in JavaScript's prototypal inheritance to share one method with many instances and have each method bound _at call time_ to the instance calling it. But for this to work, you need to call the method from the instance. // here, method is an inherited function instanceA.method() // this is instanceA instanceB.method() // this is instanceB detachedMethod = instanceC.method; detachedMethod(); // this is global (not called from an instance) JavaScript specifically looks to the object left of the dot before the function to know how to define `this` in the function call. You can explicitly bind to instances using the `bind()` method of functions. `bind()` creates a new function that will have baked in context (`this` value). boundMethod = instanceC.method.bind(instanceC); boundMethod() // this is instanceC This is used for callbacks because when you pass a function to a callback, it loses the object from which it would need to call it that would allow the context to be correctly set. Consider the implementation of `setTimeout` looking something like (pseudo): function setTimeout(callback, time) { sleep(time); callback(); } Invoking `callback` is done without an object reference so it will get bound, at call time, to the global object, even though you might have passed the function in as `setTimeout(instance.method, time)`. The `instance` part of that reference is lost as soon as its assigned to the `callback` parameter in the `setTimeout` implementation. Same applies to `addEventListener` (though it actually tries to change `this` to the event current target) and just about everything else that takes a callback. Some functions allow you to specify context directly, like [Array.from(arrayLike, mapFn, thisArg)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from). But you don't see this as much as not, leaving you to rely on things like `bind()` or wrapping your function call in another function - like you're done - that relies on scope to capture the `this` value instead on the `this` resulting from how the callback was called. Note that arrow functions do this automatically with `this`, using the scope, that is. They don't bind; they simply grab `this` from the parent scope and use that version of it in their function body, even if a caller tries to force it otherwise. And with instance fields in class definitions, you can effectively create "auto-bound" methods (though not really, but basically) because scope in fields is the instance created during initialization.
I would say the main point of async/await is to be able to do async programming using very simple and familiar control flow (including loops !!). When you try to use them with no loops you are loosing a lot, which is why most people answering here are suggesting promises apis + closures or to use more advanced solution (like rx, but you could say generators, channels, queues, ...). Also many suggestions are based on reasonable but arbitrary assumptions for example regarding network parallelism or memory availability.
wow! thanks for the sharing
Hi /u/flux_2018, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
And why is that? Your own personal familiarity.
I think we need to make a distinction between “readability” and “cognitive load.” Cognitive load is not referring to the ability to easily comprehend a single code block in the moment (that’s *readability*). It’s referring to the ability to know what all of your code is doing surrounding that code block—all of the intertwined dependencies that determine its behavior. Generally, when people talk about the complexity and cognitive load of the `for` loop, they are not talking about *reading* a specific `for` loop. Often they are talking about keeping track of all the mutable variables in the outer scope that the loop depends on, and which of those variables are dependencies for *other* code blocks, which the loop might be mutating, thus changing the behavior of extraneous code. Managing cognitive load is about keeping track of `dependencies` across your entire code base, and making sure nothing gets out of sync. And it’s not that `for` loops are bad, or that they inherently increase cognitive load. They are just very powerful. They let you do anything you want with iteration. And not everything that *can* be done *should* be done. But with a `for` loop it’s left entirely up to the individual programmer to make that decision. These alternative looping functions, on the other hand, are basically encoding best practices for iteration into an abstraction. Once you learn the abstraction, and use it enough, it just makes a ton of sense. Requiring fine-grain control over the internals of a looping mechanism is *usually*—not always, but *usually*—a code smell. There’s probably something else that should be tweaked to make that kind of control unnecessary. Performance concerns are sort of valid, but rare.
Were you classically educated in the field?
Simple JS library that uses CSS to add functionality and event listeners and monitors for when matching elements are added. [https://github.com/JEBailey/rava](https://github.com/JEBailey/rava)
Very nice! &amp;#x200B; I [know of this one](https://github.com/trekhleb/javascript-algorithms) but I like how I can read this one without my brain swelling. &amp;#x200B; Thanks for the share!
Hi /u/rubberrailroads, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/iGadget, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/drbobb, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/u1g0ku, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/thehermitcoder, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Dasnowman1183, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/jamiehicks154, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Onkel_Wackelflugel, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I'm getting kind of tired of this, to be honest. We are talking about a subjective opinion here. I've repeated to many people that a traditional for loop or even nested loops do not place a significant cognitive load, nor are they harder to read for many people, myself included. Instead of just accepting this, now you're trying to reframe it as me not really understanding the question. I understand the difference. Please stop. For me, and for people that are classically educated, which usually means learning in c/c++, traditional for loops are the norm. They are usually either the first or second control structure taught. They are generally the first loop structure taught. And for good reason: they directly translate to nearly every programming language. Please take my word for it that when I see the structure: for (let i = 0; i &lt; arr1.length; i++) { for (let j = 0; j &lt; arr2.length; j++) { doSth(arr1[i][j]); } } I instantly see: 1) nested for loop 2) i, j couners 3) 2d iteration, i is the primary array, j is the sub array There is 0 readability issue in that for me. There is next to 0 mental load in that for me. To me, that is the same as reading "See Spot run. See Spot jump." Not only that, but as I said before, this directly translates to other languages without having to memorize the, what 4 different styles in js alone? Then if I want to pick up python. Do they have for in? For of? For each? No idea, but I'd be willing to bet they have a classic for loop, with which I can very easily do everything the other 3 can do.
sorry this was my first post
Also, `Ramda.path` and `lodash.get`
I used to do ALL my animations on jQuery but now 100% of them are made on CSS. Of course it takes more time but I really enjoy how fluid they come along being CSS-only. Most of my jQuery now are addClass()/removeClass() but boy how I love jQuery.
Your point being?
what are the controls ?
you just gave me a nice idea for another challenge, and a great project that i can add in my portfolio
I still think you’re missing the point. It’s not that individual `for` loops are hard to understand. It’s that the amount of control they give you (which is why they translate to every language), combined with their widespread use in a code base, means a lot more loops that can possibly be doing some weird things you don’t expect. That’s a bigger problem for larger applications, where other people are writing the code in question. It’s not about the loop, really. It’s about maintaining a set of best practices around what your loops can do with shared data on a large scale. Personally, I instinctively prefer the `for` loop, because it allows me to take the path of least resistance to solve any iteration problem, no matter what that problem is. It’s powerful, useful, and *easy to understand*. So I think we both get that, on a fundamental level. Complexity is about all your code structures combined. Nobody cares about any specific nested loop or whatever. What they care about is reliable, testable, independent, and reusable code. You can do that with a `for` loop, especially if you write it to behave like `Array.prototype.map`. But you can also write weird `for` loops that defy all best practices, and that’s where the complexity begins to creep in. You forget about the small details of all the weird hacks after a few months/years, and collectively, they come back to bite you. That’s why abstracting those loop structures into functions that *codify* best practices is beneficial. That’s all I’m saying. There is nothing *inherently* wrong with `for` loops.
I've often given my colleagues the 'const challenge'. Try to write code using _only_ const variables. It forces you to break up code into smaller functions, and can make everything far more readable. A really common snippet of code is like let myVar = 5 if (someCondition) { myVar = 6 } And this just gets dumped into whatever scope the variable is needed in, which clutters up that function and reduces readability. Extract it into a well named function and you don't need any re-assignment because you just return based on the condition, plus the code just became easier to understand _why_ you're switching on `someCondition`.
It’s the latest stable version. I’m not near the computer but it’s 10.
wow, really? care to elaborate? I'm curious how a lack of DS understanding can close doors
UTF-16 was such a huge mistake. Its has all the downsides of UTF-32 and all the downsides of UTF-8 but none of their upsides. And surrogate pairs is just a horrible design. Really wish JS could have clean UTF-8 internals.
I found it much easier to play when I changed the interval to 150-200 range
What kind of result? What kind of info?
Arrow keys.
 That’s probably a good refactor exercise. Search for let declarations and you’ll find the least maintainable code.
It's India. There's too much competition here so such questions are used for filtering candidates out. I got filtered out. I'm not very experienced so for beginner posts, it is fairly common to see data structure related questions fairly often. This might not hold true for higher up positions.
Entering medical history to get a probability of certain diseases
&gt; It’s that the amount of control they give you, combined with their widespread use in a code base, means a lot more loops that can possibly be doing some weird things you don’t expect. Sure you can do weird stuff like for(;;) { loopstuff breakCondition } And yes, that is a bad practice to make essentially a lazy do while loop. But you can do weird bad practices everywhere. I just don't agree that the mental overhead that it takes to memorize 4 different structures, when you can best use them, their individual syntax, what you can use them on, and then multiply that over x languages is less mental load than removing all that and tracking i and j variables. So, I guess we are going to have to agree to disagree. That said, Array.map() is fantastic and I use it regularly. That one in particular does greatly improve readability and mental load for me.
I wasn't making a point, I'm curious.
document.querySelector (and querySelectorAll) are where you want to go for find, where "document" can be the element you need to find something in. Not 100% sure about closest, but I'm sure it wouldn't be difficult to rig up.
Hi /u/ihsavru, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I don't think people are saying "just get a new lib" as much as they are saying that branching out broke their dependence. It definitely did for me, in a framework-agnostic way.
Hi /u/BobodyBiznus, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
No, I'm not, though I started out with PHP where multidimensional arrays are(/were) the go-to. I also use strict TypeScript so have a good understanding of what data I'm working with when indexing. It's just plainly more verbose for no benefit.
The important thing to note is that branching out broke their dependence *for now* - knowledge of a framework is only good for the lifetime of that framework.
It would be cool if someone would implement some sort of library which makes cross-browser develooment easier
And this maybe good reason to build Json APIs. But this Has nothing to do with naming convension. More: Why backend should rename fields for every request/response and waste resources when you can do this on client side? Aspetialy when every client should have parse/validate data function.
Please do give feedback, it's my first ever article on medium :)
As a preface, some people have mentioned [http://youmightnotneedjquery.com/](http://youmightnotneedjquery.com/) That site absolutely fucking RULES and it's one of the reasons I attempted my own hand-rolled replication of what jQuery does. (except I stopped when I got to event delegation because I was overdoing it at work). Secondarily: If jQuery works for you, great. If you don't like the bloat, also great. It's your codebase that you and your coworkers need to maintain so you should go for something that makes the most sense for y'all, both currently and future-looking I found myself in this same situation years ago. So instead of moving to a framework, which, for your use case might just be overkill and a whole lot of refactored / rearchitected code, I would **definitely do** what some others in this thread have recommended and *attempt to write your most necessary jQuery replacements* in vanilla js. For example, here's a snippet for when I wanted to re-implement `**$(element).find("other-element")**` function find(element, selector) { return element.querySelectorAll(selector); } of course there are some edge cases, I'm sure (`querySelectorAll` returns a `NodeList`, for example so you'll probably want to `Array.from` the output): function find(element, selector) { return Array.from(element.querySelectorAll(selector)); } I basically made a pure, functional version of all the jquery functions I used the most, this included `closest()`, `find()`, `children()`, `parent()`, all of which were built off of other pure functions. It's a really rewarding project to do, and the best part is that if you wanted to incrementally port sections of your code from jQuery to vanilla, you really only have to convert the jQuery collection into an array of elements (or just get a handle on a single element with `$(element).get(0)`) Here's another example for something like `parent()`: function parent(element) { return element.parentNode; } You can see from this how we might use `parent` as a building block to build something like `closest()`, using the native `element.matches` for selectors. function closest(element, selector) { var current = element; // Keep looking up the DOM if our current element doesn't match, stop at &lt;html&gt; while(current.matches &amp;&amp; !current.matches(selector) &amp;&amp; current.tagName !== "HTML") { current = parent(current); } return (current.matches(selector)) ? current : []; } All of this stuff is just built off of existing, small building blocks. I don't know how much resistance you'll get if you re-architect everything into a pure functional style (opinions!), but it's very easy to start small with a few functions, and either run with that, or architect that into your own wrapper instance like jQuery does that will auto-bind whatever element to the given function. It's all about small steps, and you could even attempt to build any new features or small existing files with whatever you roll! It's a great chance to learn and to also lean out your code if you're looking to get away from jQuery.
Hifi! Experienced the same thing last week.
Thanks mate!
I think that might be why we have differences in opinion. I started in c/c++ and then had to work in Java, php, python, and javascript for my course work. Maybe because I've had to hop so many languages, I prefer sticking to core functionality that translates directly. &gt;It's just plainly more verbose for no benefit. Highly disagree. I've got another thread going about this, but I'll copy the choice parts where I responded to someone else making the same claim. Please take my word for it that when I see the structure: for (let i = 0; i &lt; arr1.length; i++) { for (let j = 0; j &lt; arr2.length; j++) { doSth(arr1[i][j]); } } I instantly see: 1) nested for loop 2) i, j counters 3) 2d iteration, i is the primary array, j is the sub array There is 0 readability issue in that for me. There is next to 0 mental load in that for me. To me, that is the same as reading "See Spot run. See Spot jump." Not only that, but as I said before, this directly translates to other languages without having to memorize the, what 4 different styles in js alone? Then if I want to pick up python. Do they have for in? For of? For each? No idea, but I'd be willing to bet they have a classic for loop, with which I can very easily do everything the other 3 can do. I just don't agree that the mental overhead that it takes to memorize 4 different structures, when you can best use them, their individual syntax, what you can use them on, and then multiply that over x languages is less mental load than removing all that and tracking i and j variables.
&gt;Learn how jQuery works internally That's a time suck.
I liked it. I’ve really only used the Lodash debounce function, so it was informative to read some more that Lodash offered. It seems that ES6 functions cover a lot of the bases of what you described, but I’m very interested in the _.get and _.set functions! Nifty! Thanks and congrats on your first medium blog post
I 100% disagree. If Angular took a dump tomorrow and everybody stopped using it, do you think Angular devs couldn't transition to Vue or React fairly easily? I've learned concepts from React that I've applied to Node APIs; React falling out of favor doesn't change that. We have to remember that programming isn't just about knowing a language, it's about the type of understanding you're trying to convey that we should have. I personally started on jQuery, went to vanilla (had to reprogram modules for our web player), and refuse to bring jQuery into a project if it isn't already a part of what is being used (like WP).
Yeah promises are just as important. Ever since web browsers stopped playing sounds if the dom wasn’t interacted with, you had to learn promises. But jQuery Ajax is so freakin easy. All you do is $.ajax({}) and inside you input 6 methods and you’re done.
Session House: Opensource Chrome extension to save and restore tabs. [https://github.com/bhavinjawade/SessionHouse](https://github.com/bhavinjawade/SessionHouse) Looking for contributors too. https://www.bhavinjawade.me
My reasoning is that by learning what lies at the heart of all of these frameworks you get a better feel for the fundamentals of JavaScript. Yes by all means people can take their Angular experience and apply that to Vue et al. but that doesn't change the fact that you're a step removed from the mechanics of both frameworks. Let's say you wanted to move to a different *language* - how is knowing JS in the context of FE frameworks going to help you then? I'd argue knowing the fundamentals of the language is an all round better value proposition.
[https://www.tensorflow.org/js/tutorials/transfer/image\_classification](https://www.tensorflow.org/js/tutorials/transfer/image_classification) You may be able to build your own models and cache them locally using service worker. TensorflowJS can load models locally. You can see in the Codelab they reference the model \`&lt;script src="https://unpkg.com/@tensorflow-models/mobilenet"&gt;&lt;/script&gt;\` This sounds like a fun problem to solve!
JSCharting also offers developer and team based licensing options in addition to server based licensing and free subtle branded options. Which paid licensing options do you appreciate the most for commercial JavaScript libraries?
Sounds interesting thanks ! Well look into it.
Your app clearly has a lot of shortcomings but don't let people's harsh criticism (while mostly valid) deter you. People forget what it's like to be a beginner it seems. Take it on the chin and keep learning!
&gt; That’s where I’ve found in the past that React shines. With bigger more complex projects. Whereas Vue, in my experience, is quick to get started but breaks down with complexity. Vue... breaks down with complexity? lmao I feel like people who say this have never used Vue for a real project. I work with React and Vue at work, and in my experience large React projects are much more challenging to manage than large Vue projects, simply because React forces you to architect so many areas that it doesn't have any opinion on, while Vue gives you a consistent strategy for managing them.
I wrote a proxy to do something similar. [https://github.com/dakaraphi/jslib-safe-objects](https://github.com/dakaraphi/jslib-safe-objects)
&gt;I 100% disagree. If Angular took a dump tomorrow and everybody stopped using it, do you think Angular devs couldn't transition to Vue or React fairly easily? It's not a matter of dev transition, it's a matter of supporting legacy code. Do you think management is going to allot the cycles to refactor existing code into a new framework if the existing stuff still works, albeit in an increasingly unsupported way?
\&gt; It's not a matter of dev transition, it's a matter of supporting legacy code. Not in the context I was responding to. My point was that \*concepts\* are also an incredibly important part of development, and \*concepts\* can be applied outside of frameworks. \&gt; Do you think management is going to allot the cycles to refactor existing code into a new framework if the existing stuff still works, albeit in an increasingly unsupported way? I live this nightmare and the answer is "not until they have to".
Thanks. Yes, ES6 does cover functions like find, filter and many others offered by lodash. But for me, functions like keyBy, get and getting nested properties using \_.map makes life a lot easier :)
Jest doc &amp; Vue test utils is already pretty extensive on component test bed.
&gt;Not in the context I was responding to. My point was that \*concepts\* are also an incredibly important part of development, and \*concepts\* can be applied outside of frameworks. Fair enough.
It's a great site. I don't know or use jQuery, but some past developers on my project have, and I've found this site much better than the jQuery docs as a reference for what some jQuery translates to in standard JS.
You'll always be in a better boat the further down in level your understanding extends. I'm better off than somebody who only uses React, and I'm better off than somebody who only uses Laravel (I'm a PHP dev too).
Hi /u/trujic1000, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/MalhotraRohit, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/knazim667, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/leafynospleens, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I've given up even trying to understand webpack
Kebab case
I call it cable-case but i've nver heard an official name for it. I think I read somewhere calls it kebab case but thats kind of weird to me.
Theres the following used in programming: camelCase snake_case kebab-case PascalCase UPPER_SNAKE_CASE
Hyphen case? Middle snake case?
Hi /u/ghoulboy_, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
So true, I love how people try to use a interstellar rocket launcher to ignite 5$ firecrackers.
1) That's not JavaScript. 2) I don't see any provided scripts with any setTimeout functions. So I can't help.
Yes, also in the USA big companies expect you to know DSA and most of the interview questions are about that. Read up and practice :) I hope you get the job next time!
After maintaining an ejected CRA for a few years, we've gone back to a non-ejected CRA. That's been really nice. The problem with tooling is you can easily spend an entire day trying to do something only to realize it's not possible. That ends up being expensive for a small business like ours.
I thought that's php+js, thank You :))
write an app in react or one of the more modern JS libraries in your spare time
I would seriously recommend watching YouTube videos instead. There are COUNTLESS tutorials on JS at almost all different levels.
[removed]
I've never found a good reason to eject. I remember having some trouble getting support for mobx decorators the first time I tried, but that's not really an issue anymore. Unless you're doing something way out of the box, chances are any reason you'd have to eject has been solved without ejecting or will in the near future.
Why do you need such methods?
Generators are not _always_ more useful. They do not replace arrays and other iterables. You should definitely use an array for your examples.
I prefer Udemy courses. Some are awesome! My top instructor is Maximillian: https://www.udemy.com/user/maximilian-schwarzmuller/
It's good for removing the feeling of magic about jq. It will get an understanding that it's not doing anything what you can't do with vanilla.
If you're looking for a book I thought [Secrets of the Javascript Ninja](https://www.amazon.com/dp/1617292850/ref=cm_sw_em_r_mt_dp_U_MUe6CbQ47RQ17) was a good read, but with Javascript it's really better to use YouTube as /u/theorizable mentioned. Traversy Media has a few videos covering the basic that are typically short and cover the material well enough to pick up easily. [Traversy Media - Javascript Crash Course For Beginners](https://www.youtube.com/watch?v=hdI2bqOjy3c)
Can you do Firebase notifications yet?
My advise to become addicted to React was a joke. But it's not a useless as serious advice too. React enforces usage and understanding of vanilla as everything is done via common js. There is no DSL there.
Neat.
PR REJECTED
You can't use jq on every project and it's definitely not a good idea to bring it to any project without jq just to bind some events. But on every js project you can use vanilla js. So it's worth learning anyway.
Looks like an overkill. I bet you can significantly reduce a page size by using vanilla js
I recommend an English course first
Thanks for sharing, found it very informative.
Generators can work on dynamic lists rather than having to know the list before time.
Would you mind to give an example?
Only a rough theoretical one. Observables for instance - as long as the generator will yield again - it can be passed another entry so you get into a situation where a new event is triggered and you can wait for that
Yeah. It is a fairly reasonable requirement. I simply was underprepared.
worm online free
 [https://www.amazon.com/Head-First-JavaScript-Programming-Brain-Friendly/dp/144934013X](https://www.amazon.com/Head-First-JavaScript-Programming-Brain-Friendly/dp/144934013X)
For sure! I'd love to hear how it turns out.
DOM transversal. Can replicate some of the stuff jQuery gives you by learning how to use the &gt;, +, and ~ combinators. (Modern JS within React / Vue etc has very little DOM transversal since the DOM is pretty much output only but it’s good to know how to compose selectors without having to rely on jQuery)
I agree with you. I only used generators once. I had a list of items, and I needed a single valid item. Validation required an HTTP request, so I didn't want to validate all of them right away. So instead I used a generator function that validated the next item and returned it.
Meh, I just use Endtest.
Absolutely. I too first started with HTML and CSS, then moved on to PHP and MySQL. Then JavaScript and C++. What I should have done is HTML5, CSS3, JavaScript for frontend and then PHP, MySQL, nodeJS backend. And I too need to learn Unity, C#, and Python in the future someday. But if you really want to know JS at its core, look into HTML5 canvas as that will force you to use vanilla with no frameworks, plus you learn game development fundamentals along to way to use on other languages which is invaluable, Good luck!
Every five seconds, someone asks this on reddit. Every 10 seconds, someone replies with the same answers.
The sense of entitlement is strong with this one
A fibonacci sequence of arbitrary length that would keep going until you stop it... function *fibonacci() { let curr = 0; let next = 1; while (true) { yield curr; [next, curr] = [curr, curr + next]; } } for (let num of fibonacci()) { console.log(num); if (num &gt; 100) break; } // 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144
IMO going through the javascript courses at freecodecamp.org then doing the codecademy.com courses (Introduction to JavaScript) were pretty damn useful for me starting out. Then I would upgrade to Codecademy Pro and bust out some other courses (Building Interactive JavaScript Websites, JavaScript Errors and Debugging). Then maybe check out https://www.codecademy.com/learn/paths/build-web-apps-with-react which should take you quite a bit of time.
Well they were most useful as a stepping stone to get to "async/await". They were the first feature in JS to support continuations, and it was a major change to how the language worked. Outside of that... well promises and observables with async functions essentially replace them in full.
What does entitlement have to do with anything? Are you really so self-righteous and fragile that people can’t even have valid criticisms of things you like without you feeling the need to make it personal?
Kinda funny. That's the exact path I'm going now. I really enjoyed learning c#. I find JavaScript will open up a lot more variety for myself. I've been contemplating enrolling on a full stack developer course, but if I'm honest. They seem like daylight robbery, I dont doubt they help but really I think you can learn and present what you need to at a fraction of the cost.
Ooh, I thought me approaching JS was me about to start the backend stuff, which is where I'm really interested. Functionalities, making things do stuff. Whole thing is really daunting when I think about how much I've actually got left to learn. Best to try chop it down to manageable chunks I find. C# is a blast. Especially in unity. Really fun stuff. I was a complete beginner to programming when I picked it up just out of sheer interest, never thought I would be smart enough to be able to start programming but eventually it started to make sense, so Im sure you will pick it very quickly.
Yea I only know this bc I recently needed to support the function in IE. I mean finding the polyfills are okay but sometimes even those don’t get the job done.
That library looks sick. Thank you.
I would definitely need node.js auth . React routes are everywhere and not that hard to catch on.
RemindMe! 1 day
I will be messaging you on [**2019-05-25 21:53:49 UTC**](http://www.wolframalpha.com/input/?i=2019-05-25 21:53:49 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/javascript/comments/bsi7u3/introduction_to_lodash/eoobw28/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/javascript/comments/bsi7u3/introduction_to_lodash/eoobw28/]%0A%0ARemindMe! 1 day) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
I don't think it's a problem. People always get upset about JavaScript's flexibility and how it doesn't crash when given edge cases. It seems like there's a strain of conservatism hidden in there. I don't think any well-regarded JavaScripters are going around using functions as indices, and the rules of clean code still apply in this language just as they do in every other. I see this like DJs who only use vinyl without any software. There's a sense of purity and integrity because you're doing something really difficult that newbies can't immediately do well, but what's the problem with using software that automatically beat-matches for you? What's the problem with letting someone check for truthiness of a variable without explicitly casting it as a boolean? I'm more concerned with the end result of our labors being concise, functional and readable code, and less concerned with a programming language's ability to handle edge cases without crashing.
Have you tried reinstalling @babyl/polyfill ? Cor-is should be a dependency of polyfil.
The irony here is that this article references [Callback Hell](http://callbackhell.com/) as an argument against traditional callbacks without actually delving into the subject matter and understanding that site *already* outlines a clean and understandable way to deal with callbacks, rendering the first example block used to illustrate the "problem" completely moot. Yes, `async/await` is great but it's **not necessary** to write clean(er) code.
JS is a really broad language nowadays and you're missing out a lot when writing jQuery. There's a huge ecosystem of tools and frameworks out there. If you want to leverage that, I'd suggest in your spare time you put aside an couple of hours into reading about the language itself - function syntaxes, closures, prototypes and inheritance, classes etc.
Would this one be the best option... [https://unicode.org/emoji/charts/full-emoji-list.html](https://unicode.org/emoji/charts/full-emoji-list.html) ?
It doesn't matter, because the truth will come out. I highly suspect you know this is real but you are just too proud to admit it at this point.
Terrible bait
What has being fragile have to do with anything?
https://unicode.org/emoji/charts/full-emoji-list.html is the official unicode source, so yes, that's a good reference to use. As for a good JSON format, try a combination of https://github.com/kikobeats/emojis-list, https://github.com/Kikobeats/emojis-unicode, and https://github.com/Kikobeats/emojis-keywords.
C# is a wonderful language and has a ton of job opportunities in my area. You probably already know this, but C# is used in .NET app development and there are a ton of jobs for .NET developers. Your area could be different though. Once you learn one object oriented programming language, it's way easier to pick up another. I regularly switch between JavaScript, Java/Spring, Python (mostly for simple scripts), and sometimes PHP at my job. I struggled my ass off for 8 years to learn JavaScript, but it was refreshing how natural it felt to learn Java when my work needed me to after having a strong grasp of JavaScript fundamentals. Good luck to you!
I'd echo everyone else and say learn the syntax from videos and free online courses, and also add freecodecamp.com to the list. When you really want a great overview of harder concepts like this, scope, and closures see Kyle Simpsons "You don't know JS" series. He's a really great teacher on harder concepts
You do DM me though, so your moral high ground is shit. Also, write the urls of the wiki and the blog, please. I would like to appreciate them.
Thanks.
Link is the OP. Twice. You didn't even read the OP before you started slinging accusations. Please do more research into this before giving another knee-jerk reply PLEASE.
Have you ever heard of Babel?
Have you tried jQuery?
Yes please
TL;DR: it's literally just \`JSON.parse(JSON.stringify(originalArr));\`.
Wow, hilarious.
Here was my big use of generators. &amp;#x200B; I wrote a program to solve a puzzle game (Flow Free). &amp;#x200B; Since this was written in JavaScript, it could not run as one big native loop -- it simply took too long. &amp;#x200B; Nor could it run as a web worker, because I needed to display the screen once in a while and observe the status. &amp;#x200B; &amp;#x200B; So, I wrote it using a generator. Each iteration of the loop happened within a standard JavaScript event cycle and then stopped. I could then see what the loop results were and either single step forward or free run. &amp;#x200B; No other language pattern -- including async -- handles pausing nested loops. &amp;#x200B; (In theory I could have even saved the loop counter variables and saved the entire state, allowing me resume calculations later -- but I didn't go that far.)
Async/await is really pretty dumb. Blows up purity of functions, makes functions harder to reason about, and leads to extremely bad code by people who don't really know javascript that well and think this gives them an out to continue not knowing anything. An unnecessary sugar that you're better off without.
Hi /u/ViDa-Blo, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
 Forget all the async stuff. You might want to make your own object that works with for...of and [...o] like Array does. So you need to make your object and 'iterable' To make your object an iterable, you need to do it the [tedious](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#Simple_iterator) way or the [generator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#User-defined_iterables) way. The generator way is more concise.
Is this satire?
This method is slow and doesn't work for values like functions. Just use lodash.
JavaScript.info is amazing
I’d suggest Angular as a way to go heads first into JavaScript/typescript. With its class structure and dependency injection it brings a JavaScript framework somewhat close to OOP. Learning this type of front end tech, and Node along the way, is a good gateway to building apps run on JavaScript.
Yes, it works just if your object doesn't have functions or classes in it
I know how it feels, the first time that I tried to use webpack was the migration to webpack 4, some common plugins doesn't work properly and I spend at least 2 days working in the configs, after working a little with webpack you fall in love with the tooling.
I have, current project at job is getting rid of it now
webpack is my bitch
I've used generators in production code for the following: 1) [redux-saga](https://github.com/redux-saga/redux-saga) uses them heavily (but you said other than async, so moving on...) 2) To make a infinite sequence of numbers following a pattern, which are lazily generated. I didn't know how many numbers i'd need ahead of time, and each number was based on the previous one, so generators were one way to keep track of that state. 3) To loop through a dataset, filling in gaps. I had a set of data which was supposed to be contiguous, with data for hour 1, then data for hour 2, and so on. But if there were errors fetching the data there might be holes. The generator would navigate these holes and fill in the missing data with placeholders, so that my view component could just use the generator and not worry about where the data came from. And while this was just for fun, i also used it to play [warrior.js](https://warrior.js.org/). In that game you're trying to navigate a dungeon, and your main function gets called repeatedly. Every time it does, you need to return an action saying what you want your character to do. Ordinarily, you need to save a variety of state variables so that on the next time it's called you can "remember" what you did before, but i instead did it as a collection of generator functions. This let me describe a complicated sequence of steps that spanned multiple calls to my main function in a compact and easy to read way.
How did you get decorators working without ejecting?
Easiest way I've found is to use a package called react-app-rewired to inject Babel plugins in config-overrides. If you search "react-app-rewired decorators" you should have no trouble finding some tutorials.
This is another use case by the founder of repl.it (an online code editor). [Building an In-Browser JavaScript VM and Debugger Using Generators](https://amasad.me/js-debugger) Hope it helps.
I don't think it is. I'm personally not the biggest fan of them yet, but I love regular promises. And I'm stoked about the fact that I can use them on the front end now too.
Just skimmed through but from quick sight it seems the author has gone through the right path to explain this extremely important js topic. I recommend it.
Promises are great. Async/await is for bad programmers who are uncomfortable with functional techniques and don't want to learn anything.
Can you clarify?
Promises are great but they still introduce tons of syntactic garbage to your code making it considerably harder to read. One may not use async/await without knowing what it is doing behind, but saying that promise code is aa clean as async/await code is mostly a testament you are accomodated and afraid of change the way you to things for the better.
There are tutorials out there for it. I had to use one for a project I'm working on.
Think of the difference between observables vs promises. Or streams vs callbacks. Generators can yield undefinitely, async/await is a subset of generators.
Very well written.
How does it blow up the purity of functions? Examples please?
notavirus.sh
"Generating the Fibonacci sequence" should be a warning sign. That's the best example?
I agree. I switched to parcel last summer and can't tell you just how much better it is. I don't know why webpack is still a thing.
It's one of the classic examples because the numbers get out of hand so quickly. I haven't had a chance to use too many Generators in js, but you can take the basic idea (calculate values on the fly without creating a huge list) and take it wherever you want. For example, I've used Generators in python to create super lazy streams of data that could be incredibly large in size if generated all at once, which means it's extra cheap if you wind up throwing a lot of it away at the end anyways with a filter, or if you wind up canceling the request. Generators also have a "send" method, which makes it easy to create tiny state machines that move to the next state based off of what is sent in without knowing all of the commands up front. I've used that for implementing a file parser that had a particular semantic/action for each "header" that came in, but I didn't want to read the whole file in at once, since I also didn't necessarily know how big the file was up front as it streamed in from the network. Basically, if I ever come across something that either needs to be as lazy as possible, or something that is so large that I'm afraid of the ram or cpu usage, I try to reach for Generators (at least in python). Some other interesting properties of Generators is that they usually also have a definite end state, which is why they're used to create context managers in python as well.
generators are the backbone of Redux saga. very useful for simulating multitasking, and orchestrating complex sequences of events.
Hi! It sounds like you had an awful contract with a team that didn't know how to on-board people or hire. That is not on you, and I'm sorry you weren't set up to succeed. Any company hiring a 6-month contract needs someone to hit the ground running, they're not looking to invest in a person's skills: they need them to show up with it. So it's peculiar that they'd take on someone upfront about they're lack of experience with the given stacks. It sounds like you're fast and eager to learn: these are excellent, if not the most important, skills to have. You've picked up languages and paradigms in the past, and you'll probably never stop doing that! That means you can do this too. You got burnt on an unfair situation, and you're hesitant because of it. Don't let that fear prevent you from diving in, working with others to learn a codebase (no two are the same!) and trying to figure out how to chip in and be productive.
Thanks a lot for you reply. Your second paragraph is accurate, I’ve enjoyed learning and that won’t change. This position is fulltime, and my manager today said that even he struggles with imposter syndrome still, even after working there for 11 years. He also said they need people who are willing to learn, and they are willing to train, because they want the investment into devs who will stay there a long time. Again thank you, just needed some encouragement.
I had an algorithm which was used for searching for matching data inside potentially massive datasets. The algorithm used a sort of ping pong pattern for searching, starting at a target index and then iterating back and forth away from that index. If it took too much time I had to cut the process short, since at that point a match was unlikely. Generators were the perfect answer for this. I didn’t have to pre-create the iteration pattern or resolve the searching. I could just iterate away until I ran out of time. It might seem like an arbitrary example without more information but it was a quite complex scenario and I don’t feel like fully explaining the parameters lol. Point is generators are great for iterating when you’re not sure how far you want to go.
Honestly, a lot of us have no fucking clue what we're doing. Just be eager to learn and easy to work with and you'll be fine. Ask a lot of questions even if you're afraid. There's no such thing as stupid questions when you're learning
lol what a dumb guy
Thanks for you reply man. And I think you’re right, programming itself is always a learning process, and ever evolving. Just got to apply myself to keep learning.
I love pixi. I’m using it to make a game framework(just for me to learn)
If you really want to make an impression, get there a bit early and stay a bit late. Keep your head down until you understand more and you'll be fine. Source: been working as a full stack/cloud engineer 5+ years.
No. Everyone uses map in react.
Auth is definitely the biggest pain in the ass
They were added before promises, and basically are how they work in the back end. Since the addition of promises (and by extension async/await), there are not many good uses for generators
What if you didn't know how large the list of names was going to be? If you wanted to have a function that could run infinitely, like watching for new submissions to a subreddit, or scraping an undetermined amount of pages? Generators are useful for when you have a lot of data, you need to do something with it. An example like parsing a ridiculously large Excel file that was written for more visual consumption than actual organization of data.
I think we will have to agree to disagree. I definitely see a problem with (seemingly) randomly changing conventions, making things like mirroring objects without repetitive code harder.
Parcel is absolutely amazing.
Small tip on dependency injection and other concepts like it: don't over think it too much. Think about all of the programs you have made and internally, the classes and methods you built. Every object or function you defined was meant to give you some useful behavior in a form you can easily use/re-use. The names you gave were just a human tag for that behavior and nothing more meaningful. When you write a simple program, it will have an entry point which builds and uses the other objects to achieve the functionality. It is extremely easy to simply write the thing and call it a day but maintaining it long-term requires a bit more structure. This is where interface definitions come in for many languages and the best practice is to define an interface before implementing it in a class. Then you can refer to the interface everywhere in the program and simply plug in the implementation you want to use where needed. Dependency Injection is just the term for having one central object be told how to map each desired interface to its implementation and then be responsible for building the instances. The DI framework let's you just write a constructor with interface parameters for the other objects you need and you can trust they will get filled in properly when your object is created. All of the other weird terms like Singletons or Transients end up being different ways the DI framework can handle the objects its responsible for. Overthinking it made the concept super hard for me when I was learning back in the day.
Hi /u/dwoodburdev, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/nekju, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Sure. I'm going to assume the reader is *not* familiar with the concept of pure functions. A [pure function](https://en.wikipedia.org/wiki/Pure_function) is a function that produces output based solely on its inputs and generates no side effects in the process. A [side effect](https://en.wikipedia.org/wiki/Side_effect_(computer_science)) is when something outside the local scope (in this case a function) is modified by the code inside the scope; this includes logging to console, printing to the screen, hitting an API endpoint, etc. Pure functions have tons of great properties, like being easier to test, easier to reason about, easier to debug, and easier to read the dependencies at a glance because they're right there in the function declaration. So let's say you're doing an async call to an API, then doing some transformation on the response and logging to a console. Using a pure functional approach, this is easy, straightforward, and readable. Absolutely *zero* need for `async/await`. const doMyStuff = (obj) =&gt; { // ... do whatever to the stuff to get result ... return result } fetch('http://mysweetap.io/getWhatever') .then(doMyStuff) .then(console.log) Presumably, the purpose of the `async/await` is to get rid of this `then`ning, so that you can put that `fetch` into the function, no? const getDoLogMyStuff = async () { const myStuff = await fetch('http://mysweetap.io/getWhatever') // ... do whatever to the stuff to get result ... return console.log(result) } Now you've got an impure function, which is acting on data not provided via input (arguments) and producing side effects (`console.log`). You could extract the logging again, but then you're returning a result wrapped in a promise, and the function is still impure. You could extract the `fetch` as well, but then we're back to where we started, which is that you don't need `async/await` at all. Maybe you'll say "but what if I'm using a pure function and I'm just using a promise because the function takes a super long time to process and I don't want to block the thread?" OK, sure, I guess that could still be considered "pure" in a technical sense, but now you're just burying dependencies to avoid chaining `then`s, which makes the code less declarative and harder to reason about, while also introducing a bizarre inconsistency where you're using `async/await` in some places and straight promises in others when just using promises directly accomplishes the same thing in a cleaner way. I do not buy the argument ***at all*** that `async/await` is easier to read in any fashion. Some people will try to argue that it's easier if you're pulling multiple async results or whatever, like this: const lotsOfAsyncBullshit = async () =&gt; { const thing1 = await getSomeThing('one') const thing2 = await getSomeThing('two') const thing3 = await getSomeThing('three') // ... do some shit with these things ... return result } However, the following doesn't bury the dependencies and is *much* easier to test. const lotsOfBullshit = ([thing1, thing2, thing3]) =&gt; { // .. do some shit with these things ... return result } Promise.all([getSomeThing('one'), getSomeThing('two'), getSomeThing('three')]) .then(lotsOfBullshit) A lot of the time you just end up with confused beginners who barely know what they're doing about anything throwing `async/await` around everywhere, including shit like this, which I've seen so many times: const whateverAsyncStuff = async (input) =&gt; { const result = await doAsyncCall(input) return result } Which is functionally identical to the much more pithy: doAsyncCall(/* input */) `async/await` is a crutch to make inexperienced and poor programmers feel more comfortable while enabling them to continue writing bad code. If you're an inexperienced programmer, jumping past straight promises to `async/await` isn't really going to help you, since you still won't understand how promises work, which is necessary in either scenario. If you're just a poor programmer, then you're just kind of a poor programmer, and that's a sad day. There are *exactly* three instances where I see *any* utility in it at all, none of them are particularly compelling. In order of utility: 1. If you're writing certain kinds of test functions, you may get a little more readability, but this is really exclusive to that use case (and I don't find it super compelling in favor of the existence of `async/await`, but since it's there, you might want to use it once in a while, and I wouldn't really get on your case about it). 2. If you *absolutely* do not care about the result of an async call and just want to wait until it's completed. (I feel like you're really doing something wrong if you encounter this a lot, as I've come across the need in *exactly* one situation *ever*, and it's not really better than `.then(_ =&gt; { /* whatever you want to do next */ })`) 3. If you want to wrap a value in a promise to start a chain, it's a cute gimmick to `await 'some value'` rather than `Promise.resolve('some value')`. (Although this is really just cheek rather than utility.)
Did you notice the promises that reject and then resolve when there's an error? Need a return in that error handler.
One slight addition to your argument... this code runs the async methods sequentially, while your promise.all call runs them in parallel... &gt;const thing1 = await getSomeThing('one') &gt;const thing2 = await getSomeThing('two') &gt;const thing3 = await getSomeThing('three')
No, it's the easiest example to describe. Imagine you have a function that generates a list of values. Doesn't matter what they are, but assume the calculations for each value are quite expensive, and the total work to generate the entire list will consume several seconds of time. function valList() { var data = []; for(var i=0; i &lt; 100; i++) { data.append(expensiveCalculation(i)); } return data; } And you need it in an array for whatever reason, but you don't need to deal with everything all at once; you only need the first one or two right now, but refactoring to handle that case makes your code enormously complex and unclear. So, instead: function *valList() { for(var i=0; i &lt; 100; i++) { yield expensiveCalculation(i); } } Now, you can "generate" each expensive value as needed, without having to keep track of some iteration value in global or near-global scope, and between expensive calculations, you have plenty of opportunities to insert progress indicator code, or manage interactivity for your application, without the user noticing that such expensive work is being done. It's lazy evaluation, and it's how languages like Haskell work, and it's a *very* commonly-used feature of Python and many other languages.
Head first books are great... but date of publication is very old its 2014!
That's right, they use map. Still likely explains why they reach so eagerly for forEach.
&gt; I'm the youngest guy there (20), with no degree but actively working on my Computer Engineering degree. I feel out of my element, and tbh, like I can't do this. You are already doing it, and it sounds to me like you are killing it.
I freelanced for 15 years of my career. I've seen a LOT of new (to me) code bases, and almost every single one came with a healthy dose of "OMFG, What am I doing here? I can't do this!" for the first few days while I tried to get a handle on their unfamiliar code. In the end you start to recognise it as a normal part of any new job. The people who've hired you _do_ think you can do the job. They wouldn't have done so otherwise. You're a junior engineer. You're expected to ask for feedback and guidance and, unlike the previous role you mentioned, most teams are happy to provide it.
_Laughs in Redux Sagas_
But for real, async functionality is a great use case for generators. Do take a look at Redux Sagas to see plenty of cases where you’d want to use generators to not bog down your UI with blocking code. Neither of your examples are good use cases for generators. However, leading into your second example could be benefited by firing off the API request asynchronously via a generator and yielding the results instead of having to chain callbacks and such.
Which is a good argument for `Promise.all` in most cases.
[undefined](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined)
For me, that would be the difference between AMD, CMD, CommonJS, ES Module and UMD, which confused me for a long time.
You're a pathetic programmer. I guarantee it.
It's a primitive type that does nothing other than tell you the method/property is not defined.
Everyone here will be dealing with those same feelings at different points in their respective careers. You will go through cycles of feeling on top of your game, then again like you know absolutely nothing. But you will chip away at it, write some bad code, learn a lot, come back to it months later and think to yourself ''wtf was I thinking?" Peer programming and code reviews will help. If you dont have those, try to buddy up with someone you feel like you could learn a lot from. Good luck and enjoy
Promises and Generators were actually added to Ecmascript at the same time, in 2015. In the spec, I believe Promises are the next item after Generators. That said, the idea of Promises was around for years before they were officially added in ES6. Many UI frameworks and libraries included their own versions of Promises. Jquery had Deferred Objects for like 5 years before ES6. Angular had $q and a deferred Promise API for years too. Generators and promises work hand in hand, not in competition. They are two parts to the async puzzle. Insinuating that promises rendered generators irrelevant indicates a lack of understanding of what generators actually do. You want to run 3 async functions one after another, you can chain some promises together creating somewhat messy code, or you could toss them into a generator and just yield the 3 functions one after another. Less code and no chaining. Promises and generators were added to the spec at the same time because they are complimentary.
Your 11 year old “son” already came up with a great idea (after you were a terrible parent and told him people were being mean online) - videos of him coding. That would be awesome to see and I’m sure it would inspire other kids. But instead, you just keep digging your hole deeper.
Yes, you can write clean code with callbacks. But do consider the amount of effort required to write good and clean code along with proper error handling using callbacks to that with promises or async/await. When working with large team projects, these things matter a lot.
Axios.post(url, data) .then(res =&gt; { // if succesfull // res.data contains retriever data }) .catch(err =&gt; { // on error });
Apps these days are mostly written in JavaScript. On the web, but also on the desktop and to some degree on mobile. JavaScript is not dependent on the browser any longer, or on html and css. I would suggest you start learning React. This will teach you modern JavaScript, functional programming instead of OOP and it’ll open the doors to cross platform and native app development. In a couple of years this will likely be the primary way of writing out apps on all platforms. Microsoft for instance has made it the primary means of writing windows apps, replacing C#/XAML/Xamarin, but the same is slowly happening on all platforms.
Sure we do plan to post a video. But we do not owe you anything -- you owe us. It is you who owe me, and everyone reading this, proof before you make an accusation. You have not done so, you just decided to ruin it for everyone by making accusations you cannot support. That means you owe us an apology. And we don't have to prove anything to get it. You just owe us. Facts. I doubt we will ever see an apology from you even after we post videos. It's just the kind of person you are. You do realize that you are basically marginalizing yourself, don't you? I'm sure you feel all uppity and are having so much fun downvoting me wherever you can. It's the nature of the beast, reddit is full of jerks just like you. It's just sad that today they decided to pick on a kid.
&gt; If i fetch data from some API and i get back a big array of values, and i want to display it on my html document. I will do the following: And if the array is _big enough_ you'll notice a problem, that the document does not get updated until you've finished the whole loop. Sure, you're just creating a simple `&lt;li&gt;`, but imagine your list has been given some layout and style or that you're creating something just a little more elaborate. Now, you can solve this problem in many ways, using various different approaches. But in the end they all boil down to the same idea: You'll need to do _chunks_ off of your list and you'll need to keep track of some sort of index to mark the current state of what you have already processed and what remains. Again, this idea can be implemented in a lot of ways, but the _idea_ itself is always the same. When implementing that, you might consider keeping that index/state separate from everything else, maybe just as a simple variable in some generally open scope. let listIndex = ...; And then you'll have the function that gives you the next chunk. function getNextChunk(list, index) { ... } This is _one_ approach. One other approach may be to encapsulate that piece of state inside the function that returns the next chunk, because, after all, that particular piece of state only concerns that function. So you might build a closure with the function and the index. function chunker(list) { let index = 0; return function nextChunk() { ... } } Again, just different approaches. They all make some decisions, trading some advantages for others. E.g. the closure trades some complexity to gain better encapsulation. And that encapsulation is a nice thing, but the usage of closures is generally a case by case situation. That is, the closure works in the way you make it work. _In this particular case_, the "problem" you're trying to solve is actually pretty generic. I mean, you're creating an _iteration_. That the iteration occurs in chunks is your particularity, but the general problem is still just iterating. So it _might_ be nice to follow some sort of generic, agreed-upon approach for all cases of _iteration_. And sure, there are some agreed-upon approaches to do iteration. The simplest one is... just use a closure, but return your closure and data in specific formats. That is, "return your closure wrapped in an object as a property called `next`, and make the closure return the data wrapped in an object with shape `{value, done}`". So you might just do that. Using it, may look like... let it = makeSomeIterator(data); let result = it.next(); while (!result.done) { process(result.value); result = it.next(); } For the _extra work_ of adhering to [one particular shape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Iterators), you get this benefit: That code I wrote there is _completely generic_. That is, _using any iterator always looks the same_. This is a good thing because it allows you to abstract and avoid having _ad-hoc_ code everywhere you iterate. But now you have that _added work_ of adapting to some specific shape. So you might wonder if maybe there's some way to do the same thing in a simpler way. And there is. Because, iterating is a particular form of keeping track of a more generic "keeping track of where you are in the middle of a process". And that more generic form is what [generators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Generator_functions) implement. They provide a mechanism to say, halfway through a process, "ok, I'll momentarily stop right here, give you some partial result and when you want more, just call again and I'll continue right from where I stopped". And so, you don't need to _explicitly_ keep track of your state with a closure or with an external variable. You just tell the JavaScript engine "hey, I'm a generator; I'm going to pause here, please _you_ keep track of where we are". And the engine does just that. For your particular problem, what you'd do is you'd use a generator but not in just any casual manner. Because going back again to the particular case of iterating, the specification has gone one step further and defined [iterables](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Iterables) and so what you'd do is build your generator inside the shape of an iterable. That way you're again trading a bit more effort writing the generator, in exchange for being able to use agreed-upon -_standard_ in this case- ways of _consuming_ the iterator (e.g. `for..of`). ---- **tl;dr**: The above is just _one_ example. Generators are a tool. As such they trade some concerns in favour of some other concerns. Their main concern, the one they help with is providing a transparent, automated way of offloading some form of state management to the JS engine itself. Other tools and approaches may solve the same generic problem of "tracking state" in other ways. All may be useful in different circumstances.
 const getDoLogMyStuff = () =&gt; { return fetch('http://mysweetap.io/getWhatever') .then(doMyStuff) .then(console.log) } If you put your promise implementation inside a function, the same can be argued about the impurity of this function. &amp;#x200B; One can write obfuscated code with both promises or async/await. But saying that `async/await` will invariably lead to bad code is just plain wrong.
Graph traversal. It's maybe easier to write a bfs with a generator than with a data structure.
People posted the proof. You made almost the exact same post across multiple subreddits claiming your 11 year old was learning multiple programming languages. If he really is - kudos to you both. But I’m not holding my breath. And if you really do have a kid. I feel terrible for him. He has a horrible father.
"I feel out of my element, and tbh, like I can't do this." - This should be the motto of the software development, been doing this shit for 20 years and easily 50% of the time I feel like this. You don't conquer a mountain by staring in awe at the summit you do it by keeping your head down and putting one foot in front of the other.
They were added _to the specification_ at the same time. But generators themselves were first introduced in 2006, by Mozilla, as a non-standard extension included in JavaScript 1.7. They were ignored by most for many years. Promises were introduced in the JavaScript world much later, around 2010-2011. Maybe this is what 4spooky6you meant. Other than that, yes, they do _not_ work in competition with promises.
Looks great man, gj
Solid default choice for 2D canvas graphics. Basic stuff works great and the extra stuff like effects and filters are very convenient.
@babel/polyfill is mostly deprecated, read up [here](https://github.com/zloirock/core-js/blob/master/docs/2019-03-19-core-js-3-babel-and-a-look-into-the-future.md) and [here](https://babeljs.io/blog/2019/03/19/7.4.0) on how to use corejs3 for your polyfills
 [https://leanpub.com/javascriptallongesix/read](https://leanpub.com/javascriptallongesix/read) &amp; [https://github.com/getify/You-Dont-Know-JS](https://github.com/getify/You-Dont-Know-JS)
Can this be combined with async await? Can expensiveCalculation be async in that case?
You sound fantastically skilled for a 20 yr old. I teach CS in university and you sound like you’d be better than most of our grads. No one in industry with any sense would expect you to know everything. It sounds like they’ve seen your potential.
In this field everyone is constantly learning new skills and concepts. Don't be afraid of not knowing because the great thing is, you can learn it and you have the will power to do it. Being the youngest there just shows they believe in you or else you wouldn't have got the job. Now go and smash it. Don't forget the semi colon ;)
Auth with passport, bcrypt and jwts, but instead of doing it with mongoose and mongodb like every authentication tutorial out there, do it for mysql instead
Maybe I'm missing something but it seems like you aren't comparing the same things... Sure you can write fetch('http://mysweetap.io/getWhatever') .then(doMyStuff) .then(console.log) But it feels like you wrapped the async await code in an arbitrarily poorly written/named function... In any reasonably complex program both of those code snippets would likely be more complex, reusable, and already live in functions, which could be marked as async without needing to wrap it again? For a simple program, this feels like a more fair comparison. async function main() { const myStuff = await fetch('http://mysweetap.io/getWhatever') let result = doMyStuff(myStuff) return console.log(result) } vs: function main() { fetch('http://mysweetap.io/getWhatever') .then(doMyStuff) .then(console.log) }
Sorry responded on my phone and code formatting didn't really work out hope it's still readable
 const lotsOfAsyncBullshit = async () =&gt; { // you can put them in an array... const promises = [ getSomeThing('one'), getSomeThing('two'), getSomeThing('three'), ] // or more likely, map them from an array or loop and then... const responses = await Promise.All(promises); // ... do some shit with these things ... return result }
I did such an comparison of JS throwing Exceptions or callbacks and one about Array vs Map performance. It really is quiet fast nowadays.
&gt;I'm the youngest guy there (20) Dude, having an impostor sindrome at 20 is a sign that you're way ahead of most of your age-mates :)
One of my favorite things to play with. [Make sure to check out their actual website for some examples and docs and stuff.](https://www.pixijs.com/)
Hi /u/WeebsOnCollege, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
No, you are lying again. I did not make the exact same post other than it was to show he did a different game in a different programming language. I discussed my teaching methodology several times. It's a simple four point program which teaches how to print, input, if-then-else and do random numbers (more or less) working into a MVP number guessing game. If there's something you don't understand you should ask. Being a dinglebat and following us around various newsgroups like the reddit police was never really a thing. That was just you jumping to an unwarranted conclusion. BTW, everyone who actually knows us thinks I'm a great father. You don't really get to say anything because you don't have any credibility. Maybe if you asked some questions, hung around, got to know us a bit, things would be different. You are just a random troll who did a good job assassinating a decent thread. You know, the part of the internet that taught us unmoderated chat forums were destined to fail.
OK, let's accept it's not desirable - I would tend to agree. My suggestion then would be to write a mapping function that turns API responses into client side types, but call it explicitly as part of the request cycle - don't use something like Redux middleware. It drives me absolutely spare when I first visit a codebase and it isn't possible to reason about how network requests are being called - especially when the use of middleware also obscures the exact route and parameters being used. I've lost so many hours to murky Redux middleware chains and overly clever event systems where none of the functions are called explicitly and things are just "hung together". If you go down this route, another thing I would have the mapper do is narrow API responses into both error and success types, or wrap them in Result monads for pattern matching further down the line. That way you're not just renaming keys but giving your client richer objects to reduce further boilerplate.
This and Greensock are my favourite things
The C-style for loop that Douglas Crockford and JSLint is very fast. [The fancy functional forEach/map/filter/reduce functions that everyone tells you to use](https://jackmott.github.io/programming/2016/07/22/making-obvious-fast.html), not so much (presumably because of the closure they create).
Eloquent JavaScript is pretty good but probably will be a little hard for a beginner. freecodecamp is nice but the required hours to complete a module are on the high side. I used Eloquent JS and MDN resources when I learned js. Functional Programming in JavaScript is also pretty good but I would read it after having a firm base in the language.
Of you want to learn all about OOP go build a subset of Dwarf Fortress.
Who is talking about promises? When there were no promises in JS and I had tons of callbacks I never had "callback hell" either. Because I wrote "flat" code, not nested code, using named functions as callbacks, not anonymous inline functions. This disconnects the way you lay out your code form the way it is run (run: in a hierarchy, written: flat, i.e. call hierarchy is not reflected in the way it is written) but that is the same with any method but actual inline callbacks.
Recently I couldn't figure out why my websocket endpoint wasn't connecting, turned out I used *wss" instead of "ws" when I specified it in my code. Took longer than I'll ever admit to figure out. I was using AWS for my server and I thought the problem was in my AWS config. I wasn't using encryption because for dev purposes it wasn't important.
How about every time the service goes down the offender has to get a single letter tattooed on their body but the rest of the team gets to vote *where* to put it and *what* letter it is. Bonus points if it's done prison style.
Well dependency injection and OOP is essential to clean and testable architecture in most languages, JS included. If you'e not an expert at it, you're objectively a beginner programmer, no matter how many decades you've been programming. Expertise comes from studying your craft, not doing the same entry level stuff over and over for years. That's how you stay a beginner for years.
Now try it in IE and Edge.
Yes, you can evaluate any code there and promises.
https://jsperf.com/myforeach4945gh49g for .. of blasts the standard for loop. I would argue, though, that for most loops, the loop body is way more expensive than the iteration process itself, so it wouldn't really matter which style you use.
Uhhh....
Yes I agree most of the time it doesn't matter. I just thought it was interesting how close to native speed it was.
\&gt; the standard for loop beats for..of by a small margin 40% for me, I wouldn't call that a small margin
This is it boys! The urge to write everything in one line seems useless when you minimize or use closure compiler in the end anyways.
This is why we can't have nice things.
https://imgur.com/a/dfvhh23 I ran it like 5 times, and this is the result I always get ¯\\_(ツ)_/¯
You dropped this \ *** ^^&amp;#32;To&amp;#32;prevent&amp;#32;anymore&amp;#32;lost&amp;#32;limbs&amp;#32;throughout&amp;#32;Reddit,&amp;#32;correctly&amp;#32;escape&amp;#32;the&amp;#32;arms&amp;#32;and&amp;#32;shoulders&amp;#32;by&amp;#32;typing&amp;#32;the&amp;#32;shrug&amp;#32;as&amp;#32;`¯\\\_(ツ)_/¯`&amp;#32;or&amp;#32;`¯\\\_(ツ)\_/¯` [^^Click&amp;#32;here&amp;#32;to&amp;#32;see&amp;#32;why&amp;#32;this&amp;#32;is&amp;#32;necessary](https://np.reddit.com/r/OutOfTheLoop/comments/3fbrg3/is_there_a_reason_why_the_arm_is_always_missing/ctn5gbf/)
good bot
Why would this be a surprise?
100% agree. You clearly want to perform well and improve your skills. I can't think of anything else I'd rather have in a Jr - mid dev. Everything else can be taught. Your previous experience is a reflection of their poor management, not of your capabilities. I've seen this a number of times, and it drives me crazy. When you hire a less experienced developer, especially one who doesn't have any experience in some of the technologies you use, there's an implicit promise to help train that developer up. This is a critical part of your career, and companies like that can do unimaginable damage to the individual, and to the industry as a whole. Driving potentially talented developers into other fields, or discouraging them to the point they turn into depressed, underperforming wage zombies. It disgusts me.
Programmer time &gt; runtime It's faster to read the semantic iteration methods.
Programmers are so nice
In the case of filtering, or more complex chaining generators are lazier then the standard Array methods. For instance if you have a map, filter, map, and find chained together the result is to completely apply the first map, then completely apply the filter, then the second map, then the find. If you rewrite this with generators and for...of statements you pull each value through the whole pipeline. Generally this is over optimizing so don't worry too much about it.
Actually is not 'that' fast. `data = Array.from({ length: 10000 }, (_, i) =&gt; ++i)` `const sum = (data) =&gt; {` `return data.reduce((t, n, i, v) =&gt; {` `return t + n * n` `})` `}` `const sum2 = (data) =&gt; {` `let sum = 0` `for(let i = 0; i &lt; data.length; i++){` `sum += data[i] * data[i]` `}` `return sum` `}` `console.time('time')` `sum` `console.timeEnd('time')`
I wrote a function that extends the animation of this [treasure chest event](https://gfycat.com/AntiqueOpulentArgali) beyond 3 frames, and another function that lets it create the coin object dynamically during gameplay and animate it as well. &amp;#x200B; This is all in a plug-in that expands the capabilities of the [RMMV](http://www.rpgmakerweb.com/) game engine. &amp;#x200B; It isn't much, but I am pretty proud of myself- I only started learning JavaScript a month ago for creating this project. &amp;#x200B; Thanks.
If your object was myObj = { propThatDoesntExist: somevalue } Than myObj.propThatDoesntExist would be somevalue. But since there is no key ‘propThatDoesntExist’ in your original myObj = {} (empty object) therefore it’s undefined.
I ran it like 5 times and always got 38-40% slower. Is that a reason to downvote?
 const myObj = { foo: 'bar' } // the property foo is defined, and it has a value of 'bar' console.log(myObj.foo) // &gt; bar // the property baz is undefined console.log(myObj.baz) // &gt; undefined // the foo property is defined, baz is undefined, literally // it's not looking up a value, it is the absence of value
I didn't downvote
Yeah, most of the time we should use the other methods, but it's always good to know how to get blazing fast performance Basically, programmer time &gt; execution time, until it isn't...
In Safari the for loop is about 20x faster than for of (which is the slowest) myForEach was about 2x faster than forEach https://imgur.com/MzGkCW5
Heyyy
I thought this as well. I manage a team with a few large code bases, and I've always pushed for clean, readable code. Single-purpose functions, all that good stuff. It's been difficult encouraging the team to use promises, because we already have very clean and readable callback-driven solutions. Thank you for further confirming my suspicions that not everyone situation requires translating your code to async/await. This comes up from time to time with peers, and I feel lazy or in a "stuck in my old ways" type of situation when people see that we're still using callbacks in new code.
I don’t see why it would make a difference. Performance is inevitably better in imperative, explicit code than and abstraction, regardless of the engine executing it.
It’s also vastly less error-prone. No off-by-one errors on iteration end, etc.
I use Pixi to teach my User Interface Programming students how to build interactive displays and touch screens.
What if ArrayOfNames comes from a websocket and there might be 10 million of them but most of the time the consumer will look at the first few, find something it needs and then quit. So ArrayOfNames is really a stream and you rewrite to use a generator which processes the stream one at a time instead of all at once.
It means you can't rely on that speed in a real world project (assuming you run that kind of code on the client).
Story time: I joined an online news company as a technical lead, in my 3rd round interview they asked me a lot about API design, which was heavily based around REST and HTTP, I gave them answers about more generic API design (having more experience in UI and embedded systems). They hired me, as they obviously saw that I had potential for them. I then spent a fair few months feeling completely out of my depth about k8s and the complex stack they had put together, so many meetings where I did understand the terminology. However, I knew I didn't know, so like anything I put in the research time, and things then began to click. Turns out they didn't need k8s, or the complex stack they put together, they needed functions as a service, and there tech stack was vastly simplified as a result. So the two takeaways here: Your hired for your position, and this company obviously sees your potential in that you are keen to learn, so make good on that assumption and put a bit of research time in. The previous contract was unfortunate, a whole new language is a bit of a stretch to expect for a 6 month contract, so I would ignore this (but well done for getting it). It sounds like your manager encourages learning, so it should be ok for you to say that you are doing this. As others have said, patterns/tech come and go, make sure you understand the trade offs of any decision that is pervasive through a tech stack i.e. learn what problems dependency injection is meant to solve and see if this matches up with how it is used, for example: the jest testing framework allows you to mock import dependencies which helps to solve the testability problem, so I would be looking to see if any of the injected dependencies have alternative implementations that are swapped at runtime. Finally, believe in your ability to change and adapt, and not what you know right now and you'll go very far.
TDLR: always use for loop
This was one of the resources I referenced when I spoke to other devs about generators and usefull patterns around them. https://jakearchibald.com/2017/async-iterators-and-generators/ From what I've done myself, I tend to never reach for generators they never come up when thinking in the patterns I already know. I do very much like the async generator pattern for handling streams of data. There've been moments when I need to fetch large complex data structures (DICOM data, in a web app) where I wanted to use them, but found the more ordinary "while loading pattern" the thing I reached out for. I would do something like this more often than.... const blockListIds = fetchBlockListIds(); this.setState({blockCount: blockListIds.length}); for (var i = 0; i &lt; blockListIds.length; i++) { const block = await fetchBlock(blockListIds[i]); this.setState({blocks: [...this.state.blocks, block]}); } Than something like this... async function* getBlocks(ids) { for (var i = 0; i &lt; ids.length; i++) { yield await fetchBlock(ids[i]); } } const blockListIds = fetchBlockListIds(); this.setState({blockCount: blockListIds.length}); for await (const block of getBlocks(blockListIds)) { this.setState({blocks: [...this.state.blocks, block]}); } I really like the later over the former. It helps separate the api fetch/threads into an API object of your choosing, and dictate UI state updates in a loop with some lesser concerns^1 they make the most sense. As always there's ways to get that similar feeling of the latter. function getBlocks(ids, blockHandler) { for (var i = 0; i &lt; ids.length; i++) { blockHandler(await fetchBlock(ids[i])); } } const blockIds = fetchBlockListIds(); this.setState({blockCount: blockIds.length}); getBocks(blockIds, block =&gt; { this.setState({blocks: [...blocks]}); }); And this brings me to my ultimate conclusion, for us when writing code at the bottom of the stack, when your code is between the api and the customer, the last leg - I realized we might never choose to use these patterns, because they start to feel long in tooth. BUT if our API writers and back end people are doing this, giving us generators and async generators instead of callbacks (#3) ... or manually requesting each block (#1). We get to write nice looking, short loops that let us drop some concerns. ^1 - albeit this is a bit of a contrived example, being that the lessor concerns removes 1 full line of code... GASP! so much efficiency!. :P But so far, that's been my answer, if I'm writing API's for myself/my team, I just tend to forget this stuff exists and it's not a "top 10 insane JS tricks to make your coworkers jealous!" it's more like - If I were writing a library that needed to handle an API surface, not requiring you to give me a callback, but allowing you to have a block of code run in a way that feels like you did... that's swell.
React Native would be a good start
Definitely profile profile profile. It can also be a matter of altering your thinking about something algorithmically. A naiive approach to finding an element in a list would be to loop until you find it then break out. A better approach in that case would be a binary search or a heap
Have you tried mobile development with React Native? How would you rate your experience? What learning materials did you use?
Uhhh... no. More important to write easy-to-read code
Microbenchmarks are literally useless, and often give wrong results. https://www.youtube.com/watch?v=65-RbBwZQdU https://benediktmeurer.de/2016/12/16/the-truth-about-traditional-javascript-benchmarks/
The better question is - why must it be a choice between one or the other? Why can't ".forEach" be (at least) as fast as "for ... of", for instances of standard Arrays? Is it simply s matter of priorities (it's possible, but the V8 team has bigger fish to fry at the moment), or is there a technical roadblock (the very nature of .forEach makes it difficult/impossible to optimize)? I'm asking because benchmarks using similarly "functional" methods in Rust apparently have a zero % performance hit (https://jackmott.github.io/programming/2016/07/22/making-obvious-fast.html). I'm not trying to do "X language vs Y language" btw. I am genuinely curious.
JS (mostly experienced with V8) is very fast these days. I'm doing some serious real time sound synthesis these days (basically doing LOTS AND LOTS of math 44100 times every second in very tight loops) and the performance is simply mind blowing for what it is.
Hi /u/therealcoderss, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
If you wanted blazing fast performance, you probably wouldn't be using JavaScript. Use the right tools for the right job.
Hi /u/rangelstoilov, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
What’s the problem with for loop readability?
Hi /u/Mydrax, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/MarvelousWololo, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/aksn1p3r, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/invictus778, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Worfsfeatherduster, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/psvj, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Yuk
Hi /u/paulhodel, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Cheers. Good to know. Should maybe have a sticky at the top of your subreddit.
You can also use a reduce to achieve what you're doing.
You must be a joy to work with
Why do we care if this has your endorsement?
Unfortunately on the web there is not really an alternative
[removed]
After 30 years in IT, development and now devops, I'm convinced imposter syndrome is a sign that you care and you're paying attention. Many people *think* they are experts, but very few are. Knowing you're not an expert is way better than wrongly thinking you are.
WASM.
Generators allow lazy processing of items. This can reduce memory usage when dealing with large items (my use case: processing a giant XML file).
this is the correct advice and we can all go home now
rename let response to let outerResponse and save the whole inner response object to outerResponse
How would that matter if we're talking about Node JS which is executed on the server?
&gt;response = response\[0\].location; That's what I was doing with this line. I defined response (let response = null) at the top of the scope of the function and reassigned it within the nested function.
I’ve read that it’s actually slower to execute than js
``` const list = [1, 2, 3, 4, 5] for (let i = 0; i &lt; list.length; i++) { doSomething(list[i]) } list.forEach(doSomething) ``` As someone else pointed out in another thread, with the standard loop I have to look at - The start value of the iteration variable - The end condition - How the loop is being incremented / decremented - How we're using the iteration variable inside the loop body The forEach makes assumptions about all of these, so in cases where it's appropriate (which admittedly, is not all the time) those assumptions allow you to not consider all those things and just think "something is happening for all the elements of this array".
That's the state of our industry sadly, and it's largely to blame on the ADHD nature of "front-end" (aka Javascript) web development. I've been programming for 20+ years, and I started in COBOL on IBM mainframes and then Perl/C++ CGI for Web Development back when Netscape Navigator was the trendy web browser. Shit just changes too fast and you struggle to feel like a master in the technology stack you've blindly chosen or been thrown into. It would be like engineers building transportation bridges with new, unfamiliar and potential unproven materials and techniques every year just because they were available. Oh well, that's just a part of how things work. Either find a slower moving company that doesn't change it's technology stack like most people change their underwear and dig in (COBOL programmers still exist!) or prepare to spend a significant amount of time feeling clueless and GOOGLING for the answer on StackOverflow. Can you believe there was a time when programmers could basically sit in front of a text editor or IDE and just write code from memory without having to use Google or Stackoverflow? TLDR: Don't worry about it. It's part of the job nowadays. Do your best to "learn" the latest front-end framework before everyone else moves on to the next flavor of the month. This job has gone from mastering one or two languages really well and feeling confident in your work to rushing to learn just enough of the syntax so that you can Google for answers on StackOverflow.
Excellent advice. Thank man
You don’t , you get used to have the same variable names (like i and j) Now go ahead and use await inside forEach..oh you can’t !
Following this sub-reddit's policy, here is a complete write up with vanilla source code on the process. No frameworks. Basically, I just create a main class and build everything out from it. I have a simple UI updater that just uses innerHTML to update the view. Tutorial: [http://www.javascriptteacher.com/how-to-make-flex-layout-designer-in-javascript.html](http://www.javascriptteacher.com/how-to-make-flex-layout-designer-in-javascript.html)
change this line \`\`\`let response = null;\`\`\` to \`\`\`let outerResponse = null;\`\`\` and also change this line \`\`\`response = response\[0\].location;\`\`\` to \`\`\`outerResponse = response;\`\`\` then log the outerResponse object
Thanks! Yeah, because I’ve mostly been a full Stack JS dev, I haven’t really dealt with OOP like fundamentals like dependency injection. I’ve been studying it, watching videos and reading about it, and the concept seems relatively easy to grasp. It just feels much bigger than it is seeing hundreds of files and trying to figure it out from there. Tuesday should be a bit different since I’ll know the concept a bit better.
$5 says that same poster would physically cut you for choosing emacs over vi or vice versa. We programmers are nice ... until you bring up a holy war ;)
Began converting **[artificial intelligence in Latin language](http://ai.neocities.org/Abracadabra.html)** into **[artificial intelligence in Russian language](http://ai.neocities.org/Dushka.html)**.
&gt; let outerResponse = null; &gt; &gt; outerResponse = response\[0\].location; &gt; &gt;console.log('Outer Response'); &gt; &gt;console.log(response) &amp;#x200B; Still comes back as `null` because that would just essential be changing the variable names. The logic still is the same
Assign response to your await, then return the data you want from it. Should solve your issue here.
Does geo.find actually return a promise? If so I wouldn't expect you to need the call back, and if it doesn't, then you're not actually waiting before logging. If assume it does not, so you need to use ` await new Promise((resolve) =&gt; ` and put your current code in there and call resolve when you are done.
Fair enough, though one browser’s early support for a deprecated version of generators definitely doesn’t back up what he said. Promises were popularized long before they were added to spec, whereas generators were pretty much complete unknowns in the JS realm until browsers and runtimes started adding support for ES2015 spec features.
WASM is still relatively nascent. It'll be a little while longer before "Just use WASM" is a valid answer.
I wouldn't a for loop is a problem, but once you start tacking on common functional loop patterns with state management it can get a bit complex. That's where the "easy to read" comes in for forEach, map, filter, etc. I would definitely say it's just "easier" though and your particular use case may not work with the performance hit of using easier loop methods.
My product has some real time, processor intensive bits, and must support IE11. What do?
I'm with you. If it's because forEach creates a closure for each iteration, I feel like the VM should be able to detect when a closure is unnecessary and skip that step. Does for...of similarly slow down if we force it to create a meaningless closure? For example: function myCall(fn) { return fn() } function doTheThing(arr) { for(let val of arr) { myCall(() =&gt; console.log(val)) } }
Yeah but even then, I’d be surprised if any real life performance issue could be improved in a meaningful way by switching to for-loops.
&gt;No other language pattern -- including async -- handles pausing nested loops. This is probably true, if you’re confining the definition of “language pattern” to native JavaScript primitives. But there are definitely several event stream patterns that can achieve pauseable nested loops. There are libraries that can achieve that without native generators for the sake of browser compatibility. But otherwise yes, generators are very unique and cool!
It's not responsive lmao
Nice work, Apple.
If you're working with CPU bound tasks [like a pivoting engine](https://github.com/finos/perspective), then WASM has major benefits. But you pay for it in greatly increased development and deployment complexity. If you need to shuttle data to WASM, do as much as you can to send it in bulk, in binary. Apache Arrow is great for column-store tables, and surprisingly fast to serialize/deserialize. If you need to send a bunch of small, string payloads or use a managed language, WASM is much much worse than JS. I've seen a 10x slowdown running MonoWASM vs Mono native for a C# codebase. For managed runtimes, this should improve once WASM adds opcodes for garbage collection and virtual memory, but that won't happen soon.
Loops with millions of iterations? Yeah that happens all the time...
&gt;holy wars DEUS VIM?!
Who would have thought! If only there were a million ways to deal with asynchronous code.
Because it is very customizable. Webpack is a great tool if you can invest time into learning it. It's very frustrating at times though, but once you get it right it's great.
I can read code that doesn’t rely on mutations several times faster than code that does. I don’t need to pay attention to temporary iterative variables, possible off-by-one mistakes, etc. I’m not saying never use a for loop, but your blanket statement to always use it is just 🤦‍♂️
Hi /u/mx316, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Released a [new episode](https://github.com/BuildingXwithJS/bxjs-weekly/blob/master/links/19-21-Episode-64.md) of [BxJS Weekly](https://github.com/BuildingXwithJS/bxjs-weekly/) [podcast](https://www.youtube.com/playlist?list=PL_gX69xPLi-mqs5BJe-xPnOPT6K1Y5_ZQ) with best javascript news of the past week :3
Heavy OOP and dependency injection makes me think their codebase just sucks. I would hate to work on that by the sound of it.
It's a `justify-content` editor, calling it a *flex editor* is kind of a `stretch` What about all the things that it should do to be called a flex editor ? Let's say `flex-basis`, `align-items`, `align-self`, `flex-direction` etc ...
Is that because you work for endtest?
Some might say "suspiciously" fast.
&gt; one browser’s early support Take into account it's 2006. So that means: a. browsers are IE at ~90%, Mozilla at ~8%, Safari and a couple more sharing a 2% quota. And b. it's ES4-fiasco era: There was no leadership, consensus, or any advancement at all on the language except for Mozilla doing as they saw fit adding to _JavaScript_.
I wouldn't be surprised if half the people commenting never actually used jQuery. &amp;#x200B; I dont blame you because jQuery makes writing JS quicker and easier and cleaner. &amp;#x200B; I'd rather see: $('#element) &amp;#x200B; Than dozens of document.getElementById(“”); &amp;#x200B; One thing that vanilla shills wont admit is that jQuery allows you to write cleaner code. The word salad that JS vanilla is made of is simply unnecessary but the powers above don't really bother improving JS readability.
Skills evolve over time for people eager to learn. This is the actual skill that they may look after, and you got it. In my company we are hiring mostly upon the social aspect and integration potential with the team rather than technical skills : You cannot manage a skilled d***head, but you can count on a passionate and friendly beginner to grow. Anyway we are all imposters, just don't tell the management :-)
When you're setting response you're setting the inner response, which is not the same as the outer response.
https://github.com/bigmountainideas/google-geocoder/blob/master/lib/geocoder.js#L105 You can see in the GitHub link above that `geo.find` does not return a promise so the `await` isn't actually waiting for the find to complete. You need to create your own promise. I would put the get location functionality into it's own method so you can easily call it and extract some of the crazy promise/async await stuff out on its own. ``` async function getLocation(gecode, address) { return await new Promise((resolve, reject) =&gt; { geocode.find(fullAddress, (err, response) { if (err) { reject(err); } console.log('inner response'); console.log(response[0].location); resolve(response); }); }); } ``` Afterwards you can easily call it using `await`. ``` response = await getLocation(geo, fullAddress); const { location } = response[0]; console.log('outer response'); console.log(response); ``` Hope that helps!
that's awesome to hear, thanks
How does it compare to forEach?
 [https://homehost-demo.herokuapp.com/](https://homehost-demo.herokuapp.com/)
Hi I'm interested to learn to implement what you recommend here, are there any articles you recommend where I can look at some examples of this?
Don't worry, just learn what you can. THEY knew who they were hiring. You are 20 and nobody really expects you to do everything in a perfect way. And ask for more money next time :-) .
Honest question: when does this actually matter? It's not like looping through 20000 items takes longer than 5 milliseconds anyway. What giant arrays are you guys looping through, and why?
That's not where you'd be using async / await syntax. You can `await` any function that returns a promise. export function fetchData () { return fetch('/your-endpoint').res(res =&gt; res.json()) } export function doSomethingAsync () { return new Promise(resolve =&gt; { setTimeout(resolve, 2000) }) } &amp;nbsp; import { fetchData } from './whatever' async function app () { const data = await fetchData() // do something with data as soon as it's available } app()
They are using typescript, so that plays into it partially.
I replied the wrong thread, it was supposed to be the other below
\`fetch\` is making your function impure, not \`async/await\`... hahahahaha, great try.
This honestly just sounds like a terrible place to work. I would rather get them on board with a solid framework than work without - you're going to have nothing but nightmares trying to onboard people with whatever custom nonsense results.
Oh I get that for sure. That said it wasn’t uncommon for one browser to pioneer proposed features. For instance, we got a whole era of web components inspired UIs (which has continued of today) from Chrome’s early and heavy push of the standard that only recently was deprecated. Remember when Polymer was more of a concept / polyfill for what Google was hoping other browsers would adopt as a standard, and not just another UI framework? Angular built upon the same idea too. Polymer was the standard, and Angular was the framework that would layer over the standard, instead of the 2 becoming somewhat competing frameworks. I recall downloading an Adobe built version of Chromium about 6 years ago just to test out their proposed CSS filters that matched Photoshop, and I think only base support of some of those filters were added around 2 years ago. I was years away from being a professional dev in 2006 and JavaScript felt like a tool and not a language then. I don’t think I recognized it as anything more than that until early 2010’s, thanks to ES5. I’m glad we’ve seen a shift to yearly Ecmascript versions following ES6 though, since those early years of ES5 were a cross-browser hell still.
&gt; Thanks! Yeah, because I’ve mostly been a full Stack JS dev, I haven’t really dealt with OOP like fundamentals like dependency injection. I'm not sure you really understand the concept, dependency injection is simply making your functions "pure" and using interfaces so they are more testable, reusable and deployabe. All good JS code use dependency injection so being a Full Stack dev is not an excuse for not understanding the concept. Same thing with OOP. All JS code uses constructors, methods and instances in one way or another. It really makes no sense to say you haven't been exposed to it because you're just a JS developer.
One off errors and wrong comparison for starters.
While I haven't used them too much in *JS*, coroutines are a big deal in Lua. If you can imagine an event loop based around coroutines/generators where you have a "schedulers" cycling through an array of generators to allow each to run their task for a while before yielding back to the scheduler who moves on to the next task etc etc. In Lua this is a nice way to handle stuff like reading files/making http requests somewhat asynchronously.
It could matter if you work somewhere with millions and millions of users, and you have to loop through a massive database. Otherwise, it probably doesn't matter.
Foreach is far slower than for
Lol, and this is why backend devs roll their eyes are frontend people. Those things you are complaining about are very valuable if you only want to loop through all items except the first, last, half, etc. My question is how do you do that and manipulate some each item before you call your doSomething method in the .forEach?
I guess I should rephrase, I have dealt with OOP fundamentals, and dependency injection, just not to this extent. And because they are using Typescript, there are lots of layers of abstraction that I’m not accustomed to from my previous work history. Fundamentally in that sense, I am somewhat of a beginner, because a lot of application similar to this one do not use dependency injection, because usually the application is built in a functional content, not a DI context.
Have you looked int lit-html and lit-element? They're lightweight alternatives to React--conceptually they're similar, but rely only on native web technologies. I've only used them for personal projects, but they're fast, fun, and intuitive.
You can use a SPA and support IE. I guess the disadvantage is that nobody really uses vanilla JS for complex apps. You’ll end up building your own mini-framework, and it probably won’t perform as well as some of the popular frameworks out today. I guess it depends on your use case. The biggest advantage (imo) is complete control over the way your application works and the learning experience.
I suppose it could yes.
that would be better left for the DB to handle though.. having millions and millions of users in memory.. yikes
When data processing, yes. Processing a simple 1-megapixel image takes 1 million operations on each of 3 channels.
But if you're looping through a million users... You did something devastatingly wrong. Not trying to be a know it all or an elitist, I genuinely want to know when we should actually care about these tiny differences.
&gt;My employer has a no framework (except for bootstrap) policy, because the effort they had to put on upgrading Ruby on Rails in the past, the lack of backwards compatibility really traumatized them. I realize this isn't really a helpful answer, but the first advice that comes to mind is... start thinking about switching jobs. Management imposing nonsense technical decisions because they think they know better then their actual engineers is a huge red flag, and if you're a dev with any amount of experience, you honestly don't have to put up with this idiocy. That being said, what you could do here is implement a solution that still tries to maintain some semblance of best practices, without outright using a framework. For instance, instead of PHP+HTML soup, you could use PHP with an actual templating engine (or do the same in any other serverside language), and lean towards using popular libraries whenever you can, rather than reinventing the wheel. That should give you a result that's at least _somewhat_ maintainable.
The actually issue is that the callback hasn't fired. The callback and the `geo.find` functions do not return promises, so you can't `await` them. He is initializing the variable outside the callback, so when it is set it is setting the outside variable too. You're thinking of closures, but that is not the way it works. Child functions can see variables from the outer scope and when you change the value of an outer scoped variable from inside a child closure it will change the value for the outer scope.
Polymer was deprecated and people are encouraged to use LitHtml instead. I would use neither, polymer is poorly documented and I'm quite sure the same is true for LitHtml. There are other web component libraries that you could consider, like skatejs, stencil or reliftHtml. Maybe you can even convince youraelf and your team to use svelte. It's more like a compiler than a framework and is gaining a lot of traction at the moment.
&gt;Can you believe there was a time when programmers could basically sit in front of a text editor or IDE and just write code from memory without having to use Google or Stackoverflow? When they were walled in by O'Reilly books.
Get a new job.
Thanks, joined the sub.
Fork react or Vue ? - both are stable. Personally I'd find another job however.
Obviously you don't need async/await at all. It is an alternative. Not sure why you went on about "pure functions". Do you really write all your functions in this way? I doubt it. I have a useful case you did not mention. I sometimes use await within a for loop of my async function as a way to wait on the result of the current iteration before moving onto the next. It's useful if I have to loop through some list of data where each index contains some inputs to the function I'm calling await on. By the time the for loop ends, I know precisely when I have received a result for each element in the array. Finally, I can process some logic on the array of results after my for loop. I'll comment on your three final points where you mention you see some utility in making use of async/await. 1. You claimed that within only "certain kinds of test functions, you may get a little more readability." First I'll say that you didn't describe what that was supposed to mean, so I apologize if what I'm about to say sounds confused: what you said is hard to believe. You claim that async/await can improve readability in this one case, meanwhile it fails to improve readability in all other cases. You say this as if the actual code in the text editor would appear so drastically different in this one case when compared to all other cases you had in mind. But I'd bet if you were to actually write out even the simplest of snippets of code for each of the supposed cases you have in mind, you would discover that this single case isn't any more readable than the others. Please provide the simplest example you can of this so-called "test function", and then we can compare it to the simplest example of a function using async/await. I want to see how much more readable it truly is. Otherwise you made a moot point and we are just wasting our time. 2. What would make you believe that you would not care about the result of an async call? This argument doesn't make sense. What's stopping someone from caring about the result of the async call? 3. The function being awaited on would resolve the Promise and return it to the async function. It's not cute or a gimmick, it simply works.
You should look at lit-html, stensil or svelte
While he did indeed define `response` in the outer scope, he also named the second argument to the callback as `response`. This will _shadow_ the outer variable and won't be reachable. Think about it, in a line such as `response = response[0].location` how would the JS engine know that "the first `response` is meant to be the outer one, and the second is meant to be the inner one"? So while it may be true that the callback hasn't fired yet, the problem cifou and barrtender mentioned is still present.
Step by step.
Your employer sounds hilarious and shitty.
&gt; My employer has a no framework (except for bootstrap) policy, because the effort they had to put on upgrading Ruby on Rails in the past, the lack of backwards compatibility really traumatized them. May I assume that salaries top out at around 40k at your company?
&gt; Any SPA Data relies on storing data in localStorage which is considered in unreliable in IE. Nope. That simply isn't true. &gt; WebWorkers are not well supported in IE/Edge. These also are not a requirement of a SPA. You don't have to use them at all. &gt; Managing authentication tokens for partial page views in my scenario would be a difficult to handle. You need to be more specific as to why your scenario is more difficult than other ones. As a side not are you sure you are not talking about a progressive web application (PWA) as opposed to a single page application (SPA)? Because your questions don't make sense for a SPA, but they do make sense for a PWA.
To be fair, React is not a framework. I get that it is largely conceived as a framework, but you may be able to get around that. You can import React and ReactDOM literally via cdn and use them without JSX or ES6 if you really wanted and your boss wouldn't (technically speaking) be able to complain, they are just JavaScript libraries. React starts behaving like a framework when you use it within the usual (opinionated) ecosystem it's in, which implies JSX, ES6, Webpack and so on.
I prefer https://yoksel.github.io/flex-cheatsheet/
or pixels, edges/vertices/surfaces, particles...at 60fps. then suddenly it matters. **a lot**.
Magic Beans - https://marketplace.visualstudio.com/items?itemName=selfrefactor.magic-beans Magic import for any library As soon as I write const c = @.map.rambda(a,b) and save, I will receive ``` import { map } from 'rambda' ... ... const c = map(a,b) ```
Just point then at other successful teams using Angular and React. Google, Facebook, and everyone else.
Thank you! It wasn’t returning a promise. Also, you’re a legend for doing that on mobile 🤙🏻
That’s where my error was. Thank you for your help!
We are in a web/tech bubble, and you have the upper hand as a developer. Find another employer that thinks like it’s 2019.
Javascript's everything is surprisingly fast, for a scripting language.
Eslint would likely help you here.
does not appear to support keyed nodes.
Why don't you just use Firebase Auth?
I think OP should share a little more. It sounds like there are some terminology issues here, and maybe some poor beliefs. Like, OP thinks an SPA using a framework can't run on IE; my product is a Vue SPA and we (unwillingly) support IE11.
You should look at TypeScript. It’s a proper superset of JS, but with strict typing. You’ll need to add a compilation step to get your code into a state they a browser can run, but this step also forced your code to be syntax error free. I’ve been using TS in production for years. I’m happy to give you some pointers. Ahhhh I realize that you’re just learning JS though. I have no experience jumping straight to TS, but if you have experience with compiled languages, this might actually be a nice next step.
They dropped canvas in 5.0, still usable via an extension i believe
React can be used incrementally so you don’t need to upgrade anything to use it. Also the team behind react is very big on backwards compatibility since Facebook itself would feel the pain of migration if it wasn’t
I do that often, but using WebGL which "loops" through the pixels for me, I'm not writing for loops with millions of iterations.
I use both and it doesn’t cost me any more time to use one over the other.
whats the difference to BootstrapVue ?
Hi /u/wmbtxs, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Vootstrap uses a different system of tags. The main idea is to replace Bootstrap CSS classes with extendable tag names. For example, you can type: - `&lt;vt-button-primary-outline-large&gt;` - `&lt;vt-button-primary-large-outline&gt;` - `&lt;vt-button-outline-large-primary&gt;` - any other combination of `primary`, `outline` and `large` keywords All the examples above work correctly. More details in [readme.md](https://github.com/igormatyushkin014/Vootstrap/blob/master/README.md)
Check the console for errors
 \-&gt; Any SPA Data relies on storing data in localStorage -&gt; Point has been I meant Ui relateddata. Let's if I want to allow user to continue from where he had left off earlier I would need a caching mechanism. \-&gt; Regarding web workers, it is better to use them in case of operations that require long polling where the completion of request takes a long duration. During the period I would have to use a worker to manage certain aspects of UI, live/ real time updates. Similar to live scores for any sports. \-&lt; An SPA can be a PWA. I didnt understnadyour point here.
I didn't say can't. I am saying it is unreliable. Promises for example aren't supported in IE but you can make them work using third party libraries.
Is there a specific design pattern I should follow here for native Javascript. I am totally unaware of Design Patterns in JavaScript or is there such a thing?
I'm afraid there are no alternatives. Web-components just wrap a naked dom node, so you're getting into the same problem you came from. The frameworks that tend to drive WC have been the worst offenders when it comes to backwards compat, Polymer especially has been re-inventing itself from scratch multiple times. The WC spec also had drastic revisions. But the major problem with it is that the spec itself is mostly irrelevant, people have ignored it and there is no sign that it will ever be used other than Googles in-house engineers. The spec itself doesn't replace frameworks, nor are you dealing with a good component foundation, it's mostly useless sugar against a problem no one has faced for the last 10 years: css encapsulation. I'm with the others, leave. As a developer you want to grow and learn.
&gt; It's faster to read the semantic iteration methods You say that until the day you have to read some code like that: `filteredFilter = filters.filter(filter =&gt; ...` I don't even know why the guy used filter in there, since it was picking only one element from the array, but I suspect whoever wrote that was having too much fun writing alliterations.
You don't have to store state in Local Storage. You can and it'll be helpful, but you can also derive state from some single source of truth, like asking your API you're using to power it
Hot take: anyone making a new website with serious consideration for supporting IE is part of the problem.
I often find that people experienced in Java or C# find Typescript easier to learn for this reason. Only danger is that it discourages them a bit from getting to grips with the functional programming abilities of JS &amp; TS, because they can get away with making classes for everything like they're used to.
Yeah I know but thats a use-case for us to take a good care of :( :(
[removed]
So even in ES6, you should be using classes over explicitly prototypal inheritance. I work with a C# backend team, and getting some of them up to speed with TS was a breeze (they did have a bit of JS experience though). On further review of your reply though, I see what you mean. Definitely try to go functional with strongly typed TS!
WebGL is a big pain in the butt to program, and it's hard to find developers who can. But sure, people do pretty wild things with it.
It should be possible but optimizing JS is quite difficult and takes a lot of time, due to it being a garbage and excessively complex language. Source: worked on a JS compiler team.
Sure, depends on your definition of real life. It happens to people writing code in real life. Maybe not the sort of code you write.
Yeah I do use classes! Just mean that it can be a barrier to realising how different JS/TS is, when back in the day you were forced to use a functional style or go mad (I remember before Javascript: the Good Parts. Went mad.)
Okay, what's an example of a JavaScript performance issue that could be solved in a meaningful way by switching from higher-level iteration methods to for-loops?
what do you mean?
i do not now what you mean?
I would think anything involving animation might qualify.
Then in those cases you potentially use a for loop... but in the usual case you use the concise and readable foreach...
[removed]
If you're looping through a million users connected to one server, I'd say you have done something devastatingly right.
Hi /u/wmbtxs, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
It sounds like you've decided you don't want to use a framework and just want people here to agree with you. If you're doing this as a learning experience go right ahead, but if this is for a production app I strongly suggest doing more research. Frameworks are designed by people with lots of experience to support lots of use cases. Angular, React, and Vue all support IE already. You may run in to quirks but 99% of the time it'll be easier to work around them than to start from scratch, especially since you seem to have limited knowledge of design patterns and SPA vs PWA and other web technologies. &amp;#x200B; Please take advice and pushback with humility. Ignorance is nothing to be ashamed of; it means that you're unafraid to take on new challenges and expand your horizons. Even after being a professional developer for several years I approach each project as a beginner.
\&gt; My employer has a no framework (except for bootstrap) policy, because the effort they had to put on upgrading Ruby on Rails in the past, the lack of backwards compatibility really traumatized them. I understand. We used to own horses, but they would get sick and foul their stalls. We decided that from that point on, we would just walk where we wanted to go, and plow the fields with hand implements. Absolutely no transportation, not even those newfangled automobiles and tractors. We hear that they need replacing from time to time as well. Speaking of hand tools, we tried buying some new ones, but they broke, and we didn't know how to fix them, so we decided that from now on, we would only use tools we made ourselves. Don't get me started on food. Food we grow ourselves is more nutritious, and we never have the problem of that funny place they call a supermarket being out of eggs.
&gt; I realize this isn't really the answer you're looking for, but the first advice that comes to mind is... start thinking about switching jobs. Or as many have put it... _If you can't change or organization... *Change your organization.*_
This is a bigger deal that it first sounds because browsers create underlying types at runtime to optimize performance. Messing with the prototype chain at runtime has performance costs. Or so I have read. I haven’t personally tested this.
That's a pretty weak argument, tbh.
not sure i get it
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/webdev] [Serverless (cloud-synced) storage solutions?](https://www.reddit.com/r/webdev/comments/bszjno/serverless_cloudsynced_storage_solutions/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
What don't you get here? 90+% of the time when you want to do something for every element in an array you get the concise and readable and hard to fuck up: list.forEach(doSomething) or in Haskell: for list doSomething in the &lt;10% of the time when you want to play around with start values and end conditions you write out the slightly more verbose and less readable for loop. for (let i = start; i &lt; list.length; i++) { doSomething(list[i]) } for (let i = 0; condition; i++) { doSomething(list[i]) } or in Haskell: for (drop start list) doSomething for (takeWhile condition list) doSomething
Pretty much. The new methods are great if you don't run into performance issues with huge data sets or complex complications.
Would definitely recommend ESLint for that particular matter. It really makes JS manageable. Although, coming from a typed language background, you would also find Typescript a lot upto your speed. Although, you might have to invest a little more time into that and at the end, if you're trying to learn JS, you really can't get away without learning JS.
&gt; What don't you get here? I understand exactly what both do. My question to you: since when does the following cover &gt; 10% of loop cases? list.forEach(doSomething) Hint - it doesn't. So complaining about start values, end conditions, etc, is pretty dumb because you can't use .foreach more often than not. Btw - I've been coding professionally for about 15 years.
You have to put your foot down and make them allow a framework or change jobs (or maintain spaghetti code for however long). Frameworks are faster to build in, enforce best practices and promote quality app structure, and allow devs to jump on/off projects quickly.
Lit html or svelte
No frameworks except jQuery, the most useless and outdated of then all. Just lol.
Hi /u/Jeffylew77, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/codlocker, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Or at least 2008.
Hi /u/pointless-ai, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/MrXyfir, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/blitz4, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Aewawa, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
True. Most of us don't notice it until our mid 30's. Just keep swinging away, mate. That feeling won't leave you.
&gt; /r/javascript is for the discussion of javascript news, **projects** In my opinion I was trying to start a discussion about JavaScript projects, but okay, I'll post it elsewhere.
ctrl+f and just type the first few words of the paragraph
Games in js.
I've seen this type of post before, and unfortunately its conclusions are very incorrect. The clock() function on Unix based systems returns a value in *microseconds* **not** milliseconds as Javascript does. This means C is likely faster on the order of 1000x.
Well... do you need it? I see so many people put react for like a simple async loading images. The horror as a freelancer when i see : "looking for a react developer for an ongoing react project".
`list.forEach` when combined with `list.map`, `list.filter` etc. absolutely covers 90+% of loop cases. In all cases using them will be more concise, readable, and harder to mess up then the for loop version. If you really want I can write out all the code comparisons but I'm guessing you already know I'm correct about that. Most of my coding these days is in Haskell, but 90+% of loop cases for me are covered by `for`, `map` `filter` and `&gt;&gt;=`, (`forEach`, `map`, filter` and `flatMap` respectively). &gt; Btw - I've been coding professionally for almost 15 years. Jesus dude this makes you look like such a boner. It also puts me into an awkward position because now I look bad if I don't respond to it, but I also look like a douche if I just flex about shit. But I guess since you brought it up I have about 7 years professional experience and graduated from what is arguably the best CS university in the world.
&gt; Jesus dude this makes you look like such a boner. Not really. Just wanted to through that out there that I'm not some bootcamp grad who just discovered javascript 2 years ago. But you do you though!
Still seems wrong. Could you possibly name a specific example? I'm interested
That's the least important part of my comment for you to respond to. If you really believe what you say I would prefer a full response to everything I said further up in the comment.
Are you seriously butthurt over this? Grow up. Like I said earlier, yes you can make it work with additional es6 code that bloats everything, which is what you think is a "workaround" for basic for loop stuff. Why reinvent the wheel with more complexity? &gt;Cool, got anything to show for it though? I like how you didn't answer this question. Figures.
I read and responded before you edited your comment you douche.
&gt; Are you seriously butthurt over this? Grow up. I'm not butthurt. It's just pretty soft of you to only respond to part, and the least important part, of a comment. Just because it's the internet doesn't mean there isn't some degree of etiquette. &gt; Like I said earlier, yes you can make it work with additional es6 code that bloats everything, which is what you think is a "workaround" for basic for loop stuff. Why reinvent the wheel with more complexity? I don't see how it's bloat, it's just a few function/method definitions. I would agree if we were talking about extra built-in syntax. It also makes the code much more concise and readable and you're less likely to slip up. As a Haskell dev i'm pretty used to not even really having for loops (I mean you do have them via Monads and so on but you know what I meant, not a built in syntax feature anyway). &gt; I like how you didn't answer this question. Figures. You edited your comment after I loaded the page so I didn't see that. Edited though to answer your question.
I released a cloud environment inspector that support both AWS and GCP: [https://github.com/mlabouardy/komiser](https://github.com/mlabouardy/komiser)
Yes, I'm aware of and wanted to use something like that. To be specific, I wanted to create a bookmarklet/some sort of function that would find the text for me. I get that I could easily just save the text on a notepad, but my goal is to be able to automate/create something that can get me to the text with the click of a button.
I've been playing around with ESLint. I like it. I'm using the airbnb profile and it seems to force me to use ES6. As a n00b, which seems odd especially when many tutorials use ES5.1 or earlier, but its no biggie. Using const/let instead of var is likely a habit that's better formed early on in your career. But I still can't get ESLint to solve my problem. Here's some sample code: "use strict"; var app = { objs: [] }; app.objs.push({x:0,y:0}); app.obj[0].x = 10; app.z = 20; My browser tells me that line 6 is an error, but it doesn't complain about line 7. VSCode with ESLint doesn't consider line 6 nor line 7 an error. Something seems wrong with that, like it should at least catch line 6.
Hi /u/labouardy, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Project repository: [https://github.com/mlabouardy/komiser](https://github.com/mlabouardy/komiser)
Well, you used jQuery, so not sure if we can still call it vanilla javascript, but in any case I think it was appropriate given the scope of the tutorial.
1. Swap `console.log` with `return fahrenheit;` etc... 1. [Turn it into a module and package](https://nodesource.com/blog/your-first-nodejs-package) 1. [Create an Express app](http://expressjs.com/en/starter/hello-world.html) that uses your module 1. Deploy to server using [Heroku's free plan](https://devcenter.heroku.com/articles/getting-started-with-nodejs)
5. [Add a React UI](https://reactjs.org/tutorial/tutorial.html) 😆😁
🥉
Everything about the way games are made, really. The whole thing operates in a loop waiting for inputs and displaying visual feedback. Most of the visual feedback has thousands of calculations per iteration of the game loop. You need to do things like vector calculation, collision calculation, sometimes to pixel perfect accuracy. And you want to be doing all of this as quickly as possible, so your game feels snappy and responsive.
For anyone else that's confused: &gt;What does renderless mean? &gt; &gt;With renderless components you'll have full control over markup and styling. tiptap doesn't tell you what a menu should look like or where it should be rendered in the DOM. That's all up to you. There is also a good article about renderless components by Adam Wathan. &gt; &gt; &gt; &gt;No styling by default &gt; &gt;tiptap comes without any CSS. It's a feature – not a bug.
Like I said I’m another post: Safari is becoming the modern day IE in relation to browser support
in what context though? if you're talking about npm packages, they have their dependencies defined with versions optionally, if you're talking about writing your own stuff, you can always make sure you leave stuff backwards compatible, if it's something else, then the solution is something else. i feel like not enough info in your question.
They are my packages... I want to make sure all my internal deps are updated constantly. I have to use packages so that I can share frontend+backend code in some places.
What do you think async calls generally do? They create side effects and/or acquire data. When they don't, I already addressed that: &gt;Maybe you'll say "but what if I'm using a pure function and I'm just using a promise because the function takes a super long time to process and I don't want to block the thread?" &gt; &gt;OK, sure, I guess that could still be considered "pure" in a technical sense, but now you're just burying dependencies to avoid chaining then s, which makes the code less declarative and harder to reason about, while also introducing a bizarre inconsistency where you're using async/await in some places and straight promises in others when just using promises directly accomplishes the same thing in a cleaner way. You're proving my point about bad programmers.
well your Package A needs to indicate that its dependency is, not just Package B, but Package B of a specific version. once you updated Package A, you gotta update its dependency declaration as well. without any specifics, since i don't know what your distribution method is. but conceptually, that is what i guess you're missing in your workflow.
You could dramatically improve the performance of your loop with (for let i=0, k=this.length; i&lt;k; i++) You lookup the length property every loop.
Tiptap is really cool. Needs some more documentation and examples, but the API is great.
its inefficint to count the skills inside of the sort loop. Each hero will be called many times during the sort. Its better if you calculate a the total skill of each hero before starting the sort.
I don't mean to be a jerk but this CSS "Visual Dictionary" is not very attractively styled. Or responsive. I'm sure the information is probably correct, but I expect a site teaching about styling websites to look like it was designed in the past decade. Having said that... Good for you for creating a resource that people are using to educate themselves!
5. [Add a Vue UI](https://vuejs.org/)
While I really enjoy using JS, I can see where you're coming from. The language certainly has its fair share of warts, and they're mostly here to stay in the name of "backwards compatibility". Does "strict mode" not address some of the excessive complexity you're talking about? And if so ... If you could design your own even stricter subset of JS (a sort of "super strict mode"), what current language behaviours would you prohibit in it?
I get closer to your result, also on Windows 10.
You got it, sounds like your new manager is a good one, and that makes me happy! Best of luck out there, chin up and don't hesitate to take time to remember how far you've come already.
https://stackoverflow.com/q/6582233/8037425
Yeah I was gonna say the same thing. Who uses the default styling for links? And the logo needs to be higher quality (and not rip off of Amazon's "look inside"), and not repeated without reason. And the teal is gaudy. And the blue bar at the top needs to go. [This is some styling I did in a couple minutes](https://i.imgur.com/qfreY6X.png) and it already looks way better.
Making links obvious is good design. Even if that means leaving them unstyled.
That's true, but there are many ways to make them obvious and also make them more pleasant. Like what reddit does, just by making them lighter blue (in dark mode). It's just the pure, #0000ff that's bad (in my opinion).
&gt; Obviously you don't need async/await at all. It is an alternative. No one needs it. It's an alternative, yes, but an alternative that only exists to allow bad programmers to feel comfortable and allow them to continue writing bad code. The edge cases where its use can be useful outside of the comfort of bad programmers do not justify its use or existence. This is my point, in its entirety. &gt; Not sure why you went on about "pure functions". Do you really write all your functions in this way? I doubt it. Why would I *not* write all of my functions this way? If there's something ***entirely*** throwaway, maybe. Or for some limited uses in test functions. &gt; I have a useful case you did not mention. I sometimes use await within a for loop of my async function as a way to wait on the result of the current iteration before moving onto the next. It's useful if I have to loop through some list of data where each index contains some inputs to the function I'm calling await on. By the time the for loop ends, I know precisely when I have received a result for each element in the array. Finally, I can process some logic on the array of results after my for loop. Can't tell you the last time I used a for loop. Do you have an example of the function you're describing, because this sounds like you're proving the shit out of my point. &gt; You claimed that within only "certain kinds of test functions, you may get a little more readability." First I'll say that you didn't describe what that was supposed to mean Let's say you have a function that does some work and returns that work wrapped in a promise. You want to assert whether the resulting value conforms to multiple assertions. If your test library also does not have the functionality to assert against a promise-wrapped value, then it can be a little flatter and more readable to use async/await. Again, I don't find this a compelling reason for the feature to exist, but there's not *zero* value in it. Let's contrive an example where a function returns some kind of dog object `Promise({ name, age, breed })` from a tab-separated string. test('makes a dog or whatever', async () =&gt; { const { name, age, breed } = await makeMeADog('Buddy\t3\tPitbull') expect(name).toBe('Buddy') expect(age).toBe(3) expect(breed).toBe('Pitbull') }) // vs. test('makes a dog or whatever', () =&gt; makeMeADog('Buddy\t3\tPitbull') .then( ({ name, age, breed }) =&gt; { expect(name).toBe('Buddy') expect(age).toBe(3) expect(breed).toBe('Pitbull') }) ) Tests are inherently imperative, so writing them imperatively makes some sense, and thus there's room for async/await. &gt; What would make you believe that you would not care about the result of an async call? This argument doesn't make sense. What's stopping someone from caring about the result of the async call, and why do you only see utility in this case? Little trouble with your comprehension here. I said *if* you *absolutely* don't care about the result of *an* async call. If you just want to know that a specific async function completed before going on to the next thing, awaiting that result that you were going to throw away anyway is maybe a *slight* improvement over the alternative. I would consider this an *extreme* edge case, and hardly a compelling argument for the existence of async/await. Take this example from the Hapi quick start, which is *literally* the only use for this that I've ever personally encountered, and it's so small that I wouldn't even bother. await server.start() console.log('Server running on %s', server.info.uri) // vs. server.start().then( _ =&gt; console.log('Server running on %s', server.info.uri) ) &gt; The function being awaited on would resolve the Promise and return it to the async function. It's not cute or a gimmick, it simply works. I didn't explain properly. Here's what I mean, in code. I think we can all agree that it's a cute gimmick. const x = () =&gt; Promise.resolve('promised value') const y = async () =&gt; 'promised value' I don't think there are really a lot of real-world use cases for this, but I'm sure someone who likes cute gimmicks and isn't a bad programmer has probably found one or two.
It looks alright. The .map().reduce() seems a bit much though. You are looping through that structure twice, when the map is pretty unnecessary. As another commenter hinted toward, depending on how often the list is sorted or how large the data set is, it might be worth calculating the stat totals ahead of time.
Promises are things that keep a state for themselves, the same can be said about async and generators. Those states are NOT side effects. If you just write `Promise.resolve(55)` you are not creating a side effect. What creates a side effect is whatever you use inside your function, which is independent on how the fuck you decide to write it, whether using regular callbacks, Promises or generators (async/await). If I decide to write pure code, it wont become impure if I decide to wrap it in a promise or in an async/await generator.
couldnt you have just hosted the project
To eliminate the map you can just do: a.stats.reduce((total, stat) =&gt; total + stat.value, 0) Stealing the other ideas posted, here's one implementation: const mapped = heroes.map(h =&gt; ({ hero: h, total: h.stats.reduce((total, stat) =&gt; total + stat.value, 0) })).sort( (a, b) =&gt; a.total &lt; b.total ? 1 : -1 ); `mapped` then contains a sorted list of objects with the shape: {hero: Hero, total: number} Performing the map before the sort also ensures you don't modify the original array (unless that was intended...?)
Nice effort. But there is some problem with the second and third row. Upon selecting other styles (say space around) other than the default selected, cells are shrunk.
By writing it.
I'll admit that what I wrote is the "perfect" example for a forEach. A lot of the time the loop body is more than a single line, so I write it this way : ``` const customObjects = [{}, {}, {}] customObject.forEach(customObject =&gt; { if (customObject.checkForThing()) { maybeDoSomething(customObject) } }) ``` If you were using a regular for loop it would be : ``` const customObjects = [{}, {}, {}] for (let i = 0; i &lt; customObjects.length; i++) { if (customObjects[i].checkForThing()) { maybeDoSomething(customObjects[i]) } } ``` Things to point out here: - the forEach automatically aliases the loop variable for me - In the regular for loop, I either have to index the array multiple times to get the current element, or create a variable inside the loop to alias the current element like ``` for (let i = 0; i &lt; customObjects.length; i++) { const currentObject = customObjects[i] // ... } ``` Again, little things, but just more fluff that I don't have to deal with when using the newer es6 features.
Eh, I don't agree with singular styling on links. Reddit gets away with it because its monochrome font and links are usually not obfuscated.
It's a CSS `::selection` pseudo element.
If you're already somewhat familiar with the paradigms of different programming languages (Functional vs OO vs Procedural, Static vs dynamic typing) and the basic syntax of Javascript then Javascript Allonge (Free book) will help you understand the JS language very well. Then if you want to use that to build something like a web app, you can do that with some front end framework (React, Vue, Angular, Aurelia) and a backend JS framework (Express, Nest) which you can research the pros/cons and styles of each, but I would master the fundamentals before diving into frameworks.
Yup, starring that. Thank you.
You should be using whichever construct better expresses what the code wants to accomplish. This can be tied in to a more general discussion of using the right abstraction for the job. constructs like `forEach`, `map`, `filter`, etc.. are higher level concepts than `for` loops, they are abstractions. When used badly, [abstractions leak](https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/), but when used properly, they simplify some aspect for the programmer. Between - `Array.prototype.map()` - `Array.prototype.filter()` - `Array.prototype.forEach()` - `Array.prototype.some()` - `Array.prototype.every()` - `Array.prototype.find()` I honestly can't think of an actual use case for a regular `for` loop that isn't better expressed using these. Disclaimer: If you need to optimize the crap out of some specific piece of code, use a plain old `for` loop.
I mean it all depends on the purpose of the link. External links and links within text should probably always be clearly demarcated, but if it's a link to another part of the site and more navigational, like the "css tutorials" was in the site here, then I think its fair to treat those things differently than other links. It's all about what you're communicating to your user.
Hi /u/nullundefine, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
good one.
[https://developer.mozilla.org/en-US/docs/Web/JavaScript/A\_re-introduction\_to\_JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript)
What you're feeling is not "imposter syndrome" but lack of competence. It's ok. At least you are capable of recognizing that you aren't very good at programming. What I would suggest is not to waste your time on some contracts of freelance stuff. Try to go apply to a company which deals with it's own products and don't simply do not "bake" projects like pan cakes for 3rd party clients. Companies like that generally have a better strategic vision for their employees and hr management. And there are more chances you'll get someone to mentor you. That's crucial you'll learn more in that environment under 3 months whan doing contract / freelance work for a year+.
I wrote react webrtc chat example [https://github.com/vardius/react-webrtc-chat](https://github.com/vardius/react-webrtc-chat)
I think u should check the CSS since only the background color is highlighted or check js for the highlighter code.
By not procrastinating and just dive into it.
https://learn.freecodecamp.org freeCodeCamp have thousands of coding lessons to help you improve your javascript skills.
I haven't looked at the source code but it's possible that under the hood they're using the DOM rendering; if it is then the browser is likely hiding that modification from the rest of the page context so as to not leak information or affect the intended rendering. Also possible is that highlighting is applied via the application outside of the DOM in which case they're not intentionally hiding the change, it's simply happening outside of the page context. Either way you won't have access to that from the page -- though possibly as an extension -- because that's functionality in the web browser application, not part of HTML/CSS/JS/etc.
I'm very doubtful that will improve performance \_dramatically\_ in modern engines.
In a tightly controlled environment or one willing to deal with breakages (ie: dev setups) you could theoretically enforce a must-use-latest scheme, but in general that's not how dependency trees work. Dependencies are pinned at a specific version that's passed testing and is ready for release; in your example just because C is updated doesn't mean the new version will work for A. You mentioned in another reply that these are all internal (controlled by you) deps, though, which means if you'll use semantic versioning as compatible with npm (or whatever scheme the package manager you use supports) you can automatically pull newer releases that theoretically don't break functionality. See [the dependencies section definition](https://docs.npmjs.com/files/package.json#dependencies) and then the [tilde and caret ranges](https://docs.npmjs.com/misc/semver#tilde-ranges-123-12-1). You will still have to re-pull/deploy to get new versions but that is easier than manually updating version numbers. Alternatively you could point and pull the dependencies directly from wherever you "release" your deps -- ignoring versions -- but if they're that tightly coupled you may as well roll them into the project rather than go through the trouble of maintaining a separate codebase.
That question was heavily edited. It didn't originally normalize by CLOCKS_PER_SEC like it does now. The two snippets are now essentially the same speed with -O0, while C++ is about 3 times faster with -O2. There is no way it could be 250-1000x faster unless it's precomputing the result at compile time.
Many people get stuck with analysis paralysis, and i was one of them. Just do the first guide you see about javascript and if you liked it continue if you want more difficulty then ask.
I think a fun way to do it is to try to make something fun. Like, think of a sort of basic web-based tool or game, and try to hash it out.
Build a project with Vue frontend and node backend. It'll take you 6 months due to all the googling you'll have to do, but at the end you'll have real world JavaScript skills
I'm interested in messing around with this when I have some time, but given your comment, are there any other resources you'd recommend?
Seems like you are not into competitive programming :)
Do you like to solve algorithmic problems?
Stopped reading after this quote “Native JavaScript autocomplete and error detection gets you 80% — 90% of the benefits of TypeScript”. It’s not about author being stupid or even wrong- it’s about how different our experiences are and how fundamentally different requirements were for the project we’ve been working on. Even if this statement is correct 10% difference can have huge impact for big project with multitude of contributors.
Andrew Mead's course on modern JavaScript.
You shouldn't need a prefix in order to fetch them from the DOM at all but do add prefixes if it makes it easier to logically group DOM elements
According to to cplusplus.com [clock](http://www.cplusplus.com/reference/ctime/clock/) returns the processor time consumed by the program. This is in clock ticks, not time. You then use CLOCKS_PER_SEC to get real word time.
It’s not about need. It’s a perfectly fine pattern.
Since you know java already and have programming basics down I’d say think about a small application that you want to build then start doing it based on your previous knowledge on how to put things together. When you need some sort of mechanism that java uses then just google “how to do xyz thing in JavaScript” boom! Javascript Engineer in a can
I'm on Safari Technology Preview, for..of is only 2x slower now.
3D graphics.
So around 6000? that's very impressive
Sorry, I misread the numbers as 96% slower was "half the speed". Looking at the ops per second shows the same massive slowdown as the normal Safari in your image.
Once you start getting a hang of Jaavascript, checkout this video. It might not be appropriate for a complete beginner. https://youtu.be/Bv_5Zv5c-Ts The instructor in this video has a course on Udemy and highly recommend taking the full course. He completely justifies the title by breaking down things to the simplest explaining the concepts from the ground up.
I tried learning javascript for a month watching one tutorial after the other, thought I was good to go.Then I started with reactJS , withing two days my notions about my javascript skills were shattered. I learned javascirpt ,but wasn't having a metric to measure my progress . So my suggestion is watch any javascript crash course on youtube and then start with react and keep working on areas you find weak.
Browser has a method inside, that highlight text with yellow background. You could use window.find() I guess.
javascript.info
It's based on [prose mirror](https://prosemirror.net/) \- a very extensible editor. You can create any wrapper you want for it (React, Vue, etc).
Learn vanilla first, and frameworks after.
Hi /u/AYawningPerson, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Mainly VScode and dank mono though I also like WebStorm
Atom
He's already a developer so he'll pick up the syntax in no time.
Could you host this somewhere to mess around with it?
In my opinion much of the JS hate comes from programmers of other languages. JS comes with a lot of weirdness especially if you come from another language. I think if it’s all you know you never realise some of the awesome stuff that’s missing like type checking and immutability (for me personally) (solvable with typescript and immutable js for example but native would be so much better)
Not hosted except for this RunKit. https://runkit.com/nwtgck/5b92ba85f11fe20011ed3873
If you want someone to help, you need to provide context to your problem, meaning what you're trying to accomplish, how, where and why. So far we only know your attempt at how. Please elaborate.
The main reason for this is in my opinion is because JavaScript is a loosely typed language which can result in mission critical bugs due to implicit cast typing in comparisons or implicit creation of global variables by 3rd party libraries. In the recent years though, with strict-mode becoming the norm these things have become less of a problem. TypeScript is typically preferred by programmers coming from another language because of it's strong typing and static analysis, which is closer to most other languages and provides a smoother IDE experience.
Most everything in society is hierarchical. Tiers can depend on easiness, popularity or just herd-mentality --usually there is granules of reason in any herd, but usually it gets out of hand because even someone who knows nothing about anything will still know that to fit in you must hate x. JS dislike stem from some perceived faults (and actual faults) and are then combined with the easiness and popularity of the language to make it an easy target to be the hen-picking choice of programming languages. Remember, something must always be at the bottom, and right now it's javascript. It used to be PHP but it's not popular enough to be picked on anymore. Javascript is fine, though obviously nobody would design it exactly as it is today, if they could have a do-over, but that's true for literally any programming language.
Have you checked if imma using shadow DOM? This would be my best guess https://oliversmith.io/technology/2012/05/19/inspecting-the-shadow-dom-in-google-chrome-inspector/
Not dislike, they don't understand JS. It's the case of people who don't want to learn new stuff and they've got in mind JS from like 10 years ago. When it was mainly for making title bar blink (or even status bar, my dear IE6!) or some glitches following the cursor pointer (like [here](https://codepen.io/tholman/full/jWmZxZ/), s/o stackoverflow).
There are people who believe JavaScript does not favor good programming styles (I do not support that statement). In my university this semester, a group of graduate students presented a 12-hour course in Python. In many cases, they compared the language with other scripting ones, such as JavaScript, with not so friendly remarks about the language itself and its ecosystem in general. I can understand this claim: JavaScript was created to favor simplicity. Back in 90s, the WWW was still young. Eventually, there was a need to add interactivity to Web Pages. There were many choices, but all of those possible solutions had a stiff learning curve. JavaScript was introduced as a simple scripting language for the web that would target non-developers (there was not such thing as web developers in mid 90s). Unfortunately, the standardization process of the young language (ECMAScript) was not organized with every major browser implement different set of its features (*hello IE!*). There were not such thing as Design Patterns for JavaScript (until [someone introduced](https://www.amazon.com/JavaScript-Patterns-Better-Applications-Coding/dp/0596806752) them in the wide audience). Years, passed, the Internet evolved, so did the language. There are many things to like about JS today, but this is out of scope of this post. I cannot find a single point of reference about this debate, there are discussions all over the Internet. If your goal is to write a post about this debate, then you have to search for the main arguments of "JS haters" and "JS lovers" manually. Also you have to understand where the term "programmers" refer to. Who is your reference? The Senior developer at a big company, a Junior one, random people that do not know the real aspects of programming, etc. Then you can start researching about the different opinions. Feel free to update your post if like to, but answering "Why people in general hate JS" is quite ambiguous.
True, but it's not so much about the syntax as it's about the dynamic language, weak typing/type coercion, prototypical inheritance, functions-as-first-class-objects (and hence stuff like closures, the callback pattern and then promises/async-await), etc. The syntax is similar (obviously, by design) but the two languages are *very* different under the hood, and one of the biggest obstacles for a Java developer is learning to stop writing "Java-in-JavaScript-syntax" and start writing idiomatic JavaScript.
Get over it. You should not give 2 shits if someone hates or likes JS. Do your fuckin job and get that $. Everything else is horse-shit.
Webstorm/vscode fira with ligaments on as font
Nice effort indeed! I also created a similar project a while ago referring only to installation and securing a VPS machine. [Here is the link](https://github.com/GeorgeGkas/iaas-debian) if you want to take a look. I see that you do not cover any secure implications about the VPS. You can refer to my article as a zero step. Also, while your article grows with new content, you might want to take a look to GitBook.
What about a **Real** English-like word generator?
I am a student at Uni and my professor said he's colleagues hate javascript. So that statement seems to have some validity, or at least it does in my school.
In your sample output, you list the word "Trident" which is a real English word: https://www.dictionary.com/browse/trident
 response.json().then(function(data) { var sex = data.map(x=&gt;{ if(x.gender === "MALE"){ males.push(x.name); } else { females.push(x.name); } }); console.log(males); // [2] }); console.log(males); // [1] When `[1]` executes, the array is still empty. The promise has not been resolved yet and so the Array is written to the console as an empty array. Later, the promise is resolved, the array is filled and, due to how the console works, when you expand it, you're seeing the array filled (though the initial representation as `Array []` is not updated). **Finally, this kind of question should go into /r/LearnJavascript not here.**
Here you are: ```js const sortedHeroes = heroes.sort((a, b) =&gt; { const aStatTotal = a.stats.reduce((prev, curr) =&gt; prev + curr.value ,0) const bStatTotal = b.stats.reduce((prev, curr) =&gt; prev + curr.value ,0) return aStatTotal &lt; bStatTotal ? 1 : -1 }); ```
So there's a few things that stick out: 1. Unrelated but semantics: You're going to want to use forEach instead of map if you're not actually going to use the result. 2. Where are your males/females declarations? 3. The issue with it being "corrupt" is due to the asynchronous nature of promises. Your second console.log actually runs before the promise starts, so the array is empty. Then the one in the promise runs after the response comes back and is iterated through. The console is at fault here for the data being shown; it uses a version in memory to show what's in the array *right now* but took a snapshot of what the length was when it ran.
[removed]
That's because the second console.log(males) executes before the one inside the map function's body, which happens after the pushing. It's nothing related to anything strange with Promises, it's perfectly normal behaviour. The 1st console.log() is inside the asynchrnonous function which takes time to complete, so the 2nd one fires first. Read YDKJS's Async and Performance chapter 3 [here,](https://github.com/getify/You-Dont-Know-JS/blob/master/async%20%26%20performance/ch3.md) for better understanding.
maybe if (table.disabled == false { table.disabled = true; } ? Provide us a full code
That... actually sounds quite good? Given how many editors come with reams and reams of nightmare nested CSS to override, I'd rather just write my styles from scratch.
Upvoted due to use of `map` instead of `reduce`.
a SaaS version will be released
thanks
[removed]
I wonder what is "native javascript autocomplete". AFAIK that feature is provided by editor not natively by javascript and ... mostly powered by typescript :)
Not necessary and I don’t think it clarifies things. Using a js- prefix for classes, on the other hand, is more common to differentiate hooks for styling vs hooks for scripting.
I can attest to the value of having a compiler enforcing type safety. I spent some time with both ReasonML and PureScript, and their compilers are both incredibly useful, especially when it comes to algebraic data types. And their REPL tools are quite handy.
Nice work
Well, it doesn't improve it a bit, I get identical results.
React component to embed GitHub Gists (a single file from a Gist, multiple files from a Gist, the whole Gist!) into your React project with minimal effort (just use the permalink of the Gist). Project repository: [https://github.com/GeorgeGkas/super-react-gist](https://github.com/GeorgeGkas/super-react-gist) Project website: [https://georgegkas.github.io/super-react-gist/](https://georgegkas.github.io/super-react-gist/) *Created a while ago, but I wanted to post it in case someone is interested.*
This is what I imagine English looks like to people who don't speak it
Biggest problem: no standard lib that lead to the creation of hundreds of package doing exactly the same thing (usually not doing that great) on npm instead of having one single implementation supported by massive amount of users and developers.
VSCode with [Fira Code](https://github.com/tonsky/FiraCode) (`fontLigatures` enabled). Here is the current config I use: ```json { "editor.fontFamily": "Fira Code, Consolas, 'Courier New', monospace", "editor.fontLigatures": true, "editor.fontWeight": "400", "editor.fontSize": 15 }
[removed]
There's several reasons for it: - you don't really have a choice when you're developing something which runs in the browser - you are basically forced to use JS, and people don't like something being forced on them. This is attenuated by the fact that for most people JS is a secondary language. - due to a low barrier of entry there's a ton of crap developers who never really learned JS properly, and never learned anything apart from JS, and when you find their code in the wild it's unsurprisingly pretty crap. Add to that the expert beginner syndrome which makes people write laughable articles on blogs, it seems like it's more frequent for JS developers than for other more established ecosystems. - unstable ecosystem - there's a ton of tools for doing basic tasks (dependency management, task runners, you name it), several popular frameworks, a ton of transitive dependencies due to a non-existent standard library - as a result whenever you change projects, it's pretty much guaranteed that people do things differently. This has been reduced lately, but is still an issue. - weak and dynamic type system - there is a reason why TS has been such a success - when you're building systems where multiple people work on the same code, there's bound to be misunderstandings and in effects errors, which will only come up pretty late in the development cycle (when writing tests or worse - at runtime) - unusual approaches like prototype-based inheritance, this, hoisting, no integer data type, weird equality operator etc - it trips people up if they haven't learned JS properly.
What is it exactly that you want to accomplish? And what does the rest of the page and code look like? I can only guess that you are trying to disable a specific button if a certain table element exists in the DOM? In that case you'd have to query the table element, check if there was a hit, and then set the disabled attribute of the button accordingly const checkTableElement = document.getElementById("checkTable"); if (checkTableElement != null) { document.getElementById("checkButton").disabled = true; } Is that what you are trying to accomplish?
They change background in the rendering component (one level below). No DOM stuff no CSS stuff since it would break stuff.
No. IDs are for JS. Also: &lt;div id="books"&gt;&lt;/div&gt; &lt;div id="js-books"&gt;&lt;/div&gt; &lt;script&gt; books.textContent = 'books' window['js-books'].textContent = 'js-books' &lt;/script&gt;
[removed]
Exactly the same setup here.
Yeah it would take a few months to get your head around all that I think.
This is great. What’s the idea behind it? Any academic reason or just for fun and see what happens?
Sorry, about this post didn't know you don't ask question here.
it inside it make no sens, you should be able to wrap it only in describe.
If you find this post and it's not removed then solution is AVA framework that support async code.
Same thrice
I use sublime if there's a lot of manual work involved
Vim &amp; Inconsolata
Thanks. The generator is totally random. So, it can also generate the actual one. When you want to get complete fake words, you can prepare for a corpus and filter them.
Thanks. It may be similar to Markov chain. I use probabilities which character appears more frequently. For getting more English-like words, I use a probability of "word sequence" =&gt; "character". Example word sequences are like "\^a", "gh" and "tio". "\^" means start. For example, "r" has 0.003884 chance to appear after "gh". This probabilities were pre-calculated from a corpus. The actual probability structure is like the following. As you see the structure, it has `["t", 1]`. This means "t" has the highest chance to appear after "gh". The numbers of probablities are designed for using "based" roulette like `rand() &lt; prob`. ```js ... "gh": [ [ "r", 0.003884 ], [ "d", 0.008121 ], [ "y", 0.013418 ], [ "u", 0.019068 ], [ "n", 0.026483 ], [ "w", 0.033898 ], [ "m", 0.042726 ], [ "f", 0.052966 ], [ "h", 0.063912 ], [ "l", 0.081568 ], [ "b", 0.108051 ], [ "s", 0.134534 ], [ "i", 0.175494 ], [ "o", 0.222458 ], [ "a", 0.276836 ], [ "END", 0.348164 ], [ "e", 0.427613 ], [ "t", 1 ] ], ... ```
Colour
Yeah, I keep repeating that. It's like my old nightmares coming back to hunt me when I open my website or app in that browser. It's not as bad, but you always need to go back and tweak things here and there or find a workaround.
No screenshots, demo, or example? 😢 Gonna look over this one
&gt;No screenshots, demo, or example? 😢 Gonna look over this one Thanks. You can click the clink, get GitHub [README.md](https://README.md) and see an example usage. I hope it could be helpful.
Here is an usage. ## Usage ```js // Import fakelish const fakelish = require("fakelish"); // Min and max Lengths of fake words const minLen = 7; const maxLen = 11; (async ()=&gt;{ // Generate 20 fake words for(let i = 0; i &lt; 20; i++) { // Generate a fake word const fakeWord = await fakelish.generateFakeWord(minLen, maxLen); // Print the capitalized fake word console.log(capitalize(fakeWord)); } })(); // Capitalize string function capitalize(str) { return str.charAt(0).toUpperCase() + str.substring(1); } ```
This guy's an idiot
Curious why it’s using async/await when it’s not doing any asynchronous tasks?
Javascript hurts when you don't know its idiosyncrasies especially if you are coming into it with years of experience with some other programming language. A couple of very simple examples of this is: knowing when to use == vs ===, and understanding the difference between undefined and null. Much of the frustration with Javascript comes from trying to \_bend it to your will\_ instead of doing things the Javascript way. It becomes really easy to hate Javascript when you are supposed to write Javascript differently than the other languages you know. Fortunately, this problem is slowing getting better with never version of the language (starting from ES6/ES2015). Keep in mind that until ES6 we've basically been using the same version of Javascript since 1999! ES6 has support in every major \_current\_ browser so you could write ES6 directly today unless you have to target older browsers (any version of Internet Explorer). It's becoming common to use something like Babel or Typescript so that you can use even newer versions of the language; there are 3 or 4 more revisions of ES since ES6 that provide some really useful things, like async/await. Then there is the rapidly changing and overlapping Javascript ecosystem of third party modules. There are so many libraries you can use and libraries that were in fashion even just a year ago might have been abandoned for something new. Trying to keep pace with the Javascript ecosystem can be frustrating. A newcomer has near zero chance at \_getting it right\_ as far as figuring out what packages are best to use and which packages you should stay away from, and even experienced Javascript programmers almost have to stay active in various online Javascript communities just to avoid falling out of touch. Everything changes so fast. I'll leave [this](https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f) here. It's old but still good. Maybe even ironic.
I think the loop may take a lot of time and block the event-loop. So, I decided to use async/await. My comprehension about event-loop can be wrong, let me know.
I wouldn't advocate doing "lookupless" elements in scripts like that. Not being able to see where something is declared plus relying on something most frontend devs don't know exist as the norm will only complicate your life.
I had to implement something like this for an application. This is a better use case than ours, where processing was a bit heavier and you'd be running the op on up to a hundred images instead of one, but nice to see our approach validated a bit.
Came here to say this, although I'm also glad with any powerline font.
Hi /u/wmbtxs, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
The term renderless is a little confusing but yes I absolutely agree. I love modules that keep their hands off my actual DOM elements and just give me functionality to inject.
Looks like they want you to write a function that calculates the candidate keys for a relation. And return the answer formatted in a specific way. Reread the paragraph that starts with "Find", this is where they are asking you to do something.
imnot sure what is exactly candidate key
perhaps, what i need is another examples, so i will understand what is candidate key, and why the answer above is only 2...
2 is the number of candidate keys that were found in the example. &gt; "Find how many candidate keys are there for given array relation"
Look at that 'relation' structure at the bottom and consider of you were writing some finder functions to search the list and return a single element, e.g. findByID(id). Another one is findByNameAndMajor(name, major) So the question is for a given set of data, how many different finder functions like this could you write that will uniquely identify a single item in the list.
Umm yes I know 2 is the total number of candidate keys, but what is candidate key
[removed]
why I can't use findByIDanName ??(id, and name), or (major, with id), it surely unique too.
Yah. At work we have something 20% users on IE and a little less than that on Safari. Luckily we’re starting to force people on IE yo upgrade to Edge. But safari. Goddamn safari lol
Yes exactly, so that's the "Minimality" condition. Don't send in any more attributes that are strictly necessary. findByIDandName is no good because the ID alone is enough to find the right element in the array.
why the name + grade is not the key too ?? is it because the apeach with grade 2 coming twice ? if 1st apeach has grade 3 and the 2nd apeach has grade 2, will the candidate key become 3 ? or still 2 ??
Hi /u/VeltixOfficial, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Yes, you got it.
A candidate key is a combination of one or more keys, or field names of the data set. The example provided has 4 total: Student number, Name, Major, and Grade. Examples of candidate keys _might_ be ["Student number"], ["Name", "Major"], or even ["Student number", "Name", "Major", "Grade"]. What makes any one of these an actual candidate key is dependent on the data itself. Specifically, what is the minimum set of these field names that is needed that, if you had the value for them, you could find 1, and only 1 item in a data set. ["Student number"] is one because all student numbers are unique. So given a value of [100] to match that key, you would go through the data and only find one match, `[100,”ryan”,”music”,2]`. ["Grade"] is not a candidate key because, if given a value of [3] for that key, you would get multiple matches, `[300,”tube”,”computer”,3]` and `[500,”muzi”,”music”,3]`. And while technically you could just make a candidate key out of all the keys with ["Student number", "Name", "Major", "Grade"], one of the requirements is to have Minimality, meaning no redundancies there. If you have "Student number", all the others are pointless because "Student number" is already unique. So the task is to find all the combinations of those field names (candidate keys) so that items in the data set can be uniquely found using values for those, and only those fields in a way that no duplicates would be found.
Are you sure you should console.log the output, also there is space after ":" which I don't see in your answers.
Hi /u/iqbalrhidwan52, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Where’s the code that read and splits the input into the line array?
All of this just because the getUserMedia API doesn't ask the camera to autofocus. &gt;Why didn't you implement the same autofocus/tap to focus routines in JavaScript? Are there sufficient web APIs to do so? &gt;I don't think there are any autofocus web APIs yet. We only the getUserMedia API, which has limited camera capabilities.
I modified your generated text with some small english words and send it over to [http://talktotransformer](http://talktotransformer). Check out the results: Input is in bold, the generated text is below it. You'll have to hit generate a few times to get a reasonable output. **1. Dia dhuit a imposillack to ioughters and schgruids.** **2. I viestios with mundrial with unkalphast and mireock.** **3. I babrilly formalated a gimbrawer with toth complers.** **4. Buk ligical? No! Deprene or ocoarriete mathair.** 5. So, trasna that daeor hons a herbalve in trelanot. 6. Sei in a tepre a cotter a lewter-nite and a trellar. 7. Sei ocen a furelly a vorigall a prytter-nite. 9. Seu in a tepre a cotter a lewter-nite and a trellar 10. Seu daeor fome and a tepre a cotter a lewter-nite. 11. Seu ocen daear daeor fome and a trely-nite. 12. So, quod in an dia daeor deeor. 13 Dei murent poyr uno poyr dei a uno ae ora. 14. I murent a poyr dao, and eo dado to a poore. 15. A deur londe deu rivant. 16. So, dei reu londe rivant. 17. Eo quae fayre poyr with reue a deufen. 18. So, hei deu murent daeor teneu poyr and deu reu rivant.
Because ID is unique already so adding name or major is redundant. The problem statement clarifies that a candidate key must be the minimum number of columns to add that satisfies the uniqueness constrain.
 &lt;script&gt; **var** *lines* = \["3.0", "4.0", "5.2"\]; **var** *a* = parseFloat(*lines*\[0\]); **var** *b* = parseFloat(*lines*\[1\]); **var** *c* = parseFloat(*lines*\[2\]); **var** *areatr* = (*a* \* *c*) / 2; **var** *areac* = 3.14159 \* (*c* \* *c*); **var** *areat* = ((*a* \+ *b*) \* *c*) / 2; **var** *areaq* = *b* \* *b*; **var** *arear* = *a* \* *b*; console.log("TRIANGULO: " + *areatr*.toFixed(3)); console.log("CIRCULO: " + *areac*.toFixed(3)); console.log("TRAPEZIO: " + *areat*.toFixed(3)); console.log("QUADRADO: " + *areaq*.toFixed(3)); console.log("RETANGULO: " + *arear*.toFixed(3)); &lt;/script&gt;
 &lt;script&gt; **var** *lines* = \["3.0", "4.0", "5.2"\]; **var** *a* = parseFloat(*lines*\[0\]); **var** *b* = parseFloat(*lines*\[1\]); **var** *c* = parseFloat(*lines*\[2\]); **var** *areatr* = (*a* \* *c*) / 2; **var** *areac* = 3.14159 \* (*c* \* *c*); **var** *areat* = ((*a* \+ *b*) \* *c*) / 2; **var** *areaq* = *b* \* *b*; **var** *arear* = *a* \* *b*; console.log("TRIANGULO: " + *areatr*.toFixed(3)); console.log("CIRCULO: " + *areac*.toFixed(3)); console.log("TRAPEZIO: " + *areat*.toFixed(3)); console.log("QUADRADO: " + *areaq*.toFixed(3)); console.log("RETANGULO: " + *arear*.toFixed(3)); &lt;/script&gt;
 &lt;script&gt; var lines = ["3.0", "4.0", "5.2"]; var a = parseFloat(lines[0]); var b = parseFloat(lines[1]); var c = parseFloat(lines[2]); var areatr = (a * c) / 2; var areac = 3.14159 * (c * c); var areat = ((a + b) * c) / 2; var areaq = b * b; var arear = a * b; console.log("TRIANGULO: " + areatr.toFixed(3)); console.log("CIRCULO: " + areac.toFixed(3)); console.log("TRAPEZIO: " + areat.toFixed(3)); console.log("QUADRADO: " + areaq.toFixed(3)); console.log("RETANGULO: " + arear.toFixed(3)); &lt;/script&gt;
That's not how it works. Your code still executes synchronously in a single thread.
&gt; The main reason for this is in my opinion is because JavaScript is a loosely typed language which can result in mission critical bugs due to implicit cast typing in comparisons or implicit creation of global variables by 3rd party libraries. Fifteen years ago, dynamically typed languages like JavaScript and PHP were the future because they freed us from needing to worry about variable types, and they'd prevent mission critical bugs caused by trying to assign the wrong kind of value to a variable. It's all just fashion.
Text Editor? Nano. \^\^
VSCode and Ubuntu Mono.
&gt;That's not how it works. Your code still executes synchronously in a single thread. In understanding, the code executes in a single thread, but a loop blocks other execution. Here is a simple example of async/await loop. &amp;#x200B; \`\`\`js (async () =&gt; { while(true) { await console.log('Loop A'); } })(); (async () =&gt; { while(true) { await console.log('Loop B'); } })(); \`\`\` &amp;#x200B; The output should be like the following. &amp;#x200B; \`\`\` Loop A Loop B Loop A Loop B Loop A Loop B ... \`\`\` &amp;#x200B; Even if the loop executes infinitely, the each loop don't block the other loop.
Computer graphics. Loading 3D Models, for example. Binary files are virtually never in the right format for the GPU so you have to convert the file format to a GPU format. You'll easily end up iterating over millions of vertices and triangles while loading 3D data.
Hello George, I had intentions already to add a section on securing VPS machine after I finish the last section of "Site Performance", I would like to take your Fail2Ban tutorial and add a reference to you.
Of course you can. I thought that merging the two tutorials into one will be a nice addition (as you have already attracted some attention). I plan to send a PR in the upcoming days and discuss more from GitHub. Are you okay with that option?
Of course, no problem, I'd be very glad for that, just make sure that instructions work with Ubuntu as my tutorial are based on.
[removed]
Well, that's only for the part about having different worker threads racing to get a barcode. The basic architecture of main thread, glue code around web workers, worker thread, glue code to instantiate wasm and the wasm module itself are all pretty much required boilerplate for this kind of work. The web workers API is also pretty limited; you only get `postMessage` and that's it.
It really comes down to what you can build in quickly - basically what you know and can support in the company. I would favour React for this reason, but Vue is a very mature framework which gives you more for free than React does, so if you know it you should use it.
I should edit OP.. We are not webdevs so whichever we choose we will have to learn.
Here is my list of packages used for Javascript development: * Code completion: [tide!](https://github.com/ananthakumaran/tide) * Emmet: [emmet-mode!](https://github.com/smihica/emmet-mode) * Highlighting: [js2-mode!](https://github.com/mooz/js2-mode) * Format: [prettier-js!](https://github.com/prettier/prettier-emacs) * JSX: [rjsx-mode!](https://github.com/felipeochoa/rjsx-mode)
You are mistaken. async/await syntax is nothing more than a convenient Promise wrapper. In your example you await `console.log`, which returns undefined, not a Promise, so awaiting it does absolutely nothing. Your program will print `Loop A` infinitely. Now, if you introduce a Promise-returning function that doesn't block the loop, using await will make more sense: function sleep (ms) { return new Promise(resolve =&gt; setTimeout(resolve, ms)); } (async () =&gt; { while(true) { console.log('Loop A'); await sleep(Math.random() * 10); } })(); (async () =&gt; { while(true) { console.log('Loop B'); await sleep(Math.random() * 10); } })(); // Will print "Loop A" and "Loop B" randomly What you're looking for is multithreading, which is implemented differently in browsers and Node, so I'd leave the decision to use it up to user.
There's not really a right answer then, I would just decide within the team which tools they would like to learn. React, Vue and Angular are the big 3 and have really good communities around them, so it comes down to your opinions.
pmed
VSCode
More like 2020 Tech Startup name generator
bcrypt
Thanks, I've always heard good things about bcrypt too.
Hi /u/bthu, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/dellryuzi, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ElevatedJS, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/PalestineFacts, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/brainhack3r, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Byteme74, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/XOR_LIFE, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Aroneus, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/javascriptPat, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/st3fan, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/cmjdev, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/OriyanJ, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/brainhack3r, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/theo258, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I like this solution. Thanks everyone for the responses.
I would slowly but surely replace the JS spec with Haskell, not quite a subset, but a huge improvement none the less. JS’s complexity is far more complicated than simple stuff that “strict” catches or the kind of thing you see people make memes about. Although those are pretty damning issues. JS is just such a fundamentally complex and disorganized tower of deeply nested, overlapping and overriding features that it feels hard to redeem. Just look at the spec for something as simple as [json serialization](https://www.ecma-international.org/ecma-262/5.1/#sec-15.12.3), something that is like 10 lines of code to just straight up implement in Haskell. ES6/7 have only gotten much more complicated from there. A complex feature rich language isn’t necessarily a bad thing, but you don’t want those features to aggressively step on each other’s toes and override each other constantly. Haskell is a complex language with various extensions, but the features don’t violate assumptions of the features you already know, they just enable new things that weren’t there before with their own brand new semantics.
Neither do I agree with the article, though I like Eric's articles in general. I was just curious what people think about it.
Hi /u/Daliblue, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I sometimes break into for/loop versus for/each as a micro-optimization when I'm dealing with getting executions under 1 frame to avoid lag and the operation is related to rendering DOM layout. That means you can't throttle or async it. I've needed it with both data-tables and dynamic layout generation (I've essentially tried porting Android's RecyclerView.) If you're not dealing with fixed height elements, then when the height of a row/item higher up in the tree would require all subsequent items to become invalidated. With something like 10,000 rows, you kinda want those micro-optimizations. As for, why not just paginate, not all situations are best presented like that. Most of use on Reddit use some form of long scrolling. And for data tables, being able to scroll to the end could be better than tapping next 20 times. [Here](https://clshortfuse.github.io/materialdesignweb/dom.html) is an example of just 500 items, but the concept is essentially the same.
You won't notice the difference between 1ms and 2ms load times on these benchmarks, try it with a 1,000,000 index array
While the article paints this as some quirk of javascript, its just the age old routine weirdness of IEEE 754 floating point numbers. The same strangeness is a part of C++, a part of BASIC, and just about any programming language which allows the use of FP registers.
Hi /u/gamesniper99, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
bueno hablemos en español (soy argentino). se te puede contactar por la aplicacion que hiciste?
I have used Photopea for a while now and took off Adblock right away just because of how convenient the system is and that I found it through your post on reddit. It’s truly amazing. Thank you.
I’m not sure why this is so hard to understand. YES, but CLOCKS_PER_SECOND is not guaranteed to give you a value in the millions. You need to actually check the order of magnitude with respect to the epoch being used by the system.
You're setting Zelda to "#", then immediately adding another one to it. Try `let Zelda = ""`
The third line prevent to print single # so you just need to make your variable empty equal or blank string.
🤔
&gt;for (let Zelda = " "; &gt; &gt;Zelda &lt;= "########"; &gt; &gt;Zelda = Zelda += "#", &gt; &gt;console.log (Zelda)); Okay so maybe I didn't understand what you meant because when I did that it broke my sandbox.
Hi /u/IslaMcFields, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Hyperzonee, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
 for (let Zelda = " #"; Zelda &lt;= "########"; Zelda = Zelda += " ", console.log (Zelda)); &amp;#x200B; Okay now I have nothing but a million single "#".
I am so sorry! Thank you for pointing me in the correct direction.
Remove the space. Just `""`.
I got people asking me for money every time I step out on to the streets. My terminal was my only safe haven –until now! This should be reserved for compatibility/setup related issues, not solicitations for financial contributions.
PHPstorm, DejaVu Sans Mono font.
I don't think developers will abuse it. Devs usually lives their lives without the need to ask for money from other people. But when a team is created around a project, that's when you might need to spread awareness that you welcome sponsorship. There's also this specifically for opencollective: [https://github.com/nuxt/opencollective](https://github.com/nuxt/opencollective)
This article doesn't mention float point precision errors at all. It's about the javascript specific `NaN` value.
Anyone expecting web assembly to be 50 times faster than javascript is going to be disappointed. In most cases javascript is actually faster. (I know, it's surprising but I'll point you towards some benchmarks if requested)
If you click on the title of the post it will take you via a "link" to the GitHub page where you can view some sample output or example code. It's a program that outputs text so if you need a screenshot for that I guess there are bigger issues at play.
Raxalluffic is such a great word! Neat project thanks for sharing.
please do
Simple one liner to test if something is NaN: `var (x)=&gt;!!(+x+’’===(0/0)+’’);`
Sublime comic sans it's easy to read with bad vision
There is a reason VSCode rose in popularity so quickly: it's amazing and free.
Window.find is not standard and does something different anyway (it returns true / false)
I second this
You _may_ want to try running that code for real. Just saying. _Note that I do not mean to defend the approach OP has used, but, well, you may want to try running the code before saying what happens :)_
Or just `(x) =&gt; isNaN(x)`, haha
VSCode and Hack
Hola Leo, si seguro, puedes escribirme al inbox de acá o a mi email rogerjose81@gmail.com
Id like to see this
I'm not advocating.
Can you post a sample of the code you're trying to run?
VS Code and Deja Vu Sans Code, with ligatures enabled
Hahaha. I did this a few times, it often turns out German. **Petrad trid stedo liuc tingan badriss izes Meresch usul fuss ffofy bante morod aliy sias Pesuson nvacote mbous pares rpoal.** &gt;Rpoal vyis sas bonton mnro. &gt;Javos: Pausi? Mm hlw pausi sos mneus. &gt;Dios, vos paxos tas? Pausi? vos plonos ploans paxos vas? &gt;Wir gerten zanar hovar? Hwre? Haer? Vos plonos ploans plos? Tis mnieo? &gt;Nodal zon kapur lubos woju. &gt;Wir gerten zwanad lubos pakos. &gt;Won dlurad lubos zapen. &gt;Zadak och gertz bordz nastak. &gt;Wenn alis ich? Alis? Zutz? &gt;Wenn komstad l
Hi /u/georgegkas, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I‘ve did the Advent of Code 2017 (or maybe it was 2016) puzzles all in Rust compiled to wasm and compared every single one to the fastest JS solutions I could find and every single time wasm outperformed the JS versions by 10x to 40x
No, javascript isn't faster. The current problem with WebAssembly now is that there is a call boundary between different language contexts. Which overall, based on use case may cause web assembly implementation to perform slower if the boundary needs to be crossed a lot of times for some trivial calculations. To this day only FireFox has addressed this issue. [https://hacks.mozilla.org/2018/10/calls-between-javascript-and-webassembly-are-finally-fast-%F0%9F%8E%89/](https://hacks.mozilla.org/2018/10/calls-between-javascript-and-webassembly-are-finally-fast-%F0%9F%8E%89/) At some point chromium based browsers will catch up.
And once the shape detection API is out, this is obsolete. WASM is turning out to be a solution in search of a practical problem.
VSCode and Mononoki 👌
Don’t think anyone’s really supporting that except Google.
Why both MySQL and MongoDB?
All the *nice* programmers use 3-space indentation
I used MySQL for the user data which i preffered because of its predefined schema.
Some of the words are too long and get cut off on mobile view, but other then that it looks great.
MySQL supports JSON. https://dev.mysql.com/doc/refman/5.7/en/json.html
Thanks. I'll try to mend that.
Thanks. I'll look into that.
I would classify this as abuse of post install messaging.
Thank you for writing something in Medium that - has no sticky nav bar - has no 'subscribe to my email list' - doesn't require Medium membership - is a genuine experience It was an enjoyable read. Maybe I missed it -- it looks like you didn't throttle the call to search? does it delay the result too much?
VsCode and San Francisco Monospaced
`isNaN` is already a function, so no need to wrap it.
Hi /u/TheRavenBlue, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/leofab865, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I wrote an app a few years ago that decrypted files in the browser using Dropbox api to get the file, decrypt in the browser and save to file. Was really slow on a single thread - buttery smooth with an array of web workers.
Indeed. Just going along with the arrow function format of the original comment. No real reason...
Hi Tasty, yea Ive had a couple of people mention that, Im thinking I should add a section about it. I didn't like the idea of debouncing the search call because in principle, you are delaying an already unusually long request further. If nothing else worked, I probably would have gone that route, but I wanted to see if I could do it without the additional delay. Also, with debouncing, you don't get that instant feedback on the search results. I personally like that UI a little more where you are seeing your search results update as you type. Thanks a lot for the kind words and taking the time to read it!
I'm not sure what problem this is solving. The ones you listed are really strange problems. 1) Why couldn't you cache things? That's the most *puzzling* claim. 2) Socket problem with Kubernetes? Doubt it's Kubernetes fault. That sounds like maybe your hosting provider is messing up. Or maybe your server configuration is wrong. 3) Why is your application sending 8 different requests to render 8 different parts of the page? Either pre-render server-side or make one request. Also not clear why you get high CPU usage before, but not after - it's still 8 requests, no?
You built your own array? Haha cool!
I’d like to think I went through your thought process... but mostly google and stackoverflow
Eric's a good salesman and good at projecting confidence, but a lot of what he says -- in all his articles -- is flat wrong. [Obligitory](https://twitter.com/Hillelogram/status/1084991487702691840)^1 [beware](https://www.reddit.com/r/javascript/comments/5c5lkq/what_eric_elliot_wants_to_say_can_somebody/d9u6tv3/)^2 [referencing](https://www.reddit.com/r/javascript/comments/6q2lk0/why_composition_is_harder_with_classes/dku34cl/)^3 or [learning](https://www.reddit.com/r/javascript/comments/837t82/who_are_some_of_your_favorite_speakers_educators/dvh0br6/)^4 from Eric Elliott.
If you set the capability requirements section of your request to autofocus true,you'll get autofocus if it's available.
Fwiw, quaggajs works quite well for many barcode detection purposes and is entirely JavaScript. It unfortunately has been lacking a maintainer for a year or so now.but it works well.
Hey Tasty, any chance you guys can upvote my new post, this one got deleted cuz I formatted it as a post instead of a link! Im a noob :) https://old.reddit.com/r/javascript/comments/btfbqk/secrets_of_javascript_a_tale_of_react_performance/?ref=share&amp;ref_source=link
Hey floofy, any chance you guys can upvote my new post, this one got deleted cuz I formatted it as a post instead of a link! Im a noob :) https://old.reddit.com/r/javascript/comments/btfbqk/secrets_of_javascript_a_tale_of_react_performance/?ref=share&amp;ref_source=link
As with the previous comments it also seems like something like GraphQL would make your life a lot simpler...
Hi /u/walkingn8mare, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
if you are good you will eventually find a job.
Looks like you've built your own GraphQL? 5k rps isn't that much. A single EC2 instance should be able to handle it with proper caching.
If you're going to a JS boot camp you're not going to be a UX Designer. You're gonna want to look at JavaScript engineering positions and make sure that is really what you want to do. UX Designer even a UX Developer is a different role than an engineer. Your responsibilities and day-to-day work will be drastically different. Of course you can do it on your own. Do you have \_any\_ bachelors? It doesn't matter what it is in all the time. If not, that is okay too. The industry is starting to recognize that isn't needed but that process will be slow. The best thing you can do is to show you can complete the work. I think a boot camp is a great way to do that. Last year we hired a boot camp grad and 2 of the 3 finalists were boot camp grads.
If you are looking to get into Data science then a degree is almost mandatory at this point. If not then you have a much higher chance of getting a job without one as long as you're proficient in the stack that the company works with. Even if the job description says the role requires a bachelor's I'd suggest you to still apply
VSCode and Firacode
So many new things to try! Great write up!
It's a bootcamp that teaches you HTML, C# and Javascript and then later on you can learn UX from another course. They just like to teach the programming first so when you learn the UX you can do it all. Yup, don't have any bachelors... Wow that is fantastic that they got hired and good to know :) What do you think a company is looking for more, outside of being able to do the work obviously. Like, mentally are they wiling to grow still or more of the type that know it all already? You know what I mean? Like what is a strong candidate from your point of view?
I don't know how this could be true - there might be a bit overhead when calling webassembly from js which might impact it sometimes, but webassembly by itself should be faster in almost all scenarios. Would like to see the benchmarks too
I did. Did *you*? :)
Start going to meetups and doing informational interviews NOW - it will give you a huge leg up on the job search. Most of your peers will wait until they’re done or nearly done with the boot camp.
Oh wow thank you, that's something that would not have even crossed my mind...
Can I just find meetups online? Not really sure about the informational interviews either.. but I will definitely start looking into those things!!
Yes, I did run nwtgck's code. And it outputs what he said.
Yup! Search for UX and JavaScript meetups in your area. As for informational interviews, start asking your network of people (friend, acquaintances, family, etc) if they know anyone in the dev/UX world and then ask to learn more about what those folks do. Then, as those people to introduce you to others.
What we look for is how you approach a problem. Can you explain why you made your decisions? Can you foresee any short comings with your approach? How would you change your approach to solve those? Are you willing to struggle to get to a solution? How do you receive feedback? How do you communicate with others? Can you explain complex things in simple terms? And most important, are you aware enough to know when you don’t know something? As a green engineer I don’t expect you to know everything but I do expect you to be able to and want to learn, which some days means struggling with things.
Freaking awesome man, thank you very much. This will be very helpful!
You've probably run it in a browser. It doesn't in Node.
In myFunction, the function will result in a value (which is then logged). In practice, the function logs the result, as in it doesn’t return a value. Try console.log(practice(10,6)) and see what happens.
What does "5k/rps" mean?
5000 requests per second is my guess
This is great! Thank you so much. I really appreciate it. Are you in the industry? Just curious, I won't slide into your dm's lol. And if so, do you love it? I feel like I will love it once I can break into the industry but I guess you never know..
Yes, 5000 requests per second.
Yes, and yes. Also did a boot camp and did as I’m suggesting. My class was about 20 and I had a second interview the day we graduated- and an offer the next week. The next person in my class to get a job was a month later.
 let sqlconfirm = `SELECT * FROM users WHERE email = '${signInEmail}'`; You should look up SQL injections and why you should sanitize your input. Also, I may have broken your site when I tested for it, sorry about that.
I like it!
(I'm going to assume both functions were supposed to add) You may be using them here to achieve the same result, but there are a few differences that stick out to me very quickly. The former is useful for more than just logging. You very may well want a sum function that doesn't log, but returns the value so you can do other things with it. Say you're making a calculator app and the sum may just be an intermediary step that doesn't always need to be logged right away. Summing and logging are two distinct tasks so it's also nice to separate them as it makes them easier to name, understand, and use. See how it's not clear that 'practice' is going to log unless you look at its definition? And I doubt you want to call it something like, 'sumAndLog'. But if you named the former, 'sum', it would be very clear what's going on when you pass it to a console.log. You also could have simply returned the sum immediately, without making the variable c, but using the intermediary variable c is not costly and it may make it more readable for you. I prefer going without, but that's personal preference. &amp;#x200B; Alternatives: `function sum(a,b) { return a + b }` `const sum = (a,b) =&gt; a + b` `const sum = a =&gt; b =&gt; a + b`
I’m not OP but I fail to see what’s wrong with that SQL statement you highlighted, do you mind explaining?
Cordova (formerly PhoneGap) is the native app wrapper that allows you to run your HTML5 apps/games in a “WebView” (aka Hybrid). This allows you to extend your web app to be available as an app in the Apple App Store or Google Play. At the same time there are various plugins that let you access some native functionality like accessing the users contacts, GPS, etc. As for what JS framework you can run... the sky is the limit, it’s an agnostic wrapper. jQuery, React, Angular, Ember, Phaser, D3, etc. are all possible.
I see. So it could be anything.
Very cool! Thank you again, you're the real MVP! Also, just want to say that your name is Awesome! lol.
Great questions. 1. The main idea of this micro frontend project is each team is responsible for one gateway. So if a team is developing footer, they never think about a product description. Also, they never think about how their code served to the customer browser. Lets draw this. It looks exactly like above. So the team layout team doesn't event know product team. Also, none of them knows storefront. Storefront application is the main application that retrieves and connects partials each other. Could you please check the PuzzleJs demo [here](http://178.128.201.193:4444/) to make everything more clear? 1. The browser sends a request to Storefront 2. Storefront sends a request to Layout Gateway for Footer Content 3. Storefront sends a request to Layout Gateway for Header Content 4. Storefront sends a request to Product Gateway for Product Content 5. Whenever response received it is flushed to customer browser using chunked transfer encoding. This part is important. Please check the demo I linked above. &amp;#x200B; Now think about a scenario. The footer can be cached, the header can be cached, the product can be cached but the side menu can't. Because it has user information. It is easy to solve this problem when you have direct access to the storefront application. But you don't have. Teams are only responsible for their gateways. Warden starts to shine here. From time to time storefront application sends a special request to retrieve gateway settings. To make routing etc. It also receives warden configuration. There is a warden instance on storefront project and it caches gateway based on gateway configuration. So teams can manage their caching without touching the storefront project. 2. Probably, we don't have direct accesses to these systems. So sometimes we just wait for a solution. 3. To understand this one you need to read 1. Because whenever side-menu response failed or API behind side-menu is so slow, we need to make sure product content is rendered on customer browser as fast as possible. It optimizes first contentful paint a lot. This is why we are making each call independent from each other.
Could you please see the [response](https://www.reddit.com/r/javascript/comments/btdjmm/i_wrote_a_http_client_for_micro_frontend/eoxr6be?utm_source=share&amp;utm_medium=web2x). I am sure it will also answer this question.
"With proper caching" :) Could you please see the [response](https://www.reddit.com/r/javascript/comments/btdjmm/i_wrote_a_http_client_for_micro_frontend/eoxr6be?utm_source=share&amp;utm_medium=web2x). I am sure it will also answer this question.