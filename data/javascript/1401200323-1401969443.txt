Just a few ramblings... Find all of the elements with a classname of *ugh* and change them to *meow*? Self invoking functions inside of a function? Probably unnecessary as a simple function would suffice. Overall, your source code should be readable, maintainable, and understandable. The variable names should convey some information and help you diagnose any problems that arise. Here's an example of bad naming conventions: g = document.getElementById("ef"), k = document.getElementById("gh"), g? ef? k? gh? I don't know what any of them do or mean. Using a single character is usually ok inside of a loop for (var i = 0, len = robots.length; i &lt; len; i++) but as a variable name that will be carried around.. it's a no no. Here's an example of better: var network = 128, stop = (Math.floor(ipa[0] / network)), seattle = stop * network, broadcast = network - 1, jshint and jslint are your friends. Try to create reusable functions. You could have a function that finds a value from a lookup table and returns it, and then another one to put those values on the page. By including both aspects in a single function, you can't reuse that piece of code anywhere else. it is too coupled with the html page. this: (function () { var p = document.getElementById("sm").innerHTML, m = document.getElementById("ah"), h = " " + "hosts"; (p &gt;= 2) ? m.innerHTML = (Math.pow(2, (32 - p)) - 2) + h : m.innerHTML = 0 + h; }()); could be this: function calculateHosts(val){ // todo: need type/val check here val = val || 0; // default it to zero // some comment here why val gte 2 is important if (val &gt;= 2){ // hmm. math. pow. 2 to the 32 minus value minus 2. // scratches head. put a comment here so future me can understand what I'm trying to accomplish. val = Math.pow(2, (32 - val)) - 2); } return val; } and then call it with: function populateHostsValue(){ // get the value from the html page. whatever sm and ah are? var better_variable_name_for_sm = document.getElementById("sm").innerHTML, better_variable_name_for_ah = document.getElementById("ah"); // get the calculated hosts value var val = calculateHosts(better_variable_name_for_sm); var hoststring = 'host'; // if the value isn't 1 add an 's' to the end so it sounds more better. if (val !== 1) { hoststring += 's'; } // now write the value to the screen better_variable_name_for_ah.innerHTML = val + hoststring; } comments are your friend. oh, read up on parseInt. it can give you the wrong value if not called properly. overall. good job. transitioning from perl to javascript can be troublesome. remember: comments, better naming, and specialized functions are your friends. oh yeah, there's a subreddit for just this type of thing: /r/codereview
its more a play on words then an actual title. my main point is its like trying to "master" any technology it just cant be done because technology is always evolving. "master" "ninja","&lt;insert some other holier then thou phrase here" are all just buzzwords at the end of the day...i think its more ridiculous you took me seriously. still my point is valid.
Those 3 seconds pauses are there because it was running way too fast to see the loading animations on buttons/views. About the curses. What I can say. I'm Italian we talk loud and curse a lot.
Thanks a lot !. This is what I was looking for.
redivert cuprous theromorphous delirament porosimeter greensickness depression unangelical summoningly decalvant sexagesimals blotchy runny unaxled potence Hydrocleis restoratively renovate sprackish loxoclase supersuspicious procreator heortologion ektenes affrontingness uninterpreted absorbition catalecticant seafolk intransmissible groomling sporangioid cuttable pinacocytal erubescite lovable preliminary nonorthodox cathexion brachioradialis undergown tonsorial destructive testable Protohymenoptera smithery intercale turmeric Idoism goschen Triphora nonanaphthene unsafely unseemliness rationably unamendment Anglification unrigged musicless jingler gharry cardiform misdescribe agathism springhalt protrudable hydrocyanic orthodomatic baboodom glycolytically wenchless agitatrix seismology resparkle palatoalveolar Sycon popely Arbacia entropionize cuticularize charioted binodose cardionephric desugar pericranitis
Because pretty animations should take precedence to function? Loading animations are only useful for things that take an amount of time to load. It's never wise to create technical waste where it doesn't exist.
I'm in full agreement, and have been trying to prune these types of posts out. So thanks for the reports, whoever you were. OP: If your article is basically just a glorified set of Google search results, then it's probably just blogspam.
Wow. This is _the_ article that has finally made me really interested to get into Gulp. Thanks!
re: single letter variable names. You are absolutely correct about shortened variable names for runtime. A smaller file will run faster than a larger one. It is so important that libraries have sprung up to do the conversion for you: uglifyjs, google closure compiler, yui compressor, etc. This is something you reserve for runtime, not development. The shortened versions of variables names are great for running, but sucks for editing. Why make it difficult on yourself? Instead give them names that mean something and then run a process to minify the source code. You don't have to go all out hungarian notation on your code, but something more than a single character is helpful. If you are the only one working in the code, go ahead and do what you want, it's your code. But, if you are working on a team or have to go back and edit code that hasn't been touched in months you'll find that these code conventions are super useful. In fact, google produces a pretty good [style guide](https://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml) for javascript. Another tip (just in case) firebug and chrome inspector will help you debug live javascript code. Good luck, happy coding.
http://bxslider.com/
You may want to break out the browserify step and make it a dependent step (which may also help further experiments around your timings). I put an example here: https://gist.github.com/AutoSponge/68d12a832c86ed317406 Sorry I can't help more, I'm not using angular anymore so I can't provide more insights but it sounds like that minify step doesn't use vinyl objects/streams and it may be reading in entire files.
It would be nice if I could link to particular sections of the site (like routing), but I can't, because there aren't any routes.
That is correct. But be aware of the == type convertion. For example "" == 0 is true but "" === 0 is false.
Nice work! Excuse me if my question is dumb, bot how exactly do I use this in a HTML5 game of mine? Will this require all the users to manually get node.js on their own computers? Or will I have a line to include in the html file just like with jQuery? 
There are different ways to use the library. If you are using Browserify (which needs Node.js), you can install it with npm (the package manager). Your users won't have to install anything. You will make a build and include it in your HTML. If you are using the Bower dependency manager, you can install it with bower. But you can also simply include it with a script tag - old-school style. Just like jQuery. We have ready [builds](https://github.com/maxkueng/victor/tree/master/build) (minified and unminified) that you can download and use in your project just like any other JS library. There will be a global variable called `Victor` (just like the `$` in jQuery). You'll use it like that: `var myVector = new Victor(100, 200); ` If you have any more questions just ask. If you have questions about using the library, you can also [file an issue](https://github.com/maxkueng/victor/issues). It's not just for bugs, I'm happy to answer questions there too.
Thank you kindly for the quick reply! 
Pretty animations shouldn't take precedence to function. But if they give visual feedback to the user about what is happening or that he should wait for a resource to load, they are a great wait to improve the quality of your UI. Don't you think?
redivert cuprous theromorphous delirament porosimeter greensickness depression unangelical summoningly decalvant sexagesimals blotchy runny unaxled potence Hydrocleis restoratively renovate sprackish loxoclase supersuspicious procreator heortologion ektenes affrontingness uninterpreted absorbition catalecticant seafolk intransmissible groomling sporangioid cuttable pinacocytal erubescite lovable preliminary nonorthodox cathexion brachioradialis undergown tonsorial destructive testable Protohymenoptera smithery intercale turmeric Idoism goschen Triphora nonanaphthene unsafely unseemliness rationably unamendment Anglification unrigged musicless jingler gharry cardiform misdescribe agathism springhalt protrudable hydrocyanic orthodomatic baboodom
redivert cuprous theromorphous delirament porosimeter greensickness depression unangelical summoningly decalvant sexagesimals blotchy runny unaxled potence Hydrocleis restoratively renovate sprackish loxoclase supersuspicious procreator heortologion ektenes affrontingness uninterpreted absorbition catalecticant seafolk intransmissible groomling sporangioid cuttable pinacocytal erubescite lovable preliminary nonorthodox cathexion brachioradialis undergown tonsorial destructive testable Protohymenoptera smithery intercale turmeric Idoism goschen Triphora nonanaphthene unsafely unseemliness rationably unamendment Anglification unrigged musicless jingler gharry cardiform misdescribe agathism springhalt protrudable hydrocyanic orthodomatic baboodom glycolytically wenchless agitatrix seismology resparkle palatoalveolar Sycon popely Arbacia entropionize cuticularize charioted binodose cardionephric desugar pericranitis blowings claspt viatorially
A loading bar, spinner, or even text is a great way of giving user feedback so that they don't spam the submit button and understand the server is working on their request. They are completely useless if the server can reply faster. The whole point is to give the user reassurance that the process they are doing is taking place, but is taking extra time. If your process completes before an animation and the solution is to have the server wait then your reason is flawed. If anything have the client check to see if it's animation is completed before serving the server response. The server should NEVER be responsible for anything the client does, especially timing. Perhaps I'm wrong, but it feels like you are trying to replicate a feature you see on bigger websites that are slower and need a loading animation. When you have a local sqlite database store it should be quick and near instant. This means you don't have the technical need for a loading animation. If you had a production service that relied on a large server cluster to replicate the user data over a few seconds it would be highly justified.
I'm glad you liked it! The best way to start with it is experimenting with packages and the streams process. It's fun and quite easy.
&gt; When you decide to not pick a public framework, you will end up with a framework anyway: your own. I respectfully disagree. A well planned and extensible application is not a framework just because the code is well planned. A framework is a set of code expressed via API to perform code related tasks at your behest, typically in the form of abstraction, with an intent for constant reuse. Much of my own application code in JavaScript is not a framework and does not want to be a framework. Such code is purpose specific and attempts to accomplish a set of established requirements as efficiently as possible. In this case there is absolutely no abstraction, rarely an API, and any reuse is purely coincidental. Lack of a framework does not make code bad. Failing to accomplish a set of provided requirements as durably and efficiently as possible is what makes code bad, which may include framework code. Edit &gt; Maintain the framework. If you don't, it'll evolve into a liability. I have found that breaking code down into very small collections as functions and then nesting those functions as necessary by proximity of need solves more than half of this concern. The result is a purely lexical construct whereby the lexical nature of the code provides a maintainable structure without any overhead or silly conventions. One way to ease maintenance is to have fewer things to maintain.
 var isInt = function (x) { if (typeof x !== "number" || x.toString().indexOf(".") &gt; -1) { return false; } return true; }, a = 1.0001; isInt(a); // false
Actually I know of someone that has, but he's pretty busy these days... Thankfully, Mr. Resig (/u/jeresig) documented it all very well on his blog: [JavaScript Trie Performance Analysis](http://ejohn.org/blog/javascript-trie-performance-analysis/), as well as committing much of his code to Github (see the article for the link).
jquery? console.log($(this).parent()); if you can reduce the amount of DOM the selector has to look at then the traversal will be faster. So calling generic $('div').parent() will be slower then $('.someElement').find('div'); etc etc etc.
Pretty badass, liked that whole bit about eliminating the route altogether in favor of the injected store. Can't say I understand how that all worked, but it was definitely a cool little intro. 9/10 would ember again
Javascript is not infinite. There are a finite set of rules that define the language known as Javascript. And yes, you can master it. What you are naively arguing about are abstractions built with javascript, and these are not strictly javascript and there are innumerable permutations, so of course you cannot master every permutation of code written in the language javascript by every half-assed "hacker ninja rockstar". Your argument is really misleading and confused. Javascript has a finite set of rules, it doesn't change, it doesn't evolve the way you might think it does. Code written in the language javascript is another story and I believe you are talking about frameworks and libraries written in javascript, and not the language javascript itself. So, your point is quite invalid if we are talking about the language javascript, which can be mastered quite easily with some focus. To say otherwise is to misunderstand the nature of javascript. 
Well put, I don't see how it's not obvious to people that a reusable set of "framework" code (to use the posts definition, which I have issues with) uses more a hell of a lot more abstraction than the relatively tiny amount of glue code needed in a app designed around reusable libraries (both your own and 3rd party). It's a trade off, if you are constantly writing new applications that are very similar then use an existing framework or make your own, and then I agree with his advice about doing it well. That's why so many web frameworks were developed by web consulting shops. I personally don't make a dozen ecommerce websites a year so that's very often a bad tradeoff for me.
I'll check it out! I've already begun the work on splitting the files and have something to committ pretty soon :)
this is pretty bad though
um. Ouch :(
Awesome. Keep it up 
Generally speaking, stuff in square brackets is *optional*. In this case, it appears that either *start* or *step* may be omitted, or both may be omitted. This notation can be nested. For example, f([a[, b]]) would indicate that f() can be called with no arguments, or with just the *a* argument, or with both the *a* and *b* arguments. EDIT: Looking at the [source](https://github.com/mbostock/d3/blob/master/src/arrays/range.js) and comparing it to the [documentation](https://github.com/mbostock/d3/wiki/Arrays#d3_range), it looks like the documentation is wrong, because you can not omit only the *start* argument. The correct notation for this would be: d3.range({start, stop[, step] | stop }) Curly brackets with content separated by vertical bars indicates a choice. In my example, your choices would be *start, stop[, step]*, or *stop*. Better yet, it should simply list two forms: d3.range(start, stop[, step]) d3.range(stop)
Ignore posts that are neither supportive nor informative. 
Copying and pasting? This is just copy paste 2.0, except your outsourcing a simple 20 lines of code for what? It would take me longer to hunt down a plugin that handles this functionality than it would take me to write one from scratch. 
Oh whoah, that's awesome. I'll check that out. Thanks!
actually its still evolving es6 is just around the corner and es7 being proposed and who knows how many other version we will run into. the web is constantly evolving. I do admit my "hacker ninja rockstar" argument was...childish the language is not dead and as prominent as the web is it never will be. and im not arguing its just my opinion and again at the end of the day ill still feel its the correct one and ill continue to bang out code with that in mind regardless what you or anyone tells me (short of mr.crockford himself) as for the OP, I didn't like the syntax of coffeescript myself. id rather use typescript but thats just me but when it comes down to it I prefer vanilla js just because I actually like to write code and not generate it.
First game? Looks pretty nice. The GIF [arrow](http://www.diamondhunt.co/images/uparrow.gif) is kind of annoying, though.
It goes away once you buy your first miner :)
The best (and only) way to improve as a programmer is to write **and** read code daily. The more code you write the more you realize how bad your previous code was. The more code you read, the more you realize how bad your previous code was. Did I say that twice? Invest your time in something that challenges the way you think about your programs. Implement some algorithms and interesting papers in JavaScript; learning theory is as important as writing code. Re-invent a few wheels, go on Github, look for projects that make you think about the implementation details, and re-implement the library yourself, from scratch, using your knowledge so far. If you get stuck go look on Google for the problem but when you find the solution don't just assume you know why it works, invest some time reading about the specific behavior and why it was wrong, searching the [ECMA spec](http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf) for detailed information for example. Here's a few challenges I would suggest: * Yes, learn jQuery * Re-invent the DOM wheel, create your own jQuery * Implement [lazy iterators](http://www.cs.indiana.edu/~sabry/papers/yield.pdf) or [lazy streams](http://mitpress.mit.edu/sicp/full-text/sicp/book/node69.html) * Learn about [CPS](http://en.wikipedia.org/wiki/Continuation-passing_style), implement [Promises/A](http://wiki.commonjs.org/wiki/Promises/A) * Read [Learn You a Haskell for Great Good](http://learnyouahaskell.com/chapters) and apply concepts in JavaScript, following the [Fantasy Land Specification](https://github.com/fantasyland/fantasy-land) * Learn AltJS languages: [CoffeeScript](http://coffeescript.org/), [LiveScript](http://livescript.net/), [TypeScript](http://www.typescriptlang.org/), [PureScript](http://purescript.readthedocs.org/en/latest/) And lastly, don't give up if you don't understand something, eventually you will have an "aha!" moment, and suddenly everything is clear. If the problem is too easy, you're wasting your time.
Nope, no reason. I will fix this, thanks :)
Don't learn jQuery, learn a front-end framework like Angular. If you learn jQuery and then try to pick up a front-end framework, you're jQuery knowledge will pretty much be useless and you'll have to "unlearn" a lot of it.
If you do, don't hesitate to ask for any tips :) Trust me, If I can do it, you can aswell :)
*cough* bullshit *cough* Learning to use jQuery isn't going to stop you from using a framework. Literally every single framework in major use today uses jQuery, Angular aside. 
&gt; Literally every single framework in major use today uses jQuery, Angular aside. How can you call bullshit on someone and then make such an idiotic statement? Think before you type.
The fuck are you even talking about? Backbone and Ember both require jQuery in order to function (and don't give me that 'just use zepto' bs). Angular itself comes with jQlite, this shit is basically everywhere in fe dev. Avoiding it because it'll take you a day to get used to a framework is asinine
For the OP's "library" I could agree with you. I took your earlier comment to mean that small modules aren't worth depending on since you can just re-write or copy-paste the code yourself (like domready, rAF shims, etc). The major benefit of any NPM module, even if it's just a [small function](https://github.com/mikolalysenko/two-sum/blob/master/two-sum.js), is that it can be versioned. So if you find a bug with it, or decide to add new features at a later point, all other code that depends on it (which could be a lot, if it's a small and useful utility) will be able to install new patches and minor versions _without any code breaking._ IMHO it's better to spend 5 minutes finding a module that already has tests and revisions, and a longer lifespan, rather than spending 3 minutes re-writing and inlining the same function into your codebase, where it will have no lifespan beyond your project. 
what the hell are you talking about. nothing wrong with jquery as long as you dont solely depend on it. Backbone &gt; angular 
Addictive as hell. Clone of cookie clicker/etc, but addictive.
This is totally awesome! I want to be able to do this. Did you use canvas at all? I'm a total newbie. Thanks.
&gt; Learning to use jQuery isn't going to stop you from using a framework Never said that. I like to be practical. Everyone always says learn X, Y, Z, this, that, read these books, go through these tutorials, etc etc. Yes in an ideal world, everyone would probably be better of learning all of that, just like they'd be better off getting a computer science degree. But time (and motivation) is limited, and learning Haskell is just not a high priority for someone trying to improve his Javascript (that's the title of the post). jQuery will obviously not hurt you. But if you decide to use Angular, then your jQuery is essentially useless. You're going to want to do things the jQuery way, but that won't be the right way to go about doing it. I believe that front-end frameworks are going to be the next trend, so why waste time learning the old way of doing things? I guess my advice boils down to: learn a front-end framework &gt; Literally every single framework in major use today uses jQuery, Angular aside Lol. Yes, Ember and Backbone use jQuery. I can't speak to Ember. Backbone is on its way out, not to mention it's relatively a pain in the ass to learn, so I wouldn't recommend it to a noob learning his first framework. Angular has a much bigger community (and more job opportunities) than Ember, is easier, and is backed by Google, so it's a much safer route to go. OP can learn whatever front-end framework he wants obviously and I'm not bashing the other ones, just giving my recommendation. If you disagree, I'd love to hear why. Or just keep downvoting my posts and telling this guy to reinvent the wheel. That's not my style, but maybe he'll dig it.
&gt; Backbone &gt; angular When I set out learning a front-end framework, I chose Backbone. I spent two frustrating days trying to do the simplest things and said "fuck it I'll check out Angular". In about an hour I accomplished what I'd been trying to do for two days in Backbone. Backbone is on its way out because it just hasn't kept up with times and does too little. At least that's what people keep telling me. So I wouldn't recommend it to a noob. &gt; nothing wrong with jquery as long as you dont solely depend on it I don't have anything against jQuery. Just don't think it's necessary to learn anymore. Even if it does something that you can't do with CSS or whatever, it's not hard to learn.
I wouldn't say it's fun, but it is useful. Lots of Java projects are mavenized these days and to be able to get your javascript shoved directly into the webapp is a nice thing to have. Especially if it's all in a single build process. Personally, I prefer the [grunt-maven-plugin](https://github.com/allegro/grunt-maven-plugin), which I'm sure was written by a java developer, but he is somewhat javascript-savy. Run's node/bower/grunt all for you and puts everything into a target-grunt folder which is similar to target as it should only live for the life of the build and never checked in. 
yay :)
Really fun, I just spent a couple hours playing it.
`$('[type=text]').on('keyup', checkValidity);` You should throttle it with underscore though, so you don't pile up a bunch of ajax calls. Also, usually you would do validation on client side before ever sending to backend. Its a better experience. You still do backend validation, but you should also validate on front end before accepting input.
[Here ya go](http://jsfiddle.net/jstx/K5wB9/2/)
The JavaScript Garden is my go-to recommendation for people wanting to really understand how JS works. Learning jQuery is all well and good, but learning the ins and outs of JS is going to be the most useful tool in the long run. http://bonsaiden.github.io/JavaScript-Garden/
Read the Good Parts. Then implement Tic Tac Toe on the frontend using html5/javascript, connecting to a NodeJS server
Do you have any extensions installed? That means something is overwriting the version of jquery that's used on reddit. It might be something else, like adware too.
IIRC, it's mostly used internally for dom manipulation
Any idea what I could do to fix any or all of these problems? I did some reading about the jquery but all I could dig up were posts by web guys about their own code... Thanks for the help!!
I actually would say Angular would inhibit your learning of Javascript -- too much magic. I interviewed a couple college grads who thought they knew JS because they had built an Angular app, but they didn't even know what they didn't know.
Why not just have the function also call checkValidity at the end? Also, I would definitely look into something like [debounce](http://underscorejs.org/#debounce) in the underscore library as a great solution to your main problem.
call the same function `on('change', checkValidity)` or just call it directly when the js populates it.
Great Job! Really inspiring to make something like that as well.
Much better than cookie clicker.
Never heard of Codewars. I just spent 3 hours playing with it, its dope. Have some gold man! 
Thanks for the comprehensive response! I was going to give you gold, but it looks like someone else also found your post very helpful. I gave gold to another user with a similarly helpful response as well. Anyways, I appreciate it. Looks like I got some work ahead of me! 
Thanks man! 
Unfortunately 'change' doesn't pick it up, if javascript is what is making the change. Unless i'm wrong... Please tell me i'm wrong :)
Disable extensions one by one and see which one was the troublemaker, if none of them, run your anti-virus programs.
Are you using Internet Explorer? Change to Chrome or Firefox for a quick fix.
made my day :) dat link to wikipedia^^
Here is a little example code (not tested on my phone tho) which you can adopt and modify to suit your needs. (function(){ var $element = $('input.ajax-search'); var timer; $element.on('keyup', function(){ timer = setTimeout($element.trigger, 300, 'fireajax'); }).on('keydown', function(){ if (typeof timer !== 'undefined'){ clearTimeout(timer); } }).on('fireajax', function(){ var value = $(this).val(); // or $element $.ajax('/fancysearch.php', {query: value}).success(function(data){ // do sth with data here }); }); }); })(); I really like the eventdriven approach by the way. Edit: Like others already pointed out, you have to add a throttle there. I accidentally got banned by google for a short period of time because I literally flooded their server (every keypress -&gt; one ajax request). You can change the time to sth between 200 - 400ms but it really depends on your project. 
A bit like [HTML9 Responsive Boilerstrap JS][1] [1]: http://html9responsiveboilerstrapjs.com/
Don't forget to learn proper building/module tools. eg. gulp or mimosa / requirejs or browserify
Or just look at the error's stack trace in your console, but whatever suits I guess...
I hate it and I just started using it. Yes, I know that just starting it means I haven't given it a fair shot, but I honestly don't want to. Usually I can see the benefits of a language right away but not with Angular JS. The documentation is horrendous, it's very sloppy looking, and it looks like just another unnecessary web language fad. Maybe I will grow to like it, but at this moment I don't care for it at all. EDIT: Oops I just noticed this thread is 4 months old.
Either this is incomplete or for some reason only wants to cover web browsers. For example, Rhino and Nashorn are both missing.
Thanks for the tip. 
(You can indent your code by adding 4 spaces in front of each line.) This is how lots of sites do it in order to reduce calls from what I can see. Combined with client side checks (if you can) it should reduce the calls by a lot, e.g. only running after 3 or more characters have been used. It also transports over to generic JavaScript quite well.
There is no fork so people that are talking about the multiverse or the 10th dimension are wrong.
MVC frameworks are just a completely different way of thinking and should be learned. That's the point. Instead of manually doing DOM manipulations to bind data to DOM elements with jQuery, you're setting your app up so that you can avoid that headache. In the end your code is 1/10th the size and the headache.
So I don't need to know it? Got it.
&gt; Re-invent the DOM wheel, create your own jQuery This is extremely valuable advice. Years ago I decided to try making "my own jQuery" which never saw the light of day but my JS abilities went through the roof. I always suggest people watch [Paul Irish's "10 Things I Learned from the jQuery Source](https://www.youtube.com/watch?v=i_qE1iAmjFg). He presents a lot of interesting and quirky things about JS in a really refreshing way. Sometimes you need the dry, precise language of the specification but seeing someone just kind of excited about programming does a lot for motivation when you're not sure where to go next.
Hmm. Weird. I'd have intuitively thought that that would be slower because it involves a linear search. Regardless you should benchmark the two if you're actually going to make a design decision based on this.
The way I learned everything (and continue to learn) is just by searching online for stuff you want to know how to do, e.g. "javascript how to clock" or "javascript function on every element in array" etc. Stackoverflow and MDN are the websites you should go to (they should appear in the search results often). I used to use W3schools but some of their info is out-of-date or wrong, so don't rely on that (maybe occasionally). Anything else you want to know (including Javascript-related stuff), just ask me! Just remember you might know more than me so I might not be able to help with everything, but it might be the other way around... **[update]** Another thing I forgot to mention before, don't try to use loads of Javascript if you don't need to (unless you want to support old browsers), CSS3 is amazingly powerful these days so you don't need complicated Javascript just for moving something with a transition like you would have to before. **[update 2]** Remember libraries don't actually add new features magically to Javascript, they just let you do things with less *user code*, but not less *overall code*. Try to do stuf vanilla unless there's a library for exactly what you want to do, and nothing else, then it might be more worthwhile.
Build something soup to nuts. Try and make a simple blog CMS that is 'ajaxy'. In doing so, you'll start to see why certain frameworks or libraries exist, and how JS fits into the stack.
Well this all comes down to OP's goals. Is it to make websites that he wants to make in the most efficient manner, or prepare himself for just any job? If it's the former, I'd say that learning a front-end framework is absolutely vital. If he just wants any job, including the drudgery of maintaining old-tech legacy code that's inefficient and slowly becoming extinct, then he can learn whatever he wants. I'd still recommend learning a front-end framework though. jQuery is just a library that makes animations and annoying things in Javascript easier (eg. Ajax calls). It's not hard. You learn how to select things with $ and pretty much everything else you can Google and there's probably a method for it. Front-end MVC frameworks are a completely different way of thinking. Instead of manually doing DOM manipulations to bind data to DOM elements with jQuery, you're setting your app up so that you can avoid that headache. In the end, your code is a fraction of the size and headache. There's no reason to not use a framework if your app is going to have more than a trivial level of complexity. At least in Angular, jQuery plays no or very little role in that. It may even be a hindrance in that you'll be tempted to do things the "jQuery way". At least this has been my personal experience. After some quick Googling, I'm not alone. [StackOverflow: How do I “think in AngularJS” if I have a jQuery background?](http://stackoverflow.com/questions/14994391/how-do-i-think-in-angularjs-if-i-have-a-jquery-background) [Angular for the jQuery Developer](http://www.ng-newsletter.com/posts/angular-for-the-jquery-developer.html) &gt; don't let jQuery become a crutch &gt; It’s tempting to use jQuery as a crutch when we first start learning Angular. In our classes and books, we constantly recommend to not even import jQuery when first starting to build with Angular. OP do your own research and don't blindly trust the hivemind on here.
The Ember team are doing a really good job lately. Both on the actual framework and on marketing. I really didn't like the concepts behind Ember at first. But after seeing the latest screencasts posted here I feel like giving it a real try.
I'm pretty sure I've read that there are performance benefits to binding a single event on the parent but I don't remember what they are. There is another reason to do it though, if you bind on the parent then you don't need to bind new events if you dynamically add children.
OP doesn't appear to be a developer.
This is cool. I love Atom, it's just not quite there yet. And not in plugin support or packages, but overall construction. It has issues with mounted drives and keeping speed, search leaves a bit something to be desired, etc. That said, with an entire community versus one guy (Sublime) they'll iterate a lot quicker.
While I occasionally enjoy the novelly of these projects. For the most part I really despise them. I get it's just a joke, or even a satire on the state of javascript development. But the whole javascript community is so over-saturated with micro frameworks and micro libraries and micro workflows and micro build tools. Can't we as a community stop making these bullshit projects, and help contribute to something meaningful that will push javascript forward? It just seems like such a waste of time that contributes nothing.
Any *complete* universe would have at least one instance of Richard Simmons' glittery hotpants.
Can you please add support for IE 6,7 &amp; 8? I need this for 5% of my user base that refuse to upgrade. 
I didn't even realise there was a performance benefit to event delegation, I thought it was all about being able to dynamically add elements to the dom and not having to worry about attaching event handlers all the time. So thanks, you've taught me something today.
[This](http://ejohn.org/apps/learn/). It's an interactive web app made by John Resig, creator of jQuery. It will really go a long way of taking you to the next level.
Has anyone used this? It's odd that there seems to be very little information about this.
https://www.youtube.com/watch?v=gY2NXYrVpMg#t=83 The rest of the interview is pretty okay. I don't agree with everything he said but what he said about grunt/gulp was spot on. I saw this in the asp.net community a lot as well. You see all these MVPs and microsoft employers pimp the latest mvc version to the point that you almost feel bad for not using it.
Cool! I'm absolutely loving all the open source projects that have been coming out of Facebook lately.
&gt; The rest of the interview is pretty okay. That is right up there with one of the greatest compliments I've ever received on the interviews. :D
Next step - CoffeScript :) Not a joke. I love JS and I've done enough coding on frontend and NodeJS on backend. I was totally against CoffeeScript until I wrote my first line of Coffee. The code gets so much cleaner with coffee and so much easier to understand when it's not your own. I'm writting Coffee for the last 4 years already. I don't regret it and I wish I found it earlier. But, ofc, you have to know first JavaScript works anyway.
There's potentially huge performance differences; per-element binding is O(n) while delegation is O(1).
Nothing specific, but I googled it and there's nobody recommending it, nobody talking about it, a Hacker News post from 22 days ago with 0 comments. It just seems odd that something released by a major tech company that is apparently a significant improvement on the existing options doesn't have much media coverage. So I guess I'm wondering if it's any good.
[Semi-relevant xkcd](http://xkcd.com/927/)
Some projects have a ton of marketing and have been top story hackernews and then there are no activities on github and theure instantly abandoned. I wanted fb-flo to grow organically. Go look at the issues and pull requests on github, it's pretty active. It's true that it's by Facebook, but reality is anyone at Facebook can open source projects, which is awesome and unlike any other company at that size. So I'm the only one who worked on it internally. However, now I'm getting some community love. As for nobody recommending it, we use it pretty heavily at Facebook and we recommend it ;) but it's only 22 days old, so give it a little bit more time, it's hard to get started with at the moment and some work needs to be done to integrate into the various frontend tools. 
as far as I can see only the act of "adding of a listener" will cost more performance. Which is normal of course. 1 listener vs 1000 listeners. It does not look like there is any extra runtime cost for having more listeners. So only during page setup or when creating tons of extra elements in 1 go does it have an effect. There is however an extra runtime cost for a "delegated" listener, because that one will have to do a check for every object in the bubble list to see if it matches the selector. So for 1 off click handlers it makes sense to just add the listener to the correct object itself instead of using a delegated listener on the parent object. But when you have a list and want easily add/remove elements without worrying about the listeners you can use a delegated listener. When you have 1000s of objects that need a listener on load, then it makes sense to move the cost to the runtime and keep loading cost low. The runtime cost added by the delegate listener is fairly minimal unless you use a very, very complex dom structure. But when you add an occasional element at runtime the adding of a listener cost is minimal. For that it is just a convenience to have a delegate listener on the parent element. ---- Regarding your example: // normal events $container.on('click', '#home', viewHome); $container.on('click', '#profile', viewProfile); $container.on('click', '#search', viewSearch); $container.on('click', '#logout', viewLogout); To add 1 off listeners like this is silly, because you are not reducing the load cost. You are still creating a listener per element. The cost for this is equal to just adding the listeners to the correct object. 
**cheat code:** open browser console and enter for(var i=0;i&lt;50000;i++){$('img#giantRockImg').click().click().click().click().click();} 
Is there an integration library for grunt and gulp? If not I don't see people switching to it. 
I know, this is bad, but I must do it for only me. It doesn't work. I'm loading script javascript in php, in echo function. Maybe this is problem?
There are issues on the github repo with folks working on it. But I agree it's important, and We should get that soon
This isn't that great of an example since you could just do promisifyAll on fs and promisify is deprecated.
Why would you add it to your bookmarks? It's already stored within the history of the browser. If anything, I'd try to read the history of the browser and do it that way, since all of the values are stored there before the browser closes anyways.
Bring it up in http://www.reddit.com/r/fifthworldproblems/ I'm sure they'll have an answer...
You can't automatically add bookmarks via javascript. If you could do this, every skeezy website you ever visited would add them to your bookmarks bar to get you to come back. This would be the worst browser feature ever.
This feature is only for my project. I can do it in other language programming? Maybe php?
I cannot say, because I don't know your construct. Have a look at the source, maybe some things need to be escaped.
Wow, Facebook is fucking killing it lately with these open source projects
Why do you have two semicolons after the "div.cloneNode(true)"? Also, not sure how this works with Java, but shouldn't you either return the DOM tree or set it as a global?
G̼̲͕͔̤̱͚o̵̙d̨̰̫͖̫̻ͅ,̬̘͈ ҉͎̖̺͚͍̘i̘͎s ̸͍̥t̫͖̯h̛͔̼a̹̫͙͚̯͉t͞ ̵̪̤͚͉̞ỳ̝̰͙̝̥͙ͅo̖̰̤͚̯̙̣͝u̻̻͖?̧̥̜͇̮͕̟
the function `getElementByTagName` doesn't exist. It's called getElement**s**ByTagName
It will never have the speed or processing power SublimeText has, simply because it's straight C++/Python vs. Javascript/DOM inside a Chromium Embedded application. Not that it's a bad thing, but try opening a large file (max is 2MB right now). * Edit C++ at the core
MVC is an important concept, but it is not unique to Javascript. Monolithic frameworks may save you time and headache, but those headaches are where the learning happens. It's like learning to drive by stepping in a self-driving car.
php is server side, so no. You can do it as a chrome extension, though: https://developer.chrome.com/extensions/bookmarks I've written many Chrome extensions, they're easy. If you can code javascript, you can write a Chrome extension. This probably exists for Firefox, too, but I've never written anything for FF.
Thanks! I have to agree. There are still bugs that are definitely there (for example, I think it was only recently that someone managed to track down a bug that was keeping tabs / spaces from being toggled when there was a certain kind of comment in the file), but it's crazy to see how fast it's changing. 
I wonder if the project will ever consider moving to a different runtime. it'd probably involve porting those glorious dev tools, though. 
[fuckit.js](https://github.com/mattdiamond/fuckitjs), anyone?
This video should definitely extend the current ember official guide! simple, understandable and professionally performed by [eviltrout](https://github.com/eviltrout) 
I've been following this since the release, it seems really promising ! A bit busy right now but as soon as I'm available I will dig into it to see how it can be included in a gulp/grunt workflow !
I'm not sure I follow the question. A couple things come to mind, but the most obvious one would be to ask does contains an element with the ID "random_image"? Maybe it would help if you had a JSFiddle/JSBin/CodePen/Plunker/whatever to demonstrate the issue you're having. 
After a quick google, http://stackoverflow.com/questions/22126078/what-is-the-difference-between-sublime-text-and-githubs-atom Sounds like Sublime's core is written in C/C++... so not just Python. Things may pick up as Chrome's webkit and Node.js become more refined, but C/C++/Python will still beat that by a long shot in terms of performance.
&gt; I am trying to build a simple Java application Java or Javascript?
That'd be awesome. I look forward to that. Let me know how I can help
Didn't change anything, still not displaying the background image
Not sure if this was updated since, but you have your CSS in the HTML pane, no actual HTML in the HTML field, and you probably want to remove the &lt;script&gt; tags (which are used to include JavaScript in HTML) from the JS pane. 
http://jsfiddle.net/w24xy/4/ So. Appologies this didn't click sooner, but the reason for this apparent inconsistency is you're dealing with 2 completely different things. In your code sample when you execute document.getElementById("random_image").style.backgroundImage you're fetching an element, accessing its styles, and attempting to insert a string into a CSS property on the element. Unfortunately this is the wrong syntax for CSS; URLs must be wrapped with `url( )`. In the next code block you're accessing document.body.background Here you're retrieving the body element and modifying its `background` attribute. This is an HTML-level attribute rather than a CSS property. The difference between these two patterns are that you're accessing fundamentally different *types* of data and as such they behave differently. EDIT: Please note that the code sample I provided uses &lt;element&gt;.style.background for both elements. In this case you can see the behavior is consistent and achieves the desired result.
If you want just the bare tags (function(){ return document.childNodes;})() If you want to include the innerHTML of the tags: (function(){ return document;})() EDIT: Actually both return the innerHTML too, I don't know of the top of my head of any function that returns the stripped tags.
I was just using this to show my relevant code in it's entirety, not really worried about the semantics as I'm not trying to run the code through JSfiddle. and the script tags are around it because i AM running it in the head of my html right now. 
Yep. Just for kicks I moved the filename out of the string and concatinated a new string! http://jsfiddle.net/w24xy/5/
http://jsfiddle.net/RJ38x/4/ this is what i have now, with a script running randomize(); after the element loads in the page. still nothing showing up. I'm totally stumped. even if i take out the url, and just leave the background color to be changed, nothing happens.
Thanks so much for developing this! Sorry you got some downvotes for defending it :( I'd love to know more about how the code replacement works. If bundle.js is replaced, is its code run in full? If my bundle.js includes code calling addEventListener and passing an internal function, will there be two event listeners on the node after a reload, one for each version of the code? (In that case, is there a way to do manual cleanup on unload of a version of bundle.js?) Or would there be two event listeners on the node, both referring to the most recent version of the code (i.e. V8's representation of the code was completely replaced)? Or does Chrome track that bundle.js was responsible for a bunch of event listeners, and will it remove all of those behind the scenes during the reload, so that there would only be the new event listener on the node? If Chrome doesn't do this, would it be viable to monkey-patch addEventListener and removeEventListener to do this tracking?
thanks! will look at this 
I appreciate you trying to help, but you're missing the point. I'm using the fiddle in order to display my code so you can see it easily, I'm not worried about whether or not the code is in the right box because i'm not trying to run it. It's just so you can see it. I did state in my comment that my run script was in my HTML. The problem is, that code is not working. It just isn't. http://jsfiddle.net/RJ38x/8/ Everything is in the right place now, this is what I have. It is not working. The commented out portion DOES work.
that's good to hear. It'd be great if you can share your experience here https://github.com/facebook/fb-flo/issues/12
Great questions. The way it works is that V8 has a feature where you can change code of live function pointers that gets reparsed and recompiled and updates the functions. So you can edit live functions and next time they're called the new code will run. Now, if you have an event listener for say, a button, and then you change the code for that event listener, next time you click the button the new code will run. It's pretty neat. However, there are somethings that this doesn't work for. When adding a new method to an object or class (prototype etc) it will not be added until the code creating that class is run again. That's why you still need to reload sometimes. In the future I hope to make it extensible so people can create plugins to do more stuff on top of this basic functionality. For example, we use React at facebook and it works great with it because all the UI code is written in JS (no template messiness), but whenever you change a React view you need to manually trigger a rerender. Ideally, we'll have an event listener to listen on code change and find the React component that have changed and automatically trigger a rerender to get the most up-to-date code
Ah, in the React approach where almost everything is a pure function, and the event listeners are handled by the library (which won't be changing while you're doing frontend development!), this makes a heck of a lot of sense! I see you've got [some code in there](https://github.com/facebook/fb-flo/blob/master/client/session.js#L288) to fire an event with the changed file, so you could just forceUpdate your root component on the event! Very cool! I've been playing around recently with https://github.com/andreypopp/react-quickstart for fully-isomorphic server-side React rendering, and it seems you could pretty trivially throw fb-flo in there using [code from here](http://stackoverflow.com/a/14801711/298073): var App = require('./client'); // a Component flo('./', {}, function(name, cb) {require.uncache('./client'); App = require('./client'); cb()); Now you've got me wondering whether you could do the same kind of hot code replacement for server-side Node code *in general*, or at least for modules that don't have side effects when they are loaded. Imagine if you had a `awesomeRequire('./client.js')` that would hot-code-replace the function pointers in the returned Client object whenever anything changed in your working directory... and then you could polyfill that with a `awesome-require-browserify` package that uses fb-flo on the client side! The Holy Grail of Holy Grails of dev productivity! Do you know what the underlying V8 API that Chrome uses for changing the code of function pointers is? I tried searching for V8 hot code reloading but couldn't find anything useful. At least it would give me something to search in the Chrome internal code to learn more about whether this is feasible... :)
If they're same origin you can do: (or also if CORS is set up for that domain) iframeElement.contentWindow.location.reload(); But if it's cross origin and there is no CORS set up then you can't do that, and you'd have to do something like what `jestecs` said and do something like; function refreshIframe (iframe) { var url = iframe.src; iframe.src = '/'; iframe.src = url; }
I don't see where it lists the documentation for Javascript on the page, but I changed it to document.getElementById("random_image").style.background = 'url('images/random/'+num+'.jpg')'; and it still doesn't show up. I don't get it.
Have you tried https://angularjs.org/ ? seriously why wouldn't you start there, they have several simple samples on the homepage (scroll down)
Well, I'm using javascript to randomize a number between one and four (to randomize the image on refresh). After the javascript, it should be images/random/1.jpg and i can assure you, the folder random has 1-4.jpg edit: even if i use the javascript to display an image (without using +num+) it won't display it. edit 2: document.getElementById("random_image").style.background = 'url(https://www.google.com/images/srpr/logo11w.png)'; that code works, now it's just a matter if getting the *num* variable to work.
got it document.getElementById("random_image").style.background = 'url(images/random/'+num+'.jpg)'; this is what works for me.
Yes you got it! Also the event firing was a contribution from someone that wanting to use the update event for updating templates https://github.com/facebook/fb-flo/issues/26 I'm interested in making this work on Node and I really like your ideas. I'm sure there must be a way to access the hotswapping feature from node. If you open an issue with these ideas we can continue to talk there
Edited the main post, got it figured out. Thanks for taking time to help me.
Sorry for not going into more depth or offering a code snippit, but it sounds like you need a "debounce" function. A debounce function will starts a timer, and if enough times passes, it will run a callback function - But if you call the debounce function before the timer is up, it will cancel the timer, so the first call doesn't go through. It's a way to throttle so you don't make too many api calls. Do a search and you should be able to find some example implementations.
You might also be interested in [levenshtein automata](http://dylon.github.io/liblevenshtein/)
I've seen that it doesn't really help much. For instance, how is x=7 an expression? It seems to me it's a statement.
Does this work on https pages?
&gt;Sorry for not going into more depth or offering a code snippit Its all good I really don't need code snippets or depth... That's what google is for. I'm just trying to figure out what direction to to take thanks for the input.
what exactly do you mean when you say visualize? (/what is the goal) EDIT 1: maybe this can help you [What on Earth is Recursion?](https://www.youtube.com/watch?v=Mv9NEXX1VHc)
Because x = 7 returns a value - in this case 7. That's how you can do things like y = x = 7
I drew up a quick grunt plugin here: https://github.com/billyvg/grunt-flo I use it with [grunt-concurrent](https://github.com/sindresorhus/grunt-concurrent)
This made me quite interested in learning Ember. I like it when a framework covers a lot of the"common" tasks one would do in web development.
&gt; This is how you want web development to work? Spreadsheet programming? Don't get me wrong, I love Excel and Wordpress, but I don't think they're an acceptable mainstream solution to web application development. Look up functional reactive programming (FRP) if you haven't heard of it before. 
Awesome. I'll have to check this out. 
Assuming num = 10. What this recursion (factorial of 10) is doing is simply: 10 * (10 - 1) * (9 - 1) * (8 - 1) * ..... * (2 - 1) * 1 To give a visualisation as how i perceive it (let's start with 4): 1. factorial(4), if(4 &lt;= 1) is false, so we proceed .. 2. (num * factorial(num-1)) means (4 * factorial(3)). So let's store 4 somewhere for now and work out what is factorial(3). STORED: [4 * factorial(3)] 3. factorial(3), if(3 &lt;= 1) is false, so we proceed .. 4. (num * factorial(num-1)) means (3 * factorial(2)). So let's store 3 somewhere for now and work out what is factorial(2). STORED: [4 * 3 * factorial(2)] 5. factorial(2), if(2 &lt;= 1) is false, so we proceed .. 6. (num * factorial(num-1)) means (2 * factorial(1)). So let's store 2 somewhere for now and work out what is factorial(1). STORED: [4 * 3 * 2 * factorial(1)] 7. factorial(1), if(1 &lt;= 1) is true, so we return 1. 8. This leaves us with the store [4 * 3 * 2 * 1] and that equals 24. Hope this helps in visualisation. EDIT: Fixed formatting
I changed the original post, slipped my mind that C++ is at the core of sublime text.
An expression is not a statement but a valid unit of code that resolves to a value. Not all statements resolve to a value.
You're missing my point. I'm asking you why anyone outside of Ember should be excited about Ember when it is presented in these dubious terms. You haven't provided clarification on your quote and why it seems to _endorse_ programming in (a metaphor for) Excel's limited scripting language, you've dodged it by trying to give me homework. 
thanks
Awesome. Thanks. This cleared it up for me. :)
Yeah, if you already view Ember positively or somewhat positively, you'll still see it positively afterwards. 
Well, yes and no. The DOM certainly doesn't help, but the fact that JavaScript can't quite yet be fully pre-compiled makes it difficult for something like a compiler to reason about. However, things like famo.us (I assume that's what you're referring to) certainly do a lot to help javascript that runs in the browser run faster. 
I'm not sure why you thought I was referring to famo.us, I wasn't. But having worked with the actual engine that powers atom (space-pen), it's not nearly efficient enough for the kinds of operations that a text editor needs to make. Comparing C/C++ code to JavaScript isn't exactly a fair comparison. Although running on v8, I've heard of several practical use cases where JavaScript actually outperforms C code. Which is crazy to think about since v8 is written in C++. One of the more famous examples of this is marked.js being faster than the C equivalent markdown library. The point here being, JavaScript is fast enough for all the logic that powers a text editor. But the DOM isn't fast or memory-efficient enough even with some of the crazy optimizations out there. If JavaScript is going to start powering native applications, there needs to be new APIs written for that function. &gt; Please excuse any errors, it's late and I've been drinking
How do I get the spaceship? I've been mining for hours, but I can't figure out how to craft them into spaceship parts...
You only posted a small piece of your code. Maybe the error is in your array, maybe you have a syntax error i.e. you have something capitalized that should be lowercase. Why do you have 2 PLAYER variables? and why did you stop using the -= operator when you reached PLAYER.lives in your if statment? You should throw up a JSFiddle or something similar, otherwise it might be tough getting some actual feedback here.
fucking forget it
Interesting. 
What do you want to do? Genre-wise... Games, web sites...?
true enough, for(x in y){} also doesn't evaluate to a value. Changing the terminology to "evaluate" doesn't change the fact that a value is what is returned, depending on your definition of evaluate now.
Something worth to consider is the performance impact of each option. You'd have to benchmark this as it changes over time, but generally speaking classic constructor+prototypes are most heavy optimised by modern JIT compilers. Of course this only gets important when doing bulk operations or heavy real-time stuff. And maybe worth mentioning that both CoffeeScript and TypeScript have class syntax that compiles to classic constructor+prototype code. The TypeScript version is *very* similar to the ES6 model.
from https://speakerdeck.com/mathiasbynens/hacking-with-unicode
 // Accelerometer Data window.addEventListener('devicemotion', function(e) { var x = e.accelerationIncludingGravity.x; var y = e.accelerationIncludingGravity.y; var z = e.accelerationIncludingGravity.z; }); // Gyroscope Data window.addEventListener('deviceorientation', function(e) { var alpha = e.alpha; var beta = e.beta; var gamma = e.gamma; });
Any type of website. I know its super broad... 
- I find their scrolling function is horrendus~
Do you guys have a github?
Have you tried pdfmake (http://bpampuch.github.io/pdfmake/#/)? I couldn't find a good table interface for PDFKit either until I found pdfmake, which is built on PDFKit.
Do you have any examples of what you've done before?
&gt;the spider randomly clicking dropmenus And the reddiots are out in force I see.
I just sent a pm. Thanks. 
So by 'Google Api' you mean mapping
https://developer.mozilla.org/en/docs/Web/JavaScript
I think you might be misunderstanding the post. Ember uses JavaScript, not a subset or a different language. The analogy is just to describe how data flows throughout the app. Rob's claim that "I don't think I wrote a single line of pure Javascript during the whole experience" was, to me, obvious hyperbole. (To be fair, I saw the code when I was reviewing it with him and it contained plenty of JavaScript.) It sounds like you haven't had a chance to check out Ember based on some of the misconceptions I'm picking up in your replies. If you have a chance, you may want to watch something like Robin Ward's recent screencast on building a Reddit client with Ember: https://www.youtube.com/watch?v=7twifrxOTQY. It should give you a pretty good sense of what Ember is about in a short period of time. Thanks for the great questions.
i'm using [async.js queue](https://github.com/caolan/async#queue) and [node-phantom-simple](https://github.com/baudehlo/node-phantom-simple) yet. Will check out ghost-town.
&gt; There are two ways to create an object in JavaScript *ahem*: 1. `{}` 2. `new Foo(arguments)` 3. `Object.create(SomePrototypeOrNull, optionalPropertyDefinitions)`
I would use getElementByTagName(). I think that returns an array, loop through, testing the .innerHtml == "[link]"
I'm wondering more or less the same things (SpacePen's rather interesting in how it's laid out, but I'd imagine there's a ton of overhead I'm not seeing that goes on to make it work properly). I mentioned Famo.us because it essentially works by rendering as few DOM elements as possible. Bit more on that [here](http://famo.us/guides/dev/render-tree.html), if you're interested.
Thank you for your reply! Is this widely supported by most tablets? 
updated
hop in to chat, and i'll explain. you don't really need to make it right now though.
Hurray for less boilerplate!
We also invest heavily in testing, see Jest, the testing framework that we just open sourced. As part of the UI infra team at Facebook you can get a good overview of the biggest root causes of bugs and address them in the API directly as I shown in this talk. When writing tests you have to weight the time and efforts it takes to write them compared to the importance of the resulting bugs and their ease of fixing. It turns out that in our use case for React components, most of the time testing is net negative. The reason is that most of the complexity is pushed to the edge of React in the place where you store your data, which is usually tested very thoroughly. React part is mostly about transforming data to DOM and pretty straightforward.
This pattern is the modern day GOTO statement. Edit: To appease the downvoters, it seems I should've clarified: Blindly using a pub/sub infrastructure with a global event bus type of object leads to an application that is difficult to reason with events flying about everywhere without clearly defined contracts between publishers and subscribers and no temporal linearity. Maybe i've been converted into the ReactJS way of thinking, but in general, I see reliance on this type of architecture for all of your intercomponent communication to be a huge design flaw that will make scaling your development difficult. Data should flow through your interface in clearly defined and structured ways; a global "EventEmitter" object is definately not a way to achieve that. Please continue downvoting, while quoting the "Gang of Four" design patterns book all you want; my perspective comes from working on one of the largest single page applications deployed on the internet today (in terms of features and user base.)
The second half of that presentation is frightening stuff. 
Really this means all the sites using js for their shady seo are going to be screwed again. Bye bye ehow!
&gt; As a huge fen of the flash platform Not the best start…
/thread
? How come. Other than both of them being in the "code" category I see no relation between them EDIT: Lovely downvotes to everyone who disagreed with you m8. Nice vocabulary too. Doesn't help you explain why events are "modern day GOTO". many claims can be claimed against this design pattern but "modern day GOTO" is not one of them. EDIT 2: "my perspective comes from working on one of the largest single page applications deployed on the internet today (in terms of features and user base.)" Well do you want a fucking cookie or something? You're wrong, just fucking eat it up instead of flushing your work exp. Jeez, fucking javascript 
Flash sucked then too
Who doesn't use a framework of some sort these days? I can only imagine the ad agency UI guy who throws an enormously encapsulating jQuery document ready function on a page and calls it a day. Everyone else is aware of frameworks and using some form of backbone, angular, ember, react etc.
No, i have not! Im gonna try it, thank u so much for the help ;) 
ActionScript3 was away better then today's JavaScript.
Yes you can achieve this. Basic demo: http://jsfiddle.net/9VBet/ You could also convert your textarea to be a code editor, then you'd also get syntax highlighting. Example javascript lib that does that: http://ace.c9.io/#nav=embedding
so is it still worth learning? there are some tools out there, that can convert AS3 to JS, I've been told.
&gt;horrend.us and yes, its notchy, feels horribly unresponsive, and you can't see the footer on desktop.
You couldn't be more wrong if you tried, instead of just being uninformed.
AS3 was built off of a ECMAscript standard that was more modern than JS at the time. A lot of people hoped that AS3 would find it's way into the JS spec, but I believe it was Microsoft that killed that in 2008ish. 
This can be easily accomplished in jquery with .on() and .trigger() too. 
I'll break it tonight and send you anything I find. Not going for a position(I'd love too but... ya know). Just wanting to help out.
TIL, thanks
https://github.com/meteor/meteor/issues/442#issuecomment-44565817
I'd combine a couple of suggestions here: start off with JavaScript: the Good Parts by Crockford, then read JavaScript Patterns by Stefanov, and finally Professional JavaScript for Web Developers by Zakas.
This is one of the holding points for jQuery for me. It's just incredibly easy to handle events (and custom events) without a lot of boilerplate or workarounds for old_IE. I especially love that they support bubbled events (with selectors) making cancellable modals and such a breeze.
&gt; Ultimately, PhantomJS and phantomjs-node are neglected projects, so these issues can be expected to remain indefinitely. Perhaps we shouldn't be so reliant on PhantomJS for testing then. Damn.
Archetypal Reddit nitpick: it's ClojureScript not ClosureScript, no? But very awesome, y'all are absolutely killing the open source game at the moment. Is AirBnB using React in conjunction with their Rendr library? The ability to have some of the processing done on the server is what makes this really enticing
Namespacing events so that you can easily remove them with .off() is a great feature too. 
I wouldn't even push it for GL. The one thing that Flash does spectacularly is Vector Graphics. HTML5 can do a good majority of the same stuff, but you need specialized tools (I mean, Flash is pretty specialized, but whatever.) to make these animations (like Adobe Edge) and it's usually a pain to use those animations with other things on page. We recently did a project using Edge animations on a responsive website with sliding cards and getting the Edge animations to scale properly, agree with everything else, and work together (even with other Edge animations) was a pain in the ass. I ended up recoding a portion of the supposed drop in Edge code so we could get it to work with other animations.
I've found in scenarios like this it helps to declare certain variables as globals from an inline &lt;script&gt; tag in your HTML file. e.g. something.html: &lt;script&gt; global.window = window; require('somethingThatRequiresWindow.js'); &lt;/script&gt; See also: https://github.com/rogerwang/node-webkit/wiki/Transfer-objects-between-window-and-node
I've built a Reddit front-end with Ember. It was painful and turned me off of the idea even more than I already was, but that's not what I'm talking about. I'm talking about perception of Ember within and without the Ember world and how the schism is demonstrated by this article. And I'm not at one of your talks asking a pointed question, I'm making a pointed criticism. Thanking me comes off as disingenuous. 
It's typically best practice to assume all your scripts are loading asynchronously. Either you should make better use of onLoad or onDocumentReady, or you should use a module loader like requirejs
Has it been that long? Congrats to the React team. 
I recalled incorrectly that it was in 89. I was confusing the date for TBL's WWW proposal published on March 12, 1989 with the date TBL first test WorldWideWeb on December 20, 1990.
I'm honestly surprised at all the negative responses here. They just released 0.2.0. Obviously there are going to be flaws. I promise you that they'll fix the scrolling. I seriously cannot believe that so many people are hung up on this. The point of famo.us is that complex animations and renderings, especially on mobile, are dogshit slow on web. Even if you use proper css to ensure hardware-acceleration it's miserable. Again, most these really blow on mobile. We're talking single digit fps. Famo.us has taken a small subset of javascript and optimized the fuck out of it so you can produce dom elements that move, shift, feel, and transition like native applications. No one else is doing this. Especially boiled it down to a easy, reusable api. If there is someone else, please tell me. Its pretty simple. If you want to build standard web applications then I wouldn't touch it. If your looking to build heavy interaction/animation applications, especially for mobile then it looks like your only goto unless you want to build out all the optimizations yourself.
[Sorry, here's a spot to beautify it:] (http://jsbeautifier.org/)
Thanks! Will do.
More details... I've got a project which works like this: - index.html: main window with show: false (basically an empty HTML page which never renders as UI) - index.js: invoked via script tag in index.html, produces a persistent system tray icon, and opens main.html - main.html: my app's main UI, opened by index.js - main.js: invoked via script tag in main.html, contains my app's main presentation logic In main.html, I have a script tag which looks like this: &lt;script&gt; global.window = window; global.document = document; global.location = location; global.history = history; &lt;/script&gt; &lt;script src='bower_components/page/index.js'&gt;&lt;/script&gt; &lt;script src='bower_components/teddy/teddy.js'&gt;&lt;/script&gt; &lt;script src='main.js'&gt;&lt;/script&gt; The globals window, document, location, and history are needed by my dependencies [page.js](https://github.com/visionmedia/page.js) (for routing) and [teddy](https://github.com/kethinov/teddy) (for templating). Before I declared the globals in that manner, I was seeing the same errors as you. With this design, the dependencies are able to access the globals they require and main.js is able to make use of the dependencies and interact with the DOM in main.html fluidly.
it's really frustrating that famo.us' potential is so misrepresented by what they put out on the website initially. I think that the library is even more revolutionary than jquery was, and I can't see any way that it does not become the new 'base layer' of the internet. I've yet to find any naysayers who have actually tried to build something in it. And that's just so disappointing. I think the internet would be so much more interesting and beautiful if people would just put the snark away and make that first leap. For example, one of the entries in the recent famo.us hackathon (just over a week ago), was the thomas street guys building a mechanism that [wrapped entire svg files (not just maps) into famo.us surfaces and allow the whole thing to be animated/ have physics applied to them](http://thomasstreet.com/blog/famous/2014/05/23/svg-matrix3d-hybrid-animations.html). Then again, I'm also pretty sure that people will be forced to make this jump at some point, i'm just anxious for it to be sooner rather than later. *disclaimer: i've grown pretty close to the guys and girls at famo.us since discovering them, to the point of being asked to be a judge at the aforementioned hackathon.*
For DB access you're going to want to use a server side language. If you want to stay in Javascript there's Node.js, or you can always use something like PHP, Ruby, Python and their respective web frameworks. You could certainly build a game in jQuery, but if you do a search for "HTML5 Game engine" on Google you'll find results for some things that are tailored to building games.
Unicode RegExp's are the shit. https://i.imgur.com/hTKMdFc.png Got that epic range from XRegExp's {p} class.
After a quick look at Node.js seems like it'll meet the IO portion but can control requests too. Very interesting. I'll also look into game engines. After kaz3work posted I did a quick google and it would appear there are many to choose from. I'll edit the OP and add a request for game engines.
As far as I can tell (by searching the source for "canvas"), the canvas wasn't used at all.
In simple terms, decimal numbers are only approximations, so you have to be careful. The order of operations sometimes makes a difference with floating point numbers. For example, (0.1 + 0.2) + 0.3 = 0.6000000000000001, but 0.1 + (0.2 + 0.3) = 0.6 (even). Integers, on the other hand, are exact, so work with integers whenever possible.
You probably mean that it's problematic if the events are "called" right away. But it's like the other commenter said "Event systems are about passing information...not execution...". As in the event doesn't directly lead to a call, but gets picked as a "request" by some kind of scheduler. Maybe the scheduler discovers things itself, to make it even more decoupled, as with AngularJs scanning for directives. It sounds like what React JS is doing too, except it looks like they are also focusing in making the thing go one way downwards from the top or something. It's true that the "direct" event implementation can lead to a mess, but I don't think you can say that events in general are as bad as a goto.
Is there a video recording available too?
This challenge falls apart completely on the bomb level. What the hell are you supposed to do? You're not given a task, not even a little.
So use pure JavaScript. I did for #4 -- way easier to just select comments than it is to write selectors for all that crap :)
Actually AS3 is a pretty decent language (and flash is a cool platform -- it can basically do anything. It's the browser implementation that gives it a bad name. Shit it is used a lot in popular video games). If you like AS3 take a look at mootools, almost maps directly
I was being admittedly bombastic, my apologies. But the general thrust of my point is still valid. The "temporal decoupling" allowed by most implementations of global event bus architectures (at least in front end development) leads to a very difficult to reason about application in my experience.
The thing is that they hyped the fuck out of it. There is no other JavaScript library (that I can think of) that has been hyped this hard and when it launched (surprise, surprise) it didn't live up to the hype. What we're seeing here is exactly what the dev community usually does when something is overhyped: wait until it seems tenable and usable. If this wasn't overhyped it wouldn't have as many detractors and it would have far more people singing it's praises as a library that could evolve into something usable for them.
 _SUCCESS(); :D
[Read this](http://floating-point-gui.de/). 25.01 is impossible to represent in binary floating point. The nearest representable IEEE double is 25.010000000000001563194018672220408916473388671875. 25.00 can be exactly represented. Therefore the sum is 50.010000000000001563194018672220408916473388671875, which also cannot be exactly represented. The nearest representable IEEE double is 50.0100000000000051159076974727213382720947265625, which is truncated to 50.010000000000005 for display. Please note that it wasn't just the answer that was not exact. One of the operands was not exact as well. However, due to rounding performed for display, if you try to display 25.01 you will get 25.01 not 25.010000000000001563194018672220408916473388671875. That doesn't mean that 25.010000000000001563194018672220408916473388671875 is not the value being stored, only that there was rounding done as part of the output routines. 
What are you talking about? Events can't possibly be misused, ever. Edit: one of reflectiveSingleton's links is for a page on influential Chinese communists. Perhaps if you understood the Cultural Revolution you wouldn't be making such strident accusations. ...On actual contemplation, I think that there's a certain degree to which an event-driven design is intended to escape 'temporal linearity': the execution of a SPA creates a state, in event bindings, that is intended to cover any/every sequence of events that might possibly occur. This is probably unrelated to your criticism of a global event bus, though. 
well shit...thats what i get for blindly googling and pasting links...it has been removed... woops
I wrote a [whole article](https://koglerjs.com/verbiage/ember) about it. Not a very nice one, but Ember didn't exactly make me happy. I note that Ember is up to 43k lines of code now. And I don't actually _hate_ Ember. Toying with these things is a passion. But I think it's got real, definite problems, and I don't see solutions for them on the horizon. 
I think if you were blindly googling and pasting links, you might have been Gish Galloping. :P
Not at all...I feel that his blunt statement of it being the new 'goto statement' was false and figured he was coming from a non-design pattern based perspective...hence my linking. I just wasn't studious enough in my checking of links...I merely knew the topics I wanted to present to him. Now that said, I agree with the premise that they can be misused (and maybe often are because of a lack of understanding). But that doesn't make them a 'GOTO statement'...that sort of argument appeared to be coming from ignorance.
ok cool. my bad. I look forward to future versions.
I enjoy drunkenfaggot's dry one-liners, and so far as I've seen he's always had a good point. Combine callback hell with criticisms of a global namespace and you have exactly the criticism he described. 
Even better, contribute to it. It's a free tool what better way of saying thanks than contributing. https://github.com/rev087/ng-inspector/graphs/contributors
The code you're trying to write into the new script [needs to be escaped.](http://www.the-art-of-web.com/javascript/escape/) Solution 1: newjs.writeline("myObject = new ActiveXObject('Scripting.FileSystemObject');"); Notice that quotes used to enclose *Scripting.FileSystemObject* are single quotes. It prevents javascript from ending the string where that string begins. Solution 2: newjs.writeline("myObject = new ActiveXObject(\"Scripting.FileSystemObject\");"); Here *Scripting.FileSystemObject* is enclosed with \". a backslash before the character removes the meta characteristic of the double quote and instead parses it as part of the string. 
Love it! Can you post the URLs of the React-based stuff when they're ready?
Cool. Thanks!
Server rendered?
I agree....taken in context. But the one liner he posted didnt let me know what he was actually saying.
Yet another comment I wish I'd never bothered to read. Perhaps if you took a moment to elaborate. Are you against functional programming in general? Or just this particular library? If so, what does it lack?
It seems a new JavaScript library is created each week. Why would I choose this library over the hundreds of other ones out there?
On these particular pages it doesn't make sense to do it that way. One of our next projects will be though.
Although this is not made by someone (rather made by a team), CKEditor supports inline-editing. Check out this demo (http://ckeditor.com/demo#inline). Is it more or less what you are looking for?
I have a question. It's mentioned [here](https://rawgit.com/CrossEye/ramda/master/docs/ramda.html#section-10) that slice() is being reimplemented for performance reasons... How is this faster than the native version?
Just started using React a few days ago. I love it! I was skeptical about JSX but it's much more easier and cleaner to use it. Cheers ! 
Then you aren't the intended audience and should probably just ignore the post. Versus whining and crying.
That shouldn't be faster than a builtin slice (smells like broken benchmark was used to make that measurement) but a manual version that preallocates is faster in V8 http://jsperf.com/array-slice-123
Code a game. See what things you repeat a lot or could be abstracted un 1-2 lines instead of 10. You might start by preloading assets and creating a display list.
OctoberCMS?
There are many reasons why people either hate or love languages like Coffeescript, Livescript, Typescript, Closurescript etc. And if you're a passionate developer you should definitely try using them (at least out of curiosity) I think Scott Hanselman was the first, naming [javascript as assembly language of the Web](http://www.hanselman.com/blog/JavaScriptIsWebAssemblyLanguageAndThatsOK.aspx) and like it or not, people will be using other languages that compile to it anyway. I've tried using Typescript (didn't really work out for me). Personally I like Livescript, but it doesn't feel to me as matured and popular enough as Coffeescript. Closurescript is very powerful, but seeing enormous amount of parentheses everyday feels to me kinda horrifying. I've been using Coffeescript for more than a year now, and to be honest I really like it. Most of the annoyance comes from people who never tried using it for real. All those problems they complain about - are either exaggerated, obsolete or complete lies. Coffeescript saves time and in the end, that matters. We spend most of our days at work reading code rather writing some. And Coffeescript does make it more readable, succinct and comprehensible for humans. And we write code for humans (mainly for ourselves) - machines don't care what languages we use. My team used CS to build vevo.com along with our private, internal projects. Many big companies completely switched to Coffescript (e.g. DropBox, Groupon, some others). [Github's javascript styleguide advises to use Coffeescript instead of JS](https://github.com/styleguide/javascript). Even Douglas Crockford despite of being so opinionated, once [admitted](http://www.quora.com/CoffeeScript/What-does-Douglas-Crockford-think-of-CoffeeScript ) - CoffeeScript is very robust, nice and awesome, although he called it "experimental", yes he did, but that was long time ago. So, you should definitely try it, and I can promise you - you won't regret.
I don't understand why people complain about optional parentheses? It is in fact one of the best features of CS and Brendan Eich should've done that in javascript, instead of making semicolons optional.
The answer is no
It seems to me that you're describing https://ghost.org/
I was researching these the other day and found the [raptor editor](https://www.raptor-editor.com/) and [redactor](http://imperavi.com/redactor/), I haven't used either in anger yet though.
Also CoffeeScript compiles to extremely slow super calls: return Snake.__super__.move.call(this, 5) Ideally it would compile to return this.move$(5); Which is blazing fast as there is no difference from a normal method call. Same technique can be used with constructors, although you have to enforce super constructor is always the first thing to call in constructor: function Sub() { this.constructor$(...); //Add new fields AFTER the super constructor call: this.extraField = 3 } 
Velocity page? http://velocitypage.com/
Have you checked node-debugger yet? It might already be available for node.
I guess you're asking if when your server receives `?_escaped_fragment_=` requests, it should use redirect to serve snapshots or not. You shouldn't use 301 or 302. If you're relying on a third-party service (e.g. [SEO4Ajax](http://www.seo4ajax.com/) that i co-founded), you should configure your server as a proxy to make it serve your snapshots transparently. If you're using static pages hosted on your server, then adding simple rewrite rules will be sufficient.
&gt; some games, with and without other libraries, see if there's anything you disagree with or that could be done better in your opinion. I've spent my last term as a 1st year CS web programming student making a game in javascript so I know my way around the language. What i don't know however is how to make a library per say. How to make use of the namespace etc. That's what i'm after. 
That's a stupid argument, if nobody recreated things that already existed we'd all be driving around in model ts and living in mud huts. 
Sigh.. How come that every single time I specifically say I don't want to use a framework someone still comes around and find a way to squeeze their favorite framework in there? I know my way around javascript good enough as i've managed to complete my last term as a 1st year cs grad by making a canvas/native javascript game. What I'm specifically after this time is a way to break into building a library for my assets. I specifically said " I am not planing on using any kind of existing framework." edit: I don't mean to come off as a douche. 
\*It's an issue with the way **almost every modern language** handles floats, due to the underlying architecture. In fact is there any modern language which offers truly accurate decimal numbers instead of floating point numbers, as standard?
Sorry, but this is pretty bad. Also there is w3schools as a reference at the end.. :/
Is there another method to this? I know I can make a shortcut to shutdown.exe or something like that. But how do I make a shortcut that has my own custom ok/cancel prompt via msgbox without having it read from another script?
Thanks Blinity! That helped a lot! 
You're my hero. After some tinkering it finally works now. Thanks!
This is what the default Ghost theme looks like, by the way =&gt; http://helpfulsheep.com/hs/
I've been coding a game for the last couple of months as part of my education. Thing is, when it comes to a library.. I've never written anything like it before, barely touched on namespace etc. Therefor i'm confused of where to begin code-vice. 
Very much doubt it, Node is far behind on V8.
So what do you want us to suggest? If you're competent enough that you've written your own canvas/native JS game then you're probably familiar enough with JS to write something without any input from us. Just create some objects with functions that you think will be re-usable. Maybe with some unit tests around them as well.
&gt; What i don't know however is how to make a library per say. How to make use of the namespace etc. You don't want to hear this, but..... why don't you pick up an existing framework and read the code? Any framework you build yourself is unlikely to be better than something like Phaser and you've already stated you are confused about where to begin; so why don't you at least start by looking at how it's already been done?
&gt; &gt; &gt; &gt; &gt; Just create some objects with functions that you think will be re-usable. Maybe with some unit tests around them as well. That's exactly what i want you to say. I want you to tell me where to begin. I've never done anything like this before. I have little knowledge of what the foundation is suppose to look like. Watching how phaser is built just made me confused. 
I'm curious to hear more about your experience. Were you name spacing your events? Did you have some sort of naming convention? I can see there being difficulty arising from a lack of nomenclature. How do you feel about backend inter-application communication with services like Amazon sqs? 
I've put up a new branch that is soon to be merged with master where all this work is going. Check it out :) https://github.com/andersevenrud/OS.js-v2/tree/new-filetree
Everyone is telling you to use a library because it's a good idea. Right now it's like you're asking: "I want to write a book, but I've never read any. Where do I start?" Using libraries and frameworks for different types of games will give you an idea of where their strengths and weaknesses are. Then you can make an informed decision about your **own** library. You might even realize that rolling your own library is a waste, and you'd be better off contributing to these already powerful libraries rather than reinventing the wheel. This is a "sane" revelation that tends to happen when you get better at programming. Another big reason not to avoid libraries is NPM. Say you want a `rgb2hsl` function for your game. If that function already exists in NPM, the only reason to reinvent the wheel is if you can actually make it better (in a case where a pull request won't do). You aren't "cheating" by using libraries. You aren't getting better by writing vanilla-only Javascript. If you want to be a good programmer and contribute to the community, learn to use NPM/browserify. In time you will find modules that don't exist or don't suit your needs, and that's your time to shine and write some of your own. 
Does this example work ? https://developer.apple.com/library/ios/documentation/appleapplications/reference/safariwebcontent/HandlingEvents/HandlingEvents.html#//apple_ref/doc/uid/TP40006511-SW16 [edit] Found this old zoom-related fix for iOS : https://github.com/scottjehl/iOS-Orientationchange-Fix/blob/master/ios-orientationchange-fix.js You mightalso play with your meta viewport declaration. 
SQL supports implementation defined floating point numbers, which is typically going to be the IEEE standard.
I do need to try it. Yeah it has problems, but i think they have made some smart decisions building the layout around matrices and transformations. It's what has been optimized in the gamedev world for a long time, it makes a lot of sense to do it here as well.
It could be worse. We could all be stuck doing what someone else created and hating our lives with no options to change that. The one thing I love about JavaScript right now is that people can come up with alternatives to the mundane. If they find a problem and want to make something to work around it, they can. You don't have to use any of the new libraries (unless of course you have a team lead that decides that some project of yours will be using it) but it's interesting to some of us how people come up with solutions to their problems and we like to study it.
This is one of the most amazing answers to a programming question I've ever seen on reddit. 
Take a look at [longjohn](https://github.com/mattinsler/longjohn) -- I think this is exactly what you are looking for.
Is there a video of the talk? I tried doing a quick Google but I didn't see it. EDIT: Was it [Be Predictable, Not Correct](https://www.youtube.com/watch?v=h3KksH8gfcQ)? If not, is it in this list of talks? http://www.confreaks.com/events/mwjs
Fair enough. Sorry for being a pedant. 
[x-editable](http://vitalets.github.io/x-editable/demo-bs3.html)?
You're onto something with namespacing your events; but that's still a little too brittle for my taste (as are most "stringly typed" approaches) For backend IPC, a RabbitMQ/AmazonSQS/Custom solution on Redis type of approach to decouple services is pretty much the only sensible architecture one could use. I think it really comes down to the distinction between intrinsic vs accidental complexity. The nature of distributed systems require the use of a messaging broker/pubsub type of pattern so the complexity of that approach is intrinsic to the problem domain. For frontend architecture, I feel like forcing the same patterns leads to an accidental complexity that can be avoided by using more direct and "top down" approaches (like I mentioned in an earlier comment, React seems to have nailed this approach pretty squarely).
Yeah, guns are great too, it's their implementation that give them a bad name
You had my attention, but now you have my curiosity. Thanks for posting this.
num * factorial(num-1) is num * num - 1 * factorial(num-2) etc. etc. Each recursive call is like a mini function inside another function that keeps going deeper until it hits the base case, which here is num&lt;= 1. At that point they "bubble up the stack". The last call finally returns 1, then the call above it gets that 1 and can return 2 * 1 to the call above it which returns 3 * 2 * 1 to the call above it. It gets way gnarlier, I feel like if you can understand and comfortably implement merge sort you can figure out most recursive problems. Breadth first search and depth first search are also good things to check out to further understand the pros and cons of iteration and recursion
No, no. It's still unreadable. Just because it's decently formatted doesn't make it the original source, and /r/javascript prefers the original source. If you aren't going to show the actual source along with your game, then this post has no business in /r/javascript. You can try /r/gamedev, they're more accepting of closed-source stuff like this.
This isn't it, but its very close! Either way, this is a great bit of software. Bookmarked (hopefully in such a way that I won't forget about it in a year...)
Not it, but that Medium clone might actually be better for what I'm looking at! Very light-weight, no frills.
Mmm not quite. Thanks though!
https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators
Its a zero fill right shift operator. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators
&gt; You're onto something with namespacing your events; but that's still a little too brittle for my taste (as are most "stringly typed" approaches) I agree, it is brittle, however &gt;I feel like forcing the same patterns leads to an accidental complexity that can be avoided by using more direct and "top down" approaches (like I mentioned in an earlier comment, React seems to have nailed this approach pretty squarely). What about [Flux](http://facebook.github.io/react/blog/2014/05/06/flux.html)? They are using a global event dispatcher. I'm actually partial to [this extension of the architecture](https://medium.com/on-coding/understanding-flux-f93e9f650af7), which has two event buses which basically equate to stdin and stdout. React views communicate with the application through the stdin bus and are notified of changes via the stdout bus.
Have you developed anything with flash? It is a damn good environment -- the ide and tooling is great, the scripting lang is great, the timeline is awesome, the tweening is great, what is possible is great. Again, a stand-alone flv is kinda amazing. 
Both of these are great text editors, but not quite what I'm looking for. It wasn't a text editor per se; it was just a plugin/framework that allowed you click any block-level html tag on the page (&lt;p&gt;, &lt;h2&gt;, &lt;div&gt;, &lt;section&gt;, maybe even &lt;img&gt;) and modify it in place. I believe that as soon as you confirmed your changes, it also allowed you to send an API call to commit your changes on the backend.
lol, just lol
 $('section *').filter(function() { return (this.innerHTML.match(/^\s*&lt;!-- Make me blue! --&gt;\s*$/gi) != null); }).blue(); Am I supposed to just be using selectors? These are all pretty easy using array methods.
I found most of these pretty easy. Either using native array methods, just knowing some basic jQuery methods like .eq, .not, .trigger, or apparently knowing how to use setInterval instead of setTimeout, easily accomplishes most of the problems. **My Answers:** 2. $('.wants-to-be-blue').blue(); 3. $('ul &gt; li').eq(3).blue(); 4. $('section *').filter(function() { return (this.innerHTML.match(/^\s*&lt;!-- Make me blue! --&gt;\s*$/gi) != null); }).blue(); 5. $('div').sort(function(a, b) { return +a.innerText - +b.innerText; }).map(function() { $(this).blue(); }); 6. $('div').not('.bomb').blue(); 7. setInterval(function() { $('section div').blue(); }, 100); 8. $('button').trigger('click'); $('div').blue(); 9. $('#map').text().split(' ').map(function(id) { $('#' + id).blue(); }); 10. setInterval(function() { $('div').not('.bomb').blue(); }, 50); Edit: Formatting
move dem bits
For a brief and beautiful second, I thought this was a post from /r/shittyadvice
Do you know where I could go for help with a question like this? I guess unlike you I was born without the gene for magically knowing how to proxy a server. (assuming that's what I'm supposed to do). As for advice, my post was a question... not advice, but thanks dick.
What errors are you seeing in your console? I see at least two reasons this line isn't going to work: `var Div = document.getElementByID(Div);`, namely the function being misspelled, and it being passed the wrong type of argument.
Yup, that's the one. Great talk.
Whoah, I think you misinterpreted my meaning! This is a fine place to ask this question, but I saw it while scrolling through my front page. /r/shittyadvice is where people jokingly ask questions in order to get humorous nonserious replies. Most of the questions are nontechnical, such as "If I jiggle my belly while sitting on the couch, will my body think I'm jogging and I'll therefore lose weight?" I was really excited to (mistakenly) see a technical question, because it would have been totally different from the usual content in that subreddit. tl;dr No need to be upset, I'm not here to attack you, but rather to share a humorous experience from mis-reading the subreddit that your post came from.
dat shift
I'm using dreamweaver and I'm not seeing any errors. Id was changed to ID while retyping the code, so it appears to be correct in the actual html document. Even adding double quotes around the name of the Div in the "getElementById" function fails to make it work. What kind of corrections should I make to get this to work? I basically just copied some code from W3schools and changed the names of the divs and it isn't working for me.
Are you including your javascript on the page? If so, is it inline, or external? Is your script tag before or after the div? Are you sure you have a div with the id you're using somewhere on your page? This works fine for me. &lt;!doctype html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Hider&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id="foo"&gt;Bar&lt;/div&gt; &lt;script&gt; var foo = document.getElementById("foo"); foo.onclick = function hide () { this.style.display="none"; }; &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 
Did you consider coding it yourself? This looks like a fairly trivial thing to build with jQuery.
greater than greater than greater than. Checks if something is like waaaaaay bigger than something else. 
Is the script tag before your div? Your html loads from top to bottom. Whenever a script tag is encountered, the javascript it contains/loads is executed. So if your script tag is before your div, then when it runs your div won't yet exist. The only other thing I can think of without seeing the actual code is that maybe the file path is wrong somehow. Also, have you tried your code in an actual browser?
Yes, I have. I also did user testing with the things I built, in flash, meant to run in a browser. I'm saying that while flash may well be awesome to dev in, it made the end experience in a browser complete shit. And that's what matters. A platform that acts as a plugin that completely hijacks scrolling (and doesn't make it better), fucks with native key commands, and opens security vulnerabilities is a bad platform. To go on to say that AS3 is better than today's javascript ([implied]: for a browser) is laughable (see above), and demonstrates a certain blindness to the fact that the end product was an absolute nightmare to use.
Given that, any idea why someone would do this: var t = Object(this); var len = t.length &gt;&gt;&gt; 0; This is part of a polyfill for Array.prototype.map, that I got from the Mozilla dev site when some code of mine was breaking on IE8 for lack of array map. JSHint flags the line with the &gt;&gt;&gt; with the message: Unexpected use of '&gt;&gt;&gt;' But I've been unable to find adequate docs to explain why JSHint dislikes it, or what should be done instead...
&gt; React views communicate with the application through the stdin bus and are notified of changes via the stdout bus Very neat. I like it. This is a good example of an appropriate use of a client side event bus (rather than the global singleton catchall one I was railing against); they enforce a data directionality with the 'stdin' and 'stdout' bus instances. I still feel like there's a more elegant abstraction hiding somewhere in there that could maybe involve using a single duplex stream but i'm a little too tired to think at the moment; i'll chew on it over the weekend. Thanks for the link and awesome discussion.
Just a guess, but maybe it's a strange way of ensuring *len* is a number? In a quick test: undefined &gt;&gt;&gt; 0 gives 0. So if t is not an array they'd get 0 for the length. 
I've been testing in Google Chrome. Moved code to below the div tag without success.
the advantage to using bit shift to convert an unknown value to an integer is that, unlike parseInt, it will never produce a NaN. 'foo' &gt;&gt; 0 // returns 0 parseInt('foo', 10) // returns NaN i can't think of any reason to use a zero fill right shift here. it should be fine to use a right shift.
I read an Intro to Javascript book in 1999 that covered this. It's 2014 and I have never even thought of using this.
Edit: I was wrong, this is how Mozilla mimics T`oUint32()` behavior to match the ECMAScript specification. See [this StackOverflow answer](http://stackoverflow.com/questions/3081987/what-good-does-zero-fill-bit-shifting-by-0-do-a-0). A stab in the dark: Maybe this was meant to ensure that `len` was always assigned the value of `t.length`, not a reference pointing to `t.length`. Assuming the bitshift doesn't get optimized out, it forces the engine to create a new primitive before assigning it to `len`. If IE8's implementation passed object properties by reference, things like the following example could happen. &gt; var t = Object(this); &gt; var len = t.length; &gt; len--; &gt; len === t.length; true This is all just a guess, I don't have IE8 handy to test it.
I'd know a reason *not* to use a `&gt;&gt;&gt;` operator to do an integer cast: &gt; -1 &gt;&gt;&gt; 0 4294967295
As per `"use asm"`, `foo|0` is considered the idiomatic way to cast to int.
The truth of the matter is that HTML (5 and after) is looking to be everything flash was 10 years ago. Im not saying that flash it better, it just set the standard for web-based rich interactivity and has a kickass IDE/dev platform. I totally agree with you that it is a drain in the browser, but I recognize the good things it does
Interesting idea, but if any JS implementation ever used pass by reference for primitive value properties, I would imagine a *lot* more would break.
It can return `false` or `duuuuuude`
I wanna see a browser written in python running javascript compiling python for a browser that's running javascript compiling...
Just replace python with C++, and it should be possible.
/r/shittyaskcomputerscience
I read that page long ago, along with a few others about bitwise operators. I have never been able to wrap my mind around when I would use them. Keeping in mind that I did not come from a Computer Science background, I have just been learning programming from books, can someone please provide a concise example or two of when/why to use bitwise operators? I would not be surprised if the OP has already googled it, like I have, and is looking for a better explanation than he has yet found.
Sorry, I've deleted the post.
I just came across this yesterday, while looking for a [javascript implementation of the md5 hash function](http://www.onicos.com/staff/iz/amuse/javascript/expert/md5.txt). Turns out you never know when you might need some obscure language feature.
Oooh shiny!
Shiny, but 7.5 kb to generate a random colour? All of underscore JS comes in at 14kb and provides more than 80 functions...
Nice. Should publish to NPM... :) 
But one is compressed while the other is verbose, is it not?
Called it!
That is awesome man!
I still like using "~~" better. It almost feels like it was meant to be a "convert to int" operator, and there's a nice symmetry with the almost-operator "!!" which converts to boolean. 
If this strikes you as a great idea, you are ready for /r/atwoodslaw. 
Douglas Crockford argues that decrement and increment operators (-- and ++ respectively) makes the code terse and cryptic and it also contributes unexpected results like buffer overflows, etc. I think JSHint does not like bitwise operators following the same logic.
what's a use case for when someone would want to do that?
I would be really interested in knowing why. It's a nice measurement but it's difficult to apply the results to something other than this very specific situation. 
[Aloha Editor](http://www.aloha-editor.org/) ?
 '#' + ('000000'+(Math.random()*0xffffff|0).toString(16)).slice(-6); 
Relevant =&gt; https://www.destroyallsoftware.com/talks/the-birth-and-death-of-javascript
Speed?
It's pretty straightforward... calling a function 250,000 times will be slower than not calling a function 250,000 times. the simplest implementation of forEach (a simpler version of reduce) is this: function forEach(arr, fn) { for (var i=0,l=arr.length;i&lt;l;i++) fn(arr[i],i); } In no world would that ever be faster than a plain for loop... Yeah they've optimized a native version of forEach/reduce, but they've been optimizing for the plain loop since javascript existed.
`promisifyAll()` doesn't overwrite the original methods. try `findAsync()`. [read this.](https://github.com/petkaantonov/bluebird/blob/master/API.md#promisepromisifyallobject-target---object) ------- EDIT: Sorry, I looked at the code again, and it looks like you know about the Async postfix. that said, I think that's still the problem. one of the methods you're calling is still the non-promisified function. probably something to do with this line: Collection.prototype._find = Collection.prototype.find; it seems like you might find more success if it was this: Collection.prototype._find = Collection.prototype.findAsync; I take another look in the morning after I get some sleep. ------ EDIT #2 Have you tried client = MongoClient.connectAsync("mongodb://localhost:27017/test", { 
They already have a Linux that runs in JS in emulation so you could run and compile C/C++ in that... http://jslinux.org/
Paste all your JS code and html. And for god sakes, please don't use dreamweaver.
FYI, unminified Underscore is 44kb.
And bower.
It just dawned on me this morning that my urls are words/#!/morewords. So that will have the google bots requesting words/_escaped_fragment_/morewords. Which should mean I can just create a directory called _escaped_fragment_ and put my HTML pages in there... Not sure why this didn't dawn on me earlier, I think I just panic when I'm doing something very different from what I have experience in. Hopefully this words. Thanks for the help though.
No, google will request `words/?_escaped_fragment_=/morewords` You can't just create a directory for that and expect it to work because it is a query parameter, not a path segment.
Without seeing the output or even the command you're typing to invoke Grunt, I can't tell what's going on and can't troubleshoot your problem for you. Are tasks failing? Does the less task ever run? Does the watch task even start? Paste the terminal output. At first glance, your `server` task doesn't start the `watch` task, so files are never watched. I don't want to be a dick, but I'm going to anyway. It's clear by your other posts that you're setting up Grunt on a project for the first time and aren't taking the 10 minutes to **RTFM**. Go look at examples, read the docs, learn the ropes and save the question posts for the tough problems you can't figure out on your own.
You will need to watch less includes as well as main.less. Use a ** file glob string.
All third-party providers are not so expensive. Some of them are free during their beta and will offer a free plan too ;). I think you should take a look at [this article](http://www.yearofmoo.com/2012/11/angularjs-and-seo.html#detecting-the-search-engine). It explains clearly how to write these rewrite rules assuming you store your snapshots in a directory (e.g. "snapshots") of your HTTP server.
Awesome, thank you.
You're welcome. By the way, I recommend you to update your robots.txt file in order to make sure http://example.com/snapshots/* pages won't be directly indexed by bots. Here is an example: User-agent: * Disallow: /snapshots/*
Thanks, but what is the *? Does it mean all?
Yes, actually it's optional. `Disallow: /snapshots/` should work fine too.
You'd use it if you're dealing with binary data... cryptographic hashing uses shifting operators quite a bit. 
Yes, do you really need 350 LOC to generate random colours? 
Picking colors is the last unsolved problem in data viz. I have a little script that just loads an img file and picks colors from it randomly to generate random "palettes", but this is way better.
When I saw the title I thought "why do I need a library to randomize 3 different numbers between 0 and 256?" But it looks like this has some really nice, actually helpful features.
This page ( https://github.com/yeoman/yeoman/wiki/Generators) mentions a `this.copy` method which may be what you're looking for. 
It does a little more them just spitting out a random value, has API and stuff.
[Clone the 2.0 branch](https://github.com/petkaantonov/bluebird/tree/2.0) and then do `Promise.promisifyAll(require("mongodb"));` in somewhere Then do var mongodb = require("mongodb"); module.exports = mongodb.connectAsync("mongodb://localhost:27017/test", { auto_reconnect: true }).then(function(db) { return db.collectionAsync("scores"); }).catch(function(err) { return console.log("err in db.coffee: ", err); }); Notice that the promise-returning versions of the methods have `"-Async"`-suffix. in 2.0 you may configure this if you want. 
Yep. That seems to have been the problem. I also had a couple conflicting instructions in the function. Problem solved.
And that is why the less code you have the easier to maintain and read it becomes. 
http://en.wikipedia.org/wiki/Inline_expansion http://www.reddit.com/r/programming/comments/26jxis/find_the_index_of_the_smallest_element_in_a/chs6o64
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Inline expansion**](https://en.wikipedia.org/wiki/Inline%20expansion): [](#sfw) --- &gt; &gt;In [computing](https://en.wikipedia.org/wiki/Computing), __inline expansion__, or __inlining__, is a manual or [compiler optimization](https://en.wikipedia.org/wiki/Compiler_optimization) that replaces a function [call site](https://en.wikipedia.org/wiki/Call_site) with the body of the [callee](https://en.wikipedia.org/wiki/Callee). This optimization typically improves time and space usage at runtime, at the cost of increasing the final size of the program (i.e. the [binary file](https://en.wikipedia.org/wiki/Binary_file) size), but in some cases may decrease runtime performance or decrease the final size of the program. &gt;Inlining is done automatically by many compilers, while in other cases it can be manually specified via compiler [directives](https://en.wikipedia.org/wiki/Directive_(programming\)), typically using the inline keyword; typically this only hints that inlining is desired, rather than requiring inlining. Compilers use a variety of mechanisms to decide which function calls should be inlined; these can include manual hints from programmers for specific functions, together with overall control via [command-line options](https://en.wikipedia.org/wiki/Command-line_option). &gt; --- ^Interesting: [^Inline ^function](https://en.wikipedia.org/wiki/Inline_function) ^| [^Compiler](https://en.wikipedia.org/wiki/Compiler) ^| [^Functional ^programming](https://en.wikipedia.org/wiki/Functional_programming) ^| [^Subroutine](https://en.wikipedia.org/wiki/Subroutine) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+chvoeuv) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+chvoeuv)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Bitwise ops are used a lot when handling RGBA color data. They are also might be useful to improve performance inside of hot code (like when you are operating on many pixels in an image). Two examples: - Flooring a number with `(~~number)` or `(number | 0)` which acts the same as `Math.floor` for positive numbers. - Using bitwise flags instead of string comparison Benchmark before you use them, since it tends to add to code complexity.
When I saw the title I thought this was in /r/programmingcirclejerk. 
What's wrong with using d3?
Perhaps http://www.chartjs.org
This is what I use. Very simple but works and looks nice.
[ZingChart](http://www.zingchart.com) * simple, straightforward syntax * all the charts you need * free/paid options * you can style virtually every aspect of the chart
Since it works by detecting spikes, so I guess, a certain change in pitch is necessary. 
I used this and had to heavily modify it to handle axis labels. Some argued with me saying you should use a separate element to label the axis. Well, what if you need to export it as an image? Then what?
I went with grunt-express-server because I had problems getting the other options to restart properly in a watch process. I've yet to find a good standalone solution for gulp. Everybody seems to suggest writing your own process manager.
The first few sentences from the project's site: &gt; Why does this exist? &gt; There are lots of clever one-liners for generating random colors: '#'+Math.floor(Math.random()*16777215).toString(16); &gt; Unfortunately, this code naturally produces lots of greys and browns and murky greens. &gt; randomColor generates attractive colors by default. More specifically, randomColor produces bright colors with a reasonably high saturation. This makes randomColor particularly useful for data visualizations and generative art.
It sounds like that would get you good results in some scenarios, but the list I linked is designed such that every color has a high contrast with every other color, not just the one next to it, even if you're color-blind. So if readability is what you're going for, that (or a similarly researched) list would be hard to beat.
Everytime I look at grunt I barf a little inside. I'm so glad someone made gulp
I never like to talk about unminified size. Unminified size increases when you add comments and when you format code nicely, and when talking about size smaller is always better, so doesn't complaining about unminified size encourage people to comment tersely and shove things into one-liners? That's clearly not what we want.
This is wonderful. Why is the implementation of curry so weird though? What's the need for a call to arity() after the first time you call it? Everything you need should be in the closure post that first call. Irrespective though, I love it. You guys accepting pull requests?
If it's the pure JSON approach to configurability you like, I think Vega would be your best bet. It's similar to HighCharts. http://trifacta.github.io/vega/ 
Nail on the head. It's ridiculous to be talking about unminified file sizes. 
there is certainly a learning curve, but well worth the price
Pretty slick. I want to open a hidden menu or something with this. This is awesome.
[D3](http://d3js.org/)
True, I was commenting from my phone so I didn't have the resources on hand to minify that library. The point of saying it's 1.7kb unminified wasn't so much for scientific comparison as it was to say "It's a buttload smaller".
I don't think it's apples and oranges. Ultimately, both libraries have very similar options and produce very similar results. 
I recommend http://code.shutterstock.com/rickshaw/ and https://github.com/trifacta/vega. I specialize in data visualization with javascript, and use d3 almost every day. It's great, but has a steep learning curve, and takes a good chunk of code to do some basic things (like draw a bar graph). The mentioned libraries are higher-level tools built on top of d3. They abstract some common patterns and hide some of the meat that goes into a pure d3 implementation. If you want a higher level of configuration (especially animations), you need to learn d3, but vega is great, and so is rickshaw (especially for time-series line graphs).
This is what we use as well, it should meet all your criteria. It's also pretty easy to get started, they have a js fiddle for each sample.
It has pretty much become the standard for how data is visualized on the web. I feel like it should become a part of every serious front end dev's toolbelt.
I lol'd.
Licensing Issue mate!
Thanks, I am going to give flot a serious try now. 
Working with bit flags, for example. Back in the day we used it to do really quick division or multiplication of integers by powers of two. Obviously, not really helpful for JavaScript. 
From your comment on that xpost it seems you know more about it that I do, but here's my reasoning: Even if the contents of a function are inlined behind the scenes, there's still parameters, closures, and scope to worry about. var out = 0; forEach(arr, function(element, index){ out += element * index; }); might be (naively) inlined to something like this: var out = 0; var element, index; for (var i=0,l=arr.length;i&lt;l;i++) { element = arr[i]; index = i; out += element * index; } compared with the plain loop var out = 0; for (var i=0,l=arr.length;i&lt;l;i++) { out += arr[i] * i; } that's only factoring in the parameters, and it's two extra assignments per iteration. Even the jsperf you wrote, the "sane" reduce is 12% slower every time. x + n is always greater than x. 
[This article](http://devmag.org.za/2012/07/29/how-to-choose-colours-procedurally-algorithms/) was posted some time ago.. The "gold ratio" method is a good way if you need lots of rather distinguishable colors.
I don't get it. Where do I sign up to help out? I probably can help with some JS related problems and describing them in a "visual" way.
Obviously the library does more in terms of options, but that particular argument doesn't hold too much water... [see if you can tell the difference.](http://jsfiddle.net/c5ULc/) I generally get six out of ten correct. I did modify the simple generator slightly (`Math.random()*0xffffff|0x123456`) to make brighter colors.
&gt; Bar charts and Multi series line charts Some of the libraries built on top of D3 might be overkill, but simple bar charts and line charts are the domain of vanilla D3. You can spin out a basic bar chart in just a few lines of code, for example. If it's just rectangles you don't even need to use SVG, just styled HTML elements.
The recently released PDFium from the Chrome team might be a good starting point for a new tool replacing PhantomJS for rendering images / PDF. There are other alternatives too, though not necessarily open source but seemingly better supported. It's a shame about Phantom though. There's a a QT5 based fork that is now usable but not ready for prime time. I think in a way it's a victim of its own success. It fills a huge gap and opens up a lot of possibilities. t's a tough code base to approach, too. 
I don't think that this is the one, but - in the case that it is - was it Django CMS? https://www.django-cms.org/en/ It seems that their site has changed in the last year as well.
So you're asking people to *pay* for the "privilege" of writing content for you, or am I missing something? You give absolutely no other info on how to "co-create" besides donating for it.
Not sure if this is what you mean by a process manager, but I made this tool for making managing gulp a bit more simple: https://github.com/monokrome/glp
Kind of a pain that this is necessary, but [this issue on GitHub](https://github.com/yeoman/generator-generator/issues/45) clued me into a solution when I was having a similar issue with JSP: you can use `&lt;%%` (rather than `&lt;%`) for tags that you don't want to be templated. So, it would be `&lt;%%= ... %&gt;`. After doing its thing, [the templating engine](https://github.com/yeoman/generator/blob/master/lib/util/engines.js#L18) goes through and replaces the occurrences of `&lt;%%` used to open tag-like things with the `&lt;%` opening that you want to preserve.
I'm hardly a JS internals expert, but it seems to me: * The manual version is much faster because it only does a single comparison unless the element happens to be the smallest so far. * The `.reduce` version is slower because value assignment (to `lowest`) is happening every iteration, plus the inner function accesses a closure (`a`). * The `Math.min` version is slower because the entire array is copied (to `arguments`) for the `apply` invocation, plus getting `indexOf` involves traversing the array again (up to whatever the index of the lowest number was).
Bitwise operators are discouraged because there is no optimization in the trade off of readability you see in other languages since JavaScript does not have true integers so the run time environment has to convert float to int and back again behind the scenes. 
If I understand your question, you can use the rowspan attribute on the bigdata cell. For instance, if you want the column for bigdata to span 5 rows, add the cell in the first row with the attribute rowspan="5". See the entry for rowspan here https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td#Attributes
http://dygraphs.com/ https://developers.google.com/chart/
i liked this too, but the inability to put hover labels and values onto some charts made it unusable for me. It's too bad that the author seems to have abandoned the project with 300+ issues and bugs open. He should have passed the torch onto someone else so they can start merging some of those PRs
+1 for nvd3
Back and forth...forever
Post this to /r/learnprogramming
+1 for [nvd3](http://nvd3.org/), not a lot of effort require for some sexy looking charts.
they are very heavy, though
I love the idea. The only problem I had was that i was getting no hits recorded except when i did a particular type of whistle, any deviation, or variety of tone wasnt recorded. 
HighCharts actually supports IE6... D3 doesn't get anywhere near that. Not sure it even supports IE8.
Man, I'm totally the opposite - much prefer this syntax!
Anybody know an alternate location to watch this? Ustream is not working for me.
how exactly is he ALWAYS avoiding "this" Oo .. e.g. in a Backbone Model.. var model = new Backbone.Model(); model.this = model; and then use model.this instead of this in the model itself.. sounds strange.. .. wait no.. this way I would access this via this.this in the model^^
Driven out of a need for something small with useful features and no bloat :). Which is rare for Javascript libraries...
Well yes. It can only work for soft lips whistle. I will try to do some more research into improving this which account for loud whistles too.
I think I will pay the extra 8KB for a full-featured library like [moment.js](http://momentjs.com/). 
I absolutely love this bit from Crockford: &gt; "The language which has taught me the most is javascript, although to tell you the truth, I'm getting really tired of it and looking forward to the next thing"
I love a lot of what Crockford says but I get the feeling that he doesn't work on truly performance/memory-intensive systems. Many of his improvements rely on the fact that we have a lot more memory and processing power than we used to. But when you're writing things like neural networks or game engines you can't afford to use other constructs merely because they look better without giving any real boost in understanding [*see his section on using the functional methods of Array*]. I understand that many JS programmers don't have to worry about performance or memory to that degree but not everyone should move towards this heavier dialect of the language. Edit: That's not to say that I don't like the functional methods of `Array`. I think they're a lot of fun and I should say that they *can* increase understanding (`forEach` doesn't contribute much) but in terms of performance and memory they're just not there yet. Even if you're working on mobile platforms you still need to pay special attention to these two factors.
I understand what you're saying (I think). He does seem more academic than hands-on but I could be wrong. 
I think that perfectly sums it up. He's fantastic in his academic approach and it's that same approach that brought us *The Good Parts* but academia doesn't always perfectly coincide with application.
I wrote a time series charting library, https://github.com/rook2pawn/node-chart It is very unfancy , and pretty straight forward. Also supports legends and multiple axis. If youd like to give it a try, and run into any issues let me know.
On the front end? A lot. Gmail, Facebook, just about any non-trivial game. Besides, [Crockford doesn't work for Yahoo! anymore](http://techcrunch.com/2012/05/13/paypal-gets-its-own-share-of-the-yahoo-diaspora-hires-java-icon-douglas-crockford/) and has since moved on to PayPal which is far less demanding on the front end. Not to mention Yahoo!'s YUI framework, while very nice and useful, [is not exactly the lightest kid on the block](https://github.com/yui/yui3).
Please note that his comment "my closure object here is way faster than prototypes" is, as far as I know, absolute BS. With his approach to objects, he's creating new functions all the time which prevents engine optimization, e.g. the construction of hidden classes. Every benchmark I've ever seen showed that using prototypes is way faster than using this closure approach. It's not even close. It might be fine if there's only one long-living instance, but it's worse in every other case. If he doesn't care about execution speed, that's fine. But pretending that it's *faster* is majorly misleading. P.S.: Also using prototype-based classes will get even more 1st class support with ES6. So using prototypes should also be more future proof. If you'd need any more reasons.
Interesting question. The scrambling solution seems good, but you would need to get the right balance between sound levels of the original song, the scrambled song, and how scrambled the scrambled song is. Might be hard to get right. I think ideally you'd want to run the sound file through an audio filter, whose intensity is determined by the entropy level. See [here](http://vimeo.com/11335434) for an example of realtime audio filtering. Some [other examples](https://wiki.mozilla.org/Audio_Data_API#Working_Audio_Data_Demos). I think all those demos use the HTML5 audio api
This is the best talk of his yet.
Yeah of course :) I would too, but I'm proud of what I make myself so thats a good enough reason for me.
The word "constructor" implies that you'll have multiple objects of the type. Here's a JSPerf: http://jsperf.com/prototype-vs-closures/58. If you look back in history the earlier revisions create the object once and then always read from the same object (see: http://jsperf.com/prototype-vs-closures/20). In that case closure is as fast or faster. But as soon as you create different objects with the same structure (which prototypes are meant for), prototypes win outright. **The following might be v8 specific, but other engines should employ similar techniques.** The reason for this is how JS engines work internally: the most efficient way of doing a method lookup is not doing a lookup. In practice this means that JS engines try to make guesses about the structure of objects and assign hidden classes to them. So if you call `a.b()` the engine will be happiest if it knows that a is of type `&lt;internal name 1&gt;`. Because then it can just remove all JS fluff and replace that code with a call to an optimized version of b that it already calculated minutes earlier for another object. For this it is important that b really is the exact same function. If it closes over different 3 variables for each object, then it will harder or even impossible to generate optimized code that can be reused. So, each time you create a function (and that function can not be optimized away), you basically show the JS engine a big "FU, optimize that!"*. Prototypes are a good way to tell the engine "Here, I prepared this function that you can optimize to your heart's content and I promise I'll use that function like all the time". Be nice to the engine and the engine can be nice to you. (*) Unless it's something that the JS engine can reasonably convert into actual code. But I'm not sure any JS engine does that at the moment.
JSHint will calculate code complexity and report back on branching, cycles, etc. Maybe this can help. There's also Code Climate which is free for open source projects. Neither of these are really designed for performance, but reducing down the complexity may increase relative performance. Although it's entirely possible your slowdown exists elsewhere and you should really profile the code at runtime.
Well, that's not that simple. JS is translated into machine code at first, but then the optimizer can optimize hot functions (in runtime!), based on runtime type informations, etc, so the compiled code is not static at all. If you want to measure performance, measure time ([and try not to write microbenchmarks](http://mrale.ph/blog/2012/12/15/microbenchmarks-fairy-tale.html))
Now that they're adding tail call optimization are the yield calls going to return through them, like in Lua?
I've also gone with grunt-express-server, but I'm still unable to get it to reset properly when files change.
Isn't he part of the team that creates the new versions of the ECMA-script standard? Should that worry people?
I checked some jsperf a while back and prototypes wiped the floor with other objects. Totally agree with you.
No. We should all await the time that something better comes along. It should only worry those who are too uninterested in new things to put the time into learning them.
To your point though. It is incredibly backwards and circular to write code in the general case to satisfy the optimizer. The optimizer should work around common programming practices, otherwise we're getting a bad feedback loop with the engine developers. If you NEED the performance, then go back and optimize your code to take advantage.
Definitely nice to have more options when it comes to time manipulation libraries, but it'd be even more useful if it supported AMD and CommonJS (and if you support CommonJS, adding a `package.json` and putting it on `npm` should be a given). Also, bower. Polluting the global namespace, even if you "namespace" your library, is becoming increasingly archaic in JS.
I think most programmers aren't working in memory insensitive environments. Obviously there are a subset of programs that shouldn't be written in the dream language of Crockford. But, a lot of us are writing application level code that only needs to run as fast as the user and in most cases Javascript is fast enough.
I think Chrome developer tools can do this. Also, http://gotwarlost.github.io/istanbul/ is a code coverage tool which instruments JavaScript to determine whether certain code paths have been taken. E.g. it can tell you whether the `else` branch of an if statement has been executed. If it doesn't already support counting the number of times an expression has run it should be trivial to add. However, you probably don't actually want to do this. The best way of measuring performance is to measure the actual performance. Operation count is misleading, because some operations are ridiculously cheap and some are expensive. It's much better to simply run your code a few hundred/thousand/million times in a loop and measure the time it takes to run. (You might also want to measure memory usage). This way you're not second guessing the optimisations that JavaScript engines apply.
He wouldn't use Backbone. He is recommending using only object literals without inheritance.
Simple, the libraries (e.g. Backbone) that are out there right now don't follow the functional programming style he's referring to. So he probably isn't using them. I think it's mentioned elsewhere in the comments here that he's more academic than usual, so he probably doesn't have to churn out an application with tight deadlines with bosses who don't care about architecture. Given that, I agree a functional approach is better, but the libraries that are geared to that style are still getting baked, and might get ignored when they're ready for prime time because the big OO libraries that are out will overshadow them.
Why should it worry people? He seems to be a pragmatic guy, giving his honest opinion. I'd be much more worried if he were the usual breath-less javascript fanatic :)
I didn't say that you should use prototypes because they are fast. In my original comment I said: "If he doesn't care about execution speed, that's fine. But pretending that it's faster is majorly misleading.". If using module patterns is the right abstraction for your code, then by all means: do it. I'm not solving every problem with prototypes either. But you shouldn't *not* use prototypes because of the myth that they are slow. The optimizer should optimize common patterns, sure. But if the optimizer can more easily grok the structure of your code, that often implies that tooling can more easily understand what you are trying to do. And, most importantly: the next guy reading your code. (Aside: Crockford seems to have the unhealthy habit of saying things along the lines of "I didn't test this - but it should be faster!". And this is one example where he was using JS semantics to reason about runtime speed. Which fortunately is pretty far from how JS is actually executed in reality. I just wanted to prevent people from thinking that just because Crockford said it, it's correct. Using a structure/type definition in line with the upcoming ES6 semantics shouldn't be shunned just because of misconceptions about how JS engines work.)
I guess you guys are right.
As I said in the beginning: it doesn't matter if you don't care about execution speed. If you're writing server-side JS and this section is looped over a couple of 100 times per request (or you're writing some real-time app where it's part of the core rendering code), then it may matter. But for 99% of your code it won't make a difference. That's also why most people advise not to micro-benchmark - the chances that you'll get real gains are small. I was just refuting his matter-of-fact claim that closures are generally faster than prototypes and that's why you shouldn't use prototypes. And I would gladly add "and even if closures would be slightly faster right now, it would be a stupid reason to chose your abstraction". ES6 brings first-class prototype-based classes which you can use today with ES6-to-ES5-compilers. This is absolutely the wrong time to bet on closures as the default abstraction imo. ES6 classes will support immutable prototypes and have support for `private`. His approach seems rather short-sighted. P.S.: Just because Crockford knows a lot about JS, doesn't mean that he knows everything about modern JS engines. The number format he's suggesting at the end got a lot of heat for example because many people don't believe that it remotely makes sense. But I wouldn't be the right person to talk about specifics.
Yep. This does that.
You can also use gulp-livereload, but it's rather unpredictable at times. GLP uses it along with some other things to keep the reloading consistent. 
Take a look at Meteor: https://www.meteor.com Not only it covers server-side part and client-side part (those can be separated though), it also provides a very powerful build system out of the box. For example, simple typing `meteor add coffeescript` will add support for `.coffee` files, live compilation, source-mapping support for both browser and server debugging and stack-traces, etc. Other examples include: Less, Sass, harmony es6 features and more
What do you mean by "those assumptions"? Sorry, lost you there for a moment. :)
I've used Meteor to build a few projects and I love the idea but it still just doesn't feel ready for big applications yet. The build system is great and I love the idea of having a specific folder for client-side code. There is a lack of real guidance when it comes to app structure and from what I've seen, from talking in irc, building my own apps etc, testing doesn't seem to be a big concern for Meteor right now. What do you think of being able to have things like live reload, automatic coffeescript compilation etc but available for every client-side library? I guess Meteor is probably a special case because it's full stack. 
Thanks for taking the time to reply! That video is great, wish I'd have seen it earlier. On the irc most of the advice was to use the telescope source as guide as to the layout of a project. I haven't used Meteor in maybe a month and a half but I was using it a lot before that and I was just trying to hack around to get laika and RTD to work well on the testing side but velocity looks very promising. There definitely needs to be a common testing layer that is widely accepted in the community! It's interesting you mentioned how Meteor is already fully working and integrated together because that was the thought that brought on this post. Coming from Meteor to something like Ember and Angular i missed that quick setup time and having to manually configure a build pipeline just seems like something I don't want to do for every single project!
No you're right. Grunt, gulp and broccoli all do this but it takes a while to configure and actually get working with all the different combinations of app structure out there. Especially if you decide to use something quite thin like Express. Would it be helpful to have a framework create a base structure for most applications with the ability to easily change the default build process for different client-side frameworks? You could still modify the Gulpfile directly but it would sensibly default to whatever framework you wanted to use for the project. Coming from something like Meteor where the ability to build and deploy is built in from the start it would just be so much easier if this was the case for every cs framework. There are yeoman generators for this which I'm looking at now. 
&gt; looking forward to the next thing Please please please let the next thing be a bytecode VM interpreter. Then everyone can build their webapps in proper languages that compile down to bytecode. Bonus: minification will never be heard of again.
I came here to say meteor.js as well. After working with a bunch of popular frameworks out there for both client and server side, I don't really see the point to anything else when meteor.js seems to roll everything in that you want, and has a package system for everything you didn't know you needed.
God I hate Crockford's arrogance. He talks about how other programmers want to use a "dangerous option" instead of a "better one" just because, whereas in reality he just ignores everyone's opinions and arguments and continues to go on about how there isn't a good reason to do anything in any way other than his.
This is great, I had basically the same idea (and nearly the same options) planned out about 30% done, and I'm so happy I don't have to finish it now. My idea had you instantiate a new color scheme, somewhat like this var randos = new ColorScheme({mode:'hue', count: 12}) //etc, etc Which would allow you to create color schemes and create new colors that fit into that scheme, and do something like randos.newColor() to add a new color at the end (which may be a certain distance from the previous color or something). Anyway...I won't be doing that now, this is good enough for me.
He says it almost verbatim at the beginning
I haven't worked with Google heat maps yet but the guys over at /r/GISscripts might be able to help you.
bro, [google is your friend](https://www.google.com/#q=javascript+integer+to+hex). the function you're looking for is called [.toString](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString) - you call it on your number and then pass it a [radix](http://en.wikipedia.org/wiki/Radix). Since hex is base16, the radix is 16 (decimal is 10... see how this works?) [here it is in a jsbin](http://jsbin.com/rijafofa/2/edit) so you can tinker with it.
Look into parseInt(). Idk if it would be acceptable to use but it will work. See the answer here http://stackoverflow.com/questions/11023144/working-with-hex-strings-and-hex-values-more-easily-in-javascript
I'm getting those errors on Firefox.
I dunno man, I trust this guy more than Eich..
TIL 0.1 + 0.2 !== 0.3 aka DO NOT USE decimal points in javascript. that's kind of a big deal. I now understand why all my financial API's are written in cents... (100 = $1.00). 
I recently completed a fairly large project that used Expressjs on the back, Angular on the front and grunt for builds. I don't feel like the build process should be provided by the framework. Having a separate tool for that feels better to me.
&gt;There are yeoman generators for this which I'm looking at now. Yep, I think that's how the Node community will solve this issue. Not a tool in a framework but a tool that works with any framework. 
Lately I've enjoyed using Koa. I wouldn't use it for production, because it's not _that_ much better that express (i do like it more though). It's dead simple to pick up. For building, I either just chain commands in package.json so I run things like `npm run build`, or I use gulp for more advanced things. 
That's not just the JavaScript. I think it has to do with how float works. Someone correct me here. I'm on my phone and can't do a lot of research. *Edit:- [Found it](http://floating-point-gui.de/basic/).*
I just recreated the first level of Chip's Challenge in Phaser. Not totally done but you can see my (heavily commented!) code [here](https://github.com/ssamakar/ChipsChallenge). Also check out [lessmilk.com](http://www.lessmilk.com)'s awesome games made in Phaser. He's got a ton of links to tutorials.
Oh, I trust his work, I just find him overly opinionated and completely unwilling to listen to the opinions of others. He has this attitude that he's done more than anyone else, and his work is far superior. You can see his complete dismissal of other devs in this talk, as well as his superiority later on when he says something that boils down to "Nobody else in this room understands what I just said because I'm doing something new that none of you have caught up to yet". The literal quote was closer to "You can't understand that sentence until you've started programming like that.", and he says it twice for emphasis. My issue with it is that he controls one of the most important open-source repos (jslint) for modern web development, and is unwilling to listen to the opinions of the community. He dismisses things that are clearly bugs in jslint by simply saying "don't do that", refuses to demote some things from errors to warnings, etc. There is a reason that the community started jshint out of necessity.
yep, that's binary floating point numbers, not js (except that js only has one number type). I remember learning about floating point briefly in CSS (didn't major in it), but it's good to know.
You're right. JS uses only 64-bit floating point. 
That probably won't happen, for a number of reasons. Here are the reasons from the Dart guys: https://www.dartlang.org/articles/why-not-bytecode/ What's more likely to happen is that compiling/transpiling to JS will be simpler and more seamless, and JS/asm will essentially be like having a bytecode. Todays JS engines are so fast that JS is hardly ever the bottleneck, it's mostly the DOM that gets in the way of having a performant web app.
I prefer "Didn't test" over "I tested it and x is faster: [link to a radically misleading jsperf with poorly written test cases that are selectively susceptible to unrealistic optimizations such as dead code elimination and loop hoisting]" though :D
parseInt(x, 16) and x.toString(16) are your friends. Otherwise you'd have to do the conversion manually, which means iterating over the string representation of the number and multiplicating the original value with 16, adding the new value to decode the number.
thankyou to all you guys
This is pretty nice looking. Is it yours? If so, one bit of feedback: in the examples there's a partial representation, but it's not clear if that's accessible from the client just now or only through the users resource. I.e. Are you using Accept to switch representations or something like that. You could probably make this clear by having cURL output at the end or something.
Thank you for your feedback. :) I was also thinking about including cURL examples in the doc. You confirmed this point, thanks! Catnap doesn't know (or care, at this point) about Accept. This is all left to the supporting Framework (Express in this case). I should probably clarify this part.
At moments like this you should remember that skipping classes and writing bugs is bad.
That's an interesting discussion. Is skipping metaphorical classes only bad metaphorically?
They are the same most of the time, not always. It has to do with frames :) Here is some extra info: http://help.dottoro.com/ljkcvntc.php
No. It is bad, punkt. Blaming others for you faults is universally bad.
I can see how long living objects could be somewhat faster if Javascript engines weren't optimized for prototypes. The current engines optimize the prototype chain, so that it doesn't need to step through the chain. I would think the speed difference wouldn't be significant if engines still used the whole chain, but I don't know how heavily his approach can be optimized by a future engine. For the moment though his approach is indeed much slower in practice. [Here](http://jsperf.com/prototypal-vs-closure-calls) is a (not really good) benchmark I made which shows the difference. Overall though, he's saying `this` results in more errors and he wants bugless code. Concluding to not use `this` is logical in that regard. Performance isn't his main goal.
Javascript in general isn't the best option for performance/memory-intensive systems. He wants correct code, which is not just an academic goal, but something to work towards as an industry. I think bugs cause more loss than slow code does. Good languages help a lot in this regard: they lessen complexity/bugs, but usually at the cost of performance. Javascript in particular was never made with performance in mind. That said, I agree that performance is important, but I don't think Javascript is a good contestant to be optimized more. It's a messy language without a type-system that needs to stay compatible with all the weird and awful (but also nice and beautiful) existing applications on the web. I would rather think some form of bytecode should be integrated to get more performance on the web. Mozilla has made the most ugly, but at the same time most practical/compatible, way to integrate bytecode. I hope we'll get proper standardized bytecode some day, but I'm worried it's still far far away.
In browser object model, parent === window, launch a JS console in a browser and check this. In node its may not even be defined like window is not defined. From http://msdn.microsoft.com/en-us/library/ie/ms534326(v=vs.85).aspx &gt;For a document, the parent is the containing window. For a window defined using frame, the parent is the window that contains the corresponding frameSet definition. Thanks for the link. A TIL moment for me as well. :-)
`parent` on its own is `window.parent`, just as with any other non-localized variable. And *all* DOM windows have a non-null "parent", at the top of the hierarchy it's just the window itself, and not `null`, as I would expect.
Don't you mean "skipping classes and using prototypes"?
That's not a problem of the language really, a global variable is a global variable in all languages. It's more of an issue with the DOM implementation. *parseInt* was a problem with the language that really had me foxed once. When you realise the problem, it's easy to resolve, but still.. I thought I was going mental for a while! I think they've fixed *parseInt* in most JavaScript implementations now though, but previously it would auto-detect the base. So if it started with "0" it would be considered octal, therefore "08" and "09" would produce 0 or undefined. The solution was to always pass the second parameter where you specify the base. var a = parseInt( "08" ); // a = 0 (used to) var b = parseInt( "08", 10 ); // b = 8 Now I *always* specify the second parameter just in case, even though it's fixed in most implementations I don't want to assume it's fixed in all.
&gt; What's more likely to happen is that compiling/transpiling to JS will be simpler and more seamless, and JS/asm will essentially be like having a bytecode. Todays JS engines are so fast that JS is hardly ever the bottleneck, it's mostly the DOM that gets in the way of having a performant web app. My problem with transpiling to JS is that it will always ever be a leaky abstraction. Certain aspects of JS will always leak through to whatever language you put on top; dynamic types, lack of fixed point math, no function overloads, etc. The "JS engines are fast" argument doesn't relate to the need for a bytecode. The argument for a bytecode is for maintainability. Javascripts idioms make inherently a "toy" language, which was never designed to do what we're asking it to do today, and organizationally it starts to fall apart rather easily on a large enterprise app. I've managed to extend the usefulness of the language for a 20-person team by adopting Typescript, but even then, Javascripts idioms begin to leak through and we're hitting maintenance walls at around 100kloc. The web needs a bytecode. If it wants to be taken seriously as a platform, it cannot possibly expect everyone to build eveything on top of JS. There's a lot of maturity that other languages have achieved in the past 20 years that I'm not sure JS is capable of. 
Yeah, but 08 just isn't a integer. 8 is a integer.
Non numerical data doesn't really make sense in a strongly numerical orientation graph does it? 
Ill see what I can do, doubt anyone would need this, hence the hesitance of common.js/AMD integration 
&gt; My problem with transpiling to JS is that it will always ever be a leaky abstraction. Bytecode doesn't necessarily solve that problem. As pointed out in that article from the Dart team, the Java JVM is a bytecode but it also 'leaks' its Java biases. The types are Java compatible types. Its classes and objects are Java style classes and objects. One solution would be to go for a low level bytecode which doesn't have objects. Something much closer to asm. The down side it that no one agrees on anything except for the simplest datatypes and primitives. You can't pass an object from your code originally written in C++ (for example) to another module which was written in something different like Python, without having to do all kinds of nasty conversions and writing bindings code etc. It would be the same interop hell which traditional compiled languages have right now with FFI. &gt; The argument for a bytecode is for maintainability. I don't see how bytecode would help this. &gt; The web needs a bytecode. If it wants to be taken seriously as a platform I think we are already well into the era where the web is being taken seriously as a platform. I see similarities between JS as a compilation target and the history of the x86 instruction set. x86 is complete garbage and there have been many superior competing instruction sets over the years (e.g. RISC style CPUs). Even Intel tried to kill it and failed (Itanium). In the end x86 won despite its flaws. It still sucked, but backwards compat was more important. Broad industry support for x86 was more important. (i.e. something resembling a consensus). Concerns about performance were dealt with by sheer brute force in the form of R&amp;D money and effort to make it run fast. I think that JS is in a similar situation. 
Check your quote again. It is not guaranteed that `parent === window`. The two are only the same for contexts that are not contained in a frame. That difference can be very important.
I didn't use parseFloat because I thought parseInt worked that way, and it never occurred to me that it wouldn't (can you have floating point numbers in other bases!?). It's even more crazy if there was inconsistencies between how these two worked. EDIT: And also, I was working with financial data.. float is a very, very dirty word! ;)
No, in both these they are strings being converted into numbers (integers). In this instance they were being converted from a 'pence' value, so people were putting in "08" as that's what would be on their paperwork. I'd parse it into integers, double-check it, then build a decimal from the parts. EDIT: I see what you're saying! Well, 000008 is still an integer, it's just by convention that we omit the leading 0's. In some other bases we tend to leave them on, e.g. in binary for a given bit length, and sometimes in octal/hexadecimal. Base 10 is not special in that regard, when you look at what the digits in a sequence mean.
This is nice in the case where you have a simple application and you don't want to include a major library like bluebird just to use Promise.all() Nice work. 
What do you mean by "non numerical"? It's showing relative tendencies based on numerical weights.
I think he understood the values "nodeJS, web" and so on as being the value on that vertex.
&gt; They are the same most of the time, not always. Sometimes, I feel like this should be the tagline of javascript 
Thanks. That's exactly it. Big libraries have their place but 80% of the time all I need is to wait until a bunch of tasks complete and then handle their data together. I copied and pasted this from project to project for a while until I finally decided to stop being lazy and make an npm module.
All numbers in JavaScript are floats, actually. It's just a cosmetic difference. If you want high accuracy, you might want to look for a fixed decimal implementation instead, but that'll cost you in interoperability and ease of use.
Chai just feels wrong to me. You can get almost the same syntax from [expect.js](https://www.npmjs.org/package/expect.js) without the prototype overloading.
What part of the API is ES6-specific? From the examples it looks like it should be usable in ES5 (if it weren't written in ES6).
Should they add a ==?= operator? The comparison would return true if the objects being compared are equal most of the time, but not always.
If you are against micro-benchmarking - no argument there. JSPerf certainly isn't the answer to all questions. But why you would prefer "didn't test" over it is beyond me. If I make a false claim (as he did, as far as I can tell), why is it "good" to not support it with any facts and just use your authority to make people believe BS?
Even for a few long living objects, given good optimization, both approaches should be at best the same speed. Because technically they are the same (base address + offset of the variable). Just that the base address is `&lt;this&gt;` in case of prototypal and `&lt;closure context&gt;` in case of module pattern. With a lot of magic (reusing the same optimized code for different functions with different closure contexts) it *might* be possible to make the closure approach as efficient. As for "`this` leads to more bugs": I'd take that with a grain of sand. We're talking about the guy who says that you shouldn't use `continue` and increments because they are too complex to reason about. I'm not normally part of the "you just have to use it correctly" crowd - but... My argument is: `this` makes objects more easily inspectable and can help understanding the runtime state of your system. In a language like JavaScript without a good type system, I take easily debuggable/fast to fix bugs over "prevents bugs" almost every time. It's impossible to prevent bugs in JavaScript. If you obscure your code to prevent otherwise, you'll only make it harder on yourself.
Absolutely, that's what I was doing.. but you have to get it into that BigDecimal somehow. You can't just pass a user-entered string into a BigDecimal constructor.
&gt; I wish I could have used other languages in the browser. `parent` being `window` isn't a feature of JavaScript the language, the browser makes it so.
Well, it boils down to if / else.
Might be so, but if globals had to be referenced as so like in many other languages, this problem wouldn't exist.
You'd also have weird things like ``parseInt('037') === 31``... But yes, that has been fixed in all modern implementations. It now uses base 10 by default, unless the string starts with `0x` in which case it uses base 16.
Wow not a single comment about linting. Lint your code, it'll save you from having to post these kinds of things in the future.
Just a suggestion, but it can be really useful if you post the name of the project in the title of your post. This helps us to know what you're talking about without having to follow links (if we're already familiar with the project), and it helps later on when people do a search for the project here.
[What Every Computer Scientist Should Know About Floating-Point Arithmetic](http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html)
I am not against micro benchmarking at all, once you understand what goes on inside the engine you are benchmarking - it is possible to create very useful micro benchmarks. What I am against is not understanding and then creating benchmarks and drawing horribly incorrect conclusions. Horribly incorrect info taken as truth because a jsperf is "prooving it" is much, much worse than horribly incorrect info taken with a grain of salt because someone admitted they didn't even test it. And my comment was a bit of tongue-in-cheek.
I think you mean ==
Sure, you can use regular functions instead of arrow functions, and you can use `require('es6-dic').default` (afaik) instead of `import C from 'es6-dic'` (if you are using traceur).
It shows that it is made by a developer, not a designer :P
&gt; how many operations a program has &gt; to perform to produce output would be an indicator of performance. No it is not, AT ALL.
I think this is what you're looking for: /r/forhire
Yeah, I was about to say something about this basically being stripped down promises. ES6 can't come fast enough!
Fair point.
The MSDN bit you quoted. It explicitly states the difference between `window` and `window.parent`.
Nice catch! I added an update to the post to reflect that. Not sure how I missed the deprecation note.
But if you're going to let JS parse it for you, what's the point of using a `BigDecimal` in the first place? JS only has a single number type (`Number`) and that is defined as being an IEEE floating point number type.
By checking which one exists and then using that. var global = typeof window !== "undefined" ? window : root; or something to that extent. There aren't many situations in which you need *the* global object cross-environment anyway. Usually you specifically need a window object (which can exist in node if you build a DOM) or some property of the global object (e.g. `process` in node or something like `setTimeout`), which can be referenced without explicitly mentioning the global object. If you're thinking "but my namespaces!" that's what god invented module loaders (look up AMD or CommonJS) for.
While I'm excited for es6, I'm not excited to further increase the feature gap of browsers that I'm required to support. There's no way to polly fill things like lambda functions and yield - those things simply aren't going to be available for use to people who are required to support ie7, for example. **edit** that is, of course, without using some grunt or gulp tool to compile them into es5 compliant versions. And then you either lose their benefits by serving that to everyone or you have to manage sending different scripts to different users based on user agent. It's actually a potential for more nightmare. 
The word you're looking for is either "co-author" or "contributor". I don't see how you could justify asking for money to be either of the two. Paying to have your name listed as a co-author sounds like the literary equivalent of diploma mills.
We always have two fields, pounds and pence (or dollars and cents, etc.), for every currency field. So we're never treating it as a float in the sense that precision would factor into it. Two fields is how the banks and most financial paper-work is done, which we mirrored for usability. EDIT: It would be just as valid to do it entirely with strings, but our sanity check code worked in that way, and it's always better to have your sanity code work in a different way.
Oh wow. I use the `var self = this;` construct all the time and never even realized I was shadowing a global.
You might want to try adjusting your attitude a little. Coming in here and demanding work be done on short notice by someone without specifying what it is tends to set off a few red flags for people. I understand you have deadlines: we all do, but there's no need to sound like a dick. Best of luck to whoever takes you up on your offer
Alright!
They are not the same at all. For each context and the closures sharing it there is 2-way relationship - the context knows about the specific function objects pointing to it and vice versa. With `this` and prototypal the relationship is 1-way: the object knows what its methods are but the methods don't know anything - the object needs to be given as a 0th argument every time the function is called. This difference is normally seen all the time when you pass a function to be called later. If the caller is unwilling to call the function back later with the correct 0th argument, you cannot use a dumb and cheap 1-way function. Using closures you are paying for this priviledge everywhere up-front, whether you take advantage of it or not. 
I was talking from a theoretical runtime/implementation perspective. Obviously using the functions has differences. The context was explicitly "could they have the same performance characteristics"/"could you make closures as fast as methods". That's why I was talking about base addresses and closure context objects in the rest of the paragraph. I'm not sure how your "it's not the same at all" relates to that. You seem to be talking about something else entirely.
It's pretty -- I like it. I few thoughts - Make sure you are declaring your variables (`color`, `xy`, `colorJitter`, etc. were never declared) - Be careful on how you scope your variables. For example, `width` and `height` seem to be specific to your `pentagon` elements, but they are declared in the global scope. This is begging for bugs. Overall, the code seems straightforward, thought it's not super easy to quickly ready and wrap my head around. Make things easier on yourself and split up the logic into a few different functions. For example: var SkillsView = function(options) { this.$el = options.$el; this.style = options.style; this.skills = options.skills; this.headerLabel = options.headerLabel }; SkillsView.prototype.render = function() { this.renderHtmlContainer_(); this.renderHeaderLabel_(); this.renderPentagon_(); }; //... SkillsView.prototype.renderHeaderLabel_ = function() { var ctx = this.getCanvasContext(); ctx.font = this.style.font; ctx.textAlign = "center"; ctx.fillStyle = this.style.fillColor; ctx.fillText(this.headerLabel, width / 2, 15); }; SkillsView.prototype.renderPentagon_ = function() { this.renderPentagonBackground_(); this.renderSkillLabels_(); this.renderSkillGraph_(); }; // ... For me, at least, this makes it a lot easier to follow what's going on. I don't need to read through all of the implementation details to get an idea for what the public 'render' method does. 
If you have a bad test for your claim, at least someone can go and engage your argument - your proof is falsifiable. So I'd take a bad JSPerf test where the actual code is optimized away and it's basically testing an empty function over a baseless "I thought about it and this has to be faster!" any day. The latter has an air of "obviously" or "that's just science" to it. If you have some wild idea then you should present it as a wild idea, conjunctive and all, and not as a fact. I know that "computer science" is often far from "science" and "programmers" often removed from "computer science" - but at least a minimal amount of scientific method should be preserved. ;)
Javascript: Always consistent, except when it's not
Thanks for the detailed review of my code! What usually happens when I code in codepen is that I grow little code monsters. They start small and beautiful and end up ugly as crap. ;) I'll take your advice kindly. Thank you very much.
&gt; working with trees At first I thought you were saying you were coding while stoned
AMD is so overrated. Use browserify or even better, switch ES6 modules. What I dislike about AMD is when a module uses a lot of dependencies you create a huge distance between the pathname and the variables that will receive the modules. define(['path/aa', 'path/bb', 'path/cc' 'path/dd', 'path/ee'], function(aa, bb, cc, dd, ee) { // ... }); This is a contrived example but in real-world you'll mess this up and it wastes time. Compare it to: var aa = require('path/aa'); var bb = require('path/bb'); var cc = require('path/cc'); var dd = require('path/dd'); var ee = require('path/ee'); It is so much more direct and safer. Also fuck shims. Fuck. Shims. I hate them. Browserify is the shit, use transforms like deamdify or whatever, add Gulp for simplicity or slap it in a custom Grunt task and do all the things you can imagine. Or switch to TypeScript's and get benefit of a shitload of compile-time checking. I use it to compile commonJS modules, then browserify that. It gives great power (you pay for it in build-time and definitions editing but it is worth it when your codebase gets bigger and trial-and-error-coding would be impossible anyway).
Unreliable and if it is for globals they still add crufty script tags to the page and break the whole idea of using modules and can't reliably be bundled.
http://www.reddit.com/r/javascript/comments/274oea/the_not_so_real_problems_of_meteorjs/
He is on TC39 but if you look through the meeting notes he rarely speaks up.
require.js allows for the second type of declaration, it's how all of my scripts are declared. EDIT: Here's an example on stackoverflow: http://stackoverflow.com/questions/10485039/simple-example-for-using-require-js
&gt; What I dislike about AMD is when a module uses a lot of dependencies you create a huge distance between the pathname and the variables that will receive the modules. I know what you mean. I format mine like this: define( ['path/aa', 'path/bb', 'path/cc' 'path/dd', 'path/ee'], function(aa, bb, cc, dd, ee) { // ... } ); I find that makes it easier to see the connection between the requirement specification and function parameters.
Yeah his blog is a must read for JS. Even the comments section is usually informative.
I prefer using bind instead of the self=this hack. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind
Yea, I did that too, but it is not really the same as the alternatives. You're still vulnerable to stupid mistakes.
You can download webkit and try it out here: http://nightly.webkit.org/ There's a technical write up from the programmer here: https://www.webkit.org/blog/3362/introducing-the-webkit-ftl-jit/ I've found it faster than both Firefox, Safari 6, and Chrome 34. 
u no test m8?
The require optimizer is the main problem here. It tries to do too much, when it really should have been more modular. If it had focused on optimizing AMD modules, then it could have been combined with other tools which solves other problems. Instead it tries to be an all-in-one tool; a replacement for Grunt/Gulp/Ant/Make. And using the require optmizer with Grunt is making everything worse! GulpJS has much better support for combining several tools. For example, instead of shimming non AMD libraries, you can pipe them through [gulp-wrap-amd](https://www.npmjs.org/package/gulp-wrap-amd). Now the optimizer tool only needs to handle modules, as everything piped to it is an AMD module. **shameless plug:** I'm currently working on a library with a gulp-plugin wrapper (called [gulp-amd-optimizer](https://www.npmjs.org/package/gulp-amd-optimizer)) which takes a stream of modules as input, loads dependencies and sorts everything in topological order and outputs it, so you can concatenate and uglify it the way you want. I want feedback and pullrequests for this project! **&lt;/shameless plug&gt;** One thing to realize is that whether you use AMD, ES6 modules or Browserify, optimizing them and bundling is exactly the same problem. The only difference is the syntax. Splitting it into two files, and making sure the common bundle is loaded before the page bundle is not easier in Browserify (and is a lot worse in ES6) than in AMD. The way I would do it is to bundle the common module with the main.js file (the config and some startup code) and the require.js file, and load all of that using a normal script tag. This way you can be certain than the common module is loaded before the other stuff.
Thanks. I guess the "worry" I was talking about is that he seems to care less for performance. Something I care a great deal about :p
Ahh, I see. In that case, I wouldn't worry because the implementers on the committee (reps from Chakra, Spidermonkey, and V8) are under huge pressure to optimize their runtimes and so are resistant* to language features that are performance hostile. (* exception here is with statement performance which is actually made deliberately bad because the feature is awful and runtime implementers wish they didn't have to deal with it in real world code).
&gt; why didn't it return undefined? [Do you not understand](https://youtu.be/L0cY2NWlddU?t=12s) the concept of the scope and prototype chains?.. This is like the whole js web api! This is like the whole thing, right here: for (var o = window; o; o = Object.getPrototypeOf(o)) console.log(Object.getOwnPropertyNames(o).join('\n')); Yea, maybe storing all the things in global object wasn't the best design idea, but it's not such a terrible disaster. Because today every self-respecting js editor includes [jshint](http://jshint.com/), [jslint](http://jslint.com/), [tern](http://ternjs.net/), and other stuff that will protect your code from such mistakes. Or alternatively, ~~if you *really* like notepad.exe,~~ you can move your code to the web worker, since they have pretty [clean context](https://developer.mozilla.org/en-US/docs/Web/Reference/Functions_and_classes_available_to_workers).
I have a genuine interest in learning more about meteor, and I appreciate the explanations of the op, however... I could do without the snide chuckling. Part of what makes a platform attractive is the community, and snide chuckling is not attractive. Just presenting the info for what it is comes across as more professional. just my couple cents
Yes, but however, it will parse out those invocations and convert it to the canonical args-style, and then `eval()` it. It will break source maps, and might cause other unintended consequences.
Congratulations! Join the club! https://www.npmjs.org/search?q=type &amp; https://www.npmjs.org/search?q=typeof Next up: a flow control library or a static site generator. Or maybe a CSV parser? We always need more of those.
Can you share the benchmarks/workloads you tested?
you can also do this: define(function (require) { var aa = require('path/aa'); var bb = require('path/bb'); });
 ['10', '10', '10', '10', '10'].map(parseInt) Is still the best parseInt headscratcher.
Stick a `debugger;` in there, and you might be surprised as to what's actually going on...
[Webpack](http://webpack.github.io/)
Thank you for this. I think its time everyone stop being so politically correct, dancing around the issue and trying to pretend that all module systems are on equal footing. AMD is beyond clusterfucked; and the amount of voodoo magic that RequireJS forces on their users to get things working correctly is unacceptable (all in the name of avoiding a build step...which the majority of us have in place already in our workflows) I appreciate the passion that James Burke has for AMD and his project, but RequireJS and AMD in general is an evolutionary dead end, and people really need to move off of it to make their lives and the lives of people who want to integrate their work into their own projects easier. 
Does that work when requiring commonJS modules from npm?
And still unavailable for use at full speed in PhoneGap. Edit: can someone explain the downvotes? I posted a fact. Apple artificially limits the performance of JS in UIWebView by not giving it access to the Nitro JIT.
Maybe the benchmarks are on some specific bit? Needs more research.
Are you serious!? It is "deliberately bad" :o? Surely you mean they just don't optimize it? I remember Crockford mentioning that "just by being it the language it makes it slower"
Hey, thanks for reading the posting and giving me some constructive feedback. I changed it up a little, hopefully it reads a little less cocky.
How does one utilize the various representations of the model?
Yeah... But as a general rule: if that becomes a problem you might be doing too much with one module? I haven't come across that myself, but I follow similar rules with my methods. If I have an argument list greater than 2-3 then something is amiss.
Not even close. What do you think Browserify is doing? Please don't spread FUD about unintended side effects or source maps breaking.
I don't like Safari though
Why does your application require the indices of the array to be these numbers? Are they IDs of the thing they contain?
You're doing it very stupidly... make it an array of objects with the special id you need as a property. var arrAnimals = [{ id: 100, name: 'dog' }, { //... }]; If it's vital to have it your way then you've got a bad design pattern. 
It's not an ID, it's a sorting value. And I can't re-sort the array after each update due to performance issues. I'm using the array indexing as a trick to keep the performance up and the array sorted.
What kind of data do you expect to store in these arrays? Modern browsers are quite fast at looping as long as you don't do any DOM operations (etc). AFAIK there is no way to do this without creating a loop or using a custom Array class of sorts. &gt; var arrAnimals = []; &gt; &gt; function popa() { &gt; &gt; var val = arrAnimals.pop(); &gt; &gt; while ( arrAnimals.length &amp;&amp; (typeof val === 'undefined') ) { &gt; &gt; val = arrAnimals.pop(); &gt; &gt; } &gt; &gt; return val; &gt; &gt; }
Terrible idea, and I doubt you get that much performance kick from it. You are most likely ballooning memory use with your trick.
&gt; For my application, it's vital to have indexes like these. What are you really trying to do? Would a [tree](http://en.wikipedia.org/wiki/Self-balancing_binary_search_tree) be a better way to achieve this?
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Self-balancing binary search tree**](https://en.wikipedia.org/wiki/Self-balancing%20binary%20search%20tree): [](#sfw) --- &gt; &gt;In [computer science](https://en.wikipedia.org/wiki/Computer_science), a __self-balancing__ (or __height-balanced__) __binary search tree__ is any [node](https://en.wikipedia.org/wiki/Node_(computer_science\))-based [binary search tree](https://en.wikipedia.org/wiki/Binary_search_tree) that automatically keeps its height (maximal number of levels below the root) small in the face of arbitrary item insertions and deletions. &gt;These structures provide efficient implementations for mutable ordered [lists](https://en.wikipedia.org/wiki/List_(computing\)), and can be used for other [abstract data structures](https://en.wikipedia.org/wiki/Abstract_data_structure) such as [associative arrays](https://en.wikipedia.org/wiki/Associative_arrays), [priority queues](https://en.wikipedia.org/wiki/Priority_queue) and [sets](https://en.wikipedia.org/wiki/Set_(computer_science\)). &gt;==== &gt;[**Image**](https://i.imgur.com/7GK893v.png) [^(i)](https://commons.wikimedia.org/wiki/File:Unbalanced_binary_tree.svg) - *An example of an __unbalanced__ tree; following the path from the root to a node takes an average of 3.27 node accesses* --- ^Interesting: [^Binary ^search ^tree](https://en.wikipedia.org/wiki/Binary_search_tree) ^| [^AVL ^tree](https://en.wikipedia.org/wiki/AVL_tree) ^| [^Scapegoat ^tree](https://en.wikipedia.org/wiki/Scapegoat_tree) ^| [^Sorting ^algorithm](https://en.wikipedia.org/wiki/Sorting_algorithm) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+chxlest) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+chxlest)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Oh sure, nothing wrong with: aliasify, blissify, brfs, bulkify, cacheify, cachin, cocoify, coffeeify, combynify, commandify, browserif, concatenify, cssify, csvify, deAMDify, debowerify, decomponentify, envify, es6ify, folderify, gorillaify, hbsfy, html2js, icsify, installify, browserif, jedify, jisonify, jstify, jstransformify, ...
Finally some reason in this thread and I agree 100%. R.js is the main problem and the configuration bloat that has come along with AMD. Stick to the basics and it works like you'd expect.
have you actually tried sorting it after every insert?
you could always populate an array with objects and sort it before accessing it. var arrAnimals = [ { index: 100, value: "dog" }, { index: 500, value: "cat" }, { index: 250, value: "fish" } ]; arrAnimals.sort(function(a,b) { return a.index - b.index; }); console.log(arrAnimals.pop().value); console.log(arrAnimals.pop().value); console.log(arrAnimals.pop().value);
If you're not including 25 libs, and passing them through 4 processes to get your runtime code... you're not doing it right. /s p.s. Sorry, I'm jaded as hell. I'm quitting javascript development... actually, I'm working towards quitting all web based development, I'm done. The fun is gone, rapid prototyping and building cool and fun projects is gone in the real world anymore. I don't want to spend a work day reading your documentation, setting up your environment, configuring my routes, building out my snippets of framework glue. I bid you all farewell and good luck. I'm headed west boys and girls, to the land of security, penetration, and systems hardening. It was fun while it lasted! Adieu adieu. /rant p.s.s. Swift looks good.
It's to make up for the time you waste navigating their shitty developer tools.
No ones asking you to pipe tons of code through cumbersome build processes for the sake of quick prototyping. But when it comes down to working on big complex web applications with a team developers, you damn well better have some sort of processes running between you and your target (the browser) Hacks like requirejs because you're seemingly allergic to a build process are really counterproductive. p.s. Swift is compiled by an LLVM based compiler, so by that fact alone, you're probably not as interested as you think
I'm sorry Jesus, for I have abused of jQuery because of my laziness. Thanks for the tips. 
I have no problem with build processes, I have a problem with needlessly complex build processes and bullshit work arounds that bring more needless complexity to already complex enough systems with questionable gain. Grunt is great for example, my team wanted to use AMD for about 2 years and I repeatedly shot the idea down. Before that our build process for a developers env included running a bash script I had built with a few custom flags for skipping stuff like obfuscation (for testing). It worked fiiiiine, worked for multiple years until something like Grunt came along and seemed like a great alternative (mostly because of "watch", it was better than '$watch -n5 "./compile"). Hell, on another project with a different dev team we've gotten our build process all setup using make, and it's great, works damn well. My point was more of the landscape of the entire industry moving away from "we can build that!" to "I think someone has built about 10 things that kinda do that, we should just glue those 10 things together". I've recently written an internal framework for our designers to use because it was getting out of control. Most people can't even god damn code anymore, they just google around until they find whatever jQuery plugin they're looking for, slap it together until it works well enough, and then don't understand why these edge cases have errors... and I get to clean up their shit piles. Point being, I got into this industry early when it was young and fun, outside of a few snippets here and there, you rolled your own code for the most part. Now if you even attempt to roll your own code people start throwing red flags up like javascript is some kind of black magic. Back in the day JS was blackmagic because of hacks, quirks, and vendor bickering but now the reality is the landscape and platforms have never been more stable and predictable and they'll continue that way in the foreseeable future. Back in the day we almost NEEDED jQuery, not because it made document.getElementById prettier, but because IE, FireFox, and whatever other browser came out that week all handled it differently, jQuery fixed that, it made it uniformal. Before those you had DoJo, moo-tools, prototype, etc. and even then the only one I'd consider was moo-tools because it was all of the meat and none of the cruft. Point being, there are a lot of options out there and a lot of them do a lot more or not enough of what you need. Things like AMD and complex build processes are a symptom of this, not a solution. I'm glad to see people coming to their senses on this topic and realizing it. I hope the next phase is "fuck frameworks" and "fuck plugins".. but then half of these devs will have to actually learn javascript, so that is pretty unlikely. 
is anybody pissing on your turf? chill out man. we use fairly big codebases (50K-100K LOC), converted everything in our own libs to TypeScript. everything else we declare in typedefs for and browserify actual code from npm. if you are really on bocoup you should know better then to overreact as an angry teenager.
You are, in fact, pissing on my turf. I'm sorry that my post came off harsh, but hopefully anyone else who reads this will think twice after reading your propaganda.
Sure does if you're requiring inside of Node.
&gt; Catnap is a minimal approach to handle REST Resources on Express-like routers. It simplifies creating named resources and defining their representations while keeping your code DRY. Sounds great, but... I don't know why I need this. I write servers in Express and I'm not clear on the goodness a catnap would provide to me. Examples showing the problem, and how this thing solves it, would be really helpful. 
&gt; propaganda lol
I believe the issue you're having is that setSelectionRange and createTextRange are not actually on the jQuery object. You need to target the actual DOM element. So doing it in raw JS is probably the way to go. However, if you need to do it within jQuery, you could do something like this: http://jsfiddle.net/Z754z/
No, I won't call these great javascript tutorials from around the web. Half of them are CSS tutorials and the others are pretty much writing plain simple javascript function for beginners. It should be titled as JavaScript tutorials for beginners but definitely not from around the web. 
Hmm. Doesn't seem to be working here. It sets the position to the beginning of the text, and adds one string. Then, the next time you click it, it adds it twice, and so on (once first, then two more times, then three more, etc. [Basically, 1 instance, then 3, then 6, then 10, etc.]). I'm using jQuery 1.11.0, but backtracking isn't really an option. Ideas? Edit: Sorry, that was just the rest of my script freaking out. I think your code works. Let me debug the rest of mine first.
The specific type of tree depends on the operations you need. If you're consuming data in sorted order you want a priority queue or heap. If you're constantly querying rank or selecting elements based on rank, an AVL tree or Fenwick tree would be great, etc.
&gt;basic math Included. &gt;floating point There is nothing else. &gt;averages A loop. Did you profile your application?
Just a followup, I got my script parts debugged, and yours works fine. However, since it's setting a position and not selecting a range, I changed the 0s on lines 8 and 12 to pos, and it works great.
The only problem is if you're dealing with older browsers such as IE8 or browsers on older Android phones. Hopefully, you don't but if you do, you'll need to define Function.prototype.bind since those browsers don't support it.
So much for VIM macros. My point still stands, "simple" is completely relative. Depending on what you're doing it could be a mess of transforms and a complete pain in the ass.
Did you think that maybe I don't want to write and test every math function I can think to throw at my application? 
&gt;if you have a problem with all languages that are indentation dependent (Python, HAML, SCSS, YAML) then of course you're going to be against CoffeeScript. If you've gotten to a high-level of proficiency with JS already, you likely won't want to switch. That about sums up why I don't use Coffeescript.
Are you seriously going to try to make the claim that transforms in RequireJS are any less of a mess? This should be fun
Maybe reign in that JS point a little... :\
Typically, WebKit Nightly has upcoming features included far in advance of the official Safari release. For example, the development tools now in Safari as of Mavericks were at one point only available in WebKit Nightly.
Great. Now where is the news on the rumored IndexedDB support?
You really need to think about how you want to model your data. If the index is significant, it should be another field along with your animal name field, both being wrapped up in a proper object. Abusing an array index to represent that information seems like a bad approach.
The firefox people have a test server continually running Apple's sunspider benchmark (universally considered useless), Mozilla's Kracken benchmark, and Google's Octane benchmark. They run it on a range of servers, but the one most fair to Apple is configured running on 64b OSX: http://www.arewefastyet.com/#machine=12 When running in 32b mode, Safari is considerably slower on most benchmarks. Unless there is some lag in their test servers picking up the latest webkit code, Apple still has work to do.
Awesome, this looks good.
Oh, I guess I forgot to mention: I want floating point that actually works. 
No, the FTL llvm javascript system was introduced into webkit proper last week. It'll be included in MacOS X but webkit is open source. The code for that was actually introduced two years ago in a seperate branch by apple.
For the longest time I didn't understand why people added everything in Object.prototype.properties. I finally GET IT!!, to avoid redundancy. I..I feel like I'm reborn. 
Chrome's developer tools were originally webkit's.
Sounds like you want decimal rather than floating point. Floating point implies loss of significance in some operations.
Has anyone ever used Ember Data with server responses that don't conform to what the RESTAdapter expects? From what I can tell, you would just create a custom adapter, no? 
It's only enabled by default in the iOS and Mac ports coming off of webkit nightly, other port maintainers will need to enable FTL and try it out. If you look at their sources branch jsc (in any port) when compiled as a standalone doesn't enable FTL. Mainly because jsc is primarily used as a debugging tool.
That would be fixed-point or decimal. *That* is something you'd need a library for. Also, doing that kind of thing in JavaScript is extremely slow. Easily x100. For most applications, floating point is good enough.
&gt; ['10', '10', '10', '10', '10'].map(parseInt) I consider myself pretty fluent in JavaScript and that one *still* took me a while to figure out. Wasn't until I ran ['10', '10', '10', '10', '10'].map(function() {console.log(arguments)}) that I got it.
Why not just use preprocessors and make/configure toolchain? They're built in to every compiler on earth, probably already installed on your machine and incredibly powerful. Hell of a lot more mature and amazingly well supported and robust. You automatically get the power of make, automake, configure, ninja, etc, etc, etc... gcc -E -P -x c -undef -D PRODUCTION src/some.css -o production/some.css gcc -E -P -x c -undef -D PRODUCTION src/some.html -o production/some.html or for testing: gcc -E -P -x c -undef -D DEVELOPMENT src/some.css -o dev/some.css gcc -E -P -x c -undef -D DEVELOPMENT src/some.html -o dev/some.html You can import, setup defined rules for what to import, consider the css file: .asset-server-background { #if defined(PRODUCTION) background-image:url(production.com/assets/myasset.png); #else background-image:url(dev.production.com/assets/myasset.png); #endif } Simple as pie. No need to use any of these. 
Sucks for you, its the best browser on osx
Yay. Let's see what's broken this time, and find the reported bugs that haven't been fixed. I could be wrong...I hope I am
Nice to see that they are incorporating routing and data binding... although I suppose they have to if they want to keep up with Ember and Angular. The look of it is nice - doesn't look like they copied bootstrap, but it's still modern so I like that. I see that it supports tablet... but I really want to see what they do with the next Sencha Touch.
i like using bind, but according some jsperf's self=this actually has better performance. Not necessarily a big deal, just a random observation. 
really? it'd take literally 1000 times longer to write any code.
I have no idea how the discussion went from requirejs to using Make.. =| Your solution looks a lot more complicated than using grunt, TBH. Also, mixing css with rules? I dunno man. Pretty sure that if you're using make, you're using the old school way of concatenating javascript (and making sure they're correctly namespaced and stuff). Looks like a step backward to me, imho. 
The best reason: Mongodb . . . http://www.sarahmei.com/blog/2013/11/11/why-you-should-never-use-mongodb/
dude, you should try out gulp (if you haven't already). It's like the wild-west out here, I have to code almost everything myself. It's powerful, and fun. Nothing to 'config', unless you want to make your own json file and grab data from it. It's teaching people how to use node streams and write async code for building, testing.. anything. Sure there are almost 700 plugins, but most of them are small, scripts of connivence for people who aren't used to stream syntax. Gulp has completely changed how I perceive code, build systems, nodejs, and my workflow. It really blows my mind how node can be used, is anybody doing this in java? C++? PHP? no. is it possible? sure, but nobody got time for that. 
I use Firefox on OS X because Safari kept quitting unexpectedly.
Hm, well. From my understanding grunt is just a task runner. Or what C++/C/Objective-C and the rest of programmers understand as a toolchain. It runs things like SASS, require.js, handlebars, jade, etc then output it to a final directory (somewhere). Transforming one language into another at runtime or at compile time seems confusing if it isn't simply for build steps.. Take SASS, it's preprocessors, variables, and nesting can be implemented in preprocessing code, preprocessors in gcc support macros, variables, conditionals. But unlike language dependent preprocessors like SASS (or runtime ones like mustaches), they're completely language neutral, so you can reuse them across both javascript, css and html. Where as most of the current landscape simply makes language dependent problems, leaving the users to figure out what to do across multiple languages. Consider this: You have a file called mylibrary.js, it needs jquery, you can declare that you need jquery in that file. But it's only actually included, and only once in the HTML file, and only where the HTML file says it wants. Consider you can also take all of those requirements and put a macro that automatically concatenates and runs a optimizer on it. But the great part is, macros are powerful enough to put rules that if its accidentally not included, it errors out. Or perhaps this: You can use variables all the way through every piece of code you have, from html, css, javascript, jade, whatever the hell you'd like and replace that variable with something else through pre-processors. Easy way to switch from development to production environments. But an added benefit is toolchains like ninja/make is they are extremely well built to manage huge complexities where you may have thousands of pages that each have separate dependencies, but only rebuild parts of the project that need to be. Preprocessors don't require configurations unless you wan are really powerful things that I feel has been largely ignored, there's a reason programming giants use them, as they're incredibly flexible and capable. All-in-all i'm actually a fairly huge fan of just learning to build server agnostic code. I really hate build systems. :) Every javascript build toolchain is reimplementing what people have done over and over again for 40 years. I haven't heard a scenario that pre-processors couldn't handle.
something tells me a guy who can't figure out why the code in this selfpost doesn't work is not going to be able to implement a binary search tree in javascript... good suggestion though. ;-)
Agreed. I copied brtt3000's example which has 5 params, but it's not necessarily how I would write my own code.
Ouch xD I'll think about it. 
http://www.w3fools.com/
im using yosemeti and safari right now, I can't confirm it's speed, but I can confirm it's extreme buginess, and general lack of awesome.
Is it me or did this sub just blow up with subpar clickbait the last day or two?
Hey, I did a proof of concept. I think you replied to my blog too, but I'll move the discussion here (Disqus sucks). http://maktouch.github.io/requirejs-shim-fail/ 
&gt; a mostly obsolete define that is only ever used now when authoring libraries Do you mean just the presence of path elements? Or does everybody do define(function(require) { var mod = require("./relative/name"); }); now and I just missed the memo?
I work pretty often with Javascript, and I know it's just because I haven't worked with any JavaScript projects that ran into the hundreds of thousands or millions of lines of code (dear God, no), but I've never seen the need to split everything up into separate files. It's typically been me and one other person developing something, and we use version control systems and manage our conflicts pretty well. As long as everything has its own namespace, like you said, there really aren't going to be crazy issues, right? Even so, like what ns0 is saying, why not just split them up and then concatenate and minify them together later in a build step beforehand? I don't understand the need for these tools that make things more complicated than they need to be.
Hello all. I received a lot of feedbacks, a lot of those claimed that shims should always be working 100% in all scenarios. So I made a proof of concept where it fails: http://maktouch.github.io/requirejs-shim-fail/ Basically, shims works when not compiled, but once it's bundled, it doesn't, unless it's wrapped around ``define`` script. Maybe we're doing something wrong. I'd really like to know if you think so. But my point was that Dev !== Production when it comes to requirejs + shim + bundling. Cheers
That has to do more with the rest of the browser, and not necessarily the JS engine itself. For example, CSS animations are also jankier in FF than in Chrome or Safari. When rendering isn't involved, performance may well change.
I'll certainly take a look at that! looks interesting. 
+1 for routing. That feature really was missing, no more hacks to get routing to work!
Yeah, I see es6 as 'node only' in the short-to-medium term, to be brought to the browser in the longer term. Node 0.11 (the unstable version) has pretty good es6 support.
But now they're better, so that doesn't even begin to matter.
Ok, I didn't bother taking this test, but anyone who actually started the timer before at least reading and answering the questions in their heads first isn't very bright.
That means you can't have two items with the same sorting value. If you want it as a sorted data structure, it's much saner and more efficient to store the sorting value with the data and sort on insert.
There are much better languages that compile to js - If you are going to suffer all the downsides of using compile-to-js language, coffeescript is about the stupidest choice you could make. It doesn't fix any real problems unlike many of the alternatives. Also why do you use underscore over lodash? 
I'm not sure how to say this any clearer: there are no integers in JavaScript*. It doesn't matter whether you treat the numbers as floats or not. They are still stored as floats in JavaScript. They're just presented as if they were integers because in most use cases developers don't want to see decimal places when they defined things as whole numbers. If at any point you are turning strings into `Number` values, you're using floats, even if you then feed them to some BigDecimal implementation. *Obvious caveat: there are typed arrays in ES6, but unless you're explicitly using them, you're still dealing with `Number`, [which is defined as using floats](http://es5.github.io/#x4.3.19). Also `Number` uses 64bit floats, so it's not quite as terrible for most day-to-day arithmetic.
I read the article, i'm not sure if I agree with his point, it was mostly about how he disagrees about declarative vs. scripting build systems. But i'm not entirely sure I know what he's describing as declarative vs. scripting build systems. You don't have to use make, there's plenty of other toolchain systems, or you can use what i can only assume is what he was referring to as declarative is a rule based system of necessary features such as autotools/automake/autoconf, YMMV. I suppose whatever suits you best, use it. I love not having to learn a new language and have the agnostic process of preprocessors that can span my javascript, css or anything else that may cross my path. The build systems that support gcc/preprocessors are plentiful and integrate with almost every compiler/ide out there. I've seen some of the largest javascript projects (emscripten) use preprocessors to some very large success to manage hundreds of thousands of lines of javascript libraries and dependencies. I guess I just never see it mentioned as a contender, the I see things such as SASS which make me a bit nervous..
As you said, it's a self invoked anonymous function (aka IIFE - Immediately-Invoked Function Expression), which - lo and behold - is executed immediately. The return value of that IIFE is then assigned to `f1`. So when you do `new f1()` you're not creating a new instance of the IIFE itself, but what it returned when it was executed. If you want to dynamically alter the `x` value, I'd pass it in as an argument to the constructor (`new f1(13)`)
Also, none of these questions indicate intelligence.
It's done by calling the resource. e.g. if you have defined a representation on a user resource, you could do: userResource(user); I updated the readme thanks to your comment. Hope it helpds :)
That's a great point. On my list of things to do.
&gt; I suppose whatever suits you best, use it. I agree. I think that if you're efficient with Make, you should definitely use it, there's no reason to learn Grunt as it offers no clear advantage except a difference in philosophy. But, SASS, you should really take a look. It's much more better than normal CSS! Cheers mate. 
That is my main gripe, the new paradigm should be fully endorsed or just left out until it is mature enough to replace the old paradigm. 
Or even plain ES5. 90% of cases I see people use underscore they only use `map` or `filter`.
tl;dr: because _ego_.
well i will keep this in mind and will share new one, good idea i can make this more attractive, question and options will appear after answering previous one.
I think you misunderstand how asm.js works. 
Ah see, now this is what you should have posted. In your example: &lt;script&gt; var require={ "baseUrl": "js", }; &lt;/script&gt; &lt;script data-main="shim-only" src="js/vendor/requirejs/require.js"&gt;&lt;/script&gt; The shim-only, when built, excludes common (that contains jQuery) and only contains the plugin. Since the plugin is inlined you need to ensure that jQuery is loaded first. This is why we use nested requires. You'll see in my fix that common is indeed loaded first outside of any build system and will ensure jQuery is on the page. &lt;script src="vendor/require.js"&gt;&lt;/script&gt; &lt;script&gt; require({baseUrl: "js"}, ["common"], function() { require(["shim-only"]); }); &lt;/script&gt; Hope this helps! Edit: Updated for readability.
Nowhere have I claimed they are more simple, unlike the post I was responding to.
It works!! It seems like my mistake was to bundle them up together instead of doing the nested requires inline. Thanks for helping me out. It's so frustrating that there's 5 ways of requiring things, and they all depend on something else.. and they all work in development. My hatred for it is still there but I'm feeling better! I'll correct the blog post and the github. Cheers again. 
I think it could be most useful as almost a mobile version of [Dash](http://kapeli.com/dash). The reasoning is that there is already plenty of great information out there, but accessing it from mobile is less than ideal. I just can't think of a time I would use the flash card version you described. Cool to see someone thinking about this issue though :) **FYI**: The scroll-jacker plugin prevents me from swiping back on my laptops trackpad.
&gt; On a nearly out-dated iPad Mini. Nearly? Didn't they just come out?
More like just enabled it. iOS 7's WebKit engine supports WebGL as well, but disables it in the browser. They do have in enabled for iAds, however. You can tell it's still there though because Apple didn't remove the hook for WebGL, so it tests positive.
The first gen iPad mini contains the iPad 2 internals just on a smaller scale. So yes it would be very out dated by today's standards. Every 6 months anything purchased is irrevelant as far as specs go. It's old tech in a week, outdated in a month. 
I also suspect that there are rings of users who cooperate in their spamming by having their cohorts upvote their stuff.
Why would you care about this good for nothing knowledge?
I already solved that by allowing an array of objects that have the same sorting value.
Thats stupid.
I've decided to work with the AVL tree. http://docs.closure-library.googlecode.com/git/class_goog_structs_AvlTree.html
Missed the memo. This approach of using relative paths and the simplified CommonJS style is a much improved way of authoring modules. Eliminates annoying path configuration and ensures portability.
For sure. Here's a rundown of how to accomplish UMD with various tools: https://gist.github.com/tbranyen/6399fd28556b26d3c29c
If you need arbitrary precision integer arithmetic, you can try [Crunch](http://crunch.secureroom.net/). Its fast and you would use it for arithmetic operations on big numbers, such as those used for asymmetric encryption. It's not for decimals though, so maybe not what you are looking for.
Is this what you are after: https://developer.mozilla.org/en-US/docs/Web/API/Window.onbeforeunload ? I'm not certain, but I think this is a one-time deal showing a confirmation dialog before the window closes and allows a cancel. This has valid uses for application-like pages where the current state is unsaved and closing the browser would lose it -- jsFiddle uses it. Not sure how the malware gets around that to continuously show dialogs -- probably another method I'm unaware of.
Haven't heard of that one, thanks for the input. I definitely need decimals though. 
Speaking of post histories, you have [this](http://www.reddit.com/r/learnjavascript/comments/273mua/request_roulette_wheel_with_7_pictures_of/chx6nyx), where you admonish someone for asking for help with homework, implying that they're a slacker. Well, I hate to break it to you, but the source code to do what you're asking is live on 10's of millions of sites right now, all you have to do is bring up `view source`. Or, use Google, there's literally thousands upon thousands of results detailing various methods for accomplishing it. I suspect that /u/_0- replied as he did because these types of practices (removing control from the user) are heavily frowned upon by pretty much everyone in the industry outside of malware/spam/porn, and so if you're looking to implement this type of 'feature', then there's around a 99.9% chance that you're going to use it for malware/spam/porn. It's nowhere near a new technique, and I'm completely dumbfounded that you apparently didn't even try searching before posting your question here. If you really are just trying to "learn", then I'm also greatly surprised that your first inclination was to post here.
Yeah, gulp looks awesome, definitely going to play with that and move towards it for future projects. Good call sir, thank you! 
* I'd prefer the name `cmpFn` or `compareFn` over `sortFn`. SortFn doesn't sort anything - it's just a comparison operator. * In your `(sort &gt; 0)`, you should always set min=mid+1;. This maintains the invariant that min is the lowest slot you *haven't* checked. This way, min and max will walk toward each other until they're equal and the while loop exits naturally on min==max, and you can keep `mid` local to the loop. (you should rerun your checks after this to make sure I'm not giving you bad advice) * Why are you maintaining `this.length`? Do you expect a user to check this property themselves? Why not just have a `getLength()` function that returns `this.data.length`? 
Nope, I think you do. ASM infers based off weird annotations in your source like: myInt|0 or +myFloat. You don't want to be writing that by hand. Also I'm not sure how this would save you from the OP.
binary search from closure library: goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) { var left = 0; // inclusive var right = arr.length; // exclusive var found; while (left &lt; right) { var middle = (left + right) &gt;&gt; 1; var compareResult; if (isEvaluator) { compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr); } else { compareResult = compareFn(opt_target, arr[middle]); } if (compareResult &gt; 0) { left = middle + 1; } else { right = middle; // We are looking for the lowest index so we can't return immediately. found = !compareResult; } } // left is the index if found, or the insertion point otherwise. // ~left is a shorthand for -left - 1. return found ? left : ~left; };
Stop bickering, you two. @Meso_Gosu: best practice is to use [`window.onbeforeunload`](https://developer.mozilla.org/en-US/docs/Web/API/Window.onbeforeunload) to show the user a confirmation dialog before closing the page.
This would go well with the announcement of WebGL support in iOS8. Any idea when we would see both in real-world use?
1. Good point 2. I was having some difficulties with that, though I was pretty sure that's how it should be done. I'll give it another go because I've changed the algorithm since trying it. I think my problem might have been that I was setting `max = mid - 1` for `(sort &lt; 0)`. 3. Yeah... I went back and forth w/ that. I've seen other collection implementations that maintain a `length`, and wanted to make it similar to arrays, but I'm thinking you might be right about it. Thanks for all the advice.
good news for famo.us
Thanks. I'm going to avoid looking at that to see if I can improve my implementation without looking at an answer :)
&gt; good news for famo.us since when famous uses webgl?they dont,they use css3. More like good news for threejs.
Excellent, interested on how the basic touch events works.
lol hence the name `Array.prototype.poop`
Mozilla should really "start" to focus "again" on the quality of their browser.What made firefox great is that it was fast,opensource and just better than IE. Now Chrome exists,I just cant bear FF anymore.Hope they come up with something new instead of just copying Chrome.
Any idea what other HTML5/JS features they enabled or improved with ios8? I really want a JIT webview for native apps.
Nobody writes that by hand. You use your favorite language/compiler/debugger and target asm.js as the platform, just like you would x86,x64,arm, etc. The point of asm.js is you don't need to use javascript. You can use C++ (like [Citadel](http://arstechnica.com/gaming/2013/05/html5-epic-citadel-demo-shows-the-power-of-opengl-in-the-browser/) ) if you want.
Max should be set to exactly mid. Since you've checked the element *at* mid, you should use that index as the "one past the end" index that max started with.
+1 for ZingChart - I've been able to make very different types of visualizations by using all the chart types combined with the styling flexibility. If you're interested in speed they have a chart that test runs 5000-100,000 data points, too.
Very nice! I think you need a pretty-print option in there to add some blank line whitespace to the output before functions, and for before switch() statements, before for() and while() loops, after the first large block of VAR assignments.... you get the idea. Also, something, like a comma separated list of variable name startsWith/endsWith or regexs which would infer the type from that. For instance, I noticed in my minified-&gt;JS NICE code that a routine had "percent" as a variable, and JS NICE couldn't infer the type from that. If there were a user def'd list for each type, I would have added that anything with percent in the name was a number. Thanks again for the useful tool.
It costs money, but to learn more javascript and put it in context with browsers and sites, [Code School](http://codeschool.com) has helped me a lot. I guess you can learn to make command line apps with node.js, but then you'd had to learn a bit of node as well, and I guess it can be pretty daunting. http://cruft.io/posts/node-command-line-utilities/
I would start reading books on javascript and using it in more advanced ways. Intermediate level is about where you should be now after that course. Try and write programs to do things you normally do everyday instead of using whatever app you are using. Start simple like a calculator or something. Although these might require things other than JUST javascript. Good luck! Javascript appropriate IDE or Java? Two very different things. I will assume you meant Javascript given the subreddit we are in, and the course you took. I use Sublime text as my 'IDE' (text editor with extra features), but if you want an actual IDE Aptana Studio is pretty solid, or Visual Studio (Desktop Express version is free and does HTML5/Javascript).
Hmm, very interesting. And ty for the scroll-jacker feedback as well. 
I appreciate the answer, that makes complete sense. I'm guessing when I click submit and it directs to another page, I'll have to use tampermonkey as well....... I'll check it out. I'm just fiddling around to see capabilities as opposed to storing password information. The log-in splash page was just the easiest to work with. 
I've also heard about browser-sync to automate opening multiple browsers, testing and syncing scrolling and clicks between browsers.
Really impressive work. I feel so stupid writing over 9K lines of javascript for something that isn't even as remotely impressive as this. 
DICOM / pacs related software. Boring stuff, dynamic loading treegrids. Also hooking around the buggy behaviour of DOJO (Stay clear of Queryreadstore &amp; lazytreegrid). http://www.dobcomed.com/pacsonweb/en/how-it-works.php
I'm a little confused on this whole thing. Can you guys clear up exactly what this example is trying to simulate, and not just what a possible fix is, but actually the best way to accomplish that goal (maybe having a module that just loads other modules for example) My guess is that we're looking at a way to do a mix of common modules built into a file, and page specific modules built into each page? And the gist of the advice is to not use data-main if you're building a combo of common+page? I used require in a medium size project, and fell into the commonjs "sugar" syntax as the way to go and didn't hit any big hiccups. I also missed any memos on that topic, but it was working well for me. Is there anywhere that demonstrates the current best way to do different require setups (all in 1, common + page, etc) if the docs are not good for that?
I think my eyes are bleeding
That really helped solidify my knowledge of OO JS. Seems like there aren't many people out there that actually understand how javascript works when it comes to prototypes, objects, constructors et al.
We have a support license on top of the license, and it hasn't done much for us. I've been wanting to move to a less bloated UI anyway....I guess now's the time
There is one. Look for WKWebView. It supports the multiprocess WebKit, the web pages have their own sandbox, and the JIT compilers are enabled.
Hope this is some form of comedy
I'm late to this party but my general practice is to not declare things in the factory functions parameter list. Requirejs will parse the first items in the dependency list to look for "require" and then give you a function you can call for the module loading. It does lead to a DRY violation, which I just accept. For reference that code looks like this: define (["require", "exports", "path/mod.js"], function (require, exports) { var mymod = require("path/mod.js"); 
Thought I'd ask you again since you were so helpful. I've tried google/lynda/youtube. With work, I need to enter large amount of test data into a testing environment fairly regularly. Each test case requires 3 different page loads on submitting data. I wanted to store all my test cases in an array, and loop through the array and submit the cases based on the required fields. I'm guessing since it goes through 3 pages, Javascript wouldn't be the correct coding language since Javascript isn't preserved from page to page? 
Pretty cool, love that the walls are textured!
It does. Thanks. This looks great.
Hi! Using 1 vs 0 is an arbitrary simplest cast. If you wanted to use a non-flat terrain, I'd recommend having two grids: one for a heightmap (the terrain) and another for the walls on top of the heightmap.
Well what does your code look like? You do need to use plugins after deviceready fires, so solve that problem first. E.g. http://stackoverflow.com/questions/10186104/phonegap-media-api-android-media-is-not-defined
Exactly why I don't use CoffeeScript too. It looks nice but being dependent on indentation just seems an extra layer of complexity which didn't have to be.
 ☑ good writing (actual introductory paragraph, well organized copy, engaging writing style) ☑ visual demo ☑ working demo ☑ full source code ☑ deconstruction of the code ☑ complex technique explained in plain English ☑ useful diagrams I wish all blog posts were written this well!
I have wondered for a long time how collisions work with raycasting. Thanks for the simple solution!
How does that improve portability? If module A refers to module B by relative path, then that reference is broken if either module A or module B moves. Having a big path configuration for a large app is a major pain to set up, but I can move a module that 10 others rely on and I only have to change that reference in one place. Maybe I'm not understanding what you mean, though.
/r/learnjavascript Would y'all stop replying to these types of posts? Bringing down the overall quality of this sub even lower ffs
True. I often forget that subreddit exists. I do not exactly frequent this subreddit. Note taken.
Thanks. What exactly is the difference with npm and bower? Why would one consider using bower over just publishing and consuming reusable parts via npm? The documentation suggests... "it's for front end" but I don't really see any reason npm wouldn't be good enough.
Now to integrate web sockets ;)
I've tried all the flavour of the month module loaders but always end up coming back to AMD purely because it's the only one that actually works. It's a total pile of shit, and I hate it, but it's currently the least-worst module loader available if you're trying to do anything remotely more complex than bundling a few files into one. 
**TLDR: Although tricky to configure, I use Browserify for great benefit and show some tricks for mitigating maintainability issues** My company is building an enterprise CMS-like app with Angular and Browserify and I'm pretty happy about where we're at in terms of maintainability. All of our widgets are written as separate modules (in both the CommonJS and Angular sense) that call into a common core. So in a sense they are all tiny little apps and could function on their own, but they are wrapped by an 'app' module that handles routing and state. To avoid boilerplate and make sane use of bower, I use [load-grunt-config](https://www.npmjs.org/package/load-grunt-config), which lets you split all your task configs into separate files, and lets you use one or many types of languages (coffee, yaml). Then I maintain a project.yaml file which houses all of my strings and a shim.js ala browerify-shim. client: name: 'app' app: 'client/src' vendor: 'client/vendor' tmp: 'client/.tmp' bower: './bower_components' libs: - 'angular/angular.js:angular' - 'angular-animate/angular-animate.js:angular-animate' - 'angular-ui-router/release/angular-ui-router.js:ui-router' - 'angular-ui-bootstrap-bower/ui-bootstrap-tpls.js:ui-bootstrap' Then in my browserify.js (grunt) file, I just loop over the libs and format them in the way that browserify expects. module.exports = function(grunt, options) { var libDefs = options.client.libs.map(function(d){ return '&lt;%= client.bower %&gt;/' + d; }); var libFiles = libDefs.map(function(d){ return d.split(':')[0]; }); return { options: { transform: ['browserify-shim'] }, libs: { src: libFiles, dest: '&lt;%= client.tmp %&gt;/js/libs.js', options: { alias: libDefs, } }, build: { src: [ '&lt;%= client.app %&gt;/index.js' ], dest: '&lt;%= client.tmp %&gt;/js/search-app.js', options: { external: libDefs } } }; }; As you can see I compile my libs as a separate module - and then tell my app module which files are `external` to it. Then you can really do whatever you want with the files after that, load them as individual script tags or concat and minify them, makes no difference. Everyone has pointed out shims really suck, but they are a necessity. In working around issues, I find that one of the biggest problems are where you have plugins that try to capture a reference to some global dependency inside of a closure. Consider the following; (function($) { $.fn.myPlugin = function(){ ... } })(window.jQuery) When run through browserify, that file gets wrapped with a function - but the inner closure still gets evaluated. function(module, require, exports) { (function($) { $.fn.myPlugin = function(){ ... } })(window.jQuery) } Where the problem lies, is jQuery which now supports CommonJS, and *doesn't expose a global variable* when loaded through require. So what we end up having to do is create an actual jquery-shim file. Then when I `require('jquery')` in other files, what I'm really doing is aliasing to this: var $ = require('jquery-lib'); if (window.jQuery) { window._jQuery = jQuery.noConflict(); } window.jQuery = window.$ = $; $(window); I find this works pretty well, and only rarely have I run into an issue like this. Really all of my libraries are loaded declaratively and the only boilerplate is having to `require` things at the top of my modules, which I can live with. You could even mitigate that by using a sandbox / facade pattern like in [Aura](http://aurajs.com/getting-started/#sandbox). (A lot of my architecture is based on the principles in Aura) Phew that got long, sorry for blathering!
Am I the only one who's having problem with the video?
Yes and no. Those libraries wrap or rewrite methods that often already exist natively (e.g., forEach), they have a ton of functions that practically speaking are never used (e.g., zip), and they tend to be very heavy in collection and array-related utilities. Sprinkles doesn't do anything a modern browser already can do natively, has a smaller more pragmatic set of utilities (although arguably that's a bit subjective), and provides support to other commonly used objects like dates and strings. The biggest difference is in how Sprinkles is implemented, choosing to extend existing objects rather than attach them all to a singleton (e.g., _). This is a point of some contention in the JS community but it seems to work just fine in practice if used sparingly.
Not a fan of the modification of base prototypes 
Why?
So many great little news bits about iOS 8 for us coders ... I don't even miss hardware update announcements.
http://popcornjs.org/ ? It doesn't actually edit video (afaik) but it has a timeline with the effects that you mention.
Win 8 gets a peasly "native" in addition to the GV's.
Because you are extending native objects that you don't own.
 http://underscorejs.org/docs/underscore.html#section-15 Underscore and Lodash make your js coding life happy, by providing compatibility with old js and modern js with forEach eg. Many other examples inside.
Welcome to reality
you heart vectors? Whelp, welcome to google. http://paperjs.org/examples/ http://fabricjs.com/demos/ http://raphaeljs.com/ http://threejs.org/
Hopefully there are several realities.
I too am using yosemite and Safari works well for me. Tested with several sites and web apps. Its fast and slim. And has a lot of Awesome in it!
You don't need a (paid) licence to test any of this. Just a (free) account and you can download xcode for free as well. Did you checked on this, because it's like that for an eternity.. 
If you have a component that references a relative template and distribute the module and template together, they will work in other AMD projects. If you do not use relative pathing and instead rely on magic path configurations you severely hurt the portability aspect.
Inserting in the middle (splice) is `O(N)`, so it really doesn't matter that much, whether you use binary search or not. `O(N + log N) == O(N)` Implement a proper heap/priority-queue.
Holy shit that's awesome.
Confirming it also appears in Win 7.
I popped your code into [jsfiddle](http://jsfiddle.net/mq5Lg/1/). For me in Chrome/Win7, it's always a female voice. Maybe the others are dependent on system's locale settings?
Stopped using `this` and `Object.create`, `for` and `while`. Now he needs to start using `with` and he'll be me. Or I'll be him. Hmm...
This is a bit off-topic, but I recommend using LESS instead of SASS. The original SASS requires ruby, LESS requires node, so you don't have additional dependencies when you're already using grunt or the like. In the end it obviously comes down to what features you need, if you are using css frameworks written in SASS/LESS, and taste.
I find people often attribute what they deem to be their own virtue as a vice of others.
https://www.npmjs.org/search?q=ffmpeg
Every PhoneGap app is about to get a lot faster.
For a couple projects I was working on, we bought https://mobiscroll.com/. The near native design sold it for us.
I have started playing around with Titanium Appcelerator http://www.appcelerator.com/ It seems a lot promising and you write in JavaScript.
Does look neat!
This is really amazing... Congratulations :)
Yeah, only roadblock to that right now is iOS itself. From first beta release notes: &gt; Applications that use Apache Cordova/PhoneGap are broken due to a bug that causes the window.navigator.userAgent object to become undefined when window.navigator is replaced by a pure JavaScript wrapper object. 
You can use canvas.height/width to increase the size of the canvas, but you'll need to increase the dot's positions similarly.
&gt; As of iOS 8, however, it seems that decision has been reversed. All apps will now be able to use the same improved JavaScript engine that powers Safari. That means Google’s Chrome browser on iOS will now be just as quick as Safari, as will the pop-up browsers embedded in apps like Twitter and Facebook. Hummm, won't that mess up engineering decisions? Eg you decide to do X() because that works great in Chrome, but suddenly that function works differently in ALL iOS browsers?
&gt; suddenly that function works differently I don't understand the problem. This will only improve performance. Do you propose to keep the slow browsers/webviews because you made a decision based on their performance? **Edit:** I think I understand a bit better now. Chrome (as well as all other browsers) on iOS could not use their own JavaScript engines. They will not be able to do this on iOS8, but they will use the same as mobile Safari, which will make them a lot faster. I don't think anyone made engineering decisions based on a single iOS browser, and even if they did, the change should not hurt them.
Wow that is bad... setTimeout + setInterval calling itself is going to be bad. 
Boy, the easter egg I could leave in our sites/apps on my last day...
If your project is non-commercial or you are willing to pay you can try dhtmlx: Calendar: http://dhtmlx.com/docs/products/dhtmlxCalendar/index.shtml Scheduler: http://dhtmlx.com/docs/products/dhtmlxScheduler/index.shtml
I have finished that CodeCademy JavaScript tutorial, too. It was indeed really good. Now, i am trying to create a game just to practice with that i learnt from that course. I use PhpStorm from JetBrains as my IDE.
I'm a software developer, I am aware of the way beta works, but for me, safari was basically unusable.
&gt; web sockets I thought they removed that
If you are having issues then you can file your feed back, bug reports, etc. back to Apple
It's been a while but last time I tried Titanium it seemed promising on the surface but it quickly became apparently it's really a tool used by psychologists to secretly gauge how much you hate yourself.
For kicks I just added this to a test version of a report to freak out the tester. When he tries to run the report the first time the page says, "I'm sorry. I can't let you do that, PersonsName."
Nice! yh ive heard about titanium. i might give it ago. 
On Windows, it gives you the "default" voice, whatever you have that set to, because he's specifying a voice that's only on Mac. There is one male voice (Google UK Male); the rest are female or indeterminate. I also had issues getting it to run locally unless I set a debugger breakpoint and inspected the speechSynthesis object. All I had to do was hover over it until the inspector tooltip popped up, then continue script execution. If I didn't do that I would get an empty array back from the getVoices() command.
Re: solutions on the horizon: http://javascriptjabber.com/111-jsj-the-ember-js-project-with-erik-bryn/ You might want to give that a listen, or skim the transcript. He talks about how HTMLBars will be simplifying the view layer, which should reduce some lib size, and around 44 minutes in, he talks about what's going on with Ember CLI, which includes using Broccoli to manage Ember's own build, so your production builds only end up pulling in the parts that you use, so you have the benefit of lots of good features available, without the bandwidth liability of the ones you don't need.
i can think of like, 20, evil things to do with this for every good thing.
The one issue I have with datePicker is that there is not an easy way to add content into the date div because the contents are used for functionality. It made adding a price below each day in the datePicker much more difficult. 
lol. thanx java elitist 
Nigga you don't even know the difference between Java and JavaScript. shut the fuck up
My first thought as well....
I know, right? 
Very nice.
Yes, that's very possible. The 'Hysterical' voice I'm using is part of Apple's text-to-speech API, so it's likely not available on Windows. The standard female voice doesn't really give the same effect...
why does that bother you? good luck trying to keep people from learning. I'm sure it'll work out. lel
In pure Javascript, you could try something like the code below. (or see the JSFiddle: http://jsfiddle.net/df2Jb) Your image is made of four polygons that have different colors and opacities (transparency levels). Open up your logo image in a drawing utility that shows you where in the image your mouse cursor is and write down the coordinates of the vertices of each polygon. Call drawPolygon four times in the code below, each time passing in the vertices of one of the polygons. The last argument you pass into drawPolygon is the color. Colors can be represented in many different formats in JS, but a convenient one might be 'rgba', since you will want to have some of the polygons be sort of see-through. The rgba format is: 'rgba(*red value between 0...255, green value between 0...255, blue value between 0...255, alpha value between 0...1*)' There are programs you can use that you can open your logo image in and actually figure out exactly what these numbers should be, or you can just do it with some trial and error. It actually would be possible to write code that analyzes your image and figures out all of this information automatically, but that would take longer than just doing it by hand (although I'm sure that many people have already written such things). Cheers! If you have any more questions, let me know. var makeCanvas, drawPolygon, canvas, context; makeCanvas = function(width, height) { var canvas; canvas = document.createElement('canvas'); canvas.width = width; canvas.height = height; canvas.style.width = width; canvas.style.height = height; return canvas; }; drawPolygon = function(context, vertexArray, fillStyle) { var i; context.fillStyle = fillStyle; context.beginPath(); context.moveTo(vertexArray[0][0], vertexArray[0][1]); for (i = 1; i &lt; vertexArray.length; i += 1) { context.lineTo(vertexArray[i][0], vertexArray[i][1]); } context.closePath(); context.fill(); }; canvas = makeCanvas(300, 300); context = canvas.getContext('2d'); drawPolygon(context, [[10, 10], [20, 200], [250, 100]], 'rgba(200, 150, 100, 0.7)'); // example polygon // you should call drawPolygon four times with different data each time to make your logo document.body.appendChild(canvas); 
Thanks for doing this!
Honestly rolling your own calendar is not that difficult, especially with all of the available date functions. Plus, datepicker is super bloated and ugly. It hardly fits in with any site aesthetically. Spend a few hours and make something simple and clean. If you're going to make the entire thing in javascript, you don't even need to use ajax. You might want to use it if you're planning on creating or getting specific events. I just finished creating a calendar for my workplace using php, js, and ajax, message me if you'd like more specific help.
If we have mispost anything in javascript, please let us know. So we can change it from our end.
 function speak(text, voice) { var s = new SpeechSynthesisUtterance(text); if (voice) s.voice = voice; speechSynthesis.speak(s); } speak('An Englishman, a Scotsman and an Irishman walk into a bar.' + 'The barman said: “Is this some kind of joke?”', speechSynthesis.getVoices()[1]);
I'm 12 and in the school computer lab again.
I wish I had some good use for this, can't think of anything though. Oh, and hi guy with my name, you even have a similar website (as in the same tld I use :D)
 function speak(text, voice) { var s = new SpeechSynthesisUtterance(text); if (voice) s.voice = voice; speechSynthesis.speak(s); } speak('An Englishman, a Scotsman and an Irishman walk into a bar.' + 'The barman said: “Is this some kind of joke?”', speechSynthesis.getVoices()[9]); This sounds pretty hilarious :D
4/10 needs to loop through all voices
It's amazing how W3C so consistently screws up APIs. Why is there a global `speechSynthesis` object? Instead, why isn't `speak` a method of SpeechSynthesisUtterance?
document.querySelectorAll / document.querySelector should be fine
 speechSynthesis.speak(new SpeechSynthesisUtterance("Cash rules everything around me CREAM get the money") )
Will be great when Safari on ios supports this. 
Jquery Mobile adds extra wrapping to some DOM elements that are probably interfering with your selectors.
That's awesome... how do I get rid of it/re-set it?
Thanks! 
Thanks!
You don't use jQuery Mobile... What feature does it have that you think you need it for?
Hmmmm. What do you suggest for swipe events?
[Hammer.js](http://eightmedia.github.io/hammer.js/)
You're the man/woman! Thanks! 
Lots of sites do this, not at all Mozilla specific. I like theirs though :)
I wrote this super efficient piece of code (NOT) for my pet projects I'm currently working on metronome http://andrew-yavtushenko.github.io/metronome/ and simple drum sequencer http://party-hard.herokuapp.com/ I will be very grateful for suggestions and comments
Problem is not posting a link, but contents of it. ### Problems &gt; Accessing global variable in JavaScript, what is global variable where it used. I can't understand what it means, this is just one of a few. I assume that was meant as a question. You need to work on your &gt; variable which defined in top. Why on top? Global variables can be defined anywhere in script: top, bottom, inside a [closure](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures), anywhere. &gt; there is a method call window.variable That's not a "method call", using word "method" implies that there is a function, while in your example you define a number. Or do you mean "called" / "named" when you say "call"? &gt; there is a method call window.variable which will be same as calling the variable inside the function. Whoever will read this will do it to understand global variables, I'm not convinced that this make much sense to them. &gt; document.writeln Just like document.write this is [bad practice](http://stackoverflow.com/a/802943). Instead you should use console.log for output demonstration. ### Suggestions Article doesn't mention in which cases global variables should be used or when they shouldn't, what are problems with using them and what problem global variables solve. Maybe mention something about global variables created inside closure when not using "var". Strict mode? Instead of just rephrasing what already is written in code, you should explain why you do it. &gt; And creating one **function** call **sumValue** which will **return myVariable+arg** value. &gt; **function sumValue**(arg) { **return myVariable+arg**; } You need better/more examples, that will help readers better understand the subject. For example how global variables compares to variables defined using "var".
aeflash's solution will only work for elements that have the style "display: none;" added inline on the element with the style attribute. It won't work for elements that are hidden using a stylesheet with "display: none" set on the element. Edit: Here's an answer that will probably work for you. Warning: it's not performant on pages with more than a few hundred elements. [].forEach.call( document.querySelectorAll('body *'), function(element){ var elementDisplay = element.currentStyle ? element.currentStyle.display : getComputedStyle(element, null).display; if (elementDisplay === 'none') { element.parentNode.removeChild(element); } } ); Edit2: When you call forEach like that it will let you use an array-like object for the first argument. The anonymous function (the second argument) will be called for each element returned by querySelectorAll (the array-like object). Then we try to get the display property (something IE handles differently than other browsers, see: http://stackoverflow.com/a/4866283). If that display property is set to "none" then we remove it. This won't handle elements that are hidden with visibility: hidden or elements with a width or height set to 0. Also, this sounds like a fairly dangerous thing you're trying to do, as script tags have display none by default and you probably don't want to remove those. I think you should probably try to find a different way to accomplish what you're trying to do. What *are* you trying to do?
Or for elements where the `hidden` property is set to `true`.
Or for input [type=hidden]
Good point. I didn't mean to gloss over that fact. Backwards browser compatibility is not a huge priority for Sprinkles.
[Here's a nice codepen demo](http://codepen.io/matt-west/pen/wGzuJ). The thing that stumped me most when I played with it the first time, is that Chrome loads the voices asynchronously. [This demo](http://playground.onereason.eu/2014/04/talkative-javascript/) by Balázs Suhajda is where I first heard about it. It's worth a watch. 
I'm confused. If it is javascript, and you have a hosting provider (offcolor) then why is there a layer of app-store/play-store in the distribution chain?!? FYI, went to the play store: This app is incompatible with all of your devices. 
You're welcome! P.S. I see that on Imgur, some people aren't understanding why you don't just include the image itself in your webpage. I don't know the motivation behind your decision, but one advantage of doing it your way is that this is a simple way to avoid needing to have a separate file for the image. Building the image might take more time than just loading it (I don't really know which would tend to be faster — does anyone else know?), but both are so quick that it doesn't really matter. One should, though, be careful about cross-browser issues — not all browsers support the Canvas element, although all modern ones do. If you absolutely must have this work on virtually every browser, I think you should use a separate image.
Just a suggestion If you're intruducing someone to a new concept (which is weird, I'm brand new to coding and this was like chapters 2 and 3 of ANSI Common Lisp), don't say something is easy. When you say to someone "don't worry, this is easy", it only means that if they don't get it they are stupid. Which will be bad if someone is like a front end web developer, adn they feel intimidated by computer science, telling them this is easy is a bad thing because to them it isn't for whatever reason.
&gt; which will make them [Chrome in iOS8] a lot faster I have not seen any tests to confirm this. Google's JS engineers are very talented; I find they add many optimizations every year. Sure Apple might know their own chip better, but I suspect Google spends more man-hours on v8, since that is also used in Node... Either way, I'd prefer each browser keep their own engines.
Watching the vid, seems he is not crazy about ES6; wants an "ES6 minus" that is more reduced.
One man's most useful feature is anothers' bloat :) Probably everyone on the committee could suggest features for removal (I'd say comprehensions, bin/oct literals, tail calls, and tagged template strings are not super-high value).
I used FullCalendar and thought it was quite easy to use and customize. I thought the documentation was pretty good and there's a decent amount of answers about it on StackOverflow. Good Luck.
It works fine if I copy and paste into the console, but if I put it in an html file and load it up from a domain, it doesn't seem to work. I wonder why?
If you want to get *all* of the elements that are not visible onscreen, I've found that by far the most efficient and complete solution is by using nodeIterator: function removeHiddenNodes(root) { var nodeIterator, node, hiddenNodes = [], i = 0; nodeIterator = document.createNodeIterator(root, NodeFilter.SHOW_ELEMENT, function(node) { var nodeName = node.nodeName.toLowerCase(); if (nodeName === "script" || nodeName === "style" || nodeName === "noscript") { return NodeFilter.FILTER_REJECT; } if (node.offsetParent === void 0) { return NodeFilter.FILTER_ACCEPT; } var computedStyle = window.getComputedStyle(node, null); if (computedStyle.getPropertyValue("visibility") === "hidden" || computedStyle.getPropertyValue("display") === "none") { return NodeFilter.FILTER_ACCEPT; } }); while ((node = nodeIterator.nextNode()) &amp;&amp; ++i) { if (node.parentNode instanceof HTMLElement) { node.parentNode.removeChild(node); } } console.log("%s nodes removed", i); } removeHiddenNodes(document.body); 
Use the text, "I don't even know, dude." with the Japanese voice. Surprisingly musical.
If you haven't figured Google out yet, which is apparent from this carbon copy of a thousand other posts in here, then you should probably start there.
Override console.log: (function(){ if(window.console &amp;&amp; console.log){ var old = console.log; console.log = function(){ var s = new SpeechSynthesisUtterance(arguments[0]); speechSynthesis.speak(s); old.apply(this, arguments) } } })();
The best way to learn how software works is to crack open the source. Angualar has a heavy emphasis on inheritance and DI which are good topics to be familiar with.
&gt;EDIT: Oops I just noticed this thread is 4 months old. Yeah, I came here from Google too :) PS. Hello, from a week in the future.
It does already.
Bro, do you even read?
IOS 7 and up supports this already, as does android 4.2 and up
Exo! I haven't seen that font in the wild yet. Are you using Exo or Exo 2?
There are a couple good solutions already here, so I won't add one, but I'd also ask yourself why you're in a situation that would require you to traverse the entire dom for these elements. There are very few use-cases where you should be doing this (browser developer toolbar, etc) and not have something in place that would be keeping track of the state of your UI elements.
Thank you! This was definitely the hardest thing I have ever done, and I nearly gave up entirely on more than 5 occasions. A little break from building it, and a lot of encouragement from my family and friends would give me enough motivation to continue. It also really helped that the more time I invested the more idiotic I felt when considering abandoning the project. It's really hard to walk away from something you sunk so much time into. Even if I had abandoned it, I had already achieved exactly what I wanted, which was to become a capable Javascript programmer with some database skills. Anything beyond that is just a bonus!
I don't really know much about mobile development. Is it common for apps to be built this way (webview with JavaScript/HTML)?
Yah, I see it now, trigger.io, depending on the resources needed sl4a is pretty trivial integration w/javascript too (and not a paid service). It just never occurred to me to pay someone to let me access my phone (and probably grant them all kinds of access in the process).
If your question is asking why I chose to distribute it as a packaged app through the App Store and Play Store as opposed to just letting anyone with a browser run it then the answer is pretty simple. * I needed the ability to send push notifications to the device * I potentially needed the ability to pull from the player's contact list to invite their friends (this isn't being done now but it has been requested multiple times) * I needed control over the whole screen and the browser's capabilities. For example, I didn't want players to be able to swipe from the right of their screen to go to the next tab in their browser. * I needed the ability to include In-App Purchases and like it or not people are much more comfortable spending money through their devices app store. * I needed to make sure I had access to native device events, like the app being minimized, paused, resumed, etc. * And lastly, I *wanted* what the app stores provide in terms of app reviews and audience reach. Unfortunately, most people wouldn't consider playing an app like this straight from a URL. They expect a nicely packaged app that they can find in their app store. Hopefully this starts changing as time goes on because it is very frustrating needing to wait 4+ days for each of my updates to hit the App Store Hopefully this answered your question! 
Haha I love it.
From javascript? Sweet!
This looks awesome! I've actually been playing around with a browser version of cards against humanity in order to learn node.js and mongodb - it's teaching me loads but I'm beginning to appreciate the size and complexity of the venture. As you posted in another comment, I'll be happy with the education even if it doesn't see the light of day. Great looking UI too! 
I think he is just an idiot that picked out some words in your post and decided he didn't like them.
You will literally not learn anything about javascript using jQuery and AngularJS. * Start with familiarizing yourself with typing in javascript * Learn about native methods of the various prototypes. e.g. Object.prototype.valueOf, Array.prototype.map, etc. * Then move on to understanding how scope and scope resolution works in javascript. * Then you can learn about prototypes and object property resolution. Be wary of any articles talking about "classes" in javascript. There are no such things as Classes in javsacript, it's not a Classical language. It's a prototypal language; know the difference. * Learn about first-class functions (or lambda) and how/when these can and should be used. * Finally, Roll your own simple MV*, DOM Traversal/Manipulation/Hanlding, templating, events, async handling, common utils, and write a few very simple apps using only these. Then, jQuery and AngularJS will start to look much less magic. FYI: Dependency Injection is stupidly simple to implement in JS. Best of luck! EDIT: I almost forgot: READ THE SPEC!
lol, you seem exceptionally clueless about computers.
Yes it was a username box. There should have been placeholder text showing that. Do you mind me asking your phone type and OS version?
Definitely stick with it! It ended up taking much longer than I thought but I learned way more than I thought I would. And thanks for the kind words!
Oh that's pretty cool. I guess the problem for me is I needed something that worked on both iOS and Android so that wouldn't have helped much.
thx, i dunno about apple (feels like im working for them everytime i touch one) but you might be able to bootstrap sl4a for android for that in the future, or adk(native but much steeper curve)
What is the reason you need to do this? The method of how to best accomplish this depends a lot of what is going on. Are you simply trying to do a one-time processing of some static html/css documents or is this something that needs to happen periodically due to elements dynamically changing whether they're visible or not? If so you should just keep track of those elements when their state changes and delete them whenever needed afterwards. Otherwise you can use nodeIterator method jeaton posted. Also, what types of "hidden" elements do you mean? `display: none`, `visibility: hidden`, `opacity: 0`, positioning techniques, `overflow: hidden` tricks and z-index configurations and various other methods can "hide" something.
Android 4.3, Galaxy S4. My 10 minute tour of the game was very positive. Well done. I'll come back to it and play it for sure. 
Congrats! I'm just starting on the learning JS track. I'm an English teacher now, but I aspire to switch careers to web dev. What resources do you recommend for learning goodies like database administration, load balancing etc.?
If you're using $, just do $(':hidden')
What's your feelings about pandajs? I've always been interested in HTML5 game dev and have looked at phaser.io, pandajs etc. but I've never really had time to take the plunge. Is there anything you've made that you don't mind sharing?
Yeah, you're probably right. Unfortunately, the last time I attempted a ray caster was over 10 years ago. Back then, the tutorials were limited, and I didn't know enough math to understand the concepts. I'm sure if I went back now, it'd make a lot more sense. Problem is, my motivations for coding outside of work don't really align with game development.
Is that jquery? can't use that if so, thanks though.
This is a one time process that happens for each web page that is viewed. I am stripping a copy of the dom down to mainly just text to be scanned for keep words when sent to a server. Thanks though this is all useful information for me. edit: I'm looking for elements that are type="hidden".
Idk about browser developer toolbar. I guess it could be described as a browser toolbar but on an android. Thanks for the input, all useful stuff to help me learn for future projects.
cute &lt;3
I have no programming background whatsoever but have always been a very curious person, willing to try and learn just about anything. I taught myself how to repair my own car, build computers, build speakers, etc. Programming just seemed like the obvious next step. I am probably not the best person to be giving advice about this. I tend to get very obsessed about whatever it is I'm trying to do, and am pretty comfortable diving in way over my head but *knowing* I will eventually figure it out. I did this basically every step of the way. When I started last June, I knew I wanted to be able to build a large app or website that could support many simultaneous users. Because I knew in general what I wanted (and because I am pretty impatient about waiting once I know what I want) I just started Googling and searching StackOverflow for things that I wasn't even close to being able to grasp like: * Scaling MongoDB * Scaling NodeJS * Load balancing Mind you, I didn't even know how to set up MongoDB or Node on a server at the time. I was just getting right to the meat of it to see of other people were pushing them to the limit that I would want/need. Honestly it was probably really stupid. Within a few weeks, I conceptually knew how to load balance 20 Node app servers, all talking to the same Redis or MongoDB instance, *without* learning any Javascript. Once I realized Node, MongoDB, and Redis could basically scale like I wanted, I figured it was time to learn how to write some code and actually set these things up. I did the expected Google search of "best way to learn Javascript" and made it about a day through the Codecademy Javascript course. It just seemed like it would take forever to learn what I needed to know, so I ditched that and just came up with a small project that incorporated Node and MongoDB. If I have any advice it would be to do that. Come up with something that is interesting to you, and will actually make you want to contribute code to it everyday. For me, it was a long-running script that listened to Twitter for any tweets that contained a hashtag of my choosing, and then stored the tweets into MongoDB. This taught me all of the basics, and made me feel really proud to have set up my first database that I could query and do cool things with. The next thing that I checked out which I honestly think is one of the greatest ways to learn, is [CodeWars.com](http://codewars.com). I heard about Code Wars in this subreddit I believe, and it forced me to learn some really important things about Javascript. This site really worked for me because you are solving fun problems that require you to think out of the box. There is no shame in going to StackOverflow to figure out how to complete a CodeWars problem. I always tried to check into that site for at least 20 minutes a day and it would often turn into 2 to 3 hours because I was just so into solving these problems. I highly recommend it. I just realized how long I have been rambling so I will stop, but at the end of the day what worked for me was jumping head first into things, and this might not make the most sense for you or others. The code I was writing for Off Color in January, February, and March is embarrassing and that probably could have been avoided if I followed a more traditional path, but I will probably feel like that about my current code in a few months so I think it is just about doing what makes the most sense for your personality. 
http://en.m.wikipedia.org/wiki/Non-breaking_space
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Non-breaking space**](https://en.wikipedia.org/wiki/Non-breaking%20space): [](#sfw) --- &gt;In [word processing](https://en.wikipedia.org/wiki/Word_processing) and [digital typesetting](https://en.wikipedia.org/wiki/Digital_typesetting), a __non-breaking space__, also known as a __no-break space__ or __non-breakable space__ (__NBSP__), is a variant of the [space character](https://en.wikipedia.org/wiki/Space_character) that prevents an automatic line break ([line wrap](https://en.wikipedia.org/wiki/Line_wrap)) at its position. In certain formats (such as [HTML](https://en.wikipedia.org/wiki/HTML)), it also prevents the “collapsing” of multiple consecutive [whitespace characters](https://en.wikipedia.org/wiki/Whitespace_(computer_science\)) into a single space. The non-breaking space is also known as a __[hard space](https://en.wikipedia.org/wiki/Hard_space)__ or __fixed space__. In Unicode, it is encoded as U+00A0 no-break space (HTML: &amp;#160; &amp;nbsp;). &gt; --- ^Interesting: [^Zero-width ^no-break ^space](https://en.wikipedia.org/wiki/Zero-width_no-break_space) ^| [^Space ^\(punctuation)](https://en.wikipedia.org/wiki/Space_\(punctuation\)) ^| [^Punctuation](https://en.wikipedia.org/wiki/Punctuation) ^| [^Hyphen](https://en.wikipedia.org/wiki/Hyphen) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+chzmcsa) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+chzmcsa)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Thanks danceoval! I just wrote a long response to a similar question that you can check out, but I definitely recommend searching those exact things on StackOverflow and just trying to absorb as much as you can. I would pick a specific topic when searching: * Load balancing Node * Scaling Node * Scaling MongoDB Do that even if you aren't sure you will use that specific database or webserver, just so you can read responses from people that are actual using them in the wild. I have read each StackOverflow post about scaling Websockets with Redis probably 5 times. And definitely check out CodeWars.com everyday or whenever you can. It taught me some very important Javascript techniques faster than anything else. 
This is a misconception. I generally fully agree with you, I also think browsers should keep their own engines. The problem is, Chrome on iOS does not use v8, it uses the mentioned UIWebView, which comes with Apple's engine. This engine is very slow, but the UIWebView will get the same engine (Nitro?) mobile Safari uses with iOS8.
DOM events and [event delegation](http://www.nczonline.net/blog/2009/06/30/event-delegation-in-javascript/). jQuery's on does a good enough job, but learning the concepts can be a great boon.
The native JS APIs have come up to speed in a large way; you'd be missing out if you didn't look at them. They in no way preclude your use of JQ/Angular; in fact, I would be very interested in integrating them into angular to make them more easily integrated (pm me if you're into it). In particular, I'm a big fan of the Web Audio API. It gives you excellent and simple interaction with HTML5 audio and video elements, letting you capture a media stream with a simple new AudioContext().getMediaElementStream(el) invocation. Some of the others I've come across: WebRTC * Some say it's dead, others say it's just coming too. WebRTC brokers a 'secure' P2P connection, allowing fast audio/video streams to be shared without involving the server (after the connection is brokered). Excitingly, getUserMedia returns a stream that can also be plugged into the Web Audio API. Speech-to-Text * This allows you to plug in a recognition engine (Google's got one, of course) and see transcriptions (with confidence levels) in real-time. It's like pocketSphinx, without munching on your memory. * A similar (but unrelated) API is Wit.AI (YC14). Worth a peek. In terms of technology gaps, none of these really preclude JQ or Angular. If you're looking for other exclusive frameworks, you can look at famo.us. Their widgets are beautiful replacements for the JQ strongholds, and the library recently became available. Other up-and-comings: phantom.js react.js
Angular is written in angular. Going through that code will help you learn instantiation patters and understand JS at its core.
Quill needs a tag system in general. It'd be nicer to have it output the tags of headers and li instead of p tags with ids with their line number. I didn't really find that useful when I started saving the data, but quill needed it when I had to edit it. 
Ionic is pretty great but I am not a big fan of Angular. Also, Trigger.io accounts for maybe 2% of my mobile code. I just use it for basic calls to native API's on the device. All of the actual app code is just my vanilla javascript.
You can plug in the cli s that your favourite concatenation or minification plugins provide in make without having to download and add a separate grunt contrib wrapper for it as a dependency. I honestly prefer make. It time tested and does everything I would want it to do without adding more and more build dependencies. But that's just my opinion. :)
I see a lot of large bodied comments in here-- I'll keep mine to one tip which may help you if you come across this problem! Learn how the "this" scope works-- jQuery likes to alter the scope conveniently. Take the following HTML: &lt;button id="0"&gt;0&lt;/button&gt; &lt;button id="1"&gt;1&lt;/button&gt; &lt;button id="2"&gt;2&lt;/button&gt; &lt;button id="3"&gt;3&lt;/button&gt; Now let's say we want each button to tell us the index of which button it is within the page, and we also want it to tell us its id-- we expect to see the same result for each one. jQuery: $('button').each(function (i) { $(this).click(function() { alert(i + ':' + this.id); }); }); Success... 0:0, 1:1, 2:2, 3:3 Now coming from a jQuery purist, I'd expect their vanilla JS equivalent to look like this: var buttons = document.getElementsByTagName('button'); for (var i = 0, l = buttons.length; i &lt; l; i++) { buttons[i].addEventListener('click', function() { alert(i + ':' + this.id); }); } But this will give a different result... 4:0, 4:1, 4:2, 4:3 Typically, the best practice is not to include functions within loops. Alternatively, the function can be wrapped in its own scope, preserving 'i', like so: (function(_i) { return function() { alert(_i + ':' + this.id); } })(i) Edit: changed querySelectorAll to getElementsByTagName. on another note-- my comment ended up being a bit large -__- One last thing-- I noted the "this" scope but my example is referring to scopes in general.
My gruntfile does the following thing (in order) for production: - jshint - minimize images - compile jsx - compile sprites - sass - compiles requirejs - hash the files, generate hashmap - minimize css, uglify js Compiling JSX and RequireJS requires node + npm packages. At this point, I'd rather put everything in grunt so that the next dev could simply ``npm install`` and have most of the dependencies required. If I were using ``make``, it would be calling node packages anyway. The only thing I'd save is that I wouldn't need grunt packages for copying and renaming files. We actually started with Make, but as the project complexity grew, we decided to move to grunt instead. 
As porphyry3 said, you just need to add some nonbreaking whitespace yourself. &lt;script&gt; // &lt;![CDATA[ document.write('&amp;nbsp;' + (new Date().getFullYear() - 1998) + '&amp;nbsp;'); // ]]&gt; &lt;/script&gt;
To each his own I guess. For the build process you have outlined, I would actually end up using make. I guess it's just a preference/convenience thing. 
Hmm. Best answer and most downvoted. Weird
the first rule of tautology club is the first rule of tautology club.
go figure. :/
Thankyou, this worked perfectly. I was trying similar, but had forgotten to add the + so it was just giving me weird errors. It's all good now. Cheers!
You say that, but I'm serious, you have to be able to locate information as a developer. Now, if the purpose of this thread was actually to introduce yourself and express you excitement about programming, then that is awesome and even the grumpy among us are pleased for you. Just lots of people bored of seeing this exact post come up almost every week. Learn some principles, watch seminars on YouTube, don't forget you are using a real language and neglect the foundation knowledge.
[Object.prototype](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype) [Function.call](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call)/[Function.apply](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)
It's standardized and supported in every browser. https://developer.mozilla.org/en/docs/WebSockets
I really like working with pandajs. I had used phaser and came unstuck when it came to publishing a game on the various stores. (But this was due to my code and the structure of my code as i would use ludei to compile). Take the plunge! there are some many tools out there now that are making the process of game dev to publishing it easy. I have made a game and published it on the playstore. https://play.google.com/store/apps/details?id=com.christoffee.christoffeesquares 
Code updated now.
It's the build step in development that seems problematic with using browserify. I don't want an extra delay between saving a file and running the app again, using that saved file. The build step in going to production is something that I'll need to put up with. At the moment in my jsgui library/framework I'm using Require and AMD. It's had a few problems along the way, the main one being due to incorporating circular references. When I had a whole bunch of related components in one file before, they could refer to each other as they were in the same closure. I'm expecting to do more work on the build system to get it compressing as well as I'd like. For the moment I plan on continuing to use AMD, but will be thinking about how a better system could work, and how to automatically adapt the code I have with AMD wrappings to other methods of delivery.
It's called CSS. Look for the .skills_widget class in http://theme.crumina.net/second/wp-content/themes/secondtouch/assets/css/app.css
I didn't know about pandajs, i will also give it a try. thanks for that :)
Have you profiled this? You are wasting a ton of power on all those (nested!) .forEach() function loops, and generate a pile of GC work by allocating so many temporary (dynamic!) objects. For brute calculations you want plain for-i loops and zero object allocations (or constructor based if you must).
This seems pretty slick for someone's first app! It'd be cool if I could add/invite my fb friends.
Write games without libraries, just plain JS and HTML5 features. This will lead you to all the good stuff.
It's not open source, is it?
 [].forEach.call( document.querySelectorAll('body *'), function(element){ if (elem.offsetWidth &lt;= 0 &amp;&amp; elem.offsetHeight &lt;= 0) { element.parentNode.removeChild(element); } } ); *The HTMLElement.offsetWidth read-only property returns the layout width of an element.*