Furthermore, recent versions of jQuery are [customizable](http://projects.jga.me/jquery-builder/) and you can exclude the parts you don't want. If you need IE6 support, you can get the size down to 26.11 kB with just the core and Ajax modules, or if IE9+ is sufficient you can shrink it to 17.49 kB. Of course this means that you can no longer use a CDN, unless there is one out there that offers every permutation as separate files (which I'm not aware of.) But if you're so concerned about size, you can host it yourself. 
I don't recommend to do that. The power of jQuery is also that almost everybody has it in their cache. This way it doesn't cause any more load. Having a specific build ruins that, because they aren't hosted on a CDN, and will cause a slower website, even when your measurement (Chrome dev tools / Webpagetest / etc. ) says otherwise. This is because services like webpagetest don't take in account that jQuery is cached by most users. It's still a great tool by the way! Didn't know such a tool existed for jQuery.
I suppose, it just seems a little bit misleading is all. 
The very important reason to hook event handlers in js instead of html directly was to avoid creating global functions. So - while using &lt;a onclick=...&gt; is the most natural way (for the reason already explained in other comments) - it has a downside of relying on global namespace which means potential name conflicts and different modules overriding their functionalities. AngularJS solves this problem by introducing $scope.
Two way data binding for one!
The way React came to be was not from someone trying to write a new framework but by many people over time trying to solve problems we had at Facebook. Back in the early days, code was written in PHP like this echo '&lt;div&gt;' . $username . '&lt;/div&gt;' The problem with this approach is that you are vulnerable to injections. If your variable contains '&lt;script&gt;bad_stuff()&lt;/script&gt;' then an attacker can take over the account of the victim. The usual solution is to litter your code with escape() but it doesn't scale. If you forget one your are vulnerable. You cannot escape something twice or it'll show text entities instead of html. The solution we came to use was to add a language construct to let you write echo &lt;div&gt;{$username}&lt;/div&gt; Everything is typed either with being a node or a string, which is escaped. So we can no longer generate markup from user strings. The migration was relatively easy because the code looked very similar to what existed before but it dropped the number XSS to basically 0. Then, as the codebase grew in size and number of engineers working on it, the UI code became quite a mess. The idea of making custom tags was thrown around and it turned out to be a very good way to build an app. Most of our PHP codebase is using XHP but now more and more Javascript is being written. But it was mostly jQuery like and was a nightmare to work with. The idea was to port XHP in the client. The problem that arises is how do you deal with updates. Since we wanted to reuse the same way of coding, we started by re-rendering the entire view on each update. Problem, if you do that, you completely override the text input. To fix that, the diff algorithm came to be. It would just update what changed on the DOM. At this point there were still big performance issues. Several fixes were necessary. All the updates are batched together, an update on one component only dirties its sub-tree and not the entire app, it is possible to short circuit a branch if you can assert that nothing changed ... We also needed to be able to integrate with legacy code, so we introduced life cycle events to provide you with a way to bridge from the declarative mode to the imperative one. One goal was also to improve the debugging experience which was pretty terrible before. So we introduced props (immutable objects passed from the parent) vs state (objects private to the component) distinction, propTypes to declare the interface of the component and worked really hard on adding clear error messages and helpful warnings. In the end, it turned out to be really different from all the other ways to write front-end code.
You might find this site helpful: http://microjs.com/#
Very true, provided you are a fan of github and have an account, which I am and do. But there are quite a few people who are not and don't, and they may still want to contribute to the angular documentation. So that's one barrier that cuts out a potentially useful segment of the community. There is also the fact that a pull request is a gated checkin and it has to be vetted by the folks at the project before it's committed. As of this post, there are more than 350 open pull requests on angular.js, several of which are more than a year old. That's a lot for the team to go through, a lot of discussion, all so you can fix a typo to the documentation. A better approach would be a live community edit (i.e. wiki) with after-the-fact or even community-driven validation. It would cut down a lot of pull request cruft, and my quick glance through the pull requests implies there are quite a few that are just documentation fixes. 
I feel a lot of people repeat the mantra that HTML is the data document and describes the content, the CSS is the presentation of that document, and the javascript is meant to handle all functionality -- including linking the application with the document. I think that's a load of shit. HTML is one of the three pieces of the view. The second piece is the CSS which, together with HTML, makes up the presentation layer. The third portion is the means by which the presentation layer interacts with the application interface. Angular makes the linking between the presentation layer and the application super easy. You never have to worry about that shit anymore. That, I think, is a huge benefit of angular.
I don't know why you're being down voted, you aren't wrong. Unless of course you want to test that it's binding the event to the actual DOM element, in which case Angular would also need DOM.
http://youmightnotneedjquery.com/#post
Don't make functions in a loop. Do it like this: function doPost (c) { $.post(someURL, {data:collection[c]}, function (data) { //do something } } for(var c in collection) { doPost(c); }
There is plenty of room for new JS technology, but the problems remaining to be solved are actually quite difficult. I don't think you should invest time in creating a new framework with the bullet points you mentioned. Those bullets are the goals of every other system out there, so if existing systems aren't to your liking it probably means there is essential complexity that was discovered after trying it on real workloads. Most of your bullet points involve the words "simple" or "small" -- any new technology will start out "much-lighter-weight" until it gets "bloated" with features needed to solve actual problems. Instead, rather than repackaging existing ideas, either come up with a novel approach (which is what I believe we did with React) or attack a different part of the stack. CSS layout in particular is a huge opportunity: if you can come up with a highly performant way that makes laying out user interfaces easier (ala grid stylesheets) the world will love you.
What does [4, 10, 7].sort() evaluate to? EDIT: it was [4, 10, 7].sort() === ?
Could you explain this?
JS sorts an array in lexicographical order. In this case, numbers are converted to strings ('10' &lt; '7')
depends on what you're interviewing for. For a UI position, I usually make them do a tabbed content area using html/css/javascript(jquery). I am looking for clean, well written markup and javascript. Most people fuck this one up suprisingly.
i would like the api to be something like `app.start()` and everything else is done for me.
I like this one: Define such a, that expression (a == 0) &amp;&amp; (a == 1) &amp;&amp; (a == 2) .. would resolve to true.
((0.1 + 0.2) === 0.3) === ?
This is a real life example I had to solve at my job recently: For a list of widgets, make a function that reduce it to a list of rows of widgets. The idea is to make a simple data model that reflects responsive Bootstrap grid based HTML (the rows are div.row elements, and the widgets are div.panel elements). Every widget has the width property with one of these values: 1, 0.75, 0.66, 0.5, 0.33, 0.25. For example: var widgets = [{ width: 1 }, { width: 1 }, { width: 0.5 }, { width: 0.5 }];
&gt; You can even achieve that with plain old JavaScript code Of course you can achieve that in normal js, because angular is normal js. so is jquery for that matter.
Nothing (that can make that expression evaluate to true). :-)
Yes and in doing so it becomes more like the angular way, and not the jquery way. That was the point of the whole question. OP is wondering why the direct DOM manipulation by jQuery is a bad thing.
a good point :)
the code is pure shit. as is most things in life. i've seen them store shit in data attributes, use ids for everything. div after div after div. no semantic html. jquery that hardcodes IDs inside its implemenetation.
You missed the whole point of the OP's question then...
Here's a few tricky ones I ask when I look for subcontrators. These are meant to rule out people that don't fully understand functions, closures and scope: // Write `add` function add(1, 2) //=&gt; 3 add(1)(2) //=&gt; 3 // Write `fold` function using recursion fold(add, 0, [1,2,3]) //=&gt; 6 // Write `map` function using `fold` map(add(1), [1,2,3]) //=&gt; [2,3,4] // Fix it for (var i=0; i&lt;10; i++) { setTimeout(function() { console.log(i) }, i * 1000) } **EDIT:** Since valid solutions have been posted already, here's my own: function add(x, y) { if (arguments.length &lt; 2) { return function(y){return x + y} } return x + y } function fold(f, acc, xs) { if (!xs.length) return acc return fold(f, f(acc, xs[0]), xs.slice(1)) } function map(f, xs) { return fold(function(acc, x) { return acc.concat([f(x)])}, [], xs) }
sounds like something that could be converted to json and stored in mongodb.
The most important question: which browsers do you want to support?
Yes, I found it a bit confusing.
Udemy does not load any pages for me.
all these subreddits really need syntax highlighting. what does show_contact_modal do in this? Is it always feasible to maintain the Separation of Concern? I also get tired of how jquery functions are written, but don't know anything cleaner that would give me similar benefits.
Pressure
I suggest you to open your browser in incognito mode(Chrome), Private Window Mode(Firefox). It may be due to cache problem
Before, you wrote a logic layer which tweaked a tree of graphical elements. Now, you write a view layer which tweaks a tree of logical elements. This is how it should have been done from the very beginning of dynamic html, but people choosed the DOM-way instead. And web dev was condemned to be seriously annoying. For example, every time you needed to changed a value in your application model, you had to enumerate and write a bit of code for every graphical gadget which needed to be updated because of the change. Similarly, if you wrote a "hello world feature" in your application A, you couldn't simply copy/paste the javascript in your application B because it contained binding code to various buttons, anchors or whatever from application A. In other words, the two sides of your application was coupled in the wrong way: the business logic layer depended on the view layer. A successful web app has its UI completly re-designed several times in its life. But, because of the initial wrongness, you couldn't change/replace the view layer without fully breaking the application logic. By using Angular or another MVVM framework (I personnaly use Knockout JS), you have inverted back the dependency relationship. Now the model layer is view-agnostic. You can completely revamp your UI without changing what's really matters from a dev point of view, that is the (client-side) business code, your precious javascript. 
Good article, AFAICT. One small thing: s/intensive purposes/intents and purposes/ *edit: k*
For the record: if someone would ask me to write `fold` in JavaScript, that'd be a good argument for not wanting to work there (since I'd assume that people use only the term `reduce` when they are in JS-mode).
Jesus, I came here to help, but you need ie &amp;lt;10?? USE JQUERY!! That's the only reason I use it.
Without a magic global: var a = { toString: function() { return String(this.n = (this.n !== undefined &amp;&amp; this.n + 1) || 0); } }; (a==0)&amp;&amp;(a==1)&amp;&amp;(a==2) // true Might also work with `valueOf`, didn't try. *EDIT:* /u/vuknje tried, works as well and is shorter. Or, with even less magic: var a = { currentValue: 0, toString: function() { return String(this.currentValue++); } }; (a==0)&amp;&amp;(a==1)&amp;&amp;(a==2) // true
Depending on what you are working on, this is more of a movie trivia kind of question and less actually testing experience/skills.
Are you the guy playing in the video? Nevertheless, I'm in awe...
Textbook questions don't necessarily indicate that someone is a good problem solver. You want to lead with something more open ended. Give them a scenario. Pay attention to the clarifying questions that they ask. Closures are an important concept, are they using a module pattern to architect their solution? Ask yourself what kinds of knowledge and characteristics will be important in their day-to-day duties. 
What?! This entire thread is in the context of the original question. So, your comment and the one you replied to that was being downvoted are completely irrelevant to the conversation. That is why the other guy was being downvoted... 
You can bind the click handler directly. &lt;a onclick="controller.show_contact_modal()"&gt;text&lt;/a&gt; 
But your comment was: I don't know why you are being downvoted. That is why he was being downvoted. He was offtopic. While it is ok to stray from the subject sometimes, your comment ignores the main reason comments should be downvoted... relevance to OP's question.
It was correcting your original comment
I'm confused: so is it possible to do the 'single export' where your module exports just a single function or not? Like in commonJS: module.exports = function() { }; (and what is the ES6 name for this? TypeScript calls it 'single export')
Default export so export default function 
How was my original comment wrong? Writing the jquery code like the angular code is still the "Angular way". Targeting the dom element from script is the widely-accepted "jQuery way". The guy that replied to me was offtopic because OP's question is about the patterns.
Was only meant as "beware that this exact question could be a red flag for a candidate". Interviews go both ways. :)
I think a lot of the push against changes to the module system is because the spec is pretty much stable except for modules and the window for substantive design feedback was closed like... 2 months ago. There are reasons why deferring modules is bad, though I'm not sure I understand them fully. Since ES7 could follow in as little as a year I don't think it would be bad to wait.
 on that note the other thing you can’t do is // bad function foo(){} export foo why?
no, the major issue is that es6 modules were pretty fine before the removal of `module/from`. the only reason it was removed is because "it was confusing". they should've spent some time actually correcting all the incorrect blog posts vs. just removing it as it basically eliminates how many people currently use modules, ex. most node libs, underscore, etc. now, es6 modules are also probably going to be delayed.
Because you need a declaration statement there not an identifier, why that destination is made is an open question... 
why can't underscore `export default _`?
For the record I've been bitching about modules way before it was cool, but the issue was that some node modules work the way that was removed and some have single exports and they need to be imported differently 
You should be using export default with every module anyway. But actually underscore is fine because you just want the main function because everything else is attached to it
Thank you.
They could but then you couldn't do import {map} from underscore *edit hit submit too early 
This should be reformulated as it is an absurdly specific bit of trivia (it just happens to be the most common one on the internet about JS floating points, but that's irrelevant). I could just as easily ask "Which of these evaluates to true?" (0.3 + 0.5) === 0.8 (0.3 + 0.6) === 0.9 but I wouldn't expect ___anyone___ to know that. I would, however, expect any competent dev to be able to explain the behavior.
If you should always export default, why is module/from needed?
You basically reiterated my point. So thank you I guess?
Afraid not. The PNG files are generated that way (from a proprietary application).
You should always export default because they took out module from
I know you can evaluate the function in the call to fold, but I would put it on its own line, just to make it explicit: var next = fn(first, arr_[0]); return fold(fn, next, arr_); I think that is a little easier to read.
Interesting. So, couldn't you use this to create a polyfill for Object.observe?
Well, child_process.spawn &amp; child_process.exec don't have a sync version, but I just found out they'll be added in 0.12. http://vimeo.com/82734921#t=8m23s 
You're welcome! :)
Interview question I normally ask: for(var i=1; i&lt;=10; i++) { setTimeout(function() { console.log(i); }, 1000); } What is the output of the above code. Correct answer is that '11' is printed 10 times. I ask the reason why (by the time anonymous function inside setTimeout executes after 1sec, `for` loop would have finished and final value of `i` would be 11. Second part of the question is: How can I output the series 1 to 10 instead of outputting 11 10times? I would like to keep a for loop and the setTimeout should be there for async operation. Also keeping for loop inside setTimeout is not acceptable. Clue: closures
EcmaScript 6 aka the next version of JavaScript 
Look at the async library. I had this problem. I wanted to write file #1 before writing file #2. I would assume your same requirement applies. Look specifically at `async.waterfall` it allows you to pass results from callback #1 to callback #2 etc. https://github.com/caolan/async#waterfall
Soooo basically anyone who's read [JavaScript Garden](http://bonsaiden.github.io/JavaScript-Garden/#function.closures) the night before should be fine :3 Classic. for(var i = 0; i &lt; 10; i++) { setTimeout(console.log.bind(console, i), 1000); }
So just remember to pass it a callback var A = [4, 10, 7].sort(asc).reverse(); var B = [4, 10, 7].sort(desc); JSON.stringify(A) === JSON.stringify(B) function asc(a, b) { return b - a } function desc(a, b) { return a - b } 
Sorry I'm going to start my iterator at 0. for (var i = 0; i &lt; 10; i++) { delayedLog(i, i*1000); } function delayedLog(msg, delay) { setTimeout(function() { console.log(msg); }, delay); }
&gt;jumbled mess of numbers. those numbers are what you need to parse. Here I made a function that finds where the zTXt (or any other) chunk begins in a PNG byte array /** * Finds the address of a string in a PNG byte array * @param {string} chunk name of the chunk string eg: 'tEXt', 'zTXt' * @param {array} bytearray [PNG bytearray] */ function findPNGChunk (chunk, bytearray) { var found = false; var address = 0; for(byte in bytearray){ byte = parseInt(byte) if(String.fromCharCode(bytes[byte]) === chunk[0]) { found = true; address = byte; for(var i = 0; i &lt; chunk.length; i++) { if(String.fromCharCode(bytes[byte+i]) !== chunk[i]) { found = false; } } } if(found) { console.log('Found ', chunk, ' at ', address); break; } } } That should get you started. But it'd probably be easier if you just process the image on the backend where you can use something like imagemagick 
###I'm lame but I'd ask ---- ##When is it appropriate to `'use strict'`? ---- ##How do you clone an object? ---- ##What are some common global (non language) objects? ---- ##How do you write a closure? ---- ##How do you write a promise chain?
It seems that having to adopt such a strategy (exporting individual submodules and having the main 'namespace' module as the default export) can only result in brittle modules. Module exporters would have to follow the conventions, and many may just take the easy way out and have a single default export (more or less using es6 modules as a glorified form of commonjs).
What's the issue with ids for everything?
It might be just a different mindset. For me someone who remembers minute details about how floating point operations work (without working on projects that actually require this knowledge) is suspicious. I worked with enough people who were side-tracked by that noise. If the candidate comes fresh from university, I'd expect them to know about two-complement, mantisse, etc. (don't know the English term). If they have multiple years of experience in fields that don't require deep knowledge of floating point arithmetic and data layout, I'd expect them to be less aware of it. Maybe even not immediately recall that it's a thing. So I'm not sure how that question would surface experience - quite the opposite I'd say. Again, it depends in which field you're working. And what kind of role you're trying to fill. But I fail to see how that question tells you anything significant about a candidate. It seems open for a huge number of false-positives and false-negatives which makes it basically worthless. Of course, should the candidate happen to know about it you could get an idea about how good they are at explaining technical details. But that's true for basically every technical question. The question itself is, as I said, on the level of movie trivia. There's no actual reason someone with relevant experience is more likely to be aware of it than a first or second year college student.
&gt; That is why he was being downvoted. He was offtopic. No, I wasn't off-topic. Your answer to the OP was really poor: &gt; The Angular way is much easier to write tests for. &gt; Your jQuery code requires a DOM, while the angular code can be executed in isolation. Why is the Angular way easier to write tests for? Look at his code: $(function(){ $('#show_contact_form_button').on('click', controller.show_contact_modal); }); No sane person would write tests for checking that jQuery.on() works. The developer would test the function "show_contact_modal". So no, its not easier to test that with Angular, because your job isn't to test that jQuery works, it is to test that your own code works (unit code-wise). Thats why I wrote you can still test this in jQuery. I don't agree it is easier to test this with the AngularJS framework. I don't want to argue about this, just want to clarify why I wrote that you don't need a DOM for testing that OPs jQuery code.
No, and if you had an ice cream cone I'd slap it out of your hand.
They're globals. Yes under window. Try it.
Not necessarily always, use inside top of your function, not top of your script unless you want to make all your libraries use strict. Jshint warns for this.
With valueOf: var a = { i: 0, valueOf: function () { return this.i++ } };
Nice writeup.
with an ID you can only have one per page. Something like a tabbed content area could potentially be used more than one time on the same page, so classes are best. Infact I *very* rarely ever use an id attribute anymore for anything. Unless its an id of an object on the page that has a unique id. but they can't start with numbers, which is what mongodb genreates in its ids....so then you have do `id="job-&lt;mongo-job-id&gt;` and then at that point, who cares. I just use `&lt;div class="job" data-uid="&lt;mongo-id&gt;"&gt;` if I need to access it. But as far as tabbed content area with jQuery implementation I mark off heavily if I see the implementation do something like `$("#stuff-id-one").show()` or something like that. Its too brittle. and the implementation of the tabbed javascript needs to be content-aware, which it shouldn't. Usually I have the anchors in the tabs point to the content area by id. The code would just peel that off. not hardcoding anything in the tab maker.
`async` is the solution of yesterday. The new thing is to use Promise's, they are now part of ES6. `bluebird` is where it is at for Promises on node.
You say don't use ids, yet, &gt; Usually I have the anchors in the tabs point to the content area by id You say don't use data-attributes, yet, &gt; I just use `&lt;div class="job" data-uid="&lt;mongo-id&gt;"&gt;` 
http://agentcooper.ghost.io/javascript-interviews/ This
Nice game! The gooey look is a really nice touch, and I haven't seen this (exact) gameplay before.
This thread had some good suggestions : http://www.reddit.com/r/javascript/comments/17d7xv/what_kind_of_questions_can_i_expect_on_javascript/
Love the concept. Run it through PhoneGap and sell it, please.
Document security: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-aliases.html But wrt. security of ES itself, you wouldn't expose an elastic search instance to the internet in the same way you wouldn't expose your database...
Clever.
checkmark doesn't appear in firefox
Nice game. You may want to include a system where it detects if you have run out of movies. 
Am I missing something or does the game not work on mobile?
Really cool game! Please add mobile support
make it jiggle when they fuse!
The direct calling is fastest on my setup (Win7/Chrome 36.0.1985.49 beta-m), 27e7 vs. 21e7 for `new Function`.
While I mostly agree with you, the [CDN argument](http://www.stevesouders.com/blog/2013/03/18/http-archive-jquery/) isn't as compelling as it might first seem in the face of actual data.
Yes, I'd like to see it. Thanks.
https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API http://caniuse.com/audio-api I'd go with Ogg Vorbis and MP4/AAC for complete coverage. http://en.wikipedia.org/wiki/HTML5_Audio#Supported_audio_codecs
Edit: [here's a screenshot](http://i.imgur.com/eAHCb3e.png). It makes those forward/backward buttons on the right side. // ==UserScript== // @name Reddit Comment Linker // @namespace http://use.i.E.your.homepage/ // @version 0.1 // @description Adds links to the next comment // @match http://www.reddit.com/r/*/comments/* // @copyright 2012+, You // ==/UserScript== function makeCommentLinks() { "use strict"; var comments = document.querySelectorAll('div.commentarea &gt; div[id^=siteTable] &gt; div.thing.comment'), authors = [], disabledCSS = 'style="opacity:0.4;"', enabledCSS = '', nav, prev, next, i; for (i = 0; i &lt; comments.length; i++) { authors.push(comments[i].querySelector('p.parent a').getAttribute('name')); } for (i = 0; i &lt; comments.length; i++) { nav = document.createElement('span'); prev = i &gt; 0 ? '&lt;a href="#' + authors[i-1] +'"&gt;&lt;button ' + enabledCSS +'&gt;&amp;#8592;&lt;/button&gt;&lt;/a&gt;' : '&lt;button disabled ' + disabledCSS +'&gt;&amp;#8592;&lt;/button&gt;'; next = i &lt; comments.length - 1 ? '&lt;a href="#' + authors[i+1] +'"&gt;&lt;button ' + enabledCSS +'&gt;&amp;#8594;&lt;/button&gt;&lt;/a&gt;' : '&lt;button disabled ' + disabledCSS +'&gt;&amp;#8594;&lt;/button&gt;'; nav.innerHTML = prev + next; nav.style.fontSize = '1.2em'; nav.style.float = 'right'; comments[i].querySelector('p.tagline').appendChild(nav); } } makeCommentLinks();
Removed as blog spam, the original is [here](http://www.infoworld.com/d/application-development/code-in-javascript-the-smart-modular-way-238694).
Very similar to part of /u/lokhura's question, which my answer was: for (var i = 0; i &lt; 10; i++) { (function(i) { setTimeout(function() { console.log(i); }, i * 1000); })(i); } I'm pretty confident in an interview setting, I would have said 10 not 11, due to the non-standard for loop (i=1, i&lt;=10) vs (i=0, i&lt;10). I am confident I would have known it would repeat 10 (11) instead of counting incrementally, which is what you really were looking for. Just curious, how much would you have docked me had I gotten the hard part right but said it repeated 10?
Any particular reason you want to do this yourself instead of using something existing? i.e. is this to learn/because you want to? Or because you don't know of existing solutions?
I wondered about this too lol. Wouldn't want to store data in those... (cough) data-attributes that's for sure. 
No. The web page does not have the ability to choose the sound device for playback.
It works on my windows phone 8.1, just have to be careful with the swipes
from http://linuxfr.org/news/retour-d-experience-sur-sql-js
Yea, I only use `"use strict"` in a closure or IIFE. Enabling it globally would most likely kill any existing pages, which is why "always" is kind of a joke answer.
What's the real answer to #3?
So it's Cordova/PhoneGap...?
I'm guessing `window` in a browser and `module` in node?
I want to clarify before asking my question that this isn't meant to be a smart-ass comment. I'm genuinely curious about things like llvm and emscripten, and only beginning to understand compilers and such through self study. Now that that's been said, I'm curious why someone might want a pure JS sqlite. My initial reaction or assumption would be that non-JS sqlite would be much faster. So my guess would then be that the only reason someone might want this (other than it being interesting in its own right) would be to run sqlite in the browser?
we are talking about two different contexts. anyone, you want to take a shot, do it. and i'll tell you how much your code sucks :)
A promise chain is usually .then().then().then(). Kinda like what node folks typically do with async.waterfall([list of functions]) Oh just saw your closure example. Sorry, joke flew over my head.
I can see a potential use for this on a client browser (except for the fact that the .js is 1.5MB), but not on a server (node.js). Storing a "text" file in local storage and then being able to run complex queries against it would be useful, and much faster than a server round-trip. But again, the library is _huge_
Don't so sync IO for production code, it will make your server slow and unresponsive. And you'd miss the point of node, as it is all about async event loop IO. Only use sync in local script, and maybe in test suite of application init code if you must. Never in the business code. If you need to spawn sub-processes to do stuff you definitely want to use async, because if you rig it right you can easily do multi-core by spawning as many sub-processes as there are CPU cores. See `os` module in the docs.
Just because: Number.MAX_VALUE === 1.7976931348623157e+308 If you need to handle bigger numbers, you have to use a library that implements arbitrary precision arithmetics.
Maybe because it is `parseInt` and not `paresInt`, but that is not the only thing wrong with your code.
You're using the SoundCloud SDK already, why not use SoundManager? It has options to forego flash.
Very addictive, great job! 
Well, you really didn't provide any context. All you said was "the code is pure shit. [...] i've seen them store shit in data attributes, use ids for everything" which seemed to me like a pretty general condemnation of data-attributes and ids.
To complete the info: MAX_UINT_32 === Math.pow( 2, 32 ) - 1 MAX_INT_32 === Math.pow( 2, 31 ) - 1 MIN_INT_32 === -Math.pow( 2, 31 ) 
Can you give me an example of async.each and async.waterfall using bluebird?
Got stuff to do and no time to spend getting bashed. I think you can figure it out yourself if you look 5 minutes at a basic Promise tutorial. You don't even need bluebird for this. async.each is just map()-ping values though a method that returns a Promise and passing them to `Promise.all()` async.waterfall is just like chaining methods that return promises. doAsyncFunc3(startValue) .then(doAsyncFunc2) .then(doAsyncFunc3) .then(function(result){ }, function(error){ })` This is just tip of the iceberg stuff. Once you have all functions returning promises (you can automate that) it gets crazy.
Using Firefox, I see it. Are you updated to most recent or have interfering addons?
It seems to work well enough for circular orbits, but total energy breaks down when things get close? Possibly look at Leapfrog instead of Euler. http://en.wikipedia.org/wiki/Leapfrog_integration 
I don't think that's correct re waterfall. Waterfalls take results and pass to next. 
Yeah, there are [issues with structured client-side storage](http://www.html5rocks.com/en/features/storage). While 1.5MB seems like a lot for a web site, that's nothing really for a client-side app, even more so with today's bandwidth. Plus, you'd just stick that in local storage along with all the apps other assets. So, not so great for general web sites, but this is great for client-side apps.
Done 1-4 on default. 5 is a killer! Good job :)
Besides the infinity problem, another thing to look into is this: x^n === (x^(n/2))^2 Example: 2^4 = 2^2 * 2^2. You can take advantage of this to perform approximately log2n multiplications instead of n multiplications.
I wish people would stop thinking like this... Just because you _can_ throw a 1.5MB file at most clients doesn't mean you _should_. Cellular bandwidth, for instance, is fairly slow in many areas, and running complicated SQL on a phone is likely to slow it down / chew up CPU &amp; battery life. It's this type of thinking that leads to web apps that can barely run on modern hardware. That concept is absurd and the community should be embarrassed!!! There are apps with better performance on TI calculators!!
No, this is correct. doAsyncFunc2 &amp; doAsyncFunc3 are used as resolve handlers, so they each get called with the resolved value of the previous step, and each function then returns a Promise for the next value.
It would be using client side resources. E.g. serving massive raw data to the client and allowing the client to query, aggregate and list/graph locally with reduced latency and with little server side load outside of the data transfer. A practical example could be a map with data based on US census data where the user has fine-grained access to query the data and render the map at any resolution and depth. By putting the data on a high capacity CDN, that map could have millions of parallel users running billions of queries while being served on a $20/month virtual machine.
It's about throwing huge all-encompassing libraries at problems that have much simpler solutions. TSQL in a browser is a perfect example of that. I'm not saying there would _never_ be a valid use case for something like this, just that in 99.999% of the cases where this will/might be used, it's a crappy solution.
Here are several projects to serve as starting points: Open Seadragon, D3.js, SVGPan.js, svg-pan-zoom.js.
Looks pretty nice out of the box. Will use this for the next little while. I dont know what I expect out of an irc client but I've not been over the moon about any of the ones I've used on OSX. edit: command+w closing the app rather than a channel is really weird ux to me
Keep in mind this is still beta - don't hate me if it's not perfect yet but it soon will be. :) The concept is to integrate with a lot of tools developers use. Image joining an irc server for blink development and having all current open issue, wiki articles and a listing of the current source tree right in the chat. That's what i'm aiming for.
I would love your feedback. Please, if you have an comments, suggestions or features let me know.
Still of use for a NodeJS app IMHO. But worthy to note.
&gt; You can do it as part of the 'at base' setup While 'at the base' setup you might as well install and setup the real sqlite ont the client side. 
I bet somebody already has a prototype written
It compresses down to 280KB, which makes it's network time on a 4G phone ~0.3 seconds if you have gzip compression enabled.
&gt; My initial reaction or assumption would be that non-JS sqlite would be much faster. As far as I understand, Emscripten+asm.js performance is close to native, and only expected to improve. Here's a [good slide deck](http://kripken.github.io/mloc_emscripten_talk/gindex.html#/) that directly addresses your question, and here's a [more thorough write-up](http://ejohn.org/blog/asmjs-javascript-compile-target/) by /u/jeresig about it. To quote the latter: &gt; By doing this the result is highly optimized and can be converted directly from this Asm.js syntax directly into assembly without having to interpret it, as one would normally have to do with JavaScript. It effectively shaves off a whole bunch of things that can make a dynamic language, like JavaScript, slow: Like the need for garbage collection and dynamic types. Personally, I think it's beyond bad-ass that there's an actual SQL engine available directly in the browser....the possibilities are pretty interesting. You could perhaps create an offline database learning app, or maybe a fancy db dashboard which allows you to run ad-hoc queries for data exploration without having to install anything, or even a db designer type app.
[Not even close...](http://jsperf.com/function-literal-vs-new-function)
Not sure if I'm doing something wrong, but downloaded the windows build, ran the exe and I just got a window saying "Node webkit" and nothing else.
Same here.
The problem with these SQLite Emscripten builds is that they don't go far enough. It should include a [SQlite VFS](http://www.sqlite.org/vfs.html) that writes database pages to IndexedDB or localStorage. That way all transactions are persisted immediately without a clunky export-everything step somewhere. 
Exactly, that's a large-ish picture worth of bandwidth that can be cached for a long ass time.
If you need SQLite for server-side Node just use the [sqlite package](https://www.npmjs.org/package/sqlite).
[This illustrates the complete picture](http://jsperf.com/flvnf). You raise a good point that you pay some up-front initialization cost, but when the function will be called many times more than its initialized you start to get wins.
[This shows what I'm talking about more concretely](http://jsperf.com/flvnf)
Pretty cool idea and execution.
A bit of both! 
A pure JavaScript implementation has many benefits, mostly related to portability. I really like the idea of compiling a native build and if that fails, fall back to a prebuilt, if that fails fall back to the Emscripten build. I've experimented with falling back to an Emscripten build in NodeGit and the initial tests were really promising.
Looks great!
Really neat project! I like the Backbone Boilerplate, Marionette, Node-Webkit integration :) I was able to build this from source and get running, if you're having problems I'd recommend doing the same, pretty easy if you have Node/NPM already installed.
Whoops! Just pushed a fix for Firefox/mobile browsers.
Although the jQuery datatables plugin may be the most popular (based on people I know who), I've always preferred SlickGrid myself.
Highly recommend Eloquent Javascript: http://eloquentjavascript.net/
Your test is broken in two ways: first, you're creating a new object each iteration with `{foo:1}`, and second, you aren't actually accessing the foo property of `obj` unless you use `blah('foo')(obj)` Your example is pretty good, though, since it's a kind of memoization and the browser can probably optimize it easily. The obvious downsides, though, make it generally not worth it IMHO: - Code made from strings is often harder to maintain and read, and more likely to lead to bugs - Anything that is eval()'d could be construed as a potential security risk - The performance gains are immediately lost if somebody starts calling the function directly; it performs many times worse than anything else - The performance gains probably didn't make any worthwhile impact on framerate, since we're talking fractions of a millisecond. This is really the only point that matters; since you made everything more complex for no benefit. With all of that said.. there might still be some exceptional cases where they prove useful. I'd just be weary. 
You should license your code, so people know what they are allowed to do with it.
Huh, what do you know... Interesting. Still, it feels like the performance difference is not enough to justify the awkward syntax.
Not able to correctly answer the output of the question is not a big issue. Reason being even the most experienced developers sometimes miss this because of such a simple piece of code. It is the second part (how to fix this) which matters most. The guy would need to know closures and it's use to correctly answer it. I believe this is a better way to test their knowledge of closure than asking them "what are closures".
/r/learnjavascript /r/learnprogramming
Would be awesome if it would have a cli version too, so that I could run it on my server with screen. Like Irssi.
I like to use JQGrid, has good documentation. http://www.trirand.com/jqgridwiki/doku.php?id=wiki:jqgriddocs
Damn, just browsed slickgrid (on mobile) and it looks pretty.. Uhh.. Slick. I will give it a try! Jquery datatables is pretty powerful out of the box, is slick grid like that or is there a lot if config stuff. I don't mind either way, just curious on your experience with it
You can do something along these lines using the web audio api. It's incredibly powerful. You can automate any node supported by the API. In this case you would be adding a gain node to your source mp3 and automating that to create a fade. 
I don't know why IndexedDB isn't more like SQL tbh.
Its very swish, i like the look of it a lot. However, one question, i kinda fail to see how this is something for people who write code? I do see this as a replacement for irssi/weechat for people who arent too interested in CLI apps, idk its not clicking for me... ? or is it just me?
I built a computer-organ with very little lag http://rsahai91.github.io/git_piano/piano.html It was just a matter of keydown and key up event listeners and triggering audio play's/pauses. But I don't know about extending the keyboard.
Out of curiosity, what was the problem?
You can use the android emulator that comes with eclipse or android studio.
Audio API is awesome but it works on higher level. I don't think one can select audio interface with that.
You'll find the install instructions in the README (or just `npm install shout`). No configuration required. Should take under a minute to get it running if you already have NPM.
The new CLI isn't the one provided by your OS ancient terminal emulation layer but instead the CLI provided inside your browser of choice.
I'm actually very interested in how you build this: You've posted it to Javascript and I noticed that you've built the main part of it on JS. But how did you build these into native apps for most platforms? Did you use some kind of API or third party publishing tool (like PhoneGap for mobile phones?) 
I used dynatable on my latest project (watch the AGPL license tho!), and found it very nice. Relatively small code, and easy to understand.
Selecting devices is indeed too low level, I don't think that kind of access would be expose to the open internet. But since OP also proposed just mixing channels Web Audio API could solve his ask fairly well. Plenty of mixers and stuff on the package managers (or hack it yourself, should be doable).
lol which is connected to which bone in the OS? the ancient terminal emulation layer!
Ah I see! Looks neat indeed! Might have to read up on this. 
why no diagonal paths?
Source?
https://github.com/drewblaisdell/astar-javascript-pathfinder
Sounds great. Is this almost like anglular.js directive?
I have used jQuery Datatables before but they can become really hard to debug and maintain. If you can try using Angular and the Angular UI grid 
Sorry, but I don't understand why anyone would use this. Security concerns aside, I don't see any benefits from this over using screen and/or tmux and a fully fledged IRC client. 
Look up requirejs, or better yet, browserify. You should probably be splitting your code into modules on the client side *and* the server side.
A lot of text editors have a 'code folding' function. It makes it a lot easier to scroll around. http://en.wikipedia.org/wiki/Code_folding
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Code folding**](https://en.wikipedia.org/wiki/Code%20folding): [](#sfw) --- &gt;__Code folding__ is a feature of some [text editors](https://en.wikipedia.org/wiki/Text_editor), [source code editors](https://en.wikipedia.org/wiki/Source_code_editor) and [IDEs](https://en.wikipedia.org/wiki/Integrated_development_environment) that allows the user to selectively hide and display – "fold" – sections of a currently-edited file as a part of routine edit operations. This allows the user to manage large amounts of text while viewing only those subsections of the text that are specifically relevant at any given time. Identification of folds can be automatic, most often based on the [syntax](https://en.wikipedia.org/wiki/Syntax_(programming_languages\)) of the [computer language](https://en.wikipedia.org/wiki/Computer_language) in question, or manual, either based on an in-band marker (saved as part of the source code) or specified out-of-band, only within the editor. Many editors provide [disclosure widgets](https://en.wikipedia.org/wiki/Disclosure_widget) for code folding in a sidebar, next to line numbers, indicated for example by a triangle that points sideways (if collapsed) or down (if expanded), or by a [-] box for collapsible (expanded) text, and a [+] box for expandable (collapsed) text. This feature is commonly used by some [computer programmers](https://en.wikipedia.org/wiki/Computer_programmer) to manage [source code](https://en.wikipedia.org/wiki/Source_code) files, and is also frequently used in [file comparison](https://en.wikipedia.org/wiki/File_comparison), to only view the changed text. &gt; --- ^Interesting: [^Folding ^editor](https://en.wikipedia.org/wiki/Folding_editor) ^| [^Comparison ^of ^text ^editors](https://en.wikipedia.org/wiki/Comparison_of_text_editors) ^| [^Code ^browser](https://en.wikipedia.org/wiki/Code_browser) ^| [^Kate ^\(text ^editor)](https://en.wikipedia.org/wiki/Kate_\(text_editor\)) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ci8u982) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ci8u982)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
It's a bit sophisticated, but it appears to build classes using underscore's _.extend to treat superclasses as mixins. I probably wouldn't use something like this, but would instead opt to just writing mixins as inheritance pieces. 
What's the advantage of using recursion over reduce for fold ? xs.reduce(fn, acc) 
My thoughts exactly. An IRC client without screen/tmux/relay functionality is useless for me. So far I've been using WeeChat, but it'd be nice to see some competition ;)
I understand if some people prefer native clients or running their chat in their good ol' terminal with SSH access. However, some arguments: - Runs in browser = cross-platform - Not everyone like chatting via something like Irssi/Weechat - Runs on a server, which means you won't disconnect even if your computer goes to sleep - Chat from multiple devices at once or from different locations (Home/Work) - Works on your smartphone Try it, you might actually like it. I'll give you an upvote for bringing up a good point though.
As far as I know Soundcloud doesn't let you do stuff like this. If you want to stream a track from Soundcloud, you have to use the Soundcloud API -- they don't expose the mp3 directly.
While you can't do custom elements, but you can do custom tags (which the browser itself doesn't do anything with). My guess is that everything else is done via JS where necessary. This [CSS-Tricks](http://css-tricks.com/using-encapsulation-semantic-markup/) post has some interesting points about how far you can get with this (towards the end of the post).
The features on the roadmap are mostly the reason I say this. I have a lot of plans on integration with commonly used dev tools.
Is the purpose of using browserify to break up a big module into smaller ones and then collapsing them into a browserify loader ? If I'm not sure what I'm looking for I always have trouble reading docs hence a blunt explanations prior to researching is always helpful. I'm just curious how this tool would help me with my problem exactly in a real-world practical sense. I'm curious what the workflow would be like with browserify vs. just dumping everything into a module.
codeacademy.com is a good place to go too!
I've only used jquery promises which does not so this. 
But how to achieve that? Link everything manually?
Hmm maybe you could search for a site that offers a json or rss feed of live results? I'm on my phone right now so I'm not sure if livescore.com offers one. There are some node.js scraping libraries that might help. 
In regard to the other comments, this is definitely a joke and has nothing to do with Google's actual infrastructure. Angular is a small side project at Google and the "NSA-proof algorithm" in the screenshot is not actually encrypting anything, just concatenating two values.
Then there's the fact that the "encryption" method is concatenating the two strings and setting them to uppercase.
Many people missed the point, thanks for pointing it out.
[citation needed]
+1 for SlickGrid.
It's a joke. 
That's not an encryption function, it's a hash function.
Neat game! That's cool you got it working on a mobile too. Do you plan to add more levels, and developer it further?
Are you high? The `encrypt` function "encrypts" the two pieces of data by concatenating them together with a colon and converting the whole string to upper-case.
THIS IS REALLY GOOD ENCRYPTION:HUNTER2
Remember that, with this technique, every "private" method is another function allocated on the heap, and every instance that includes private methods is another closure allocated on the heap. Bottom line? More memory is used for each instance. This is not a problem at all when you have few instances, but if this technique was used on an object like `THREE.Vector3` (which is instantiated thousands of times), it would have an impact on performance due to garbage collection pauses. My opinion? Prefix "private" methods with an underscore. We're all adults here; if it starts with an underscore, don't use it. Also of note, in their last example, the "private member" `breed` is shared among all instances of dogs, which makes no sense. You'd have to override the entire prototype just to change the beed of the dog, which means re-defining both `getBreed` and `getMessage`. This breaks prototypal inheritance, so if you're going to use it, don't do what this article suggests.
There is so much *woosh* in this thread.
A few design considerations: 1. "Private" members that are defined in a closure are closed for extension: You cannot add a new method that refers to them elsewhere in your code. That may be a very good thing. 2. "Private" members that are defined in the scope of the prototype act like "private class variables" in other languages, not like "private instance variables." They are common to all instances of the "class." Example: http://jsfiddle.net/b6p6A/
All I see is *******
Ohh, so *that's* what .toUpperCase() does. Who would have thought? &gt;concatenating them together Do you mean *concentrating*? Like how they concentrate 6 oranges into a juice box? - edit: yes, I, like everyone else in this subreddit, understand basic string manipulation.. and no, you're not "smarter than" anyone just because you attack the people that realized this entire fucking thread was based on a fucking joke and treaded dirt on your precious play-toy scripting language.
&gt; My opinion? Prefix "private" methods with an underscore. We're all adults here; if it starts with an underscore, don't use it. I'm reminded of an old essay Joel Spolsky wrote, I think it was called "Five Worlds," in which he noted that the world of programming is broken up into vastly different environments, and the requirements for each environment were often radically different. My experience with things like using a convention instead of a bondage-and-discipline feature like enforcing encapsulation is that it is superior in the short run, but doesn't work well for every team in every environment. In some environments, somebody will need to make a "quick and dirty fix" at some point, and will take the shortest and easiest path. Especially if the code base has aged, and has a lot of accretion, and they are not the original maintainer. Code bases tend to become fragile over time, and they may think that breaking encapsulation is safer than refactoring the original class to expose a method for what they need. JM2C. Edit: tl;dr: I agree with you in most cases.
&gt; Who would have thought? Well clearly not lighthouserecipes, who apparently didn't realise that concatenation plus uppercasing *wasn't* an NSA-proof encryption scheme. &gt; Do you mean *concentrating*? No dude - I mean [concatenating](http://en.wikipedia.org/wiki/Concatenation). Are you some sort of lame novelty account, or are you genuinely that dumb?
No idea why you're being downvoted. I get that it's meant to be humorous, but the conflation of "encryption" and "cryptographic hashing" is ruining it for me too. I get that laypeople may not know the difference, but this is aimed at programmers. As if all these "reassuring" blog posts by web companies about how your passwords are safe because they were "encrypted" weren't bad enough.
Actually, what .nsaProofEncryption() does is transform data into what looks like innocuous plain text. When used to encrypt its own function call, it produces .toUpperCase(), which *nobody* (not even the NSA) would suspect of calling a powerful encryption algorithm. Pretty clever, eh?
Meteor is pretty useful to me as a rapid prototyping option, but thats it. Mongo just isn't worth the hassle for me in any serious application use.
The developer is a great guy too, I mean, I filed a [feature request](https://github.com/mephux/komanda/issues/10) for a distraction free mode, and the guy added it the next day.
&gt; Do you mean concentrating? This is what happens when you try to make fun of people smarter than you. Concatenating is one of the most fundamental parts of comp sci. If you don't know about it, you have absolutely no clue about what the NSA is capable of.
The NSA is not incompetent. No one who knows anything would make that joke.
I agree with that - it seems fun ! With all the hype on Object.observe an reactive libraries, I can't help but think about "how would I implement these things?".
&gt; No idea why you're being downvoted. &gt;&gt; ...the conflation of "encryption" and "cryptographic hashing" is ruining it for me too. That's why- it's neither encryption nor hashing. It's still plaintext.
I would not say the MEAN stack is doomed. Mongo can easily be replaced if you need as there are many other database modules for Node available. While your database may vary on your requirements, Node+Express+Angular are amazing and here to stay.
This is actually a lot more interesting than I thought it would be. I'm aware of all those operators but I forget that void() is an operator that always returns undefined but evaluates whenever is inside of it. I'm curious what types of uses it could have. In addition commas, they always return the result on the far right but evaluate all of the expressions within. Also, delete returns true if the operation succeeded, that's actually fairly useful for assertions and ensuring data types are correct. The 'in' operator I always forget about. Is it fairly fast?
&gt; the brittleness comes from the fact that you have to basically name each thing you want to export twice: once as a property of your default export, and once as a named export? Yup. That's exactly it. I'm torn as to whether removing `module...from` is a good idea. TC39 has taken on a challenge that AFAIK most other popular languages have avoided - that of importing a module and exports from the same module separately. While the disparate syntactical structures are confusing, the inherent power behind having both methods for importing is appealing. If the module spec were changed so that the `import` statement implicitly makes the module object available in the current scope, it might remedy some of these issues, but I've no idea if that might have other ramifications (eg. prevents deferred loading or optimization). Trying to consolidate both `module...from` and `import...from` into a manageable, easy-to-parse form is quite the task. My preference would be for something along the lines of `module x from 'some/module' import {...imports}` or `import {...imports} from 'some/module' [as x]`. However, both the aforementioned forms are rather awkward to use and lack support for default exports (the second form also might have path issues if the module path contains hyphens or whatnot). At the end of the day, it just seems as if TC39 has dug themselves into an insane conundrum. Hopefully the developer community can find the right balance so that es6 or es7 may have an equally powerful, easier to use module system.
Kimonolabs made an [unofficial API for the world cup](http://www.kimonolabs.com/worldcup/explorer). It's a bit complex and full of stuff but if you check the "matches" option in the sidebar, you can find the live (I think) results. Just grab the Json, make a loop that searches for the "in-progress" games (you need to check the "status" checkbox) and grab all the info you need. Have fun!
A person can still read and interpret it as intended, but the point is that the original data is lost in translation and the output will remain the same no matter the circumstances. If the output is 'A', how can you tell if the input was 'a' or 'A'? It's not a very good hash function, but a kind of hash function nonetheless. It is certainly one-way cryptography.
I guess that's true. I don't think anyone thinks it's genuinely NSA-proof.
There's always the NEAR stack. Node.js, Express, Angular, Redis.
Cannot wait for 2.0!!! Going to be dope.
I would recommend looking into [mongoose](http://mongoosejs.com/). It has a function called "populate" that replicates the functionality of joins. 99% of the time, your data is going to end up being relational in one way or another, so storing data in subdocuments "the mongo way" is usually a bad solution. Doing joins in code yourself sucks, but doing joins via a library like mongoose solves most of the problems with mongo.
[This article](http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html) helped me get my head around it better. Apologies if you've seen it already.
[The commit](https://github.com/drewblaisdell/astar-javascript-pathfinder/commit/8f1378e73d4fa35c403f57f4d96ee5b019bd08c9) tl;dr - was using x and y properties on an event which [FF doesn't have](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent). (Just clientX and clientY)
It's not too far fetched that a reddit post regarding a scripting joke would result in a few jokes tossed around in the comments. edit.. just noticed your comment karma.. 212k, with an average 5 votes per comment.. doing the math, you obviously live here so I didn't mean to intrude on your home turf.
This is what happens when you apply robotic, non-human reasoning to joke comments on a joke thread.
Oh, I get it know. Hey, that's funny and might make a good, light-hearted thread on Reddit somewhere. Oh, wait.
With regards to privacy there is no difference between Google and the NSA, except that Google likely has far more data with far more ambitious profile normalization techniques.
I would also like to point out that according to some the speed of certain document stores (like mongodb) + in library joins (like mongoose populate) is about the same or better than SQL in engine joins. I haven't really compared though.
you can go hunter2 my hunter2-ing hunter2. Does that look funny to you?
Yep, there are plenty of related stacks. I'm all about BERN (Backbone, Node, Express, Redis) and GAEB: (Google App Engine + Backbone) right now.
There are lots of Chrome extensions that do this -- a quick Google search brought up [StayFocusd](https://chrome.google.com/webstore/detail/stayfocusd/laankejkbhbdhmipfmgcngdelahlfoji?hl=en), [Procrastinator](https://chrome.google.com/webstore/detail/procrastinator/enagjojfhclogmaemicdkkohjghgpodh?hl=en-GB), [SiteBlock](https://chrome.google.com/webstore/detail/siteblock/pfglnpdpgmecffbejlfgpnebopinlclj?hl=en), and [BlockSite](https://chrome.google.com/webstore/detail/block-site/eiimnmioipafcokbfikbljfdeojpcgbh?hl=en). You can learn about building Chrome extensions [here](https://developer.chrome.com/extensions/overview) and /r/learnjavascript has good resources for learning JS.
I feel like these are questions for 'senior' JS developers with 4+ years of experience.
&gt; you can go \*\*\*\*\*\*\* my \*\*\*\*\*\*\*-ing \*\*\*\*\*\*\*. Does that look funny to you? Yup
Hey there, so I know there is a couple of bugs, and some logic should be moved over to the node server and so on but I'm pretty excited at the point I've gotten this too. Currently all you can do is move about the map and chase other people I guess! I know there's a bug with diagonal movement which shouldn't be that hard to fix. It should work on both desktop/smartphone, however I think there's some lag on Android devices (compared to the iphones I've tested on) but if I remove the small particle engine footstep mud stuff that might fix that. This has been written with the open source tile engine I created: http://jsiso.com/, and the terrible walking sprites etc were also hand drawn. 
You are making it more complicated than it really is. Think about shuffling and storing somewere clientside the shuffled array of locations. Like a deck of cards.
You can still have relational data, it's just stored a bit differently. There are a few packages like [collection-helpers](https://github.com/dburles/meteor-collection-helpers) that make the relation a bit easier to access on the client and server. EventedMind also has a good [video on doing reactive joins with Meteor](https://www.eventedmind.com/feed/meteor-make-a-reactive-join-in-the-ui). I've been using this method in production and it works really well. Also Meteor has SQL on the [roadmap](https://trello.com/board/meteor-roadmap/508721606e02bb9d570016ae) after 1.0.
I'm not sure I understand what you mean.. If I have twenty sites in the array and I don't have something in the code to prevent duplicates, there's a 1/20th chance to receive the same site... Right?
If you have a deck of cards and you draw one cart at a time, how many chance you have to get the same card? (I am assuming that the 20 sites are unique)
http://i.imgur.com/t6rzZIN.jpg
Page loads, but nothing happens, there is just Rabbit Zombies image. In console I see an error: XMLHttpRequest cannot load http://beakable.jit.su/socket.io/1/?t=1402964568301. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://jsiso.com' is therefore not allowed access. 
Hmm which browser and version? Could you retry and let me know if it still occurs? I was messing about with Drones when I probably shouldn't have been!
It's fixed :)
Well in my case it would be 1/20, but I may have less or I may have more than that. I'm using this code for people to be able to answer questions on google forms. the way I have it set up requires me to have each question on its own form (at least that's what I'm currently thinking) so it would just be annoying and inconvenient to the people if they had a window open to the same site. 
Awesome thanks for checking it again :).
I think you are confused mate.
Does Google actually support GWT anymore?
This isn't true when it comes to Meteor (which embeds mongo) or the MEAN stack as generally understood, so you aren't answering the OP's question.
Thanks I'm not going to look at them as the goal is to make it myself but thanks. I just wanted some orientation, like to use javascript or not and if it was possible and stuff like that. 
Ah, mongoose looks great - thanks for the recommendation!
Well... I did read what many refer to as "the manual" on Meteor: [Discover Meteor](https://www.discovermeteor.com/)... and that article is recommended reading in the book.
&gt;It seems to suggest that Mongo is pretty much a bad choice for any project that needs relational data. &gt;What project doesn't need relationships between data? "Relational" only means that [relations](http://en.wikipedia.org/wiki/Relation_%28database%29) (sets of tuples) are used. Not using relations does not mean that there can't be relationships. In aggregate-oriented databases, your "documents" can contain references to other "documents". And graph databases are all about relationships between the nodes.
Meteor !== MongoDB
Yea calling the SC object from their SDK returns a SoundManager object with the stream loaded I'm fairly sure, not an actually mp3. If that were the case you'd be able to download mp3's with cURL or other HTTP clients.
Reddit doesn't support triple-backtick codeblock marking. You'll have to prefix each line with four spaces.
The TypeScript team arrived at the same conclusion as you when they decided to implement private methods.
Thanks for this. It was hilarious.
https://github.com/grantgalitz/IodineGBA
Even http://watilde.github.io/beeplay/ lag in Mozilla Firefox :( works fine in Google Chrome
Isn't preconditions.checkArgument(denominator != 0); the same thing as if(denominator !== 0){ ...
And made the concatenated string upper case. That's the second part of the 'strong algorithm'.
2012 might as well be 1984 with the pace front end development has progressed over the last two years.
thanks!
Really looking to get some feedback on a little app I made. Questions, comments, bugs, constructive criticism are all welcome. Thanks!
CRAP : CoffeScript, Rails, AngularJs, PostgreSQL. I like crap apparently
JavaScript hasn't changed that much in last 4 years, so it's no wonder it works especially since it's Mozzilla
Nice. Thoughts... * Currently no visual clue to see if an item has a sub-list or not * Tap (or double-tap?) 'this list is empty' should add an item * Could easily be made desktop compatible if you offer a button to show options for an item 
You should also check out [RescueTime](https://www.rescuetime.com/) I think it's pretty good piece of software
That title makes my brain hurt.
`removeAllListeners` comes from node's [EventEmmiter](http://nodejs.org/api/events.html#events_class_events_eventemitter) library. Instead of doing `db.removeAllListeners`, you have to actually do so on the changes object which you get from db.changes call. If you don't explicitly need removeAllListeners, you should instead consider using: `changes.removeListener(id, listener)`. Where id is the channel name (like 'change', 'complete', 'error', 'destroy' etc) and the listener is your listener function.
Here is another one: https://github.com/NextUserSF/fighterr - it let you toggle argument checking when compiling your production version, so argument checking only run in your dev environment.
Interesting. My understanding was that the GWT team got laid off.
I stand corrected: G+ uses Closure. http://www.quora.com/Why-didnt-Google-engineers-choose-GWT-formerly-Google-Web-Toolkit-for-Google+-frontend But there's a lot of GWT apps: https://plus.google.com/+RayCromwell/posts/ivVepvxCu3g
I read the documentation its just difficult to understand how to take a module like the one I showed and discern what to actually do to break it up. There are probably a few things I don't understand in that regard. I just watched a yeoman tutorial and that didn't answer the question. Name dropping different technologies doesn't really help with specific problems. I appreciate you taking the time regardless.
Can you elaborate on the graph based view? Maybe examples? Something like workflowy? I was kinda going for more of a Clear for iOS feel. But am open to other implementations. I didn't really make it a 'task' list, just lists for anything. I wanted something flexible. But I may be able to add features like that. I have other features in mind as well. Like embedding or moving lists in/out of other lists, kinda like a copy past I guess. That's why 'Delete' is inside a slide out div, instead just deleting right away on swipe left, that way i had somewhere to add other actions As for more work, I built the whole thing in Meteor.js a few moths back, mainly to learn the framework and mess around with it. and because i wanted to actually use the app. Then I found it was pretty much useless on a sprint 3g connection. So decided to rewrite it using backbonejs and a local storage wrapper. The rewrite took maybe a week after going through javascriptissexy's backbone course. But i agree, it needs more work, but as the saying goes, Done is better than perfect. And i felt it was working well enough to get feedback. I'm unemployed at the moment, so i have plenty of free time to mess with it. There are things that i wanna fix anyway. Thanks for the feedback! 
You can preserve flexibility and add features by making each "characteristic" of the item modular. So the user himself can choose whether each entry is crossable (i.e. a task), has a normal or recurring deadline (i.e. an alert), et cetera. Basically, what I did was store the initial nodes in an originalNodes list, and each node (as I implemented it) had an array of childNodes, which can go on ad infinitum. So what you do is DFS on the original list and wrap each list with &lt;ul&gt;&lt;/ul&gt; and each entry with &lt;li&gt;&lt;/li&gt;. That way you end up with a hierarchical view of the items that displays their relationships with each other. Of course you can use that list later on with some CSS or JavaScript to make it an actual tree, make it interactive, et cetera.
I see the number now - I didn't spot it at first. Also, there seems to be a vertical scrollbar always visible even if there is nothing to scroll (at least on android).
Syntax feels too verbose for JavaScript, especially for something to be used often. I think if you come from Java/C# background and can't give up the verification, it might be useful to try something with proper typing (like TypeScript) instead of `preconditions.checkIsString`.
My company uses Mapbox and Leaflet with Angular in a very similar way to this. To me, it produces a result with all the same functionality but with a map that is much more pleasing to the eye. Is there functionality that I'm unaware of with ESRI that couldn't be duplicated with another mapping system?
However you implement them, overuse of setters, getters and/or public properties is an anti-pattern. It's a sign that you're working at the wrong level of abstraction. It's just a heuristic, but good design involves data structures that have literal operations like get, set, push, pop. Those data structures live inside objects that provide methods that are domain-specific. To cherry-pick an example, an account object should not have a `setBalance` method, whether you call it `setBalance` or define a setter for `balance`. The balance is only changed when performing domain behaviour like depositing a cheque, so write methods like `deposit`. A balance "getter" seems obvious, but again that's now how accounts work, the balance shown on, say, an ATM reflects a domain-specific calculation involving things like pending transactions. It should be a method, and writing a getter for it is lying to people reading the code by setting a false expectation for how it's implemented. Better to make it a method like `.balanceAsOf(date)` or some-such. Personally, I think setters and getters are a powerful feature, but not to be sprinkled willy-nilly through the code as a way of providing false-encapsulation.
Honestly, probably not. If you were running an ArcGIS server to drive these maps, then I could see there being a huge advantage and maybe features that you don't get otherwise. If you are just needing a simple map, then what you are using is just fine.
Classical inheritance in JavaScript has always been a poor fit. I do agree with you that Single Inheritance as the only way to share behavior is the source of all that is wrong with the world. But given the way the JavaScript type system handles objects, I don't believe multiple inheritance offers anything more. Not without a static compiler at the least. 
It's not *cryptographic* hashing, but it's still hashing. This is, too: function totallyNsaProofHash(str) { return str.split('').reduce(function(accu, s) { return accu + s.charCodeAt(0); }, 0) % 2; } (it returns 0 or 1 depending on whether the sum of all char codes in a given string is even or not) Technically, so is this: function totesLegitHashFunction(str) { return str; } (this one is also a *perfect* hashing function, i.e. it maps exactly one input to each possible output) Neither of these is very *useful* for most purposes, but that's irrelevant. Note that Wikipedia's definition mentions constant length output but the article still defines the identity function (variable length, by definition) as a hashing function.
If you make a browser extension you can do it in javascript with node-webkit. Otherwise you will need a language that can control some parts of the OS like ObjC/Swift or .NET
Sounds interesting.
I believe comparing to == 'undefined' is going to coerce your argument to a string, which is super slow. === void 0 will give you a quick check for undefined that doesn't coerce.
/r/coffeescript not /r/javascript
I like it! Simple and clear. But I can't manage to erase items, it just gets scratched out. Is it possible to erase them? If not, I suggest it as a feauture. Nice work!
Yes, but it wraps all of that inside a function so that you don't have to keep writing all that boilerplate code.
If the NSA really does concern you then take action by supporting a technology alternative: http://mailmarkup.org/value.xhtml
[D3](http://d3js.org/) [Highcharts](http://www.highcharts.com/)
I sort of question why you wouldn't just use D3 which doesn't seem any harder and has the ability to build and scale axes (plus seems to be more flexible, with a wider array of charts you can make).
Underscore has the *defaults* command which I use for this situation
rickshaw.js
If you charge for your commercial product, why shouldn't they? If it saves you hundreds of hours of development time from rolling your own, seems like it's worth the money.
So you're using a GUID to store each list ID, interesting.
Oh, great!
Not always true - but I mostly just wanted to speak of its existence in case it helped. Plus the additional anon function might make things hard to use with certain callbacks or curried functions 
Most code I see allow foo() and foo(undefined) to work identically. Allows you to do things like foo(undefined, myvar) for example.
Either go for either NVD3 or Morris.js both are free to use on any commercial projects. I have implemented a similar data set using Morris.js Please check out the link http://weblessons.info/2014/06/15/creating-line-chart-using-morris-js-tutorial/
I don't have any problem if they are charging... and since I am a beginner I don't know even if some opensource exists, if not then I will pay
The runtime penalty (from 10x to 100x) is unacceptable. Try using `eval` for a solution with less overhead.
If I had a coffee mug in real life, what is the typical way for me to generate the sequence of images that this uses of that coffee mug? 
No, in fact a rigid claim like "mongo is a bad choice for any project" is outright wrong. Different projects have different requirements and sure for some applications MongoDB is the wrong choice, but for others MongoDB and a document database is completely the correct choice. It's not a world of absolutes, but varying degrees of need. I know successful startups that have built their entire platform on MongoDB and they are doing just fine. It doesn't mean all their data is in Mongo, yes they do have relational databases for some stuff. But their Architect is smart enough to build a system to leverage the power of both relational and NoSQL databases. I think people fail when they go 100% mongo and don't even allow for relational data even when the situation warrants it.
Also, the data formatting options are much cleaner. 
Doesn't accessing `arguments` cause optimizers to bail-out, thus any function created with this will not be optimized? Also, I don't believe the rote way is really that cumbersome.
You should have submitted a link to the repo that you're referring to. Also, you're a little [late to the party](http://www.reddit.com/r/javascript/comments/287xjf/sqlite_compiled_to_javascript_through_emscripten/) :P
There are a few around here that frown on adding things to the prototype on something global like primitives... but if it works for you and it's non-invasive, I don't complain. One thing I'd do (if this is your library) is double check to make sure String.prototype.fmt is not defined before overwriting it. if (typeof String.prototype.fmt === 'undefined') { /* code */ } Edit: I'd also call it 'format' or something more familiar, but I don't like shortened names.
As far as I'm aware its bad practice to modify the prototype of built in objects like String. http://www.nczonline.net/blog/2010/03/02/maintainable-javascript-dont-modify-objects-you-down-own/
swiping left should make a div slide out from the right showing a 'Delete' or 'Cancel' prompt swiping right toggles completion. Im gonna be honest and say it's a little buggy. But deleting should at least work, so long as you can slide that div out Worked well enough for me, even on a stock android browser, but i wouldn't be surprised if i broke something. Since i mostly use iOS, i could over looked something if not let me know what os &amp; browser you're using and i can try to remedy it
Take a look at https://plus.google.com/+PaulIrish/posts/12BVL5exFJn
Good suggestions, I'll mention it in the post. Thanks
The secret sauce is that double tapping an item routes to that item's id, then that id is used as a 'parentId' attribute for subsequent items. all stored side by side in the backbone collection, since its local storage its quick enough i suppose then its retrieving and rendering all the items with that parentId attribute taken out of the url lather rinse repeat.
You'll need to take a video of the coffee mug on a rotating platform (https://www.google.com/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8#q=rotating%20platform%20photography) Then convert the video to a JPEG sequence, using ffmpeg is the easiest way, it will be something like: ffmpeg -i coffee-mug.mp4 -b 1200k -r 24 folder/coffee-mug-%0d.jpg
I don't get it. Suppose a different `.fmt` is already defined on `String.prototype`. Your guard avoids re-defining it with your implementation. You end with a system you cannot code against, because the semantics of `.fmt` are not what you expect (since you required a `.fmt` extension that didn't get defined in the end). Isn't it better to just let it be a function? Is really `"what %s".fmt("ever")` any better than `fmt("what %s", "ever")`?
The Arc JS API is good for dealing with ESRI stuff apparently, but that's what happens when you make half your shit proprietary (not that I blame ESRI for that, there's just not many alternatives out there for connecting directly to ESRI stuff). I've never used their API myself because all of my coworkers have convinced me it's nothing but a headache, but personally I'm in love with Leaflet and while I'm open minded about new frameworks I seriously doubt anything will even come close to comparing to Leaflet anytime soon.
Worth noting that ES6 adds default parameters to the language: function printAge(age = 40) { console.log(age) } printAge() // 40
http://workflowy.com
It is a bit naïve to do this for reasons of to 'nicer'. How much trouble do you need to create before admitting that this was a bad choice and the bad practice notion was right? Also if you use this in a library then that would be really bad. I have been hit many times by 'clever' stuff and ended up ripping the modules that caused it out. At the office we now have a ban on modules that modify prototypes because it is just asking for trouble. Having to replace dependencies because they litter in the shared space is a crummy waste of time.
Did you actually read that page?
&gt; http://www.nczonline.net/blog/2010/03/02/maintainable-javascript-dont-modify-objects-you-down-own/ 
Inspired by this blog post about [changes to node.js for invalid UTF-8 codes](https://blog.jcoglan.com/2014/06/17/utf-8-its-what-strings-are-made-of/) James was saying taht he doesn't recall how to make sense of the regular expression from https://github.com/faye/websocket-driver-node/blob/0.3.4/lib/websocket/driver/hybi.js#L88 I realised that www.regexper.com is excellent at creating railroad diagrams, and from there ended up with this amazing diagram to study.
Check this site, just posted on Hackernews http://worldcup.sfg.io/
Here's my alternative for named placeholders, been using it for a while: String.prototype.formatNamed = function(args) { return this.replace(/{(\w*)}/g, function(m, key) { return (((args.hasOwnProperty(key)) &amp;&amp; (typeof args[key] != 'undefined') &amp;&amp; (args[key] !== null)) ? args[key] : ""); }); } Usage example: var string = "Welcome {username}! today it's {day} and you've visited this page {visited} times!"; string = string.formatNamed({username: "John Doe", day: "Monday", visited: 5}); It may seem an overkill for short sentences, but in the long run it's more maintainable: you don't have to care about the order in which the arguments are passed when adding new variables to a previously existing string, for instance.
It discards valid cases like `0` and `false`, which may not make sense for an age, but do for other arguments.
I said arguably :). I also did mention in the article about how it's just syntactic sugar over prototypes. The reason I think it's a big deal isn't because of anything technical, but because of the *social* change it can create. In addition to making life easier for new developers just starting out with JavaScript, it will bring a unified way of working with prototypes. All of the large-scale projects I've worked on have used some sort of library for creating classes/components/etc instead of using prototypes directly. The problem with this approach is that it makes it impossible to mix and match classes from different projects/libraries. It's just like the CommonJS vs RequireJS vs ... problem we have today. We have these little fiefdoms set up and we can't intermingle between them. Classes solve this problem, just like the module spec will solve the loader problem (hopefully, if the module spec can stop churning and not turn out to be complete crap). Tail-call optimization is really awesome, as are generators, as are weak maps/sets, and so on. Sadly, I don't think they will really be used by most JavaScript devs, but classes are something that will be used by almost everyone. I predict that classes, along with modules, will have the widest reach and adoption among the new features coming. So on that basis they can be seriously be considered "largest."
Why do you need 769kB worth of JavaScript (spread across 25 files) to display a static website? Getting a YSlow C grade for this kind of page is kinda impressive. Also, #94999c (on white) for the body text? The brightest you can go with is #666. &gt;class foo extends bar "foo" and "bar" should be capitalized. &gt;Unfortunately, people who come from more classical OOP languages like C++ and Java have a hard time adapting to and using prototypes. The new class syntax is just syntactic sugar over prototypes, but it should make JavaScript much more welcoming to developers coming from other languages. The problem with roll-your-own inheritance is that everyone does it differently. This means poor interoperability and it also means zero tooling support. Having actual language constructs for this is a huge improvement. So, no, it's not "just" syntactic sugar for people who aren't familiar with JS' prototype voodoo. By the way, you forgot two semicolons. One at the end of the loader example and one after "this.model.get('icon')".
&gt; I don't think I can do much about color scheme https://algorithms.rdio.com/Components/Post/Post.less p, li{ color: @text-color; } You could just change that. FWIW, the landing page uses #37464f for the dark body text. **Edit:** And body uses #32393d as color. It shows up in the code examples.
Do a Array.pop() out of your original array. In that case, you won't have to worry about duplicates!
Great article. Does ECMAScript essentially kill tools like browserify, since we get native imports? How are you using ECMAScript 6 functionality today? Specific shims you can share?
Don't be so hasty to call it a rip off. As a bookmarklet it will work in, I assume, all browsers. Chrome to Phone obviously will not.
I can't argue with anything you brought up. The ESRI environment is really proprietary. Where I work has everything based in ESRI so they stuck with that. I'll have to take a look at Leaflet. I've never even heard of it.
Very nice. I was playing with grails with backbone &amp; angular. This should help, thanks you 
While pretty cool, I'm not positive this belongs in this sub. Generally we like there to either be some code, or at least discussion of code. While you can definitely write some code here, it's specific to the site and thus not really interesting outside of the context of the site. For example, if I wanted to use your API on my site, I'd have to reverse engineer everything.
While pretty cool, I'm not positive this belongs in this sub. Generally we like there to either be some code, or at least discussion of code, but basically not just a "look what I made!" post (unless you include a technical discussion of _how_ you made it or something). Is there a github or similar link to the code that I'm missing? For example, if I wanted to use this, would I have to basically reverse engineer everything?
Yes, but it depends on the structure of the html page. Something like this might work, but I can't be a 100% sure without seeing some html code. var buttons = document.querySelectorAll('input[type="button"][value="Blue"]'); Array.prototype.slice.call(buttons, 0).forEach(function(b) { b.click() }); If however they use a &lt;button&gt; that won't work. Or they can use a &lt;a&gt; and style it as a button. Too many ways to go to make a 100% working script.
holy crap it's so amazing. i can't believe i've never heard of it before. it is the best way to learn regex, i've been playing with it for a few minutes and I think I finally understand back references.
I'm lucky enough to work in an environment where my bosses and their customer trusts us as developers to do what works best, as they are all GIS people rather than CS. So my developer coworkers and I have complete architectural freedom, and because we pump out good applications we're trusted to do whatever we want to make our application after we get the data from the GIS guys. It allows us to take risks and figure out what's good and what's bad in GIS development and I think it has really put us ahead of the curve. Considering I'm a contractor for state government I think I got lucky that I'm in an environment like this. Don't get me wrong, my state government is an ESRI shop, but luckily that stops when we cross the line from GIS to software development. It seems like a lot of GIS is stuck with Arc because it's the obvious GIS industry standard but there's so much more out there. Leaflet lets me put a lot of the processing client-side with GeoJSON which makes everything really fast if I program it right. It's definitely heavily dependant on Javascript skill but you can literally prop up a basic map with a couple of basic lines of code. You can also get more complex if you need to with geodatabases and their plugin library. It looks great, is open source, is super easy to use, has amazingly good documentation and a decent community, and is incredibly stable. I know I sound like a hipster praising something really obscure but this is, objectively, the best mapping library (proprietary or not) that I've come across and this along with OpenLayers is the open source alternative to ESRI. The biggest hurdle is convincing your bosses that it's the way to go. In my experience, everyone in the GIS community is so used to people throwing the same old standard stuff up on ArcGIS Online that when we use Leaflet (and usually Bootstrap) and apply a little bit of software development experience and a modicrum of graphic design we look like wizards.
I've got your back - www.buildregex.com, or perhaps the [KDE regular expression widget](http://www.blackie.dk/KDE/KRegExpEditor/) :-D
I can't help but feel like you're deliberately being obtuse about this. Clearly you've used commonjs to import modules in your code, so you understand the principals of breaking your single massive javascript modules into smaller units that you can then import using: var express = require('express'); var routes = require('./routes'); All that requirejs and browserify do is allow you to do *exactly the same thing* on the browser side. In your *specific case* you could: - Remove the code that interacts with the DOM and put it in a display module. - Move synthPatch and any associated action functions to a synthPatch.js, which you could test separately. - Move your ajax operations in a services.js module and create a mock_services.js that implemented the same API but let you run locally without a backend for testing. - Move anything in an event callback into an actions.js module that would let you *test* those actions (eg. synthDiv.onmouseover = function() ...). Come on! Are you actually seriously trying to improve what you're doing here, or just trolling? These tools (requirejs and browserify) let you break your code into smaller parts. Small parts are easy to test, easy to work on. The build tools I mentioned (gulp, grunt) automate the tedious tasks of compiling javascript using the tools above. Yeoman is a lazy scaffolding tool to help you get started with things that are tedious and repetitive as well. You *dont* have to use any of them, they're simply aids to programming as the complexity of your application increases. The basic rule of thumb for splitting code up is: Separate 'display' code that interacts with the DOM, and 'logic' code that actually does things. If your logic code gets too complex to comfortably look after in a single module, split it up into submodules. If the 'display' code gets too complex, split it up into views and widgets. There's no significant difference between what you're doing in the node code there and what you should be doing on the browser side. How much, if any, of that you choose to use in this specific case is completely up to you; but you asked, how do people deal with large files. The answer is: they don't use large files. 
If you want to be taken seriously in a blog post, you might want to scan back over your post and fix any spelling and grammar mistakes. &amp;nbsp; &amp;nbsp; &amp;nbsp; Otherwise, that's neat information.
Thanks for that! Never heard that tip :)
Brilliant point. Overlooked that! Thanks :)
Awesome. I'm not sure why it wasn't there in the first place
My apologies, I'm a newb to reddit Where would one post an app looking for feedback? It's built with web technologies, so i was looking for people interested in web tech to give me feedback
Looks great, but seems that to 'consume' space characters rather than treat them as significant.
Really? I've run some experiments and I don't really see that. /^ \S*?\/blah(\d+)$/ http://www.regexper.com/#%2F%5E%20%5CS*%3F%5C%2Fblah(%5Cd%2B)%24%2F The initial whitespace is preserved and displayed in the resulting graph ----- /^\s\S*?\/blah(\d+)$/ http://www.regexper.com/#%2F%5E%5Cs%5CS*%3F%5C%2Fblah(%5Cd%2B)%24%2F The whitespace is explicitly shown as "white_space" (as \s isn't just the space character) ---- Now let's compare more complex cases: /^ {4}\S*?\/blah(\d+)$/ http://www.regexper.com/#%2F%5E%20%7B4%7D%5CS*%3F%5C%2Fblah(%5Cd%2B)%24%2F This accurately indicates that the space character should be repeated 4 times. And ditto for /^\s{4}\S*?\/blah(\d+)$/ http://www.regexper.com/#%2F%5E%5Cs%7B4%7D%5CS*%3F%5C%2Fblah(%5Cd%2B)%24%2F ---- Now on to where I think you're having a problem. /^ \S*?\/blah(\d+)$/ http://www.regexper.com/#%2F%5E%20%20%20%5CS*%3F%5C%2Fblah(%5Cd%2B)%24%2F This actually does preserve the whitespace. If you inspect the code, you can see it. All that's happening is normal browser behaviour of condensing whitespace. Of course, regexper could work around this by setting `white-space:pre;` on those elements/classes. 
I'll send you the source code in a few days; remind me.
Well you can always check for undefined in the cases where you may need it.
Not mine, first time posting here, wasn't sure where it belongs
Yeah not sure where it belongs either. If the author made the source freely available it'd be a good post here, but as it is, not so much (probably why it didn't get many votes). No harm done though.
&gt; It's built with web technologies, so i was looking for people interested in web tech to give me feedback The problem here is that....this includes every website known to man, so that quality alone doesn't make it a good topic for /r/javascript. And it depends on the type of feedback you're looking for: * "Is this a good UI design?" =&gt; /r/Design_Critiques, /r/learndesign, or /r/web_design (see /r/design's sidebar) * "Is this useful for iOS/Android?" =&gt; /r/mobilewebdev, /r/androiddev, /r/iosdev, etc. * "Is this good JavaScript code?" =&gt; HERE! But you have to provide the code. We can't critique obfuscated code.
1. It's better for re-usability. A function can have different default arguments in different contexts. 2. It's clearer. You don't mix what the function does with semantics of how to use it.
FYI: Firefox DOES support the Web Audio API. In fact, IIRC, Mozilla pioneered the API. https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API EDIT: I noticed that the article claims it should work in Firefox 25+, but I got a message in Firefox 30 saying that it wasn't supported.
It's _so_ 10 months ago.
While pretty cool, I'm not positive this belongs in this sub. Generally we like there to either be some code, or at least discussion of code, but basically not just a "look what I made!" post (unless you include a technical discussion of how you made it or something, and I'm not sure saying "I use the Web Audio API" really counts). Is there a github or similar link to the code that I'm missing? For example, if I wanted to use this, would I have to basically reverse engineer everything?
Sorry about that. duly noted ffr. The code is just in the body of the page if you want it... 
I'm going to go ahead and remove it then. Feel free to resubmit as a better discussion piece, though. As an example of what most here would consider a good submission from today's front page: [Playing with ECMAScript 6 at Rdio](http://www.reddit.com/r/javascript/comments/28edll/playing_with_ecmascript_6_at_rdio/). As you can see there, it's not so much a "look what I made!" post, but a "let me show you and explain some code".
hmmm, I guess my web api detection is off. I only had access to 24.5 when I was writing it. Will have a crack on 30 this evening. Thanks for letting me know BTW.
The problem is that this: `var ctx = new(window.audioContext || window.webkitAudioContext);` Should be this: `var ctx = new(window.AudioContext || window.webkitAudioContext);`
So it is. Thanks :-)
There is no safety in JavaScript. :)
Web browsers have supported actual integers through [typed arrays](http://www.khronos.org/registry/typedarray/specs/latest/) for several years. What they don't provide is a 64 bit integer type, but any code that needs such a capability (which is relatively rare in the context of a browser) can implement it through a BigInt library just like in any other language. 
Yes and no. No, because most JavaScript engines already use actual integers internally if code only works with fractionless numbers. Yes, because JavaScript can’t handle 64 bit integers. That causes problems with various APIs, especially ones with integer keys: databases, Twitter, etc. Adding integers to the language is relatively complex, but still a priority. It may happen as early as ECMAScript 7 (in about 2 years).
I doubt Eloquent JS is out of your scope. Have you try reading it? Just don't make the silly mistake of stopping at the first doubt. This is programming after all, you need persistence.
But 64-bit integers are the type that shouldn't need a whole library. At least if it is done through a library, it should be offered by the browser, with the aim of optimizing most of it away (so you are left with a 64-bit integer for most of the time).
jammin out to 'unexpected token' right now 
Bump up the synth in the mixer function for maximum jammin'. &gt; + 0.518 * synth
I actually haven't tried reading much of it, but I've read a review that scared me away from buying it (again, need a hard copy book): "this book is a pleasure to read only if you already have some experience with programming and with javascript. Yes, I mean it.. this book is indeed modern, but as "an introduction to programming" .. it' s an epic fail... its style is way too concise and terse, the author jumps from the very basics to elegant and cool functional tricks in no time.. way less time than a real novice would need. Also the code is basically all over the place, and in no condition to be run "as is".. Abundant and easy to download, copy, modify and run code is a must for a good intro to programming..and the code in this book meets none of these criteria..The code examples are interspersed in the online edition of the book (which you can read for free.. yeah! at eloquentjavascript.net).. good luck on trying to execute the non trivial ones..and even more luck if you want to play with them on your own.. And last but not least, the "dom and browser" part of the book is ridiculously skimpy...again.. could be useful to someone already familiar with the subject to consolidate his ideas, but hopelessly inadequate for someone trying to figure out how , when and why to use JavaScript for web programming and design.." The author of this review recommends Professional JS for Web Developers, any comments on that? Would you recommend that over Simply JS? Or do you disagree with his comments? 
Again, it's relatively rare that you need to use 64 bit integers in a web browser. If you're dealing with database IDs or other types of identifiers, just leave them as strings. If you're doing hashing or crypto, then you're probably going to need a BigInt library anyway for other reasons. I posit that the lack of 64 bit integers has never actually prevented anyone from doing something in a browser that they wanted to do. If it had, then the clamors of the masses would have convinced browser implementers to support it. That is, after all, how new features make their way into the browser -- by people recognizing a need that is not being fulfilled and championing it. And of course the usual problem arises that even if you implement something today, in one browser, it will take several years and all the other browsers following suit before the feature has a chance of being widely useful, so you're going to be stuck with fallback methods anyway. 
I'm not the creator, it'd be cool if they/he open sourced it.
&gt; ECMAScript 6 will probably provide the following constants &gt; [...] &gt; It will also provide a function for determining whether an integer is safe And here's the problem with a lot of ES6, right there. Anybody who could understand what the point of these constants and functions are, are perfectly-capable of writing them as well. It's six lines of code. Putting things like this into the language standard is a waste of time. If ES6 wanted to allow leeway for implementations to provide an actually-useful native 64-bit integer type, that'd be one thing. But as long as the "every number is a double" idea sticks around, this is totally worthless.
&gt; that's not something that can be fixed by any pattern other than understanding the problem. Precisely!
I really can't comment on that. My first programming book was K&amp;R2, which is a book on C lots of people say it's very hard. I personally just think people give up too fast on these books. This book has, specially, many bad reviews from beginners because it combines a requirement to do a lot of thinking and effort yourself with the difficulty of C. Some books will require you to make more effort. They expect you to do more work/thinking. And some people don't like that. They want somehow everything 99,99999% done so they can just make a little effort and barely think and get over with it. If we could have courses which were like that and taught good programming, I'd want that too. The point is that we don't have such courses. I'm not sure if you've been programming before or not, but you learn the most when you make lots of effort and thinking throughout the process of a course/book/... These books which make you read something, and then re-read it 10x again so you can just understand a page aren't necessarily bad. They could be, but aren't necessarily. I've seem many people complaining at my university course, for example, because the professor didn't give them everything they needed to finish a project (sometimes the professor said he would, sometimes it'd be __really__ good if he did). But then, you could look those things up on other books, google or even in some cases build it yourself in the case of code. I usually did that sort of thing without major problems while other students would complain quite a lot. Lots of people just want to read the book as a story. They want it to be self-contained, linear, simple and just full of entertainment like a story is. Learning from books is seldom like that. You need to read, re-read, try out, look things up somewhere else, ask questions to people, check wikipedia, get trolled at IRC (=D), go back in the book a bit, take a peak into the next chapters, have other back-up materials to check once in a while, etc. It's just that to finish a book, you're expected to do some amount of work. For some books, you have to do more work than for others. I found Eloquent JS particularly easy, but then I read it last year and I've been programming for 7 or 8 years now. That said, I don't know about most JS books (obviously =D). I've read Eloquent JavaScript and JavaSript The Good Parts. I liked both. Crockford's isn't targeted at people first wanting to learn JS, so it's probably not a good idea now. That's all I can say.
(Related) This JavaScript Jabber podcast touches briefly on the subject of immutability: http://javascriptjabber.com/113-jsj-community-dynamics-with-reginald-braithwaite/
+1 for Eloquent. Ignore the "slipcover" and give it a read.
&gt; Again, it's relatively rare that you need to use 64 bit integers in a web browser. You are forgetting about modern web applications. For a web page, sure, no need for 64-bit integers. For a web application that uses local storage, encrypts data client-side, handles binary arrays, uses web sockets, or whatever stuff you can think of; then a true 64-bit integer type is useful or even needed.
I have been teaching myself JavaScript, and the best book for JavaScript newbies that I have come across so far is **Head First JavaScript Programming** by Eric Freeman and Elisabeth Robson. It only assumes a basic knowledge of HTML and CSS. I highly recommend it.
Array.unshift() might be better. That way the lookup for the link can always just be myShuffledArray[0]. Just a bit cleaner IMO.
I misspoke, it isn't a coercion. The point is you want a one cycle compare to undefined instead of burning hundreds of cycles comparing strings.
isSafeInteger operates on doubles (NaN, infinity issues, not constrained to range of 32 bit integer) and handles standard built-in API contracts (handles all types, uses internal ToInteger operation) I'm happy this exists. It might be 6 lines, but it's subtle code and would definitely be a source of bugs if hand-written. Anyway, 64-bit integers are coming. It just turns out that they are many orders of magnitude more difficult to design than adding quick utility methods like Number.isSafeInteger.
Yep, Leaflet is really cool. [This page](https://www.gaiagps.com/map/) from my former employer is built with Leaflet, it was one of my first big JS projects, although I haven't been involved with it for awhile.
Doh, you are right, it is easy to get too (this is what I get for not reading the source code :))
Woo! http://recordit.co/dBgMnxsHVc.gif
The most important thing you can do is learn to read the profiler output. Don't optimize until you've actually verified there's a problem.
/r/dailyprogrammer
A timestamp of that kind is of the order of magnitude of about 2^(57), which means by using a IEEE double with 53 bits of mantissa you lose approximately 4 bits of precision, meaning you're within 1600 ns or 1.6 &amp;micro;s which is far within the margin of accuracy of most system clocks. If you really need full precision you can use a typed array consisting of two 32 bit integers and do any addition or subtraction as a pair of operations. It's only a couple extra lines of code -- you'll notice that the Win32 API even was designed specifically to work like this by having the `FILETIME` structure consist of two `DWORD` fields, because prior to C99's introduction of `long long` there was no guaranteed support for 64 bit integer math in C, so the platform had to be usable by C90 compilers that didn't have it. (MSVC prior to VS2013 only supported C90, but it did at least gain a non-standard 64 bit integer type somewhere along the way.) Again, I repeat -- lack of 64 bit integers has never prevented anyone from doing anything on the web. 
Works perfectly for an immutable struct, less so for a struct that is closed for modification but open for extension. There are some use cases for that.
I like your framework a lot but I'll offer this feedback: * Why do you need extra tilde syntax? Instead, just evaluate expressions in double-moustache markup * Likewise, why require special sn-prefixes for attributes? Couldn't you just use double-moustache markup in attributes? * I think it would be clearer if "sn-repeat" was "sn-foreach". Also, if you made the syntax sn-foreach="i in colors" then the user could specify their own index variable instead of having to know about "loop-index." This would also allow the loop variable to be a key (string) and not just an array index. * When using sn-scope, couldn't you just assume "this" on property references instead of requiring "this.property" everywhere? Other than those syntax suggestions, the framework has a lot going for it, especially the scope and capturing features. It does a lot for its small size. Good job.
Some grammar errors (I think) near the end; sorry, too lazy to open an issue... &gt; Taking this same reasoning to immutable structures, some would argue that the extra infrastructure required to create immutable structs is not warranted `is` the sole objective `to` to prevent inadvertent errors. s/is the/if the/ ? s/to to/is to/ ? &gt; To be of benefit, immutable data structures (like immutable structs) are only of benefit `is` we can “turn them up to eleven” and realize some new benefit, if we incorporate paradigms like copy-on-write and build high-performance and high-reliability code around immutable data. s/is we/if we/ ? ---- Otherwise, I enjoyed the article. I think I need to learn some Clojure or similar, because I can often see the utility in what you write, but the code I commonly work with is superficially not very compatible with the concepts, so I feel like there are larger, fundamental challenges that I'd need to overcome before I could do it properly.
I don't believe any of this is true. What is poor practice in 5th edition? Are you specifically talking about the DOM sections? It covers the language as a whole, regardless of browser implementations.
I have the 6th edition. As a newbie, it is a little over my head, but it seems like it would be an excellent reference for more advanced JavaScript programmers. The 6th edition added material for HTML5 and ECMAScript 5, which I think are both very important topics.
Check out this link: http://www.sitepoint.com/kickstart-your-angularjs-development-with-yeoman-grunt-and-bower/ I'm using my own build tools these days but I started with this article to get the basics of modern web development. It has links to all the relevant github repos, etc. Good luck and happy hacking.
You really could have put "angular" in the title.... now I am disappointed.
If you want to learn how the comma operator works or how to make sense of the Date object, the resource is invaluable. Reading any part of it will make you a better JavaScript developer. As an aside, I would get the most recent edition, which appears to be six at this time.
&gt; the code I commonly work with is superficially not very compatible with the concepts, so I feel like there are larger, fundamental challenges that I'd need to overcome before I could do it properly. I think you've hit the key point. Some ideas from other languages and/or communities can be applied in small doses. Others demand a heavy commitment in order to really boost productivity. Is it worth it? I dunno, but I generally think that being aware of these techniques is always a benefit, even if you don't choose to do a radical redesign of your next project.
It is still relevant, but I always end up using [MDN (link)](https://developer.mozilla.org/en-US/docs/Web/JavaScript) instead. Simple search google "apply MDN" or something simulare. 
"New chapters in this edition document jQuery and server side JavaScript." says in the full description of the 6th edition. I haven't read it, but for what it says, apparently it will not be obsolete for a long time.
its helpful for newbs, specially if they're looking for other subs. EDIT: I failed english.
Indeed. I've been writing system libraries for a JS VM that targets 64bit systems and a number of APIs expect/return 64 bit ints - I ended up just hacking some minimal support into the engine to (partially) work around it.
It seems broken: Failed to load resource: the server responded with a status of 502 (Bad Gateway).
the mods are in talks.
You pulled the example about for ... in from the section explaining what it does. The point of that example is the for in, which is a correct usage, the document.write is just a method of logging, it's not meant to illustrate how to write production app quality. The loose equality examples are in a very same vein, and I'll agree it's stale. Absolutely nothing wrong with extending natives for handling polyfills. Besides polyfills, Ember attaches to Function.prototype and it's working fine for them. Edit: Updated wording to be a little clearer.
About the shimmable features you can check [this](https://gist.github.com/Raynos/1665192) gist. On the module specification, I thought it was already a closed discussion but [I was clearly wrong](https://gist.github.com/caridy/eefb9b104874465d4e1c). And the [reaction](https://twitter.com/domenic/status/475354364874211328) that generates of course is controversial because the community starts to doubt about to use ES6 or not for the lack of maturity. You can check [my first talk](http://slides.com/alejandrooviedogarcia/es6-your-new-friend) on ES6 for more info and resources.
is it wrong?
&gt;Why do you need extra tilde syntax? Instead, just evaluate expressions in double-moustache markup Likewise, why require special sn-prefixes for attributes? Couldn't you just use double-moustache markup in attributes? It might be a pre-mature optimization, but I thought it would be a bit faster if the user can mark the sections that needs to be evaluated as against those whose value can just be looked up. Since this check has to be done for every attribute in the document, I thought the savings could be significant. &gt; I think it would be clearer if "sn-repeat" was "sn-foreach". Yes, I agree. I used sn-repeat just because of ng-repeat of angular. &gt; so, if you made the syntax sn-foreach="i in colors" then the user could specify their own index.. I have considered and will be probably the next thing I add. One thing I was concerned about this is the abuse of variables from 2 or more levels up. By limiting loop-indexes references to a certain format, I thought it might improve readability a bit. &gt;When using sn-scope, couldn't you just assume "this" on property references instead of requiring "this.property" everywhere? I thought having {{this}} to refer to immediate scope would be more consistent and also help to avoid name collisions with top level variables bound with the 'bind' function. Anyway, now I am not sure if it should allow bindings to more than one javascript object at a time. If I restrict it to one object then your suggestion can be implemented.
AngularJS creates an IoC container within each of its modules to allow DI. 
(slowly, apparently)
&gt; You pulled the example about for ... in from the section explaining what it does. Yup, and wouldn't you expect that `hasOwnProperty()` should at least be mentioned? While it's covered elsewhere, it's never mentioned within the context of for..in. Examples for other features do show proper usage, but that's not explained or highlighted. I personally wouldn't call it a _definitive_ explanation if it doesn't warn you about one of the most common error associated with it (especially when advocates modifying prototypes). &gt; The loose equality examples are in a very same vein, and I'll agree it's stale. Ok, so do you still think "I don't believe any of this is true"? :) &gt; Absolutely nothing wrong with extending natives for handling polyfills. That's an opinion -- I still don't really like it. Just this week I [removed one](https://github.com/davidstutz/bootstrap-multiselect/blob/master/js/bootstrap-multiselect.js) because it was causing issues. IMO polyfills are fine, but they should be either opt-in, or handled separately by a dedicated polyfill project. &gt; Besides polyfills, Ember attaches to Function.prototype and it's working fine for them. I don't agree with that either, but I don't use Ember so more power to them if they like it so much. But just because project X does it, doesn't make it unequivocally "ok". I mean, Bootstrap is probably more popular than Ember, and they [refuse to use semi-colons](https://github.com/twbs/bootstrap/blob/master/js/button.js), apparently without causing the sky to fall. That doesn't make it a best-practice (or even elevate it out of bad-practice) in my opinion.
won't this just work for 1 button? 
because node is lame, try php with xdebug and eclipse for slapping server code together quickly and gobs of inexpensive hosting options.
if your concerns are cheap hosting, youre already going to have a bad time.
If you don't care about the costs, then I'm not surprised you would completely reinvent the wheel w/node, just so you don't have to learn another language. HARDLY the only concern w/node, there is a huge list of issues w/it.
First up, need to add some data-attributes to the textcontainer items, (I also got rid of ID because it's not necessarily needed with this solution) &lt;div id='textcontainer'&gt; &lt;div data-button="button1"&gt;Text1&lt;/div&gt; &lt;div data-button="button2"&gt;Text2&lt;/div&gt; &lt;div data-button="buttonn"&gt;Textn&lt;/div&gt; &lt;/div&gt; Then this click handler should work : $("#buttoncontainer div").click(function(){ $("#textcontainer div").hide(); $("#textcontainer div[data-button=" + this.id + "]).show(); }); I haven't tested this at all so there might be syntax errors or something I missed. Using data attributes in this manor seems cleaner than parsing out the id using strings. All you need to do to ensure it still works is give 'data-button' the same value as the related button id.
Explain how im reinventing the wheel with node? Are you going to be one of those people who says "Well Twisted has done that for X years", because I know. EDIT: I use node because other people dont know other languages, not because I dont. If i had my way, all our code would be C++. With that said, youre talking to someone who has used the v8 system exclusively outside of node and included to other projects, so please, enlighten me. 
This is a moot point. Node still runs on javascript and is relevant to the language. edit: a word
So you willingly use naive server programmers, and that makes it awesome (and I'm the one having a bad time?!?). We use JavaScript on browsers because we HAVE to, it is far from ideal or productive compared to mature server products. If anything the push should be for a better browser language. 
Yes but single-systemitis isn't a good thing, endorsing php makes sense in the bigger picture IMHO.
But this isn't /r/php this is /r/javascript and node is built in javascript. Therefore your point is still moot.
http://jsfiddle.net/zQhG7/ any given a in #buttoncontainer will fire a click event. it will get this attr href as an object identifier. the tab that matches that identifier will show(); also means that screenreaders and googlebot will be able to correlate the button to the related info. no extra markup, no data attributes, nothing. just match names and go.
Currently I am using RequireJS. I have a class "Class1" in its own AMD module. An instance of Class1 is created in my "main" function (the require() call) and several of my other application objects rely on this Class1 instance. Right now I setup the application objects that depend on the Class1 instance in my "main" function so I can pass that reference in, but "main" is getting kind of long. This is why I was thinking of creating a container where anything that needs that Class1 instance, it can just ask for it from the container. But I like what you said about how I should leverage my current module system (AMD). Should I make another AMD module that returns this class1 instance? I guess that would be kind of like an Angular service. Do you have any ideas on good folder/file naming conventions to distinguish AMD modules that return classes and AMD modules that return specific instances of those AMD module classes? ============================================================= EDIT: Actually thinking about it, if I were to leverage another AMD module for instances, this would make testing difficult since anything that modifies that instance would change its state and could affect other unit tests that rely on that instance. I think RequireJS is better for class loading instead of for managing instances. That's why people still use RequireJS with Angular. With Angular, you have $provide to swap out a service during unit tests. With require, you dont really have that, or you'd have to hack up something for your test suite. EDIT AGAIN: I just realized that since JS is dynamic, anything can be mocked or spied on. So having AMD modules for instances and classes would work and testing would be fine. You just have to mock out instances which is what should be done in unit tests.
What's with the PHP hate?
Dude... You're a PHP shop the very definition of naive server programmers.
A hahahahaha. Just doing his part to try and keep the php stack in play for modern web dev. After learning c++ as my first foray into programming, php and node are both weird, but node at least with node I can look at someone else's code and find my way around. I feel like I'm wading through an unfinished corn maze in php. 
Funnily, you used the only form of "there/their/they're" that doesn't work in that sentence. "They're" is obviously correct, but even "there" could have been technically correct if it refers to the location of the sidebar. I doubt you care about grammar much, but I just thought I would point out an instance of misuse that is funnier than most.
derrr, no I actually try my best but today my head is spinning from allergies, thanks for catching this.
A VPS is like $5/m nowadays. PHP's cheap hosting advantage is gone.
Biggest issue I have with anything the angular-ui team create is their jquery way of thinking. If it needs to be animated, they modify stuff with javascript, when they should be using classnames If it needs styling, they use javascript, when they should be using classnames if it needs templating, they use javascript concats, when they should be using angular templates 
Hell, you can most small apps for free, doesnt matter on what language
 result = inputstring.match(/[a-z0-9]/gi).join('') (I know this is not efficient for long strings or for lots of string but for most cases, it will perform fine.)
"To be of benefit, immutable data structures (like immutable structs) are only of benefit is we can “turn them up to eleven” and realize some new benefit". If you are using React, a benefit you get is to be able to implement shouldComponentUpdate and avoid re-rendering that entire sub-tree if nothing changed.
Mod/creator of /r/node here. I've been talking to a /r/nodejs mod (/u/s5fs) but it's really up to the /r/nodejs creator (/u/kahwee) to decide whether it makes sense for their subreddit or not.
Opening a whole can of worms.
Just to be a pedant, node is not built in JavaScript.
also posted as a comment on the blog post, but in the Constructor section of this post, the author says that after new-ing up a new superhero object, to add a default "sayHello" method he uses function SuperHero(name, strength) { this.name = name; this.strength = strength; } SuperHero.prototype.sayHello = function() { console.log('Hello, my name is ' + this.name); } var superman = new SuperHero('Superman', 100); superman.sayHello(); is there any advantage whatsoever of doing this vs something like the following? function SuperHero(name, strength) { var name = name; var strength = strength; this.sayHello = function() { console.log('Hello, my name is ' + name); } } var superman = new SuperHero('Superman', 100); superman.sayHello();
Wow really? Setting up nginx with node, and coding some javascript is really fucking easy. Not to mention the coding standards are similar to every other language, unlike PHP...
Excellent example, thank you!
I did code cademy. It was ok. But stuff really started to click for me after the book effective javascript
Because the side bar is for related subreddits, it's not a list of 'languages I think are cool'
I like php Php users don't wank on and on about it like (a small, loud minority of) node and Ruby on Rails users "ooooh node is sooo cooool look at me using javascript oooh fuck me on github"
PHP? That's not node. Why would you use a language that has been used on millions of sites worldwide when you can use a trendy javascript runtime? Next you'll tell me your personal website's TLD isn't .io.
&gt;onunload is an event designed to allow you to get any last minute functions executed before the window is dumped. That's what I'd thought beforeunload was for as upposed to unload, but apparently not. How would you reliably check for when a window has been closed?
i like that php is there. 
This man is right! We must link to /r/cpp right away!
ah, so beforeunload is triggered before any unloading processes begin. in this event it's possible to trigger preventdefault or whathaveyou and completely cancel the closing of the window. onunload on the other hand executes after the call to unload the window. For all intents and purposes, once onunload has been triggered your window is closed and is in the process of finishing up any calls you might have in the event and deallocating resources. The fact that onunload has been triggered at all should be enough validation that the window is closed as it's an irreversible process unlike beforeunload. TL;DR: if you need to give the user a chance to cancel out, use beforeunload. else, use onunload. beforeunload was created by MS in IE4, so i'd imagine that's why the two seem to compete.
You might find articles, but "Brendan Eich banged it out during the course of a week, then eventually we formed a committee to govern it." doesn't really a whole book make.
You need to disable zooming for mobile devices. It makes it nearly impossible to play if you quickly click (as you do in tetris). 
Well, yes, but I wasn't commenting on that style of default. I guess `-Mahn` meant to encompass any non-library method of providing a default value.
It seems a little silly to use the DOM for this, but hey, it works.
I have written a blog post that should be close to what you are looking for. It includes a list of sources with further information: “[JavaScript: how it all began](http://www.2ality.com/2011/03/javascript-how-it-all-began.html)” 
I second [Codewars](http://www.codewars.com) and also recommend [Coderbyte](http://coderbyte.com/). [Project Euler](https://projecteuler.net/) WAS a good site but unfortunately they're down due to security issues, possibly for good but who knows.
It is disabled using https://github.com/skidding/flatris/blob/master/index.html#L6. Works for iOS, what device did you test on?
You're right, it is a bit silly. The main purpose on this project was not the game itself, but to showcase web technologies that seamlessly generate DOM for your data structures without ever having to touch it yourself (jQuery style). It's more of a "if you can make a game so easily, building generic user interfaces is a piece of cake" proof of concept
V8 actually does contain a over 0.5 MB of JS though.
http://codegolf.stackexchange.com
As someone who is trying to learn Haskell and thus participates in that community, you have NO IDEA what true programming language wankery looks like.
I quite enjoyed this foreword by Brendan Eich in a nodejs guide.. http://chimera.labs.oreilly.com/books/1234000001808/pr02.html
It's not your fault, English is the PHP of natural languages.
Please use the link recommended by /u/ChristianBundy &gt; /r/node+nodejs
As I recall, it started out as a scripting language for command line scripts, called Cmm (C minus minus), in the 1990s. No, [not this](https://code.google.com/p/cmm-lang/), I don't think, [nor this ](https://ghc.haskell.org/trac/ghc/wiki/Commentary/Compiler/CmmType); apparently, the name has been recycled. Repeatedly. See [this](http://p2p.wrox.com/intro-programming/44627-scripting-languages.html#post174596) for a compact writeup on Cmm the precursor to Javascript.
The real question is: what's the connection with PHP? They're both programming languages for the web. That's it. And that isn't much. Not enough for me to call it a "related subreddit".
wow, http://i.imgur.com/DKxfHXy.gif
He also did loads of talks about it at Javascript conferences.
HTC One 
Oooh, I liked your first appearance on jsj. Going to listen the shit out of this one. 
Right, but my issue is determining whether a window has actually been closed. My app has a scenario where a user can open an arbitrary number of child windows that I need to keep track of. I can't remove them from the array on unload, because unload is fired on refresh as well as on close, which is why I'm checking window.closed, so checking it after a short timeout is the only thing I've been able to come up with.
Ah, that makes sense. Thanks for the clarification!
thanks
Take a look at https://github.com/c9/architect.
Eric Elliott, the author, is also offering an online course based on this book: http://learn-javascript.ericelliott.me/prelaunch/
The history of JS and ECMAScript is covered in some detail in [Professional JavaScript for Web Developers](http://www.amazon.com/Professional-JavaScript-Developers-Nicholas-Zakas/dp/1118026691).
PHP is a fractal of bad design. That people can be successful in spite of that fact doesn't change the fact that the language is dreadful. 
Wow, in a week? That's so cool. I bet the story leading up to it is pretty interesting. Lots of good suggestions in this thread to check out. Many programmers write well, of course, but I do wish professional authors and magazine writers would dig into this stuff more often.
how come php is a "related subreddit", then? last time i check it was a language too
Thanks for sharing, but this isn't a good post for this sub. Generally we like there to either be some code, or at least discussion of code, but basically not just a "look what I made!" post.
Am I missing something? This doesn't appear to have anything at all to do with JavaScript.
Do you plan on doing more with CreateJs or just sticking to EaselJs. Would love to see more, been thinking about learning to make some simple games with javascript.
yup! https://github.com/rsahai91/WhatsGroovy
Thanks for understanding, and please feel free to resubmit as a better discussion piece -- maybe you want to highlight the libs/frameworks used and talk about what you like/dislike about them, or maybe you decide to put the code on github, etc. It might also be a good post for something like /r/InternetIsBeautiful.
You're right, but if the answer to his question is yes, I would expect the his next question would be "what is the solution". So I jumped to that.
I really don't like the idea of addEventListener in MVC and single page apps. The problem is that the handler is never garbage collected. If it is never garbage collected then odds are there are multiple instances of the same callback exposed to the same events each time the DOM elements are drawn to the page. I would much rather just bind events to node properties directly so that they can be garbage collected the moment the reference to the DOM node is destroyed or when clobbered by another handler being assigned to that same event.
Imgur needs to use this.
It's 4.3MB of compressed code, as soon as emscripten supports proxying webgl to canvas from a worker that'll be taken care of. https://github.com/kripken/emscripten/issues/2396
Brownie points for anyone who can manage to find a minimizer (including Google Closure) that can manage this.. uglifyjs2, minify and closure all crashed my computer. https://raw.githubusercontent.com/trevorlinton/webkit.js/master/bin/webkit.bin.js
Interesting - I didn't know about that particular problem with addEventListener. Is there a particular way you would suggest binding the events to the node properties?
Very useful post.
You're defining productHeight and titleHeight outside of the loop. As the loop cycles, it will update the counter i, but it is reading the same variable over and over again.
Try this $(this).find('.productItem').each(function(index, item){ console.log('#' + index + ' has height of ' + $(item).height()); }); It's only grabbing the first element's height because that's all productHeight or titleHeight is ever set to.
huge thanks! 
thanks!
checked, its not same as one I showed: http://camelcamelcamel.com/Toshiba-Canvio-Connect-Portable-HDTC710XK3A1/product/B00CGUMSZC
Doesn't seem to work in Firefox, works in Chrome though.
Pointless? Yes. Impressive? Yes. *So meta*
Thanks!
That's fine, I've used AMD modules in a project before, very nice to have. Revealing modules are however a good starting point, and how a lot of separation is still done in apps that have been around for several years. It will be nice when ES6 is fully finished. 
Can you put this in layman's terms? I'm still struggling with "why?" on this, besides an exercise in academics. Kudos for doing this as I'm sure it's really smart, but I'm not familiar enough with the things you're referencing here to understand why you'd put so much effort into building this.
Basically one day your browser will just be an opengl context ( a way of telling your graphics card to paint something ), javascript, websockets, webworkers and maybe some audio/video apis. Rendering is more than likely going to move to be straight javascript, browsers will refocus on features, functionality, integration with the OS for a true "app" feel and security. 
It's possible we'll get there, but the minimal developer overhead with html &amp; css is pretty hard to ignore. I really need to look up how the rendering pipeline of the browser works, but if that was to run more on the GPU, it could help a lot. Do you know what the browser uses for rendering at the end of the day? Something similar to that of GUI components in a desktop app, like you would build with QT?
What's the cause of the crashes? I mean, is it bugs within those tools or just a lack of resources on your system?
Nice that you're experimenting with emscriptten! I love it! Anyway, emscripten can actually compress code it self with the --compress stub! You can read more: https://github.com/kripken/emscripten/wiki/Compressing-Downloads
The standard analogue to `innerText` is `textContent`, which works everywhere except IE &lt;9. There are [a few differences](https://developer.mozilla.org/en-US/docs/Web/API/Node.textContent#Differences_from_innerText) though.
Yeah, it's almost impossible to write a true comprehensive guide if you're considering all the "MyCoolThing.js" libraries and frameworks out there.
No idea, closure ends up producing invalid output. Minify/uglifyjs2 spin up to over 8GB of memory then kapoot.
I have a 12gb system at home I could try it on, if you think it might work I can certainly give it a try.
Lynx.
Was about to point of how ironic the title is ;) EDIT: AFAIK there should be some ES6 features already available in latest Chrome and/or Firefox
yeah, the !! trick may work in the case of a null check, but a !! preceding an &amp;&amp; statement definitely seems goofy.
webkit.js uses the exact same code base as QT, GTK, Apple, Chromium. Everyone uses software drawing/painting. Almost all use compositing, most use accelerated compositing. The next (and probably final) step in rendering is getting primitives to draw with GL. When you use HTML and put text on the screen a font library kicks up, calculates all of the shapes sends it to a graphics library like Skia or Cairo and that is rendered to a bitmap, put into either GL as a texture (think of it being painted on glass) then the seperate peices of classes placed over each other (compositing). GLSL/Vertex Shaders have the luxury of asking the hardware to do this. You completely skip compositing, painting, everything. You upload your shape, and a texture (color, gradient, image, whatever) then hit render and the GPU takes it from there. This is essentially how 3D video games have worked for a very long time. Due to a range of issues from standards, patents and complexity its never really made it into webkit or any other browser i know of. I do (or at least I had heard) chromium was making a new "backing layer" to Skia called Ganeash, which does just this. But I about 8 months ago I couldn't find a single reference to any of it in their sources. 
The link to report bugs, has bugs.. it's experimental :)
Do you really need me to reiterate points you already know? Next you're going to start making a case for Visual Basic.
Thank you for your feedback! I was a little torn with what to call the post here in Reddit, as I wasn't sure people would automatically associate EaselJS with games :) I think Grunt is an important tool to teach, because it becomes increasingly difficult to write larger JavaScript applications without a proper build tool. 
We need to go deeper.
There are also ES6 features in Node with the harmony setting. That being said, ... 1. There are transpiled languages that do a lot more than what ES6 does. ClojureScript is a good example. 2. Where do people think the ES6 features came from? CoffeeScript, for one thing. If we didn't have CoffeeScript to prove that JS developers like fat arrows, rest parameters, and so on, would they have made the cut for ES6? Eventually there will be an ES7. My best is that at least half of the features in ES7 will be cherry-picked from transpiled languages that establish their value.
It is purely a lazy way to cast to bool iirc. I personally hate it do to its confusion with readability.
I'll definitely have to check it out. I would assume it would be really easy to interface with ESRI services since those services spit out JSON. I would think it should be straight forward to massage it into a way that Leaflet can understand.
A for loop has three basic parts, the variable counter, the condition, and the iteration. So in a for loop like for(var x = 0; x&lt;100;x++) you have the first part declaring your starting counter (though this does not necessarily have to be an integer) The second part is the condition you are saying run this loop until this condition is no longer true. In this case until x is greater than or equal to 100 The last part is your iteration. I basically is just the condition applied to your counter each time the loop runs. In this case x++, or we are incrementing x by one each time. The for loop is basically a shorthand construct for the while loop. The above for loop would be read by the engine as something more like var x =0; while(x&lt;100){ //do something x++; } 
I don't understand why this wouldn't be a function of the view.
I'll try tomorrow at work on my 64GB workstation
Before we get into the parts, we need to understand when you use them, as they have a subtle difference. A **for** loop is for 0 to N definite iterations. What this means is you know before the loop executes exactly how many times you want to run it. This often is in the form of a length or a variable. A **while** loop is for 0 to N indefinite iterations. What this means is you do not know how many times you want to run the loop, but some conditional will let you know when you are done. A third type, a **do while** loop is like a **while** loop, with the only difference being it is for 1 to N indefinite iterations. You don't know how many times you want to run it, but you know it is going to be at least once. Now with that said, we can easily figure out what the different parts of the loops are. If you recall, a **for** loop is for definite iterations, so to control that we need a variable to know where we are, a stopping point, and a way to change where we are. Example for(var i = 0; i &lt; 10; i++) { console.log('foo'); } Here the var i is the where we are, and we start at 0, i &lt; 10 is saying I want to end when i is 10, and i++ means we are incrementing. I could also have for(var i = 10; i &gt; 0; i--) { console.log('foo'); } Which will print out the same thing, but is a decrementing loop. For a **while** and a **do while** loop, if you recall, it is indefinite iteration, so the only thing we need is some conditional to check ever time through. Example while(notDone) { notDone = false; } This will loop once, and the loop sets notDone to false, the while(notDone) will be checked again and since it is now false, the loop terminates. 
It's not pointless. It's a great tool for testing.
I fired a client once in like 2006, before a lot of people had passable broadband, because he insisted I use these 40 meg animated gifs of 3D renders on his business website splash page. They were encoded with a really small color palette and looked terrible. I told him splash pages were bad for usability in general, and he didn't care. I was like, "Can we at least move this to the specific project detail that these are relevant for? Some people are just here because they want your phone number or something," and he wouldn't budge. I tried to explain that people are visiting his site to perform a task, generally information gathering, and *nobody* was going to want to wait 5 minutes for this stupid thing to load before they get any information. That it was like making a 400 yard gilded hallway, lined with panels from a flip book of this thing, that you force people to walk down to get to your bathroom (I chose this analogy because he was an architect). It was like customer repellant, and he didn't care. Some people just want to jerk off on the internet, and they like animated gifs for that.
TL;dr - There's a bunch of things that may one day happen in a future version of Javascript that may fix some of the warts. Therefore, you shouldn't use languages that exist today that don't have these problems. 
but why do it at all, in this situation? the expression will evaluate to something truthy or falsy without the !!.
Thank you! This is insightful! :))) I'm so greatful for you guys &lt;3
Can I save this for my notes? This is the most comprehensive definition I have seen to date. It really put things into perspective. Thank you so much. 
*Grateful
It's worth mentioning that it's not all true. A for-loop works fine even when you don't know how many iterations you're going to use. It's perfectly fine to have something like this: for(var o = setupSomeListLikeThing(); o.hasMore(); o.getNext()) That used to happen a lot in Java with something called an "iterator". (Less common now, because there's another form of for-loop that's even better at handling iterators.) The real difference between a for-loop and a while-loop is that for-loops have two extra parts for initialization and stepping. Any for-loop can be converted to a less elegant while-loop and any while-loop can trivially be switched to a for-loop if you realize you need to initialize something.
A for-loop has *four* parts. 1. Initializer. 2. Condition. 3. Iteration 4. Body. Like this: for( -initializer- ; -condition- ; -iteration- ) { -body- } A while-loop has just the condition and body, so it's the simpler one to understand first. while(-condition-) { -body- } The condition is executed just like the condition in an if statement. The return value of the condition decides if the body gets executed or not. Unlike the if statement, a while-loop will go right back and test the condition again after the body executes to see if it's still true. The simplest way to understand a for-loop is to think of it like a while loop like this: -initialize- while(-condition-) { -body- -iterator } A for-loop is simply a shorter way to write that.
&gt; A for-loop works fine even when you don't know how many iterations you're going to use. Actually, even a for loop like: for(;;) { ... } Is perfectly valid and commonly used. It just loops indefinitely, and you can get out of it using break statements for instance.
Nice straw man argument you have there. Of course you *could* implement any number of things yourself. But obviously the language can't be all things to all people. So, what niche does this actually fill? You can use it to detect what would otherwise be silent loss of precision in simple arithmetic operations, in this one case (overflow of 53 bits). It doesn't help with underflow, doesn't allow you any way to actually determine how much precision is left... I'm really struggling to see how this would be used, in practice. I've run into cases where data coming from an external source included "numbers" that were 64-bit, and you could use this to detect when an incoming number was out of range, but that wouldn't actually help you at all, you'd still need to just treat them as strings. I guess the constants are marginally useful, though again, I doubt that anybody that would use them would find Math.pow(2, 53)-1 any less clear. The isSafeInteger function is hugely problematic, though. What the hell does "safe" mean, in this context? Safe for what? This name is only going to confuse people who will try to use it for some kind of input validation. You have to pick a number to be the "safe" threshold, and it has to either be 2^53 (the last consecutive representable integer) or 2^53 - 1 (the largest integer that can "safely" be incremented by one). It looks like ES6 chooses the smaller value, so "isSafeInteger" will actually return "false" for some values that have been correctly-calculated, so you actually can't even use it in that silly three-way test to figure out if a calculation overflowed. Also, the implementation in Firefox (based on the ES6 spec) does this: &gt;Number.isSafeInteger(new Number(2)) false &gt;Number.isSafeInteger(new Number(2)+0) true Clear as mud. Yeah, Yeah - "nobody use the Number type, anyway". 
All loops operate under the same basic premise. Execute code (possibly multiple times or not at all) until a condition is met. This basically makes them interchangeable with ever so slight modifications. A while loop is more basic in design, you just set the condition it stops under. As long as this statement is not met, keep doing this bit of code as many time as is necessary. A for loop is really similar, although it is structured to allow a little set up in one line. Before the loop runs do this, keep running until this, at the end of each loop do this. At the end of the day they are doing the same thing. While loops exist mostly for when your setup already happens before arriving at the loop, and when your exit condition might happen naturally as part of the code running within the loop. If this is happening you don't really need this extra bit to initialize or iterate anything. Even though the while loop is more basic in design, you'll probably use it for more complex purposes as the for loop is more of a shorthand for setting up more basic loops.
Personally, I consider while(1) preferred for that, but the for version is also valid.
Why? Even though most compilers will remove it thanks to optimizations, while(1) means you're pointlessly comparing 1 to 1 at each iteration, which I personally find ugly. Why use a test when you don't need one?
I just find it more readable. Though I suppose it should be while(true) in a language that actually has "true" defined. Like you say, the compiler is going to ignore it anyway.
&gt; It looks like ES6 chooses the smaller value, so "isSafeInteger" will actually return "false" for some values that have been correctly-calculated You can't tell if a result of 2^53 has been correctly calculated, because the actual result might have been 2^53 + 1. &gt; let x = Math.pow(2, 53) - 10 undefined &gt; x + 11 9007199254740992 See? The result is wrong. Also, the implementation in Firefox (based on the ES6 spec) does this: &gt;Number.isSafeInteger(new Number(2)) false &gt;Number.isSafeInteger(new Number(2)+0) true Why are you using those wrapper objects? Those are pretty weird in general: &gt;!!new Boolean(false) true You really shouldn't use those ever. It's VM machinery which shouldn't have been exposed. &gt; typeof new Number(2) "object" &gt; typeof (new Number(2) + 0) "number" &gt; typeof +new Number(2) "number" If you coerce that wrapper thing to `Number`, it behaves as expected.
A while loop looks like this: while(condition) { code block } The condition must be an expression, and it should evaluate to a boolean value (true or false). The code block must be a sequence of zero or more instructions. When the while loop is encountered, the condition is evaluated, and if it is true, the code block is executed. Whenever the code block is finished executing, the condition is evaluated again, and if it is again true, the code block is executed once more, and so on. However, at any point when condition is evaluated (i.e. when the while loop is first reached or when its code block is finished executing) and turns out to be false, execution passes straight past the body of the while loop and continues with whatever comes afterwards. A for loop looks like this: for(initialization;condition;increment) { code block } It has the same form as a while loop save that there is an initialization component and an increment component. Both should be single instructions, with no extra terminating semicolons (you'll see I've included the two required semicolons there already). The initialization is executed once when the for loop is encountered, *before* the condition is checked for the first time. The increment is executed whenever the code block finishes executing, before the condition is checked again. There are several kinds of statements that, if they occur inside the loop's code block, can alter the flow of execution described above. To wit: - A return statement will pass execution back up to the calling function immediately. Nothing else will happen inside the current loop or function. - A break statement (that is *not* inside another loop or switch statement within the current loop) will cause the code block to stop executing immediately, and execution to pick up after the end of the loop. The condition will not be evaluated again, and in the case of a for loop, the increment will not be executed. - A continue statement (that is *not* inside another loop) will cause the code block to stop executing, and execution to return to the beginning of the loop. In the case of a for loop, the increment will be executed. Then, for both varieties of loop, the condition will be evaluated and, if it is true, the code block will begin executing again as usual. - A throw statement will throw the corresponding exception back up to the calling function immediately. Nothing else will happen inside the current loop or function. (I'm not actually 100% sure of this, it may be possible to surround a throw statement with a try/catch statement inside a single function, but you probably don't need to worry about this distinction for the time being.) Also, if you do not have a try/catch block inside the loop, then an uncaught exception thrown from a function called in the loop will in turn behave as if a throw statement were executed within the loop's code block. Any actual interpreter error encountered by execution in the code block (e.g. dereferencing null) will behave in the same way as well.
For loop - set the counter to 0, until the counter is less than 10 increase the counter by one and repeat the following block of code While loop - while condition is true repeat the following block of code Using for, you know how many times you want to do something, Using while you often don't, but repeat until something meaningful happens that will affect the condition while depends on to continue running.
Hi Avinaash NVD3 charts will be suitable for you, but you need to customize it to make it work the same way as in the site you refered
They work like this: for ([initialisation]; [condition]; [follow-up, typically counter increment]) { [commands] } while ([condition]) { [commands] } [initialisation] allows you to set up variables, for example counters. You can set up multiple variables divided by comma (not semicolon, as that would introduce the comparison statement). [comparison] means a statement that will result in either a true or false value (or something that coerces to such a value); if the statement yields a value that is false, the loop will be interrupted. [follow-up] will be a simple statement executed after the command block, even though it's standing before. This may lead to some confusion for beginners. If you need to do multiple things or make assignments within this statements, brackets are mandatory. [commands] whatever is done within the loop. You don't need to use all elements of the for-loop; loops like this are still valid JS, even if less readable: for (;i--;) { ... } for (;i--; x[i]=y[i]);
I'm of the ilk that `localStorage` isn't that bad to use anyway?
return (value.data || missing); That line is wrong. `data` isn't necessarily truthy.
what about people without javascript? Currently the post says to *replace* your src tags with data-gifffer tags. Without JS it wouldn't play, and it also breaks validation of the HTML.
Yea, that's the only issue with localStorage. It's "stringly typed". **Edit:** Okay, being synchronous is also an issue, but a library can't fix that because workers can't access it.
Or namespace.
I've encountered that issue when I used localStorage, so I wrote a function that solves it for me. Took a couple of minutes. I could see the case made for a "maximal" wrapper for localStorage to give you all sorts of juicy functionality, but a minimal wrapper just seems pointless.
Perhaps in C++. That loop is going to crash your program in JavaScript. Kinda worth to mention in /r/javascript =)
Oh. For some reason I thought I was on /r/programming.
&gt; As a project for summer Also mostly for fun and experience.
Agreed. Wrapping a decent API in another API seems a little pointless.
mhm; I'd be vastly more interested if this was an indexeddb wrapper.
Just to expound, the for loop is essentially shorthand for a while loop. As an example. for(var i = 0; i &lt; 10; i++) { console.log('foo'); } is the same as var i = 0; while (i &lt; 10) { i++; } It's correct that "i &lt; 10 is saying I want to end when i is 10" but maybe it's clearer to say "the for loop continues while the condition is true". Which should make it clearer that other patterns in the for setup are available and why they would be valid. like (var i = 3; i != 81; i *= 3)
[Umm hmmm](http://i.imgur.com/uO6c1i2.jpg)
Came here to say the same thing. Localforage is a Mozilla driven project with an amazing support list and a test suite (though that seems to have failed requireJS). Sure its size is a bit large for its goal, but its probably not significant in the long run (and will go down over time as localstorage is removed). Personally, I would take that over the unknown support and hours of testing (and hardware) of a hand rolled version.
Twitter just released 'gif support' that uses `&lt;video&gt;`. You win on file size and controls, with a gif fallback you're golden. Writeup here: http://blog.embed.ly/post/89265229166/what-twitter-isnt-telling-you-about-gifs
I will try! lets see how far I go... thank you!
In addition to `.get(key, default)`, `.fetch(key, function)` would be useful and is pretty standard in these kinds of APIs (where the function returns the default value so it only gets executed if it's not already in storage).
Ha, the gruntfile is longer than the library itself... My suggestions: * Support Node with your UMD wrapper and publish to NPM * Use browserify or another tool to generate the UMD wrapper for you. This way you don't need to clutter your code, there is no room for error, and you know you're always getting the latest and greatest UMD * Always put a `main` in your bower file.. 
I believe you're pointing out that the data value could be 0? You'd be right.
that's a nice clean JQ way to do it but the .each in jquery isa good deal slower than a standard for loop. Better to do it how you where but just corrected a bit //get a list of all products var product = $(this).find('.productItem'); //loop through them. cahcing the length has a tiny speed boost. not a big deal but why not. for(var i = 0, length = product.length; i &lt; length; i++){ //log current items height console.log('#' + i + ' has height of ' + product[i].height()); //log current items titles height console.log('#' + i + ' has height of ' + product[i].find('.item-overlay p').height()); }
There is very little point in this library... sorry to say. I wrote something a while back that at least would give you the option to plugin your own encryption but it left you the same localStorage API which is quite simple.. https://github.com/palmerj3/PackageStore
True, you can play around with some of the ES6 features on some browsers, but that's a far leap from being able to use them in production code.
huge thanks, I wanted to do it with a loop, not really a fan of .each either
Can't get it to load on this shitty WLAN but, as I recall it, [localForage](https://hacks.mozilla.org/2014/02/localforage-offline-storage-improved/) is what you want.
Also, Kyle Simpson has a nice college of Facade APIs for HTML5 JavaScript features (that include storage): https://github.com/getify/h5ive
Hello guys, I'm the author of Lockr. First of all, thanks for all the feedback, suggestions and criticism made on this topic. So, a little bit of history. I was doing a project and I needed a very lighweight library to manage localStorage. localForage was not mature then and some other choices where not my cup of tea. Meanwhile, I was fiddling around with node-redis npm package and I find the redis API quite sexy. So I said "let's do this", put the "Eye of the Tiger" on my stereo and half an hour later I had made the first version. I though I should put it on Github, so maybe you can help me improve it and maybe use it yourself. Anyhow, thanks for the comments and suggestions and be sure to open an issue if you find a bug or have a suggesttion. Edit: typos, I should really start spell-checking my comments.
Of course. 
&gt; If we didn't have CoffeeScript to prove that JS developers like fat arrows, This is SO FUCKING WRONG. Javascript developers don't like fat arrows, RUBY DEVELOPERS LIKE FAT ARROWS. The fact that coffeescript exists isn't because javascript developers somehow craved fat arrows, it's because Ruby developers who don't want to code in C-style syntax wanted a way to have their fat arrows and compile that code to javascript. As a javascript developer of 15+ years, I have NO DESIRE TO USE FAT ARROWS, none whatsoever. I view the addition of it to ES6 as an abomination, a misstep of the standards group who have dithered the language by making it look like other languages. It's absolutely ridiculous to say that javascript developers ever wanted or needed "fat arrows". 
&gt; "Fix it" I like this problem because you can't really fake or brute-force your way into solving it (and others have already sufficiently solved the others). For this one, you really have to break it down and understand what is really going on. var idx = -1; var end = 10; var timeout = 1000; while (++idx &lt; end) { asyncLog(idx); } function asyncLog(offset) { setTimeout(console.log.bind(console, offset), offset * timeout); } 
React uses a much simpler implementation, probably not as performant nor as correct but serves its purpose :) https://github.com/facebook/react/blob/master/src/utils/adler32.js
You're very intelligent...
Ohhhh.......
Try it....
Perhaps he was asking hoe the JIT implements it in code?
&gt;while(1) means you're pointlessly comparing 1 to 1 at each iteration Na, that's while(1=1).... while(1) is re-setting the Z flag, and the jump if not zero kicks in straight away, minimal assembly overhead. 
Well okay, you're testing if 1 != 0 each time without any optimizations. Why use a jnz that does a comparison instead of a plain jump when you don't actually need to compare anything? "while(1)" means "while 1 is true", i.e. "while 1 isn't 0", which I always find sort of ugly. Why not just use "for(;;)" which just means, "loop, without doing any tests or specific operations at each iteration"?
I wrote an article about this a few years ago, for my class in programming. It's for actionscript, but the loop semantics are the same as in javascript. You can read it here: http://blog.alxandr.me/2009/01/27/the-differences-and-similarities-between-for-while-and-do_while-as3/
I actually have a performance test for this: https://github.com/SheetJS/js-adler32/blob/master/perf/bstr.js#L1-L10 is the react implementation. My implementation is 3x faster in node (run `make perf`) and chrome and firefox, and 5x faster in safari. The main reason is that mod is not a fast operation, so deferring the mod operation as much as possible helps a lot.
It's a function containing a while. A while doesn't need to be in a function. You've got it.
I can break this down, line-by-line for you: // Setup a variable we use in the condition of the while loop. var count = 0; // declare a variable named "loop" that is a "function" type. var loop = function(){ // When called, this function does: // Run a while loop. // While loops will execute "while" their condition is true. In this case, that condition is "count &lt; 3" while(count &lt; 3){ // For illustration purposes, this prints something out. console.log("I'm looping!"); // A variable involved in the condition of our while loop is modified here. // This is equivalent to saying count = count + 1, or "adding one to count" count++; } }; // we invoke the function stored at the variable "loop" at this point. This causes our function to be called, and to start to execute. loop() To respond to what you said: &gt; So basically, we create a variable (count) and that is equal to 0. Yep. &gt; The count++ bit basically tells us when we console.log increase the variable we created before(count) by one. Yep. console.log and count++ are two different statements, but you're correct. &gt; While loops evaluate while they are true, and therefore, the while loop stops when the condition is no longer true-i.e. once the variable count exceeds two. Yes. A better way to think about it is that the stuff inside the curly braces of a while loop will be executed again &amp; again until the condition is false. &gt; I think I've got it but I am not sure. You've got it. Sounds like you need to talk through it with someone to boost confidence. &gt; Furthermore, I am confused by is the presence of the function. Is it necessary? No, this is functionally equivalent to: var count = 0; while (count &lt; 3) { console.log("I'm looping!"); count++; } I wouldn't be surprised if their previous exercise involved functions, so they wanted to use it in context.
Be aware also that you are doing a simple decrement or increment on an index and checking against that value you should really be using a for. While is great for other more general boolean conditions where you will cause that condition to some true at some point. For example iterating an array of strings and stopping when you find one of a certain value or length.
If the while loop is the only thing running in the script the function is not necessary. However, you should get used to compartmentalizing code into functions and using parameters to pass data around. If you were writing this for a real project, you would want this function to be called without having to specify the count variable within the function; You would want to create a parameter like so: var count = 0; function loop(value) { //this function requires you to give it something to work with while(value &lt; 3) { //runs the script as normal console.log("I'm looping!"); value++; } } loop(count); //tells the function to run using the variable count This would render the same result as your script. So, we use "value" as a placeholder for "count" but we could use any other variable. If you had a variable equal to 10 called "someNumber" and called it to the function like this: loop(someNumber); The function would run the same, but nothing would happen because the variable you gave it is not less than 3.
Is the ; after count ++ necessary? Or is it just so I get in the habit of putting semi colons in JS.
I'd reccomend writing one, and popping open the debugger in your browser and stepping through it.
It's not *technically* necessary, because Javascript will automatically insert missing semicolons in many situations (like this one!) However, depending on what you are doing, it might actually put semicolons in the wrong spot, which makes for some really surprising and tricky bugs. So it's a really good idea to get into the habit of always putting in semicolons where they belong. Not everyone agrees, and some people have gotten [very mad](https://github.com/twbs/bootstrap/issues/3057) about this issue, so you may see arguments to the contrary. I would really recommend using the semicolons though, just because the intricacies of automatic semicolon insertion are really not what you want to be focusing on right now!
This might come in handy: http://www.codecademy.com/blog/78-your-guide-to-semicolons-in-javascript
You could make it even more minimal if you pass the functions as objects rather than creating anonymous functions, so for example, instead of this: Lockr.getAll = function () { var keys = Object.keys(localStorage); return keys.map(function (key) { return Lockr.get(key); }); }; You could simplify: Lockr.getAll = function() { return Object.keys(localStorage).map(Lockr.get); }; And same with your aliases `rm` and `flush`. You should be able to assign the function as a reference: Lockr.rm = localStorage.removeItem; Lockr.flush = localStorage.clear; In the end you might as well just use vanilla `localStorage`.
I got it to compile on closure, but the results were unimpressive. With uglifyjs I couldn't get node to extend its heap, so it crashed at 1.4GB like yours.
Would you like to send me a pull request? :)
I've been a js dev for 5 years and I want fat arrows. Sweeping generalizations going either way aren't helpful. That being said, you seem *very* agitated about this so we'll leave it at that.
No, I'm saying that not using the appropriate patterns for the language you are working with is a bad habit. The same would go for writing `getStatus()` in ruby, or implementing `Maybe` in OCaml, or calling C++ pointers "reference types" because they are nullable (and you come from Java). It just shows that the person talking doesn't care about consistency and disregards differences between languages as "x doesn't have y because x doesn't look like my favorite language". It's a major smell. And actually OP gleefully provided evidence that I was right in my suspicion: his "perfect" implementation of map in JavaScript is a terrible JavaScript implementation of map that completely disregards the properties of the language. For reference: function map(f, arr) { var length = arr.length, i; // 1. We don't want to create a million short-lived objects // Best practice: if you know the size, create with size var mapped = new Array(length); // 2. This is hot code that we suspect will be hit very often. // We don't want to generate new functions for every call. for (i = 0; i &lt; length; ++i) { mapped[i] = f(arr[i]); } return mapped; } That is still not a "perfect" map in JavaScript - but the point is: it's closer to how actual JavaScript works. Trying to simulate one language in another is not a great idea. There's a reason that turing complete means "can be simulated in" and not "can be efficiently simulated in".
Thanks but clearing the browser data resets the options. I'm looking for something more permanent than that. Since there is no server side I'm starting to wonder if a local file is my only option...
Nice! Who do I follow? Ah, the blue is a link. Thanks for this.
In the past I have created a self executing jar file (or webstart) with a simple server app that runs locally to manage local resources and provide other intensive file processing, leaving the gui all in javascript, it just opens a server socket port and handles basic post requests or whatever your app needs, usually using json classes. Quick and easy, runs on most pc/mac/linux. On android they have the same sort of setup with sl4a https://code.google.com/p/android-scripting/ . you write some "server" code in whatever language (beanshell is the most robust, has full api access), and it launches the browser and provides callbacks to your browser javascript code.
*might* be better question for /r/node or /r/nodejs but simply, to bypass the syncing, you set val to something like -1, then wait till it doesn't = -1 and have the node crowd yell at you. Or you fragment your program flow into many little functions and embrace call stack scoping (because javascript sync is so "beautiful"). I'd be interested in how promise boilerplate fixes it, but I'm not there yet.
&gt;i.e. once the variable count exceeds two. There are some numbers between 2 and 3--just to clarify. `while(count &lt; 3)` will be false on 3 and higher. So basically, if count were 2.5 it would still run the while.
my suggestion is to return the promise ala server.options .query('optionName') .only(opt) .execute() .done(function(results) { val = (results.length &gt; 0)? (results[0].optionValue): undefined; }) then the function that calls getOptions can do something like.... getOptions().then(function(val){ })
my suggestion is to return the promise ala return server.options .query('optionName') .only(opt) .execute() .done(function(results) { return (results.length &gt; 0)? (results[0].optionValue): undefined; }) then the function that calls getOptions can do something like.... getOptions().then(function(val){ //DOSTUFF }) Notice how the returns change
If its possible I would highly recommend serving the page using Node through Express. Its dead simple and gives you file system access. If that's not possible and localStorage isn't either than trying to get javascript in the browser to access local files might be your only choice. I don't know much about that though.
Why hello, Leptons, I haven't heard from you in a while. Nice to know you're still tilting at windmills, as am I. You're correct that many Ruby developers like fat arrows, because they superficially resemble Ruby's blocks. Alas, the similarity is only superficial. Of course, many JavaScript developers who are not also Ruby developers happen to like fat arrows, so I cannot accept your suggestion that JavaScript developers don't like fat arrows. Personally, I am too much of a hipster to like fat arrows. After all, when you take the intersection of things I like and things most people like, you end up with things *I used to like*. Now pardon me, I am off to drink a flat white.
This is similar to what I was thinking: "can't you just capture the promise and then tack a `then` on it?"
I'm not real familiar with node. My understanding is that that is a server side thing... What I'm doing is all client side. Even more specifically, it's a Chrome extension. Would it still be a better question to ask there? I did consider doing a while loop to just wait for the value to come back, but that just seems so dirty. 
So... I never really use while. Correction, I have never used in JS. I always do a for loop. for( var count = 0; count &lt; some_array.length; count++ ) { console.log( 'looping ' + count + ' times' ); } So... Is there a difference?? And if there is, what is it? Thanks!
We were all where you are right now =), keep learning and talking to your fellow programmers (biggest mistake is not doing this because your colleagues can help you save countless hours in the wrong direction)
I'd recommend React or Mercury with some CSS logic
Would it not have had to be `function loop(count, value) ` if that were the case?
Local storage API should work and persist after refresh (unless your settings prevent 3rd parties from storing cookies/data). There's also node-WebKit for client apps.
No, I didn't put it together that it was a chrome thing. My bad.
Unfortunately, you can't loop and wait for the value to come back because JavaScript runs in a single-threaded environment; the very act of looping would prevent any of the asynchronous code from being run, and you'd find that the loop runs infinitely. The short answer is, once you enter asynchronous code, you have to *stay* in asynchronous code, and returning things no longer has a semantic meaning (unless you use promises; more on that later). The simplest thing would be to modify getOption to be asynchronous. For example, you'd use it like this: getOption('allowedSearch', function(allowSearch) { // now allowSearch is available }); To do so, simply make getOption take a second parameter—that is, the function to call when the value is available. function getOption(opt, callback) { var val; server.options .query('optionName') .only(opt) .execute() .done(function(results) { val = (results.length &gt; 0)? (results[0].optionValue): undefined; callback(val); // now that we know the value, call the callback with it }); } It's worth noting that any code that depends directly *or* indirectly on the value from getOption would now have to run inside the callback; this is the nature of asynchronous programming in JavaScript, and is what I meant by "once you enter asynchronous code, you have to *stay* in asynchronous code." Another option is to use promises; they are objects that represent a value that may be available now or may be available later. They're most useful because you can pass them around and compose them in interesting ways more simply than callbacks. However, they don't shield you from having to eventually use a callback to get to their value—that's just a limitation of JavaScript. It looks like db.js is actually already using promises; it's the thing that you're calling "done" on. You could just return that from getOption: function getOption(opt) { var promise = server.options.query('optionName').only(opt).execute(); return promise; } and then check the value *outside* the call: var allowSearchPromise = getOption('allowSearch'); allowSearchPromise.done(function(results) { var val = (results.length &gt; 0)? (results[0].optionValue): undefined; }); or more simply: getOption('allowSearch').done(function(results) { var val = (results.length &gt; 0)? (results[0].optionValue): undefined; }); There are other properties of promises that can make this code a little bit nicer; in particular, you could move the results.length check into the getOption function by utilizing the following fact: if you call .done(someFunction) on a promise, and return something from inside someFunction, this generates a *new* promise that contains the value of whatever you returned. This is known as promise chaining and can be a bit confusing. Here's how you could use it in getOption: function getOption(opt) { var promise = server .options .query('optionName') .only(opt) .execute() .done(function(results) { return (results.length &gt; 0)? (results[0].optionValue): undefined; }); return promise; } Now the promise that gets returned will resolve to either results[0].optionValue or undefined: getOption('allowSearch').done(function(allowSearch) { // allowSearch is results[0].optionValue or undefined }); However, the fact will always remain that you can't get out of using a callback function *somewhere* if you want to use asynchronous code in native JavaScript.
The correct way to write it would be to re initialise the count var within the function. var loop = function(value) { var count = 0; while (count &lt; value) { console.log("looping!"); count ++; } } loop(5); By moving the var declaration into the function it gets the counter reset to zero each time you call it. Then you just need to determine how many loops to do. 
You could create a div with your loading animation in it, and then use JS to show/hide it when the ajax request begins and ends. Those kinds of things are really, really simple. You don't even need a 3rd party library for that.
Similar to FerCrerker's post, putting the **while** loop inside of a function is not only unnecessary, but a little dangerous. Using a function may give the impression that you could call **loop** again and that it would do the same thing, but since **count** is outside the scope of the function and already equal to 3, calling **loop** again will do nothing. This structure s/he provided is safer for another reason: it keeps the local **count** variable in the same scope as the loop. For example, if you reused **count** for another reason later in your code and then tried to call **loop** again, it may lead to unexpected behavior.
Something I would like to clarify from pokoleo's answer is to make sure what he said about the while loop executing. &gt;Yes. A better way to think about it is that the stuff inside the curly braces of a while loop will be executed again &amp; again until the condition is false. This is entirely correct, but it's important to understand that if the condition becomes false midway through a loop, that loop will still finish. The condition is only evaluated at the beginning of the while loop, so after each loop it goes back to the beginning and re-evaluates. To exit in the middle of the loop you use the 'break' keyword, but that's probably a lesson for another day.
Typically you'd want to be very very careful when writing something like this, otherwise it's almost always better to stick with something like Backbone's events that have been tested and improved upon for a while.
I hope you got some test cases (expected values etc) or be the first person to kill himself with a JavaScript 32-bit integer bitshift problem. For more bits there are probably some modules on npm.
Wow! Thank you so much for this. I'm way too tired to follow it all right now, but I'm going to take the time to really follow this tomorrow. 
yes, but why would you? nothing in this says you cannot just keep these around.
bonus points if you do it with a css-transform and make it use hardware acceleration with the z=0 trick.
I wonder what JIT's spot that, and stick it in? (the single jump, no comparison?) It'd work well in the CPU pipeline too, no stalling.
Really? An entire npm module and class for clamping numbers? Better off as an underscore/lodash addon. Also, it's easier and cheaper to have an second "buff" variable that's added to the original than to rig up a multi-function system for ensuring a value is clamped plus buffed.
`process`. `module` isn't global, it's a function argument to the function every module is implicitly wrapped in. See: https://github.com/joyent/node/blob/4f1782ef750fb171eb90a1d97b14e2ed3a8a165d/src/node.js#L788-L791 (`setTimeout` on the other hand is global though. And `window` is a special case because it's technically the global scope itself that has a property `window` pointing back at itself. Or something like that.)
Only for previously known properties. But then again: that was never (?) an actual challenge.
Awesome, just what I was looking for right this moment! Looking forward to updates.
I'm new to reddit and I didin't know about it. I've modified it now, thanks for telling me. :)
Surely since we're counting in 1s(Count++) the other numbers between 2 and 3 are irrelevant?
It's not a problem! Hope you like it here.
I might consider Browserify, but I think concatenation and minifying is a simple middle-ground here. Fairly easy to get up-and running and easy to understand :) The reason I use Ruby or Python for a webserver is a personal preference. I generally do not like to use the build tool to host the application - I like hosting to be a difference process. 
Cool! Glad you are getting use out of it!
Huh? The local dev-server is not hosting the application, and a static server is a static server. Seems a bit overkill to use both node AND ruby/python, if you aim for a simple setup.
You should use the Web Inspector to debug your extension, that is the best way to find issues. The introductory doc is there: https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/DebuggingExtensions/DebuggingExtensions.html For this particular problem, the code seems okay. Did you specify a command in the "Command" field when creating the button? If not, you will not get the "command" event when it is pressed.
I did specify the command. And I check to make sure the command was intended for my extension.
Uh. Do you have any warning in the inspector for the extension?
Oh I forgot to post that here. I get ReferenceError: can't find variable 'safari' on that snippet I have posted.
Thanks 
 myNode.onclick = handler; The two reasons why other people don't like this approach are: * Only one handler can be assigned to a given event at any time with this approach. * Given the previous point events are easily clobbered. The first point goes to how you manage your code and package your handlers into a single callback for reference and the second point goes to basic management of your code (competence).
I'd just use a clamp function like the one I used in this example: http://jsfiddle.net/3nPan/1/
If you are worried about people clearing all of their saved data then you would have to use a server-side approach anyways.
Seems to be an Android-related issue: https://code.google.com/p/android/issues/detail?id=11912 Tried adding a fix in the meantime: https://github.com/skidding/flatris/commit/1b42319086fcb33f3216e17661f0e5763334d320, let me know if it fixes it. Thanks!
It makes sense what you've said. In simple terms, while loops evaluate when something is true hence we should use them when we don't know what the outcome will be i.e. if it will evaluate as false. Whereas for loops are better served if you know what will happen in the future.
I prefer to force no dependencies on potential users where possible. Feel free to fork it and make it compatible though! Also, it's actually only two lines of code where I use booster - it's not easier to keep checking it externally in my opinion (because I have actually used this before, mind), which is why I've built it in to the module each time I've written it. It's also available on bower! 
old news. npm is loaded with all kinds of crazy stuff build on this: https://www.npmjs.org/package/esprima 441 dependent modules, &gt; 47K daily downloads, shit is epic.
Looks good to me! I would suggest throwing in a reset button so I don't have to refresh if I want to play again and maybe have the result pop up on the page somewhere instead of as an alert.
A small clamp module is actually a perfect fit for npm. https://www.npmjs.org/package/clamp And lerp is all you really need for percentages. https://www.npmjs.org/package/interpolation Lots of the OPs functions seem game-specific though..
Another example of this is a Google Employee's javascript port of the [RTL-SDR drivers] (http://sdr.osmocom.org/trac/wiki/rtl-sdr) that allows you to use an USB dongle as a [software defined radio receiver to listen to FM stations](https://github.com/google/radioreceiver/) in the Chrome webbrowser.
Easiest thing would probably be to append a [Font Awesome spinner](http://fortawesome.github.io/Font-Awesome/examples/#spinning ) on triggering the operation and remove it on the success callback. For fancier stuff you can also check out the [jQuery blockUI plugin](http://malsup.com/jquery/block/). 
Can you still tho? last week Chrome started disabling all the plugins I had installed that where not from the chrome extensions manger page. 
If he moved the count++ statement to above to console.log call, the condition would become false before the end of the loop. However, console.log will still be called as it has to finish the loop. 
ITS FINALLY HERE!
Yes, you need to fill in the template before it is shown and then transition over to it. So if you want something to slide in and replace something else, for example, make a new element beside the current one, but make sure it's hidden behind something or has display:none. Fill in the content using the templating engine. Then slide it in or show it. 
I waited far too long for the page to do something before I saw there was an arrow at the bottom. lol
Basically impossible. They're for type 1 diabetes, cost about $1000 to get it. Thanks though!
In developer mode it should be ok.
Might have better luck if you open the search up to women as well.
heh. I caught that mistake as soon as i hit post -_-
WOMEN ALLOWED
Interesting point. I *assumed* it presented itself as a COM port to Windows just like the other OSes. So you actually tried *this* code with and without the Dex software and it didn't work until you installed theirs?
Label?
I think you maybe have a better explanation right there. 
by 'calculator' project you mean exactly that? so this is a school project?
Yup I did, and chrome.serial was empty. So I could not get the device to connect. I am on win 8 and it is a gaming laptop so who knows though. Once I grabbed studio it came right up. Of course in the process I destroyed the not working environment. I might see if I get the same result on another windows box I have if I can get it booted up. Super interesting that you could do all of this. Really good work. I might monkey around with it some more, I have a chromebook that absolutely would not have a driver on it, not sure how I could get an unpacked extension there. Have to think about that.
Console output from your global.html won't show up in the standard web console. From the Safari menu, go to Develop =&gt; Show Extension Builder. Then, on the extension builder page for your extension, scroll down to the "Extension Global Page" section and click the "Inspect Global Page" button. You'll get a new Web Inspector window for your global page, where you can inspect the console output there. *EDIT: Also, Firefox and Chrome both have similarly non-obvious steps to debug console output for extensions. I had to put the instructions for each in the readmes of each of our respective browser extensions.*
In that case I could offer you myself in 13 hours for up to 4 hours. I can't sooner. My linkedIn profile is here as a proof I know JavaScript: http://cz.linkedin.com/in/capaj/ Just PM me if you would be interested.
note that noflo's FBP is not proprietary but a standard format that's also used by other graph programming systems (it is pretty old really).
It's SUPPOSED to be exactly the same. Chrome's supposed to present same UI, same API, same all that. I assume you have a terminal and can git from Chromebook?
I'll get it started with one of my favorites, [comp.lang.javascript's FAQ entry for Closures](http://jibbering.com/faq/notes/closures/), which is an exhaustive, deep-dive into the innerworkings of closures. Not for the beginner, but more for those looking to learn everything they can about the topic.
Can somebody please explain what this is?
[label](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label) Though I most often end up using an extra variable instead as I forget about it all the time.
this worked for me: node --max-old-space-size=8192 --max-stack-size=50000000000 --stack_size=504800
All thanks to codecademy courses. :)
I think I understood what you meant, but what is a conidiophores. I googled it and I got nothing related to JS.
Sorry that's autocorrect. Condition 
For those of you who need numbers restricted to a given range but don't want to use a constructor that exposes a chainable API to manipulate a primitive data type: /** Clamp a value between a min and a max @param {Number} value Value to clamp @param {Number} min Lowest value @param {Number} max Highest value */ Math.clamp = function(value, min, max) { return Math.max(Math.min(value, max), min); }; 
The only thing that would really apply to a game here is the booster stuff. Everything else is just checking and setting the number in varying ways. Also, to be fair, I did say "this made my *game dev* life easier".
Does requirejs fit your needs?
Thank you, helpful links. I thought gulp was a build system
I also like this SO question: [How do JavaScript closures work?](http://stackoverflow.com/questions/111102/how-do-javascript-closures-work) Which [was submitted](http://www.reddit.com/r/javascript/comments/i7u9t/how_do_javascript_closures_work_stack_overflow/) by /u/gst a couple years go. 
It does a very little part of what I need, maybe i'm not familiar with advanced usages of require
Does this work? I tried the demo but the US number didn't go to my phone
I'm working on a build system using node-red, when I'm done I'll post a link.
It does a lot more, re-bundles pretty much everything you can imagine. They went too far imho, for sake of simplicity that made this huge complicated monolith with endless piles of readme and plugins and whatever you got to dig into (and then be locked in) I have no idea why you'd use this. This big stack-of-everything totally messes with modularity idea. You're probably better off to just pick-and-choose the stuff you need and rig a Gruntfile yourself, it is not that hard and saves a lot of decoding this construct and through all the buzzwords. edit: i dug into the readme but it reads like its been written by a enthusiastic and talented 16 year old who went to far following a hunch and now *believes* in.. same stuff you can pull together with some experience and without all the opinions and with more freedom and choice.
Yeah, that's my feeling as well. I guess it appears to people who like the full handholding experience. The generated project structure just isn't my thing though. Although, you could totally use yeoman for that stuff with webpack or whatever. 
Fuck your refcode
oh wow, didn't know about node-red, thanks!
Didn't even link to the tutorial :P
Happy to help!
What you're describing is really only just now becoming prevalent with modern web development, there aren't a whole lot of options just yet. I've seen trends with Polymer, Ember, MontageJS, etc. that have pushed for interconnected components. I just looked into noflo, it seems like some kind of connect-the-dots CoffeeScript framework and IDE? Either way it looks too revolutionary for me to dive into at this point. I think MontageJS is the closest I can come up with to look into. Let me know what you land on; I'm working on some ideas myself as I'm not entirely happy with what's available. Edit: Link to montage: http://montagejs.com/ 
If you install them from a folder they will be fine. Also if you put the drivers on the chrome webstore they'll work fine.
And tracking changes
count += 1 count = count + 1 ++count (NO DONUT)(can u?)(jerva) etc. check out forEach(). real crazy stuff. Ruby(tm) has all sorts of iterative enumerables. You can even go recursive. javascript is FUNctional so get used to it. Try iterating over an array filled with arrays. Better yet, run a while loop over an array of objects and then do a for..in.. loop over each object and tell me what your objects look like bruh. i'm not kidding, that's probably some really good advice.
Not sure what you're looking for, but does Rx/JavaScript fit your needs?
Are there resources for node-red besides the official site? Any tips for a beginner? Can you have the UI in one machine and the execution environment in another? Is that what MQTT is for? 
Nope, those are the only reasons. There's nothing stopping you from accessing the data directly on model.attributes, aside from co-worker sanity. &gt; "I can see the data is being changed, why the hell isn't the event firing?"
I just started playing with yeoman. Would surely give lineman a shot. Thanks for the explanations.
Codecademy is worth a try. It made my entry into JavaScript world quite easier.
Once it works I'll put it on the store. Right now, roughly half the time, it spits out garbage data. I'd rather keep it difficult to use until problems like that are resolved.
I'm refering to personal extensions. Also if you are using OS's other then windows you can go crazy go nuts installing third party extensions. Google doesn't really support third party extensions on windows because malware will install extensions into chrome, which happens far less in mac and linux.
It's just what you have to do if you don't have something like Object.observe.
I was aiming to direct people to Digital Ocean hosting because there are only so many host that you can deploy node on without having to upgrade to a pricey server.
I deeply understand about. github.com/emaniacs
Getters and setters allow you to detect when changes are being made to the state of the data. By emitting events that indicate which changes are being made, the model allows other components to perform actions against the new state. This allows a loose coupling of many different components.
Yo actually has an API?
Interesting point about angular and scope apply - reason I'm asking is because is actually because I'm writing a model layer for angular and seeing what else I might be missing :) 
I think that you are talking from the point of view of experienced JavaScript developer. However, when you are just starting you can be overwhelmed by the tools available. "You're probably better off to just pick-and-choose the stuff you need and rig a Gruntfile yourself, it is not that hard [...]" It requires knowledge which new developer does not have. IMO - Lineman.js offers great experience for developers starting with AngularJS, because you don't have to choose which stuff you need. And you are not tied to Lineman in any way - you can just take your code and configure everything by yourself when you gain some experience.
[webception](http://i.imgur.com/lPMpbG6.jpg)
Oh I thought you said 'I need a build system' not ' I need to build a system' lol. Regardless I think combining components to build a framework - having components (black boxes) that each do one thing really well, is the way to create these flow frp frameworks 
All the bookmarklet does is append a script tag with the linked .js file as the source. Why they proxy the call through Yahoo, I'm not sure. Unfortunately, the .js file is heavily minimized and obfuscated, meaning it's almost impossible to read without some serious work. That being said, [this](http://stackoverflow.com/questions/16503166/getting-a-youtube-download-url-from-existing-url) StackOverflow question still seems to be applicable.
YouTube's much hated adaptive streaming (DASH) is more complicated that just an mp4 file.
Just reading through lineman.js's docs, the yeoman vs lineman subsection is clearly outdated. There are great generators such as [Angular:XL](https://www.npmjs.org/package/generator-angular-xl) which are just as "opinionated" about enterprise level development. That's the thing about yeoman is that it's a generator of generators. The whole "generators can be harmful thing because you'll have devs up at 3am from out of date code" is less concerning when you realize that when you have an entire team of people working on a project with this generator.. they're probably going to fork it and make it their own. Even then, this isn't some java library that can't be abandoned at any time. It's javascript where you're never locked into *anything*. I hope that someone can update that page to show that, yes, angular-seed may be hard to understand to the outright beginning, but yeoman's community generators go far beyond angular-seed. The graph in the middle of the docs was clearly written by an asshole with the jab at the yeoman avatar. While it fails at not only representing the difference between lineman and yeoman, it also fails at representing yeoman accurately. The graph gives yeoman a '-' for: *HTML5 pushState Simulator *API Stubbing Prototyping *API Proxy *Test Runner *Fullstack generation (I added this one) All of which are included in any decent community generator in yeoman. The use of sub-generators and usefulness of yeoman generators cannot be disputed. I mean, just look at the lineman.js page, it's fucking huge. Type yo angular-xl myapp and look at a few paragraphs of text and you essentially have the same setup. Code generators get a bad wrap from the macromedia dreamweaver days when you'd build a wysiwyg webpage and get some unmanagable tangle of mess, however these days having something build auto-stubbed and enforced unit tests (just having unit tests is rare in most companies), assist with mocks, etc etc, list goes on. Using code snippets is just standing on the shoulders of giants and that's all these "generators" essentially do.
Why on earth would you want to do that? You won't be able to watch videos in 1080p or higher. If you're trying to download videos, stop using crazy bookmarklets and use an actual program designed for the job, like [get-flash-videos](https://code.google.com/p/get-flash-videos/) or [youtube-dl](http://rg3.github.io/youtube-dl/). These are not dependent on any third party sites, and in the case of youtuble-dl there is no problem downloading DASH video formats. 
oo I didn't know there are limitation and I ought to read the source for youtube-dl seems it's a quality downloader compared to many silly website types
https://news.ycombinator.com/item?id=7925635
&gt; overwhelmed have you read this lineman readme? it is insane.
Crawl npm for document generators. There are a ton of them.
When you are writing a model layer in angular you dont need to do scope.apply. 
Well, there's a few blog posts out there, if you're not familiar with NodeJS then it's probably going to be rough getting started (though downloading it and running it is easy). MQTT is just a comm protocol for IOT devices. Right now there isn't a way to separate the UI process and exe process(es). I'm thinking about working on a fork that is more web app oriented.
Read --&gt; http://www.quora.com/Is-CodeAcademy-the-best-source-to-learn-programming-for-a-beginner-now most of you seen a bit clueless Keep down-voting, kids.
I hope it helps to inspire someone even that the code might be a bit old and hacky.
**"Them Classes is shit, innit?"** No, but seriously, thanks for posting these. I'm going to watch them and learn. 
it's often cleaner. you can override those methods to add some super secret closured over functionality. is there no way to tell a BB model that you hacked it's data?
Matt Field's "Don't Go Changin'" is worth a watch. If it interests you (and it should) then you try some of Rich Hickey's (Clojure dude) presentations about state and values. Web components and the associated browser APIs are also very cool but I haven't watched this presentation yet. I've been using these APIs on some hobby projects using node-webkit and it is day and night compared to old ways of doing widgets and components. (And it is debuggable in the DOM inspector too!) 
Using retarded in that way is antiquated and wrong.
Not sure how you'd make salts secure in the client side anyway
Heh, fellow Scots. I'll give them a listen.
I was lucky enough to be at this year's Scotland JS - there was definitely a lot of interesting and inspiring stuff! 
Yeah, I hope someone takes over the project and makes it a success.
This looks great! I might fork it and use it to check baseball scores from the terminal. 
Thanks! You will need a way to get the baseball information, you might end up creating a whole API by yourself (involves a lot of scraping, which I didn't because some people did at http://worldcup.sfg.io), but good look :D
Looking to have a few peeps give any pointers on how I might be able to improve this script I've done. The jist of it is that after looking for a means to really improve my programming, I felt a project was in order. And this was one idea I had, to create a script to abstract the process of dynamically creating your own stylesheet on a webpage and dynamically assigning/amending/removing CSS styles to that stylesheet. It basically hooks into the CSSStylesheet object of an empty style element that is created on initialisation, and abstracts some of the quirks in applying styles directly into the CSSStylesheet object (including non-standard rules object in older IE browsers). Initially, I thought I had to access the DOM and directly add CSS into a style element, but then I did a bit of research and ended up completely rewriting the code today. I tried to allow for a number of ways to interact/assign styles, as well as making sure everything is tracked correctly so multiple styles being assigned get mapped correctly to the same selectors, etc. In general, performance wise, it seems to be better than jQuery, and scales far better when handling multiple styles/elements. I tried to use jQuery as a guideline to writing the code in terms of structure and interface. From what I could test, it seems to work fine in Chrome, Firefox, and IE8 (I don't really guarantee support for anything older). Plus, made sure to document most of the available functions. So yeah, thoughts?
No, sorry, I've killed the demo servers long ago. But, you can easily deploy it on an AWS Free Tire Micro machine and give it a try. Almost all you need is Ubuntu, Node, Redis and Mongo.
Oh the MLB provides all the data already it shouldn't be much work. This also reminded me I wanted to write a silly library to parse dates in weird formats like "2 days before the day after tomorrow" (that's today!) 
Which point are you at? Generating jsdoc or generating documentation from jsdoc? [Smartcomments](http://smartcomments.github.io/) can generate and insert empty jsdoc comments from your existing code. The documentation needs a little more filling out from there, but the bulk of the work is done.
The only part I have an issue with is monkey patching indexOf. I think this library is an inappropriate place for that. It's a cool idea nonetheless, great job!
Looks good! How does it deal with tags that don't have a closing pair, like `&lt;img src="#"/&gt;`?
Noted! I'll probably amend the code for the mean time to require the shim for legacy browsers. Looking forward though, I might have to utilise underscore more. Having nice things at your disposal makes writing js less of a minefield.
Using inline styles means accessing the DOM, which is slow. Also, it scales badly if you suddenly need to apply styles to 20 or so elements on a page. Creating a stylesheet and then directly adding CSS styles to its CSSStylesheet object only requires you to access the DOM once when creating the style element. From then on, you aren't even adding stuff to the DOM, you are talking directly to a browser's CSS object and forcing it to repaint without modifying the DOM. And because you are injecting CSS rules and not inline styles, you can target far more without incurring a massive performance hit that you'd get with inline styles. It might be better handled with assigning/reassigning classes, but you'd lose some more dynamic handling of property values that you could do with Javascript. This is just a utility to allow for more dynamic CSS stuff without the performance penalty of lots of inline styles.
Ah. var buttons = document.querySelectorAll('button[data-colorid="21"]'); Array.prototype.slice.call(buttons, 0).forEach(function(b) { b.click() });
I honestly wrote the whole thing too quick and didn't really read what I wrote. It was probably a bad idea to post it. 
There is no NodeJS equivalent to Wordpress, so you won't be converting, you'll be writing a new site from scratch, and you will have to do ALL the interactions yourself. If you still want to do that, start here: http://nodeschool.io/
I will rephrase my question. What if I have to build a database driven website using nodejs? 
https://github.com/felixge/node-mysql
For sure, makes sense.
I wrote a spec and it looks like document.createElement does not make the img tag self closing in `outerHtml`, nor does it add a closing tag. Will investigate.
Could come in handy at work
Oh... No no. I _know_ the issue. It'd be better if you envision the code blocks within another function. When the variable is global to those functions below it, there is the issue that the variable--being "global" to those functions below it--is updated to a new value each time. This means that by the time the bounding rect methods are called, whatever the _last_ value of cellIndex is will be calculated against cellHeight. It is a sort of hoisting issue. Like I said. The post was written too hasty. I put bad code up. Then I wrote a narrative to it. Then updated the bad code but didn't fix the narrative. I'm definitely going to keep the post up as a reminder not to be such a rush-filled dumbass in the future. 
That crud is one thing, it looks good but I do not think its as good as data abstraction layer. But good start anyway. Thanks!
That's not it...it's some closure shit. Hold on and I'll get someone to explain. Edit: I think you're right. This is very confusing to me. Apparently a bunch of scopes are create and its a scope chain issue.
There are loads of them. Try ExpressJS or maybe Sails... http://codecondo.com/7-minimal-node-js-web-frameworks/
For those that aren't hungry for browser crashes, a lighter weight listing of all the scotland js 2014 talks: [Jo Liss: No more grunt watch: Modern build workflows with Broccoli](http://vimeo.com/96508134) [Jonathan Martin: The Realtime Web: We're Doing it Wrong.](http://vimeo.com/96477905) [Zeno Rocha Bueno Netto: A future called Web Components](http://vimeo.com/96477903) [Jaume Sanchez Elias: Getting started with three.js and WebGL](http://vimeo.com/96477742) [Ron Evans: Cylon.js: The JavaScript Evolution Of Open Source Robotics](http://vimeo.com/96477741) [Mikeal Rogers: Keynote](http://vimeo.com/96477739) [Jan Monschke: Building a collaborative audio editor based on the Web Audio API](http://vimeo.com/96477738) [Joe Pettersson: JavaScript Security: myths, fallacies and anti-patterns](http://vimeo.com/96477736) [Amanda O'Connell: Let's talk... mental health](http://vimeo.com/96477735) [Tero Parviainen: Build Your Own AngularJS](http://vimeo.com/96444762) [Sugendran Ganess: Refactoring Legacy Code](http://vimeo.com/96444760) [Stian Veum Mollersen: Making math come alive with JavaScript](http://vimeo.com/96444759) [Jason Frame: Beyond the AST - A Fr**ework for Learnable Programming](http://vimeo.com/96430141) [Coby Chapple: How design happens at GitHub](http://vimeo.com/96430140) [Phil Leggetter: Testing Ginormous JavaScript Apps](http://vimeo.com/96430139) [Tom Ashworth: ServiceWorker &amp; the offline web](http://vimeo.com/96430138) [Gabe Hollombe: Build Games with JavaScript and Phaser](http://vimeo.com/96430137) [Angelina Fabbro: Keynote](http://vimeo.com/96430136) [Jonathan Lipps: Yield! How ES6 Generators and Monocle-js Can Bring Async Into Line, Literally](http://vimeo.com/96425438) [Matt Field: Don't Go Changin'](http://vimeo.com/96425437) [James Coglan: Make: the forgotten build tool](http://vimeo.com/96425320) [Ryan Sandor Richards: High Performance Visualizations with Canvas](http://vimeo.com/96425319) [Dave Kennedy: Foundations for Assemble](http://vimeo.com/96425315) [Justin Searls: JavaScript Testing Tactics](http://vimeo.com/96425314) [John Sutherland: A Humane Introduction to Functional Programming](http://vimeo.com/96425313) [Philip Roberts: Help, I'm stuck in an event-loop.](http://vimeo.com/96425312) (For those interested, this was generated with running the following in the console on that page:) [].filter.call(document.querySelectorAll("a[href*='vimeo']"),function(e){ return (e.innerText.indexOf("Vimeo") == -1 &amp;&amp; e.innerText.indexOf("Neo") == -1); }).map(function(e){return "[" + e.innerText + "](" + e.href + ")";}).join("\n\n")
I profiled this sort of thing in 2009 and saw that your approach only had benefit at around 20+ elements. Browsers have certainly improved but I would still expect a browser to be able to rendering updated inline styles faster than a new style element. Regardless, throwing on a new class and allowing all your styles to be defined in CSS seems not only better for developer ergonomics but also efficient for the browser also.
FYI, there are Node reddits here: http://www.reddit.com/r/node+nodejs/
&gt; There is no NodeJS equivalent to Wordpress Isn't [PencilBlue](http://pencilblue.org/) similar?
You could provide a vagrantfile to help quickly set up the environment.
I did a profile, and adding a class to an element natively (either through classList or className) is faster, so 0.1ms consistently versus the 0.1-0.5ms of this function. I also tried doing the style application natively to a single element, and that too benefits from being native and taking the same amount of time. The bottleneck is mostly in the InsertRule part. It isn't always consistent in terms of speed. When setting individual properties, it seems alright and fast, but it does get a hit when applying more than one style. I wonder how I'll tweak around with the code to see if there's a better approach to this! But I'm at least happy that I'm faster than jQuery with this.
I was thinking purely in terms of when I need to calculate certain values on the fly and then applying the needed styles. In most cases, sticking to a class-based approach warrants for most cases when dealing with changing styles, but classes can't change its own values based on screen sizes, mouse position, etc. That's what I was thinking about when implementing this and for that particular use case. Granted, the profiles seem to show it isn't quite as fast natively on single elements, but I'll be looking to see if there's a way to squeeze out some speed (if any).
Oh just throw more hardware at it, it'll be fine...
I'm not sure "technology" does much to solve their problems, which mostly involve 1-3yr old children running around trying to hurt themselves.
True. Feel free to push a Vagrantfile to the repo.
hahaha :D I'm wondering what could be a suitable name for that library..
This could be solved by: //Remember to set your condition outside the loop! -var count = 0; var loop = function() { +var count = 0; while(count &lt; 3) { //Your code goes here! console.log("I'm looping!"); count++; } }; loop() A topic on scoping should be coming up soon that hopefully clears this up!
It looks like shorthand for making a function, but it is kinda convoluted syntax, not sure how something like this gets "rolled out". I don't really see it as intuitive or saving much bandwidth, but surely it is gonna cause a lot of headaches/costs with zero added functionality, looks like a bad idea to me.
I see you've used Eric's Ruby project ;)
Yes! Couldn't be done without it :) 
Quick question: any ideas on passing args in a windows environment? I know I can do `python hello.py world` in python but how do I do something similar in node? In other words, I can't run `nodecup` in cmd and I don't want to edit my PATH specs. The only way I can see results is through `require("nodecup")` but it prints every single result without the ability to filter it. Otherwise, good job on the tool! EDIT: Nvm, I managed to hack it to work!
It's too bad no other gurus want to explain precisely what's happening.
For starters get rid of the mysql...
red and green are the worst colors for colorblindness, which is kinda funny because the reference gene is in green, not blue...
Unless I am haven't been paying attention to updates on this: the MySQL module is vastly underpowered compared to other languages in terms of performance. Php, for example, will outperform node here (helps when it's SQL libs are in c).
Regardless of terminology, I know that it's because the value of the variable, being declared outside the outer function's scope, is being updated at every iteration of the forEach. By the time the get bounding rect calls are made, the value of the last iteration of the loop is stored in cellIndex. So every call gets the same cellIndex, which makes each top parameter the same.
Errors of fact and spelling are appreciated
thanks
i like the diagrams :D
Hmm...I think that's mostly right except this part, "By the time the get bounding rect calls are made, the value of the last iteration of the loop is stored in cellIndex. So every call gets the same cellIndex, which makes each top parameter the same." The guys in IRC were explaining to my dumb, old behind that the value of the last iteration of the loop is stored in topOfCell so by the time getboundingrect calls are made these two lines will get that final value: bottom: topOfCell + cellHeight, top: topOfCell, Or so that's what I interpreted.
Maybe you could console.log(topOfCell) as it loops through and put a method in your returned object to see what that is as well each time getboundingrect is called. 
Apparently this is what happens: http://imgur.com/2AnRW44 The guy that drew this said the bottom three squares were supposed to have function getBCRect1; function getBCRec2; function getBCRect3; instead of function getBCRect1; for each.
I'm glad not everyone drank the kool-aid. ES6 is bad for the language and its current user base, bad for readability, good for only ruby/coffeescript programmers who never liked the C-style syntax. Javascript is turning into a frankenlanguage and that isn't really going to make everyone happy. When you try to make everyone happy typically you end up making nobody happy. Anyone who thinks the changes in ES6 towards coffeescript syntax is a good thing is not using critical thinking, is being stupidy optimistic, or ignorant, or all three (ex: a coffeescript developer). 
Are you asking what libraries you would use to connect to the database? [node-mysql](https://github.com/felixge/node-mysql) is the most commonly used underlying driver, and is what 90% of mysql ORMs are built on top of. This handles the database connectivity and execution of queries. It should be pointed out that it doesn't support prepared statements or SSL connections, limitations that [node-mysql2](https://github.com/sidorares/node-mysql2) was built to overcome. The most popular SQL ORM is [Sequelize](http://sequelizejs.com). [Bookshelf](http://bookshelfjs.org) is also very popular.
Similar in the sense that it's a CMS, but you can't just import your wordpress setup into it. It doesn't even use MySQL. It certainly shows promise as a potential competitor tho.
Sails is worth a look. It comes with the Waterline ORM which can easily be connected to MySQL. It's pretty new, however, and is fairly basic (for example, you'll want to use the 0.10 beta if you want associations between tables). If Node and MySQL are already a given requirement for your project, it's worth checking out. 
y_pos only holds the number of pixels above the nav element when the page initially loads. It doesn't need to be updated. scrollTop holds the number of pixels above the nav element as the user scrolls so that *is* updated during scrolling. I've found that jquery gives the nav element some inline css of "top: 0px" which doesn't go away once the navbar-fixed class is removed. (because it is inline) The only function I've found that affects inline styles is .animate(), which works but now I have a new problem. It appears to get get executed arbitrarily. My guess is it has to run a bunch of things in the queue before it actually gets to my animate function. **edit:** using clearQueue() just before using the animate property again seems to confirm my hypothesis. Can anybody provide a critique of this? Is there a better way to do this? (Without using CSS Transitions)
If you have a question conserning jQuery, please write it in the title. Not everyone uses it.
ah ok, I'm sorry about that.
I have it installed and running. How do I create an account so I can see it in action?
:-) OK. 
Thanks for all the investigation, dude. If I could, I'd give you gold.
That's because the test at line 11 does not verify if the `navbar-fixed` class has already been added on the `#navbar` element. See here: http://codepen.io/anon/pen/yFDIl
node-mysql2 improves on this a lot.
They're UML sequence diagrams from websequencediagrams.com.
Bostock's Topojson is pretty far along now, so you can actually avoid the ogr2ogr step and just use the topojson library to parse the shape files. https://github.com/mbostock/topojson/wiki/Command-Line-Reference#usage
Awesome! I notice it also replaces the simplification step with ogr2ogr as well. Does that mean there is any reason for ogr2ogr to be installed? P.S. Looks like some(all?) of topojson is implemented in Node.js, that is awesome as well.
Correct and correct, you do not need to install ogr2ogr and topojson can be used by Node.js through require (commonjs or AMD).
I would love to see a tutorial since I am interested in this subject.
Amazing! I got this on bookmark. Version 2: make it mobile for couch surfing.
Yes! I just needed to create `index.js` with the only code being `require('nodecup')` and then call `node index.js today`. I saw the script only reads `args` from the command line and I didn't want to bother rewriting the entire script. Seems to work for me! Sent you a pull request with windows instructions
Try using the "Node.JS command prompt" terminal, il should be installed with Node.JS, I've just tried it and it works http://i.imgur.com/HWqR4iX.png
Some of the maps/cartography related subs might be interested in an Xpost. Anyone know which ones in particular might appreciate this the most?
Since you asked: &amp;gt;**P**utting statically analyzed imports inside conditionals is less stupid that it seems at first glance as it makes **writing** polyglot programs that can run in different environments possible**.** **F**or instance**,** it’s common to see something like the following in the wild:
I do like D3.js a lot. I wish I had the time to read the complemte D3.js documentation.
Google has a guide on this: https://developers.google.com/webmasters/ajax-crawling/?hl=fr Also, looks like http://prerender.io is another option.
That was really well done, even a little fun. A custom, functional musical and graphics language running in JS isn't something that you see everyday. Here's the repo in case anyone else is curious: https://github.com/ChadMcKinney/Lich.js
How much Javascript do you know? A bit of searching with google should get you on the right path easily enough.
If you squint really hard after drinking a handle of vodka and smoking an eighth of the most potent chronic, this almost looks like a stripe checkout flow
I think you could do this with JS. It depends a bit on how the criteria result in a score. If it's complicated math, JS might not be sufficient, but I have the feeling you're not going to do a lot more than comparing and adding scores. Creating spreadsheets is the tricky part. Do you actually want the user to be able do download an Excel file? That's tricky (there is no real drop-in solution) but quite doable. Google 'excel create javascript' for some tutorials. If you only want to show the results in a table, use HTML tables in stead. Of course, there's several alternatives to a JS solution. A PHP/Python/Ruby backend with a HTML/CSS frontend can do the trick as well.
A CSV file is an easy alternative here.
Wow! That will come in handy!
Thanks for the reply, from what you say I think it'd be possible. It's basically just some criteria we use in the hospital. It's essentially a list of symptoms that fit into a category. If a user selects a symptom in that category it will just display the category after the user submits the choices they selected. For the tables it's just purely for collecting data. Very similar to how Gdocs collects information from their forms. 
I'd need more details to give a definite answer, but usually, JS is a good fit for these cases. I did a medical/science project that sounded very similar to what you described, and the whole web stack (HTML/CSS/JS) was a perfect fit for it.
We just have a set of criteria that lead to a specific activation of services in the emergency department. Basically it will be something like: {HEADING} -- All these lead to 1 specific output Specific blood pressure Fracture Age Mechanism {HEADING2} Different criteria ----&gt; second output So basically the user will just click the presenting symptoms, hit submit (where data will hopefully be sent to a spreadsheet), and the screen will display the proper output based on the symptoms selected. I can't give too many details, I hope that is specific enough. 
Yeah you can use JS :)
Fixed thank you 
Just a question. Is it possible to solve the question by clicking on a checkbox per criteria, ie. a criteria is binary and not multivalue. If so, it could easily be solved by using checkboxes with a label where you define the label as the criteria and hide the checkbox. The basics of styling a checkbox can be seen here: http://webdesign.tutsplus.com/tutorials/quick-tip-easy-css3-checkboxes-and-radio-buttons--webdesign-8953 And a similar princible can be used with your criterias.
Change it to be like this (function() { var app = { click: function () { alert("hi"); } }; $('img').click(app.click); })(); The click event needs to be in the same jQuery function. Also, you need to remove the () from the click function handler, you are passing a reference to the function, not running the function.
Have you thought about using pushState from the HTML5 api ? http://moz.com/blog/create-crawlable-link-friendly-ajax-websites-using-pushstate EDIT : there's an example in the link where you can have a look at a SPA (or a simple version of one) with fully indexable and bookmarkable URLS.
You aren't going into details, but it *sounds* like you are wanting to build an observation/diagnosis engine. Correct? Observations go in, correct diagnosis comes out? Are you planning to make it "smart" enough to learn correct diagnoses over time? If you're doing anything remotely like that, you may want to consider a more complex system structure. Consider using JavaScript and HTML/CSS for your front end display, but using a back end system capable of doing more precise calculations than JavaScript can handle. Consider Python, Java, or C#. That's a wild stab in the dark there... It's possible you can do the whole server side aspect using node.js and just JavaScript. But I suspect that you'll need a more complex server side situation than you are envisioning. But that's probably to be expected as you are a medical student and not a computer science student--your expertise is in a different domain. 
Why is `app` stranded alone in that IIFE? That effectively hides it, making it private and inaccessible to any other part of the program. The usual pattern is to expose a single symbol from an IIFE: var App = (function() { var some_private_variable = 42; var some_private_helper = function() { ... }; var app = { click: function () { alert("hi"); }, // more public methods here }; return app; })(); The `some_private_variable` and `some_private_helper` are not exposed to the outside world, but can be called from any function inside the IIFE. Any properties of the return value become public methods on the global symbol `App`. 
You can use a SaaS like [SEO4Ajax](http://www.seo4ajax.com/), it supports both #! and normal paths and it's entirely free during the beta.
Just make sure that your /foo/bar url returns relevant text content in the server-generated HTML, with a proper document title and a meta description. You don't need an entire prerendering step for this, and you can replace this static content using dynamic angular-generated content immediately after the HTML has loaded. Google does *some* JS parsing, but it's not full–featured, reliable or predictable at this moment.
bookmarked for reference. This will be useful.
or user Frame.js which offers several advantages over the approaches in this article or a library like q or async: https://github.com/bishopZ/Frame.js
 var minutesFromNow = 90; var newTime = Math.round((new Date().getTime() / 1000 ) + minutesFromNow*60); 
Promises are a bad, temporary solution. A really good solution is already available and an even better solution is coming with ECMA 6.
&gt; Google does some JS parsing, but it's not full–featured, reliable or predictable at this moment. You're right, my tests show it's not ready yet and quite buggy, cf. https://www.google.com/search?q=site%3Abbc-progs.appspot.com&amp;hl=en
I wonder why they can't/didn't inline these native functions into the JIT output. 
Will you name the better solution? Promises [ARE](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) part of the ECMAScript 6 draft.
Doesn't matter: both these and the native functions are JIT. But the native versions have to do the edge-cases from the spec, so will do more work, and so will always be slower.
Hmm, this almost sounds like what asm.js is supposed to be doing - could that be the case?
&gt; implementations in fast.js are always going to beat the native versions Not necessarily. For example, in the case of the foreach example, there is nothing that prevents the vm writers from putting down a "this is a sparse array" dirty bit on an array, and then doing the exact same thing that fast is doing. They don't do it now because the performance benefit doesn't outweigh the safety. In the end with the foreach problem, If it really was the overhead that was killing my apps performance (it isn't), Before I would even look at at using fast.js, I would probably first rewrite it as a decrementing for loop. That would be just as fast if not faster than what fast is doing and I get the added bonus that if it so happens that I do pass in a sparse array I don't have to figure out what fast is doing to realize where the bug exists, rather it would be pretty clear that the bug exists in my code.
Benchmarks and instructions on how to run them are on the Readme 
for loops will always beat this kind of library, yes, but sometimes they're not at all convenient and sometimes you really do need a function, in which case fast.js's `.map()`, `.forEach()` become useful. but regarding your first point, it's not just sparse arrays, there are many things that the native implementations must do to follow the spec which we can simply avoid in fast.js, see this comment from the excellent Petka Antonov - https://github.com/angular/angular.js/issues/6697#issuecomment-42771111
How about a solution that allows asynchronous calls to look like this: var users = db.lookupUsers(someFilter); if (users.length) throw new Error("no users"); for (var ui in users) { var user = users[ui]; var emailAddresses = lookupEmailAddresses(user); for (var eai in emailAddresses) { var emailAddress = emailAddresses[eai]; sendNotice(user, emailAddress); } } Regular old JavaScript. Fibers allows this now, and generators will allow the same in ECMA 6. Do that with promises. Show the code.
They don't have the for-i loops though. And that leaves the note about how much more complex the native functions are.
Yes, but once again we're bitten by the fact that JavaScript--like Ruby and other languages with a pedigree stretching back three decades to Smalltalk in 1980--has this idea that classes are global and are open to modification and extension on a global basis. So you can't *just* write a node app, use fast.js, and not use sparse arrays. You have to ensure that every single module you include and all the modules they include don't use sparse arrays (or any other edge case feature fast.js ignores). At some point in the future, a minor dot release of a module anywhere in the dependency tree can start using an edge case feature internally, and boom, it can break your app. I am not criticizing fast.js, I'm criticizing a fundamental broken idea in these languages that reheat ideas from the 1980s. If we really want to make ES7 work for large-scale apps, we should solve this problem so that you can drop fast.js in without a care in the world. **edit**: I'm wrong! I'll leave this up as a cautionary tale against quickdraw-mcgraw commenting.
Yes, but ECMA 6 adoption is still in its infancy. Most of us have to work in the real world, and that's not even ECMA *5* in many cases. This is /r/javascript, not /r/node
But this doesn't replaces, modifies or extends the native functions. I get your point, but how would this be different from me writing a function that just loops (the .forEach of fast.js is just a loop with no sanity checks) and just using that in my module?
You're absolutely right, I misread the example. I'll sit here and "Take the shame." +1 for you.
this isn't really the same thing as "Google now crawls single page apps".
Thank you for the clarification! I couldn't have guessed all by myself. Anyone living in 2014 that cannot use ECMAScript 5 is just considered obsolete. If you actually see the [status](http://caniuse.com/promises) of the current implementations in popular browsers, you can tell that they're catching up... or you could just use [RSVP.js](https://github.com/tildeio/rsvp.js).
[The actual website OP didn't link](http://simpl.info/)
If a loop is such a hot spot in your code, wouldn't an optimized for(;;) yield the most perf. gain, since it skips the extra function calls in the first place? (edit) http://jsperf.com/fast-js-benchmarks
&gt; generators will allow the same in ECMA 6 Curious to see how you'd accomplish the above using generators and no additional asynchronous primitives (eg. promises), just pure callbacks. With a library like [co](https://github.com/visionmedia/co) and generators (either using promises or thunks), one could write this: co(function *() { var users = yield db.lookupUsers(someFilter); if (users.length) throw new Error("no users"); for (var ui in users) { var user = users[ui]; var emailAddresses = yield lookupEmailAddresses(user); for (var eai in emailAddresses) { var emailAddress = emailAddresses[eai]; sendNotice(user, emailAddress); } } })(); 
&gt; and sometimes you really do need a function var doFunction = getThatFunction(); for (var i = 0; i &lt; thingy.length; ++i) doFunction(thingy[i]); Tada! You now have a poor man's foreach loop that is just as fast or faster than fast.js. Each of these functions are pretty easy to implement if you have to. A little more bulky? Of course, but most optimization are that way. Sure you could just use fast, but why? If the performance overhead of the foreach function truly is a problem, then de-functionalizing the foreach loop into a plain for loop will buy you more performance than anything else will. The same can be said of .map, .foreach, and other situations. &gt; but regarding your first point, it's not just sparse arrays, there are many things that the native implementations must do to follow the spec which we can simply avoid in fast.js, see this comment from the excellent Petka Antonov The first response by jdalton. &gt; :+1: for allowing the devs choice. To address @petkaantonov point, he's right **emerging native API's rarely have a focus on performance as implementers are more concerned with simply getting the API working correctly.** Native API is no guarantee for performance. Making those calls requires profiling and weighing the pros/cons of native vs. custom implementations. emphasis added by me. Just because you CAN be faster now, doesn't mean that the engine writers can't add loads of trickery later. The bonus of using the native API is that you ARE assured that every one of the cases will be guarded against per the spec. That being said, there is nothing to prevent the engine writers from optimizing the hell out of those calls and guaranteeing those checks early or lazily in a fashion I mentioned. The vm writers have to power to analyze the hell out of the array and method call. They do it all the time in the regular course of optimization. The statement "fast.js will always be faster" is just wrong we have no idea just how far the vm writers will go to make these functions fast. Not javascript, but it still applies "[Don't help the compiler](http://channel9.msdn.com/Events/GoingNative/2013/Don-t-Help-the-Compiler)". The crux of this talk is that the compiler (or in our case, VM) knows everything about the code, so your best bet is to first write idiomatic code and rely on the fact that the compiler writers are going to try and optimize the hell out of it. Attempting to outsmart it will make your code harder to maintain and possibly slower. For a lot of javascript, it is written once and run a million times. The VMs, however, are constantly improving and getting better. There is no telling what sort of optimization is going to happen in the future. Still though, I find it hard to believe that foreach or map overhead would ultimately being killing any application performance. More likely the algorithm being used could be tweaked to be faster.
I don't disagree with you. I agree that ECMA 6's generators are a great way to handle asynchronicity. And when I get to develop in latest versions of Node.js, which is rarer than I'd like but frequent enough that I don't go crazy, I enjoy their use. Your link for native promises clearly shows that ECMA 6 adoption in browsers is still sparse -- the browsers I love have it, and that's great, but the browsers I have to support don't, and that's not great. And it's not just IE that's the problem -- older mobile browsers also don't support it, and that's a huge part of the market right now. 
Is this library meant primarily for node? Are there any advantages to using fast.js in the browser (not just Chrome) over an established, performant solution like lodash?
it's mostly designed for node, yes. In the browser you're less likely to be doing things that are particularly computationally expensive, so this probably won't provide any noticeable improvements there.
What /u/noonches and /u/Rhomboid said is correct. You should also know that `app.click` will be called with a context of `$('img')` (well, the underlying DOM element). If you want the function call to have `app` as its context, you will need the following: $('img').click(app.click.bind(app));
I see :). It'd be interesting to observe how fast.js stacks up against similar utility libraries on npm.
Not really. If we're strictly testing the speed of loop constructs, an IIFE in the loop body is in no way essential to that.
Only superficially, in the sense that they're both intended to "speed things up". asm.js requires that you write your JS using a highly-specialized subset of JS; fast.js just rewrites native code in userland, and gains speed by omitting certain features that the author claims are rarely used (and is probably correct).
&gt; I would also like to point out that according to some the speed of certain document stores (like mongodb) + in library joins (like mongoose populate) is about the same or better than SQL in engine joins. That would be amazing if true. Consider that: * Database engines support multiple join methods (nested loop, hash join, merge join) - each has to be optimized for speed. * Database engines have complex optimizers to determine which joins to use in which order, whether they can move some filter logic down into earlier queries, etc. * Much of this is done in memory on the database server. This is all very mature &amp; sophisticated on pretty much every database server other than mysql. To be faster a library would have to do all of the above - plus add pulling all that data over the network to an application server for joining. Imagine joining a couple of 20 GB tables together on a server vs over a network.
&gt; Mongo is fine if you actually take time to learn it This is the same company that told developers their total lack of security was fine, just keep it off the internet, right? And that has no decent open source backup solution, right? And that says it's great for analytics, when it's the worst possible solution imaginable for analytics, right? And doesn't this list of bizarre and weird actions and statements by this company just go on and on? &gt; And, it is possible to have relationships in Mongo Sure, slow, unenforced relationships. Who wouldn't want that?
I would say the opposite.
Even though you were wrong, your shit still applies to a case where it wasn't so as it is.
Are you using Word as a code editor?
Reddit needs more comments like this one. I'm not expecting that we all agree on something, but certainly make concise statements and expand your point of view on the subject.
As I said, I am parroting info that I have read to be true. I have been researching this a bit to try to decide if MongoDB is just a hobbyist tool for me or if I will use it for a larger project that I have coming up. So far the things I have read have been very, very polarized which makes it hard to decipher what's bullshit and what isn't. Then again, I assume that the statement could be true in certain scenarios and very false in others.
&gt; So far the things I have read have been very, very polarized which makes it hard to decipher what's bullshit and what isn't. Yeah, it's like MySQL vs everything else. Hobbyists and front-end developers prefer it because it's one of the easiest databases to work with. Almost everyone else prefers postgresql, sqlite or anything-but-mysql. And there's legitimate reasons for that - from vendor trust to bugginess, performance, quality, and licensing of the product. And MongoDB is extremely similar on almost every count. &gt; Then again, I assume that the statement could be true in certain scenarios and very false in others. Joins at the application layer will often be best if your data is coming from multiple databases, especially multiple database products. It's not guaranteed to - since databases like Postgresql may simply be smarter at the joins than the application developers. But I think this is the primary case to look for. A secondary possible case is in scaling out the database. If you want the best consistency and you have a lot of data then it's conceivable that you might leave a core set of data on the central database servers and use a bank of application servers to join against some large additional data. This could help in scaling out and maintaining consistency for a subset of data. I think this is a fairly rare scenario. Other than the two above, the only time I can think of joining being faster at the application layer is if my database engine can't make the right decision on joins. Most likely to happen with MySQL but it can conceivably happen with any engine. Though in most cases it just takes additional statistics, and the occasional SQL-tweak to get it to make the right choice in my experience.
The question is, how would you hide the use of generators? It's not as if wrapping everything with a `function *() { // sync code }` will enable such behaviour.
Nice introduction to TDD, but as a puzzle solver this is pretty basic and misses out on a lot of [complicated strategies](http://www.sudokuwiki.org/sudoku.htm). 
Whoa! This is awesome, thanks for the link!
I'm assuming that you would use this for non-web applications or server-side scripts since network transfer times would defeat the purpose of fast.js' optimizations in almost every web app.
Would this not work? function lookupUsers(filter) { function* LookupGen() { mongo.query(filter, function(err, docs) { yield docs; } } var gen = LookupGen(); return gen.next(); } 
Oauth2's implicit grant was made specifically for this issue
Doesn't OAuth2 still require a web application server?
How is the random token different from an API key? And how would GMail authenticate this token without knowing WHEN it was issued and that it was issued to you and not intercepted by someone? Also, why do you need to send Javascript code that's dynamically generated? 
You need the server to output at least one html page, yeah
You could make a short "bootstrap benchmark" the first time your app/page encounters a browser, to determine which methods are faster on the browser, and redirect to the fastest one. You might lose a few moments of CPU time at the beginning, but it would optimize the rest.
Interesting to choose a species of incestuous monkey for your library name.
not particularly
Sounds like HMAC style authentication.
slightly less shitty benchmark http://jsperf.com/fast-js-benchmarks/2, many optimizer will realize that if a function has no side effects, and if you don't do anything with the result, then it doesn't have to be run. a while/for loops will always be faster code wise (though dev speed the natives are always faster) but the while/for loop is only faster in a helpful way if it's a choke point, if you even think about touching the dom anywhere in your loop then don't even bother with a for/while, the speed your lose by using forEach is dwarfed by the dom access time.
Well, reddit's search has never been accused of being great, so it's entirely possible it has and I just couldn't find it.
Yep that's it. I honestly can't believe it's never been posted here since it's been in a few of the Javascript digests. It's great fun. Edit: also here is a good write up on some of the functional aspects I was referencing http://fr.umio.us/why-ramda/ it's pretty incredible what a difference the ordering of the predicate vs the collection makes in this context but Ramda definitely therefore fits more closely with more traditional functional programming. Here is an excellent video that delves know that iirc http://m.youtube.com/watch?v=m3svKOdZijA I'd wager the original authors of underscore were perfectly aware of this but wanted to keep it accessible when they created it (and I do love both underscore and lodashes code bases so I am not knocking it by any means). 
It may have, I just did a quick search so I might've missed it. Thanks for the link!
Not for looping n times there isn't, but `while` is almost a `for` without the init and increment statements, which aren't always needed. Consider `while(thereIsStillGarbage()) collectGarbage()`
If you can dynamically generate javascript on the server and send it to the client, couldn't you just as easily send the email contents from the client to your server and have the server validate based on your criteria and send it to gmail if it passes muster?
I dont know what that is but I spent a good while making spinny things
I think in this case all browsers would run the for loop, since it has the side effect of incrementing i. The out[j] = array[j]; just adds noise to the test.
You might check out firebase (firebase.com) which offers authentication, database, and static hosting services. And they have a decent free tier. I did a small intro write up on using firebase with browserify a couple months ago. http://www.tomhummel.com/2014/05/17/firebase-npm-browserify/ 
Unless it's continuously tested, this just isn't true. I've seen plenty of 'faster than JS' functions which do less work, end up slower over time. edit: A good example is if your code makes it difficult for optimizations to be added on real-world code. For example in your microbenchmarks, 'forEach' only operates on an array of whole numbers (which can internally just be ints). However in the real world, 'forEach' may be used with an array of strings, objects, integers, floats, a mix of ints and floats, and so on. So the types of the parameters would actually change between your micro benchmarks, and real world code. It might be that your 'forEach' is still faster than the in-built one, but it's an example of how code semantics are drastically simpler in a micro benchmark. So it's possible there are places where you code ends up faster in a micro benchmark, but slower in real world code. I'm not saying your code is slower; I'll probably actually end up using bits of it. Just that you cannot take the presumption that all of your code is automatically always faster because it doesn't do x, and that includes even today on the current version of Node.
No, because in asm.js it has very specific syntax that you must follow. For example every integer value is bitwise or'd with 0, ensuring it is *always* an int in both asm.js and non-JS. That is what is so special and appealing about asm.js; the behaviour of asm.js code is *the same* in engines which do not support it.
&gt; I probably sound like an idiot since Im an ametuer at all this, You're not an idiot just because you aren't well versed in a single highly technical subject. I'd recommend using one of the 1000's of online timesheets out there instead of rolling your own duct taped solution.
&gt; `Bonobo('monkey')` creates and returns a new `Employee` Wat.
".js"? It's written in CoffeeScript. var Person = function() { __extends(Person, Sirius.BaseModel); function Person() { return Person.__super__.constructor.apply(this, arguments); } ... }; Riiiight.
Because router it's main part all frameworks. Also it's have built in Model. Generally it's a M*C framework. 
Router it's a main part, for model you might use Backbone.Model or http://www.breezejs.com/ or you own model implementation. 
&gt; `helloApp.controller( "HelloController", [$scope, function($scope){` This is wrong. First array element should be a string. Also, I would expect some mention of the "controller as" syntax in a best practices guide. Injecting `$scope` should be avoided where possible, in my opinion and the opinion of many others in the Angular community.
Any suggestions for a good data visualization framework?
d3, highcharts, ... depends on what kind of visualization you want to do
Light weight? You could try riot.js instead. That at least has templates and an internal event system instead of relying on less light weight "plugins".
* [App Structure Best Practices](https://docs.google.com/document/d/1XXMvReO8-Awi1EZXAXS4PzDzdNvV6pGcuaF4Q9821Es/pub) * [Google Angular Style Guide](https://google-styleguide.googlecode.com/svn/trunk/angularjs-google-style.html)
That's what I would try to avoid. Theoretically this different type of authentication should work with server-less pages.
Part of the validation is based on the token dynamically generated inside the JavaScript, so I still need that initial interaction.
Yes, i saw, but in riot necessary define events in models, it's not very good. How to define relations between models in riot.js? Where a validators for models? I must be to write it, or use plugins. Also riot.js have in dependencies jQuery, but what if I do not use jQuery? 
If you really need something that can do 2Mops/s versus 1.5Mops/s because of a perceived bottleneck in that function then there's something wrong elsewhere in your code.
How about this, written completely in JavaScript: https://github.com/Nitij/JsMvc
It didn't seem urgent to discuss. What if I show you the function function compose (a, b) { return function (c) { return a(b(c)); } } And you tell me that instead of writing `var foo = compose(bar, baz);`, you can write: function foo (x) { return bar(baz(x)); } Perfectly cromulant, of course. And there are tradeoffs to be made between using a function to compose functions, and using explicit code to compose functions. A comment is too small to rehash the entire Programming 101 of composition, but the fundamental idea is that if you use dynamic things--functions, methods, properties--to compose bits of code, you are operating at one level of abstraction higher than writing static code. That isn't always a good thing, code can become baroque. But it is *a* thing. I will close with just one example. And please don't debate this example, it is not helpful to have a discussion where one person says "A benefit of X is Y," and the other person says, "But I don't care about Y." You may not want to do any of these things, that's how programming works, not ever tool is used by every craftsperson at all times on every job. But the one example is that given a functional way to write predicate dispatch, you can extract some commonalities into functions. For example, this is the Identity function: function I (x) { return x; } And this is the K combinator: function K (x) { function y (z) { return x; } } Now we write: var always = K(true); And then for readability: var elseReturnTheInput = when(always, I); (`elseReturnTheInput = I` also works, but maybe we have some logging or debugging we want to add later, so let's use the full pattern). Now we can write our factorial as: var factorial = Match( when(greaterThan(1), function (n) { return n * factorial(n-1); }), elseReturnTheInput ); And elsewhere we can write something that crawls a tree made up of arrays of arrays: var crawl =Match( when(notEmpty, processNode), elseReturnTheInput ); Is that important? Not hugely at this scale. But it points to an idea that you can extract the work to be done and the condition. That's the problem with blog posts, Twitter, conference talks... If an example is small enough to be grasped in real-time as you read, it's generally trivial enough that there are simpler alternatives. &gt; "It's like a finger pointing to the moon. If you concentrate on the finger, you will miss all the heavenly glory."--Lao Tzu, famously quoted by Bruce Lee
True, but until Google fixes their shit, this is a simple and pragmatic approach.
this is a typical method for preventing cross site request forgery. each request or session gets a key and that key is sent along with every request and validated.
You need a better job. Anyone who has to support IE8 or obsolete mobile browsers is not a self respecting web developer. 
Wow cool, nice work
Sweet. I would suggest adding livereload to your project, also use gh-pages to create a demo since there is no backend.
How unimpressive? I figured there would be some savings
lmftfy: https://github.com/petkaantonov/bluebird/wiki/Optimization-killers
According to caniuse.com it *does* work, but it's prefixed: http://caniuse.com/audio-api Are you sure this does not work? window.AudioContext = window.AudioContext || window.webkitAudioContext; var context = new AudioContext();
but doesn't that also change the speed?
Uuuh do you mean so it livereloads changes to the index.html? I have looked into createing gh-pages before but not ever done that yet. I will take a look at doing live reload first then see about moving the example into a gh-pages branch or something!! Do you guys think making a grunt serve task would be good too, so it makes it easy to view the example?
I second the demo suggestion, even the best docs in the world can't convey exactly what an app does near as well as the app itself can. Otherwise this looks like a neat project, though I'm not sure precisely what it does (and how).
I think that if you're happy with writing a case statement to implement a factorial function, you should use it. I also think that you have an absolute right to shrug your shoulders and say, "meh," any time you like. It's not my responsibility to worry about it. I'm not trying to convince you to stop using case statements in JavaScript. But really, this is not a productive discussion. In my opinion, a far more productive argument against using functional composition to implement predicate dispatch is [this][1]. [1]: http://www.reddit.com/r/programming/comments/28wwab/greenspunning_patternmatching_and_multiple/cifg466
Looks very cool! Digging on Angular implementations. If you're interested in equivalent Data Vis stuff in Ember.js, have a look at http://embervis.affin.io/slides / http://embervis.affin.io - used Ember Components to handle some pretty rad stuff.
Check out theresa-s-sound-world: http://theresassoundworld.com/ If you want a super high level summary of this lib, we talked about it here in the 5 minutes of javascript pod cast: http://five-js.envylabs.com/episodes/25-episode-25-may-1st-2014/stories/171-theresa-s-sound-world
This looks great. Can you change the pitch of an audio file or just an oscillator as shown on the page? I would see for myself, but I'm not on a computer right now.
Demo. Demo is *not* optional. 
A detailed description is always good, however it's still not going to help me that much; reading about something will never come close to showing what it does near as well as actually using it. Unfortunately, I don't have time to go through the process of setting it up locally _just_ to see if it's something I might want to use. If the description isn't dead simple -- "This project does ____, the end." -- then a demo is practically required if you want people to seriously consider the project.
Ok, when you have a 10 models, in each i need create a event listeners, it's 1. Not correctly for architecture. Generally models should interact with View through Controller. 2. How to maintain this? I must find each models, and change listener. Instead of change in one point (router). But riot.js is a great framework, it's simple for understanding. &gt;It's a often repeated, yet untrue misconception that riot.js has a jQuery dependency. You can use vanilla JS, zepto, or any other frontend toolkit doing jQuery's job as well. Great. 
D3 is far more focused on svg objects rather than typical dom elements. Yes it can build out a page like angular, but most people will probably only take advantage of the svg aspect. D3 has it's own 'Enter, Update, Exit' methodology to handle manipulating the visualization based on the dataset. You can, however, use pretty much any JS you want to handle that data. You would just to feed the data changes back into your D3 object.
I came here for epilepsy and what I gaa ksdklajskdl jaeji ukladkljaskldj adksla dkjs klas;dkj But seriously: that is very good simulator of those strange thingies you see when you push your closed eyes with your fingers.
Live editing and grunt server is now working correctly. All you have to do is run grunt and it should build the files and load the example demo in the browser automatically!!! Just need to commit it, which I will do in the morning!!
Is that the one that gives you no data security so any visitor to the site can modify any record in your database? I doubt it's being used much yet. I find that with a lot of new tech, people online hype it a lot because it sounds cool, then they go back to their day jobs and forget about it. Other people assume that it's being worked on heavily, but it's really just a few guys working on it and it languishes in pre-release state for a long time, if not forever.
Yes it is. Big updates and community built packages are coming regularly. I've used it in a few production apps, happy with the performance. Big companies? Maybe not so much, but it is early days and still not 1.0. 
As /u/obey_giant states it is under very active development. It is quite some time since the data security thing was implemented. Sure sounds like you went back to your day job and never looked at it again.
It is the one that *did* that. All these big security-issues have been resolved. I've been using Meteor for a while, and it's awesome.
D3.js is not.... easy to make maps with.