You didn't happen to attend AppAcademy did you? I've seen lots of awesome Asteroids games come out of there, including [my own](http://asteroids.aaronik.com) ;)
To be honest, everything I've ever read about promises has presented them as being sequential and I haven't thought of looking for another way to do it. I'd love to see some code samples or documentation for how to implement it. Any pointers?
Says so right there on the linked page, under "Performance Comparison #1".
&gt; I like to think of functional programming as a way of making your application like an assembly line or car manufacturing plant. ... or like the Bash command line with multiple processes connected by pipes. I use this kind of programming in jQuery and Bash but the essence is how we avoid using global variables and there is no state except the pipe - that makes it easy to compose basic operations (like cut, sort, uniq, wc, etc) Other than that (and JS callbacks) I don't use functional programming. Is there another popular usage of it?
Can't seem to get the dungeon to work. Character creation works well, but the dungeon doesn't display 
using jQuery's `$.when`.... $.when(promise1, promise2, promise3).done(function(results){ ... }) will return a new promise that won't resolve until all 3 promises have resolved.
His freaking "Find the 25,000th Prime" made me just want to make a rough one. Simple enough to say, my program worked, but efficient wasn't what I'd call it. var primes = new Array(); primes[0] = 2; var z = 3; for(var x=0; x&lt;z; ++x){ if(primes.length == 24999){ break; } for(var y=0; y&lt;primes.length; ++y){ if(z%primes[y] == 0){ break; } else if(y+1 == primes.length){ primes[y+1] = z; console.log("Added new prime in position : "+primes.length+" with number: "+z); break; } } ++z; } I realize this is sloppy and handled poorly (like that for loop instead a while(primes.length &lt;24999), or god knows a better method, but I don't suggest using this code. Glad it worked though, but 15 seconds wasn't quite how long it too mine (more like a few minutes and my laptop yelling at me).
Because it provides easy-to-use methods for interacting with MongoDB. It is ORM, actually. It helps you forget about driver's query documentation, and focus on your models.
Very pretty. I especially enjoy the way it was done entirely with HTML rather than SVG or Canvas, as one might expect. 
Try this.. &lt;script language="javascript"&gt; var totalcount = 0; var count = 0; $(document).ready(function () { $("li").hide(); totalcount = $("li").length; setTimeout(showli, 500); }); function showli() { if (count &lt; totalcount) { $("li:eq(" + count + ")").show(); count++; setTimeout(showli, 500); } } &lt;/script&gt;
Maybe you could do something like this (after velocity has been attached to jQuery)? $.fn.velocity.animate = $.fn.animate; //backup the old one $.fn.animate = $.fn.velocity;
Random things being highlighted on the website while dragging is a deal breaker, it makes it look so unprofessional. It's ridiculous how many sliders have this issue when it's so easy to see and fix.
I think it simply uses css-transitions (which are backed by the GPU)
https://www.destroyallsoftware.com/talks/wat
I don't even...
And (0.1 + 0.2) === 0.3 is false...
Primus will handle falling back to long polling if a websocket doesn't work. Good point on the vendor lockin. Even better if everything is based on a protocol so that libraries can be swapped in easily: http://xmpp.org/extensions/inbox/buddycloud-channels.html
Nice. Also: false &lt; true
wat. Is there a reason for this?
Another reason to put filtering and business logic on the server side.
null in JS is not the same as null in many other languages. null is falsey and as a falsey value, it is equal to 0. 
Yes, but it's complicated. The '+' operator is not defined for arrays in js, so it treats them like a string. Thus: [] + [] // "" When you add a string to an object, the object gets typecasted "" + {} // "[object Object]" So it makes [some] sense that [] + {} // "[object Object]" Taking it a step further, you can treat a string like an array "hello"[0] // "h" So you could even do ([]+{})[0] // "[", which is the first character of the typecasted string Then you use a boolean operator on a string, to typecast it as a boolean !"" // true !"x" // false A boolean operator on an array is the same ![] // false use a plus to typecast the boolean to a number +![] // 0 Then invert the boolean with another not to make it a 1 +!![] // 1 So you could easily add them together to get any number +!![]+!![]+!![]+!![]+!![]+!![]+!![] // 7 To recap a little: ([]+{})[0] // "[", which is the first character of the typecasted string ([]+{})[7] // " ", which is the seventh character of the typecasted string So you could do ([]+{})[+!![]+!![]+!![]+!![]+!![]+!![]+!![]] // " ", which is still the seventh character So while we're at it, why not add some more whitespace ([]+{})[+!![]+!![]+!![]+!![]+!![]+!![]+!![]] + "\t\r\t" // just a bunch of whitespace White space evaluates to 0 when using number operations, so " " &lt; 1 //is the same as 0 &lt; 1, true " " + 4 // 4 So: ([]+{})[+!![]+!![]+!![]+!![]+!![]+!![]+!![]] + "\t\r\t" &lt; 1 // is whitespace string &lt; 1, is true ([]+{})[+!![]+!![]+!![]+!![]+!![]+!![]+!![]] + "\t\r\t" +!![]+!![]+!![]+!![] // is 4 because, that bunch of stuff on the end is 1 + 1 + 1 + 1 
It's not a problem that I didn't think to look up the term... It sounded ridiculous and I honestly thought the author was making it up. Besides, you look up the word curry and tell me how many results it takes to find the actual term. :), I'm getting a lot of flak for not knowing about some obscure mathematician and the fact that the verb had been decapitalized. 
I wish there was a functional language that was as accessible as Javascript/Node.js. I tried starting with a few languages already but after having to deal with the tooling my motivation is gone. For example starting with Node.js. It's easy to install, the package manager and modules are straight forward and you can structure your apps any way you like. Getting feedback is easy as well just have to do `node file.js` and it will execute your file.
The term in the article and the title is "currying", and the search results for it are unambiguous.
Interesting. Thanks!
Seems to be working for me, haven't checked all browsers but all modern browsers should work. When it asks for dungeon number enter number 2 and use r, d, l, and u to move around. It is intentionally a bit difficult to move as it is emulating a 1977 teletype game.
Very cool. I haven't delved into it so not sure if this is TimelineJS or configuration issue but at around the 1900 point on the timeline, we have **YouTube Video**, **Wikipedia**, and **YouTube with no text**. I clicked on them in that order but in the carousel slider, they're in the order of **YouTube Video**, **YouTube with no text**, and **Wikipedia**. Didn't seem intuitive to click them in that order. Super minor and could just be a configuration thing. Really nice tool otherwise.
The term is also technical and obscure, as is the mathematician for whom it is named. I initially looked up the term on Merriam Webster, the results of which showed nothing relating to programming. Thus, my original post. Part of me still thinks it could benefit from a more semantic definition, but it is what it is. 
Maybe the JQuery guys will just snatch it up.
The example you presented is inherently sequential. You said you wanted to 'process each [image] based on the one before'. That's not $.when, that's serially resolving promises. The dependency chain causes the task to increase time in direct proportion to N, regardless of what async syntax you use!
Exactly, everybody blames Javascript only for being bad! Not fair.
This code will be slow regardless what you do. The only way to speed it up is to break up the calculation and do it in parallel, something that JS cant do out of the box.
Tried it on an Angular project last night, and it works quite well. Very impressed.
Yeah you are correct. Sorry that was my fault. I was just misunderstanding what you are saying. They aren't technically function declaration but as per the original post the person was thinking that the only way to define a function was as var xyz = function() {}. That of course isn't true, and isn't true function declaration but still creates a callable anonymous function at the time that it is assigned and thus can't be used before. So all I'm saying is yeah you're right
[No](http://i.imgur.com/ghnB14f.png). My version of Ruby gives different results to yours, because mine runs natively on x86 where as yours is compiled to run on JavaScript (via Ruby-Emscripten). I'm guessing it must be simulating floating point numbers or something, but that is pure speculation. So in short, Ruby might have this behavior, or may not. Depends on your version of Ruby. This is actually the true answer here; the result is target specific. If you were to compile Ruby for a totally different exotic CPU, 0.1+0.2 might be 0.3, or just under, or just over. That is true for the vast majority of languages. The exact result is up to the CPU. You could simulate decimal numbers in software to avoid this issue, but that would be slow and suck, and it's pointless for 99.9% of software written. There are also other methods available which avoids having to simulate numbers. This is not a JavaScript issue, or a C# issue, or anything like that. This is a known limitation of floating point numbers. It's like this, because it's faster for the CPU to perform the calculations if they use approximations. edit: this is also putting aside that `0.1+0.2 == 0.3` could be optimized to `0.3 == 0.3`, and then just flat out replaced with `true`. This may or may not happen depending on language, interpreter/compiler, optimization flags, and other factors.
can we somehow use this to natively implement brainfuck in javascript?
And `"" &lt; 4` as well
this is why you use !isNaN(var) &amp;&amp; var &lt; 4 if you really care about types. __edit:__ ...well, yes, I suppose those don't belong on the same line; you'd want to do something else if it was NaN. But I would like my point to stand: if the comparison depends on typed-ness, ensure that before comparing.
Isn't Dart similar to Javascript except with a more traditional class and object oriented style? I was looking for a more functional language to get a better understanding at how they solve certain problems. I could take a more functional approach to my Javascript but the language doesn't really force you to think in a functional way (if that makes sense). I might take an other look at clojure since that seems like a modern functional language that's popular.
I'm going to go ahead and assume that you're the person who programmed this. Well, I have grim news: your shuffle method is wrong. Sliding tile puzzles, Rubik's Cubes, and a few other transposition puzzles can't simply have their pieces taken apart and put back together. If you do that for sliding tile puzzles in particular, what happens is that 50% of the time, you get [this setup.](http://i.imgur.com/E8rlfAa.png) If you don't want to go to the image, the setup looks like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 15 14 You see how its 15 then 14 at the end? This setup will mathematically never get to a correct solution. Rather than selecting the tiles at random and placing them, Start with the solved state, then introduce a really high number of random moves. It'll be a good shuffle every time. 
How does this relate to `es6-shim` from npm?
Beautiful concept. It would be awesome to see this as a JIRA plugin.
* es6-shim in some ways tries to support ES3 engines. Above was written strictly with ES5 environments in mind. * es6-shim is provided as large single module, in above list each shimmed function or object is provided as an individual module (you take what you need). * es6-shim extends native objects without asking, with above you have a choice: you may take shim as a function and leave native object intact, or extend native object if you wish. It's up to you. See further explanation -&gt; https://github.com/medikoo/es5-ext/#ecmascript-6-features * Above modules doesn't include any boilerplate to support various module formats. It's plain CJS style with no boilerplate noise.
I gave it a watch. Very nice video. Thanks.
There a few good primality testing algorithms that dont require concurrency but dont forget this is a case where you could employ web workers because there is no interaction with the renderer thread
Actually, no; here's an article about this library titled [CSS vs. JS Animation: Which is Faster?](http://davidwalsh.name/css-js-animation) that details why it's using JS for the animations and why that can be faster than just CSS transitions in many cases.
There are so many good conference talks out there. My only concern with this sort of thing is there is sometimes some FUD thrown about related to html5. There are some concerns of course but its really not that bad. Iirc those routers would've been petty insecure anyway lol.
`undefined` is also falsy though. This is the difference: &gt;&gt;&gt; +null 0 &gt;&gt;&gt; +undefined NaN &gt;&gt;&gt; 4+null 4 &gt;&gt;&gt; 4+undefined NaN &gt;&gt;&gt; 4&lt;NaN false &gt;&gt;&gt; 4&gt;NaN false
Right, thanks. And you'd need another `function () { }` if you partially apply only one argument.
Sort of like http://www.jsfuck.com/ :D
You're welcome. There will always be one type, but say the type is undefined. With your code, it will still check if the type is shark and if the type is jellyfish. If you use "else if", once it determines the type is undefined, it will not check if the type is shark, or if the type is jellyfish. For example, if the type is undefined, your code will say, "Is it undefined? Yes." Then it will say, "Is it a shark? No.", and, "Is it a jellyfish? No." Using "else if" will prevent it from unnecessarily checking if it is another type after it has identified out the type already. Usually in a switch case you use the command "break" after a case to tell the statement it doesn't have to check all the remaining cases after it has found a matching case. That would be logically equivalent to using "else if" for cases after the first. `if (type === undefined) {` ` //handle it` `}` `else if (type === "shark) {` ` //handle it` `}` `else if {type === "jellyfish") {` ` //handle it` `}` Is logically like the switch statement: `switch (type) {` ` case undefined:` ` //handle it` ` break;` ` case "shark":` ` //handle it` ` break;` ` case "jellyfish":` ` //handle it` ` break;` `}` 
Every language that uses IEEE 754 floating point standard.
You make me glad that I'm terrible at these puzzles and don't have the patience to get even half way. Had this not been the way I am, I would have gotten all the way to the board you have, and spent an hour+ working out how to solve it. Being unsolvable wouldn't have crossed my mind.
No, that won't work at all. `document.createElement` takes the *name* of an element to create, e.g. `document.createElement("em")` creates a DOM element for a ~~&lt;br/&gt;~~ `&lt;em&gt;`. To do what you're trying to do using these DOM APIs, you'd have to first create a text node containing the title, then create the `&lt;br/&gt;` node, then insert both nodes into the document somewhere by finding a parent node to hang them off of as children. Merely creating a node does not attach it to the document. For what you're trying to do, `innerHTML` is much easier, as you can give it markup directly and it parses it and does all of the creating and inserting of nodes for you. 
This is wrong. There is a difference between async and multithreaded.
I just added in combat and some other 'features' to match the original game. 
Good thinking! I've been meaning to start working on making a pm tool and could eventually add this!
Ditto on the thruster speed
How would I use innerHTML to post the the variable title? Also, the variable may contain multiple titles depending on what the user has entered, or it may only have one title/
Thank you for your response. I really appreciate it. &gt;Let's say the image was not found and router responded, what then? How do we handle the response to say okay this device is here. &gt;I don't know -- what do you want to do with that information? Let's say I just wanted to know that it's there. (Me personally) I got a user to open a webpage with JavaScript that found the device, how would I relay that information to me? (Purely with JavaScript if possible) And this question was originally more about how would I receive the confirmation that's it's there with the JavaScript and figure out if it's not. 
[Here's an example](http://codepen.io/anon/pen/ledwg). 
If you want to add some content to the page (or inside almost any other element), you can do document.body.insertAdjacentHTML('beforeend', title + '&lt;br /&gt;'); Alternatively, you can: var i, el, titlesContainer = document.getElementById('titlesContainer'); // This titlesContainer can be something like a &lt;div&gt; for (i = 0; i &lt; movies.length; i++) { el = document.createElement('p'); // Creates an empty &lt;p&gt; element el.innerHTML = movies[i].title; // it's now &lt;p&gt;Title of the movie&lt;/p&gt; // You can also use, although I don't know how broad support is for this el.textContent = movies[i].title; // Same as above // Now you can add the newly created &lt;p&gt; to the container (can also be the document) titlesContainer.appendChild(el); } A tip: Unless you must do it, don't use innerHTML += 'whatever' (i.e., innerHTML concatenation). It's... quite slow compared to what I showed above. Reference: https://developer.mozilla.org/en-US/docs/Web/API/document.createElement https://developer.mozilla.org/en-US/docs/Web/API/Element.insertAdjacentHTML (EDIT for small correction in insertAdjacentHTML)
&gt; document.insertAdjacentHTML('beforeend', title + '&lt;br /&gt;'); This doesn't seem to work. Also I'm not sure where or how I would implement that loop. I'll post my code below. The alert in question in the OP is at the end. &lt;!-- movie.js --&gt; &lt;!-- declare Movie Object --&gt; function movie(title,time_period,location,duration,genre,rating,year,director) { this.title=title; this.time_period=time_period; this.location=location; this.duration=duration; this.genre=genre; this.rating=rating; this.year=year; this.director=director; } &lt;!-- make array of Movie Object --&gt; var movies = new Array( new movie("The ShawShank Redemption","1950s","USA","142","Drama","15","1994","Frank"), new movie("The Godfather","1950s","USA","175","Crime","15","1972","Francis"), new movie("Pulp Fiction Redemption","1990s","USA","154","Crime","18","1994","Quetin"), new movie("The Good the Bad and the Ugly","19thCentury","Western","161","Drama","15","1966","Sergio"), new movie("One Flew Over the Cuckoo's Nest","1960s","USA","133","Drama","15","1975","Milos"), new movie("The Breakfast Club","1985","USA","97","Drama","15","1985","John"), new movie("Seven Samurai","16thCentury","Japan","207","Action","PG","1954","Akira"), new movie("Kas","1960s","UK","110","Drama","PG","1969","Ken"), new movie("The Dark Knight","21stCentury","USA","152","Action","15","2008","Cris"), new movie("Rear Window","1950s","USA","112","Thriller","PG","1954","Alfred"), new movie("Rope","1940s","USA","80","Thriller","PG","1948","Alfred") ); &lt;!-- Form Validation here --&gt; function getValidationErrors() { var erroredFields = []; if(document.form1.name.value.length == "0") { erroredFields.push("Your name.\n"); } if(document.form1.email.value.length == "0") { erroredFields.push("Your email address.\n"); } /* if (document.form1.period.value == "-1") { erroredFields.push("Your period. \n"); } if (document.form1.location.value == "-1") { erroredFields.push("Your location. \n"); } if (document.form1.duration.value == "-1") { erroredFields.push("Your duration. \n"); } if (document.form1.genre.value == "-1") { erroredFields.push("Your genre. \n"); } if (document.form1.rating.value == "-1") { erroredFields.push("Your rating. \n"); } if (document.form1.year.value == "-1") { erroredFields.push("Your year. \n"); } if (document.form1.director.value == "-1") { erroredFields.push("Your director. \n"); } */ return erroredFields; } function validate() { // get input data // period var period = ""; for (var i = 0; i &lt; document.form1.period.length; i++){ if (document.form1.period[i].checked){ period = document.form1.period[i].value; break; } } // rating var rating = ""; for (var i = 0; i &lt; document.form1.rating.length; i++){ if (document.form1.rating[i].checked){ rating = document.form1.rating[i].value; break; } } // duration var duration = ""; for (var i = 0; i &lt; document.form1.duration.length; i++){ if (document.form1.duration[i].checked){ duration = document.form1.duration[i].value; break; } } var genre = document.form1.genre.value; var year = document.form1.year.value; var location = document.form1.location.value; var director = document.form1.director.value; var erroredFields = getValidationErrors(); if (erroredFields.length &gt; 0) { var errMsg = "The following fields are missing:\n" for (var i = 0; i &lt; erroredFields.length; i++) { errMsg += " * " + erroredFields[i]; } window.alert(errMsg); return false; } alert("&lt;h2&gt;Our recommendations for you&lt;/h2&gt;"); for(var i=0; i &lt; movies.length; i++) { if ( period == movies[i].time_period || genre == movies[i].genre || rating == movies[i].rating || duration == movies[i].duration || year == movies[i].year || location == movies[i].location || director == movies[i].director ) { var title = movies[i].title; document.insertAdjacentHTML('beforeend', title + '&lt;br /&gt;'); } } // end for } 
Ahhh! :D Yeah that makes a lot of sense. Might as well skip unnecessary checking. 
I started using Cloud 9 IDE + OpenShift. I can deploy right from the IDE and it hooks into Github as well. Also: https://wiki.python.org/moin/FreeHosts
there's a lot of extra responsibility that comes with doing a complete re-write that also introduces a bunch of new features. i guess keeping it separate for now relieves the author of that stress.
&gt; e.g. document.createElement("em") creates a DOM element for a &lt;br/&gt;. Minor typo. You are creating an em element and not a br element.
Ah, got it. You need to do document.body.insertAdjacentHTML('beforeend', title + '&lt;br /&gt;'); Because (theoretically), the document is not an instance of Element. (Oops!) Also, I see that you're using window.alert() possibly to debug values. You can use console.log to do that. To access the console and see the values, you need to press Ctrl+Shift+J (Chrome), F12 (IE), and I don't know the shortcuts for Opera or Firefox. The console also shows any errors that occur. Also, remember: Unlike document.write, which you can use when the page is loading, methods like insertAdjacentHTML only work when the page is loaded.
Definitely! When you get around to it, definitely allow for the ability to tag a certain entry with a keyword and color! I'm thinkin' of it as a combination of Trello and Timeline...the Trello Timeline :).
Using setTimeout? What happens when function hasn't completed it's task? Load lots of data &gt; wait for 10 mins &gt; read data. What if the data takes 11 mins to load?
I started using Apache Bloodhound yesterday. Maybe it could be integrated with that? I sense a possible weekend project here. Then again, one of the reasons I chose Apache Bloodhound was I wanted something that wasn't too bloated. We'll see.
[Link to the actual library](http://julian.com/research/velocity/) (Velocity.js) [GitHub link](https://github.com/julianshapiro/velocity)
Yup. If I decide to integrate this, it'll be more for rough estimation of most task and to provide some visual context for when what will be done and in which order :) Maybe a Gantt-chart without timeline would be better suited for us? &gt;Anyways, I'm rambling but it sounds like a fun weekend project!...Or maybe two weekends hah. lol :p
Take a look at divshot.io. Inexpensive, multiple environments, and versioning. Also handles basic routing, cache headers, and CDN. 
Removed as blogspam, thanks for the report whoever that was.
Whoa, Dojo still exists?
Precisely! Now, if you really want to get down to the nitty gritty of it, you can have steps or milestones for each task and track the times for those as well. The reason I suggest that is because it's nigh impossible to give an accurate "actual time" taken on a given task because of distractions, taking big poops, etc., and I'd rather not be counting the minutes for a task, take a break, and then count them again. Additionally, breaking a task down into steps would serve as a motivation of sorts. People tend to get bogged down in the big picture of a task and can lose their way/motivation when it becomes too daunting. But if you look at it in pieces, all you have to do is complete one piece, then the next, and so on. I'm going to give you the most crude [text] representation of how I'm picturing this. For starters, when you click on a timeline task, here's what I imagine showing up in the space above it (as seen in the actual Timeline.js demo). * [checkbox] [Step 1 title] [% this step accounts for in the overall task] [Time taken] * [checkbox] [Step 2 title] [% this step accounts for in the overall task] [Time taken] ... * [Progress bar that fills according to the Step percentage of the task after each time you mark the checkbox] [Overall time based on actual time taken to complete the Step] I hope that kinda makes sense hahah
Yup, that makes sense. Your suggestions will be useful in perfecting our workflow I'm sure. Thank you :)
Haha no problemo! I love thinking through products while I'm at work and not doing my work! I forgot to address your Gantt chart question earlier...I think a Gantt chart for your overall project would work nicely as a project overview. Putting too many things in the timeline would clutter it horrifically. What you could do is have the Gantt chart and assign certain tasks to certain people, which would automatically get added to their specific timeline according to the Gantt chart dates and time estimation for the task. And when you assign tasks, have a visual cue on the Gantt chart as to whose task it is. Then add some functionality such that clicking on the "asignee" will take you to their timeline but clicking on that task will take you to that specific task in their timeline.
Any suggestions for improvements are welcome. I was thinking of implementing an `and() ` method to tie two whenthens together. 
Thanks for addressing the my thoughts on Gantt-charts. It was a ninja-edit, so I wasn't sure whether or not you saw it. I agree with you, I don't want it to be cluttered.
An explanation about why one would use this library over native promises would be helpful!
Both Prototype and Dojo on /r/javascript on the same day? What is this flashback Tuesday?
If your front end is static content that makes queries to an API, why not stick it on S3?
Why should I use your library and not, let's say, promises?
Jesus, did everybody forget about typeof? typeof var === "number"
I don't know about your specific problem, but you absolutely need to resize your images. Nobody wants to wait for several megabytes of desktop wallpaper sized images to load when they are just going to be displayed at thumbnail size. Same goes for the 500kb background on your main page. I have fast internet, and the wait is really noticeable. Slow page load will cost you clients.
Fair enough. ~~I'm on the go so I can't make big code examples.~~ *I'm back* It isn't really an alternative to promises. When you create a new whenthen you basically create something that blocks other things until something happens or becomes available. When you then add a function using `.do()` the function will be queued and the worker will be told to do its thing. Meanwhile more functions might be added, perhaps in a loop, that will also be queued. When the worker is done (the whenthen is resolved) it will execute all queued functions immediately and pass the same function arguments to all of them. The whenthen is now is a "resolved" state and all functions added in the future will be executed immediately and receive the same arguments that the other functions did. I originally wrote this module 2 years ago for a music tagging app that would receive tracks in random order. It used an array of whenthens to cache album Metadata lookups. The first track from an unknown album would trigger the whenthen to fetch the album data and cache it so that other tracks could use it right away. I have used it many times since. Usually for smaller stuff. I used it in [gulp-mediawiki](https://github.com/maxkueng/gulp-mediawiki/blob/master/index.js#L32) (link to line in code) to log in before making API calls while the stream can receive an unknown number of pushes. It can be used as something like an asynchronous "traffic light" or as a lazy async cache. **Edit: Here's a traffic light example** 10 pedestrians (1 every second) approach the street and want to cross it. The traffic light turns green after 5 seconds. So the first 5 pedestrians will wait until the light turns green. All the others will cross immediately after they approach because the light is already green. And they get a banana too. var whenthen = require('whenthen'); var whenIsGreen = whenthen(); // traffic light // After 5 seconds the light will turn green setTimeout(function () { whenIsGreen.resolve('banana'); }, 5000); function pedestrianCrossTheStreet (pedestrian) { whenIsGreen.do(function (thing) { console.log('Pedestrian', pedestrian, ' crosses the street and got a', thing); }); } // A new pedestrian approaches every second var pedestrian = 0; var pedestrians = 10; function pedestrianApproaches() { pedestrian++; console.log('Pedestrian', pedestrian, 'approaches'); // Make him cross when it's green pedestrianCrossTheStreet(pedestrian); if (pedestrian &lt; 10) { setTimeout(function () { pedestrianApproaches(); }, 1000); } } pedestrianApproaches(); 
Wow my bad, sorry. Yeah I noticed when I uploaded it, it was super slow - I forgot to optimize/save the images for web. I'll get onto that now. Just curious, are they all squished up for you?
Also, without wading into your code, I'm noticing that it displays correctly some of the time but not others when I refresh in chrome which is a hint that it might be related to how the page is loading. Is the code that kicks off your isotope plugin wrapped in a $(document).ready() callback?
Honestly I'm not a coder - and this is mainly a template (there is a whole bunch of js files with very messy code). I've searched all the files and none included $(document). I've also noticed that when I resize the window (drag the bottom of the window up and back down) - they 'pop' back into place, where they should be. 
Datatables might be worth putting in here too.
The way I wrote this version of oCanvas, it will redraw everything added to the canvas when something is added or removed. This is expensive, especially if there are many objects. So, if you want to add a lot of objects to the canvas at once, it's preferable to not redraw the canvas for each add, and then manually trigger a redraw when you're done. This feature was added a while back to solve this problem. Whenever you want to add an object to the canvas, you pass a parameter to tell oCanvas not to redraw. http://ocanvas.org/docs/Core/addChild http://ocanvas.org/docs/Display-Objects/Base/add http://ocanvas.org/docs/Core/removeChild http://ocanvas.org/docs/Display-Objects/Base/remove http://ocanvas.org/docs/Core/redraw 
after a very quick look, i see all your items are positioned absolutely with the top set to 0. i'm guessing you do this in JS. I didnt look at your js so i can comment on what you need to do there. perhaps you're not running on document ready??? you could get the grid effect you want if you items are floated left or made inline-block. there's probably more to do than that, but the absolute top:0 is whats making them look squished. using latest chrome and FF. IE 11 looks fine. if you're not a coder look into something like bootstrap or another grid framework - they handle this out of the box...
Divs collapse when empty. Again, I'm not looking at your code, but my current guess is that the divs are collapsing in the initial view because the images are loading so slowly that they appear empty at the time the javascript tries to place them into the DOM. When I'm seeing the squishing problem, the images will still appear correctly after I click on the filter navigation to see only Logo Designs or Web Design, etc. Try resizing some of your thumbnails so they load fast and see if that helps.
Can we all just collectively capitalize JavaScript correctly?
&gt; perhaps you're not running on document ready??? I thought so too at first, but everything works when clicking the filter navigation which makes me think that's not the problem in this case. &gt; but the absolute top:0 is whats making them look squished absolute top:0 is fine as long as they are inside of relatively positioned parent element. The divs are positioning fine, the problem is that they are collapsed.
It's not a "promise". I made an explanation and examples in another reply below (or above, depends). Maybe "whenthen" is not the perfect name. I hadn't published it for years because I didn't know a name for it. I used to call it "ready.js".
What you're describing happens only with appDir. I absolutely hate this "feature" of R.js and I've complained about it a fair bit. Effectively what you end up having to do is disabling optimization, by setting "optimize: "none" in your build configuration. This will stop UglifyJS from running on it. You can then manually run a task to uglify those files. (Note this solution is awful as it breaks Source Maps support). Another solution is moving your bower_components outside of the appDir and providing manual paths to them. This may seem like the best solution... The only problem is if you need images or CSS or other various files from bower_components that aren't required by your module code, they won't be copied to the output directory. However, you can manually copy these yourself. So basically there isn't a super great solution for this yet, unless you want to dump the appDir configuration.
Okay so I've just gone ahead and made all my images web ready and reduced the file size significantly, unfortunately they're still collapsing and squishing up.
The description and code sample still looks to me like a subset of promises. Consider this promise implementation: var whenIsGreen = new Promise(function(resolve) { setTimeout(function() { resolve('banana'); }); }) function pedestrianCrossTheStreet (pedestrian) { whenIsGreen.then(function(thing) { console.log('Pedestrian', pedestrian, ' crosses the street and got a', thing); }); } // A new pedestrian approaches every second var pedestrian = 0; var pedestrians = 10; function pedestrianApproaches() { pedestrian++; console.log('Pedestrian', pedestrian, 'approaches'); // Make him cross when it's green pedestrianCrossTheStreet(pedestrian); if (pedestrian &lt; 10) { setTimeout(function () { pedestrianApproaches(); }, 1000); } } pedestrianApproaches(); I think it does the same thing. Thoughts? 
If your javascript layout relies on the size of images you're gonna want to use `$(window).load()` instead of `$(document).ready()`. Edit: or, rather, change the code in custom.js on line 339 to something like this var $container = $('#contain') .load(function() { // initialize Isotope $container.isotope({ // options... resizable: false, // disable normal resizing // set columnWidth to a percentage of container width masonry: { columnWidth: $container.width() / 12 } }); }); That should stop isotope from trying to layout the blocks until all content within it is loaded
Fork with God, my child: https://github.com/LeadDyno/intercooler-js
Any hint as to what the problem is supposed to be would be appreciated.
Actually after a few minutes I think I know what you are asking for help with: the menu. On the "page in question" the submenu has a blank space at the top instead of attaching directly to the menu link. You're wrong, it is a CSS issue. The page that is working has the CSS overridden with an inline style to specify top: 71px. You want to use the same working menu/header etc. code for all of the pages. You really don't want to keep copying and pasting etc.
I could be mistaken, but don't most of these libraries fallback to long polling?
Wow, it does indeed.
Wow, I was starting to give up on this thread (no votes, no comments) and the author registers an account just to post. Your google alerts for "ocanvas.js" must be spot on ;) I know this was probably trivial for you to explain, but THANK YOU for doing it. As someone new to canvas, I didn't realize how resource intensive the redraw() was. I easily changed add() to add(false), and threw in a canvas.redraw() at the end of my grid building loop, and it worked very well! Probably not quite as fast as doing it natively, but I'll be able to track my shapes much easier for what I'm looking to do. Again, thank you for your time and for your work. 
Rackspace Cloud Files CDN allows you to simply point the DNS of your site to the Cloud Files container and it will serve the site directly from the Akamai CDN. A small amount of wiring with whatever cloud SDK you prefer (I use pkgcloud) and you can have a pretty wicked streaming deployment system. Also, the pricing is pretty brutally low (although price is not the reason to choose RS over other cloud providers). It's not the easiest nor the dumbest, but it sure does work well!
Anyone know of any open source alternatives to pubnub that we can host on our own servers (this could be as simple as a wrapper over socket.io, but emulates their API with decent fidelity)
`typeof NaN` is also "number" (yet another js oxymoron), so I feel having an `isFinite` is still useful.
ahhhh i see how its working. they're all absolutely positioned to the top of the div and then translated into the correct spot based on their size. when the js is run the images are probably not loaded so they are not included in the calculation of size, giving the wrong translation values. i think the [comment below](http://www.reddit.com/r/javascript/comments/24elop/js_not_working_properly_on_chrome/ch6f922) will be the answer
Right? Flashback to 2006. TIL. 
Browsers implement "Cross Site Scripting" security (XSS). This means that Javascript code on "reddit.com" cannot connect to "192.168.1.1" or "google.com" or "facebook.com". If it could, there would be nothing stopping me from creating a site which secretly uses your cookies to log into facebook - I could create a site which scans your network, etc. This is all prevented because all modern browsers (for a long long time now) prevent the page from ever calling out to other domains (reddit.com cant make calls to api.facebook.com). There is nothing stopping you from writing a program to scan networks in Javascript, but it will never run in a browser window. It would probably require something like NodeJS. Also, I think there is a misunderstanding about what a web server is. When I put "127.0.0.1" into my browser, nothing happens - because my laptop is not a web server. Even though I can "ping" that address, it doesn't respond over HTTP (port 80 by default). Network scanning gets pretty deep into the philosophy of what a computer on a network _looks like_. For instance, the network scanning tool NMAP has about 10 billion options for identifying if a host is "alive" or not. It's entire possible that an IP is used by a system but not hosting anything and has no ports open and drops PING packets. This would appear to your script to be "not used". So, just to reiterate because of your last question regarding how to get the info back to you - if you ran "mywebsite.com", you could ONLY scan "mywebsite.com", you could _not_ scan the network attached to the browser your script is running on. Now, if a user just types that info into a form on your page, since you _can_ talk to "mywebsite.com/networkdetails", you can build an app there to take the data. XSS: https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy NodeJS: http://nodejs.org/about/ NMAP: http://nmap.org/
The internet 
I appreciate your response as well. The video mentioned above (at 14:58) said I would be able to because "browsers don't differentiate between resources located on the internet and resources located on the internal network." If I directed you to a page with malicious javascript and it attempted to find an image located at "192.168.1.1:80/logo.jpg" it would make a request after the page has been loaded client-side to your router (if that is the assiged address). This can then be used to map the network. Is this information outdated?
Yes, S3 or any CDN.
Agreed, workers could be useful in this case and I was referring to this exact piece of code, otherwise its certain it could be done more efficiently with other algos.
I think there was a thread that issued 'evil things you can do with JS' and there was also the example of network scanning. Basically you request images from certain IPs and if they respond there are clients (errors an be a positive response as well! FileNotFound for example). I personally would first request the standard LAN Standard Gateway IPs to determine what IP range and subnet mask is used and then scan that range down. Use AJAX to send the gained information back to your server. Use a unique ID to keep every user separate. While scanning the network you can use your backend or a service to determine the client IP address. There are plenty possibilities. Now you have the client IP and the network architecture. You could even do port scans if you want. 
Yea, I was the one who asked "evile things you can do with JS". Someone gave me the above video in the thread and I was pretty interested in it. Mostly to just gain a better knowledge of JS and LANs. Thanks for the reply.
Github pages hosts static content for free. Can't speak for it's speed or reliability, but free is free.
Former EAS guy here. This is pretty sweet. Wish you had the source up there so I could see how you're getting the data. You may want to look into supporting CAP (XML based) messages from FEMA so you can grab amber alerts and other non weather events. NOAA is a bit behind the times on their systems, last I checked.
Might integrate nicely with [Houston](http://intridea.github.io/).
I made an HTML version of the [pedestrians example](http://requirebin.com/embed?gist=11443918), just for the sake of it :)
It seems r.js doesn't have a bower.json file. That's probably why you end up with all those files. The bower.json file can contain an "[ignore](https://github.com/bower/bower.json-spec)" property that contains a list of files that will not be installed. In case of r.js that would include everything except dist/r.js and maybe the license file. It's similar to a .npmignore file.
The first thing you can do to make WarnJS better is to publish your source, you're suggesting that you publish the source of this, even if you have to remove API keys or whatever you're getting the data from.
Good job, this could be a very useful service! &gt; a unobtrusive bar is shown across the top of the page This is where a lot of sites put their navbar though. The warning should probably push the body down, and not show (or show in some minimized capacity) on subsequent page views, unless the warning has changed since. 
It seems this might be better suited to be a chrome plugin? Ya - source code would be sweet. I love JS.
Looks like thats probably how he does it for NOAA as well: http://alerts.weather.gov/
I think this is hilarious, made my roommates cry.
There should be facilities for countries outside the US such as the met office in the UK and other international equivalents. 
Put it on github seriously.
If you're putting your backend on AppEngine, there is no reason not to put your JS/HTML/CSS on AppEngine, too.
Look into ZeroMQ or RabbitMQ. The really nice thing about pubnub is the fact that you don't have to spend time worrying about the servers and you can make a pretty safe bet your connection will be online. With ZMQ you don't have much of an idea if your message was sent. (this could also be my ignorance of the subject. I'm a frontend developer and I likely have dense preconceptions regarding this. If I am wrong please nicely correct me ). We chose pubnub. It's decently cheap (compared to alternatives such as pusher) and is effective. It's allowing us to command line operations via rest requests (with pubnub talking to the remote servers)
Roughly similar but with different nuance that primus hides. Also not all the libraries support an event emitter style interface. xmpp-ftw does not mandate a transport mechanism so if you wanted to use straight up socket.io or sockjs go for it. Provided it supports events and rather than 'emit' uses 'send', but you could patch that yourself. 
It's mainly a compliance issue; we can't send data to third party servers for this application we're building that requires realtime features. It's a pretty cool solution if you don't have those restrictions though. 
Dropbox + KISSr is an option.
Can't take a look if there's not a repo on github or somewhere else ...
Yep, seems fine now. Glad you got it working.
I use http://highlightjs.org/ on my personal site. Super easy to customize (both the languages you want and style) and it supports a ton of languages. You can also use it both on the front end, and the back end (with node.js)
Please do this. Power in numbrs
Perhaps I'm wrong on this, but it seems like if you're going to use radio buttons, there should always be one button in the group that's selected by default. If that's not the case, I would suggest a select input. Just my two cents... 
You'd do a radio button the same way. 
Remember: Users can disable Javascript. Don't rely on client-side validation. Use this to select the checked radio button *by name*: var rating = document.querySelector('input[name="rating"][checked]').value; You might have an array of ratings: var validRatings = ['18', '15', 'PG']; Use [indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf) to see if the value is in the array. if(validRatings.indexOf(rating) &lt; 0){ // rating is not valid }
 if(document.form1.rating.value.length == "0") { erroredFields.push("Your Rating.\n"); Like that?
Use tripple '===' to avoid type coercion, which is already going on in your code. (document.form1.name.value.length === '0') would always return false, because .length will always return a number. So (document.form1.name.value.length === 0) could return 'true' when the length is 0. I know it doesn't answer your question, but I upvoted the above comment, because this is the correct answer.
This would make a great browser plugin, please open up your source!
will do. I can only put some of it on github though (ie: i cant put up the geolocation database since I buy that from a third party and I doubt they would appreciate it :-) )
I like this idea, but it only then covers people who are savvy enough to install the plugin. I will release an API maybe or something that others can create plugins based on.
Working on getting that source published!
Definitely working on adding these!
You can open source your code, and abstract the geoIP portion so that others can use their database of choice. Right now, I'm hesitant to use this because its calling someone else's php page that I have no control over, and no accountability if you start serving up pop-up ads or injecting malware into the site this is on for every, say, 1000th user.
hi, thanks for the reply. I copy pasted this text and I realize I didnt change "angularjs" for Sensa Touch. I've updated the text now. Sorry!
[Here](http://www.fema.gov/emergency-alert-system-participants) is the link to the info page from FEMA. The actual feed is hosted at https://apps.fema.gov/. There are likely some CAP feeds you can pick up at the state level as well, but that will take some research (if those feeds are available publicly at all). Best way to get them would be to contact whoever is running EAS for that state (i.e. in Michigan where I worked, it was the Michigan Association of Broadcasters).
Can anyone explain why Backbone is suddenly being ignored in these comparisons? So far, it's still my favorite when paired with Marionette, but every comparison I've seen in the last month or two leaves it out entirely.
&gt; I think it does the same thing. Thoughts? I checked it out and created pedestrian examples [using promise](http://requirebin.com/embed?gist=11456295) and [using whenthen](http://requirebin.com/embed?gist=11443918). The difference is that the promise tries to resolve immediately while the whenthen is lazy and does nothing until the first task/then/do is added.
I worked with ExtJS for more than a full year for multiple fortune 500 companies. Sencha Touch is essentially the same thing. 1 - SenchaTouch is a complete end to end solution that provides application architecture and extremely configurable components. 2 - No automatic binding exists. 3 - Sencha uses "stores" which are a special kind of eventful collection. These enormous complex objects are also network aware and act as a data proxy to the server. You **must** use stores everywhere in the framework. 4 - I don't know. I imagine you would need different views for mobile and desktops. It seems like it would be hard to use the same view for both mobile and desktop. You might be able to reuse your controllers. 5 - Sencha Touch only supports modern web browsers. It is a mobile framework so IE is not supported. ExtJS supports all browsers including IE6. 6 - Sencha products are insanely difficult to learn. They have gradually improved the quality of their documentation and now it is pretty good. Sencha components have many configuration options. This makes them very flexible to use. It also makes the source code very complex. You will have to read to their source code to figure out how to do advanced things. I had to read/debug through their source code a few times a day to solve my problems. ExtJS was over 4mb uncompressed/unminified and I remember SenchaTouch was over 2mb uncompressed/unminified. That is a giant mountain of code to learn. 7 - All IDE's were terrible when I worked with it. Aptana was the best free option and webstorm was the best paid option. After my last job working with ExtJS, I vowed to never work with Sencha Products again unless the money was ridiculous. I currently use AngularJS with Typescript and it is the best UI framework I have ever used. It does not try to abstract away the complexities of a modern browser. With Angular you can build the same things with much less code. In the past year of working with Angular I have not used any inheritance or mixins. My code is much simpler and easier to debug. Sencha Touch might be a mobile framework but building mobile applications with Angular is pretty straight forward. **AngularJS, Typescript, Bootstrap:** 1 - There are components but you don't **need** them because working with plain html is easy. The bootstrap ui component set is pretty useful. 2 - Two way binding works great. It is the best binding I have ever worked with. 3 - You can use any kind of data objects you like. Boring JSON data and boring javascript arrays work perfectly. There is nothing to really learn. If you really wanted to you could use backbone models as your data source. There is no limit to what you can use. 4 - I am building an app with angular using the bootstrap css framework that works on an iphone, ipad and desktop. It has the same functionality on all platforms with EXACTLY the same code. 5 - Angular only supports back to IE8 6 - The documentation is getting better. Youtube has some great tutorial videos about how to use Angular. Angular is smaller than Sencha Touch and in the past year of using it, I have never read the source code. It just works! 7 - The new Webstorm 8 includes many features that aid in the development of Angular. If you use Typescript with Angular you can get acceptable code completion. The tooling is still pretty weak compared to Java or C#. 
Yes: [javascript numbers are 64-bit](http://www.ecma-international.org/ecma-262/5.1/#sec-15.7) double-precision floating point numbers that follow the IEEE 754 spec (ES3x follows the original 754, ES5 follows 754r). This will not change in Harmony. Performing any bitwise operations on a number forces it to be a 32-bit integer before the operation is executed.
I have submitted the Developer MOA required to get access to IPAWS... hopefully they will come through soon.
Also, to add to the other comment, ES6 brings `Number.MAX_SAFE_INTEGER` and `Number.MIN_SAFE_INTEGER` constants, which make this a little more explicit.
Isn't that rather odd? Is there some reason why the Javascript standard body has some kind of phobia about implementing a wider range of numbers? Will it break existing code or something? Considering that the browser has become the new desktop it all seems rather odd to me. 
People are getting their ass kicked by Backbone pretty regularly based on what i'm seeing in the field. Unless you have a few full scale Backbone projects under your belt (with botched state and event management and all) you're probably going to screw up. Marionette alleviates the architecture problem in a lot of ways, but is still built in an overly prescriptive way that might assume too much of the interface you're trying to build.
Interesting find! By "tries to resolve immediately" you mean the callback passed to the promise constructor is called immediately? I bet if you dug more you'd find a few more differences. Promises have a lot of subtle behavior, especially when you chain (ie. call .then on the result of a .then call). The constructor behavior actually key to promise design, and isn't really the promise attempting to resolve as much as how you create a promise to begin with. The pattern is dubbed 'the revealing constructor pattern'. It's equivalent in expressiveness to the defer() pattern where you call a defer() and get back a triple of {promise, resolve, reject} where resolve and reject operate on the promise part of the tuple. Edit: also, requirebin seems to be awesome, thanks for pointing me to it :)
AMAZING answer, Thank you so much for this information.
I see in the comments people mentioning a 'Flux' app structure, but I can't find any more details on it beyond that one google groups post. 
Indeed that would break existing code.
Thanks! Yes, I meant the callback being called immediately. I am not an expert in promises but I'm aware of them allowing you to chain `.then`s together and that if one of them fails or rejects that the rest won't be called and that an optional error handler will be called. It's a cool concept and sure far superior to whenthen. They're also ingegrated in to Ember which I'm playing with at the moment. I think whenthen is useful for tiny things where you only need exactly this functionality. I use it on a lof of scripts like wiki bots or where something has to give a "green light" before other things can happen. Promises aren't natively available everywhere yet. It's also very tiny (~310 bytes minified). It was actually the first module for Node I had ever written. The API used to be a bit different before I added the `.resolve()` method: var whenX = whenthen(function (resolve) { setTimeout(function () { resolve(); }, 100); }); whenX(function () { /* ... */ }); whenX(function () { /* ... */ }); whenX(function () { /* ... */ }); 
If you need more precision, there are arbitrary-precision libraries out there: https://www.npmjs.org/package/big.js https://www.npmjs.org/package/big-integer https://www.npmjs.org/package/num https://www.npmjs.org/browse/keyword/precision This is the strategy other languages use when they need 128 bits+ of precision.
Your website consitently makes my safari crash. Ipad 4 on 7.0.1
Uh oh, okay. Thanks for letting me know.
If the javascript is posted to github I would happily contribute some met office code.
If I rapidly press the keys to initiate two turns (such as when going up, pressing d and then s) it doesn't execute the two turns. Might want to look into create a queue of commands to execute possibly. Just a thought. Other than that, it looks solid. Congrats.
The number type will automatically convert from 31-bit signed type to 64(63?)-bit IEEE double within V8 (may be different in others). Generally you won't have to worry about numbers unless you're trying add/multiply/subtract/etc really large numbers. Or, if you're doing binary operations XOR,OR,AND,NOT directly. Dynamically typing the numbers so they can be as fast as possible isn't an easy problem. They need to align with whatever the native device supports. So this problem suddenly runs into endianness, register sizes, ALU processor specifications and hardware level problems that can't be solved by a javascript specification. 
Up and Running is where I started. Definitely recommendable.
This is correct according to the IEEE 754 standard for floating-point arithmetic.
&gt;This is a known limitation of floating point numbers. The problem is numbers that have terminating decimal representations but no terminating binary representations. `0.2d` is such a number. `0.5d` however terminates in binary representation: `0.1b`. If we all just used octal or hex in our everyday life instead of decimal, this sort of thing wouldn't happen.
Thanks for doing this!
I have worked with ExtJS since 2007 off and on for many years. I have worked for SpecificMedia, Experian, Electronic Arts and more. I wrote the majority of an existing 750k line Sencha Touch application. 1. Sencha is a javascript widget library with a number of 3rd party resources (http://www.sencha.com/forum/showthread.php?226679-iPhone-Style-Toggle-Slide-for-ExtJS, http://www.bryntum.com/, etc) 2. Bindings in Sencha "can be" one way, one time, or two way, depending on how you configure a Sencha Store component or leverage the eventing inherent to components (fields fire off utility events) or using traditional javascript-based custom coded methods. You can use vanilla javascript in Sencha. What you mean by "can be" or "according to the framework", isn't a simple question. The framework is a widget library (see #1) with a number of suggested design elements (depending on when you ask the sencha developers) 3. This is automated in Sencha via the Store component. You can have a post/pre parser that converts to a convenient encoding but leverages the data you care about in a different format. Straightforward insomuch as arrays of single key/value field objects are the default assumption. 4. Yes, but probably not for every case you care about. It’s not as simple as write once, works everywhere…even between iOS and Android. The CSS rules must be carefully tuned/tested manually and a non-trival amount of effort devoted to making components respond responsively on the desktop. It’s usually easier to write once and create global flags for special cases after-the-fact. 5. Depending on the version of Sencha, you may have as far back as IE6 support. The latest is only IE7+ 6. Yes. Due to changes in the framework, over time, much of it is outdated/conflicting. The silver versus platinum support doesn’t result in a different level of customer service, but are definitely better than simple community forum support. 7. PHP/WebStorm is the best option for general use. You can get some traction for autocompletion out of Sublime and Vim.
What issues are you having with their API specifically?
I will let you know where I intend to use it! Thanks for offering it. I will be adding part 2 after my finals are over with Map Move, Draw, Layer Manipulation, and GeoJSON.
Yeah I'm curious too. I've built lots of client side stuff on Firebase.
Plug for /r/Firebase! We're just getting started, but some hang out :)
Keep in mind that many browsers open the pdf in an external program or with a plugin so your method would have to be cross platform. You can make AJAX requests from within a PDF (PDF's can have javascript embedded) but not without first placing a JS file in the client filesystem (at least for adobe reader). This is called a folder-level script. I'm guessing getting the number of pages wouldn't be that hard, but the user interaction stuff might require more... Considering the platforms you would have to support (Chrome, firefox, foxit, adobe reader, apple preview, etc.) you will probably find that the only reliable way to get the data will be using a JS viewer like pdf.js and adding your own "hooks". I'd love to be proven wrong though!
Note: I don't know much about JS
It's an "incremental clicker", requiring only buttons and text output. Nothing majorly graphical involved, just loads of variables being tossed around. Is the display repainted each time an object is changed, or on a timer? Is there any way to tell the browser when to repaint?
I found meteor when I started working on my current project about a year ago. It was definitely intriguing and I really like the concept, but from what I could tell, back then it still had a ways to go before I could use it in a production environment. The two biggest problems I had were security and scalability. I ended up using MEAN (coaxed along by many custom tools) to achieve a similar result, but with more flexibility than what meteor had to offer. It may be that they've solved these problems, and I'll definitely consider it for whatever I do next, but at the time it wasn't practical. Also, I tend to dislike the all-or-nothing approach that Meteor seems to enforce heavily. Once you start, there's not really any going back, as far as I can tell. Any large framework has the same problem, but with meteor you're not even using node anymore, it's `meteor`, not `node app.js`. I'm wary to put all of my eggs in one basket, given that the basket may have a hole that's not immediately apparent, but might cause huge problems down the line. 
Here's a few personal reasons why I don't use it: * Uses their own package manager instead of npm, where npm is half the reason to use node in the first place. Edit: looks like they have a strange npm compatibility layer. * Code sharing between client and server sounds nice though I hardly ever find reason to. The only two use cases I come across are data validation and data models (you don't need the latter in Angular). * Generally, when your application gets large enough, the front-end and back-end are two logically separate applications. I often opt for a static front-end as it is more scalable via CDNs. I didn't &gt; It does things (many things) that other frameworks don't and won't * It does too many things. Why don't other frameworks do these things? Because it imposes choices that people often don't want to be forced to make. Plain Node HTTP or even Express are nice because they're just a thin abstraction over HTTP. * Found it difficult to customize authentication * Couldn't use LevelDB Some of these things may have changed since I last looked at it though
We're using RabbitMQ with it's [Web-Stomp plugin](http://www.rabbitmq.com/web-stomp.html) which exposes a WebSocket bridge on a health care solution and it has worked great thus far.
Javascript templating engines were built for stuff like this. Are you trying to stay 100% vanilla, maybe you don't want dependencies or something like that?
I think you're structuring your data in a way which plays poorly with Firebase. Shoot me an email at abe@firebase.com, I'm sure I can help you find the beauty of Firebase :)
I'm attempting to remain 100% Vanilla, as this is my first JS project. Overall it's coming together quite nicely, and my tick processing time is hovering around 30ms. This is down from 40ms after amending one of the functions to check for a display status before assigning it. It appears I've answered my own question through experimentation!
I agree, that is what I would have to do, use pdf.js, however, I am uncertain that pdf.js will let me retrieve the current page number. I have been redirected to an API called pyPDF, however that can only get some information such as getNumPage(), numPages(), getPage(PageNumber) and so on. But it doesn't have the one crucial or at least in my eyes getCurrentPage(). If you have any reference material, I would love to see it. 
Thanks for the tips, however I need the re-flow. For example, the system has well over 100 upgrades that can be applied to in-game elements. Not re-flowing will cause a massive overflow. The game is very simple. No graphics, sound, etc etc. Buttons and text only. If I were to make something a little more complex, I have no doubt that I would be using canvas (and I intend to for a future project). In regards to libraries, I just want to get a good, solid grasp of the underlying language before applying any external scripts. Edit: How tight a bottleneck could we be talking? Worse off than redrawing 100+ times?
Basically, if your number is larger than Number.MAX_SAFE_INTEGER, `x+=1` won't necessarily increment it.
Can you put all the elements due to be shown inside a single other element and show/hide that? To avoid 100 reflows for example
Too much magic. Have fun debugging it when it doesn't behave as expected!
Unfortunately, I need to access the divs individually. I've decided to rework my code and perform a global sweep at the start of each load, then update as required rather than performing a global update real-time. The system should be able to handle it.
Yes, I would agree with that. I've seen quite a performance drop when dealing with a lot of reflows consecutively. requestAnimationFrame looks good, but I want to try and keep compatibility with IE8, so unfortunately it's off the table. For now, however, I think I may have most of the problem sorted. In the future though, I may check out the functionality in that library to see if I can further reduce processing lag. Thanks for the links!
Right, but how would I ever use those properties in javascript?
- No server rendering means terrible first load experience (plus big SEO issues) - Fractured module ecosystem seperate from npm. -Does WAY too much; and should really consider just breaking the product up into pieces that can be pushed out to npm
You can use Codemirror to style code. You can use it to embed code that can be edited and run, or just styled (read-only).
That's... good? (really this should be in /r/node). 
By comparing a number to them? Javascript numbers go up to 1.7976931348623157e+308, but MAX_SAFE_INTEGER will be 9007199254740992. &gt; Number.MAX_SAFE_INTEGER = 9007199254740992; 9007199254740992 &gt; Number.MAX_SAFE_INTEGER + 1 9007199254740992 &gt; Number.MAX_SAFE_INTEGER + 2 9007199254740994
Cute but consoling applyMining(); a few million times kinda made me a millionaire lol 
thats true, but that kinda ruins the fun :P There isn't a leaderboard so I don't really care if you play with the code XD
How does it compare to Parse?
Great article. Although now I find it even harder to choose which framework to use :/
[I'm a weeener!!!](https://i.imgur.com/s8q4I0T.png)!!! Haha, jk, but nice game :)
You should check out React JS from Facebook: http://youtu.be/1OeXsL5mr4g
I dont like the use of fibres, which means that meteor code doesnt really play well with the rest of node (no i wont depend on fibres in any app i build). Meteor isnt node, its another layer that sits on top of node. I also dont like that because they got all that funding when they did, they sucked all the oxygen out of the room for any competing framework. That is basically disliking them for being successful... But yeah. Derbyjs picked the worst possible moment to go down for a rewrite, but that did give us a nicely abstracted share.js library... Which is useful in a lot more places than anything meteor has built. I think sails.js is the only thing that has gotten any general usage that even tries to do the same thing. In general the node community tends to reject things that try to be too rails like. Ive built a number of sites that used realtime channels, and none of them would really have benefitted from the assumptions that meteor thrusts on you. Like tying everything to mongo for instance. That's not something i would be comfortable having dictated, and when someone says 'theres an abstraction layer' its usually even worse.
Very cool. Your http://karan.github.io/scInstant/ is awesome too.
'Cus I was bored * Mastering Node - 3 years ago - v0.1 * Node: Up and Running - 2 years - v0.6 * JavaScript and Node FUNdamentals - 6 months - v0.10 * What Is Node? - 3 years * Mixu's Node Book - 2 years
For a long time there were a lot of missing pieces those get addressed over time - engineering is hard! - Authorization and authentication was not present in the first public release in April 2012. Got full authorization and authentication built-in [in October 2012](https://www.meteor.com/blog/2012/10/17/meteor-050-authentication-user-accounts-new-screencast) in version 0.5.0 - Scalability of the real-time component got addressed [in November 2012](https://www.meteor.com/blog/2012/11/20/meteor-051-database-scaling) 0.5.1 first, still didn't scale well horizontally - Scalability of the real-time component got addressed again with new Oplog Tailing approach in versions 0.7.0, 0.7.1 and 0.7.2 starting [in December 2013](https://www.meteor.com/blog/2013/12/17/meteor-070-scalable-database-queries-using-mongodb-oplog-instead-of-poll-and-diff) - Didn't have npm support until [April 2013](https://www.meteor.com/blog/2013/04/04/meteor-060-brand-new-distribution-system-app-packages-npm-integration) v.0.6.0 - The front-end real-time rendering component got a big improvement with virtual DOM diffing and a future for components [in April 2014](https://www.meteor.com/blog/2014/04/04/blaze-meteor-1-pt-0) v.0.8.0. Now comparable with ReactJS and HTMLBars! - The revamped packaging ecosystem is still in development So yeah, there were a lot of vital features those get addressed not so quickly (the order of months) but steadily.
It's never really made clear what the scientists do. I'm assuming they just allow you to sell high level ores, because you can collect them well before getting the scientists.
Did you copy and paste the above instructions from a terminal? &gt; Number.MAX_SAFE_INTEGER + 1 9007199254740992 &gt; Number.MAX_SAFE_INTEGER + 2 9007199254740994 &gt;&gt;&gt; this must be a copy and paste error or the Javascript implementation you are using must be buggy. 
Could you show some examples of what it can do? It's not immediately obvious to me. 
Is there any API, or even a simple way to send a POST request and get the data back? I could definitely find it useful, but not in its current state. Would be even better if you hosted your solution on github. Any chances to do that? 
Take your cross platform JS and make it work on all Windows platforms. Hooray. 
Cool, I could do that. Thanks for the feedback!
Well, if you look at a page rendered with pdf.js you see that it really is just a number of canvas elements within divs with id's like pageContainer1 and pageContainer2 where the trailing number is the page number. You could add any sort of scroll based event listener to this to check for the page number. bite.js element listener might work nice with this if you are looking for events based on the pattern "the user has scrolled to page x, run function y", or you could use something like jquery-visible to query if a page is within the viewport right now. I'd probably go with bite.js-like events and add google analytics custom events to it. Another thing: pdf.js can be quite heavy with larger documents, so keep in mind that certain IE (and mobile) users will get very sluggish performance. Do some testing, and decide if it's still usable before you roll it out to all your users.
This is delightfully useless
Site is littered with ads, I have no idea what it's for or why anyone would want to use it, and the result is very poorly done (why the string concatenations, the tool should do that ahead of time - not to mention there are many better ways to concatenate a bunch of strings than repeated addition operators). Downvoted, but figured I'd explain why.
Hey even playing with the code it was still a fun game :)
Thanks for the feedback. I didn't use the best choice of words. There's nothing wrong with declaring a variable that way if you want it to behave as a static member. But if you want it to behave as a default for instance members, it's the wrong way. Hope that helps. If you can think of better phrasing, would you mind submitting a pull request? I'd appreciate it!
I'm also curious. I think parse is more of a 'backend backend' and firebase is like synced up instant push chat realtime type data. Maybe. Parse was easy to use with my experience in Backbone
Use [console.time/console.timeEnd](https://developer.mozilla.org/en-US/docs/Web/API/console.time) to measure both the calculation and setting the visibility so that you'll know what you really need to optimize to reduce latency.
I second this, came here to say that. 
Also, if you find yourself in need of something like this more than once in a blue moon, it probably indicates that you should be using an actual template system instead of just blindly mashing together strings left and right. 
I've written a lot of prototypal javascript and I don't think I've *ever* written something like this. Employee.company = "Electronic Arts"; Employee.prototype.division = "EA SPORTS"; // It's in the game! I can't even imagine a scenario where you would want to modify a 'Class' object prototype in this fashion after initially declaring it. It seems dangerous. The example seems to constantly confuse between modifying instance property and the base 'class' properties. If you want to have specific behaviour per instance you would normally pass an options object or variables to the constructor function not modify the entire base object by modifying it's prototype. Nothing wrong with trying to understand these intricacies in javascript through examples but at least try to do it through real world situations and not something which is not only never done but is probably also, as you put it, WRONG. edit: I forgot a word
I am a Java Dev, so I see Employee.property as a static field of the employee class.
I kept ads to pay for hosting, not to earn money 
The `Employee` constructor function's only real purposes are to 1. Set the hidden `[[Prototype]]` (a.k.a. `.__proto__`) reference on new objects to point to the object at `Employee.prototype` and 2. To run initialization code on new objects. Any other properties you define on the `Employee` function object will just sit there on that object, doing nothing.
This reminds me of a discussion on Reddit…from 7 years ago. http://www.reddit.com/r/programming/comments/1kth0/test_driven_design_vs_thought_driven_design /oldtimer
For those who don't get why it's wrong, *all* employee objects subsequently created will have their division defaulting to "EA Sports" whether that is correct or not. A new 'Class' / constructor / whatever called EASportsEmployee that inherits from Employee can have that set on the prototype, and rightly so. Edit: or you could just use the correct value in the first place.
Fixed the site on mobile, in case anyone was interested.
Thanks :)
I like it. It's fun. A few comments: - inconsistent thousand separators - on most of it you're using x,000, other parts it's x'000, sometimes there's none at all. - some language issues - "I has PHD" should be "I have a PhD" (unless you're going for lolcat type speech!) - I was using 3 crushers but the achievement for burning oil wasn't unlocked. It only unlocked after clicking 'donate'. - the game really, really slows down after a while. I'm currently waiting for 50m to do anything at all and it will take *hours* - what's the point of selling things individually, or in specific amounts? - why is there a 'sell' button next to diamond if they can't be sold?
inconsistent thousand separators - You're right I'll have to fix this. ome language issues - "I has PHD" should be "I have a PhD" -Intended ^.^ I was using 3 crushers but the achievement for burning oil wasn't unlocked. It only unlocked after clicking 'donate'. - Wierd. Will look into it. the game really, really slows down after a while. I'm currently waiting for 50m to do anything at all and it will take hours - I'll add in new content today to speed up that process. why is there a 'sell' button next to diamond if they can't be sold? - They will be sold eventually, I just have to program it :) Go in the chat if you have any other suggestions http://diamondhunt.co/chat/
There's nothing wrong with defining properties in the constructor function. In fact: you will want to do it that way when defining objects, else they're shared by all instances.
Not free, but Smashing Node.js blew my mind.
Why do you think it's useless? I can see lots of potentially useful situations. 
Well you have WebAPI, which I was a huge fan of till I realized it sat on top of the bloated aberration that is ~~ASP.NET~~. (edit /u/hurricanepkt pointed out that this isn't necessarily the case.) Then you have WCF Services and WCF Data Services, which I was a huge fan of until I tried to do something obvious (optional parameters) or file uploading and had to extend the whole fucking stack for the most basic of operations. And then you have MVC3/4. Which is awesome. Frankly nodeJS + express people could be pretty happy here. However your point is, in my opinion, spot on: .NET + web has some issues. (In my opinion they mostly can be traced back to ASP.NET which for the most part is fucking awful for seemingly no reason.) For cross platform work though, I really like .NET. I had the pleasure of seeing [evangelist Hanselman speak at the Xamarin conference last year](http://www.hanselman.com/blog/XamarinEvolve2013TalkVideoHowCSavedMyMarriage.aspx) and I'm a huge fan of cross platform c#. That said, it has serious limitations (mainly lagging compatibility behind the mainline releases.) With the recent open sourcing of the Roslyn compiler and other significant parts of the .NET stack I'm cautiously optimistic.
You learn this once and for all when you have the clever idea to assign a object or array to the prototype property and wonder why all the values you put in mix up (because all instances share the same reference :)
I don't use it because it won't work on my raspberry pi due to the mongo db requirement (mongo doesn't work on ARM at the moment) and inability to select other databases. 
Sadly this is something a lot of people don't understand. It is virtually impossible to make a profit off advertisements. I will say though, never debut with ads. If it means you have to suck up the costs for awhile so be it. It's just bad form. If you gain enough traffic where the costs are getting high, you could consider the Wikipedia approach.
setCookie('coinsAmount', 100000000000000000000); refresh page.
huge thanks!
&gt; But JavaScript is NOT a "sane" object-oriented language. As a software professional, you may want to avoid statements like this. We're all sorry about your ctor vs proto confusion. But as the comments in this thread rightly suggest, you still don't quite have it yet. Javascript is not Java (and thank goodness), so don't get disappointed when it doesn't meet your incorrect expectations. **JS has no classes**; it has functions and prototypes.
Oh that's actually unfortunate to hear, since I have a raspberry pi lying around, was thinking of using that as a server :(
nvm, sorry
I was very disappointed after spending hours trying to get a couple different mongo ARM hacks to build. A 4gb SD card isn't large enough to run the build on... so I never got around to even testing it. I gave up and went with node, socket.io, and express, along with another noSQL db whose name escapes me at the moment. others may have had better success than me. In the end I just wanted to get programming, and I wanted to have something I, and others, could easily reproduce when I finally release the code. 
Who said it would?
Ah I stand corrected, thanks. 
I was working on this just last night; I think the main take-away is that objects (and functions) have an internal [[prototype]] variable, usually accessible through __proto__, that they actually inherit from. The .prototype field is used to assign __proto__ for objects make using the "new" operator (new MyConstructor()). It's a bit of a hack in that it changes __proto__ on your constructor, but I think the easiest-to-understand prototype chain may be achieved like in this fiddle: http://jsfiddle.net/842nm/ That lets you use a very easy to understand chain, in that it gets rid of the "prototype" vs "function" properties. Maybe some people don't like that, but coming from C / Python, I think it's a lot easier to understand.
Hey a nice detail you could do is to make it so that rock you mine isn't draggable. Just add: ondragstart='return false' to the image attributes.
Oh how neat, will use.
Anything that gets people into GIS web dev is a good thing. It's an awesome field where you get to solve a lot of really interesting problems.
i think generic_white_male is right on, so i won't bother to repeat that stuff. i HIGHLY recommend checking out Ionic - ionicframework.com It's built on top of angular - and the performance is frankly, incredible.
Have a look at [fast-render](https://atmospherejs.com/package/fast-render) and the built-in spiderable package. Those should solve the first problem you describe.
You could probably even argue that what is today call object-oriented programming *should* have actually been called "class-oriented programming", "inheritance-oriented programming" or something along those lines. I'd argue that JavaScript is actually *more* object-oriented than e.g. Java, since JavaScript has almost nothing *but* objects (except for a handful of primitives).
Agreed! I love GIS Web Dev, but I can never find people enthusiastic enough about it. It's like Graphic Design mixed with Science and Data Analysis. 
Depends on what you're writing. I rarely need anything Meteor offers, so I'll stick with the tools that matter for the job. "A framework this great should have drawbacks, right? Well, I haven't found any major drawbacks." That means you aren't looking hard enough to be critical. There are flaws in all technology stacks.
Did this help? Not sure why you asked a question and then ignored responses.
Which is exactly what you want
&gt; Is there any API, or even a simple way to send a POST request and get the data back? I could definitely find it useful, but not in its current state. The Excel data should display on the bottom of the page, if no error occurred, and it is automatically loaded into the variable "matrix". To see your data, type "matrix;" into the console, without quotes. To see a row, try matrix[1] or whatever row you want. To see a cell, try matrix[1][0]. To get a column, issue to the console on the site, "getColumn(0);" and that will return the first column. &gt; Would be even better if you hosted your solution on github. Any chances to do that? I didn't have plans to. One of the things I thought would be attractive about my site would be that people didn't have to download things, or try to install libraries to parse Excel files, that that work would have already been done for them. So I don't really see the merit of hosting it on github. 
After uploading your spreadsheet and seeing that the data loaded in correctly, (because the site should spit the data back out to you on the bottom of the screen), try pasting this into the Javascript code box and running it: function foo() { var toReturn = ""; var i = 0; for( i = 0; i &lt; 10; i++) { toReturn += matrix[i][i]; } return toReturn; }; foo(); That should give you back a concatenated string of the diagonal of your spreadsheet. With this, you can write loops, conditions, and variables to help you compute something using your Excel data, which, as far as I know, is much harder to do in pure Excel. 
I think it's about mixing .NET and node together in one place. Why would you do that? I can think of some uses but they're a bit out there. 
Yes and no. Javascript is its own variant, but not inherently more OOP than Java. While Java puts emphasis on inheritence it does have easy encapsulation. JavaScript on the other hand makes you jump through hoops and doesn't have any standard method of encapsulation. Since functions are not methods owned by objects this makes true syntactic encapsulation near impossible.
&gt; http://jsfiddle.net/842nm/ `.__proto__` is a read only property in some implementations, and it has a giant red deprecation notice on MDN so I wouldn't rely on it for long even if its working in your browser. If the "extends" idea appeals to you, take a look at underscore.js. http://underscorejs.org/#extend
Put all the elements in a container and attach an event handler to that. Assuming that nothing stops the propagation of the event, it will eventually bubble up to the container element and call your handler. (If it is stopped and your handler doesn't get a chance to be called, you can register your handler to run in the capture phase instead of the bubble phase by passing `true` as the third argument to `addEventListener()`. Read about it [here](http://www.quirksmode.org/js/events_order.html) if any of this is news.) jQuery makes this somewhat easier to deal with, using what they call delegated events. Take a look at the documentation for [`.on()`](http://api.jquery.com/on/) for details. 
Won't work on Raspberry pi? What did they do in this post? https://www.meteor.com/blog/2013/05/28/pijs-embedded-raspberry-pi-apps-in-javascript
Cool! Thanks a lot! I do almost exclusively server side stuff, so the client-side is new to me. 
Not off the top of my head, im not too good with terminology ... but know what im doing :-) However its a good post, I can imagine I will use this in future for stuff like storing userID's, connections statuses and user preferences in future where all instances use the same resource. Thanks
Submit an ajax call. Dozens of libraries can help you do this, including jQuery. Also, simply by creating an img tag with a url and inserting it into the DOM will cause the browser to call that url, even if there is no image at that address. This img method is, in theory, the fastest way to send a get request, if you don't care about the response.
I understand that, but either underscore.js's extend or John Resig's simple class model are both kind of unideal substitutes for a good class chain, in my opinion. What implementations don't support it? Any idea? It's just a shame to toss out what I would consider the most intuitive inheritance chain because it "may not be supported in some implementations." That's a pretty vague reason; most of the implementations I've seen support it.
Hmm, my understanding was that it became (grudgingly) part of the spec in JS6, guaranteeing it as somewhat future proof? http://stackoverflow.com/questions/13839115/does-ecmascript-6-support-a-mutable-proto-property
[Image](http://imgs.xkcd.com/comics/standards.png) **Title:** Standards **Title-text:** Fortunately, the charging one has been solved now that we've all standardized on mini-USB. Or is it micro-USB? Shit. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php?title=927#Explanation) **Stats:** This comic has been referenced 441 time(s), representing 2.3613% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcdcomic/)/[kerfuffle](http://www.reddit.com/r/self/comments/1xdwba/the_history_of_the_rxkcd_kerfuffle/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me)
It's tough too when you're dealing with huge amounts of data and efficiency actually matters. It's cool things like this that make me kind of mad when people look down on web development. The cool jobs in we development are just as cool as the cool jobs in more traditional programming.
I once had an opportunity to make school project using ASN.1 among other similar technologies. It was the worst two weeks of my life. 
With jQuery: $.get("your url here");
If you want access to the class's attributes, use ``this.constructor.classattr``. Or use CoffeeScript and write ``@constructor.classattr``. If what you want is for constructors to inherit attributes, use one of the many class libraries (or CoffeeScript) that do that. You *can* change the prototype of a function, and make that work, but you'll be limiting yourself to ES6 browsers (i.e. none available yet) and the V8/Spidermonkey engines (so, not IE). There are already npm libraries that do that to make callable objects. Personally, I think trying to fully replicate Python's object model in JS is a waste of time: I spent a few days on that myself, as I had 17 years of Python under my belt, and was like, "wtf is this %\^%&amp;$% constructor prototype nonsense, and why do you have to f'n copy constructor attributes and use this stupid 'new' thing?" However, I've since then realized that the separation between constructor namespace and prototype namespace is a *good* thing, and that a lot of things I've done in Python were to work around the absence of this namespace division. In Python, there are attributes you can only access from its class/constructor, but they're easy to confuse with the ones you get from instances. And complications in Python's descriptor protocol are rooted in this same lack of distinction. In this respect (though perhaps no other), JS's object model is actually saner, once you wrap your brain around it. *Javascript doesn't have classes*, and that's a feature, not a bug. It has constructors and prototypes. 
It very likely will become part of the standard in es6 simply because it's widely available but as far as I know IE does not have it. I have also heard very little talk about it recently in relation to es6 so I'm not sure it will since I don't often hear of need for it and es6 is realistically a very long time away from being fully implemented in browsers anyway (we are talking in terms of years here). You'll notice people are just going forward regardless with things like Web components and promises but none of the vendors are going out of the way to provide es6 functionality (partially because some of them are rather large changes which is why theses standards were proposed prior to es5 and didn't make it in. We'll... That's a part of the reason they didn't. There was a fair bit of politics as well imo). We will see. I truly think we are talking in the arena of 5 years at a minimum before widespread implementation of the entirety of es6 occurs. Finally I need to re-read the exact thing you are trying to do but there is almost always a way to avoid this. I feel like the way Backbone handles super may be applicable but I will have to look and report back. 
Gotcha. I'd be very interested in an alternative; I certainly couldn't come up with something comparable though. The key problem being assigning an attribute to the function that you use with the new operator should be part of the object's inheritance.
Well, sure. Then the question becomes "Why don't Gulp plugins have gulpfiles?" 
the database record that is getting some "display" flag flipped as a result of the ajax request
Except use $.post.
I'm still not exactly following what you are trying to do but the way you describe python is exactly how Javascript treats the prototype chain natively. Consider: var MyClass = function(val) { if(val) this.value = val; } MyClass.prototype.value = "prototype" var a = new MyClass() ; console.log(a.value) ; //"prototype" var b = new MyClass("instance") ; console.log(b.value) ; //"instance" On mobile so there may be errors. As far as inheritance I'm not exactly sure what you mean. If you need access to the parent classes constructor when sub classing MyClass you can just do MyClass.call(this,... In your sub class constructor or use MyClass.prototype.somefunc.call for its methods. I may not be totally understanding though because my understanding of python has always been looking up the prototype chain is the same as in Javascript (and every language that supports prototypes afaik). 
Ah. I thought he was saying the page would serve different content based on the confirmation. I didn't realize it was setting data of some sort. 
This
I used this API extensively for a few months and it seemed like almost everything had some gotcha where you couldn't get it to do exactly what you needed out of the box.
Enjo? At least they got the url right. 
&gt; Read about it here if any of this is news.) Actually, it was news. I never realized that an event handler didn't eat the event (use it and then nobody else gets it) If I read the article correctly, the inner container gets the event, then the outer container gets it, regardless of whether the inner container acted on it(or in the reverse order depending on capture/bubble)? I think I might not have this correct though, since that would cause huge numbers if events in containers that don't need to handle them. Time for more googling, unless you're feeling talkative. 8-)
I coincidentally wrote a very similar bit of code (http://git.io/z1v2Og) a couple days ago... I based it off `Object.create()` (it's `Function.create()`) instead of python's inheritance system, but I think we had the same problem in mind. It tries to use Object.setPrototypeOf, but if that isn't available then it just defines a pretty simple polyfill: if (typeof Object.setPrototypeOf !== 'function') { Object.setPrototypeOf = function setPrototypeOf(obj, proto) { obj.__proto__ = proto; return obj; }; } I don't think I'd ever use `__proto__` in any other situation, but there is literally no other way to set a function's prototype chain, which I don't really understand. [MDN's doc page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto) (at the bottom) indicates that `__proto__` is supported by all browsers, even mobile. I couldn't find anything regarding how far back support goes, and all the warnings on that page are rather daunting, but like I said: There's no other way to do it... 
Yeah; I like your fallback to setPrototypeOf, I should put that in there. Thanks! Edit: fallback from*
You say foul play. I tend to have the mentality of "use an underscore if it's private and dangerous." That's always been sufficient for me. There is no client side javascript that is safe. No client code can be safe, by definition. We're just all giving each other some friendly advice :) my main issue with prototype is that it's a barrier to entry that I haven't seen a convincing use case for yet. It's the way it is and a lot of people work with it, but that doesn't mean they wouldn't be more productive with another system. Plus, from my work experience, it's far more dangerous to provide a programmer access to an obscure use case they are more likely to partly understand than it is to present them with a simpler, easy to understand system. Even if that system makes it easier to mess things up globally. Usually those mistakes are quicker to diagnose and never make again. 
You can seal and freeze objects in Javascript... Also as far as simpler... it's more like just not stating what you are doing. I'd much rather explicitly state I am altering the prototype (and would definitely definitely definitely much rather have my Co workers do so) than be able to do so from a direct reference to a variable. I guess I'll have to look into pythons prototype system because the js method is built on existing prototypical languages and is the norm. I don't think directly acting on the prototype is even remotely an obscure use case. It's most of what we do. You kind of mislead the conversation here by addressing the "private" proto property when it seems like you have an issue with referring to the prototype property which is what you are supposed to do. So really the question is do you have a problem with prototypal inheritance in general or the fact that calling a.b doesn't change the object prototype if a.b is bound to the constructor function context. The last point is probably the biggest thing you are forsaking about then entire situation. I don't see how another method would work in Javascript or why it would be remotely valuable. That system is one of the main reasons js has become so popular. 
Upon re-examining the JsFiddle, I'm inclined to agree with /u/pje regarding the separation of constructor and prototype. I'm curious why you would choose to have a property on the constructor like this: Vehicle.hasWheels = true; instead of on the prototype like this: Vehicle.prototype.hasWheels = true; It seems to me like you're just trying to not have to think about two different objects, by merging prototype with the constructor (I overlooked the `child.prototype = child;` bit the first read through.) If that's really what you want, you might find a different pattern suits you better. You'll lose the `new` keyword, but maybe something like this: -------------- function __extends(parent, child) { var out = Object.create(parent); for(var i in child) { if (child.hasOwnProperty(i)) out[i] = child[i]; } return out; } var Vehicle = { init: function(wheels) { this.wheels = wheels; return this; }, hasWheels: true, wheels: 4 }; var Car = __extends(Vehicle, { init: function() { return Vehicle.init.call(this, 4); } }); var Bulldozer = __extends(Vehicle, { init: function() { return Vehicle.init.call(this, 0); }, hasWheels: false }); v = Object.create(Vehicle).init(4); b = Object.create(Bulldozer).init(); c = Object.create(Car).init(); -------------- No ugly hacks, and it does what you say you want it to. That said, I dislike that pattern in many situations, for example something like this: function DBModel(collection) { this.collection = collection; } // STATIC METHODS DBModel.save = function() { // save an arbitrary number of documents for (var i = 0; i &lt; arguments.length; i++) { db.collection(this.collection).save(arguments[i]); } }; // INSTANCE METHODS DBModel.prototype.save = function() { DBModel.save(this); // or it could be }; 
this.datastore[key].push(value) is going to push the value onto an array but your checking if the array is the value earlier so it doesn't seem consistent as you mentioned in your note. So if you wanna check if something exists in an array use indexOf however be careful because early versions of IE if I recall made indexOf really sloppy. So I recommend if you want to support IE using underscorejs or jQuery's indexOf. The issue here I think comes down to JS being weakly typed which is one of its fun whimsical qualities. So I guess if I'm understanding what you wanna write something like this? function MasterStore() { this.datastore = {}; }; MasterStore.prototype.add = function(key, value) { if(this.datastore[key]){ if(this.datastore[key].indexOf(value) === -1) { this.datastore[key].push(value); } }else{ this.datastore[key] = [value]; } } foo = new MasterStore(); foo.add('month', 'march'); foo.add('month', 'april'); foo.add('day', 'caturday'); console.log(foo); edit: screwed up the formatting first time
Upvote for the correct interpretation. And I'd give you another if I could for stating that a lot of people use GET instead of POST just because they can. Sites that do this can have the [REST POLICE](https://twitter.com/RESTPOLICE) called on them.
Yes to reiterate what /u/qwfwq is ddoing here and why your current code doesn't work: the first time you use your add method the datastore property related to the key obviously does not exist so you hit the else block. When you do this you want to set this.datastore[key] to an array and and add value to it straight away. What you are doing now is to set this.datastore[key] to a value which is not an array and does not have a push method so an exception is thrown when you call add again with the same key. If you run your current code in chrome and open the devtools you should see an error about the push method not existing for that object.
Maybe because most gulp plugins are too simple to need any of those processes? Putting "test" and "prepublish" scripts in package.json probably is sufficient for most plugins' build/test needs.
&gt; I have to keep typing prototype So use CoffeeScript's ``::`` operator. Or define a getter property on your root class called ``__class__`` that returns ``this.constructor.prototype``, so you can always use ``this.__class__.whatever`` to get to a prototype property. &gt; And then I have to allocate my object with a different function (A itself, not A.prototype). Or call ``Object.create(A.prototype)``. Or attach a 'create' method to the prototype. &gt; The separation of function used for "new" and that function's prototype makes the inheritance really unintuitive. That's because Javascript doesn't have classes. Constructors are a convention -- the core of Javascript is really just ``Object.create()``. Once you free your mind of the idea that classes are a thing in JavaScript, it gets much easier. &gt; Again, you can do this through .prototype, but then you have to type prototype everywhere in your code. That's a lot of .prototype. Not if you use either CoffeeScript or one of the dozens of "class" libraries that give you syntax sugar for setting up prototypes. None of this, however, needs you to have writable prototypes, or to make your functions be prototyped on non-Function prototypes, or make your instances prototyped from your functions.
You can simplify this by making a ``create()`` method that returns ``Object.create(this).init(...)``. So that you'd say ``Vehicle.create(4)`` instead of ``Object.create(Vehicle).init(4)``. 
Try this: function MasterStore() { this.datastore = {}; } MasterStore.prototype.has = function(key, value){ if (value == null) return this.datastore.hasOwnProperty(key); if (Array.isArray(value)) { for (var i = 0; i &lt; value.length; i++) { if (this.datastore[key].indexOf(value[i]) &lt; 0) { return false; } } return true; } return this.datastore[key].indexOf(value) &gt;= 0; }; MasterStore.prototype.add = function (key, value) { if (value == null) return this; var valueIsArray = Array.isArray(value); if (this.datastore.hasOwnProperty(key)) { // if value is an array and the datastore[key] is also an array if (valueIsArray) { // concatenate the value array to the datastore[key] array this.datastore[key] = this.datastore[key].concat(value); } //see if the value is already present in the array else if (this.datastore[key].indexOf(value) &gt;= 0) { //if present then do nothing } else { // otherwise push value onto the datastore[key] array this.datastore[key].push(value); } } else { this.datastore[key] = valueIsArray ? value : [value]; } return this; } MasterStore.prototype.remove = function (key, value) { if (value == null) { // if no value present then remove the whole array from the datastore delete this.datastore[key]; return this; } var valueIsArray = Array.isArray(value); if (this.datastore.hasOwnProperty(key)) { if (Array.isArray(value)) { // should we keep splicing the array or just create a new one if (value.length &lt; 20) { // if we don't have a lot of values to remove, just splice for (var i = 0; i &lt; value.length; i++) { var index = this.datastore[key].indexOf(value[i]); if (index &gt;= 0) this.datastore[key].splice(index, 1); } } else { // otherwise it's probably faster to just create a new array var store = this.datastore[key], tmp = []; for (var i = 0; i &lt; store.length; i++) { var index = value.indexOf(store[i]); if (index &lt; 0) { // if datastore[key][i] isn't in the value array // push it into our new array tmp.push(store[i]); } } this.datastore[key] = tmp; } } else { var index = this.datastore[key].indexOf(value); if (index &gt;= 0) this.datastore[key].splice(index, 1); } } return this; } Now you can do this: var a = new MasterStore; a.add('days', 'monday'); console.log(a.datastore.days); //&gt;&gt; ['monday'] // You can also chain because add() and remove() return this console.log(a.add('days', 'tuesday').datastore.days); //&gt;&gt; ['monday', 'tuesday'] a.add('days', 'wednesday').remove('days', 'tuesday'); console.log(a.datastore.days); //&gt;&gt; ['monday', 'wednesday'] // You can add entire arrays at a time a.add('months', ['january', 'february', 'march']); a.add('months', ['april', 'may', 'june']); console.log(a.datastore.months); //&gt;&gt; ['january', 'february', 'march', 'april', 'may', 'june'] // You can remove individual values from the datastore[key] array a.remove('months', 'february'); console.log(a.datastore.months); //&gt;&gt; ['january', 'march', 'april', 'may', 'june'] // You can remove multiple values from the datastore[key] array a.remove('months', ['january', 'april', 'june']); console.log(a.datastore.months); //&gt;&gt; ['march', 'may'] // You can also entirely remove the datastore[key] array // (this is mostly for convince as you can do: "delete datastore[key];" instead) a.remove('months'); console.log(a.datastore.months); //&gt;&gt; undefined
So... this is interesting, but would there be much of a wide application beyond testing FP-style code? And even then, just for testing functions that are essentially mathematical? Most of the unit tests I write tend to work against functions that accept a limited number of values, or accept objects with a limited number of important values for certain properties, and then ensure that the function output is what's expected (often a transformed data structure). It seems like this sort of tool would be far more overhead than would be worth it, given the limited number of cases in which I'd be able to use it. Not criticizing the tool--thanks for sharing it. Just trying to understand the contexts in which it could be profitably used.
Thanks for the detailed reply! I'm keen to give FastDOM a go after a bit of research, but I'm not sure how to implement it. I'm a little strapped for time at the moment, but I'd love to chat with you further over this at some point if you don't mind.
I'm not very familiar with JSDoc annotations, but from what I've just read, it seems like they allow you to annotate types in comments and have those types checked. Type checking comes for free with PureScript (the language), but QuickCheck (the library) goes a step further and allows you to verify (probabilistically) properties of your code which cannot necessarily be captured only with types. For example, I don't think you would be able to test the last example (Underscore's sortBy is idempotent) only using JSDoc, although I might be wrong.
Thank you for the bug report! :) I fixed it now and there's a new version released: http://ocanvas.org/download#v2.7.0 It will now redraw automatically only if there has been a call to draw it prior to the automatic one. It does the automatic redraw to make it easy to draw objects with resources that need to load (web fonts and images).
&gt; Things like branching based on what element actually triggered the event in a parent handler for example could be avoided. That doesn't make any sense. If you need to something that's specific to the particular element, how does having the same handler attached to every element avoid the need for branching? Are you referring to the fact that `this` will be a reference to the element that triggered the event? You get the same thing with a delegated event handler by referring to the `currentTarget` property of the event object. There is absolutely nothing to be gained by attaching dozens or hundreds of event handlers when one will suffice, and much to be lost. The need to avoid having to attach event handlers to large numbers of elements is the *entire reason* that the capturing/bubbling of events was invented in the first place, allowing for a single handler to do the work of hundreds or thousands. 
The propagation can be stopped at any point by an event handler calling the `stopPropagation()` method on the event object, which is passed as the first argument to the handler. If that is done by a delegated/ancestor handler that was registered in the capture phase, then it prevents the descendent/direct target element from ever knowing that the event happened. If `stopPropagation()` is called by the descendant handler, it stops any ancestor handlers registered in the bubbling phase from ever seeing the event. And you can imagine any of a number of more complicated scenarios involving multiple handlers; the point is, whatever the order of event handlers would have been, `stopPropagation()` ends it where it's called. There's also a method of the event object `preventDefault()` which tells the implementation to cancel any default action that might have been associated with the event. For example, with an `&lt;a&gt;` element, the default click action is to navigate to the URL indicated by the element's `href` attribute. If you install a handler for the click event and call `e.preventDefault()` that won't happen. You might have also seen event handlers that end by returning `false`. That [may or may not perform the same action as `e.preventDefault()`, depending on the browser](http://blog.niftysnippets.org/2011/11/story-on-return-false.html). In an event handler registered with jQuery, it's equivalent to calling both `e.stopPropagation()` and `e.preventDefault()`. 
What did the neckbeards do to you?
Best resource on this: https://github.com/getify/You-Dont-Know-JS/blob/master/this%20&amp;%20object%20prototypes/ch6.md
Not to be too glib, but your objections remind me of the [Worse is Better](http://en.wikipedia.org/wiki/Worse_is_better) approach to software development (also check out the [classic essay](http://www.jwz.org/doc/worse-is-better.html) if you haven't read it). Among other things, it argues that simplicity of *implementation*, moreso than simplicity of interface, predicts that a given piece of software will be successful. As counter-intuitive and painful that might be for client writers.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Worse is better**](https://en.wikipedia.org/wiki/Worse%20is%20better): [](#sfw) --- &gt; &gt;___Worse is better___, also called the __New Jersey style__, was conceived by [Richard P. Gabriel](https://en.wikipedia.org/wiki/Richard_P._Gabriel) to describe the dynamics of software acceptance, but it has broader application. The idea is that [quality](https://en.wikipedia.org/wiki/Software_quality) does not necessarily increase with functionality. There is a point where less functionality ("worse") is a preferable option ("better") in terms of practicality and usability. Software that is limited, but simple to use, may be more appealing to the user and market than the reverse. &gt;As to the [oxymoronic](https://en.wikipedia.org/wiki/Oxymoron) title, Gabriel calls it a caricature, declares the style "bad" in comparison with "The Right Thing". However he also states that "it has better survival characteristics than the-right-thing" development style and is superior to the "MIT Approach" with which he contrasted it in the original essay. &gt; --- ^Interesting: [^Unix ^philosophy](https://en.wikipedia.org/wiki/Unix_philosophy) ^| [^List ^of ^software ^development ^philosophies](https://en.wikipedia.org/wiki/List_of_software_development_philosophies) ^| [^For ^Better ^or ^For ^Worse](https://en.wikipedia.org/wiki/For_Better_or_For_Worse) ^| [^For ^Better ^or ^Worse ^\(film)](https://en.wikipedia.org/wiki/For_Better_or_Worse_\(film\)) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ch8gi1q) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ch8gi1q)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
there is also #r.javascript which tends to have less people and still no conversation
I like to idle in channels that are marginally relevant to me. Sometimes people ask questions I can answer. Sometimes people ask interesting questions and I learn things from other people's answers.
I'll have to play with it. I never knew that the "return true/false" element was anything significant. It always seemed like boilerplate that didn't do much. Now it turns out that it's really important. Thanks for the help!
I guess it's intimidating to talk freely when you know 999 people are watching, so there's no chance to build up a community. I've been in channels that have 20 people online, but there was a lot of chatting going on, and I knew nearly every one of them, we met in person regularly. That's a community.
You can get to stackoverflow's new posts page with the subject of your choice. [ http://stackoverflow.com/questions/tagged/javascript](This is the JavaScript page.)
I prefer the atmosphere of IRC.
One neat way to illustrate what's going on is to open up the browser console for the current page and type: document.addEventListener('click', function(e) { e.stopPropagation(); e.preventDefault(); }, true); This installs an event listener at the document root in the capture phase which intercepts all click events and stops their propagation and removes their default actions. After running that you can click on anything on the page and nothing will happen. 
Ahhh damn I was doing something foolish :( I had not idea that was how you added a single value to an array.. bugger! Thanks for help
Yeah I saw that it was driving me nuts. I tried all sorts of ways around it. So I scaled back my 'improvements' and put the initial code here. I feel like a fool now :D
thanks man, thats really helpful. Is isArray() a jQuery function? I was trying to test it using isString as I didnt think we could test an in JavaScript as it treats it as an object and just says if its an object or not??
I really appreciate the help guys. I can't believe I let such a simple thing go by. I didnt know that adding a value to an array in JavaScript in needed array[i] = [value]. Really appreciate it! And JcReady I'm going to expand my functions likes you suggest. I got two down votes for this. If you could let me know so I could improve for any answers or questions I give next time I'd appreciate it. PM or leave a comment here and I'll improve my responses.
You mean the silence and the constant aliq89 joined tremor1 joined weatherpriest quit masterblaster500 joined wigglytoes quit ... ... 
I JZ'd all over your post history bro. http://i.imgur.com/m3MB0Yu.png
Well to be fair it is quite easy to find the freenode channel by just googling. But yeah, no reason to be a dickhead..
Ahh no isArray is native. I was looking here at [StackOver Flow](http://stackoverflow.com/questions/4775722/check-if-object-is-array) for checking if a variable is an array. I'd seen the quote &gt; Should mention jQuery's isArray. – Martin Konicek May 29 '12 at 16:42 and assumed it was true. Oops
cool man keep me posted about your other life adventures
I hide join and part messages. I meant more the casual/organic nature of the discussion.
It probably doesn't make much difference in practice but wouldn't PUT be more appropriate in theory? 'Mark as read' could be submitted multiple times without any side effects so it seems like it would be an idempotent action.
I'm not sure what your exact situation is but submitting the entire page whenever 1 out of 100 checkboxes is clicked sounds it would get annoying for the user pretty quickly. Personally I'd look at whether I could use AJAX instead.
A lot of the events are like that, i.e. the map load event.
 #reddit-webdesign on freenode.net is a good place for JS info (plus more)
Well if it isn't lostkauze who is [brightening this thread wherever they can!](http://www.reddit.com/r/javascript/comments/24m34o/is_there_a_javascript_irc_chat/ch8hljz)
Yeah, I haven't figured out how to do that with my particular client yet but I get your point. I just wanted to illustrate how the only thing that ever goes on in those channels is silence and people joining and quitting.
What client do you use? Do you have a reason for not using Xchat, because if not, I could show you how to do it in that client.
&gt; I'm not sure what your exact situation is but submitting the entire page whenever 1 out of 100 checkboxes is clicked sounds it would get annoying for the user pretty quickly. Personally I'd look at whether I could use AJAX instead. I actually am using AJAX. I wanted to keep the example in my question simple, to keep it clear. The more generic question, would be "I want to be able to do something when a control is activated, without writing a handler for each control", but that's kind of poorly defined and would have resulted in a lot more questions, instead of the concise, very helpful answer I got. It doesn't matter whether I use AJAX or GET or POST. I needed help with event handlers. 
That's fine and it probably was a good idea to keep things simple.
FWIW, it's a control panel for instrumentation, and the controls tend to appear/vanish/change allowable range as sensors are added/removed/conditions change. I'm trying to keep it as simple as possible, since complexity always leads to maintenance problems and less flexibility.
Done :) Thanks
`if (firstletter="A")` is wrong, try `if (firstletter === "A")`
so is this an actually framework for IF games built in JS? Just a game?
have you tested it out on meteor sites? how did SEO perform? 
I will release it as a framework - there is a (very early and more basic version) [here](https://github.com/neuroflux/TextAdventureEngine) Note that this isn't a full framework, but more of a "coding starting point" at the moment. But you know - I share what I can.
wow, thanks! ;)
Seems fine now
&gt; The supplied data appears to be in the Office 2007+ XML. You are calling the part of POI that deals with OLE2 Office Documents. You need to call a different part of POI to process this data (eg XSSF instead of HSSF) There are a few in-browser excel parsers that you could use: https://github.com/SheetJS/js-xlsx https://github.com/trevordixon/excel.js https://github.com/SheetJS/js-xls https://github.com/stephen-hardy/xlsx.js Also: consider integrating with https://github.com/sutoiku/formula.js
You might want to read the current URL on page load or back button press and load the proper directory. It's not letting you go back even though the address bar changes.
Would (firstletter="A") evaluate to something "falsy" for some reason?
Hmm, looks like it's an issue with bacon reader.
I'm still a newbie, but that's what I would have guessed. However, sudhingr8 made it sound like the code in the if statement was never executing, although the problem was somewhat vague.
Agreed. It seems like many sites just use GET because they don't know better and manipulating the url with query params is intuitive. Otherwise, using a method like GET that is supposed to be safe and idempotent to modify server-side state can have consequences. 
It would definitely execute. Here's your code cleaned up a little with some notes. //FYI Using document.write is a very bad idea //It can be used to insert malicious scripts into your site. function getYpipeTL (feed) { var write = document["write"], firstletter, pComment, pTitle, pList, href; write('&lt;ul style="font-weight:bold"&gt;'); for (var i = 0; i &lt; feed.count; i++) { //Don't redeclare your variables using var within a loop. href = "'" + feed.value.items[i].link + "'"; pTitle = feed.value.items[i].title; //Do not need to ecape "(" and ")" pComment = " (" + feed.value.items[i].commentcount + " comments)"; pList = "&lt;li&gt;" + "&lt;a href=" + href + '" target="_blank"&gt;' + pTitle; //Just use brackets instead of charAt firstletter = feed.value.items[i].title[0]; if (firstletter === "A") { write(feed.value.items[i].title); } write('&lt;br&gt;'); write('&lt;/a&gt;&lt;/li&gt;'); } write('&lt;/ul&gt;'); } 
&gt; I didn't know that adding a value to an array in JavaScript in needed `array[i] = [value]`. No, that's not right at all. That statement doesn't add `value` to the array. It sets `array[i]` to another *array*, an array of one element containing `value`. You should make friends with the JavaScript console in your favorite browser and start trying stuff out there to see how it really works. For example try this out: var a = []; // create an empty array a.push( 'v1' ); // append the string 'v1' to the array a.push( ['v2'] ); // append an *array* to the array a; // let's see what it looks like If you're doing this in Chrome you will see this: ["v1", ► Array[1] ] Click the ► and it will expand that nested array: ["v1", ▼ Array[1] ] 0: "v2" length: 1 ► proto : Array[0] We can see here that your original array (in the `a` variable) now contains two elements. The first element is the string `"v1"` and the second element is itself an array. That array contains a single element, the string `"v2"`. Or use `JSON.stringify` for another way to look at the array: JSON.stringify( a ); That will display: "["v1",["v2"]]" Don't be thrown off by the quoting! The outermost quotes are just what the Chrome console displays when it's printing a string. The array `a` itself contains this: [ "v1", ["v2"] ] Again we're seeing an array of two elements, the first of which is a string (`v1`) and the second is another array which contains a single string element (`v2`). Spend some time like this in the console whenever you aren't sure what a particular JS statement or expression does. And spend some more time there when you think you're sure what it does! :-)
The source is available on github: https://github.com/josh3ennett/excelFormulaUtilitiesJS
What are their specific complaints about mongodb? 
Underscore uses the native array functions whenever possible so its no shock it behaves the same. I'm surprised the others don't use them. I'll have to dig into that.
Something like this: var parts = fileContents .split( '\n' ) // split on line breaks .map( function( line ){ line = line.split( ' ' ); return { qty : +line[0] , part : line[1] }; } ) .sort( function( a, b, ){ return a.qty - b.qty; } ) , total = parts.reduce( function( part, total ){ return part.qty + total; } ) , partsDisplayed = parts.map( function( part ){ return '[' + part.qty + '] ' + part.part; } ).join( '&lt;br /&gt;' ) ; A lot of those specifics might be over your head, but you can hopefully figure out the order of logic and go from there.
Java != Javascript
Not all channels are the same, and it helps to follow proper IRC ettiquette when you do use them. Some channels are amazing. Some have separate support channels, so make sure to read the channel topic. IRC helped me learn jQuery quickly by hanging out in #jquery and answering questions that I could, or looking up answers I did not know. I have gotten amazing help from #drupal-support (and various other drupal channels), #nginx and especially #postgresql. I unfortunately got some consistent bad attitudes in various linux distro channels, so I tend to avoid those. Some people sit in those channels just waiting for their moment to "*tell some n00b how to use google*".
I guess we should consider the meaning of the `return false;` in the loops. What is the behavior you want when the anonymous function returns a false value in a loop? In some of these libraries, a false value indicates that the loop should be terminated. Since a forEach loop by definition doesn't return values (only mutates other values) I believe this to be a nice feature. You have no reason other than loop termination to ever return a false value. In conclusion, if you return false from a forEach loop, it's because you intend to terminate the loop, otherwise don't return anything.
I'm surprised about Lo-Dash, but not really jQuery, which also has the callback arguments reversed from the native implementation. I may be wrong about this, but I believe jQuery's `$.each()` existed before the ES5 spec was finished. One thing to note about this article is that the Underscore `_.forEach` example is wrong - for some reason it shows the jQuery argument order `(index, value)`, when really it's just an alias for the regular `_.each` using arguments `(value, index, list)`.
I don't know what it is about this and the javascript subreddit but I've seen similar situations a lot recently. 
The reason (as far as I understand) that `Array.prototype.forEach()` does not support exiting early is that this functionality is provided by the `Array.prototype.every()` method. This actually offers more flexibility and, in my opinion, is more consistent - if you return a truthy value the loop continues, and if you return a falsy value the loop exits early. It also provides meaning to the return value of the collection method itself, which is a boolean representing whether or not all of the callbacks returned truthy values.
\#node.js is actually pretty active during the work day.
I'm on mobile so code samples are going to be difficult. However the concepts are easy. Essentially what you're going to do is choose a function that describes what the scroll location should be as a function of time and then move the page in line with that function at the desired frame rate. The type of functions you're looking for are called easing functions and more generally the concept is called tweening. The first search result actually turned up some pretty good graphs http://easings.net/ that illustrate some different easing methods. Play around with something like this function easing(time, startpos, endpos) { return function(t) { return t * (endpos - startpos) / time + startpos; // linear easing } } e = easing(5000, 500, 0); t = 0; id = setInterval(function() { scrollTo(e(t)); t += 200; if (t == 5000) { clearInterval(id); } }, 2000);
Cool, that's what I figured. I've been dancing around FP, reading/trying bits here and there, but I have yet to see a JS-based web application (which is what I do) done in an FP style--not that such doesn't or can't exist, but I haven't seen it. So I have a hard time envisioning widespread use of FP in my work. Which, to be frank, is almost universally about causing side-effects :) Still, interesting tool, thanks for sharing it.
Why so many down votes? Perfectly valid point. 
You are invoking the scroll function right there in the loop, not after the timeout. There is a difference between: setTimeout(window.scrollBy(...),...) And: setTimeout(function () { window.scrollBy(...) },...) Notice that setTimeout's first parameter has to reference a function. You instead use the result of scrollTo(). I’m sure there are tons of questions about on stackoverflow to help you better understand this topic. 
If you do choose to use jQuery, this is all made very easy and slick by [Ariel Flesler's jQuery.scrollTo plugin](http://flesler.blogspot.com/2007/10/jqueryscrollto.html).
Yea, Freenode got channels for any somewhat popular language. Most open source projects got their channel there, too. Freenode is *the* developer network.
Thank you.
I guess I believe that my plugin _does_ fit in the ecosystem (I _did_ publish it, after all), but that it's more ambiguous than whether it does in Grunt's. Gulp's got guidelines that are subject to interpretation, eventually going to be used to evaluate plugin quality algorithmically (if I'm reading the "Why follow these guidelines?" correctly), while currently blacklisting suspect plugins. And those are all good things in my opinion, or at least _interesting_ things. But how long until some flame war breaks out over the moderation process? 
Ha. Standup ("_What's_ the _deal_ with IRC channels?") doesn't necessarily carry over well into Reddit comments, but I hope you'd be killing at a jQuery conference after-hours event. 
I think that will be your downfall if you don't change your mind about POST requests. If you don't know how, goggle, it's dead simple. As a developer it's absolutely useless for me if I have to go to a website and use console. Being able to cURL for example domain.com/parse/?row=1 would make all the difference. If developers are not your target audience, invest a lot of time into SEO to make it possible for average internet user to find your service. And above all, allow for GUI access to the data. Either way, you could use some nicer looking website. Bootstrap among many should get you there fast. 
Hey guys! I saw people sharing their generators here, so I thought I'd share mine too :) It's still WIP and doesn't have all the stuff I want to put in there at the moment (also lacks proper tests), but you can pretty much see where I'm going with it. Will be glad to hear any feedback/comments on this one. Or answer questions you might have :)
Yes, you should. RAF is far more suitable for this than setInterval.
GSAP has some really smooth scrolling examples. I don't know whether you can include them as is. Might need some tweaking in your markup
Put all content in a div. Then, move to top position of the div.
&gt; I wonder what it is with those mammoth channels. It's almost always the same. These tend to be help channels - discussion is usually driven by people asking questions on them, so ask a question about whatever you want to talk about. If you just want to stimulate some chatter, make it a subjective one ;)
I came up with an interesting way to do something like this. Create a hidden div and absolutely position it. Set a CSS transition on it for the top property with your favorite tweening algorithm (linear, ease in, ease out, etc) and time. Now lock it with a request animation frame to your scroll to. Basically calculate the position of the div and set the scrollTo to match. When its time to scroll, set the top property of your div and you'll scroll your div. No complex loops, no writing cubic-Bezier algorithms in JavaScript, no plug ins, and is easily done in pure JavaScript. The whole thing is like 10 lines of code.
Check out the git repo, they're always pushing out code. And the 12mill probably means they won't stop any time soon. 
You can run it on the pi, there's a custom linux build for the pi which supports it. I started it on my github but I'm on mobile now. 
I think going into a little more detail about your setup would be beneficial here. Are you using a framework? Are rendering templates inline then styling them? Smells like angular to me but there really should be no reason to ever have FOUC.
[Comma operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator) Also var a = coolio() returns `undefined` because any variable declaration statement will return `undefined`because it's a statement, not an expression, and that's how the console deals with returning the value of something that doesn't have one. The var `a` is still assigned, but that value doesn't get promoted to the value of the whole expression like in `a = coolio()`, because a var statement is not an expression.
Express 4?
I don't understand your first question. It's the var statement with two variables. So your similar line is not similar at all. This anyway is: var apples = 1, bananas; And the **bananas** variable contains undefined. And to the second question: It's, as jimrhoskins said, caused by the comma operator.
but i don't want a custom linux build that supports it. If this was a one off item I'd be more than happy to give things like that a shot. the thing is, I'm trying to develop something open source for others in my hobby, fresh water aquarium, to get going with with little fuss.
yup, latest stable :)
Do you test on slow connections, mobile devices, tablets?
Yes, and I use [this](https://github.com/voidfiles/Node.js-Remote-Console.log) to debug. 
I hadn't noticed the ordering but did think it was odd to mention it as if it was anything different than calling .each. I wonder why jquery didn't start delegating to the new native methods in newer versions. I suppose the benefits don't particularly outweigh the risks. There may be other considerations when iterating over the Dom as well I suppose. 
You can define a comma separated list of variables with a single var keyword. It's a common pattern in the JS world, though the value of it is debatable since we pass everything through minifiers anyways. Here's what your first two examples are actually doing: var file = fs.readFileSync(fileName, "utf8"); var notAllowed; var apples = 1; var 2; 
May I see it?
but how do I use RAF to do what I am doing?
I've hears of GSAP, but I don't want to include a library for this.
You're right. I think it is only a matter of time before several people get pissed off and I expect either fork gulp to make a npm like alternative or go back to grunt. Now whether or not the split has any serious impact or if one ever happens is another question. One issue with the philosophy I have came across is that it often impacts efficiency of your build system. Here was something I contributed back to solve a specific problem I was having: https://github.com/phated/gulp-jade/pull/27. I eventually realized what was going on in my build was a bit of a misunderstanding on my end, as I was creating a stream instance outside of the gulp task through vinyl-map. However, I still deem my pull request a better way to handle this rather than forcing everyone to have to pull in something similar to vinyl-map or through to manipulate the template. Additionally, I found the performance of my builds were improved when I let gulp-jade call my transformer rather than pipe it into a transformer. Now with everything I've said in mind I still like gulp a lot and prefer it greatly over grunt.
Basic example: var loop = function(){ window.requestAnimationFrame(loop); // put code to be looped here }; // start the loop loop(); Any sort of animation should be handled by RAF. See [Paul Irish's blog post](http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/) for more examples.
Wish I'd known about this 2 weeks ago :/ oh well thanks for building it. 
Never mind. I learned this is now really a browser setting more so than an Acrobat setting that could/should be set via javascript. This could be done in a different and less complicated/convoluted way.
the undefined happens because you're evaluating in the console, so it's returning the result of the VariableDeclaration, which is always undefined. The comma stuff is a SequenceExpression, so things get evaluated in order and the last value is returned. It's not common, but can be very useful in some circumstances
Glad you liked it :D It's still WIP. I have some crazy ideas in mind for it (stuff like docker integration, auto-deployment, git hooks etc). Plus there's no tests yet. 
This is ridiculous overkill and quite hacky, IMHO.
Not depending on CSS transitions and div position to scroll the page? ScrollTop may not be quite as smooth but it's much more cross browser / cross device friendly and it's the standard.
I like hacky. :) Web development is filled with hacky solutions to interesting problems. XHR was a massive hack, and was no where close to a standard at the time, yet I can't imagine the web without it. Any good programmer would obviously do feature detection with appropriate fallbacks.
Be rude. Stupid people who write blogs should be treated that way. It helps eliminate them from the herd.
There is definitely a place for hacks, when necessary. There is better alternative in this case though, in my opinion. But, different strokes for different folks.
What a pointless article.... it says what can go wrong but doesn't provide any direction on how to fix it.
You are correct that it's a Variable Statement with two declarations, but it is not in any way related to the comma operator (except I suppose that they both involve a comma terminal). It's just the grammar for the *VariableDeclarationList* production. [See more](http://es5.github.io/#x12.2). It's similar to commas inside array literals or function declarations in that respect.
FOUC can occur due to several reasons. Here are some techniques to help prevent it: 1. Ensure all CSS is loaded at the top of the page, preferably in the `&lt;head&gt;`. 2. Elements that require JavaScript before they can function or appear properly should be initially hidden and then made visible via JavaScript. For example, you can use a special class name like `js_only` that has a CSS rule of `display: none`. Using JavaScript, you can remove the class name after enabling the widget. This is a technique that AngularJS uses -- see [`ng-cloak`](https://docs.angularjs.org/api/ng/directive/ngCloak) 3. If possible, try not to use JS to style the page. For example, don't use `$('.foo').css('background', 'black');` I hope this helps!
Doesn't work for me. Didn't install gulp. Doesn't create a bower_components folder. Manually created it and then running gulp says: "[gulp] 'inject' errored after 2.75 ms Missing positive glob" and never starts the server.
Lo-Dash uses loops because there's a slight performance penalty to using the ES5 Array extras.
It's also perfectly inaccurate, the channel is plenty active.
Wat? The comma operator is why these sorts of expressions work. The expression indeed actually returns undefined as a value because that's what the comma operator does: returns the value of the latest expression in a comma separated list of values. 
meanwhile added gulp to install command in readme, should work this way :)
Your problem is that the Fancybox link inside the tooltipster content option doesn't exist in the DOM when the Fancybox trigger initialises everything. Solution would be to set your tooltipster content option to an element already on the page (a div inside of a hidden div should work fine), or to reinitialise Fancybox inside the tooltipster FunctionReady callback option.
How would I reinitialize using a callback? I am new to js and an example would really help.
&gt;though the value of it is debatable since we pass everything through minifiers anyways. Defending against javascript's variable hoisting usually means defining all of your variables at the top of the function, so the list of variables with a single var keyword cuts down on keystrokes (and looks less noisy,) so it's not just about saving bytes.
Probably because the blog is written by a company that sells a product to "solve" this "problem". 
&gt; $('#p1tooltip').tooltipster({ &gt; functionReady: function () { &gt; $("a.fancybox").fancybox(); &gt; } &gt; }); Adding the function ready to call to FancyBox into the $('#p1tooltip').tooltipster({}); did not work either. I tried a few different versions of it. And adding the line of code makes the browser ignore it 
The difference is because `Array#forEach` doesn't apply the callback to array elements with unassigned values, so it's doing an additional check, while Lo-Dash just loops based on the array's length.
It is therefore also performing n - numberOfNonNullObjects iterations than it needs to and any arbitrary code could be inside each of those iterations...a null check is significantly less costly. There is a reason the native implementation is the way it is. 
It also employs multiple compilers on the fly.. I didn't read the rest because the list is long and you were clearly devolving back to what the conversation is... Not about. Edit: that is in v8 specifically. I don't have a ton of experience in any of Mozillas code. Also if you are not sure what the outcome of the expression is you could consult the spec of the actual __language__ at hand. That should make it abundantly clear. Edit 2: ok I read it. Yes it because of the comma operator. The second (bananas) is converted directly to an initialization of undefined and the comma operator returns the result of the last expression in the comma separated list (undefined). Period. Here is the documentation should you doubt: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator TYL: &gt;&gt;The comma operator evaluates each of its operands (from left &gt;&gt;to right) and returns the value of the last operand. 
`Array#forEach` doesn't skip null values, it skips nonexistent elements, and it's implemented that way because that's what the spec says, probably because it makes the most sense, but for arrays without missing elements (which makes it most arrays, especially in performance-conscious code) it's just an additional step to do so it's slower than the 'naive' way `_.each` works.
It is not Angular, but a hand made with a lot of libraries together. Like requireJS, handlebars, picturefill, and jQuery. 
I'm trying to use requestAnimationFrame, but it breaks and there is no scrolling at all now... Here is my code: for(var i = 0; i &lt; Math.abs(scrollCount); i++) { (function(x){ setTimeout( function step(){ window.scrollBy(0, -10*(scrollCount ? scrollCount&lt;0 ? -1 : 1 : 0)) window.requestAnimationFrame(step); } window.requestAnimationFrame(step); , 600*x); })(i); }
what is the better alternative? As requestAnimationFrame doesn't seem to be working for me; in fact, it breaks and no scrolling happens. Here is my code: for(var i = 0; i &lt; Math.abs(scrollCount); i++) { (function(x){ setTimeout( function step(){ window.scrollBy(0, -10*(scrollCount ? scrollCount&lt;0 ? -1 : 1 : 0)) window.requestAnimationFrame(step); } window.requestAnimationFrame(step); , 600*x); })(i); }
your spacing is confusing me.. and why are you calling requestAnimationFrame after your closing bracket to step()? why is step named? this is very confusing code. if you are using jQuery, you can just $.scrollTo(target, duration). if you're not using jQuery, you can try [something simpler like this instead](http://stackoverflow.com/a/21474755).
Safari is Webkit, which is open source. [Submit the bug to the Webkit Open Source Project](http://www.webkit.org/quality/reporting.html). &gt; and the only reason why it's still open is because I was slow providing additional info. Out of curiosity, how did you come to this conclusion? I didn't see anything in the discussion that indicates the exact issue or that there is a fix in the works. Were you contacted privately? That would be weird.
The native implementation has access to the heap and already knows the sparsity of the array. Therefore, it doesn't check for undefined at iterations where the array indice is empty because it already knows it's undefined. How is that more naive and how could it possibly be less performant (disregarding all of the ways a compiled/native method could be optimized outside of some Javascript libraries)? Furthermore, if that is actually correct about how lodash does the loop, it completely forsakes the fact that in all of the modern Javascript engines, when the originally allocated space for the array has been stepped outside of by a single element (a single push) the array will be resized by 2x the original. So I'd that is the case, it'd iterating 2x more than necessary. This makes sense. It's impossible to do something else with non native code without first doing some sort of extra work to achieve the goal. That's why it does it that way. If there was no benefit to using the native methods, underscore wouldn't use them either. Do I think it's a massive performance difference? No. It is how it works though. 
Thank you! So I was wrong opening bug to Safari. I'll do it via webkit link. &gt; Out of curiosity... No, I wasn't contacted privately. [Here](https://code.google.com/p/chromium/issues/detail?id=356371#c12) they mentioned this was most likely due to short period when CoreAnimation was disabled and asked to verify in latest M35 build. 
Props to you for finding and submitting bug reports but did you expect these projects to work in the same rate? Two different open-source projects maintained by different people working for different companies. They might have different team-sizes, different roadmaps and different priorities. Some might have more time, other can simply have a different process for addressing bug reports. In an OSS project I am working on people always get pissed off, because we answer bug reports once a week in a batch. Because maintainers have no time for most bug reports and most of reports are labeled as "confirmed, not critical, will look after we ship feature X".
I'm still curious what you meant to do here, i don't believe your code will run as it is written, not because of requestAnimationFrame but because of your setTimeout. Also, you are calling setTimeout and then trying to call requestAnimationFrame within that? You don't need both, one or the other is fine. Here's what I attempted to rewrite from your code using setTimeout: for(var i = 0; i &lt; Math.abs(scrollCount); i++) { setTimeout(function() { window.scrollBy(0, -10*(scrollCount ? scrollCount&lt;0 ? -1 : 1 : 0)) }, 600*i); } } Note that I also removed the anonymous function call (function(x){ ... })(i); because I don't see a reason for it. Also, 600*i means each scrollBy call will be in 600ms intervals, which is quite slow.. for smooth animation couldn't you just use i instead of 600*i, so you call scrollBy each millisecond? or maybe a smaller interval like 10*i. There are a number of ways you could tweak this. Also, you might want to take a look at how the scrollTo plugin for jQuery is implemented, as even though it uses jQuery as a selector and namespacer, it doesn't require jQuery for what it's doing (its scroll animations can be converted to vanilla javascript). Often I'll do this in projects where I need a jQuery feature but I don't want to include jQuery: i'll read the source of that part of jQuery, and then either copy or rewrite just the subset of jQuery I need.
Thank you. Yes, I think I was wrong expecting the same rate.
Can the mods leave a sticky or sidebar post that consolidates js concepts? This post keeps coming up every month and should be a good resource for people new to javascript 
Welcome to 2007.
Any interest in a blog on the intricacies of == vs ===? ... :] EDIT: was only joking, btw
I will give it this, it is less worse then react and its jsx...
alright, I'd added a bit more description on how to use local gulp in the docs if gulp is not installed globaly. although I cannot reproduce the problem with `/bower_components/` folder. would you be willing to got into this a bit more?
Except it doesn't do any of the things you would actually use react for 
It's not competition at this point, more like a bacteria petri dish. Millions of colonies.
I recommend to only use ===, because it is simple: only values that have the same type are ever considered equal. In contrast, == tries to convert values so that it can compare them, which has strange effects. For example: &gt; ['123'] == 123 true &gt; '' == 0 true &gt; 2 == true false &gt; 2 == false false I’ve written more about the two operators here, but the above is all you normally need to know: http://speakingjs.com/es5/ch09.html#equality_operators
&gt; The native implementation has access to the heap and already knows the sparsity of the array. Therefore, it doesn't check for undefined at iterations where the array indice is empty because it already knows it's undefined. You can look at [how V8 implements `Array#forEach`](https://code.google.com/p/v8/source/browse/branches/bleeding_edge/src/array.js#1147), and it's just using an `if (i in array)` check, no special native magic involved. &gt; How is that more naive and how could it possibly be less performant I was clearly referring to Lo-Dash when I said that `_.each` works in a relatively naive way. &gt; when the originally allocated space for the array has been stepped outside of by a single element (a single push) the array will be resized by 2x the original. So I'd that is the case, it'd iterating 2x more than necessary. The `length` property isn't based on the memory allocation, but on the actual elements. &gt; If there was no benefit to using the native methods, underscore wouldn't use them either. There is a benefit in that using the ES5 Array extras is the cleaner approach. Lo-Dash is doing things differently because it's more geared towards optimization and performance. 
Fairly good slide deck, here's resource links given at the end: ## Learn React.js: ### Why? * [Be predictable not correct](http://www.confreaks.com/videos/3221-mwjs-be-predictable-not-correct) * [React: Rethinking Best Practices](http://youtu.be/DgVS-zXgMTk) * [Why React?](http://facebook.github.io/react/docs/why-react.html) ### How * [Getting Started](http://facebook.github.io/react/docs/getting-started.html) * [Introduction to React](http://youtu.be/XxVg_s8xAms) * [Tutorial](http://facebook.github.io/react/docs/tutorial.html) ## Learn ClojureScript ### Why? * [ClojureScript Rationale](https://github.com/clojure/clojurescript/wiki/Rationale) * [The Future of JavaScript MVC Frameworks ](http://swannodette.github.io/2013/12/17/the-future-of-javascript-mvcs/) * [Clojure Rationale](http://clojure.org/rationale) * [Why Clojure?](http://youtu.be/alMbUJneFn0) * [Beating the averages](http://www.paulgraham.com/avg.html) ### How * [ClojureScript 101](http://swannodette.github.io/2013/11/07/clojurescript-101/) * [Translations from JavaScript](http://himera.herokuapp.com/index.html) * [Light Table ClojureScript Tutorial](https://github.com/swannodette/lt-cljs-tutorial) * [Om Tutorial](https://github.com/swannodette/om/wiki/Basic-Tutorial)
They mentioned what *might* have been the cause (they had a few "bad" builds, and you might be using one) -- but you said "the only reason why it's still open is because I was slow providing additional info". That seems disingenuous to me because, according to the discussion you provided, they didn't directly address your issue. They just told you to update to a newer version (which is the correct answer). In other words, kudos for the Chromium folks looking into it, but it's easy to fix bugs that may already fixed...
It is only about 80% accurate to the city level. I want this to be really helpful so I am footing the price of DigitalElement's database
but wait theirs more, `0x10` would actually get you 16, you can read up on number literals [here in all their gory details](http://www.ecma-international.org/ecma-262/5.1/#sec-7.8.3)
Is it necessary to have almost every day a blog post about what's `this` ? We should have gone over that now, there are more interesting things in JS than `this` when you're not a noob (and the author isn't a noob).
I think you got whooshed. I like and recommend that article as well as the submitted one, though. Thanks!
Heh. Just didn't seem right that you were getting down voted for providing a helpful answer, even if the original question was a joke. Actually, I was almost hoping you were messing with Arffman.
(Unironic) congratulations to you if you fully understand `this`! For a long time I thought I understood it, but in fact I only understood it 99%. This blog post was written after I figured out the remaining 1% (big picture, how everything is connected). AFAIK, there is no other material on the web that takes the same approach to explaining `this`. There are many JavaScript topics out there that have been written about a lot (ad nauseam, depending on your definition of nausea). But I never tire reading about them, because every author attacks things from a different angle; I don’t think it’s possible to write a single “definitive” article on anything.
That would be funny, but too much effort for a joke. ;-)
I've been writing Javascript for over a decade and did not know this. TIL.
This whole thing comes across as embarrassing for the author I'm afraid. I'll start with the "JavaScript sucks" (what a professional title!) slide: &gt; No integers Of course you can have integers in JavaScript, what a crazy statement. Unless you're complaining that JavaScript isn't heavily typed? That's by design and has a lot of advantages. &gt; No module system There are module systems available. There's just not officially one that's common to browser implementations at the moment, though the node style modules have become the standard now and I expect it to be integrated officially at some point. &gt; Verbose syntax Hardly. Have a look at some Java, C# or C++ sometime. &gt; Confusing, inconsistent equality operators When are they confusing and inconsistent? &gt; Confusing, inconsistent automatic operator conversions When are they confusing and inconsistent? &gt; Lack of block scope That's not how JavaScript works by design, it has function scope. &gt; Non-uniform iterators I'm not sure what this means, what's wrong with for.. in? &gt; Global variables by default No, they're not global by default - they're within the current function scope. Don't define variables out of function scope. &gt; NaN I'm not sure what the problem here is. &gt; this Or here.. what on earth is wrong with *this*? &gt; No macros (yet...) Macros? It's an interpreted language! &gt; etc. ??? ---- To me this looks like it all comes from someone that doesn't know JavaScript very well at all. They think they do, but really don't, and they're just a Clojure fanboy without the knowledge to back that up. The example at the start is just awful, intrinsically linking the code to the presentation - which we then see done even more terrifyingly in the 'correct' example. &gt; "Clojure is just a better language" By what measure? &gt; Number of days spent designing the language Now this really is the height of fanboyism. No scale. No sources. No nothing. &gt; Value: To programmers, who will be able to build better programs, with less bugs, faster. How? How will a language other than JavaScript, that compiles to JavaScript, allow people to build *better* programs?! Faster, but with a compilation step? Where are the sources to back this up? Less bugs, but without a proper interactive debugging process as the underlying code runs in JavaScript?! Again, no sources. &gt; Collateral Benefits... UI testing has to be done as a black-box process. "No templates" is NOT an advantage, it's a disadvantage! Having web authors/HTML experts/usability experts/accessibility experts being able to modify templates without dealing with code is absolutely key on sensible sized project, and is incredibly useful for re-usability. Also, the whole "Building UIs is difficult" thing is just madness.. it's not difficult at all. Synchronizing data between multiple clients and the server is difficult. Building UIs is easy these days. React.js and Clojure might be interesting, and might have some useful use-cases, but this slideshow does not highlight them and in fact only serves to do the opposite.
Why not just name your functions? 
(99999999949999999999 === 99999999950000000000) === true
I love it when developers write articles that are complementary of their direct competitors. It paradoxically increases my trust in the authors' software.
[let me google that for you](http://lmgtfy.com/?q=angular+vs.+ember)
Not surprisingly I've done that but there's a ton of information and I'd appreciate a clear, concise opinion from people who have used both here on /r/javascript.
That's probably because its a repeating number
That's not always possible - often enough, you have user anonymous callbacks that stay in stack trace but don't give any meaningful information about what they are; also, you might want to have more descriptive comment on functions that is actually not an identifier. There is old but nice explanation why WebKit implemented displayName here (involves profiling applications): http://www.alertdebugging.com/2009/04/29/building-a-better-javascript-profiler-with-webkit/
If you coerce null into being a number, it becomes 0. &gt;&gt;&gt; +null 0 0 + 0 is 0. &gt;&gt;&gt; 0 + 0 0 0 is super duper equal to 0. &gt;&gt;&gt; 0 === 0 true
Naw. If you want this to work reliably you should consider setting up fresh VMs using something like vagrant and running functional tests on clean environments. 
Well right obviously length is constructed as such (you also mention the ArrayForEach code without evaluating everything that occurred up to that point to create the internal object. In this case it's just that the property at hand is made publicly available to the client code. Other native methods can and do make micro-optimizations based on sparsity. I don't have this code memorized but it would have stood to reason that it doesn't need to be considered in this case :D). Either way it's difficult to come up with a different way of saying "how can the native implementation of something that is implemented in the exact same way (which you acknowledge here based on the in) as a third party library possibly perform slower slower than said library"? The bigger picture question is, if you have some jsperf to quantify the statement, could the benefit really outweigh the fact that the native methods *can* be optimized, the code *is* already compiled internally (afaik) , etc, etc? Specifically I wonder about this based on the callback passed in and future changes made there. We can't really quantify what is faster in real life use cases with micro benchmarks (provided any cases even show this crossbrowser on a meaningful level outside of standard deviation at all). What are we really talking about here? 
RequireJS is nice.. but once you get used to browserify, it's hard to go back. :) 
Guess I was wrong then 
Why not just NFE? http://kangax.github.io/nfe
Doesn't work on my work lappy either. No change after upgrading bower either. I'm doing: yo powder (yes for all options) npm install bower install gulp Looks like you expect the user to have mongo installed already? 12:16:24 ~/pwdr&gt;npm install npm WARN package.json dan@0.0.0 No repository field. &gt; dan@0.0.0 postinstall /Users/thoughtworker/pwdr &gt; ./node_modules/.bin/gulp init [gulp] Using gulpfile ~/pwdr/gulpfile.js [gulp] Starting 'bower'... [gulp] Using bower dir: ./bower_components [gulp] Starting 'bootstrap'... 12:16:39 ~/pwdr&gt;bower install ----------------------------------------- Update available: 1.3.3 (current: 1.3.2) Run npm update -g bower to update ----------------------------------------- 12:16:44 ~/pwdr&gt;gulp [gulp] Using gulpfile /Users/thoughtworker/pwdr/gulpfile.js [gulp] Starting 'browserify'... [gulp] Starting 'inject'... [gulp] Starting 'minifycss'... [gulp] Starting 'watch'... [gulp] Finished 'watch' after 16 ms [gulp] Starting 'serve'... [gulp] Finished 'serve' after 1.41 ms [gulp] Live reload server listening on: 35729 [gulp] Finished 'minifycss' after 149 ms [gulp] Finished 'inject' after 158 ms [gulp] Starting 'cdn'... [gulp] [nodemon] v1.0.17 [gulp] [nodemon] to restart at any time, enter `rs` [gulp] [nodemon] watching: *.* [gulp] [nodemon] starting `node ./app.js` {"name":"dan","hostname":"work","pid":16314,"level":30,"msg":"Starting up context, serving on [localhost:8080]","time":"2014-05-05T19:16:55.824Z","v":0} {"name":"dan","hostname":"work","pid":16314,"level":30,"msg":"Hit CTRL-C to stop the server","time":"2014-05-05T19:16:55.825Z","v":0} [gulp] Finished 'cdn' after 32 ms [gulp] Finished 'browserify' after 359 ms [gulp] Starting 'build'... [gulp] Finished 'build' after 15 μs [gulp] Starting 'default'... [gulp] Finished 'default' after 10 μs {"name":"dan","hostname":"work","pid":16319,"level":30,"msg":"[file]: api.js:","time":"2014-05-05T19:16:56.358Z","v":0} {"name":"dan","hostname":"work","pid":16319,"level":30,"msg":"[file]: auth.js:","time":"2014-05-05T19:16:56.360Z","v":0} {"name":"dan","hostname":"work","pid":16319,"level":30,"msg":"[file]: auth.js:","time":"2014-05-05T19:16:56.424Z","v":0} {"name":"dan","hostname":"work","pid":16319,"level":30,"msg":"[file]: index.js:","time":"2014-05-05T19:16:56.425Z","v":0} {"name":"dan","hostname":"work","pid":16319,"level":30,"msg":"\n listening on port 8080\n","time":"2014-05-05T19:16:56.430Z","v":0} {"name":"dan","hostname":"work","pid":16319,"level":50,"msg":"[db] connection error: [Error: failed to connect to [localhost:27017]]","time":"2014-05-05T19:16:56.434Z","v":0} /Users/thoughtworker/pwdr/node_modules/connect-mongo/lib/connect-mongo.js:178 throw err; ^ Error: Error connecting to database: failed to connect to [localhost:27017] at null.&lt;anonymous&gt; (/Users/thoughtworker/pwdr/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/connection/server.js:553:74) at EventEmitter.emit (events.js:106:17) at null.&lt;anonymous&gt; (/Users/thoughtworker/pwdr/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/connection/connection_pool.js:140:15) at EventEmitter.emit (events.js:98:17) at Socket.&lt;anonymous&gt; (/Users/thoughtworker/pwdr/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/connection/connection.js:512:10) at Socket.EventEmitter.emit (events.js:95:17) at net.js:441:14 at process._tickCallback (node.js:415:13) [gulp] [nodemon] app crashed - waiting for file changes before starting... 
*sigh* you know you've been working with JS too long when you see `+ null === 0` and your first reaction is "duh?"
I used to use this trick in firebug a lot, especially in loops, animations, scroll events, basically things that flood the console with values. but unfortunately console.clear is unreasonably slow in Chrome Developer Tools it's un usable now. I wish there was a call like `count`. Which, instead of creating a new entry, just updates old one. I would use it to watch constantly changing values.
exactly my thoughts!
almond!!
There's no need to guess, you can [follow along in the standard](http://es5.github.io/#x11.6.1). In short, `ToPrimitive(null)` is `null`, so step 7 is false, and both operands are run through `ToNumber()`, which converts `null` to `+0`, and then numeric addition takes place. 
How does going from this markup... &lt;div class="status"&gt; &lt;div class="status--success"&gt;Done&lt;/div&gt; &lt;div class="status--timeout"&gt;Try again&lt;/div&gt; &lt;div class="status--error"&gt;Error&lt;/div&gt; &lt;/div&gt; to this: &lt;div class="status status--timeout"&gt; &lt;div class="status--success"&gt;Done&lt;/div&gt; &lt;div class="status--timeout"&gt;Try again&lt;/div&gt; &lt;div class="status--error"&gt;Error&lt;/div&gt; &lt;/div&gt; ...do what you're suggesting? The idea is fine, but I don't understand the implementation here. Maybe if you did... Markup: &lt;div class="status"&gt; &lt;div class="success"&gt;Done&lt;/div&gt; &lt;div class="timeout"&gt;Try again&lt;/div&gt; &lt;div class="error"&gt;Error&lt;/div&gt; &lt;/div&gt; CSS: .status &gt; div { display: none; } .status.status--success &gt; .success, .status.status--timeout &gt; .timeout, .status.status--error &gt; .error { display: block; } JS: $('.status').addClass(status);
But why? It really doesn't make sense that null converts to zero when the language supports NaN (and undefined actually does convert to NaN)
you are absolutely right, did a post update, thanks
My solution (http://jsfiddle.net/FireNeslo/twL8h/) although with a little overhead works somewhat like you describe. the tick method i probably not necessary as a promises are resolved on next tick by default. but it uses a get/result method.
The why is "because that's what Netscape 2.0 did in 1995." There are plenty of language warts that I'm sure lots of people would love to fix, but realistically speaking such things can't ever change. That said, there is a difference between `undefined` and `null`. `undefined` means "this variable or property has not been given a value", whereas `null` means "this variable or property has been given a value, but that value is an indicator that signals the absence of a value." It's subtle, but there is a difference. It wouldn't make sense to try to add something to `undefined`, which is why you'd want that to convert to `NaN` so that the addition is intentionally fouled. But maybe you want to add a series of values where some of them have the "not-value" value, and in that case you'd want those to be simply ignored in terms of the addition, and having `null` coerce to `+0` achieves that. I don't really know what was going through Brendan Eich's mind at the time, but whatever it was, now we are stuck with it.
Yeh fair point. I learnt this just last year. For the lazy: **Complement** often means to make a whole, or set, or to work together (coming from the word complete). e.g. 'This wine complements the meat very well.' 'complementary colors' 'the localbar housed the full complement of misfits and criminals' **Compliment** often means free, or to be in flattery / in favourable terms. e.g. 'Complimentary champagne' (meaning free) or 'he was very complimentary of my mad reddit karma'. I think that's about right.
You can just throw a position-fixed element into the DOM and change its innerHTML or something.
Unfortunately this post does little to enforce a hugely differentiating factor between AMD and Browserify when it comes to testing. I find the post title to be well-intentioned, but misleading. Writing testable JavaScript doesn't have anything to do with r.js generating production-ready code. What this post should have illustrated was the difference in loading between alternatives and RequireJS that make RequireJS especially suited for browser-based testing. Compared to Browserify (as called out in the comments), AMD specifically handles the following better: dependency injection and mocking, code isolation and atomicity, more deterministic code, and true-to-source code coverage. By using tools that concatenate *all* referenced JavaScript you introduce a layer of potential failure. If one script has erroneous JavaScript that isn't even tested, it could still fail your entire build. I think another post is warranted about the strengths and weaknesses between RequireJS and Browserify when it comes to testability.
I did not know octal was removed. How to write unix rights then eg for [writeFile](http://nodejs.org/api/fs.html#fs_fs_writefile_filename_data_options_callback)? Or should I use `parseInt('666', 8)`? 438 is not as obvious!
I was there! My employer paid for my way - fascinating talks, and they threw a great party!! lol But seriously, this is fascinating. I some conversations with Pete after the talk, I think there's lots of potential with React.
/r/angularjs
Then you're in for a treat, the counting you explain already exist! Call console.count with a label to increment the counter. See the API reference for the console object in chrome: https://developers.google.com/chrome-developer-tools/docs/console-api#consolecountlabel
I believe `0666` will still work as long as you're not in strict mode.
Was expecting a talk about some newfangled, exciting system for live-reloading handlebars templates, or Ember controllers or whatnot :(. Irregardless, a nice, thorough talk, even as a non-Ember dev (if only there was a good, separate library for consuming REST apis). 
My point is that it *does indeed* have to do with the comma operator because it is clearly using the comma operator. This is what confused the OP and why he was asking. He didn't want an explanation of internal grammar and what you said about it having nothing to do with the comma operator is incorrect. I mentioned running the code in REPL because it will return undefined because this line of code is returning the value of the last expression. In reality your analysis of the grammar here is incorrect. It is two uses of of a variable declaration combined with the comma operator. In the end anyway, you've gone so far off topic with this entire thing it's silly. This is not what the OP was asking and is literally...semantics. 
The Atom Shell framework lets you write cross-platform desktop applications using JavaScript, HTML and CSS. It is based on node.js and Chromium and is used in the Atom editor.
Yep, octal literals still work if you don't use strict mode.
[One can play with this. (11.9.3.5)](http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3) `'1E2' == 0144 // true`
I guess the issue here is maybe that I'm viewing this in the context of the question (again you are not, this was about what code does...in real life). In real life the variable declarations are hosited to the top as I am sure you are aware. Next we have variable initializations (assignments) created. I'm not going to go read the spec because its not what the discussion was even about. However, these are expressions no? Hell that could be wrong I dont know, but I doubt it. In the end I'm usually concerned with a) my own code b) the code that "implements" it (and clearly its very specifically and clearly defined :D) Also...sorry if somehow you got the idea I would think (y=2)===2....but id imagine your grammar would find y=2 is an expression. If not...ok then... not something I've ever needed to find out. In essence I only replied the first time because of the one thing I don't need a spec to know: you are very likely "that guy" at parties and meetings. The "actually" guy that detracts completely from what the other guy wanted to know: what happens.
negative exponents work too: 1e-2
&gt; I'm not going to go read the spec because its not what the discussion was even about. Every question about how the language behaves is a spec question. This is the document that defines precisely how every JS implementation behaves &gt; Also...sorry if somehow you got the idea I would think (y=2)===2 `(y = 2) === 2` is true, actually. &gt; but id imagine your grammar would find y=2 is an expression. It depends on context. Just as it is, it's an expression (specifically, *AssignmentExpression*). However, as part of a variable declaration, it is not an expression. In this case, per 12.2, it's an *Identifier* followed by an *Initializer*, neither of which are expressions. &gt; If not...ok then... not something I've ever needed to find out. Well, like I said, this is a minor quibble, but generally an understanding of how a runtime will parse your code is a very useful skill to have. Otherwise you're just leaning on intuition which results in silly mistakes. When you don't interpret code as per spec, you end up expecting things that are wrong which leads to confusion. In your case, you assumed `var x = 1, y` was the comma operator, which led to your expectation that it would return undefined in a REPL. This would lead you to assume incorrectly that `var x = 1, y = 2` would return 2 in the REPL. More generally, by incorrectly stating that `var x = 1, y` involves the comma operator, you mislead others. These people may be confused at how this line behaves and go looking for help. If they search for 'comma operator' they will get information that is completely irrelevant and won't help them understand the code they are looking at. &gt; In essence I only replied the first time because of the one thing I don't need a spec to know: you are very likely "that guy" at parties and meetings. The "actually" guy that detracts completely from what the other guy wanted to know: what happens. If you really care about what happens, then you should be very worried when I tell you that comma operator has nothing to do with what happens when you run `var x = 1, y`. The spec is the ultimate source of truth about what happens. And, it's also the easiest to understand once you get used to it. Implementations only add complexity to the spec, which doesn't care about tooling or performance or anything like that. If you want to know how code should behave, you should start from the spec first. It helps prevent misconceptions like you had.
thank you, remove the anonymous function and 600ms delay helped, but it is still now as smooth. scrollCount is a value I calculate telling where to scroll and how many more times I have to scroll to get there. Can you help me make this smoother with requestAnimationFrame? for(var i = 0; i &lt; Math.abs(scrollCount); i++) { setTimeout(window.scrollBy(0, -10*(scrollCount ? scrollCount&lt;0 ? -1 : 1 : 0)), i); }
Why are the array lengths changing? You'll probably have to write migration code that explicitly copies data from one object to another and that is aware of both the old and new lengths and how to deal with the changes. You can't just assign to the same thing twice -- that's just going to create a new GameSave object and then immediately GC it because it no longer has any references. It would be a lot better to either write code that uses a stable layout that doesn't change, or write code that when accessing the data can deal with missing/undefined values. 
Should have mentioned the templating scripting for FB-React; OM &amp; Reagent, but aside from that fair article.
Or (once ES6 is available) `0o666` (where the second character is the letter o, not the number 0).
Yes I've got that but in practice are they or are they not hoisted to variable declarations first and then the assignment occurs next *internally* which is my point. These word descriptions can be laid out in a sepcific manner but this is not code. Its a map to perform something so as to fit the spec consider that opera at least used to be single threaded while also supportng web workers. In the end vendors are only responsible for the outcome. And on that I can't say for certain. For many many years I have always, without ever hearing it questioned, heard, read, tasted and smelled that this is the "order of operations" that occurs internally. Maybe that's years of oral tradition gone wrong but I don't think what you are doing here can show this. Furthermore, something in that vein would have been a far more useful explanation of what the code is actually doing (but others did take that route).
Honestly I've never really used requestAnimationFrame, so I can't help you there at the moment. I'd like to learn it though, so I may find some time tomorrow to take a look.
Thanks.
okay, thank you. I'd greatly appreciate it.
&gt; Yes I've got that but in practice are they or are they not hoisted to variable declarations first and then the assignment occurs next internally which is my point. You are correct that you can describe the behavior conceptually as you describe. What I was attempting to demonstrate was merely that comma operators are nowhere to be found in this example. Even if you apply the desugaring you describe (desugaring is what you're doing when you're describing the behavior of one thing in terms of other, more conceptually simple things): var x = 1, y = 2; desugars to var x; var y; x = 1; y = 2; It's still clear one doesn't need the comma operator to know what's going on here. Interesting to note that this isn't a completely accurate desugaring, as if you ran this in your repl or eval'd it, you'd get a different completion value. But this is rarely important in practice, as you've mentioned :) &gt; Its a map to perform something so as to fit the spec consider that opera at least used to be single threaded while also supportng web workers. Web workers are actually interesting because they enable parallelism without breaking JS's inherent single-threaded guarantees. This is fundamentally why you can only communicate with a worker asynchronously - because the worker can't just stop what it's doing to receive information from the parent context. Instead, the worker has to empty its execution stack, which allows the worker host to then fire an event with data from the parent thread. I believe a "multi-threaded browser" means more that each tab has its own thread. JS engines themselves can be multi-threaded, but only in ways that is not at all observable from user code. Why? Spec says so :) However, they can still offload GC, JIT, or other asynchronous activities to background threads. &gt; In the end vendors are only responsible for the outcome. And they try very hard to follow the spec. JS, especially, is implemented broadly based on this document, and there is an [official, public test suite](http://test262.ecmascript.org) to ensure implementations don't deviate. I believe all recent browsers get 100% or close to it. &gt; And on that I can't say for certain. For many many years I have always, without ever hearing it questioned, heard, read, tasted and smelled that this is the "order of operations" that occurs internally. Other than the caveat above, I'm definitely not trying to refute this. I'm focusing on the (common, it seems) misconception that the comma in `var x = 1, y;` is the comma operator.
So is the issue that you've got a naming convention for your localStorage that changes and you don't know what the keys might be? Well you can go through all localStorage like this, for (var key in localStorage){ console.log(key) } Then you could look for keys that sound appropriate.
Wanted to watch it, but the awkward pauses had me closing that tab in about 90 seconds.
I am trying to find out more about Flux but can't find it. Does anyone have a link?
No, the issue is an array contained within a key. The stored array may be shorter than the current version of software requires. I was hoping to find a way that the length of the current version array can be retained and populated with the data of the old, shorter array.
While this idea is not too bad, it is dangerous to think that you can replicate the exact behavior of said browsers this way. For primary testing during the development, this could suffice, but even before sending your stuff to QA, you should have a look at the browsers that are edge cases.
Yep.. +'-.010e-02' === -0.0001 ~0x01e-01-10 === -42 And sometimes, surprisingly, it passes both client- and server-side validation.
I just came up with this for nice fallback..ability: if (!console.count) { console.count = function() { console.log.apply(this, arguments); }; } There, now if you use it somewhere where you DON'T have count it will just do a normal log. If you want to try to replicate the original code by all means do so. Keep in mind, it seems to count separately per line it's invoked on so I'm not sure how you're going to do that.
Can't you just watch the variable in the WebKit inspector?
Right. Forgot about those. ES6 also adds binary literals: **0b**1010.
Well, that's just JavaScript's "keep on trucking" mentality. In other languages you'd get a type error or something like that. In other languages you also get an error if you pass the wrong number of arguments. You also get an exception when you try to access an element outside some array's bounds. If you don't like this kind of behavior, you can try Dart.
No no no, you need to disagree! How dare you change your mind when confronted with good reasons to do so!
I use [localForage](https://github.com/mozilla/localForage). It uses `localStorage` only as a backup, since it is slower. Usage example: `localforage.setItem('my-storage-name', json-data);` `json-data = localforage.getItem('my-storage-name');`
If it is not too many changes, simple save the existing (old) JSON to a local file or inside a `&lt;textarea id="json-src" cols="33" rows="5"&gt;&lt;/textarea&gt;`, edit the JSON by hand, then load the new version.
Or download &amp; use VLC, which gives finer control.
I don't want to seem smarmy, but please learn JS first, once you get few weeks/months in first, then look to expand. Maybe learn HandlebarsJS &amp; jQuery after that. Getting into a confusing lib like AngularJS will just frustrate you &amp; all the people you're asking for help. So CodeAcademy &amp; google "best javascript books" should be your first stops.
Example code is hurts my eyes to read. I find the Gulp's GitHub repo &amp; most plugins' README easier to read &amp; use.
Safari is *based on* Webkit, as are other browsers. "garbage collector" (likely JS) may be a Safari bug; they can forward the bug, or tell the OP to repost there.
IMHO Safari is becoming the new IE; slow to improve &amp; fix bugs compared to the other browsers.
Can you link to the page please? Lots of tricks; what djvirgen said, using a CDN to serve a few files, code-reduction/minification...
What is an IF Toolkit? And what "paradigms" are you talking about?
I've been using Gulp for the first time recently and it's really awesome. I wrote a plugin that merges contents and documentation for MediaWiki templates and uploads them. It was all pretty easy. I really like Gulp's way of setting up and piping tasks. I found Grunt files to me moch more complicated.
In that case, I hope they'll implement it soon enough.
The code blocks on Medium don't look great, indeed. Not much I can about that. Regarding usefulness, the article is just another approach to explain relevant topics, which hopefully resonates with some people and helps understand or solve some issues they might face.
I disagree that I need to disagree.
What did you use to record/create the gif?
It's a tool called LICEcap http://www.cockos.com/licecap/
Due to the great response, I decided to continue forward and make Part 2! I will post another thread with part 2. [View it Here](http://christopherjennison.com/openlayers-3-beginners-part-2/)
I feel that the part on not always needing a plugin is a point that not a lot of people understand about Gulp. There's packages that will fit into the stream architecture by themselves without needing to wrap it in Gulp's plugin structure.
http://www.adrift.co/ http://www.tads.org/ http://inform7.com/ http://ifwiki.org/
FYI, if you're in a code block on Medium and you hit Shift-Enter you'll do a single line break instead of creating new pre blocks. https://medium.com/p/29b3ad2ba0ad
Thanks! I've updated the post, much better now :-)
Can you explain what the 'trick' is? My coffee hasn't hit the brain yet and I'm not sure what I'm looking at.
Nice idea. 
That's an interesting tidbit, but you can achieve the same affect without having to worry about any polyfills by passing `function(e){obj.handleEvent(e)}` in place of `this` as the second argument to `addEventListener`. True, it's not as clean, and also true, it requires being able to close over the name of the object (i.e. `obj`.)
Close. In other browsers Web workers are handled off the main renderer thread. In opera (or at least it once was i can't say now) Web workers and everything else were still handled on the renderer thread. That I know of the other vendors may also put all Web workers on separate threads of their own but probably not. As far as tabs that's separate processes in modern browsers. And yes colloquially just about everyone I've spoken to online or in real life considers that the comma operator. Up to this point whether it is or isn't, is pretty transparent to me and I've never needed to know otherwise. I imagine in what you do it does matter. Edit: and extremely unfortunately no, GC is not done in a separate thread which makes it a daily performance concern. See? two different domains.
Add kreate() to the created element so you can continue building a complex graph of elements.
Hmmm! Interesting idea. I've pondered about nesting elements in my head.. like a UL/LI setup. Thanks!
Thanks much :)
Can it add content to elements it creates: &lt;li&gt;hello&lt;/li&gt;&lt;li&gt;world&lt;/li&gt;? Something like $.kreate('li', ["hello","world"]) could be nice Interesting idea anyway!
Nice concept, man ... and some neat source code! Starred &amp; I'll definitely consider implementing a feature or two when those issues start streaming in ;)
The only way to add unique content for each element is to do something like this: &gt; var model = ['once', 'upon', 'a', 'time']; &gt; var $li = $.kreate('li', 4); &gt; $li.each(function(index) { &gt; $(this).html(model[index]); &gt;}); Yesterday, I tested a few ways to quick inject different content, but no solid solution yet. Will experiment later today! Thanks for the feedback :)
The most interesting part of the comments is the reference to the "JavaScript Object Notation (JSON) Pointer" https://tools.ietf.org/html/rfc6901
Haha thanks! Even if it was on par with jQuery's element creation process, the fact that you can do more by writing less is good enough me thinks :)
I've never heard of emmet before. Will definitely take a looksie :)
I created a template for building nodejs apps very quickly. Basically, I extracted the basic building blocks common to all my projects (user management, access control, cron, backup, etc) and packaged them into a tight little module so I can reuse the functionality very easily. I would love to get some ideas on other basic functionality that would be useful to include in this package.
There's a tonne of module for it on npm too.
While writing Kreate, I have though about tweaking jQuery's method! Maybe I should for a pull request :). The idea of Kreate actually came from another JS library I was building called [Zest](https://github.com/ItsJonQ/Zest). Zest.js is definitely an experimental thing. But I wanted to see if I could build a DOM library that worked very similarly to jQuery, but perform significantly faster. You can see the performance test here :) http://jsperf.com/zest-vs-jquery-performance/11 It has a lot of the methods jQuery has for DOM handling (addClass, parent, find, etc...), as well as some new ones like "inViewport", "listen", and "combine". It's definitely still a work in progress, haha.
Since this is basically the same as zen coding/emmet, only for creating elements in real time, can't you look at their parser, since people are already familiar with emmet's syntax? For example, to create &lt;li&gt;hello&lt;/li&gt;&lt;li&gt;world&lt;/li&gt;, you would do `li{hello}+li{world}`.
single page app? or server side rendering?
Thanks! You can totally use document.createElement(). I'd say, it's better if you do since it's the fastest way to make something. Where Kreate comes in is when you need to create an element as a jQuery object and/or if you want to make a lot of elements quickly (typing wise) :)
I'm definitely gonna look at their parser later on today when I have time. I never knew about Emmet before (shameful, I know). So it's got me really excited, haha.
I was pleasantly surprised, it makes adding and (especially) removing events a lot easier.
Unless you define a complex language you can't go very far with just a string (and how would you use the number argument then?). Being able to chain calls would be more powerful while keeping it obvious. 
**[No.](http://www.yuiblog.com/blog/2006/04/11/with-statement-considered-harmful/)** ^^^^^^^^^^^ting ^^^^^^^^^^^tang ^^^^^^^^^^^walla ^^^^^^^^^^^walla ^^^^^^^^^^^bing ^^^^^^^^^^^bang
&gt;the fact that you can do more by writing less is good enough me thinks Not always. Not when it makes it more difficult for a programmer new to a project to understand. Personally I wouldn't ever use your hack. It makes reading jquery with embedded HTML far more difficult to parse in my head. It doesn't really solve any problem that I need solved. It's just more programming "sugar" that gets in the way of shipping/debugging code. No thanks. 
It is not a single page app although you could build one around it, I guess. My intent was to be quite un-opinionated since this was meant to be a scaffold for all my future projects.
No worries dude. Thanks for the feedback :)
Thanks for the info. I haven't used it in so long that I guess I lost track of the project.
Great work, keep it up!
Perfect, just what I was looking for. Ill be looking forward to checking it out once its released.
Let me just say I truly hope you guys crush this and that your abstractions are on point. I myself have spent MANY hours testing/developing different form abstractions trying to solve the problem of how much forms deeply and truly suck. I am going to test your library in a small project I am actively developing and I will do my best to provide you feedback. Please keep working on this, promoting it, and writing docs to explain WHY this is "functional" and helpful. Thanks!
Welp. Looks like this statement is nonsense. Thanks everybody!
Can you help me understand the scoping here? What is passing ev to popout?
Yeah but in if you're going to do this "li{hello}+li{world}" in javascript, why not just do "&lt;li&gt;hello&lt;/li&gt;&lt;li&gt;world&lt;/li&gt;". You don't win anyting.
Curious, was DOM element creation an actual bottleneck in some of your projects? In my experience, the creation itself is never the slow part - it's all about avoiding reflows and repaints.
I agree - reflow is the main killer. One of the main projects I worked on was very resource intensive (ads...). To the point where your browser would almost crash (in certain cases, it did!). I had to squeeze out as much performance on my code's end as possible before taking on the heavy load of the ads. All of the site's DOM handling stuff was written in jQuery, which included element creation. But.. since the ad load was so killer, I basically had to ditch jQuery, and only use it when absolutely necessary (mainly for ajax stuff and some cross-browser support). I guess that's when I became semi-obsessed with performance.. So something like Kreate would have been handy at the time.. At least, up until the point when you realize that there was not a thing you can do to save the site from the tremendous load the ads bring on.. (sad) Edit: Updated the last part my comment.
Well, Ok then. I'll stop speaking. :/ ^^mine ^^doesn't ^^tell ^^a ^^story ^^though
That User.cast method looks awesome. I'm gonna do some tests and then see what happens. Thank you for the reply.
I know. But imagine doing this for larger structures like 3 rows of unsorted lists within a div, each li should have a class and the div should have an id. `div#wrapper&gt;(ul&gt;li{$}.anitem*3)*3` &lt;div id="wrapper"&gt; &lt;ul&gt; &lt;li class="anitem"&gt;&lt;/li&gt; &lt;li class="anitem"&gt;&lt;/li&gt; &lt;li class="anitem"&gt;&lt;/li&gt; &lt;/ul&gt; &lt;ul&gt; &lt;li class="anitem"&gt;&lt;/li&gt; &lt;li class="anitem"&gt;&lt;/li&gt; &lt;li class="anitem"&gt;&lt;/li&gt; &lt;/ul&gt; &lt;ul&gt; &lt;li class="anitem"&gt;&lt;/li&gt; &lt;li class="anitem"&gt;&lt;/li&gt; &lt;li class="anitem"&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;
I'm likely going to just apply the save data, then run a check over the modified arrays to extend them to default values.
It looks like that's only a very recent addition. I'd like to offer as much backwards compatibility for browser support as possible. I've decided the easiest way will probably be to extent the affected arrays manually.
Kreate.js and Create.js and CreateJS Oy Vey! 
Cool. 
Ha thanks. 
Good list. Might want to talk a bit about "slow mode" -- I've seen objects fall back to hashtable simply by having too many (30+) properties on them. In today's world of TweenLite, "pseudo-inheritance" utils, etc. 30+ properties can accumulate really easily.
Looks very interesting, will have a mess around with it. Only issue I got, and it's not with your script, is this gif: http://itsjonq.github.io/kreate/images/kreate-example.gif is soooo fast lol i cant follow it!
Disclaimer: I didn't write this.
In chrome, in your sample12, I receive: &gt; Uncaught TypeError: object is not a function Control.js:100 Which leads me to this: http://stackoverflow.com/questions/15471879/three-js-uncaught-typeerror-undefined-is-not-a-function 
I've not looked at the source, but I'm curious, how did you manage to improve the performance compared to jQuery? Also it may be worth cross posting this to /r/jquery 
This looks cool. Any chance you could put it on NPM?
That was exactly what I was saying. I mentioned the comma operator only for the second question (the coolio function) as you can see. I described that these are not the same cases. The first is the var statement which uses the comma differently, to separate variables to be defined.
Odd what version of Chrome? line 100 is scrollTo() and used for full screening the Canvas Element. I'll look into this, thanks for letting me know!
I'm not /u/cbateman but here's what is happening: ul.addEventListener("mouseover", popout) is binding the 'mouseover' event to the ul element. when this event is triggered, the event itself is passed to the callback function 'popout'. The event is, well, the event...the details of the mouseover event that you were listening for. 
FYI: on Mac OS X, you don't use `CTRL+Click` for multiple select. That is used to open the popup menu (right-click menu). Rather, you use `COMMAND+Click` (often called `META+Click`).
Let's say we didn't specify ev as a parameter to the callback function. Would it still be an accessible argument of the function? OR does ev just allow us to reference it? Would it have to be the variable name ev? Or could it be different?
you can name it whatever you want. var popout = function(clickory_dickory_dock_event_fluffy_cows) { if (clickory_dickory_dock_event_fluffy_cows.target.nodeName === 'LI') { clickory_dickory_dock_event_fluffy_cows.target.style.marginLeft = '10px'; } } would even work. addEventListener listens to an event, and passes that event when that event is fired to your callback. "ev" is just the variable name used to reference the event passed into the callback within the function.
Is it always the first parameter passed to the function? Sorry if too many questions. &gt;.&lt;
it's the only parameter passed to the function =)
Fortunately cretin.js is not taken. I now have a side project. 
It's incredible the amount of work you have there! Congratulations and keep up the awesome work! I'm also working on a tile-based engine myself: [Fibula](http://github.com/drgomesp/fibula), but focused only on tile maps with WebGL support. Maybe have a look!
I haven't looked at the code yet, but: * slow clap * This is awesome.
Also creatine.js is still free. I here it's like cretin.js but on steroids. 
I have this bookmark bluebird is crazy awesome dark Magick 
+1. Removing the jQuery dependency and always having it return the array of elements would be handy. Basically some sugar around document.createElement().
Glad to hear it. Thanks for checking it out.
Someone on the internet is offended!
Funny, I might tackle a similar project, would be curious to see how editors create magazines in the cms part Any blogposts about the creation process of this app?
What would be really cool is if you could combine this with either mustache templating or some sort of way to inject dynamic data (from an AJAX call, perhaps).
There are other ways to solve the problem that he neglected to point out. 1. Allow for sub-object gets. If the object in his example was at [/user/123](http://www.reddit.com/r/javascript/comments/24vcn3/fat_json/#), then you would allow, for example, the public keys for that user to be at [/user/123/publickeys](http://www.reddit.com/r/javascript/comments/24vcn3/fat_json/#). 2. Allow for response object shaping in a custom request header. This could be XPath-ish, JQuery-ish, or some other similar format to specify the parts of the object you want and no more. 
* [request - ajax](https://github.com/mikeal/request) * [jsonp](https://github.com/LearnBoost/jsonp) * [ripple js - reactive views (the ecosystem around it and Component are awesome)](https://github.com/ripplejs/ripple) 
[Intro.js](https://github.com/usablica/intro.js) [Mold](https://github.com/marijnh/mold)
[Grapnel.js](https://github.com/EngineeringMode/Grapnel.js) - (Needs HTML5 PushState, but is pretty awesome in every other way)
I'm on a Mac, Version 34.0.1847.131 Google Chrome is up to date.
* [bytewise](https://www.npmjs.org/package/bytewise) for creating lexicographic strings, really handy for leveldb. Relatedly, [typewise](https://www.npmjs.org/package/typewise) performs the same algorithm on arrays, which is handy for unit tests where you need to perform deep comparisons on unsorted data * [cookie](https://www.npmjs.org/package/cookie) parse and serialize cookie strings you can feed into document.cookie or send in a set-cookie header * [ndarray](https://www.npmjs.org/package/ndarray) super tiny n-dimensional strided array matrix library with a huge ecosystem But most of my favorite tiny libraries deal with streams: * [through](https://www.npmjs.org/package/through)/[through2](https://www.npmjs.org/package/through2) * [duplexer](https://www.npmjs.org/package/duplexer)/[duplexer2](https://www.npmjs.org/package/duplexer2) * [stream-combiner](https://www.npmjs.org/package/stream-combiner) very handy when you need to apply pre or post transformations like split/parse/stringify on a streaming pipeline * [JSONStream](https://www.npmjs.org/package/JSONStream) parse seriously gigantic json (gigabyte+) files in-place, streamingly * [json-select](https://www.npmjs.org/package/json-select) like JSONStream but for transformations * [split](https://www.npmjs.org/package/split) a stream into newline-delimited chunks
Hah thanks :)
[hammer.js](http://eightmedia.github.io/hammer.js/) for touch and swiping (3kb zipped)
That "use 128 or fewer cases in a switch statement" explains a huge performance regression in an emulator I wrote. The emulator uses [an 8080 CPU core](http://bluishcoder.co.nz/js8080/) which dispatches instruction emulation via a 256-way switch. Performance is great on firefox: about 35x real-time, but on chrome, it is about 5x real-time. IE11 is about 18x realtime on the same code. I spent an hour rewriting it so each instruction is its own function, then used a 256 entry look up table to perform the function dispatch. After that, Chrome was 30x real-time, but firefox had dropped to 9x real-time or something like that. So I reverted my change. Perhaps the right thing to do is have nested switches: say an 8-way switch dispatching on the top 3 bits of the opcode, and then 8 groups of 32-way switches for each individual case. Performance would drop to probably under 30x, but would be good for both Firefox and Chrome. The emulator is for the Compucolor II: http://www.compucolor.org
Another engineer from this project. _For the record_ I did point this out before release, but alas, it's intentional. The executive editor is granted certain creative freedoms. It still haunts me at night...
I'm gonna make a nativeJS version. Should be super simple since jQuery only really kicks in at the end to make it a jQuery object. The heart of the plugin is (basically) pure vanilla :) Thanks for the feedback! Edit: Typo
Creatine.js - that's hilarious! XD
For sure! I've never used mustache before, but I am familiar with the underscore/backbone templating system. Creating something that'll allow kreate to easily integrate with some sort of dynamic model setup is definitely something I want to do! It's on the to-do list :)
Heya /r/javascript, A huge thanks to everyone who's commented so far. I know I'm not the strongest JS developer around. My background is actually in design - so Photoshop / Illustrator / CSS stuff. But I love Javascript. I've been trying to learn as much as I can since I got into it (properly) about a year ago. Your feedback so far, whether it be positive or negative, has been extremely helpful for me and I am very grateful. I originally wrote Kreate to handle element creation for another library that I'm working on. But I also see it as a learning exercise. It's the first time I've written documentation to such a degree. It's one of the first things I've published on Bower (and now NPM as well). And it's the first JS thing I've shared on Reddit. It's only been a day, but I've learned a ton. So thanks again everyone! For reals. In terms of Kreate's future.. There's lots of exciting things I want to add. Some of you guys mentioned ZenCoding/Emmet. I'm already looking into it! Another reason why I wanted to make Kreate was to help promote/encourage better element injection if lots of elements were involved (to prevent reflow). I'm gonna be working on this as well. We'll see where this goes :) 
Haha, I shall make a new one when I can :)
This is very cool. Nice!
Angular
Angular is lightweight?
Most of these are aimed toward CPU optimizations, which tend to sacrifice memory. That may be okay in some cases, but it can cause major problems on handhelds. Also consider the readability and maintainability of your code. Some of these are good examples of the "premature optimization is the root of all evil" mantra. Some things to keep in mind.
The animation library to end all animation libraries. I highly recommend checking it out! http://www.greensock.com/gsap-js/ http://www.greensock.com/js/speed.html
Heya, I've looked into jQuery's code quite extensively. I can't say this is for certain way, but this is my best guess.. jQuery's primary focus is grabbing stuff from the DOM (when you use $('your-thing-here'). It executes jQuery.fn.init, which parses your string to see what kind of selectors you're looking for. It CAN create elements (e.g. $('&lt;div class="me"&gt;&lt;/div&gt;') ), but that's very much a secondary function. Kreate is much faster because creating elements is it's primary function. It makes the elements, and passes it along to jQuery as an array. At that point, jQuery is like: "Oh! An array of elements.. I know what to do with this." And bam - good ol' jQuery object created without too much parsing on jQuery's end. Hope this helps!
Where has this been all my life?
At the moment I'm still learning, so I haven't yet built anything too complex (or with other people for that matter). Figured I'd rather run into those problems now and learn to deal with them, plus have an appreciation for all the things frameworks like Angular &amp; Ember do for me later. 
Thanks for reminding... anyways here is a [future compatible version](http://stackoverflow.com/a/10477228) for setting \_\_proto\_\_. The \_\_proto\_\_ is and will be in JavaScript; it has to be due to backwards compatibility. I guess something like: User.fromTemplate = function(template){ var obj = new this(); for(var name in template){ if(!template.hasOwnProperty(name)){ continue; } obj[name] = template[name]; } return obj; } would be better.
``` console.log(word.substr(1) + word[0] + "ay"); ``` Also you don't have to have a case clause for every vowel, you end up repeating the same line over and over. if (["a", "e", "i", "o", "y"].indexOf(word[0].toLowerCase()) &gt; -1) { console.log(word + "way"); } else { console.log(word.substr(1) + word[0] + "ay"); } 
Thanks, fixed.
Looks awesome, great job! I have 2 things to mention as feedback (in win + chrome 34.0): - If you double click on the left arrow it selects the whole line with text selection - If you click on the left arrow (or maybe doubleclick) right when the header text loads (or close to finishing the animation) for the article. It will stop working until you scroll with other methods. 
Great to see nice meaty content like this here
I could, but using something like `console.watch(myVar)` would be much faster and easier.
that's what I used to do while debugging IE6 :) I need some 2014 things :)
Normally when using JSBin, the console logs just pile up as you're editing, and the output refreshes. The start of the script in the image starts with a console.clear() call that keeps it tidier.
Compared to... Firefox, yes.
In 2014, I'm generally using frameworks with data binding, so I can just throw the variable into my template to keep an eye on it. But I don't see any reason to abandon your old tricks if they still work and haven't been replaced by something clearly superior.
Why not just do this with all css? http://jsbin.com/paxuv/2/edit
It looks janky if you pick up your finger before swiping all the way (at least on my Pixel). It's like the card that's falling away tries to come back at the same time a new card is replacing it. Otherwise, very nice.
The talk actually was much more philosophical and it was only towards the end that he had much to say about javascript specifically. It was a pleasant enough talk, but recapitulating the entire history of the "GOTO considered harmful" paper seemed unnecessary padding.
The transition doesn't look so well on mobile (android)..
'1E2' === 0144 though, not true 
Works well for me on Android 2.3 and 4.1. Can you be more specific? Thanks.
You can replace "console.log" with "process.stdout.write". console.log automatically prints line breaks at the end of the output (as well as a ton of other things - if you simply want to write output, 'process.stdout.write' is your friend). You might need to process.stdout.write("\n"); at the end if you want a line break. http://stackoverflow.com/questions/4976466/difference-between-process-stdout-write-and-console-log-in-node-js
Author here. Your first point makes no sense to me - there should be no sacrifice at all wrt memory, if anything you will save more memory as functions compiled by the optimizing compiler for example don't need to allocate doubles on the heap. Can you elaborate?
A small reason for not using that approach is transforms aren't support in [anything less than IE8](http://caniuse.com/#search=transform)
You're absolutely right. Starting out with a dependence on large frameworks that do everything for you actually reduces your overall understanding of things. Ripple is pretty magical too though, so watch out :) 
I like the following quite a bit: - [isInViewport](https://github.com/zeusdeux/isInViewport) - [co](https://github.com/visionmedia/co) - [pimp](https://github.com/zeusdeux/pimp) 
True. But this script makes that an option as well. So you have to choose if you want to use transforms, or position, or margins. Then you might as well make that choice in css. There are many ways to get something centered, or positioned specifically vertically. I dont see this needs javascript.
Every time you call `console.log`, the thing you log will go onto its own line. You call it once for each letter in `word`. Let's say you had a function that reversed a word: function reverse(word) { var i = word.length - 1; while (i &gt;= 0) { console.log(word.charAt(i)); i--; } } Every letter will get output on a different line. However, if you introduce a temporary variable, you can do: function reverse(word) { var reversedWord = ''; var i = word.length - 1; while (i &gt;= 0) { reversedWord += word.charAt(i); i--; } console.log(reversedWord); } and the entire word will be output at once. /u/PsychoTap has pretty much hit it on the head that you can bypass the need for a loop entirely by using the `substr` function. There are [lots of in-built functions for helping you manipulate strings](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/prototype#Methods). I'll briefly expand on his solution by saying that older versions of IE don't support the syntax `word[i]` for extracting single letters from words; `word.charAt(i)` is better supported across all the browsers. Likewise, `indexOf` doesn't work on Array in older IE. Other ways for testing if a word begins with a vowel, that are supported in older browsers, are: 'aeiou'.indexOf(word.charAt(0).toLowerCase) &gt;= 0 /^[aeiou]/i.test(word) Here's a bonus tip: the reason for using `break` inside a switch statement is that without it, the program will execute all the code in future `case`s. You can use this to your advantage if there are many cases that require that you do the same thing. case 'a': case 'e': case 'i': case 'o': case 'u': console.log(word + way); break; default: ...
Just to be clear: do we mean "lightweight" in the sense of "not angular, ember or jquery" or the sense of "made in oakland"?
Tested on 4.4.2 HTC One and Nexus 5 4.4.2 Chrome browser, both are performing quite badly.
Each approach has its compromises. Many css solutions either require some sort of extra markup or it requires you to know the height of the element. You can use transform, but as mentioned there is limited support. Javascript may look like overkill, but someone somewhere out there may need it, and as long as they know the caveats of using a solution like this, it should be fine.
[JSON](http://en.wikipedia.org/wiki/Json) is not [JavaScript](http://en.wikipedia.org/wiki/JavaScript) so there is no way a JSON validator would help you there. You should really learn JavaScript to just a basic level before trying to make something big with it otherwise you're gonna have a bad time, and asking for help in this situation just makes you look like you don't want to put in the work and expect others to do it for you. And it really doesn't help that you don't post the error since it makes it much much harder to help you.
The reason it is added is you can never 100% know what the height of your elements will be (such as user uploaded images). And the added support for transform is just a luxury item. Most people use has.js or Modernizr, thus are able to determine if they can use it.
I did link that too in my comment above, and as I mentioned, it doesn't work in IE8 and below. Depends on your application and target market I guess.
That's just not true. I work on corporate websites, big corporate websites, and there is no such thing as support for ie6 or 7, and almost no support for ie9 or 10 either. So not all sorts of corporate websites require that kind of support.
Fair enough, but it shouldn't just be dismissed. I work in the financial industry for the large banks and we still have to support IE6 :/ IE5.5 if it is an internal application.
[Moment.js](http://momentjs.com) for date/time formatting and calculation.
 Parse error on line 1: functionOn_Command(P ^ Expecting '{', '[' JSON starts with either an array or object, { or [ -- what you have there is a JavaScript snippet that starts with a function. Put in in a web page with a script tag and the browser will complain if you have any syntax errors. I took a look at a diff between the one that was posted and the one you edited and nothing stood out as wrong in terms of syntax. However, one thing to note is that your "isAdmin" function is checking for a group name of "Group 4" which isn't ever added.
Well, you could just use an if to break it into two 128-case switches. That should work, I guess. **Edit:** Star this: https://code.google.com/p/v8/issues/detail?id=2275
there are two straightforward solutions to this. The first is a regular expression. Something like var web=thisSite.replace(/http[s]{0,1}:\/\/[^/]+\/(.*$)/,'$1'); the second one would be a string split function var web=thisSite.split('/')[3]; These will work with variable information as long as the underlying structure doesn't change.
I've tried to learn languages like Javascript, don't get me wrong. I just find them way to complicated, I can never understand them. Thanks for letting me know the reason though. 
I recently built a bike-route app around gmapsv3. I didn't really use any framework, per se, but I did utilize Typescript and a gmaps type definition file to help me work around the API without needing to check the docs every 10 seconds.
You can use "Plain old Javascript" in the DOM: var pathname = document.location.pathname
The problem with that would be that the pathname is actually http://site1/my-page/Pages/default.aspx The SPServices function gets me just the site name (http://site1/my-page)
Why do you think you need a framework to use Google maps? To use Google maps means using their API, not a framework. No framework is necessary or needed. My company has countless pages that use Google maps and we don't use any frameworks at all.
If you go with angular, make sure to understand the $scope and loop. Also, directives.
Can it be found from NPM or Bower? Couldn't find it which seems a bit odd.
That is a bit of a loaded question. There are fanboys on both sides of this one. Both frameworks are more then capable of doing nearly anything. I say go with your gut, if you want to learn something new, go for it. If you want to home your skills with Backbone, go for it. Neither frameworks will be gone anytime soon. 
So, a big problem with "non-opinionated" frameworks is that everybody ends up doing it differently. When you walk onto a backbone project, it'll take you some time to get the lay of the landscape that was laid out by previous developers. This is a step-up from a 'wild' project done with no framework. However, even in the same project, when the framework isn't "imposing its will", you will get many implementation styles ... often from the same developer. With 'opinionated' frameworks, it's still possible to do it wrong, and I have seen some seriously hacked up projects with tortured work-arounds because someone didn't take the time to read up and do it the [insert-framework] way. However, when well implemented, opinionated frameworks will give you a leg-up when someone new comes onto the project, because it will be easier for them to quickly find out what's going on. That said ... when you are new to [insert-framework], it can feel constricting and more difficult to get stuff done until you get into the rhythm of the framework and start intuitively knowing how to navigate its code paths. In the long run ... even your own code will be easier to maintain when your framework is 'telling you' how it should be done, as long as you are diligent about following coding conventions and understand the framework. It can also be easier to find examples of "already invented wheels" for opinionated framework that you'll more easily be able to use in your own work, because it's more likely that someone else's code will be 'doing it' in a way that will very easily port to your own project.
Doesn't render anything Chrome Version 34.0.1847.131 m THREE.WebGLRenderer 62 three.min.js:416 Error creating WebGL context. three.min.js:420 THREE.WebGLRenderer three.min.js:420 setup (index):154 (anonymous function) (index):234 Uncaught TypeError: Cannot read property 'getExtension' of null three.min.js:420 THREE.WebGLRenderer three.min.js:420 setup (index):154 (anonymous function) (index):234 event.returnValue is deprecated. Please use the standard event.preventDefault() instead. jquery.js:5395
Thanks for telling me. very strange, what OS? Developed the whole thing on chrome 35, tested on 34 seemed to work for me on osx
windows chrome seemed not render the lines on the globe with the linewidth i set, and the interaction was odd on windows too!
Looks like a direct lift from the codrops example: http://tympanus.net/Development/AnimatedCheckboxes/
This talk isn't very useful. He recaps the "goto considered harmful" stuff, pitches DEC64, and then he goes on with classes are bad and types are useless. Ironically, he argues pretty much in the same way he made fun of earlier. He mocks the mental inflexibility of others without realizing that he's the same.
Thanks for sharing. I have not have not had a chance to review it, but I bought it anyway. (with the DRM2014 sale, sorry)
Both frameworks are solid and have their pros and cons, but the reason i'm forced to stick with backbone is simply legacy browser support. I work in enterprise level development, and that means having to support a lot of old, shitty browsers that angular does not support. If you are in an environment where that matters, know that angular &lt;= 1.2 does support ie8 (and 7 with a bunch of polyfills) but the core team is not going to address &lt; ie9 bugs anymore. This can lead to serious headaches down the road should a big bug be found and nobody to fix it!
Thanks! substr() looks really useful! 
Thank you, this was really helpful!
My only problem with Moment is just how fucking huge it is for what it does. Also, if I remember correctly, it isn't very performant either.
Data binding, client-side routing, and templating is really what pushed me to learn/use them. Do you normally implement these things on your own?
Works on Firefox 28. Windows 7 64bit
They are overkill for simple webpages, not for complicated web applications.
Same. I feel like I am only using 5% of the features. All I want is something more consistent than the standard Date object for handling ISO DateTimes to and from the server.
the problem with split is that it could easily be a variable number of slashes. lastIndex was more immune to changes in depth. Alternatively: var web=thisSite.split('/'); web=web[web.length-1];
Aaaand Angular was mentioned.
yeah, its a pretty amazing site for inspiration.
background: #bada55; nice ;-)
&gt;AngularJS, Ember, Polymer and Backbone all seem interesting (albeit a little intimidating)...On the other hand, things like two-way data binding would still be very useful Checkout [Knockout](http://knockoutjs.com/), it has a MUCH lower learning curve and pretty much does one thing really well (two-way data binding). Go through their [interactive tutorial](http://learn.knockoutjs.com/). It's also a good intro into the MV* libs/frameworks, IMO. 
Doing that solution on this page in the console returns "r". 
Date/time formatting is hard. Especially when you need to support multiple locales.
I love you. Please let me bear you children.
Angular and Ember are massive overkill for something that is centered around a google map, but Backbone can be useful for organizing the things you will be drawing on the map. I'm using it for a map I'm building right now that has about 9000 polygons. They're all organized inside a Backbone collection that stores extra details attached to each polygon, including data I can use to selectively enable/disable polygons so that it only draws the polygons actually visible on the screen. Each model in the collection manages its own state on the map. This is about where Backbone's help ends, however. If you're talking about all controls and interactions being inside the map, then you're going to be doing all your control creation and event binding via Google's APIs, and those aren't always compatible with other frameworks.
I use that function all of the time. So far, I haven't been able to figure out anything that mustache or handlebars would give me that `_.template` doesn't. But given their popularity among people who use Backbone and --consequently-- already use Underscore, I _must_ be missing _something_.
The answer is simple: If it is working for you don't change. If it's not experiment with something else. (I also.recommend checking out marionette js for a nice addition to backbone views and some other stuff)
Smooth scrolling with [sly](http://darsa.in/sly/)
cheers!
Just saw [this](http://blog.codeship.io/2014/05/07/nodejs-beginners-guide.html) absolute beginner's guide to Node from Codeship. Looks pretty comprehensive.
[Sugar](http://sugarjs.com/), pretty similar to LoDash/Underscore.
Thanks! I think I have seen #2 before but haven't nailed it down yet. As for #1 I'm working on a solution that will actually give double click functionality to both buttons, and with that I've had to prevent selection. So it is built but not yet released! Excellent feedback though, thanks!
The original concept for this magazine was built without any sort of front-end framework, and it was very well done, but backbone completely changed our approach. After this project I've certainly become a backbone fan!
I think it is more a philosophical issue. 1. _.template is part of underscore.js, and typically that means you are bringing in all of underscore.js, whereas the others are ONLY templating libraries. 2. There is a large debate over how much work a templating library should be ALLOWED to do. _.template lets you execute javascript in the template, so you can have templates with a lot of functionality built in. Some groups feel that is wrong, templates should be simple and with no logic. And this doesn't get into the debate of the knockout.js style templates. 3. is style. Do you like looking at &lt;% %&gt; or {{ }} That is my thought anyway. 
Yes. It's two fold. Outside of JavaScript and in general, many optimizations are aimed at either CPU or memory. Caching, for example, offloads a ton of CPU work, but requires memory. Specific to your work, the one that stood out to me is copying `arguments` into a separate array rather than, say, calling slice on it. Granted, this is aimed at preventing a memory leak, which is always a good thing to do. However, I can see this example being construed as The Right Way^tm to work with all arrays, so felt the need to speak up. Edit: So, perhaps in my original comment, I should have been more specific with my wording. Apologies for that. I, by no means, intended to poo-poo your work.
Cool project cheers!
This is the most minimal library there is for mobile/tablet development. Copy hammer.js and some CSS with transitions into your project and you have good control over your code.
Have used both. Angular is ok. Does some interesting things but is restrictive in many ways. If you use Angular, after your second project you'll be wondering why the hell you can't use multiple views. At this point, use ui-router. For your third project, you'll go back to using Backbone. Give it a whirl. It will give you some good ideas about how to build better Backbone apps. 
Performance isn't too great, to be honest. Especially on firefox. E.g. I'm getting some bad stuttering when dragging objects in the demo. It looks like you're redrawing the entire canvas a lot more than is strictly necessary. You'd get better performance by a) only redrawing when an object changes or moves (currently it seems that a full redraw happens when a mouse event occurs anywhere on the page, even if the canvas objects haven't changed), and b) redrawing only the objects that have moved (currently the entire canvas is cleared and all objects are redrawn, regardless of whether they have changed since the last draw). You could do this by clearing only the affected area and redrawing the changed object, and any other objects that are/were overlapping it. Or you could give every object its own canvas, and layer them all on top of each other, and only redraw the canvas for the dragged object. Multiple layers is almost certainly going to be much easier generally, but I'm not sure how performance would scale with a very large number of objects. On the other hand, to keep good performance with all objects on the same canvas for a very large number of objects, you might have to start doing some more complicated collision detection bookkeeping to keep track of which objects are overlapping and need to be redrawn. Also, you could maybe keep some kind of `needs_redraw` boolean on each object. So instead of blindly redrawing on any mouse event (which, again, it seems as if currently mouse events anywhere on the page are triggering a redraw, whereas you should probably only really be concerned with events happening over the target canvas), you could instead conditionally redraw only if needed. Maybe something like `if (object.needs_redraw) {redraw()}`. All in all, though, the projects looks pretty good. I hope I don't sound too negative. Everything looks well structured and well designed.
Anything on http://component.io . I recently found [page](https://github.com/visionmedia/page.js) (a client-side router) and love its dead-simplicity.
[sylvester](http://sylvester.jcoglan.com/) - includes classes for modelling vectors and matrices in any number of dimensions, and for modelling infinite lines and planes in 3-dimensional space really useful for any matrix manipulation
I found the ClipboardEvent API but I noticed you can't trigger a ClipboardEvent. So for example you can setup an event on copy and then replace the text of the copy with other text but you can't dispatch a copy event so the best you can do is highlight something and tell the user to hit copy. I'll have to submit a request to the browsers to allow this event. These are the only options: UIEvent, MouseEvent, TextEvent, MutationEvent Why no ClipboardEvent!?
I think #2 is what really matters. #1 is kind of moot since you're using underscore in 98% of js projects requiring templates, while #3 is easily worked around with (the more you know): _.templateSettings.interpolate = /\{\{(.+?)\}\}/g
Oh, sorry. Here is the fiddle: http://jsfiddle.net/NN3Ux/ with some comments. Basically it creates a minimum point as the first memo (this will hold the end values). The first reduce loops the outer array and passes each series object to the nested reduce, which then does the max() operation and stores it in its memo. Here are the docs for reduce: read this to understand what reduce() actually does: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce There are other ways to do it but this is functional-style without closures or new array creation.
In my experience, Firefox has a shitty implementation of Canvas. Games I've written which have worked just fine in Chrome, Safari, Opera, IE, etc. have had rather bad performance in Firefox. Dragging the objects work just fine in Safari for me. That said, better performance is never a bad thing. Your suggestions seem good.
Flipboard has some really interesting articles on that out there that I will try to relocate. Basically their app is hybrid in the sense that flipping through sections is done native and all the content is created and laid out in Web view using some really interesting layout generation techniques. It's good inspiration for any such project. 
It looks extremely nice but the transitions are a little bit iffy on an s4 (not really even unexpected I suppose). I wonder what sort of performance difference could be gained by using pure css3 vs. gsap (although Idk a lot about gsap). Overall, excellent. I was really happy with how well scrolling remained intact with so much going on. Scrolling is definitely hitting the 60 fps mark and people often find a way to botch that (it's also incredibly easy to get wrong as well I suppose). 
Looks good, you should post this to /r/dataisbeautiful 
EDIT: if any of you cool kids need a js developer, i recently became available for work so PM if you have any cool/exciting work you need done! All the songs are stored as sorted sets in redis, indexed by genre. The sets are unioned to form combinations of various genres+subgenres. Then they are stored at a key and served to all similar requests, expiring after 1 minute (keeping rankings fresh and accurate). This seems to be an extremely efficient approach, and I believe reddit does something similar, although I think they are using a relational database, not redis. I will say that for this style of app, redis is fucking amazing. It's almost like it was built for this purpose.
I made a [word cloud of your commit messages](http://imgur.com/I0XzDzD). I like to use 'Stuff' too :) [Source](https://lightswitch05.github.io/commit-cloud/).
Hi I'm the developer, thanks for your comments. I was looking for a little constructive criticism, and I will look into your comments about making it work smoother in firefox. I was actually doing most of my testing in Chrome.
There's no way that it isn't.
window.location.pathname.match(/\/([^\/]+)/)[1]
Thanks for sharing your project; it looks like you've put quite some effort into it. I already found some great music! Redis is great indeed. Although I find it difficult sometimes to find the right way to format my data, things fly once I figure it out.
Thank you. I'm not very good with programming but I'm learning and I'm pretty good with reverse engineering, so I may be able to figure it out. I just needed to know where to look. I appreciate you taking a look at this for me. Thanks again!
I wouldn't say this is exclusively a firefox issue. It's just that it's less obviously an issue in chrome. For example, the one major thing that really struck me was that just moving the mouse around on the demo page (completely outside of any canvas) I was able to spike my CPU from an idle ~5% (both chrome and FF) to ~20% in chrome and ~50% in FF. Even if the mouse were directly over a canvas, if nothing is visually changing in the canvas there shouldn't really be any reason to be doing all that work. Anyway, again, I've mostly been addressing the areas for improvement, but I really don't mean to sound too discouraging. It looks like you've actually done some really good work here overall. On the positive side, the API seems really straightforward and clean, everything seems to be doing exactly what it's supposed to, and the code is all very nicely structured. Like, seriously, your code looks way better than mine. Speaking of which, can I ask about your tooling and workflow on this? Did you scaffold with yeoman, and if so, any particular generator? I really need to up my game in the workflow department, so any info. would be appreciated.
As everyone else has said; Use the Maps API from google. Core JS method calls are going to be the most performant you can get. The only reason you'd need another framework to manage it is if you decide to map loads of points/dynamic data objects on a map on the page. If you're looking to Map an area with a load of points (infrastructure for your company, buildings, etc) then maybe use something to manage the data quickly, a long polling/rpc wrapper can be a massive time-saver here. Don't throw JQ/Ember/Angular/etc.etc. just for the sake of using them... If you want to use them/try to use them, do that separately, and build up.
You're correct, there's an event listener for window, which should only be listening on the canvas element. I will address this in my next commit. As for my workflow, I use require.js, grunt, bower, and qunit for testing. I didn't use yeoman, because I feel it adds too much stuff that I wouldn't need. I try to modularize the code as much as possible, so each different class, functionality, utilities, etc go into a separate module and are loaded only when necessary with require.js. Thanks again for your input.
 for i in {200..1} ; do { echo "Downloading #$i"; curl -O http://media.letscodejavascript.com/video/live/tdjs$i.mp4; } done You're welcome
Definitely, the source for it is a really easy to read though so it's been fun!
&gt; I did utilize Typescript and a gmaps type definition file to help me work around the API without needing to check the docs every 10 seconds. This sounds like a secret trick I need to know about. Can you do this (whatever it is) with most APIs? Please tell me more! 
Take a look at ReactJS and Ember before you jump over the Angular ship.
&gt; I'd love to be proved wrong, though. You're absolutely correct, though.
I never meant for people to go about ripping them off. I do apologize for making the suggestion that it would be possible though. And I certainly wouldn't have considered sharing any code to do so.
What do you mean by too heavy? As in size? Backbone + it's underscore requirement weigh in at ~11.5 kb combined when minified and gzipped?
For a sneak peek at the quality of what you'll be getting, make sure to check out the [Object Oriented Playground](http://www.objectplayground.com/). By far the best resource I've seen on understanding the different methods of implementing OOP in js, plus it really solidified the idea of prototypes for me.
Thanks, I'll try to get my hands on those to test it there. Cheers
Size would be a factor. If it were a SPA that I control, angular or ember would be used. But this is third party JS that owners of other websites would be including, so I want to ensure the code doesn't slow things down too much. Backbone is one of the ones I am considering.
hmm, i don't think you're gonna get any smaller than 11.5k, and operational performance i believe backbone is fastest as well.
Thanks! There's a sign-up link under every video, or [you can just click here](http://www.letscodejavascript.com/v3/subscribe).
VERY cool.
Great job!
...and for security reasons, the Flash runtime only allows copying to the clipboard as a result of direct user action, like clicking -- you can't trigger it just by calling a general function. So these copy-to-clipboard hacks have to overlay a transparent Flash object on top of the browser page, covering the button/link. And because of the way the Flash plugin is implemented, once you click on a Flash object the focus is stolen from the browser and given to the plugin. The result is that when you click on one of those copy to clipboard links and then try to use Ctrl-W to close the page (or any other keyboard shortcut, like Page Down) it fails to work and does nothing. This drives me insane, and has forced me to develop a habit whenever interacting with Flash of clicking on the Flash object and then instinctively clicking again somewhere in the gutter of the page to return focus back to the browser so that I can actually use the keyboard. (You can imagine the expression of rage the first time that I experienced a site that had put a Flash video in a lightbox-like modal window that was setup to close automatically upon clicking outside of the modal window, such as in the gutter of the page. No, I did not want that video to stop playing, you morons.) \*deep breath\* Sometimes I really hate the pile of hacks that is the web. 
This looks awesome. Nice job!
Awesome. Grammar fix: "User’s submit all " should be "Users submit all "...
Not sure why you got downvoted for this but hey. Makes sense. 
Have you considered selling bundles? (20 videos for 100$ or something like that) I ask because that personally appeals me more than the subscription service, but ofc I don't know if it'd be financially viable for you.
I like it! One problem though. If the song has removed from Soundcloud then it just stops and does nothing.
I haven't used it, but I'm itching to try [Vue.js](http://vuejs.org/)... from what I can tell, it's like an Angular-lite and is only 14kb. I believe it's also dependency-free (no jQuery requirement, etc.), though I think you may need to plugin a router if you wish to use one.
&gt; Redis is great indeed. Can you explain some of its advantages relative to something like MongoDB or SQL? Or is it something which would be used alongside one of them?
Whoa, this is amazing – I can see an array of use-cases. I think the "big" thing here is that you've managed to break down a complex task to something fun and simple. Is it on github? I've got a star waiting.
Thanks for the feedback!
Yes it would
Very smooth- nice work!
In my personal project I run my one library file from both the browser and Node. * Library - http://prettydiff.com/prettydiff.js (relevant part at the very bottom) * Node code - http://prettydiff.com/api/node-local.js (nothing surprising here) * DOM code - http://prettydiff.com/api/dom.js (I create a global variable *exports* assigned to an empty string. This way I can tell what environment I am in whether exports is a string or an object literal.)
It got quite a bit of upvotes, but the reason why i shared it was mostly irony. I happen to disagree with most of what he says (except the DEC64 part), but especially disagree with the arguments against type safety, which in my opinion are ridiculous. But after watching it I understood why I have so much trouble trying to wrap my head around JS and i seem to hate working with it - the main contributor loves everything i hate lol :D 
thanks!
SQL is great for relational web applications. I wouldn't dare use redis or mongodb for an enterprise or social networking application. Redis is far stronger than mongodb in my opinion. If I recall correctly, mongodb only has key:value pairs so it's pretty basic. Redis is more correctly thought of as a data-structure server, rather than just a key value server (which is what mongodb and memcached are, essentially) Redis has sorted sets, lists, hashes, regular sets, and a bunch of commands for manipulating these structures. You still retain the awesome performance that many no sql evangelists gloat about. but you have a much more powerful toolset at your disposal. My recommendation: either use Redis, or Postgresql HSTORE. I've heard so much sketchiness about mongodb performance issues, in addition to it being just a basic key-value store 
Thanks!
yeah, typically an admin or the user who submitted it can remove the song. working on a way to report dead links.
MongoDB is a document database. 
mongo db is a key value store. They can call it 'documents' or 'json' if they'd like, but essentially the structure they are storing and serving are key value pairs
As in the users can report dead links? Surely you can detect that the first time someone tries to play it and the song doesn't exist any more? You could then pop up an error, disable it, send yourself an email so you can find it elsewhere on Soundcloud, give your users the ability to redirect to another Soundcloud link, etc?
I see what you're saying, but can't one just say redis is a key-value store also?
In one word: [BROWSERIFY!](http://browserify.org/)
The experience on my Nexus 7 is really nice. I might suggest using SVG for the logotype since it looks pretty rough on high-DPI screens.
To add to what others have said, consider that as part of your build script you can read in and "pre compile" you templates which makes them js (after you write them out somewhere) and then those can be bundled with browserify as well. I'd wager there is an existing grunt task/module for doing this with handlebars already. 
This is really cool. I love the look; the non-bloated clean interface is what I look for in apps. I foresee myself using this a lot actually.
I like the app and Im a huge advocate/fan of redis, but MongoDB is not just a key value store. It stores collections of documents. Documents can be deeply nested structures. ALso you can create relations between properties in these documents. Try doing some of the things you can do with Mongo with say Memcache or redis strings. 
It is. "Redis is an open source, BSD licensed, advanced key-value store." -redis.io
I would go with Browserify, it is great, but if you're looking for something without dependencies, you can simply concat your scripts old-school with bash. For example given these files: //---- begin.js ------------------------------------------------------ !function(exports) { 'use strict'; //---- begin.js ------------------------------------------------------ //---- helpers.js ---------------------------------------------------- var extend = function(x, y) { Object.keys(y).forEach(function(k) { x[k] = y[k]; }); return x; }; //---- helpers.js ---------------------------------------------------- //---- module.js ---------------------------------------------------- function Phone(model, brand) { this.model = model; this.brand = brand; } Phone.prototype.call = function(num) { return 'Calling '+ num; }; //---- module.js ---------------------------------------------------- //---- end.js -------------------------------------------------------- extend(exports, { Phone: Phone }); }(typeof exports == 'undefined' ? window.myLib={} : exports); //---- end.js -------------------------------------------------------- Then with bash and UglifyJS you could do: #!/bin/bash cat begin.js helpers.js modules.js end.js &gt; main.js |\ uglifyjs -m -c -o main.min.js
Backbone ks always a good fit when you need to add organization but sparingly. React js actually sounds like a perfect fit as it focuses on creating small, reusable components but I believe the file size is larger than backbone. What environment are you in where backbome may be too large? If this is a pretty simple project there is always the option of just creating your own little jquery plugins as well (provided you already have jquery on the page).
for something built on node and redis, your site loads quite slow
Post some of these to either StackOverflow.com, or the EaselJS forum (http://community.createjs.com), and you will probably get some answers.
If you follow best practices, your library should be usable in both node and a a browser. Browserify, webpack, urequire, or other tools will do it, but you don't necessarily need to use any of those tools in *your* library project. As long as you don't need to load different files in node vs. the browser, then anyone who uses your library in their app or library can browserify the whole thing. You only need to use a build process in the library itself if you want to provide a pre-built combined distribution file for others (or you) to consume, without them needing to use browserify. (As far as build process goes, I'm personally more a fan of gulp and webpack than grunt and browserify, but I'm also pretty new to this sort of thing.)
hmm loads instantly for me and additionally, all the static assets are compressed, concatenated, and served through a cdn. the redis layer is blazing fast (obviously), and I have multiple node processes running which are hardly being hit. http://imgur.com/yzVFYFq must be your internet ;)
You could use the readline module and write something like this: https://gist.github.com/tbranyen/1359650
wow that is really weird. as it seems to be the only one out of place. Good eye. It should only be based on the number of upvotes - downvotes. It might be that I was sorting them based solely on the number of upvotes (not taking into account the number of downvotes). eek. I'll look into it.
Hello all. I posted this a while back, but now it's rewritten. (hopefully for the better) I think it's really useful for JS heavy web apps.
A little too basic to be useful. Needs rotation. Also, all objects have rectangular bounds - it would be much more useful if the objects alpha layer were used as the clickable bounds. 
I did about 3 rewrites and it was a huge learning experience as I was just getting into serious javascript development. And I decided to use this to learn proper design principles (if you notice the data binding is pretty strong throughout the application, e.g. if you click save on a list item while it's playing, the saved icon also changes in the big player). the first combo node+express+postgres didn't work well, the fact is that there isn't a very good abstraction layer for relational databases yet in node (some aren't bad, but I spent more of my time trying to set up schema migrations than actually coding the application logic, something that i took for granted in rails) second node+angular+mongodb didn't work that great, mongodb was neat, but I felt like it was a toy with little flexibility. but perhaps i just didn't get it. third node+angular+firebase firebase is pricy and does't scale that well (cost wise). plus websockets don't seem to be at a point of mass use, so the app usually relied on long polling which slammed firebase IIRC lastly node+angular+redis redis made sense, it has different structures for different purposes. it didn't require the complexity of setting up a relational database from scratch, but it also provided some level of organization and relation to sets of data. Also, its really fucking fast, supports clustering, and probably a bunch of other cool features I'm forgetting. If I could do it all over again. I would definitely still use redis. But I actually might just use sinatra or golang's 'martini' framework. Node is cool, but it doesn't seem like the proper solution to concurrency. It feels more like a cool concept, but golang definitely out shines it. There are libraries to mitigate what is known in the node.js community as 'callback hell' but working with everything as callback functions gets pretty old. On top of that. I didn't find the fact that it was javascript on the client+server to be useful. ruby has tons of serializer packages available that are quick (usually written in c) and effective. Ruby is much more sensible as a serverside language than javascript in my opinion. Lastly node's packages are pretty terrible. The amount of shit I had to do in order to get passport (authentication) and email working was insane. I know node.js is new. but damn, so many of these packages are still in development, or are changing so rapidly that it just doesn't feel production ready (by that I mean, if one of your dependencies croaks, you're fucked) as an example. Upbeat died during peak traffic times one day due to a update to the 'newrelic' package. While I probably should have locked my dependency to a specific version, rather than 'latest', it killed the whole app for a bit until I figured out what was causing it, and tons of other devs had their entire site crash due to the issue. 
noice
I'm going to prolly sometime this upcoming week. 
yes, you're correct. good suggestion ;)
awesome dude, thanks!
**definitely** don't use `latest` for your `npm` dependencies - for the exact reason you've stated above! Tie to a specific version - you know it works and if you don't need to upgrade in order to get new features or performance gains etc, who cares if it's behind a few versions?
Loop through each item in the array with a for loop and check if each one contains or begins with 'free', if so remove that item.
Still Can't figure it out. They ask for: "We have an array of emails called eMails (the emails are just strings). Write a function findSpam that goes through each email and replaces any email that contains the word "free" with "spam" (replace the entire email). Remember to return the new array of emails." I was given this: var eMails = ["free candy", "free water", "asdf", "asdfg", "free travel"]; function findSpam(eMails) { //your code here } 
is.any is pretty redundant-- can you provide any use case at all for this? Take for example: window['x'] = 2 console.log(is.any(x)) // true delete x console.log(is.any(x)) // throws ReferenceError where as console.log(typeof x) // undefined is the only viable option for such a scenario. As long as you're going non-standard with your own definitions, I would suggest removing is.any, and adding something more useful like is.empty for empty strings, objects, arrays, regular expressions, etc.
i just use this, var get_type = function(thing){ if(thing===null) return "[object Null]"; if(thing!==thing) return "[object NaN]"; return Object.prototype.toString.call(thing); }; get_type([1]) // "[object Array]" get_type({a:1}) // "[object Object]" get_type(1) // "[object Number]" get_type("test") // "[object String]" get_type("") // "[object String]" get_type(undefined) // "[object Undefined]" get_type(null) // "[object Null]" get_type(true) // "[object Boolean]" get_type(false) // "[object Boolean]" get_type(NaN) // "[object NaN]" 
Do you mind explaining your approach to data binding like this? you have multiple views it appears (you're using ui router?), and I'm really curious how you managed this sort of data binding. Thanks for linking your app, it's pretty great, and I look forward to when you go open source with it I'm sure I could take some lessons away.
Super impressed with how good it looks. Awesome job. Not sure if your planning to add a liked section but it would be pretty cool.
okay I have this so far var eMails = ["free candy", "free water", "asdf", "asdfg", "free travel"]; function findSpam(eMails) { for(var i=0,i&lt;eMails.length; i++){var n = eMails.indexOf("free");} } but its giving me undefined
eMails is an array so... var n = eMails[i].indexOf("free"); 
well if you signup, you can click the star on any song, then click your user name, and it should list all your saved songs ;). clicking your karma score shows all your submissions
You can store complex, deeply nested JSON documents in MongoDB collections. You can also index and query collections with nested keys. I don't exactly understand what you're getting at.
[B-B-B-B-B-BROWSERIFYYYYYYYYYYYYYY](https://camo.githubusercontent.com/85bbf6097b0237b921ef2bb232c2dc807604e865/687474703a2f2f737562737461636b2e6e65742f696d616765732f62726f777365726966792f62726f777365726966792e706e67)
Yeah. I'm actually going to use it in another library for a type safe publish-subscribe. So, you can do: tj.subscribe('add', is.number, is.number, function (a, b) { console.log(a + b); }); tj.publish('add', 1, 2); and be confident that the result is a number. The is.any makes more sense from the publish-subscribe module. Perhaps I should remove is.any from is, and have the other module extend it. EDIT: also, this line: console.log(is.any(x)) // throws ReferenceError No matter what function you use, that will throw a reference error. That's the way the language works. I should probably elaborate on what I mean by undefined vs defined. DOUBLE EDIT: I just removed is.any.
That's a very concise solution, but is kind of verbose when you want to use it. ie: you want to do something in the case that a value is a number (or some other arbitrary type) if (get_type(x) === "[object Number]") // do something vs... if (is.number(x)) // do something I think is wins on readability, but it certainly is less concise (since you have to use a library).
Regarding redis When after each minute your unioned sets expire, how do you reassemble them? can you do routines for that sort of thing in redis? or how did you do it?
just as a preface, I came up with this because the genre combinations aren't static. We let users pick and choose how their genres are defined (kind of how you can create multi reddits) you have a top level genre like "rock". it can consist of many subgenres that may be turned on/off. therefore user A may have an entirely different version of "rock" than user B. obviously we don't want to store all the genre combinations sets (beause we would have to update them all inorder to rerank upon votes). so we quantify them into sets indexed by Genre, union them on demand, and store the result for a little bit incase it's frequently accessed for example a genre sorted set may look like: "metal": {100:"song:1", 2040:"song:2", 3000:"song:3"} where the {} is set notation, and the number prefix is the score for the sorted set item. when a user requests a list of genres (e.g. you click the rock button on the website, that is actually going to show you all the rocknroll, indie rock, punk rock, etc... songs, which we refer to as a genre combination), that list is joined together into a string that is used as the key, then the respective sets are unioned and the resultant set is stored by the key we formulated in the previous step. if other another user request that combination of genres they will get the same set. once the key is expired, the set of unioned genres isnt regenerated unless a user explicitly request that combination again. So user A requests a combination of 5 different genres, and the set operations are performed and stored for 1 minute, if user B and C come along and want the same genres, they get that same set. if user B comes in 5 minutes later and wants a new set of genres, the sets are unioned and stored for 1 minute, then if users A and C want the same sets, they immediately get the unioned set I hope that makes sense, it basically caches the result for 1 minute and storing it a key that is formulated with a pretty simple algorithm. this just keeps from reunioning the set for highly accessed content, and only unions the sets if they are A) requested and B) not already unioned. 
So it's sort of like if(genreCombinationExists()){ serveGenreFromRedis(); } else { buildGenreCombination().expireInOneMinute(); serveGenreFromRedis(); }
Throw up the code you have on pastebin or github and ask specific questions.
&gt; Is the "member" in the sorted set they key to a hash which contains all the other data? yep! so there's a fancier way to do it all in one go, but I just stuck with fetch keys from set with zrange -&gt; pipeline a set of "hgetall" commands to get the actual song details.
Ask your teacher or professor. It's their job and what they get paid to do.
Cool man. Really cool. I'm doing an OAuth2.0 Provider with a couple AngularJS clients right now and there's tons of auth related (tokens etc) and other things I should probably be serving from Redis as much as possible (I don't think it's possible to ditch my DB altogether). Your help has really opened up my eyes! Thanks!
yeah even more like funciton songList() { genreCombo = getGenreCombo(["Rock", "Indie-Rock", "Punk-Rock"]) if genreCombo { songs = []; foreach(genreCombo) { |songIndex| songs.push(redis.hgetall(songIndex)); } // ^ this should be part of a separate method, to avoid repeating the same code later on in this method } else { createGenreCombo() //get songs } } 
yeah i think you could do something like this for tokens RedisStore = require("connect-redis")(express) app.use express.session( maxAge: some timestamp store: new RedisStore(client: client) secret: ) that is, if you're using express.js. which btw is a pretty sweet framework for node.
Yeah I'm using express4 on 2 projects that I'm writing right now. Even better than express3 :)
This is really great! These bigger projects are great sources for learning beyond the basics. Thanks for doing this!
Love it. Made one submission already. Also stumbled across some new stuff. My only (little) problem is that when navigating to a subgenre, the whole subgenre-navigation collapses. I'd prefer it if it stayed open.
I think Node-Inspector is the tool I'm looking for. I tried it just now, unfortunately, I don't believe the --harmony flag is supported to enable ECMA 7 features.
This is quite neat! That said, in the two lines when you're checking whether something is an instance of Point, they have two different syntaxes, is this right? Additionally, could you add the option that if there is just one argument to the is.instance method, then it returns a function, but if there are two, it checks the second argument against the first? So you could do something like: var a = new Point(3, 4) is.instance(Point, a) // equivalent to... var isPoint = is.instance(Point) isPoint(a) That has the benefit of your code, making it easy to create new is.* checks, but is also much more readable in the simple case.
It seems that you want to concatenate "id" as a string with "k" as a number. If that's the case the code should look something like: allGames['id' + k]....
In order to avoid a [X/Y problem](http://mywiki.wooledge.org/XyProblem), you might want to clarify what you actually want to achieve with this piece of code. Maybe we could help you with better solutions. Instead of a dynamic variable names, maybe what you want is an array of IDs: var ids = [ 'first team', 'second team', 'third team' ]; for ( var k = 0; k &lt; ids.length; k += 1 ) { if ( allGames[ ids[k] ].winnerPick == allGames[ ids[k] ].team1 ) { // Do something } } This is not only more search efficient for the browser (the IDs are closer to each other in memory), but it also gives you more control over the list of teams.
It's a world cup picker app, and I have a function for the group stages. Each game is listed as an object with an id. {id:1, team1: Brazil, team2: Croatia}{id:2, etc, etc}. What I'm doing is passing in 6 ids into my calculateGroupWinner function. And within that function there's a shitton of logic determining based on user input of goals and such, who the top 2 teams are. I got this tiny problem solved but without the for loop, writing this line of code for all 6 ids...here's the code (ignore $scope as i'm using angular): if (whatGame == game1 || whatGameReverse == game1){ if($scope.allGames[id1].winnerPick == $scope.allGames[id1].team1){ $scope[groupBracket].group1st = $scope.allGames[id1].team1; $scope[groupBracket].group1stImg = "images/flags/" + $scope.allGames[id1].team1 + ".png"; $scope[groupBracket].group2nd = $scope.allGames[id1].team2; $scope[groupBracket].group2ndImg = "images/flags/" + $scope.allGames[id1].team2 + ".png"; } else if($scope.allGames[id1].winnerPick == $scope.allGames[id1].team2){ $scope[groupBracket].group1st = $scope.allGames[id1].team2; $scope[groupBracket].group1stImg = "images/flags/" + $scope.allGames[id1].team2 + ".png"; $scope[groupBracket].group2nd = $scope.allGames[id1].team1; $scope[groupBracket].group2ndImg = "images/flags/" + $scope.allGames[id1].team1 + ".png"; } else{ console.log("cannot calculate"); } }
I'm not getting any errors using this, but it doesn't seem to be working either...will continue working on it, thanks for the tip while I dig deeper!
Hmm.. then I guess you'd do something like this, var is = { get_type: function(thing){ if(thing===null) return "[object Null]"; if(thing!==thing) return "[object NaN]"; return Object.prototype.toString.call(thing); }, compare: function(type){ return function(value){ return this.get_type(value) === "[object " + type + "]"; }; } }; (function(is, types){ types.map(function(type){is[type]=is.compare(type);}); }(is, ["Array","Object","Number","String","Undefined","Null","Boolean","NaN"])); That way you've got `is.Number(1)` and so on. It minifies down to 355 bytes.
You could simplify a bit with a generic "isType" higher-order function. ie: function isType(type) { return function(x) { return Object.prototype.toString.call(x).slice(8,-1) == type; } } // generates: is.array, is.object, is.string, is.bool, // is.number, is.undefined, is.function ['Array','Object','String','Bool','Number','Undefined','Function'] .forEach(function(type) { is[type.toLowerCase()] = isType(type); });
Something like: var xs = [ 'hello there', 'lots of free stuff', 'my name is Peter', 'more free shit', 'how are you today?' ]; var spam = function(x) { return x.replace(/.*(?=free).*/, 'spam'); }; var result = xs.map(spam); console.log(result); //^ [ // 'hello there', // 'spam', // 'my name is Peter', // 'spam', // 'how are you today?' // ]
How about something like this? $scope.allGames = [ { 'winnerPick' : 'Brazil', 'teams' : { 1 : 'Brazil', 2 : 'Croatia' } }, { 'winnerPick' : 'Germany', 'teams' : { 1 : 'Germany', 2 : 'Italy' } } // ... etc, lots of games ]; var game; for ( var i in $scope.allGames ) { game = $scope.allGames[i]; if ( typeof game.winnerPick !== 'undefined' ) { // We know we have a winner if ( game.winnerPick === game.teams[1] ) { // First team won } else if ( game.winnerPick === game.teams[2] ) { // Second team won } else { console.log( 'Cannot compute - winning team not in the game.' ); } } else { console.log( 'Cannot compute - game ' + i + ' has no winning team' ); } } In this code you really don't have to know about the IDs of the games, because you're just looping over all of the games and the variable i is just an array key.
So you have an **array** of game objects? Like this? allGames = [ {id:1, team1: "Brazil", team2: "Croatia"}, {id:2, team1: "SomeCountry", team2: "OtherCountry1"}, {id:3, team1: "SomeCountry2", team2: "OtherCountry2"}, {id:4, team1: "SomeCountry3", team2: "OtherCountry3"}, {id:5, team1: "SomeCountry4", team2: "OtherCountry4"}, {id:6, team1: "SomeCountry5", team2: "OtherCountry5"}, {id:7, team1: "SomeCountry6", team2: "OtherCountry6"} ] You need to look into Underscore; makes what you're doing much easier. Anyhow, what you want is something like: results = _(allGames).map(function(game){return game.winnerPick === game.team1}) Or: _(allGames).each(function(game){console.log(game.winnerPick)}) Or if you love for loops: for (var k=1; k&lt;7; k++){ game = _(allGames).findWhere({id:k}) console.log(game.team2) } Or you could switch to use a hashmap: allGames = { id1: {team1: "Brazil", team2: "Croatia"}, id2: {team1: "SomeCountry", team2: "OtherCountry1"}, id3: {team1: "SomeCountry2", team2: "OtherCountry2"}, id4: {team1: "SomeCountry3", team2: "OtherCountry3"} } Now you can do what you want: for (var k=1; k&lt;4; k++){ game = allGames['id' + k] console.log(game.team2) } Make sense?
Nice little library. Something I noticed was that you don't use the `object.prototype.toString.call` method for `is.bool`, which causes this bug: var b = new Boolean(); is.bool(b); // false, should be true
ahhh I see, thanks a lot I'll look into implementing this. I'm still &lt;6 months into JS so it's always humbling to see how easy others can break down problems. Thanks.
Hey, If you have used angular.js, I know one of its huge flaws is that search engines fail to read and rank sites that rely heavily on AJAX. What have you done in SEO so far to solve this issue? I also noticed that when I search upbeat in Google you are just making it on to the first page, do you believe this is because Google hasn't had time to rank your site or because of angular.js? I really love this idea of Reddit combined with musical content. Keep up the great work. P.S. I am no expert on SEO
&gt; else if(thing!==thing) return "[object NaN]"; You don't need that `else`. If that condition above is true, you won't reach that line, because you've already left the function.
For an easy performance boost, try using an offscreen canvas. In your cycle, draw everything on an off-screen canvas and at the end of your cycle put that image data on your on-screen canvas. This way the browser will only update it's graphics once per cycle.
= not ==
Fair enough. The library is designed to be independent of the transition effect, and I've changed it to use a plain one by default now. The idea is that people can plug in their own one.
Do you use redis as your main (and only) data store. Or rather in combination with a persistence db behind it?
Thanks. I'll look into these.
Thanks very much. Yeah i posted there yesterday, just as they became a default sub. Had people from all corners of the earth look at the site, so very happy!!!! 
You can access any (non-local) variable via the global object, which is `window` in the browser: varName = 'a'; window[varName] = 123; but don't do that. To make your snippet work, you just have to make sure the row already exists: if(!allGames[id + k]) allGames[id + k] = {}; And now you can just set `allGames[id + k].winnerPick`. (And, uh, allGames should already be an object/array.) 
`eMails.indexOf("free")` looks for 'free' as an element in an array instead of looking for 'free' in **each** element of the array. In other words, it will only return `true` if the word 'free' **alone** is an element but `false` for 'free pills'. Instead, loop through `eMails` and use `eMails[i].indexOf('free')&gt;-1`. Note the `[i]`. That's what you were missing before when looping. There's not need for looping if you're not using it. Might as well not loop. 
In that code, You have run indexOf on an array, not a string... how would you reference the currently iterated string in the array, not the whole array? Hint- has something to do with var i
if id and k are both numbers then javascript will add them together instead of concatenating them. To force js to treat them as strings, include some empty quotes to the beginning like this: allGames["" + id + k].winnerPick If you want the literal string 'id' then use quotes around it. allGames["id" + k].winnerPick That will fix the key generation, but /u/codayus comment about [using underscore](http://www.reddit.com/r/javascript/comments/250xsl/is_it_possible_to_dynamically_create_a_variable/chclar2) is a better way of looping through the objects.
Serious potential for a viable business here. Pursue it!
So this is called the REAN stack then? :)
angular has a forEach function that works a lot like underscore's each function that codayus used above.
This is the way I would do it.
According to the terms of the soundcloud API, it's up to you to be detecting removed tracks as soon as possible. They expect you to be regularly checking the API for changes to the track.
I thought ties were allowed ( I don't watch, so I could be wrong... ) Wouldn't it make more sense to put a flag on each team to denote a winner (since both/neither could be?)
All browsers and IE&gt;=9 support Array.prototype.map and Array.prototype.forEach so you don't really need underscore to do this unless you need to support IE8.
Thanks! Sorry for the spam then, I'll try there.
Whups, good point. I originally had a more elaborate example, but I cut it back without considering that Underscore was no longer pulling its weight.
A lot of people have good things to say about [CodeSchool, which has a JavaScript program](https://www.codeschool.com/paths/javascript). [You can get a 2-day pass to try it out.](https://www.codeschool.com/hall_passes/213f3fedb6b9/claim_shared)
It's a great library... Don't get me wrong. It's just in one of those precarious situations where it's purpose is dwindling with the forward marching browser wars.
Will try still looking for a person on skype cuase I am trying to write my own programs
There are protocols you can have google bot use to crawl pre-renedered versions of sites. Also [services](https://prerender.io/) to prerender for you 
You're confusing/mis-using brackets (`[]`) and parenthesis (`()`). Brackets are _only_ used to access object properties in JavaScript, _nothing else_. So your code should _never_ have nested brackets like you have. Parenthesis are used to (among other things) give order-of-operations preference, which is what you're trying to use brackets for as well. So this piece: `[[id +[k]]]` should be `[(id +(k))]`, but all those parenthesis aren't doing anything, so it can be simplified to just `[id+k]`
https://github.com/floydsoft/angular-underscore, if you want it.
Learn to love your browsers dev console, whether it's Chrome DevTools or Firefox's Firebug, they have error messaging, and a console, with breakpoints, and stack traces etc. I use Chrome and it's View -&gt; Developer -&gt; Developer tools/javascript console
I just found /r/Learnjavascript I'll take a look around there, but I won't delete this question yet.
This is cool - but random question from the readme, what's confusing about isNaN("wtf") === true? Is it just the fact that this is a negative check (*not* a number) that's confusing?
jsfiddle.net can be pretty great. Their "ide" is a little lacking, but really nice to be able to run/create random things. Sometimes I'll actually code in something like sublime text and then c/p into jsfiddle.
codepen.io has a much nicer interface in my opinion. The only thing I don't like about it is how it seems to be focused more on tech demos than just playing around, but you can ignore that part :)
Pick one, do a solid write-up on it. Pick two and compare them. Do *not* just copy &amp; paste a bunch of links with copy &amp; pasted taglines and expect me to give a shit.
Versal is a totally rad company with amazing staff! I love this company.
I assume this is one of those occasions where "If you have to ask, you can't afford it" comes into play.
Scrolling down using the scroll bar in chrome causes the page to jump back when it hits a new section.
Floating share box on that covers content. Haven't used a 'share' button in my life. I don't think 'share' buttons are an effective way to 'leverage social media', yet they're everywhere and sometimes they're the one element deemed important enough to follow your scrolling, even obscuring content. Sort it out, internet!
If you have non-JS resources like handlebars templates (or CSS or Less or images or jade templates or whatever) webpack is the best option.
This looks pretty promising: http://code.shutterstock.com/rickshaw/
Someone already mentioned Rickshaw, which is awesome, and C3.js ( http://c3js.org/ ) is in my opinion a more modern version of what NVD3 is (easier to get started as well). In terms of working with socket.io - are you doing anything to wrangle the data in on your front-end? Ember, Angular, Backbone, something like that? I'm happy to help walk you through what I think might be a not-dissimilar architecture I use. DM me if you're interested!
I try not to be JetBrains' bitch but I think JetBrains made one for HTML/CSS/JS called WebStorm. Jetbrains products are very good in general. Just that once you get hooked on you will start to keep using other Jetbrains products
IE invented the console brah.
Githubs [Atom](https://atom.io/) editor.
I second WebStorm. The debugger sucks when used with Node but other than that it's the best javascript IDE that I've found.
Can someone please tell me again what problems DI is supposed to solve in javascript? I feel like Angular opened the door for *senior enterprise astronaut cloud architect deployment engineer XXXIII's* to bring overengineered approaches into the js ecosystem.
I'm gonna take a contrary tack here: you shouldn't do this, except in isolated cases. Your models will have some validation that is only done on the server side. Your code will have some code that should not be exposed to the client side. Most people are just saying "browserify that shiz" but really I think you should closely consider what to share and whether that's a good idea. Don't expose server side code to the consumer of the app. 
Thirding. Best IDE with the most features out of the box. You can probably get the same thing with Sublime (more $ though, or nags) but you'd really have to tweak. WebStorm is specifically designed for JS development.
WebStorm and PHPStorm #4LIFE
Why do I have to have an account to take a course?
When you dropped Express did you just settle for a hand-rolled solution or did you use something else? I'm a bit dismayed about what you say about Passport. I was digging around in it about 18 months ago and to hear it's still not smoothed out is sad. p.s. Great app man. It's reinvigorated to have a crack at something on this scale.
&gt; just a key value server I'm no huge fan of Mongo, but calling MongoDB "just" a key value server severely under values the featureset that Mongo has built. The reason it is distinguished as a Document database is because all of its features are built around querying and altering JSON structures. You can search within documents at the attribute level, perform updates to internal properties, and aggregate values across multiple documents as adhoc queries. Redis doesn't provide any of this, the closest you can get in Redis is with generous use of DB stored Lua scripts. Redis' strength lies in its low latency and expiry features, it's basically memcache on steroids, and is extremely good at managing common data structures very efficiently. Both DBs are useful for very different purposes, but they're both equally good at what they do and you are doing people a disservice by saying Mongo is weaker.
You would only need phpstorm, from their site: NOTE: PhpStorm includes all the functionality of WebStorm (HTML/CSS Editor, JavaScript Editor) and adds full-fledged support for PHP and Databases/SQL. (dont know if this applies to older versions) 
I use netbeans for projects. Browser console for snippets. 
&gt; Can you use your browser somehow to get instant console-like feedback? You can do this through the console in firebug or dev tools. &gt; it seems like I have to save everything and have an HTML file reference it That's just how browser-based js works... For js ide, I like Brackets.
There are some nice editors that can be an alternative to a full IDE if you're not hooked up to some Back End system. If you're on windows, try [notepad++](http://notepad-plus-plus.org/) for a quick, free, simple editor. On Mac I prefer [Sublime](http://www.sublimetext.com/3). For console access I personally prefer Firefox' [Firebug](http://getfirebug.com/) plug-in over chrome. It's a little more intuitive and so I spend less time searching for the right functionality. Also be sure to check out [jQuery](http://jquery.com/download/), it's almost gotten to be synonymous with javascript coding in the browser
Redis is a memory resident data storage service (tho it can be configured to use disk storage as well). Where Mongo would be used as an alternative to a relational DB, Redis would be used as an alternative to a memory store such as Memcache or Cassandra. Redis is exceptionally good at organizing data into clean structures, such as hash tables and sorted lists. It's most commonly used for storing user sessions and message queues. You _can_ use it as the sole DB for a simple site, as long as your DB doesn't exceed available memory. However, that is not what its designed for and its not something that would be wise for a large scale site.
Yup, the only thing is they don't get updated at the same time. So sometimes those awesome new WebStorm updates don't come to PHPStorm for a sec.
It really depends on the purpose of the application, I think. For most social networks, it would probably be fine. However, there is a small chance that data can be lost with MongoDB (and I believe most/all other noSQL databases) so its better to use a SQL database for software where the data is very critical, such as a bank.
I use serve: https://github.com/visionmedia/serve
You have skype right
Sourcemaps are actually JSON encoded and technically it doesn't matter what file name they have. You can use whatever but it is recommended you keep to the convention.
As someone who recently came from learning Javascript on Codecademy, I really like [their lab](http://labs.codecademy.com/#:workspace) and also [JS Fiddle](http://jsfiddle.net/). For bigger projects, (where you would save stuff and then open it in a browser) I like using Sublime Text with the theme Tomorrow Night. The colors are very similar to that of Codecademy's terminal.
https://www.codeschool.com/courses/discover-devtools Here ya go.
I have submitted a bug for webstorm 5 weeks ago and they have already fixed it. When I did that for Netbeans, they were fixing it 2 years. So Webstorm it is.
This functionality can be achieved through the console inside of Developer Tools in Chrome. You can just write code there. Or you can download [Node.js](http://nodejs.org/) which is a platform based on the V8 engine created by Google and used in Chrome. If you execute the node.exe you get a simillar console. In addition, you get lots of internal and external modules (accesible through the npm registry). As an IDE for developing JS I highly recommend you use [Brackets!](http://brackets.io) It's free and open with an intelligent autocompleting engine (Tern) and lots of useful plugins.
Clever, but this doesn't work for all cases. is.compare('Object')(function () {}) === false is.compare('Object')([]) === false Functions and Arrays are also objects. I'll definitely play around with this though, as I'm sure using this approach can shrink my library. My library also provides is.integer, is.defined, is.realNumber, is.arrayOf, and is.instanceOf. I think these are really useful checks for web apps. PS: /u/holloway? Is this Tj Hollowaychuk? If so, you'd probably be honored/surprised/creeped out to hear that my type safe publish subscribe library is called TJ. (Typed JavaScript) The collision with your name is purely coincidental, but I think it's amusing.
How much do you wanna pay?
Good catch. No, the synax is supposed to be the same Here's the fix: console.log(is.instanceOf(Point)(p)); // true console.log(is.instanceOf(Point)(fakePoint)); // false I like your suggestion about changing the signature, but this is another instance where it makes more sense in the context of my type safe publish subscribe library. If you create functions that expect an instance of something, you can use them as higher order functions. IE: tj.subscribe('add points', is.instanceOf(Point), is.instanceOf(Point), function (a, b) { // we know a and b are points }); TJ stores all of the type checking functions and runs them later whenever you call tj.subscribe() to verify all of the arguments match the expected signature. This is also where is.any makes sense.
Clever. I addressed this same solution in Holloway's reply.
One would expect isNaN() to behave the same way as Number.isNaN(), but it doesn't. isNaN("wtf") === true Number.isNaN("wtf") === false this is because... isNaN("wtf") // is functionally equivalent to: Number.isNaN(parseInt("wtf")) parseInt will return NaN, and isNaN returns true because it is given NaN. tl;dr: isNaN should only return true if it is passed NaN. isNaN("foo") returns true because it tries to convert the argument into a number and fails.
Actually, i think this is desired behavior. is.boolean expects a primitive boolean, and not a boolean wrapped in an object. What about.... var b = new Boolean(false); if (b) { alert('a naive programmer would expect this to not run, but it does!'); } if (b.valueOf()) { alert('this will never run'); } tl;dr: You're creating an Object that if you call obj.valueOf() you will get a boolean.
It's not F12 on my keyboard. Menus are fairly universal, keyboard shortcuts are not. Don't mean to be a dick, just don't think advice should be based on personal shortcuts, even if they are the default / norm.
Why don't you contact them then? It might mean "negotiable". 
&gt;Can you use your browser somehow to get instant console-like feedback? Developer console. It's a full REPL and is mandatory for web dev. &gt;are there popular and easy to use IDE's for JS? I'm a huge fan of Sublime, but IDEs and editors are a super-personal choice and there's really no "best" one out there. Choose the one you like the most.
Chrome on Mac here, didn't have that problem.
I use Vim and Chrome dev tools as my tools of choice. If you spend some time learning Vim now it will definitely pay dividends in your coding career! Check out /r/vim we are always ready to help more people get into Vim.
This is actually more CSS than JS. All they're doing is changing the page to `overflow-y: hidden` and the sidebar has `overflow-y: auto`.
Then Ctrl + Shift + I (Cmd + Shift + I on Macs).
I use sublime text. you dont need an ide.
The links along the bottom that have the week and year appear to be buttons and yet, they are only clickable on the exact text of the number that appears. Make the entire square clickable.
Granted I don't Node *that* much, but I've never had problems with the WebStorm Node debugger. What are your issues? 
Sublime is available on Mac, Windows, and Linux :) But lately I've been using Atom instead.
Breakpoints will show "Collecting data..." in the watch window. Those prompt never go away. Then when you single step it never hits another breakpoint. I've even tried using --nolazy on the command line of node. It helps but doesn't alleviate the problem. BTW, I'm using version 7.x.x.
Sublime Text 3 + CodeKit + Chrome (Dev Tools) I use two monitors, with Chrome open on my top monitor and Sublime Text on my lower one. CodeKit auto refreshes the Chrome page whenever a source file is modified. I've tried messing around with the larger IDEs like WebStorm, PHPStorm, etc. but they're too bloated for my needs. 
Hey thanks! I think preventing the main page scrollbar is to keep the navigation in focus, just so it appears like a separate scrollable object rather than apart of the page itself. I find it more beneficial in the context of smartphones or smaller screen devices.
If you want a text editor with some nice extra capability, try Sublime Text. If you want this but want to learn something a little funky (but powerful) try vim. If you want a real IDE with all that has to offer try Webstorm or PHPstorm (PHPstorm is basically Webstorm with extra capabilities for working with PHP). Learn to use your browser's console. Both Chrome and Firefox have very good console tools. You will likely use those more than any other tool in your arsenal.
You could look at Knockout.js (MVVM) http://knockoutjs.com/
This might be kind of dated, but is this what you're looking for : http://www.adobe.com/devnet/flashplayer/articles/full_screen_mode.html You can do it with some actionscript I believe -- and you'll need to set a parameter on the object/embed called 'allowFullScreen' to true.
Hi there, author of the framework here. Happy to see Cosmos is getting some traction here and I'm very excited to hear feedback. The framework is already capable as the live demo shows, but even more important in this stage is to validate its concepts and strengthen them. As the bottom of the README says, I'd like you to answer the following question: "If you enforced the Cosmos principles onto an infrastructure from your experience, would it: a) improve, b) complicate or c) not influence the situation?" Feel free to ask questions and/or post first impressions. Thanks!
Interesting...this is not a complaint, but holy damn, so many things to install. I'm running Arch. I installed node once, apparently (shows how much attention I pay -- I am a *terrible* Arch user). I've gotten through the first three commands/installs (bower and grunt are, apparently, in AUR and not the official repos), but I haven't touched Vagrant or the like yet. I might poke around just to see your code though, I'm curious about Node and the like, so thanks for sharing.
I know, but in the end, I still prefer notepad++ most, but that's not available for mac. So Sublime is a 2nd choice for me
Chrome on android here, no issues
With Linux, a tiling command line-centered WM (i3wm) and vim + various GNU tools, the entire OS is my IDE! ;)
Yes, I shall include some tests, good point. Edit: added some basic tests to at least prevent regressions, nothing too fancy.
My current ToDo list: - add testing - make it possible to change the delimiter for placeholders - make it possible to easily start/pause/stop the "ticking" on any given event (any ideas on how to do this one as nice as possible?)
OK, I admit I'm stupid with GitHub. How do I get to the live demo? [Oh is it this?](http://skidding.github.io/cosmos/)
That's it, yes. Just a small demo over an external API as the yellow header explains.
I think the best thing to do is just try to build something. You'll hit a snag and need to figure out why this thing doesn't do what you're expecting -- figuring out why things don't work is the best way to learn. If you ask me, games are one of the hardest things to build well... both design and development can be quite tricky.... it may not be the best beginner's task, but it can be a good goal; something to build towards. As for being 16... jesus man, not everyone can be a prodigy that's been coding assembly since they were 12. If you're only 16 you've got plenty of time to learn how things work before entering the job market.
I think the talk is interesting enough to learn something useful, and challenge people to approach problems a bit differently (in the JavaScript world that is) and it adds context to the decision to make this library. I would like to hear why do you think currying is a "parlor trick" and "functional/declarative approach is inefficient". If you mean "inefficient" as in "not fast enough", I'm sure that won't be a problem for most use cases. And if you're working with large datasets you can use lazy streams or iterators, which can also be functional and declarative. 
&gt; but holy damn, so many things to install If you don't already have grunt &amp; bower, yeah, it can be a lot. The tooling chain isn't a necessity for nodejs development, 90% of it is there for time saving and optimization of the front end.
http://www.reddit.com/r/javascript/comments/24rww3/reactjs_flux_an_alternative_to_the_mvc_paradigm/
You can assume, but you might want to edit your post because you said; &gt; but **it costs a lot of money** to ship it out with a commercial product. ... without validating if that is true or not. But I guess I don't really know what is the metric for expensive even is in your case. Is it worth $1k to you? $2k? $5k?
*Firefox's Dev tool is unauspeciously named 'Developer Toolbar' Firebug is a different thing... an addon. you can even install Firebug Lite as an addon in chrome.
How are you liking it compared to Sublime?
hey I like the progress bar. Which one is it? I have seen it before but forgot.
Emacs is where it is at yo.
Currying to me is a neat trick that I never find that I need. When I learned it, I didn't find myself changing how I code. I didn't find myself suddenly currying everything. I can count the number of time's I've use partial application on one hand, but never currying. Declarative approach is great right up to the point it's inefficient. SQL comes to mind. The minute the query engine produces a terribly inefficient execution plan is the minute I convert the SQL statement into multiple statements making it imperative so I can control the order of operations to guarantee optimal operations. I've spent time looking at functional programming and I find it interesting, powerful and marginal. My everyday work doesn't lend itself to functional programming well. Yes, I do use map, filter, reduce from time to time. But my code is only peppered with functional ideas like these. Most of the time, my code is procedural. 
Didn't know about Highland, looks nice. I made my own flavor of lazy streams as well, inspired by the early Lisp concepts https://github.com/elclanrs/continuous.js. Edit: [Prelude.ls](http://preludels.com/) is a great library too, that does functional JS "the right way". I mainly use it with LiveScript.
alright, thank you man. that gives me some hope. what do you suggest i start on?
I liked it for this philosophical stuff, it is interesting background and shows things in bigger perspective, I think it was not about goto specific but as real-world illustration of the evolution of thinking about features in general and how those things move slowly.
[RxJS](http://reactive-extensions.github.io/RxJS/) is one option. If you want to look into the MVVM paradigm as /u/cwbrandsma mentioned, you could look into [Vue.js](http://vuejs.org/), [Brick](https://github.com/bredele/brickjs), etc. 
Also in the Flash runtime you can only initiate fullscreen from a user interaction event, like a button click event handler. 
I would recommend something simple but with room to build on. For example since you would like to game or website design, why not try something with both and try to make a game like cookieclicker. I made something like that and theres tons of things to learn in doing so, for me I learned how to lay out things better, saving with cookies and over all just got better at coding. Also if I was you I would finish the courses on code academy. They are done very well and most of the time you dont even realise you are learning more and more. Anyways good luck.
Pretty cool. But those are just lazy, and not real streams. Highland supports node.js streams and can run aysnc. It is pretty fancy with support for back-pressure and forking streams or paralleling.
Of course, I guess the term "stream" is misleading, because it has a few meanings, but in the LISP literature, a "lazy sequence" is a "stream". "Streams are delayed lists" -- [SICP](http://mitpress.mit.edu/sicp/full-text/sicp/book/node70.html). Continuous.js is more similar to Lazy.js in that sense, but Lazy.js is built on iterators, not streams.
will you say the same when you're burning in /dev/null for eternity? (just kidding :)) 
Everyone here probably hates Microsoft but they have some great free products for js dev now. I like Web Matrix as its a lightweight editor and deployment tool with some great features like code formatting, [intenseness for JavaScript and your own library's](http://blogs.msdn.com/b/robert_mcmurray/archive/2013/06/28/intellisense-for-jquery-in-webmatrix.aspx) and easy deployment to cloud hosting. Has templates for nodejs with express, php and various other frameworks. [Visual studio Express](http://channel9.msdn.com/Series/Javascript-Fundamentals-Development-for-Absolute-Beginners/Writing-JavaScript-in-Visual-Web-Developer-Express-Edition-04) and you can make web apps and windows apps with html and javascript. Not sure if the web essentials plugin can install into express but then you get some great tool for sass, less and coffee script.
I have mixed feelings leaning towards preferring Atom. It might just be the novelty. Atom is basically a complete clone of the look and feel of Sublime, with a different color scheme. It is extremely configurable and has a rich plugin api, just like Sublime, but implemented using completely different technology. Atom doesn't have sublime's preview-gutter scrollbar thing, but I don't find myself missing it much and you get the extra screen space. If you're using git, your line numbers are color coded by which lines got added and where there were deleted lines, and the directory browser color codes files. So you don't need git diff or git status, just look at the colors and you'll see what your next commit looks like. However, for some reason there's no button to commit within Atom (as far as I can find) which is weird coming from github. I guess they want you to use it alongside the Github Desktop clients. My only complaint is that it seems to be very very slightly less responsive to clicks sometimes. This may be my crappy laptop, but it doesn't happen in Sublime on the same computer. It may have something to do with their interesting decision to implement UI using basically HTML5 with a desktop wrapper. I don't know if they did that so they could port Atom to the browser, but they haven't done that to my knowledge. 99% of the time you can't tell and it feels pretty native despite what's under the hood. And the HTML5 structure makes plugins stupidly easy to write, apparently. The other pro is that it's really free, with no donation nag screens like Sublime has if you don't pay.
You are in one right now.
Why did you choose Handlebars over Jade?
Hi! I run an open-source music project called **[Streamus](http://streamus.com)**. It is built using Backbone and Backbone Marionette. Streamus is a Google Chrome extension which touts itself as an alternative to Spotify/Pandora. In my project, I had a need to render playlists consisting of thousands of songs. The amount of information being rendered was causing the UI to halt and there was no existing solution for incremental rendering. So, I built it! This code is hot off the block and still has a couple of bugs / flickers, but they'll all be resolved in time. The code will eventually find its way into Marionette's core and will be offered as a useful tool for those needing this functionality. That said, it does work well so far. You'll note that the scroll bar's height doesn't jump or shift in any way even though items are being added/removed. Only items which would be visible in the viewport (determined by your scrollTop position) are rendered as HTML. Everything else is just left in javascript and loaded as needed. I just wanted to share the work and see if anyone had any questions about how I went about doing things. Also, if you're skilled in Ember or Angular, I'd love to see a side-by-side implementation in another framework to see how they stack up! Marionette has been great right from the start and I would suggest it to anyone who is considering using it. :) Cheers!
Real programmers use [butterflies](http://xkcd.com/378/).
For entirely subjective and opinionated reasons. 1. I don't hate html (I've been writing it for 20 years, even when it annoys me its still an old friend). 2. I do hate significant whitespace 3. Its a lot easier to debug output issues when your templates look like the code you're generating and you are just inserting strings. 4. I know handlebars very well and can make it dance. 5. I already have a toolchain for using the same precompiled handlebars templates on both frontend and backend despite using both AMD and CommonJS. I'm sure Jade works very well for a lot of people, but I don't like its approach.
[Image](http://imgs.xkcd.com/comics/real_programmers.png) **Title:** Real Programmers **Title-text:** Real programmers set the universal constants at the start such that the universe evolves to contain the disk with the data they want. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php?title=378#Explanation) **Stats:** This comic has been referenced 100 time(s), representing 0.5168% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcdcomic/)/[kerfuffle](http://www.reddit.com/r/self/comments/1xdwba/the_history_of_the_rxkcd_kerfuffle/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me)
If I just want to play around will simple JavaScript like testing out simple functions or comparisons null + null === 0 evals to true for example then I use JSC in the commandline. http://www.phpied.com/javascript-shell-scripting/
Not saying anything against Handlebars, just genuinely curious. Can you do blocks in Handlebars? That was a huge selling point for me with Jade.
Really cool. I'm planning on taking a closer look later but a couple questions off the bat: 1) Are you planning on supporting dynamic item view sizes? 2) Support for horizontal scrolling? Thanks for sharing and good luck!
&gt; Not saying anything against Handlebars, just genuinely curious Sorry, didn't mean to imply that you were. Some people get very serious about A vs B and start diving in to absolutes, and I wanted to nip that in bud. I'm not sure what you mean by blocks. Do you mean chunks of code for inclusion? If so, yes, they're called partials.