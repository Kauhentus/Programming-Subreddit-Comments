Well, for example it makes showing and hiding individual columns very difficult. Another example would be having a fixed header row. Nothing against tables, but if you're working with very large sets of data, it's much easier to work with plain ol' `&lt;div&gt;` elements, as they don't have any special rules when getting rendered by the browser.
It's not a matter about where would you wanted to have -0 !== +0, but with its particularity. For example, if you do: function animate(T) { if (1/T === Infinity) { alert('Frequency must be a valid value'); } } Then you will get a weird error if you make something like: animate(-3 * 0); Because -3 * 0 returns -0, not 0, and 1/-0 is not Infinity, is -Infinity.
It's an example of cargo cult programming -- someone blindly copying something without really understanding what it's there fore. 
And the view state. So your SAP url might be a combination of a couple of API urls, and view state. Now if you don't find it challenging to combine that in a good way, then good for you.
Same with Chrome 24 on OSX.
No need for server-side mumbo jumpo, a simple .html file can do this. My recommendation would be to use a &lt;textarea&gt;, then just, in Javascript make a two handlers : 1. If page-jus-loaded (there is a Jquery handler for that), load text from html5 local storage 2. If keypress (again, jquery handler for that), save all textarea to Html5 local storage (http://diveintohtml5.info/storage.html) When user closes the webpage, the last "input" made it so the text is saved :) When it opens, you restore.
I think you'd be better off easing either in or inout, not out. Just easing out feels a little unresponsive, and the stop is asymmetrically abrupt. But that's a nitpick of course - it's overall very nice.
It's perfectly smooth for me, but I don't disagree with you - working on slower computers is important too. Frankly I think this is a perfect place for graceful degradation. Just include CSS transitions with all the prefixes, and if it doesn't work, functionality isn't affected. Besides, if somebody's browser is too old for CSS transitions, there's a better chance that the JavaScript substitute would have been jerky for them anyway.
In FF, it looks like its around 20 fps. That isn't so bad, except that it doesn't look perfectly consistent.
Hmm, thanks for the resource.
&gt;This is a proven method, my 13-year-old daughter followed this road map and she has successfully learned JavaScript to the extent that she works for me in her spare time on some professional JavaScript projects. Slave labor! Kidding...nice read, thanks.
Unfortunately screen readers seem to prefer &lt;table&gt; for grids, so those of us needing to provide accessibility compliance are shut out of a few awesome libraries because they use &lt;div&gt;. Slickgrid as well.
Not relevant: http://www.zefrank.com/invite/swfs/index2.html
I'm pretty sure the last time I saw a Ze Frank reference was at least 5 years ago
"Properly" is just far too subjective in the JS world, that's why it's a nice world to be in. Although this resource is superb, good work :)
Just out of curiosity, where is your numberHours variable being defined? I couldn't find it. Probably won't print out the length of an undefined.
haha and this is why i am so happy that other people can look at my code. I was using the wrong variable. Thanks! However even with that changed it is only printing it once instead of printing all the elements. hmm
People say this like PHP isn't widely used or like Phython or Ruby are more common out in the wild. Learn PHP if you want to learn a back end technology, probably pick up Python if you find that you like dealing with the back-end stuff.
dude cover to cover? How long did that take you. I read your post and looked behind me that thing is 800 pages!
http://www.jstree.com/ 
the results have to print out as lists
Here's a great way to get an idea of the various JS MVC frameworks: http://addyosmani.github.com/todomvc/
this is onto the right idea at least. my concern with using node as a prerendering environment is that its single threadness will block true scaling. 
I don't know why, but I read this as 'Learn How To JavaScript Properly'. I liked it better that way.
Thanks for the feedback - the idea is that rendering is stateless so that rendering data is provided through the initial options and then also potentially service requests by components themselves. In this way, multiple zest instances can be run on the same code base utilizing multiple cores, or even scaled across servers.
I've read Larry Ullman "Modern JavaScript: Develop and Design" and "jQuery: Novice to Ninja" by Earle Castledine and Craig Sharkie. Both books are easy to follow and they are good as an introduction in my personal opinion. Zakas "Professional JavaScript" is very comprehensive, but there is no tutorials there so you only get pure abstract knowledge (which is of course necessary, but it is easy to forget it if you're not doing anything with this knowledge). It is a good book to have in your library, consult it at some points, but as a learning resource it is slightly too dry. Ullman is better for a beginner because throughout the book you keep doing things, building calculators, creating small utility library etc. As for Crockford it really opens up your eyes, and demonstrates that code can be poetry, but it is clearly addressed to people with a lot of experience with other programming languages. It is a good guide for people who already know how to code and just need to learn specific syntax and advantages of JavaScript over other programming languages. Oh, and if you need very practical advice and simple recipes for basic things check out O'Reilly Javascript cookbook by Shelley Powers. It is not a book about basics of JavaScript, but it gives you a great overview of practical application of crucial methods. 
/edit *no need to pay attention to this comment* Is it possible to clearInterval() from within the interval without knowing the timerId? I tried it once and googled, seems the answer is no, that you cant really do some equivalent of clearInterval(this); but this remind me of that and it doesnt hurt to ask
So you'd want it in a list: var employeeListItem = document.createElement("LI"); employeeListItem.innerHTML = numbersHours.length; document.getElementById('employeenumber').innerHTML += employeeListeItem; Of course for this to really display as a list you need to insert it into a ul or ol tag. So I'd just create that on the page as a receiving container. If you need to do create that in your function you can simply add the createElement method to your payroll method before the loop. Then you'll just append to that element instead of the others.
How about var id = setInterval(function() { if(!doSomething()) { clearInterval(id); } }, 1000);
oh my bad right from the start, it was addEventListener that I thought of, which are often unnamed only declared as document.addEventListener("keyup", function(e){}, false); and its there, inside the function where I thought I could use something like if (blabla) { document.removeEventListener(this); } but if theres named function to execute in declaration its easy to remove even from inside, I just thought that it might be unnecessary. 
This may be unpopular around these parts, but I think Crockford's book is really over rated. For one thing, it was written for ECMAScript 3, so he needs to update it. The railroad diagrams are confusing, annoying, and a waste of space. It's also very opinionated. If you plan to ever work with others' JavaScript code, the idea of learning a "perfect subset" of JavaScript is laughable. It's a shortcut book with shortcut results. Zakas' book and/or Flanagan's "JavaScript: The Definitive Guide" would serve people learning the language much better.
You really only need to read the first sections. A large portion of that 800 pages is reference material. I second greim..."The Definitive Guide" is aptly named, buy it, and you really won't need other JavaScript books.
Should I read JavaScript the good parts first or Definitive Guide? I have taken some basic JS classes and done a couple dozen hours on codeacademy.
Save the Good Parts for after the Definitive Guide, if you even bother with it at all. It's really not the standalone book a lot of people claim it to be.
I have "Modern JavaScript: Develop and Design" how would you fit it in the 6-8 week schedule in the post? Would it be rereading? 
i appreciate but i still the problem that it isnt printing every element in the array and then adding a space plus now it wont exit the loop. i removed the two fuctions and made it into one
Can anyone estimate how much time this would take per day? 7 days a week? I read another blog and the author was stating he was spending a few hours a night...
if you could please give me some more explaination as to how you created the list and printed it out. I'm a bit confused.
I wonder if one still calls it "JavaScript is Sexy" when using it with 13-year-olds?
Crockford's 'Good Parts' is a phenomenal resource that shouldn't be discounted. However, any developer would be remiss to think their understanding is ever 'complete.' (whether from one book or dozens)
I remember discovering this while working in an auctions module. I never trust setInterval() or setTimeout() for anything other than slideshows and the like.
I just always see people trot "The Good Parts" out every time someone asks for a JavaScript book like it is the best and only book they will need on the topic, while neither is in fact the case.
I'm confused, I thought JavaScript was treadless and that was the driving force behind node.js. No waiting. This article seems to suggest the opposite though, right? It says that JavaScript is single threaded and there's an event queue where events have to wait until its their turn to fire. What's the deal, yo?
Nice article! Quick note: "JavaScript: the Good Parts" is great for experienced programmers who are new to JavaScript. I agree that it's not a great starting book book if you are outside of that audience, but I wouldn't say that people are "wrong" to recommend it, or that it's overhyped.
Just name the function expression: window.addEventListener('click', function cats() { alert('meow'); window.removeEventListener('click', cats); });
There's *always* waiting. It's like this: &gt; JS thread: Hey network, go fetch this URL, and run this function once you've got it. Meanwhile I'm going to do the next thing on my list. &gt; Other language thread: Hey network, go fetch this URL, and I'll just sit here doing nothing while you're getting it. To try to keep the processor busy, I'll make more of me (threads). The event queue isn't really a "wait" in the same sense. In other words, if you have a whole long list of things in the queue, at least the processor is fully busy doing useful things while executing it.
thanks, works nicely
ah, I think I understand this now. Say I had a click event set up on an image, and the callback took 1 second to complete, and then I spammed 10 clicks super fast on the image, the callbacks from each click stack and then fire one after the other (instead of all 10 at once), lasting 10 seconds. same idea, right? 
i actually have all of that working right now. But i need help with a further step in the program, i made seperate post about it. If you could take a look at it, i really would appreciate it. 
you're a few years late on this one chap
Can you clarify what you mean by: &gt;however the difference between x and 40 needs to be muliplied by 15 What is x? 
It's all about the challenge 
x is higher then 40, so if they user inputs 45 you subtract 40. you multiply the 5 by 22.5 and the 40 by 15
Ahh, ok. I made a fiddle that should help: [jsFiddle] (http://jsfiddle.net/Cyx7G/) You should probably add other else statement to make sure you don't get an inappropriate value (like a string or negative number).
There are actually several ways to accomplish this. One is creating a global variable (bad practice), another is passing it as in argument within a function to another function. Additionally you can pass it in through objects. There's actually so key differences in that some ways are pass-by-value, while others are more pass-by-reference. So, it really depends on what exactly you want to happen. I did make a fiddle to demonstrate this a little: [jsFiddle](http://jsfiddle.net/cqYeh/)
oh wow, there is a lot going on. Well for now im just going to try and be a bit sloppy since i dont have much time and it not really a javascript class, its just a general overview. If you could help me out with the last bit of code that i posted, id really appreciate it. Im gonna make sure to up vote all your great comments.
I agree completely. Simple if statements for displaying UI make sense to me and feels right in the template. I don't want to have to see UI text in the business logic of controllers as variables or worst html snippets 
Hi jcdang, Thanks for your feedback! Could you explain a little further? Note the 'meta' part in your example comes in that you specify section names in the metadata. But how to layout those sections in the UI (with tabs, or using h1 tags, etc) is up to how the Metawidget is configured. Are you saying you'd like the choice of tabs (versus say divs or h1 tags) to be in the metadata itself? Regards, Richard.
Correct me if I'm wrong, because it's been a while, but most of this stuff sounds like it should be encapsulated in the view layer of Ember. Your "business logic" should live in the controllers, and the presentation logic should live in the views. The templates themselves should be very simple and just basically be plopping the bindings from your views into actual markup. In your "status" example, it sounds like you should have a parent view that renders a subview based on the status of the object you're working with. As for formatting, you should bind ids/classes to values in your view that handle the actual view logic to determine how you want to display your object(s), and handle the formatting in CSS. Also, Handlebars does have boolean logic IIRC - you can wrap a block in an if statement that you pass a binding to - if it resolves to true, it renders the block. This is handy because (like in your example above) you can write your complex logic for determining whether or not to display something in your ember view, and then your template stays clean. 
It's definitely good for getting up to speed on language fundamentals. For related things like debugging in Chrome or using Node.js, there are probably better resources. That said my latest copy is already years old so I could be wrong.
Amen! 
To be honest I don't expect OP has yet had the opportunity to look into js build processes. 
You can $broadcast an event with the $rootScope and listen to the event with $on. [Documentation](http://docs.angularjs.org/api/ng.$rootScope.Scope). There must be examples on google, let me know if you can't find one and I'll make one.
Just curious, why aren't we seeing a grid implemented with any of the other frameworks (that do more than wrap an existing jQuery grid)? I see this one in angularjs. DoubleClick also implemented their own angularjs grid. Knockout has a similar one, but it is kind of a similar framework. Are the other frameworks, like emberjs and backbone not as quick for building custom components? Honest question. I have no affiliation with any framework.
I googled around for a bit but if I try to call something like: $rootScope.$broadcast('classesChanged'); I get a $rootScope is not defined error
org.metawidget.gwt.client.ui.layout.TabPanelLayoutDecorator metawidget.jqueryui.layout.TabLayoutDecorator org.metawidget.faces.component.html.layout.primefaces.TabViewLayoutDecorator I find it awkward that the documentation is able to list out layout defaults for each respective platform yet there was no effort to normalize the similarities between frameworks so that it isn't necessary to be explicit. You can't cover every possibility but standard practice says configuration by exception. Also, the framework makes layout configuration/customization a nightmare by coupling view concepts to the model. The ability to handle multifaceted views become more difficult each time you let ordering/position/formatting/etc be dictated by model metadata. 
Ah, thanks for the tip! Ill need to fix that one :)
ha, well I was thinking something like click on an image, and the callback was to toggle a hidden div or something, so if you fire off 20 clicks really fast and have the animation last .5 seconds, then it's gonna take 10 seconds for everything to finish. Just something to wrap my head around everything.
Are you talking about Greasemonkey? You can use `@run-at document-start` in the metadata block to have your script run before others. 
jcdang, I absolutely agree. Striking the right balance of coupling between UI and model is a difficult problem. If you have too little, you have significant duplication between view and model, which is very error-prone and a leading cause of application defects. See http://blog.kennardconsulting.com/2010/11/duplication-in-user-interfaces-6.html. If you have too much, your model is unnecessarily restricted to your view. There are several possible 'sweet spots', and Metawidget tries to be flexible enough that you can define it in a way that makes most sense for your architecture. I did a little blog series on this topic here: http://blog.kennardconsulting.com/2010/08/customizing-which-form-fields-are_04.html
1. **Debugging**. When an error occurs in your logic, it's much easier to look at the error and recognize "hey, this occurred in views.js line 23, I reconginze that function!" than to be looking at the generated code of a compiled template, assuming you can even see that. 2. **Unit testing**. With logicless templates, you run your logic, then send a plain old javascript object (POJO) to the renderer. This POJO is a prime candidate to be tested. "My model was this, so I would expect the POJO to be such-and-such." Which effectively tests your logic. When logic is mixed with the template, equivalent testing would require scanning through a giant HTML string or DOM subtree. (double) [edit] for (double) clarity. (rewrote #2 so that it would actually make sense)
Thank you so much for all your help, i finally got the whole thing working. Lots and lots of Upvotes!
You have access to the index of a loop if you are only printing it. data-index="{@index}" I agree that sometimes you need some logic. Adding optional classes to a element is my favorite template problem; it's always messy. Handlebars says use helpers for that. The old jQuery templates beta had code, but it too was messy. 
If your team is using a Turing complete language, then someone on your team WILL inevitable abuse that privilege. Ok, yes my counter argument is a bit silly, but I just don't think you should ban something useful, because others may fuck it up in the future. There are hundreds of examples where very simple bits of logic, make perfect sense to have in a template.
No problem. Glad I could help.
I often put code in views and find that in general it allows me to keeps things simple and concise. Extracting out helpers is useful but it does mean that you need to inspect multiple files to figure out how something is happening. In general, you'd want a helper to be used at least 3 times in your source code to make it a viable abstraction, IMHO. Otherwise, what is the point, except for brainless adherence to dogma? In your case, I think that the framework you are using is limiting you since you clearly have some ideas about how you want to structure your code and it isn't supporting you well. If you are just doing a project by yourself, I say, do what you feel most comfortable with and try to learn as much as possible. Even if you fail for some reason, (e.g. unmaintainable code) you are going to learn a lot from it.
"Hundreds of examples" doesn't provide a concrete reason and seems simple hyperbole to me. HTML and CSS can, through some manipulation, be considered Turing-complete. Do you think that a dumb templating system shouldn't have extra javascript to deal with the "simple bits of logic" Handlebars can't handle? It could be ugly, on the javascript side. It's less ugly than a smart templating system exceeding its jurisdiction. Give me a few examples out of your hundred. 
Without the second argument for `substring()`, it returns everything after the first argument. Therefore substring(1,Infinity) can just be substring(1) 
I am trying to reverse a string, so the output "text" would return "txet".
&gt; HTML and CSS can, through some manipulation, be considered Turing-complete. Care to elaborate?
&gt; a simple 'if statusIsClosed' statement to display a simple message is 'bad logic inside a template'? You can do that in Mustache and Handlebars. Just RTFM. Seriously.
Sure. It's not really [important](http://lemire.me/blog/archives/2011/03/08/breaking-news-htmlcss-is-turing-complete/). It's just that Turing completeness doesn't mean the language is useful, which is exactly what JL245 said.
Not memory efficient, but the easiest way to implement it: function reverseString ( input ){ return input.split("").reverse().join("") }
Just clicking the link... loving it so far =D Haven't looked under the hood, but it was just added to the todo list!
codyrioux is right. Just like you inject $scope. You can also pass data with the call. $rootScope.$broadcast('classesChanged', {any: 'data', you: 'want'}); $rootScope.$on('classesChanged', function(data) { doSomething(); });
&gt;Additionally, we do some server side rendering, which is much easier with string templates because we don’t have to boot a whole PhantomJS environment. I think you're halfway between committing to a full javascript app and a traditional server-browser environment. &gt;I’m actually a fan of all major efforts in client side MVC. Well here you're with me kinda. Transclusion isn't a word, it's an excuse for what should be a readily communicable idea. The thing is, Ember's run loop falls into that also. &gt;One of the more complicated pieces of EmberJS is the run loop. Usually you aren’t aware of it If you aren't usually aware of some part of your environment, it's either absolutely abstracted out or something you need to be __immediately concerned with__. I'm actually unaware of Ember's approach to the DOM. I'd like it if Ember advocates were more aggressive. 
&lt;div class="widget widget2x2 widget_green animation unloaded" data-url="metro_gallery.php" data-theme="green" data-name="#metro_gallery.js"&gt; Everything's css with a call to php in the html. go away /u/leli2000. A pretend framework with no presented code. 
Interesting, did you make this? If so my one complaint is that on dragging side to side, a click still fires if there was a button under the cursor. That stuff gets into tricky considerations of "check if the mouse up was less than n milliseconds from the mousedown, or check if there was significant cursor move since the mousedown, etc, which I'm facing myself. For slow or unsteady clickers, solutions begin to fall apart.
I get this in Firebug console: ReferenceError: Joy is not defined
Hi @cha0s, I've tested here on Firefox 18.0.2 and there is no ReferenceError, what version are you using?
To reverse a string: var reverseString = function(s) { if (!s || typeof s !== 'string') return; var b = []; for (var i = s.length - 1; i &gt; -1; --i) b.push(a[i]); return b.join(''); }
Looks really interesting! Does it have any kind of rudimentary physics implementation (eg gravity, velocity, etc?) I'd love to see a feature and performance comparison against ImpactJS.
Saw melon and thought oh no, that guy again... In mobile, saw mobile support and I would disagree. 
I don't know about others but whenever I see a JS library give all of their samples in Coffeescript I lose interest very quickly.
Came here to ask the same thing. It does look great btw.
Batman is built in CoffeeScript, so it's natural to use it in examples. Actually Batman is not a general purpose framework. If you don't like it, well, don't use it. If you don't work with Rails and you don't like CoffeeScript, you should try AngularJS instead. 
I was experimenting with exponential smoothing algorithms, and made this little trippy number while at it. Hope you guys like it. 
Since you are interating, why create an array? (warning: the "stupid" bitwise ~ is back.) function reverseString ( input ) { if (typeof input != 'string') throw new TypeError var output = "" var i = input.length while ( ~--i ) output += input.charAt(i) return output } 
Probably (some) people don't like to read manuals.
I was dodging asteroids for two minutes before I realized I still had zero points and probably missed the point of the game.
There's certainly more than one way to do this, but here's the suggestion using `$rootScope.$broadcast` implemented: http://jsfiddle.net/AuJyP/5/
Cool.
Yeah I was wondering this too - since he emphasizes completing it in 6-8 weeks time. 
Hi @Lazer, currently joy.js haves a Movimentation behaviour, for acceleration/friction/velocity calculations. - http://joyjs.org/api/classes/Movimentation.html A physics behaviour is planned, but no implementation yet. :)
it's for html web pages
? add jQuery just for a string replace? Crazy.
I've got a 2.5Ghz C2D running Mac OS 10.8.2 and Chrome 24 and it runs just fine.
Well, there _is_ [metro.js](https://gist.github.com/k3n/4755202) (formatted for readability)...
Just a thought. What if your status could be have 3 different values? new, pending, closed. And you want to display this as a message. I would love to display this in a style: {{#if status=='new'}} &lt;div class="new"&gt;{{newMessage}}&lt;/a&gt; {{#elseif status=='pending'}} &lt;div class="pending"&gt;Some text that goes with pending and {{pendingMessage}}&lt;/div&gt; {{#elseif status=='closed'}} &lt;div&gt;This one comes with an url: &lt;a href="{{url}}"&gt;{{closedMessage}}&lt;/a&gt;&lt;/div&gt; {{/if}} Why do you consider this 'bad'? Now instead (I feel) I have to go through all kind of loops to produce the same output! {{#if statusNew}} &lt;div class="new"&gt;{{newMessage}}&lt;/a&gt; {{/if}} {{#if statusPending}} &lt;div class="pending"&gt;Some text that goes with pending and {{pendingMessage}}&lt;/div&gt; {{/if}} {{#if statusClosed}} &lt;div&gt;This one comes with an url: &lt;a href="{{url}}"&gt;{{closedMessage}}&lt;/a&gt;&lt;/div&gt; {{/if}} **and** I have to add statusNew, statusPending and statusClosed to the view object. The template itself has *more* code, and I needed to add extra code to the object, to achieve the exact same result. How does that help readability, productivity and cleanness of code? Or am I missing something here? --- Edit: Now of course I could reform this into {{if status}}{{status}}{/if}-code and deal with the if statements in the js logic. But now I'm writing html in the javascript! Let's put that in different templates then. Now I have 4 templates, of which 3 are one liners... I really don't see how this helps me in any way.
And to actually respond to your post. Any template is *always* a hybrid file. Even with handlebars it's still a hybrid file. So 1) what's wrong with hybrid files? 2) Since even handlebars templates are still hybrid files, why water it down so ridiculously?
'your complex logic'. This is exactly my problem. My 'complex logic' is almost always one liner if statements. Thus not so complex, thus I have to go through lengths to achieve something that really should be simple.
But I think it's more of a case of opening the floodgates. Yeah if you're working on a simple application, but then when you start working on something heavy, you get a tonne of logic seeping into the template and it just makes it a pain in the ass to deal with. 
had to go dig it out, but here is some more impressive 1k stuff * http://www.p01.org/releases/MATRAKA/matraka.png.html * http://skypher.com/SkyLined/demo/PerlinFlames/p4sfx.html * http://www.backtothepixel.com/demos/js/canvas/704.html * http://www.silexars.com/demo/web/creation/
I've been using jsrender for about a year now. While it isn't perfect, it does all logical templating similar to using JSTL with Java
not to mention speed. i still think most people are doing it really badly. really really badly.
Works for me on firefox: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:18.0) Gecko/20100101 Firefox/18.0
It is not about "compiled" code. WebGL is not allowed in JS1k competition. 
how is this different to http://jster.net/?
It's all about encapsulation. Like others have pointed out, the template is where your JS (and backed, if you're working further back in the stack) hits the DOM, and it should be squeaky clean so that someone working on the HTML/CSS can do so with absolutely zero knowledge of JS. As for your one liners, the top post and my post mentioned this is totally possible - I would write a computed property that resolves to true or false depending o the state of the object. Bind to that, and then you can use it in an if statement in your template. It's really not that much more code than writing logic in your template (honestly it may even be the same, it's a moot point), and it makes things much more maintainable - you know that your presentation logic is in the view layer, and your business logic in the controllers, so you don't have to hunt to remember where something is. As your app and/or team grows, this will be increasingly important. Handlebars is difficult to wrap your head around at first because it forces these conventions, but I wouldn't say they're bad conventions at all. 
Again, I think you just need to rethink the way you're approaching this. You could easily achieve your example without logic in your view. First, have a state on the object you're displaying - this can be a computed value based on state, pumped up directly from the backend in your JSON, both, whatever. You're trying to achieve 3 things - changing the text, perhaps adding a link, and changing the id/class of the div. In your view layer, you should look at the state of the object, and set an appropriate Id/class which you bind to in your template. You should also set the text of the message - I'm not sure why you broke out the text in your template into 3 different variables and some static text - just set it in your view layer to a single variable you can bind to in your template. As for the URL, I think that's a base ember view, so you can pass that in to your template easily as a subview without writing HTML and also bind it into your view/controllers so you can do something ember-y with it instead of just having your browser follow it. Then, your template is simple - a single div with a binding for the Id/class, text, and URL. Now your HTML/CSS guy can muck with the template to his/her hearts content without worrying about stepping on your toes, and you can mess with the backing logic to your hearts content (change how state is computed, change the div Ids, etc) without stepping on theirs. Everyone's happy.
I guess I am just the odd man out! It must just be some plugin of mine or something... :)
Believe it or not, JS in this context is still new. It will take time before we can look back and say 'hey remember the days when we could barely run our little JS apps... haha yeah, those were the days...', but it will be a while yet :)
I made a library called [boxbox](http://incompl.github.com/boxbox/) that uses box2dweb. Looks like joy.js and boxbox have similar APIs, so maybe take a look and see if it interests you.
spacebar to shoot
http://jsperf.com/reversing-a-string Well, whaddya know.
Try designing a user interface that matches the device(s) you are targeting. =p
I think its less that you don't agree with it and more that you simply don't understand it.
Same problem in IE9 (I know, I know. Just wanted to see how it performs). Problem there seems to be the use of https for the JS file and http for the rest of the page.
As a point to note, if you use the non RegEx version of .replace, it will only replace the FIRST instance of the string. I think this is a pretty odd behavior but an important gotcha. Also, if you want to pass parameters into your RegEx (Search for term you specify at runtime etc.), you will need to create a new RegEx. eg. new RegExp('cain' + var), since you can't escape out of inline regular expressions / / :). Very concise answer though.
Also if you click and drag off your window it gets stuck to your mouse until you click again.
Damn, that last one was really smooth!
If you like this sort of stuff, have a look at /r/tinycode
Ouch that hurts me right in the age.
Primarily in the ranking system. JSDB considers things like how active or inactive a project is, how many contributors, and such. It is also somewhat more focused on showcasing only the best (therefore less) libraries. Lastly, if given a choice, I pick a cleaner and more minimal tool rather than a busier one, design wise :)
Truly live editing for CSS is pretty powerful too. For example, in Brackets if you put your cursor on a hex color and press Ctrl/Cmd+E you'll get a color picker. With live preview, the webpage updates in real time *while you're dragging* in the color picker. You can't get that kind of immediacy with plain auto-reloading. We're also trying to do other innovative things with our live browser connection. For example, when you put your cursor in a CSS rule, it automatically highlights all the elements on the page that are affected by that rule.
Note that Brackets' "live preview" does more than tools like that: for content like CSS (and eventually HTML) the browser updates on every keystroke, every colorpicker drag, etc. And see my post above about how we're leveraging the live connection for other cool functionality too.
That is hilariously broken in Firefox. Even worse than Windows 8's implementation which I never thought I'd say.
1) I personally don't have a problem with hybrid files but I assume that people are trying to minimise the amount of code so that designers can modify the templates. If there is a lot of code in the file, designers who have no idea about syntax might screw it up. Personally, I wouldn't want to work with a designer who was this stupid. 2) As with (1). From what I've seen, it looks like people are inventing (lots of) their own DSLs for templates. Yet, my personal feeling on this is that there are many people reinventing the wheel badly. What is so wrong with JavaScript that we can't already use it in a template directly without weird syntax? At the end of the day, a high proportion of templates will be created by programmers [IMHO]. So, it would be interesting to see how many designers are actually exposed to these templates and modifying them on a regular basis, and with that in mind, how many of those designers would struggle with actual code in the templates, and if they struggle, whether or not these weird hybrid DSLs actually help at all. My guess is no.
Could you clarify some of the pain points you've experienced?
&gt; there are tricks you can use Well yes... is that supposed to make it sound easy?
A clusterfuck of logic and what not would be the main one
i'm saying that just like how compiled code can use things like compressed executables, you can do similar tricks with javascript
Appending strings in a loop is never a good idea. For every iteration, you create a new string and discard the old one. Using an array, the speed of the algorithm is linear. 
If something like this works for you, you can wrap it in an helper function: if (Number(theform.P_price1.value.replace(/[$,]|\.\d{2}$/g, '')) &gt;= 2500) ....
 p_price1.value=x y= x.replace(”$”,””) a= parseFloat(y) Didn't test this, but it should get you headed in the right direction. 
The last one crashed my display driver the first time I ran it.
Why can't you just remove the $, the .00, and any commas, if any of them exist? If you really can't, I think you should start reading js tutorials.
Great idea, works perfectly. Thank you
That was my issue. Thanks!
Got this error in IE10 when trying the prototype platformer - SEC7112: Script from https://raw.github.com/joyjs/joy.js/master/dist/joy.js was blocked due to mime type mismatch 
&gt; It's just that Turing completeness doesn't mean the language is useful, which is exactly what JL245 said. No it's not, you missed my point entirely. It's that you shouldn't ban a feature, solely because someone might, one day, abuse it. The mention of touring completeness, is a contrived example of how you would already using a system far more easily abused, than a template language. and it's 235, not 245!
I'm not advocating banning a feature, I'm saying there's no sense in developing with Brainfuck. 
Its always a little detail! Haha
Thanks! Keep in mind its a young project, and only going to get better/more comprehensive
You were ... &gt; If you allow js execution within your templates, then someone on your team WILL inevitably abuse that privilege and start writing functions within whiles within ifs within switches... It's an argument on why logic should be disallowed from templates.
If you want to strip anything that is not part of the number from the string do theform.P_price1.value.replace(/[\^\d.]/g, "") otherwise you will get NaN if the value is not entered properly.
You are mostly right, but never say never. It always [depends](http://stackoverflow.com/a/7299040). Different browsers optimize different patterns. http://jsperf.com/reversing-a-string/6 By the way microbenchmarks are pointless (when we are not talking about hot code paths).
Look at the code on the Asteroids game. Definitely using some of these tricks with that _ underscore variable
Maybe I don't really get what this library gives you, but the example on the page said "the requirements change, and now all ajax urls needs to be prefixed with /api". If your code can't handle that already, I'd say that you should deal with that issue instead of starting to monkey patch an external library.
Looks like my weekend activity is decided. :) Seems to run hot for me. I'm not sure if my computer is just terrible. Is there a frame limit/frame request feature?
The example is meant to show the power of the library, not implement an ideal workflow. But I see that I might need to come up with a better example, so thanks!
They utilize canvas quite heavily. Each of the triangles is a separate canvas. Easing helps with smooth looking animations.
You can also write Windows 8 desktop applications using JavaScript. Anybody know if this is also true for OSX?
Awesome! Thanks for the info. Why is iterating specifically in reverse faster? Is it simply because you're just testing for truthiness and not a specific value?
Four spaces at the beginning of each line of code makes it much easier to read. You might want to paste up the HMTL/JS at jsfiddle/jsbin/codepen etc so folks can see the whole thing in motion. 
 function replacetext() { alert("Acronyms have been replaced"); var searchfor = document.getElementById('find_this').value.replace(/\r/gi, '').replace(/[-[]{}()*+?.,\$|#\s]/g, "\$&amp;"); var replacewith = document.getElementById('replace_with').value.replace(/\r/gi, ''); var text = document.getElementById('input_output').value.replace(/\r/gi, '') var flags = 'gi'; if(document.getElementById('case_sen').checked == true) flags = 'g'; var searchexp = new RegExp(searchfor, flags); var rcount = 0; var matched = text.match(searchexp); if(matched != null) rcount = matched.length; test1 = text.replace(/test1/g, "&lt;abbr&gt;test1&lt;/abbr&gt;"); document.getElementById('input_output').value = test1; test2 = text.replace(/test2/g, "&lt;abbr&gt;test2&lt;/abbr&gt;"); document.getElementById('input_output').value = test2; document.getElementById('found').innerHTML = rcount + ' found and replaced.'; } function SelectAll(id) { document.getElementById(id).focus(); document.getElementById(id).select(); } i've formatted the code for ya
You can also do this with Adobe AIR. You can write one application and deploy it to almost any type of computer.
You are one good person!
There are a ton of js libs out there for what you want to do that don't require you to learn a new offshoot language like processing. If you're up to it learn the basics of canvas and webgl, it'll give you a more rounded idea of what kind of lib you're looking for in the future. If you just want simple interaction why not jquery?
Is this a bad question? Why the downvote? I'd be happy to improve if you tell me whats wrong. I've tried several google searches, and looking on stackoverflow but can't seem to find a best practice for this.
I love this concept but the validation has some issues. Typing in /.*/ fails the test for several :-\
Yes - it is matching the cases, and it shouldn't be, so the test fails.
wasn't seeing much response / interest here, so I asked over at StackOverflow: http://stackoverflow.com/q/14837794/363701
It's a classic tradeoff between http requests and bandwidth use. http requests are slow, and bandwidth isn't free. It's up to you to find the balance because you know your needs.
In a general sense, I've had quite a bit of difficulty organizing anything larger than small projects until I turned to the AngularJS framework. It's one-page-app approach and clean separation of view / model / controller really helps scalability, maintainability, and organization.
Seems fairly interesting, but *really* needs more documentation and examples. What are DisplayObjects and Behaviours, and how can I use them? What is the main loop like (how does timing work?), where can I define my own code? How can I make my player character fire his gun every frame; are there multiple ways I can go about doing this, or is storing the keystate and acting upon that the only way? How does collision detection work (per-pixel or collision boxes)? What's with the direction and velocity vectors in Movimentation? How does asset loading work; can I preload stuff or is stuff loaded as soon as I try to inject a dynamicobject into the scene? I've figured most of this stuff out by reading some examples and browsing through the API docs and source code, but I honestly don't think that source code or autogenerated API docs equal good documentation. That said, your examples are nice. Also: an example which tells me how I can integrate for example Box2DWeb (or any one of the various Box2D JavaScript implementations) would be neat.
Backbone-Marionette is the most impressive framework extension I've ever seen, and I use it to build every app I code. Just when you thought Backbone couldn't get any better!
I love it, it's become my go-to canvas library. I've used a few, but ProcessingJS seems to be the most complete solution in my opinion (that might not be true anymore). I used it to develop the intro animation on this website for a friend: http://thevandalpress.com/ Let me know if you want the source I'd be more than happy to provide a sample. It's written in CoffeeScript though... 
Funny you should mention that. I actaully started this App with AngularJS, but decided to move away from it. The learning curve was a bit steep for me, and I was struggling with breaking my old DOM manipulation habits and getting DI to play nice with the Facebook JS SDK (this will be a pretty heavily Facebook-integrated app) __edit:__ Primus sucks
Thanks, would you like to share the code? Or just PM it is also fine. The last few days I tried some ProcessingJS but I find it hard to implement it in the HTML code. Keep in mind that I hate HTML code so it's probably my own fault :P But with some insight in your code it would maybe help me figure it out :)
Unfortunately the directionality of this subreddit isn't clear, there are too many competing "factions", so upvotes are based on whichever group is around. It's really not helping that the moderators are nothing more than ~~curators~~ peacekeepers and have no interest in growing the subreddit. As proof, none of the current list of moderators have posted and commented within this subreddit within the last two months (although I have no way of knowing if they read). Some days a coffeescript article gets downvoted and others it's really popular as an example. There is no need to be upset. Edit: Changed curators to peacekeeper. I'm proposing that the term "Moderators" be reserved for people who are both curators and peacekeepers.
I don't think it is faster. I just enjoy more reading the loop that way.
Noticed MelonHTML requested to have that code removed. Glad I saved a copy.
rofl, now that's comedy.
Is there a reason you're not using jQuery? The way I would do this is bind to the mouseUp event on the map element and then append to the sidebar like so: $('#side_bar').append(newMapLocation)
changed the body to this &lt;body style="margin:0px; padding:0px;" onload="load()"&gt; &lt;div class ="maps" id="map_canvas" style="width: 550px; height: 450px"&gt;&lt;/div&gt; &lt;div id ="side_bar" style="position: absolute; top: 635px;"&gt;&lt;/div&gt; &lt;/body&gt; still no luck
I always did cool stuff like that in Processing, like flocking and stuff, also just as hobby. But it was so hard to share my Processing work, that's why i want to learn the Js version :) I understand your explanation, but not the code, that's not processing? 
Personally, I would tackle it with [ternary operators](http://en.wikipedia.org/wiki/%3F:) like this: contentOne.presence = (dropdown.rawValue == 1) ? "visible" : "hidden"; contentTwo.presence = (dropdown.rawValue == 2) ? "visible" : "hidden"; contentThree.presence = (dropdown.rawValue == 3) ? "visible" : "hidden"; Alternatively, you could start by hiding everything and then selectively show the appropriate content using a **switch** statement: contentOne.presence = "hidden"; contentTwo.presence = "hidden"; contentThree.presence = "hidden"; switch(dropdown.rawValue) { case 1: contentOne.presence = "visible"; break; case 2: contentTwo.presence = "visible"; break; case 3: contentThree.presence = "visible"; } There are other options too, but those are the ones that spring to mind for me.
I found a typo in infoWindow, pastie line 42: infowindow.close();
Right, so it works by first getting a reference to the canvas element and then creating the Processing "context". We then have the set of utility functions that Processing provides. I think the confusion is coming from fact that the script is written in CoffeeScript which actually compiles one-to-one to JavaScript. If you have a handle on what JavaScript is actually doing, I highly recommend CoffeeScript. Some people hate it because it has it's limitations/flaws as done anything else, but it handles a lot of minification and stuff like that inherently when configured. Similar analogy is the LESS framework as a dev layer over top of CSS. I use CodeKit to listen to my dev space, and all my CoffeeScript/LESS files are compiled into an appropriate build directory, then those minified js files are what is referenced by the HTML. Should just provide example. So the main.coffee script actually compiles to this http://thevandalpress.com/visualization/graffiti-universe/js/main.js
Wow, the ternary operator route is so much better. Thanks so much. If I wanted to hide or show more than one element for each dropdown selection how would I group them? Would I need to create an array that contains them and then reference that? Or is there a way to group the fields in the "content.One" area by separating them with commas or &amp; signs? 
I havent worked with jQuery before (I know Im missing out on alot) if you have any easy way of implementing this, im all ears. Also any good place to start learning jQuery would be nice 
OK thanks for the help mate!
this is the line 42 I see mapTypeId: google.maps.MapTypeId.ROADMAP 47 has what you put so I replaced that and no difference the templace has a class called "sidebar", but its one word, not "side_bar" and theres its a class not a id
Oh wow, I didn't even know that. No one here uses Linux so it never even came up. Thanks for letting me know.
You downvoted yourself, that's pretty hardcore. Looks good though, excellent documentation and working examples. The code, while not terrible, could use some refactoring. Everything is in the 1 monolithic file, and there are many conventions you use that are frowned upon: missing braces, lax comparisons (`==` instead of `===`, etc.), and view templates embedded directly in the logic as strings. I'd suggest using JSHint or something similar at a minimum.
I think there probably are enough people willing to have a discussion but only if it is very clear what is asked. I think this one was a bit too vague.
This is correct, but speaking from experience I highly recommend against it. Cocoa is surprisingly simple
node-webkit seems like the best choice to me: https://github.com/rogerwang/node-webkit
Wow this looks super awesome! Can you access the native API's using javascript aswell?
Ah, understood. In order to make this flexible (easy to add things to it later) I would make an [object literal](http://www.dyn-web.com/tutorials/obj_lit.php) to hold all my groups, with each group being an array of content items. This may sound complicated, but take a look at the code: // First, you'd define your groups var group1 = [shark, fish, dog]; // a group for animals var group2 = [cactus, rose, grass]; // a group for plants ... //and so on // Then, create an object literal that holds each group, // preferably with a key that matches the numbers of // dropdown.rawValue var groups = { "1": group1, // assuming (dropdown.rawValue==1) means 'animals' "2": group2, ... //and so on } // Finally, when it's time to show/hide things, you can // loop over each group and its elements to do the rigt // action for (var key in groups) { var group = groups[key]; group.forEach(function(element) { element.presence = (dropdown.rawValue==key) ? "visible" : "hidden"; }); } **A couple things to note:** - On line 18, we're using an enhanced for-loop - On line 21, we're using the forEach function that's built-in to JS arrays - On line 22, we're comparing 'dropdown.rawValue' to 'key' because we matched the keys liked I described Hopefully that makes some sense to you, and if you have some time, I'd recommend going through [Codecademy's](http://www.codecademy.com) JavaScript lessons to see what JS can do.
Yes absolutely, that's what it's all about I think.^^ You have access to ui stuff like creating windows, the filesystem and a database, all from JavaScript.
I've actually been through a lot of Codecademy's tutorials. They're nice, but they don't give you a lot of help when it comes to a new project like this. Coming at JS with absolutely 0 programming experience makes things more difficult, but I've got some other resources on the way that should be helpful. Thanks for taking the time to respond to all my questions!
Great advice! Could you expand on the JS stuff a bit more - with a focus on single page AJAX applications? I have a sort-of funny use-case where I'm building a JS library which will operate on several similar large-scale websites, and I'm making many mistakes along the way, but learning sooo much ;-) Its a weird and exciting departure from my normal JS/JQuery for small/medium websites.
The main issue stems from the need for meta data around the sprite sheet you export. You'll want all your frames to be the same size, this allows you to use really naive math to move your position around like you'd want for CSS no meta data required. Other than that it doesn't really matter what other information it exports, just grab the picture and use the right numbers which you could steal from the meta data file it writes (the json)
Thank you. Can you be more specific in what you're wanting on the JS end or can you link me to your library if it's on GitHub or some other accessible location? The biggest challenge of writing a library is in imagining all of the possible ways that it can be used and making it just opinionated enough to do its thing well, but not so much as to get in the way of its users. When writing application-specific code, it's easy to take the specificity of the situation for granted. Generalizing for a reusable bit across sites is a head-ache, but one that's great learning material. Anyhow, please give me some specifics so that I can better help you. :)
Yeah, writing Cocoa in Python or Ruby code with an Objective-C bridge is just a giant waste of time. It's great to integrate existing code into a Cocoa app, but other than that you're just translating the native API into a language that accommodates it badly.
In Backbone, I think there's a certain amount of conceptual clarity for _.bindAll to be in the initialize function. Declaring a new instance of a class is exactly when the prototype is relevant. Nifty article+tests.
I created Fabric.js specifically to have simple but powerful canvas library without using other languages. It's just good old Javascript. You can find other JS canvas libs here -- http://docs.google.com/spreadsheet/ccc?key=0Aqj_mVmuz3Y8dHNhUVFDYlRaaXlyX0xYSTVnalV5ZlE#gid=0
Demo available? 
This is from Defcon 2008 the video for it can be found at https://www.youtube.com/watch?v=wl1Vii_EBkE Here is a site that has the code from the demo. http://iwantaneff.in/whitespace/
Hi, kenman! I'm grateful that you looked at my code. I agree that it needs some refactoring. As for templates in logic - I'm going to move out them and make localization, but for now I want to have everything in a monolithic file.( Sorry for my bad English :( )
Your English is great! Don't worry about it.
Yes, I use it for: * Linting JS (there is usually some, even on static sites) * Minifying and contcatenating JS and CSS * Validating HTML5 (using the grunt-html plugin) * Running a local server sometimes
It's worth remembering here that, in JavaScript, arrays are essentially objects with a .length property and a few array "helper" methods like push, pop, append, slice, splice. (It's also why the author uses `$.type()` instead of `typeof`.) Treat that like an `interface Array` and voila, jQuery objects sure do quack like an array!
\+{1,2} can be written more elegant as \+\+? There's no such thing, you'd have to make it manually, which would result in an aweful long regex.
I know it doesn't. I'm asking how to make it work. QUICK EDIT: Also, I don't know if I'd call it more elegant. I personally think they express different things conceptually, but if the aim is golf, you win. I mean, they evaluate the same, but I think they read differently, at a higher level.
This looks awesome! Thanks for sharing!
Interesting. Gonna check this out
Awesome work, as always! Thanks for this!
company policy prevents me from sharing my unobfuscated code, but a bit more info on the JS stuff: Its a single page thing, and I'm pulling in all the pieces conditionally with AJAX. There will be enough paths that it doesn't make sense performance-wise to have all the JS loaded up-front, so I'll be ajax-ing that in with specific views. For this specific situation I decided to just drop it at the end of the html partial in a `&lt;script&gt;` element (its a relatively small chunk of code), but for larger pieces, I'll likely use jQuery's `getScript()` alongside the `load()`. Sound reasonable?
Sounds like a good idea, but somehow I cannot get it to work. I get the localhost up and running, can see the 3 different previews they included but when I try to select my wallpaper I get nothing.. The helptext "If you configured the application correctly you will now see the generated wallpaper showing on your desktop." is not helping much either. (OSX)
:-) Thanks!
OK, you're close. Though I haven't yet had cause to use it, I would recommend using http://requirejs.org/docs/jquery.html to include your other scripts. Though I'm sure you can get getScript() to do what you need. I would also structure all of your JavaScript for this into the module pattern. So, in the JS file that always comes in on page load, declare a variable in the global namespace named ProjectName. Make it an object literal with each of your sub-modules registering itself as a new property on that object. Your first module will be already defined within it and will be the logic that coordinates the other modules, loads them, unloads them, etc. Have each of those other scripts be a single module that attaches itself as a submodule to your main object and include an Init() function on the module object that initializes the object and creates any DOM structures needed. The point of this being that your HTML may come in from AJAX requests as-is, or you may end up constructing the HTML through templates or through other methods. Keeping it JavaScript first enables the module to entirely encapsulate the DOM management, data, and events for any HTML that it may need.
That is awesome. So I can basically port any webapp I've got into a desktop background? I should really stop asking questions and just go play with it...
Can't think of how to do the lookahead matches more efficiently. /^[KQNBR]?([a-h]([1-8]|([18]=[KQNBR]))|(x[a-h]|([a-h])x(?!\5)[a-h]|([1-8])x[a-h](?!\6))([1-8]|[18]=[KQNBR])(\(ep\))?)\+{0,2}$|^0-0(-0)?$/
Sorry for repeating the awesomeness but this is really awesome.
&gt; PhantomJS &gt; headless browser Brilliant naming scheme.
Browsers are moving towards implementing common standards rather than away, so that aspect should become better, rather than worse as time goes by. You're only other real option that avoids cross-browser issues is something that runs in it's own sandbox, so we're really talking about Flash/Flex. That comes with it's own large set of issues. If you're looking to pick up a marketable skill when it comes to front-end web app dev, JavaScript, or a JavaScript derivative looks to be where it's at for a while to come.
node.js is actually purely a backend thing. It doesn't work with browsers at all. It's a pretty fascinating platform to work with, I'd definitely recommend taking a look.
I'm not a web dev at all, but I've been learning to code in Javascript lately just for kicks. Why not, right? It's the only prototype language I could see myself using (other than maybe moo). So if for nothing more, at least I gain a better understanding of that one concept. (Also it has a really neat variable hoisting and closure system.) At first I was concerned about: * not having a debugger with memory access or useful IDE * peers belittling and denouncing it * various implementations per browser, derailing EMCAScript * many silly, limiting frameworks to obstruct a proper learning curve But then I learned to make better use of TDD, ignore my peers for denouncing what is actually a clever tool, realized the browser differences are minimal, and that the frameworks really don't add much and are quick to learn in the end.
Javascript is the language of the browser, which is probably the single most important software application out there right now. (Well, maybe Excel.) Do you want to work on storing and serving large amounts of JSON? Sounds like the server environment is for you, and I'm glad because that's hard and I'm not any good at it. But now's a great time to be in javascript. The various frameworks/libraries/technologies are innovating like mad and no one knows exactly what's going on, but it sure is exciting. 
Came here to say the same thing. Arrays are objects.
Yes. Go learn. Keep something like these at hand: [Eloquent Javascript book](http://eloquentjavascript.net/contents.html), [MDN reference](https://developer.mozilla.org/en/docs/JavaScript) Also, yes, use a library, or a module, if you need to. The whole "but I just like normal old-school JS" isn't a sensible argument, and it's a counterproductive way to do things. Any given JS library is literally just a collection of functions that other people wrote, which you can use if/when you need to. If you care that much about knowing what the vanilla JS in the library looks like, you can always read the source code and learn from it. What a library abstracts away – in the context of DOM-related stuff for browser UI work, which you seem to be interested in – is the annoyances and inconsistencies of the built-in browser *APIs*. It doesn't hide the *language* from you. You're still gonna have to learn the *language*. But you can totally save time by not dealing with cross-browser API bullshit while learning the *language*. As for the behavior of the language itself, there *are* cross-browser differences, but they're more in the vein of "Oh, that browser hasn't implemented X and Y from the latest language specification", and "oh look, when you use an Array in this edge-case way, X browser does this and Y browser does that", and generally those are easy to abstract away yourself or with a small library. So basically: Cross-browser differences in *language* behavior? Not a big issue. Cross-browser differences in *DOM/etc APIs* behavior? Much much better than it was 10 years ago, but still fucking annoying, so I'd just grab a library.
Tis one of the gentlest of the programming languages. Plus once you start learning it you can start interacting and doing cool things with something you interact with every day - the web! I started off writing javascript snippits for bunches of tiny little things, and eventually moved onto bigger problems. Good stuff.
require
Libraries like jQuery also handle browser normalization. E.g. if you add a listener via `bind` or `on`, it will work across all browsers right off the bat. Plus, they make working with those horrible DOM APIs way more convenient. All the ugliness was hidden behind a shiny facade. That's why they are that popular. Either way, you have to start with JavaScript itself.
This is really cool. btw, I was wondering: have any of you guys find any app/program that packages html/javascript/css nicely? I've seen a couple here and there, but they all seem to be a hassle for the end user to install/get up running just to use whatever you've made.
Hard to find an example of a programming language that isn't worth learning. You should always be learning new languages! If you target modern browsers, differences between browsers will be rare. Almost non-existent if you're talking about pure JS differences.
windows has had this feature forever :) only problem is you gotta use IE so i can see why you'd replace it with chrome 
I said peers. You sound more like friend material.
what? couldn't they just open the html page with a web browser?
Yup. I remember being excited about Active Desktop when it was introduced in windows 95. You could draw a selection box around any section of a web page and then display that live on your desktop. Damn that was 18 years ago. I feel old.
well yes, but that's not what I was asking. more like a packager that creates an executable that opens your html/javascript/css application. 
still not 100% clear on what you want. you can open a webpage with nothing more than the address bar / title bar? you can get fancy and complex with it but if all you're using is standard html/css/javascript then all you need is a standard web browser. people do more complex things like write C / C++ interfaces or other APIs and then call them in javascript through their builds
well for an example, adobe air, app.js, tide SDK, etc.
For any Linux users, KDE and Plasma are also scriptable using JavaScript. You can create wall papers, widgets, even script the window manager behavior, and you don't need any extra software, it is all run on the internal KJS engine. 
was also wondering if some clean solution for this existed. a scenario off of the top of my head where this might be useful would be a game developer who wanted to package his html5 game as a native application to distribute on steam.
Arrays are objects, but they are also unique in their own way. Arrays have a unique implementation of defineOwnProperty that allows the .length property to be updated when indexes are assigned to.
Heh. Never looked at it that way until now :D
You could, but right now there isn't any way to interact with the generated display, as it's just an image. I used to use Samurize, Conky, and Rainmeter back in the day, so a lot of the ideas from there are manifested in this (Desckit) project. I never used the interactive features of any of them anyway, so I won't be missing them.
Heh, never heard of Neptune until now.
try node-webkit.
It seems that my github repo has broken github for some reason :/ Right now it shows Error 500, hopefully in a couple of hours the issue will be resolved.
document.write does exactly that, write to the document, but the entire document so it will overwrite everything else. What you want to do is something like this: var testDiv = document.getElementById('contentgoeshere'); var innerDiv = document.createElement("div"); innerDiv.textContent = "Hello!"; testDiv.appendChild(innerDiv); *Edit: formatting fail
I don't understand what this is.
[document.write](https://developer.mozilla.org/en-US/docs/DOM/document.write) writes straight to the document stream, and so far as I know, doesn't return anything, so your [appendChild](https://developer.mozilla.org/en-US/docs/DOM/Node.appendChild) call isn't doing any work. If you want to keep it vanilla JS, you probably want to create a DOM node, and use that as the argument to appendChild: var newDiv = document.createElement("div"); newDiv.id = "createddiv"; newDiv.innerHTML = "Hello!"; testDiv.appendChild(newDiv); That said, this isn't really the appropriate forum for this kind of question. Basic DOM manipulation is well documented and there are examples everywhere, so this probably wouldn't even really fly at [Stack Overflow](http://stackoverflow.com/). But please, in the future, try not to dilute /r/javascript as a news resource for the rest of us.
Thank you! But how do I do if I want code instead of plain text content?
you could do var d = document.createElement("div"); d.innerHTML = "&lt;div&gt;text&lt;/div&gt;"; and the browser will parse what you assign as innerHTML as html and create and attach the dom elements in the text string. It's usually considered more correct to create the dom element manually instead of relying on innerHTML, but sometimes it's necessary, and it depends on what you need to do.
Out of curiosity, what books have you written?
Please avoid using document.write. Use the innerHTML attribute or createElement and appendChild/insertBefore methods to add anything to the DOM. This is for a few reasons: - document.write is synchronous, therefore every operation in HTML/CSS/JS is halted while the DOM is amended. - the content of document write will not receive the benefit of error correction. If you fail to close a tag, the whole layout of the page can go to hell. - if the document context is already closed, a new document context will be opened that will overwrite the current one Now for the decision what to use: for adding a single node, createElement+appendChild/insertBefore will be always faster, unless it has more than ~ 40-50 attributes. If you can compile an array of tags, join('') them and use innerHTML, it will be faster for ~ 20-50 tags, depending on the browser/OS/System. Caveat: script tags are not interpreted inside innerHTML for security reasons; style tags will be ignored in IE if they are the first nodes in innerHTML, just add &lt;div style="display:none"&gt;IE...&lt;/div&gt; before them to resolve this.
uhhh okay? I said all of that already :)
This is the state machine I usually use: https://github.com/jakesgordon/javascript-state-machine Is yours different/better? Thanks for posting!
Prototypes properties are shared by all instances. Instance properties, obviously, are not. example: function A(n){ this.whatever = n } A.prototype.example = 5 var a1 = new A(5) a1.whatever // 5 a1.example // 5 var a2 = new A(10) a2.whatever // 10 a2.example // 5 A.prototype.example = 20 a1.example // 20 a1.whatever // still 5 a2.example // 20 a2.whatever // still 10
Every object has an internal prototype property. When doing property lookup (gets/sets), an object will first check if it has the property, and if not, look up the prototype chain. Multiple objects can share the same prototype. You can create objects with a certain internal prototype directly by using Object.create (or the non-standard __proto__ property). Functions have an actual property named prototype that is special. Its meaning is simply that any instances of that constructor will have their internal prototype set to that object.
Nice answer. This is one of those things that everyone should know!
The web is here to stay. As much as Google and Microsoft try to push their own replacements (Dart and TypeScript), JavaScript will always be a part of it, even if only for backwards compatibility reasons. With node.js, JavaScript became an interesting choice for middleware and backend. Performance is no longer an issue, the ability to share code between backend and frontend is - in a positive way. Windows 8 UI, Gnome Desktop, FirefoxOS are all inviting JavaScript devs to hack on the desktop in very much the same way they'd do in the browsers - just with a few tons of added funky features. So the question is not why you should be learning JavaScript, but why you shouldn't be? JavaScript, as simple and useful as this language can be, has a few dark and ugly parts that will always be spotlighted by its critics: type coercion can be as nasty as it's useful, especially when debugging; the prototypic object orientation is not everyone's favorite (it is one of mine, though I like lua's metatables, too). The mathematic imprecision should probably be mentioned, too. The browser differences boil mainly down to IE being unable to conform to standards in fewer and fewer ways every increased version. There are small snippets of javascript (called shims) to work around many of them. TL;DR: learn JavaScript. It's worth it.
Been excited about this for a while! Best idea I've seen in quite a while..
Sorry, this got a little longer than I'd planned! As you may know, in JavaScript there are no such thing as classes and instances. It's objects all the way down! An object has various members organized in what's known as a prototype chain. When you create an object "instance" of a "class" object by using the new operator you simply make a new object which "inherits" its members from the "class" object's prototype. The "inherited" members are not copied, they are simply referenced through the instance object's __[[prototype]]__ (which can often be accessed through the \_\_proto\_\_ member). When you try to access a member of an object the interpreter will look down the prototype chain step by step to find the member. For instance when you do myObject.myFunction() you simply call myFunction in the context of myObject. It will first look for myFunction as a member of myObject ("myObject.myFunction"). If it doesn't exist it will look down the prototype chain of myObject ("myObject.\_\_proto\_\_.myFunction"). Notice that if myObject here is made an "instance" of myClass by using the "new" operator, then myObject's [[prototype]] would be a reference to myClass' prototype (myObject.\_\_proto\_\_ === myClass.prototype). So what does this mean? Many people have a hard time keeping track of all of this, probably because the prototype chain is concealed so we don't have to write out the true reference. Consider the following example, where we use a function object as a class for various persons and keeps track of their legal age: var Person = function(name) { this.name = name; }; Person.prototype = { // Legal age constant for our "class" legalAge: 21 } var mark = new Person("Mark"); // This actually referenced mark.__proto__.legalAge console.log(mark.legalAge); // 21 var jim = new Person("Jim"); // Jim lives in a country with a different legal age // By doing this we create a new property jim.legalAge jim.legalAge = 18; console.log(jim.legalAge); // 18 console.log(jim.__proto__.legalAge); // 21 // Now we actually change Person.prototype Person.prototype.legalAge = 20; // Mark's [[prototype]] is a reference to Person.prototype, so the value is changed! // Remember mark.legalAge is a reference to mark.__proto__.legalAge console.log(mark.legalAge); // 20 // Jim's legalAge is unchanged because we made legalAge a new member above! console.log(jim.legalAge); // 18 // However, Jim's [[prototype]] is of course changed! console.log(jim.__proto__.legalAge); // 20 So there are actually no such things as classes and instances in JavaScript, only the workings of the prototype chain. This can be very confusing for those who come from object oriented languages, especially because the "new" operator acts very similar to what they're used to. To fully appreciate how JavaScript works you need to have a tight grasp of how the scope works. The easiest way is perhaps to experiment a bit by yourself. Please note it's considered very bad practice to actually reference the \_\_proto\_\_ member directly, though for learning it's great to have available!
This was very helpfull, thanks. I still don't really understand why the prototype property is almost allways added(and recommended) for all public functions/variables in a javascript "class" though.
Why do people take the time to leave a comment of this caliber? That doesn't help anybody. At least point the OP in some direction. "Hey, it's on the Internet" is pointless. 
It's because when you use the new operator the new instance object's [[prototype]] will only reference the prototype of the class object, not the class object's actual members! Take this for instance: var a = function() {}; a.foo = function() {}; var b = new a(); b.foo == undefined // true Why is b.foo undefined here when b should get its methods from a? Because b has nothing to do with a, b's [[prototype]] simply references a's prototype. Notice the distinction between prototype and [[prototype]]. New example: var a = function() {}; a.prototype = {}; a.prototype.foo = function() {}; var b = new a(); typeof b.foo == "function" // true! The look-up for foo on b match b.\_\_proto\_\_.foo, (foo on b's [[prototype]]) which is *exactly* the same function reference as a.prototype.foo! a.foo == undefined // true! a.prototype has foo defined, a has not! For foo to be found here it would need to be defined on either a, a.\_\_proto\_\_, a.\_\_proto\_\_.\_\_proto\_\_ ...and so on to be found, not a.prototype! The prototype is what the object will "give on" with the new operator, the \_\_proto\_\_ member (the [[prototype]]) is what it's already received if that makes any sense. a.foo = function() {}; // Now a has foo! // But of course these are not the same! a.foo !== a.prototype.foo; // true // And defining foo on a didn't affect b! a.foo !== b.foo; // true So in the above example you will see that "class" a and "instance" b actually have no direct relationship! b only receives the member properties of the object a.prototype! Remember that a and a.prototype are actually distinct objects with nothing in common! So to explain directly: If we don't define functions and values on the class object's prototype, then nothing will get "inherited" at all! The way discussed and demonstrated so far is not the only way of doing the class/instance scheme in JavaScript. There are other ways, like defining all the functions on __this__ in the class function. function a() { this.foo = function() {}; this.bar = function() {}; this.baz = 2; } Some people do it this way, which doesn't use the prototype chain at all. When you do "b = new a()" here, then the function a will run in context of b as "this", defining all the functions directly on b (not b.__proto__). The downside is that doing it this way makes a new distinct copy of the foo, bar and baz members each time, which is highly unnecessary. So far inheritance by prototype is by far the most preferred way to emulate classes, even though it has certain problems. Sorry, too long again!
What does large scale mean? As in you'll have a gazillion users, a gazillion pages with different requirements, or your app will run on a big ass display, or you have a simple frontend that needs to display huge amounts of data, etc?
OK I actually completely misunderstood the problem last time, but I think I got it. Your sidebar is actually loading, you just haven't applied any styles so it may be hidden behind the map, or have width &amp; height 0. Have a look at what I did with your HTML at the bottom, and the CSS I added to get sidebar in view. It's far from perfect but just whipped up quickly to demo the problem. http://jsfiddle.net/thevandalpress/jPUHk/ PeepCode has the best screencasts on popular web technologies in my opinion. https://peepcode.com/products/jquery
I'm one of the creators of this library and we'd really love to see what awesome things people will build with this! Currently there's many limitations in Canary, like the size of the data you can send and the lack of reliable transport. We'll also release Firefox support once the implementation on Firefox is more to spec. We're actively keeping track of the commit logs on both browsers, so keep a lookout for more updates!
First of all, the separation of concerns: presentation &amp; interaction, data/server communication, application state and the glue code, or bootstrap. Modularity comes as a good solution to solve that first problem. Build with TDD in mind, so start by making your app as testable as possible, think about unit testing, integration testing, etc. Configurability is another principle, so maybe functional mixin is something that can be appealing to you as a design pattern. As another personal choice of mine, I can't think building a large project without using the mediator pattern. MV*?...It's a good start. And don't forget about performance, so choose a good (fast!) DOM manipulation library, be wise about the tools you use for builds. Happy coding!
I was hoping to leave functional specs up to conjecture. But hypothetically, how about big ass data-objects with a need for a dynamic data state (real-time changes in the view), a gazillion users and a few pages?
Use BackboneJS and you'll never need to worry about "big ass data-objects" ever again haha. It also provides ability to attach model objects to view objects and bind to data changes (global or specific) for view updates. Handling a gazillion users is irrelevant, this is a back-end discussion. So I ended up going on a BackboneJS tangent, but if you meant patterns for developing front-end apps from scratch with no frameworks, MVC design pattern is unmatched, which is why a lot of these frameworks provide that foundation for you. Edit: Almost forgot, Test Driven Development. I use this one, check out http://pivotal.github.com/jasmine/
It was answered on hes own question on SO ... dude ... I was just pointing out that in 30 minutes max 100 people could have seen the question and I was not one of them so 30 minutes is a bit short to already ask why noone is responding.
Ill have to check this out. Ive been playing with WebRTC for a few days now and Im pretty impressed. I just scanned your repo so my apologies if you answer it some where in there, but did you guys figure out how to get p2p file sharing working? I set up video chat pretty easily, but Ive been struggling with dataChannel. Any tips?
Here's an important consideration very few people seem to talk about: What's the skill level of your team? You can design some awesome, next-level framework for front-end development, but if your team struggles with wiring up simple click handlers correctly, it's not going to fly. You have to match the complexity of the architecture with the skill level of the team. It might mean educating your team more or it might mean you don't choose a framework or pattern that requires expert level knowledge and discipline to keep clean and working.
This isn't really a pattern, but another common thing I've seen is web apps with like 25 JavaScript dependencies all in separate files. This is suitable in a development environment for obvious reasons, but for a production environment one should almost always look into minifying and concatenating JavaScript into one file. For a simple solution check this out: https://developers.google.com/closure/compiler/ The problem stems from the fact that the browser has to make a separate request for each of the 25 js files, and browsers generally limit concurrent requests so this could potentially slow/block page loads. There are other ways around this, like loading scripts asynchronously or on demand as they are needed. 
Anyone know when ember data will actually be useable?
[I read this the other day, it summed it all up very well.](http://manuel.kiessling.net/2012/03/23/object-orientation-and-inheritance-in-javascript-a-comprehensive-explanation/)
Make sure your code (html, css and js) can be edited and bugfixed by many developers. This means you need to build it so it is easy to understand how the page works when looking at the source code in the browser. This means you should NOT be using jQuery. When using jQuery it is impossible to tell if an id or class is used by js or css, and it is impossible to tell what event listeners are attached to dom nodes. Instead go for something declarative like MVVM (for example knockout.js). 
So this will be a cross-domain request I imagine, and unfortunately would require JSONP which won't work here because you need to post data. So what you will need to do, is write a PHP script (Or any preferred technology) to proxy your request. Then you will make your requests to the PHP script, it sends the request to the service, and then streams the response back to you. Also, your life will be a lot easier if you script ajax calls with jQuery like so: http://jsfiddle.net/thevandalpress/kRqx9/
I'm doing it from my localhost now.. and it seems to be working with IE. It is cross-domain. Am I not posting data this way? I would think, because they have it setup, that they allow the cross domain posting of data to their api. I don't know much about that kind of stuff, this is my first time using json or an api. It was a few hours of frustration today to get this working. Yeah... I will probably do an update for jquery, as I only need to do it with javascript (because they don't want to load the library for what we are using it for....) Are you saying once I take this off my local machine, that it won't work? edit: I am not arguing with you at all.. I don't know crap about what I'm doing here. So if it appears that way, its just me asking questions. thanks!
Yeah pretty sure that's going to be a problem, but not a huge one because its a common problem and you should be able to solve using solution I described above. This is all due to browser security, for obvious reasons we can't just allow any and all scripts to request and execute whatever they want. I updated the JSFiddle, Run that and watch the console: http://jsfiddle.net/thevandalpress/kRqx9/ You'll be able to find a PHP proxy and maybe even a tutorial if you do a quick search.
What are your thoughts on MVVM?
As a rule of thumb: If you need to get answers to this question from this subreddit, you are probably heading for premature optimization. If you indeed get a large amount of traffic/content/whatsoever you can still go a long way by optimizing poorly planned out infrastructure with some simple quirks afterwards. Facebook used to run entirely on PHP.
It's really going to be governed by what you're trying to build and where you're trying to build it. I believe MVVM is a .NET thing, I've never used it in design, but they all revolve around MVC. I have several HTML5 apps in production and they're all implemented with BackboneJS + Backbone.Marionette. That said, the exact same thing could have been produced using knockout.js or AngularJS but I fell in love with BackboneJS
Software I'm running on is .net and c# so ill end up working with that first, buy will probably look into doing a PHP one. I'm on my phone now, so ill check it out later on. I appreciate the knowledge. Thanks. 
Saw this earlier today. It requires a lot of crap installed and only works on macs.. We want standards! (But not for our tools?)
As for the **this** method vs. prototypes, keep in mind that you can mix and match: function a() { this.foo = function() {}; } a.prototype.bar = function() {}; This is usually done when you want to start creating private variables and methods: function a() { var privateVar = 10; function privateFunction() {}; this.foo = function() { return privateVar; }; } a.prototype.bar = function(){}; a.prototype.getPrivateVar() { // this does not work. can't access privateVar here. // and privateVar is not a property of a. return privateVar || this.privateVar; }; 
This is pretty sweet. Another example of how every browser tab is becoming a full-fledged server. 
Things you must learn right now to do js app development: jQuery and require.js, because there is really no replacement for either of them. Beyond that there are lots of options for frameworks small and large to help you get going, backbone is nice if you're already familiar with application structure, otherwise you might want something heavier like Ember (I dont have experience with anything besides backbone, though). Also, coffeescript and underscore.js have saved me a ridiculous number of lines of code and as a consequence effectively shorten the prototype feedback loop.
So currently in Chrome you'd have to implement reliable transfer (complete with ACKs) in order to build a file sharing app on top of PeerJS. This isn't too hard, but I would recommend you wait a few weeks, when the Chrome team releases a version of Canary that will support a larger MTU and reliable transport, to build such an app...or a lot of work will probably just go to waste. I think there is already a file transfer demo circulating the WebRTC-sphere that built reliable transport on top of the current DataChannel implementation--it's REALLY slow.
It's an internal development library they have open sourced. I'm not sure why internal tooling has a standard to meet.
I just made a tutorial on github about this exact issue. https://github.com/fasteddie31003/prototype-tutorial
I found Canvas to be a great place for honing core Javascript. It's a fun domain to work in (graphs, visualizations, games, animations, image manipulation, math, etc). You aren't confronted with the DOM at every turn, you're forced to think about performance and memory if you're doing anything with animation, you will probably find great reasons to use common design patterns and algorithms and it's likely familiar territory to start when coming from another language. I never really subscribed to the idea that people are irreparably damaged by shortcuts. If anything, core javascript is easier to learn when you aren't banging your head against the ugliness and compatibility nightmares of DOM, Events and AJAX. When you can write real javascript, those are just a handful of important eccentric APIs with nuanced implementations, provided you spend the time to go back and learn them.
Simple 5 step process. **One.** Go to code academy, and unless you are feeling really confident in your CSS/HTML then take the [web fundamentals](http://www.codecademy.com/tracks/web) track to start things off. **Two.** Next work through the [Javascript tract](http://www.codecademy.com/tracks/javascript). **Three.** Then read this [free online javascript book](http://eloquentjavascript.net). You can do #2 and #3 at the same time if you want. **Four.** You should be proficient in Javascript. Try to create you own javascript project. Set a clear objective, give yourself no longer than 1 or 2 weeks to finish it. Work on it every single day until you are finished. **Five.** Head back to code academy and do the [jQuery track](http://www.codecademy.com/tracks/jquery). Now, you're ready to begin, start making fun projects, and continue to learn. After a while you'll want to pick up a library, [like Ember.js](http://emberjs.com/), which will make things a lot easier, but obviously there is a lot for you to learn before you are ready to really use a library like that. Good luck!
I agree that the developer tools in Chrome are way better than in Firefox these days. But why discourage Firefox plugin development in favor of Chrome? Yeah, Chrome's outlook (and maybe installed base, I don't really keep track any more) is better than FF, but if OP uses FF, he should develop for FF.
the jquery example seems the most readable.
MVVM is not a .net thing, it is based on the fowler pattern called the presentation model (is really identical to it).
i don't consider their license open or free. http://www.gameclosure.com/GCFL-1.0.pdf
I did book first, Codeacademy second. Personally I feel like this works better in cementing what you covered in the book. Granted, I didn't read Javascript: The Good Parts. I read Head First Javascript, so your mileage may vary, but I felt like was a much better way of cementing what I had covered in the book. Initially I had tried Codeacademy first but the practices and descriptions are so vague that it doesn't give you a solid understanding of the language and what can be done with it. You really can't go wrong wither way.
Technically, Backbone is MVVM. The "View" in Backbone is not much more than a ViewModel for an HTML template.
The lead applications engineer at my company forbid me from touching jquery until I had a solid knowledge of Javascript. Now I understand why.
http://toms-cafe.de/iban/iban.js - here's a commented version in JavaScript. You can simply use a regex to match multiple IBANs. result = []; input.toString().replace(iban_regex, function(iban){ result.push(checkIBAN(iban)); }); 
It's dual licensed under their own license (unusable because of 5.) and the GPL3. [See Here](http://www.gameclosure.com/license.html). [See Here](https://github.com/gameclosure/devkit/blob/master/LICENSE.txt). You have a choice legally, but it's effectively GPL3. It's Open Source and it's free. Reddit wisdom rewards brrose trolling. Not a surprise.
You can also try to verify the check-sum / correction of the IBAN number. If I remember correctly it uses modular arithmetic on two numbers of the IBAN code itself. --&gt; http://en.wikipedia.org/wiki/International_Bank_Account_Number#Validating_the_IBAN
Broad segmentation of responsibility (this is why MVC is popular, not a lot of arguing about where to put stuff when there's only 3 conceptual parts). Modularity of functionality. Not all large system designs articulate these principles, but they allow for parallelized and unobtrusive (for the most part) development.
Would be nice if you mentioned in the readme that this is a visualisation wrapper using https://github.com/philbooth/complexityReport.js (the visualisations are quite nice, the actual value of cyclomatic complexity/maintainability metrics always seem rather fuzzy to me)
looks interesting, I might give it a try this weekend
I guess my big three are how does it make life easier as a developer, how easy is it for new people to join the project and learn your methodologies and does it let me do things I couldn't do before or does it let me do them better. Over the past 3 years I've moved from everything stemming from DOM ready, to my own class based system each class it's own script include, to concatenating and modifying the whole thing manually, to backbone, to requirejs, to having the whole optimisation process taken care of by my backend asset management pipeline. Each decision was looked at with a variety of requirements in mind but those 3 have held true for all.
Design a webpage. Use this app to take a screenshot of that webpage every X seconds/minutes. Display that screenshot on your desktop.
Source that it only works on macs?
An example for Twitter Flight unfortunately didn't make it into the release, but will probably land within the next days. If you're interested: https://github.com/addyosmani/todomvc/pull/442
code academy is good but I would suggest using code school. Also eloquentjavascript.net is fantastic. I check it out sometimes just to get a refresh and the online version is great. It provides a little environment to write code while your reading.
COOKIES AND KARMA FOR YOU ALL!
 this[472881249021..toString(32)] == document
Ordered from Amazon, but they are having trouble "finding it" lol. &gt; We're still trying to obtain the following item[s] you ordered on February 07, 2013 - Callum Macrae "Learning from jQuery" &gt; Still want it? We'll keep on trying. To keep your order for this item open, please click the link below. Otherwise, we'll cancel your order on March 17, 2013, if we haven't located it by then. 
The methodology comes from what you are trying to build. You can't separate the two. So to ask without even a brief description is pointless.
There is some mixed up logic in the third paragraph, regarding the first example. &gt; In this example, it seems like “hello” should be logged to the console, because the logging statement comes before the variable statement. This is the other way around in the example. The variable statement comes before the logging statement. &gt; The variable declaration is hoisted to the top of the function, as if the first line of the example function was **var hello;** var hello doesn't exist in the example; it's *var foo*
First off, this is really cool, static analysis can yield a wealth of information. However, I don't know whether the kudos should go more to this project or the `complexityReport.js` project, which weretree points out is the heart of the metrics gathering. Either way, I'm having fun playing around with it! Some usability feedback: * I can't choose to drill-down (such as by clicking a bar in a graph) in a new window; I can only navigate straight to it from the same window. While this is a common single-page web app paradigm, this isn't a single-page web app: the target pages for each of the reports is hosted on its own URL. If possible, I think it'd be useful if the drill-down links were actual anchor links instead of being handled strictly with JS. As is, I can't open up multiple drill-down reports at once to compare side-by-side unless I load the entire page multiple times in different tabs. * Some of the drill-downs take an absurd amount of time to load ([example](http://jsoverson.github.com/plato/examples/uglify/files/lib_compress_js/index.html)). I have a core2 quad CPU with 8gb RAM, and that page took 42s to render and there was no indication that it was doing anything until it magically springs to life once it completes. Chrome's task manager reports 25% CPU usage for that one tab. I realize that the example is a very large and complex file, but that's going to happen for many projects and I can only imagine the more 'problems' that are found the more it's going to slow down.
http://docs.gameclosure.com/guide/install.html#prerequisites Could work on other OSes with some small changes since the toolchain works on top of git, node.js, java and chrome... everything cross-platform.
Added this and where the lint data comes from in the README.
This project isn't meant to and doesn't wrap only one library, it's a tool to generate and aggregate data on a project level and display it visually. Right now the tool only reports on complexity (complexity-report) and lint errors (jshint), but is being expanded for code coverage. The performance likely comes from using codemirror as the syntax highlighter. It's heavier than is necessary right now but is the only one that offers a decent api. I'll profile it and see what else can be improved.
I don't really consider Stallman's position free and open either. I did read the license and I understand what dual licensing is, but does it allow you to do what you wish? no. can it be described as free if it comes with caveats?
Restricting/setting the height of the editor might help, codemirror and ace (similar project) are optimised around showing partial files in a scrolling view I think. (Most of the time is spent inside setting the gutter/line annotations, could be it's rechecking heights or styles for the entire editor each time one is set, can't check quickly due to minified codemirror)
This article seems to confuse parsing the source with executing it, which I think leads to confusing statements. Before a function object is fully created, all of its source must be examined. Once this is done, the lexical context for the function is complete. Only then can the function be executed.
If it only works in IE, then congratulations you have broken the internet...
I'm not sure exactly how the YUI framework works. But in the MVC pattern you want to put the logic for API interaction in the controller, and let the controller push a model to the view.
Look up [event.preventDefault](https://developer.mozilla.org/en-US/docs/DOM/event.preventDefault).
Maybe with more code I could help you with it. But more importantly, if you run it in chrome or firefox, do you get any errors in the Javascript-Console?
I like how this guy is tagged as a 17yo male. Kinda fits the annoying response.
That's the thing, I don't get any actual errors. I'll paste up my code, was just hesitant to post the entire thing.
I would use backbone.js
http://pastebin.com/CDKmr1dU My loanregistration.js http://pastebin.com/PpGcwAUi My utility.js http://pastebin.com/XegYKkzZ My html form that I used to collect the values.
If you have an idea for me... I made a post over at c#... I think I'm just missing something. Didn't know if you wanted to check it out. Thanks. http://www.reddit.com/r/csharp/comments/18lbfm/webrequest_class_need_a_little_push_in_the_right/ 
Mine is extremely different, which is why I posted it. Usually people structure their state machines as either event driven (like the one you posted) or as procedural (messes of switch/cases nested in switch/cases nested in if/elses nested in switch/cases that become terrible messes). My approach is based on composition where you compose the control-flow bit-by-bit which avoids the mess of nested nests of nesting and allows more modularity in structure and flexibility than event driven approaches where everything is orchestrated by an external machine which is attempting to maintain state. A state machine written using my approach will result in more of a stateless machine, you put state in one side and get state out the other, but it doesn't maintain the state or pay attention to it, so you get to worry less about state, for instance the eat/rest machine in the example from your lib would be written like: var rest = sleep.then(hungry); var eat = hungry.then(satisfied).or(satisfied.then(full)).or(full.then(sick)).or(dead); var newState = eat(currentState); notice the last part being where you see, the eat function doesn't have state, but knows what to do to state when you give state to it. The eat function is just a composition of other functions which acts as a machine to state, rather than a machine with state.
Codeacademy is getting better with some of their vague instructions. From my experience the vagueness occurs only on the later lessons in the javascript track, especially in the Dimensional Arrays lesson. 
It's time for a hoisting link, everyone! Gather 'round. Next time: "Closures!"
Interesting, I totally missed that when giving it a glance over. That's disappointing.
I would rather work with Mozilla than with Google, just a personal preference. Don't get me wrong, the Chrome browser is fine and at some point I might make something for it, right now I want to focus on this app for Firefox. Without going into detail I am making an open source intelligence framework/toolkit(well that's my plan at least). I am currently an undergrad in a Computer Forensics degree, but I'm starting to become interested in web development.
I was hoping for something about prototype-based OO ...
[Well?](http://weknowmemes.com/wp-content/uploads/2012/11/dost-thou-even-hoist-meme.jpg)
The question doesn't really make much sense to be honest - if jQuery does something for you, use it. That doesn't mean, however, that you can use no javascript ever, because jQuery by its very nature *is* javascript. I'd maybe use native javascript if I'd taken tonnes of crystal meth and decided to spend the day re-inventing wheels. 
jQuery is essentially a group of javascript functions, also known as a library. "a library is a collection of implementations of behavior, written in terms of a language, that has a well-defined interface by which the behavior is invoked." So its like having a bunch of prewritten code that is tested and documented. You use it to make life easier.
Where do people get this idea that jQuery is somehow a replacement for JavaScript? That's crazy.
When I want to execute javascript code right when the page loads and jquery isn't loaded yet (so before the jquery loading tag)
Seems like &lt;input type="reset"....&gt; doesn't do your expected behaviour. I can't find on the internet the expected behaviour for reset. But it seems it will always reset all the visible text boxes, regardless of the return statement. Edit: just saw that /u/savetheclocktower posted the solution.
So, would I be better off spending more time learning jQuery or mastering Javascript? That is what I was trying to get at. I know all the fundamentals of JS, and began studying jQuery and am noticing how much easier it is to use.
jQuery would do a better job of handling browser compatibility. You'd still be working with javascript none the less so.... huh?
jQuery *is* Javascript. It's like asking, "when would you use wood instead of oak?"
**Use Javascript** when the task is easily handled by straight-up js. Writing to the document, simple DOM manipulation, basic timers, etc. **Use jQuery** when you are willing to slow down your page-load by including an extra asset because you need to perform some task that is made much simpler by the library. Selectors, animations, ajax, etc. The important idea is that you want to keep your code as lean as possible. Do you really need every feature of a large (albeit very fast and widely cached) library like jQuery? Can the task be done in less javascript? Learning javascript will teach you everything you need to know to work with jQuery, and it will also translate well to other technologies such as nodejs. 
The answer I was looking for. Thank you.
I wish I had your posts a few years back when I was learning this, ha. You summarized in 2 posts what took me what seemed like months to figure out. There were no easy to understand explanations of .prototype that I could ever find.
Hi there - I've contributed to parts of the [YUI App Framework](http://yuilibrary.com/yui/docs/app/) (mostly synchronization layers for local storage and Socket.IO), and I'm the author of the [TodoMVC](http://todomvc.com/) YUI App Framework example. For people that aren't familiar with YAF, the API was inspired by Backbone (differences mostly include a more coherent way to structure large applications with many Views, and better integration with the rest of YUI). The design patterns that I discuss here are useful in Backbone too! Models in YAF basically act as an abstraction between a specific data object in your application and how you create, read, update, and delete that object from your application's API. Usually, you structure the models you're using based on how the data from your API is structured. For example, if you usually get a specific user from your API with a HTTP request like: GET /users/brocolliRobb and update information about that user with an HTTP request like: PUT /users/brocolliRobb You can create a User model that abstracts those HTTP requests so you don't need to write the AJAX requests yourself. Usually, the way to go is to create models based on the specific data that you need for a particular view of your application. For example, if you're making a news feed, you might need a Model List (Collection in Backbone) of Users, and a Model List of Posts. It's just about finding the best way to separate out different parts of your application so it's easier to reuse and refactor those different parts without having to re-write too much code. Usually, this is dependent on your specific application and your JSON API, so it's all about what's easiest for you and your team. You can take a look at how the [YUI TodoMVC](https://github.com/addyosmani/todomvc/tree/gh-pages/architecture-examples/yui) is structured, though it does use localStorage instead of a REST API to synchronize data. If you need any more help with structuring your application, feel free to ping me @clarle on the #yui channel on irc.freenode.net, [@clarler](https://twitter.com/clarler) on Twitter, or just PM me on Reddit. For everyone else, definitely check out YAF, there's a lot of interesting things it has that Backbone doesn't have, and it's under just as much active development. :)
I've always disliked the term "hoisting" for this reason -- too imprecise.
awesome lead, it was exactly due to excessive display updates in codemirror and I was able to batch them for huge improvements. I just pushed 0.4.6. Thanks again.
Just pushed a new version with performance improvements, more info [here](http://www.reddit.com/r/javascript/comments/18k9uh/platojs_javascript_static_analysis_and_complexity/c8fxdo6)
&gt; This article seems to confuse Agreed.
/r/javascript: where you can get reliable homework help, but only by paying in downvotes. 
It's like asking what the best way to build a house is. There are different construction methods depending on if it is 1 bedroom or 50. If it is greek revival or art deco. Your question is too vague to be meaningful, hence the answers you are getting.
Thank you, I actually kept the original as is, I think it works now that I have DISQUS embedded. don't know why
Oh wow, lightning quick now! Very nice.
Awesome! This is exactly what the web needs to move forward. The only way to make the language faster at this point is to take as much of the sloppy crap out and focus on compilation in the JIT. 
If YUI App Framework wasn't a requirement, I'd recommend an MVVM (Model-View-ViewModel) pattern, using [knockout.js](http://knockoutjs.com/). Even if you can't use it on your current project, check out its tutorials so you at least know about it and how it works as it'll likely come in handy in the future.
I have found that you can program almost anything in JS by keeping to the basics and keeping your code simple. That is to say become very comfortable with loops, arrays, functions, variables, and such. The basics. Perhaps the most important quality to learn with JavaScript is closure, which is one of the languages two means of natural inheritance. I strongly recommend avoiding use of the keywords "new" and "this" in your early learning phase. Those keywords allow conventions like prototypes, pseudo classes, constructors, and other complications that people new to the language tend to frequently screw up. Don't waste your time learning stupid conventions like these when you can be learning to write more simple code and actually solve problems directly. If after you have gotten comfortable with the language you want to experiment with these things then fine, but at least by that point you will have a better idea why these conventions are valid or not. Cheney's Law: "Technicians willing to increase productivity by way of convention contrarily become sufficiently productive increasing conventions." **EDIT** One other thing that will also help you to learn to write application code in JavaScript is to always separate the parts of code that need an API from the actual application code doing the real work. The DOM is an API into HTML/XML for instance. 
will there be english localization or is it russian only?
Sounds like a good idea. My brain feels like jelly trying to move from my old way of coding to an MV* model.
i looooove firefox. but i use chrome for developing. dev tools are the shit, and atm, better than everybody else's dev tools. of course, once you're debugging for a particular browser you're going to want to use their dev tools. so to answer your question, chrome's are superior....but this may just be a case of what you and your professor are comfortable with. firefox has always been good for html/css issues for me. i love the view generated source feature for debugging ajax issues as well. 
me
Me too. HTML/CSS has been easy for me because of Firefox. I'll thank it forever due to 3d view.
I second this, awesome framework.
I do. Their tools have improve greatly in recent releases, to the point that using Firebug is almost unnecessary (save for a few corner cases).
the bsd license.
As much as I like AngularJS, I probably wouldn't recommend it to someone new to Javascript, unless you're part of a team who knows Javascript. Angular is fantastic in how it removes almost all boiler plate code for you, but sometimes you get into situations where you really need to understand JS and Angular to work it out. So I guess I would recommend looking at Backbone before diving into Angular.
The BSD license operates the exact same way. The responsibility is different.
What kind of applications?
http://www.reddit.com/r/programming/comments/18l8j8/asmjs_a_strict_subset_of_javascript_that_can_be/
It's turtles all the way down.
If you have troubles running it try using firefox or actiavte experimental language features in google chrome. It uses a non standard version of javascript using the "let" keyword... 
&gt; entirely canvas based UI toolkits could be possible Terrifying.
I've started to think that Backbone's "Views" are really controllers. The real view is the DOM.
It looks really cool. It's just a damn shame that I can't get it to work on windows...
Just... glorious. I'm impressed by how well it performs.
This is fucking amazing and great validation!
*future standard. let is in Javascript 1.7
I saw that exactly one day after I posted :/ We've already registered an npm package for our lib with the middleman name. Also, the name is perfect for the concept, and the `.js` at the end distinguishes it somewhat. I might add a link to the ruby library to help avoid confusion.
array.length, not array.length()
Is that only java? EDIT: Oh gosh, the burden of being a programmer. Thank you very much mate! :D
It's easier to just use array.sort(); although your example asked something different. 
:) I'm pretty sure that would be pretty helpful but I'm still at a beginner at things in javascript and I hope I encounter that one in the near future. Thanks!
Here's a simpler but probably slower way of finding the max in an array: console.log(Math.max.apply(Math, array));
Array.prototype.sort mutates the array. It could be an unacceptable side effect if you are just looking for the max value.
Also, your algorithm returns an incorrect result if the array contains only negative numbers, or if the array is empty. I know you're a beginner, but it's good to start thinking this way early on.
&gt; Now within any global function, value of this will again be window object. Except in *strict mode*. 
Holy smokes that's amazing! Thank you for pointing this one out! :D
I know it's pretty basic, but I'm currently trying to expand my knowledge of JS by making small projects!
The API is going to be different for each language. In Python, for example, it's not even a method but a function that works with any itererable: `len(iterable)`.
Slower? I'd hope Math.max, being a function that should be native code, would perform better than a for loop in script. It'd be interesting to run a comparison test with arrays of various sizes / levels-of-sortedness.
Gotta remember that there are always a significant portion of readers who are new to both this subreddit and javascript in general. I think it's good that these people learn using recent content as it is typically more relevant.
I love it, but that's not my point. I'm only suggesting that each language is going to be different, even if the syntax style is C-like. You get used to it pretty quickly. Keep an eye on the documentation for the objects you're using and try things in the interpreter and you'll be grand. Interpreters (like `node`) are amazing tools, use them to test your assumptions when you run into issues.
How about we add links to some decent tutorials to the sidebar, so we don't have to post articles about the same topics over and over again? I'd prefer to see more stuff that's actually new.
Reposting is generally frowned upon on reddit. Your post is just the same old stuff rephrased (in a slightly more confusing manner).
Here's [the section in the documentation](http://yuilibrary.com/yui/docs/model/#restful-xhr) about how to set up a model for fetching/updating data from a REST API. Once you set up your model like that, how you use the model just maps a few methods over to the four HTTP requests (GET/DELETE/POST/PUT): * `Model.load()` is the equivalent of a GET request on your API * `Model.destroy({remove: true})` is the equivalent of a DELETE request on your API * `Model.save()` does both POST and PUT. If your model already exists on the server, then it'll send a PUT request to update it. If your model doesn't exist on the server, then it'll send a POST request to create a new one. YAF determines whether your model already exists on the server or not by the 'id' attribute in the model, so that's how YAF determines which request to send. Let me know if I can help out in any other way!
I thought the one on Array#map was good. The one 'What is an array' should have talked about ES5's isArray, and in general I didn't really like the article. The one on sorting was the first one I saw, and thought it was good enough. Looking through the archives, it looks like the one on default parameters is pretty good. The one on arguments okay. Anyway, point being, I think you are on the right track. By Who is your target? I've been coding javascript for the past 3 months at my day job. I come home and write either backbone.js or node on my side projects. I'd say I'm pretty intermediate user. Are you catering me, or are you catering people who are new? 
There is only one rule: **It's the object before the dot.** Example: var foo = function() { console.log(this) } var a = { fn:foo }; var b = { fn:a.fn }; a.fn(); // **a is before the dot** // console.log: a b.fn(); **b is before the dot** // console.log: b foo(); // **no f'in dot** // console.log: window/global/undefined The object you're calling the function on becomes *this*, it's not rocket science. 
Initialize `largest` with `-Infinity`. (Unsurprisingly, `Math.max()` will also return `-Infinity` if you call it without any arguments.)
yeah, real practical.....
True, but in the given example question (get highest value in array) this is not an issue. var array = [15, 36, 27, 42, 80, 13]; array.sort(function(a,b){return b-a}); console.log(array[0]); (or, without a function in sort) var array = [15, 36, 27, 42, 80, 13]; array.sort(); console.log(array[array.length -1]); output in both ways: 80 edit: downvote? Please tell me what is wrong with the above example so I can learn from it too. 
Most of the issues I have with Chrome are marked "WontFix" in the issue tracker and closed to further discussion. Like I expect the middle mouse button work a certain way, and Chrome falls short of that expectation in many respects. It'd be ok if they made those things configurable, but they don't and won't. It's the same reason I don't like most Apple products. Firefox on the other hand is very configurable. I gave Chrome a chance for two years, and got sick of the frustration. Chrome is designed for one person, who is very different from me, while Firefox is designed for everyone. So I use Firefox for normal browsing, and use Chrome for alt accounts and testing. I don't use Firebug because it tops the list of things that slow Firefox down, even when not being used, and most of its features now have equivalents in Firefox's built in web developer tools. There's even a javascript debugger now.
Not sure what you're programming in, but if I dump this code word for word into chrome I get: *TypeError: Property 'length' of object 15,36,27,42,80,13 is not a function* Which is quite a clear error message
Hi, interesting code. The single best improvement would be to move your composition to JSON. So, just interpret it to build your objects. That might end up simplifying your parsad.
That's not really composition then... http://en.wikipedia.org/wiki/Function_composition_(computer_science)
EDIT: build your functions.
Strangely enough, on Chrome 26 it works for me only if I leave "Enable Experimental JavaScript" disabled. It looks like maybe ES6 got enabled by default at some point and now the flag means the opposite of what the text says. 
Agreed there have been a lot of hoisting and closure articles already.
Lol that's Error: Failed to generate appropriate response. The details have been logged in /tmp/error.log
Well, the loop seems to be doing well on my computer (except in Safari, where they kept apace). Running OSX 10.8.2 64bit. * Chrome 24 - loop wins by 2x * Firefox 18 - loop wins by 3x * Safari 6 - max slightly better, neck and neck * Opera 12 - loop wins by 4x 
Sure makes sense :) I've got something out of all posts except the one array one, so that's pretty good. I'm self taught, so I'm sure there are some gaps in my knowledge.
You don't find the then/or/until functions a clear way to use the char/getString/pushString etc combinators? Could you please elaborate what's confusing about using them so I can better learn how to sell monadic concepts to JavaScripters? I really value the feedback.
You should check out prollyfill.org and join the w3c extensible web group as we are working on things very similar.
The var form will be required in order to assist in resolving circular dependencies through declaring as undefined then later defining them, so be prepared for that. I don't use the var form much however.
Also, a `drop` function to skip the first `n` elements, function drop(iter, numberToDrop) { while (numberToDrop-- !== 0) { iter(); } return iter; } 
Felix has a decent guide for Node.js, that I also apply (mostly) to my front-end code as well. I completely disagree with space indentation, and used tabs myself. http://nodeguide.com/style.html
Thanks for the suggestion. I just joined.
I shudder to see the code of the people who are downvoting you. I agree 100%, if I'm writing serious JavaScript (anything more than one onReady function) I run it through JSLint.
I tend to try to write clean javascript code that follows the SOLID principles and I try to keep code DRY ( you can look up the acronyms). But in addition here are a few javascript best practices I've come across and taught in technical presentations: * Always include a curly braces on the same line instead of the next line. In other languages it doesn't matter, but due to javascript interpreters automatically inserting semicolons, you can get strange behavior. * Always include semicolons. This is a touchy subject and people are very opinionated, so this just my 2 centers. Being explicit has helped in a few situations. * Use the single var pattern and declare variables at the top of a functions scope. * Use the Revealing module pattern * Separate UI code from application logic and use a framework (ie , backbone, ember , knockout, angular, whatever). * unit test your javascript, I personally use jasmine BDD style tests, but people like all kinds of frameworks (mocha, qunit). * namespacing . There are a few patterns for this, but having your code namespaced is important * avoid EVAL * careful with closures and overusing them as they can be a memory hog. Everything in these books: * [Clean Code](http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) While Not specific to JavaScript, this book has a lot of good advice on writing clean, readable and maintainable code. * [JavaScript: The Good Parts](http://shop.oreilly.com/product/9780596517748.do) * [High Performance JavaScript](http://shop.oreilly.com/product/9780596802806.do) Good luck and sorry for the long post!
JSLint is one thing, but some of Crockford's conventions are a bit much.
Given hoisting, when is that necessary?
Infelicitous question. (Alway|Never) use semicolons. Use ([842] spaces|1 tab) indent. Put the fucking curly brace on the (same|next) line. (Follow|Avoid) DC words as if he is your (only god|worst enemy). (don't?)use JSLINT. And so on...
Thanks! An earlier draft of the post used a `crop` function with the same semantics as `Array.slice`. I'll retrieve it and post it. in a moment... update: function crop (iter, numberToDrop, numberToTake) { var count = 0; while (numberToDrop-- !== 0) { iter(); } if (numberToTake) { return function() { if (++count &lt;= numberToTake) { return iter(); } else { return void 0; } }; } else return iter; }; `crop` has the same semantics as `Array.slice`, so at the risk of creating a swiss-army-kinfe-function, you can use it to drop, take, or both.
Yeah, I use [JSLint for Sublime Text 2](https://github.com/fbzhong/sublime-jslint). The only thing I use really.
Feel free to use [Google's conventions](http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml) instead. Inventing your own conventions is generally a bad idea. It's a massive time sink on its own. There will be useless discussions on top of that. And to make matters worse, the chance that anyone is already familiar with them will be zero.
&gt;Put the fucking curly brace on the (same|next) line. Thankfully, there is only one option in JavaScript. Putting it in the same line is the only thing which works in all cases.
I know this isn't necessarily a style practice but since I develop web applications vs websites I always use IIFEs linked up to a window.&lt;namespace&gt; instead of globals. I hate anyone who doesn't know that, will not hire anyone who doesn't know what an IIFE is.
I like naming the function too as it shows up in the stack trace if an error occurs.
Or to the first element of the array.
know wtf you're doing.
And what if it's empty?
ALWAYS use meaningful variable/function names. Never ever use x, i, t, v, etc. unless it's super obvious.
Then you get undefined as your result, giving a failure. Using the first element of the array has more advantages for arrays of numbers of arbitrary size, such as a big integer class. Of course, you would have to have a comparator.
JavaScript loaded via Greasemonkey is run client side in your browser. User accounts will be stored server side in the database. You won't be able to make any impact on the server with your client side code. All you'll be able to do is change backgrounds and stuff like that. If you really wanted to ban spambots from a forum then you would need to modify the server code and you would need to be some kind of forum administrator to do that.
If you create a shitload of globals - especially if that applies to your loop variables - I'm going to make you feel bad because you are bad and your code sucks.
`undefined` isn't smaller (or larger) than any number, because it isn't a `Number` itself. You'd also end up with a function which returns different types. From my point of view, a function should either return that one type it's supposed to return or throw an exception. For example, in this case, if you do some math with the return value, you'd end up with `NaN`. `NaN` is always kinda annoying because you have to track it down manually.
Comments comments comments and more comments.
Unfortunately, we're trying to map results onto a set that's smaller than the real range of results. As such, you always have some trade-of. For instance, how do I tell if your result meant that there was a negative infinity in the array, or that there was nothing in the array? The user would have to check the size of the array. Which isn't to say that your solution is wrong. If your contract with the user of your function says "you cannot pass -Infinity in", then they unambiguously know what your result it. My contract might say "you cannot pass an empty array in". This contract makes sense, since it's odd to say "your empty array has a negative infinity in it". My only point being that, because the possible results are "any number, or the malformed case of the empty array", it's impossible to map that result cleanly to "any number".
 if (foo) { bar = function () {/* does one thing*/}; } else { bar = function () {/* does another */}; } I only use function expressions in JavaScript, because there aren't any surprises. The stuff you see and the stuff which happens is exactly the same.
Which is one reason why you might encounter this: Module.nameOfThe = function module_nameOfThe () {}
I've also heard of them as SIAFs (self-invoking anonymous function) but the name IIFE seems more popular recently.
A little background. I just had a job interview with a large social network company. One of the reasons I didn't get the job was because they stumped me on the prototype constructor pattern. I still think the prototype constructor patten sucks ass, but I'm made a tutorial to help teach me and hopefully you how the prototype works. 
JSLint has made a staggering difference to the quality of my code.
OK, so it seems you want to make a bot to get rid of the bots. What I'd do would be to loop through all the user profile pages using some kind of regex to check the Company. If you want to ban them then submit the relevant data to the same URL as the form's action. Something in Python is probably your best bet.
You still don't ever need anonymous functions for that. You can rewrite that as: function barFoo() {/* does one thing*/}; function barUnfoo() {/* does another */}; if (foo) { bar = barFoo; } else { bar = barUnfoo; } which would arguably even be more readable.
Well, the only time that makes a difference is for object literals. Curly braces for code blocks can go anywhere without a problem.
Hoisting is a bug, not a feature.
&gt; change the p variable at the top to your desired password. And.. &gt; *Note: Change the t variable in 'blog.js' to your blog title (i.e t = 'Jared's Tech Blog'). &gt; Also, Change the st variable in 'blog.js' to whatever you would like your subtitle to be (i.e st = 'I am an App developer'). Things like this should be named far better. `password`, `title`, `sub_title`.. makes life a lot easier all round. 
Wow. Nice resulting API.
The point was that you can't write it like this: if (foo) { function bar () {...} } else { function bar () {...} }
Well, yeah, but you shouldn't anyway... Just think of `function` declarations like `const` declarations.
well, stupid beginner here, so I can have stupid opinions... though I am just reading this and I didnt downvote jslint felt to me like overdoing it big time first times I run it. USE SPACES, NOT TABS. THAT THING LOOKS LIKE IT SHOULD BE IN DIFFERENT COLUMN. INSECURE REGEX BECAUSE YOU USE /\^/ or dot... stuff can be turned off, but somehow I still dislike whoever made it and felt entitled to set it as default and bother people with stuff like that all over the screen when I have real flaws in the code that needs addressing first. I am using jshint...
I think the only "super obvious" location would be in a for loop. Other then that, I can't think of a place that a single character var makes sense.
If A and B are equal except that B adds some special conditions/exceptions, you'd be stupid if you'd go with B. And no, one isn't easier to read than the other. I used 3 different indention styles for several years each. It doesn't matter one bit. Once you got used to a particular style, there isn't any noteworthy difference whatsoever. Just do the thing which always works. Always use 1TBS. Always use semicolons. Always put curlies around your blocks even if it's just a single statement. Always use `===` and `!==`.
Well, it can be if B's exceptions are useful. For instance, it might be convenient to distinguish between object literals and code blocks by having object literals inline but giving code blocks their own line. Seriously, I use 1TBS, but the name is tongue-in-cheek. :P
Eh, `x` and `y` are good variable names for generic coordinates. `i` and `j` are good variable names for generic array indices. A lot of mathematical formulas will be clearer with single-character names, since math only allows such names. I definitely prefer: function cuberoot(x) { return math.pow(x, 1/3); } to: function cuberoot(valueToTakeCubeRootOf) { return math.pow(valueToTakeCubeRootOf, 1/3); } Don't you?
JavaScript isn't a standard at all--it specifically refers to Mozilla's extensions. `let` is in the WIP ECMAScript 6 spec though.
I find it far easier to debug when the opening and closing braces are in the same column with the first character of the header statement which starts the block. Yes, I'm an old K&amp;R fan.
I hope we can all agree that the #1 most important rule is to follow whatever convention your team has chosen to adopt, even if it's not the convention you would have chosen. If you're in the process of creating or choosing the convention, I would say that if you make any choices that are not common, please make sure you understand the reason _why_ the rule you're breaking is a common one. Don't just throw it out because you don't like it.
&gt; Use the single var pattern and declare variables at the top of a functions scope. Why? What you are suggesting seems to have the downside of being overwhelming when the scope many variables, and if there is a benefit, I am not aware of it.
I prefer [JSHint](http://www.jshint.com/); It supports a number of javascript libraries (such as jQuery) and also allows you to relax some of the rules that are a matter of taste rather than best practice.
This is basically my go to resource: https://github.com/rwldrn/idiomatic.js/ While you may or may not agree with all of the stuff on the page, even having an opinion about means you're at least thinking about your coding practices.
as I said I use jshint, same way as you described in your two points. Difference is that instead of semantics like using tabs instead of spaces for indentation and assumed correct columns, its more about unused variables and such... at least in my experience which was very very short with the lint 
The benefit is you see the large number of variables you've declared in one place and hopefully you think "that's a lot, perhaps I should refactor this to be less complicated"
&gt; Tabs are unarguably superior when combined with spaces for aligning subsequent lines Not sure what criteria you are using.
If you've written such a tangle of code that it is difficult to apply a method extraction pattern then that's going to bite you six months down the line when you've forgotten every nuance of what the code is supposed to do and why you wrote it like that.
&gt; High Performance JavaScript Note that chapter 2 is completely out of date and should be ignored. Specifically, variables further up the scope chain are not slower to access except for on crappy, old JavaScript implementations. 
&gt;Crockford is an arrogant ass. Yes. &gt;just strong personal opinions Yes, just like yours. Most detail decisions are interchangeable. You have to pick one and stick with it. &gt;My code [...] looks way cleaner Yes, I'm sure that you think it looks cleaner. &gt;Variables must be hoisted With block scope, your variables are *effectively* declared at the top of your innermost function. It makes sense if your code looks just like that. Once you can use `let`, you should always use `let` and then you should also switch to the declare on first use convention which is popular with languages which proper scoping. &gt;don't use "++" or "--" It encourages you to write needlessly tricky things. I do think they are fine if they are used on their own though (i.e. as a single separate statement). &gt;don't use continue `continue` is rarely used. You're usually better off if you write it in a way where it isn't necessary. It makes your code easier to follow. &gt; I want to and have a very specific reason to write == null, or to eval code that has been typed in a code editor or has come through an XHR. `==` and `!=` aren't necessary. Anyhow, there are switches for that. &gt;jshint is a vast improvement I don't think it is. The only noteworthy difference between projects with use JSHint instead of JSLint is inconsistent formatting (e.g. CanJS). I don't see how that's an improvement.
Check out [d3.js source code](https://github.com/mbostock/d3/blob/master/d3.js#L5431) for awesome usage of single character variable names (awesome doesn't necessarily imply good, Crockford doesn't approve)
It protects against accidentally using a variable before its declaration . For example imagine that deep in a long functions scope there is a var foo=Whatever and many lines above it someone tries to reference a global variable also called foo. You would get undefined because the declaration is pushed (or hoisted thought I hate that word) to the tip of the scope, resulting in undefined. Its a very difficult bug to cover. While this leads to another issue in regards to Nam collision, this scenario is actually pretty common.
* Think about using [CoffeeScript](http://coffeescript.org/). It's not always the right choice, but it often is. I firmly believe that [it's a better language](http://evanhahn.com/?p=500), but sometimes the compilation can induce some extra headache. * I think these libraries should get more use: [Zepto](http://zeptojs.com/), [Sugar](http://sugarjs.com/), and [Knockout](http://knockoutjs.com/). * Unit test. I recommend Jasmine or Mocha. [I wrote a free tutorial for Jasmine](http://evanhahn.com/?p=181) should you want to learn Jasmine. Also, come April, if you want a book about Jasmine, [I might be able to help](http://shop.oreilly.com/product/0636920028277.do). * Always use semicolons. I know there's debate about that, but I think you're less likely to create bugs by airing on the side of more semicolons. * The classics: avoid `eval`, be careful with `var`, good variable names, et cetera.
var emailValidation = //l emailValidation.test(email) Pretty obvious with explanatory naming.
If you have alignment issues, it's time to refactor your statement so you don't have to have alignment issues. If your arguments or condition is so long that it's flowing to the next line, there's a better way to do it.
Good to note that dunderproto isn't supported in all browsers (notably, IE). Which seems ok in this case, because I don't think it's reasonable to use dunderproto like in the link, since you could just as easily assign to Foo.prototype, and performance would be better to boot!
Not sure if trolling or doesn't understand how JavaScript scope works. Write it like it is C and I'd never pass it in a code review.
&gt; Tabs should always be used for start-of-line indentation because using spaces arrogantly pushes a personal coding style onto anyone editing your code I really don't understand where this idea comes from. Replace tabs with spaces in the statement, and you get the reverse. Mixing spaces and tabs is added complexity. I would expect (and find) this practice leads to inconsistency, at the very least. &gt; The tab character exists for a reason, so that it can be customized. Spaces can't be. I agree with the first sentence, but not the second...well...not completely. Any conceptual key set CAN be customized. It's definitely less common to be able to customize spaces, outside of variable width vs fixed width fonts and would not fall under "best practice" to rely on the ability to change spaces. &gt; As for the "my IDE is stupid" argument, that's not a valid reason to set a standard. I didn't mean to call an IDE stupid nor am I trying to set a standard. IDEs can and do implement tabs different ways, including how it will interpret them by default or through customization. I'm talking about processes that work well with popular tools...aka "best practices". Depending on what you consider "popular tools" there is less inconsistency in different IDEs (including across platforms) rendering code which has been formatted using pure spaces than using tabs or tabs and spaces.
&gt; Code like it will be someone else ... Two weeks from now, I'm gonna be a different person. I hope future-me can still read the code I scribbled together today.
I'm a Javascript performance optimizer for my team, so I can talk about some of the bad things I see. Some of this stuff is more applicable to mobile safari than desktop browsers, but still good to consider. * Always 'use strict'. * Always declare variables at the top of their scope. That is: function helloWorld () { var a, b, c, d, e; } * Overusing closures -- can lead to the creation of 'scope global' variables that allow for many of the same abuses that are the reason sane developers block the use of project global variables. * Declaring large numbers of inner functions in commonly called functions. Terrible for performance, as these functions must be evaluated every time that outer function is called. It is necessary in some situations, but far, far fewer than most people use them in. * Mocking out OOP by returning objects in {} with references to functions in them rather than creating an actual JS object and setting those functions in the prototype. This has performance implications, but it's actually enforced on my team because of the benefit you gain as developers. When using the Chrome dev tools to take a heap snapshot, you can organize objects by constructor, allowing you to look at how much memory a class is using, or retaining through references. If you have everything on the Object constructor, that doesn't help much. If everything big uses its own class and ctor, suddenly you have an incredibly large amount of useful information for cleaning up memory usage on your page. * Using {} where [] would be sufficient. If you have a large amount of data that you can index with integers, do it. It would be better to have empty entries than to use {}. {} uses an order of magnitude more memory than []. It is significantly better, especially on mobile Safari. * Using Javascript to manually set styles when CSS classes could be used. Every single Javascript line that adjusts a value that affects page appearance causes the page to repaint before moving on. If you are doing something like this (pseudocode): button.width = 100px; button.backgroundColor = black; button.border-radius = 5px; That causes 3 repaints of the page. That means that the browser recalculates the appearance of the full page 3 times just for your single set of adjustments. Moving this to CSS and just applying or removing a class causes all of those changes with a single repaint. On a desktop browser, that's not usually a noticeable difference. On mobile Safari, that makes a major difference in page performance. ------- This stuff is more code "cleanliness" than performance: * Using == instead of === * Using (x === -1) or (x !== -1) when you could use ~x or !~x. Slightly odd the first time you see it, really, really nice after that. Why is this useful? A lot of the time we found ourself able to write stuff like this: ~[].indexOf(value) rather than [].indexOf(value) === -1 For reference, the "~" operator is a bitwise NOT in Javascript. While that's got some awesome application for bit grinders, if you don't want to think about 1s and 0s, you can think of it this way: ~-1 === 0 !~-1 === true * Not using .forEach() and .map(). I don't understand how every JS programmer isn't aware of and in love with those two functions. There are certainly circumstances where they aren't the right tool, but if you write code like this example, you should read up on those two functions: function foo (someArray) { var array = []; var idx, value; for (idx = 0; idx &lt; someArray.length; idx += 1) { bar(someArray[i] * 2) } for (idx = 0; idx &lt; someArray.length; idx += 1) { array.push(someArray[i] * 2); } } Instead: function fooPrime (someArray) { var array; someArray.forEach(function (value, index) { bar(value * 2); }); array = someArray.map(function (value, index) { return value * 2; }); } Much cleaner, and it becomes much easier to see what your loop is actually doing. If you have complex looping functions, it also allows you to use other functions as arguments to the map and forEach functions.
I don't particularly care about the low-level syntactic problems. If you write functions small enough to get in your head at once, anyone reasonably familiar will be able to parse it and can deal. Whatever. Match the style of the code you're working in. Keep a balance between dependency count and inventing things yourself. Keep the dependency graph acyclic. Prefer composable modules to all-in-one solutions. Prefer composable modules to ones that try to control how they're used. Break your code up into modules. And if you're modifying large, heterogeneously structured arrays or objects -within-objects, you're probably doing it wrong.
I think I disagree with all of this. It seems particularly arbitrary, especially without justification.
Only comments that say why, not how. The code says how, and your comments will either be lies or duplicate.
The problem is if you do it that way then you run into problems like: return|throw { foo: true }; So now you have to keep in mind random edge case gotchas when you could just use an editor that highlights matching braces for you.
Except that in tight loops, this is much less efficient, since it involves the allocator. Ordinarily not a problem, but in graphics code, using lots of points...
Only when trying to match non-regular languages.
Better is a good module system.
JSHint integrated into your toolset can do this too -- and better.
That way leads away from functional programming, and that way is the dark side ;-)
Thanks! I added immutable semantics to machinad last night so I'll be able to simplify some of the parser stuff when I get a chance since with immutability backtracking is simply placing an or on the scope you want to backtrack and won't really need to untake except in really rare cases. I might be able to do it without the input/result structure to simplify it on just a string now that I got the immutability but haven't looked at that yet. If this seems useful let me know and it would be easy as pie to create a few more combinators like isDigit and between etc
Its never explicitly obvious, so I am going to consider this to be irrelevant advise. I say its never obvious because variables can be reassigned to different types later in a lower scope and this completely changes behavior and is not obvious. Usually rules about "good variable names" are either hypocritical or filled with countless exceptions. For instances, iterators in a loop, coordinates, property conventions, short hand names for DOM methods and so on... Ultimately, this rule is stupid and rarely accepted in a consistent fashion. If you want to know what a variable means you actually have to read the code. There is a LOT of bad code out there this is perhaps the only safe and obvious advise I can think of with regard to variable names. If you want to describe your variable in a meaningful way for other developers to follow then supply a healthy dose of code comments.
All of you are wrong. There is only one good practice to follow, and everything follows from that. Referential Transparency. In practice, it's deeper than fuck. 
*Sublime Text 2. with JSLint plugin. *4 SPACE tabs. 
&gt; Using == instead of === No, always use === to prevent unwanted type conversions. It's not any slower and guarantees type is always checked. &gt; Using (x === -1) or (x !== -1) when you could use ~x or !~x. You are saving 4 to 5 characters for less readability amongst varying levels of javascript programmers. I wouldn't use that in my code. &gt; Not using .forEach() and .map(). I don't understand how every JS programmer isn't aware of and in love with those two functions. Most programmers will use underscore or lodash to wrap these functions so it works in browsers below ie9. Using forEach in an older IE browser will throw an error. In addition, native forEach is actually slower than a for loop http://jsperf.com/for-vs-array-foreach
Trolling or no one has ever seen his code before.
You had me up until spaces rather than tabs. 
Did they hire you? :D
I did state that the triple =, ~, and forEach / map were for cleanliness, not performance. However, you are correct -- the reason for === rather than == is to prevent unwanted type conversion, not for cleanliness. And, yeah -- we have our own implementations of forEach and map for that reason. I was trying to refer to practices that were library agnostic.
Interesting. Seems like that would make it harder to flow if you have to figure out how to type those characters on whatever machine(s) you happen to be using. Same for whoever comes after you. You also have to see of the rest of your tooling supports Unicode. You don't want your minifier/VCS corrupting your files later because they only expect ASCII codes.
Oh, I, uh, didn't intend for anyone to take that comment seriously.. Also, if your VCS doesn't support unicode, you need to switch to a different VCS.
I don't ever use Unicode, so I am not super familiar with which tools support what. I remember years ago working on a PHP page and having unidentified characters occasionally show up. It turned out to be the Unicode BOM of an imported file.
You sure you're not breaking an NDA by posting this code?
The JavaScript prototype pattern definitely does not suck.
Really? It's harder than anything I saw at Microsoft, but it's not hard. I thought of an n^2 greedy algorithm within a few minutes. Not looking at his solution, you can just, in pseudocode: sort events by start date var ends = [] var maxEnd = 0 for every event in events: for i in ends: if event.start &gt; ends[i]: ends[i] = event.end event.column = i maxEnd = max(event.end, maxEnd) break if no entry qualified: event.column = ends.length ends.push(event.end) if we're at the last event or the next event.start &gt; maxEnd: var columnWidth = 610 / ends.length loop back up until we get an event that already has a top assigned: event.top = event.start event.left = 10 + columnWidth*event.column event.width = columnWidth - 10 delete event.column ends = [] return events Greedy algorithms aren't too bad. I just wrote that in 10 minutes. It'd take at most twice as long (20 minutes) to write it in JavaScript rather than pseudocode. So... not that bad. Give another 10 minutes for part 2... sounds like a pretty standard time for an interview.
I'm gonna xpost this to /r/fizzbuzz if ya don't mind...
Don't know why you were down voted, because you are correct. It is not just the cost of allocation, which is typically very expensive when compared to a small amount of maths, but also the pauses when the runtime goes to garbage collect.
Is it possible to run it as a virtual machine into a web browser ? If it is, I think you should add an pure-js example on the README.md for the people which does not use coffeescript :)
And what about the internals of those objects? When you manipulate one colour, what do you call the local variables you have there? Eventually you will need local variables, and they can be called 'r', 'g' and 'b', or 'x' and 'y'. A second factor, is why bother making it more complicated? People will get what 'x' signifies. Why make it 'somePoint.x' or 'somePoint.getX()'? It's adding complications and OO, for the sake of OO. A third issue that co-ordinates and colours tend to be used with very large data sets. Not always, but it's common enough to be an issue. For example an 800x600 image has almost half a million pixels. So if you iterate over those pixels, creating one colour for each pixel, you are creating half a million objects. Lets say you are tinting the object, so you create a new Colour for the pixel; now you are creating 2 Colour objects per-pixel; that is almost 1 million objects! That *IS* going to take up a very large chunk of your CPU time. I've also seen it be an issue in smaller examples. Such as with games, where objects in the game have a Point object. If you have thousands, and you are updating them constantly with new Point's, then when the system goes to run the GC, the pause can be quite noticeable. That matter when you want to run at a solid 60fps. There are some examples where Colour and Point objects make sense, but in managed runtimes where they will be aggressively stored on the heap, I have yet to see a compelling argument for them, due to the large amounts you tend to build.
That's just a set, not bitmask. Your library has nothing to do with bitwise operations. The fact that it's perhaps implemented on bit level (didn't check) doesn't change it.
Even that man, is not hard for a chiseled developer.. A candidate I would want to hire should be able to whip that up within an hour as a proof of concept. We are not talking anywhere near a beautiful implementation, just some black borders and some highlighted background colors. This guy above did his psuedo example in 10 minutes, which is exactly how the mind of a well defined developer should be able to solve this problem, 20-30 mins wouldn't even be bad. And then to output this into an interactive proof of concept shouldn't require much more... 
I disagree that they work the same. We obviously have different readings of it.
perform a tax calculation on them and then display the result in a table format. This is an applied Javascript exercise with some conceptual aspects and many more instructive examples about how to use Javascript for modifying HTML.
I don't think he is sure.
I agree, not sure why you're downvoted.
Clean is highly subjective but let's say if doing architectural work make things cleaner then not doing makes things dirtier and that's the only other option. So you are as much opting into writing cut and paste shit to get a job done quicker as you we opting out from doing design.
That depends on if your code is used only in a small circle of developers or for a wide variety of end users. Enforced consistency brings you only so far...
This is maybe more relevant for /r/coffeescript
I done this submission also, passed this stage but didn't cut the final interviews. View it http://thomasdavis.github.com/old-facebook Download it https://github.com/thomasdavis/old-facebook Hope it helps anyone
&gt; Math.max, being a function that should be native code, would perform better than a for loop in script That doesn't apply anymore since V8 and SpiderMonkey compile JavaScript to native code. Also, apply() and call() are much slower than an ordinary function call. Besides, the max function has to iterate over the arguments anyway so you have a loop *and* a function call.
I pulled it just in case :D
It's not "just a set." If you had bothered to examine the library you would see that when you construct the Bitmask object it builds a bitmask; subsequent calls to `Bitmask::any` and `Bitmask::all` use bitwise operations to compare against this mask. Name something that you can do with a bitmask that my library can't. Then, a) implement it and submit a pull request since it's open source, or b) let me know so I can try to implement it. Both options are better than c) glance at the library, miss the point, comment on reddit.
It is a set, and those are set operations. Why you insist calling it a "bitmask", when we're dealing with a much higher level abstraction (that of a set), is beyond me. Like I said, perhaps the underlying implementation is a bitmask, but the data structure it offers is effectively a set. The library isn't even used to deal with bits, but sets of things, such as colors, like in the examples. You need to look up what bitmask really means and what they are used for. Here's from wikipedia, for example: &gt; In programming languages such as C, bit masks are a useful way to pass **a set** of named boolean arguments to a function. 
So you're saying that bitmasks *are* a set..? Did you actually look at the library source?
No, bitmasks are often used to represent a set of enums/flags.
True about the math and x, but for coords I'd still name then appropriately. mouseX or something, depending on the situation
Ok, fair enough, but you realize that the library in question is meant to provide the functionality of bitmask-like logic right? OP is not claiming it to **be** a bitmask library, merely that it gives you the same functionality and performance.
&gt; Code like it will be someone else who has to change it later. Make it clear. Scratch that. Code like it will be maintained by an ax murderer.
Generally, I keep the objects simple with public variables when they refer to simple objects. I don't get all holy on writing accessors for such simple objects. A simple object class like: function Point() { this.x = 0; this.y = 0; } Point.prototype.distance = function(point) {}; //etc. It doesn't add complexity for sake of complexity. It allows for abstractions like distance. If you expand upon that convention and use a simple class for shapes you can get the area, tangents, and all kinds of other encapsulated logic that you don't have to have in your other code. If you are iterating over a million pixels, you are likely doing simple operations that could be handled in small functions and you wouldn't be creating a million objects. You can re-use objects for operations that are not persistent. Nobody ever suggested that you create an object for every pixel that ever existed... Thinking that I am only means you don't know how to adapt to requirements in code. If you need raw processing power you are going to change your methodologies. Insisting that "best practices" (which this thread is about) should apply to **every** situation ever conceived by human thought is just being obtuse. If you need the raw data, simply use it. If you are referring to the point itself, the object is there for your use. The point of doing it? Context, simplicity, re-use and abstraction. I've seen far too many functions with x, y, x1, y1... as parameters and those are usually distance functions that could be replaced as explained above. If you have a character on screen and you want to see how far it is away from another object on screen you can do a simple character.position.distance(something.position) and that tells you in code (and somewhat plain English) what you are trying to do. If you wrote it like getDistance(x, y, x1, y1) you are only convoluting your code with needless methods variable declarations and noise. Points and colors are logical constructs. They have shared logic and methodologies that don't normally change from program to program. And even if they do, it's simple enough for one program to overwrite the call to make it do something else.
Yeah but I said generic coordinates. For instance, a function that tells you whether a given point (be it the position of the mouse, a sprite, or whatever) is within the view window.
 character.distance( something ); Much simpler.
Theme imported straight from the 90s!
Make the body non selectable, then just doubleclick the blue dots to keep winning. Not bad btw.
There's no functional difference in JavaScript. JSON spec requires quoted keys, but some parsers don't care. I've never heard of a difference in performance, but I've also never seen the question come up before.
Javascript doesn't natively have the concept of string interpolation, so there's no benefit/penalty of using one over the other. It's just a matter of personal preference. I like to use single quotes most places (e.g. when something is obviously a key in a hash), and even for the majority of user-facing text (e.g. prompts, etc.). Coffeescript, on the other hand, does have string interpolation, and single quotes are treated differently than double quotes. For JSON as well, keys have to be surrounded in double quotes (although not for standard object syntax -- cc /u/ciembor)
In JSON, the names of the properties must be always quoted with double quotes. In JavaScript, if the name is a regular identifier, the quotes can be omitted. With ES5+, you won't have to quote keywords (e.g. "return" or "while") either. So, for example, if the property name contains a space or if it starts with a number, you have to put quotes (either kind) around it.
it's only really necessary to string-quote when the key is particularly complex (read: spaces or other special characters). if it's just a single word it's fine to leave it unquoted. Matter of personal preference.
I have been looking for alternatives because Codecademy's recent crash took out over 75% of my progress and they have not only been unable to restore my progress but have made no effort to contact me to get the specifics of what should be restored. I have filled out multiple forms and emailed them and it seems they do not actually care as much as they say. My progress is just variables and they can't take the effort to change them.
I use multiple languages, e.g. C# + Javascript. When working between them, it helps to use different 'main' quotation marks for strings. Since there is only one choice in C#, double quote, I use single quote in Javascript. If I use C# to render the Javascript, the amount of escaping required in the string literal is minimal. I believe this is a common occurrence.
My eyes!
Single, easier to type and IMO looks better. That said, if my other "main language" mandated double quotes I would probably use them in JS as well.
It is amazing how difficult it is to figure out exactly what grunt is....
This post isn't an introduction to Grunt, it's just a release announcement. You'll get more info starting from http://gruntjs.com/ and working from there. In essence, it's a super handy task runner for common tasks when building/testing JavaScript-heavy applications. My team uses it for the fairly common workflow of running a local web server, watching files for changes, and recompiling coffeescript &amp; stylus &amp; templates / running Mocha unit tests whenever something changes. Then, when it comes time to build a final copy, we can run tests and compile a minified version (with a lightweight Almond wrapper) that we can immediately publish to our public-facing web servers.
Damn, I need to start using single quotation marks.
You really shouldn't be constructing JavaScript in C# code. Write your JavaScript code in a .js file or a &lt;script&gt; tag, then just send data from C# to your JavaScript using a webservice that returns JSON, JSON-serialize it and dump it in a script tag, or do something similar -- but just don't write raw JS in C#. This applies to any language where you might be tempted to construct one (e.g. MySQL requests) in the other (e.g. PHP). Any given mainstream language should have some sort of adapter available.
You really oughtn't construct JS in PHP. [Let's continue discussion in this thread.](http://www.reddit.com/r/javascript/comments/18rjb2/poll_which_quotation_marks_do_you_use_as_the_main/c8hf75j?context=2)
Single quotes. I write way too much code to be pressing shift every time I need to quote a string.
Single quotes for characters, double quotes for strings. I know there's not really a *char* type in JavaScript, but I come from C and already have the habit.
I noticed in the mutli-page-shim example (https://github.com/asciidisco/grunt-requirejs/blob/master/examples/multipage-shim/www-build/page1.html), the built html files still request 3 js files (common.js, require.js, and page1.js). I thought the proper way to do a r.js build was 1 file with everything included?
Some notes about your Javascript. * Comments. Lots of comments, please. * Keep to a line length (80 if you're old school). Some of your lines are 170+ characters. * Don't be afraid to use whitespace to make things easier to read.
Thanks for the feedback. All that seems subjective to me. Is there a specific line you think needs a comment? Anything that didn't seem self-explanatory got a comment. Over-using comments has drawbacks. I disagree with your line-length restrictions and don't like unnecessary whitespace. If this is a reason not to interview someone then I'm glad this company didn't waste more of my time, I wouldn't want to work for a company that wouldn't hire someone on such a superficial basis.
Right, which is why I plotted more than just active user ratio. What else would you have added? Obviously, something that "isn't *just* graphs and charts" must have a graph or chart.
Please explain the drawbacks of making your code more readable through comments. And maybe you should add extra whitespace and line length restrictions. The point of interview code is to be read by the people that want to give you money. You can make it easier for them to do so by making your code easier to read.
How would you visualize it then?
unless you're going for minified code, how much code you have in a line matters. the more code in a line, it becomes less readable, and also harder to edit/maintain. in a group environment, this is important; it's not superficial at all.
Subjective and superficial, but fairly important and regarded as such in the industry I'd say. Having code as readable as possible is really very important - much more time is spent supporting code than writing it. Edit: Your code is mostly pretty readable actually. Subjective opinion on your commenting style: Good comment: //loop through activeUsers and totalUsers separately in case one is missing a datapoint (relates to the logic/problem at hand) Bad comment: //the 'this' pointer can get clobbered in javascript so we provide 'that' for private/priveledged methods (obvious JS idiom, so hardly worth noting) 
You missed the point. And your code is quite bad.
I disagree. Depending on where you work, many people may be working on the same code. Comments can help, especially when showing your code to someone who is not familiar with your style . They are easy enough to strip out of production code. 
 /^(1\d{3}|20(0\d|1[012]))\/(0[1-9]|1[0-2])\/(0[1-9]|[12]\d|3[01]) ([01]\d|2[0123]):[0-5]\d(:[0-5]\d)?$/
Dude, the very first line of your resume has a typo: &gt; Undestands Fix that. Nobody will ever read past it.
thanks!
I didn't dismiss your advice. I get it. How would you define a variable if it hasn't been defined already? You think all namespacing should be done under the window object?
&gt;obvious JS idiom, so hardly worth noting Completely agreed. But I was told they are specifically looking for someone who can to "Object Oriented Javascript" and thought that this would simply help demonstrate that I can do that.
Anything in production should have some sort of build step that removes comments and further minifies public facing code. Byte counts aren't a valid reason not to comment. Maintainability is about as important as functionality, so soft skills like making your code readable by other people are important to hone as well. It really needs to be a priority, and if that doesn't show to an interviewer, that's a totally valid reason not to follow up. Comments to justify the whys of what you're doing are just a given for professional development, and the sooner you stop complaining about the game, the sooner you can start playing the game for real. More to the point, it's easier to make the code wrong and the comments declaring the intent right, than it is to make the code right and the comments wrong. When someone spots a bug, and they start looking at the source to fix it, comments declaring the intent will give them a head start, and it saves your employer money.
I'm not arguing that comments are bad, only that there is a tradeoff and that I think the amount of commenting I did here is reasonable. Is there a specific line that you think needs a comment?
Personally, I think it's a fair point that well-written code, with well-chosen variable and function names can do a good enough job that extra comments aren't really necessary. I don't think that's really what you had, though. e.g. for(var i = 0;i&lt;activeUsers.day.length;i++){ activeUsersLine.push([activeUsers.day[i]["@date"] + " 12:00PM",parseFloat(activeUsers.day[i]["@value"])]);//jqplot DateAxisRenderer recommends a time with the date activeUsersByDate[activeUsers.day[i]["@date"]] = parseFloat(activeUsers.day[i]["@value"]); } This could be rewritten more granularly, so your comment on line 18 is clearer, and you're not typing out chains of property accesses over and over again. var days = activeUsers.day; for(var i = 0; i &lt; days.length; i++){ var day = days[i]; var date = day["@date"]; var datetime = date + "12:00PM"; // jqplot DateAxisRenderer recommends a time with the date var numUsers = parseFloat( day["@value"] ); // &lt;reason a count value is being parsed as a float&gt; var record = [datetime, numUsers]; activeUsersLine.push(record); activeUsersByDate[date] = numUsers; } 
An r.js build would be a minified (by default) one js file suitable for production environment. Not really useful for example showcases.
Single letter names can be just as meaningful as words, and in some cases, can even make the code more concise and readable. 'n' is good for a function that takes a number and does something with it. e.g. function sign(n) { n = +n // Cast to a number return (n === 0 ? 1/n : n) &lt; 0 ? -1 : 1; } Geometry: * x, y, dx, dy, etc. and good for co-ordinates * r is radius * h, w and l for height, width and length. Loop Counters: i, j, k, ... Any time you're dealing with some well known mathematics or physics formula, it's useful to use variable names that match those commonly used for the formula. e.g. If you're implementing a function that solves s = ut + 1/2at^2 for given parameters, using corresponding single letter variable names makes sense.
C# has a significant difference and it always throws me off when I have to get into the C# code after doing JavaScript for a long period of time. Double quotes are for strings and single quotes are used for character literals (they can be longer than one character as long as it translates to a single character, unicode, etc.) It really bugs me when I get done typing up a line and it's all lit up in error!
Single quotes for SQL, double for JSON. For PHP, well...it depends. 
Interesting. Maybe Firefox's `eval` is optimized for proper JSON? I wonder if that difference is reflected in how quickly it can parse JS files. I don't think the no-eval-literal / no-eval-string would net any useful data anyway, since those should both be compiled once ... at least, I think all the major browsers have their Js engines implemented that way.
I use double unless I am workin on an html string, in which case I use single so that the html can use double.
Follow-up: [The "Drunken Walk" Programming Problem](http://braythwayt.com/2013/02/17/a-drunken-walk.html)
Double quotes out of habit (C++/PHP background). Also, the editor I use, kwrite, highlights single quoted strings in a less pleasant color than double quoted strings. Yes, I guess I could change the color, but clearly its easier to adapt my coding style.
Single quotes do have the benefit that you don't have to escape HTML markup.
Stick to one type of quotes. Mixing them is ugly. The fact that you don't have to escape HTML is one of the reasons I personally use single quotes.
See that url up there? It says /r/javascript.
Google's [Closure Linter](https://developers.google.com/closure/utilities/) uses single quotes, so I do too. Especially since it will change them all for me.
Really cool, thanks for sharing, bud
The current used by a double quote is TOO DAMN HIGH
Shameless plug: [3D engine in HTML5](https://github.com/mariusGundersen/OnGameStart-2011)
Looks good!
Use RequestAnimationFrame http://jsfiddle.net/UWyWJ/22/ for smooth 60 frames/second :)
In general, singletons are a good place to start. Keeping your application wrapped in a single App object and/or User object solves a lot of problems with scaling. I usually start off by creating object literals of the app state based on cookies/local storage and then go from there. Separate different types of logic and have all your click handlers in one spot.
Being a PHP guy too I tend to stay on the PHP rules of literal strings and evaluated double quotes.
game of life is pretty cool, I used to play that a lot (*tries to find url*).
So you're being asked to load two pieces of data via AJAX and do something that requires both of them to be loaded. The interviewers may be testing your understanding of deferred objects. Currently you run a test after loading each resource to see if all the resources are loaded. Works perfectly well in practice, but a more elegant solution might be: (function () { $.when( $.getJSON('TotalUsers.json'), $.getJSON('ActiveUsers.json') ).then( // success function (totalUsers, activeUsers) { var data = filterData(totalUsers, activeUsers); drawGraph(data); }, // error function () { // display an error } ); function filterData(totalUsers, activeUsers) { // does whatever manipulation is necessary to the data before plotting it // and returns it as a single data set } function drawGraph(data) { // plots the graph using whatever library you wish } }());
The what now? Edit: Oh. *changes downvote to upvote*
Just a comment from building my own Sudoku generator - the level of difficulty is not necessarily related to the # of tiles given. If you wanted to be really technical/awesome about it, you would use the max # of guesses/recursive steps required to solve it as the main metric.
Good talk. But...cringe
Used to use airquotes, but it kept getting misinterpreted
It's a nodejs-based full javascript build system similar to maven or ant which is perfectly suited to modern web app development.
I'm not sure a separate library is needed for a key value cache. I implemented a simple cache function that even allows for an expiration date, and handles AJAX calls within. http://www.sitekickr.com/blog/creating-ajax-cache/
OK just upraded a project to 0.4 from 0.3. All the contrib tasks are separate modules now, including watch, which gives me a good modular feeling. They are also available as a 25 module 'suite'. The new 'Gruntfile' is somewhat cleaner to work with. I also found grunt-contrib-compass that nicely works with my existing config.rb and grunt-contrib-watch, so I can make a task that waits for scss files to be changed, render them into css via compass, and concatenate and minify from there. Luvvely, as I want to use compass to do sprite mapping. One problem I kept running into was retreiving the contrib packs from npm, the dependancies kept erroring out. This was in Ubuntu. I switched to Windows and they worked flawlessly, I'd love to know how to make them as reliable to install in Ubuntu.
real developers don't use browser-specific function calls ;) ~~http://jsfiddle.net/UWyWJ/38/~~ http://jsfiddle.net/netinept/hCcpV/
Which will slow down the effects of arthritis.
I did not know that was a thing. Thanks for informing me!
[fixed](http://jsfiddle.net/netinept/hCcpV/).
Where do you define updateFn?
at the top.
Ahhhhh. Derp.
Looks nice, wish my whole dept subscribed!
A follow-up to [Tortoises, Teleporting Turtles, and Iterators](https://github.com/raganwald/homoiconic/blob/master/2013/02/turtles-and-iterators.js.md#tortoises-teleporting-turtles-and-iterators) Note: I'm between gigs and this has given me some time to write up some stuff that has been in my backlog for a while. Please let me know if it's a bit too many posts to /r/javascript in too short a time.
It saves space in the character generator ROM. Just flip and mirror the comma.
i like this - really simple examples that exposes some stuff you might not know. and the code examples are very easy to understand - totally subscribed. :)
The API seems clear, that looks interesting. Doesn't seem to run in Firefox though. Only a couple demos out of the nine available show anything at all.
wrong! ' has 39 and " has 34 in ASCII..
The code itself is cross-browser, but the demos have -webkit prefixes in styles. I'll fix that, thanks.
I just said the name to myself out loud just to see how likely a layperson would be to confuse it with me saying "enema". Likely.
This is amaze!
Original content that's not about closures or `this` in JS? I think you're fine.
My secret fear is that one day I'm going to scan Reddit and see "The Drunken Walk Considered Harmful in Job Interviews"
Thanks for subscribing! :-)
Thanks. Why not forward it to them? ;-)
lazerpixie: "Hey, wanna play my enema game? We can use the keyboard!"
Kinda weird to follow a link for 'CSS animation framework' and only see JavaScript. And the 'pure css' examples then are just JavaScript. https://github.com/lvivski/anima/blob/master/example/bounce_css.html You know "pure CSS" should probably just be CSS.
Probably not good news for my day job: the app is built entirely around XHR, fetching data and form definitions from multiple places every time you click something. Of course, there are a thousand other reasons that the app's a steaming pile of manure, but the fact that it leaks memory client-side with all of those connections is the icing on a shitty cake.
Except on OLED displays where it's (probably) a wash. 
If this is a forum you control (and I assume you do, otherwise you wouldn't be able to ban people), then why do this so difficult? The data is stored in a database that you control. If you get access to the database you can do this with 1 line of sql. Or am I missing something?
I wonder how many of the modern libraries are doing pooling of XHR objects of some sort? Easy enough to implement yourself if you're doing "naked" XHR, but that's not how most client-side webdev is done these days. Seems like that's the answer to this problem, avoid creating new objects every request you want to make and just re-use the ones that already exist.
Get outta here with your facts, Mister.
If I have an application that runs a lot of Ajax requests, I create a few instances of [MooTools' Request](http://mootools.net/docs/core/Request/Request), and store them in a very [simple object pool](https://github.com/emehrkay/Pool).
This post seems more like guesswork than anything to me. Every browser on every operating system is going to handle this differently, and almost always it's going to handle it in a non-blocking manner with something like IOCP in Windows; The objects involved wouldn't be any more "special" than any other object involved in a browser's network request pipeline and would likely be cleaned up fairly quickly if a request is not made or once the request was completed or timed out. FWIW: I couldn't get a memory leak to occur with this guy's code at all.
Neither could I. (function() { for (var i = 0; i &lt; 1000000; i++) new XMLHttpRequest(); })(); Chrome doesn't blink.
Unfortunately I do not control the site in anyway, things would be setup much different if I did. I am only a mod keeping things afloat while some internal drama sorts itself out and gives the forum proper admin staff. So this is my only means of banning spam bots and I am just trying to make it work as a temporary solution.
Does this not wreck your browser? It thrashes my (cheap) laptop into uselessness with both Chrome and Firefox. * http://skeeto.github.com/browser-crash-test [CLICK CAREFULLY] Substitute any other type for XMLHttpRequest, like Array or Point, and your browser will behave much differently. 
The fiddle doesn't work because jquery isnt included.
I'm not sure why this is called a GC issue (or special case): isn't it the same with every kind of deferred request? If I run a million calls to window.setTimeout(), this is also going to create a million pending requests to do *something* which might each prevent garbage collection of whatever is reachable from their first argument: that's the whole point of having a pending request. I'd *expect* the browser to do something of the kind with XMLHttpRequest (even though the API is slightly different, but that's irrelevant): i.e., keep a reference alive so long as the *request is pending* (on the other hand, I'd expect "new XMLHttpRequest()" to be a no-op if the result is immediately discarded, because no request is actually *pending*). Isn't this the case? If not, why? It doesn't seem very complicated to create a new opaque object when the request is actually queued (much as for a timeout), keep a pointer to the XMLHttpRequest object from that opaque object, and GC as normal—exactly as is done with setTimeout. Am I missing something?
&gt; keep a reference alive so long as the _request is pending_ The article is saying it keeps a reference even after the request is completed.
But the article doesn't say *why* a browser would want to do that: what's the point? My question was: *why* doesn't every browser deal with XMLHttpRequest in exactly the same way as it does with setTimeout when that seems to be the completely obvious way of doing things? What am I missing?
Your link just crashed FF and chrome for me until they both gave up. 
You're right that this test (as opposed to one that does, e.g., `new Array`) uses up way more memory. But I'm not sure that your approach (creating a million `XMLHttpRequest` objects over and over again) is at all useful for someone who's wondering about the real-world impact of _occasional_ XHR calls at a sensible frequency. All it shows is that I shouldn't create seven million XHR objects and then do nothing with them. In my mind, you'd need to demonstrate two more things. First, you'd need to show a more realistic XHR lifecycle — create an XHR object, give it an `onload` callback, have it fetch something — and do that, say, 100 times, then have the user determine if their memory usage is permanently higher. That would show that such objects _never_ get GC'd, even once they're done with their typical life cycle. Second, even if you demonstrated a stair-step effect with memory usage, you'd need to show that it's significant enough for a developer to worry about. If, as in your test, you've got to get into _millions_ of allocations before you start seeing the impact, then you're not necessarily demonstrating that this is worth solving in my own code.
The purpose of my article isn't to say that XHR needs to be handled carefully -- not anymore at least. I'm just pointing out that XHRs have been a memory leak problem in the past (and right now if you're using IE7), evidenced by libraries that pool them, and modern browsers still handle them strangely as a special kind of long-lived object (my demo). And most of all, despite common belief, that all this has nothing to do with circularity. It goes in a category with `eval` and `with` as another JavaScript oddity that slipped in over the years, though this particularly one is specifically related to web browsers. 
In addition to the handful of other things it does, jQuery can be used to navigate and manipulate XML (in addition to HTML, which is identical in memory) with ease, therefore it's an XML library. It's better at XML than any other XML library. 
So why didn't you call it a HTML library? Or do you call it whatever you wish to suit you? Can I call Java a XML library because it can navigate and manipulate XML, too? So can C! It's a javascript library and nothing else.
Looking at the code, this looks like a set of points representing each pixel on the screen individually and setting the colour for each point. Is that right? 'cos that seems kinda nuts. 
it just looks like you iterate through an array of pixels calling SetColor on them to me. that's super slow, then pushing it into webgl once a frame, even slower. 
I believe the article is completely wrong. He doesn't know what he's talking about.
Maybe your code behaves subtly differently from the code in the blog post. When the JS interpreter sees `new XMLHttpRequest()` it may behave differently than when it sees `new type()`, even if `type` happens to be `XMLHttpRequest`. But maybe not.
Thanks! You have a very clever algorithm, and for a large board it seems like it would use less memory than my approach (a matrix of booleans). Are the keys in the hash binary numbers? If you wanted to make your version wrap it wouldn't be too hard; you just have to pick a finite board size and calculate the correct indices of a cell's neighbors that are off the edge of the board. But, I can see how that would cause the destruction of certain patterns like you mentioned. If you started your algorithm with randomly-placed live cells, do you have a way of determining if it reaches a stable configuration?
Just an idea. I'm assuming you have some methods and vars available so you will have to adjust it. I failed at posting code so [see fiddle](http://jsfiddle.net/p2YnN/)
I've tried doing a recursive styled flood-fill technique just as you've linked. Do you know of any non-recursive alternatives? I'll give this source a shot and let you know how it goes.
You appear to be missing unprefixed declarations.
Switching to: (function($type) { for (var i = 0; i &lt; 1000000; i++) new $type(); })(XMLHttpRequest); definitely increases load time, but doesn't crash my browser. In the article, he says: &gt; If I run this **a few times in a row** Chromium’s memory usage blows up past a gigabyte and my whole computer starts thrashing. So there's that. It seems like if you instantiate a new XMLHttpRequest object via an intermediary variable, garbage collection fails to pick it up in a speedy fashion. Scaling this up to 10,000,000 iterations may well cause a severe memory spike. I'm all for micro-optimizations, but I'm having a hard time seeing a practical application using anywhere near that many XHR objects. I've built fairly XHR-heavy applications in the past and never really experienced any significant memory leakage. Setting up a wrapper to reuse 4-5 XHR objects should be fairly trivial if it actually fixes the problem. I might try throwing it together a bit later and seeing what happens.
&gt; I run a million calls to window.setTimeout() Guessing that the difference is that when you say "xhr.onload = function(){}" it feels like you're just setting a function as a property, which you'd then assume should be GC'd upon exit. Whereas with "setTimeout()" you're passing a function to a function so you can't make that assumption. However, JS has this notion of setters. So I would assume that when you do "xhr.onload = function(){}" something more like "xhr.setOnload(function(){})" is happening under the covers, which is the distinction that trips up the author of the article. At least that's my interpretation of it.
It definitely kills Chrome for Android!
This project is getting very large too and we could use some help if you're interested. https://github.com/rSimulate/WebHexPlanet
Any reason why i would use this over tweenlite?
haskell version, for fun: https://gist.github.com/jhickner/4994022
&gt; insanely fast Got something to back that up? Looking at the code I can't imaging it being "insanely fast".
XHR should have a .close() method.
You can always use Math max for that var array = [15, 36, 27, 42, 80, 13]; var largest = Math.max.apply(null, array); console.log(largest);
There's a simple relationship between a variable name length and the length of it's scope. i.e: If the variable is only used on 1 line, like your example, or 3 lines like a for loop index, then a 1 letter name is no big deal. You can hold that in your head while you read the code block. If the variable is used over hundreds or thousands of lines of code - it had better have a long descriptive name.
The process starts with a small heap and new objects are allocated from it. If an allocation is requested but there's not enough space in the heap, garbage collection is run to try to free some space. If there's still not enough space, the heap is scaled up and then the requested space finally allocated. In the demo, when using normal objects the heap is never scaled up, because there are no new *live* objects when the garbage collector is run. When using XHRs, the browser consumes more and more memory as the heap is scaled up -- meaning those XHRs aren't being garbage collected as easily as regular objects. They *are* finally collected at some point, in this case after the heap hit some kind of maximum size. 
It's better now, but it's still not friendly. Perhaps if you broke things out into more lines and added comments, it would be easier to follow. If you want to sell the concept, you need to assume they don't know anything about monads before looking at your code. No need to be verbose, less is more, but better variable names in machinad would go a long way. In practical terms, I just really like JSON over code because it's easier to use to feed a dynamic system and pull from a web service, so I'd get more utility out of this if were built like that. And it would be exciting to see what people do once there's a nice framework for working with higher-dimensional categories.
I can't say I agree with anything here. &gt;big libraries call for trouble in the long term. You will hit bugs that you will have to deal with, and in that big codebase that’s probably not going to be easy. If it's a big enough library, there are *lots* of people working on supporting it, and bugs tend to be fixed pretty quick. If you're working on your own, you have to fix your *own* bugs, and I'd wager there are more of them than in the major projects. &gt;it makes it easier on the long run for your team to collaborate always using and fixing the same plugins, even if there are big. And here's the heart of the matter. The whole point of programming is, in essence, **Don't Repeat Yourself**. Using well-tread packages is essential to getting things done. Collaborating on open source packages is the cornerstone of programming.
There are two parts of this: * astronomical design * file size For the first, I fully agree. Just recently I wanted to use a great gesture library I found, and was put off by the fact it was also aiming to be a full jQuery replacement. Why do I need CSS selectors for a gesture library??? With lines of code however, the real problem here is JavaScript. For example if you take .NET, Ruby or Java, all of the standard library is *not* loaded when your code runs. The only items that get loaded are the things you use. Approaches like AMD helps to combat this, but what you really want is to be able to just remove all of the dead code, in full, like a compiler would. You can use things like Closure Compiler to achieve this, but personally I think we need a new language to do it well.
Closure compiler should be the last step, after you have executed code coverage testing. If you run the advanced compression, you might not be able to figure out what got sliced out.
with closure you have source maps to translate advanced code compilation. Personally I have nor run into an issue which works in simple mode and does not in advanced in over a year. 
So it's changing the color of a buffer array and using that for a particle based material, very round-about. I'd love to see some benchmarks against other methods.
You should probably indicate that and not refer to 'pure css' because that's not 'pure css'.
Link returns: "Forbidden You don't have permission to access /topic/74445-the-nodejs-part4-understanding-nodejs-platform/ on this server. Additionally, a 403 Forbidden error was encountered while trying to use an ErrorDocument to handle the request."
Fails basic keyboard usage patterns. I regularly use things like cmd+[left arrow] to skip backward over words, cmd+bksp to delete whole words at a time, and other similar things that are baked into every OS and browser. The first time I did this in "Fancy Input", the text display fell out of sync with what I assume is a hidden text input box.
Also, note that if you type more text than the screen can handle it will not preform like expected. But it looks great!
Alternatively, use the bookmarklet that was made a few days ago: http://blog.moovweb.com/2013/02/15/happy-valentines-day-internet-behold-the-harlem-shake-bookmarklet/
Every flavor of Javascript I'm aware of is not compiled and runs with an interpreter, therefore I don't know how you would do anything BUT run-time type checking.
haha well done
The alternative is unix-like tools that do one thing, and do it very well. Because they remain relatively small, they can be polished to a point that they are nearly or actually bug-free. And because they do only one thing, programmers can combine them to build the same grand designs we have today, without polluting their code with useless modules.
I wrote this component, so if anyone has questions or suggestions I'll be happy to answer them :)
Why are you using IE7/8 anyway? I get that a lot of things should be backwards compatible but for something that's just kind of cool it doesn't need to be perfect. Not to mention, I'm kind of an asshole and don't actively support IE8 in anything that I make.
&gt; The whole point of programming is, in essence, Don't Repeat Yourself. You had a good point, but then you exaggerated the hell out of it. Sure it's well-accepted as a principle of good code, but to say it's the whole point of writing code is absurd. Code is written to react to situations without human intervention, to solve problems humans can't solve, and to solve problems faster than humans can solve them. &gt; Collaborating on open source packages is the cornerstone of programming. *a cornerstone. Again, you can call something important without saying "it's the most important thing there is". And I agree that it's a cornerstone, but I don't think that contradicts what he was saying. He wasn't arguing against re-using code or open-source packages, he was arguing against packages that are the result of duct-taping together 30 different blocks that should be their own package.
Kinda wonky the ipad too 
Good. Screw ie7 and ie8
because of the browser market share of IE as a whole is still &gt; 50% and IE8 alone is half of that. if you look in ie8 its a complete fail. not even close to decent. FF also fails this. so as it looks, more than 70% of the current market share fails to be able to use this.
Last October [IE8 fell below 25% market share](http://thenextweb.com/apps/2012/10/01/internet-explorer-8-falls-25-market-share-firefox-15-passes-10-mark-chrome-loses-users/). Google, the monolithic system that aims to please, literally, everyone [has dropped support for IE8](http://techcrunch.com/2012/09/14/google-apps-says-goodbye-to-internet-explorer-pulls-support-for-the-browser/). I don't know what you're talking about with Firefox. I use Firefox as my primary browser and it works perfectly.
well besides FF being slow and buggy, i havent upgraded on this machine in a while, 13.0.1 doesnt support much of this Fancy Input
You should definitely let it update. I'm running v19 and it's a lot better than v13. Again, this shouldn't even count against this persons work because you either a) Haven't used Firefox in a long time b) Have actively refused an update, in the which case I have no sympathy for you. That's part of the reason I don't support IE8
b, for both IE and FF... as a backend dev who helps junior/frontend devs that {sort of} have to support old technology, its nice to have, these have enough market share to warrant it. so when i see cool shit like this, (and i really want to share it with the team) i immediately open up my crap-browsers to see what the fallback looks like.
Sure, that's why you should have a separate install or download the portable version for testing back that far. Don't keep your main station in the stone age for the occasional legacy testing.
Well that was just fantastic.
FAIL: Unable to get property 'appendChild' of undefined or null reference fancyInput.js, line 65 character 5 
The default font used for the code blocks makes me want to gouge my eyes out. But even so it was a good read.
Would be nice if effect 6 was a random of each effect, although outside of entertainment purposes, such an input would be incredibly distracting.
cant open your site
I like the idea but the fact that you can (shift-) tab out of it is a serious usability and accessibility issue. Also, is there any way to use this as a form field so it can be submitted?
Looks pretty sweet. It took me a while to determine what the output of the widget is, though. None of the examples called out to me "Oh, this is the example I should look at to see how I can access what the user selected." And on the API reference page, you have to scroll down to the Token Object section to get the "a-ha" moment of "Token Objects are what is stored on the search bar when a user selects an option from the dropdown menu." I use the autocomplete widget from jQuery UI, but I may have to give this one a go. Do you think there'd be any perf issues with &gt;600 options to select from?
In this project, you will write code to validate fields of an account creation form. You will write code that makes sure you entered a valid username, email address, phone number, and password, as well as make sure their password field matches their confirm password field.
I think it's pretty awesome and don't understand the hate in here. Nice work!
You can declare types with JSDoc, and have a linter do some type checking.
Some potentially useful information has been obfuscated by poor writing.
Neat concept yet entirely unpractical.
The key to slick, tiny fast libraries are two things: - Modularity (duh) - Code generation The second one is which isn't used too much (yet). We all compile our code through nodejs. Why not embrace it and build a very custom library with code that you really only need. Sure, there are attempts at it (like the bootstrap js pieces etc) but nothing quite there yet. Component is a great step but it also only takes files together and merges them. Plain old approach. I've worked a bunch in the automotive industry (low hardware communcation stack, CAN/LIN etc) where you generate only the exact code that you'll need. Back then it was with ugly C preprocessor (lots of #ifdef) but I think with javascript this could be done smarter. We already have super fast JS compilers.
It's really cool! Did you did this?
Some interesting points but I think it can be summed up as such: Favor modularity over monstrous complexity. If you were to take plugins/libraries/frameworks/whatever and break them up in to modules based on functionality then this allows you to pick and choose what you need and makes debugging a lot easier. As I recall, even jQuery is planning on allowing for a customized modular build in the near future.
I agree with the poster about doing validation with JavaScript. All initial validation should be done on the browser to save the round trip. The server already has enough to do. However, never trust the cloud. Any validation that is done on the client must again be done on the server. And if the data layer lies on a different domain, the validation must be done again there. Better to be safe than sorry.
The Underscore library gives you a choice of programming style: functional VS. chaining. Under the right circumstances, I think chaining can lead to more readable code.
I posted this there, and I think it's worth mentioning here: modules in ES6 aren't a sure thing. The last TC39 meeting tabled the discussion because there's disagreement about syntax and architecture. Crockford is advocating removing them from ES6 until a consensus can be reached.
btw, Typecast.js runs on top of underscore and provides a much more understandable chaining syntax. Everything in Typecast.js is chainable. Check it out: http://Typecastjs.org
Why downvotes? I suppose some folks hate CoffeeScript.
Thanks for the read! I'll have to check this out. FYI, the link you provided was dead. Typecast can be found at: http://www.typecastjs.org/
A few newlines unclutter this code easily enough. Honestly this seems easier to me because you don't have to change the modality of the underscore functions from 'normal' to 'chained' and then back again to 'normal'. Plus I have no idea how to write my own function in a way that can participate in this chained-or-not system. Finally, it's not at all clear whether these chained functions modify their input or treat it as immutable and return a modified copy, which may be important. (Though to be fair that's not always clear with unchained functions either, though generally if the argument is modified then not returning it makes that totally clear, which you can't do with chaining.)
Flagged this post as it's wildly inaccurate. I think you meant _[procedural](http://en.wikipedia.org/wiki/Procedural_programming)_ (or maybe _[imperative](http://en.wikipedia.org/wiki/Imperative_programming)_) instead of [_functional_](http://en.wikipedia.org/wiki/Functional_programming)? Because that is **not** FP in your example -- not even close. Please note that proper functional programming "avoids state and mutable data", e.g. _variables_. If you're using variables then you're not applying functional programming. &gt; The "Functional" Way [...] This is how most beginners will approach this problem It's also sad that you would relate functional programming to beginners, and ironic at the same time considering the misinformation. Also, "chaining" is another of the over-posted topics here, and really, if you don't grok chaining then I don't see how you could be a JS dev, considering ~~jQuery has implemented it and has been a _de facto_ standard for like 5+ years...~~ Javascript has native chaining: var str = "...", result = str .toLowerCase() .replace(/\W/g, '_') .split('_') .join(' ') .toUpperCase(); edit: better example
For sure, clutter can be problem with any style of programming. If I was going to be cleaning up dirty arrays like that a lot, I'd abstract it into a cleanArray function, whether I was chaining or calling repeated functions.
wow, that typecast library - crazy talk. rather use a compiler and cross compile or annotate and compile. or at least design a compiler which will rewrite you some sane code. every primitive is an object, every operation is a function call in javascript, a sure way to get really non performant code.
I'm not sure I understand your comment about shift-tabbing? Right now pressing tab selects the highlighted item. Can you be more specific about the problem? Regarding form submission, you could use the [onChange event](http://autocompletejs.com/docs#config_object:onChange) to update an &lt;input&gt; element inside a form with the value you want and then the value of that &lt;input&gt; would be submitted with the form. The value stored in the search bar is complex (see the [getValue method](http://autocompletejs.com/docs#methods:getValue) and [Token Objects](http://autocompletejs.com/docs#token_object)) and intended to be dealt with programmatically in JavaScript.
Can you be more specific? Is this still a problem for you?
I assume he's talking about the fact that you can't Tab or shift-Tab to next/previous form fields, due to the autocomplete overriding default Tab behavior. So it's a usability concern for those of us who use the keyboard to navigate forms, and an accessibility concern for users who have no option *but* the keyboard.
Matches all the RGB and Hex. I'm too tired to care about the rest. /^rgb\(0*((2[0-5][0-5]|1?\d{1,2})(\.\d)?%?),\s*0*\1\s*,\s*0*\1\)|^#([\da-f]{1,2})\4\4$/i
The link is kinda broken. Neat site, though. t: Fellow käpistelijä :D
copy and paste without the [1] in the link
count = 0; [for loop](http://www.w3schools.com/js/js_loop_for.asp) starts... i = 0... count = count + i (count = 0 + 0) i = 1... count = count + i (count = 0 + 1) i = 2... count = count + i (count = 1 + 2) i = 3... count = count + i (count = 3 + 3) i = 4... count = count + i (count = 6 + 4) i = 5... count = count + i (count = 10 + 5) i = 6... count = count + i (count = 15 + 6) i = 7... count = count + i (count = 21 + 7) i = 8... count = count + i (count = 28 + 8) i = 9... count = count + i (count = 36 + 9) = **45** now i = 9, when it iterates to 10, i no longer &lt; 10... so we finish our for loop and move on... count = 36 + 9 = 45 alert!
Wow!! Thanks for the awesome answer, friend! That really helped :)
&gt;If you wanted to list the library's approved CDN That's a good idea for the libraries that have one.
More generally the sum of the n first integer is n*(n+1)/2 here with n=9 it's 45
or indeed [this](http://cdnjs.com/)
[Thank little gauss](http://www.jimloy.com/algebra/gauss.htm)
Nice Idea, but personally I wouldn't trust any external CDN except it is well known for security and stability. Also I like to compile my Javascript into one file... For some hobby projects this might be interesting, though...
Thanks. I didn't think people would use this for large scale productions. I'm contemplating on the idea of having a cdn url from "trusted" source, if that exists.
Hmm, those ~~iframes~~ framesets...
iframe != frameset
Oh I'm sorry (edited). Of course; I assumed they were iframes. Still... shit.
The best thing is how the speaker is from Netscape, and the thing is sponsored by Netscape and yet there is an IE button in the sidebar.
If you tab into it, you can not get the list of options! People do not always CLICK on elements! 
How different is this from [cdnjs.com](http://cdnjs.com) ?
Oh god, I had forgotten we had "Webrings" back in the day. And counters, and this one still works?!
Don't worry, their current page is just as retarded: http://2013.texasjavascript.com Try clicking the giant flag banner, yeah, now that's what I call funny!
Actually, the best thing is the schedule. "What is JavaScript, anyways?" Lunch. Done! Oh, 1997.
shame about the brony.
Harper Reed is from the Web. You can tell from his glasses. And it's only $250 to meet him!
&gt;Best viewed in 640 x 480
[Nicole Sullivan](https://en.wikipedia.org/wiki/Nicole_Sullivan), is that you?
See other comment.
The only other ones that seem to exist (2010-2013) are pretty good though. Can't really knock the original considering it's from 1997. 2010.texasjavascript.com 2011.texasjavascript.com 2012.texasjavascript.com 2013.texasjavascript.com
I don't think it fair of ANYONE in the thread to be criticizing what someone built in 1997! After all, what the fuck did you build in 1997?! In case you are wondering, here's what I built in 1997... http://web.archive.org/web/19970215192232/http://www.slaw.neu.edu/public/default.htm
Here's what I probably built: ( . )( . )
I knew that, I was just having fun :-)
Wow, it's like what sites from the future mocking the 2010s are gonna look like. (let's face it, transitions are to our web what burningskull.gif was to that of the 90s (also rounded corners. Don't forget rounded corners))
Hmmm in 1997 I think I had a beautiful geocities webpage. With flaming gifs and an image at the bottom of the page declaring that my page was coded entirely in notepad.
This is pretty clunky and unimpressive. Absolutely not worth 15 bucks but apparently it was plugged in the right market for 600+ purchases.
Laugh all you want, dickheads. We had an economy back then that would kick this economy's ass before it's first cup of coffee.
And it's sponsored, so basically the schedule is built around AOL paying for lunch.
Kind of impressive if you built this yourself. Now tell me why I would use it? I can't exactly say I edit JS in textareas too frequently.
George R. R. Martin (of A Song of Ice and Fire/Game of Thrones fame) still has a web ring on his [official site](http://georgerrmartin.com/).
Really do one thing? Take a few common commands and &lt;command&gt; --help or better yet man &lt;command&gt;. You don't think those started small and have been expanded on with additional option flags over the years? You don't think they've ever had bugs? Also you're comparing apples to oranges here. How many developers are working together on "unix-like tools" compared to a developer that decided to opensource his home-brewed code.
Don't forget the animated .gif construction sign with the guy digging. And an orange spinning light.
Dat [icon](http://www.dogheaddevilbarking.com/made_with_notepad.gif), so many memories.
Totally missed that this site indeed had such a sign. Alas, it is not animated.
Call it a bubble all you want. If you were living in 1997's economy, you'd be so fucking happy right now. You'd all be employed, working on fun stuff. You'd be working in aerion chairs and riding expensive scooters down the hallways &amp; wearing propeller beanies &amp; accidentally dropping your palm pilot in the toilet. All the while you'd be dreaming of stock options and when to make your jump to your next job where you'd automatically make $10K more per year. By the way, when the internet bubble burst in Spring 2001, it didn't take out the world economy. You didn't see people rioting in the streets in Greece. It only took out the tech sector in the American economy. The drop-off was harsh and places tech-heavy like the San Francisco bay area &amp; Seattle suffered, but it didn't take the entire economy down with it. The recovery actually would have been faster, but just after summer was 9/11.
Aha! So do you think Brendan Eich used an old photo of himself to make the page? Nice sleuthing. 
I had a DHTML (IE 4 only, the shame) Messier object image viewer controlled by an on-screen "PADD" (and Kodak photo frames *totally* stole the button design for their remote control) that showed you the thumbnail first and a large image with associated data on request. In yellow Arial on black background long before World of Warcraft made it popular...
No, I found it while searching for lints.
which key(s)? Alt seems to be among them
Is the marquee tag deprecated now?
Funny that your username is "icrywolf" because that site is fake. Proof: * Did not exist before 2011 on web.archive.org: http://web.archive.org/web/*/1997.texasjavascript.com * First line of the index.html file: "&lt;!DOCTYPE html ... DTD HTML 4.01 Frameset ..." - this DTD did not exist until 1999/12/24 23:37:45. * Most of the images are hosted on blogspot, which did not exist until 1999. * The photo of Brendan Eich is a resized version of his wikipedia photo http://en.wikipedia.org/wiki/File:BEich.jpg -- "Brendan Eich, Mozilla Corporation Taken by ~~~~ 11/21/2006" and many other reasons.
[Please don't parse HTML using regex!](http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454) Use an HTML parser to loop through all the nodes, checking the node texts for instances of "Oregon".
Oh dear, if you push both alt and command it gets stuck in some odd third state. (Chrome)
Yes, but cdnjs is hosted by CloudFlare which means that they probably have a higher availability.
And what's a good, simple, easy to use, free HTML parser?
Your browser dev tools know how to walk the dom pretty well. If you need something headless, phantomjs will do the job.
nope. it would break too many epic sites to depreciate it.
Alt or the apple key on a mac. Strangely chrome and firefox report different keycodes for the apple key.
That's an **awesome example**, but I don't know anything about Python, and honestly don't really have a burning desire to learn it. Kind of seems like wasted cycles to me. Would you happen to know if this could be done using Node? I'm looking for the easiest/lowest learning curve and even though I don't know much about Node, I'd rather invest time there as I'd definitely use and grow that opposed to Python.
The best part is that Brendan gave a speach in the same conference in 2011 &gt; http://2011.texasjavascript.com/ :)
Counter doesn't work, it's permanently on 1581. Nor do any of the links. I think this is just a dummy site. Edit: Also, the DOCTYPE of the main frame specifies HTML 4.01. HTML 4.01 didn't come out until 1999. Even HTML 4.0 was only a working draft back then. Edit: also, this is a modern photo of Brendan Eich from his Wikipedia page, and it's a modern Netscape logo which they didn't have in 1997. The website's a fake. 
This website is a fake (at least, it wasn't actually built in 1997): - The round Netscape logo with the bubble like that is a modern Netscape logo which didn't exist in 1997. - The photo of Brendan Eich is a modern photo (well, uploaded to Wikipedia in 2007). He didn't look like this in 1997. - The DOCTYPE in the main frame specifies HTML 4.01, which didn't come out until 1999. In early 1997 the latest version of HTML was 3.2, and HTML 4.0 was a working draft. - The images, including the counter, are served from lh3.ggpht.com which didn't exist until 2008 (though the site could have been migrated since). - None of the links actually work, nor does the counter.
http://en.wikipedia.org/wiki/Deprecation http://en.wikipedia.org/wiki/Depreciation
You should make this into a module and publish it to npm for bower consumption.
[cheerio](https://github.com/MatthewMueller/cheerio) seems like a good starting point for HTML parsing with Node.js. 
That looks like Asia Carrera wrote the html for it all by herself.
Yes, this is a joke. [TXJS is an annual conference](http://2013.texasjavascript.com/).
His FAQ emblem spins to damn fast. They all need to be the same speed. This is annoying. 
[Classic Unscrewed](http://www.youtube.com/watch?v=ewjcQYN-Ud4)
The schedule didn't give it away?
For now we only support OSX, but it works with most Linux distros out of the box. We are also going to be supporting Windows very soon, it just requires a lot more documentation (which we are working on). There are some people who are making progress with this on their own: http://gcdevkit.zendesk.com/entries/23179367-Installing-DevKit-on-Windows
Do you need to know about those advanced Math functions (sin, cos, tan) to create stuff like this/html5 games?
WHOOOSH.
If I recall correctly, it was Ben Vinegar, not Ben Alman, who created this (fake) site in support of his 2011 TXJS talk (http://2011.texasjavascript.com/). Incidentally, another batch of tickets for the 2013 TXJS go on sale Friday :) http://2013.texasjavascript.com/
I am no Akim Camara so at age 2 I was doing age 2 type stuff.
The photo of Brendan Eich on the "1997" site is from 2007. [This](http://www.angelfire.com/tx4/cus/people/Eich.gif) is an old photo of Brendan Eich.
It's a modern photo of Brendan Eich and a modern Netscape logo.
Humans have also achieved 2560x1600 monitors which is *13 times* the number of pixels as 640x480. 3840x2160 monitors shouldn't be too far away. Sharp has already launched one and is calling it "4K".
It was built in 2011.
&gt; When you hear your number, step forward, pay your fee in **bitcoins**... nice!
Titanium Desktop? Last year I created a small app with it (it needed to be cross platform, have an installer, be written very quickly, and interact with the OS (have native file open dialogs, etc.). Titanium fit the bill.
The website isn't a fake, it's a joke, created in 2011 to support a talk at the real TXJS conference. Otherwise, excellent detective work.
Back to the Future had hover boards in June, 2012. I feel as if someone in the skateboard levitation industry is not pulling their weight. Edit: [I fell for a hoax.](http://i.imgur.com/BgEz2mP.jpg)
Yes, a whopping $250 to meet him ... and all of the other speakers, who are basically a who's who of front end and JS dev. Not to mention the chance to hang out with some of the brightest JS devs in the industry, both during the conference and the surrounding social events. But hey! If you don't want to come, that's cool. There's been a waiting list for TXJS for the past three years :)
You are indeed correct, if anyone wants to stay up to date with ES6 Modules discussions you can find the notes, https://github.com/rwldrn/tc39-notes/blob/master/es6/2013-01/jan-31.md
I was thinking the same thing. The worst part about that entire site is the 500ms load times. Could use *way* more requests.
You are probably **super** fun at parties.
I'm pretty sure Amazons CloudFront is as large or even larger than CloudFlares CDN.
That Netscape Navigator logo gave me such a rush of nostalgia. 
Afaik it was 2015. And saw some prototypes. We are getting there!
&gt; Everything You're... absolutely right. I laughed at everything on that site.
I agree with callum. In addition, a singular regex will not be able to replace a mutable number of multiple occurrences inside a match, so you'd have to use something like .replace(html, function(textdata){ return textdata.replace(/oregon/i, 'Montana'); }). Anyway, using the DOM will be much more simpler - and you'll avoid side effects like losing all events; A script to scrape up all text nodes would work recursively like this: function textNodeCollector(nodes, currentNode){ if (!nodes) { nodes=[]; } if (!currentNode) { currentNode=document.body; } if (currentNode.nodeType==3) { nodes.push(currentNode); } if (currentNode.childNodes) { for (var i=0, len=currentNode.childNodes.length; i&lt;len; i++) { textNodeCollector(nodes, currentNode.childNodes[i]); } } return nodes; } Now you just iterate the list of nodes and search and replace within their data attribute.
If you continue to support IE it will stay like that..
*woosh*
Turns out you're right. I fell for a [hoax](http://i.imgur.com/BgEz2mP.jpg). [Original](http://i.imgur.com/mtePiug.png)
I think you're whooshing the wrong person, I'm about the only person in this thread *not* to have fallen for it as if it were real.
"But I want to let all my visitors know that only 2 people ever visited this page!"
Too many damn Bens :)
Not my decision ... I'm just a dev.
Yes, but the HTML has an ASCII rendition of the page!
Dojo is fine, but everyone already uses jquery and/or underscore; I never really saw the point of using Dojo over those. 
Incase anyones wondering - This would be a good starting point http://jsfiddle.net/VGZMF/4/
I've used it in a fairly large project at work and was pretty impressed honestly. There is a bit of a learning curve for working out the best way to organise custom modules (this [Dojo Boilerplate](https://github.com/csnover/dojo-boilerplate) is a pretty good starting point) and the default themes aren't the nicest looking, but it's all customisable. If for nothing else, it can provide access to a lot of features in a single toolkit that would otherwise require using a number of different packages, check out [this article](http://dailyjs.com/2013/02/04/stack/) for some opinions on the popular options at the moment (mentions Dojo). Having it all built in may help in developing larger projects and keeping everything up to date, but could be overkill for a small personal project.
Dojo helps you build more modular and better structured applications. It's closer to a framework, actually. jQuery gives you no structure whatsoever. Also, Dijit (the UI library) is far better than jQuery UI. Dojo is better suited for large scale apps, and jQuery for small sites.
It is your decision, you're the developer. And if it's not your decision, you can say what your meaning is and what your thoughts about the support of IE.
I can't say I agree, as that's not what jQuery is for. If you want that *structure*, you'd use requirejs and/or backbone/ember/angular. We use jquery on *lots* of large scale apps and it works great for us, saying it's just for "small sites" is a bit of a strawman. Edit: but yeah, jQuery UI sucks. But most of us just don't use it, it's not bundled with jQuery anyway.
Thanks for posting this! Perfect timing as I've just completed the Codecademy jquery course and almost finished with the free entry level jquery course at Code School.
Happens with just alt for me.
The whoosh is strong with this one...
Comparing jquery/underscore with dojo is like comparing apples and oranges and cherries. jQuery -&gt; mostly a DOM manipulation library... with AJAX capabilities. underscore -&gt; functional programming library (enables "map", "forEach" and stuff for older browsers) Dojo -&gt; application framework (Modularization, Class oriented programming, AJAX, DOM, widgets library, and many more).
I think he meant jQuery is not a framework, just a DOM library, and as such doesn't provide any structure. I think we can easily agree on that.
Oops, fixed!
Well, I need many of the things Dojo has to offer, and I like the fact that they all come bundled together with a consistent API, and that I can upgrade all at the same time without compatibility issues, etc. I guess it depends on your taste, but I wouldn't mix jQuery + 5 libraries, as we all know, JS wasn't thought with modularity in mind.
Seems like an over-engineered way, to do things, we can already do. Ok, it's a little more consistent, rather than having to use 'typeof' for this and 'instanceof' for something else. But a couple of simple functions would have done that. The rest just seems to be overkill, and I don't see how any of it is really practical over just using the in-built methods. It's certainly not any shorter. One example: &gt; One problem with numbers in Javascript is that they are not particularly easy to parse becuae there are so many types of them. * parseInt * parseFloat They work, and work with octals, hexadecimals, and any other base you need. They return NaN if they fail. Done.
For starters, it looks like you're using version 1 of the API and you should really migrate over to 1.1 as possible. I'm not really one to say RTFM but *"[User timelines belonging to protected users may only be requested when the authenticated user either "owns" the timeline or is an approved follower of the owner.](https://dev.twitter.com/docs/api/1.1/get/statuses/user_timeline)"* In the sidebar they say that authentication [requires user context](https://dev.twitter.com/docs/auth/oauth#user-context) so I would start there.
It seems like when you pause the world, objects keep getting created/destroyed, they just don't move. Was this intended?
Cool, thanks @pogzi ! 
I looked at that Netscape logo and thought it was fake right away. 1997 didn't have glossy!
Escapio! Olé! (funny name)
I don't think that's would be a nightmare with jQuery... It just depend how you use it.
Quite strange semantic in my opinion.
Seems like a neat idea, I'll have a look.
This title doesn't have enough knockout or bootstrap it in it.
Nope. Time to check if your graphics card drivers have an update.
This was posted in /r/webdev today. It may be helpful. http://www.reddit.com/r/webdev/comments/1901b3/does_twitter_seriously_require_oauth_for_get/
What about yui or extjs? Seems like a more fair comparison.
If I'm not mistaken there is a free version if extjs now.
But can you bootstrap knockout the knockout bootstrap of bootstrap... for knockout?
Hm none seem to work :) Maybe it's my FF20 beta
We don't care so much about IE8 and older, but if the costumer wants support for it, we charge them extra. You still have a word to say, even though it's not your decision.
Wrote this at a hacknight last night and integrated it into our project today. Cut our client side build time in half by running requirejs, compass, and unit tests in parallel. :-)
hawt
cool, didn't know it was possible. 
I was considering using this until I saw this comment and tried hahahaha. 
Yea! His other articles are great too. Now I want to make games. 
I've never tried yui, I guess I was put off by the API. And extjs, I've played around with it, it looks pretty good but I think you need a license for commercial applications. I think (I'm on the phone) that they are called sencha now, aren't they? They've got neat widgets and possibly the prettiest eye candy, but they seem to be oriented towards building desktop-like application. 
Very cool interactive demos! Understanding and using bezier curves was a huge part of my computer graphics class. Took me a while to wrap my head around them, but now use them a lot!
And I agree wholeheartedly with removing modules from ES6. The current proposal would continue to split the module communities that have grown up around node and other ecosystems with no good migration path for modules that work perfectly fine right now. My least favorite thing about es6 modules aside from the very large amount of new unnecessary syntax is how what a module decides its exported names should be pushed upstream on what consumers of the module will need to call the module. Most of the best modules I've used in node just have 1 anonymous export that is exposed with `module.exports=`. The fact that `require()` in node/commonjs just returns a simple ordinary value instead of an opaque syntax-level construct that users need to destructure functionality from makes everything so much simpler and flexible. I haven't heard any compelling reasons why es6 can't just have an `import` keyword for static analysis purposes that just returns an ordinary value like how `typeof` is a keyword that just returns a string.
That's heresay. Proportionally Noscript users are a very tiny niche to the rest of the web. I do understand your thoughts of a js-less template, which does benefit for searching, while this helps for a web-app approach. Your argument of Noscript doesn't help your viewpoint however.
well, if you're not replacing "Oregon" between &lt; and &gt;, it looks like you're replacing "Oregon" between &gt; and &lt;. so, a regex for that would be: \&gt;(.*)Oregon(.*)\&lt; in javascript: var replaced = '&lt;h1&gt;Oregon Trail&lt;/h1&gt;'.replace(/\&gt;(.*)Oregon(.*)\&lt;/g, '&gt;$1Montana$2&lt;'); mind you, the above regex replacement is very specific to the use-case you have provided and may need tweaks to be more broadly applied.
also note when I just put &lt;a href="javascript:myclick(0)"&gt;funtimes&lt;/a&gt;&lt;br&gt;&lt;a href="javascript:myclick(1)"&gt;Event test&lt;/a&gt;&lt;br&gt;&lt;a href="javascript:myclick(2)"&gt;Event test 2&lt;/a&gt;&lt;br&gt;&lt;a href="javascript:myclick(3)"&gt;funtimes&lt;/a&gt;&lt;br&gt;&lt;a href="javascript:myclick(4)"&gt;Event test&lt;/a&gt;&lt;br&gt;&lt;a href="javascript:myclick(5)"&gt;Event test 2&lt;/a&gt;&lt;br&gt;&lt;a href="javascript:myclick(6)"&gt;Event test 3&lt;/a&gt;&lt;br&gt; into the sidebar div it works perfect, thats copy and pasted from the console.log so im not sure why its not working.
Backbone + jquery + rivets is my preference
As someone who has tried far too many crappy "format your JSON exactly like this on the backend" widgets, thanks for putting in the preprocess function. 
If an app was loading 350k to do the job of 4k, then the fault lies with the developer, not the tool. Nothing about Dojo requires you to load anything more than your application needs. Indeed, it has long had a comprehensive build system that provides for creating very streamlined builds, and this only got better when they migrated to using AMD.
Nice! What is your testing setup?
Why did I get downvoted to oblivion for pointing out exactly the same thing?
It's both. It's a fake in the sense that it wasn't actually built in 1997. Obviously, it was created as a joke.
I don't get it. That's a modern site built in 2008.
You're whooshing the wrong guy IMO. The vast majority of comments on this submission up until yesterday were from people who totally didn't realise it was a joke and thought it was genuine. This guy is one of the few that actually did realise it wasn't real.
And it's touch compatible!
The logo hasn't changed drastically over the years. 
Talk about a website that fails the [man from Mars](http://www.webpagesthatsuck.com/biggest-mistakes-in-web-design-1995-2015.html) test.
One of the best examples of gruntfile I have ever seen. I bet some people from grunt team are behind this, or at least some avid grunt user.
I find it a little difficult to believe you couldn't find anything while searching for it. [This was the very first result from Google.](http://support.mozilla.org/en-US/questions/940005) https://www.google.com.au/search?q=netscape.security.privilegemanager+is+undefined
I'd suggest reading the ECMAscript spec.
...and road curves are pretty much always designed as circular segments rather than curves with changing radius of curvature, since that would lead to cars going off the road.
Well that doesn't really matter as only an experienced JavaScript and nodeJS programmer would find this useful anyway. Myself, fitting said description had no difficulty understanding this.
I mean, keep in mind the [main page](http://browserify.org) is the first thing someone should see and not the blog post...
Heh, yea. I know the problem :) This is why I shy away from Rainmeter/Conky/Samurize lately. When I was younger, I used to hack the shit out of my desktop creating beautiful/crazy designs (much like you can see today in /r/rainmeter), but the problem with that is that 95% of the time you don't see a single pixel of your desktop, not to mention that you don't interact with it as we used to. Anyway, that's why I created Desckit, it's low profile will not get in your way while working/gaming so you won't have to quit/start it every time you don't want something clogging your pipes (i.e. start a high-end game), but it's there when you see your desktop, and when you just want to have a glance at what's important to you (for example, use it as a dashboard to monitor servers).
lol @ downvotes. I sometimes really don't get Reddit at all.
This is possibly the worst blog entry I've ever read on JavaScript. It's downright incorrect in most cases and full of unsubstantiated opinion. 
A "simple" solution (that extends the object prototype) to something that is not a problem? A "solution" that breaks: - instanceof - Object.getPrototypeOf - Object.prototype.isPrototypeOf - the constructor - the prototype - the prototype chain - any possible compiler optimization - ... Are you kidding me?
Hey, thanks! I'm just a big fan of grunt. I use it on all of my projects now.
This might help you http://www.zebrakick.com/object-literals-vs-constructed-objects-in-javascript/
"If you are new to JavaScript, I suggest avoiding the this keyword until you get comfortable with the basics of the language." This is *terrible* advice. If all beginners started learning Javascript by getting a firm grasp of `this`, there would be a lot fewer mistakes and misunderstandings down the road.
There is no semantic difference between {} and new Object(). The literal, however, is easier to optimize and therefore often faster. The literal is also more flexible as it allows additional properties to be added. Always use the literal IMO.
Some jsPerf tests on the many ways to construct an object: http://jsperf.com/object-create-vs-constructor-vs-object-literal/53
Not to mention it's more readable.
I dunno about that, "just" an autocomplete is generally a lot of code anyway. Take [jQuery's implementation](https://github.com/jquery/jquery-ui/blob/master/ui/jquery.ui.autocomplete.js) for example - **much** larger. Autocompletes are non-trivial, regardless of how simple the end result.
This is *exactly* what I was looking for just last week - I might swap this in for my solution instead!
Use the first ({}) because "Object" in "new Object" can be redefined.
Yea apparently the demos page has some problems in FF. I haven't been able to reproduce them but there is an issue open for this on the github page. If you have any details such as a console error/warning that would be appreciated. Thanks 
Obviously you don't get the point. The point is the current JavaScript class system is convoluted and inaccessible to the average developer, and usually results in very ugly code. With this, people can get a lot of the benefits of parent/child classes w/out a huge barrier to entry, and it's clean/readable.
Because the times has changed and developers understood prototypes, loved them and kind of don't like these fake classes approaches anymore. There were plenty of libraries like this downvoted before.
Just forget about parent/child and love the prototype - JS is not C++ and it will not be C++, if you like C++, go code in C++
Point taken. ;)
There are now more JS devs than ever, meaning most of them are novice and don't understand prototype at all. I'm not seeing your logic. Also, for most devs, JS is not their primary language... there's a reason these libraries keep popping up.
This person does not yet grock JavaScript. He seems to think that a lot of the sensible behavior of JavaScript is "bizarre". JavaScript has several styles of variable and function declaration because it wants to both cater to new programmers used to imperative style programming while at the same time allowing programmers to work withing the functional paradigm. It successfully supports both. Then he talks about how JavaScript is unlike other languages, where objects refer to parent objects when the current object does not contain the referenced property. WTF is he talking about? This is how most OO languages work. Then he says that the fact that you can do things in different ways in JavaScript is because it is poorly designed. No, it is because he doesn't get JavaScript.
JS is the most universally accepted client-side scripting language for browsers and is unavoidable. Also, for the vast majority of websites, loosing a microsecond in compiler optimization is negligible.
If you want classical inheritance in js done right you better use something like [isaacs/inherits](https://github.com/isaacs/inherits) (look ma! only 10LOC), or roll your own, but without breaking the language.
Are those "return void 0;" lines legit javascript? o_O Looks like C to me. I dig the gist of this post. The idea of iterators in js is interesting.
I'm sorry but this is terrible in so many ways.
The "barrier to entry" argument is pure bullshit. If a dev doesn't understand something, s?he should just RTFM. Period.
Funny that he mentions Crockford's book, yet his whole post is basically JAVASCRIPT AMIRITE??? Without any kind of demonstrated understanding of how it works. In fact, one of Crockford's first chapters is devoted to calling people like this author out as developers trained in other languages shoving round pegs into a square hole.
So your argument against "barrier to entry" is people should just suck it up and spend the time getting over the barrier?
Hope to see Intel stir some things up with AppMobi. Tools like Unity are looking like a sweeter deal for game dev.
We're in a field full of entry barriers. Heck, to even *be* a developer requires the ability to think computationally and transcribe those thoughts into a standard language—that's probably the largest barrier there will ever be, and we totally expect everyone on our team to have invested the time to overcome it. Same goes for any other techniques they may apply in their code: if they don't know how the environment expects them to do something, they should *learn*. Otherwise, they'll produce messy, disorganized code that runs contrary to the standard way of doing things, and, in production code, that's unacceptable. We have entry barriers for a reason, we overcome them on a regular basis, and they're *good* for the world—that's how we produce better code and help our team grow into better developers, too.
Looks nice... though possibly not the best choice of name.
I don't think the parent comment is suggesting building web front-ends in C++, but rather that, if we're gonna play in the JS playground, we oughta do it the JS way.
Why not? I guarantee that five years from now, even if you never come across it again, you will still remember this name.
Reminds me a little bit of [lib-tmpl](https://github.com/jeremyckahn/lib-tmpl).
I assure you the author understands JavaScript just fine. :) The this keyword absolutely does have different uses from other programming languages, and that's precisely why I recommend focusing on the basics of JS first. So many people get tripped up out of the gate when it comes to JS, because they go into it expecting it to behave like other languages they've used in the past. It is absolutely essential for a professional JS developer to understand the this keyword. However, for the newbie jumping into the language for the first time from a PHP background, I would rather they grok the module pattern, JavaScript closures, etc. before they get into the complex stuff. Odds are they're starting out by mucking around with some simple event handlers anyway.
He says you should never ever have a global variable or global function. Do other people agree with that?
Poorly written, a little pretentious, and in some cases just outright wrong. That's a downvote from me. 
I'm really not understanding all the hate. Why must we "oughta do it the JS way". That's literally the only argument here. The only other argument I see is that it is perhaps slower, but I already addressed that saying the speed difference would be negligible.
It's all well and good saying 'love the prototype', however the problem is that most of the time, people end up using them, to build a class. Some of the advanced stuff you can do with prototypes is cool, but can also be pretty damn complicated. Often a class with some inheritance, an equivalent to mixins, or just plain composure, will do the same job, but with less concepts. Maybe a little more code, but it'll be easier to comprehend. This is especially true when people change the prototypes of instances whilst they are in use, alter prototypes whilst they are in use, or generate methods/prototypes on the fly.
I'd say you should never have an *implied* global. If you're going to attach something to global, make it clear that you're doing it on purpose: (function (global) { global.foo = 'foo'; })(window); Also, something that he doesn't note, but that's important if you're writing production code, is that implied globals (like his examples) are syntax errors in strict mode.
No, lol. It shouldn't be abused, but it is extremely useful in limited circumstances. You can't, for example, use write library code without it.
Since the code provided definitely works and works reasonably quickly, the biggest things left to talk about are philosophy and maintainability. Mostly they boil down to: we shouldn't reinvent the wheel, especially if it's just because the built-in wheel doesn't look like wheels we've seen in the past. It's redundant and it makes life harder for future developers. When we work in Python, we use Python conventions: we don't try to implement C-like pointer arithmetic, even if that's what we're used to, because we know that Python is optimized for Python-style code, and we know that the rest of the team and all future developers will expect Python-style code. When we enter a new environment, we seek to meet the environment's conventions, rather than squishing and stretching the environment to meet our conventions (that we developed by working in a totally different environment). So, if I'm a Javascript developer and I'm coming to look at your code, I want it to be Javascript-style, whether I'm a novice or a veteran. Novices have to learn the new system, anyway, so may as well use the one that's widely documented across the web rather than the one we cobbled together on our own. Veterans already know how prototypal inheritance works, so they don't need to learn anything about the environment to dive right into our business logic. It's all immediately familiar. Anyway. When we're in Javascript's house, we play by Javascript's rules. That way, we don't have to invent our own systems that duplicate built-in functionality, and other people actually know what we're doing.
When was the last time in a corporate environment that people care what testing framework testers use?
Here's what I find really fascinating: I was expecting this to be a classical inheritance library from someone dissatisfied with the prototypal inheritance model, but that's not it at all. **This is a re-implementation of Javascript's built-in prototypal inheritance.** Prototypal inheritance is a system in which there's no such thing as classes and instances; instead, if I want to create a new object, I extend the functionality of a "prototype": an existing object whose behavior I can reuse. That's what JS does, and that's what Extend.js does, too. Extend.js does it in its own way, however, and therefore sacrifices [the features that mikrosystheme mentions](http://www.reddit.com/r/javascript/comments/192rfn/extendjs_a_simple_solution_to_child_classes_only/c8kacwp). Here's a reimplementation of the vehicles demo, using a crazy-similar API, while maintaining the built-in prototype chain and not rebuilding the wheel. function fromPrototype(parent, props) { var object = Object.create(parent); for(var prop in props) { if(props.hasOwnProperty(prop)) { object[prop] = props[prop]; } } return object; } var Car = { typeName: "Car", getDescription: function () { return this.typeName + ": " + this.name + " (" + this.getDetails() + ")"; }, getDetails: function () { return "is a vehicle"; } } var Truck = fromPrototype(Car, { typeName: "Truck", getDetails: function () { return Car.getDetails.apply(this) + ", is a truck" } }); var vehicles = [ fromPrototype(Car, {name: "Buick"}), fromPrototype(Car, {name: "Impala"}), fromPrototype(Car, {name: "Accord"}), fromPrototype(Truck, {name: "Tacoma"}), fromPrototype(Truck, {name: "Escalade"}) ]; for(var i = 0; i &lt; vehicles.length; i++) { var prototype = Object.getPrototypeOf(vehicles[i]); console.log(vehicles[i].getDescription() + " with prototype " + prototype.typeName); } (This could all be accomplished without the `fromPrototype` helper function too—slightly more verbosely, but without significantly altering the overall shape of the code. It's not a paradigm shift; just some super-helpful syntactic sugar. Also, if we were comfortable messing with `Object.prototype`, we could use [Tim Caswell's `Object.prototype.spawn`](http://howtonode.org/prototypical-inheritance) to even more closely emulate the `Parent.extendObj` syntax—but that's probably a bad idea unless we're on ES5 and can therefore mark `spawn` as not being enumerable, as Tim demonstrates.) Anyway. If all we want is that spiffy extension behavior, it just takes that 5-SLOC `fromProtoype` function (by the wonderfully talented [Yehuda Katz](http://yehudakatz.com/2011/08/12/understanding-prototypes-in-javascript/)). It's good stuff. This version also makes *all* objects extensible, not just descendants of `SuperObj`, so that kind of generality is always nice. Also, I never really got prototypal inheritance before today, so thanks for inspiring me to go out there and learn what it's all about :D
Is it? I thought it was "test" + "spectacular" = "testacular".