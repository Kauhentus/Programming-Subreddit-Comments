Too bad its not this simple! Number 2 is the big one. This binding is dependent on how the function is referenced and called. In particular this quickly falls apart with callbacks. var obj = { method() { console.log(this); } } button.addEventListener('click', obj.method); // what is this? This example is actually doubly complicated because of how `addEventListener` sets context when calling its callbacks. But right off the bat, the reference to `obj` in `method` is lost given how it's being passed into `addEventListener` as a function reference that loses all association with `obj`. When called, it can't be called as obj.func() and instead becomes just func() - something which would normally be global (or undefined in strict) though this particular API also throws its own context into the mix, effectively calling the function as func.call(event.currentTarget). In a post not to long ago I attempted to spell out some of the differences: https://www.reddit.com/r/javascript/comments/9sh2aw/cheat_sheet_for_this_and_new/e8p7dvd/
Sounds more like a react specific problem than a generic javascript one :)
Yes. GraphQL is a way to declaratively query and mutate your data on the backend. A GraphQL client integrates that with your front-end framework and provides convenience. Redux is a global application state container where you can store anything. So you can use a GraphQL client to get data and Redux to keep track of the visual state of your application. I actually think that Redux was always clunky for storing data requested from your backend; if I could choose my stack I'd use it to keep track of my application state but something else to get my data.
You need to map over the elements and call this.colorize() on them. Also, `this.colorize` takes `element` which, you're not passing.
Awesome, thank you!
lol
Thanks. I always just think of `addEventListener` as a method on the dom-node/element, and it attaches a handler function/method to that element. So when the handler function gets called, `this` inside of that function points to the dom-node/element (i.e., `this` points to the element). Maybe not technically right, maybe just stretching to make 2 work, but it seems to work in most cases lol! And we do see it break down when using fatty funcs. I believe the "*Bonus" rule in my 3 Easy Steps applies then.
&gt; 2. If this is called within a method, then this points to the object on which the method is defined That's actually one of the biggest mistakes people make with `this`. In JavaScript, where the method is defined has nothing to do with this - unlike in many other languages. The easiest example to illustrate that is when using `setTimeOut`. But, even before you get there, put yourself in a beginner's shoes. They may ask: -what is the `window` object? - what is an object in the first place? - what is a method? - how do I use `apply`, `call`, `bind`? - what does defined mean? To someone experienced, these may be obvious. The fact remains, many people who are effective at development don't fully understand these concepts, for whatever reason. **Understand `this` goes way beyond `this`**. The keyword is just a tip of the iceberg. That's why I created the slack channel so we can go deeper into the relevant topics. 
Yes I know, but I would like to do something like jQuery does if possible like jQuery('.divs').colourMe(); and do the mapping inside the object for a "prettier look", is that even possible? Thanks!
As others have said, it's an npm download stats issue. It happens from time to time and affects all npm packages. It happened in June as well. https://npmcharts.com/compare/react,angular,@angular/core,ember-cli,vue
One or the other may be faster depending on the implementation; *the better choice*, however, is governed by the [Rule Of Least Power](https://en.wikipedia.org/wiki/Rule_of_least_power), and that is CSS
Thanks, I appreciate that!
Just saw this published on Hacker News and it looks pretty good: https://jshandbook.com/
[The ES Discuss thread](https://esdiscuss.org/topic/cascade-operator-proposal-native-fluent-interfaces)
Is this loss?
Hi /u/WiseDouble, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
I’ll just be polishing my portfolio for now until I get a job. A level editor/inspector will give me some experience creating a UI/UX I want for a very different game I’ll be making once I have a job. But since I’m looking for web dev work I really need to finish up some features for my full stack project first 
Thanks! The warping was a fun effect to add. I thought it would slow the game down too much but it came out fine 
What font issue? The blurry fonts?
\&gt; since, I'm not exactly going to asking technical questions as the junior. &amp;#x200B; You absolutely should. Can they explain themselves. Have they done the work? &amp;#x200B; Interviewing should never actually be about the specific syntax and stuff, all that can be looked up online, its problem solving, stating assumptions, personality. To me the technical interview is the biggest personality test there is. &amp;#x200B; Code readability, what kind of function names, or variable naming schema do they use. Have they used multiple ones, what is their favourite. The whole time seeing if they talk down to you, if they explain themselves well, if they have tried different things, do they get upset if you do things differently, do they get excited about topics.
Yeah, font smoothing and anti-aliasing stuff
https://ahmadawais.com/fix-macos-mojave-font-rendering-issue/ One line command to fix it.
You could just do `this.elements = Array.from(elements)` instead of needing all those comments and checking to see if it's a `NodeList`
Oh I'm sorry for some reason the other comments didn't show up, so I'm repeating what others said, but I still stand by.
[removed]
That is really cool! They have some free trials. I am going to look into it. Hopefully there is something I could use for free in perpetuity.
Believe me, if I can use ES6 I do. Old-timey javascript scares me! And here's my feelings on using `const` outside of a transpiler: [ehhh....](https://caniuse.com/#search=const)
I guess the obvious question here is why use this over Ramda?
Yeah, no prob.
thanks, look good, but for what I see course it is with python, I prefer with javascript
Thats why its dead! https://www.ghacks.net/2016/02/23/flash-replacement-shumway-is-as-good-as-dead/
they did fixed it
Mouse dragging is a recent upgrade, only select demos have dragging enabled. Take a look at the "Perspective View" carousel, does dragging work for you on that one? If not, what browser/OS are you using?
&gt;Due to creating a store, OP's stores are not singleton, so you must import from where you created the store (OP is importing from ./state because that's where the store instance is located). ReactN is singleton, so the store instance is in the package itself. The pro of OP's case is you can have multiple instances. The pro of ReactN is not having the create store boilerplate or importing from a relative path. Multiple store instances for ReactN is a discussed feature of ReactN but not yet implemented. The fact that reactn is global/singleton means that it can't be used for server-side rendering ?
You have the series: http://exploringjs.com/
You left out the " **You need to sign out and sign back in or restart your Mac before you can see your changes after running this command**. " part.
I wouldn’t say there is overlap between GraphQL and Redux. There is some with the Apollo client library but not GraphQL itself.
Currently, yes. There is a global reset in the Git repo that hasn't been pushed yet that will solve non-concurrent issues, and I've recently opened an issue for an optional context provider for instances for concurrent state. Letting it rattle around for a bit before implementing it.
 defaults write -g CGFontRenderingFontSmoothingDisabled -bool FALSE; reboot; One line command.
regardless of your answer, you've got a great attitude to constructive criticism!
&gt; **Collapsible stack frames** &gt; Sometimes call stacks in the debugger contain stack frames which are not interesting to the user (external code, skipped files etc...). To reduce clutter and save on vertical space, we now render those uninteresting stack frames as collapsed. Nice
That sweet sweet multiline search :D
It's better to use one style than to switch on a whim. Your code should be predictable.
The grid is not too bad. The further a point is away from it's original position, the more force is applied towards its original position (k or stiffness/elasticity). The faster it moves, the more force is applied in the opposite direction of the velocity (c, or dampening). I adjusted k and c values until the ratio provided a nice under-dampened effect. (Mass is "1" for every object)
Devdocs.io can save for offline. Also, You Don't Know JS. 
This is a good idea, but I would also be careful about playing too "dumb". Remember they are interviewing you and your company just as much as you are interviewing them. If you come off really slow to grasp what should simple ideas, just to test the waters, that can be accidentally seen as a warning sign. If they are explaining something you already understand but are curious to find out how they would explain it in more detail, be upfront and just say "I get it, but if I didn't how would you expound on a, b, c... etc.".
Sry I forgot to tell that I can't add an external lib into the project :/
c:\&gt; node &gt; 
What?
#C:\&gt; NODE #&gt; 
When the writer links it he saves every reader time. And since the whole point of the article is to give out information, giving map directions to the information grows the entire thing.
yes, setTimeout would have been a better example
JointJS is completely free [under MPL](https://github.com/clientIO/joint/blob/master/LICENSE). Rappid is the paid version, which comes with various bells and whistles, but you can implement everything in the free version by making your own elements/links.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [clientIO/joint/.../**LICENSE** (master → 4fd3222)](https://github.com/clientIO/joint/blob/4fd3222ef7f5b187944b10bd7b34beb083717381/LICENSE) ---- 
When I clear the terminal, don't show me the text when I scrolled up. 
Any news on floating windows so I can have one editor on a different screen?
&gt; latest commit over 2 years ago
Not about replacing Redux, but I did write about the motivation for Hooks in more detail. https://medium.com/@dan_abramov/making-sense-of-react-hooks-fdbde8803889
\&gt; one line \&gt; ; Somebody burn this heretic.
I was excited to give this a whirl, but the installer would not run. Hope to try it again when dev is further along. Good luck, it's a worthy cause.
https://javascript.info/bubbling-and-capturing
&amp;&amp; ?
\`e.currentTarget\`
if you're using jquery you can do `$(e.target).closest('li');` otherwise you have to manually traverse the parents until you find an &lt;LI&gt;
Two ways to do it: &lt;ul id='list'&gt; &lt;li&gt; &lt;p&gt;I am &lt;span&gt;the first &lt;button&gt;list item&lt;/button&gt;&lt;/span&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;I am &lt;span&gt;the second &lt;button&gt;list item&lt;/button&gt;&lt;/span&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;I am &lt;span&gt;the third &lt;button&gt;list item&lt;/button&gt;&lt;/span&gt; &lt;/li&gt; &lt;/ul&gt; &lt;script&gt; const list = document.querySelector('#list'); function useFilter(e) { const clickedListItem = [...e.currentTarget.children].find((li) =&gt; li.contains(e.target)); console.log('filtered result:', clickedListItem); } function useTraversal(e) { let match = e.target; while (match.nodeName !== 'LI') { match = match.parentElement; } console.log('traversed result:', match); } list.addEventListener('click', useFilter); list.addEventListener('click', useTraversal); &lt;/script&gt;
I just did it a way similar to DGCA, if anyone is wondering: &amp;#x200B; `let currentElement =` [`e.target`](https://e.target)`;` `while(currentElement.className !== 'video-li'){` `currentElement = currentElement.parentElement;` `}`
Multiline regex search. Yiss.
Great answer, I appreciate your help - especially the time testing info.
Install node and start walking through the docs. They’re pretty good and each module has a ton of stuff to play with. File System in particular was a great early one for me to learn callbacks and still comes in handy. 
No prob! I appreciate the opportunity to procrastinate from what I'm supposed to be working on 😬
Doesn't seem like it :( [https://github.com/Microsoft/vscode/issues/10121](https://github.com/Microsoft/vscode/issues/10121)
The library is open source and easy to read. You could just read it and learn/reuse.
What are the exact questions you are asking?
still waiting for proper macro recording, in sublime macros + regex search was a problem, I hope they will do better in vscode.
This remember me when I did a crazy **toDo** app with vanilla Js ```Js delete(e) { e.preventDefault() // From data this.tasks.splice(e.target.value, 1) // From view e.target.parentNode.parentNode.removeChild(e.target.parentNode) } ```
Thank you
Firefox may be allocating the total size allowed for the database. We can't answer if Chrome is simply compressing it unless we know how big the data actually is. Is it 650MB or is it 65MB?
OK, so can you share what you've written so far? I'm not going to write the code for you, but here are a couple of hints: - use document.getElementsByClassName('your-image-class-name') to get an array of the images if you need to go through all of them. - the easiest way to start is to create an event listener on your image class name - when you've got your event, you need to change the `src` property on the `event.currentTarget` Or, even better - Learn how to use `document.getElementsByClassName` - learn how to capture a click event - learn how to modify the `currentTarget` of an event If you learn the above, you'll be able to write the code you need.
Thanks for the great share, very useful.
I think it's already fixed in Electron
This pisses me off tbh. It's the biggest missing feature since day one and still no traction. I love vscode but this always makes me feel sad when using it. 
To handle more levels of nesting, like if a li had an element that was clicked.
Whenever people mention learning coding through videos I can't help but think of those kids' shows where they learn their alphabet and colors etc. with the help of sing-a-long songs.
This is an extremely vague question. You should tell us what you are working on currently so we can write the appropriate answer. If you seriously do not know where to start and you don't know how to compose your question to identify an accurate answer (thus, implying that you're not yet that knowledgeable to ask what you are asking for), I truly suggest you start from scratch and increment from there. Online tutorials like codecademy or w3schools should help
Bye, sublimeText, I loved you so.
I suppose that when you're learning (just getting into JS) the callback can be something hard to understand here. Or rather the way it handles 'this'.
Hey there. Any chance you could show us what your JSON looks like?
Or `Element.closest(selector)`. It's a DOM API, with decent (but not great) support. https://developer.mozilla.org/en-US/docs/Web/API/Element/closest
Just use websockets and stop looking for problems.
As far as I know, It's impossible to make something async sync, but it's relatively easy to do with a promise. &amp;#x200B; const somethingAsync = (callback) =&gt; { callback(data) // keep in my a lot of APIs are callback(err, data) } const somethingAsyncPromisified = new Promise(resolve =&gt; { somethingAsync((data) =&gt; { resolve(data) }) } ;(async () =&gt; { // do something await somethingAsyncPromisified() // wait // do something else })()
This actually makes sense from a historic point of view though. Stdout has, for as long as I can remember, been write only for a shell, which in turn meant that “clearing the screen” just consisted of sending as many empty lines as the screen (or printer) could fit. To this day, all terminal emulators/command lines I know of still follow this pattern. With this in mind it kind of makes sense that vscode behaves consistently with this.
You don't know JS is free and community backed. It is what I would call the Bible in pure JS terms.
So long as you build your frontend bundle on a reasonable machine and just upload the built bundle, you can use any frontend framework on a shared host. Really though, move on from shared hosting.
Any framework can be used for shared hosting
Right. The example says "Note that d() is applied to foo not to c" and I'm left wondering "how can you tell?" 
You also can set everything inside the `&lt;li&gt;&lt;/li&gt;` to `pointer-events: none;` and they won't fire an event any longer.
Not everyone today use windows, amigo :)
Yeah VS Code is the best program ever written.
What made you think shared hosting affects your frontend framework? Is there some other related problem you have?
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [hewix/array_pro/.../**array_pro.js#L308** (master → 43ac2c9)](https://github.com/hewix/array_pro/blob/43ac2c934cb3750642e9afa3bafeeaf1f3f6a212/array_pro.js#L308) * [hewix/array_pro/.../**array_pro.js#L210** (master → 43ac2c9)](https://github.com/hewix/array_pro/blob/43ac2c934cb3750642e9afa3bafeeaf1f3f6a212/array_pro.js#L210) * [hewix/array_pro/.../**array_pro.js#L325** (master → 43ac2c9)](https://github.com/hewix/array_pro/blob/43ac2c934cb3750642e9afa3bafeeaf1f3f6a212/array_pro.js#L325) * [hewix/array_pro/.../**array_pro.js#L322** (master → 43ac2c9)](https://github.com/hewix/array_pro/blob/43ac2c934cb3750642e9afa3bafeeaf1f3f6a212/array_pro.js#L322) * [hewix/array_pro/.../**array_pro.js#L242** (master → 43ac2c9)](https://github.com/hewix/array_pro/blob/43ac2c934cb3750642e9afa3bafeeaf1f3f6a212/array_pro.js#L242) * [hewix/array_pro/.../**array_pro.js#L210-L221** (master → 43ac2c9)](https://github.com/hewix/array_pro/blob/43ac2c934cb3750642e9afa3bafeeaf1f3f6a212/array_pro.js#L210-L221) * [hewix/array_pro/.../**array_pro.js#L343-L346** (master → 43ac2c9)](https://github.com/hewix/array_pro/blob/43ac2c934cb3750642e9afa3bafeeaf1f3f6a212/array_pro.js#L343-L346) ---- 
I understand what you're saying, and you aren't wrong... but in my opinion this was a poor design choice originally, they shouldn't keep it around just for nostalgia's sake. At least give me an option
Apparently you guys havent used a thing called a "book" before. They didnt have links and we learned well enough. 5 keywords, extra 10 minutes searching aids better learning. The ease of accesibility of information turned you all into zombies. Obvious from the jumber of downvotes here I got.
Holly Molly, that was way more feedback than I ever imagined I would receive :D Thank you very much! Yes, the first thing came to my mind after reading your words, was the same thing when I pushed the code to the repository. That it needs a sh\*t ton of more work. But I wanted to avoid the unborn child syndrome that I just keep this thing at home and never actually make the first commit. Now that it's out I feel more committed (no pun intended) to improve this in any ways. I will go through your comments and try to amend the code as advised. Originally I wanted to start as an ES2015 module, I suppose that's my starting point for fixing. And again, thank you for your critical feedback! 
It isn't. But I am also trying to avoid having the code written for me so I can try and learn it and understand it. All my design practice so far is with HTML, HTML5, and css. As far as JavaScript goes, I can do arithmatic equations, build a triangle out of #, and make a FizzBuzz sheet for 1 to 100, but as far as web development goes, I am lost. I'll see if codeacademy can help me though since I've beat the class material and w3schools to death, so thank you.
I'm not familiar with the specs, but I guess removing the lax on the order of props would help. { x: 'a', y: 'b' } and { y: 'b', x: 'a' } resulting in different shapes makes current JIT optimisers stumble. If the order didn't matter then code would be faster in some occasions.
Yeah I assume there are some major tech issues with this, it is a very often requested feature.
That appears to be meaningless. It's almost an immediately invoked function, but is missing an exclamation mark before `function`, or parentheses surrounding the function definition. eg. (function foo(param) { console.log(param); })("param"); eg. !function foo(param) { console.log(param); }("param");
BUUUUURN ! /s More like 2 lines and 10 minutes. Let me explain : Install VS Code, Run it, wtf font is weird. How to fix this ? Start safari, search, 3 topics are outdated/not working/ not related. Found a reddit post, try it out of luck, then reboot, wait for the PC to restart, rerun VS code, believe in god, and yes the font is okay. It makes it a bit less trivial than just one line. While the older mac / other os don't have it. Better it to be fixed, users will be happy of just having a product (and what a good one) working :)
In principle, it’s an immediately-invoked function expression (IIFE). But it’s missing parentheses around the function expression (or a `void` in front of it): Your code is a function declaration followed by the comma operator, used twice.
In your particular example, there are two possible responses: 1. Immediately invoked function expression (aka IIFE): [https://medium.com/@vvkchandra/essential-javascript-mastering-immediately-invoked-function-expressions-67791338ddc6](https://medium.com/@vvkchandra/essential-javascript-mastering-immediately-invoked-function-expressions-67791338ddc6) 2. Middleware pattern. There is a chain of functions: [https://medium.com/@pragyan88/writing-middleware-composition-and-currying-elegance-in-javascript-8b15c98a541b](https://medium.com/@pragyan88/writing-middleware-composition-and-currying-elegance-in-javascript-8b15c98a541b)
Ctrl + K is the command you're looking for.
this smells like `with`. 
Ctrl+K
If you have 1000 components, each which need testing, it will take you a long time to test each of them each time you make a change, and sooner or later you'll miss something. Automated testing means each time you commit code, all your tests will run, and tell you if anything is broken. You can also make automated tests that test far more combinations of options than you could possibly test manually.
It's more about catching change. Yesterday all 1000 tests are successful Today, after checking in some changes, 25 of your tests fail. Now you need to figure out whether that's because your tests made incorrect assumptions, or if your code has broken something, but either way, those tests will have found something broken that you didn't expect (otherwise you wouldn't have committed the code) One of the best ways to do automated testing is have someone else write the tests, based on the initial software designs, but that only works if you have a team that can do that, and you have initial designs to work from.
appreciate it Dr
thanks
I found that if you drag a folder onto the VS Code app icon, it creates a new window for that as a project. Don’t know whether you could just drag a file onto the app icon.
The most important thing about testing is confidence in your code working the way you expect it to today, tomorrow, in 30 days, etc. This is true for manual and automated testing. If you are the only person writing the code and you are confident in your manual testing process, then automated testing may not make sense for you. Many of us don’t work in that kind of environment. Working on large apps, working with teams of people, working on complex problems, etc require a huge amount of testing to be confident that what’s being delivered is working as expected by the end user. There are time and resource constraints around doing a huge amount of testing manually. This is where automated tests come in. In the long run it saves time and money and increases confidence in the code/product. 
The _test_ and the _code_ are generally done by two people. These may be different people, or not: 1. One person writes the test and another person writes the code. 2. One person writes the test and the same person but a certain time later, modifies the code. 3. One person writes the test first, and the same person writes the code afterwards. This is generally done alternating in a cycle called TDD, but there are certain variations. 4. One person writes the code and then after all the code is "done" the same person writes the test. In general, all these serve the same purpose, but there are subtle differences as to the particular goal achieved. In the first case, you're doubling the number of eyes on the code and you're generally establishing tests as a kind of contract. We write a battery of tests and then if the tests fail in any way, the code will not be accepted, no matter how much you insist that you tested it yourself and that you thought of all possible situations. In the second case, they are to some extent "different persons", one in the present -or past- and one in the future -or present-. The intention is still, to a fair extent to serve as a contract. It doesn't matter what happened before that point but you're sort of freezing the requirements to what is running now. In the future, when you modify the code, the tests serve to testify that you didn't make any unintended changes, that any changes you make either a. don't affect other code or b. get detected for doing so. In the third case, it's _mostly_ a design practice for yourself. There are variations, but in general it either serves to _guide_ you in your _next_ step or serves to _consolidate_ your current state. That is in a TDD manner, you set out the next goal and then you go towards it. It serves to assert that you've indeed reached that step. In the second manner, you advance one or a few steps and then sort of put something over it so that it doesn't break with the following additions. The fourth case is probably what most people see. Particularly when they don't know about the previous options. It _still_ serves some purpose, but generally no, it's not such a good one. Sometimes it can be seen just as the second case, and that's ok. But most of the times it is seen as "I know this works. I just need tests so that my boss is happy; I'll just write some tests of the things that I already know work correctly". So it serves the goal of your boss being happy, but little more. Well, yes, they _do_ provide something else. They, to some extent, are your proof of work. _They_ attest that you have indeed tested the code as you say you have tested. I can run the tests and see that. Of course, I might need to examine the tests themselves to see _what_ you have tested and what not. ---- Notice, in any case, that, of course, tests can be done badly, and they can be very badly done if you indeed keep the perspective of applying the same logic (correct or not) to the code and to the test. Tests, in fact, should not know anything about the logic the code applies. Instead they should follow directly from the _requirements_ you want the code to obey. That is way most tests look generally stupid. The code of the test _is_ intentionally stupid most of the time. You don't want to include fancy logic in your test because you could, then, be introducing the kind of errors you imply.
I don't understand this.. on my PC I have 4 or 5 windows open all the time..resized to however I want them across multiple monitors. Can you explain what you mean by floating windows? 
The benefits of testing in general and automated testing in particular are minimal for a one-man project and get bigger and bigger as the team size and code complexity grow. The purpose of testing is, to me, firstly, minimizing the chances of that an *unexpected* code change goes *unnoticed* (say, as a result of a refactoring going slightly bad), and, secondly, taking a look at your code from a *different point of view* (as a test will interact with your code from an external angle), which surprisingly often lets you catch mistakes before committing the code for the first time. The purpose of *automated* testing (that is, a machine running the tests for you automatically after some trigger) is in making sure that a gigantic pull-request from, for example, a newbie contributor passes at least some *minimal* level of scrutiny and therefore is good to be reviewed by an actual human person.
Thank very much, the answer on stackoverflow helped me a lot.
You do *unit testing* because you want to ensure that your code works every time you build and deploy. Even the code that hadn't been touched in months can suddenly break because of a seemingly trivial change. It could cost the company millions of $$$ if you didn't catch this. You do *integration testing* to make sure that, for example, the software you're about to deploy still works when it connects to an actual production API instead of just your mock or development API. This covers sudden changes made by other people or teams without your knowing. You do *user interface testing* to make sure that your web page works in all the browsers and on all the devices the specs say you need to support. You're a developer who might've forgotten about Chrome on iOS. And *performance testing* is useful just to see if that beautiful algorithm of yours actually works when the list of elements isn't just your 5 testing items, but an excessive 1000 items. Just to make sure it doesn't crash for those few users who would see that in production. There are many more types of tests. But when your software grows large enough you can't possibly oversee everything anymore. I'm working a relatively new greenfield project (8 months old) and we have a 90%+ test coverage with over 800 unit tests. Sometimes something fails, it might not even be due to our own programming, but it might occur when merging the `master` branch into our own. We have dedicated software testers in the team who are responsible for testing the edge cases we, as developers, don't think of. Us developers wear blinders, we're very target fixated and often forget to look at the bigger picture of our work and its impact. I think most importantly it's testing expected failures. If you have a function called `sum()` and it takes two parameters that it adds up, that's great. But you might want to run a unit test to make sure the 3rd parameter is ignored, throwing an error instead. If someone decides that: "Gosh, it would be nice if `sum(1, 2, 3)` would lead to `6`! They could change the function. But somewhere in the code nobody had touched in many months someone might be relying on the error being thrown when that happens. Suddenly their code doesn't work as expected anymore and all sorts of calculations are wrong. Automated testing saves careers.
&gt; Article is aimed at learners &gt; Article includes information about useful tools &gt; Some of the tools have names that bring up other irrelevant results primarily, when searching for them &gt; We're obviously zombies because every other article that's sharing things in this way does include links and this one doesn't I don't know where you got your ego and sense of self-superiority from, but it is not welcome here. An extra 10 minutes trawling through results and irrelevance doesn't aid learning, it just wastes time and in almost every case, I'd walk away and disregard the article entirely rather than go searching. One of your previous responses in a thread about reviving a website was "You can't. Ask Jesus.". Gee, that's helpful. In another thread, you posted "Let them fuck off back to their desert". Nothing like a bit of casual xenophobia and veiled racism. Judging by your history, you've not always been like this, but there is absolutely no need for it. Toxic responses aren't tolerated in most communities on reddit and I'd hazard the same applies here. That's how you got into downvote city, where the arrows are red and the outcome ain't pretty.
Yes. Basically you can communicate between windows by sending messages to each other. They're probably using the single window to contain application state. So in order to use the data in other windows, they have to send them over to new window which in case of text editor can be quite difficult. Since you can only send primitive values between the windows (no instances of classes etc), you need to have quite a lot of logic to convert the data.
I wonder if it's a difference in indexing - either Firefox uses a heavier index or indexes more fields than requested. Are you using a library like Dexie, or IndexedDB directly? Can you post your schema as an example, and/or reproduce the issue on a public page?
UPDATE: Code here: [https://gist.github.com/renabil/406232efb3cb1981d49cdea9978c11f0](https://gist.github.com/renabil/406232efb3cb1981d49cdea9978c11f0)
I really don't understand this article - it doesn't really tell me anything about JSX or, well, anything.
What exactly is the question? Are you asking what's the difference between the two implementations of `ErrorHandler`? The first implementation is returning a `string`. The use of `new` doesn't really make much difference if you're explicitly returning a value. ``` function ErrorHandler(e) { return `${e} is not an error`; } ``` would do the same thing. The second is returning an object. Implicitly, due to the `new` keyword. If you don't explicitly return anything the "return" value is implicitly `this` (when called with `new`). 
I saw a similar proposal to this months ago which used a different operator symbol - I've just gone looking for it on all the TC39 proposal repos but it seems to have disappeared, or maybe I saw it elsewhere. It's certainly an interesting proposal. I do see some overlap with the `with` statement - one of the biggest drawbacks of the `with` statement was the difficulty of static analysis, but this seems like a viable alternative. I'm not sure about the choice of `..` as the operator. `..` already exists in JS, and is used to differentiate between a float and a method call on a number. For example: &amp;#x200B; 2.toString(); // this is invalid - "2.3" is a float (2).toString(); // so we do this usually 2..toString(); // but we can also do this because ".." is an operator that already exists for this purpose &amp;#x200B;
Two main reasons: - Adherence to specification. - A protection against regressions. But know that testing in itself is a requirement that will virtually always, if not always, change the original problem.
Have fixed it by disabling the button once timer is started
You could make it pause the timer 
From what I understand it's a better with. The major issues with `with` is that it is itself inserted at the beginning of the scope chain when looking up unqualified names. The default scope chain starts with `self` (usually the window), then any scopes made by the user, including class declarations and function declarations (except lambdas). Basically console.log is really this.console.log which is self.console.log which is window.console.log. So the problem with thisis that normally known names like console.log or Math or whatever now first attempt to resolve that attribute on the object that is `with`d. This makes with impossible to be forward compatible, both with Javascript itself and your own code, because at any time something with the same name as some other variable you attempt to use in a with block can become a part of that object. But now because any such reference is prefixed with this operator, those problems go away. 
And with it, the last reason I have sublime around
Don't multiple editors with the same workspace open do literally the same thing?
How are you running this? The first example should not result in a string, not unless you're calling it without `new`. Using `new` a newly constructed object will automatically be returned from the function call unless overridden by another _object_ return. Primitive returns, like strings, should be ignored. new (function A () { }) // A instance new (function B () { return 'string' }) // B instance (not string) new (function C () { return new Date() }) // Date instance (because object) And in general, you'd want to allow the original object to be returned otherwise you'd be defeating the purpose of using `new` in the first place. 
awesome, but are v8 promises faster than bluebird yet?
Thanks for sharing! Will keep these in mind when doing future projects.
Awesome, great to hear! Let me know if you have any other troubles, always happy to help. I've been considering making all of the examples draggable, I can see how it's a bit confusing. 
Try to remember when it comes to programming we don't know anything until we google it. https://www.a1webstats.com/resource/add-javascript-to-wix-websites/
I’m new to this (as I’m sure you can tell) so where do you suggest I start ? Thanks for taking your time to reply also 
Something that no one else has mentioned, don't use 0 as an id. JavaScript basically treats 0, false, and a lot of other things as "false". Using 0 as an id may make some bugs seemingly appear for no reason. Example: users = [ { id: 0, name: "Blah" } ] getUserIdByName = ... userId = getUserIdByName("Blah") if(!userId) { // Whoops, !0 is true, so our check if the user exists is wrong. console.log("No user found with that name!") } 
What bmatwi said but i saw you said yourself you lack the how-to. Your example code has mixed standards, you use ES6 mapping function but also the old For(i++) Array. It may not be done when your Array Map starts. Think Async. Divide function logic from input. Maybe a simple user object with your user functions that return result. Let user = { userExists: async function(input) { // map logic of input and return result; } }
Also, look up what things like reverse() , sort() and push() are doing.
Really cool. That’s dedication!
You want to add the name to the Array of names first.
So name.(“Jared”); Needs to be moved ?
Interesting point. I wasn't aware of that use. Though it's I think \`..\` isn't an actual operator in the above example. \`2.\` is being expanded to \`2.0\` and so \`2..toString()\` expands to \`2.0.toString()\`. &amp;#x200B; Could you open an issue on github for this?
"Ooh this looks neat" clicks link already starred Some kind of "github starred repo" organizational tools are needed. Looking back thru my starred repos is worthless. Unless I know exactly what repo I'm after, rediscovery is impossible. 
 for (let g of generator()) { console.log(g); } should work as expected.
$(‘#imgid’).attr(‘src’, .....) ?
wtf my pp hard :(
Thanks, but that's not the question, I have that code at the end of my example block. I'm trying to figure out how to pass a return value back to the yield in the iterator within the for ... of construct.
for..of will automatically call your next() with no arguments. If you need to pass data back to the iterator, you'll want to use something other than a for..of. A while loop works. You could also use a regular for loop, especially given your use of `i`. Both incrementing that and the iterator calls can be in the for loop head for (let i = 0, iter = generator(), o = iter.next(); !o.done; o = iter.next(i !== 1), i++) { console.log (o.value); }
Keep in mind that, if you happen to click on any potential whitespace in the `ul`, this code will lead to an error, because it will climb the DOM tree until there are no more parents. You need to guard against that. At the top of your handler: if(e.target === e.currentTarget) { return false; } Now, clicks on the `ul` itself won't do anything.
I noticed that on Firefox, draggable sliders have ugly scrollbars, of course thats firefox's fault, i managed to solve it via this css code &amp;#x200B; `@-moz-document url-prefix() {` `.myclass {overflow: hidden;}` `}` &amp;#x200B; With this, I managed to remove the scroll bars from firefox, while mantaining the scrolling function in every browser.
If you're using `next(arg)` you need to use a while loop. Or you can restructure the code to transfer ownership of the state outside of the generator function *generator(state) { while (state.i &lt; 4) { yield state.yield(); } } let i = 0; const state = { i: 0, yield() { return this.i++ }, repeat() { this.i-- } }; for (let o of generator(state)) { console.log(o) if (i === 1) state.repeat(); i++ } 
Something about making it be parsed as an expression so that the function can then be executed. https://stackoverflow.com/questions/3755606/what-does-the-exclamation-mark-do-before-the-function
No , it’s not homework I’ve been trying to learn JavaScript within the app Mimo but odd reason it is still telling me my code input is incorrect :/
What question is it on Mimo?
I wanted to write about using browser bookmarks, but then I entered the page I saw it already added to my bookmarks... Mister kettle, mister pot called... xD
Understood. This example is simplified from reality. What I'm really doing is yielding items coming from a queue and want to let the code processing the iterator decide if the item should be deleted from the queue or not after processing. I think I'm going to simply yield an object containing the actual queue message and a callback use. 
It simply says can you order these lines so they sort in descending order 
var names = [“Richard” , “Erlich” , “Gilfoyle” , “Dinesh”]; names.push(“Jared”); names.sort(); names.reverse(); var s = names.join(“ , “); console.log(s); Maybe if you can't work this out then you should start from the beginning again...
Thank you, I seemed to be able to complete the rest but I just couldn’t seem to understand this part 
Run it line by line in a web browser console
Ok thanks will do 
What you want to do is usually handled with regular expressions. You can still do it your way. Your code seems ok, there's probably another reason it crashes. Maybe a missing `}` in the end.
I’m not any of those 
u/senocular added an example. Actually I just looked it up and the function you're looking for is `.includes()` and not `.contains()`. Maybe that's the issue
This is indeed part of the issue, my code runs further than before, but it still crashes sadly I'm trying out the regular expression now
And in all that time you haven't come across a good use case for testing? What kind of projects have you worked on?
This worked, thanks a bunch!
App disabled for latest FF because it doesn't have a fallback for some bleeding edge ES.Next features /facepalm
?
Basically it allows you to refactor and apply a quick prototyping approach. Build it quick, no matter how -&gt; write tests (or tests first if you are into TDD) -&gt; refactor and make it better; you can be sure that you are not breaking stuff because the tests still pass -&gt; refactor again -&gt; add more functionality -&gt; and more tests -&gt; ...and refactor again -&gt; you get the drift That's even if you were the only developer, because you may not remember what you wrote 6 months previously It also works as a kind documentation
Have you tested it on FF? ``` This Stencil app is disabled for this browser. Developers: ES5 builds are disabled during development to take advantage of 2x faster build times. Please see the example below or our config docs if you would like to develop on a browser that does not fully support ES2017 and custom elements. Note that by default, ES5 builds and polyfills are enabled during production builds. When testing browsers it is recommended to always test in production mode, and ES5 builds should always be enabled during production builds. This is only an experiement and if it slows down app development then we will revert this and enable ES5 builds during dev. Enabling ES5 builds during development: etc ```
Which ones from these are used widely by companies(in general) now a days? Is the micro services one a popular pick in a business environment?
On what exactly? I could write the general logic of player, but I thought the code will suffice for overview. Ok, I'll write the gist in the post, good idea tho! And the architecture isn't set really, so it'll vary with devs:)
Interesting post, btw I was curious about RawGit and notice that it is shutting down.
I never understood why people care about promise performance. Surely the async task is gonna take longer than the polynomial time taken to init and resolve a promise.
Automating anything in general is pretty much always an upgrade over doing it manually
People still argue over the fastest to convert a string to a number. It's just brogramer dick waving as far as I can tell. 
According to that bluebird is 2-3 times faster than es6 promises or async/await. Plus they're using v8 6.0/node 8.6 for those benchmarks, while the article is about improvements that landed in v8 6.8/node 10.
-_- anyone trying to find the section about await of they used an ellipsis, there's a findable string `await…of`
Here's another one if you want to look into blockchain: https://github.com/nimiq-network/core
better now? thanks for telling me!
WebStorm is ‘just’ a tool, not your complete programming environment. If you would like to setup a simple node server en store data in a JSON I would recommend you to look in to express. A simple demo could be found here https://expressjs.com/en/starter/hello-world.html. If you like to include authentication, passport could be a nice option which works great with express https://medium.freecodecamp.org/learn-how-to-handle-authentication-with-node-using-passport-js-4a56ed18e81e.
Thank you so much! I am looking into that now. There is so much information out there and its very easy to get confused. I used to have webstorm hooked into my servers for web design, but now that I do not have servers I wanted just my mac to host everything for testing. I am going to play with express now and see where it gets me, thank you so much!
https://www.youtube.com/watch?v=NAj26rVWK14
 var container = document.getElementById("formElement"); function showContent() { var names = ["Josh", "John", "Mike"]; var ages = ["35", "31", "36"]; var html =""; for (i = 0; i &lt; names.length; i++) { html += '&lt;label class="nameField"&gt;' + names[i] + '&lt;/label&gt;&lt;label class="ageField"&gt;' + ages[i] + '&lt;/label&gt;'; } container.innerHTML = html; } showContent(); you can do it this way
You could use a template library like handlebars [https://handlebarsjs.com/](https://handlebarsjs.com/) If you want to use pure JavaScript you'll have to keep creating the nodes individually. Like you are doing now. So being a web developer myself I would recommend you use handlebars, React seems like an overkill for what you're trying to achieve.
 (function(){ let dtArrivee = new Date("2018-11-13"); let strArrivee = ""; let options = { year: 'numeric', month: 'numeric', day: 'numeric' }; strArrivee = dtArrivee.toLocaleDateString("fr-CA", options); console.log(strArrivee == "2018-11-13") })(); // =&gt; true Works for me. Maybe the problem is your filter string? Can you post executable sample code?
Alright yes your function works for testing. Did you day you had the issue in edge? Because I have it with your function.
click bait, title has a magic number
it's about throughput not latency
Throughput is an entirely tangential issue when it comes to Promises which are merely wrappers.
/r/reactjs
they're not (yet?) a zero cost abstraction, the more promises you create the more work you're asking the computer to do the fewer concurrent requests you can handle. A few years ago swapping out e.g. [Q](https://github.com/kriskowal/q) for bluebird was an easy way to make real performance gains in node apps. I'm not sure how native promises compare nowadays, hence my original question.
Swapping out the two would never make "real performance gains". Blog posts were certainly written to try and prove the Bluebird superiority, but it never made a difference to those who live outside of benchmarks.
Nice, you're welcome :) I was using it as a kind of debug tool, yeah, since it "unmasks" most special characters. A simple `length` (15 in Edge, 10 in Firefox) would have worked in this case, to show that there was indeed some invisible character being added. `charCodeAt()` could serve a similar purpose for more advanced use.
I mean... I have direct experience which contradicts your statement.
[https://github.com/borisyankov/react-sparklines](https://github.com/borisyankov/react-sparklines)
oh nice.
I dont know if I understood properly but i think you are searching for cron...? That solve problem of running piece of code at time
Hmmm if I am understanding your question correctly... As you can see from the gif, the `Automater` can be placed anywhere. I cant simulate an event because I don't know where the user will place the Automater. So instead, I grab the middle coordinates of the Automater and simulate a click at that location. If you know a better way, please enlighten me!
nothing new imo. I dont wanna be rude but let’s not write on medium just because we can. I’ll always appreciate good and original content but these are exactly same thing as in other articles.
Books won't help you much with either. Experience will. Reading a book about generic coding principle, like clean code, will help you more than a supposed deep dive into a framework. My personal preference goes to angular, but either will probably do the trick for you. Follow the startup guide, pick something small you want to make, and make it
Looks like a good replacement of the DailyJS. Thanks !
No because I want to tear of the command window or the workspace explorer. The post above covers numerous reasons
Cough....shared remote debug sessions suggest it's not out of their ability
I'm happy about the changes, but I find it ridiculous that async/await made it into the language with the broken stack trace handling. If something makes it impossible to see where your errors are coming from, then that functionality itself should be behind a feature flag, but instead now we have a feature flag that fixes the broken behavior. It should be the default, especially that they are zero cost.
I see now. At first I thought you were just taking a metaphor too far, but the way you're doing it actually makes sense and probably resolves a lot of potential headaches by making the DOM do some of the the heavy lifting. I was thinking it would make sense to just call the click handler function directly rather than actually simulate a click, but then you'd have to have logic in place to determine what's being overlapped. Unfortunately, I don't think you've given us enough of your logic to figure out why this isn't working for you. I'm not too familiar with simulating built-in events with synthetic events like you're doing here, but assuming they're essentially equivalent to "real" clicks, it shouldn't matter that a div is in the way of the area you're trying to click, the click should still propagate "through" the top element and everything below it, unless it is explicitly cancelled somewhere along the way.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/node] [is the future of JS multithreaded?](https://www.reddit.com/r/node/comments/9wtrsj/is_the_future_of_js_multithreaded/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Cool list, but what's the qualification for most popular? It's missing some very prominent JS repos that are always busy.
You might want to store / restore data via cookie or localStorage, just in case you accidentally refresh the page halfway through the game...
Lol. Makes me think of fat human Bender on Futurama going "Whoo" while partying.
OH I see. Biggest missing features since day one is somewhat overstating it.
Let's hope that the V8 devs know their compsci history and will implement the best features of multithreading. This has been done many times. Rust and julia also multithread, and those both aee pretty young languages. No need to repeat the mistakes made by the Java language developers.
| Its quite ironic that JS, and Node in particular, became popular partly because of its simplicity and async single threaded execution model without any of the typical multithreaded issues of marshalling, thread context switches, synchronization etc. &amp;#x200B; Yet it has all the same problems and bugs. Simple having an IO loop doesn't stop races and most dev's fail to understand this correctly. The moment you reach out to an external process from an IO loop you have exactly the same problems and some of node does this internally &amp;#x200B;
Not really. It's got 2.7k likes and has been open for years. 
Medium is annoying, there always is that dumb div with position: fixed; on the bottom of the screen.
Also tbh this article really is nothing new, we've seen this everywhere.
Why not use CSS? https://stackoverflow.com/questions/28417056/how-to-target-only-ie-any-version-within-a-stylesheet
Yes, this is possible. Internet Explorer and Edge respond to what is known as Conditional Comments. We can use those to feed specific CSS to those browsers, only. Go duckduckgo that.
Yup exactly whats in the post. But more detail and perhaps some mockup ui/ui elements thatll give the visual idea of the features you describe
&gt; async/await outperforms hand-written promise code now Wait... how? I followed the article pretty thoroughly, and while some aspects of the spec are still black magic to me, it left the impression that the optimised `await` should be at most as fast as a hand-written promise. So basically `const w = await Promise.resolve(42)` should be equal to `Promise.resolve(42).then(w =&gt; ...)` since in theory it takes the same amount of microticks, but it actually isn't and they didn't explain why. Also, the elaboration on `await` internals was supposed to be an intro to explaining the `console.log` execution order example, but ended up as a performance improvement announcement. They didn't actually go back to the point, unless I missed something and the `await` under the hood part conveyed a hidden answer.
Thanks, but if use \[if IE\], I would need to specify the color property on every class that requires that color, which is how it currently works 
You may want to rethink your cascade architecture.
I doubt multiple threads as you see them in other languages is coming. It would be a massive shift for existing code which assumes that it can’t be preempted.
Any chance you could put the results in a nice line chart? It would make it a lot easier to compare the results.
async/await... if 33 is too much, i think we can give up this one :D
Was just thinking that 
Web workers have been in browsers for at least a few years now. Not very well known but a huge push for PWA is now coming. Hell, even create-react-app by default uses a service worker.
Also, this is assuming that each set of data will be machine specific.
Gotta say, I still prefer `composeP` to async/await.
I've been thinkin that same thing, good call!
Well, holy crap, that's neat! That's a killer solution for rapid-prototyping!
&gt; I need some Javascript/jQuery that will `X`, but only in internet explorer No you don't. This is called browser-sniffing, and it's an antipattern. &gt; So I need to detect the browser, find CSS properties containing the variable, and replace it with a regular CSS property. No, you need to detect **any browser that doesn't support CSS Variables** and do that. This is called *feature detection*, and it's the correct and safe way to handle different features available in different browsers. Try setting up a specific "test" element with a CSS variable set in a property, then use JS to check whether the variable is correctly set or not. *If it's not* then trigger your JS variable-replacement script, and if it is then do nothing. This way you not only cover other browsers that you don't know/care about (or that haven't even been written yet) that don't support CSS Cars, but of by some bizarre fluke even IE was eventually updated to support them, your code would correctly handle the situation without breaking or requiring an update.
That's a pretty cool idea, I'm going to have to look intoit to see if it will work for the project.
This would be good, but it's machine specific. Which could work, but would like to a more permanent switch. I basically just need to figure out if JavaScript has the ability to take an item from an array, switch it to something else and then save that change within the local .js file.
Kudos to the team on the innovation and the performance improvements. Am I the only one who found it difficult to watch the video though?
Could you post an example?
So, the data modified on one machine would need to be available on another machine?
Wait, I may have totally missed part of the initial question.... this is going to be on a portable drive you are going to plug into the offline computers, and the data needs to be saved to the portable drive... is that correct?
So, yeah, front-end JS cant modify files... BUT! I had an idea for a hacky workaround, if you're into that sort of thing... You could do a JSON.stringify on the array, have a "save button" a la https://stackoverflow.com/questions/2897619/using-html5-javascript-to-generate-and-save-a-file and then have the user save over the existing file containing the data. Does that make sense? and again.... this is very hacky
Also, and this could be stupid overkill and assumes the machines are windows machines... https://www.howtogeek.com/howto/14998/turn-your-flash-drive-into-a-portable-web-server/
Love it. Especially the functional and deterministic nature of the NPCs. I'd imagine that would become handy as it grows. Kind of reminds me of the Mozilla BrowserQuest game - even though its old now, its interesting to read through the source code on that
&gt; even create-react-app by default uses a service worker. For a short while this was true but they disabled it by default recently.
why are you trying to convert the string to a number with the “+” at the beginning?
Oh, Hell yea! I like this for some other projects, but not sure if it would workout. I would have to start and stop the server each use, and if I'm not the one using it (family or friends) they may not be able to get the web app to work properly. I'm going to look into that hacky method, it may work with a little tweaking. 
Best of luck!
Loved the fact that the clear button replaces the body with a clean clone so that my past script doesn't leave traces. I think it would be nice to have a clean-then-run button.
There’s a large difference between workers and threads. Each worker is in a completely different execution context and so can’t affect the others except through message passing rather than through shared, mutable context.
Stack traces are an issue with any asynchronous code, including callbacks or promises, right?
See my other reply but workers and threads are pretty different. Workers may be implemented in terms of threads but they operate very differently from what you would expect in other languages.
Yes I know but they are the closest to threads in JS/web so far.
I'll be adding more stuff tomorrow, might take a look at that.
Yes. My comment was that threads as you see them in other languages are unlikely to ever come to JavaScript.
Right. My comment was that threads as they exist in other languages are unlikely to ever come to JavaScript.
I'll be adding more stuff tomorrow, might take a look at that. I really don't want to cluster the screen with lot of buttons, only the essential to keep it simple. 
I'll be adding more stuff tomorrow, might take a look at that. I really don't want to cluster the screen with lot of buttons, only the essential to keep it simple. 
This changes everything.
I think unordered objects makes perfect sense, the equivalent data structures are also unordered in lots of other mainstream languages (python, go...) Named function arguments would probably be what you’re asking for
What do you mean by expand?
There are several plugins that can provide you with information on the browser and operating system. I'd recommend https://github.com/DamonOehlman/detect-browser
Redux, and other state systems like it, allow you to react to state changes as well. On top of also helping to extract out all of the logic of manipulating your state and helping to enforce immutability through recommended practices and standards. 
You'd have to reimplement the concept of connected components, to re-render your React components when something in the global object changes. And then maybe you'd want to log and isolate changes to the global object to go through specific functions. And then you'd be most of the way to a Redux implementation.
Link is broken I think
Because it is easier and batter way to manipulate state with less code.
Is shared memory a requirement for threads though? 
None. Java is not Javascript. Key differences between Java and JavaScript: Java is an OOP programming language while Java Script is an OOP scripting language. Java creates applications that run in a virtual machine or browser while JavaScript code is run on a browser only. Java code needs to be compiled while JavaScript code are all in text. They are unrelated outside of both being types of code. Javascript https://en.wikipedia.org/wiki/JavaScript https://en.wikipedia.org/wiki/Java_(software_platform)
If you're trying to make a clone you could choose either but java has faster performance. If you want to make mods you would need to use java.
Honestly, with stuff like render props, portals, and the context API I'd seriously reconsider using Redux in any new React project. [https://reactjs.org/docs/context.html](https://reactjs.org/docs/context.html) &amp;#x200B; I'd definitely only use sagas on a very complex project, and even then, under duress. 
Not a v8 dev or anything here, just read a couple compiler books and I’m guessing: In the worst case, they could just transform the async/await syntax into promises and closures, and perform at least as well as promise based code. But, because the code that would be separated into multiple callback functions is contained all in the same function, static analysis can operate across all the code. This is like inlining (which is in most cases impossible for code in a closure passed to a function). The overhead of function calling is skipped, most of the overhead of creating a closure is skipped, and code generation optimizations have more impact.
I just actually read your explanation after I wrote mine. Yours is better.
Thankfully these are exceedingly rare, especially in the realm of JavaScript, worry about writing readable and maintainable code until there is a situation where optimiziation is warranted.
Because if you change the global object, there is nothing to tell your component that the object has changed so they won’t react to that change. That is also the reason that you have to use this.setState() as opposed to mutating state directly. Except with redux you are doing it in the app level instead of the component level 
I like how it promotes top down data driven components which end up being really pure with minimal state. 
To explain it hopefully clearly, in your original code you sort (change the order of) the array, and _after_ that push an item, which takes its place as the last item of the array. Therefore your array is again unordered unless you sort it again. I.e. the sorting is an operation that's performed once when it's called, the sorting rule isn't preserved in the array.
How are you running the code? I'm assuming you're using Tools -&gt; Script Editor, copy/pasting, then swapping back to the sheet and putting =sumCellInAllSheets(7, 7) in a cell? Hopefully not the same cell you're getting the values from. As a side note, Google also lets you deploy scripts to automate certain tasks independently of sheets. You can have them run automatically on a schedule. Very useful if you want to, say, automatically fill in rows with generated values every Thursday at 4pm. You would need to use openById() in that case.
The Dave Ceddia article sums up what I was getting at nicely. I didn't say "I'd never use Redux again", I said I'd seriously reconsider it. For a while there, using Redux on a React project was becoming an assumption. It no longer needs to be.
The first two rounds had a bar chart: https://www.stefankrause.net/wp/?p=283 but that simply doesn‘t work for that many frameworks and we had a lengthy discussion before we settled on that coloured table. But the latest result table has a display mode that shows the results as a box plot. If you select just a few framworks it‘s a very informative view (and pretty pointless if you don‘t): https://krausest.github.io/js-framework-benchmark/current.html
I haven't been using it long, but why all the hate for sagas? I have found it to be an immensely powerful and useful library, and after some write once boilerplate for "registering" sagas, it's quite succinct. I find that I mostly need put, occasionally select, although I've pulled in a few other functions occasionally. I used generators a lot in Python, sagas are a natural use case for the same mechanism. It's not just you, I've seen a lot of people on reddit complain about it. Whereas for me I think it's a must have library that really makes a lot of things possible, simple, and intuitive. My biggest hurdle has been testing, and that's more because of axios than saga. 
That's crazy. Who would willingly make things more complicated for themselves for zero gain? At the very least you'd avoid languages like C# or Java which are terrible for multithreading. Maybe some distant future frameworks will adopt WASM and threading for performance-critical bits but it's not going to become the way people build apps.
Heh, downvoted for a very reasonable opinion. Looks like some don't like their cargo cult questioned. I've never found a single application state to be worth it. Reducing state? Yes. Centralizing state in fewer places and components? Yes. Go all the way? No thanks. If you can fit everything into a single root object, your app must not have very much sophisticated UI interactions or data driven behavior, because you have to plumb that stuff all the way back to the top with handgenerated actions. I find using self aware immutable pointers immensely more useful. Not only does it eliminate all the boilerplate of actions, but it is immensely more sane to have everything be driven by data values rather than transitions. That is after all the entire idea of react: to replace the tedious coding of every possible state *transition* (n^2) with only a description of the states (n). Why would you want to undo that benefit by creating more busywork?
Great link , except it is not an article but a huge collection of links that you could spend your life reading it.
That’s actually a really good interview question 
I just list out some points I can think of. 1. Change in Global Object has nothing to do with your component.You still have to dispatch an action or setState. Or do something to [watch] it. 2. Using reducer in redux,it forces you to use pure way to change data,instead of mutating data. 3. Dispatching event,you can have logger on it,so you can easily debug,you see all actions dispatched,knows how the app works.
Redux with Reselect and a couple of custom middlewares we created works wonders in our app.
If you can avoid it, don't. Have a look at the React Context API. It might solve your problems.
It's the second thread where people fail to acknowledge you're right. I would be surprised too to see a traditional os thread-like API
When you build something complex by yourself automaated tests can help a lot. You can test logic, not only at the unit level. For example, check that when the user writes a todo and clicks the add button the same text is added to the list of todos and shown on the screen. This simple thing could break from changes in a number of components/functions in your code, even in some cases where typical unit tests tells you that everything works. You should read up on BDD. 
You have a site with 100 pages. Each pages has 20 features unique. &amp;#x200B; You need to make a small change to a lower level part of your application, that will affect an unknown amount of pages and features. &amp;#x200B; If you don't have automated tests, you have to go to these 100 pages manually and test these 20 features. &amp;#x200B; With automated tests, you're saving hours and hours of manual testing every time you change something. &amp;#x200B; If your website only has 5 pages with 5 features on each page, and you're using lower level APIs that other people have made and tested, then that's true, you don't need tests.
So why not one setState in your root component and context api substates down to everywhere else?
Everyone is talking about getting react to rerender when the state changes. I'd say that's more react-redux, and the connect HOC. Redux itself is distinct to and better than a generic global object because it's essentially a state machine, with distinct states and transitions. You could use a global object, but in adding reducers and actions you'd end up reimplementing flux/redux.
Very helpful 
Cliff notes since I'm too skeptical that such a thing can exist to risk the click?
Can somebody explain how Javascript being enabled will really improve browser's security ?
Things are changing though. Now with Electron you can make desktop apps in pure JS (Atom etc.), and with React-Native we can make native mobile apps. It's a fast industry and JS is becoming the one of the most popular general purpose programming languages.
Because that doesn't replace redux, nor does it scale. It is the same as if you'd call render(rootName, domNode) to render the entire component tree on every change, good luck with that! Context consumer trigger always. Not saying you can't bend this into something that could be used for state management, but context alone for sure can't.
The future of everything is multithreaded, eventually. The laws of physics pretty much guarantee that. Threading support in Javascript is still really poor for the time being, though. Sure, we have web workers, but they're a pretty crude tool compared to the multithreading support in typical major application programming languages. If I had to guess, I'd say Javascript is going to be lagging behind in the multithreading game for a while yet.
Possibly in combination with [a custom `toJSON()` method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#toJSON()_behavior).
They're adding threading (by which I mean shared memory, multithreading) to JS with sharedArrayBuffer and WASM-specific features. Rust seems to be the best at using this functionality to compile to WASM. In the next 5-10 years I suspect it will only be used for the slow parts of code... we already have the event loop for single-threaded async, so if an `async await` happens to spawn multiple workers/wasm-threads then that's how we'll integrate it.
Slightly off-topic, but what is the deal with the Redux documentation and ubiquitous references to Flux? I understand that Redux is based on Flux, but is it really necessary to reference to Flux all the time? Especially if your learn Redux from scratch. 
If this works as well as it appears to it's very nicely done and I'll be using it in some upcoming work. Thank you very much!
Yes rather than a race the happens with a program which corrupts a data structures and crashes. You get a race which just silently corrupts data instead. There is more than one type of race. I guess it depends how to defined incorrect or undefined behaviour? But incorrect output is still incorrect output right? &amp;#x200B;
C is a component. C0 needs to be updated by event issued from C100. C1 is inside C0, C2 is inside C1 ... etc &amp;#x200B; Without redux: To update C0 from C100 you will need to pass a function through every component from C1 to C100 C0 -&gt; C1 -&gt; C2 -&gt; C3 -&gt; ... -&gt; C100 &amp;#x200B; With redux: C0 is connected to redux C100 is connected to redux C100 issues event to redux C0 receives event from redux and updates itsself &amp;#x200B;
No^(\*), a number of systems implement threads with message passing as the only synchronisation &amp; sharing option. This is particularly the case for systems designed with flexible scalability options in mind, where an other thread may be on the same CPU as the current code or could be somewhere the other side of the DC, but is also implemented elsewhere for some of the same reasons most modern languages don't have pointers and other direct memory access: message passing is a much safer abstraction than shared memory. &amp;#x200B; ^(\[\*\] I'm assuming your question was actually rhetorical, but answering as if it is not for the benefit or people who have the same question non-rhetorically.)
This. The question isn’t about React, it’s about the benefits of Redux for state management. State, State Transition and State Immutability should be the keywords in the answer.
Use the toFixed() function to turn it to a string with a fixed decimal place. 1 will show as 1.00. (...).TotalCost.toFixed(2)
Because it's referencing the variable i from outside it's function, and the variable i keeps getting updated. It's not "passing" anything. It's being directly referenced. IIFEs help this. arr.push((function(i) { return function() {return i;} })(i)) That will create the function you wanted. It creates a function that is passed a newly created variable that is assigned the value of the old variable. Here's another way to write it that'll be clearer. arr.push((function(value) { return function() {return value;} })(i))
Firstly, try console.logging the variable i outside the loop. You'll realise that the variable i still exists even after the for loop has finished execution, and it will have the value of 3. This is variable hoisting in JavaScript, where the scope of your variable i is actually in the surrounding global scope and not only in the scope of the for loop. For your second question, I think you have a conceptual misunderstanding. At each iteration of the loop, you are adding a function into the array each time, and thus arr[0] would return a function. You should have tried this before asking, and if you did try you should have explained what you did to debug your code to avoid reexplanations of what you already found out. As to why every function in the array returns the same value, when you call the function it will look for the nearest i to return in your code, and the nearest i (and the only i) that exists, and it is always the same i with the value of 3. If you rewrite the code manually instead of using a loop, it would look like: ``` var i = 0; var a=[]; a.push(function(){return i;}); i++; a.push(function(){return i;}); i++; a.push(function(){return i;}); i++; ``` And it should be clear why the function always returns the same value. For now, unless you need to deal with legacy browsers, you should stop using var and use let, const instead since all the major browsers support it, and if you use let instead of var in the loop, you'll get the results you expect. In any case, you should go find out how var differs from let and const, Google will give a lot of fine resources. Bottom line is if you don't know what you're doing, the first thing you should do is to stop using var, and use let instead. Tinker about with js all you want, and if you want to start working on something more substantial you can dig deeper into the finer inner workings (such as why using let in a for loop works "properly", as it's not something most js programmers understand. )
While this would work, is there any reason to not use `let` instead in the loop and avoid all the boilerplate?
Yup, I would say the js specs specifically considered this interaction and reworked the for loop a bit when they added let in. Let was introduced in 2015, so unless legacy browsers have to be supported there's no reason to not use let.
People don't write automated tests just for the sake of writing automated tests, there's a whole school of thought and culture behind this. A few relevant keywords for you to look for: "extreme programming", "test-driven development", "refactoring". There are a couple of classic books that are worth reading. Kent Beck's book about extreme programming and Martin Fowler's book about refactoring. It is very likely that you will find the answer to your question after reading these two books.
Thanks this is helpful. I'm not sure why console.logging arr[0] prints out the function, but when you pass an empty parameter to it, the function is instead invoked. The behaviour doesn't seem consistent to me. console.log(arr[0]); this prints: &gt; ƒ () {return i} In the above, it seems to have interpreted the function literally and printed out the code, word for word. But, suddenly, when you pass an extra parameter (to a fucking array, wtf?), the method is instead evoked instead of printing. I have no idea what is going on under the hood. I do better understand why the function is returning the same value now, it is because calling arr[0]() actually invokes the function. I saw an array and immediately thought of data storage (attributes) and no functions (behaviours). 
Partially. Async callbacks, and promises can be augmented with the caller's stack information, there are libraries that already do this (eg. longjohn, trace-and-clarify-if-possible, bluebird with longStackTraces on). I'm not exactly sure how they work, but I think they take advantage of [async hooks](https://nodejs.org/api/async_hooks.html). They are unfeasible to run in production, because according to their own docs, they are a noticeable performance burden, which still makes it a problem, but /at least/ I can figure out what's wrong if I can reproduce a problem locally. However, there is absolutely nothing you can do with async/await, and it's ridiculous that we have a ton of blogposts advocating that people should switch to async/await from promises. Sorry but I'm going to go on a rant here, I don't understand the people who would rather have a somewhat nicer looking syntax and better performance, but completely lose the ability to trace errors that happen in production. It's all fine if you are doing some hobby project, but using something like this in production, that is going to be used by paying clients? I try not to take part in the static/dynamic, weak/strong holy war, and I don't think javascript is a meme language, but this here, not having the ability to see where the errors are coming from, is balls to the walls crazy, and it should be a top priority to fix. 
There's a good package for testing sagas, can't remember the name now. My main problem with them is the mental overhead of using them, they introduce a lot of new concepts and terms. I dug deep into them and was fine with using them, but getting the other developers on the team to get on board was harder. Another thing I don't like is how they force you to put pretty much everything in redux. I like to keep some stuff local to components, and when using thunk, you can just await bound action creators inside component lifecycle methods, but you can't turn a saga into a promise
Thank you this explanation is on point. I now better understand that appending with () allows the function to be invoked after retrieval. I am just not quite clear re: the process that happens between the function being retrieved and the function being invoked. When the function is retrieved it is stored in the memory stack, but then the JS engine would have to know that "ok, this is a function we retrieved, let's watch out for the next value to pass onto it, otherwise we'll just return the function code". Is this essentially what is happening in? I want to know the low-level details. I need to know the low-level details to understand everything.
IMO, 3 years is not really that long. I was recently in a situation where let didn't work and it broke stuff. One of my junior devs had used it in a script that didn't get processed by webpack and it went through and broke things. It was an odd situation, but one we still have to deal with. A Cordova app maybe? Anyhow, it's not something that I give a blanket recommendation for unless they're processing their JS. Not yet, anyhow.
&gt; See [slidebox.vdmolen.xyz](http://slidebox.vdmolen.xyz) for setup and examples. Says the README of the project you linked to. That page has a "Setup" section which explains what to do. It turns out, it's meant to be used in a browser. This means you may use npm (or bower in this case) to install it, but you may also just download it from github or whatever. You just include the script in you page with a `&lt;script&gt;` tag (_after_ loading jQuery) and it does its work and that's it. There's no `awesomePlugin()` step. There are no options, there is nothing to call. ---- I _do_ acknowledge that yes, many packages do not clearly explain this, and that it may be a problem. But in this particular case, I think it's clearly explained; there's simply nothing more to do than just including the script in your page.
So, in that instance, should I \`require\` the file or \`import\` it?
Thanks for your help but I think we're talking about two totally different things. I'm interested in the correct workflow of importing/bundling assets in a JavaScript entry point file. I totally get that you can include things like plugins via script tags. 
I haven’t used context directly. Would it make sense to have a form component track its own state until submitted, then update context if needed? I’m finding that much of the global app state isn’t really necessary for most things.
useEffect replaces side effects from lifecycle hooks. Redux solves a different problem.
No, no. The thing is that this particular script is not something you're supposed to actually call. You load it, and it simply executes and runs and that's it. You would import/require something in your own code if you were actually going to do something with it (usually, call it). But this is not the case. Now, you _can_ bundle it together with the rest of your scripts, sure. But that's something you'll generally do from your bundler. But it _runs_ automatically, which is why this kind of package does not explain how to _run_ it. Also because that depends on what bundler you're using.
I guess the context matters. I should not have said all browsers supporting let is a valid assumption when it is not. Where your code will be running is an important factor and should be considered when deciding what new features of javscript to use. Personally, for learning purposes, I think let should still be used first as has less unpredictable behavior compared to var. ( Such as accidentally accessing a hoisted would give undefined with var but throw an error with var). Assuming one is just starting out with js, having to worry about problems such as in the op is a roadblock to learning js. When mass adoption of code in an unpredictable environment is required learning how var works then should be more manageable.
it's an extra layer of security but certainly not bullet proof on its own. Def useful for captchas and for listening for session timeouts etc. Saying that it would also help Google's prove you're a human widget.
No harm in mentioning a design pattern, but when you reference it again and again, especially in the context of implementation syntax. It sends a wrong message that sends a message that Flux needs to be mastered first in order to learn Redux. That's just sloppy documentation. SGML is never mentioned in context of HTML, apart from historical reasons. Maybe Redux should drop Flux references as well. 
That’s basically it. This is a little easier to reason about when you’re dealing with named functions. function foo () { return 0 } At a low level, this line of code is like any other variable declaration - create a spot in memory called `foo` and assign it the value `function foo () { return 0 }`. If you console.log(foo), that’s exactly what you’ll see. So, `foo()` can really be thought of as “look up our declaration of foo, if it exists, and invoke it whatever is stored in that spot in memory. So foo() sort of “becomes” (function foo () { return 0 })(). That’s essentially the same thing that’s happening in your code, only instead of the function existing in a named spot in memory, it exists as an item stored in an array.
Got it, thanks.
I would really like to know about your use case of this particular code
So, then useState replaces Redux?
useState replaces setState which was great for storing local, unshared state (e.g. the state of a dropdown menu being opened/closed)
Glad to hear it!
I particularly like that it introduces a small set of design patterns that make the entire process of handling state highly uniform. I like all the other benefits too (I’m just mentioning others), but these patterns don’t leave a lot of room for creativity, and with many developers that is a good thing. Want to read the state, write a selector. Write the state, write a reducer/action. The developers have a pattern to follow, and I know that what they write will be unit testable easily - we also use saga for the same reason. Redux is also very Typescript friendly, with a little work. Also, being able to load your application into any state with one simple call is a huge benefit for testing, and dumping the state into an exception report makes reproducing an error quite trivial. Some of These thing may not be unique to redux but they are still benefits, and if you use something else you may have to implement some of this yourself. 
What the hell are you talking about 
The JavaScript approach to using multiple cores has always been to have multiple threads/processes (Node.js processes, Web Workers etc) and communicate by message passing. This isn't changing, and it is fundamentally different to the shared state+locks model you find in C/C++/C#/Java.
No. That would be smart. My resumé application does something similar. I set up all my work experience in a way filterable with a facet filter engine that I wrote. That way I can filter to fit job requirements. It also showcases my javascript prowess. 
I support it. I ask about flux all the time during interviews, and I don't like when candidates don't know what flux is. When I say redux, suddenly they know what that is.
useState is local state, not global. The built in React hooks don't attempt to solve global state problems.
Log the value of v in your setTimeout. Because settimeout is async, the for-loop finishes before the timeout starts, so the code in the timeout runs with a maxed out value for v, which is out of the arrays boundaries. You can try running the timeout from inside another function which gets passed v as an argument, or just use [].foreach instead of a regular for loop. 
So we can't wrap the app with a useState?
I think, he's just playing around.
So, I tried the let keyword instead of var, and it's working now. Will definitely keep your recommendation in mind for the future! Much appreciated!
The value of useState is restricted to the component that calls it. Children can't access that value unless it is passed as a prop and prop drills it's way to the children that need it.
Use babel bro.
I considered using the full webpack/babel setup, but I’m perfectly comfortable writing es5 on the frontend, and I think it’s nice to not have a build system. The extra complexity just doesn’t seem worthwhile for my current project. 
It wouldn't hurt to reduce the amount of references to Flux, but I see it more comparable to an article on express making reference to the REST spec. Redux doesn't make Flux redundant, it builds on Flux.
It's fine as long as: * they don't implement any blocking mechanisms to synchronize "threads" * require messages or shared memory to be fully serializable 
The question has already been answered, but of course we should all strive to have better code. You should probably be using `for-of` syntax or using `.map`. ```js const outputStr = results.map(buildRow).join(""); ``` where `buildRow` is a function that returns the HTML for the table row.
What a problem to make simple pubsub ? 
this is awesome! do you have the code for it up on GitHub?
I'm not saying it's very difficult. I'm just explaining that it's something you have to build, that is a reason why Redux is better than just having a global object by itself.
Hope you enjoy it! Thanks for the support.
I wouldn't ask about flux. I would ask them to diagram how data flows through a React / Redux app. Then ask about the advantages and disadvantages of that flow. Test for understanding not trivia. 
They aren't necessarily going to be using React/redux. The end goal is to find out if they know good state management, not if they know redux.
Because if you don't, everyone will think you're too dumb to understand it.
Is this satire of the giant mountain of async/await medium dot com articles? Did this really need to be an article, rather than just a link to the JS docs?
How is asking whether they know flux testing for understanding? Flux is just a word. You can know one way dataflow, keeping a store (or multiple like in the original flux idea), and having all data be updated in one place w/o knowing wtf flux is.
Awesome, didn't notice that before!
Redux organization goes beyond a single source of truth. You've got on one hand the 'global' state object, linked to a pub/sub mechanism. On another hand, you've completely isolated the side effects of your state management &amp; UI components. Finally (third hand), selectors offer a list of questions that you can ask your state and that are related to your business logic only. The API does not depend on the state structure, the pure nature of selectors make them composable, and easy to test. The immutable aspect of your state allows using features like memoization (either in the selector or in the component using it).
Hi /u/codeBoy007, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Cuzah, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/mafiamaria, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Megaobst, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Apologies. Thank you as well 🙏
Hi /u/pudendumReferendum, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Hi /u/NearbyKelpie, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Urgaano, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/6ixths, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/AnnaJae, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/immawizardhagrid, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Break down your homework problem into a list of small tasks - ask user for number of dice rolls - store above value in a variable - create function for generating and returning 2 random numbers - store randomly generated numbers - keep count the number of times your program has rolled dice I’m missing several steps, but I hope you get the idea. Now turn the task list into code. For example, you already took care of the first task in the list with `var times = prompt(“placeholder text”);`
Because at the time the docs were originally written, that's what everyone was familiar with. Facebook announced the "Flux Architecture" in 2014. Over the next year, _dozens_ of different Flux-based libraries came out, which [I usually refer to as the "Flux Wars"](https://blog.isquaredsoftware.com/presentations/workshops/redux-fundamentals/intro-history-goals-reducers.html#/14). As I wrote in my post [The Tao of Redux, Part 1: Implementation and Intent](https://blog.isquaredsoftware.com/2017/05/idiomatic-redux-tao-of-redux-part-1/), Redux was intended to be "just another Flux implementation". Dan Abramov originally described Redux as ["my own Flux library"](https://twitter.com/dan_abramov/status/604356871722569728?lang=en). An early version of the README says that one of the design goals was ["preserves the benefits of Flux, but adds other nice properties thanks to its functional nature"](https://blog.isquaredsoftware.com/presentations/2017-09-might-need-redux-ecosystem/#/8). If you look through the early issues and discussions, [there's numerous mentions of Flux as a source of inspiration](https://gist.github.com/markerikson/2971210292a9c65138eeb33ae7d560b0). So, when Dan wrote the original docs, [one of the key goals was to let Flux users know how this related](https://twitter.com/dan_abramov/status/622567874796855296): &gt; So hard to write the new docs. Many different audiences to cater to. &gt; &gt; Should make sense to: Flux beginners, FP people, FP people who don't get Flux, Flux people who don't get FP, normal JS people too. &gt; &gt; Flux people: “is this proper Flux?” FP people: “is this that weird thing called Flux?” Normal people: “why not Backbone” It's been three and a half years since Redux came out, and the landscape has obviously changed a lot since then. At this point, [nobody seems to remember that "Flux" existed before Redux](https://twitter.com/acemarke/status/1039705226901708801), which is ironic because [so many "Why does Redux do $X?" questions are answered with "because Flux did it that way first"](https://twitter.com/acemarke/status/1014189738415263744). So, all that said: [we're currently looking at revamping the Redux docs](https://github.com/reduxjs/redux/issues/2590). Given the change in target audience, it's certainly worth reevaluating how many references to Flux are necessary. That said, I'd specifically like to add [a docs page that gives historical context for where Redux came from](https://github.com/reduxjs/redux/issues/3075). As always, I'm very happy to work with anyone who'd like to help improve our docs. If you or anyone else would like to help out, [please leave a comment on one of the existing open docs PRs](https://github.com/reduxjs/redux/labels/docs), or file a new issue/PR, and we can work together to make the docs better for everyone!
You're welcome! :)
I agree with most of your comment, except the statement about thunks. Thunks and sagas have different strengths and weaknesses. Thunks are great for complex synchronous logic, and simple async. Sagas are great for decoupled logic that needs to respond to actions, and complex async. It's completely reasonable to use them both in the same app for the things that they're good at (as I do in my own apps).
&gt; How is asking whether they know flux testing for understanding? ... That isn't the only question. That is the lead in to asking how it works.
The whole point is to move AWAY from monoliths. Multithreading will allow devs to go back to a single, all in one app again. Wrong direction.
I hope this article for the beginners who are learn JavaScript or no idea how reverse the array element. Sorry if i have posted incorrectly in a big group of JS.
This might work: https://developers.google.com/apps-script/reference/spreadsheet/range#collapsegroups So instead, you'd do this: spreadsheet .getRange( Columns(getRange("A3").Value * 31 - 29), Columns(getRange("A3").Value * 31 + 1) ) .collapseGroups();
I don't do them, that's why I have a github account.
Do you have any repos or examples of the self aware immutable pointer pattern? Pretty much been have been in the Redux camp by default so am always looking for other options.
Thats a pretty wild presumption. I do care about maintainability, and I don’t feel like maintaining my build config in addition to all the other code and infrastructure for this project. I’m building a web app, not a library, so it doesnt need to be as small as possible, other than compressing public assets. I also maintain an open source library, for which I use babel/webpack. I’m not religiously opposed to build tools, I just think it’s a tradeoff, and too many developers are too willing to accept complexity into their projects for comparatively little value. 
Good to know, will take a look. Feel free to send it over as a pull request if you'd like. Thanks for the tip!
Those sound way, way more involved than the tests I give out for interviews. Mine would take an experienced programming a couple hours. (But it's being given to novices.) We give them a full 7 days to do it. We are clear that visuals being the technical details we've asked for are not necessary, but we *do* give consideration to it if people bother. Most people fail it. Many fail to turn anything in, and many turn in something that's obviously broke. many more turn in something that mostly works, but they didn't pay attention to important details, like "set the work safe filter to the safest setting when accessing the image API". We have other details that are less important that we let slide, but we've found that the only candidates we really want to consider in the end catch them and get them right. The more work you put into it, the more impressed they'll be. You have to balance that against the time your are spending on it and what else you want to do with your life. And finally: Are you sure you're aiming high enough? Seasoned developers shouldn't have to jump through these hoops. The resume and portfolio (github, etc) should be enough to get them an interview. Perhaps you're applying to junior positions and shouldn't be.
For unidirectional data flow.
Don't work for a company that doesn't even vet the assessments they give out. I used to give out homework assignments, but they were meant to be short (3-4 hours) with very specific requirements and included a design. If they want good design from a developer, then you can bet they have no fucking clue what they're doing internally so I wouldn't even waste my time on companies like that. \&gt; I still get negative feedback because of something not mentioned in the initial requirements Then give them negative feedback for having a shitty test with shitty requirements.
I am surprised (and happy) to see an article tagged Node.js actually having some Node.js. Generally, it's all about express.
Yeah, as I mostly manage development these days, I find the extra bikeshedding introduced by agonizing over whether to use thunks or sagas for every task that comes up.
Look into Postgraphile (https://www.graphile.org/postgraphile/) or Hasura (https://github.com/hasura/graphql-engine), assuming you are using Postgres as your DB.
I am stuck with MS SQL DB 
I'm not saying you should use these tools. Infact, you do you. From personal experience, no matter the project, documenting and keeping consistent code are very important because in the future, you will forget and other developers might not understand. As for optimizing, I'm thinking your web app is a few thousand of lines long that's why I suggested using babel. When I see multiple big companies doing something, I think it's not for no reason.
https://github.com/mzrimsek/track-my-playtime Project I've been working on for about a year. Would love to get some feedback on things I could improve in the code. Or just in general I suppose.
My approach to multithread is streaming. After all, it’s the node way of doing stuff. Read a chunk from socket, use it to search a map, get a list, filter it, map each file, pipe it to parser, iterate, pipe trough child process, pipe resulting chunks back to client socket. Add some circular buffers in between, a gpu worker, and everything is flowing, since each streaming node is self interrupting, by design. After all, that’s what multithread is under the hood. The trick is to move away from the OOP and huge in-memory structures. That said, I really don’t get it why default stream implementations are so crappy in both node and browsers. BYOB’s, fixed chunk size streams, better low/high waterMark stream pressure difference and possibly cyclic shared buffers are the way. Oh, and faster BYOB destructuring. 
There are currently two different types of packages - CommonJS (the `require` syntax) and ESM (the `import ... from` syntax). If you're using packages on the backend with Node, the most common format is `require`. It does technically support ESM, but it's still [in the experimental phases](https://nodejs.org/docs/latest-v8.x/api/esm.html) Basically CommonJS allows you to export variables like this: // module.js const myVar = 'my export'; module.exports = myVar // main.js const myVar = require('module.js') console.log(myVar) // 'my export' Sometimes you don't need to store the result of the `require` in a variable. This is used when the required file doesn't export a variable, and just needs to run some code or attaches something to an existing global object (like that jQuery plugin you linked) example: // plugin.js $.pluginMethod = () =&gt; console.log('hello world'); // main.js require('plugin.js') $.pluginMethod() // 'hello world' If you're using packages on the frontend with something like webpack, you'll likely be using `import ... from`. // module.js const myVar = 'my export'; export default myVar; // main.js import myVar from 'module.js'; console.log(myVar) // 'my export' For the case where it doesn't export, like your jQuery example, you'll just need to import the file. // plugin.js $.pluginMethod = () =&gt; console.log('hello world'); // main.js import 'plugin.js' $.pluginMethod() // 'hello world' So for your slidebox example, I'm assuming you're on the frontend since you're using jQuery. I'm also going to assume you're using webpack as your bundler, so in that case, all you'd likely need to do is add the line `import 'slidebox-js';` after you've imported jQuery. 
I disagree on serializable messages. We’re stuck with the binary and raster approach, which didn’t evolve one bit since the first TV set prototype. There’s a whole universe of analog flows, fluid dynamics and resonances to be explored. Universe is not made of little marbles. Object oriented thinking is a limitation of our monkey brains.
Interesting. Thanks for your input. The company in question originally asked me to email the assignment to them so maybe it's better I didn't get the job.
Yeah well, React, angular and vue are front end framework. If you want facebook API you might want a server side one. I would go with React because its pure javascript, has huge community, tons of existing components to help you around. Angular is a steep learning curve and vue has weird binding magic with string instead of objects. But for a website you really might not need a front end framework, theses are for applications with lots of mounting/unmounting of parts (components). You might just want pages and maybe even just want wordpress or something of the kind. 
I would hope it uses Rxjs. Having a stream transparently spawn a background thread/process and manage its lifetime would be great.
I hadn't considered that; it's my first time interviewing in a while. I do have a github, but it's a little out of date. Has your github gotten you past the first round of interviewing? Can you give me a few examples of some projects to post?
IMO, the only projects worth posting are ones that you had an emotional connection to. If you weren't excited about it, it'll show when people ask about the project. You should be able to talk about why you made it, why you designed it the way it is, and some challenges you overcame with the project.
I’m the only developer on my current project, which influences a lot of my decisions. If there were other developers working with me, I’d definitely appreciate a linter. It’s true that big companies often make their decisions for good reasons, but that doesnt necessarily mean you should copy them. Due to their massive size, companies like facebook and google have unique problems that you and I will likely never experience, which push those companies towards interesting compromises that I would have never considered. It’s much easier for facebook to handle complexity than it is for me alone, and they get much more value from minor optimizations than I would. 
That's really good stuff in a really good time for me. I've been studying applications with node regarding video streams. Thanks for that.
Most software is single-threaded, regardless of the language used to write it. So, no, I don't expect your average JavaScript application to be multi-threaded, unless a library or framework that makes heavy usage of threads gains widespread adoption.
I'm almost positive that he was referring to concurrency in general.
That's a good point too! Debug functionality rocks
Hi /u/yolendi, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/larsbs, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/L1mpf1sh, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Randomizer91, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Whale_Eating_Cheese, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/wherediditrun, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Vue is great for beginners who arent experts in js and need more guidiance. It's also very popular in small to medium companies while react is (still) the frontend library big coorperations are using. If you go the vanilla js rout you gonna hit a wall pretty soon and you will have to pick something like jquery which is not recommendet anymore. i don't know much about angular
Hi /u/jchaplin7, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Check out Apollo. Might help.
I make a thread about software architecture, regarding components in migration context, you point me to /r/learnjavascript. So .. sorry, but begs me to ask, for what is this subreddit is for? A market place?
Here's a sneak peek of /r/learnjavascript using the [top posts](https://np.reddit.com/r/learnjavascript/top/?sort=top&amp;t=year) of the year! \#1: [If you're looking to learn javascript, a professor at my college made a really cool free to use online textbooks that includes: exercises, clickable links, and lots of example files.](http://profsamscott.com/javascript/) | [4 comments](https://np.reddit.com/r/learnjavascript/comments/7xd7x0/if_youre_looking_to_learn_javascript_a_professor/) \#2: [To everyone currently enrolled at a college: don't forget to get your Github student developer pack. It contains a free domain name, digital ocean credit and much more.](https://education.github.com/pack) | [13 comments](https://np.reddit.com/r/learnjavascript/comments/8b81be/to_everyone_currently_enrolled_at_a_college_dont/) \#3: [Free Web Development Tutorials for those who are broke and cannot afford paid courses.](https://np.reddit.com/r/learnjavascript/comments/8sulvf/free_web_development_tutorials_for_those_who_are/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
OP's questions is really interesting to me as we've been building our react application without redux. At my work we have a react application, and we don't use redux. We have 50ish API calls that change the state, and we've been using setState to make sure the API updates. Only 1 resource is top level (GET/UPDATE profile state and login, ws to push credential ivalidations and force logout), the other resources are 1 one 1 with the components (meaning, the CREATE/REMOVE/UPDATE/DELETE calls on the /invoice API, corresponds with the app/invoice.ts component). As I'm unfamiliar with redux, what am I missing here? All calls to resource /kappa will only influences the app/kappa.ts component, as only the app/kappa component's response handler calles setState as the resource responds. Other components will not update.
That was not what I was asking.
Better yet provide the answer. After all that's a newbie question as you implied. I can edit to make it more clear, because obviously the first person had no idea to what one was responding, but at this point I think train passed already.
Your question: &gt; Is it ok to do api requests in webcomponent? My answer: &gt; yes it is ok What am I missing here ?
It's okey to have component which manages it's own state inside a functional React component, masquarading as doing only presentational logic, while actually updating it's own state independently?
In that case, there may not be as much benefit. The rules of thumb from the [Redux FAQ entry on splitting data between Redux and component state](https://redux.js.org/faq/organizingstate#do-i-have-to-put-all-my-state-into-redux-should-i-ever-use-reacts-setstate) may be helpful: &gt; - Do other parts of the application care about this data? &gt; - Do you need to be able to create further derived data based on this original data? &gt; - Is the same data being used to drive multiple components? &gt; - Is there value to you in being able to restore this state to a given point in time (ie, time travel debugging)? &gt; - Do you want to cache the data (ie, use what's in state if it's already there instead of re-requesting it)?
I think Redux is all about the unidirectional data flow. It gets easier to reason about your application. Immutability also plays an important role, by embracing immutability and thus having "pure" reducers you can easily unit test your application logic. Reducers are just functions. You can also time travel by undoing/redoing actions, this is handy for debugging purposes.
why post a link to the JS docs when you can throw a random javascript snippet on your website that has ads? /s
can't highlight this enough, redux-devtools has proven invaluable in a team / large scale app environment. It's not as apparent in personal projects where you know all the code more intimately. 
&gt; Read the post. Not just the title. Use case is defined. Lol man, not sure you are aware but i volunteered here and sorry but im not waisting more time for your issues that I already answered. Peace 
I was following an ES6 tutorial and tryna get hand of it. There was one part where the person uses throw new [function constructor name] and inside the function constructor there is a function called this.toString() which returns an argument. Instead of explicitly calling throw new MyFunction().toString(), he just used throw new MyFunction() and it returned the argument itself, I tried and used another name instead of this.toString() and it doesnt work. It only works if there is a this.toString() function inside the function constructor
[https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript](https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript) just replace the commas with spaces
The cat facts made it for me. Thanks for sharing.
“Error” Wow.
Search: / \[0-9\](?=(?:\[0-9\]{3})+(?!\[0-9\])) / Replacement: $&amp; (space after &amp;)
where? what have you done?
anyway it's in beta
Do you have UBlock or something similar turned on? Had to disable UBlock for things to show up on my side.
This is way too hipster for me.
Do I have some stray console logs in there? If I do I likely meant to delete then. This is a good thing to remember though.
It's a beta, if you encounter problems remember it, please &amp;#x200B;
Thank you
Hi /u/sonicdev1991, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
So glad that you are interested in this project. Honestly speaking, this project is in developing, we really need your help, if you have any interesting idea, feel free to propose in our gitter, slack, or issue. Looking forward for your Pull Request!
ahahahah :P &amp;#x200B;
of course
How are you qualifying trendiness?
number of likes, simple
 !!! Sorry again if you get an error, I did not expect so many visitors !!! Thanks :)
Cm
 M
Xm
,
 **
 . D 
.ömx
 F
Just because two values have the same name doesn't always mean they're talking about the same thing. There are two `b`s in this code. The first is an object property, the second is a variable. As the book says just a little before the code, you can only access an object property with certain notations. So `b: 42` is the object property, inside `obj`. And, the only way to talk about it in your code is to either say `obj.b` or `obj["b"]`. If I say `var b = 123;` later, I'm not using either notation, so this line will have absolutely nothing to do with the object property.
Where is your test code? Impossible to diagnose without seeing the test code.
Thank you for your response. So ' var b = "a" ' has nothing to do with obj\[b\] returning "hello world"? 
What I used to start learning JavaScript, not sure if you know of it, was the Grasshopper app made by the Google Devs. And it's a really great start.
On what platform?
I think now it is working fine, try again. Thanks for the hint about the menu ;) &amp;#x200B;
&gt;This is way too hipster for me. isn't javascript a language for hipsters :P?
Ah that’s pretty cool! How did you make this?
Sorry I went about it all wrong. I'll learn from the mistake. I got the answer and some asking tips from a discord server. Thanks
Thanks. I've used Nuxt for Server Side Rendering and Firebase.
Never-mind, it clicked!... b is "a" so obj\[b\] is obj\["a"\] which returns "hello world". Appreciate the help.
And where do you get the trends from?
Firebase for be and heroku to run the SSR
From users. You have to subscribe and to post your best works.other users could like your works.
Aight ty
I started learning js with tutorials provided by w3schools, and try/error :D Also stack overflow is good source to get help for specific questions.
Yep! You got it.
Thank you for the response! Maybe it's because my work is within a well defined field, that our database model, related REST resources, and pages presented to the user, correspond 1-on-1 to the React components and are specific to their own resource. I can understand that new uncertain and less 'historically established' fields need to 'mix-and-mash' their database models more and thus derive value from the incremental and directed updates originating from redux, which is your (3)rd point. In our application caching is happening server-side so I dont quite understand that point of your (5th) response on the FAQ. Concening (2), we do derive averages from the returned data, can redux help us there?
!remind me 1 day
You can achieve that w/ vanilla js var width = window.innerWidth;
At this point I'd say "well you challenged my stock answer to that question, that's all I had"
A typical example would be a thunk that checks to see if an item is cached in the Redux store, and fetches it from the server if it's not cached: function fetchItemIfNotCached(type, id) { return (dispatch, getState) =&gt; { const state = getState(); const items = state.entities[type]; if(!items[id]) { myAjaxLib.get(`/endpoint/${type}/${id}`) .then(response =&gt; { dispatch({ type : "ITEM_LOADED", payload : response.item }); } } } The value around deriving data is particularly when you're combining several pieces of data together. The classic "todo list" is a good example. The state tree looks like `{todos : [], filter : "SHOW_COMPLETED"}`, and some other part of the app can now derive a filtered list of todos from those value. In your case, it sounds like there's not really any cross-sharing of data types across the app. You can certainly derive values within an existing component from its own data in state without Redux getting involved.
[https://github.com/bluebill1049/react-simple-animate](https://github.com/bluebill1049/react-simple-animate) React Simple Animation: i have worked on the project for about 17 months so far, please review the code and provide your feedback. &amp;#x200B; Many thanks Bill &amp;#x200B;
Piss off, I'm not fucking clicking
why
### What are we building? We’ll be building a Todo app step by step using React Hooks. As I promised, there will be no classes in this app. The reason, I choose to build a todo app as it covers all 4 aspects of CRUD; Create, Read, Update, Delete. I’m sharing the github repo link as, you can follow the instruction along with the complete code and know the map, where it’s going. **App Live Preview:** [http://shuvohabib.com/react-hooks-todo-app/build](http://shuvohabib.com/react-hooks-todo-app/build/) **GitHub Repo Link:** [https://github.com/ShuvoHabib/react-hooks-todo-app](https://github.com/ShuvoHabib/react-hooks-todo-app)
The more optimized once is the one that runs better (which could mean faster or less memory depending on what you are optimizing). The best way to know is to measure.
This looks fine to me. You can save a few clock cycle by doing this: var result = base; for (var count = 1; ... No point is doing the 0th iteration where you multiply `1` times `base`. You already know that's going to be `base`. I'm not sure where your base and exponent variables are coming from inside your button onclick. That could maybe use some refactoring, but your power function seems fine.
y tho
Solid answer.
Look into typescript and [decapi](https://github.com/capaj/decapi). With these you can use your model classes to generate a Graphql schema. We use it with objection and we even generate our schema model relationships based on the objection.js relation mapping. Very effective way of writing Graphql.
Personally I recommend Racket now. I can’t imagine learning JS being a good time considering the tooling system, the framework saturation, transpires and blazing fast lifecycle of overlapping libraries seems like it would be pretty overwhelming. Imagine you just spent a few weeks wrapping your head around React classes and all of a sudden hooks is introduced which instantly impacts how you interface with Redux, Mobx, or whatever data library that just came out yesterday. Instead I try to point people to Racket as the editor and tooling situation is really streamlined and they can do GUIs, graphics, games, web apps, clips, scripts and all kinds of programming to suit their interests. I believe that’s important because beginners should focus on understanding programming concepts with practical experience first before fighting the tooling and oversights of their chosen language. Also being a big fan of functional programming I can’t help but feel introducing them to those concepts earlier on will help them build better disciplines they can carry into other paradigms and languages as well. 
 function exponents() { var base = Number(document.getElementById('box1').value) var exponent = Number(document.getElementById('box2').value) var result = base; for (var count=1;count&lt;exponent;count++){ result *= base; } return result document.getElementById('resultBox').value = result ....... &lt;button onclick= "exponents()"&gt;y&lt;sup&gt;x&lt;/sup&gt;&lt;/button&gt; How does this look? Will it still work as 'exponents()' instead of 'exponents(base, exponent)? This is how my addition, sub, etc. functions are defined
Either exponent can grab those values from inside it, or it can have those values passed to it. Both are valid solutions as far as "it works." If you are mimicking Math.pow, you will want to have those values passed _to_ it. Otherwise, it's not a function that puts a number to an exponent, it's a function that puts an input's value to the exponent of another input's value. That's much more restrictive, so probably not a good approach. As far as the code you shared, `&lt;button onclick= "exponents(base, exponent)"&gt;` base and exponent are undefined. You will want to replace those undefined variables with numbers. I _assume_ those two numbers are `document.getElementById('box1').value` and `document.getElementById('box2').value`.
I also see that you are trying to set `resultBox`'s value after returning. A function stops executing once it returns, so your resultBox will never update. I think returning is the correct solution for the same reason I mentioned in my previous comment -- I don't think this function should be tightly coupled to your input elements. Something like this should work: &lt;button onclick="document.getElementById('resultBox').value = exponents(document.getElementById('box1').value, document.getElementById('box2').value);"&gt; Now when you click it, it's saying to update the resultBox's value with the _return value_ of exponents, when you pass in the two input fields' values. You can make this more readable the same way you did your other buttons: // in your &lt;script&gt; function useExponents() { document.getElementById('resultBox').value = exponents( document.getElementById('box1').value, document.getElementById('box2').value ); } &lt;!-- in your HTML --&gt; &lt;button onclick="useExponents();"&gt; 
Yeah that will work. You could also do this with the previous way you had the function written: &lt;button onclick="exponents(Number(document.getElementById('box1').value), Number(document.getElementById('box2').value))"&gt;y&lt;sup&gt;x&lt;/sup&gt;&lt;/button&gt;
Damn. I’ve been using rem units for text &amp; letting people scale with their browser’s zoom like an asshole. /s
Minecraft is written in Java. There is no JavaScript involved.
B is better. Remember that calling a function may also consume memory depending on what it does. Assigning a value to a variable does not consume any appreciable amount of memory since no copying is involved.
It's just a command for a bot that will remind him/her after that time. He wants to know the answer too, but will forget about this post
There's no way to tell unless you profile. Each JS engine may optimize the code differently. Additionally if this became a hot path some functions could get inlined etc... If it matters, profile it. If it doesn't then don't worry about it.
Thanks for this!
Hard to add much to this answer. I will reiterate that Python is actually pretty commonly taught as an intro-to-CS language these days. JavaScript gets used more as an intro-to-engineering or intro-to-programming-generally language. As OP said, it's quick to stand up without extra tools, and perhaps more importantly: it is very quick to write something that has a visible result. For new students it is really important to be able to _see_ results, and that is dead simple with JS. Also Java is out of fashion these days. It still gets used plenty in legacy code and Android development, but no one is excited about it, and it does a poor job of satisfying modern requirements for languages.
I can't think of a case where A is better than B even if browser does optimizations. Measuring micro-optimizations is usually a waste of time, especially if the person doesn't know how to benchmark properly (e.g. benching too few times, accidentally measuring confounding factors, ignoring MOE, etc). I'd go with B and call it a day.
A new Gmail add on that I'm trying to get approved: [College Scorecard](https://github.com/kirpal/gmail-college-scorecard)
load up postgres, creat a foreign data wrapper, expose it as a materialized view, install pg_cron, periodically refresh view, create stead of triggers to back populate date -- someone who really likes postgres
I highly recommend Colt Steele's courses on Udemy. He covers the basics while you're building something that you can see being applicable in the real world. As someone who hadn't coded in almost 20 years it was the first program that I didn't get bored or frustrated with. 
Unless you're dedicated to mastering core Javascript you may benefit from looking into the moment.js library. It's easy to understand and allows easy addition/subtraction by day, hour, etc.
No, it's a language for web developers.
you have tons and tons of people that disagree with you.
The parameters are only relevant if you're going to pass values when the function is called since you aren't you do not need parameters. Instead you need to create variables for `base` and `exponents` and store the values of `box1` and `box2` in them. Additionally you are not passing a function to `onclick`. You are passing whatever `useExponents` returns which should be nothing since you are making a call to a function called `exponents` but I don't see any such function defined. You want to pass the name of the function to `onclick`. It should look like this function useExponents(base, exponents) { var base = document.getElementById('box1').value; var exponents = document.getElementById('box2').value; for (var result = base; exponent &gt; 1; result *= base, exponent--); document.getElementById('resultBox').value = result; return result; } &lt;button onclick="useExponents"&gt;y&lt;sup&gt;x&lt;/sup&gt;&lt;/button&gt; Now I should warn you that you better be prepared to properly defend the way you're using that for loop to your professor because based on your apparent skill level I would guess it's not something that you'd be able to come up with on your own. In case you still want to go through with it then I will explain it for you, but just be warned that your teacher is almost certainly not expecting that answer. The basic anatomy of a for loop is the initial setup, the terminating condition and the final statement. The initial setup is done at the very beginning of the loop and so you frequently will set up your variables used in the for loop terminating condition/final statements here. The keyword `var` is very important here because variables declared with `var` as opposed to `const` or `let` are hoisted. Without this you would not be able to see `result` outside the scope of the for loop. If "hoisting" and "scope" are completely foreign concepts to you then you are likely not prepared to defend this to your professor. In the final statement of the for loop we are decrementing `exponent` which is a common thing to do as you know seeing as you did it in your example. The primary difference is that we are also having it multiply the result. Finally we finish with a semi colon instead of braces because we have no statements to run in the for loop. The semi colon is there to tell the Javascript engine that this loop is over and to not potentially run any code after it as if it were in the loop. This method is ever so slightly faster though I'm not 100% sure of the reason for that. I know it's faster though because I tested it using `performance.now`. If all of that felt too advanced for where you are at now then go with what you know. var result = base for (var i = 0; i &lt; exponent; i++) { result *= base; }
Second this. Moment.js is probably one of the best date time libraries out there.
SEcOnD ThIs. MoMeNt.jS Is pRoBaBlY OnE Of tHe bEsT DaTe tImE LiBrArIeS OuT ThErE.
If you need to kept the variable up-to-date with the current width of the window, you'll need to watch for a resize event. &amp;#x200B; &gt;`let width = window.innerWidth` &gt; &gt;`const resizeListener = () =&gt; { width = window.innerWidth }` &gt; &gt;`window.addEventListener( "resize", resizeListener )` &amp;#x200B; Caution: resize events can fire rapidly over a very short duration when the user is resizing with a mouse drag method. Research "debounce" function if this is a problem for you.
Check out the courses by Wes Bos: https://wesbos.com/courses/ 
moment.js is completely overkill until you need real date processing. For something like this just learn the API. Subtract 5 hours and get the day: const date = new Date(); date.setHours(date.getHours() - 5); date.getDay(); // 0 = sunday, 1 = monday, etc
What are the constraints on `exponent`? Can it be zero? Can it be negative? Can it be non-integer?
everyone says ternaries are unreadable, until you use them often. you get used to it!!!... you're looking at code, and you question marks let you know you're dealing with an if-else. If you need to do crazy ternaries it's a code smell anyways and you can usually bubble that up to it's own function (shouldn't be doing too crazy logic in the return statement itself anyways).
Before I read a "How to", I'm curious what is... &amp;#x200B; a) Gatsby Source? b) Cat Facts? &amp;#x200B; &amp;#x200B;
Gatsby is a static site generator that lets you use React and GraphQL to create a static site. A source plugin lets you pull in data from varying sources. For example, there is a source plugin to use WordPress data. Cat Facts are facts about cats, coming from a free API.
Hooks made almost zero sense to me before reading this but now I have a pretty solid idea of how they work. Cool.
Classes are confusing...? 
It seems like you're doing this in MS Excel, given your familiarity with Access. If that's the case, you can't use momentjs, /u/seekinganewpath's solution is the best.
It might depend and I agree with the general sentiment to profile to answer these types of questions. That said, I'm pretty sure B is more memory efficient as well. Assuming standard() creates a new object, whether you save it to a variable or not, the return value from standard(item) is going to hang around in heap memory until it's garbage collected anyways (who knows when). In the negative scenario for A, you're creating yet another instance in heap memory which will also need to be garbage collected. In B, the only cost is a few bytes on the stack to retain the reference which are reclaimed as soon as you return from the function. In the negative scenario for A, you're probably going to use addition stack space for the second invocation of standard() anyways.
I realise this wouldn't help anyone, but I was bored and code golfed your solution. &amp;#x200B; &gt;`let n = ( d =&gt; d.getDay() - ( d.getHours() &lt; 5 ) )( new Date )` &amp;#x200B;
Take all my money.
That's a wonderful point. It can't be stressed enough for beginners to provide some outlet where they get immediate tangible feedback. It's very easy to get turned off to programming if your first thing is some codecadamy walkthrough. It's just boring and doesn't make you feel excited about what you're doing. You can't describe that feeling of excitement when you finally get that svg to spin for the first time after hours of reading tutorials and browsing mdn docs.
I know, I scoffed at that too.
Finally 🔥🔥🔥
That moment when his own annoying systems start breaking his ability to run his presentation.
To be fair it's a straight quote from [React's docs](https://reactjs.org/docs/hooks-intro.html).
&gt;// 0 = sunday Eh I'll leave it be now. But you even state in your comment that a return of 0 means sunday.
hmm? It does. I'm saying with your code if you run this Sunday at 3am you'll get `-1` for the day, which is invalid, you you'd need to fix that bit (hence the `+7%7` bit)
I think we've both put way too much time in to this. :)
[https://github.com/kaizer1v/md-resume](https://github.com/kaizer1v/md-resume) It's a vanilla javascript based application. I have mentioned some points that I need help in the **issues** section. Would love to have it reviewed. Thanks in advance.
There's also quite a few that agree with me. However, this sub is oddly hostile to anti-jsx people.
Until you try to raise something to the 0'th power.
javascript is the superior language
There's a historical, and logical basis for that. It wasn't too long ago, where pre React (and even for many years with React), any attempt at offering up a solution that mixed "concerns" was shouted down as bad practice, violation of SOC. These were from your very traditional developers (and the power in terms of development was very much skewed towards backend developers). Over the course of my career, I've had to deal with stuff like this being said, with minimal to no backing of concretely how it makes sense. The web has gotten more expressive and app like. One of the major reasons React blew up, is they realized that bundling of "technologies" actually allows for better adherence to SOC. The old version of SOC was just separating html into it's own file, css into it's own file, and javascript into it's own file. And it just doesn't make sense. When I write a button, I write the html for it, the css for it, and the logic for it. React, and jsx, is the first paradigm that allowed us to group the concern of the button together, TRULY. I get that you feel like people are hostile to anti-jsx people, but honestly is deserved. Every single time I hear this argument, and it's like you haven't actively searched out the explanations, articles, or you're dealing with legacy codebases with inferior integration with UX teams. Almost every single company is adopting React, and lit-html, the new kid on the block, all use this jsx-ish paradigm now. The onus is really on you, or the people like you continuing to make the same argument we already understand and disagree with, to actually explain your position, and actually bring an angle of the conversation to the table that makes sense. Furthermore, the whole notion of this sub being oddly hostile to anti-jsx... again, the way you position this is sort of odd in of itself. If we're all against stuff we know is bad (you don't have anyone going "yeah start using coffeescript again"), then that's ok. But when it's all against jsx... then it's odd. So yeah cool, totally make your argument, point me to a Medium post, but let's not forget that React is the panacea to this "MVC" mentality of the olden days. A lot of us are professionals on the front end side who have been doing this sort of work for years. When we pick new tools and paradigms... it's because we feel it's helping us solve a particular problem. So the only questions that remain: do you actually fully understand the argument, without googling? In your own words? And do you imagine we either don't even know your perspective being anti-jsx, or do we fully understand it, but just disagree with it?
Check out my [list of suggested resources for getting started with React](https://blog.isquaredsoftware.com/2017/12/blogged-answers-learn-react/) , as well as my [React/Redux links list](https://github.com/markerikson/react-redux-links), which has resources on React, ES6, and lots of other topics related to React. . 
Glad, you liked it :)
You're welcome :)
I mean, I can see classes being confusing in some instances. e.x. ```javascript class Foo { bar() { this.baz = '4'; } } ``` In some invocations of `bar`, `this` won't be the class instance, like it would in most sane languages...
I feel React has a great plan with hooks in the near future
I think that’s because they’re not real classes like in OO languages, they’re just syntactical sugar over object prototypes. So they won’t work like someone with an OO background expects. 
They're all crazy you gotta start with C, then move on to other languages. 
the hipster language for web developers? :D
I know the article is about streams for the sake of being memory efficient, but you should really use [this](https://nodejs.org/api/fs.html#fs_fs_copyfile_src_dest_flags_callback) to copy files in node. If you just stream bytes back and forth, [you lose metadata](https://stackoverflow.com/a/46253698). 
&gt; It's widely used, if you learn JavaScript and learn it well, you'll never be out of a job. questionable, but going into details would be out of this subreddit scope, so I won't
Via practice playing around in codesanbox with mbn and React documentation.
I feel as though Robert Martin has little experience actually coding and really only talks about coding like a Dr. Phil of software development. He talks like a motivational speaker at some business seminar trumpeting the the 6 key steps to success! They sound nice, but after further inspection they really start to fall apart. The worst code bases I have ever seen were almost always written by someone overly dogmatic about `"Clean Code"`. What ends up happening is the codebase gets so fragmented that to understand what a function does requires reading through hundreds of files, I mean god forbid they leave comments! &gt; Although there are cases for comments, you should really try to avoid them. You don’t want your comments to compensate for your failure to express the message in your code This is mind bogglingly stupid. Just because you give descriptive names does `NOT` always express why. For example `screw`, `plasticBoard``hinge` are descriptive names for the components of a doggy door but I don't have any clue on why it exists or what it was made for. &gt; Angular is built around separation of concerns. This is a design-pattern that makes our code easier to maintain and extend, and more reusable and testable Extending and reusing generic classes causes all of the code to be tightly coupled and a pain to work with since it constrains your logic. It's way easier to just create functions independent of anyone else's code that clearly exposes it's logic to the reader that can be used to manipulate data. There is nothing worse than piecing together what something does when the code is written like a Russian nesting doll that all obfuscate implementation details. &gt; Don’t create more than one component, service, directive per file. Every file should be responsible for a single functionality. Fuck that, only break code out into another file if it makes sense. Arbitrarily separating code leads to business logic being distributed amongst many files making it harder to piece together it's purpose. &gt; This comes in handy when you don’t want to contaminate your components with the same code. And this is where an overzealous who abstracted out logic that at the time shared similar functionality creates a generic method that only creates more problems as the required functionality diverges over time. Now keep in mind I don't hate these concepts, but the way Uncle Bob presents these concepts like they're sacred holy truths bugs me. He essentially built a kind of design pattern religion which means common sense, practicality and good engineering are thrown out the window when it violates it's 10 commandments. 
It's not a ads i have published the content in my blog so i want to share and get suggestion 
Only checked out the main.ts 🙈
I hope they do something soon to address the performance implications. Functional components always render every time even when props don't change. If you're not dealing with nested data you often want a PureComponent instead.
Ok, so this deserves a much more thorough response than my ADHD is going to allow for (especially on mobile), but I'll give it my best shot. First, it sounds like we've both been web engineers for similar amounts of time (I'm going on 20+ years). My previous comment was made with the impression that I was dealing with another jr developer who had jumped on the React bandwagon after tinkering a little with angularjs, and loved JSX because it compensated for their own inexperience with responsible DOM / JS management. Second, I can fully acknowledge React + JSX's value and accomplishments, and I am super grateful for the impact it has had on the web development community as a whole. Especially in regards to functional programming. I remember a time not so long ago when most web developers hadn't even heard of FP. Now most know what it is and even have a rough grasp of how to use it (though I'm still struggling to find those that use it well, especially apart from react's implementation). So please don't hear me say that "I've read all their reasons and disagree with their conclusion" and think I'm oblivious to react / JSX's value or impact on the community. I do fully understand the argument (without googling ;) ), the problem being solved, and why one would embrace React and JSX. I get your points about coupling the markup, styling, and logic / functionality to a button in a single file - and it sounds like you jumped to the false assumption that I have an issue with that. I love single file components - but I hate JSX and how it breaks standards unnecessarily, thereby forcing an entire ecosystem to cater to it's way of doing things. What troubles me is just how many developers look at JSX and settle for it because 1) a big company is backing it, 2) it's better than what they were doing, and 3) they lack the experience to realize there's better ways of accomplishing everything React has to offer WITHOUT a DSL. I get that React and JSX is now super popular, because state management and high performance DOM management are hard. And I appreciate how much React has brought to the table and the impact it has had on the web development community as a whole. But JSX is an unnecessarily-restrictive, tightly-integrated DSL that essentially reverts us back to server-side templating. That may not bother you, but I personally find it extremely abrasive, ugly, and quite brittle.
Does your code run faster with less spaces?
Shameless plug: [https://github.com/latviancoder/hooks-by-example](https://github.com/latviancoder/hooks-by-example) Collection of beginner-friendly real world examples of hook usage.
There is React.memo that you can use to wrap functional component and will not rerender when props does not change, just like Purecomponent. [React Memo](https://reactjs.org/blog/2018/10/23/react-v-16-6.html)
Direct link to the section: https://reactjs.org/docs/hooks-intro.html#classes-confuse-both-people-and-machines
&gt; not real classes "class" is not some absolutely defined term, so "real class" has no meaning. OOP as originally invented was about objects and communication between them ("messages"), classes are not even part of it.
I was fine with classes. I know I'll still be able to use them but not sure I like the fact that all these new features seem to be bound to functional hooks. 
You have to look at the reason. Usually it's a problem because the function that originally called the asynchronous function is long gone when there is an error in that asynchronous part, so you cannot include it in the stacktrace because the information is gone. However, with `await` the function (context) that called the asynchronous function still is available!
They’re in proposal, so ignore them for now. Learn react classes and functional components. If you understand those then hooks will be easier to transition to in the future. 
Not quite, yes and no, because promises have a different queue from the general task queue. Long gone are the easy times when the JS event loop could be explained quickly with one task queue, I think there are at least three now, at least in V8 but I think in all runtimes.
Also worth mentioning that you can pass a function as a second argument that allows you to compare the previous props with the next props yourself, basically allowing you to do the same as you would do in shouldComponentUpdate. 
Didn't it say somewhere, maybe even in a Bluebird README or some text, that this is not possible, since the official spec has demands that Bluebird ignores and therefore can save time that an official implementation cannot do?
This sounds a little weird. Can you point me to the tutorial?
ES6 and React are very functional. In order to understand JS and functional programming [JavaScript Allongé](https://leanpub.com/javascriptallongesix/read) is a great book. It covers the most basic ideas in JS and shows how to use them for fucntional programming patterns that can help you write cleaner code by separating concerns. It also covers what is possible with objects in JS.
[removed]
Ahahahah I was joking, I love js
I think this is also true in Python if I remember correctly. You need the self.
I understand. It's just that I prefer OOP over functional programming so I'm bit disappointed that the problems that come with using classes in React is being addressed by not using classes at all. Seems like I'm part of a minority though so I guess it might be the better decision for React community. 
OP is here. We have been working on lots of Vue.js projects recently and decided to extract our knowledge into a starter kit to help other developers save their time developing Vue applications. Let me know if you have any questions!
That statement surprised me too. How can a class be more confusing than a bunch of weird functions all over the place?
Amazing! Thank you! That's really helpful 
It depends - are you lying in your resume? If not then this sounds freaking awesome. Well done!
Nothing. Happens immediately when I click the link.
possible reference to this: https://facebook.github.io/immutable-js/ ? please assume we all are stupid and explain how stupid this code is 
Do editors proofread medium articles? Typos man
ʘ‿ʘ
I've used async before but I completely forgot they existed! The problem is though that if I wait for the drawing function to finish, that doesn't guarantee the SVG is rendered, I don't think. I have code in the function which creates a canvas at the very bottom, and that gets drawn before the svg gets rendered. I could just add a delay, but then that relays on hardware performance and so on. (Effectively just eliminating relayance on internet connection).
Also, didn't realize you were using html2canvas. I'm pretty sure you can configure it to run synchronously, in which case your subsequent code wouldn't run until it finished what it was doing. Unless I'm misunderstanding your problem.
2nd paragraph: “That’s [when] hooks come into the...” among a couple other small ones. I didn’t mean to sound like a dick I’ve just noticed this a lot with medium articles 
I feel harassed :O
Thanks, for your support mate :)
Of course. Appreciate your article. Good luck to you 
As always, not responsive. 
While your question may be relevant to you, it's not particularly relevant to the rest of the subreddit and honestly belongs much better in /r/LearnJavascript.
Modules provide excellent encapulation and reusability. you can copy modules as files from project to project and make your own libraries of them.
Observation and opinion both fall in the same realm. Only numbers count.
It seems that it will save me a great deal of problems. thank you
wow, fixing it! It definitely was. Thanks for your feedbakc
Got it. I’m learning what you said, thanks for the reply! 
While this doesn't go over 'production code' extensively, if you want to understand the language in and out this book series is generally the go to: https://github.com/getify/You-Dont-Know-JS
``` let freeItemOverThreshold = (item, pricingStrategy) =&gt; (standard =&gt; Big(standard).gt(pricingStrategy.value) ? Big(0) : standard)(standard(item)); ``` If you want to keep A's concise syntax, just use an anonymous enclosed function that takes `standard` as a param, so you only need to call it once.
&gt; So they won’t work like someone with an OO background expects. What would someone expect to work but doesn't?
An alternative i've been using after not wanting to muck with Slate is: [https://www.froala.com/wysiwyg-editor](https://www.froala.com/wysiwyg-editor) (not saying it's better or worse, i think it's good to know about the options out there)
how would you make a new thing? a class is a definition of a thing
javascript has overloaded the word 'object'
Feels extremely odd scrolling on a laptop. It performs a natural-ish zoom motion as the virtual wheel spins down but then has a big lurch to the final position due to the transition.
I find it ironic that React, the quintessential JavaScript ideology, is now pushing for the argument of "let's make things easy so that you don't have to understand how JavaScript works". It makes more sense that they simply want to move towards a completely functional approach and distance themselves from OOP. Maybe to make a statement to the TC39 and the community on how JavaScript should be used instead.
I use React with classes too and never needed HOC/Render props.
Well in Python it's passed in as a variable, but automatically by instances. You can call methods on the class and pass in an instance yourself if you want. class A: def __init__(self, name): self.name = name def f(self): print(self.name) a = A("John") b = A("Paul") a.f() # prints "John" A.f(b) # prints "Paul" Javascript doesn't give you the option to be explicit about it, it just magically fills it in with whatever the execution context is, which often isn't the same as the *mental* context is.
Hi /u/Illegalalienal, this post was removed. Please see our rules, and do know that 'Java' !== 'JavaScript'. Thanks for your understanding.
Hi /u/malvin77, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Can't scroll main panel on mobile.
PR approved. Merged into master.
Fascinating, I did not realize that Promises had their own task queue!
&gt; It's easy to get up and running. Python requires an install.. Unless we are only talking about running JavaScript natively in the browser, it does, too. 
&gt; I think [classes] don't suit JavaScript due to lack of types What about classes in Python? Or classes in Ruby? They don't have types either.
Try using let instead of var. I think you've got a scoping problem.
There's no great fundamental reason. A lot of newer, web-oriented programmers would say that, because all frontend is JS, and Node is currently a hot technology. At the risk of inviting downvotes, I think Node is experiencing a transient popularity bubble, powered by newcomers who fall in love with their first girlfriend, so to speak. Little Miss JS. That is Node's only real advantage; you don't have to learn another language, which, you have to admit, is sort of a flimsy foundation for a technology. Even if you start with JavaScript, I think it's important, for both learning and career growth, to learn another language. Preferably something that is popular for web services, like Java or C#, or maybe PHP, whatever. Be at least partially bilingual.
JavaScript isn't React, Redux didn't come out yesterday and you can literally open a console in your browser to get started, not to mention sites like codepen.
Why would you not just use `reduce`? The over all composability concept of what you're explaining makes sense but it could be achieved much more simply.
Nice app and cool design
If you can understand the rest of the concepts in the post then reduce should also be simple to understand. The code would also look a lot less mess which I’d argue makes it simpler to read, but that may just be a matter of opinion. 
Not to mention the near universal utility of the reduce function makes for a lower cognitive load than learning alternatives like this. 
Appreciate that. I'm just getting into React Native, was pleasantly surprised how similar it is to React, was not too difficult to get the app up and running early on. And I couldn't recommend Expo enough, made the development experience a breeze.
Really like the mentions option!
They're all groups of similar data, in four different data types :/
 function displayImage(res) { var fileData = res.filesUploaded; var container = document.getElementById('thumbnail-container'); fileData.forEach(file =&gt; { var link = document.createElement("a"); link.href = file.url; link.target = '_blank'; var img = document.createElement('img'); img.src = client.transform(file.handle, {resize: {width: 200}}); link.appendChild(img); container.appendChild(link); }); }
HTML &amp; CSS are visible and markup languages. Not necessarely (fuck spelling) a programming language. Plug away with it. You have youtube tutorials, $10 udemy courses. Work at it
My advice is not to just watch videos, but to actively try to make things. If you get stuck, then refer to a tutorial or video. Just watching videos isn't enough to learn to program.
The only way to learn is by practice. Trust me it is very frustrating at the beginning. It is a nightmare. Its like "my code does not work, I don't know why and my code works, I don't know why". But the only hard way to get out of this is practice. Keep asking and keep learning. Believe me there is no alternate of practice. Try to build small snippets in JS. Try to solve basic questions around loop etc. The more you write (not watching videos etc) the more you learn. I am not against watching tutorials but implementing them on your own is equally important. Ask questions. Ask why it was done this way. I literally had spent a lot of sleepness night learning. But trust me once you are out of this zone, there is not stopping.
That's freaky.
You're going to learn it one small concept at a time. There are going to be unknowns and confusions on a lot of topics for a long time. Just learn one small thing. Play around with that small thing. Move on to another small thing. You'll end up going back to the things that you learned before, but realize you didn't understand them completely, but will know them a little better when you return to them. Eventually you will have 'aha' moments. Going over concepts for the 150th time, and you'll finally see how simple it was, when you originally thought it was so complicated. And you'll slowly accumulate those small things together, and one day you'll realize you can actually do some cool shit. But for now, one small thing at a time. Chase bunny trails. That's the only way I know to do it. The timeline with your bootcamp might be tough, but I'm sure you will see how much more you know at the end compared with when you started. Everyone feels like they are dumb and can't code their way out of a wet paper bag, from time to time. It's not true. Other times you will think you are God's gift to programming. That's also not true. That never goes away, because there are always new things to learn.
 sum=a=&gt;eval(a.join`+`) max=a=&gt;Math.max(...a)
Far as I can tell, they're trying to show a function that can behave, in a way, like a class by giving the function "static" variables. In the end, it amounts to the function using a global variable. The idea is that naming conventions ("Class_Function_Test_Class", etc) help prevent collisions and containers such as "Local" and "Static" help organize your variables with a common naming convention across all contexts.
The thing here is, the "others" are a special case of `reduce` if they generate a single value (i.e. `find` is just a case that returns the first value that matches the predicate, `some` is another special case that casts the result to a boolean), also that the single value can as well be an array (so `map` and `filter` are special cases as well, that keep pushing to the result array) and that the callback is not forbidden to have side effects (so `forEach` is also a special case, one that returns `undefined` no metter what). So really, when talking about generic programming, `reduce` is the only array operation that matters.
`Array.from(somethingIterable).reduce(...)` should resolve that
It's still a single value that gets passed through each iteration and eventually returned, in your example the single value just happens to be an array that contains multiple values. By way of example, here's one that I literally wrote less than ten minutes ago. I'm working on merging and de-duping two different data sets and I wrote a reduce to see how many entities match on first and last name: &amp;#x200B; `const keyedArrs = mergedData.reduce((m, e) =&gt; {` `const k = \`${e.first_name}-${e.last_name}\`;` `const r = { ...m };` `r[k] = m[k] || [];` `r[k] = [...r[k], e];` `return r;` `}, {});` &amp;#x200B; My final result is an object in which the keys are the first and last name concatenated with a dash and the value of each key is an array containing each of the original entities that "matched" to that (note that this is for my analysis and is not my production matching algorithm lol). &amp;#x200B; The point I'm making is that I'm taking an array and making something that contains thousands of subarrays, but at the "top level" it's still a single value being returned.
That's a fair point. Those libraries are not JS and maybe I didn't communicate this well but my broader point was meant to be: What is JS now? Is it ES6 which was renamed to ES 2015 and continues to grow? Is it node, is it the browser? Am I over thinking it and maybe it's just the syntax? Regardless it's still a very fast moving language that one has to keep up with. Is it impossible to learn? Of course not! Is there benefits to starting with JS? Definitely! However, personally, I wish I had started learning programming with a language and environment like Racket before jumping into C and PHP. C was interesting but hard to be productive in, PHP was more fun and productive but difficult to grasp what makes for quality PHP. I think Racket has a lot to offer for beginners especially being designed with middle schoolers in mind and offers an editor that can grow with you that can support multiple environments. I can't really argue with your second point that CodePen offers a solid way to get started with JS but to me it's for the same reason I find value in Racket's offering: It abstracts the complexities that typically come with a full development environment so you can focus on exploration and ideation.
Wow, that's pretty neat. I don't think I've ever seen this illusion before. If you look at it just right it really seems like the red circle actually overlaps the blue.
There's one mistake. Hint: variables in javascript are weakly typed
The thing is I’m using the application mimo and the task is already written I just have to drag and slide 
Well... you can complain to the makers or whatever. There is a mistake in the syntax. I don't know if that's the problem, but the order is correct.
When a function returns, javascript automatically clears all its "Local" variables values! &amp;#x200B; If you need a value to be remembered between the function calls, you need to store that value in a "Static" variable of that same function! &amp;#x200B; Unfortunately, javascript does not support functions "Static" variables! (Most languages that I know support it!) &amp;#x200B; So, an alternative is: &amp;#x200B; \- lets say your function name is "Test" &amp;#x200B; \- inside the function, create a "global" object based on your function's name, example: "Function\_Test\_Function" &amp;#x200B; \- inside the function, declare "Static" variable as local object by passing the reference of "Function\_Test\_Function" object inside it! &amp;#x200B; \- now you can store static values of your function through the local "Static" object, example: Static.x, Static.y, [Static.data](https://Static.data), etc, etc &amp;#x200B; note that: &amp;#x200B; \- using "Static.x" or "Function\_Test\_Function.x" is the same thing, but the former is more practical to use then the latter! &amp;#x200B; \- both "Static" or "Function\_Test\_Function" variables reference the same object stored in the ram memory! &amp;#x200B; \- "Static" or "Function\_Test\_Function" variables don't contain the object's values, they contain only a reference to an object stored in the memory! 
Hmm, can you help with how you should look at it, cause I just see a flat red circle surrounded by a flat blue ring.
So if I try to compare "password123" and the hash it was generated. What will happen is bcrypt will try to generate the exact same hash. But how does it do that. Does it just creates a new salt till one salt generates the exact same hash. I noticed it requires some time for bcrypt to compare the password to the hash. Is it possible that that process can take up over a minute.
Bcrypt will take ‘password123’, concatenate the original salt (which is stored in the hash), and then hash THAT, which should produce the same hash, provided that ‘password123’ was the original password. It shouldn’t take a full second to compute the hash, but it depends on the ‘work factor’ you set when you create the hash. I think 10 is normal, but higher values will make the hashing process take longer. 
Conceptually, it generates a random string and adds that to the password, so now you have "password123random1", and then it hashes that and gets "hash1". The value it gives you to store also includes the extra random string: "random1$hash1". When you ask it to compare a password with a stored hash, it takes the (now not-so-random) extra part stored with the hash, and adds it to the password you are comparing before hashing and checking. The reason for this is to prevent an attacker from pre-hashing common passwords and then comparing those with leaked password hashes. Since all the information is still there, they *can* use leaked hashes to try password guesses, but the random additional part means that they have to start over for every user.
Same here ¯\_(ツ)_/¯
Yeah I get that, but this just creates a ton of globals. If you need a static variable, a more idiomatic practice would be to wrap the function declaration in an IIFE: var myFunction = (function() { //this is a "static" variable local to the function: var someStaticVar = 5; return function() { //function code goes here }; })(); (also saying `foo = []` makes foo an array, not an object)
UI looks really slick. Great job
&gt;no, it does not " creates a ton of globals "! &gt; &gt; &gt; &gt;Only 1 global var was created, which in this case is "Function\_Test\_Function" var &amp;#x200B;
That will work similarly, but yours will create a whole new array, so it's not _exactly_ equivalent I guess
Yeah but every function you use this pattern with would create one global. It's not a good practice to create global variables for no reason when a better solution exists. This globals-based method also gets complex and problematic very quickly if you have multiple modules which happen to contain a function which has the same name. The IIFE based method has no issues.
has a zero value *and* a concating function
Classes are not confusing, they are just not good models for writing reusable code.
How do you write reusable React code?
ImmutableJS is a separate library that specializes in immutable data-structures, which are useful in functional reference management systems such as ReactJS's state management solution. Lots of languages have different ways to represent the same idea. C++ has Ordered and Unordered Sets &amp; Maps. JavaScript has JSON objects and `Map` to store key/value mappings. There's nothing weird going on here. You're just not understanding the motivation behind ImmutableJS or the purposes of different data-structure representations. 
hint: he doesn't
`{` `"presets": ["@babel/preset-env"],` `}` &amp;#x200B; then add what you need, when you need it. don't over complicate things imo. though integrating browserlist somehow would probably be good for a base.
Define: "reusable React code". A component is perfectly reusable code.
Sure, say you have 3 components that all fetch data on `componentDidMount`, and show a loading screen while the data is being fetched. How would you abstract that logic so that it can be reused across classes?
Oh yes
Thank you!
Creating an array just to use an array method is pretty wasteful and doesn't generalize over cases where performance is concerned (like slow mobile clients). 
You’re missing the point of the post. 
I am learning it right now. Very good stuff.
I think it might help to learn the way react currently does things in dilation and THEN learn the new hooks api. Trying to learn them together might be a bit too much since they are fundamentally quite different.
Hi /u/paulygarcia, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Hi /u/atum47, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
And really it is just an identity value rather than a zero value, for instance `*` and `1` are a way to make a monoid out of numbers.
Sorry to reply to this with an unrelated question, but can I ask, as someone who's among the most intimately familiar with Flux/Redux from a conceptual standpoint, what your opinion is on Hyperapp's approach to state management? Do you think that's where we should be headed or do you think it introduces some non-negligible pitfalls that a React/Redux combination does not? It feels like it does wonders as far as reducing mental overhead but I'm not experienced enough with Redux to know if ultimately there's some significant trade off.
Hi /u/Tazio202, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (/r/javascript is not a job board). Thanks for your understanding.
Yes
Firstly, this seems a bit out of scope for r/javascript unless you're planning on using node.js for your backend (to interact with the database). Secondly, this seems a bit out of scope for a beginner especially when it comes to database stuff. However, a few thoughts: 1) It would probably make most sense usability-wise to have a user system and associate their progress with that user id, rather than having them input a "unique ID". 2) Instead of asking "how would I go about", maybe ask about certain portions that you don't understand how to do? Currently the question is pretty vague and hard to get into detail without having to detail a whole system from the ground up. &amp;#x200B;
Yes, sorry I understand my question was pretty vague. I’ve had experience with SQL before and fetching and writing information to tables, so the user system is something i could work out with PHP. I think I can create the interface without too many problems. I was just wondering the best approach in the actual backend of the program. Do you think python will be the easiest ? 
Can I ask your reasons for wanting to use JS? I think it’s important to pick the best tool for the job and not necessarily try and mould your project to work with a certain tool. As you mentioned the use of a database I’d recommend looking at php and mysql, very beginner friendly. 
Sorry, I should have included more context. This falls under the "Showing off a project" section of our guidelines: http://www.reddit.com/r/javascript/wiki/index Basically, there's nothing inherently related to JS about your post for us to discuss. For all we know you did that in MS Paint.
For some reason I just automatically assumed JS was best for the job. From your knowledge, do you think PHP can change the look of certain elements. eg. The Smiley Rating I want the user to be able to click on one of the boxes and it will tick it, and untick the other 2 boxes. Is this possible with PHP, if not, any ideas what to look into?
\&gt; How can something be hard to decrypt but easy to compare with the thing that it was encrypted. The hash is not encrypted, really, it's just calculated. For a real world example, imagine if I wanted to verify that a box is the same box a day later. I might take some measurements of the box, such as length/width/height/weight and write these values down. The next day I get the same box and I measure the l/w/h/w again and if the values match, I can conclude it must be the same box. But the measurements themselves can't be used to extrapolate the contents of the box. It is a one way operation. Obviousally the length/width/height/weight is not a secure method of ensuring a box is the exact same box, so this would be an insecure function. A cryptographic hash takes an input (a password) and calculates a value that is incredibly, incredibly unique. But the hash itself doesn't ever get 'decrypted'. When a user submits a password a second time it just gets hashed again and then the resulting hash is compared to the stored hash. If the values match, you can infer the user submitted the right password. Bcrypt adds 'salt' onto this concept by adding extra random characters onto the password that gets hashed. So the resulting hash is always different for the same input password. This prevents people from building a dictionary of hashes that corespond to the password that made them. It also adds computational complexity. Bcrypt takes care of the best practices part of how to securely store a password hash.
It is possible yes if you store those fields as columns in your database as Boolean values. But as Php is a backend language, you’re going to need something to handle front end interaction. *drum roll* JavaScript! Or jQuery and listen for a click event which will fire an Ajax request off to your server and changing the Boolean value which will then return that response and depending on the value in your database you could change the smiley face image and untick the other boxes. 
Object.entries(myObj).reduce((newObj, entry) =&gt; ({...newObj, [entry[0]]: entry[1] * 2}), {}) array? where
Did a quick search, and couldn't find a good one in JS, here's one in [Scala](https://typelevel.org/cats/typeclasses/monoid.html) that I learned from. Essentially a "Monoid" is formed from two things: a `combine` function that combines two things and an `empty` value. an example would be adding numbers: const Addition = { combine: (a, b) =&gt; a + b, empty: 0 } This addition monoid can be used to reduce an array of numbers: [1,2,3].reduce(Addition.combine, Addition.empty) === 6 You can make another Monoid which multiplies numbers: const Multiplication = { combine: (a, b) =&gt; a * b, empty: 1 } And you can multiply all numbers in an array with it: [1,3,4].reduce(Multiplication.combine, Multiplication.empty) === 12 Go ahead and implement `Concat` which combines strings: const Concat = { combine: (a, b) =&gt; ???, zero: ??? } 
&gt; The Object.entries() method returns an array of a given object's own enumerable property [key, value] pairs https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries
Cheers for the help, I guess it's time to learn a bunch of new things through youtube and google :)
Thanks, and haha, I am sure yours will be way better. It'll probably take me a good week with college lol
yes, but you don't have a specific license file in the repo (which is what the bot would have checked). I wouldn't call package.json legally binding, checkout [https://github.com/lodash/lodash/blob/master/LICENSE](https://github.com/lodash/lodash/blob/master/LICENSE) for an example
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [lodash/lodash/.../**LICENSE** (master → 580cd4c)](https://github.com/lodash/lodash/blob/580cd4cd1b2efab5b3ba22c1478a543196cb7c2a/LICENSE) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e9rthuz.)
At this point in your experience, use whatever you're most comfortable with in terms of database interaction. If that is PHP, then use PHP. Otherwise, every language worth-its-salt has a database abstraction layer. &amp;#x200B; And yeah, given your mockup, I would suggest an architecture like: &amp;#x200B; **users** \- id \- username / email \- password (hashed) **progress\_item** \- progress\_item\_id \- user\_id \- rating \- comments \- instructor\_comments &amp;#x200B; Of course, there are a lot of ways to refactor this (e.g. making comments a morph model to a progress item), but this would be a simple way to get started.
You would use javascript to do it on client-side; but as your page is rendered (with whatever language you choose), that would require a page refresh to update the UI.
This is the classic "closure in loop" problem that every beginning JS developer runs into. A fairly good answer showing different workarounds here: https://stackoverflow.com/a/750506/106862
This isn't about classes at all, it's about lifecycles. If you have a simple side-effect, that alone will disperse among several lifecycles, so re-using it is out of the question. Now what if your side-effect could "hook" into lifecycles of any component that hosts it by itself, [that would allow you to create a module for it that can actually be re-used](https://twitter.com/threepointone/status/1056594421079261185). So, yes, classes aren't the right approach for components, although they served us well it could be better.
There is only a single instance of the `flag` variable. (This is more obvious in the JS version, where you can see a single `var flag` declaration in the top-level scope. Think of what you're doing now like this: ``` let flag = 'a'; const function1 = function(event) { console.log(`${flag}: ${event}`); } flag = 'b'; const function2 = function(event) { console.log(`${flag}: ${event}`); } function1('x'); // prints a: x function2('y'); // prints b: y flag = 'c'; function1('z'); // prints c: z ``` It doesn't matter what the value of flag is when you defined the function, it only matters what it is at the time you call `function1` or `function2`. To get around this, you need another function wrapper. ``` function bindFlagToEventLogger(flag) { return function(event) { console.log(`${flag}: ${event}`); } } // ... listeners[flag] = bindFlagToEventLogger(flag); ``` Each call to `bindFlagToEventLogger` creates a closure with its own instance of `flag`, rather than a single shared instance.
They're awful in terms of compartmentalizing functionality
This seems slightly more robust than my normal go-to; `global.cache = {};` &amp;#x200B;
That tweet really encompasses a lot of the advantages of hooks. Better compartmentalizing of functionality, less overall code. Plus dropping 50x transpiled class boilerplate from your bundle will be really nice!
2 Things: Firstly - rule 3 - this should really be a question you pose to /r/learnjavascript, or Stack Overflow &amp;#x200B; Secondly - I'm not sure what you mean by 'correct format'? If you mean that the value should only have two decimal places then you should use `totalamount.value = (Number(s) + Number(s * (2.5/100))).toFixed(2);`
Appreciate it man! I’m gonna have a go tomorrow
But that is the simplest way.
Saw the title, thought I was still at r/legaladvice. Time to go to bed.
Excellent. I understand now 100% and really appreciate it. 
How are things going now? Can you share a bit more specifics about your experience?
Jsfiddle is awful. [https://i.imgur.com/bzSG4Pw.jpg](https://i.imgur.com/bzSG4Pw.jpg)
Yeah it doesn't work for cell phone. Just add /show/ at the end of the address or view site as in computer
I just got out of HTML and CSS myself and I'm on JavaScript. I am also struggling but I have a book that really helps. What keeps me going is knowing that the more I learn and the more I practice, the easier it will come and things click together easily. Just don't run out of patience and it will be great! Let me know if you want to amazon link for the book. You read a chapter, which is seriously 1-4 pages, go online, and practice what you just learned. 
Chromostereopsis is a _very_ subtle illusion and it's not always noticed. You _may_ see it a bit better if you increase the number of dots drawn in the fiddle. Then again you may not notice any difference. [This image](https://www.reddit.com/r/interestingasfuck/comments/8snzl3/chromostereopsis/) favours the effect a bit more. Try focusing on the background sky. You may also notice some effect staring for a bit at the [RED BLUE](https://en.wikipedia.org/wiki/Chromostereopsis#/media/File:Blue_red.svg) image on WP. Again, the effect is subtle so you may not notice much in any of the images.
[wow](https://i-cdn.embed.ly/1/display?key=fd92ebbc52fc43fb98f69e50e7893c13&amp;url=https%3A%2F%2Fi.redd.it%2Fiif8r42ir3x11.jpg)
Can you explain in more detail what `getMapsAndInit` does? Specifically, where is async being introduced? In general, you have to options: 1. Make `getMapsAndInit` synchronous, so that `html2canvas` simply runs right after that call. 2. Add coordination between `getMapsAndInit` and `html2canvas`. Option 1 is relatively straightforward if `getMapsAndInit` isn't made up of a bunch of async calls. Option 2 can be done in at least two ways: * Have `getMapsAndInit` return a promise that resolves when the drawing is finished. Use that promise to all `html2canvas`. * Have `getMapsAndInit` trigger a custom event when the drawing is finished. Have a listener that calls `html2canvas` when the custom event fires.
It is the fastest and easiest of scripting languages. C# and Java are bad options for web stuff, unless it's api. To have something better than Node you have to go down C++ path, which Node already interops very well, since it's built on it.
It is very slow language. New version releases once a year and last one was only regexp engine changes. For example C# had 2 new versions this year. Oracle wants to put new JDK every half a year.
What problem is this idea solving? My initial reaction is that this sounds unnecessarily complicated and probably a misapplication of DRY. Many programmers treat DRY as an approach to not having to type the same thing more than once. I see little value in that. The real value is provided when domain concepts have a single representation. bonafides: near 15 years, backend and frontend
Well, I'd never fetch data on a component. Period. But if you mean any reusable logic between classes, composition is a pattern that has been used successfully for decades. Not only classical OOP composition, but also composition with components. So components that accept children components, like forms or tooltips, but this compositional pattern is not really a HoC since according to [the docs](https://reactjs.org/docs/higher-order-components.html): &gt; a higher-order component is a function that takes a component and returns a new component As for the loading spinner, I've solved that in a couple of ways these past year. Last time, I made my own router for React-MobX and integrated it there. The router can accept any number of promises before switching to the new route and it waits for those to resolve. I like it, it solves 90% of GET calls for CRUD pages.
Right, to elaborate: getMapsAndInit initiates some values and afterwards runs the D3.js script with draws an svg to a container (div) on the page this script gets called on. The problem is that the D3.js script is asynchronous and I don't think I can change that, at least to my knowledge. Because of the asynchronous nature of the D3.js script, I can't just call this html2canvas, etc, at the end of it since they'll just get run before the D3.js one is finished. Also because of how html2canvas works I need to wait until the svg is rendered &amp; visible, otherwise I just get an empty image, so I need to have an event handler which only fires after the svg renders. '$(document).find()' doesn't do the trick because the svg is there, but it's content hasn't rendered yet.
How is the d3 script asynchronous, specifically? I.e. what call is introducing asynchrony? For example, if it's calling [`d3.image`](https://github.com/d3/d3-fetch/blob/master/README.md#image), you'd have a promise to use for coordination.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [d3/d3-fetch/.../**README.md#image** (master → 00ca83f)](https://github.com/d3/d3-fetch/blob/00ca83fd310c7331bf262676e86e2429fb93a26b/README.md#image) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e9s22ek.)
Just use standard “crypto” package that comes with node. It’s pretty simple and have everything you need. 
&gt;How can something be hard to decrypt but easy to compare with the thing that it was encrypted. Everyone has explain the "how" in good detail, but I want to strike at the heart of the question: how do I comprehend this time asymmetry? Here's an example you probably already comprehend: If I ask you the cube root of 4913, it will take you a while to find 17. If I ask you what 17 * 17 * 17 is, you will find 4913 much faster. So there is an example where finding the missing value when you know the equation and the output is harder than finding the missing value when you know the equation and the input. Hashing algorithms are more complicated, but the one-directional complexity of using them is something you already are comfortable with. 
For those unfamiliar, this particular technique is called memoization. It should be noted that in the opposite use case, i.e., you are the API and you want to cache results you're giving to your consumers a reverse HTTP proxy like Varnish is a better solution.
HoCs and Render Props are a compositional technique, which is why they've been popular for so long. What you described sounds exactly like a render prop, except that your components take react elements, instead of a function that takes a value and returns elements? A function as children is more powerful since it can be lazy.
I think in this persons mind, it's making things easier because you're "essentially" just writing it once. I mentioned how much of a nightmare something like this would be to debug, but they didn't get that. 
But why couldn't your create an e.g. mouse event middleware and then import that into your components for reusability?
That works until for some reason you need to add extra logic in the controller that might not fit in the model. 
sure, but writing and maintaining your own reduce function is not exactly the best solution either. I'd rather take the array creation hit unless perf/memory is in an issue, and it's not like 90% of the time
memoization is a type of cache, but specifically one that caches the results of a function for a given set of parameters. here, the function takes no parameters, it simply pulls data from a fixed endpoint. so it's just a regular in-memory cache.
It’s hard to say anything definitive because everything is private. Your npm page doesn’t describe how to use your product or how it works. Where and how are you deploying this, for example? Outside of that, I wouldn’t use this because Mongo is a strange choice for a database when relationships are involved. Why not default to a relational database? Further, this appears to be very niche. If your API isn’t purely CRUD this doesn’t appear to be a good fit.
You could extend your class filling out those lifecycles but that'd only work for one side-effect. Inheritance would be a terrible choice, though. Mixins are terrible as well because they create implicit contracts and overwrite/cancel on another out once names collide. The only other way would be hoc's and render-props, but instead of re-using your components lifecycles, they'll wrap your component and call into their own lifecycles. Other than the nesting it causes behind the scenes, if you wanted one side-effect to interface with another it demands nesting on your part: &lt;Theme&gt; {theme =&gt; ( &lt;DoSomethingWithTheme theme={theme} &gt; {result =&gt; ( ... Hooks: const theme = useTheme() const result = useWhatever(theme)
It will *usually* just work. There was an**[ issue with Browserlists and @Babel/preset-env quite recently](https://github.com/browserslist/browserslist/issues/311)** which was causing builds to fail.
What areas of react do you not like?
I find it's too open with how you can implement it. Basically it gives you enough rope to hang yourself with. I'm also not a fan of how state management works or having to have inline-javascript or fragments in your templates to do simple things like iterate over a list. I much prefer directives. I also find Redux (I know, not technically React) to be way too verbose, and that most apps I've worked on use it when they really shouldn't be. I can see Redux being good if you have a complex state machine to manage but it seems like its over used and a heavy handed approach to what could be a lot more simple (Mobx/Vuex, for example).
I don't like that js(x) in my html in my js(x).
Fair enough. TBH I _really_ didn't like it, until I tried it!
A zero arity function doesn't make it not memoization, it's just memoizing the prototype `f()`
Hey thanks for the feedback! Need to make examples and how it works more explicit - roger that. I picked Mongo as the first default database due to its popularity in the JS community and its ease-of-use with Mongoose - with that said I do agree that something like an SQL implementation should be the default moving forward, and am currently working on releasing that. Can you elaborate a little more on why this might not seem like the best fit for anything beyond CRUD? The plan is to allow you to extend the generated API with custom Functions, similar to how one would deploy a serverless functions app right now, except we bundle it into your dedicated application instance. I'm wondering if this would be a solution for the limitations you have in mind. Thanks again for checking Modelier out!
Sounds sort of like what GraphQL tries to do, architecting something like that from scratch, if done incorrectly, will be a nightmare to maintain and probably not worth it unless you have a use case where it would be useful
I can’t see its use outside of a CRUD app because you describe it as generating a CRUD app and the existing documentation appears to only show how describe a CRUD app. For Mongo, it should matter more what the right tool for the job is rather than picking the popular tool.
It fundamentally allows for sub component functionality grouping. At the moment we think of components as the smallest unit but with hooks we get this smaller unit that allows for composing hooks together inside a component. Ive rewritten several components to use hooks after being a bit skeptical and it really is great. https://hooks.guide was helpful to understand the elegance when it comes to using hooks over cdm/cdu. The api is still technically alpha but I can confirm that it makes the creation of shared state, side effects and reducers much more fluent. 
https://github.com/choojs/hyperx
&gt;You have to understand how this works in JavaScript, which is very different from how it works in most languages. With the ES6 syntactic sugar hiding the nitty-gritty details of prototypal inheritance, how is it so very different from how classes work in other languages? Is it just method binding because of how `this` changes?
Gotcha, thank you for taking the time with this feedback. I will be sure to better document extensibility of the API moving forward - I haven’t found the right way to explain that part yet. And definitely - the end goal is exactly that: you will be able to pick which database you want or need to integrate with, and which stack you’d like the implementation written in, and you can pick the best combo for your needs. 
I'm not sure actually. I'll look it up for you tomorrow when I can.
I am currently trying it. Hope I warm up to it eventually, but so far seems that I prefer templates.
Any video of the talk yet? I can't find it on youtube
I just showed it to my friends and they don't see it either. Crazy
https://www.amazon.com/Smarter-Way-Learn-JavaScript-technology-ebook/dp/B00H1W9I6C/ref=sr_1_1_sspa?ie=UTF8&amp;qid=1542329199&amp;sr=8-1-spons&amp;keywords=a+smarter+way+to+learn+javascript&amp;psc=1
The whole API and the ecosystem around it are just a clumsy, horrible mess. Coming from Vue, React just seemed so awkward at everything. Redux is so verbose and needlessly complex, it's ridiculous. And the router (react-router-dom) being a component that you have to wrap around other components seems illogical. And passing the state from Redux down to children components while using the router is really messy. I just don't get why people torture themselves with React. Vue is smaller, faster, and waaaay more elegant with its API. And the related libs integrate a lot more intuitively.
Most concise explanation that I've seen so far in this thread 
Looking past tribalism, a good feature is a good feature. 
 If you're wondering how Bcrypt works, here's [the paper](http://www.openbsd.org/papers/bcrypt-paper.ps). Basically the "trick" is that it executes an internal encryption/hash function many times in a loop. (There are other alternatives to Bcrypt, such as [PBKDF2](http://en.wikipedia.org/wiki/PBKDF2) that use the same trick.) [http://dustwell.com/how-to-handle-passwords-bcrypt.html](http://dustwell.com/how-to-handle-passwords-bcrypt.html)
How does that look with SFCs? Do you have a typical example of your Vue components using JSX? One of the things I like about Vue is the templates but I also have situations where JSX feels like it would be better. The thing I can't stand about React's JSX is `className`, `htmlFor`, etc. I know that seems silly but it just irks me, especially because it is going through a transpilation process anyway and Babel understands `class` and `for` just fine despite them being JS keywords.
&gt; And the router (react-router-dom) being a component that you have to wrap around other components seems illogical. This. When I tried React Router the first time after using Vue Router for a little while, I was thinking "what in the hell". It looks so gross defining routes right in the JSX.
To be honest, I really haven't looked at Hyperapp in any particular detail. About all I know is: - It's small - It's kind of Elm-like - The author keeps resubmitting it to HN under various titles and usernames So, it's a pretty good question, but I don't think I have any really good feedback to offer in comparison.
Not sure how me expressing my frustrations with a framework I’ve worked with for years counts as tribalism. I’m sure there are good uses cases for the features I’ve described but I can’t personally think of them at the moment. Do you have any examples of how you would use them in a typical Vue app? 
I learned React in a bootcamp that didn't put any effort into teaching best practices, and my end project was a nightmare of spaghetti code and patched together solutions. The extra bit of opinionation and well-documented best practices from Vue have been a MUCH better experience.
Yup, you're right! It looks like [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat#Performance) recommends `+` over `concat` for performance reasons, but both are functionally equivalent. And thanks for the kind words, they mean a lot! The one book that _really_ helped me was [Functional Programming in Scala](https://www.amazon.com/Functional-Programming-Scala-Paul-Chiusano/dp/1617290653/ref=sr_1_2?ie=UTF8&amp;qid=1542333184&amp;sr=8-2&amp;keywords=functional+programming+in+scala&amp;dpID=41C%252BoHAw-fL&amp;preST=_SX218_BO1,204,203,200_QL40_&amp;dpSrc=srch), I can't recommend it enough. It takes a very 'exploratory' approach, and has lots of exercises which are very helpful. Scala was probably the best language for me to learn fp in, since I had lots of experience with JS &amp; the syntax is very similar to it, hope that helps! 
there is a [babel plugin](https://github.com/vuejs/babel-plugin-transform-vue-jsx). &amp;#x200B; file.vue `&lt;script&gt;` `import Component from './Component.vue'` `export default {` `render() {` `return &lt;div&gt;I'm some jsx with a &lt;Component /&gt;&lt;/div&gt;` `}` `}` `&lt;/script&gt;` &amp;#x200B; you will have to use things like onClick instead of vue's click handling. that isn't changed from react. 
But that's the sign of a good technology. Well designed software allows the user to choose design patterns and bolt on additions like state management. Highly opinionated software limits the user. 
Interesting idea.
I'm kinda reminded of the quote ["You can write FORTRAN in any language"](https://blog.codinghorror.com/you-can-write-fortran-in-any-language/). Genuine question: how would that have been different in _any_ framework? What features of Vue, Angular, Ember, or Backbone would have prevented them from writing spaghetti?
There can be a balance. The problem I’ve experienced is no one ever conforms to a pattern and you end up with five flavours of spaghetti with Redux on top. For an experienced team with very on the ball management this isn’t a problem but the reality is there are more people who don’t fit that description using it than there are. I agree with you about highly opinionated software and usually I don’t like using it, however personally I feel Vue has a good balance of opinion and flexibility and that’s really helped myself and my team make consistent and reliable code. I don’t think React is bad, it can be a powerful tool in the right hands, but I don’t like it very much, and I find it faster and easier to work with Vue. 
Have a read about 'rainbow tables' and 'password salting'
Still the same. Get a lot of interviews, some go well and get asked to come in, others I get nothing. It just seems like it’s a never ending hunt.
I feel this is a bit like synesthesia, where people see each number in different color (even if they're all white, say), or have a sense of smell when they hear a specific sound. For some reason chromostereopsis seems to be way more common than synesthesia (which is rare), but yeah. Doesn't work for me, for some reason.
&gt; The problem I’ve experienced is no one ever conforms to a pattern and you end up with five flavours of spaghetti with Redux on top. That's not on React, that's on your dev team and inability to enforce standards. Just my two cents, powerful tools in the hands of idiots, is that the tools fault? &gt; For an experienced team with very on the ball management this isn’t a problem but the reality is there are more people who don’t fit that description Isn't that literally every [insert framework, language, software paradigm]? &gt; Vue has a good balance of opinion and flexibility and that’s really helped myself and my team make consistent and reliable code. Agreed, Vue is really awesome, it does make things simple. But you can also do some really bad things in Vue, and just because you've never run into them does not mean others haven't. 
Do you also do freelance work?
Ah ok, interesting. I think the lack of event modifiers and `v-model` two way binding is a deal breaker for me. Those features of Vue templates reduce boilerplate code. I do like the fact that you can just import a component and use it without adding it to the `components` object though.
Sounds like you're pretty new to development and this is a common mistake, but Javascript and Java are two different programming languages, you probably want to ask over on /r/java to get better advice.
thanks!
Yes but haven't been doing as much recently because I have a full time job, a part time job and then the projects and learning that I do.
Do you know JSS ([https://cssinjs.org/?v=v9.8.7](https://cssinjs.org/?v=v9.8.7))? This project give to you the possibility way to abstract CSS into JavaScript to declare style into components.
It’s not about them being keywords. It’s about JSX being a layer over plain JS, and these are what DOM Element properties are named.
React isn't a framework. It's just a library.
&gt; password salting That sounds tasty. /s Will do, thanks
Good taste 🤫
is this flyweight pattern? 
I’m curious if these opinions would apply for someone like me coming from a Django backend. Does leaning on Django for the form and data validation make React or Vue a more preferable framework?
lol... well said. Thanks for that response. 
It's just for extensions.
Wow, neat. The blue ring seems to be quite closer to me than the red circle. It does seem to depend on the distance to the screen though. If I get close to my laptop (maybe within 20 cm), the illusion fades away.
bump - metoo
hi, thanks for your valuable suggestion i will try to post the content here.
You denied the feature before even looking at its usecases just because React implemented it first. It counts as tribalism imo
Your link draws the line just fine. If you're storing the result of a function call such that you can make the same call later and get the cached data that's memoization. It just so happens that _most_ of what we call caching tends to be memoization. Buffering/paging are caching but not memoization
Very soon, every newcomer to React will be learning hooks first and class components later on (or not at all).
This may seem like a rant or off-topic, but why the heck is everyone switching to typescript for everything now?
Read your comment and then look in a mirror.
The decision makers sense for us because flow isn't really used in the cue ecosystem. We receive hardly any feedback asking for flow typings etc, while typescript support is in high demand. In my opinion this reflects the trend in the JavaScript ecosystem as whole: many more packages have Typescript typings than have flow typings, and fro. my subjective experience, many more projects are written in TS the Flow. So when we decided that Vue 3 needed first-class Typescript support, doing the rewrite itself in TS was the obvious choice
What a *stupid* sentence, but typical for those empty gaseous single.sentence replies some redditors like to make because they can'tr come up with anything of substance. When you "count" you only count what you decide to count, and what you can count, so that itself already is subjective and also limited by what is possible (reference to the joke of the guy looking for his lost keys under the street light). You just made the stupid assertion that just because you have "numbers" something is magically better. Not to mention that you *do* have numbers, even if you don't write them down, because in this example, when they report on their observations, that is not based on Math.random().
TypeScript is life.
SFC are a thing in other frameworks though, right? React, Angular, etc? What makes Vue special in this regard? (I am using Vue right now in a work project, so I agree it's very nice -- I just don't understand why it's better than other frameworks like e.g. React, in the SFC aspect. Thanks in advance for any elaboration!)
Right, here's the entire function that actually does the drawing. Essentially, when this function gets called, it draws the map on a div container and at the very bottom there are a couple of functions which add canvas elements to the same container. &amp;#x200B; I'm not sure which part it is that causes it, but the canvas elements get rendered way before the svg. I'm not entirely sure if it's because the D3js is running async, or if it's because the SVG takes some time to render in of itself. &amp;#x200B; I'm starting to lean on the latter actually. Because if I call the `$(document).find()` on the SVG (called by ID), it finds it almost emmideately (\~ 400ms, if that), but you can't actually see the SVG until \~ 4 seconds or so later. &amp;#x200B; If that's the case, how do I wait for the SVG to render, or am I just stuck with static delays?
Lol
Are they trying to say that this library that OP posted is completely unnecessary, or what is the purpose?
&gt; Redux It's not a requirement for using React
\&gt; smaller, faster, and waaaay more elegant with its API Will have to use that quote next time someone asks - I think that sums it up...there needs to be a one page website outlining some of this. \&gt; And passing the state from Redux down to children components while using the router I've been on a number of react projects - but i'd be curious to see what this look like in a code comparison: 
Project : [https://github.com/malithmcr/frontendquiz.com](https://github.com/malithmcr/frontendquiz.com) Website : [https://frontendquiz.com/](https://frontendquiz.com/) Brand new project. Just started. Need some help with any backend and frontend guys. feel free to create a PR or issue. &amp;#x200B; Thanks alot.
People will kill me for this, but I think typescript removes the need to write a bunch of simple tests.
My question has always been... What does the "env" preset do by default? Anything?
Just to elaborate on what some other posters here have said, despite the name, bcrypt is not actually an encryption scheme, it is what is called a KDF (key derivation function). A KDF is a special type of cryptographic hash function, so to understand KDFs, you also need to understand hash functions. Cryptographic hash functions take some input string (call it `x`), and produce an output (usually of a fixed length) - call it `y`. We could represent the application of a cryptographic hash function `f` as `y = f(x)`. The length of the output, `y`, is usually fixed, while `x` could be as long as you like. Because there are more possible values of `x` than there are values of `y` due to the output being fixed length, multiple different inputs map to the same output. A good cryptographic hash function has no efficient way (e.g. other than trying all possible `x` values) to find an `x_2` for a known `y` such that `y = f(x_2)`, and no way to find two different `x_1`, `x_2` such that `y = f(x_1) = f(x_2)`. General purpose cryptographic hash functions (e.g. SHA-256) are designed to be very fast to compute. For this reason, they should not be used for hashing passwords, because passwords are often relatively short, and so it can make it feasible for someone to apply the hash function to every possible password up to a given length. A KDF is a special type of cryptographic hash function that has the additional property of being expensive to compute. This makes them suitable for converting a password into an encryption key (hence the name), or for storing a password in a database. To use them for password storage, you don't need to reverse the function, instead, you just apply the function again. For example, suppose my password was hunter12, and I had a KDF `f` available. My system would store `f("hunter12")` in the database. When I try to log in, I would send my password as "hunter12", and the system would compute `f("hunter12")` and compare it against the database. The problem with this is that someone might build a giant table of passwords and their hashes, and index it by the hash (called a rainbow table). This table would be expensive to build initially because it would be necessary to compute `f` for a lot of different passwords, but the table could be reused for many different attacks, so building these tables could still be worthwhile for attackers. This type of attack can be prevented by making a different KDF for every single user. It is possible to make a new KDF from an existing one by putting a "salt" through the function before the password: `g_{salt}(x) = f(salt + x)`. For each user, generate a different random salt, e.g. ZRs97fZ6bKtkrXX6XKtF3A and compute `y = g_{ZRs97fZ6bKtkrXX6XKtF3A}("hunter12") = f("ZRs97fZ6bKtkrXX6XKtF3Ahunter12")`. Store both the salt ZRs97fZ6bKtkrXX6XKtF3A and `y` in the database. When I log in, look up the salt (ZRs97fZ6bKtkrXX6XKtF3A) and compute `g_{ZRs97fZ6bKtkrXX6XKtF3A}("hunter12")` using the password I supplied, and compare against the database. Because the salt is too long to put every possible salt in a table, an attacker needs to try every password they want to guess individually for each user. In terms of how this works practically, many bcrypt implementations will generate the salt for you when you ask it to hash, and generate one output string that includes both the salt and the hash. When you ask the implementation to verify, you give it the supplied password and the salt + hash string, and it extracts the salt, computes the hash using the existing salt and the supplied password, and compares it to the existing hash. Bcrypt also has another parameter which controls how expensive it is to compute - a trade-off between making it cheap enough to check passwords, and harder to crack passwords - and implementations usually also store the difficulty parameter along with the salt and the hash.
I'm sure there's a lot of functionality available, but the basics of Gmail is not even \_that\_ complicated. As in, the main views everyone spends most of their time is essentially just a table (i.e. the inbox) or a text editor. Compared to a legitimately complicated application like Google Maps it should be easy to optimise.
This is what over engineering looks like. 
I believe they are, but OP's library serves a slightly different purpose. The comment above me has a solution that will asynchronously load your assets. OP's library will do that and also give you his to do things with those assets once they are loaded. The comment solution is great for preloading things (for the rest of your app) on the login page or the main page of your app. OP's solution is great for preloading things like the next videos in a playlist that you're relatively certain the user is going to want very soon.
Types inherently make things safer. You also get really nice intellisense, especially if you can work with some of the more advanced type features. It comes with essentially no runtime cost, can be automatically converted to human readable Javascript if you want to abandon typescript, and has excellent tooling. It can be easier to write code in typescript because it holds your hand, without getting in the way. It's like bumper guards in bowling. It may look a little silly, but you no longer have to worry about gutter balls (type errors). 
Hi. I write weird hacks to make users go "ooooh. Aaaah.".
Is there an ETA on all of this awesome stuff? 
Just send me that ads I'm supposed to click next time.
Can you please specify where u have seen the ads.....
Yeah for sure, that works fine :D, Thank you for the support. I love this community of programmers. Love it.
Seriously, the new gmail is one of the worst pieces of software I've ever used (from user's perspective). It's super slow, it fails to load emails sometimes (have to refresh the page). The UI shows emails as read, but after coming back all the unread emails are still that - unread. Often it hangs for a while. My PC is not bad, its not the best, but it's a lower high-end PC. The previous interface was great. I would just open it, read any email I wanted or just simply click on the categories (social, updates etc) and it would not later show me those emails as new later. Now I have to spend a long time on the page doing nothing before it does what I want it to.
Common bruh.... that's not ad.... I've specified in the above that those are the ebooks i recomend.. and as i dont want it to be misleading i've put amazon's log just below it.Those books are only for who want it...I never asked u 2 click it. Just read the content and critcize mate...please... I am fed up of people calling me a spammer....all i want is to contribute something 2 the community....:(
Congratulations, just checked quickly the git repo and really enjoyed your programming style on TS. By the weekend i'll get my hands on it, well done and thank you! 
The typescript compiler will tell you if there is a function that gets data it does not expect and ask you to control that. As long as you don't have any external inputs from non typed code the need to test what happens when you insert a string where you expected a number goes away. These days with the addition of `unknown` the compiler will even help you verify those inputs.
Thank *you*!
I can't speak to Angular, but I like Vue's component format much better than React's. Vue has a very clean separation of template, style, and script that makes it very readable. Because everything is JavaScript in React, the script and template is a bit more jumbled together and I never found a convention for styling I liked.
I wonder if [this](https://github.com/kaizer1v/md-resume/blob/master/resume.js#L6-L13) is really needed. I mean, not that it's _necessarily bad_ in general, but then again, is there any benefit here where there's not really much to _initialize_? ---- There seems to be some discrepancy. The [README says](https://github.com/kaizer1v/md-resume/blob/master/README.md#usage) that you should pass a callback to `load`, but [the code says](https://github.com/kaizer1v/md-resume/blob/master/resume.js#L29) it's returning a Promise and not expecting that callback at all. It seems the approach was changed a couple of weeks ago, but the README was _not_ updated. There's also something else regarding `load`/`json`. The first thing I noticed is... "Well, these are the only two methods that do not _chain_ (they are in the `Resume`'s prototype but they don't _"return this"_. Let's see why that is". And thinking about it, it seems clear: They are completely different and separate from the rest. In the sense that they don't even feel like they belong there. I mean, you have one _main_ functionality: Processing a resume's data into a template and rendering it. That's the _core_ of your thing. Then again, you offer an _auxiliary service_: fetching that data you need from an external file. This "auxiliary service" may or may not be interesting (in this case it's little more than a minimal wrapper on `fetch`; while nice, it doesn't seem to _critical_ to have), but the important part is that it is completely separate from the _core_. I mean, one could think of a multitude of use cases where the resume's data could be obtained in a different way (from local storage, from data already loaded into the page, from an input form the user fills...) and this would not affect in any particular way the _core_ functionality of rendering the resume. With this in mind, does it even make sense to have those two methods right there? Not just on `Resume` but specifically on `Resume`'s prototype. I feel like it would make more sense and, in the long run, may provide a more sensible structure if you want to add similar auxiliary functionalities in the future, to extract these to a more separate place. Note how `template` also needs to load some external file. And there may also be cases where it could have been already loaded. So it seems like one might also use the same auxiliary utility method to load the template. ---- What is `render` (and `jqRender`) for? `template` [seems to be](https://github.com/kaizer1v/md-resume/blob/master/resume.js#L44) already rendering the resume onto the DOM, and this is what the included sample `index.html` does. So, I wonder, what is `render` for? Is it an alternative? Is this left off from some previous approach? And since we've reached this subject, I'll comment just two more things about the code: One is that it is _incomplete_. Yes, it's pretty evident and nobody's hiding it. But then again this makes it _hard_ to review. Not so much for its incompleteness (I see the empty `[topdf](https://github.com/kaizer1v/md-resume/blob/master/resume.js#L82)` method and I just ignore it) but a bit more for the _unclear direction_. It feels like there are various attempts or ideas each tugging in a different way. This doesn't make it clear what the actual intention is. The second thing I wanted to say is, maybe, an answer to that previous one: So, what could be a good general approach? Which way makes _more_ sense? I'd recommend trying to follow a _Builder_ pattern. That is, a _user_ of the code, might be expected to write something _like_: (new Resume()) .data(resumeData) .template(template) .theme(theme) .render(selector); (Note I said "like", it doesn't have to be exactly like that) The methods for `data`, `template`, `theme` don't generally _do_ any actions. It's just set-up of the things you need to arrange. Then, it is when you finally call that final `render` that it goes and actually does the things it needs to do. As you have it right now, `template` renders, and so does `theme`. In fact, `template` does a lot of things: it loads the template, it processes it with the data and it renders it to the DOM. `theme` is not really _selecting a theme_, but actually loading any external CSS. What I mean is there is no clear separation of concerns or distinction about what is done where and when. ---- On a different note, it would really help a lot -potential users will appreciate it- to include some form of demo. It can be as simple as including a screenshot of the generated resume in the README, or as sophisticated as putting the project on Github Pages or something so that it can be seen live. I would think the screenshot is enough, but I'm sure that even just that screenshot will make more people show a bit more interest. ---- All in all, I would say that it is an interesting exercise, but it might be too early to really _review_ it. It feels like there's still _too much_ in progress to give anything other than general advice and direction. (Which I hope I've given above)
I usually lead with “hi I’m Josh” but you might wanna change that, unless also named Josh. 
Google changed.
Kind of embarrassing after 10yrs of off-again/on-again nodejs development. In my defense in the last few years I've been using bluebird promises (i.e., Promise.each and similar) for this and wouldn't have had this issue come up as much. Only now as I'm converting to use awaits am I using more for loops for non-trivial stuff. 
My pc is a super high end i7 6 core - 12 threads... 60mbps internet connection and it's terribly slow and I experience everything you mention. The worst offense has to be the email not opening. God I'm pissed at having to refresh... I think that if you want long enough it works... NOT EVEN SURE... Won't lie started to user Courrier from M$... Seriously... google keeps pissing us off with pretty hard to achieve goals like lighthouse on a PWA forcing you into all the newest practice available. My apps use code splitting, inline css, service workers, tree shaking, lazy loading, super light images that maybe load only on the newest browsers... And they give us that... So pissed!! Thanks for the rant. I feel a bit better. 
Actually, there's another babel plugin for that syntax sugar: https://github.com/nickmessing/babel-plugin-jsx-v-model
If you have ever programmed for desktop (VB/C#/Delphi/etc) you can probably see why they did it that way. In these languages, every form is also a distinct class instance and components are just fields, instances of basic or composite components etc. When I have to write something web-ish I still have to avoid thinking like a desktop oriented developer. 
Aww..... feels so great someone by my side...Thx mate...
Yeah, but if you get hired into a company with a code base older than [time where hooks is in production build] you can bet they’ll need to know both. Hobbyists can do whatever they want, but folks trying to make careers should be well versed in both methods. 
Oh yeah, it was completely understandable why they were having issues particularly coming from a different paradigm and they certainly knew their approach wasn't quite right. Just they needed help to figure out what their approach should be and the react ecosystem was not particularly helpful with that at the time. I'd assume it's part of reacts design philosophy to choose freedom over defined structures that might limit your choices in other areas. 
After reading more, if the Airbnb styleguide seems to be used way more than any other styleguide, why is "env" recommended here instead? Do people use both or is Airbnb out of fashion now?
Next question, what is a good default `.browserlistrc` for web + electron?
Yeah, it's just totally too verbose. Do react guys really code like that or there is some sort of work around? 
Nice to hear. How long did the rewrite take if you don't mind me asking? Was it difficult?
Freedom always leads to a mess, good frameworks put hard limits on how and why you do thing.
Good point!
Agreed.
Cool; thanks for replying!
It takes less than 10 minutes to port even huge bloated components over to hooks. And, if you understand hooks, you’ll be able to understand class components.
Well, when one day there will come to be a totally declarative way of "Forms" in a way reminiscing of desktop languages - where one creates an instance of an object and attaches it to a window, with full reactive properties in terms of basic components values etc, these people will be totally productive again. Something just a little higher level than web components. 
Great work. Glad to see Typescript + [NACL used](https://github.com/NullVoxPopuli/emberclear/blob/master/packages/frontend/src/utils/nacl/utils.ts).
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [NullVoxPopuli/emberclear/.../**utils.ts** (master → 1674063)](https://github.com/NullVoxPopuli/emberclear/blob/1674063eb755b1593e99de1cdce3e6fe6d8f0601/packages/frontend/src/utils/nacl/utils.ts) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e9tgfe2.)
Depends on the size of the codebase and the complexity of the components. I work on a codebase with 300+ other devs. There is a lot. And hooks can be ‘ported to’ pretty easily in most cases, but I wouldn’t personally want to just randomly switch all existing logic to hooks verbatim (though even that would be a huge effort for us). Hooks allow you to rethink the way behavior is shared. I’d personally refactor when I feel like I have a good idea of how we could benefit from hooks in specific cases. Some things I see the gains immediately and I’m excited to switch over, but other more complex components will actually be tricky. Changing everything at once will also make the resulting bugs much harder to track down. I think it will actually go like this for us: engineers that want to use hooks will do so, find good patterns and bad patterns when doing so. After those folks feel they understand the advantages and pitfalls, a lot of our most common components will be converted and HOCs / render props will be given a hooks based equivalent. Then at some point much later down the line (6months after hooks hit prod?) there will be a push for 100% conversion for consistencies sake.
That’s the most exciting aspect to me. Typescript is a revolution for front end development. 
Wear loose tracksuit bottoms. Get a boner. Walk in front of the team giggling and tell them you "write the code". Then sniff your fingers and make an excited face. Then walk back into the corner.
You could use D3 or something like Chartjs
Not a bad plan for a project. What I’ve done is bring progressively more complex class components over to hooks, as well as all of the HOCs. Sometimes the reusable bits make themselves available immediately, sometimes you realize it will take a lot of refactoring to make them reusable. Either way, I’ve found that making the conversion is essential to exposing that reusable logic. 
&gt; d3.json("files/finland.geojson", function (json) { **TL;DR:** This line introduces asynchrony - the callback is called at a later time. Either `d3.json` returns a Promise that you can use, or trigger a custom event from the callback. Then, instead of your 6000ms timeout, wait for the promise to resolve or listen for the custom event. This assumes `getNameAndTime`, `showFindCounts`, and `setCopyright` are synchronous. ### More complete explanation Conceptually, this is **coordination**. The basic case is: * `Action A` * `Action B` (async) * `Action C` (depends on `Action B`) `A` occurs and then `B` is queued up. Crucially, we don't know or control when `B` will start or finish (in your case, you guessed it would finish in less than 6000ms). `C` needs to know when `B` finishes before it can start. In other words, `B` and `C` need to **coordinate** their actions. You can do that with a `Promise`; `B` returns a promise that is `resolve`d when `B` has finished. `C` can wait via `then` for the resolution. So `B` "tells" `C` it's finished via the promise. Or you can have `C` listen for an event that signals `B` is finished. `B` triggers the completion event, "telling" `C` it is finished. I just scanned your code, looking for `Action B`, i.e. the code that was being called at some point in the future, out of your control. In JavaScript, that's almost always a callback.
Compared to what and in what situation? Who upvotes this shit?
nacl is legit. Need to figure out how to get a smaller build of it though, as I'm not using all of it.
Yeah that’s not a bad point. Some shared behavior might not become clear until you see all the hooks in place. If we had no business goals and all developers were on board / well educated about hooks AND i was in charge I might set aside time to just do the fat conversion up front, and then spend a few weeks testing the app and looking for optimizations. One or more of those things might not be true ;) But for my team maybe we’ll get our code refactored in a more up front manner. And if it works out for us we can push that attitude out to the rest of the company.
Hi /u/davispindola, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Hi /u/reuiwdfvcdedxc, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/jayjanssen, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
document.getElementById('three').onclick = (e) =&gt; { e.target.classList.toggle('salmon'); e.target.classList.toggle('coral'); }
Really neat! Great job!
Ok...so a couple of questions and notes... 1: have you looked at the [documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript)? 2: have you tried googling it or checking [stack overflow](https://stackoverflow.com/questions/6787383/how-to-add-remove-a-class-in-javascript)? 3: can you link to a jsfiddle or codepen with what you have tried? I'm not trying to be a jerk, but much of our job is using the available tools and community to figure out how to do things with the current languages features. The top 3 questions are going to be standard questions you hear from any developer or situation.
Class list isn't supported in ie9, there are a number of cross browser solutions to this problem and OP should research what works best for their use case [Caniuse-classlist](https://caniuse.com/#feat=classlist)
Nice article, it makes a pretty good case for node being faster than php. But just looking at that graph at the start makes me think that Go is superior to all of them. Am I wrong?
i feel so strongly for those who have to support ie9. We only support back to ie11 and some days I want to actually never look at code again because of how ridiculous some issues can be. 
Yeah. Our corporation finally just said: IE11/edge/chrome, that's it. It's awesome. However, Babel polyfill capabilities really does wonders and really eased most of our pain before that.
Care to explain why or are you content with just being a dick?
Redux projects generally come with the need to update stuff in like 6 different files, but dude, my fetch call would have taken 3 lines to type in a single file and I could have saved it to localstorage in 1 line. This lighter approach removes a lot of overhead, state duplication in RAM, need to teach new developers why their code don't work with Redux yet because they forgot to update one of the files.
Mostly because templating in general just obscures logic and relies too much on strings as code/identifiers. When you get specific enough, things start getting out of hand. Everything is obscured and it's hard to parse what's going on. Makes little sense to me to use custom template language for loops, switches, stringifying, "helper functions as strings", when you have all of that for free with javascript. Learning extra syntax for no upside.
I haven't used next.js yet, it looks like the major selling point is avoiding all the boilerplate to start coding + integration with now for deployments. So perfect for sideprojects? Is this correct? If your frontend requires access to your backend services though (i.e. a company) I would assume next.js is not as much of a win since setting up everything only has to be done once and can be customized easier doing it manually.
Just want to reiterate that you aren't dumb. However, with programming, a lot of it will be "teach a man to fish" instead of just giving him a fish. This is how you will be successful in software development. Best of luck.
How big are the web applications you've been deploying? This question seems so crazy for me honestly.
What an excellent explanation. I'll add one clarification. A rainbow table isn't simply a lookup table of hash values and the passwords that produce each hash. If you tried to build such a database you'd quickly discover the very large amount of storage required, too much to be feasible for ordinary length passwords. Rainbow tables provide a way to reduce the amount of storage required by cleverly chaining together many otherwise unrelated passwords into a single value. This reduces the amount of storage required by a factor of thousands, and makes feasible the creation of a table with the password hashes for all passwords shorter than some particular reasonable length (e.g. 9 characters). Adding a random salt value to each password prevents the use of rainbow tables for deriving the password from the hash. You need a whole table for each possible salt. As long as the random salt value is sufficiently long this makes computing and storing rainbow tables infeasible again.
This is an interesting perspective I haven't considered before. I think as an experiment I'm going to try to apply this to my Vue components and question myself anytime I have to use a directive.
&gt;The thing I can't stand about React's JSX is &gt; &gt;className &gt; &gt;, &gt; &gt;htmlFor &gt; &gt;, etc. God that gets me every time. 
&gt;What will a framework do for me &amp;#x200B; &gt;compared to native JS with some css file **(bootstrap)**. &amp;#x200B; You use a **CSS framework.**...
Tell that to every team I've ever worked on hah
&amp;#x200B;
This is Pretty cool!
to me, red on blue or blue on red have always had this effect
Hmm, I still can't get it to work, though googling did confirm it's this function that's causing the async issue. If I call the html2canvas, etc, function at the end of d3.json as a callback it still gets triggered right away. I also tried to put it inside of `d3.csv...` but that had the same effect. &amp;#x200B; `d3.json().then(() =&gt; { }`... Didn't work at all, and `d3.json().on("load", function(){})` doesn't work since it gets triggered when the file is loaded, not when it's done drawing the svg.
Hey thanks! 
I found it hard to buy into Ember, Angular, etc. But React works like I want it to. It mostly stays out of my way and takes care of all the crap I don't want to. That lets me just write the app instead of all the boilerplate crap. If you haven't yet found that framework that fits you, or haven't yet worked on a huge app with a team, I could see not understanding the drive to use a framework like those. But once you reach a certain level of complexity, you're either going to use one of the existing frameworks or end up inventing your own to control the chaos.
&gt;boots Do you use any libraries to assist you in some tasks like validation, views and so on or none at all, just what you write? Not even your own library? &amp;#x200B; For me it's not a shitshow at all like you said. Not at all.
I'm not questioning your arguments as you provided in your second and this last post. It's that your first one was a bit limited to "it's React and I don't want it". That's why the other guy questioned for tribalism.
Not everything requires a framework. That being said something like react isn't a framework and you would probably see an increase in productivity using it. It is also a major benefit when working in a team.
In this case I just used css for grid layout and graph.js, with my post I meant like the frameworks React, Angular,Ember (they seem to be so much in focus). I mostly just make collections of functions (for repeatable tasks) that I carry around from project to project. After looking at job postings there are so many companies wanting you to use a framework like the ones above, but I don't get why.
stage0 + s.js is where it's at, both are bloody brilliant and work flawlessly with each other.
[Good morrow, peasants!](https://youtu.be/fmuGfSwPQ4I) (NSFW audio)
yea, google is slipping. The made gmail worse and they also just dumped google finance, which was far and away the one I like most of all the choices out there. And what did they replace google finance with? More or less single mobile stock graphs. I have not used it since they depreciated the old one.
For me, the main point is that you don't need to code or fix something that's already there for you to use. Things get faster, for you and for your team, when you adopt a framework to work with. Probably you know how hard is to build a stateful app (for example) without a single library. When I have Redux or Vuex (far easiest) why should I code something to manage the state? Another point is that as a human you can't think about all the topics that includes front-end web development in a way that your application can securely cover all that topics. Most of the times the framework handles the most implicit things for you, so you can focus on developing the business logic and the GUI, and maybe granting better quality on these topics. Btw when you're using Bootstrap, you're using a CSS Framework. Angular 1.x were a single file too, and it's still a framework. But, it is important to know that the framework is for the moment, and will pass, and that's the point of building things without frameworks (even if the development time gets longer and less pattern strict). You are secure that when this framework pass you will be okay because you know how to develop an web application even without it.
Maintainabilty, extensibility and a unified system for teams. But I get what you are saying. Stuff like this has been developed by giant companies for there own use. Working on one-man projects most of them are overkill. 
How does this compare to https://github.com/glorious-codes/glorious-demo?
For frontend/React, Next.js or even just Create React App are both excellent offerings to spin up production-optimized builds basically instantly. You can go from 0 to production site in under a minute. With Next, each file can result in a new page entirely.
The same reason you are not drawing your web designs in ms paint or writing your programs in assembler. Higher levels of abstractions save time, make it easy to scale and maintain the code etc. Shitshow? Really? Dude [don't try to be a smart ass](https://www.urbandictionary.com/define.php?term=mount%20stupid) and suddenly question the applicability of things that have existed since the dawn of computer science if you have not used it/seen it work in the real world.
If you haven't checked out Ember, it's like the frontend analog to Rails. Takes a while to learn, but people who have learned it well tend to be pretty happy with it. Top notch CLI tools that generate your scaffolding and tests and stuff. That said, if you like Rails so much, why not just use that?
Might as well recommend [fastmail.fm](https://www.fastmail.com) here (if you are open to paying for email), it was already fast compared to the old gmail interface, but as I keep my old gmail address around because of the fun mail I get (I have first.last@gmail.com with a very common combination), I once a week or so check it. It's such a horrible experience, it's actually funny.
You basically created a framework of your own. Companies like to use frameworks to lower ramp up time when adding to a team. They'll have an easier time finding people who know React as opposed to a homegrown framework.
VueJS or React and their associated CLI tools to generate projects with all the cruft already setup for you.
Don't have much time to play with it, but putting 'mew' into the input shows Mewtwo instead. Literally unusable!! /s
https://asciinema.org/
I love this. Making shortcuts is such a pain with the app sometimes.
For what it's worth, our new [`redux-starter-kit` package](https://github.com/reduxjs/redux-starter-kit) provides several utilities to simplify some common use cases. I'd encourage people to check it out.
Mr. Mime has a missing image
React is far from opinionated. The efficiency depends on your team. He's looking for something like Angular or Ember, I guess.
Electron is a controlled environment, so you shouldn't need to specify any version other than the Electron / Chrome version you ship with. I imagine in reality most wouldn't bother as bundle sizes don't matter when you're shipping an entire browser with your app, so would just use a single config, geared towards the web platforms they support. &amp;#x200B; I've never built an Electron app, mind. If someone asked me to these days, I'd probably ask them why a PWA wouldn't be good enough.
Seems very similar to http://chingu.io. I'll check it out. How much familiarity do you think I should have with programming/building apps before joining?
Terminalizer is built to be a highly customizable terminal recording tool to generate animated gif images. The website is added as an extra feature. Check the repo and tell me can you find such customazability anywhere else!
This is cool! The animation is sweet, is that provided by the API as well?
Good job 👍
Personally I would go with whatever create-react-app comes with, and then add typescript and redux/thunk etc.
I know, but this may well be his answer. He doesn't even know he's using a framework already. Why use the bootstrap framework when vanilla CSS can do the same thing? 
Any reason you can't just use `create-react-app`? It is dead simple to get started, and with the 2.1 version of the scaffolder, you get typescript out of the box. It is as simple as... ``` npx create-react-app my-app --typescript OR yarn create react-app my-app --typescript ``` That sets up pretty much all you need, aside from hot reloading. But there's a rewire plugin that works really well: [react-app-rewire-hot-loader](https://github.com/cdharris/react-app-rewire-hot-loader)
This is really awesome! Can you link the Poke API?
I used to (and still do sometimes) develop native Android apps. I've always hated things like Cordova. While the idea seemed cool, the execution was horrible, apps written with it were a laggy mess. React native and Flutter on the other hand are nice, they are almost as if not fully performant as native apps. PWAs seem better than Cordova. The thing I like about them is they don't need app stores, you can just 'install' a website. But speed and feeling are still not there, you can just tell it's not a native app. I hope this will change in the future 
Is that you, /u/commahorror?
I'm still bitter about Google Reader
I would stay away from Sails personally. The framework authors are pretty inactive as of late, and the ORM shipped with it is highly annoying.
Did you reimplement a language feature? (Classes) What does child component mean in this context? Can we have a link to the git repo?
He made a **library** not a framework.
Maybe something like Gatsby?
It breaks my heart they are killing inbox. I absolutely love that app. But then again I shouldn't be surprised, it is Google after all.
I would highly recommend looking at [D3js](https://d3js.org/). It has a fairly steep learning curve, but most people just grab a diagram and tweak it using their own data. On their website, they've got lots of examples of things you can do with it. 
I don't think there's ever been a math modeling class that didn't have at least one zombie related project. Are you just trying to simply chart # of people vs time, and # of zombies vs time? If this, just use chartjs. It's easy to make a chart out of arrays. Or something more complex like a map with neighborhoods or counties or something and the population, zombies, maybe % of population that remains uninfected? For something like this you'll likely need an api for the map, and population, or do a web scrape for the populations, then I'd probably use d3 for this. Use the % population to determine the "fill color" so to speak. 
I'm just going to keep inbox going until they kill it then look for alternatives. I really can't go back to Gmail, it's a step backwards.
https://pokemontcg.io/ for the data http://www.pokestadium.com/tools/sprites for the gifs 
The problem right now is that hooks are still alpha, so that work is only happening in a branch. But components which are heavy on display and light on logic have been a good test bed, and of course the converted components are fully compatible with the non-converted ones.
Join my team, we do context and mobx
Hi, Yes, you can think of it as a re-implementation of a language feature. You simply set the `ownerType` of the type you are defining. It can be class, mixin or component. Based on it the framework will threat it differently. The type you've defined will derive from the base type configured via the `ownerType` config. The code above shows how inheritance is done between the components, even though it's more applicable to classes. I am talking about the real inheritance, not extension (extension is done via mixins). We have defined a parent component called `my-component`. The framework knows it's a component because we've set the appropriate `ownerType`. `my-child-component` in this context is a derived type of the previously defined `my-component`. It has all properties and methods from our custom component `my-component`, as well as from the `component` core type. It's a chain and the components are linked through this config. Here is the link: [https://github.com/ProticM/plazar-js](https://github.com/ProticM/plazar-js)
"TL;DR" part being longer the post itself is hilarious 
Yes, I know, but I wanted to be concise without writing a novel.
Corporatism. Corporatism never changes...
I've used create-react-app, and it is very helpful - but more advanced features (like SSR) have left me needing to eject from it at times along with a large complex webpack config and other unneeded extras.
Not sure if it really matches what you're looking for, but I've been building a Node API server framework with the goal of simplifying the process of building API servers ([link](https://github.com/jmeyers91/rapid)). Most of the work is done by existing tools ([koa](https://koajs.com/), [knex](https://knexjs.org/), [objection](http://vincit.github.io/objection.js/)), so the framework is mostly focused on wiring the different pieces together, so all the consuming app has to do is add routes/models/actions/seeds/migrations/etc and they will be resolved automatically. I also built a [CLI](https://github.com/jmeyers91/rapid-cli) for scaffolding, running, and watching apps that use the framework. Scaffolded apps include several [plop](https://plopjs.com/) templates for quickly adding new models/routes/migrations/etc. I've been using it to build an [Evernote clone](https://github.com/jmeyers91/rapid-notes-server) if you want to take a look at an example project.
Appreciate it. I've been reading the docs for a couple of frameworks and I don't think the added overhead is worth it for me. I've already got an app structure and custom authentication/sanitation/logging middleware that I'm used to and prefer Knex and raw SQL to ORMs. However, I think I'll give Django a try. I've build a small app a couple of years ago with it and I think it can address some of my personal quirks.
Honestly... I don't know what problem any of this is supposed to solve.
I don’t really know anything about Zeit and their Now services, but I’ve used next in production and for side projects as basically a create React app alternative with server side rendering built in. Wiring it up to your own api / backend and hosting it is the same as any other React app. It’s nice that it eliminates the setup, automates code splitting, and handles server side rendering. BUT it’s also really valuable to learn how to set up a React project and build system from scratch too!
I read an article that it's replacing Electron, is that true though?
Well, nothing that hasn't been solved by any other major JS framework, but I think that all three of them (Angular, Vue and React) are moving us away from the standard web development. Except maybe Vue. Vue.js is still Html, CSS and JS oriented, mainly. PlazarJS just provides a different approach to the same thing. It's all a matter of preferences. I did my best to create a framework that is simple and based on the good old trio.
None of them are doing what you are accusing them of. React uses js classes or pure functions for components. You have this weird pseudo class system. Your 'classes' are super tightly coupled to your framework, unlike react components, for instance. I don't want to shit all over your work. I'm sure this has been a fun project for you and a learning experience but I honestly don't think this is really the way to go.
How do you handle SSR without using "now"? Do you [wire up your own expressjs or http.createServer](https://nextjs.org/docs/#custom-server-and-routing)?
If your SPA has any kind of searchable/SEO/link-sharing content it's a _must-have_ feature. 
Pure functions are great, but, since we are talking about React, I am not a fan of writing everything in JavaScript. All of them are great frameworks, but they usually have a strong opinion of how you should structure your app. The idea with PlazarJS is to have a lightweight framework that can be easily integrated within any app. No matter what technology you've used to create your app. You can choose how and in what percent your app will depend on the framework.
In react with JSX you don't just write JavaScript. Your templates aren't just HTML either. React is a library and doesn't have much of an opinion on how your architect your app. Now, one might say your thing is just a view library like react as well. Convince me why I would want to use this over react. Especially when react components are less tightly coupled to the library than your constructs.
Would it not be better to use `Array.prototype.reduce.call(iterable, callback, initial)`?
Good idea, I would love to see an extension of this that gathers all the licences from NPM projects and combines them into a single file. Also photography licences are important too, maybe it could identify common filename strings like "pexels" or "unsplash" and detect license use.
Ok, I'll try to be brief and concise. The first sentence you've written is one of the main reasons why I started working on PlazarJS. I mean, why was there a necessity to mix everything up? Even if you use React without JSX you still need to write everything in your JavaScript file, or there is a way not to do it like this that I'm not aware of. I don't know, maybe there was a higher cause for this. I agree that React is more flexible, unlike Angular for instance, but the fact where I just can't have a pre-rendered template on my page and attach the component to it was good enough reason to question it. I mean, it's a simple requirement. I just want some html rendered on the server to be used as a template for my component. Vue for instance, supports the requirement above. With PlazarJS you can have an inline template, you can select one that was pre-rendered on the page, just like the Vue.js does, or you can download the template from the server via ajax call. A neat thing is that you can also download a viewmodel together with the template within the same ajax call, if you choose so. So, with PlazarJS you can define your templates and viewmodels on the server, if so chosen, and to reuse them on the client from the moment when your component gets created. A very useful feature if you are building a .NET MVC app for instance. About the React classes, and about the classes within any of the three frameworks, without babel of typescript they cannot be used. At least at this point since ECMAScript 6 (and above) is not fully supported. I do plan to update PlazarJS to support typescript, though. I think it is very useful, especially if you are building a large scale enterprise application, and I built PlazarJS with that in mind. Don't know if you are familiar with Sencha framework and ExtJS, but if not, take a look at it. It's too early to match PlazarJS with the three giants, since they have a big community and have been here for quite some time, but I think it's a good start and alternative.
good call, that would probably work
That's exactly why I built Terminalizer 
Thank you! https://pokemontcg.io/ for the data http://www.pokestadium.com/tools/sprites for the gifs then I used video backgrounds from pixabay You can see the code here https://github.com/joshborup/interactive-poke-card (it's somewhat messy, as I'm sure every coder would say about their own personal projects :) ) This one was fully built with React 
Its definitely still a work in progress, I just need to go fix it to grab another image if the first isn't there. Thanks for the heads up!
Hmmm, based on your comment does that mean you are just running `nohup/forever next app.js` from the command line or what does the actual production deployment look like for you?
You do know hat react can easily be server rendered and hydrated in the client? You can literally do all of the things you mention if you want. This is not a limitation of any of the popular libraries and your thing isn't any better at solving this supposed problem. Look at next.js or nuxt.js Of course, do you want to do all of this? You do realize that if you load a template from DOM Vue or your framework need to compile them in the client? That's overhead we want to avoid generally. Vue files are also compiled down during development, including their templates - at least if you care about performance. You complain about having to use Babel for classes (of you want to support old browsers) but in the same breath mention you want your thing to use typescript. Laughable. Look, you are getting super defensive. I understand, this is your baby. But I'm just offering some food for thought. Also, I refrained from commenting on the actual implementation in your GitHub. 
I just tested it, you are absolutely right! How dare I let such garbage release to the public! who am I EA?!?! 
Oh, if you're looking for non-JS-based frameworks as well, Django is great. Same with Rails and Laravel, very fun frameworks.
Vue CLI v3.0.? is all you ever need. &lt;3
Cool, CreateReducer/createAction looks quite relevant to me
Ehmn, it's javascript. Every developer and their mother knows how to "program" in it. It's fucking amazing, i'm cereal. Give it a try! Or check out Deno.js
https://github.com/denoland/deno#status &gt; Under Development. Its still pre-1.0. I don't know what you're expecting.
When you work in a project that runs 5 simultaneous ab test , has multiple variations depending on the country and other variants you will understand the point :)
Node.js performed equal or better in IO since pretty much day 1. Yes, I have in fact retrospectively benchmarked old versions. In fact, old version of Node.js performed better in IO than new ones do today. &amp;#x200B; Performance is an \_architectural\_ property that doesn't change much from initial version to release. Once you have something that people start building on you're basically locked down. &amp;#x200B; This happened to Node.js, it will happen to Deno. I said this \_6 months\_ ago and here we are today - piss poor performance. Way below what Node.js ever had (we're talking 0.5.x releases from way back). It's not going to improve unless someone puts the whole project in the trash can and starts all over.
that's awesome! i'm working on a React app right now too, for a different game :P beatsabercompanion.herokuapp.com
From what it looks like you're just making websites that leverage backend with minimal user interaction. That doesn't seem to fit the use case for frontend frameworks which are meant to abstract different user interactions and reflect updates to data in the DOM.
I see downvotes, but no fact or experience to back any of those downvotes up. Did any of you perform scientific, historically correct benchmarks to back any of your claims up? I did. I do that for a living.
What are you doing for beat saber? Literally my favourite game right now!
Cool! Remind me of Scriptable 🙂 https://itunes.apple.com/dk/app/scriptable/id1405459188?mt=8
Good point.
Click bait.
I wasn't the one who downvoted, but my guess is that whoever downvoted did so because you're coming across as rude and non-constructive, i.e. you could make the same point without using words like "piss poor" and "puts the whole project in the trash". 
[https://sinxloud.com/explain-rxjs-reactive-programming/](https://sinxloud.com/explain-rxjs-reactive-programming/)
Not sure if something else is messed up but when viewed on mobile the card flips after being touched and won’t flip back around without entering a new Pokemon. Otherwise, this is awesome!
Cool, I've never heard of chingu before! Right now skillcamp is just a community of developers. It's a great place to ask questions, talk about development and get feedback on your code if you have time to contribute, but nothing super structured. Feel free to join up wherever you are in your coding skills. I'd say we have pretty even mix of working developers and developers that are working toward their first jobs. Everyone is super down to earth, so no one is going to shame you for not knowing something. The whole point of the group is to have other devs to bounce ideas off of and learn from. I'm @jordan on the slack channel. Hit me up if you have any questions!
This is awesome, thanks for sharing! Your work actually motivated me to get back into my React [CanvasDraw component](https://github.com/embiem/react-canvas-draw/tree/develop) to improve it. Hope it's fine that I borrowed lot's of code from your lazy brush demo. It's just very good.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [embiem/react-canvas-draw/.../**ee70ceff697d2d9ed742a5ad5a856a8baf921090** (develop → ee70cef)](https://github.com/embiem/react-canvas-draw/tree/ee70ceff697d2d9ed742a5ad5a856a8baf921090) ---- 
"Good enough for" is a weird way to word it. Its good enough to handle the same use cases, but the way things are typically accomplished is VERY different. So its not really for "for' them in that your would be asking them to program in a way that is very different than what they are used to. 
Looks like it works. What was the goal? Just trying out CodePen? 
Apple will drag their heels and make them impractical (or at least a lot of features some people might consider essential) for a while. If I'm not mistaken, a PWA launched from the homescreen will still be forced to use an outdated version of Safari. It's unfortunate because Apple devices are extremely fast. You really have to try hard to make a web app slow on iOS.
Yes just trying it out to see how it goes
And discard the rest.
Late comment but just wanted to say that I agree with you. The mentality here really irks me. There is absolutely nothing wrong with using a bit older of a stack if it gets the job done easily and effectively, as long as it's somewhere where those 70kb aren't important (read: anything but a phone).
TypeScript makes the front-end bearable, but there's little use for any JS on a server. 
I don’t see a lot of reasons for a Java developer to object to TypeScript, the language, after a short adjustment period. NPM the ecosystem, on the other hand, is why your [site reliability](https://github.com/npm/npm/issues/19883#issuecomment-367570304) and [security](https://github.com/eslint/eslint-scope/issues/39) engineers wake up screaming at night. NPM has a lot of work to do before it can be half as trustworthy as Maven Central. 
So, build armatures, then say hello in HTML and master redux. Nice
Hey man, this is really sweet. I was wondering if this is something that you could make into a live background for phones/PC. I'm not all into code so I don't really know if its possible but this is like what I've been looking for.
Cool. Again, good job.
Hey, I didn't want to end our discussion like that, but I really had to go last night, and i do love a constructive talk with people, it sharpens your mind. I came back to show my appreciation and how thankful I am that you took the time and effort to have a discussion with me about something that you are obviosly against of. You are a React fan, I get it. I prefer Vue.js over React, and PlazarJS is more like Vue. At the end of the day Vue.component and pz.define extensions will do the same thing. Keep up the good work, and continue to write a constructive comments like you did here. To the smart people, that kind of comments are really useful. 
Would be nice if this was organized into categories.
I think all 3 are really exciting. That being said, some of these are really hard sells for companies as they're both not only not proven yet on a large scale, but there's not much talent out there for them. A good measure for a lot of these technologies (from a talent perspective and a provability from other companies being successful with it) is a simple search on job sites like [stackoverflow.com/jobs](https://stackoverflow.com/jobs). I wasn't able to find Reason in my area (a very saturated tech area), I saw one listing for Elm (and it was fullstack), and a couple of clojurescript ones but only fullstack (I think the job description of full stack IMO doesn't make sense in the direction we're headed in web development, but I could be wrong). The reality, is it was hard enough selling an extremely big company on React + Typescript across the board by itself. Again I think these technologies have a lot going for them, but for us, it's about putting us on a path of incremental improvement. React + Typescript is a better jump for the type of talent we already have, allots us a deeper pool of candidates who are already familiar with our stack, and it's an improvement in the right direction.
Well done! Although I've recently started learning JS (background: Java, Python, C) and haven't really mastered it yet, you've done an amazing job at explaining concepts! Bookmarked it, will come back once I get better with plain JS.
That was always my annoyance with IFTTT; it’s hard to figure out what inputs to make go with what outputs unless you have a specific goal. 
You know, I think the beauty of this is not the hand coding part, but that you can output a shortcut from anything and upload it via Bluetooth (airdrop). Here’s some ideas off the top of my head: 1) Desktop editor for shortcuts 2) Websites generating shortcut templates for their URLs 3) App finds another app on the phone and creates a shortcut to plumb the two together 4) Hotel generates shortcuts to control your room with your voice 5) A beacon in a store generates a shortcut connect you with staff 
Some very interesting ideas!
Just one thing. In your &gt; I took the challenge to explain RxJS to developers in a simplistic way You might want to change "simplistic" for "simple". While it _can_ be understood as a synonym to "simple", _"simplistic"_ generally implies a bad connotation of being "characterized by extreme and often misleading simplicity" (WordNet) or that is makes "something complicated seem simple by ignoring important parts of it" (Cambridge Dictionary). I guess your intention is not being misleading or ignoring important parts, right? :)
If one has problems with time / task management and discipline, it's not a tooling problem, it's the attitude and lifestyle of that particular person. This is not a critic on your product. Just saying that you are trying to solve the problem with the wrong solution.
You can do SSR with CRA without ejecting
I will definitely check this out! Reading the description on the website, there are some grammatical errors. I only point this out to you because this is the first contact your customer will have with your product, and saw such a small mistake can have a negative impact on the view of your product. I only say this because I want you to be successful, and I don’t want a small thing like this to get in the way of that I’ll see if I can try this product in work next week, and will let you know how we get on.
 Where are the videos from?
If you look inside [https://github.com/selfrefactor/useful-javascript-libraries/blob/master/src/\_modules/getScore.js](https://github.com/selfrefactor/useful-javascript-libraries/blob/master/src/_modules/getScore.js) you will see how the score of each link is calculated. The priority is placed on lack of opened issues. So the order is not random, rather than based on the weight of each score feature. It is not perfect, but it could be easily improved by changing these weights.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [selfrefactor/useful-javascript-libraries/.../**getScore.js** (master → 9c39e86)](https://github.com/selfrefactor/useful-javascript-libraries/blob/9c39e860d47ee44b6c52ba602ffebdbe5208c8ed/src/_modules/getScore.js) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e9veokp.)
Calling a product worthless is not criticizing it? Hmm...
He didn’t call the product worthless.
Okay, I'm not alone. Because I was confused where actually I might did it :D
Not until you release some paid DLCs, buddy
Thank you for your feedback! We'll fix all grammar errors as soon as possible. &amp;#x200B; If you'll have any questions, feel free to ask me via embedded messenger in our Dashboard or Landing page, or via reddit :)
I felt silly even mentioning it. But I think it’s important. I also work in this area, and after delivering complex features our users always point out the small little problems that seem insignificant. Great job on the product, it looks really cool.
Okay. Sounds interesting! Wish you best of luck and success on your path :)
So what it's actually showing are projects that are: - new (or at least recently updated) - not very widely used, and hence have few people actually raising issues with the project - entertaining or interesting enough that people are willing to star it, even without necessarily using it. None of these metrics at all measure "usefulness", which is theoretically what this project is about. That would explain why there's currently two meme-related projects near the top of the page - they've been recently updated, they are entertaining, and so useless that no-one would ever need to raise an issue with them. Intriguingly, one of the projects in the top twenty or so items is marked as being deprecated. Even leaving that aside, and assuming the metric could be significantly improved, I'm struggling to see the use case for this. If I genuinely have a need, I'm not going to look here, because I can Google much more efficiently. If I'm bored and looking for new ideas, I could potentially use this, but the signal to noise ratio seems pretty poor at the moment. Most of these projects are only applicable to particular frameworks, tools, or libraries, with some just being applications with specific use-cases.
I really like the design, especially of the electron version!. Good job!
What's the point of having the [preview images](https://imgur.com/a/fqsXfrO) be slightly off screen? If you're trying to show me your product, then don't hide parts off it... 
I wouldn't say it's the wrong solution Some people probably feel like it's too much work to do it and giving them something like this encourages them to do it and get into the habit 
toggl.com?
Made this during my free time at work: (unused-css)\[[https://axesve.github.io/unused-css/](https://axesve.github.io/unused-css/)\] &amp;#x200B; It's very simple and only really supports HTML and CSS, if you'd like to contribute with some new features then go ahead (here)\[[https://github.com/axesve/unused-css](https://github.com/axesve/unused-css)\]
A series of form controls to exercise custom elements: [Form controls with custom elements](https://codepen.io/collection/nWjLRr/)
Like a toggl but more feature-packed for it specialists. And can seamlessly integrate to your business processes! 
&gt;Where are the videos from? In the first version of the service we show lessons from YouTube.
Does it integrate with TFS ?
Yes, opened website - tons of features. 
Yarn does that. See generate disclaimer.