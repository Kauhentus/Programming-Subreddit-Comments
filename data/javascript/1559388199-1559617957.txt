Interesting. Great to hear from someone with tons of experience though. Its just that I see people saying Chrome has some features that FF does not, but also vice versa. So I guess like i said, in the end each has their own strength
Everyone is missing the point. I like having 1 browser that does it all - personal and developing.
Not OP, but in Firefox you can display all the cells of the grid with a nice overlay. It's great when you need to see how big your grid needs to be
Good point. Thank you. Yea I heard lately Mozilla has been working hard on Firefox. The quantum has a lot of praise
Not yet I think. Soon. However yesterday on twitch I saw like 20 ads
I thought it was Chrome that does this?
Interesting. Many say Chrome has the best dev tools, although FF is not bad by any means.
CryLess? At any rate, its a personal decision, and unworthy of a post or any discussion.
Chrome has been doing that for at least a year too.
When you understand it now, was there something obvious missing in the README?
What variable? What is your async function? Keep in mind that async functions will always return promises. So any return value you return out of an `async` function will have to be obtained through that promise (using `then()` or `await` from inside another `async` function).
A while ago Firefox overhauled its native dev tools and they're pretty good now. There's not really any appreciable difference in terms of ability to develop and debug.
Simple answer and to the point. Thank you
This is the correct take. I've used Angular since 2.0, and more recently launched a large production site on 7 with SSR. I can say that it's pretty obvious most of the commenters on this thread have either read dated overviews of Angular or have never used it in a meaningful app or at a scale big enough to know what it's truly capable of. It's a really powerful framework with a steep learning curve but ultimately a tool for a job with it's own set of advantages and disadvantages. I will say that it's a lot easier to take advantage of it's power of you can get over the learning curve and have a good understanding of software design. Hierarchical DI is unbelievably powerful. The Angular 7 site is also really fast in production. That said, I now work with React full time. I can't say I've spent enough time with it to give a worthy review, but my first impression leaves me more of or less feeling the same. It's a tool for the job and has some great features of it's own.
For the last couple of years, I've been doing most of my development work in Chrome, using FF &amp; other browsers only for cross-browser testing after nearly finished my dev work. The reason for this, is because I find FF lacking in performance, in comparison with Chrome. If the Mozilla guys can make FF as performant as Chrome again, I'll move in an instant... Until then, I'll probably keep using Chrome...
Chrome is overall better and snappier, but FF is good enough. I have been using FF for a couple of years now without issues
https://screenfac.es Made this with a friend in a few hours. Basically every time you enter you see a picture that has been uploaded by someone who has visited the website before and you can upload yours.
I really want to like and use Firefox, and I do like it, and tried it and keep on trying every now and then. But the way it kills the battery on my MacBook is outstanding. I effectively get 1.5-2 hours less than when using chrome. I don’t like Google’s changes as well, but I still use it for developing. For personal reasons I use ungoogled chromium, you can check it on github, or just install it with brew. Straight to the point, both dev tools work fine.
I personally don't like it, but it has its uses, particularly in the enterprise world (which, of courst, it also means $$). The fact it tries to be a complete solution means that you don't have to constantly make decisions / keep up to date with latest library trends the (which router? what form validation? what ... aaargh) But as I actually _do_ like being in control of exactly what packages make up my app, I'd rather use React as a baseline and litHTML or Svelte or something else if I want to be more cutting
Both do it. Modern browsers are massively complex pieces of software, and with tab sandboxing, etc. they are heavy on RAM in particular. I've had single tabs use up 1GB no problem in Quantum, and the same in Chrome. When you've got memory to spare it's all free real estate and there's nothing wrong with using it. When there's less memory to share, both apps will deallocate it whenever they can. In my personal experience Quantum is a bit less performant than Chrome in general, but I've heard the opposite is true on Linux systems, so use whatever works best.
Firefox has FAR better performance
FF can't resize the columns in the network tab, which is insane... And a bug that's been open forever.
I didn't notice anyone linking or mentioning this yet, so just for reference: [https://www.mozilla.org/en-US/firefox/developer/](https://www.mozilla.org/en-US/firefox/developer/)
I tried to switch to firefox, but it became a bigger memory hog on my mac than chrome usually is. It's a shame because I love that FF let's me navigate through tabs during full screen mode.
I suspected something like that as there seems to be a correlation between publishing and downloads. But I didn't think of mirror counts but only of npm update.
No, they haven't. FF is king of Grid and Flexbox since their Nov 2018 release. This is my markup on Edge Chromium: &amp;#x200B; &amp;#x200B; This is the same website, with FF: &amp;#x200B; &amp;#x200B; Notice the "Grid" and "Flex" tags. Click on those and you'll get this: &amp;#x200B; And you can adjust the lines to see different sections and such. Especially useful when debugging multiple grids and flex boxes.
Yes
Have tried the FF lately? They focused on a release last year to greatly improve performance.
The only IE even remotely worth testing in is IE11, but even that is only if the website you're working on legitimately has a market for users stuck on IE. But I expect IE will die completely once the new Edge comes out based on Chromium and can be installed on Windows 7 and 8. After that, companies that insist on restricting their staff to Microsoft products will have no excuse.
Updated my obskure hexsorter project to sort arrays of colors; https://github.com/dagthomas/hexSorter Also updated all examples. If you want to check the output colors in the example, goto http://dagthom.as/ and click the logo.
Firefox have their own Dev browser which is much better than normal Firefox and I must say Chrome Dev tools too
They did? Guess I'll have to experiment a bit with that next week....
Libraries are real projects.
Is this react only?
It's a shame this has happened because Chrome has the best environment for __writing extensions__, the FF extension environment still needs a lot of work and its user experience for extension authors is way inferior than what Chrome has to offer. The FF environment for writing extensions isn't intuitive and generally sucks. This is an area FF could really improve on. It's been a year since I wrote an extension writing FF, so this might be a little out dated although i honestly doubt it.
You never google for development related stuff, and end up going to some site that'd have annoying ads without an ad blocker?
I'm really baffled by this. What? Are you suggesting that you're running production ads in your development build? If you need to mimic the behavior when mock them. If you need to check one last time, when build as prod locally before you ship. What are you on about?
No one has said they're not.
You don't get to mock out things like DFP and expect it to work the same. A lot of advertising development is figuring out why the ads decide not to play ball in the actual service.
[https://preact-beats.netlify.com/](https://preact-beats.netlify.com/) [https://github.com/carstenbehrens/preact-beats](https://github.com/carstenbehrens/preact-beats) A simple drum machine with some trap sounds preloaded. It aint much, but is honest work. And it took longer then I am willing to admit...
I use Brave for my enterprise web development.
[removed]
After I saw this Ionic demo pages, I decided to make a library to build phones on HTML. I used this Devices.css and build a really tiny library with JS and Webpack to create phone display on HTML Pages [https://github.com/omerimzali/phoneawesome](https://github.com/omerimzali/phoneawesome) And you can see it in action here: [http://programlama.xyz/phoneawesome/examples/](http://programlama.xyz/phoneawesome/examples/)
Just use React or Vue instead, they are the better option, I promise. Angular has done enough shit to the community to never be trusted again
Is firebug still a thing / better then FF dev tools?
I don't use an ad blocker. I've never had a problem with intrusive ads on dev related resource pages. The only problem I can recall is paywalls or signup walls, but I tend to ignore those sites. For general browsing, if there are ads everywhere or slide-ins I just click back and leave the site.
This 100%
Ideal would be an event-based solution. I don't think that's possible in this environment, so you could use a polling-based mechanism instead. const POLL_INTERVAL = 100 const getGroupsList = () =&gt; new Promise((resolve) =&gt; { const interval = setInterval(() =&gt; { chrome.storage.local.get('buttons', (datas) =&gt; { if (typeof(datas.buttons) !== 'undefined') { clearInterval(interval) resolve(datas.buttons) } }) }, POLL_INTERVAL) } Then you can do this: const groupsList = await getGroupsList()
you can wrap the localstorage function in a promise as you stated that "the data takes a while to be fetched". You can learn about promises in the following link: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise
On a related note, will chromium be crippled too or because it is open source we can expect it to work as previous? Thank you.
Yes, as a proof of concept is based on React at the moment. However, the core of the functionality is JavaScript, potentially used with any component-based framework. I'd love to extend the support for Vue at first, as it inherits a lot of principles from React.
I remember a few years back the Firefox dev tools in browser sucked. I had to use third party plugins like firebug to debug. Chrome's dev tools were much easier to use. Admittedly though, I was a brand new baby web dev. I probably just didn't know what I was doing. I've looked at Firefox's dev tools more recently and they're much better now in my opinion. I'd feel comfortable working in either browser.
It makes little difference to me as a React developer since the React Dev Tools extension is available on both. I do find that Chrome is better for debugging websockets which I also work with.
Thanks for the remind. I fixed it.
You know, one thing I always wondered is why everyone uses Chrome instead, but then MDN is this holy grail of web development docs? It's the only source for web docs that I've consistently heard about from every tutorial I've followed for the last year. I imagine that should have some significance, right?
i use firefox on desktop and my work computer, and i use duck duck go for all my searches now. no. firefox is not as good as chrome, full stop. but that's fine, because it's good enough to use as a daily driver, especially for us tech-first people who are following principles. and it's perfectly acceptable to use as a development machine. but chrome is much smoother, much less janky, much less crashy than firefox - when you're working with javascript, especially a lot of it, chrome can perform better. it's fine to be honest about this. it hurts firefox when you say "it's so fucking amazing" and then someone uses it and is underwhelmed. the tools in chrome are better - more of them, more feature rich, smoother, work better. but again, completely usable in firefox. the customizability of firefox blows chrome away.
Yes, that's possible. The JavaScript and Swift code can communicate each other if defined the command before. They can exchange data and call the function.
There is an ideological factor to this as well. Other commitments have rightfully indicated that differences are neglectable. BUT: it is getting thin when it comes to browsers not based on Chromium. Supporting Mozilla ensures a diverse progression of web standards and keeping many open source ideas alive.
Repetitive stress disorder in my fingers.
&gt; Safari is not bad In terms of like everyday general browsing, sure, but for development it's a hellscape that should be banished to the depths of hell along with all IE versions.
"kind of" being the key words there. Most of (if not all) the core team members are Facebook employees, so they are essentially funding React's development. It's an internal tool that they open sourced, simple as that.
That is simply irresponsible as a web dev. You have a responsibility to at least test your work on more than 50 of used browsers.
But Facebook is/was the one(s) who decided to invest in the project in the first place, and it looks like they are getting a good ROI. By open sourcing the project they've also significantly decreased the hiring/onboarding process.
I do work from home, but if a company network gets compromised enough by malicious ads and the higher ups find out they can save resources and prevent potential security issues, it might not be pihole, but some form of network security of that type is going to look very appealing since it can’t be done at the individual browser level anymore (for the most common, most testing-relevant browsers anyway).
I never recommended others test on IE, I only said what I test on. I often see if I can get my code running on IE6 and up as a personal challenge in robustness.
I highly doubt it. The average human operates on maximizing for ease. They will click the button that makes the pop up go away fastest, not consider the pop up’s meaning. They don’t read terms of service. People use chrome for its ease and speed. They found out they can get rid of speed sapping ads by clicking two buttons, once, to install a plugin, so they eventually started doing that. Changing a browser is a major ask.
Seriously, the one gripe I have is that I cannot work with Edge at work because we have IE. My guess is the new Edge will come out and we'll get to use it 1 or 2 years after release. Either way, the phase out of IE11 has been immensely slow for corporate due to lack of Active X support on current Edge.
Why are you quoting other people to me as if I made their statements? &gt; They do allow you to access services that might be better left private but they kind of just leave it up to you. And that is the problem. &gt; Fundamentally flawed dom interactions like what? I've never encountered a structure I could create with angular Certain table structures could not be componentized in Angular 1 due to how it handled intermediate dom changes. I searched for a long time for solutions only to find issues on the official Angular repository where the devs replied “sorry, it isn’t possible.” As a result, my complex table views were always clunky and unnecessarily repetitive, prone to error. &gt; I think you mean opinionated I don’t.
My company literally can't use Firefox as our platform b/c it doesn't support the SpeechRecognition API. https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition Chrome beats Firefox in early support for new Web APIs.
Except that they haven't
If you’re developing a website you should always use as many browsers as you can to test it. Running webpack dev server means you can have it auto refresh on save for multiple browsers at the same time.
Wait wait wait. We’re talking about web development here, not usage. I use Brave, but have prioritized optimizing for Chrome over Firefox. Firefox has a large enough user base and competitive enough dev tools that I think it’s worth switching and developing for Firefox first, Chrome second.
[https://imgur.com/gekvSVh](https://imgur.com/gekvSVh) Except that they have.
For fucks sake people. Brave is a viable option.
Hi /u/petershaburov, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/TheCodingBus, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
In my experience, chrome is a lot faster. I compared performance of some webgl and a custom tween engine. In every test chrome blew ff out of the water. I hate google though.
Hi /u/victorhooi, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/jatink99, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ParthPant4, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/texxxo, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/simkessy, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/evaluating-you, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Xelon1, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Octillerysnacker, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/exangelai, this post was removed. To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Lastly, instead of all the above, if you just want to showoff your project, feel free to post it to our weekly _"Showoff Saturday"_ post. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
What have they done to the community? First time I've heard something like this, genuinely curious.
I prefer Firefox's dev tools. Might just be familiarity, though. I generally develop in Firefox and use Chrome for personal browsing. I like to keep them separated like that.
After learning HTML and CSS, I decided to finally dive into JS last weekend. I have a pluralsight account and I started with one of the basic videos. In that video that covered the basics, there was also a blackjack game that was being developed using the skills learned from each section. Throughout the video I had been taking notes and coding my own blackjack game in my editor. Then the last section of the video came and the presenter had made changes and cleaned up his code outside of the video. I was completely lost and frustrated at the same time. To that point, I thought I had a decent handle on what was going on with the code - that feeling was gone. &amp;#x200B; Long story short, being so new to this I'm still struggling with applying concepts to real-life projects. There's a lot to learn and I feel like there are multiple ways to approach things, but I will get there!
It can remotely desktop and mobile chrome/ff/safari I think. For cordova specifically they have a guide: https://developer.mozilla.org/en-US/docs/Tools/WebIDE/Working_with_Cordova_apps_in_WebIDE
Have you looked into generators? I believe it could accomplish what you’re trying to do.
I find that the devtools on Chrome are better than on Firefox. For example, FF's network tab doesn't have a column for how long a request took. I'm using Brave now, and Brendan Eich said they're going to backport the features that Google deprecated. Not that you really need a separate ad blocker on Brave, but they give you the option.
I develop with multiple browsers. Why not use both?
Can confirm having just switched back to FF after many years. The debugger covers my day to day tasks perfectly and have yet to find a missing feature, plus it's almost identical in terms of layout so the switch is easy. I will keep various versions of chrome for testing but core usage will now be FF.
I think a big thing was abandonment of AngularJS (1.X). From what I’ve read it seemed like it was growing in popularity right at the time they decided to move on to Angular2+.
While big its not like they are so heavily invested in one either. Its an icon which they can replace. Their friends and family will tell them why...
Paid users?
Thanks. I had a version that used generators... async * [Symbol.asyncIterator](){ while(true) yield await this.currentPromise; } ... I took it out because it seemed like I was basically unwrapping and rewrapping the Promise unnecessarily. When I dug into it, the fact that next()'s value in the async iterable is actually the promise to return the iteration (instead of the iteration itself), this seemed like the most direct way to approach it. But if there's a cleaner way to do this by yielding, I'd definitely adopt it.
If the Firefox debugger would stop freezing the entire browser and not have phantom breakpoints, it’d make the switch from developing on Chrome a thing of the past for me. Still in 67, I fight the debugger. It’s closer than it’s ever been to being stable, but damn is it annoying with source mappings from a heavy webpack SPA still.
Look at Firefox Developers Edition, it has good and easy to access features for web dev
Apparently the APIs in question would be still available in Enterprise version of Chrome.
Hey prmsrswt, I hope you have a wonderful day.
I've switched to [Brave](https://brave.com/) and barely noticed a difference.
Have you guys tried brave? Great alternative, almost the same as chrome with native adblock and created by Brendan Eich
Last time I used Firefox devtools, I couldn't: - see messages being sent to or from WebSockets - couldn't resize columns in the network tab I'll stay with Chrome devtools for now.
I dropped chrome a month ago and Firefox has been great. I still check out builds in chrome and run lighthouse audits but my dev workflow is primarily FF now.
The question was about the Dev Tools. Sure, Chrome blocking blockers is shit, but it doesn't change how excellent the Dev Tools are
I'm dreaming that MS pushes hard to get users on Windows 7 to switch off IE to the new Edge. That would be amazing.
Is that a separate thing from quantum or is quantum the dev edition?
[https://github.com/fcostarodrigo/open-path](https://github.com/fcostarodrigo/open-path) &amp;#x200B; Added CLI to my library and I am using npm scope now :)
SocketIO?
Yup
Oh, there’s a lot better ways to make it pretty. Plus it didn’t ask me for a username which would have been useful. I used to host one like that on the local host of my school’s laptops
Well it’s supposed to ask you then put it in a cookie
That’s good.. must’ve just not loaded over mobile reddit
Well I’m on a phone right now just open it in a new tab
As someone who has always used Opera how screwed am I when I get past the beginner basics of JS? I guess i'll have to use FF.
It’s fun to talk about tbh
Chrome supports monitoring websockets. Firefox doesn't. Sucks if you're developing a Websockets heavy application.
&gt; Chrome has had a few niche features in the dev tools which are useful for debugging in some less common cases But Firefox seems to be interested in adding features, whereas Chrome seems interested in slowly removing them... Like for instance this issue I just ran into recently: https://groups.google.com/a/chromium.org/forum/#!topic/chromium-discuss/p4dZVybU96M
An API that isn't anything other than a draft standard, it isn't an actual web API yet.
The biggest problem is just how many lazy idiot devs treat Chrome as the web.
I use chrome at work and FF at home, I develop a lot on both, I can't really tell the difference
I agree, we're on the bleeding edge since this is a dealbreaker. It's still a dealbreaker.
+1 for FF Dev edition. I don't think you can go wrong with either. They have some slight differences, but you can customize with plug-ins if necessary.
FireFox dev tools has built in support for React and jQuery event handlers in its element inspector which is really nice to have. I also like how FireFox stacktraces place the icon of the library each line is from which makes them much easier to read.
The first sentence in your Readme is just super dense... It may be technically accurate, but each successive 'big word' (so to speak) makes the overall sentence harder and harder to parse. The second sentence is a little more to the point (maybe make it first?), and maybe the first sentence could be rewritten in a bit plainer English. It would be longer, sure, but more immediately understandable. To be clear **this project is awesome** 🙂 great work! I was just kicking back on a Friday, reading Reddit, and suddenly I found myself spending a long long time just trying to read a single sentence. I thought it was funny. Your video talk went a long way in helping me understand. Anyway, good luck!
It’s separate, just search for the developer edition and it comes with the quantum build with developer tools included
Fuck that, if you choose a technology that only one browser implemented because they wrote the draft you are just part of the problem. This is the same shit as IE and activeX but we act like it's a good thing to do. I hope that project burns.
Nope or at least not due to my fault, if I say I'll do something by a certain time I will. It boils my wee when someone doesn't do what they say they will and only time anything is delayed is because I have to wait on someone else that is being useless.
Love it. Thanks for sharing! I'm going to do something similar now!
Oh shit, I thought we were helping our clients maintain independence in their elder years and reduce hospital (re)admissions. Didn't realize I was the problem.
Care to provide some sources maybe? Last I checked Chrome still wins in most benchmarks, but doesn't handle memory well when there are multiple tabs open. [Here's a pretty recent benchmark](https://www.stevebtech.com/2019/04/22/browser-benchmark-chromium-based-edge-vs-edge-chrome-firefox/).
You misunderstood the term proprietary. Angular is open source and therefore by definition not proprietary. The same applies to vendor lock in: not possible, just fork it if need be or contract a different company for that. There is no standard for templating and none for js frameworks in general. The only framework that i know of that does standards is java ee btw.
They added a "Flexbox inspector" [https://gedd.ski/post/flexbox-inspector/](https://gedd.ski/post/flexbox-inspector/)
It would be helpful to retro during and after a project to see where these extra delays come from. It'll be helpful for you to see if you're under estimating, waiting on client input, etc. Then you can start building that into your estimates. I don't personally enjoy the overhead of many agile implementations, but the mindset of constantly reflecting and iterating on your process is valuable.
I'm a Firefox user so I don't care about defending Google, but that's definetely not what they did. They are limiting the amount of content blocking, not "disabling adblock". The limits are not small either, 30k for static rules and 5k for dynamic rules, and those limits are only a proposal, they are likely to be changed.
I don't like how we at once get all worried about Chrome breaking APIs when it affects our personal adblocker but the years of them doing just as much if not more than Microsoft in their heyday are ignored. Like now it's suddenly a problem, and not the entire time. You're a moron if you think the reason I dislike this is because someone had an idea first.
On my work computer what I do is use one for "personal" logins and the other for "work". I've found a few cross browser bugs on our platform that way.
Awesome thanks!
Again, what other tech should we not be using? Please, limit the scope of possibilities for us and our clients. You're a moron if you think we're not going to choose platforms based on existing features.
my last gig and my current gig were rewrites for aging ASP.net forms applications which manage a core service that we migrated to Angular. These application are massive they have thousands of components and modular features. Building them in angular using its built in routing/lazy loading/custom preload strategies, not having to worry about webpack and all of the base framework elements, built in shadow dom emulation, reactive forms and easy dependency injection all made it very easy to do. The same application in another framework would of taken my team years instead of a year.
A Copycat-type game in 70 lines of JS. The level maps are in separate file, and if you want to design a level I'm cool with accepting PRs. =) https://alaricus.github.io/copycat/ Since it's still a work in progress, it's completely broken on MacOS, because some of the Unicode characters are missing for some reason and others have varying widths unlike on Windows. So if you have a Mac, avoid for now.
FF supports web extensions the same as chrome since I think FF 57
[https://isbobbarkerstillalive.com/](https://isbobbarkerstillalive.com/) &amp;#x200B; Made a small site to check if [Bob Barker](https://en.wikipedia.org/wiki/Bob_Barker) is still alive. Mostly an excuse to try out [Svelte 3](https://svelte.dev/), which is an interesting "framework" that I'd recommend messing around with if you have some time.
[https://deck.of.cards](https://deck.of.cards) I created a new version of my Deck of Cards – this time with live multiplayer! 😎👍
I mostly use Chrome but I test and debug in FF too - [screenshot](https://imgur.com/a/aVwtT27)
I will definitely switch to FF and Brave should this ever be implemented in Chrome. And I've been using chrome most of the time as browser of choice for browsing (10+ years) and developing (senior web developer, doing it since 2012).
Doesn't that disappear after you stop hovering?
Yes, like most devtool things in Chrome.
lol so simple, I love it!
Ff had firebug which was far superior to chrome (and even more to the built in dev tools, but every one used firebug). Fb stagnated, chrome got past them. Ff (not exactly sure about this) kinda integrated firebug and started improving and are by now at an equal level again where both have pros and cons and it depends on personal preference IMO. I prefer the current ff tools though the chrome tools have a speed advantage.
AngularJS had already peaked and React was the new hotness by the time Angular was introduced. I don't think most AngularJS devs resent the rewrite (I have never net one who does, at least). I guess OP's is a general anti Google rant
Thank you! Will add more features and open source..! ;)
Thats just the handshake. Actually view websocket messages that are being passed. Chrome lets you see every individual Websocket message coming across within the debugger.
Using adBlock harms small creators, I used to have a site that was noticeably impacted negatively by adblocker
The new Opera browser (60.0+) is AMAZING.
Also, just added subgrid in Nightly.
Why use one browser? I switch between FF, Chrome, and even occasionally Safari in some circumstances. If one browser doesn’t have a feature I want (for browsing _or_ developing) it’s only takes about a second to boot another.
### Challenge: Implement various array methods using Array.prototype.reduce I first encountered higher-order functions in JavaScript and they were hard to wrap my head around. I understood how `map` and `filter` worked, but `reduce` was definitely the most puzzling. I finally realized how flexible `reduce` is when I started implementing a bunch of array methods by using `reduce` under the hood. I thought this might be a fun little challenge both for people trying to figure out `reduce`, as well as for people who already understand it well. If you accept the challenge, you'll be given a code editor conveniently filled with the skeletons of all the methods you'll be implementing and a set of tests that compare the output of your implementations with the output of the respective native implementations. If you get stuck somewhere, you can also check out my personal solutions. - [Try out the challenge for yourself](https://asha20.gitlab.io/reduce-exercise) - [Check out the source code](https://gitlab.com/Asha20/reduce-exercise) I'd love to hear your feedback, whether it's on the exercises themselves, the source code or something else!
How many years of experience do you have?
I kinda like the console look
Yeah I like the font to the detriment of everyone else lol
And shows the text content for plaintext frames, which is pretty handy. Doesn’t really show jack for binary though, which is too bad.
Well then it's not useful, bc whenever you want to change the css you have to find it in the tree again and hover. With Firefox it's a toggle
Just because it's different doesn't mean it's useless. Also when I refresh the page, the tree is re-expanded at the exact same position.
If you are working contract work for clients it’s tough, but ultimately the deadlines fall on you. If you aren’t meeting deadlines in a team/company environment, it’s partially on you but also on your manager to set you up for success. Based on your post I’m assuming you are doing contract work, and if that’s the case you just have to be more disciplined with your estimates and know what you are capable of.
I don't see why you shouldn't use the API if that is the best way to bring your product to life. The company may suck and be against the Open Web but a good product is still a good product. I still use Google search indexing for my websites because that's where I get most of my hits and Google analytics are a great free tool that gives you useful data about your website. Light room is another great tool that gives you info about how good or bad is your website when it comes to performance
It's not that it's useless bc it's different, it's useless because why have a feature specifically for messing around with CSS be so tedious to use?
Because it's not tedious to use? When you want to see the overlay, you hover it. You *don't* want huge rectangles and dashed lines all the time on the site, you only need it to inspect something for a short period of time. So you just hover, and then keep working on whatever you work. The comment I replied to said that Chrome didn't have a grid inspect at all, and I replied with a screenshot of it being available, but apparently this is a FireFox circlejerk club, so enjoy I guess.
I was kind of going to say the same thing, chrome might leave the limelight as a dev tool, but testing will continue on the program.
I find the extensions part hilarious because I always use the same three in both browsers. Even on Android I use FF or Kiwi with the same three extensions.
I use a lot of niche extensions, so there’s a big difference to me.
As long as I know I did my part within the team I have no problem meeting or missing them. I don't think I've ever flubbed the portion of my work (knock on wood) because I'm confident in my abilities and the scope of work has been evaluated before hand to determine how long a project or task would ideally take. If this isn't the case, one of the two is lacking.
I'm glad you got it sorted out! You're definitely on the right track. I just finished typing up some changes when I saw this comment and your working example is pretty much on point. Unfortunately, &lt;form&gt; submissions are a bit strange and don't work quite like you'd expect so here's a version that uses a &lt;form&gt; element with some comments so you can compare. Let me know if you have any other questions! Good work &amp;#x200B; &lt;html&gt; &lt;!-- Added a body tag as the &lt;script&gt; element should be at the bottom of the &lt;body&gt; in this case (and most other cases.) --&gt; &lt;body&gt; &lt;form id="my-form"&gt; &lt;!-- With forms you can give each child element a 'name' attribute which allows you to call them directly from an eventListener --&gt; &lt;input type="text" id="user-id" name="userHeight" placeholder="Building Height" /&gt; &lt;!-- Changed &lt;button&gt; to &lt;input type="button"&gt; as it allows default form interaction (submit) --&gt; &lt;input type="submit" id="submit-btn" name="submit"&gt; &lt;/form&gt; &lt;script&gt; // Created an eventListener on the #my-form element as a whole. This allows you to control all &lt;input&gt; elements within that form via 'e.target.elements.[insert .elementNameAttribute here]' document.querySelector('#my-form').addEventListener('submit', function(e) { // Again, 'e' stands for 'event' here. e.preventDefault() // This prevents the form from 'submitting' by default and allows you to process the inputs as you see fit. // This can now skip const height = e.target.elements.userHeight.value; // The following was not changed. console.log(height); const storySize = 2.7; storyCount = height / storySize console.log("The height of the building is " + height + "m") console.log("The building has " + Math.trunc(storyCount) + " stories") console.log("the height of each story is " + storySize + "m") // This clears the text in #user-height after all calculations are finished. e.target.elements.userHeight.value = '' }) &lt;/script&gt; &lt;/body&gt; &lt;/body&gt; &lt;/html&gt;
Sounds like you're not estimating enough time. Do you use project management tools that allow you to see which tasks/tickets are being completed late? It's really useful for estimating project timing. Using a gant chart would also probably help you visualize where the delays are at as well.
I use FF to browse and Chrome to develop.
Lmao at light years ahead
Bannin extensions because of business practices and banning extensions because of personal beliefs is not the same thing.
Thats the only ad blocker you can trust nowadays
Without having to click the link, what does it do?
In terms of Dev Tools, Chrome, FF, and Safari are all fine for most use cases. Chrome has a major advantage in terms of Browser APIs, AMP, and PWA type features since Google just cranks out the Web Standards proposals like crazy.
Found the Indian
&gt; You don't want huge rectangles and dashed lines all the time on the site, you only need it to inspect something for a short period of time. I suppose you and I have different use cases for this feature, then. I *do* want those things, because the only time I'd use a visual grid feature is when the grid sizes aren't exactly what I want. I want to mess around with the column/row/gutter sizes until they look right, and to do that I want the grid to always be on. You and I just have different workflows I guess
Are there grid inspectors too?
2 yaers working with PHP, html css and a about a year ago I moved to full JS stack: node, express, mongo and react. Since then I've worked only as a freelancer.
If you want to keep benefiting from Chrome’s web tools (and React support) but don’t want to be infected by ads, trackers, and possibly malware: 1. Use Brave - same engine as Chrome, but with ad blocking baked in. 2. Use PiHole - blocks ads before they even reach your machine. 3. For best results, use both. It took some time to install PiHole, but it’s totally worth it. Can’t wait for the day it’d come built into a router (I’d have like to have it at the network level, but that will never happen with our greedy ISPs).
It depends on the hardness of the deadline. Some deadlines are merely a suggestion, while others are mission critical. If it’s a hard deadline what I do is break it down and prioritize the most important components of the project and deliver on those first. Then after the deadline you can continue adding the low priority stuff. When it comes to software on the web, there’s no reason why you can’t launch what you have and then finish up the details after launch.
I'll give you a summary. (above)
It is not a game engine but it is used for extending the use of physics engines for infinite worlds. It splits up a world into a grid with cell, columns and rows. Each cell contains a list of references to associative arrays. There is an array called gameObjects which is split up into arrays with ways to get a gameObject array with an arrayName. Each gameObject array is indexed by ids (first index is actually 1)
In personal experience across computers, 3D games get about 5fps on chrome, but max FPS on firefox. Also, re-rendering 'paint' is far more effective on firefox.
How did you handle background audio on the iOS?
Either you need to get better at estimating how long tasks will take you (comes with time and experience), or you need to have retrospectives to figure out why you didn't hit your deadlines and what could be done to do better next time. As long as your client isn't upset I wouldn't worry too much, it gets better.
Firefox has a fucked culture. They fired Brendan Eich for the love of all things sacred.
 [https://www.blackwright.com/late](https://www.blackwright.com/late) [https://github.com/blackwright/late](https://github.com/blackwright/late) A collection of visuals that animate in response to streaming audio. Built with React, web audio API, three.js, canvas, react-spring, and a lot of late nights listening to lofi. Click the arrows to switch between visuals. Learned a lot working on this project - haven't gotten everything I wanted done and drawing with raw canvas is a huge pita, but still pretty happy with it so far.
You should test against the &gt;1% market share on the product. This means IPad/IPhone /IE/FF/Chrome/Safari Minimum. When you develop you develop for one I prefere FF since it’s harder on certificate issues. I prefere to test in IE because I know it’s the worst. I prefere cypress.io/electron for my integration suite. I prefere iphone/iPad in both landscape and portrait since a big market share is devices. And if I’m doing anything for India or China I cry as they got a both UC and another weird Chinese browser. After awhile it becomes a freakish hell to keep all tested so I run a e2e suite with browserstack /selenium on as many devices I can. Because I don’t know how many times I have seen. But it worked on my machine from the dev team.
There really just three inputs that go into finishing a project on time: 1. The client telling you, clearly and completely, what they need/want. 2. Your execution of the project. 3. Your estimate of the time it will take to complete the project. Most likely, none of these things are optimal. You’re going to struggle with each of them to some degree. I would say, try to figure out which one is truly the bottleneck, and go from there. For me, I always struggle with being a perfectionist. At a certain point, I just have to be more comfortable shipping crappy code for the sake of deadlines. That’s super difficult for me, but necessary. But if they plan to have more features down the road, make sure you know that up front, so you can at least prepare the way for those features.
ESLint is a linting tool, you provide it a configuration file and it says what's allowed or not allowed in your codebase. It's used to catch errors and to enforce consistent code between developers. `no-console` rule means you're not allowed to use `console` object in your code - https://eslint.org/docs/rules/no-console Look up `eslint-disable-line` if you need to use it for some reason, but I guess you can ignore it when you're developing, but make sure to remove it when you commit your code.
&gt;eslint-disable-line Thank you! Can I turn the damn thing off completely in my editor? It doesn't allow me to check how my code works in my browser console.
I switched this week after years of using chrome for dev work. So far it seems on par or better.
You gotta task track how long everything takes including meetings, training, testing, standing up servers, documentation, etc. If you are one man band then you gotta be a PM, BA, DEV, QA, and DevOps. Make sure you estimate those times too. It’s amazing how fast it adds up.
You can easily do a basic scrum on 2 hours a week or less. It depends on your team, if course.
I would advise against it. There are ways to do things but then there are slightly better way to do them. You would learn more by just googling the line, or going to es lint website
I honestly have never understood the dev hate for FF. I think it’s mostly just hipster devs obsessed with google. I prefer FF’s JSON viewer but don’t care for its CSS box model viewer though. It’s not a big deal though and I hardly notice it anymore. If you give it a try I’m sure you won’t notice the switch after a week.
What is this for??? Its not difficult. Get the div element, use a switch or if on the date and set the contents depending on the desired output.
Sort of sounds like a variation of the Traveling Salesman Problem: https://en.m.wikipedia.org/wiki/Travelling_salesman_problem
I support my family’s ID needs as the “computer guy” in the family. Only the young or former programmers seem even capable of such a switch, let alone really recognizing when they should. Not because they aren’t smart (doctors), but because it just doesn’t matter enough to them, and people like me can always come in and clean up the mess.
They're completely different tools. The only similarity is they're both commonly used with react. Mobx is a state management library that uses proxies to transparently observe object access and mutations. Immer is a utility library that uses proxies to observe object mutations to allow immutable transformations to be written in an imperative mutable style. On their own, neither tool replaces the other. At best you could say mobx is better than redux+immer, but even then there are trade offs (immutability makes certain problems much easier)
It’s obviously a homework assignment.
I wonder if TS could polyfill proxies if the proxy type is known at compile time
 let date=new Date(); let daycode=date.getDay(); let priceText=([2,3].indexOf(daycode))?'Midweek Special Ticks 15$':'Tickets 20$';
Yeah, dev edition has more fleshed out dev tools.
`var priceText = (dayCode==2||dayCode==3) ? 'tickets £15 tonight':'Tickets £20 tonight';` `document.getElementById('prices').innerText = priceText;` &amp;#x200B; or `document.querySelector('#prices').innerText = (dayCode==2||dayCode==3) ? 'tickets £15 tonight':'Tickets £20 tonight';`
All of the things on the website and StackOverflow are complete jibberish to me. Here's the list of things I know in javascript: Variables and data types Variable mutation and type coercion Basic operators Logical operators typeof operator Operator precendence &amp;#x200B; I have no Idea how the rules and all the stuff on the eslint work, because I haven't got there so far, and I can't get there because can't run a simple code because of the problem I've described.
&gt;Thank you in advance! Not really on topic here.. but have you tried [Atom.io](https://Atom.io)? I think brackets has been abandoned, though I could be wrong.
Proprietary: one that possesses, owns, or holds exclusive right to something My use of the term proprietary in my comments referred to the use of non-standard, domain-specific language structures injected into html templates, such as in this Angular code: &lt;body ng-controller="PhoneListController"&gt; &lt;ul&gt; &lt;li ng-repeat="phone in phones"&gt; &lt;span&gt;{{phone.name}}&lt;/span&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/body&gt; That’s Angular 1, but Angular 2’s templates has similar proprietary syntax. Things like React are standard JS function calls with optional syntax sugar on top.
Hope this would help https://eslint.org/docs/rules/
Not trying to make look Google like a saint, but in this particular case I hope every broswer adapts their stance. Many valuable sites have no other form of revenue then adds. That being said, other browser vendors don't live off adds, so they won't understand and only go for market share here.
I switched from Chromium based Brave back to Firefox as I couldn't configure browser specific proxies and was pleasantly suprised by the new design and sync especially opening tabs on other devices. It's easier to lock down and harden Firefox so that's my current preference
Are FF fanboys really this ignorant? I agree with you Lazar
Well. All of these should be added to a configuration file. &gt;This can be in the form of an .eslintrc.\* file or an eslintConfig field in a package.json Which is some thing in json format? I've heard of its something and I'm getting a hint of how this should work. But I don't get one simple thing. Why on earth there's no such thing in any beginners tutorial? Why this thing happen meanwhile in every single code-through all work just fine and it worked fine when I've just created the file and worked with it. I perfectly understand that in every single editor it'll work. What I don't understand is why the thing has broken and why there's no simple solution. All these questions just killing me.
Hey there. I've heard of it. But every tutorial/course/bootcmp goes with brackets and Visual studio. I don't mind using any editor, but the thing I'm describing here mindfucking me badly.
You do know you can use more than one browser in your life? Anyway, it's not that Chrome is superior for me. I just need to access remote devices running the chrome webview.
For me, what made me switch to Chrome from FF was that the console/tools were on a different thread from the page's JS.
Chrome's dev tools are superior to Firefox's. I can still use Firefox for every day use and Chrome for pure development purposes. Win-win.
This is only for Firefox OS. It's not the same
&gt; even here nobody uses IE and it's discouraged to use it. Like people care what you use at Microsoft.
I like the other reply better that uses indexOf from an array. Looks tidier, imho. Then again if inline if statement is a must, I'd rather use template literal and do it only on the 15/20 part of the string.
I think you use a bad example and then extrapolated that chrome is better because they implemented that. While it's a draft API that chrome made and isn't supported by any other browser. While you could use it, you are limited by using Chrome. And it could very well be that the API has huge changes if it get out of draft status.
I mean, all data anywhere, even your code here and the browser running it in is binary. Are you asking if converting it from binary is the appropriate action? Yes. Most API's deal with binary, so on the client it's a given to convert it. It's not a heavy process, especially when dealing with small text responses. You can use a simple simulation function if you want to test 'receiving' actual binary 'responses': `function fauxAPI() {` `let responses = ['Hello', 'Hi there', 'What us up?'];` `let str = responses[~~((Math.random()*responses.length))];` `return new TextEncoder().encode(str)` `}` `let message = new TextDecoder().decode(fauxAPI())`
Remember that people plan optimistically. When i started, i planned twice as much time as i thought. No joke. Now that i have more experience, my planning is mostly on point
It does! That method never occurred to me. I almost always prefer template literals, I just assumed this was someone learning and figured I provide a couple.
Apparently Chrome just sends the Audio to some Webservice for recognition. You could just do that, record audio and send it somewhere (gcp?) for recognition and it will work in Firefox.
/s ?
Can firefox format JSON response from a request like Chrome? I hate looking at large responses in plain text in Firefox, as they can be pretty slow to load &amp; display all that text.
Your whole rant is based on AngularJS, but we are talking about Angular here. It is a completely different framework.
The biggest issue that i see is most tools are usually developed with chrome as the default. unit testing and e2e suites usually have chrome configured automatically, but with some tweaking you can usually get them all to run on firefox just fine. tools like angular / react component viewers are released for both browsers as plugins. I recommend switching to firefox.
Firefox it is. That's all I need to say. Howk
You should be ashamed to post your homework here for other people to solve. That's cheating and you shouldn't do it.
I wasn't saying mobx is better than immer. That comparison doesn't make sense as. I was just saying that as far as Proxy use case goes, Immer is simpler application of the ES6 Proxy. Mobx as a library allows it's user to manage state in an app, whereas Immer's only purpose is just to produce immutable copies while using the native mutation apis.
I use chrome but have been checking out dissenter which is afaik a fork that has built in ad blocking.
I get what you’re saying. The real problem you’re struggling with is not JavaScript *per se*, but rather a set of tools that JavaScript developers commonly use. JavaScript itself is easy to run in the browser. Just link it up to an html file and open the file in the URL address bar. But what you’re running into is ESLint. Which is a JavaScript program that is running inside the Node environment. Node is a JavaScript runtime environment. It runs JavaScript code just like the browser does, but it doesn’t have a user interface and doesn’t interact natively with HTML files. It just runs JavaScript. In fact, you can write your own JS file, and type in the command line `node PATH_TO_YOUR_FILE`, and it will execute your JS code. Most JavaScript developers use Node to manage their project folders. For example, the browser can only accept one JS file at a time, but sometimes you want to separate your code into multiple files. Well, there are JS programs that run inside Node that will gather all your JS files into and combine them into one file for you (this is called “bundling”), so you don’t have to do it manually. ESLint is just another program running in the background for you. It’s there to give you hints and warnings about potential problems with your code. And most professional developers use some like that. So ESLint is trying to tell you how to write your code. There is nothing wrong with logging things to your console, but you want to avoid it with production code, because you could leak sensitive info to the browser console. This error can be turned off by including an `.esljntrc` configuration file in the root folder of your project. ESLint always looks for these config files before proceeding when you save/compile your code. If the config file tells it to stop caring about the console object, then it will stop producing the error. Another method is to tell it to “warn” you instead of producing a full-blown “error,” although I wouldn’t recommend that.
I don’t know who Deadline is, I haven’t meet him yet.
One of the huge and underrated things in Chrome that's not in Firefox is Remote Debugging. It allows you to get a live console to an Android phone over USB. There's no replacement other than Safari-to-Safari remote debugging.
That doesn't seem like a very valid source. Most benchmarks that contain WebGL testing (even Oort Online GL which is specific to WebGL) are also won by Chrome, so your results on 3D games or "paint" might be completely dependent on the context you were running them on (if you ran games in a Chrome installation with 500 extensions and 20 tabs open you can't really complain about a bad result). Anyway, I'm sure you had a bad experience with Chrome, but you really should have some proof when you go around yelling "Firefox has FAR better performance".
You can use something like [`atob`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/atob) and [`btoa`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/btoa) to _hide_ the true strings in the source code. This will not prevent anyone from reading them, but it will require a tiny bit more effort.
Thanks
I tend to use Chrome for dev because it's handy to be using a browser different to your daily driver. The dev tools are also snappier in Chrome, but their performance in FF seems to have improved a lot recently, so perhaps this is no longer a concern.
...of which they do not hold `exclusive right`s to since it's MIT licensed.
Build a browser plugin that makes it so you can't buy any product you see advertised online as a form of protest :)
Start using Brave browser. It is much faster and has an adblocker built-in plus it has other privacy related features. It is basically Chrome on steroids.
A good rule of thumb is to multiply your work estimate by 2. If you need to cut back, that's fine, but I like to under promise and over deliver.
Agree. FF is superior in terms of CSS "debugging." With JS though you still find yourself in a better situation with Chrome, as much as I hate to say that.
This not homework or an assignment, this is a past paper question for computer science in which we have never learnt any javascript code. I am just looking for some help for an upcoming exam.
it isn’t, this is a past past paper question from last year and i have a test very soon on monday for computer science,
Hi /u/steniowagner, this post was removed. PLEASE DO NOT USE ALL CAPS IN YOUR TITLE.
Hi /u/machado_r, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
This is my approach also. Has worked a treat many times. Anything delivered after the core features becomes icing on the cake.
Hi /u/potatodestroyer9000, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Yes apparently for paid users, adblock will still work
u/Satrack why do you name your classes like that? Do they actually mean anything or is it just random? Either way it’s strangely interesting :)
What is the difference between this and specifying the @babel/register package as your JS compiler for mocha?
Styled-components does auto class name.
Okay thanks
Web Dev here - Firefox and Chrome's tooling are pretty much on par for me...I use FF daily, and chrome just for additional testing. It feels good supporting a non-profit, and a browser that actually respects web standards.
Chrome supporting API's (and developers marrying themselves to them) before they are standard/to spec is exactly what Internet Explorer did when every website had a "Works best in IE" banner. No thanks.
What should the developers have done, not shipped products?
They should have not married their product to non-standard APIs...remember activeX?
No. I'm 24 y/o.
&gt; we're on the bleeding edge That doesn't sound stable tho...
Dev tools are almost entirely personal preference. For some specific niches one may win over the other, but they all have most of the features you'll use daily. My recommendation: use Opera. Built on Chromium, but there's good built-in adblocking rather than entirely extension-based. It can install all extensions that Chrome can, and the experience is generally just better - feels nicer, mouse gestures are awesome, sidebar is cool and useful, built-in VPN is nice, My Flow is cool (even though I don't use it very often), the list goes on (Ctrl-Space to bring up either tab search or inline web search!).
Agree. Thank you
&gt;That doesn't sound stable tho... You're right, let's pack it up. Why try to make something new if it's not going to work every time?
I think the point of Preact is just a have a lightweight version of React. Migrating from React to Preact is supposed to be easy (although I haven't done it so I can't say from experience). I do agree with you though about Svelte, I'm very impressed by it so far. Moreso with the developer experience than performance. I'm really hoping it catches on and the community grows.
So have we (Microsoft).
Brave has the best adblocking and anti tracking features. I use it for development and never had a problem...
I'm not arguing that it's right for a corporate network, but Pihole doesn't *only* run on RPis. The [list of supported operating systems](https://docs.pi-hole.net/main/prerequesites/#supported-operating-systems) has something for just about everyone and it can also be run in a Docker container.
Cool, I've been thinking about doing JS DSP. (I used to hand-tune SSE ASM code for DSP via SynthMaker.) Tried comparing JS vs WASM for DSP yet?
How is braves built in ad blocking vs unlock origin which will cease to work.
Hi I'm a user who does not trust you to run a third party's scripts on my machine. My rights to my machine trump yours. Consider serving static content like text and images from your own domain and asking users to unblock you.
Also, cloud-serverless hosting can be billed by the millisecond. EG CloudFlare's lowest tier is 5ms cap.
Because it's does not use the extension manifest and API (the party Google is changing in Chrome). Instead, it has an blocking in it's lower code.
Did you mean lighthouse?
Obviously yes. I don't know what it's called I just use it when I click it in Chrome lmao.
I don't understand how is ad blocking not as bad as pirating? You're not entitled to free stuff. People need to be paid for the work they do.
Right, my comment is about that support.
This is dumb. Sorry, but you need to use Chrome, Firefox, Edge, Safari and use what works for you and your users / customers. Just like frameworks, nothing is the best in all scenarios. It’s down right foolish to only use one browser and even more insane to let reddit pick it for you.
Create a subreddit.
There is r/chrome_extensions but not sure about a general one or any other browser specific ones. IIRC, they're just markup and js so it would probably be fine to talk about them here
Another benefit to PWAs is that you can mostly stick to hiring web devs. In corridors where experienced mobile devs are in short supply, that can be a godsend. (This is assuming that you're allergic to building remote teams... like most companies seem to be)
You seem to think none of that occurred to me, the site is dead now with no aims to bring it back
Thank you!
I've preferred chrome for script debugging and FF for style work for a while now. I'd like to go full firefox though
Be careful of Mozilla Firefox developer versions: "Mozilla’s pre-release versions of Firefox (which are distributed through channels such as Nightly, Beta, Developer Edition and TestFlight) are development platforms frequently updated with experimental features and studies. In addition to the data collection described in this Privacy Notice, these versions by default may send certain types of web activity and crash data to Mozilla and in some cases to our partners." https://www.mozilla.org/en-US/privacy/firefox/
Firefox dev versions have telemetry activated by default. I don't believe it is possible to turn that off. "Mozilla’s pre-release versions of Firefox (which are distributed through channels such as Nightly, Beta, Developer Edition and TestFlight) are development platforms frequently updated with experimental features and studies. In addition to the data collection described in this Privacy Notice, these versions by default may send certain types of web activity and crash data to Mozilla and in some cases to our partners." https://www.mozilla.org/en-US/privacy/firefox/
As long as ads are annoying they should be blocked. Remember popups?
You could use Heroku for hosting, they're free and they can scale. Or you can look up free JavaScript hosting, which might be what you did.
Disclaimer: I don't write Python. JavaScript is functional. Passing callbacks and event handlers are fun. Except it's high memory usage and undefined behaviour while mixing different types in an expression, everything else really makes sense IMO.
I feel the same way. I prefer Java. For some reason, I feel python is pickier than Java, and with java, setting up methods just seem so much neater and easier to follow along as opposed to pythons functions, pythons functions made me scratch my head quite a few times when it turned out my logical error was from not indenting the return command correctly.
To anyone who wants to understand JS a little better, I can't recommend this (free online) book series enough. https://github.com/getify/You-Dont-Know-JS
I would tend to agree that JS handles it's objects a lot nicer (even though it isnt fully oop) than Python but Python's syntax is more readable. Then again, curly bracket notation is much more universal.
Wait Java or Javascript?
Oh whoops haha I meant javascript. Idk why I read Java.
So you can't figure out the indentation?
What I was saying was the functions indentations in python can get more confusing in python because of how there aren’t any brackets or anything like that declaring where the function starts and ends.
Thx, I'll check it out.
Invisible syntax is just fucking insane.
Yeah, but that's barely the basics of the language
...your point being...?
Project Page (?): https://github.com/davidcetinkaya/embla-carousel *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Your analysis of the language is extremely shallow
The point being that if you do write 'clean code' in js, you should not have any problems with indentation in Python
Congrats, you just helped someone wrote malicious code.
Chaining JS built-in helper methods is really fun, but so is writing list comprehensions and lambda functions.
That's cool as fuck, thanks for sharing
r/learnjavascript
***A kyle Simpson fan triggerd*** You mean it's not fully cop(class oriented programming) , coz it's fully fledged oop.
That's a bit entitled. If you don't like like annoying ads don't visit the site maybs
I use both at work. I much prefer Javascript in its modern iteration. I find large python code bases to be tough to navigate, and the language itself I find quirky for no real benefit.
TIL
I think the Asynchronous nature is the key. Its quite similar to how our brain functions, one thing at a time. Which also reduces the cognitive stress, thus more natural.
python also has first class functions and closures btw. Less elegant than JS’s implementation though in my opinion
You mad bro
Would you rather I not visit the site or block the annoying, intrusive ads and actually consume the content of the site? I have no issue whitelisting websites that deserve money, I'm just not willing to let that compromise my experience on the website into something frustrating.
"Everyone" doesn't think ANY language is beautiful, clean or "makes the most sense". If it ever seems like they do, it's usually a mix of a temporary fad and your (and my and everybody's) tendency to confuse our limited, biased lens on the world as a good representation of it as a whole. Simple things like following the few major reddit programming subs as a major portion of your news and social diet can really skew the kinds of people and ideas you'll see compared to the general population. It's also important to remember that typically the people who reflect on the use/quality of tools are the people who have used them. Which means if different language communities tend to have very different kinds of members, then they might be judged based on very different criteria. If Python is made up of more mathematicians and hobbyists and Rust is made up of self-identified "systems programmers", then those languages are going to be critiqued in very different ways, tested in very different ways and judged against very different standards. At least historically, JavaScript is a language that you tend to get into if you actually want to program while Python is a lot easier to get into accidentally. Personally, when I learned Python I couldn't get past how ugly it felt. Some languages you feel a sort of guiding principle and it all feels like it was designed together as one. Python never felt that way to me. JavaScript feels cohesive in that way to me but since it's so multiparadigm it's easy for a non-disciplined or non-expert programmer to write some really ugly and horrid code. But if you learn it and are disciplined in how you write it, you can write some of the most beautiful code out there IMO. But it's all relative. Neither is good at everything. Neither is probably the prettiest and what the prettiest would be may depend a lot on what you're making.
Writing lambdas in Js is more fun as it's less verbose syntax (fat arrow), supports compositional pipelining (chaining), and the higher order functions weren't demoted to a module to discourage their use. Can't say I never miss list comprehensions though :(
The fact that they are so incompatible is part of the problems I mentioned, yes.
Amen!
I hate the stupid indentation in Python. It's just plain stupid.
They possess it, and maintain directional control. What single word would you prefer to mean “custom, non-standard domain-specific language injected into an otherwise standard language”? Just use that word there and you will know what I’m talking about.
What in the... I didn’t write that.
Why would I care if you "consume content" if I have no other form of revenue then adds? If the site's author put the annoying, instrusive adds in there, then clearly they wanted them there, most likely because intrusive adds paid the best, or noone else was interested. &amp;#x200B; Mind you, not every hosting has no-limits transfer. In that sense ad-blocking is even worse then piracy, because you might actually be causing direct loss.
I totally agree. I use JavaScript in my day job, but I've done crash courses and mini projects (just out of curiosity and so I can read the code) for python, C, C++, lisp, rust, powershell, and visual basic, and my least favourite is python. (although powershell and VB are close) I appreciate that python can do much more, but the syntax just doesn't do it for me. And I found it actually one of the hardest for me to learn after js because of the stark difference in visual structure.
If they want my ad revenue they should use reasonable ads. Plain and simple.
https://courses.cs.washington.edu/courses/cse154/17au/styleguide/js/spacing-indentation-js.html I think that you have to indent lines in js anyway, or do you not do that?
Map and filter feel less weird than list comprehension IMHO
The whole tabs versus space crap. I indent but everyone knows Python is so picky. At the end of the day my code will work if I don't indent in JS. The link you provided is a coding standard that differ from one company to the next. That isn't built into the language. Please don't begin to post lint rules because all of that is suggestions. If I want to write any function or conditional statement I don't have to worry about if my spacing is correct.
My point was that everyone indents code blocks, basically because of better readability. And python uses that thing as a feature. What is the problem in that? Also if you use have used tabs in the entire script, why go for space in a particular line?
Ya I actually don't really like list comprehensions, rather I like lazy generators (most often used in list comprehensions). Though I guess we'll have generators in JS soon enough.
We have generators in js
Honestly - I fucking hate Python. I tried to like it, I really did, but besides a few pretty cool features - it just sucks as a development language...
If you don't want their ads you shouldn't "consume their content". You have got backwards
Generator expressions or just generator functions? Do you have an example?
Yes, sorry, we have generator functions. We need sometime akin to generator expressions. But for example the itertools is already implemented in a npm library. We just need a std lib for common generators/iterators and move to that.
I fundamentally disagree with you. You're wrong from my perspective..have a good life.
Lol. And I disagree that stealing is considered wrong. Just have a good life.
Computers only need 1's and 0's. All those computer languages? They're not for computers. They're for people. Why so many computer languages? Because of the wonderful diversity of humans, of our minds, of how we think, of how we process information. If we were all the same, there'd only be one programming languages.
Love for comprehensions I can understand, but lambda's have far superior support in modern JS. The syntax is lengthy, which defeats the purpose, and they are limited to a single expression, which is, well, limiting. &amp;#x200B; In fact, I can't really think of language that supports lamdbas, but does worse job then Python at it.
If the basics don't work for you, the rest of the language sure isn't going to.
Personally I do miss the closing bracket `}` or `end` at bottom of the block. They seem to make "parsing" code structure with my brain easier. &amp;#x200B; Python's way is fine, but I feel like you absolutely have to put a lint rule that prevents more then one indentation level in a function. And trying to convince anyone in Python community that their beautiful language needs linter at all - well, good luck with that. &amp;#x200B; I do understand that it's probably because I'm used to visible end of blocks, but I have every right to be when vast majority of languages uses them.
So it's OK for you to steal transfer that the site's owner pays for, because they annoyed you? &amp;#x200B; Right.
How do you even minified Python since it DEPENDS on spaces, that I could never understand.
Why would you minify python?
The part where your code is out there doing stuff for people in under five minutes is unbeatable. Python is for the command line, JS is for the web.
As someone who runs countless websites and does this shit for a living, if your ads are driving away users or pushing them to block said ads, then it's on me to fix them to make the site more usable. I would never blame my users for blocking my shitty ads. Now if the website has reasonable ads, then I 100% agree with disabling adblockers. Y'all are braindead motherfuckers out here.
Machine consistent or musically consistent BPM?
Big plus is that you can't send push notifications to iOS, so you can avoid having users with lots of money to spend.
 Show me examples Progressive web apps are currently being adapted in the industry. Some great examples are: (nothing) For a more comprehensive list you can check here. (nothing) The truth about PWAs appears to be that there are no good examples. It’s a solution looking for a problem.
Same reason you minified JavaScript ?
Client doesn't need to load python....
I exactly do that in the last revision: [https://github.com/piecioshka/test-mocha-babel/commit/2b138c2ed51438c16a66553b0293d0126096f067](https://github.com/piecioshka/test-mocha-babel/commit/2b138c2ed51438c16a66553b0293d0126096f067) &amp;#x200B; That repo is a showcase of how to setup Mocha with Babel
For developing you can use whatever you like. But when you are close to release, you should test and develop on platforms that your users use. So you should be familiar with all platforms
Definitely saving this link. Thanks!
Well you would never need or want to minify python. But, technically, you could put it all in a string in an exec() command, with \\n for newline and \\t for tab. `exec(‘for foo in range(1,10):\n\t print(“bar”) \n\t print(“baz”)’)`
Yep! It's great!
What is specifically better in that regard? Could you elaborate?
I hate python because # space indentation come on how many languages use indentation as syntax, Pug? Sass? stylus? It's cool when you write small code, but when you write a big projects, the source file is really hard to read. # weird functional Just so weird, I remember when I tried to use map or filter, I don't remember, it returned a fucking shit to me, and pythoners told me, "we don't use those functions", we use list comprehensions. So the classical map and filter in tons of languages are just useless in python. # weird rounding ``` round(1.5, 0) =&gt; 2.0 round(1.25, 1) =&gt; 1.2 round(1.245, 2) =&gt; 1.25 round(1.45, 1) =&gt; 1.4 ``` Now they call this a feature for scientific computation. Good. # lots of trivial keywords like with, why would you need a keyword when you can use callback?
As a web dev, I feel the need to ask: what do those features mean?
It nevertheless doesn't have first class anonymous functions
 [https://www.youtube.com/watch?v=x6qe\_kVaBpg&amp;t=556s](https://www.youtube.com/watch?v=x6qe_kVaBpg&amp;t=556s)
 [https://www.youtube.com/watch?v=x6qe\_kVaBpg&amp;t=556s](https://www.youtube.com/watch?v=x6qe_kVaBpg&amp;t=556s)
Given that Splunk has a [full API](https://docs.splunk.com/Documentation/Splunk/7.2.6/RESTREF/RESTlist) to access data, why not go that route?
isn't javascript a language for browsers? I don't know it, but with python you can do everything.
Python shouldn't be throwing stones in a glass house when it comes to performance.
You know, the fiasco transition from ng 1 to 2.x I together with thousands of devs left the anguar train and found better options in react and vue
Why are you using both mysql and mongodb to store data? Why not just mysql?
Share the code with your fellow peers so we can review it for ya &lt;3
the predefined schema of mysql cause it's used to store users' data
If you make this post on a JS sub, chances are you'll get more people agreeing with you.
It's Not that hard, just load the page, go to debbuger, select the file, select the line, add a breakpoint by clicking on the line number (blue circle), then reload the page and you can step into or over with the arrows on the right side. That's it more or less. But I do agree with the other comment if you have a better way like and API you should use that.
I don‘t know why your post was downvoted, but you‘re right. Javascript gets client side executed (in the browser after the site got downloaded) and python code gets server side executed. The client does not download any python code when he visits the website.
Unfortunately there's a ton of big js files
Use of the API is restricted
What? it has both of those things.
But why are you using mysql to store one thing, and mongodb to store another, while you just as well can use either mysql or mongodb to store everything?
Just going to leave this here... https://app.pymedphys.com
It has lambda functions which while anonymous, must return an expression immediately, and so can't properly be said to be first-class, and since it can't have statements, can't maintain state that is required for a closure.
So... this gets re-posted about once a week or so. Each time with a different new account. You're always asked the same question about MySQL and Mongo, and you always ignore any comments suggesting that you should provide a _demo account_ so that people don't have to use their actual email address to register. And there's been really little to no development in the last weeks so... what's up?
It's not a problem. It's a new framework and was introduced 3 years ago or so. Completely irrelevant now.
Well you can, it's just not pretty, https://softwareengineering.stackexchange.com/a/252546/276137
It's vanilla. It should be fast enough ;D You could always wrap it in a function if you think it's to slow to type (if you think document.querySelector is repetitive :P). var sel = function (el) { return document.querySelector(el) } sel('button').addEvent...
Well if you are doing it from scratch and there a tons of files i do not evny you... On the other hand if you know what you want and where it is you can just set a breakpoint there, it could be a var name or a function etc.
Since 2009 you can execute JavaScript code outside the browser with Node.js. It's pretty big and you can do all sort of things with it.
You can do everything with JS too. Node is a JS runtime that you can use for server code or anywhere else. And actually you can’t do everything with python, because JavaScript is the only language that browsers know (besides plugins and WASM).
You could replace the original XHR constructor with your own, with something like this: let oldXHR = XMLHttpRequest; XMLHttpRequest = function(...args){ console.trace("XMLHttpRequest Created!"); let requestObj = oldXHR.apply(this, args); requestObj.addEventListener("load", ()=&gt;{ console.trace("Data arrived!"); }); return requestObj; } So every time a XHR object is created or data is received, you have the call stack trace at your disposal. With this, you could use u/ElevatedJS's answer to debug the code
Great answer, that really helped. Thank you very much :)
haha, TIL, thanks! Nevertheless, it's still not first-class support for state in the sense that these ad-hoc "statements" do not have the same variable-name semantics (same namespace, variables assigned to behave and are accessed in the same way as the standard way) as what you'd expect. Rather, the state is implemented as an ad-hoc key-reference store that is passed as the return value of expressions from function invocation to function invocation (using a monad pattern).
&lt;html&gt;&lt;head&gt; &lt;title&gt;Bisextile&lt;/title&gt; &lt;meta name=Created content="02/06/2019-11:00"&gt; &lt;meta name=Modified content="02/06/2019-12:01"&gt; &lt;meta name=keywords content="année,bisextile"&gt; &lt;meta name="author" content="Dr. JBD DIASOLUKA Nz L (CNOM:0866) - Ophtalmologiste"&gt; &lt;meta name="address" [content="diasfb@mail2world.com](mailto:content="diasfb@mail2world.com)"&gt; &lt;meta name="site" content="[http://diasmath.blogg.org](http://diasmath.blogg.org)"&gt; &amp;#x200B; &lt;style&gt;div{font-family:courier}&lt;/style&gt; &amp;#x200B; &lt;div class="cDiv"&gt;&lt;/div&gt; &amp;#x200B; &lt;script type="text/javascript"&gt; "use strict"; const board = document.querySelector(".cDiv"); &amp;#x200B; for(let k=0 ; k&lt;35 ; k++) { const a = Math.round(Math.random()\*2100); board.innerHTML+= \`${String(a).padStart(5,".")}\`+ \`/ 4 = \`+ \`${String(a/4).padEnd(7,".")}\`; &amp;#x200B; if(((!(a % 4)) &amp;&amp; (a % 100)) || (!(a%400))){ board.innerHTML+=" ===&gt; bisextile"; if(!(a%400)) board.innerHTML+=" \[ DIV 400 \]" } &amp;#x200B; if(!(a%100) &amp;&amp; (a%400)) board.innerHTML+=" { DIV 100 }" board.innerHTML+="&lt;br&gt;" } &lt;/script&gt;
You're getting downvoted because that isn't how libraries that use a virtual dom work. They don't rerender the whole tree when a single prop changes, they only rerender the component whose prop changed. It doesn't even rerender the subtree unless the child components props changed too, in which case they needed to be rerendered. Pure components aren't a pain at all if you simply ensure referential equality of equal props across renders, which standard best practices do anyway (eg returning the same state object from a reducer when nothing has changed, passing only the values you need as props, rather than container objects whole reference might change). You only need to write a shouldUpdate function in edge cases and even then deepEquals usually works. I don't have much of an opinion of Svelte and I'd like to try it and see how it works in practice; but I'm sceptical because the Svelte docs and your arguments seem to assume that no one ever thought of doing two way data binding, updating state by mutating global variables inside impure functions, and directly manipulating the dom before, when in fact we deliberately stopped doing all three for very good reasons.
They seem to be paid only unless Im missing a link somewhere on the git site
Because it’s 2019 and I’ve been using node in production since 2010. What you are saying hasn’t been true for a decade.
Well, I started with Python before moving on to JavaScript. I find Python easier to write but probably find more JS more fun. However, I find that which language I choose for a project depends on what the project is about than how much I like a language. If I need to do lots of data analysis and am not concerned about sharing the model on a web page, I'm more likely to choose Python. If I want to create an interactive graphical user interface, I'm more likely to choose JavaScript. In fact, I wrote a post yesterday about the [state of data analysis](https://www.reddit.com/r/javascript/comments/bvqy9l/the_state_of_data_analysis/) and how JavaScript and Python compare for data analysis.
Happens EXACTLY the same to me
Scroll down... The “Titles” section links to the Git repos where you can read the books for free.
There are paid paperback editions, but the books are all in the repo as .md files. you can read them all there. For example, open up the "up and going" folder on that link and then the first .md file, youll get the whole book with chapter links there. Same for all the others
Typescript
Same, wanted to like it and I just don't.
Twitter?
I agree with you when it comes to MY users, I'd do the same. But someone else has 100% right to put as many ads they wish/need to, and expect not to get stolen from.
ReasonML
Ah, gotcha thanks.
&gt;[Boolean.prototype.foo](https://Boolean.prototype.foo) = (str) =&gt; console.log(str) &gt; &gt;true.foo('bar') Doesn't get more object-oriented than that. Anything in JS is an object, even functions and any primitive value.
I'm a C++ developer and I've been using JS for the last year on a project. I hate python. Everything is a module you have to research, and the syntax is so annoying it almost feels like it's deliberately trying to be annoying to people who know more sophisticated languages
Reddit image gallery Input subreddit and see a photo gallery Another idea would be to enhance a friend's website with some interactive stuff like calculator,roulette etc
Most people are ignorant and give horrible advice like that.
\&gt; You're getting downvoted because that isn't how libraries that use a virtual dom work. They don't rerender the whole tree when a single prop changes, they only rerender the component whose prop changed. It doesn't even rerender the subtree unless the child components props changed too, in which case they needed to be rerendered. Your component holds a tree of virtual dom elements, and that's what's inefficient. That's exactly what I've said. And that's inefficient. Depending on complexity of app, it becomes difficult to manage that only the specific component would get rendered too, though. It's possible of course, however, that's terribly inefficient from productivity side of things. \&gt; Pure components aren't a pain at all if you simply ensure referential equality of equal props across renders, which standard best practices do anyway (eg returning the same state object from a reducer when nothing has changed, passing only the values you need as props, rather than container objects whole reference might change). You only need to write a shouldUpdate function in edge cases and even then deepEquals usually works. These are workarounds for leaking abstractions, which still fail to address the main issue, that entire virtual dom three of the component gets rerendered and when diffed. The whole concept that you have to think about this preventing leaks is faulty design. Which we learned to accept as necessity. \&gt; don't have much of an opinion of Svelte and I'd like to try it and see how it works in practice; It's much in keeping with flux top - down prop flow. The places where one uses two way data binding is generally the same places where people marry react component state with props anyway, which essentially is even messier than two way data binding. As for how changed values get rendered - FRP is not two way data binding.
This kind of posts are usual crap, but this isn't bad at all
Actually, from 2015-2016 I built a large portion of commercial systems at \_The Guardian\_, mostly focusing on client-side integration. So I have a fair bit of experience in this. As I recall, dev builds would generally call real DFP but request line items from a test account. There were a few reasons for doing this over using simulated dependencies in dev. One is that the surface area of DFP is extremely large and quite a difficult target for mocking; it is hairy, blends together two decades of APIs and has all manner of semi-documented functions, that any third party advert in the wild can end up invoking at any time. Another is that advertising code usually involves integrating with a wide variety of third party providers who don't have the time / expertise to either offer mocking libraries or comprehensive documentation for writing one's own. Another is purely practical: if it costs nothing to use the real DFP service with a test account, and you need to verify real-world integration, why not just call it in the dev build? It's conceptually simple and it gives you a lot more confidence as a developer that everything will fit together OK. As u/Caved says, the majority of ad engineering is trying to understand why a third party's shitty code is failing this time. It's a very very different development mindset to a lot of web work - personally not one I enjoyed. Making real DFP calls work in an automated browser test without making those tests flaky would have been hard, I grant you, but for better or worse The Guardian generally avoided e2e tests in favour of heavy unit testing, process isolation and pushing down mean-time-to-recovery (MTTR). It worked well enough and as far as I know is still the approach the commercial team takes.
Thanks. I'm glad this one changed your mind.
Same as Python really
The formatting is a trivial point compared to how scope works, the standard library and general syntax. But sure, people who can't accept significant white space won't get far.
Feel the same- constant research, very little that is logical.
Indeed, and that's why Facebook would care if people aren't using React: it would increase the cost of onboarding. So much so they have an incentive to make their library publicly useful - which even though it has costs of its own, at FB's scale are still worth it given the sheer number of programmers they employ.
I feel the opposite, I find python is "JS done right". All the little JS weirdnesses that we are so used used to simply disappear. `for in` to iterate _ANYTHING_ make total sense for example, no idiotic null / undefined, and a few others. Indentation and not having to close curly braces or use ; at the end of a line is also nice. List comprehensions are brilliant. If only it had adopted dot notation for objects .... ! On the other hand it has some weirdness of its own, async is way superior in JS, and despite npm's general crapness the whole packaging / versioning side of things is much more developed in JSland.
1. Yes, the URIs are meant to be representative of the server-side API which you can call programmatically. 2. You don't *need* to make any new endpoints but just add whatever already exists in your API or add what you deem to be necessary.
So you didnt understand the funtion parameters nor went to the documentation to undertand the second argument of the round is to indicate from wich decimal up you want to round...? And now complain it is weird, I actually like python much better than js, i was here trying to find good arguments for the js sid, but besides lots of complains your comment is the one that serves better as an example on how people decides the language based on simply personal preference... Yiu wanna kbow whats weird... Numver string concatenation in js... That is just pure shit... From python i hate the necessary proper indentation Yet I cant wait for brython to rise Wow, just wow...
&gt; And trying to convince anyone in Python community that their beautiful language needs linter at all - well, good luck with that. There is the very popular and widely used `pylint`, and others like `flake8` and `pep8` etc., where did you get that conclusion?
If you have problems with python indentation I would recommend pycharm, with the CE you can use PEP8 standards and it is very straight forward to write code in accordance with them. Also python has a great ecosystem of other linters and standardised approaches to code style.
Nodejs
Python high order functions like map are much more performant that the js like versions. Js is fine for looping. But all those .forEach or .map are very slow. Python have insane support for AI and big data areas. Unlike js, python is a scripting language built for the desktop, it have a much better c FFI than node. Python does also have async. Therefore, python is often calling c libraries for faster execution. Js is for the browser. If you want to use on the desktop is fine by me but i would not buy it. All js apps in the desktops are surprisingly slow and bolated with a full chromium. If using pure node, i must admit its fast but it's not made for the job. Debugging is painful in js. (Nobody is talking about ts, ts is another language and it's not discussed here). I can say the same foe mobile apps. Hell it's 2019, if u dont like java or swift give go (can be used in phones) or dart a try instead of writting it in a js webview because "i already know js lol fuck the native languages". Js is growing so fast and messy. Dont ever use fancy js features if targeting performance and the idea of a "One language to rule them all" is not personally my favourite. All that said, js shines in other areas. Choose the tech for each situation. Tldr; python for the desktop, js for the browser.
I think this user is still learning, let's not downvote bomb him friends!
If Java is more your forte, I’d suggest checking out TypeScript. It allows you to write roughly in Java syntax yet transpile to Javascript. It’s the same path I followed: I learned C and Java, yet couldn’t master Javascript without some training wheels from TypeScript. Even having learned through TypeScript, I can now write perfectly idiomatic JS as a result.
So what does a Svelte component do when you change the value of a component's props in a way that shouldn't cause the UI to change? Surely it either rerenders the dom (slower than vdom) or reevaluates the component's variables, without then rerendering the dom (comparable to vdom). &gt;FRP is not two way data binding This is my point, if Svelte updates are made via FRP and the fucked up mess of global state and impure functions in their docs and tutorial are really syntactic sugar for functional programming techniques then they should say that, because not doing so makes Svelte look amateur.
Have you thought about not visiting sites you don't trust instead of stealing from their owners?
It's important to point out that `Array.fill(n)` fills the array with the same instance of `n`. Mutating `a[0]` will result in `a[1..a.length-1]` being mutated.
Wait , is the book that bad?!
So smooth!
Post this in a Python sub as well 😅 so that Python also gets a chance to speak. I would like to see both sides of the argument/experience.
Specify the prop computation properly. I suppose you're referring to `shouldComponentUpdate` thingy in React which is a bad practice to use in general? Linux is written in C. A language which is f* up memory unsafe. There is nothing inheritantly wrong with global state. There is nothing inheritantly wrong with mutations. There are difficult concepts to handle, but if they are ensured to work, it doesn't matter. I'm not seeing an argument from your side.
I don't like the syntax of python. With JS I can just look at an if statement and understand what's happening, is conditions and methods.
It'll work if the beat is consistent. Like the bass, snare, or clap occurring every fraction of a second. So you'd create a song with sequencer software, set the mp3 in this, and look for a new combination of loops to sequence, maybe use audacity to record the results and remix the original song.
Twitter is a native app on my phone, but that's beside the point. The point is that this guy calls out a list of web apps as worthy examples for us to study and consider -- twice -- and they're both empty. &amp;#x200B; `Progressive web apps are currently being adapted in the industry. Some great examples are:` (nothing) `For a more comprehensive list you can check here.` (nothing) &amp;#x200B; This article is not a tutorial, and it is not an essay. It contains no useful or actionable content whatsoever. It's spam.
If you use some sort of code formatter (pep8 and now VS code suggests black) it is veeery hard to go wrong with identation, since when you had wrongly written something the formatter will then put it shraight to your face
The purpose of minifying Javascript is that you are often sending a Javascript file over a network (i.e. from a server to a browser) and minified files take up less bandwidth. Python code is not used for client-side code in web sites so the use case for minifying Python doesn't really exist. As a side note, if you are programming NodeJS applications where the Javascript code runs on the server, then you wouldn't bother minifying the Javscript.
Python and JavaScript look similar at first glance. They both use C-style syntax. They are both dynamically typed. They are both interpreted scripting languages. But many of these similarities are pretty superficial. At their heart JavaScript and Python are based on some very concepts. JavaScript was fashioned after Scheme, a Functional language, while Python is deeply skewed towards Object-Oriented Programming. JavaScript was designed to target the web as a platform, while Python was intended for scripts in the command line. Why do you like one better than the other? I would guess it has to do with one of those fundamental differences. Personally, the reason _I_ like JavaScript better is its functional roots. You can write either FP or OOP on either language, but it really is a pain to write FP in Python, and I _far_ prefer FP approaches. I also find a lot of Python's syntax to be cute for toy problems, but a huge pain when you scale it up to real applications, like list comprehensions or being whitespace delimited. Also JavaScript has the best documentation in the industry and Python's leaves a lot to be desired.
Ok, that makes sense, thanks for the info. I am not a webdeveloper and from what I had learned years ago, I thought Javascript would just be executed by the browser.
They’re both extremely useful languages. JS is great for general purpose IO bound server side and client side applications. Python is great for procedural and data science CPU bound apps. I can envision both being extremely successful as a two-language stack for years to come. I personally prefer the JS language because it is more functional programming friendly, but it can be easily abused and honestly not very beginner friendly because the ecosystem is so Wild West and having to sift through all the legacy baggage (although python 2.x is a mark on python as well).
Same
It'll get so many down votes lol
Granted most browsers support gzip compression; so minifying a file for the purpose of its size might be negligible. It does however have the benefit of removing redundant and unused code.
To explain why you are being downvoted: JavaScript gets minified because it has to get sent over an HTTP request to a client in the browser. It is therefore important to send as few characters as possible. Python, is not distributed or executed this way. Furthermore, minification is kind of a hack. Most languages are compiled. This means that they get converted from text to a binary executable. This works _way_ better than minification in most ways. If you needed to compress Python for some reason, you would not try to minify it (though you could as /u/mountainunicycler points out, newlines are just another character). Instead, you would compile Python using a library like Cython.
Infact as an operations engineer. If you start minifying code on systems I will personally find you and beat you with your keyboard. Half joking... Half not.
What do you mean by "do more"? Speaking generally, any language can do anything. But even if we look at practical capabilities, I'm not sure what Python could do that JS couldn't. Unlike say C++, Python is just as slow as JavaScript, if not slower, just as high-level, just as interpreted and dynamically typed.
Ha ha 😁😁 Smart move! You already know!
Ha ha 😁😁 Smart move! You already know!
I didn’t loom that up, repl.it is a full editor online
I must confess I found #6 to be super confusing. let user = {}, userDetails = {}; ({ name: user.name, surname: user.surname, ...userDetails } = rawUser); &amp;#x200B; I've never seen destructuring used that way, where the right side of the colon is "x.y" instead of just a valid variable name like below function killUser(user) { const {id: userId, name: userName, ...otherUserStuff } = user; console.log(`Killing user with id ${userId}`); } I guess I had a mental model of the right side of the colon (e.g "userId") being more of an alias instead of seeing it as an actual assignment of the value of "id" to some arbitrary variable that can be nested or not. Not sure I'll use the trick though, because I suspect my colleagues would be just as confused if they saw it.
For _4. Map the Array (without the Array.map)_ there's some subtle but important differences. Mainly, `Array.from` creates a dense array, even if you give it a sparse one to create the new one from. This means when running the map, given that map doesn't map over empty elements, because the new array is dense, it might get called more than just a `map` would. Additionally, as a result, the resulting array may also have more elements. [1, , 3].map(callback) // callback called x2, result has 2 elements (0, 2) Array.from([1, , 3], (callback)) // callback called x3, result has 3 elements (0, 1, 2) Additionally, the map function for `Array.from` is only called with 2 arguments, the source value at the index, and the index. The `array` argument given to normal map calls is not provided. This means if you have a function used with `map` that uses that argument, it may not work in `Array.from`'s version of map.
I don’t know if I would say JS makes “more sense” but I agree that I prefer coding with it. I would recommend Ruby if you want something that feels like a better version of both.
Sort of. Primitives are the only things that are _not_ objects. But if you do property lookup on a primitive JS will create a temporary wrapper object for it. In other words this: const num = 7; const str = num.toString(); Actually gets executed kind of like this: const num = 7; // &lt;-- not an object temp = new Number(num); // &lt;-- temp is an object const str = temp.toString(); Note that the temporary object is immediately thrown away after the property lookup is done, and doesn't get saved anywhere. I just created a "temp" variable for illustration purposes. This is the cause for one of JS's historical weird behaviors: const num = 7; num.foo = 'bar'; console.log(num.foo); // undefined In the admittedly weird code above, you are setting the "foo" property on a temporary wrapper object, and then looking up the "foo" property on a completely different temporary wrapper: const num = 7; new Number(num).foo = 'bar'; console.log(new Number(num).foo); Thankfully strict mode saves us here, and throws an error if you try to set a property on a primitive. 'use strict'; const num = 7; num.foo = 'bar'; // TypeError: Cannot create property 'foo' on number '7'
Indeed, obfuscating code is usually bad (unless you program in Perl :P)
Looks at line 188 in /decrypt/hash=OZWq6M9uD4 under the "sources" tab. It's putting the current order of the images in an array and sending that to the server to check if the order is correct, and then sending back a response with a message. You need to know the winning sequence to get the correct response.
Done, it's in the post.
Your comment look weird too, cuz for the sake of the GOD, I have never mentioned any parameters things. Let me make it clear # high order functions Functions like filter, map, reduce all behave same in languages like ruby, js, java, rust, pretty similar in c++, c#, you give it a collection, it output a collection, simple and beautiful, but in python, you give it a collection, it returns an iterator. I really don't understand the design. Maybe it is better than other languages, I don't know. # The rounding problem In fact this is not the problem of Python, but binary, so it occurs in almost all languages for floating number. But some pythoners say this mechanism are good for scientific purpose. This is the part I hate. # trivial keywords Tell me how many languages have a thing called 'context manager'. Who it is putting his personal preference continually? For your JS judgement, it is simply because JS is a weak type language, so there is implicit type conversion if necessary. Python is a strong type language, you can't do `1 + "a"`, because they are different types.
Yes, i know the feeling. It is quite outside of the box, but useful when splitting objects.
It certainly wasn't easy to transition in some cases. I was able to get a hybrid app with SSR working in about a sprint. There was some clunkiness with routing but all in all worked fine. Made decent progess on migrating the app and some changes to the project scope (removing a lot of old content and features) made it more efficient to do a ground up rewrite. Ultimately very happy with the result in prod now. That being said, I recently accepted a new job (wife and I bought a house in another state) where I will be working with React. So we'll see how that goes.
Why the use of SPOILER? I think what you're looking for is https://github.com/thlorenz/proxyquire
You can also do things like 7.toString() and /[0-9]{1,5}/.match(...) Which seems to suggest that primitives are *constructed* at runtime- which is why you can treat them like objects but only once. Does that sound plausible?
https://w3schools.com worked for me even though everyone hates it
I don't want to override. I want to merge the overridden file with original files method. I want to remove overrides
Check out FreeCodeCamp. Brad Traversy's YouTube channel is also really nice because he does a lot of videos where he codes a project from scratch.
I enjoyed this and enjoy reading JS articles like this. You should write more. You’re good at it.
I’m trying to think of a use case where something like ```const cityNames = Array.from(cities, ({ name}) =&gt; name);``` would ever be necessary or more optimal than just the map method. Or is it just a parlor trick essentially
I think they both have their strengths and weaknesses. I personally love Ruby for the similarity to both languages.
? You're saying the same thing in different words. It doesn't matter which file you call the "override". The point is you have file A (fileA.js) with method foo ("method"), then file B which imports/requires foo, and you want to replace the version of foo in A with a different version in file C (fileA-overrides.js) ... right? If not you need to clarify your problem. And still, what were you thinking with SPOILE?&gt;
Thanks, I get that. :)
I haven't said anything's the only way, I haven't even advocated for React or any other virtual dom library over your preferred solution. The reason disagreeing online is usually so infuriating is everyone keeps attributing opinions to each other that they don't have - I've tried hard not to do that with you and I think you'll appreciate what I've said a lot more if you just read my words as being what they are, rather than believing I'm a brainwashed React cultist who refuses to try any other way. All I've done is question your arguments about vdom's inefficiency, which seem to come in equal parts from: 1. an incorrect belief (admittedly not helped by the react community) that the entire vdom is rebuilt on every change (pure components won't be re-evaluated, same as Svelte) 2. the idea that "rendering the virtual dom" is some insanely expensive computation rather than just "returning a plain JavaScript object" (which has some overhead over what Svelte does but is the same algorithmic complexity) And yes, I've written a mobile targeted web app which had to maintain 60fps while scrolling and zooming an SVG graph of a dataset containing spectrographic data for every minute of a year, streaming in and out of memory. It would have performed better in other languages, but the bottleneck certainly wasn't diffing the vdom. Immutability doesn't involve data cloning. It's only a problem for garbage collection if you have memory leaks. If I was worried about performance I would use webassembly, not imperative JavaScript. I've never complained about JavaScript fatigue. I honestly have no idea what people are talking about.
Hi /u/Talosm22, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/brisingire, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/yankouskia, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/pawnh4, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
It's not useful if `cities` is already an array. If it's not an array, for example a `Set` instead, then it can be an optimization because you can combine two operations (individual `from` and `map` calls) into one where both the create and map happens at the same time rather than separately which would result in two new arrays being created instead of one.
Hi /u/smtin38, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Well, this is awkward. This subreddit is for **javascript**, which is different than **Java**. In other words, `javascript !== java`. Maybe try one of these instead: * /r/Java * /r/JavaHelp * /r/LearnJava Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/sorjov, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/shoutforkrishna, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
fileA.js &amp;#x200B; \`\`\` [Game.save](https://Game.save) = () =&gt; { console.log("A") } &amp;#x200B; Game.get = () =&gt; { console.log("get") } \`\`\` &amp;#x200B; fileA-override.js &amp;#x200B; \`\`\` [Game.save](https://Game.save) = () =&gt; { console.log("A + B") } \`\`\` &amp;#x200B; The final result should be \`\`\` [Game.save](https://Game.save) = () =&gt; { console.log("A + B") } &amp;#x200B; Game.get = () =&gt; { console.log("get") } \`\`\` &amp;#x200B; And Reddit auto attached spoilers tag to post. I didn't realize it. Removed tag now
FWIW, you actually _can’t_ do 7.toString(); because it is ambiguous whether that is property lookup or a decimal point. This however works: (7).toString(); The parentheses remove the ambiguity. Anyway, calling a method directly on a primitive doesn’t work any differently than when you save the primitive to a variable first. JS will still create a temporary wrapper in the background which will get tossed as soon as the property lookup is done. The only difference is that since you never saved the primitive, it’s going be tossed too. Just like anything you don’t save to a variable. &gt; Which seems to suggest that primitives are constructed at runtime- which is why you can treat them like objects but only the first time. Does that sound plausible? Not really. First, you can “treat primitives like objects” as many times as you like: const str = 'foo'; str[0]; // 'f' str.split(''); // ['f', 'o', 'o'] str.indexOf('o'); // 1 Second, as we saw in the example where I set the foo property on a number, a new object is created for each property lookup. If primitive wrappers were just constructed once, you would be able to get the value of a property you set: const num = 7; num.foo = 'bar'; num.foo; // undefined
Even before node, JavaScript wasn’t just limited to the browser. It’s been possible to execute JScript, Microsoft’s implementation of JavaScript, in ASP in .NET using IIS since 1996.
But they are in random order
Yes, this is *exactly* what proxyquire does. In the "final result" file instead of simply requiring fileA as normal you instead proxyquire it in, and supply an override: proxyquire('./fileA', { 'save': () =&gt; console.log("A + B") });
Thanks i will try proxyquire
Great article! Quick note, #6 can be written this way instead, which is a bit shorter ...emailIncluded &amp;&amp; { email : 'john@doe.com' }
Here’s a little video that’s also very helpful [JS tips](https://youtu.be/Mus_vwhTCq0)
&gt; Tried comparing JS vs WASM for DSP yet? Not yet but I think it should be faster. What I'm working on however is something with developer comfort in mind, I'm working on something where you define your synthesis graph like in SuperCollider (declaratively) and the engine "compiles" your declaration to javascript scriptprocessornode code on the fly. The body of the function becomes gigantic but this allows you to have single sample feedback. So instead of each UGen computing its dedicated block and passing the data to next UGen, all happens in a single block loop. It would be crazy to do it that way when you hand code it, function bodies are massive but JS copes just fine. I'm not much experienced with WASM yet so emitting WASM code instead of JS code could be the next step.
To each his own. To me personally, they all make sense in their own light, js, python, java and even php. I just don't understand what these lingua wars are all about! As programmers, we should focus on solving problems rather than quarreling about who's tool is the best like kintergarden students.
Python has modules, dicts, objects type1, objects type2, and a few other similar but not same types which have just enough quirks and differences that it feels awkward to a js developer, in which all three are the same thing.
Thanks. Glad I could help
Thanks. This is a better solution.
we are in a JS sub
What I've read into your response is disregarding attempt in innovation based on "global state" or "impure functions" while not explaining why in Svelte in particular this causes problems. I'm assumed to accept these as some irrefutable arguments, when these are just statements of preference or observations which do not allow to make any conclusions. In triple A game development they use data driven design. Games can be oversimplified to a mutable global state and a loop where those mutations happen. There are other aspects, more data related to make computations more effective, but the basic premise is this. So it's faulty design? Just to point obvious real life example to contradict this paradigm purist nonsense some developers use. Got very bad in recent years with React and functional programming in javascript. &gt; Immutability doesn't involve data cloning. Yes it does. `{ ...obj, ...obj }` (arrays are objects in javascript, there is no array datatype) stupidly clones data and creates new object. There are no smart optimizations in Javascript like there are in languages like Haskell where program smartly tracks the difference and doesn't need to allocate memory. Things like Immutable.js doesn't do wonders either, based on the size of your application it actually can make it worse. &gt; If I was worried about performance I would use webassembly, not imperative JavaScript. Outside of compiler which you won't interact with, there is barely anything imperative in Svelte about it. There are more things you need to tell React in detail how to handle things than in Svelte. Technically, React is more imperative than Svelte.
You do not need to use semicolons in JavaScript. Ever. There are edge cases with ASI that would require an explicit semicolon, but that’s more an indication that you need to re-evaluate your code than that you should be inserting semicolons. And there are also edge cases where inserting the semicolon won’t save you from needing to know how ASI works. JavaScript is a better language when you stop manually inserting semicolons. I would highly recommend it.
"You don't know JavaScript" series. The BEST to fully comprehend what JS means and what it can do. Also, an interesting approach that, I think, it can help you learn faster other languages.
FYI, Python is not a C-like. It isn’t even close.
Also best Learn Typescript for free: https://basarat.gitbooks.io/typescript
You don't have to use `;` is JS! :-) Also `for...in` will iterate object keys while `for...of` will iterate its values. A little quirky, through I've yet to run into a situation where I need the value and not the key, so I always use `for...in`. Wish we had something like comprehensions in JS, those are super slick!
Just fyi rust map and filter functions do return iterators. [https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.map](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.map) &amp;#x200B; All languages that have automatic garbage collection have context managers or something resembling it. Thats how you let developers control how resources are used and freed. In my opinion this is a stupid complaint on your part and you should evaluate your responses based on facts and not what you feel is wrong or correct. And how do "trivial" keywords make the language bad. I mean give examples of these trivial keywords you're talking about. As far as i'm concerned none of python's keywords are trivial. They each have a pretty significant purpose in the language's design and clearly communicate the semantics of the language. There are other things you could say python is bad at. 1. Poor OOP design facilities. 2. The language's dynamically typed structure makes it difficult to read in large projects. 3. One line lambdas. And many more.
I don’t love the meaningful indentation in python. It’s not a dealbreaker, but I definitely prefer the more flexible white space in other languages.
I personally like using ";". That is probably just because I started out using C and Java.
You'll love it. Waaay better than $scope :D Congrats!! Really nice that your abilities gets you and your wife a new house in a fresh state. Love it!
Yes. That was my point.
Good point!
I’ve been rereading the beta version of The Definitive Guide to JavaScript because I was sad that I’d gotten rid of my old copy and bought a new one. They were talking about server-side JavaScript even before JScript, and this was in 1996. On a complete tangent, I’d highly recommend reading this book. It’s a bit of a trip.
You should check out Deno. The person that created Node is working on Deno right now and it looks promising. It will only work with Typescript as far as I know. Instead of writing it in C++, he is using Rust. He started out using Golang, but switched to using Rust because he was worried the garbage collection in Golang would be a problem. Also, Rust is just a better language for this kind of thing IMO [https://deno.land/](https://deno.land/)
Lengthy syntax? `square = lambda num : num**2` VS `const square = (num) =&gt; num * num` or `const square = (num) =&gt; Math.pow(num, 2)` I agree that the single expression limit is annoying.
I like using Node much more than Python and don't really find Debugging that painful. Just my experience. I am not doing AI or working with big data, so that helps.
Indentation as code is more annoying than useful. Modern code reformatters make that a non-issue and fix many others, including any complains about semi-colons. Everything you might want to do in python can be done in js. Some of the list manipulation one liners might be longer but they’re easier to understand, imho.
Every few months I give it another read, great series
Tbh I don’t use python much except for automation scripting, but they have different uses. I write a lot of JS and was on a node kick for awhile as well...and basically I found that trying to replace a true backend like python/c#/php etc. just isn’t worth it. So basically what you should concentrate on is both JS and a backend language. You do your data logic with the BE language and handle presenting with JS and Ajax.
because there is only so much time in a day, better to be an expert at few than a master of none.
Throw linting on js so that everyone on your team is writing similar code and it's very easy to read.
&gt;If only it had adopted dot notation for objects .... ! What do you mean by that?
I started out with C and Java. I feel exactly the same way about Python. Also, it took some time for me to get used to not ending a line with ";". It really doesn't make much sense to me to get rid of that. I used Swift a while ago and noticed the ";" was optional. Not sure if that is a good thing or not.
&gt;paradigm purist nonsense There's no point me trying to convince you of the benefits of functional programming, I'm not going to explain it better than a google search will. If you really want me to pick a reason, then number 1 is testability. Here's the canonical local state example from svelte.dev: ``` let count = 0; function increment() { count += 1; } ``` How do you unit test `increment`? Tough shit, you can't. It only works if it's defined in the same lexical scope as the Svelte prop it refers to, so you can't import it from elsewhere, and even if you could it has no return value so there's nothing to test. If there's a way of checking the value of `count` then you could check it before and after calling `increment` but now they aren't unit tests because they depend on whether another test has altered count. Which is all academic because there doesn't appear to be any way of unit testing anything inside a `.svelte` file at all. &gt;Nowhere I said that entire application dom tree is rerendered. The entire COMPONENT vdom tree is. This is you in the first comment I replied to: &gt;Which renders entire dom tree and diffs the difference before committing detected changes even if a single prop changes. &gt; Yes it does. { ...obj, ...obj } (arrays are objects in javascript, there is no array datatype) stupidly clones data and creates new object. No it doesn't. It creates a single object with references to the properties of the original objects. Nothing is cloned. `obj` could be nested a billion levels deep and containing terabytes of data and `{ ...obj }` would still be O(n) on the number of top level properties.
It's not good. Just because it runs fine it does not mean it's good. You may find this as an interesting read: https://tonsky.me/blog/disenchantment/ A triple monitor setup with two videos on fullscreen on each screen and vscode in the other and it will dtart lagging. Maybe because the gpu cant give a stable 144 hz on each screen, the reason behind why vscode lags is because it uses the gou to render a browser. And well, the tons of animations (like the cursor blink or smoothing) does not help. I use vscode anyway, but its not good. The tradeoff of using it for me its ok, but in my ultrabook performance is very poor.
It's optional in JS too. Now you know
[removed]
Do u mean Console.log() ?
Beware though! This teaches all the weird and obscure features of JavaScript. Things you won't use 99.9% of the time. I recommend you only read this series after you're comfortable with day to day JavaScript and want to expand on your knowledge. I don't think you should start with these books.
Really good point. It explains why we have server side JavaScript - to make the full stack more accessible for folks who are more inclined and more familiar with js. :)
Mostly because of career growth. Python is hugely popular and there are a lot of jobs out there. I’m wish PHP was more popular actually, they fixed a lot of mistakes recently,
I already knew that. You can set up your linter to remove them if you want as well. But, if you try doing that without a linter then you kind of have to be careful sometimes. I personally don't recommend it, but that has just been my experience. From what I understand, there are some cases in Javascript where semicolons are needed.
Another w3schools user I see
Hey! what are u accusing me of? ^(Its just that that site loads very fast)
usually `console.log()` or for Webpages you can do `document.write()`
Yeah, I can understand that. I use 3 monitors too but only 1 of them can do 144hz for gaming. I have a decent Desktop PC and I have no issues with VS Code. I also have a MacBook Pro but I only use 1 external monitor for that machine. For my use, VS Code is great (or "good") and I come from using VIM. I suppose good is subjective and conditional.
You! you on w3schools too!!!
You can just \`const square = (num) =&gt; num \*\* 2 \`
I like it too, easier to understand than the mdn web docs
Ye
It deviates somewhat more than JavaScript, but the basic C-style syntax conventions are all there: if/else, for/while, try blocks, etc.
https://www.reddit.com/r/javascript/comments/bvm05m/i_made_a_chat_with_rooms_in_javascript_and_nodejs/
The URL and shuffling animation are great!
I'm well aware of the benefits of functional programming. The issue I have is that same people who advocate it so much usually can't see it's drawbacks. First question is why do you want to unit test it? It's a frontend component you do e2e. Meaning you mount the component, simulate behaviors and check the visual output. If you have a pattern to write some deep logic, when it should not belong to a component but imported as a service. &gt; It might not be what you meant but it's what you said. I'm pretty sure that what I've said is virtual DOM tree of the component. Although I guess it's not clear enough, as components hold other components, which caused confusion here. https://blog.sessionstack.com/how-javascript-works-inside-the-v8-engine-5-tips-on-how-to-write-optimized-code-ac089e62b12e &gt; No it doesn't. C++ clones classes each time an object properties change. Your little test is hardly relevant as amount of data is very small. If something holds reference, when it has another edge, garbage collector cannot do it's work and your process gets janked. There is no way to go around this. I suggest to spent some time in lower level language like Rust or C++, might give you a deeper insight on how memory is being utilized.
I mean, with this i want to justify that vscode works. But its not a good software. People use it becase its feom microsoft, can be hacked, extensions in js and does the job for free. This does not mean it is the right tech to use it. Have u ever compared sublime to vs in terms of speed and memory usage and lagging in general? Does not even come close.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/datascience] [The state of data analysis](https://www.reddit.com/r/datascience/comments/bw0d5b/the_state_of_data_analysis/) - [/r/explorables] [The state of data analysis](https://www.reddit.com/r/explorables/comments/bw0ht0/the_state_of_data_analysis/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Hi /u/xfajjet, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I used sublime before going to VS Code. I like VS Code better. I like the UI better, the themes, and of course the extensions. There are performance differences, but not enough for me to care. If only cared for performance then I would just use VIM. I have used VIM for nearly a decade so I am quite used to it.
Uff heavily depending on the Browser you are using. For Chrome you can write Chrome Extensions. Maybe you have to change the DOM of the Webpage via Javascript...
In JS, you can omit the paren in lambdas with a single argument `const square = num =&gt; num ** 2`
Yep, I prefer it as well. Now think if a full browser is really needed for a desktop app. Well yeah, its like, easy customization? Well throw a browser so web devs can hack it. Yeah, makes everybody happy till u find out that is using between 0.5 and 1 gb of ram. At the moment, my taskbar shows the top apps are: Brave, vscode, spotify, grammarly, telegrsm and discord. Guess what they have in common. They are all in standby and they together use around 3 gb of memory st the moment. This is not good. At all. Yeah so buy more ram? Hell no. Also, the source code is aldo very large since... Well js is interpreted snd when u ship the app u shipp the source code. If only computers had something like machine code that solved that so that the apps would have the size needed... Web devs seem to care a lot about ie userd and try to polyfill a lot of things so everybody csn acces their web and they they go to the desktop and say, heyif u wsnt to run my app u need 2gb of ram available and i am only used to write some chars to a file. I would love to learn vim...
I agree with you.
do you put the words in between the parantheses?
I really think VIM is right for you then. I have 64GB of ram so I just don't care LOL But, I understand your point. These things should improve so they aren't perfect. Or, just use some other language that compiles to machine code or at least something like bytecode. We will see how the future goes. For now, I am happy. Development is fun and we can always do better.
Yeah like `console.log("Hello World")` or `document.write(variable)`
If we're being honest, it's purely personal preference.
Sure thing :)
You can't use `for..of` with a regular object, it has to be an iterable object, so an instance of Array or any object that implements the [Iterator Protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol). You use `for..in` when you want to iterate on the properties of any object, but there can be some surprising cases which `for..of` avoids.
I am also new and have been going through WatchandCode. Pretty straight forward and the idea is that you learn by working on an application instead of trying to memorize mechanics without context.
how's the alternative map useful..? does the same of map and is less readable.
If you use Babel to transpile your code, you can use the optional chaining operator. &amp;#x200B; [https://github.com/TC39/proposal-optional-chaining](https://github.com/TC39/proposal-optional-chaining) &amp;#x200B; [https://babeljs.io/docs/en/babel-plugin-proposal-optional-chaining](https://babeljs.io/docs/en/babel-plugin-proposal-optional-chaining)
then how do you put it in
Congrats on your first npm library. I have been using lodash \`get\` function for the same.
There is no undefined behaviour in JS when mixing types in an expression, just a [slightly complicated set of rules](https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch4.md). And to be honest, the weird cases really don't come up often at all.
Kyle Simpson, though brilliant, is also extremely opinionated and frowns upon a lot of modern JavaScript practices that many consider popular and standard (particularly with ES6+ features i.e. the use of `var`)
I learnt how to create conditional object creation from your article. Keep up the good work! ♥️
How does this stand out from the packages in the npm repository that already do this?
it says its in console
Ahh my bad, thanks for calling this out!
Is Python syntax closer to C than something like Lisp? Sure. But is it even remotely C-like? No.
how do you make it go from console log to the screen thing
My man
I've been looking for something like this for awhile. I've tried the other sliders, including glidejs and never been 100% happy. &amp;#x200B; I'm going to build a React wrapper over this and publish. Will let you know.
&gt; You don't have to use ; in JS! :-) YES YOU DO. &gt;:-(
Thanks. Glad to hear that.
Hi /u/quickthrowaway58, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
It's true that a lot of the newer features of JS like `map` `forEach` `filter` etc.. are not as performant as a simple `for` loop. What they do provide is better readability and often times simpler code (they often abstract away something, such as `forEach` which hides away indices and array access). If you really do need to squeeze every once of performance out of your app after having made sure you aren't [prematurely optimizing](https://stackify.com/premature-optimization-evil/) then you have access to `for` , `while` and all the "bare bones" constructs which can be a lot faster.
It is the same if the source object is an array. Considering that this will work on other types too, your code will be optimized as described by [senocular](https://www.reddit.com/user/senocular/) a couple of comments earlier.
How did I not know #7‽
How... and why would this exist then? It doesn’t even allocate memory properly then...
Thank you! I will take this feedback and make the Readme easier to digest. "Smart" technical catchy phrases can rest somewhere in the docs instead.
The list is pretty good although \#3 should be changed from: const result = cities.reduce((accumulator, item) =&gt; { return { ...accumulator, [item.name]: item.visited } }, {}); to const result = cities.reduce((accumulator, item) =&gt; { accumulator[item.name] = item.visited; return accumulator; }, {}); There's no reason to use the spread operator; it's just creating new objects and iterating over the old object for no reason. Using the spread operator in `reduce` is actually a common anti-pattern I see.
The only case that I can remember where they are necessary in JS, is in for loops.
That’s only if n is a reference though not a value type right?
Would be useful if you have an array-like object.
Yes primitive types will be fine
Give brave browser a try. It is the same as chrome but with ad and tracking blockers. Works really well too.
Can you please specify what you mean with "screen thing"??? You can output text on multiple ways, that's fully depending on if you are using JS in the Browser or for example server side with NodeJS
Codecademy?
I was always under the impression one would start that series after they have at least a basic understanding of JS?
I usually carry a brick with me.
Other than my paycheck and my car and the resume? Not a whole lot. When I was a kid I used to make fun of J2EE and my boss laughed at me and said "I'd make fun of it as well, if it didn't buy me a house and put my kids thru college". When I applied at Facebook about 5 years ago a brand new Model S (brand new at the time) drove up with the license plate "PHP LOL". Pragmatism &gt; idealism.
This is nice for beginners, but dont ever use this as your only source to learn with, this is in no way going to get you a job if you just learn from this or even probably become an expert at web development (note: im no expert either), there is a bit of spoonfeeding and short sentences/little information, i even found maybe 1 or 2 bits of incorrect information, so You dont know JS and MDN tutorial is much nicer after you use w3schools
Okay. I disagree. What would you say makes the syntax _not_ C-like?
It would be awesome to have this proposal finally in ES. Other languages uses it for a developer successful experience like Swift. Meanwhile, for people like me that don't use babel in all of their projects, I think this can be helpful.
Haha, thank you! Also check out the previous version to get an idea what kind of things are in the works: https://deck.of.cards/old 😉
Thank you :) I have been developing JS for a long-time, but never produced a npm package.
usually just that whatever gets created is essentially immortal due to standards, and cross OS compatible with a single point for upgrade and maintenance along with built in real time data communication between clients. No need to re-write because OS environment changes, no need to re-write because it gets old, no need to set down massive layers of network code to get it to be real time between clients. At the end of the day a web project &gt; compiled project because of cost, timeline of utility, and functionality.
i don't understand what `a[1..a.length-1]` means.
Well I think the most "famous" is lodash. The difference is that my "lib" is a tiny lib. It has no dependencies. You can use it everywhere without loading too much your project. I'm really not a fan of lodash/underscore.
Sure it does. An array of objects is really just an array of references to objects. Fill with an object as the parameter just creates an array where all the references point to the same instance underlying object. But it's still an array of n separate references.
You can find another situation here: [https://stackoverflow.com/questions/444080/do-you-recommend-using-semicolons-after-every-statement-in-javascript](https://stackoverflow.com/questions/444080/do-you-recommend-using-semicolons-after-every-statement-in-javascript)
Not arguing with haters is probably best
He’s the “I’ve forgotten more us than you’ll ever know” dude iirc. You weaken your message by been arrogant even if you are right.
It means a slice of the array starting at the second item (1) and ending at the last item in the array (length-1).
Encryption Automatic link formatting Also, it renders funky on mobile.
Cheers. Also i read that as "It fucky renders on mobile" I need sleep haha.
Everyone working on a JS project should probably use prettier anyway. So, from that point of view, semicolons are optional. I have not personally worked with anyone that doesn't use semicolons, but I am sure there are many out there that don't. With Swift, you aren't supposed to use semicolons, but it still compiles if you use them. I am not too sure if that is still the case, but it used to be.
As someone who has used and continues to use both (well typescript these days) as well as a bunch of languages back to basic in the 80’s Python is better engineered from a language viewpoint (I don’t think that is a controversial opinion but well flame proof underpants are on anyway). That said JavaScript has made tremendous strides over the last decade and a lot of the silliness is because of backwards compatibility (which is both good and impressive), Python did not handle the 2 to 3 transition at all well. All things been equal I’d pick Python over JavaScript but Python vs TypeScript would be much closer. Python has the advantage of orthogonal design but it’s had a single exceptional BDFL since it’s inception where JS has been driven in various ways. All said and done though modern JS is a decent language with a friendly community with typescript making large systems easier to build it’s got a great future beyond just the web client.
Your comment is pretty misleading. You sound like you are trying to scare people. Beginners will easily get scared and not use this function without having a deeper understanding, what is happening here. First of all, this is not always the case. If you put in **primitive values** (string, number, bigint, boolean, null, undefined, symbol), you will be putting in copies of the value. But if you put in **objects**, you will be actually putting in the references to that objects. JS does that (as pretty much any other language) to save memory. So if you do `const a = Array(5).fill("a")` you will get an array like this `["a", "a", "a", "a", "a"]`. And all primitives are **immutable**, which mean when you reassign the first item in the array like so: `a[0] = "b"` you are actually removing the immutable value and putting in a new immutable value of `"b"`. The situation is a bit different if you do `Array(5).fill({name: "John"})`. What you are actually doing here looks like this: ```js const obj = {name: "John"}; const a = Array(5).fill(obj); ``` And `obj` is actually a reference to an address in the memory where the data of the obj is stored. And here again, you have 2 options: 1. a[0] = {name: "Peter"} 2. a[0].name = "Peter" The 1st option is replacing the reference to the `obj` object with a new reference to another object in the memory which has a "name" property with a value of "Peter". Then you will have an array of 5 elements where the first one references to an object `{name:"Peter"}` and others referencing to the `obj` or the object `{name: "John"}`. The 2nd option is changing the name of the object which is referenced by the `a[0]`. And which object is referenced with a[0]? Correct object `{name: "John"}`. So you are changing the name of obj. And because all of the array elements are just storing the reference (the address in the memory) to the same object you are getting the "scary" result. So by its nature `Array(5).fill({name: "John"})` is this: ```js const obj = {name: "John"}; const a = []; a.push(obj); a.push(obj); a.push(obj); a.push(obj); a.push(obj); ``` IMPORTANT! IT IS NOT THIS: ```js // INCORRECT const a = []; a.push({name: "John"}); a.push({name: "John"}); a.push({name: "John"}); a.push({name: "John"}); a.push({name: "John"}); ``` because here the language conveniently creates 5 different objects that happen to look exactly the same but are 5 different objects in the memory so the array will have 5 different references and changes to one of them will not affect the others. So the "warning" is not something unique to `Array.fill`, it actually has nothing to do with this function. What you pointed out is just a consequence of the way how the computer memory works and how the language uses it.
Quite the opposite. It is allocating memory as it is supposed to.
Cannot read the site at work because of compatibility problems with IE, perhaps cross browser compatibility should be on the list?
 a = { "name": "john" } print(a["name"]) # good print(a.name) # if only :-(
That's all a matter of opinion, and mine is different from yours, sorry.
Well every developer has its own taste for languages. I personally like javascript more than Python. But when it comes to projects I use both. Djanog (Python) for backend services and React (Javascript) for frontend.
Nothing to apologize for!
I like using it in JS and hate those no-semi hipsters, but I am happier when using a language who was designed without it from the beginning
omg..... never talk about JSP again. Never. You should start learning something else. Take a look at PHP, it's really easy to start with and you can achieve almost whatever you want
I know very well what for/of and for/in do (and it's more complex than what you say), I just think they inelegant, quirky and confusing to beginners compared to the python alternative
Pleas don't give me this hipster crap :-) JS was designed with semicolons and, they are standard in pretty much all the major styleguides, a survey from a couple of years back shown 70% of JS users use them, and no hipster is going to change my mind on that. Sorry.
I also use and like both, and pretty much agree with your comment.
This would be true for any non-primitive value in any javascript use case. Not sure how this would be a gotcha.
W3schools has more information than what 99% currently working people use. I always hit it first when I need a quick example/reminder. I hit mdn when I need to know the function in details.
On number 4, not sure I see the point. Yes Array.from allows for a map function for convenience when converting array-like objects, but this isn't intended to replace Array.prototype.map.
A clearer return statement too, imo. I see at a glance what the function returns.
It might weaken his other opinions, but I'm not sure I see how it affects his YDKJS series.
To offer another point of view JSP/JSF are common backends for web apps for some reason. I concur you should start learning something else but in the meantime, use what you know. &amp;#x200B; Node is a common backend, as are Rails and Go. Of the three, Go and Node have strong futures. &amp;#x200B; Don't leap too quickly at a backend. Use static, if you can. Add only what you need, when you need it.
I didn’t say it specifically did, that series is good and making it free was a cool and noble thing to do but his other comments are somewhat more brusque and that does hurt your argument I think.
Surely you can write it this way, but should you?.. I'd just stick with plain old `if`s at this point.
I absolutely agree, it is a must read
[removed]
I used JSF at a past job, I would really recommend you try to learn as much JavaScript instead if possible, especially if you don't really remember JSP anyway. You can still use a Java server for the backend and create a rest API that your webapp can use to access any data or backend operations you need to run. (I think people mostly used spring for apis). Eventually you could move from just JavaScript to using a framework like react, vue, or angular if your webapp gets complicated.
In Python that is not an object &amp;mdash; it's a dictionary (dict). Javascript [now has dicts](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) too. The difference (in Python) is that dict keys don't have to be strings &amp;mdash; well, they do have to be instances of hashable types. That still leaves eg. tuples. There are more differences of course.
Never wrote Python, but I actually really dislike Javascript and non statically typed languages in general. Looking at a function and instantly konwing what it returns is something you take for granted til your work with JS and everything can be anything
I agree. Also OP used the dynamic property syntax in #3 before it was explained in #7. These are good tips though!
Ad networks have been used to serve malware from otherwise legitimate websites. Example: the new York times and the Atlantic among others. &gt;Unlike in print or broadcast media, where advertisers and agencies that represent them can submit ads directly to publishers for review, online ad space is typically bought and sold through complex systems of intermediaries and exchanges. Advertisers and their representatives programmatically bid in real time for the rights to show ads to particular users, and those ads include custom JavaScript code that runs in users’ browsers. The exact content users see depends on who they are, where they are, what kinds of devices they’re running and other characteristics, making it difficult for publishers and ad networks to conclusively review every version of an ad for malicious content. https://www.fastcompany.com/40516897/a-new-wave-of-bad-ads-is-hijacking-even-top-tier-websites Don't visit untrustworthy sites has never been a viable strategy. Furthermore stealing is taking the property of others. You don't own my attention nor computer and you cannot purchase either with your web content. I'm sorry that you misunderstood the nature of the transaction. You are free not to serve users who block ads or require payment for content. If your content isn't worth enough for people to pay for it and you don't want to put it out for free then it can go away. 5 others better than you will replace you.
In many situations modern Javascript runtimes can be a good deal faster than the standard Python interpreter. For instance, [see here](https://www.reddit.com/r/javascript/comments/bnnrnt/javascript_faster_than_c_to_execute_mathematical/en9pigp/). OTOH I find javascript a fair deal harder to debug. Python code is usually right the first time it's written, modulo typos, and if not &amp;mdash; the error messages usually point you straight to the offending code line.
why not just use regular require + assign? const Game = require('../game'); const overrides = require('./fixtures/game/overrides'); Object.assign(Game, overrides);
It's not hipster crap. Inserting semicolons does not obviate the necessity to understand ASI. If you understand ASI, you don't need semicolons. You can do whatever you like, but the semicolons are unnecessary, and JavaScript is a better language without them.
Oh, my bad then, I started it without any previous approach of JS, only did Java prior to that
Imo, the biggest problem with JavaScript was this shit AND the translation away from it. function animal() {} var cat = new animal() Now that we have enhances object literals everything is fine (and classes, I guess)
alternately, if Game is a proper class you can require, subclass and export it in overrides. either way, the tool to use here is either require or import
I have not went through the series but this is just what I think I read. I think prior programming experience probably helps and not the best for someone completely new to programming in general.
You can dislike that Python syntax isn't like C (I have no idea why you would, but go right ahead), but you can not reasonably disagree with the *fact* that they aren't similar. Maybe you don't understand what syntax means? I've definitely seen more embarrassing gaps in knowledge on this sub. Are you going to argue that Visual Basic is a C-like next? I would love to see that defense.
Thanks for the advice everyone!
I think there is strength to symbols that delineate structure. Semi colons and brackets do a lot to help you understand meaning. The same way that a period does for english grammar.
You are just splitting hairs, they are fundamentally the same thing. JS keys can also be anything that can be converted to a string var a = {}; var key = { a: 1 }; a[key] = 123; console.log(a[key]); // 123.
I'd recommend mongodb and websockets to make sure agent data is always real time accurate instead of loading the page like a poster where the data never updates even if in real time it is changing.
Nope. They are not at all the same. A dict can't have user-defined methods &amp;mdash; right there that's a pretty big difference. You'd need to define a subclass. Many different values can map to the same string (in JS, in particular). Using non-string values as object keys in JS is playing with fire.
&gt; I don't want to start my learning on the wrong foot. Move to a reasonably well supported and popular backend then, and forget JSP and JSF. If you know Javascript pretty well already, [node.js](https://nodejs.org/) is a great place to start -- you can write your backend in the same language as your front end. If not, then look at any one of the plethora of modern backend languages like Python, Ruby, PHP or ASP.Net. There are others as well (C#, Go, etc.), but these are by far the most popular for these days, so help and libraries are both easy to find for just about any task. Also, for a scalable production website, you probably shouldn't be looking at raw JS/CSS/HTML at your skill level. Use a front-end development framework like Angular or React.
Thanks for the input. That's what i was worried about, was how to reactively update the data and make sure it's the current data. I might be learning that later on in my studies, but just the management of how to pull the database info into state and vice versa so that its up to date. Pulling the info every x amount of seconds from the database seems wrong but i don't really know yet haha.
[removed]
Hi /u/keken22, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
If you are interested in ASCII art ,or large heatmaps with letters, DNA sequences etc: [https://github.com/IbrahimTanyalcin/lexicon-mono-seq](https://github.com/IbrahimTanyalcin/lexicon-mono-seq) handles 1000 \* 100000 lattice with ease.
I'm not sure why you feel the need to be insulting. You also keep changing the terminology I used. I don't know if we're even talking about the same thing. That's why I asked a clarifying question. You did not answer, so I am still not sure what it is we are disagreeing about. To be clear, I did not say Python was "C-like". I said that Python has "C-style syntax". This is not a statement about the capabilities or inner-working of Python. I am referring to the syntactical conventions that most modern languages use, many of which can be traced back to the success of C/C++. I was making the point that since both JavaScript and Python use C-style syntax, they look largely similar and a lot of knowledge is transferable. This contrasts with something more esoteric like a Lisp. Anyway. I hope that is clear. Since you don't seem to be interested in a respectful discussion, I will not be reading or responding to any more of your responses. Take care.
One of the modern ways to go about this is the so called [JAM Stack](https://jamstack.org) - basically a static website (Gatsby is a very popular choice, but there are many others) that connects to apis via JS. Forget JSP and all that crap, it was rubbish when it was the hotness 20 years and it is even more rubbish now.
NodeJS is fine, and there's DB abstractions that connect to any DB you care to use. Other nice thing is if it's all one language, less mental switching.
To be fair with Kyle, his comment was: "I've forgotten more JS than most people will ever learn". Which is factually true, given than most people don't learn JS or only learn the very few they need to get something basic done. But, more than that, he said that in the context of an interview, while talking about how difficult is it to memorize all details of JS, to the point that it is almost pointless to try to learn everything about the language. I think he had an unfortunate choice of words and the interviewer did him a disservice by putting those words as the title of the interview. I don't think the guy is really as arrogant as it sounds from that isolated sentence.
&gt; This would be true for any non-primitive value in any javascript use case.. This is a pretty broad statement but how a reference is treated is not always the same across all calls to all objects: &gt; let a = [1,2,3] undefined &gt; let s = new Set(a) undefined &gt; s.delete(1) true &gt; s Set { 2, 3 } &gt; a [ 1, 2, 3 ] The blog also says: &gt; Ever worked on a grid where the raw data needs to be recreated with the possibility that columns length might mismatch for each row? Grid? They can be represented by an array of array. This may lead one to do the following: const brick = 'X'; let game = Array(5).fill([]) game[0][1] = brick // later on if(game[0][3] == brick) { /* Do something... OOPS! */ }
If you're used to Java try Spring Boot. Tons of enterprise uses it, it's efficient and nice to work with
Thanks for the lesson. Unfortunately the reason we need this lesson is a consequence of how `Array.fill` works, not computer memory, per se.
Yeah that's what i was thinking regarding the language, and its more practice in JS! Thanks!
Will check it out. Thanks!
While you probably can force js to do almost anything with libraries and half a million node modules, python is just more sensible for things like data science, arduino/raspberry pi, that kinda thing. That's besides the point thought, this was a post about look and feel, which imo JavaScript wins
so you just re implemented kleisli composition? import ramdba as R R.composeK
VS Code Rocks because it has brought the best extensibility around. I'm not saying that VIM or Emacs extensibility also doesnt rock, but that putting up a VSCode extension up is dead simple without comparison. Not just that, but it is also stable -- just compare it to garbage Atom and its never-ending stream of plugin errors. &amp;#x200B; VS Code's featureset grows fast since it has typescript as a decent base language, coupled with good architecture and usage of the easiest UI Kit around (the web one). Of course that comes with a cost: Electron. &amp;#x200B; "Vanilla" VS ans Jetbrains IDEs manage to be as bloated and heavy as VS Code and they are not even using Electron. Productivity matters, they are so productive (thanks to their kit) that they got spare time to optimize.
thx
Chrome network tab contains a initiator column, you can hover over it and see the stacktrace for this function aka where it originated.
Eventually people pop up with desktop build kits to replace electron. Unfortunately they are still not stable enough to justify replacing electron. &amp;#x200B; Unfortunately Electron brings in so much ease of development -- its not just the web UI, but also updates and a whole workflow. Apps could just use a web renderer provided by the OS (like an Android webview), but pusblishers want predictability so they just ship their own chrome along. &amp;#x200B; I think theres much room for providing decent JS desktop apps that doesnt eat 500MB RAM each, but the ecosystem still has to grow up a bit.
Congrats on your first npm lib. I use Lodash’s get function in these scenarios
I would say that the words "do not use semicolons" should not be told to newcomers as say do not know much about how ASI works, but those who already know enough about ASI already have an opinion about using or not using semicolons, so it's useless to give such advice in any context. I, personally, find it dangerously to advice it, maybe in the times of ES5 it was safer to not use semicolons, but now new syntax is added to the language and it can make something go wrong (try using more often array destructuring without using semicolons, some nice side effects can happen)
The really annoying this is that `new Array(5)` makes an array with 5 empty "cells". Not `undefined`. Not `null`. Empty. If you try to iterate over the array, nothing happens. You can call fill (even without passing a parameter) just to "vivify" the cells so that you can then map it or whatever. new Array(5) // =&gt; [5 x empty cell] new Array(5).map(() =&gt; 1) // =&gt; [5 x empty cell] new Array(5).fill().map(() =&gt; 1) // =&gt; [1, 1, 1, 1, 1]
feel the same way with python, i really got comfortable with js after doing massive react js projects, same with python but js feels easier to write and read
shoulda put number 7 before number 3 since he uses the thing from 7 in it
Sticking with if is a valid solution, but it would be a step backwards. The point of #5 is to show how we can have conditional object properties
Haven't used $scope in a long time. That's even older AngukarJS. I'm excited to build full featured things in React. I try not to compare all the frameworks to each other. They're simply a tool for a job. Each has its own upsides.
Oh it isn't too bad, socket.on('data update',data,(o,c)=&gt;{ socket.broadcast.emit('data update',data); }); You can also go through the sockets looking for something specific, so your only broadcasting to a subset of sockets vs global all sockets. var clients = io.sockets.clients(); clients.forEach((client)=&gt;{ if('data update' in client){ client.emit('data update',data); } });
Nah, when you're already creating an object with the new assign syntax, adding a new line just for more branching to maybe add another property ends up looking less obvious. Think about it, which way is it easier to see what's going on: `return {a: 'a', b: 'b', ...(c &amp;&amp; c: c: 'c')}` or `let ret = {a: 'a', b: 'b'}; if (c) ret.c = 'c'; return ret;` First one you know upfront everything the return value contains or may contains, the second option you have to keep reading to code to find out what might be in it, and turns out there can be more. When you're reading Other People's Code in a large base, it can actually help a lot if you can find out what the function returns quickly.
This is awesome!
Sololearn.
A NoSQL database seems like a poor fit based on what OP described. While postgres isn't as "easy" it will save you a lot of headaches in the long run if you actually want to make money on your app.
I must agree with this. But yeah... A better base la guage would make some things easier...
May I ask however, why would JS ever need to go he desktop? JS as a language was never designed for this. It was designed in a week for small web scripting... U want a desktop app? There are TONS of programming languages ready. U are not a fan of low low level like rust or c or c++? Okay, Nim? Zig? Go? Dart? JS tries to shine is a place where it can't by nature.
I guess its sort of a style thing, those sql databases just drive me nuts with the way I cannot properly make JSON objects with nested data, dates, and binary as well as creating result streams. I know there are backflips I can do to make an sql do those things but it really isn't as easy as mongodb, plus mongodb features a fuzzy search on text fields which can be insanely handy for making a search where people might misspell things or put in lots of extra search terms that the document doesn't contain.
is it really important for people to do data analysis in the browser? If so, why?
Do you honestly believe that this is the direct consequence of the \`Array.fill\` function implementation and is not related to the computer memory? &amp;#x200B; Why does this code behave the same ? &amp;#x200B; const obj = {name: "John"}; const a = \[\]; a.push(obj); a.push(obj); a.push(obj); a.push(obj); a.push(obj);
Exactly
Not sure of the interval but you used to have to manually code a heartbeat into socket.io, then they built it right in during one of their updates. So it does constantly play a keep alive ping/pong heartbeat game server&lt;-&gt;client
Why you guys neglected MDN? It contains comprehensive JavaScript tutorial s
&gt; Do you honestly believe that this is the direct consequence of the `Array.fill` Yes, the implementation of `fill` could have chosen to dup the array, but it didn't.
let s = new Set(a) Is creating a new object based on the array. Your array of primitives. Then you change your new object (Set). Why would that affect the initial array or **primitives**? *Hint: It would not.*
This violates immutability which is a very important part of functional programming.
I have to disagree completely. There are strong technical differences between relational databases and document stores. The SQL standard includes operators for partial matches that have nothing to do with regex. There are good reasons to use a NoSQL data store but "style" and "easy" aren't among them.
R is also good for doing things other than data science.
nodejs back end, javascript/jquery front end
lol @ PHP
Any and all server page technologies are effectively dead at this point. JSP in particular is ancient. JSF was never popular. Using node for isomorphic JavaScript is the way to go. It's still perfectly plausible to build a standalone REST API using Java with a framework like Spring or Dropwizard. That's my bread and butter for sure. But at this point, the wind is blowing towards just JavaScript all the way down.
 let a1 = [1,2,3,4,5] let a2 = new Array(a1) Is creating a new object based on the array. The array of primitives. Then you change your new object (Array). Why would that affect the initial array or primitives?
You can do this with ES6 proxy too. https://youtu.be/KJ3uYyUp-yo
Yeah I understand immutability. Why would you care about mutating the object you just created? The answer is, you wouldn't. If for some reason you did care about mutability here (like you're using a reference for your initial value, which you probably shouldn't do) you still wouldn't create a new object on each iteration and re-iterate, you'd do it on the first iteration and then mutate it. The difference is an O(n) solution vs O(n\^2), which is huge.
[javascript.info](javascript.info)
Did you run your code? Try checking what is the length of a1 (should be 5). And check the length of a2 (will be 1). That is because it creates an array of 1 element which is the reference of your initial array. Check out the syntax of Array here [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\_Objects/Array#Syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Syntax) (A JavaScript array is initialized with the given elements, except in the case where a single argument is passed to the Array constructor and that argument is a number). **new Array(*****element0*****,** ***element1*****\[, ...\[,** ***elementN*****\]\])** Now take a look at Set syntax here [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\_Objects/Set#Syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#Syntax) **new Set(\[*****iterable*****\]);** Did you notice the difference? The Array takes several params, which become the elements of the new array, while Set only takes one param (an iterable, an array for example), which becomes the source of the values in the collection of the set.
You're right that it's not a problem anymore. It ceased to be a problem when I moved to React. React has a much better update policy.
I've been looking at svelte. How is it? I love the idea of it, but haven't had time yet to sit down and really mess with it
Hi /u/pozderd, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
That's cool. What's wrong with these packages that also have no dependencies? &amp;#x200B; [https://github.com/cosmosio/nested-property](https://github.com/cosmosio/nested-property) [https://github.com/danmactough/node-nested-objects](https://github.com/danmactough/node-nested-objects) [https://github.com/fczbkk/get-nested-property](https://github.com/fczbkk/get-nested-property) [https://github.com/mikattack/node-deep-property](https://github.com/mikattack/node-deep-property) [https://github.com/vadirn/get-object-property](https://github.com/vadirn/get-object-property)
Hi /u/codehelp4u, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
What does 'dup' even mean here? You can't implement a perfect immutable object copy, there are too many nuances. A half-baked attempt would pose an even bigger set of problems than a simple reference copy.
I usually end up doing it the second way you have it, since it is definitely more efficient, and doesn't really look bad (other than the mutation, which I agree is totally safe here as long as the initial accumulator is a new object). Another option that is in between these two is using Object.assign in what would normally be a dangerous way: const result = cities.reduce((accumulator, item) =&gt; { return Object.assign(accumulator, { [item.name]: item.visited }); }, {});
What do you recommend people start with? :) I was learning web dev a year back, but didn't get very far. Completed a tetris tutorial and Practical JavaScript and am looking to restart my learnings lol.
I agree that mutating your own ref in reduce is fine for something like this, but performance isn’t really a good reason. Most JS code is extremely IO bound, if you are really in a situation where this is a concern (maybe you work is something like react) then you should just use a for loop. In general, for business logic, always favor readability. In this case, mutating is more readable.
Heartbeat is here only to keep connection alive.
Both, right? Sort of. ( On mobile so won't be fancy formatting ) For example, arrays implement the iterable interface via Symbol.iterator, meaning we can use spread syntax `[...arr]` Or we can write it as for..of `for ( const thing of arr ) { console.log(thing); }` They're slightly different, as spread syntax will pack it all into a new array for you. Generators have the iterable interface, so you can use that for..of syntax over a series of `yield`s. I don't see it that much in the wild, but it's there. I use it for unit tests a lot, since it plays really well with destructuring and I find myself checking lists of objects a lot where I only want one property. `for (const { prop } of objectList) { expect(prop).toBeDefined(); }` There's a nonstandard feature that adds python-y generators called generator comprehensions, but it's not supported anywhere. I'm sure there's a Babel transform somewhere, although I don't know if I'd recommend that. JS makes it a lot easier to use higher order functions, so we usually see code like `const newArr = arr.map(x =&gt; x*2 )` Rather than `const newArr = [for (x of arr) x*2]` Which I like.
The second one is far more readable
[Socket.io](https://Socket.io) use, like the name say, a socket to connect two machine. A socket is a permanent bidirectional connection. So [socket.io](https://socket.io) determines a client is disconnected when the connection is closed. [Socket.io](https://Socket.io) doesn't handle the inactivity of the connection itself, the browser do it. [Socket.io](https://Socket.io) use a heartbeat mechanic to prevent the client to close the connection prematurely. The client may want to close a connection to save resources for example.
Yes, I know. The point is that references behave differently when passed to different functions.
&gt; What does 'dup' even mean here? Shallow copy.
https://developers.google.com/maps/documentation/javascript/examples/polyline-simple
That would have been unintuitive as any other reference to an object elsewhere would not have duplicating semantics.
&gt; Use promises, or async/await, over callbacks When I read this, I have to ask how much research and experience back this advise? Specifically, is the author aware of the limitations and overheads of promises and async/await: https://github.com/dmitriz/cpsfy/blob/master/DOCUMENTATION.md#why Calling the 6 years old article "excellent" is an opinion, while that article misleadingly compares promise as new object with side-effects with the callback-style coding, while a correct comparison should involve [a similar object construct for the callbacks](https://github.com/dmitriz/cpsfy#quick-demo) &gt; Promises (and by extension, async/await) allow you to treat asynchronous data as values, rather than as imperative actions. Well... `Promise.resolve({then: doSomethingBad()})` can be as much of imperative plus hidden. On the other hand, this callback CPS function returns its async value just like promise: const doAsyncWork = callback =&gt; { ...; callback(value) } &gt; With callbacks, the emphasis is less about values, and more about “when this task completes, perform this side effect”. Callbacks are arbitrary functions. So the emphasis is yours :) Use it to return values inside callbacks and it will do everything the promises can do.
"C-like" means "C-like syntax." Again, are you confused about the meaning of "syntax"? Because Python and C syntax isn't even remotely similar.
Thanks for the info!
There are various methods... If the client closes the socket cleanly, socket.io will be aware of the disconnection as the client will send a close packet. However, this isn't always the case... As per https://socket.io/docs/server-api/ The default is to send a PING every 25 seconds (pingInterval). If there is no PONG received within 5 seconds (pingTimeout), it will be assumed that the connection is lost. The ping/pong method also has the added benefit that when a client is disconnected, sending a ping will often fail and it will be assumed that the connection is lost before before waiting for a pong.
Oops that's because I made a mistake on the first and wrote `c: c:` twice, corrected. Still, it's a lto clearer on what the return value can be, especially if you're just peeking the function definition.
&gt; Merge Objects and Array of Objects Using Spread Operator For arrays, this is *concatenate*, not merge.
JS isn't confusing, you're just writing it like a dolt.
A Python notation, not a valid JS code, unfortunately.
Yea none of these examples were confusing to follow. Also an MPL layer to convert them to what?
\#7 is great! A small change, but in terms of QoL it feels great
This reminds me of one of those exams where you get 5-10% wrong because the questions were ambiguous and deliberately tricky.
Not too bad indeed, thanks!
I'm having a hard time finding a clear answer on when a relational database is required, but it seems like in my use case it could be beneficial. I don't mind an extra learning curve using a SQL database as i have some experience in the past with sql queries etc and managing an sql database. Appreciate your input. I know my description was a bit vague, but i guess if i were to spend some time learning more about using an sql server with Vue I'd probably have a clearer picture. Appreciate the different view and feedback as there's always more than one way to do things and I'm leaning towards using psql.
You can print any webpage and the page can include CSS with a media query that only applies for printing . I think you could also spawn a iframe and trigger a print dialog inside that :)
Your version is reducing over impure function *mutating* its argument. Why not simply: const result = cities.reduce((accumulator, ({name, visited})) =&gt; ({...accumulator, [name]: visited}, {}) How is this an anti-pattern?
Can you give examples of such things?
I suppose it depends on the use case. You don't write `[1,2,3].reduce({function: ..., value: ...})`
Hi /u/GabeRothel, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Most of the codes were taken based on real js projects. And our purpose is to see if "writing as an idiot" takes away time/productivity/correctness
If we see that for example ternary operator makes people guess the incorrect output often, we plan to use mpl to refactor codes with ternary operator to if and elses for instance
Purity is very important in FP style. There is a rule `no-param-reassign` in eslint, which is quite common to be enabled in famous styles like [airbnb](https://github.com/airbnb/javascript#functions--reassign-params). In this case `eslint-config-airbnb` would complain your code. You have to change your code if changed the empty object to functions param and used it with some libs require pure functions like `redux`. Actually, I would write ```js cities.reduce((obj, { name, visited }) =&gt; ({ ...obj, [name]: visited, }), {}); ``` A glance is enough to understand what its doing. Much shorter and cleaner.
`a.get('name')` is the closest thing we have on Python but yeah having a dot notation would be great
The research this project is based off of focused on C / C++ - and made no claims to whether the language itself was confusing. I don't think OP meant to imply JS is confusing at all, but to reproduce the original research (or at least part of it) for JS. The written examples are supposed to be as small as possible while still containing a piece of code that executes differently from what a programmer would expect it to... They are written as though a "dolt" wrote it on purpose.
&gt; Your version is reducing over impure function mutating its argument.
I don't care much about JS... it doesnt make much difference anyway... But the web renderer itself (html+css) is probably the most mature and developed layout technology up to date. I dont think its a bad idea to take components out of the the browser and selectively use them to build UI's anywhere. The problem with electron is not HTML+CSS itself, is that it bundles the whole browser -- and even an instance of node.js in a sorta ineffective way... People do that for ease of builds, predictablility and compatibility. One could build a web-based UI without bloat. Use an HTML renderer provided by the OS? Only ship the minimal required components instead of a whole browser?
&gt; Your version is reducing over impure function mutating its argument. So? We can see the argument right there because it's a new object that we just created; not a reference. Mutating it has literally no implication in this code. &gt; How is this an anti-pattern? It's an anti-pattern because it's unnecessary nested iteration. That's bad. You're also unnecessarily instantiating a new object on each iteration and throwing it away on the next. That's also bad. You guys can keep patting yourselves on the back by avoiding mutation everywhere for no reason, I'll write code that runs exponentially faster, allocates less memory, and is easier to read to boot.
For example, this.
I think keep doing tutorials and Google the bits you don't understand.
I realize what purity is and I'm very familiar with functional programming. You can specifically ignore linting lines for cases like this, but if for whatever reason you want your callback to remain pure despite it being used once and the parameters known, then you can instantiate a new object on first iteration and then reuse; or better yet (as someone else suggested) avoid reduce altogether use a loop. There's exactly no reason to write it using the spread operator and a dynamic property, unless your goal is just to use the latest and greatest syntax wherever possible despite it being slower, using more memory, and being arguably less clear. I feel like I'm taking crazy pills. I work on open source libraries for a living, you're probably running code I wrote right now looking at this website. You can thank me later for not clogging up your cpu cycles doing unnecessary iteration.
&gt; This is a pretty broad statement but how a reference is treated is not always the same across all calls to all objects: The difference in Array and Set has nothing to do with references. References work the same. Javascript doesn't let the implementation pick and choose like C does. All it can do is treat an argument like a black box (new Array) or make assumptions (new Set).
That's a terrible idea.
I think there's an issue with both OP's version and this new version. In OP's version, if emailIncluded is false, then the code will try to spread null, which is an error. In your version, basically the same problem. if emailIncluded is false, then your code tries to spread false, which is an error. Remember, clever code is bad code. I think we tried to get a little too clever here, which is how both versions introduced a bug that folks didn't notice. I think we should give /u/qbbftw's reply a second thought. It may not be sexy, but it doesn't try to be clever, which makes it less likely to hide a bug. cc /u/PMilos /u/LucasRuby
In rust , map is a method for iterator, you have to make an iterator first on collections to call it, that's fair enough cuz rust is a static and strong type language, you can't call map blindly on collections, what if that collection do not support it. And what it returns is a struct, that's also fair, cuz map don't know what type the data before being iterator. So it just give you the most common structure. But Python, you can call map directly, but it returns an iterator, come on, I have already mapped, what I need is the mapped data, not an iterator. These critism are just my personal feelings. 1 oop Totally uninterested. 2. Dynamic Every type languages have pros and cons. It's not a problem by its self. 3 lambda It looks like a joke, you like lambda? Now try to type "lambda...." OK, you have a lambda.
I did a bunch of benchmarking on various machines about a month ago and Firefox was lagging quite a bit in performance compared to Chrome and seems to be less energy efficient when on battery power. The performance I measured using Jetstream and a few other similar online JS benchmarks.
That's funny. Then there is no point to use \`for of\`, \`Array.prototype.reduce\`, \`forEach\`, \`map\`, \`filter\`, etc. at all. We all know the old \`for (;;)\` loop is the fastest. You can do anything without ES6+ features. &amp;#x200B; Why don't just still write c or assembly for saving more CPU? I am pretty good at it. &amp;#x200B; I'd write \`Object.fromEntries(cities.map(({ name, visited }) =&gt; \[name, visited\])\` if I intended to use latest syntax. It probably faster than \`reduce\`. I still prefer \`reduce\` version because it's much more understandable and FP is not the topic (I would use \`Object.fromEntries\` together with curried \`map\` in \`flow\`/\`compose\`). &amp;#x200B; But there are still so many reasons to use some code style guide and force the team to follow the rules.
There's only one reason why I won't play with this for 2 hours right now, and that's because I can't really save my work. If you were to continue work on this, I think that'd be a good goal. Thanks for the link, this is fun :)
&gt; So? We can see the argument right there because it's a new object that we just created; not a reference. Mutating it has literally no implication in this code. Try to define `init = {}` and put into your code instead of `{}`. You will see it is mutated, so the code is far from safe. &gt; It's an anti-pattern because it's unnecessary nested iteration. That's bad. Can't see any nested iteration in my example. &gt; You're also unnecessarily instantiating a new object on each iteration and throwing it away on the next. That's also bad. Instantiating new object is safer than mutating existing one. It it is a top best practice e.g. in Redux. &gt; You guys can keep patting yourselves on the back by avoiding mutation everywhere for no reason, I'll write code that runs exponentially faster, allocates less memory, and is easier to read to boot. I'll worry about mutation when it matters. That sounds like your personal preference that I respect. But you should make it clear is personal, not a well-established best practice. Mutation and side-effects are well-known to cause harm.
this?
It's a keyword in javascript.
Don't forget to spay or neuter your pet!
This has nothing to do with writing in c or assembly, it’s about understanding the basic runtime complexity of your code which is applicable to any language. I didn’t say don’t use modern syntax either, we’re talking about this _specific code_ in the example. Writing bad code is one thing, but using it to teach beginners is another thing altogether. It’s probably why we’re having this argument at all, because bad code is being taught to people that don’t know better. I want them to know better, I want you to know better.
You're absolutely right. I was going to suggest the same change. Every time something gets popular, the bandwagoners start piling on with bad advice. There is nothing clean about creating a new object in a loop in order to add a property to it. It's called accumulator for a reason.
This is cool. It seems a bit more complex than just using something like Webpack or RequireJS but I probably just need to play with the other tools a bit to get a feel for it. This is a step toward what I think is a great long-term goal for the JS ecosystem. As helpful as all the JS tooling is these days, I look forward to the day they will mostly be obsolete, including the ones listed in the article. We will still likely need compilers for languages like TypeScript, ReasonML, PureScript, Elm, etc... but ideally those should be the only necessary tools for building robust web apps the way you want. Everything else is essentially a set of very sophisticated hacks to get around older web constraints. Selfishly, I just want to compile and ship without dealing with 20 config files in my root folder.
This is a fine solution, too. No useless objects and Ivory tower induced stupidity.
Not trying to be a dick, but you are dead wrong. Things are not best practice because a blog said so... They are best practices because they are literally demonstrably better, like the solution provided above.
&gt; Can't see any nested iteration in my example. That’s why I call it an anti-pattern. You (and others) don’t see the nested iteration; but believe me, you’re doing it. How do you think the spread operator works?
Yup and if you're a fan of one-liners you could omit the return statement and the brackets surrounding the lambda function body since it contains a single expression, therefore it will be an implicit return : ``` const result = cities.reduce((accumulator, item) =&gt; Object.assign(accumulator, { [item.name]: item.visited), {}) ```
It is not and error, it simply won't assign an extra value to user. Try it yourself: let a = { ...null }; undefined a Object { } and: let b = { ...false }; undefined b Object { }
You can try https://learnjavascript.online (it’s not free, but worth trying).
If you're not committed to a particular browser or the concept of an extension, you could consider using the Vivaldi browser to split your screen and then a user css extension to color your Reddit threads.
That's an argument for teaching ASI and linting, not for using semicolons. There are a minuscule number of edge cases where it makes literally any difference at all, and I can't think of a single one where the better solution is to manually insert a semicolon rather than writing the code a different way. What's your example with destructuring arrays? I can't think of anywhere that it'd make even the slightest difference.
You're right. I mis-tested.
I didn't find the code snippets to be all that confusing, which probably means I got most of them wrong. Godspeed gentlemen
&gt; `return {a: 'a', b: 'b', ...(c &amp;&amp; c: 'c')}` Your syntax is broken, you are missing a `{}`
Maybe. I was writing without a specific order.
No, it's not, but you can achieve the same as you can with Array.prototype.map. The difference is that you can use this approach on Set, for example.
No. IE is prohibited on purpose.
Hi, thank you 🙂! I’ve already built one. Will publish very soon 🙂. Look here: https://codesandbox.io/embed/embla-carousel-react-znjzv?codemirror=1
&gt; How do you think the spread operator works? And what do we know about how it works? Are you implying performance issues?
Here are the examples: let [one, two, three] = [1, 2, 3] [one, two] = [two, one] // an error should be thrown here // some nice example without an error let one, two let three = 3 [one, two] = [1, 2] console.log(one, two, three) // =&gt; undefined undefined [1, 2]
I think so. Otherwise, it's very difficult to allow the users to interact with the data. Each interaction would potentially trigger a HTTP request to a back end that does the data analysis. Isn't that inefficient?
Some thoughts on the backend portion, since it's short. I'll write something up on the frontend later if I get the time. Not sure why you're assigning to `global.__root` in index.js just to require a module. I'd just require it from the relative path. Did you copy and paste it from somewhere, and that's why you've defined the variable with `var` while using `const` everywhere else in the file? I'd recommend forgetting that `var` exists, as much as possible, and stick to `const` unless you absolutely need to reassign the variable, in which case you can use `let`. I'd also reorganize index.js to put the requires for node\_modules first, followed by your own modules, then other variables. It's entirely a matter of preference, but I think this order is (usually) the best way to keep things organized. const express = require('express') const cors = require('cors') const db = require('./dbConnection') const SongController = require('./songController') const app = express() const port = process.env.PORT || 3001 app.use(cors()) app.use('/api/songs', SongController) app.listen(port, () =&gt; console.log('starting app')) In songController.js, it'd be a little bit cleaner to remove the braces from your promise callbacks. router.get('/list', (req, res) =&gt; { songModel .find({ rank: { $lte: 50 } }) .then(songs =&gt; res.json({ songs: songs }) ) .catch(err =&gt; res.json({ err: err.message }) ) }) I'm not sure if you're aware, but if you're creating an object and assigning a key value to a variable with the same name as the key you want, you can omit the value. Might take a little getting used to, but it really tightens things up and cuts down on the noise. // instead of this const rank = req.query.rank songModel.find({ rank: rank }) // you can do this const rank = req.query.rank songModel.find({ rank })
Of i rember well you can set a disconnect event of the front end side of your app
Thank you!
I'm curious why you want to study that question. Seems like the most obvious answer in the world.
How about using GraphQL API in the backend and Apollo client (it works in [Vue](https://vue-apollo.netlify.com) too) in the front? You’ll get the reactivity as you can watch queries and the data will automatically update on the client (which is not an easy task to do on your own). For the db, Postgres is always a fine choice, specially when you are comfortable with SQL already.
The build steps are a necessary evil. By getting to know various `package.json` options and a task runner (be it grunt/gulp or simple npm scripts), you get to know the different ways you can configure, customize and automate your builds which is very much needed when developing even a slightly non-trivial app.
Yeah, you see, those aren't examples of why anyone should use semicolons. They're examples of why people should write better code. I'll give you the benefit of the doubt that *you* don't personally write garbage like that and were merely using it as an example of how one can screw things up by writing terrible code. If you're writing JavaScript, you need to *know* JavaScript. And that means understanding ASI, whether you use semicolons or not. And it's not even that hard to understand ASI anyway, so it's really absurd to throw around "but beginners will be confused" or argue that it's "dangerous" to omit semicolons. These two rules will cover basically *every* case where ASI might bite you: 1. *Always* open a parenthesis after `return` if you intend to put the returned value on a new line. 2. *Never* start a line with a parenthesis or square bracket. The argument you're making is the same as arguing that you shouldn't use implicit return with arrow functions because you'll get an error when returning an object if you don't wrap it in parentheses. It's a ridiculous argument. // bad programmer const four = () =&gt; { return { four: 4 } } // good programmer const four = () =&gt; ({ four: 4 }) // bad programmer let one, two; [one, two] = [1, 2]; // good programmer const [one, two] = [1, 2] Go ahead and use semicolons if you like. But they aren't going to protect you or anyone else from ASI.
I actually think this is a amazing experiment. GG!
Recommend you to have a look at php and python frameworks once (django, flask, symfony, etc.). Java backend webdev is a mess these days, JSP/Servlets are great in theory but a PITA when it comes to get anything running easily, hence the community is shifting to these other technologies of late. Even node.js/express backend is also quite good, to be honest. The advantage is that you won't have to learn another language (assuming you already know JS).
You can use Array.from with a map function instead: &gt; var a = Array.from({length: 3}, () =&gt; []) undefined &gt; a[2][0] = 'foo' "foo" &gt; JSON.stringify(a) "[[],[],["foo"]]" If there were a "generate" function like Dart's, it would look like this: Array.generate(3, () =&gt; []) Well, if enough people use the Array.from workaround, there will be hopefully enough evidence for making a strong case for adding a "generate" function.
This article from Sitepoint could be a great resource about \`@media print\` [https://www.sitepoint.com/css-printer-friendly-pages/](https://www.sitepoint.com/css-printer-friendly-pages/)
only 1 I had trouble with but that's because I suck at modulo and was not the fault of the code.
Wow, nicely done. Awesome. Thank you!!
[removed]
Well I'm not sure they work on the browser, it is not stated in their README and watching the code I think they are not suitable for it. I have bundled it with rollup so mine works properly on browser. :) &amp;#x200B; Thank you!
We have very different opinions about **bad** code. First of all, correctness is the most important thing. And `reduce` + spread is always correct in all cases, not only this _specific case_. To me, readability is the second. **Today's** performance seems very important to you. The code of this _specific case_ looks bad to you, but **just slow to me, not that bad**. JS engines are much faster than 10 years ago, and computers. I guess the *bad* version would still faster than the fastest version running a decade ago on average. It's very unlikely to be bottlenecks. We had a lot of tricks to improve C performance in 90s. But things changed in this century. Most of them are no longer faster than its more readable version. Now `reduce` + spread is way slower. But I am pretty sure static analysis can recognize and optimize it. Just no one has done the job or not well known. Maybe some babel/webpack plugins or something else will do that job, maybe JS engines will be smart enough to optimize it, or forever slow. We don't know. But the readability does not change. Writing correct code is most important to beginners. Since reactive frameworks and fp are very popular now, how to write correct fp-style functions is much more important than how **today's** JS engines work. The first step is just to get used to writing pure function. Writing more readable code is also more important than fast code in a team. 10 years ago the code generated by the first version of golang was slower than Node.js. You will have plenty of time to make your product faster, but the project must survive first. That's why all new languages, new frameworks and new features are eating all new hardware, just to make people more productive. You have to waste hardware because your boss does not pay CPUs salary.
If you are using lodash with a bundler that supports tree-shaking. You can import get like: import get from "lodash/lib/get"; This will only load that module and it's dependencies rather than the whole package. Fair play on creating your first package, I imagine it was a good learning experience but I wouldn't expect anyone to practically use it.
I’ll let you know as soon as I’ve published it 👍🏻.
Yeah that's right! There are tons of famous libs that do the same. But as you state it's a good learning about creating a standalone lib and publishing it. &amp;#x200B; Thanks for your feedback! 😄
Them some ugly codes. All the best in your studies.
You should consider making the email input optional, I would like to participate in your survey, but am not at all interested in the raffle.
Awesome, email and youtube are the last ties I have to google but I haven't been able to find anything to replace mail. Tutanota looks really good.
We want the data to prove that And also see what constructions have the most effect
But I don't see how a browser would change that? The need for a network request would depend on whether or not the back end is local or not, and whether or not the interaction is performed in a browser or in another application wouldn't change that? Also, wouldn't a developer or data analyst be doing most of the analysis, and then present the finished report to a user? I can absolutely see the need for interactive reports, but I still don't see how this translates into a need for the analysis itself being done in the browser? Btw, I'm not trying to dispute what you're saying. I'm just trying to understand why it can be useful.
I don't mean to criticize your work at all. I'm just pointing this out because I think the npm registry is getting flooded with duplicated efforts.
Hello, I think you need to be less verbose, and go to the point, i'm fact you don't even asked a Question. &amp;#x200B; If you want javascript type checking, go for typescript, is a superset of Javascript that add you a very good typecheck (Also, use vscode, that have a very good support for it)
Wouldn't a developer want to develop their own portfolio website?
Yeah this is not a replacement for large and complex apps, so it is defenitely needed still 😄
A build is not required with the new native module loading, so now everyone has more choices and aren't forced to have a build step 😄
And thanks for downvoting my correctly working non-mutating implementation :)
And thanks for downvoting my correctly working non-mutating implementation :)
Can you elaborate? Which one is demonstrably better and why?
The "Angular is for the enterprise" thing is a meme. The worlds most demanding services and sites are built with competing technologies. It's laughable to say what took you a year in Angular would have taken ... years otherwise. I have yet to see any project that wouldn't at least shrink to half the complexity and code size in something that is newer than Angular, given that most of the principles that drive it are severely outdated and antiquated.
why use an existing framework when you can write a new one ? /s
There is ultralight (a c++ html + css + small js runtime)
Indeed, safety first (no mutation), readability second, and performance last (only when everything works, safe AND the performance benefits are measurably significant).
Which also indicates when the connection was closed.
Accumulator is not a new object. And even if it was, someone can accidentally replace it with any object in the scope. Why writing unsafe code where there is no need?
What's wrong with PHP? it's actually the most used back-end language and the most easy one to start with.
Yes, the point is to see which tricks trick the most people.
I don't think I got a modulo question. The comma operator is evil, though. Did I just forget, or are participants getting 10 random samples from a larger pool?
As with everything, depends on what your problem is and how scalable it needs to be, who will maintain, etc. If it's just for you, pick anything and have fun. If you are doing a startup, pick something that cover your needs. If it's part of a bigger company/application you probably have to pick between the most optimised and known tools since you will need developers and training cost money. Anyway, plain js is cool.
A good answer, I was definitely too broad I guess. Do you think using pure Javascript looks bad, from a development perspective? Say I were to release my little project on github or here on Reddit as pure Javascript and web server. Do you think the communities will look at it in disdain? Will they see it as inefficient?
I dont think its something defined, neither. Hahaha, sorry for being this unclear, but I definitely believe that it will depend on the project itself. Give it a try, and let us know. :)
Whatever works! But if this is the line of stuff you like to do, smart mirrors and stuff like that, then you should really look into Node, as it would make things a lot simpler.
I agree, I keep putting it off, and a buddy of mine keeps pushing me to let him teach me the ins-and-outs. One of the reasons I get frustrated with programming is because as soon as I get comfortable with something, a new practice will come along.
If you're forced to use IE as a browser, you should probably look for another job
It might look nice and readable in this simple example, but people are just going to abuse the ever living shit out of it, and soon we will see stuff like this: ``` return {a: 'a', b: 'b', ...(x &amp;&amp; y.length &gt; (o.length - l)) &amp;&amp; {c: y.length &lt; 0 ? "X" : "Y"}} ``` Or something even more complex. Forcing logic outside of the definitions would be much better IMO.
I did something similar as a small demo to learn about [Intersection Observer](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API), which can tell you when an element is visible in the viewport. That could be an option depending on what kind of browsers you need to support. [https://caniuse.com/#feat=intersectionobserver](https://caniuse.com/#feat=intersectionobserver) &amp;#x200B; You may see the demo and play around with the code here: [https://jsfiddle.net/jonahe/0znayq39/](https://jsfiddle.net/jonahe/0znayq39/)
r/learnjavascript
Its used a lot for websites, but it ranks 9th among programming languages in general. I guess "easiest to start" would be a matter of opinion, but nodejs/javascript seems much easier. Granted I haven't use php in 10 years. Besides I was just trolling/joking with ya. The "best" language is more a matter of personal taste.
&gt;Thing is, I built it in pure JS using a web-server (nginx). I assume you mean static files served by nginx, running JS on the client-side only. There's absolutely nothing wrong with that, as long as it works for you. There can be several benefits of using a server, none of which may apply to you: * All client-side code can be read, and there's no fool-proof way to protect it. If you want to do something without anyone reading your code or being able to change it, including authentication, you need a server. * If you want a way to store information that can be cached for multiple users, you need a central place to do so. * Many APIs have CORS rules that restrict them from being used on the frontend.
or GSAP vs CSS, 90% of the JS animations are GSAP code or stuff like Vivus which is interchangable with GSAP Drawsvg plugin
Class instances are useful when you need to store some state, and have methods that operate on that. If you don't need that, and just have a collection of functions, you don't need a class. Static methods are useful when you have a class, and you want to have some functions that are associated with the class, but don't operate on the stored state. That's why `this` doesn't really fit for static methods, because they operate on the class prototype, not an instance.
Oh! Nice! That's exactly what I want, maybe with some modifications. &amp;#x200B; Thanks a lot!
Plain JS is absolutely fine. It just doesn't scale well, so here frameworks emerge. And the better you known the plain, the better you can understand what happens under the hood.
Hi /u/GermanJava, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/SurgioClemente, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/abrickofcheese, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Terraknor, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/MyrsVonNiem, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/RainbOne, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
definitely depends on the code haha
Hi /u/SRacer2016, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/davazose1111, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/SkoozyManoozy, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ExtralegalAlien, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Lightning3240, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/fortheone01, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/rakshans1, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/silverdragon3000, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ToxicKeshik, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/JetteLeLoin, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/GameMaster1928, this post was removed. To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Lastly, instead of all the above, if you just want to showoff your project, feel free to post it to our weekly _"Showoff Saturday"_ post. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/cIi-_-ib, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I PR'd some stuff that you might want to look into. I wouldn't take it as gospel per se but I've been doing front-end dev for about 8 years now (4 years w/ react), so I've learned a lot of tips and tricks :) Good luck, great progress in 4 months really
Hi /u/TKB21, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I fail to see how this is low-effort or how it fits any of the criteria. I was asking for discussion on viability of raw JS as opposed to JS frameworks in today's age, it's not easily google'd. There was literally a post from yesterday where someone started a discussion of Chromes developer tools vs Firefox's, at least my question was explicitly regarding JS. You're a bit over zealous, /u/kenman
The linked url uses a cert for a different domain.
A relational database isn't ever really required. However, it is usually the best tool when your data is relational. For example, you mentioned that some users have clients (which denotes a relationship between users and clients). Maintaining this relationship properly is much easier in SQL than in NoSQL since they are separate tables which reference each other. In a NoSQL database you might be tempted to nest one in the other or duplicate the data. In the case of nesting you then need to know something extra to update a client (the user id, and where they are in the list of clients). In the case of duplicates you need to update things in two places so that the data stays consistent. NoSQL on the other hand can be really useful when you want to save lots of independent events or data. For example, you may want to store user settings, user accounts, or game saves in a document store. For all of these cases you generally want to get ALL the data for a user every time they access the app. As well as the fact that the two different records have nothing to do with each other. Two games saves are completely independent. All you need is an ID to load the save. There are other use cases as well of course but this is just a high level difference to help you get the idea.
Always nice to learn, right? :D Building a reactive framework might be one of the best challenges you could do these days, It's a truly never ending project &amp;#x200B; Though. I have to say, I'm sorry. But the bigger alternatives have the API's boiled down. They are simple and intuitive, I barely have to read the docs to fully understand whats going on. &amp;#x200B; This feels more like angular 1.x, where I can read the docs for 2 weeks and still not understand jack shit So my critique would be to try to simplify the API &lt;3
Hm... True story. That is my mistake. My site has not HTTPS cert yet. Some tool had to overwrite my link at some point. This is a correct one link: [http://kodipe.pl/2019/06/03/javascript-adler-32/](http://kodipe.pl/2019/06/03/javascript-adler-32/)
Because we are developers. [https://en.wikipedia.org/wiki/Not\_invented\_here](https://en.wikipedia.org/wiki/Not_invented_here)
It does include it now once again.
Did you check it (meaning: did you use varied test sets to check it gives the same value than some verified implementations)?
Hi /u/18NorthSystem, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I'm just confused because all of the objects I'm getting back with post requests are empty. I'm thinking my syntax must be wrong.
Ye
You should probably fix your link
I've only checked that with some online tools. I didn't run any other code for Adler-32 computation.
But I put a link in the comments
I’ve worked with or on several reactive UI frameworks, and I think you need to rethink how you explain your framework to convey the benefits, especially in comparison to other frameworks like React. The bullet points on your home page need to be about the unique value of your framework. The things you are considering features or innovations sound pretty generic to me. Like if you created a new database and the first thing you always said about it was, “Nodes are either DataShards or Transactors.” Ok, so this is a distributed database, it has two types of server processes, it shards data. None of that is very interesting.
https://expressjs.com/en/4x/api.html Look at express.json() and express urlenconded().
I can't find any documentation as to how I would implement though. EG: &amp;#x200B; *app.use*(*express.urlencoded*({extended: true})); *app.use*(*express.json*()); &amp;#x200B; const *product* = { *name*: *req.name*, *price*: *req.price*, }; &amp;#x200B; returns just an empty object.
Ah, sorry! I'll restore it.
Lol no problem
It’s still saying error
My advice is ask yourself what sets your framework apart from existing solutions, and highlight that
That really helps. Appreciate it!!
Unrelated: the visual aesthetics of this blog has its own unique charm.
Those that did more than a couple weeks of bootcamp, yes.
Off-topic: the visual aesthetic of this blog really has its own unique charm. It's truly something else and nonetheless seems to do the trick pretty well.
Hi /u/Maximos118, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
Have you heard of "flattening" a tree? You run a little recursive routine on it that adds entries to a table for the leaves. Like converting a leaf that is something like a.b.c.d = "hello"; to table\["a.b.c.d"\] = "hello"; What you get by indexing this way, is that you don't need to worry about any intermediate nodes. The leaf you want either exists or it does not.
That's called "flattening" a tree.
Surma, gotta love this guy. He's got the coolest job.
Jerk move to make everyone go through that quiz and not tell them what they got right at the end.
Nothing about the "guards and defaults" usage of `&amp;&amp;` and `||`? That trips up some people. No confusing scope and context usage?
No prob!! I also think npm has waaaay too much packages in it that do the same things... This was intended because I needed this library, and I needed both for Node and browser, that's why I wrote it.
Sure, you just need to do: &amp;#x200B; let answer = prompt('Whats your name?'); if (answer === 'John Doe') { console.log('Hello John'); } else { console.log('Hello stranger'); }
I agree, but the same argument could be made for a ternary operator. Should we force a developer to use an `if` just because people are abusing it? There’s always going to be bad developers. We shouldn’t force ourselves from using new features just because ‘people might abuse it’.
Alright, thank you so much!
&gt;https://en.wikipedia.org/wiki/Not\_invented\_here I totally agree about the api. I need to better organize and further clarify how things work. I also plan to add a tutorial page that will explain the big picture and reveal how everything works together. Thanks!
Hi /u/lucamezzalira, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Wow i like it. Keep up the good work.
Thanks for the feedback. I definitely need to explain the benefits better. But the genericness is a main feature. With these generic, simple components, you can quickly, and intuitively, build highly involved and complex UI's. I've done it. Perhaps if I wrote something like, Spyne's simplicity is a feature, not a bug, and show the power behind the simple components. I also need to show how it all works together, perhaps with a screencast. What's really clear in the feedback that I'm getting, is that my api is not clear. and that's really useful to know. &amp;#x200B; I really appreciate you taking the time to look at spyne. Thanks again!
Bodyparser0 is for incoming requests, not outgoing.
I spent 6 months creating a full fledged physics counterpart to my game engine. Day of completion I try it out and it’s absolutely horrid. Tanks my FPS and performs like crap. Next day I replaced it with bullet. Semi unrelated but just remembered the story.
We plan to provide all the data we got as soon we analyse it. If you wish I can PM you your personal result
Added license, it was in the js file.
That is actually a really good sugestion! I am sorry we didn´t think of that before, we will add this on our paper.
I will fix that as soon as I get home Thanks !
I'm not saying all data analysis needs to be done on the browser. However, it'd be good to be able to do some in a browser. If we had that capability, we could just send all the required data to the browser upfront, and then depending on user interactions manipulate the data completely in the front-end. Here is an example of an app I'm working on that has no back-end: [Renting vs buying](https://www.bluprince13.com/apps/renting-vs-buying/). Also, have you seen [explorable explanations](https://explorabl.es/)? All that awesome interactivity is possible only because the code is executing on the front-end. If you had to rely on HTTP requests - the interaction would be way too slow. Indeed, I think part of the motivation for the [Dash](https://plot.ly/products/dash/) library, has been that it's so hard to make 'web-based analytics applications' using just JavaScript. &gt;I still don't see how this translates into a need for the analysis itself being done in the browser? I know I'm not explaining it very well. Just need to find the right words!!
Pockets wanted
Well I'm just saying, you asked people to spend their time to help you. It would have been *trivial* to just tell them the answers at the end, but you decided not to repay their kindness.
I hire for people with pure JavaScript knowledge first, and framework experience (when needed) second. I can adapt the former to whatever our needs are much more rapidly than the latter.
Sure I took your feedback as a critic to help us improve I will try to add this sugestion today if possible ( I am at work atm)
EuphoricAgnostic: Did I waste my life by making JavaScript games? St. Peter: Thousands of people played your JavaScript games every day. St. Peter: You wasted thousands of lives by making JavaScript games. ^^^^apologies ^^^^to ^^^^u/sellyourcomputer
 Online demo and repository available to learn how to use the jfa-pwa-toolkit library: Demo: [https://pwa-toolkit-demo.jordifernandes.com/](https://pwa-toolkit-demo.jordifernandes.com/) Repository: [https://github.com/jfadev/jfa-pwa-toolkit-demo](https://github.com/jfadev/jfa-pwa-toolkit-demo)
Okay, one JavaScript job please. Will work for Stackoverflow credibility
Very nice. My only suggestion from a ux perspective is to reverse the aiming interaction. Maybe it's just me, but it feels more intuitive to drag back like I'm aiming a pool queue instead of setting up the direction of the ball. On mobile, your thumb will also block your target making it harder to aim.
You can check for yourself in dev console `Array(1000000).fill(0).reduce((acc, _, index) =&gt; Object.assign(acc, {[index]: index}), {})` vs `Array(1000000).fill(0).reduce((acc, _, index) =&gt; ({...acc, [index]: index}), {})`
Awesome, I'm sure people will appreciate it :)
thank you, this definitely helped me understand the need better :) I loved the explorable explanations!
Is it? I haven't actually tried out R. I was just going by comparisons between Python and R online that I came across.
Hi /u/dlelotnclalreaew, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/EuphoricAgnostic, this post was removed. To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Lastly, instead of all the above, if you just want to showoff your project, feel free to post it to our weekly _"Showoff Saturday"_ post. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ElCursi, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ivano1990, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/apsillers, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I think you’re misunderstanding me quite a lot. I am not talking about the API. I am not talking about whether the framework itself is simple or generic. I’m saying the *description*, the story, the pitch, the motivation, the summary... should sound novel and interesting, if you think you’ve made something novel and interesting. We’ve been living in a post-Backbone age since maybe 2015. Everyone is already sold on simple, reactive, composable, functional, etc.
test
I haven't downvoted any of your responses. Have you considered other people disagree with you as well?
Just for correctness sake: &gt;This IR is called LLVM, as the IR is modeled around a Low-level Virtual Machine, hence the name of the project. This is simply untrue. It is explained in the very first paragraph of the project's page: &gt; Despite its name, LLVM has little to do with traditional virtual machines. The name "LLVM" itself is not an acronym; it is the full name of the project.
As a regular programmer in both languages, I can't not agree more with you. Don't get me wrong. Python is a beautiful language when used as intended. But most of the problems you may face don't require this "pythonic way" of programming. In the other hand, the language constructs of JS are fewer and simpler, so you get way more productive faster. Eg.: Why in Python do we have three types for arrays? (Lists, tuples and sets). Python has a huge base library that you should at least know in part to develop any usable software. This is contrary to JS, which doesn't have a built-in library. It's only the language. When you feel that you need a library, you look for one. It could be some library that is part of what NodeJS provides, or a better third party one.
&gt; Originally published at pathgather.com on January 8, 2016. Since publication, the Relay mutations API has changed *significantly*, so the specific recommendations here aren’t as relevant as they were in 2016, but hopefully you’ll still find some of this interesting! Get out of here...
It may be prudent to have some documentation if you're going to share this here!
Looking good
Hi /u/Direct_Sarcasm, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
TL;DW: You can make a infinite number of variables exist simultaneously, with any arbitrary values, by hijacking how the JS engine resolves variable identifiers. `with(new Proxy(...))` leads to an alarming world of possibilities. You might learn a little about the scope chain, or you might learn a little about `Proxy` objects. I only had 10 minutes, so if you have any questions, I'd love to go deep on how this works (I can cite relevant ECMAScript sections, interesting limitations, etc.) and how it's a case study in why `with` is a performance disaster that was rightly canned in strict mode. If you want to explore any of the slides/examples more closely, you can play with the embedded REPLs at [http://www.apsillers.com/with-proxy/](http://www.apsillers.com/with-proxy/)
Whoops, I'm terribly sorry! Thanks for the clear explanation and link to the sub's guidelines. I've reposted it correctly now.
This has absolutely no documentation on how to use it, nor examples. While the code could be vivisected to discern meaning like entrail divining proper documents are preferred.
It's pretty good. It's a lot closer to Vue than it is to React. I didn't fully need to dig into the component API and I'm sure there's weird pitfalls there. The performance is outstanding though, my bundle size is smaller than the entire React library would be, and it's able to optimize animations to work off the main thread. I would love to see what building a REAL web app is like with it though.
Absolutely great post! Just one thing. LLVM is not a compiler its a framework for building compiler backends. What you did is write an IR backend. Just a minor gripe but I prefer we stick to facts.
I thinks spyne is built for developers who, like myself, are unhappy with the post-backbone age, who believe that backbone had it right all along, and still has it right (it's still used on many large sites). Developers who are content developing in angular-redux-vue will probably remain disinterested in spyne, and that's okay. **But here's my elevator pitch:** *Spyne.js* is a Javascript, frontend framework that provides simple, but powerful tools to allow developers to focus on the complexity of the UI rather than on their codebase. Among *spyne's* tools are: Reactive, functional patterns in a declarative, backbone style framework that renders on the actual DOM, rather than a virtual DOM Interactive-View layer that creates a chain of observables to reactively maintain state Data layer with the power of RxJs, but with a intuitive Channel system Routing Channel based on mapping the window location to properties, than onto methods Efficient system of binding pure static functions to any component I think a streamcast may help to make the benefits more tangible.
I call it a compiler framework in the post. But I also call it a compiler because the "technically correct" terminology would be very confusing for someone who doesn't know llvm. I am hoping it's, uh, correct enough ^^ I think the LLVM project also contains libraries for writing front-ends, doesn't it? Not sure if limiting it to back-ends is technically correct either. Happy to be proven wrong here.
You are [technically correct](https://i.imgur.com/gRk1uZm.gif). I should have actually read the LLVM page. I played with LLVM _years_ ago, when they were still identifying with their acronym. [It seems they have stopped using that acronym.](https://en.wikipedia.org/wiki/LLVM#History) &gt; The name LLVM was originally an initialism for Low Level Virtual Machine. This initialism has officially been removed to avoid confusion, as the LLVM has evolved into an umbrella project that has little relationship to what most current developers think of as virtual machines. So apologies for not doing my research. Luckily I don’t think it’s essential for the blog post :)
😇
You're right. And no, llvm doesn't provide api's for writing frontends. That would defeat the purpose of the framework. You can find that here: [http://www.aosabook.org/en/llvm.html](http://www.aosabook.org/en/llvm.html) The compiler engineer is responsible for generating an AST and translating that to llvm IR. Thats the crux of llvm.
My advice is to jump into a Javascript freecodecamp.com course or another one I like called Kenzie Free. Pay close attention to data types and methods. Also focus some time on DOM (Document Object Model) manipulation. This is what allows you to manipulate the HTML elements and CSS styles using javascript. Happy Coding! Let me know if you have any other questions. Last but not least, read the documentation.
Hey, sorry for not checking out the guidelines first. Will repost with a github link later
Agreed, using &amp;&amp; for ifs is an anti-pattern only good when you are code-golfing. Leave that stuff to minimisers
Oh right, so I meant it has libraries for (conveniently) emitting IR, but I do realize lexing/parsing/transforming is still very much the developers responsibility. I guess I agree with you more than I agree with what I said.
No problem, man. Love your blog and the design BTW.
You get start by seeing videos on YouTube and you can seek advice on everything you find difficult at Stackoverflow, github and many many other websites and communities on the Internet(plus reddit). What I did when a was at baby steps, I downloaded some apps on my cell phone. Apps like grasshopper, sololearn, an programming hub. Use them and see which you like the most. Hope it helps.
Tensorflow with Node is GPU accelerated and about just as fast as Python. If you already know JS it's a perfectly fine way to start, the only downside being fewer learning materials as the Python ML community is larger. Another big pro to Tensorflow for JS is building your models in Node (Server side) and using them in the client side easily (less computationally taxing)
The best kind of correct.
Dev tools are a little behind imo but it's definitely useable as a main web browser, for dev and browsing. When the Firefox engine has been completely replaced by Servo it's going to be lightening fast and chrome is going to feel slow.
It remembers me [old React's code](https://github.com/facebook/react/commit/260d90ba029483c4d2bca77ad89abf8d16e7d545#diff-0b07e74d710d579639f69aeaabcc5c24R27), the only change is that it uses binary arrays instead of strings. It may be what's changing the value. More about the old adler32 code in React: here's [a test case](https://github.com/facebook/react/blob/5be6a1a6d17241de8e536562ccef6cc5a520fc60/src/renderers/shared/utils/__tests__/adler32-test.js) and [more performant version](https://github.com/facebook/react/blob/5be6a1a6d17241de8e536562ccef6cc5a520fc60/src/renderers/shared/utils/adler32.js).
Your welcome to hit me up , if you like some tutoring !
Hi /u/notstevee, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Kumagor0, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/lizzard6192003, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
It's really good and clean but I don't like the "modern full width" pages which makes you move your head when reading on a big screen. Maybe little bit less width and a pt smaller fonts would make it even more awesome.
Hi /u/mrfrontend, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I had no idea the JS could actually support metaprogramming! That's very cool.
YouTube doesn't already tracks where we left off?
Definitely. Sure, there are things you can do in Python and not R, but like I said, R is capable of doing many "general purpose" tasks efficiently. Web scraping is very easy in R. Every single thing in *Automate the Boring Stuff With Python* can be done in R easily.
Zooming out might help :-)
Open it in explorer 11 and see the show.
Site keeps telling me to come back or refresh after loading for a second I sometimes got to see the blog for a second before it gave up Cache? http://webcache.googleusercontent.com/search?q=cache:https://dassur.ma/things/c-to-webassembly/
let array = \[{a: 1}\]; let set = new Set(array); set.forEach(elem =&gt; elem.a = 2); console.log(array\[0\]); &amp;#x200B; Will it be 1 or 2? Of cource it will 2, because you're passing references. References never "behave differently", they behave as references. Unless you explicitely clone the object, which Array.fill is not doing.
honestly, it's not just ES6 that's new. using `document.getQuerySelectorAll()` still means you're going to be developing with a jQuery mindset to imperatively manipulate the DOM and hold a lot of your state there. i would recommend reading up on building declarative interfaces/components in a declarative way rather than the old jquery/imperative way. if you'd like, you can try domvm [1] or Mithril to start out with (neither requires a build step, Node, or any tooling) to get a taste of the difference. most of what you learn will translate to React and other frameworks when/if you decide to migrate. [1] https://github.com/domvm/domvm (disclaimer: i'm the author) [2] https://mithril.js.org/
I found this useful when moving away from jquery: [http://youmightnotneedjquery.com](http://youmightnotneedjquery.com)
ES6 isn't that much different in terms of the syntax, there are just some new features that make life easier. [Just read up on the new ES6 features](http://exploringjs.com/es6/ch_overviews.html). The important ones to remember are the lambda functions (no more `var self = this;`!), promises (learn these first, then learn the async/await syntax). That will get you up to speed on ES6. No when it comes to jQuery, the new hotness is to use one of the big three libraries React, Vue.js, or Angular for DOM manipulation instead. I recommend starting with the [Vue.js tutorial](https://vuejs.org/v2/guide/) and focus on the core concepts like how binding to the DOM is done, the render cycle, and things of that nature. Once you learn one library the other ones aren't very hard to pick up, but Vue.js is definitely the easiest to start with. The last thing is you kind of have to learn Node.js now. Even if you aren't going to use it for your services, it is what is used to bundle and compile (I know the world went and got weird, but it is what it is) web apps now. Although I will say I have quite enjoyed using it as my service layer, and it's usage in enterprise environments is growing quickly.
Helping you is fine, but doin your exam for you deprives you of an education. So what have you got so far? Let's see some code.
Haha you're right! As these are only for us to exercise and not the final exam I didn't think it would be wrong to ask, sorry if I explained myself wrong! Atm I am trying to do exercise Nº1: &amp;#x200B; &lt;script&gt; var name, surname, age; name = prompt("Ingrese su nombre:"); surname = prompt("Ingrese su apellido:"); age = +prompt("Ingrese su edad:"); document.write("&lt;ul&gt;"); document.write("&lt;li&gt;Name: " + name + "&lt;/li&gt;"); document.write("&lt;li&gt;Surname: " + surname + "&lt;/li&gt;"); document.write("&lt;li&gt;Age: " + age + "&lt;/li&gt;"); document.write("&lt;/ul&gt;"); &lt;/script&gt; &amp;#x200B; I don't really know how to validate the capital letter's thing :(
http://cashload.net/?ref=Abraiz461 Click here,sign up and start earning hundreds of dollars per day!!
Hi /u/labouardy, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
https://github.com/getify/You-Dont-Know-JS
Look into `toUpperCase()` and `toLocaleUpperCase()` (`String` methods). Regular expressions may be of use. Remember, you can access strings like an array: `'hello'[0] == 'h'`. Using that knowledge, you should be able to build something. There's a hundred ways you could do it.
JavaScript returns undefined for an out of bounds index and does not throw an error.
Thanks, I believe you. But I'd still love to know... is this the ONLY reason this code is "bad"?
JavaScript never throws an error for out of bounds index (that applies both to too small and too large values) and instead just returns undefined.
https://www.udemy.com/leveling-up-to-es6/
How would javascript in this case comparing a number to an undefined value?
It will always evaluate to `false` as an incompatible type.
I’d be happy to tutor you dm if you’d like
Thank you, I'll DM you!
What have you tried?
I'm going to try doing that, I didn't know the string feature so it is suepr helpful. Thank you! &lt;3
I've tried this: &amp;#x200B; &lt;script&gt; var nombre, apellido, edad; nombre = prompt("Ingrese su nombre:"); apellido = prompt("Ingrese su apellido:"); edad = +prompt("Ingrese su edad:"); nombre.toUpperCase(nombre\[0\]); apellido.toUpperCase(apellido\[0\]); document.write("&lt;ul&gt;"); document.write("&lt;li&gt;Nombre: " + nombre + "&lt;/li&gt;"); document.write("&lt;li&gt;Apellido: " + apellido + "&lt;/li&gt;"); document.write("&lt;li&gt;Edad: " + edad + "&lt;/li&gt;"); document.write("&lt;/ul&gt;"); &lt;/script&gt; &amp;#x200B; But it's not working, the name and surname still appear in lowercase :(
Fixed thanks for taking your time and also with the feedback
After reading this, I find jquery is much more important than before
Thank y’all so much
Hi /u/boona11, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
That sounds good!
I’ve never used jquery
Sure, but you can't style your youtube page any way you like. The idea is to have a TV like station on a website that cycles through the new and unwatched videos whenever someone visits. It uses localstorage to save the data. Once you click play it keeps playing, it's nice to have in the background.
This is like 4x as expensive as twillio.
I dont want to write this…… too long…… var request = new XMLHttpRequest(); request.open('POST', '/my/url', true); request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8'); request.send(data);
Screenshot for Linux users?
ES6 is just the latest version of JavaScript. It adds a few keywords and syntax changes, and modules, but that's it. Beginners harping about "vanilla" JS have made a mess of the ecosystem, making it impossible for beginners. &amp;#x200B; &gt;so when I was a front-end developer EVERYTHING used jQuery, because we only really had ES5. &amp;#x200B; ES6 has NOTHING to do with jQuery. document.getQuerySelectorForAll() has NOTHING to do with ES6. It's a function provided by browsers. &amp;#x200B; Here's a list of ES6 changes: [http://es6-features.org](http://es6-features.org/#Constants)/ &amp;#x200B; There's nothing to "learn". `const` variables are variables that can't be changed, compared to `var` &amp;#x200B; There, now you know ES6.
This is a phenomenal resource: [http://exploringjs.com/es6.html](http://exploringjs.com/es6.html)
This is amazing. I'm going to mess around with it right now.
[removed]
The first one is a pure function and the second one is not since you’re mutating the accumulator. Some linter configuration would actually flag this solution as an error. The first solution is in no way an anti-pattern
[removed]
Hi /u/ashleydavis75, this comment was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
The person who responded to you before is incorrect. The fact that they have 7 upvotes is a bit concerning. While javascript won't throw an index out of bounds error, it *will not* simply ignore the operation. And it won't always return `undefined`. As a quick example from the node REPL: &gt; array = [1, 2, 3] [ 1, 2, 3 ] &gt; array[-1] undefined &gt; array[-1] = 22 22 &gt; array [ 1, 2, 3, '-1': 22 ] &gt; array[-1] 22 Or this example: &gt; a = [1,2,3] [ 1, 2, 3 ] &gt; a[Infinity] = 42 42 &gt; a [ 1, 2, 3, Infinity: 42 ] &gt; a[Infinity] 42 Or even this: &gt; a = [1,2,3] [ 1, 2, 3 ] &gt; a['foo'] = 'hello' 'hello' &gt; a [ 1, 2, 3, foo: 'hello' ] &gt; a['foo'] 'hello' If you were to put this sorting algorithm in production code, *it would cause bugs*. What you should be asking, whether than why this condition doesn't throw an error, is how you can make the condition not exist in the first place. Insertion sort does not need to be run on the entire array. Consider this: if you were sorting a poker hand, you would start with the first card, find its place, move to the next, etc. But when you get to the last card... you don't need to sort it. It *must* be the largest card because all the other cards are already sorted. If you start with the first element, rather than looking at `current` and `current - 1`, look at `current` and `current + 1`. Then don't bother with the last element. Like so: function swap (arr, x, y) { [arr[x], arr[y]] = [arr[y], arr[x]] } const elements = [6, 3, 10, 2, 8, 1, 8, 9, 2]; function insertionSortV(array) { for (let i = 0; i &lt; array.length-1; i++) { let current = i; while (array[current] &gt; array[current + 1]) { swap(array, current, current + 1); current--; } } return array; } insertionSortV(elements); (alternatively, you can just modify the code you posted to use `i = 1` instead of `i = 0` but that's kind of like sorting a poker hand by starting with the 2nd card, which is a bit awkward)