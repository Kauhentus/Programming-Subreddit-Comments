Learn about closures (i.e. scope). Embrace the power of modules. Profit.
Normally when people talk about closures in JavaScript, they're talking about methods and properties that outlive the scope of their original function (more on that in a second), but actually the definition is a bit broader. A closure is how a function "closes over" (Crockford) its variables and creates a different scope for them (out of the way of the global [window] scope). So an understanding of them will require some understanding of scope (which is definitely a common stumbling block in first learning JavaScript). Essentially, closures make this possible: var a = 1; function(){ var a = 2; a; // 2 (functional scope) }; a; // 1 (global scope) But when people get excited about closures, they're not really talking about this, but about the ability for functional variables to outlive their original functional scope: var b = function() { var myPrivateVar = 'Foo'; var myPublicVar = 'Bar'; return myPublicVar; }; b(); // 'Bar' myPrivateVar; // ERROR (not defined, because it was only defined in functional scope and is trying to be accessed from the global [window] scope) myPublicVar; // ERROR (not defined) But note that the original method name (myPublicVar) isn't available - but the value IS available from what we exposed to the global scope through the variable 'b'. How is this useful? This is the foundation for the Module Pattern in JavaScript - the building block of modern JavaScript applications. They're in essence a glorified version of the block of code above, with the purpose of hiding the function's private variables (this comes by default when declaring variables with the 'var' keyword in functions), and exposing public variables. And note that because functions are first class in JavaScript, those variables can even be references to functions themselves! So in essence this is the module pattern, with both private and public properties and methods: var myAPI = (function() { var privateProperty = 'Foo'; var publicProperty = 'Bar'; var privateMethod = function() { alert('I can only be executed from the scope of myAPI'); }; var publicMethod = function() { alert('I am publicly accessible (through the global scope) because a reference to publicMethod is returned by myAPI'); }; // set up an object whose own property names (on the left) match the references to the internal, functionally-scoped methods (on the right) var publicStuff = { publicProperty: publicProperty, publicMethod: publicMethod }; // return our public object (myAPI is now equal to this object) return publicStuff; })(); // immediately execute myAPI as a function, which returns an object that contains pointers to stuff in myAPI, which is exposed through myAPI.x, myAPI.y, etc By the time we reach the last line of the above script, the function has stopped executing, but some original pieces of the function still live on! Because some references to functional variables were returned by the function, we can now access these through a "namespace" myAPI: myAPI.publicProperty; // 'Bar' myAPI.publicMethod(); // (alert: 'I am publicly accessible'...) But those variables that were not exposed are of course not accessible: myAPI.privateProperty; // error (not defined) myAPI.privateMethod(); // error (not defined) There's definitely more to be said here, but hopefully this helps!
I could hardly be any worse considering when it was made, to be honest. But I wonder why would anyone take it personally...
https://github.com/raganwald/homoiconic/blob/master/2010/10/let.md#readme
I am just a JS learner here, so I am aware that JS is prototype based rather than class based, and I have worked a lot with class based languages. I am not trying to be judgmental either, but just maybe thinking out loud to help me and the OP learn something. Is this sort of a hack to enable using JS as if it had classes, thus kind of using it against it's nature?
Do you have a full spec, and a budget in mind? My rates are US/UK level, not rentacoder :) PM me if you are interested and we can at least discuss in more detail.
You sir or mam are awesome. Thank you very much.
I would tend to agree it's a hack, or at the very least a good workaround. Especially considering it took over five years since the birth of JavaScript to be discovered and popularized. But I give credit to JavaScript for being flexible enough (mostly for having first-class functions) for even allowing something like the module pattern. Getting inheritance to work is an even crazier beast to tame, and has multiple 'solutions'. I don't think anyone has ever been completely satisfied with any of them though, and have gone so far as suggesting that we should get our heads out of thinking with classes (here's a recent article on an alternative: http://javascriptweblog.wordpress.com/2010/12/22/delegation-vs-inheritance-in-javascript/).
Our "problem" is that we're using SVG rather than HTML and all these frameworks tend to assume HTML. I'm sure it could be ported or somehow made to work with SVG, but it's a bit late for that now.
Javascript isn't a *bad* language. But it's not really a *great* language either. It just got attached to this extremely cool distributed hyper-linking pages thing, along with HTML, which stopped being a good fit when we stopped primarily using it to mark up text. Really, CSS layout is in no way a good solution to the problem at hand, unless the problem at hand is HTML tables.
The JavaScript type system... isn't. I'd be much happier maintaining my going-on-100K lines of JavaScript if it had the type system form python and an easy way to catch simple syntax errors statically. Let's just not talk about perl.
&gt; String.prototype.trim = function(){ &gt; return this.replace(/^\s\s*/, '').replace(/\s\s*$/, ''); &gt; }; Bad. String.prototype.trim = function() { return this.replace(/^s*|\s*$/, ""); } *** fix'd*** 
Thank you, fixed :)
&gt;/** * Checks if a string is a valid email address * @return {Boolean} */ String.prototype.isEmail = function() { var exp = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i; if (exp.test(this)) return true; else return false; }; Might be too strict, and can you not simply have return ex.test(this); ?
Thanks! Updated. I really should have gone and cleaned up this code before submitting it. A bunch of it is old stuff.
 var undef = (function(u){return u;})(); var stringify = function(obj) { var t = typeof (obj); if (t != "object" || obj === null) { if (t == "string") obj = '"'+obj+'"'; return String(obj); } else { var n, v, json = [], arr = (obj &amp;&amp; obj.constructor == Array); for (n in obj) { v = obj[n]; t = typeof(v); if (t == "string") v = '"'+v+'"'; else if (t == "object" &amp;&amp; v !== null) v = stringify(v); json.push((arr ? "" : '"' + n + '":') + String(v)); } return (arr ? "[" : "{") + String(json) + (arr ? "]" : "}"); } }; var numberFormat = function(val, decimals, decimalsSeperator, thousandSeperator) { if (decimalsSeperator == undef) { decimalsSeperator = '.'; } if (thousandSeperator == undef) { thousandSeperator = ' '; } var decs = Math.pow(10, decimals); var spl = ((decs * val) + '').split('.'); var roundUp = spl.length &gt; 1 ? spl[1].substring(0, 1) &gt;= 5 : false; var v = spl[0] | 0; if (roundUp) { v += 1; } var spl2 = ((v / decs) + '').split('.'); var f = spl2[0]; var l = spl2.length &gt; 1 ? spl2[1] : 0; while ((l + '').length &lt; decimals) { l += '0'; } var sl = []; while (f.length &gt; 3) { sl.unshift(f.slice(f.length - 3, f.length)); f = f.slice(0, f.length - 3); } sl.unshift(f); return sl.join(thousandSeperator) + (decimals == 0 ? '' : decimalsSeperator + l); }; 
[Titanium Developer](http://www.appcelerator.com/) and [Adobe AIR](http://www.adobe.com/products/air/) let you build desktop and mobile apps using Javascript. [phonegap](http://www.phonegap.com/) also lets you build mobile apps using Javascript. [nodejs](http://nodejs.org/) lets you build servers using Javascript. I'm sure there are a lot of others that I have missed. It's a new market, but one that is growing. I'm expecting to see a lot more Javascript on the desktop applications in the future.
I've come to really love Javascript. I think the language needs a little house keeping, but overall I find that it's really nice to work with once you understand it. (The same could be said about any language.) The thing that I think is missing, is good development tools. Google's closure compiler and linter are a big step in the right direction. The fact that it uses JSDoc to help enforce conventions is a big plus. I still haven't found a make utility for Javascript that I really like.
[Closures are a poor man's objects, and objects are a poor man's closures](http://stackoverflow.com/questions/501023/closures-and-objects). Closures are no mere hack, they're a fundamental computer science concept that goes back decades. They were first implemented in Scheme back in the 70's, and if you read [SICP](http://mitpress.mit.edu/sicp/), thought by many good programmers to be the best programming book ever written, you'll see it covers closures in the first chapter. I use closures in C# pretty frequently, even though C# has classes. Ruby people use them extensively but call them "blocks." They definitely count as good Javascript style. You don't have to use them to emulate classes, you can just [use](http://www.reddit.com/r/javascript/comments/eti86/can_somebody_explain_closures_to_me/c1au4iu) them [directly](http://www.reddit.com/r/javascript/comments/eti86/can_somebody_explain_closures_to_me/c1audw8).
In my tests, the bandwith wasted through uncompressed base64 (yes, you should compress it) has no noticable effect. What's slow with the traditional img.src="http:" approach is the latency through parsing (n times img.src ... for a number of images) and the http start/negotation (especially when the server doesn't use pipelining, which is still quite prevalent). When using small images, http overhead (extensive request/response headers, cookies) can be larger than the actual payload. You can find some details here: http://blog.pixelboxx.com/ska/stories/209/ By using base64 in a javascript payload, time can effectively be saved by reducing the number of copy-operations in the browser memory to handle the src/data. A naive JSONP approach adds significant strain, that's why I chose to use padding with a native img-object handler. 
I guess than wikipedia is wrong too. So please correct that: While the padding (prefix) is typically the name of a callback function that is defined within the execution context of the browser, it may also be a variable assignment, an if statement, or any other Javascript statement prefix. 
Closures ~~are a way~~ can be used to build new functions on the fly. var a = function(x) { return function(y) {return x + y;}; } var b = a(3); //a returns a function that adds 3 var z = b(7); //z is now 10 Here's a fun application of it that I came up with a while back. Let's say you want to validate the values in a 2-D array. Here's a function you might use: function min(col, val) { return function(row) {return row[col] &gt;= val;}; } var a = min(3,5); Now a is a function that accepts a row (an array), checks the third column, and returns true if its value is at least 5. But suppose you need either column 3 or column 4 to have a value, but it doesn't have to be both. function or(a, b) { return function(row) {return a || b;}; } Now you can set up your validation rule like this: var b = or(min(3,5), min(4,6)); And with that, b(row) will return true if column 3 has a length of at least 5, OR if column 4 has a length of at least 6. I used something like this in C# to validate excel uploads, and it worked out beautifully.
Anonymous functions != closures :)
I found this little set of tutorials by John Reisig invaluable. http://ejohn.org/apps/learn/ Closure specific stuff: http://ejohn.org/apps/learn/#48
I rather like Javascript, but the two big problems I have with are null/undefined (every other language has just one value for "doesn't exist") and the == operator. 
Yes. It's a horrible hack to make it have a small piece of modern functionality. But unless you can convince all the browsers to start using python as their scripting language, it's really quite necessary to keep your sanity. 
Get "Javascript : The Good Parts" by Douglas Crockford. In just 150 pages it covers all the basics of the language itself without wasting your time with half assed tentatives of covering the DOM or API's that are constantly changing anyway. One of the rare programming books I've read from cover to cover. If only because of that, it's worth buying. It will answer your question and then some. To me this book is like Kernigan &amp; Ritchie's original C book. My only complaint is it was not exhaustive. A few native Javascript method calls are not documented, but 99% of core javascript is there. Anything else like DOM and frameworks you'd want to use the web anyway, since it is always changing, and search becomes invaluable. As for your question the way I intuitively understand it, is closures are simply the underlying nature of functions in Javascript: each function remember its "environment" for as long as the function lives. It remembers its local variables, as well as pointers to all variables in its "parent" function. Something very important to remember is the "this" pointer is broken as soon as you have a function inside another function. So in your parent function you want to create a local copy of "this": var that = this; function foo() { return that.score * ZOMG_BONUS; } Using closures for event handlers like this is very prone to error, and I would highly recommend to use proper frameworks like YUI or Prototype that have a "bind" function. Then you should never worry about "this" being broken. Eg: // YUI 2.8 example var App = { score: 0, init: function() { Event.on(Dom.get("zomg_div"), "click", this.onClickZomg, this, true); }, onClickZomg: function(ev) { console.log("clicked %o", Event.getTarget(ev)); // this works as expected this.score++; Event.stopEvent(ev); } }; Event.onDOMReady(App.init, App, true); The above is the same as follows, where we use a closure to make sure we call init() with App as the "this" context: Event.onDOMReady( function(){ App.init(); } ); The var that = this is always bound to create problems because as you refactor code and move around code you have to replace "this" with "that", or the other way around. 
How would you deconstruct this within the browser?
There's an error in your code: 1 var b = function() { 2 var myPrivateVar = 'Foo'; 3 var myPublicVar = 'Bar'; 4 5 return myPublicVar; 6 }; 7 b; // 'Bar' 8 myPrivateVar; // ERROR (not defined, because it was only defined in functional scope and is trying to be accessed from the global [window] scope) 9 myPublicVar; // ERROR (not defined) The value of b in line 7 is [object Function], not 'Bar'. Fix would be to call the anonymous function in line 1 immediately. Like this: 1 var b = (function() { 2 var myPrivateVar = 'Foo'; 3 var myPublicVar = 'Bar'; 4 5 return myPublicVar; 6 })(); 7 b; // 'Bar' 8 myPrivateVar; // ERROR (not defined, because it was only defined in functional scope and is trying to be accessed from the global [window] scope) 9 myPublicVar; // ERROR (not defined) 
I'm not just doing anonymous functions, but anonymous functions that enclose variables in the lexical scope where they were defined. In my first example, the function that gets stored in b still has access to x. That's how closures are defined in SICP. What is your definition? (Edit: see [wtfmf's comment](http://www.reddit.com/r/javascript/comments/eti86/can_somebody_explain_closures_to_me/c1audw8) for another description of the same thing, with a more common application.)
franksvalli comes close but, I believe, is a little inaccurate. A closure isn't about it creating a new variable scope via a function declaration. Almost all languages do this by default. There are two main parts to this: the first is the declaration of a function inside another function. The inner function has access to all the variables, objects, and functions declared within the outer function. This is the closure. The second part—and this is where closures become useful—is that functions are first-order. That means that they can be return values or arguments to other function calls. In franksvalli's Module Pattern example, the function publicMethod is set as a property of the publicStuff object and returned as a result of the outer function call. The great thing about this is that even though the outer function has completed execution, the publicMethod that has been returned can be executed and still have access to all of the variables and functions and objects declared within. Closures are often used for event handling because it allows the event to occur at some later point in time to easily reference encapsulated values. function addHandler() { function handler() { alert(links.length); // I still have access to links } var links = document.getElementsByTagName('a'); for (var i=0; i &lt; links.length) { links[i].onclick = handler; } } addHandler(); In this rather contrived example, I've attached an onclick handler to every link on the page. The handler function is declared within the addHandler function and has access to any variables declared within it—in this case, the links variable. When you click on a link, the addHandler function has already executed but the handler function within it still has access to that links variable which has a node list of all the anchor elements on the page. Note, this is not the module pattern. The module pattern is just an example of closures at work.
The email test almost certainly is too strict. Have you seen the "official" RFC822 email address regexp? An example is here:http://www.ex-parrot.com/pdw/Mail-RFC822-Address.html (that's Perl regexp, I use it just to scare you :)
If 9jack9 has something to say related to Javascript, I'm inclined to listen. But do elaborate 9jack9!
I find this `Array.prototype.flatten` pretty useful. http://pastebin.com/wFktv8M9 Here's a [link to the blog post I originally got it from.](http://tech.karbassi.com/2009/12/17/pure-javascript-flatten-array/) 
You got a nerdy lol irl from me for that regexp.
Webkit's debugger, for one.
I'm not trying to be mean, but the first line in your post says: &gt;Closures are a way to build new functions on the fly. That is not what a closure is.
At the start of development, everything was stored in a single global object. But as I started writing some simple games to test stuff out, I found that writing "pp." gets tedious when you call something from the framework every other line. I guess if you're super concerned about this, you could stick the framework and all of your game logic in an immediate function, and it will all be hidden in the function scope.
It's a terrible definition, but with that statement I was answering OP's question "what can they be used for in practice?" And that is in fact something you can use closures for, as I demonstrated. A definition is something like "a function that encloses the scope in which it was defined," but when I was trying to figure out closures and what they were good for, I saw definitions like that all over the place, and they didn't help me at all. To make things more clear, I changed "are a way" to "can be used."
why not make this a [gist](http://gist.github.com) so that you can version it and update it and people can fork it and make their own private revisions?
i think defending javascript in /r/javascript is a waste of time. we are here because we believe in javascript and enjoy it.
JavaScript is a lambda language, meaning its scope definitions are modeled after the concepts of lambda calculus. That is confusing. Closures are really easy to explain, though. var parent = function () { var a = 3, child = function () { var b = 4; return a + b; }; }; In that example notice how variable "a" is given scope by the "parent" function and is foreign to the "child" function. Because the "child" and "a" are in the same scope chain, or namespace for you XML people, they can visit each other. Therefore, when "a" is used in "child" it is a closure to "child" because it has a defined scope where that scope is external to "child". In the prior paragraph I have demonstrated that "child" can read from closure "a". Since "child" can access "a" it can write to and execute from "a" opposed to merely reading it. Therefore if "child" assigns a new value to "a" then that variable is changed through out all of "parent". Its not any more complicated than that. If you want to see a hierarchy of closures in action go get http://prettydiff.com/prettydiff.js and dump it into http://jslint.com/ and read the report that JSLint writes after the couple of errors.
My understanding is that it is simply a way to reduce the scope of variables, which is always a good thing - globals are generally considered to be bad. Using closures provides a "namespace" for your variables, and they won't conflict with other variables that aren't meant to be the same. Surprises are also generally considered to be bad in programming. :)
As much as I dislike PHP as a language, [PHP.js](http://phpjs.org/) is actually a really really nice utility library.I don't use the whole thing, but I frequently pull useful bits out and into my code-base. The code is clean and well documented, and there are pre-built custom builds (or do you own) so you only get the functionality you need. (or you could just c&amp;p if all you need is one function). It even includes things like hashing (SHA-1, MD5) functions which would be eight bitches on a bitch boat to write yourself. A lot of the functions are actually compiled from various sources, so in that way it's similar to the project you're doing. Another semi-general-purpose library I really like is [Underscore.js](http://documentcloud.github.com/underscore/). It provides things like map, reduce, pluck, etc...defaulting to the native implementation when possible. Some duck-typing functions, and other bits and bobs. One nice thing is you can either write in chaining style: _(thing).do(other); or: _.do(thing, other); Hopefully you can get some inspiration from these libraries for your project.
Closures are definitely not a hack for any functional programming languages or similar patterns in other languages. But, the way they are used (such as suggested by Douglas Crockford) is not for that, but as a way to get around one of Javascript's "bad parts". I'm not saying it's a "mere hack", or even that hacks are bad, just that it's a workaround to provide a convenient namespace for variables that would otherwise be global.
I think you're right. For novices, the function needs to be executed. highwind's method is using an anonymous function, but I think it could be declared as a traditional named function: function namedFunction() { ... } then called in a traditional way, "b = namedFunction();" Not that there's any reason to do it this way for this pattern.
I'm glad I don't have to maintain your code. :)
&gt; I love Javascript. It's the web browsers that I usually have issues with. This is like saying you like driving, but hate being on the road.
Care to point to a definitive list of what should be there?
&gt; fix'd More like broke'd.
There's already something called PIE for IE fixes! Just saying.
Don't like DSLs? Being able to define a new rule, with logical combinations of columns, in a single line sped things up quite a bit as we added various excel formats, and made the rules easy to read at a glance. Later, I went a step further and put the rules in XML, stringing the closures together at runtime. Then I could change rules on the fly without needing a recompile. This replaced a system that implemented the rules with more straightforward C# code, which turned out to be quite repetitive. Maintenance is a lot easier when you get rid of repetition. It just looks odd when you're not used to using closures like this. On top of that, I wrote the core of it in four hours, completely bug-free. Closures are fun.
Sorry about that - fixed it by executing b: b(); // 'Bar'
I can confirm this, gzip on base 64 image data does work great.
Another handy string function: String.prototype.beginsWith = function(t, i) { if (i===false) return (t == this.substring(0, t.length)); else return (t.toLowerCase() == this.substring(0, t.length).toLowerCase()); } 
I already did. Here's what I wrote to you elsewhere, a post you even responded to. Surely you read before you respond? _Here's some possible interpretations:_ _..._ _Per LOC: how much additional code is needed for every additional feature?_ But what does that have to do with anything in the previous post? Nothing. I have responded to most of your questions, as have others, with arguments, links and papers. You respond with insults and "I don't want to talk to you". Furthermore, I checked your posting history, and it seems that you act like this with everyone. That much anger isn't normal. I think at this point it's safe for me to say the preponderance of evidence is you're full of shit and a very angry person. Since you don't want me to talk to you, all right.
Wikipedia isn't wrong, you just have no idea what you're talking about. If you read the [article](http://en.wikipedia.org/wiki/JSONP#JSONP) you'll see it reaffirms what I said. &gt;JSONP or "JSON with padding" is a complement to the base JSON data format, a usage pattern **that allows a page to request and more meaningfully use JSON from a server other than the primary server**. JSONP is an alternative to a more recent method called Cross-Origin Resource Sharing. This is what I said in an earlier comment, which you responded with- &gt;I've never seen these problems in any form of server to server communication. So, about your padding and the above statement- &gt;While the padding (prefix) is typically the name of a callback function that is defined within the execution context of the browser, it may also be a variable assignment, an if statement, or any other Javascript statement prefix. What this basically means is that some implementations of this allow you name the callback function that the JSON encoded data will be sent from. That's it. They even give an example! &lt;script type="text/javascript" src="http://server2.example.com/getjson?jsonp=parseResponse"&gt; &lt;/script&gt; Because they passed "parseResponse" as the callback name the example response comes back as- &gt;parseResponse({"Name": "Cheeso", "Rank": 7})
Try the .NET framework for JScript.NET - works great. the .NET framework is massive and it all works with Javascript. I've done lots of coding with this for both desktop applications and server-side webapps. I think you haven't been keeping up with the advances in JScript.
seriously? downvote? WTF is wrong with people. 
Thanks for that, great article and was very helpful.
That will vary from browser to browser, but it will be obvious which variables belong to your code, they sit at the top of the window object properties list.
In simple terms, *a closure is a function that has access to variables in another function's scope*. Generally the term refers to functions that access another scope after that scope would usually be destroyed (or "closed"). One of the keys to understanding closures is understanding scope/execution context and scope-chain traversal in JS. When JS comes across an identifier (variable name) it tries to determine what it is. The way it does this is a process of elimination. Is this a variable in the local scope? If not, is it a variable in the next higher scope I have access to? etc etc, until it hits the global scope. Any bit of code in JS has an "execution context". This context is basically tied to whatever function a bit of code happens to be sitting inside or perhaps the Global scope. (not strictly true, but more or less) When a function is called, the JS engine creates a new execution context for the function. Each function has a property called [[scope]] which contains the function's scope chain (this is also set up on invocation). Let's look at an example: function createAdder(num) { return (function(input) { return input + num; }); }; (I've formatted ito be easy to read, hopefully). You would use the function like so: &gt;&gt; var addFive = createAdder(5); ... &gt;&gt; addFive(1); 6 So let's look at what happens when we call: createAdder(5); The first thing the JS engine does is create a new execution context. It sets up a "variable object" which basically holds all the variables for the function..."num" etc etc... and sets up [[scope]]. [[scope]] (and the "variable object") is an internal JS engine thing, but for our purposes we'll present it as an object literal approximating it. For the call in question, it would look something like this: createAdder.scope = { 0: {// This is the function's own scope, just created arguments: {0: 5}, //....etc etc num: 5 }, 1: {... etc} //the next scope up, in our example, its the global scope } This [[scope]] and variable objects are really just blobs of properties sitting in memory (the heap) ...functions which have createAdder in their chain will get a reference to this object in memory, not a copy. Each of the properties is also a reference to an object in memory. Ordinarily the context is destroyed when the function finishes executing... However, in our case....when the JS engine hits the function expression, it knows at some point the new function created by createAdder() will be called...and it saves the info it will need for later when it runs the new function. When you call addFive, it "knows" it was created by createAdder, so it's [[scope]] is something like this: addFive.scope = { 0: {}, // addFive scope 1: {num: 5, ....etc}, // createAdder scope // Note: this is an object representing the // context **when createAdder(5) was called**...subsequent calls will // create a new execution context, and hence their "children" will get a // different value for "num" 2: {...} // global scope } When addFive is called, and it comes to "num", it tries to figure out what "num" is...there's no num in the local scope, so it checks the next one up and finds it. In this case addFive.scope[1] is a *reference* to the createAdder's context object in memory, not a copy of it. Again, that's at the time createAdder(5) was called. If you do: var add7 = createAdder(7); A new context is created and add7's scope chain will contain a different entry than addFive's which will contain the "old" one. This is why you may hear about closures vs memory consumption. Because the inner function's scope chain contains a reference to the container function's context, it can't be garbage collected *unless you explicitly dereference the offender*. This also has a result that the context **is always the state it was in when THE FUNCTION IT BELONGS TO finished executing.** This last point is why people often get into trouble trying to use closures in loops: //psuedocode-ish, Im lazy function attachEventHandlers() { x = array_of_dom_elements; for(i =0;i&lt;x.length;i++) { x[i].onClick = function () { // ^ We'll call this the click function console.log("" + i); }; }; return; }; The problem is the value of i is not looked up until the click function is **called**, at which point it's scope chain contains a context object that represents the state of attachEventHandlers when it **finished**. As a consequence *all* of the click functions will show whatever x.length is, because that is the last value of i. Another thing that trips people up: "this" does not close over like other variables. "this" is set up when a new context is created, so it overrides any other "this"'s up the chain. If you want to close over "this", you have to first assign it to a variable that *will* close over (alternatively, you might use bind() or something). example: myObb = { val: 0, createAdder: function(num) { return function() { this.val = this.val + num; // won't work!! you must first do something like var that=this, and // use that.val... or otherwise bind the function to myObb.... } } }; Hope that covers it. Please take my descriptions of JS engine workings as a model of explanation and not necessarily precisely what happens...though I've tried to be as accurate as my limited understanding allows. 
Last time I checked Unity3D used JScript.Net not Javascript. I think Unity3D just compiles all of the scripting to .Net bytecode which is why you can use C#, JScript, and Boo.
Looks really nice!!! 
When a mommy function and a daddy function love each other very much...
The people who don't like Javascript seem to have that opinion for a couple of reasons, one of which is that it isn't a clone of Java. No, it doesn't do OO *java's* way, but it does it very well in its own way. Yeah, it takes some understanding to use javascript. Only because people assume it is similar to languages they already know. Once you accept that it really is a different language, you can begin learning Javascript.
If you want to cache the regex for later, you don't have to create it each time. It's a minor savings unless you use it a bunch. if(!String.prototype.trim) { String.prototype.trim = (function () { var rTrim = /^\s*|^s$/g; return function () { return this.replace(rTrim, ""); }; })(); }
Nice, that's a great explanation.
anyone downvoting me for bringing up JScript.NET is really fucked in the head. If you haven't tried it, and you consider yourself to be a javascript programmer, you are seriously missing out. node.js is not the only server-side javascript game in town. JScript.NET has been around far longer, and the .NET framework is very mature, and very powerful. I have taken a lot of code that was designed for browser execution and run it on JScript.NET with very little modification (only DOM stuff). It is what most of you are looking for but are too stubborn or mac-centric to consider. It's a shame really. 
True, they can be used to hack around Javascript's lack of namespaces. But there's no reason you have to use them only for that.
&gt; The word "definately" is not a technical argument Nothing you have said thus far in any of your comments is a technical argument either. &gt; closures are a minor and trivial part of language design. I think you've never used a language with closures (or don't understand them) if you consider them minor and trivial.
seconded. Crockford's "Good Parts" talk convinced me that Javascript was a cool language: http://www.youtube.com/watch?v=hQVTIJBZook
That is one of the best explanations I've seen on reddit.
Well, this isn't an optional thing. If you put lots of junk into the global object, there will be collisions. If there are collisions, someone will waste lots of time. It's the same deal with modifying build-in objects. If you modify them, there will be issues down the line and it might get very troublesome and time-consuming to fix. (Curse you, Prototype.js!) With things like this you can't avoid having at least one object there, but there really isn't any reason to have more than one.
can you expand a bit on closures vs memory consumption, or link to some relevant material?
Tell us more about Coffeescript.
I think this is one of the clearest explanations, thanks!
Well, I was a little harsh in saying "terrible". But it can be misleading. I've softened my stance toward Firebug recently as I now realise that a lot of its faults are buried deep in the Mozilla code base. This bug: https://bugzilla.mozilla.org/show_bug.cgi?id=574941 means that errors in event handlers (for user generated events) are not reported at all. There are other instances in which Mozilla will report the line number for the error, not where the error was thrown, but where the error object was defined, no other JS engine does this. In short, Firebug is slightly hampered by the engine it is running on.
The old IE script debugger is better. It's pretty much impossible to find now though.
I thought that's exactly how JavaScript declares objects? So closures are the local data of an object once it's been constructed. In JavaScript anyway! See #2 here... http://www.w3schools.com/js/js_objects.asp
http://www.reddit.com/r/javascript/comments/eti86/can_somebody_explain_closures_to_me/c1awie6
&gt;On top of that, I wrote the core of it in four hours, completely bug-free. I'm a hack, I recompile after every few lines of code. =)
yeah, dipshit, go ahead. you're real funny. ha ha ha. fuck off
&gt; I think at this point it's safe for me to say the preponderance of evidence is you're full of shit That's nice. Have a good day.
I smell butthurt.
i smell douchbag
You don't have to wrap the function expression in parentheses to execute it, when dealing with assignment: 1 var b = function() { 2 var myPrivateVar = 'Foo'; 3 var myPublicVar = 'Bar'; 4 5 return myPublicVar; 6 }(); 7 b; // 'Bar' You only need wrapping parentheses for immediately-invoked function expressions, to differentiate the anonymous function expression from a function declaration: 1 (function() { 2 var myPrivateVar = 'Foo'; 3 var myPublicVar = 'Bar'; 4 5 return myPublicVar; 6 }()); 
Yeah, you stink. Go wash yourself.
Can Firebug break on DOM modification and AJAX requests? See: http://blog.chromium.org/2010/12/break-on-ui-and-network-events-in.html
This one clarified things for me: http://javascriptweblog.wordpress.com/2010/10/25/understanding-javascript-closures/ 
Obviously, you win. I can't compete with an intellect as great as yours.
In your Pie.util.checkFileType function you could also remove the result function, immediatly return the result and return false after the loop. And please wrap the cookie functions into your own namespace. Accessing the global namespace is never a good sign. Why do you use the /i switch in Regular Expressions, when they only contain numbers or you specify the lower/uppercase seperatly? Also: Put it on github or something so we can fork it.
Closures are a natural outgrowth of functional programming, but if you're used to procedural or object-object oriented programming they can seem very weird and hackish. Once you start using them a lot, the light will go on. EDIT: I'm in a hurry and don't have time to provide a link, but a book called Higher Order Perl has tons of good info on closures and their many uses... Perl actually has pretty good support for closures, but unlike JavaScript it doesn't *demand* them.
Also try to find something about the Proxy object. There's not a single documentation for it, although it enables muuuch more powerful code. Maybe the name of the object wasn't that good imo^^
I think that second `^` should be a `\`?
`stringify` should use the native `JSON.stringify` if it is available. Otherwise, good additions!
From my knowledge (function () { /* do something */ })(); works same as (function () { /* do something */ }()); I just like the look of the former better. And even though parentheses is not required when dealing with assignment, having the leading parentheses adds to readability. The leading parentheses tells me that this function is not a declaration but an anonymous function call. For example: var f = function () { /* do something */ }(); Here, I have to scroll down to the bottom of the function to see that f is what the function returns, not the function itself. Where as if I use the parentheses like this: var f = (function () { /* do something */ })(); I know immediately that f is the return value of the function. It's just my preference. Please let me know if your style has any advantages; I'm open to suggestions.
I'll stop if you cut the JScript/Coffeescript bull.
After mulling over what you have said, I have come to a solution that doesn't pollute the global object and stops tedious typing. Everything will be stored in a single object, but all of the user's code will be contained in an immediate function, where variables can be declared without worrying about clobbering the global object. Ex: (function() { var draw = PROPULSION.draw, loop = PROPULSION.loop, Sound = PROPULSION.Sound, key = PROPULSION.key .... // The rest of the users's code goes here }());
no. coffeescript is counterproductive crap, and that is my informed opinion. You on the other hand have no input to give about JScript.NET, all you want to do is downvote me to try to demotivate me from posting my opinions about coffeescript. Well, that sucks, and you suck for taking that course of action. I should report you to reddit for doing this. It's pretty obvious you are trying to teach me a lesson, but the real lesson is that you should not be abusing reddit in this way. I've posted things critical of coffeescript, but at least I try to maintain a dialogue. Your dialoge? "i smell butthurt". Well thats fantastic that you feel so strongly about coffeescript, but it has no place in this thread. 
Crockford recommends this formulation, with JSLint: (function () { /* do something */ }()); Regarding your second point, you are correct, parentheses are not required, *and* it is better to have the leading parentheses for readability. I was attempting to point out one of the idiosyncrasies that differentiate function expressions and function declarations.
Here is something similar: // dummy lib var bar = { say: function (what) { console.log(what); }, jump: function () { console.log('how high?'); } }; // kind of "import" those things you want (function (say, jump) { say('baa'); jump(); }(bar.say, bar.jump)); // by passing them as arguments // alternatively... use a shorter name internally (function (x) { x.say('baa'); x.jump(); }(bar));
I can't ... you've done enough.
I think the people that think "people don't like JavaScript because its not Java" don't understand the reasoning. Here is I think is a common reasoning for JavaScript/Java confusion: JavaScript makes writing industrial strength programs very difficult. Java makes writing industrial strength programs straight forward(although you might say its "wordy", I prefer Python). So yes, people wish JavaScript was more like Java.
Ha I HATE PHP, but really? Seriously? They finally put modules in and people complain about the separator? This is why PHP doesn't have nice things. Be glad they finally got modules. PHP was dead to me when I realized on the server side I can use whatever language I want.
Came here to post this. While on one hand it doesn't take into account the object-orientedness of Javascript at all, it has some super-useful utility functions.
Although you've explained scoping and reference-passing well, I think you've missed the most integral feature of a language with closures -- context capturing. Closures are useful because you can run the following JavaScript and get the result that you might expect upon reading the code: var foo = function () { var fizz = "buzz"; var bar = function () { alert(fizz); }; setTimeout(bar, 1000); }; foo(); The inner function `bar` captures a reference to the value of `fizz` when it is defined. The code alerts "buzz" after a second because the JavaScript engine remembers to keep "buzz" in memory and remembers that `bar` still has a reference to it via the variable `fizz` (even though `fizz` is not defined in `bar`'s scope). See Also: [A Definition of Closures by Neal Gafter](http://gafter.blogspot.com/2007/01/definition-of-closures.html) (via [an article on Closures by Martin Fowler](http://martinfowler.com/bliki/Closure.html)) Secrets of JavaScript Closures by Stuart Langridge ([slides](http://www.kryogenix.org/code/browser/secrets-of-javascript-closures/), [video](http://www.vimeo.com/1967261)) edit: fixed formatting, typo in code
TL;DR. Quit spamming your opinion all over. You look like a broken record.
Right at every point, besides ignoring the following: &gt; ** it may also be a variable assignment, an if statement, or any other Javascript statement prefix** Which exactly describes my approach: Using an *if callback is function* for tolerance, using other javascript statements as prefix to convert transport-layer encoded data to native DOM objects. Couldn't get any faster in handling large amounts of image data in a single call. 
Have you tested performance of compressed vs. uncompressed base64 on mobile devices (where cpu power is a factor)? 
quit being a douchebag and stay on topic, or don't post. you think I care what you think? hah. I could care less about karma or anything like that, so go ahead and downvote every post i make even if it has nothing to do with coffeescript - see if i care asshole. What i do care about is people polluting the javascript ecosystem, which is exactly what coffeescript represents. Stop spamming coffeescript all over r/javascript and then we won't have this problem. you know, there already is an r/coffeescript, so maybe you'd be happier there.. 
Don't get me wrong. It's great that PHP is trying to improve. It's just that a lot of the underlying decisions (e.g. keeping variables and function apart) don't work very well with what the language is trying to become. A lot of the new features feel more bolted on as an afterthought (which they _are_) than like something that is a natural part of the language. PHP needs its rewrite. Perl did it, Python did it, even ActionScript did it. Even PHP 6 is looking to be more of a tweak than a rewrite. It's not even for backwards compatibility's sake, like Java. PHP is quite happy to break old code (which I generally don't consider a bad thing, as long as the reasons are good and it doesn't happen all the time). It just doesn't want to let go of what were bad decisions from the start. You can downvote me for this, but I consider its historical baggage to be PHP's biggest problem. This is where a lot of its issues stem from, too. This is what makes PHP ugly and inconsistent. That said, I don't hate it. I just don't care about it anymore. I still use it when I have to, but I couldn't care less what new language features are supposed to make PHP bigger and better in the next iteration. I especially don't care for all the module/OO additions that are supposed to make PHP more like Java. Note: I do write OO PHP, but I steer away from the level of complexity that would make full-blown OO, modules and inheritance useful. If something can't be implemented painlessly without those features, I won't use PHP to write it. /rant
&gt; I mean I can't think of one thing that Javascript (as a language) does &gt; significantly better than any of those. It is on every computer. Its programs are naturally deployed via HTTP.
Inflating is very cheap and it easily outperforms disc (well, flash) IO. On an ARMv5 (=old and lame) device with 533mhz you can inflate more than 10mb per second. Well, that was with some awful piping mechanism in place (and copying that stuff in 4kb chunks over to some SDL surface). The raw throughput should be even a bit higher. I tried to do a small benchmark on that thing, but its shell appears to be somewhat glitchy. I gave up after making it hang several times. Rebooting, awfully slow turn-over rates... just a bit too annoying right now. Feel free to benchmark it yourself. Create a simple single character 10mb file, gzip it (~13kb), gunzip it, pipe the output to /dev/null and check how long it takes. I watched a talk about mobile performance stuff a couple of years ago. Even back then they said one should gzip everything and that decompression is virtually free. Well, that's not much of a surprise given that Deflate is a very old algorithm with very moderate requirements.
Who would have thought that not calling a function is faster than calling a function? What a pointless post.
I wont argue with OP using native javascript concepts like prototyping etc. But my thought is that jQuery is a framework wich was first aimed at people who never or rarely written native js. The word "extend" is quite explicit for a non programmer and the function has the same general structure as the other jQuery functions. So lets say jQuery sacrifices performance for "productivity" (minimal learning) Edit: replied to jack by mistake. i need some more coffee
I have to admit, you put quite an effort into voicing your opinion. And the use of cuss words truly gets your point across *that* much better. Don't forget to breathe some fresh air between rants.
On my nokia n900 it looks different. I used a png file, encoded it base64 and gziped it to compare real-world data. Both md5sum are identical: ~ $ time cat file_base | md5sum real 0m 0.04s user 0m 0.00s sys 0m 0.01s defdabecf74b949ae781f45324d8a52d - ~ $ time cat file_base_gzip | gzip -cd | md5sum real 0m 0.17s user 0m 0.00s sys 0m 0.02s defdabecf74b949ae781f45324d8a52d - 
Once upon a time I thought I hated javascript, then I came to realize that I really just hated the DOM.
you'd be surprised
I remember that namespacing debate. What actually annoyed me is that they *wanted to* have used any number or proper looking seperators for namespaces, but they *couldn't* because the Zend engine is a halting, breaking PoS that didn't want to deal with the changes. Since then I've left PHP completely and gone off to Python for all my web work. I don't think PHP is too bad, but the community surrounding Python is just a lot more mature and interesting. Edit: Kataire said it best, PHP needs its rewrite. Years ago, Python was fairly crufty too.
Good. You _should_ be using a CDN or just hosting a cached copy locally with a very far future expires header.
You can have a look to this excellent article about function declarations vs funcion expressions http://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/ About Javascript closures, there is also an excellent article on this blog: http://javascriptweblog.wordpress.com/2010/10/25/understanding-javascript-closures/
This is going to be a rant, so get over it now if you don't want to read one... Tossing together a couple of speed tests in a few browsers, compiling the results, and pointing to the fastest one and saying "Yes, THAT'S the one you should always use. No question, it's the best. I'm going to completely disregard every other motivation except for an insignificant speed increase because I know better." is borderline idiotic. First, doing $.extend (or any other convenient abstraction to get around the fact that Javascript's prototypal design doesn't have sane or obvious defaults when it comes to class construction and extension) isn't going to cause your program to run slower in any way detectable to any of your visitors. Even very complex single-page web applications only have a handful of classes that extend one another a handful of times. It's not even close to the tens of thousands of repetitions you have to do in these tests to start even seeing a difference on the millisecond scale. And there are even more important reasons to not use ANY of the alternatives he tested on that page. The first is absolute garbage, it completely pollutes the global namespace unnecessarily. The second and third require you to type out the dot-notation namespace for those functions every single time. When you're deep in a library, and you want a few dozen functions in it, does he really expect you to type Foo.Bar.Baz.Function = function(){}; every damn time? Have fun refactoring when you decide you want to rename the namespace or restructure the location of those methods. Ever hear of don't repeat yourself? So jQuery's $.extend is somewhat slower than the awful eyesore of alternatives. Whoop-dee-fucking-doo. 9jack9 put it perfectly, what a pointless post.
Crazy! I would have thought they would have put a stop to this long ago. I bet some people thought that the jQuery site itself is a CDN.
&gt; I bet some people thought that the jQuery site itself is a CDN. I certainly did! Clicking their 'download' link takes you to jQuery served as a text file. This has always made me assume they expect and encourage hotlinking. If they didn't want people hotlinking it, then why on earth didn't they serve it with a `content-disposition: attachment` header to hint that they want you to download and self-host?!?
This is very, very, very much the WRONG way to add functionality to Javascript. If you take a look in lib/Array.js you can clearly see the author is extending the global Array Object (for example via Array.prototype.countValues). This can create huge issues with for...in loops (if authors aren't familiar with using hasOwnProperty) and furthermore, is only checking in one of the cases if the method already exists on the array object. The project is basically assuming you've never defined String.trim in your own code - and doesn't care if you have (or in this case, even worse, overrides the String.trim that is present in the latests browser builds). This is the equivalent of polluting the global namespace with a bunch of methods, and is in fact more confusing for novices because it can lead to other issues. Why wouldn't you just take the jQuery approach and create a wrapper and extend that instead? I'm certainly interested in a project that adds this kind of convenience functions to JS, but it should not be messing with native objects. (Prototype stopped doing this years ago). For further discussion on why extending native objects is a horrible idea, see: http://www.nczonline.net/blog/2010/03/02/maintainable-javascript-dont-modify-objects-you-down-own/ http://www.webdeveloper.com/forum/showthread.php?t=233560 Sorry if this seems harsh, but "the Proper Way" in this case is, "exactly the wrong way"
you're not in the right so you resort to anything - now changing the topic to 'cuss words'. just go back in your hole, troll. 
Oh, no, I wouldn't want to imply that, and I hope I didn't. In fact, I'm sure the original authors didn't even mean for it to be used in the way Crockford suggests. At least, I hope not. :)
Sure. JS engines largely use [mark-and-sweep](http://en.wikipedia.org/wiki/Garbage_collection_\(computer_science\)#Na.C3.AFve_mark-and-sweep) garbage collection. (There are various exceptions like real old browsers, but I'll ignore them here..also we'll use a simplified model) A quick demonstration, lets pretend we're walking through a running program and hit this: var x = { name: "foobar" }; // new object is created. x is a slot in // the stack that contains a reference to the // actual object in the heap (we'll call it foobar) Let's say right here, the Garbage Collector gets run...it finds x in the global scope, then the reference to foobar and says "hey...someone's using foobar, leave it alone, throw out everything else that's not being used". If we de-reference the object by pointing to something else: x = null; // now the slot in the stack that is "x" just contains the value null, foobar // is still sitting in the heap, but it's cut off from the "root". Now if garbage collection is called, foobar doesn't get the "protection" and gets tossed. If however, before we null out x, we did this: var y = { name: "fizzbam", partner: x }; Now y.partner contains a copy of x's slot in the stack, in this case a reference to foobar...when we null out x, y.partner retains it's reference to foobar and foobar won't be garbage collected. If we then null out y, both fizzbam and foobar will be reclaimed because even though another object (fizzbam) references foobar.....they are both now "cut off" from the "root". So how this relates to closures is when you call a function it sets up an object: function ex() { return 1 + 1; } ex(); // An execution context etc is set up, taking up memory. The function does // it's thing, then returns. No more references to these objects in memory // exist any more...though the objects are still there. Any memory // used for a variable object etc etc will be reclaimed next time GC runs If you look back at the createAdder example, when createAdder is called, it creates some objects in memory... then it creates a new function (the one that will eventually be "given" to the variable "addFive"). This new function's scope chain contains a reference to createAdder's variable object. Because of this, some of the memory that "normally" would be reclaimed is not because of the closure. In a lot of cases, this probably isn't a big deal. However every time you use createAdder you are creating new objects in memory that won't be GC'd until you remove their connection to the "root". In our example we could do this by doing: addFive = null; When we are done with it. I generally don't worry about closures vs memory consumption much because usually I only create a tiny handful of closures...but if you're creating a lot it may become a concern. For a lot of the examples used, there's often another way I would go about it....like instead of creating a new function for each element to be a click handler, just use event delegation. HTH, I can't think of anything off the top of my head but if you Google "closures memory" etc I'm sure you'll find some good stuff.
Hahah :) I've read that they actually wanted to use Scheme, but the management wouldn't let them!
Google Ajax libraries 
Wow! Thanks for the tip. :)
The Prototype framework did this to an extreme in v1. v2 is expected to remove all that because JS devs have decided that wasn't a smart way to add functionality. This lead to the downfall of the framework. jQuery took over as King because it played nice. I really like that these functions exist, but claiming this is the right way to do it would be turning a blind eye to the history of the language.
Well, how big was that file?
Very cool. I like the animated effect it gives. This would be useful for viewing multiple graphs of similar data for consecutive time periods.
300kByte, which is a 1150 x 750 pixel png 
True, but I think you misunderstand the term "download" in such context.
how so? Because the 'download' button should have been enough of a hint?
Agreed a million times. Using Prototype's Object.extend or jQuery's $.extend is mostly for DRYness and style (and of course to clone objects). To be fair, the namespace problem can be mitigated pretty easily: var baz = Foo.Bar.Baz; baz.fizz = function() { la la la; }; bar.panda = function() { la la la; }; But I'd rather use extend anyways.
If you're at a point where you're using $.extend, you're most likely passed the 'non programmer' stage don't you think? Why would you need to extend an object if you're just fiddling around with minimal ajax stuff and making shit fade in and out.
Whyyy don't they just link the download button to the CDN to begin with?
You sir have a point to a certain extenT
The download link is actually ok, the hot linking is only disabled for items that aren't from code.jquery.com. The download link goes to code.jquery.com.
It is.
If only email addresses were as sane...
I think Python scrapped the plans for a complete rewrite and just did some minor not-backwards compatible changes because of the difficulty involved in rewriting Perl. I don't think PHP could handle a rewrite. It would be better to just incrementally fix things.
It's the context. Technically speaking we're downloading everything we view on the internet, but we don't really call it that. We call it viewing. When a button/link says download they mean, and we understand, we're going to save it to our computer in a more permanent way. Common sense denotes that download does not mean "use this link in a script tag". I'm not trying to sound demeaning, just pointing out that while they aren't perfectly clear, any person writing Javascript should have a large enough understanding of the internet to understand this. Hotlinking is not new or newly frowned upon. edit: Admittedly, every time I've seen a script tag that directs to the jquery site I've always assumed that it was acceptable, but not really preferable (dependency of a third party network without any record of reliance). So, it could very well be that a few bad eggs started the habit and other people just pushed the snowball down the hill.
Python had Py3k. It's not directly a rewrite, but it cleaned up a lot of the language's dirtier bits. It is however a clean cut: Python 3.0 is explicitly not backwards compatible (though there is obviously a shared subset). Perl 6 is (apparently -- I'm no Perl hacker) a whole new language. ActionScript 3 is completely detached from the old ActionScript 1 and 2 and shares more syntactical similarities with Java or C# than its predecessor did. It's bytecode incompatible, too. I think a fullblown rewrite from scratch would kill PHP as it is alive today. AS was able to pull this off because it is controlled by Adobe (monopolism yay), Perl was able to pull this off because of Tim Toady (isn't he the voice of God or something?). Python got lucky because the really horribly ugly parts that needed fixing soon weren't many to begin with. PHP's ecosystem is more like Perl's than like Python's. There aren't many different implementations (possibly because PHP's official implementation doubles as the implementers' language reference) and most of them are broken or incomplete anyway. The problem with PHP's "evolutionary" approach is that evolution is great for rapid development but leaves you with all kinds of vestigial organs and congenital diseases. If you start with a perfect rodent, you might still end up with a big-brained biped with an inflamed appendix and a sedentary lifestyle that has led to chronic back pain, obesity and bad teeth. PHP is known for its warts. It won't lose these anytime soon if all it gets are backwards incompatible micro-version releases. It has spread fast and developed even faster, but trying to evolve it into a cleaner version of itself seems to be a futile attempt. It's the colloquial English among the Lojbans of programming languages.
Also, most RFCs provide a BNF definition that can be translated into a regex relatively easily (don't try this with the definition for e-mail addresses).
Funny you should mention that. I was reading RFC 3986 just a few weeks back and stumbled across this example URL: foo://example.com:8042/over/there?name=ferret#nose \_/ \______________/\_________/ \_________/ \__/ | | | | | scheme authority path query fragment | _____________________|__ / \ / \ urn:example:animal:ferret:nose I recognised this as being an example I had written in [some code](https://github.com/abw/Badger/blob/master/lib/Badger/URL.pm#L40) many years ago. I don't know how it ended up in RFC 3986, but it felt kinda nice to know that I had been cited by Tim Berners-Lee, in a roundabout kinda way.
No thanks, but your mom asked me to say hi.
very neat, and i think it's something users will be able to understand quickly.
Hmm? The domain part should be as sane as the domain part of the URL. And the username part is just approx. "anything goes except an @ and a space". Edit: Ah wait, even spaces are allowed with quoting. And "CTLs" are excepted: any ASCII control character (0x00 - 0x31) and DEL (0x127).
Yeah but most of them don't straight-up provide a regex. Let alone one with well-defined and well-described matching groups.
Looks like javascript doesn't support this RegExp syntax Chrome: /^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/ SyntaxError: Unexpected token ^ Firefox: &gt;&gt;&gt; /^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/ SyntaxError: unterminated parenthetical
In a language using '/' as a delimiter for regexps, you can't expect an unquoted '/' to be acceptable! Also, JavaScript uses a Perl-like regexp syntax, which differs from POSIX regexps (though in this case it shouldn't make much of a difference, but we can backslash every non-alphanum regular character just to be sure). Try /^(([^\:\/\?\#]+)\:)?(\/\/([^\/\?\#]*))?([^\?\#]*)(\?([^\#]*))?(\#(.*))?/
I'm curious as to why those decisions were made. Email syntax could have been made a lot simpler. The question is what would we have lost if it were?
 (function(d){ GM_xmlhttpRequest({ method: 'GET', overrideMimeType: 'text/plain; charset=x-user-defined', headers: { 'Referer': 'http://www.imdb.com/', }, url: "http://ia.media-imdb.com/images/M/MV5BMTg0MDgwNjc5N15BMl5BanBnXkFtZTcwNjMxNDY3Mw@@._V1._SX640_SY967_.jpg", onload: function (res) { var dataString = ''; for(var i=0, il=res.responseText.length; i&lt;il; i++) { dataString+=String.fromCharCode(res.responseText[i].charCodeAt(0) &amp; 0xff); } var image = d.createElement("img"); image.src = 'data:image/jpg; base64,'+ btoa(dataString); d.getElementsByTagName('body')[0].appendChild(image); } }); }(document));
Thank you sir this works beautifully, I am very grateful for all the help you guys here at r/javascript have given me with this. :)
np:) Happy new year...
herp\@derp@example.net Problem? EDIT: Looks like Reddit doesn't recognise email addresses correctly!
quick question, do I need a separate AJAX request for each individual image or is there a way to do several at once?
yes, you have to make multiple ajax calls. 
Alright thanks again and a Happy New Year to you!
Apparently escaping is not allowed, but quoting should be "herp@derp"@example.com You never see any of those addresses though.
And to think of all the time I spent looking for one, testing them and weeping that they so spectacularly fail, sometimes on easy examples. Thanks!
Forget about libraries and frameworks, learn JavaScript [i]proper[/i], and learn it inside and out. People who really know the language don't bother with frameworks because they know what they need and write it.
Out of curiosity would mind explaining to me how this code works? specifically for(var i=0, il=res.responseText.length; i&lt;il; i++) { dataString+=String.fromCharCode(res.responseText[i].charCodeAt(0) &amp; 0xff); } I've never seen a for loop like this before so I don't know what all the statements inside the declaration of the loop itself do. I somewhat get what the statement inside the loop does but don't know what "0xff" is. The other line I don't get is this one. image.src = 'data:image/jpg; base64,'+ btoa(dataString); I don't understand why the src starts like that or what the method btoa does. I'm sure these are really foolish questions but I still have a lot to learn. 
Backwards compatibility with crazy enterprise systems, probably. I wouldn't be surprised if they release an RFC 6822 which simplifies e-mail addresses to a regexp-compabitle format.
Some references may help: [btoa](https://developer.mozilla.org/en/DOM/window.btoa) [Data URIs](https://developer.mozilla.org/en/data_URIs) 
here would be a good place to start: http://www.reddit.com/r/java Java and Javascript have no actual relation, the name was picked for marketing reasons
In less then a minute I already feel stupid, thank you!
Blame the losers that decided to name their language "javascript" back in the 90s when the world was wetting itself over everything java.
Happens to everyone
The person who was designing it was forced to make it look more like Java, even though it wasn't really like Java at all. See http://www.youtube.com/watch?v=hQVTIJBZook
Just imagine a world where it's called COBOL Script
I'm reading more about the origin of javascript ( livescript, why couldn't they have just stuck with that name?) [here](http://www.howtocreate.co.uk/jshistory.html) where they say "it was renamed JavaScript when it was released." It's disappointing that the article (and all articles it seems) don't actually give us the name of the idiot (probably somebody from marketing) who made the decision to call it javascript.
This has nothing to do with Javascript as a language. A widely deployed mediocre language is still a mediocre language.
Interesting, I just wrote a [small function to flatten objects](https://gist.github.com/762197).
They do have no real relation, but their names and naming conventions are quite similar
 as the world turns, like the wheel on hipster bike all praises due, to the dude name brendan eich might as you try to make sense of the name javascript aint from Sun, suit and ties are to be blamed
Here are some good places to start MDN JavaScript Reference: https://developer.mozilla.org/en/JavaScript/Reference And if you are writing javascript for websites, you will likely want to use a library such as jquery, so here is a guide to getting started with it: http://jqfundamentals.com/book/book.html and here is a guide to debugging it focuses on jquery, but is good for vanilla javascript as well: http://fixingthesejquery.com/
awwwww shit son... cracka is layin down da boogie! Thats how the cool kids talk, right? 
Thank you!
My use case for this is to make sure no one gets email from test systems. This is not the only measure but a very simple and effective one.
JavaScript does not really have true support for binary data. This is why we need a trick to read binary data. First, we need to tell the browser to get the data as an unparsed string by calling overrideMimeType("text/plain; charset=x-user-defined") on our XMLHttpRequest. But the response data are still characters. Each byte has been turned into a 16-bit Unicode character. The bytes 0-127 translate directly with a zero high byte. The bytes 128-255 get a high byte of F7 which puts them into the Unicode PUA (Private Use Area) with no interpretation. We don't need these high bytes because we loop over the response data and mask (value &amp; 0xFF) the high byte of each char code to get only the low byte value. 
how could they not see this coming?
Neat, but the slide stops working when the window is resized.
&gt;This is like saying you like driving, but hate being on the road. No, it's not, but thanks for the specious simile. It's *really* like saying: *I love driving. It's the cars that I usually have issues with.* That is correct, and there is nothing absurd or contradictory about the statement, as you attempted to imply. 
Amen. Signed, A JavaScript Samurai.
Yeah, because pushing business logic back in-line into the presentation layer is EXACTLY what I want to happen again.
PHP is not going away any time soon. It's really not a bad language. I've been using it for more than 10 years now, and I've never seen any problems caused by the language itself. I wished it had certain features a couple of times, but that can be said about any language. Looking at some of the examples on the page, it's not exactly clear what's going on. Like in the very first one: &lt;?jspp $(this).text("This is server side!"); end(); ?&gt; What is this dollar sign? What does **this** refer to in that case? Why is there **end()** ?
Move with drag and drop Zoom with mouse wheel ~~Profit~~ Be patient
So does your spelling :-)
Very nice visuals. Even the code itself is pretty.
undefined === "doesn't exist" null === "exists but hasn't been assigned a value"
And why exactly does there need to be a distinction between the two? 
I was wrong undefined === "doesn't exist || exists and has not been assigned a value" null === "exists and has been assigned the value progmatically" Now the distinction becomes more useful, if something is null you can be certain that it was intended to have no value undefined is useful for identifying variables/properties that have never been used, never been delcared, or have been deleted null is useful for identifying variables that are being used and intentionally assigned a null value. Edit: it should also be noted that Javascript did not originally have exceptions (not until the third edition), so this was a much more useful distinction in the past.
Nice. Reminds me of the [CSS coke can demo here](http://www.romancortes.com/blog/pure-css-coke-can/).
I'm not seeing that. Which browser are you using?
The latest release of Firefox, 3.6.13. To emulate the bug scroll all the way to the right, then resize the browser window. There is also a bug in the latest version of Opera, 11. Beyond the first scrolled image in the slide, the images disappear. 
thanks.
I see that you're new to reddit, so let me try and help you better understand our community. First, we show respect for one another. We also don't resort to threats, and we don't resort to insults. We discuss various topics politely, and we remain civilized. Please try to aim higher than you currently are.
I see that you're new to reddit, so let me try and help you better understand our community. First, we show respect for one another. We also don't resort to threats, and we don't resort to insults. We discuss various topics politely, and we remain civilized. Please try to aim higher than you currently are.
I see you're new to reddit, so let me try and help you better understand our community. First, we show respect for one another. We also don't resort to threats, and we don't resort to insults. We discuss various topics politely, and we remain civilized. Please try to aim higher than you currently are.
I see that you're new to reddit, so let me try and help you better understand our community. First, we show respect for one another. We also don't resort to threats, and we don't resort to insults. We discuss various topics politely, and we remain civilized. Please try to aim higher than you currently are.
I see that you're new to reddit, so let me try and help you better understand our community. First, we show respect for one another. We also don't resort to threats, and we don't resort to insults. We discuss various topics politely, and we remain civilized. Please try to aim higher than you currently are.
This could be used for a fun little hand-cranked stop-motion gubbin.
nice
do you know of any good tutorials for learning about this? Or any that teach about the Mime type?
The whole "linux desktop" meme dates from a simpler time when it was all about Microsoft. So you're right: the desktop has become much less significant that it was in 1998. It turns out that Linux didn't *need* to conquer the desktop.
I wrote [a blog post about this in November](http://skilldrick.co.uk/2010/11/a-brief-introduction-to-closures/) - I hope it helps! It was also [discussed briefly on proggit](http://www.reddit.com/r/programming/comments/eafnm/a_brief_introduction_to_closures_using_javascript/).
&gt; but still it sings false and my guess is that though they look the same, a different closure gets created for each and so they are indeed different objects. Yes, that's what's happening. &gt; 1. Is there any way to inspect closures? You can use .toString() to decompile the generated closure. 
Give the returned functions names and you can compare the .name property on the returned functions. That'll help you figure out that they are the same functions, I think.
Here's a trick that I use sometimes in functional code: var L = function Lark(x) { function bla(y) { return x(y); }; bla._underlyingFunction = x._underlyingFunction || x; return bla; }; I don't know if it is exactly what you want. But you will always have a reference to the underlying function no matter how many times you wrap it. 
It's only to help you debug it. You can always remove those references later.
This needs an article?
[r/node](http://node.reddit.com) has been almost dead for awhile, I would also love it if people could cross post node projects from here into [r/node](http://node.reddit.com) as well.
i dont think this is really a javascript issue, but a programming + social issue. its too easy to jump on the latest flavor-of-the-month technology, post a hello world tutorial to [social news site] and then move on to the next thing.
See, I've only heard of node.js here. I went to the official site, looked at the documentation, looked at the tutorials but I still don't get it. I don't know why it is significant. I really would like to learn. But all I can tell at the moment is that it is javascript that can make a server?
I like seeing Node stuff here. I'd also like to see any other kind of non-browser JavaScript here. The language can be used anywhere. That's what it makes so interesting.
That's why i asked that it be tagged instead of saying "keep it in the node subreddit". I know people like having it, I'm just tired of getting duped :)
That's pretty much what my impression of it was as well. If I ever have a need to write a custom server I'm absolutely interested in using it for that purpose. I'd also love to see it become a native option for shell scripting in OSX. However, I don't really consider it a "web" technology.
I guess the best way to understand node's significance is to try and make a web app in something other than node. Once you go through the pain of trying to make any rich-ish web app in php or java you start to understand the benefits of a application written in node. Anyone can talk about the possibility of code sharing between client and server, or the close integration with web sockets and fast document-based database systems (mongo, redis). The [express framework guide](http://expressjs.com/guide.html) page has some good examples of how easy some functions can be in node. The proof is in the pudding. Next time you wanna write a web app, try it in node! 
If you are trying to prove that the results of your compositions are functionally equivalent then that's a little tricky. :) EDIT: You might be better off in another subreddit for these questions. [/r/programming](http://www.reddit.com/r/programming), [/r/lisp](http://www.reddit.com/r/lisp) or [/r/coding](http://www.reddit.com/r/coding) may give you better answers.
Do you consider V8 a "web technology?"
I don't think there's an issue at all. I'm willing to bet that Node will be more than a "flavor-of-the-month technology." I'll give you 5:1 odds that it thrives - you define thrive.
That's like asking if I consider Perl to be a web technology, or if OpenGL is a gaming technology, or if GPS is an automotive technology. On it's own, no, V8 is not a web technology, it's a scripting engine. When combined with a DOM layer and bundled into Chrome it becomes a web application, but not a web technology.
There is no reason you can't do the xposting if no one else will. 
I agree, but I'd add to tag any framework. I'm tired of seeing jQuery plugins. jQuery is amazing, but I'm at the point that I've become overwhelmed by the plethora of plugins. 
In the strictest sense, this is about the JavaScript programming language and things written in it, so I think there's a reasonable argument for including Node.js stuff. I say this as someone who, like you, has no current interest in the project. Have you considered using "node.js" as a keyword in filteReddit, under the [Reddit Enhancement Suite](http://www.reddit.com/r/enhancement)? I find this very helpful in the heavy metal subreddit to block out posts about bands I strongly dislike.
That's why I asked it be tagged, not kept out of the subreddit.
"Hey this is a really cool node project. I'll post it in r/node so I can see it later!" Just kidding, it's good advice.
Iv played around with it a bit on several small things. Iv used it to create maps, a toy cached server, a bittorrent tracker, parsing various things etc. Its nice to be doing some javascript for the browser, think of something else you need/want to do and jump straight into writing a script for it then straight back to work without a language context switch. Im currently waiting on v 4, which includes a few nice fixes and speed ups (buffers!) before I start a serious project with it.
The main thing is node.js for the most part is async, be it sockets, files, or otherwise. It does this through a event loop, where almost everything has a callback. eg if you read from a file, rather than holding up processing it does it in the background then fires a event/callback off when done. So basically, rather than waiting around for stuff like with most other languages you can do other stuff while waiting on other stuff. 
Create the Audio objects on the JavaScript side and handle everything over there. It's a lot easier that way.
http://www.schillmania.com/projects/soundmanager2/
Good lord, if you actually believe the bullshit that you're spewing out here, then I sure hope you aren't actually involved with any real software development.
Important qualification: as far as web servers go, Node.js is **crazy** fast because it does asynchronous I/O. Even merely asking the OS for the size of a file is an I/O action and so the result must come through a callback. The way this asynchronicity is implemented -- callbacks -- is very well-suited to JavaScript, because JavaScript has anonymous functions. Now that clock speeds have mostly stopped growing but the number of cores on a CPU keeps rising (no more Moore), parallel programming is becoming more and more important.
If you expect people to tag with Node, then they should also tag with [client-side] every time? Or you believe that client-side is default?
I think this is a good idea, and if so, we could use tags for other stuff like: [ECMA x] - where x is a version [jQuery] [Prototype] [MooTools] [YUI] [Dojo] [Node] Or maybe any other? Having those tags, will allow you quickly grasp things that are interesting for you? (and avoid the other?) We can also mix some together, like [jQuery][plugins]. We have a lot of space in reddit, so we could use it...
[HTML5] is a reasonable tag. In fact, I may just do that.
Something like CommonJs Modules fix that. I wish more libraries would adopt those.
I like the API itself it's minimal but useful.. not trying to impose itself onto my game objects. What I don't like is your coding style: * your attach properties to the host objects Array and Object (breaks for each and considered bad practice) * pollutes global namespace * no form of module or class pattern (which would make the code even more readable) * TABS :(
I'd say the same about dojo, except nobody talks about it online (or seems to use it) :(
The only thing I found new in here is an awesome way to turn arguments into an array. For years I've used: Array.prototype.slice.call(arguments, 0) But this is pretty cool too: [].concat(arguments) EDIT: Spoke before I tested. The method below, in fact, doesn't work. :(
If I'm already using Python (Django, pylons, etc) as a server-side language, why would I want to use Node.js instead? I'm not being a dick, I just want to hear a compelling argument for it. 
**REDDIT NEEDS TAGS** Case and point; Stackoverflow. Or multiple assignments per thread; /r/javascript /r/node Denoting stuff in a title is a piss poor solution; Devs help.
I used a double-buffering type arrangement with two HTML5 audio players. one would be playing, the other would buffer. when the first audio player was within the last 5 seconds of the song, it would do a cross-fade and play the file in the second player, fading the music in on that and fading it out on the first player, then the controls were transfered to the player that became active. Had this set up as a jukebox that played a list of songs. Worked really well on an 800mhz netbook, with google chrome, while google earth (not maps) was running in a separate DIV layer. playback was smooth even with 2 players going and scrolling around in 3D on the google earth embed, all on an 800mhz atom cpu.
This is exactly what I want to accomplish (besides the crossfading). Would you be willing to provide some code or pointers? It's very hard to find information about it.
This may work, but the problem with some javascript wrappers that I've used, specifically jPlayer, is that they don't like the URLs I pass. You can see that the URL "mediaservice.php?type=ogg&amp;file=/media/music/song2.mp3" is a PHP file which renders a mp3 file into either ogg or mp3. jPlayer suggests that the URL is malformed when the &lt;audio&gt; element works fine with it. Since I only need the basic functionality at this time, I don't want to try to implement a complex javascript wrapper just yet.
I just checked this out. If it doesn't care about the URL I pass to it then I'll give it a try. I'm weary about how that process the URL and some of the added complexity.
It's not very difficult, actually. Create an Audio object, use canPlayType to figure out if it can play ogg, if so, set the src to the ogg file, otherwise do the same with mp3 (and so on)... and you can attach event handlers (always do this before setting src)... and call play and stop, etc. It's pretty straightforward, really.
No luck with me on chrome or safari
[ECMA-262 3rd Edition][jQuery] foo bar [ECMAScript 5][Node][YUI] bar foo Looks sorta painful to me.
Seams you don't understand the concat method. Since the arguments object is not an array, that code will produce an array where the first (and the only) value is the arguments object.
I'll try that now. I had to go through one other test to see if it would delete the player, set the ID attribute of the holder, and then re-create a new holder. It was a huge hack but I like doing weird stuff like that just to see where the limits are.
Wow, you really had to exaggerate? [ECMA-262 3rd Edition][jQuery] - if JQuery is a main topic, is [jQuery] not enough? I dare you to find a topic that strictly is devoted to both. Or use [ECMA] for regarding language news, tutorials like. f.i. http://dmitrysoshnikov.com/notes/note-2-ecmascript-equality-operators/. I thought this was obvious... doh I was proposing something like adding [plugin] to some tags, unless you just like reading about new jQuery plugins, over and over...
you'd probably need custom play/stop/volume controls that interact with whichever player is the 'active' player. use a variable that specifies which player is the active player, then target the custom controls to work on that player. the player that is not active would be the 'buffer', loading the next song. it's not that difficult really. The code I have wouldn't be of much value I think, it's not done with any libraries (no jquery) and it was pretty specific to the application I was developing - not a web app, more of an embedded off-line application, loading music from local flash-memory storage. 
Well, you can use jQuery with Node for example... in which case you don't necessarily have to restrict yourself to the 262 3rd Edition subset. I sorta tried to point out that it isn't always easy to pick the "right" tag for a given topic and that things can get pretty messy very quickly.
True, with that I can agree. But even still, I am not sure what is worse, no "tags" at all, or too many "tags".
I understand where you are coming from. I meant "flavor-of-the-month" in terms of the person who is just going to go and drink some other kool aid next month. I didnt mean it as a jab at node.js
If anyone is interested in reading more about the process as it went along, there is also [a thread on Facebook.](http://www.facebook.com/topic.php?uid=173534922657508&amp;topic=233)
server-side javascript is still javascript.
Agreed - the article needs to be fixed. The correct way to convert arguments to an array is: `Array.prototype.slice.call(arguments)`
Here's my new code, which works for both Firefox and Chrome (Firefox is good for my phone). I haven't added in the src switching, but that's trivial now. var audio = document.createElement('audio'); audio.setAttribute("id","audioPlayer"); audio.setAttribute("controls","true"); audio.autobuffer = true; audio.preload = "auto"; audio.addEventListener( "canplay", function(){ audio.play();}, true); //Chrome still has issues with ogg. if($.browser.mozilla &amp;&amp; audio.canPlayType("audio/ogg")){ audio.src = "mediaservice.php?type=ogg&amp;file=/media/music/song.mp3"; }else{ //Chrome audio.src = "mediaservice.php?type=mp3&amp;file=/media/music/song.mp3"; } $("#player").html(audio); audio.load(); audio.play();
I see now. Excuse me. :)
Randomly, I'd see dogs balls as a good thing normally and dogs dinner as a bad (disregarding shiznit). Obviously doesn't tie up to your usage above, but a random one. Are you uk based OOI?
You are absolutely correct. I knew it was array-like, but I figured it was just array-like enough to work. Guess not. Thx for the correction.
I think this is too late to be seen but this no longer works. I know for sure they changed ProfileStream.getInstance().showMore(); to UIIntentionalStream.instance.loadOlderPosts()
Could take a look at http://javascriptmasterclass.com/
That's fantastic, thanks!
Is this something you'd use yourself, or a play a prank on someone
Reddit is slow enough as it is. Don't make it worse.
That's my point though, when we're splitting hairs we can come up with ever more exclusive definitions of terms like "web technology." I think that it's hard to have that term not encompass technology designed to be used in web environments like V8. 
This is for facebook. Besides Reddit has checks for this sort of stuff and ignores it after a certain threshold.
Oh ok. Nevermind then. Nuke away.
Why isn't there at least one screenshot? How did that happen? There are 2 visual kinds of media involved and there isn't even one image. It probably took you ages to write those ~3k words and it also took you ages to make that game... and yet you can't even be arsed to make one or two screenshots? Is it not worth these 2 lousy minutes? Why are you sabotaging yourself? (Yes, this annoyed me so much that I didn't even read one word.)
If you're in the bay area, taking Stanford's CS242 Programming Languages class taught me tons about javascript and haskell's deep innards. It's definitely NOT aimed at web-based stuff though but you'll get into the real language.
Facebook does not use jQuery, they simply have their own $ variable defined, which would conflict with jQuery's. Aren't global variables wonderful?
Can I access my SQL DB using this? No? So, why would I use this instead of PHP again?
http://www.rebeccamurphey.com/ Seriously.
Doesn't load new statuses for me. Also, it'd be awesome if you could like comments as well.
She's running a 4 week online course at http://codelesson.com/jquery BTW (if you don't want to bring her in-house).
I follow and am followed by a lot of the same people as Amy on Twitter and I've seen nothing but praise for her and Thomas's online classes. I've even asked a few people in private about them as, well, they're not the cheapest out there and I was wondering if people really saw the value (I'm interested in running similar classes in a different niche).. results all positive. Disclaimer: I'm a casual acquaintance of Amy's on Twitter but have no incentive to promote her class as such.
ExtJS/Sencha. Their framework is amazing and day gaining ground in the enterprise application arena. Instructors are seriously good developers and teachers.
I tried it, and it "liked" the first four likeable things (one new-friend thing, two posts, and a post from someone else on their wall) but that's it, I think a real bomb should like everything back to 2009 posts. ;)
Yeah, I realized after that it's not properly loading olding the "Older Posts" though I am not sure why. If you look at their souce code by pressing "Older Posts" it calls an onClick to UIIntentionalStream.instance.loadOlderPosts(). I am not that great at javascript I will readily admit, but I call that in my code, as it was in the code I based it off of, but it doesn't seem to do anything when called in a javascript bookmarklet. 
I included a link to the game, which runs in a browser, and costs nothing, just like the text. That's somewhat better than static screen shots. But you make a good point. I've never tried blogging before, and eventually I can figure out how to post a screenshot. Thanks for the suggestion. :-)
Ok, added some screenshots. I suck at this.
mass upvoting scripts don't work on reddit. if you vote too many things up in a short time, the site just starts ignoring you.
&gt; Is this the death of PHP? No.
It says it's using jQuery, so I'd guess the $ is it utilizing jQuery.
[A gift, for you!](https://github.com/felixge/node-mysql)
Why link to some random blog that adds no additional information, instead of going directly to [Underscore.js website](http://documentcloud.github.com/underscore/)?
came here to say the same thing - underscore.js is awesome, and it's nice to see it get some press... but it's not like anything new has happened, and this blog adds no value.
Thanks for the direct link. gst may or may not be Xah Lee (he has four submissions to that blog in the last few weeks), but the latter is a known troll who I remember from the Omni Group's macosx-talk mailing list and I'd prefer not to give him any traffic.
Hey, this is not how you are supposed to use the site
gst is not me. I never submitted my article to reddit (mostly because i dont use reddit much) (ps afaik gst is a bot i think someone mentioned, and thanks to those submitting my articles or bring discussion)
gst is a bot.
Lol that's ok, my JavaScript knowledge consists of making a series of thumbnails and one large picture, and using JavaScript to make the large picture that of the thumbnail when you click it. So like, one line of code. So the fact that you can even click one "like" button with JS is more than I can do yet :P
Any word on browser compatibility?
How does this differ from running 0.2.6 in secure mode with OpenSSL?
Uh, you could do HTTPS from about 0.2.x, this just seems to be some kind of shortcut layer.
&gt;Pentu is a tiny little JavaScript library for modern, standards-conforming browsers to make common tasks easier. Suggests that IE6, IE7, and IE8 aren't supported.
Yep. What skeww said below. I've successfully tested it on Chrome (so I guess Safari works just as well) and Firefox 3.6.
0.3.4 introduces server-side HTTPS. Previous versions only supported client-side HTTPS. Also node.js fans should check out the [node.js subreddit](http://www.reddit.com/r/node/).
&gt; There’s a tiny ad-hoc test suite in test/. &gt; &gt; * Chrome 10.0.624.0 (canary): All successful &gt; * Chrome 8.0.552.23: All successful &gt; * Firefox 3.6.12: All successful after some gentle coercion No mention of IE. Would be interesting whether it passes in IE9 (and Opera!), though.
Pushed some updates to the repo and readme. Half of the tests pass on IE 8 after some tweaks to the test suite. I don't have IE9 at hand though - Opera 11 passes with flying colours, as does Android 2.3's browser.
What's the best way to run lint on the command line? There used to be a version for Rhino on Crockfords site, but it seems it's gone.
d8 would work, I guess. It's some debug console thingy from v8. It's very similar to the shell example application, but it also supports things like command line parameters (the v8 shell already allows you to read/write files and also to load/execute js files). Well, if you know some Java, you could also go that route. Hm. I could give it a try, I guess.
I use this on Windows: http://www.javascriptlint.com/download.htm It's pretty old (Dec 2006) but still useful and you don't need to any kind of special setup to run it.
Do you have a link? I didn't find much with google.
I'm also using something old. It works well but there must be a standard way of using the latest version. I don't find much by googling. It seems to be something so obvious that no one bothers writing about it.
I just got off the phone with Netcraft and they've confirmed it. PHP is no more. RIP
You have to compile d8 (or the v8 shell) yourself. Google doesn't provide binaries for this. Not sure why... would be surely handy. On Windows you need Visual Studio for that (the C/C++ flavor) and that big fat Windows SDK (1.5gb in size if I remember correctly)... and you need Python, Scons, and something I've forgotten. Well, it's a massive pain in the rear. It's quite a bit easier with Linux though. Well, my generic JSR-223 (Rhino... kinda...) d8-like wrapper is almost done. I got `print`, `read`, `readLine`, `write`, and `load`. Passing parameters is the next thing. I want to mimic d8 as closely as possible (the non-interactive part, that is). **Edit:** JSR223 + varargs = pain :/
I use this: http://code.google.com/p/jslint4java/. Requires that you have java installed, of course. Bundles JSLint + Rhino into a single jar, and adds a wrapper main class w/ command-line options.
https://github.com/mahonnaise/RhinoCli This should do the trick. It's pretty much like d8 (minus the interactive part).
This. Update if possible? It'd be much appreciated.
Worthless to me because it doesn't let me turn off style guidelines (surround each line with curly braces) that don't interest me and don't affect a script's representation in memory to see actual warnings like implied globals.
Something that should help: Java is to javascript as ham is to hamster.
Instead of using the jQuery site, you should be using [google's library](http://code.google.com/apis/libraries/devguide.html) of it instead. For example: &lt;script type="javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js"&gt;&lt;/script&gt;
Great work my friend.
Link to JSLint -&gt; http://www.jslint.com/ Full source -&gt; https://github.com/douglascrockford/JSLint
closure compiler's whitespace+pretty print puts them in, jsutility.pjoneil.net to put the semicolons back in, jsbeautifier to pretty print it. Drawback is this method will strip your comments and spacing out.
I think I fixed it. I removed "overflow: hidden;" from one of the divs. Thanks for the help! 
For those needing IE6/7 support, you might think about allowing Sizzle (or another engine) to be used instead of querySelectorAll(). It wouldn't give a live view of the document, but it might make it usable for backwards compatibility.
There should be a guide on how to survive the information overload on that website too.
This is good news. But I really wish some of the style guidelines were optional. Starting an identifier with an underscore is both legal and safe, and is used by the popular jQueryUI library to show sort of (but not really) private methods. 
Pentu doesn't promise live views of the DOM as it is, so no worries there. However, I pushed a new version that works more on IE8, supports Sizzle if it's loaded before Pentu, is more expandable and overall a little nicer.
removing `overflow:hidden` makes it work on firefox too. Although it is still set to hidden when I visit.
The JavaScript community is pleased, as ever, to answer your html+css queries.
That's great. It looks exactly like I was looking for. There's even a way to integrate it with emacs!
Thanks. I guess I still would have to figure some things out to make it work with jslint, so it's easier for me to use that jslint4java pixelmonkey mentioned. But rhinocli does look like something that I could need eventually. I bookmarked it.
without knowing anything about the google spreadsheet api you should probably be able to use a custom comparator function. Do the docs mention anything like that?
The docs support pages don't give much info on javascript, but my (poor) understanding is that the API would support anything that javascript supports, but adds some pre-defined objects/methods. So yes, I think could write a custom comparator function.
Fuck yea! :D
http://www.w3schools.com/jsref/jsref_sort.asp foo.sort( function( a, b ) { if ( "" == a ) return -1 else return a &lt; b; } ); ...or something. You'll figure it out. The term is "custom comparator" or "custom comparison function". --Robert
Is the thing you're trying to sort a javascript array or some kind of special Google Spreadsheet Object with its own .sort() method?
sort the array, count the number of empty cells and then remove them from the ass end of the array, make a new array w/ the spaces in front. might not be optimal but you can write it quickly.
sort then reverse?
Ye, had no time to add any examples, but it's straightforward enough, I guess. My primary reason for writing it was because I sorta need something like that myself. I can't compile v8 on Windows anymore (Linux is fine) and I'm not sure which revision was the last one which worked. Unfortunately, I only got a v8-shell binary, which is missing a few useful bits. Last week I had to do something really awful... I used the shell to read some SVG, replaced some color, printed it, stdout was redirected to a file, which was then opened by Inkscape &amp; exported as PNG. Since there is no support for arguments in the shell, I had to pipe the hex color into some file, which was then read by the shell application. Well, it worked just fine, but jeebus... can't get more roundabout than that, really. My future self will probably hate me. (There are of course a zillion other ways to do this kind of thing, but this was the quickest one.) I'll probably make some things which augment this environment a little bit. A minimal Canvas implementation (images, pattern, gradients, transformations, clipping, compositing... no text/paths) would be pretty handy. And it's not that hard to do (did one for Flash already). Generally it's more of a temporary thing though. In the future I'll most likely use Node for this, but right now it's a bit of a bitch on Windows.
I think the NavigationTiming spec that's being implemented is equally as interesting!
It's not *that* new though, but yea, it's a great addition. It enables very accurate performance tracking with very little code and virtually zero side effects. I do sorta agree with Opera and Mozilla, however. Putting it into a global "performance" property will of course cause some issues with some websites. Opera's "navigator" suggestion sounds pretty sensible to me.
Good point, I meant to be very clear about that that. I'll update my question. I'm sorting a range of cells in a Google Spreadsheet with its own .sort() method. Unfortunately, the extent of the documentation I can find on it is here: http://code.google.com/googleapps/appsscript/class_range.html#sort I can very easily use the method range.getValues() to store the values of a given column/row/range as an array. I imagine going the other way (setting the range values to those of the array) wouldn't be much harder, so a javascript array.sort() method that reorders rows in a 2-D array while keeping each row intact would work.
This is a good workaround; I'll definitely keep it on my list of ideas if I don't find something more direct. Thanks.
... I think it's time for me to head to the library. I saw a blog that said "any novice will recognize function sortNumber(a,b) { return a - b; } array.sort(sortNumber)); as the method for sorting numbers." This is similar to what it says on w3school, and I saw many other suggestions similar to yours when I was googling this question... but I don't understand what's happening here (and, until now, wasn't sure it was relevant. Now that I know it's relevant, I'll learn it.) If you feel like explaining some simple concepts to a newbie, I have a few questions about this snippet, but if you don't, no worries--I'll get it sorted out one way or another. (yuk yuk) I'm comfortable with passing values into a function using function(a,b), but in this case (the w3schools example) I don't understand where a and b are coming from. The sort(function) doesn't pass anything into the function()-- or even use parentheses at all to call the function? What is that about? And I don't understand what a-b is doing-- subtracting the first number in the array from the second, is my best guess. But... what does it do with the difference, and when does it get around to sorting the array? Or is that just a hyphen and not a minus sign? (Playing with w3, I'm intrigued that changing the - to a + gives a valid result, but orders things according to a pattern that I'm not figuring out... and?? Performing any mathematical function on a or b other than subtraction gives the same pattern, which is not in numerical order, not the order originally given, and not an order based on the first digit of the number...anyway, now I'm just thinking out loud.)
Take what I say with a grain of salt as I'm not actually doing this at the moment: * aggregate into a small number of files - certainly in the old days browsers only paralleled a set number of requests at a time and these slots are also being used for images, external css, etc. * minify the js with your tool of choice * only on-demand for stuff that's unlikely to be used and bulky - tacking an extra 50k onto the initial js download isn't going to be noticed by anybody other than modem users.
Thanks. I'm leaning toward putting the "90% use case" files into one file at the top of the ondemand loader, then put in the other files as one-offs to load behind. I'm still open to "no that's wrong!" replies.
you're passing the comparator function into sort() as an argument. The sort() method compares every element to every other element by passing each element into the comparator function. (That's where a and b come from) If the comparator returns a negative number (doesn't matter what, just &lt; 0) then `a` is judged to be less than `b`. If it's a positive number than `a` is greater than `b`. If it's 0 then `a` and `b` are equal. You can write your own comparator and write your own rules for comparison as long as it returns a negative, positive, or zero number following the same rules. (Changing the - to a + will sort with a confusing pattern because it's always positive, so everything will be judged greater than everything else.)
My only other comment would be that you can't make any reasonable decisions without testing and measuring - and even setting out to challenge your assumptions. It's hard to otherwise make any concrete suggestions as your original post is fairly light on information. Certainly my first step would be to aggregate and minify all of the js files to get an idea of the size of the problem I was dealing with before I started worrying about splitting and dynamic loading etc.
http://kangax.github.com/es5-compat-table/strict-mode/ (referenced by that article) Interesting stuff. * FF 3.6.13/Opera 11 = 4 green (same) * Minefield = all green * Chrome 10.0.628.0 dev = all red I sorta expected Chrome to be ahead. **Edit:** I haven't used strict mode ever. Without an engine for testing it was just too risky.
Awesome! That makes a lot of sense, thanks.
Don't listen to the "speed freaks". Don't do premature optimisation before you haven't entirely understood the implications of both concatenating/minifying and lazy-loading javascript: * **Concatenating/Minifying**: For development, its good to split your JS app code into many individual JS modules (files). This makes it easier to find and reuse code (e.g. if you want to reuse your common utility functions, you just need to clone app.util.js, instead of copy/pasting from a dozen of files). But for deployment, this scenario is a nightmare, because the HTTP Request Pipeline the browser gets cluttered with a lot of tiny js files that carry a lot of protocol overhead. You can overcome this by introducing a compilation step that concatenates and minifies your javascript into 2 or 3 js files for deployment, which will greatly improve loading performance by minimizing necessary requests and size of your javascript files (e.g. jQuery uncompressed: 180 kBytes, minified/gzipped: 26kb). But here are some often overlooked implications of js compilation: - You can't fiddle around in the deployed js files anymore. If an error occurs, you have to fix it in the dev js files and then re-compile everything. This costs time, but prevents monkey-patched js (e.g. quickly fix something in the deployed files, and with the next rollout your changes are gone) - You will need an uncompressed dev build of your js build as a drop-in replacement (firebug's error messages aren't particulary useful for compressed js files) - Choose your js compiler wisely. You will need to recompile quite often, so its needs to be fast and run flawlessly in many environments. It should also be extensible if your project grows more complex (e.g. support for specifying dependencies between js files) * **Lazy/On-Demand Loading**: You can also improve the loading time of your app by loading js files once they are needed. As lazy-loading is an asynchronous operation, it will make your code more complex (issue the script request and continue your program flow in a callback), so this effort is only worth its costs with big, external js apis (e.g. Google Maps) if they are an optional part of your application.
I want this on FireFox! It will be ace! 
I'm planning to add a table of results to those tests as well; listing only few latest implementations. Right now it's gonna look pretty simple — FF4 and nightly WebKit are pretty much all green, while the rest are pretty much all red. Those few green spots in FF3.6 and Opera are actually false positives (the results aren't affected by presence of "use strict" directive, as there's no such thing as "strict" vs "non-strict" mode in those implementations; the reason they're green is because those implementations just follow strict-mode-like behavior by default. Something I should fix). So only WebKit and FF really implement strict mode now. I've heard Chrome is working on strict mode support (they are already decent at ES5 support overall). Opera will probably be the last to join the rest (it's really lacking behind now). Haven't heard anything from IE9 yet.
Re downvotes: In case you don't think this is JavaScripty enough, here is the source: http://github.com/clehner/infinite-maze/
Not exactly game engines, but there's [Raphael](http://raphaeljs.com/), and [box2dweb](http://code.google.com/p/box2dweb/).
Cool. I added those to sections of their own.
I like it. That should a nice boost for backwards compatibility if it's required. Nice work! Have you run this through your tests?
sprite.js https://github.com/batiste/sprite.js
Which browsers support this? I don't know much about script, but I just tried it on Chrome and IE... Chrome worked but IE didn't. 
Thanks. Added to list. :)
Here is one you might want to put in there. Gury. Not a full game engine but still a pretty sweet Canvas object management framework. They got an example of a simple "same" type of a game in the demos. http://guryjs.org/
The one used by: http://www.chromeexperiments.com/detail/monster/ - pre3d: http://deanm.github.com/pre3d/
[This](https://github.com/giancarlo/j5g3) is the engine I've been working on, still pretty beta, but has basic functionality. It is not done yet though, but I hope to finish at least v1 and release a game soon.
On the project I'm in, we've chosen for aggregating the js and css into 2 minified bundles. These files are then cached by the browser so when the user navigates to the next page, the js and css will come from cache. Relying on the browser cache will allow me to not worry so much about a single 'bloated' js bundle (within reasonable limits). 
very nice!
yeah I think your right. I am trying to think of something that is the right difficulty so I can finish it by then. I did a paddle game tutorial today but that was pretty simple...
On the browsers I had at hand. That is Chrome, IE8, Firefox and Opera. I see no reason why the mobile browsers would fail any tests with the new hotness either...
patch a bug in my gaming engine [Rosewood](https://github.com/vonkow/Rosewood)? Dunno if it'll be useful, but my engine's code is fairly well commented and might help you see some common things a game uses.
Cool, I'll check that out
I've been working on [fabric.js](http://kangax.github.com/fabric.js/test/demo) which could be used as a game engine. Also have this rough canvas libraries comparison table — http://goo.gl/cH0Gb
Since you've posted this here--and both github and reddit use markdown--is there any reason why you wouldn't just post the contents here in the self-post text, and maybe use the github gist as a mirror?
In common terms sorting puts things in order. Order for numbers is generally defined by "&gt;" and is well-defined. Most programming languages understand that not everything compares well with "&gt;" so they let you substitute a comparison function instead of "&gt;" that the sort function uses when rearranging things. You can think of "isGreaterThan( a, b )" will return -1 if a is less than b, 0 if a == b and 1 if a &gt; b. That is all abstracted away by simply saying "return a - b" b/c the sort algorithm only cares about negative, positive or equality, it doesn't care about magnitude. Your "isGreaterThan()" function will have to take into account that "X" and "_" have a different greater than / less-than relationship than normal. But still you are just returning positive, negative, or 0 for any two values passed in. As an example, say you'd want to sort the colors of the rainbow: &gt;&gt;&gt; ["red", "orange", "yellow", "green", "blue", "purple" ].sort() ["blue", "green", "orange", "purple", "red", "yellow"] But, pass in a custom comparator function and you can get it to "do what you want": function rainbowCompare( a, b ) { var lookup = { "red": 1, "orange": 2, "yellow": 3, "green": 4, "blue": 5, "purple": 6 }; if ( lookup[a] &amp;&amp; lookup[b] ) return lookup[a] - lookup[b] else return 0; } &gt;&gt;&gt; ["blue", "green", "orange", "purple", "red", "yellow"].sort( rainbowCompare ); ["red", "orange", "yellow", "green", "blue", "purple" ] ...and voila- good programming environments always let you determine the relative value between two items when sorting. Even in the above case, where normal alphabetical ordering is well-defined and agreed upon, but ultimately incorrect for the situation at hand. --Robert
**Edit:** seems like the OP has incorporated and extended this table into the self-text, and so I'll let the work continue there. ___ OK, this is the best I could do right now (stayed up later than I should have to do this). It only contains the free 2D engines at the moment, maybe tomorrow I'll finish up the list. Engine | 2D/3D | Price | License | Website | Notes --------|-------|-------|---------|---------|-------- sprite.js | 2D | FREE | [view](https://github.com/batiste/sprite.js/blob/master/LICENSE) | [link](https://github.com/batiste/sprite.js#readme) | Created with goal of having common JS framework for dsktop and web. ` `^[1] The Render Engine | 2D | FREE | MIT License | [link](http://renderengine.com/) | Cross-browser; extensive API; open-source.` `^[2] gamequery | 2D | FREE | CC BY-SA 2.5 | [link](http://gamequery.onaluf.org/) | jQuery add-in gTile | 2D | FREE | `---` | [link](http://game.tyler-dewitt.com/game-demo.htm) | Tile-based (*Can anyone download this?*) Akihabara | 2D | FREE | GPL2/MIT | [link](https://github.com/kesiev/akihabara) | Intended for making classic arcade-style games in JS+**HTML5**` `^[3] JavaScript 2D Game Engine | 2D | FREE | GPL | [link](http://www.lukewallin.co.uk/?go=engine) | Emphasis on gravity/physics/collision detection; uses **HTML5 Canvas** and **ExplorerCanvas** for IE support. Focus on limiting CPU usage.` `^[4] GMP JavaScript Game Engine | 2D | FREE | GPL2/MIT | [link](http://gogomakeplay.com/gmp) | Emphasis on speed and simplicity, "easy to learn and use"` `^[5] Crafty | 2D | FREE | MIT or GPL | [link](http://craftyjs.com/) | Intended to be lightweight and modular` `^[6] Propulsion | 2D | FREE | [view](https://github.com/calebh/Propulsion/blob/master/propulsion.js) | [link](http://www.propulsionjs.com/) | Uses **HTML5 Canvas** element. ` `^[7] Flax Game Engine | 2D | FREE | `---` | [link](http://flax.ie/) | Uses **GWT** and **HTML5**. Focus on web-based gaming for GNU/Linux and Mac OS X.` `^[8] _________ 1. [sprite.js JavaScript Framework Efficient for Animations, Games](http://www.htmlgoodies.com/daily_news/article.php/417990) 2. [The Render Engine v1.5.3 Engine Features](http://renderengine.com/features.php) 3. [Akihabara at github](https://github.com/kesiev/akihabara) 4. [Javascript 2D Game Engine](http://www.lukewallin.co.uk/?go=engine) 5. [The GMP Javascript Game Engine](http://gogomakeplay.com/gmp) 6. [Crafty - Code Like a Fox](http://craftyjs.com/) 7. [Propulsion - HTML 5 Canvas JavaScript Game Development Framwork](http://www.propulsionjs.com/) 8. [About Flax](http://flax.ie/about/)
mate, that is awesome
...or a gaming company needs free help on debugging some code. 
Propulsion is licensed under MIT, and is intended to be useful for any type of 2d game development.
The interview: free tech support since 1983.
Are they not going to tell you what isn't working (ie, do you not get a bug report?). If not, then you're testing for a QA position as well as for a dev position :P. If they are going to tell you what the issue is, then find the code that is responsible for the given task (this is the hard part). Once you've found said function/code, immediately debug out all of the parameters coming into the method, and determine if those inputs are correct. If they all make sense, then you should feel reasonably certain that the problem is in the function you're looking at (the inputs are good? then the code that uses those inputs is bad). If the inputs are bad, then add some code like this... var stackTraceError = new Error(); console.log( stackTraceError.stack ); that will give you a stack trace, and let you know where the next step is. You have to climb the tree of functions until you find where that parameter got messed up. While you're at it, put quick and rudimentary error handling into each function you step through. throw new Error('input: whatever is invalid because of blah blah blah'); If you want to be really impressive, you'll keep a notepad open and mark down the things you find messed up, and suggest a unit test that would have exposed the bad input (and thrown an Error which you just added to said method right?). You don't know what unit testing framework they use, so just roll your own little test cases: var testData = { currentTestMethod: '', methodParams: [], expectedOutput: '', currentTestContext: window }; testData.currentTestMethod = 'theMethodYoureTesting'; testData.methodParams = [ badParameter1, goodParameter, etc ]; testData.expectedOutput = whateverYouExpect; runTest( testData ); function runTest( testData ) { try { console.log( testData ); console.log(testData.currentTestContext[testData.currentTestMethod].apply(testData.currentTestContext, testData.methodParams) === testData.expectedOutput ? 'pass' : 'fail'); } catch(err) { console.log('fail'); console.log(err); } } Booyah, even if you fail to find the bug in the time alloted, you'll show all of the skill necessary to make any software company better. You shouldn't have to bust your ass to track down a bug regularly. In most cases, if you're checking parameters and throwing errors when they are messed up then you'll find out sooner than later if there's a problem, AND you'll already be hot on the track. Of course, you'll always have tough bugs, but methodology is what prevents most issues. edit: changed method invocation to not use eval :)
Learn the shit out of the firebug console, including the "debugger" statement in javascript (I can't find a reference for it now but just put "debugger;" in the source tree at the beginning of the function in question and you should get dumped in with full stack traces, etc). If you have to study / practice, take a long hard look at scope, closures and variable hiding. Read Crockford's articles and the YUI stuff (developer.yahoo.com) and especially the YUI theater: http://developer.yahoo.com/yui/theater/ Anything by Crockford or Hewitt will have a 10x return on investment. Don't just study but practice too. --Robert
Not a game engine, but a 3D engine [WebGLU](http://github.com/onegeek/webglu), which I developed myself. I'm more than happy to help anyone out with it if they want to use it.
It sounds like you could benefit from plovr, which leverages the Closure Compiler to minify JavaScript as well as subdivide one large compiled JS file into modules that can be loaded as they are needed. The modules demo (http://plovr.com/demo/modules.html) shows a simple version of this in action along with the module dependency graph produced by plovr (http://plovr.com:9810/modules?id=module-example).
Very interesting. Unfortunately I don't think we'll be able to integrate a java app into our development process. I'm leaning toward Php based Closure Compiler front ends.
Great idea! I'll try to compile some sort of a "master" list and post that to the self-post.
That's some seriously kick-ass work! Thanks, man. :)
Thanks. It should be on the list now. :)
Added to list. :)
Listed. Thanks for sharing your engine.
This is good stuff. josh makes a good point - even if you can't find the bug, you can demonstrate good diagnostic skills. The testing approach above is good too. I gotta file that away for future reference. And yes, always keep a text file handy to jot notes down into, or snippets of code or todo lists, or whatever you want. I kinda wrote 15,000 lines of javascript code for a game once. (I was in over my head). But I noticed the other day that my "notes.txt" file I'd maintained was 23K lines of text as well :o (that file has everything... even the js snippet we use here on reddit to load images into a post) Oh ya, also, walking in blind like that, you may have to take a high level approach to the debugging... instead of drilling right down into the code right away, you may hafta sit back and say in a more abstract sense "what's it doing? and where might the problem be?" (start with black box testing before diving into white box). Maybe give us a follow up too, ya got me curious :) Good luck.
Cool work. Added to the list.
Lol, it's either something you can do or you can't. Learn how to debug overnight and divide and conquer on your bugs. It's hard to divide and conquer when you don't know the terrain (or code in this case). Part of debugging is not coming up with the solution necessarily, but being able to come up with many possible solutions and test them quickly, then use the information retrieved to solve your problem
Thanks. I merged your work with Canvas libs with the list.
8 space indents :-(
 return height; at the end of your function.
 urls.length; in the for loop
good catch, I accidently copied this before i changed that. Doesn't work though with it changed. thanks though.
Complete working version: function getImgSize(imgSrc){ var newImg = new Image(); newImg.src = imgSrc; return{height:newImg.height, width:newImg.width} } var nstar = 0; var urls = new Array(); urls[0] = "http://example.com/img1.png"; urls[1] = "http://example.com/img1.png"; urls[2] = "http://example.com/img1.png"; urls[3] = "http://example.com/img1.png"; for(i=0;i&lt;urls.length;i++){ if(getImgSize(urls[i]).height==43){nstar++;} } document.write(nstar); **What I did** * Replaced scripts.length with urls.length; * Made the function return the values it found * Modified IF to compare the found height. The variable 'height' had its scope limited to the function and so this comparison did not know what 'height' was. It now compares against the returned value.
Basically you are running getImgSize as a function, loading the image in the function and not returning anything you can use in the loop. You might want to do if(getImgSize(urls[i])==43) in the loop and have return height; in the function.
Do you think it would make sense to wikify this information? At least that would make it easier for you guys to do some modifs. :) Can you point out some nice, free wiki platform for this purpose?
thank you very much. the script runs through now and returns a result, but for some reason it isn't returning the correct result. I guess I will relook into the actual getImgSize function maybe.
[I cleaned it up and posted it on pastebin.](http://pastebin.com/Xt2JUaDd) I also added code comments to help you learn some JavaScript best practices, etc. Edit: Correct link now.
yes it would totally make sense. do google spreadsheets allow open authorship?
There's still a major problem with this. There's the potential for a race condition while the image is still loading, which will essentially return 0 for height and width. The code to get the width and height need to be run in an onload callback, along with the for loop and document.write(). Also, just a heads up - you don't need to write this: urls = new Array(); This is the same, and less verbose: urls = []; And this for loop is a bit slow: for(i=0;i&lt;urls.length;i++){ if(getImgSize(urls[i]).height==43){nstar++;} } You can speed it up by caching the length, so it's not evaluated on each iteration: for(i=0, length=urls.length;i&lt;length;i++){ if(getImgSize(urls[i]).height==43){nstar++;} }
any chance you can provide an example of the onload callback? Really new to javascript and never heard of that, but you are right in I was getting the height = 0 error.
I think so. kangaxx shared his work using them [below](http://www.reddit.com/r/javascript/comments/f094j/list_of_js_game_engines_community_effort/c1cd3h8). I believe a wiki would scale better, though. Some people might want to write engine specific pages even, perhaps. It would be handy to have some place in which to gather this kind of info anyway. :)
I'm not totally sure where it would fit in your list, but I think it's important to note [processing.js](http://processingjs.org/), a port of the Processing language to javascript. It has many features that could definitely be of use to the sort of people who need a list like this.
Added to Canvas specific libs. :)
A simple statement of the problem is that when you run this line: "newImg.src = imgSrc;" it starts downloading the image, but there's nothing in the code that's blocking, that is, nothing that will make the script pause at that line until the image is actually loaded. So it races to the next line (which evaluates the width/height of the image that's still loading). JavaScript is event-based, which is different if you're used to other languages. You have to think in terms of everything in terms of events and callbacks for those events. The original purpose of your function getImgSize is a bit hard to get working with this model, so I'll just strip out the function and write out the code that should work: // declare all your variables with var var newImg, nstar, urls, i, length; function loadImg(src) { newImg = new Image(); newImg.src = imgSrc; newImg.onload = function() { if(this.height == 43) { nstar++; alert(nstar); } } } nstar = 0; urls = []; urls[0] = "http://example.com/img1.png"; urls[1] = "http://example.com/img1.png"; urls[2] = "http://example.com/img1.png"; urls[3] = "http://example.com/img1.png"; for(i=0, length=urls.length;i&lt;length;i++){ loadImg(); } This works a bit differently.. it will alert you the current count each time an image with a height of 43 is loaded. If you only want to output once, you can keep a separate counter (numLoadedImages) when when the time comes you can output the result once (if(numLoadedImages == urls.length)) - but write that into the onload callback. 
 &lt;script type="text/javascript"&gt; function getImgSize(imgSrc, dimension) { var newImg = new Image(); newImg.src = imgSrc; var hw = [parseInt(newImg.height), parseInt(newImg.width)]; //Dimension parameter //h - height //w - width //hw - height and width return (dimension?(dimension="h"?hw[0]:(dimension="w"?hw[1]:hw)):hw); } var nstart = 0, urls = ["http://example.com/img1.png", "http://example.com/img2.png", "http://example.com/img3.png", "http://example.com/img4.png", "http://example.com/img5.png"]; for(var i = (urls.length - 1 ); i &gt;= 0; i--){ if(getImgSize(urls[i], "h") === 43){ nstart++; } } document.write(nstart); &lt;/script&gt;
You still need to account for images not being loaded fast enough, thus still having an undefined / default size when "getImgSize" returns
server side compression helps too.
It's not finished yet so doesn't deserve to go on your list but I am working on one: Level Demo: http://sobriety.1free.ws/index.php?action=3dtesttexture (The floor texture is a sample texture) Hi Poly Test (Runs slow but demonstrates loading a 3d model with textures): http://sobriety.1free.ws/index.php?action=OBJViewer
Yeah, provide it a callback function, once the image is done loading, process the image and fire the callback. This would change the rest of the code but here's the gist of what I'm talking about: var img = 'http://i.imgur.com/yYEjp.jpg'; function getImgSize(imgSrc, callback) { var newImg = new Image(), height, width; newImg.src = imgSrc; newImg.onload = function() { height = newImg.height, width = newImg.width; callback({ height: height, width: width }); }; } getImgSize(img, function(obj) { console.log(obj); });
I'm also not sure we're doing the right thing here.. At this point, I'd like to know what OP-noob wants to do, so we could really improve on it instead of patching along on a maybe ill-advised endeavor. edit: This is what I most hate on all the stackoverflowish sites.. It's always about giving clueless people sharper tools without really educating them how to wield them sensibly in the first place. 
FYI, you can run plovr from the command line like any other utility. PHP calls to the Compiler (as described on [this frequently cited blog post](http://www.bloggingdeveloper.com/post/Using-Google-Closure-Compiler-with-PHP-5.aspx)) are considerably slower because they either involve (1) going over the network to Google's servers, or (2) spinning up a new JVM locally for each compilation. You do not have to run Java on your server in production to use plovr, which may be the source of your misconception.
I'm sort of a noob too, but I've had another go at solving this. Corrections and performance enhancements gratefully received... **EDIT: used skeww's recommendations** //Setup var nstar = 0, loaded = 0, targetheight = 43, urls = ["http://example.com/img1.png, http://example.com/img2.png"], arrlen = urls.length-1; //Loads an image - runs checkdimensions when image is fully loaded function getImg(i){ var newImg = new Image(); newImg.onload = checkdimensions; newImg.src = urls[i]; } //Magic function checkdimensions(){ //Compares height to desired figure if(this.height===targetheight){ nstar+=1; } //All images loaded - announce 'nstar' if(loaded===arrlen){ announce(); }else{ loaded+=1; } } function announce(){ alert(nstar); } //Go for(i=0;i&lt;=arrlen;i++){ getImg(i); };
Nevermind, I found the solution after some more googling. http://stackoverflow.com/questions/2125646/adding-svg-element-to-an-html-file
damn, I need to fix something in my .vimrc, it shows up as 4 space in vim but 8 space on github. Thanks.
I prefer the practice of just setting break points in Firebug rather than using the debugger statement, less chance of you accidentally leaving the statement in there and you get the same result.
Nice, I didn't even think about a callback function. Learned something new today. Thanks.
I have had bad luck with firebug breakpoints (due to working sometimes with minified code or just firebug's unreliability). I like the "debugger;" line because it is almost foolproof: "Here, start the debugger." No questions, no doubts, no worries.
You can wrap debugger calls in a wrapper method. I tend to do things like: var DEBUG = true; function myBreakpoint() { if ( DEBUG ) { debugger; } } function myLog(info) { if ( DEBUG &amp;&amp; window.console ) { console.log( info ); } }
Well breakpoints only work well if the statements you want to step through are on separate lines: breakpoints are per line, not per statement. So the best you might do is reformat your code. You can let the browser do that for you: stringify the function, and you'll get cleanly formatted code (except for closures (anonymous functions), Firefox still shows those as a single line). The utility [Javascript Tidy](http://www.howtocreate.co.uk/tutorials/jsexamples/JSTidy.html) is based on that technique.
As an employer and regular interviewer, this question rubs me the wrong way. Not to sound too harsh, but this reads as, "I'm interviewing for a job for which I'm not qualified." Perhaps considering not wasting anyone's time and skipping job interviews for which you are not qualified? I'm serious, WAY not enough candidates think about this. That said, if you're looking to just brush up the other answers folks gave you here are great; make sure you've got all the latest JS debugging tricks fresh in your mind. 
As someone else said, you're going to need to use an onload event to get the image's dimensions. This will most likely change all of your code since you'll have to wait until all of the images are loaded to check the value of the 'nstar' variable. I did this pretty quick but I think this is what you will need: http://pastebin.com/hjF904g9
So this code doesn't work because of how the browser asynchronously loads images. When you set an img.src value, you are telling the browser, go fetch this image, but while you are downloading it, keep on running javascript. So what happens is you are trying to read the height and width before the browser knows what it is, so it returns bad data. This might have worked for you before, since you had the images cached, but it still would have been wrong since based on network/cache conditions the code will behave differently. What you need to do is set an onload listener on the image before you set it's source so you can handle the image properties after you know you have them. It will complicate your program, because you can't just change the html for nstar once, but each time an images is loaded. It should look a little something like this: &lt;script language='JavaScript'&gt; var ranum = Math.random(); var nstar = 0, urls = []; urls[0] = "http://example.com/img1.png?nocache="; urls[1] = "http://example.com/img2.png?nocache="; window.onload = function() { function getImgSize(imgSrc){ var newImg = new Image(); // When the image loads, check it, and take further actions based on height newImg.onload = function(){ if(getImgSize(urls[i]).height==43){ nstar++; document.getElementById('tracknum').innerHTML = "&lt;center&gt;&lt;b&gt;" + nstar + "&lt;/b&gt;"; } } newImg.src = imgSrc; } for(i=0,length=urls.length;i&lt;length;i++){ getImgSize(urls[i]); // nstar changes later when loaded } } &lt;/script&gt; I haven't tested this, so it may not be right, but it should work `getImageSize` should be renamed, since it's no longer returning anything, just triggering actions that will trigger more code later. Hope that helps
In your example you didn't add `ranum` to the url. Post your code on [pastebin.com](http://pastebin.com) and I'll try and help you out. (I'm not exactly sure what you're asking—are just having trouble adding the `ranum` to the url?) Also, you should check out [stackoverflow](http://stackoverflow.com/) if you haven't before—normally your questions are answered faster there than here on reddit. But yeah, I've got some free time before I go eat if you need help—just need some clarification on your problem.
Just because nobody else seemed to notice: you haven't declared `i` anywhere, so it'll end up in the global namespace. You don't want that. Instead, declare all your local variables at the beginning of each function (forget about declarations in loops and such -- JavaScript only knows function scope). Use a tool like [jslint](http://www.jslint.com) if you're unsure about your code quality.
&gt; go fetch this image, but while you are downloading it, keep on running javascript. An important lesson here is that there's always one thread of javascript execution inside a browser window (ignoring webworkers for the moment). If the image would be loaded synchronously like it needed to be for your code to work, no other javascript code or event would be executed during that time in the browser window. You'd just have a dead, unresponsive page. That's why in Javascript, you will usually do asynchronous handling. This is usually done by giving a function reference to some method so that will call you back when the event that you want to act after actually has happened. var myCallback = function() { alert("I'm so happy you called back! &lt;3"); }; someLibraryFunction(myCallback); 
I tied to give you an explanation in the previous thread but apparently it didn't sink or I didn't word it correctly. Essentially, as others have posted, a big problem is that the asynchronous loading of the images is going to give you a big problem. Let's break down asynchronous vs synchronous and what that means in simple terms. To understand you need to understand the call stack. A basic code demonstration of the effects of synchronous code: console.log("This"); for(var i = 0; i &lt;= 9001; i++) {}; console.log("That"); In that loop, you will see "This" printed in console, then it will go through the for loop, then it will log "That" in that order, every time. That is because the call stack is built in that way, first come first serve essentially. "This" got there before the loop, so it prints, but "That" has to wait. It's probably fine that it works this way in the example above, but in another example it isnt: var dollars = 0; someAjaxRequest('/userDollars.json', function (result) { dollars = result.currentDollars; }); alert("You have $" + dollars); someAjaxRequest obviously isn't a standard function, but pretend I built a function named that. It's arguments are the file to load (/userDollars.json) and the callback (more on this in a second). The call stack is going to see "Okay, first I declare dollars, then I fire the ajax request, then I alert the dollars variable". Well, it's going to happen in that order, and people might think all there money is gone. Not good. That's because part of the code is synchronous and part of it is asynchronous. The callback isn't inserted into the callstack immediately because it isn't invoked immediately. It's basically a rain check for the function it's provided to. You give someAjaxRequest the callback and say "Here, you can execute this whenever, no rush." It's not in the callstack and it won't be until it's invoked by the function it's provided to. This is extremely powerful in many ways, but also a great way to fuck shit up if you don't know what you're doing. Now, to improve the code you'd move the alert into the callback function, which will prevent it from firing until you're ready (IE, you have the data). Now, in your example the async part is the image loading. You have to wait until the image is done loading before you blow your load and start returning variables. Once the image is loaded, you do your calculations and then fire the callback. Hell, you're already providing callbacks. window.onload is a callback. It's basically saying, "Hey, window. Listen up fucker, when you're done loading, put this function in the callstack." Do the same for your code. A quick tip about the callstack. It's just that. It's a list of first come first serve things. Everything obeys it. When you do a setTimeout(blahfunction, 200) it's saying "put blahfunction in the callstack at 200ms." which is extremely different than saying "execute blahfunction at 200ms" because anything already there will be executed before it is. Hopefully this clears shit up, if not well fuck I've failed again. Just reply to this if you have any questions and I'll try to help out.
thanks!
Here's [an activation code](http://www.loggly.com/accounts/register?beta_key=b34v3r5) for a free developer account if you want to try this out yourself.
That is indeed the source of my misconception. I guess I didn't read the specs right.
As a starting point, use Firebug with the YSlow extension from Yahoo. If you can ace that first, then you go on to further optimization. 
This is part of reducing HTTP requests, the first thing to address. Top of the YSlow list ;)
Why would i use YUI over jQuery? Is it for the widgets?
This could work nicely as a menu. An annoying menu but hey :)
Been working with knockout for the past 2 month. It has been nothing by joy. I did notice that some problems needed a view from different angle to be solved with MVVM, but it usually end up being easier then with out data binding.
Pretty cool, performance was pretty poor in FF3, but FF4 should make it feasable...
Interesting.. Are you increasing the level speeds with a linear function, because you do tend to hit a point at which it just isn't possible to keep up with it, no matter how good you are. I would recommend making the levels increase in difficulty by two ways, speed and hole size. And increase the speed in logarithmic function so that eventually you do just play at a max speed and will lose only after making mistake. 
Yeah, I've thought about changing the hole size as the levels increase. Though hadn't thought about using logarithm so thanks for that one.
JQuery has a number of data binding plugins, one of which was contributed from the .NET development team at Microsoft. I'm not having much luck finding links at the moment.
Why not: testData.currentTestMethod = theMethodYoureTesting; testData.currentTestContext = theMethodContext || this; ... console.log( testData.currentTestMethod.apply(testData.currentTestContext, testData.methodParams) );
Nice :) But it misses some music and the colors aren't the ones that I would have chosen.
pretty fun!
Didn't take long before someone checked the get requests ;) Not that I'd expected anything else though. Does anyone here know a good way to counter cheating?
Yeap, that works as well. The only reason I wrote it any differently was that I wanted the method information as a string so I could easily output it to the console without doing something crazy like... theMethodYoureTesting.toString().match(/function (.+?)\s*(.+?)\)/i)[1] ... to get the method name. You're right to want to avoid eval for sure. It's probably better to go through the pain of extracting the method name as I've done in this post as opposed to doing what I did in the original posting.
I think its ALOT like this one. http://js1k.com/2010-first/demo/757 But still cool. Nice job.
YUI's philosophy is centered more on application interfaces whereas JQuery is more general purpose DOM manipulation. You can use both if it suits your fancy. Another big difference is that JQuery abstracts away a lot of the Javascript language to the point where it's possible to write scripts using mostly JQuery APIs with little or no real Javascript in the mix. YUI on the other hand doesn't coddle the developer in this way and focuses more on patterns and practices than language abstraction. Both have their uses and niches. I'd recommend getting to know both frameworks.
I've been trying it out a bit, and felt that the 'data-bind' attribute options didn't seem very intuitive to me, but I did get a good start on a little project going last night. What types of problems did you find you had to look at differently with the MVVM pattern?
qooxdoo has a data binding layer that is pretty nifty. http://qooxdoo.org 
very cool!
For anyone who is curious, [here are qooxdoo's bindning docs](http://manual.qooxdoo.org/1.3.x/pages/data_binding.html). It looks a lot like ExtJS's binding in general. Both of these build it as part of a component model.
This was really my first real experience with MVVM, and looking at a page as just a view with commands back to the server functinality is a bit different then having a scripts that take care of a lot of that logic. The only thing i don't like about it is the requirement of making things observable, this leads to the fact that you can't have a single model in your server-side that is JSON serialized. I am looking at ways of doing this with Data Annotation. (i work with C#)
It seems like you could recursively descend into the serialized JSON on when you receive it on the client side and replace each key/value with a ko.observable. Though that might be overkill, or too much magic.
Fun game, and it looks great. What tools and processes did you use to develop, debug, and test your game?
I get this error message. Webpage error details Message: 'ctx' is null or not an object Line: 146 Char: 3 Code: 0 URI: http://ubarskit.se/v/falldown/falldown.js 
Well, not everything needs to be observable. but yeah.. i could do that, however, a solution with Data Annotation would be cleanest. and probably the most maintainable. 
 &gt; Another big difference is that JQuery abstracts away a lot of the Javascript language to the point where it's possible to write scripts using mostly JQuery APIs with little or no real Javascript in the mix. What do you mean by this? I can surely mix plain vanilla dom syntax with jQuery such as creating a document fragment for existence. var frag = document.createDocumentFragment(); var node = $("#myNode").get(0); frag.appendChild(node); $("body").append(frag); I see no problem here. Or are you saying that for new developers, they will have their hand held too much by jQuery and not learn the basics? I feel like YUI definitely abstracts way more by including all of those generic widgets that could be easily completed through some clever JS and jQuery.
However, the coolest widget of the bunch, the Table, isn't hooked up to the data binding layer. http://demo.qooxdoo.org/current/demobrowser/#table~Table_Huge.html Then again, that thing has a remote-table-model, which is also kind of nifty. (it fetches the rows from the server, that are actually visible. This way you can have an instantly loading table of 100,000 records and just scroll down) Feature-wise Qooxdoo is awesome. And i've yet to see other frameworks come near in speed. But it's quite verbose, and it has it's, almost entrenched way of working. You are writing Javascript, but it feels like you are writing Java. The level of abstractions they (force you) to use, are similar. I'm curious, as you are looking at this frameworks, did you come accross any that are functional-programming in nature? That do less with classes and more with state-less functions? Javascript does allow for that, but I've yet to come accross a framework that goes that route.
 newImg.src = urls[i]; newImg.onload = checkdimensions; Stuff like that should be always the other way around. The onload event may be fired right away. E.g. if the "URL" is a data URI and the browser is Opera. You also forgot a few semicolons and you used == where === should have been used.
Well, when you look at it, things like jQuery really are more functional, but it's not really a framework per say.
Yeah, I couldn't really comment there, as I haven't done anything with C#, I'm more of a ruby/js/dynamic languages kinda guy :) 
Yes, you will want to check out Rx (javascript version) from Microsoft and Backbonejs as well. 
I was actually most impressed by the color palette.
http://aaronblohowiak.github.com/Propagate-JS/
That one doesn't work for me (in Chromium). Just a black page with some contest submission info at the top.
It's cool.. we all have our preferences. It isn't even that i really like C# that much, i just love visual studio. Granted, C# is pretty great too.. 
Sounds like you might not be using a browser that supports the HTML5 &lt;canvas&gt; element. Try Chrome/Chromium, Firefox, Safari, or Opera.
Rx was interesting, Backbone isn't really so much about databinding as MVC on the client side. That being said, I think backbone is one of my favorite new javascript frameworks. 
I hate it. I just played it and it made my entire soul light up with smiles. Now I want to play again and it ruined my plans to spend the evening brooding in the dark. YOU HAVE DESTROYED ME WITH YOUR CREATIVITY. But seriously, folks, is this going up on github? Also, kudos for actually making a game instead of just another game engine.
Your latter paragraph hit it more closely though I wasn't so much focused on the widgets as much as I was on the core of each framework. JQuery Core gives you the tools to make some neat stuff without knowing too much Javascript. Yahoo UI... not so much. I don't think either philosophy is inherently good or bad. It all depends on what your goals are as a developer. Personally I enjoy playing around with both frameworks. Though at the end of the day when I want a serious-businessy looking and behaving app I turn to ExtJS. But that's a whole 'nother thread.
Nice job with the formatting of this post. It's not often I see this much effort, good job!
Nice that you like it :) and yes it's on Github: https://github.com/Ahtenus/falldown
This reminds me of the old Atari game [Adventure](http://en.wikipedia.org/wiki/Adventure_(Atari_2600) )... throw in some old 8-bit sounds and a pixelated dragon (duck?) and you'd have a real hit!
Was that article written by a bot?
Thanks :), it was mostly a project to learn javascript so I didn't really have much plans made up. For writing the code I used Gedit at first but later on tested Vim and haven't looked back since. For debugging I used Chromiums debugger, mostly because Firebug is so buggy in Firefox 4 Beta. For testing, nothing special, simply played the game...
I like it.
Reminds me of this game I used to play on my TI-83. I assume from the URL that you didn't pay much attention in highschool calculus either.
Looks like Jacob is playing from the island! ;)
Nice!
I think it was transcribed directly from yslow recommendations
Well, it also mentions things like favicons and headers, which obviously don't have anything to do with JavaScript. The article is virtually content-free. It only points into some directions while omitting 2-3 sentences per bullet point, which would provide the actual information. It's sorta close to being almost somewhat relevant. It really doesn't look like something a semi-sane human would write. It's really weird and pointless stuff. Who the fuck upvoted this?
Pressing the left or right arrow keys don't seem to do anything in Safai.
I played this a lot on my calculator back in the day.
Here's an idea - port this to z80 assembly code!
I'm glad someone here knows how to do this right.
I'm not sure you learned much from our comments on your last post... http://www.reddit.com/r/javascript/comments/f0sfs/javascript_noob_here_my_small_script_isnt_working/
Thank you!
It looks like [TiddlyWiki](http://www.tiddlywiki.com/) might fit the bill in this case. [tiddlyspot](http://tiddlyspot.com/) seems to offer free hosting even. Apparently it should be straightforward to use MarkDown syntax with Tiddly since there's a plugin for that. Better ideas are appreciated of course. :)
There's no real way to prevent cheating. You can just make it more difficult and ban* people who try to mess with the scores. \* Which itself isn't really possible. edit: oh, and obviously don't accept non-numeric scores. ;)
[Backbone.js](https://github.com/documentcloud/backbone) is pretty good. :)
V8 has recently added some strict mode stuff if I remember correctly. However there are discussions popping up whether the way strict mode works right now is the way to go.
True... I don't accept non-numeric scores. That's just me wanting to show off B-)
 testData.currentTestMethod = 'theMethodYoureTesting'; console.log(testData.currentTestMethod); // a string window[testData.currentTestMethod](); //eval is pretty much never needed except as a last resort to parse json.
yea, it isnt really mvmc, but it does have the option of calling your custom render() function for you. everything that jashkenas does is solid, i recommend following him on gh. 
Yup, already doing that :)
Also, if you want databinding from the server up through the front-end, you must check out Lift.
Dojo owns this shit.
That is nice, but you should take a look at how the jQuery devs themselves write plugins (use extend): jQuery.fn.extend({ text: function( text ) { ... } }); Probably a good idea.
Great work! Thanks for this!
[Here](http://www.jsrosettastone.com/) is an easy 'cheatsheet' to comparing the DOM sugar between jQuery and YUI 3.3.0. But yes, YUI also has a widget framework to help developers create their own. But, when Yahoo! provides a widget, it can be counted on to work across all the [A-grade supported browsers](http://developer.yahoo.com/yui/articles/gbs/) -- bugs excepted.
You are absolutely correct, I literally freehanded that code in 5 minutes and just went with the quickest solution off of the top of my head. I'm editing my entry now to use your implementation though I doubt this guy is ever going to read it again - he didn't even give us an update!
Anyone know of a solid library to use as a starting point for a 2d grid/map system? (not sure if any of the engines listed include this...) edit: 2d
I'm not a fan of DOM pollution so I'd suggest wrapping all that stuff in modules. I prefer the [loose augmentation pattern](http://www.adequatelygood.com/2010/3/JavaScript-Module-Pattern-In-Depth). As a bonus you can pass in environment variables like "document" as "d" which will allow for lighter code across the pipe. If you're seeking micro-performance tweaks, make sure to use the strict equality (===) when comparing against native types, such as integers. Careful because this is only works if you're comparing same types and casting a string as an integer will end up costing you more cycles than the strict saves you. I caught an "eval" in the code. I know sometimes it's unavoidable but I'd spend a bit looking at how you can remove that from your processes. To eval() user input is to accept inevitable badness. Watch the regular expressions with periods. You haven't escaped them and that's going to give you unexpected results. acceptedPowList = /[0-9.xy]/gi; should be: acceptedPowList = /[0-9\.xy]/gi; Try/catch can be expensive and I see it used in some needless places. try{ var theColor = graphColor[equationNum]; } catch(e){ theColor = "black"; } can be turned into var theColor = graphColor[equationNum] || 'black'; I see lots of inconsistent type comparisons like this: if(value.indexOf("x") != "-1") [indexOf returns an integer](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf) so you should use an integer to equate against instead of asking the engine to dynamically cast it. Why have two functions called mouseX and mouseY that have nearly identical code? Why not make mousePos that returns an object literal of {x: [some int], y: [some int]}? That's all I have for now. I haven't gone through the actual logic of your app, just the syntax. There is a lot of code there and I get the feeling a lot of it could be removed/condensed. A solid start for a beginner but there's a lot of work that could be done to make this a better app.
Nice. It graphs, as advertised. The interface needs cleaning up. * Make the background white (the entire page, not just the graph). * Add a more apparent table structure. * Make the cartesian/polar and radian/degree options radio buttons. * Don't let things move around so much in the interface. Perhaps make the above choices available but disabled so everything below them don't get moved down when they appear. As for the features, I see that when mousing over the graph, even in polar coordinates, the cursor traces over the cartesian plot.
wow, thanks for the useful tips guys.
e^x does not work, but (e)^x and pow(e,x) do. Can't figure out hyperbolic trigonometric functions. As far as vulnerabilities, alert('hey') pops up an alert box, document.location = 'http://...' redirects the page. May want to sanitize input.
How could someone exploit that?
They could use it to trick themselves into typing a credit card number in a prompt box and ajax it to anywhere in the world. SCARY!
I am going to have to go with vectorjohn on this one. I guess vulnerability was the wrong word, maybe unexpected behavior would be a better label.
How old are you (not in a bad way at all; just curious)?
The calculator is awesome. I know that was what you asked. There are good suggestions here though.
Through XSS attacks.
Make the graph 2 - 3x as big with a subtle grid background. Nice job!
Yah this is all client side, so there aren't any "vulnerabilities", but eval is a really terrible (yet simple) way to go. I'm trying to work on a decent parser atm. Thanks for the input though, I just added all the hyperbolic trig + most of the inverse hyperbolic trig functions. 
Nice thing about the eval is that I can define functions in my firebug console then use them in graphs :)
lol, I use the console a lot to debug/do crazy stuff with. I might put up a "labs" page where I'm testing out my other features before I add them to the actual page. Right now I'm working on parametric equations and graphing inequalities. I got a lot of good advice from posters that I'm going to incorporate.
Thanks a lot for your reply. I appreciate the fact that you actually looked at the code. I'm going to do some research based on your examples and then make some changes.
Good luck. If you keep honing the code this could be some ninja stuff. Keep working hard.
I don't see any way for the attacker to put/execute code on the box?
By the looks of it gTile or Akihabara might be worth checking out.
Oh, WOW. Searching to see if I still have my old .qb files somewhere ... 
wow... Really, wow... But ehm.. why would we use this? It's great stuff for educational purposes, and to show what the canvas element can do, but what would be a real-world application for this? 
Having fun and learning about parsing, compiling, bytecode, &amp;c. Did i mention it's fun?
looking forward to play gorilla.bas on it
.BAS
I love the colors, actually. Reminds me of the original Nintendo GameBoy.
&gt; ** Update: Based on the big news I missed about Sencha releasing Touch cost-free under the GPL license, I officially retract this statement! 
Don't forget WebGL! I've put together a whole robust development framework called [WebGLU](http://github.com/onegeek/webglu)
This is a really, really, really interesting concept -- basically, using the JS engine as the "target" for a compiler. We already do that, kind of, with things like minifiers...
An interesting concept, but having a language tied to a particular editor makes it a non-starter for me. It really doesn't matter how fantastic this language is - I'm not changing my text editor, so I'm not going to be using it. Shame.
In case you haven't heard of [CoffeeScript](http://coffeescript.org/) ...
True, very true. I can still remember long nights typing basic into my dad's old 387. Man, that was cool...
just out of curiosity, what editor are you using?
I've been using Textmate for a few years now. Before that (i.e. before Mac) it was Emacs. I still use Emacs when I'm not on a Mac, although that isn't often these days. Before Emacs I used vi (back when it was "vee-eye", and "vim" was the name of a cleaning product). I still use vi/vim for command line sysadmin-like tasks, particularly when I'm doing stuff on remote servers. So I've pretty much been around the block as far as text editors go. Changing editor is a little like moving house in terms of the disruption it causes. There's nothing new in Eclipse that I can't get in the other 3 editors I already know, so there's no real incentive for me to take the hit and learn a new one. 
Yeah, that makes it pretty much a non-starter for me too.
Not quite a game engine, and not quite JS, but there is also [Play My Code](http://www.paymycode.com). You write in Quby (it's like Ruby) which compiles to JS and runs on top of a HTML canvas.
It is not a web based platform, but [Sphere](http://www.spheredev.org) is a decent engine for making 16-bit esque games, focusing in RPGs. 
Or many [other languages that compile to JS](https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS)
First I thought I'll just build the compiler and try to use it from command line, but &gt; To build the mobl compiler you will need a recent version of Eclipse (3.5+) and Spoofax. When those are installed, simply clone the mobl repository and import it into Eclipse, then build the project (Ctrl+Alt+b or Ctrl+Cmd+b). I think I am not THAT interested in it.
(Javascript to script logic)
I have used RightJS for a while as a replacement for jQuery. I just felt it quite didn't scale to my needs easily and I needed to learn some other lib (refreshing!). So far I have been quite happy with it. Granted there are some features, such as UJS, that I don't use at all. Overall it manages to contain the functionality I need in one way or another. I have no doubt an alternative such as MooTools couldn't provide the functionality I happen to need. Just using ~some~ framework is a big win development wise. :) You make many fair points. Keep in mind that the author is not a native (neither am I :) ). Therefore some of the points may have been made in a slightly inappropriate manner and might perhaps need some beefing up. Also note that it's a one man show. :) To me comparisons like this really don't matter. All it matters is that you are happy with the lib you are using. The grass is always greener on the other side. :)
Actually, I do have a command line compiler for mobl. It's not currently documented though and when it reports error messages it does not give line numbers. If there's demand I can make it available.
Yes please.
You can take as many breaks as you like, but it doesn't change the fact that you're just angry and ignorant. Yes, I do call you ignorant, because half of what you're saying is just a lack of information (for example there are benchmarks (in two different frameworks), then rightjs initializes inside of its own space, plus we have a proper safe-mode), and for the other half it's just your angry opinion with which for obvious reasons I don't wan't to argue. As for copying things from Moo/Pro/jQ, I don't hide it. More of that most of the naming principles were left original on purpose, so that people who look at RightJS would see similar elements and could have a lower entry point. Yeah, I could change things, rename and move around so noone notice and then call it my own. I didn't, I'm honest about what I take and where, even though it will pissoff some people. But if you'll look into the code a bit deeper you'll notice that there are actually more than a bunch of stuff stitched together. Say for example we have proper OOP structure goes through the whole framework including oop dom-wrappers with inheritance, ajax files uploading, ajax is made in a pretty different way, Fx is just named the same, internally it is completely different from anyone else. Then if you look even deeper you also might notice that most things that are copied from Moo are actually pretty standard, things like Object.each or String#endsWith or Array#each, which in reality doesn't have anything to do with Moo, they are just a standard, most frameworks have them. More of that, if you knew Ruby and understand what serverside folks deal with, you also might notice some deep connections in semantics between RightJS and Ruby, you also might notice how the UI library is mate to be easily maintained for serverside folks, like simplified initializations, Ruby-like syntax, inheritance on widgets and so one. So, yes dude. Really.
Nobody has mentioned [O3D](http://code.google.com/p/o3d/) "O3D is an open-source web API for creating rich, interactive 3D applications in the browser."
Some of this syntax is interesting...
[Playtomic](http://playtomic.com/) (my startup) has an [HTML5/JS api](http://playtomic.com/api/html5), it provides neat stuff like real time analytics, all the backend and whatnot for user-created levels, leaderboards etc. It's free and in beta with no future charge for existing casual games when I eventually get to turning billing on. It's also worth plugging [SPIL Games](http://spilgames.com/) who have two weeks left with their [HTML5Contest.com](http://html5contest.com/) initiative.
Maybe we could just use the wiki Khronos provides? http://www.khronos.org/webgl/wiki/User_Contributions
I've been working on an engine called BDGE: Badly Designed Game Engine. :P The main repo for it is at https://github.com/Osmose/bdge The sample game I've been using as I add more things to it is at https://github.com/Osmose/Sub-C-Adventure
I'll add the 3D libraries [GLGE](http://www.glge.org/) and [SpiderGL](http://spidergl.org/). I've tried both of them, liked them both. Spider's documentation is a little weak, but can produce some great results. GLGE is (fairly) actively developed, so the API's change sometimes, but it's also a really nice library.
At least the WebGL related parts belong there. I'm not so sure about the rest. Is there something like [PyPI](http://pypi.python.org/pypi) or [CPAN](http://www.cpan.org/) for JS where it's possible to register libs?
Yeah, of course, you're right. I'd say Github is usually the place where projects aggregate related libs (ex: [the node wiki](https://github.com/ry/node/wiki/modules)). Of course, not being a project, that doesn't really help us, but I do agree with what some others have said that Github may be the best place.
Oh man, I remember Sphere from the heyday of RPG Maker... Which, while I couldn't recommend anyone use for anything serious, I suppose is worth adding to the list of "Other" tools. The newest version lets you use Ruby for scripting. http://www.rpgmakerweb.com/ appears to be the official website.
Alright. Github seems like a natural choice. I'll whip up something over there and we'll see how that works out. :)
Bye-bye Aves. [Scooped up](http://venturebeat.com/2010/09/24/zynga-acquires-german-game-developer-as-it-expands-into-europe/) by Zynga in September of last year. Lol the company was renamed "Zynga Germany".
Should these really be called game &gt;engines&lt;? These are more like game frameworks IMO. A game engine should at least have an editor, maybe some more tools.
This is kind of an engine for an online game. Currently in the middle of adding a server side javascript interperator for scripting quests, npcs etc. Looking for javascript programmers. Right now it pretty much looks like a MUD. [SpellScript Engine](http://www.strategynerd.com/sngames) *Edit: If your don't want to create a character, just login using user: test pass: test
Hey, I'm one half of the Flax dev team, just wanted to say thanks for including us on this list! Also, a little more info: Flax is a tile-based engine, and it's under the Apache 2.0 license last time I checked. We use GWT (so it's technically javascript, but the majority of what we write is Java) and &lt;canvas&gt; if it's available, and a fallback for IE. Thanks again. =]
In my opinion, and I'm not trying to come off offensive, the guys at RightJS should invest their time in adding to jQuery or mooTools or another big JS library, not reinventing the wheel.
Shameless plug: Impact has a level editor. Video: http://impactjs.com/documentation/video-tutorial-weltmeister :)
I've had good experiences with angular.js. 6 months ago all the JS templating tools seemed very fragile, getting a good templating system, with data binding to boot, is a huge step forward.
I'm curious why [Unity3D](http://unity3d.com) wasn't included. This game engine lets you use javascript as a back end, does some pretty incredible things, and is free.
Have they changed their license? Last I saw it was free for 30 days. Very different from free.
EaselJS is 33kb compressed (which is included in the download). Also, in notes, you might want to mention that it is an attempt to create a Flash like DisplayList API for the Canvas element (making it pretty easy to manage a lot of items). It is released under an MIT License.
I don't use it, but reading their site I think you can use a free version to make content that runs in the web player, for free. For other platforms, you have to pay various amounts.
My assumption was we're going for "Plug-in free" (otherwise, why not talk about Flash? Actionscript 3 is based on ECMAScript aka "standard Javascript")
FlixelJS. It's a mess. Help wanted ;) I've been kinda lazy, honestly. Biggest thing making it unusable is that collision's broken, and I haven't gotten as far as finding where..... Repo: http://github.com/BillyWM/FlixelJS Announcement thread: http://flixel.org/forums/index.php?topic=2859.0 Demo: http://billy.wenge-murphy.com/flixel-js/testgame.html (demo is a testing game during porting, definitely not a 'show off' game) It's intentionally designed to adhere closely to Flixel in AS3, so Flixel devs can port their Flash stuff straight over.
Unity is free, but you can get a 30-day trial for Unity Pro. [Come one, people. You have an internet connection.](http://unity3d.com/unity/licenses)
&gt; To do this, Sponsor is granted the non- exclusive right to exploit, use, display and copy the prize winning Submission and parts thereof as provided under Dutch copyright law, and to sublicense these rights to third parties and/or end users in any and all media now known or hereinafter developed without territorial or time limitations, in particular to distribute the game across all SPIL platforms and channels, including the mobile platforms and via the Zapapa-platform on social networks. No thanks. **Edit: completely uninformed post, see the following discussion.**
That's their normal licensing stuff they use for Flash games too, they've licensed 3 of my games and 100s of other developers' games without any problems. It's similar to what you grant when you upload to Kongregate, Newgrounds, etc as well.
http://pixie.strd6.com there's a WIP editor there too.
Please add [spriteright](http://spriteright.com/) it is from one of the creators of [Verge Games](http://www.verge-rpg.com). 
Why does X mean yes and O mean no? That seems counterintuitive to me...?
&gt;In my opinion, and I'm not trying to come off offensive, the guys at &gt;RightJS should invest their time in adding to jQuery or mooTools &gt; or another big JS library, not reinventing the wheel. Yeah, but those huge libraries that you name did reinvent the wheel. The only one really precursor was Prototype. So it should be the only one nowadays? If we go down that road jQuery, Mootools,YUI,Closure,Extjs,Qooxdoo should not exist at all. Don't you think that the lack of choice would be rather sad? no competition, no new concepts, nothing? jQuery,Mootools and all of them, if you look at their code, you can see clearly where they took their inspiration from.Each of them take what they think is good in each other. Most of them were born because their author thought they were doing something different, solving a problem that other libraries were not solving. I just see choices and opportunity here. I am not a huge fan of jQuery or Mootools or YUI or what the... Perhaps somebody will come with the library that fit what i need because they did reinvent the wheel and perhaps made it rounder for my needs. The way the author sells his library is not the way i would have chosen though 
 :javascript | if (foo) { | bar() | } ew.
I'm working on a framework that uses workers for processing. Nowhere *near* ready yet, but hopefully can be included on this list at some point. :)
I've no problem with such licensing, but here it's framed as a contest. What happens when you loose? Do they get the licensing rights?
I don't think they do, they specifically say 'winning' in the terms. They're really nice people in my experience, definitely not out to rip any one off - they run perfectly legit, collectively massive (they're the biggest casual games co) properties like [AGame](http://agame.com/) and stuff and even hosted [a 24 hour game jam](http://www.next-gen.biz/news/spil-games-and-google-hosting-html5-game-jam) with Google a few months back for HTML5/JS games.
I see. Comment changed.
Sure. Good luck with your work. :)
Any idea where the source is hosted?
Good point. Gotta dig up some definitions and see if I can split it up a bit. :)
Added to list. Thanks!
Clarified the description. Thanks. :)
Seems like a cool idea. Added. :)
Done. Thanks. :)
Good point! Fixed that by replacing X/O system with good ol' yes/no. :)
&gt; The only one really precursor was Prototype. There's been JavaScript libraries since the dawn of the language. I've personally helped write a couple in the days of Netscape 3 and 4 and they sucked compared to what was already out there. Prototype was far from the first. The first "big" one I remember was called (I think) Dynamic Duo DHTML library which already supported cross-browser loading of dynamic content into elements, animation, positioning, etc. This was probably in 2000 or so.
Is the source hosted somewhere (view -&gt; source doesn't count :) )? Any idea of the licensing conditions?
Thanks. Added. :)
sure 
I am the author however I haven't decided on a license to go with yet. I will certainly get back to when and if I decide to open source or closed source license the engine out. I am hoping to make a final decision in a few months.
This is awesome. Thanks
Awesome :)
are the entires sorted somehow? or would alphabetically make more sense?
No sorting yet. I agree using some sort of scheme would be appropriate. I guess optimally there would be some sort of sorting widget (JS)... :)
I set up a [simple wiki](https://github.com/bebraw/jswiki/wiki/List-of-JS-Game-Engines-and-Related-Tech) just to make it easier for people to modify the list on their whim. Gists weren't quite as flexible as I had hoped (hard to merge). If someone wants to write a Wikipedia article, go ahead!
I started a [small wiki](https://github.com/bebraw/jswiki/wiki/List-of-JS-Game-Engines-and-Related-Tech) at Github. Hopefully that will work out just fine. :)
I just sorted them alphabetically in the wiki ;)
Cool. Thanks. :)
Which way would you choose? Mean I'm still learning things and do idiotic (and sometimes plainly dickish) mistakes. I actually tried several approaches, but it seems one way or another it pisses off some folks.
I think you're mistaken about me and this whole RightJS business. I used to live on Moo and Proto, I wasn't completely happy with them so I started my own thing, for my own purposes, end of story. I think by the definition I should believe that in some ways RightJS is better, the whole purpose of this adventure is to make things better day by day. Yeah, I call it "the right framework", but it's not because I think I've got the biggest penis, it's more like a self-ironic joke, sorta like "yet another framework". And as for the article that seems pissed you off, on the very top of it says in plain English "this is the author's opinion and should not be trusted". All the rest you're just pulling out of the air.
Alternatively, if you have to deal with al ot of different legacy systems which use document.write() to add to the DOM as it's being constructed (these days, a *big* javascript no-no[1]), you may find the following snippet helpful. Insert it at the top of the page before any calls to document.write, and it overwrites document.write with a function which stores up all the code which would otherwise be written to the page in the order it would be added. Then, in your footer/on $(document).ready()/asynchronously you can just call "document.write(null, true);" to have all the content which would have been document.write()ten appended to the page-body in a safe, standards-compliant way. document.write = function(html, printall) { // Check to see if the array of things to be written to the page has been initialised, and to initialise it if so: if(typeof this.htmlChunks == 'undefined') { this.htmlChunks = []; /* No static variables in javascript, but as functions are objects and objects are functions, we can get the same effect by using member variables */ } if(html) { this.htmlChunks.push(html); } if(printall) { var writediv= document.createElement('div'); writediv.innerHTML = this.htmlChunks.join(''); document.getElementsByTagName('body')[0].appendChild(writediv); this.htmlChunks = []; } }; This won't work without modification for code which requires document.write()ten elements to be inserted *at the position of the document.write() call*, but it's a great for things like Google Analytics, third-party Javascript libraries or other scripts which insert absolutely-positioned divs (ie, where their position in the DOM isn't always vitally important). [1] Modifying the DOM while it's being constructed always used to be the only way to do it, at least until the DOM API came along. However, it leaves your code open to all sorts of race conditions and arbitrary/impossible-to-predict timing issues, and can sometimes *royally* screw up your DOM - duplicating elements, prematurely closing elements, even preventing whole subtrees of elements from being included. Moreover, a few hundredths of a second in loading time, or a change to a completely unrelated element elsewhere on the page can cause, prevent or utterly change the symptoms, making it all but impossible to diagnose if you don't recognise the symptoms. IE in particular suffers from this kind of issue, but I've also seen it in Firefox, etc.
I will not over sell it. put many online demos, put many tutorials, write abundant documentation. Simply give the tools to make a judgment. that's already a lot of work to do, no need to speech it more. If the end result is good(demos,doc,api), people will use it more and more. as the author, comparing your lib to other libs can only seem presumptuous and obviously nobody will take it for granted. if people are interested in your lib, they will compare. they need to compare anyway so they will do so. Just let them make up their mind with the end result, not with speeches that can seem arrogant to some.
I think gameQuery is MIT license. https://github.com/onaluf/gameQuery/blob/master/jquery.gamequery.js
I don't disagree with the idea. On the contrary. It's important that the information is easily accessible and it's possible for people to update it as they like. Considering there's already a list of game engines it might make sense to merge the relevant parts of this list with that one. I'm not so sure about the rest. Despite this I'll develop the GitHub wiki idea as time allows. I would love to have some nice JS/GE/HTML5 specific resource. I feel this sort of information might be too specific for Wikipedia. You don't go there to read how to do some very particular trick related to some obscure tech. Even Wikipedia has its limits. :)
Dojo indeed has this - dojo.Deferred. It's quite powerful too and worth a look, especially since the latest 1.5 release.
One thing you could do (and I'm pretty sure I've requested this before) is *put a link to the some browse-able form source code right on the front page*. It could be github et al, or even just (a) flat .js file(s). When I hear about a new (or new to me) Javascript library the very first thing I want to do is browse the source. THEN if it's not a mess or looks interesting, I will read the FAQ, docs etc, while referring to the source. As it is now I have to download a zip file, extract it, either stick it somewhere or remember to delete it. That's obviously not a huge amount of work, but considering how easy it is to just make the source available for browsing it's unacceptable IMHO. I can't tell you how often I'm talking to someone about say, jQuery and decide to quickly look something up in the codebase (which they make very easy to do). A lot of times I may be at work, on a mobile device, on someone else's computer etc etc where browsing it online is just much easier. 
just dont write inline js all over the place :p it's a compromise. 
One thing that I found useful when writing plugins is the ability to refer back to the instance. Say I had a tabs plugin, you'd modify to code like such (function($){ $.fn.pluginname = function(options) { var settings = $.extend({}, $.fn.pluginname.defaultOptions, options); return this.each(function() { var $this = $(this).data('pluginname', new pluginname(this, settings)); }); }; $.fn.pluginname.defaultOptions = { }; function pluginname(element, options){ return this; } })(jQuery); That will allow us to do (the syntax may not be entirely correct) var tabs = $('.tabs'), tabs_plugin = tabs.tabsPlugin({}), tabs_instance = tabs_plugin.data('tabsPlugin'); //later in the code tabs_instance.showTab(4); //call a public method
I remember programming in qBasic on my Ti-83.
It's on github. https://github.com/STRd6/pixie.strd6.com Daniel hasn't put a license on it yet, but he said it'd be MIT or BSD. And since when does view-source not count? :D There's also my own html5/js game engine (very WIP) which is MIT licensed and on github as well. Demo: http://spriteright.com Source: https://github.com/mcgrue/js-verge
The override is a cool trick but I don't think it would work in twitter's case as they mix, for some reason, document.write() and DOM manipulation. Would it be possible to combine it with an asynchronous loading and make the new document.write() inject the HTML at a predefined point in the DOM instead of storing it in a variable?
Possibly - I've been thinking about whether it's possible to refine this further - eg, for a javascript function to work out where the script tag which called it resides in the DOM, and then tag each chunk of HTML with its "originating element", so it can later insert the chunks into the exact containers they should be loaded into... but I need to work more on it before I know for sure.
Can someone give me a use-case for this?
instead of $.get(url, callbackFn); you could do (something like) $get(url).success(callbackFn); Yeah, I'm not that excited about it either.
You should be. First of all, it lets you chain asynchronous calls, rather than have to nest them -- this is a huge advantage in code cleanliness when you need to synchronize several asynchronous events. If you don't see this, you don't write asynchronous code with much complexity. Callback-style coding can lead to spaghetti code way too easily. But you can also handle the promise object itself (the thing that $.get etc. would return now) and do all sorts of interesting things much more easily. One example is with Dojo's version of these, which Dojo calls "Deferred"s, Dojo also has a DeferredList which itself returns a Deferred and takes a list of Deferreds as input. It fires only after all the Deferreds taken as input have fired. Very useful for synchronizing groups of asynchronous functions - say, when you want to wait to receive several pieces of data via XHR before opening a dialog to display them. Or where you're waiting on an XHR request whose parameters depend on the results of several previous XHR responses - it's a way to group chunks of asynchronous events into something synchronous. Very common need when you have a true "web app"/RIA with much of the data residing server-side and most/all of the behavioral logic client-side. Another is that it's trivial to attach several callbacks to one promise when the promise is an object - and in Dojo (I don't know about in jQuery) you can add extra callbacks to a Deferred even after it has already fired, which results in them being called immediately, so you don't even have to think about whether the promise has already happened or not -- which often shouldn't be a concern in asynchronous programming. This functionality is great for publish/subscribe models where many things might be interested in some event, with the event publisher not needing to be aware of what its subscribers do with it -- you could broadcast relevant Deferred objects related to some event, and subscribers could make use of them without needing some kind of hack like telling the broadcaster to inject callbacks from interested subscribers into its asynchronous calls. One more thing you can do is, with Dojo at least, you can use Dojo.when which works with either promises or actual values. So if you have an xhrGet function which is cacheable, it would either return a Deferred if it didn't have the value cached, or it would return the value immediately if it did. You could use Dojo.when with this and it will handle both transparently. (Sorry for all the Dojo examples -- I don't know jQuery or its implementation of promises this deeply. But these are the sorts of things which promises enable you to do.)
Although I think Jade is overall a better version of Haml in most cases, I'd recommend against anyone using it if performance is important to them. http://jsperf.com/dom-vs-innerhtml-based-templating/53 You can see Jade is one of the slower performers (3rd slowest to be precise). Haml is sitting in the middle and is about 8x faster than Jade.
Prototype extends the DOM in unsafe ways currently. It's not really a modern option, until they rewrite it.
No, in fact, you are wrong. It is not executed only once. It is because this is legal: for (i=0; i&lt;n; i++) {} The comparison (`i&lt;n`) must be made on every iteration. And that is also the problem with your benchmark - a trivially short list which takes a trivial amount of time to measure its length.
The initialization part is executed once. The condition is checked before every iteration. The incrementation part is executed after each iteration. This is basic knowledge. You really should know this. Seriously. The length of arrays isn't measured. It's known. However, something like `foo.bar` means going up the chain, which is slower than accessing a variable from this scope. The length of HTML collections is always calculated, since these are "live". This means it's even slower and this also means that you really want to ensure that you only do this once (if possible).
The big deal is error callbacks for getJSON (cross domain calls) where typically you would need to write a server side proxy to listen to error codes or use timers to execute callbacks on not retrieving the data you requested.
I added Pixie to the list (at Other). There probably has to be a separate list for these kind of apps... Your engine has been listed amongst the others. :)
So you could do: $get(url1).success(callback1).get(url2).success(callback2); And the second get will not be executed before the first one is a success?
Hell Yeah!
anyone ever get '3-2-1 Contact' magazine? first ~~programming~~ copying i ever did. congrats on the implementation.
Dojo is licensed by IBM? Interesting. I did not know that.
Dojo is licensed by IMB? Interesting. I did not know that.
You use the [Reddit Uppers and Downers Enhanced](http://userscripts.org/scripts/review/56641) solution in your suite right? If you look at the source code for that, you will see a "chunker" that splits the processing up into smaller batches. That might be a good approach for all of your modules.
In Safari (using [GreaseKit](http://code.google.com/p/greasekit/)) both versions take 2ms. Tested on several threads with lots of comments. The way that the element-anchored `querySelector(All)` works is [pretty dumb](http://ejohn.org/blog/thoughts-on-queryselectorall/): it runs the query document-wide, then filters out all results that aren't descendants of the given element. Thus it doesn't surprise me at all that it's no faster. But I wouldn't worry about it too much — it's not likely to be your bottleneck.
Yeah, I am familiar with that technique and almost every module of RES uses that technique... I'm still looking for ways to make it faster :-)
2ms? not 200ms? none of those took less than around 150ms in Firefox 3.6.13.. I know FF3 doesn't have the best JS engine, but 2ms seems absolutely insane. edit: also, I've actually read that Resig article - but it's from 2008... is that situation still the case?
Just tried it in Firefox 3.6.13: ========= ALL SEPARATE QUERIES ========= separate query start executed. Diff since last: 14197ms separate query end executed. Diff since last: 5ms ========= NOW WITH SUB QUERIES ========= total query start executed. Diff since last: 2283ms total query end executed. Diff since last: 3ms You're not looking at the first "diff since last" entry for each, are you? Because that's just measuring the time that elapsed before you clicked the button. EDIT: And, yes, that's still the case — it was too late to change the behavior, since it was in the spec and already implemented by several browsers. EDIT 2: Ah, on a thread with ~1000 comments in Firefox: ========= ALL SEPARATE QUERIES ========= separate query start executed. Diff since last: 63813ms separate query end executed. Diff since last: 276ms ========= NOW WITH SUB QUERIES ========= total query start executed. Diff since last: 3449ms total query end executed. Diff since last: 130ms In Safari, it's 32ms and 35ms.
I haven't looked at your code, but why not just memoize your querySelector methods so that doing the same query repeatedly doesn't cost you the same amount of time?
The problem is the querySelectors aren't all the same.. A reddit comment "container" may have a class of .comment But inside there, one selector may need to get the "parent" button, where another may need to grab the "permalink" button... yet another may want to grab the author of that comment etc... My hope was that if I get every .comment - then grabbing those 3 individual things within that .comment might be faster. Rather, it seems faster to search for all of them independently -- throughout the whole document rather than within each comment
Thanks for the info, that's helpful. One thing I should've pointed out: You really need to reload the page before trying a different method, as JS engines seem to cache query selector results... Did you do that when you ran these? Whatever I do "second" on the same single page load always seems to be faster... whereas if I reload before each test I get more consistent results based on method, not chronology...
Well that is sexy... I wonder what the benchmarks are for it though.
You're right — order does matter in Firefox. If I reload in the middle, both tests take around 250-300ms. It seems to make no difference in Safari. In my opinion, this indicates that the two approaches are equally performant.
Thanks for testing... do you think my methodology for the testing is sound? If they're equally performant, it doesn't really make sense to totally re-engineer RES... it might make some code a bit more organized, but not really any faster.
Don't go to England!
Correct.
BAM! http://jsperf.com/jquery-dom-creation-comparisons 
Good on you for bringing the new constructor to the attention of more people. :) This is admittedly a bit of a plug, but I ~~stole~~ was inspired by that lovely syntax for [my itsy-bitsy tiny little JavaScript library Pentu](http://www.reddit.com/r/javascript/comments/eyoyj/pentu_itsybitsy_tiny_little_clientside_js_library).
as soon as you get your tongues of the floor and back in your mouths, check out [prototype](http://api.prototypejs.org/dom/Element/new/). its had a similar syntax for as long as i can remember... var el = new Element( 'a', { href:'/daddy/has/a/boo/boo', id:'ouch' });
It's not bad. Admittedly the older way is faster because it takes advantage of innerHTML, but it's still comparable to createElement. 
`Element` class in Prototype was (is) doing the same thing for a while now. Also: `$('&lt;div /&gt;')`... really? Looks very ugly.
And Dojo! That '&lt;div/&gt;' string is a really weird choice. Most elements break in the browser if you try to close them XML-style like that. I think this is a good example of why jQuery's one-function-for-everything approach is weak.
And [Mootools](http://mootools.net/docs/core/Element/Element#Element)!
Thanks for re-posting. Forgot to downvote last time.
ASIDE: Do you now maintain all of the individual modules? Or are you updating them when the original authors update?
For a laugh, see if you can turn off "chunking" in all of your modules. You will end up locking the UI for longer but there will be far fewer screen re-paints and the overall experience might be better.
The modules have basically been rewritten from the ground up at this point, so I maintain them. Some of them weren't cross browser compatible, and RES runs in Firefox, Chrome, Opera and Safari. Others were poorly written. Others didn't have configurable options, or all the functionality that I (or my users) wanted in RES. Still others just stopped working because Reddit changed its HTML a bit... So, very little in RES is all someone else's code anymore... In addition, a common misconception is that RES is entirely a collection of outside modules. In fact the vast majority of code in RES is my own (unless you're counting line numbers, only because the live comment preview includes a markdown engine that isn't mine, but is very long)...
Yeah I actually was going that route earlier on in RES's development... users did not like the initial freezeup.
Good DHTML is a trade-off between number-crunching and screen updates. You need to minimise the number of times the screen is re-painted while not hogging the processor. You can definitely make a big improvement by only having one "chunker". Lots of little chunkers mean lots of little screen refreshes. Try to get your script down to one setTimeout call.
&gt; You can definitely make a big improvement by only having one "chunker". Lots of little chunkers mean lots of little screen refreshes. Try to get your script down to one setTimeout call. You know, this is blindingly obvious and yet something I hadn't really given much thought to optimizing. I'll have to think of a decent way to handle it... creating a "master chunker" that modules can send jobs off to... a task that sounds like it's clearly been accomplished before and probably solved better than I will ;-) Still, seems like a great next step for me to work on for RES's efficiency, thanks!
Hope it helps. :) I'm a user of your script. I don't really notice any performance problems but I don't enable all of the features. Thanks for making RES!
Now gaze in slight confusion or abject horror as the [HTML4 sample table](http://www.w3.org/TR/html4/struct/tables.html#h-11.5) is created programmatically (with output configurable to be either a DOM element for insertion or a Tag object which `toString()`s to the appropriate HTML or XHTML) with [DOMBuilder](http://code.google.com/p/dombuilder/) (based initially on another [DomBuilder](http://web.archive.org/web/20070113034041/http://www.vivabit.com/bollocks/2006/04/06/introducing-dom-builder), see also [Mochikit](http://mochi.github.com/mochikit/doc/html/MochiKit/DOM.html)): TABLE({border: 2, frame: "hsides", rules: "groups", summary: "Code page support in different versions of MS Windows."}, CAPTION("CODE-PAGE SUPPORT IN MICROSOFT WINDOWS"), COLGROUP({align: "center"}), COLGROUP({align: "left"}), COLGROUP({align: "center", span: 2}), COLGROUP({align: "center", span: 3}), THEAD({valign: "top"}, TR( TH("Code-Page", BR(), "ID"), TH("Name"), TH("ACP"), TH("OEMCP"), TH("Windows", BR(), "NT 3.1"), TH("Windows", BR(), "NT 3.51"), TH("Windows", BR(), "95") ) ), TBODY( TR(TD(1200), TD("Unicode (BMP of ISO/IEC-10646)"), TD(), TD(), TD("X"), TD("X"), TD("*")), TR(TD(1250), TD("Windows 3.1 Eastern European"), TD("X"), TD(), TD("X"), TD("X"), TD("X")), TR(TD(1251), TD("Windows 3.1 Cyrillic"), TD("X"), TD(), TD("X"), TD("X"), TD("X")), TR(TD(1252), TD("Windows 3.1 US (ANSI)"), TD("X"), TD(), TD("X"), TD("X"), TD("X")), TR(TD(1253), TD("Windows 3.1 Greek"), TD("X"), TD(), TD("X"), TD("X"), TD("X")), TR(TD(1254), TD("Windows 3.1 Turkish"), TD("X"), TD(), TD("X"), TD("X"), TD("X")), TR(TD(1255), TD("Hebrew"), TD("X"), TD(), TD(), TD(), TD("X")), TR(TD(1256), TD("Arabic"), TD("X"), TD(), TD(), TD(), TD("X")), TR(TD(1257), TD("Baltic"), TD("X"), TD(), TD(), TD(), TD("X")), TR(TD(1361), TD("Korean (Johab)"), TD("X"), TD(), TD(), TD("**"), TD("X")) ), TBODY( TR(TD(437), TD("MS-DOS United States"), TD(), TD("X"), TD("X"), TD("X"), TD("X")), TR(TD(708), TD("Arabic (ASMO 708)"), TD(), TD("X"), TD(), TD(), TD("X")), TR(TD(709), TD("Arabic (ASMO 449+, BCON V4)"), TD(), TD("X"), TD(), TD(), TD("X")), TR(TD(710), TD("Arabic (Transparent Arabic)"), TD(), TD("X"), TD(), TD(), TD("X")), TR(TD(720), TD("Arabic (Transparent ASMO)"), TD(), TD("X"), TD(), TD(), TD("X")) ) );
Pretty cool, though at this point I am unlikely to be inserting new elements without using a template, and I am unlikely to be attaching events to them, as I would have used delegate for that. Still, it is a good thing to keep in mind.
Actually, you can just as well write `$('&lt;div&gt;')`. It reuses jQ's parsing syntax (via innerhtml and stuff). Both methods are actually compatible.
That's a fare point. I guess I'll simply nuke the "comparison" and "benchmarks" pages for start. I wrote them back when there were almost no tutorials and people were asking for some comparisons. Thanks for the advice!
That might be an interesting thing, but I'm not sure about that. In my experience most folks read a few first lines where all the boring utility functions are and then jump to the conclusion that there is nothing interesting or it all stolen from Moo/Proto because I used the same function names. It seems like no one really gets to the good stuff But maybe I'm wrong :) Anyhow, I'm going to work on a new community-based homesite for rightjs and will try to do something about it. Thanks!
This has to perform like molasses, since the only way to have variable parameter length is to constantly access the arguments object.
Element creation is one of the only things I wanted from a JavaScript library. So I just made my own Element constructor: /* Name: Element constructor. Purpose: Provide a way to create DOM elements without storing them into arrays. Syntax: new Element(string type, *object properties, *array children); Notes: Specify events with "on", raw HTML attributes with "@" and anything else will be interpreted as a JavaScript object property. Example: new Element("a", { href : "http://www.example.com/", textContent : "Hello", "@style" : "color:white;background-color:black", onclick : function(e) { e.preventDefault(); alert(this.innerHTML); } }); */ function Element(A, B, C) { A = document.createElement(A); if(B) for(var b in B) { var cur=B[b]; if(b.indexOf("on")==0) A.addEventListener(b.substring(2), cur, false); else if(b.charAt(0)=="@") A.setAttribute(b.substring(1), B[b]); else A[b]=B[b]; } if(C) for each(var c in C) A.appendChild(c); return A; } 
In my opinion, everyone should just learn and push for standardizing [XPath](http://www.w3schools.com/xpath/) in all browsers. All the good browsers already have it natively, and it's more powerful and useful than CSS selectors. If you've never used it, respond, and I'll gladly provide examples.
actually I've used it... I thought (maybe I'm mis-remembering) that XPath was slower than querySelectors, though... Unfortunately, I've actually had to *remove* some XPath code from Reddit Enhancement Suite because Opera doesn't seem to support it... at the very least, it doesn't seem to support it in the same exact way that all the others do... it was much easier for me to just rewrite a couple of lines of code than try and figure out why Opera was barfing on code that Chrome, Firefox and Safari were all OK with.
I don't consider Opera a "good browser"... though I'm well aware many disagree. FF / Chrome / Safari are basically the great ones. I can imagine XPath is slower. It's got loads more ways to select elements.
&gt; I can imagine XPath is slower. It's got loads more ways to select elements. That's exactly the thing, though... just because it's more powerful doesn't mean we should use it all the time... I want RES to be as fast/efficient as possible... I'm usually going to use whichever method runs the best.. even if it may not be quite as easy to program...
Ha, that's true I suppose. But isn't that going to be an issue no matter how you supply the source code? At any rate, keep on plugging away and I'd appreciate any consideration you'd give my suggestion.
jade was never designed for the browser, my haml.js implementation is roughly 3x faster than haml-js
tl;dw
ok. im guessing (and im a GOOD guesser) that its some bizarre way to create an html table, but given that it has almost as many characters as real deal html, im stumped. why would anyone ever want to do this? looks like someone was REALLY drunk when they wrote this.
I learned about how awesome node.js is for streaming PNGs or doing simple hello world socket servers.
Missing out on ASCII Yoda...
try charset attribute on script tag?
Use their entity codes rather than the actual characters themselves. http://www.w3.org/TR/REC-html40/sgml/entities.html
Try a different font. (I have no idea what I'm talking about)
stackoverflow?
This. Host the javascript file on your client's website and replace the non-ascii characters with character entities.
tried and difn't work
The script uses (I think) ISO 8859-1, and you page probably uses UTF-8. The server serving the script does not set a Content-Type with the character set; I think you can thus override the content type by setting `charset` attribute (as @sonuku suggested). If that doesn't work, try serving your own page as latin-1 (ISO 8859-1). If all else fails, proxy the script and set the content type to `application/javascript; charset=latin-1` or whatever.
that script is generated by another script running in http://www.infobae.com, so if I just host it myself it won't be dynamic anymore. the script is actually displays news.
What you could do is have a PHP/Python/etc.. script running every x hours/minutes/days that caches a copy of http://www.infobae.com/adjuntos/noticias/0000015.js locally and translates the entities in the file. Problem solved?
this did the trick: &lt;script language="javascript" type="application/javascript" charset="latin-1" src="http://www.infobae.com/adjuntos/noticias/0000015.js"&gt;&lt;/script&gt; Thanks so much man, I appreciate it.
[jQuery](http://jquery.com)
Why is this a video?
Or use a proxy?
Or, rather than a cron job, just grab the javascript on demand when there's no local cache and then rebuild the cache. E.g (this is obvious code but I'm just spelling it out...) $remote = 'http://www.infobae.com/adjuntos/noticias/0000015.js'; $cache = '/tmp/'.md5($remote).'.js'; $data = file_get_contents($cache); if($data !== false) die($data); $data = file_get_contents($remote); //replace $data unicode with entities here file_put_contents($cache,$data); die($data); You're at the whim of that remote host anyway so whether your server grabs it or your client grabs it makes no difference.
may I suggest you put the script in an iframe (in case you haven't already) so that when their site gets hacked you at least have some protection?
Or frameworks in general, yes.
Too long for twitter.
jQuery's source code is an **excellent** resource for finding browser inconsistencies.
10 things to 29 minutes. 1 thing for every ~3 minutes. Do not like.
I really enjoyed the video - lots of good examples of solid javascript conventions and design patterns. It might be a bit dry - but both this, and his first jQuery Source video provide valuable insight into the way jQuery actually works. If you haven't ever even taken a glimpse inside the jQuery source, I think it's a must-watch.
Really wish he would do a text blog not video.
YEAH GUY YEAH
Plain text can not contain that which is Paul Irish dancing to the Angry Beavers theme song.
Wow, that is awesome. This is a great proof of concept that is crazy enough to maybe inspire some big ideas.
Try charset="ISO-8859-1" or charset="UTF-8" . Latin-1 is not very common... 
I like it. In the footer, the header text (news, band, tour, etc) could be made larger or bolder. And the links and logos underneath appear to be on the same color background as the nav buttons at the top of the page, but the link text is much darker. I would make the two match. Also, the Facebook logo at the top is too close to the search box. It makes it look a "Facebook search box".
I think you mean this: var year = 9, var month = 1 var day = 3; $("#calendar").load("calendar?name=schedule", function(){ onCalendarLoad(day, month, year); });
try something like $('#calendar').load('url.whatever',function(result){onCalendarLoad(day,month,year);});
Wrap it in an anonymous function: $("#calendar").load("calendar?name=schedule", function() { onCalendarLoad(day, month, year); });
lol, 3, bam
wow... like 3 responses within 1 minute. you guys are awesome.
could somebody translate a summary into text please?
I think what you are looking for is called "partial function application", as explained in the [wikipedia Currying article](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application). Here's an [article](http://www.webreference.com/programming/javascript/rg17/) on currying and partial function application in Javascript.
latin-1 is the onlyone that works for the whole site. ISO-8859-1 has problems with "ú" and even then none of these seems to work for IE
Now I can't even save a post which contains those characters...aaaah!!!
It's called a closure. 
Us JavaScripters are well known for our web design skills.. Oh no, wait, that would be the [web design community](http://www.reddit.com/r/webdesign).
A lot of whiners about it being a video, seriously guys? The vid is great and way better/informative imo, as I tend to just skim text anyway. Another great vid, I hope he makes more.
Why are people trying to make Canvas work like Flash.. and then crying about how Flash sucks. Anyway nice tut, but I was disappointed at the examples frame rate.
Do you have a meta charset tag in your html head? Like this? &lt;meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type"&gt; The site infobae.com has it (in fact, I copied that from their site). Maybe it could be a charset collision problem.
I tried it in IE and in Opera ... is there a browser issue? When I get home I guess I'll try it in Chrome (am at work)
It's just a contrived way of showing how easy it is to build deeply-nested html structures in code. Here's something more typical, from a project which uses it for displaying object details: function createTable(headers, objects, properties) { return TABLE({cellSpacing: 1, "class": "data sortable"}, THEAD(TR(headers.map(function(header) { return TH(header); }))), TBODY(objects.map(function(obj) { return TR(properties.map(function(prop) { var value = obj[prop]; if (typeof value == "boolean") { value = value ? "Yes" : "No"; } if (typeof value == "undefined" || value === null) { value = "-" } return TD(value); })) })) ); } function sourceObjectToDOM(obj) { var d = DIV({"class": "source"}, H2("Source '" + obj.name + "'"), P(obj.filePath), H3("View"), TEXTAREA({name: "code", "class": "sql"}, obj.view) ); if (obj.params.length &gt; 0) { d.appendChild(H3("Parameters")); d.appendChild( createTable(["#", "Name", "Type", "Field Type"], obj.params, ["position", "name", "type", "fieldType"])); } if (obj.keys.length &gt; 0) { d.appendChild(H3("Keys")); d.appendChild( createTable(["Type", "Properties", "References", "AutoIncrement", "Updateable"], obj.keys, ["type", "propertyList", "references", "isAutoIncrement", "isUpdateable"])); } return d; }
How is jQuery considered "documentation"?
The article explains how you can get it to work in Opera. It is not easily possible to get it to work in IE9 but that involves installing a special patch pack by Microsoft. The whole point of the demo is really is that it couldn't be done in old browsers not even with trying really hard (There is always a way but then I would like to see it).
not to mention inline js isnt that great of an idea anyway.
I agree with most of your statement but I dont think its dry he injects random humor, dry is listening to the MIT lectures..
Use a curry function. The one below is nice because it keeps the jQuery this variable, and appends all the arguments together. $.curry = function (fn) { var slice = Array.prototype.slice; var args = slice.call(arguments, 1); return function () { return fn.apply(this, args.concat(arguments, 0)); }; }; var year = 9, month = 1, day = 3; $("#calendar").load("calendar?name=schedule", $.curry(onCalendarLoad, day, month, year));
You probably are looking for less.js https://github.com/cloudhead/less.js/
 I would go with this color palette. #FBFF10 #10FF10 #C310FF #FF1018 #000000
Detection for spacebar too? That's the only other key that I can think of that would trigger a button that would bypass the logic being bound to the return key.
I don't have experience with the iPhone and forms, but why are you not using onsubmit handler on the form itself?
This. Its much much safer to attach to the form's onSubmit event - and will lead you to never have to worry about device-specific keyCodes and the like.
+1 for onSubmit
Thanks ill try that. Edit: works!
&gt;I’ve always shunned folks who LOVE Flash/Air, and LOVE Microsoft Silverlight, because I don’t. I don’t get swayed by marketing bullshit from major companies. Eh...................Flash is great, and I haven't used much silverlight but I've heard its not shabby. I think its unfair to compare javascript and Flash. Sure, many people have used Flash where they could/should have used javascript, but that doesn't make Flash "bullshit". Oh and fuck Apple for not supporting flash.
For debugging, it might be a good idea to just log (i.e. output) the keycode of the key that was pressed on the iPhone.
Great read. Thanks for posting!
There's no closures here, only anonymous functions.
Came here to say this. Well, say it would be a better example if that string literal was a variable inside the first scope. 
The word closure is misused almost as much as the term HTML 5.
If by constantly you mean once, then no. Edit: you mean once.
What is ugly about $('&lt;div /&gt;')? 
It is well written code that works around any inconsistency you are likely to run into.
Uhm.... Compare it to: var el = new Element('div'); I don't like the fact that one does have to type "&lt;div /&gt;" just to create an element. jQuery's "one-function-to-rule-them-all" approach clearly doesn't work in this example.
I'm very pleased to have all the blogs in one place. By the way, I *love* the [W3 Viewer](http://www.w3viewer.com/). It's amazing to have it in a such an accessible format. I think it has just become member to a very elite group of bookmarks: those located in the toolbar. It's fucking brilliant, easy, snappy, *and* it validates! I have two small commentaries, though: 1) the circled flag/arrow used for minimizing the sidebar is not very clear; 2) it's missing a favicon! None of the bookmarks in my toolbar use names, simply icons, so it would be great if you could include one. W3 Viewer is my official source for documentation. I'm telling everyone about this. 
Yes, I will make a favicon for the W3 Viewer (later today). Thanks for reminding me. :) I think the minimize button is easy enough to spot. If this page were for the general public, I would take additional steps to ensure that everybody understands how it works. But since the page is primarily for web-developers, I don't think that's needed, I have faith in you guys :) Btw, yes, it seems it validates. I never really checked. I guess that's because I don't have to make it work in IE (I'm redirecting IE visitors to getfirefox.com) ;)
 $(html).find('body');
Seems easy enough, and this function should work with any html element including &lt;html&gt; http://www.daniweb.com/code/snippet217278.html function ConvertHtmlTableToDom(tableString) { var tempDiv = document.createElement("div"); tempDiv.innerHTML = tableString; var domTable = tempDiv.firstChild; return domTable; } 
Another solution: var exStr = "&lt;html&gt;&lt;body&gt;Here's the body&lt;/body&gt;&lt;/html&gt;"; var theBody=exStr.substring(exStr.indexOf("&lt;body&gt;"), exStr.indexOf("&lt;/body&gt;") + "&lt;/body&gt;".length);
Note that $(html) turns the string into a DOM tree by assigning the string to the innerHTML of a div, which produces different results in different browsers. Firefox will strip out some elements that are invalid in a body, for example. However, I think the mangled tree usually survives well enough for $(html).find('body') to work. If the page is valid xml (on the web? yeah, right) you can parse the string as an xml document and pull out the body subtree from there.
just out of curiosity, why dont you want to use regex?
An ajax request can be used to grab the iframe source code, however if it's on another domain, the browser won't let it happen. In jquery you could do the following: var iframeLinks = []; $('iframe').each(function() { iframeLinks.push($(this).attr('src')); }); var src = document.body.innerHTML; for(var i = 0; i &lt; iframeLinks.length; i++) { $.get(iframeLinks[i], function(data) { src += data; }); } // src now has all the source code Note that the source there is not replacing the iframe code. You can do it, but it requires a bit of clever code with using index of and substring method calls to replace it.
http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454
Make sure you set the Boolean for the listener for weak reference if you want it collected. example: someobject.addEventListener("somEvent",someHandlerFunction, false, 0, true); false, 0, true will set it as a weak reference and set it up for collection. 
garbage collected, just make sure there are no references to it. i'm sure there are tools for this, but you could watch the browser process size - if it's constantly growing there's a leak...
I would recommend using DOMParser. var code = new DOMParser().parseFromString(yourHTMLhere, "text/xml"); code.firstChild; // this gives the &lt;html&gt; element It is strange that you even need to parse text as HTML though. It usually means you're doing something wrong. What's your objective?
Assuming you don't keep any lingering references, they will get garbage collected eventually. Unfortunately, it can be a while and the garbage collection itself can slow down your app. There are a number of ways to avoid the need for anonymous functions as event handlers. Closures are not free! Start by generating ids for your dynamically generated elements, then a single event handler can decide how to proceed based on which element is poked, instead of needing a separate handler for every element.
In greasemonkey, you should have no security troubles at all accessing the content of each iframe. You just need to recursively pull the document.body.innerHTML for each subdocument. I don't know what you've going to do with them from there. I believe it's impossible to reliably flatten a whole nested tree of documents and produce the same output, since they can have different, and contradictory, CSS documents applied. Perhaps you have some other javascript you want to apply to the result. In which case, it would be better not to build the monolithic HTML at all, but to recursively process each subdocument separately.
 var htmlDoc = document.implementation.createHTMLDocument(null, "html", null); htmlDoc.documentElement.innerHTML = responseDetails.responseText;
If the html is the result of an ajax call that you want to insert into your page, you could use the shortcut in jQuery's load method where you specify a selector after the URL, separated by a space, e.g. $('#result').load('ajax/test.html #container'); not sure if it would work with 'body' instead of '#container' though, so a single root element that wraps all content might be necessary.
That's part of the point. If it were text, I could skim it, and get the information I need in much less time. I wouldn't have to put headphones on to avoid distracting my co-workers. I could see that Things #3, 5 and 8 (just a for-instance) are things that I already know, and immediately skip to the next heading. 
Since in Javascript, DOM elements are merely objects, and eventListeners are merely attributes *(properties of an object, not html attributes)*, I would imagine that the whole object is being removed. That includes all its properties, and therefore any event listeners that have been added to it.
Try not to just make stuff up please.
You can use css: ul#twitter_update_list { list-style-type: none; }
I've never done css. Where would I put that?
you can put it in the actual markup of the ul like this &lt;ul id="twitter_update_list" style="list-style-type: none"&gt;&lt;/ul&gt; or put it in a style tag like this &lt;head&gt; &lt;style type="text/css"&gt; ul#twitter_update_list { list-style-type: none; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; ... Hope this helps. 
Thanks that worked.
 //Your string html var a = "&lt;html&gt;&lt;head&gt; asdfasdf&lt;/head&gt;&lt;body id ='hi'&gt;asdfasdfasdfasdf&lt;/body&gt;&lt;/html&gt;"; //Run a regex to capture everything in the body tag var b = a.match(/&lt;body.*&gt;(.*)&lt;\/body&gt;/i); //b[1] will contain the body data. console.log(b[1]);
Our definitions of "clearly" must differ. To me $('your html') is cleaner. Maybe its because I don't take the "I'm a programmer so I have to turn HTML into code somehow" approach.
you're thinking AS3, i assume the question is JS. JS is event, function, bubbles (IE JS is event, function). to answer the question, as long as you remove all references to the DOM element you should be fine. however, there is removeEventListener (or IE detachEvent) available if you really want to be sure. as someone who routinely works on very complicated RIAs, i can tell you that you have to work pretty hard to choke a browser, so i wouldn't worry about it until you're in the couple thousand element range. the other thing to think about is where you add your event listeners. are you attaching a listener to each element? that's not really very economical. better to add one listener to a common parent and run the event target through something like a switch/case statement. this way you're setting one listener (which will presumably not need to be removed) and you can add or remove child elements at your leisure. this way you can work with many more elements for less memory cost (though i don't recommend this for mouseover and mouseout, that will really start to choke the browser if you have many child elements).
if you have to care about older IE versions (6 and 7), there are known memory leaks occurring in almost exactly the scenario you describe. See http://code.google.com/p/google-web-toolkit/wiki/DomEventsAndMemoryLeaks : &gt; The upshot of all this is that in some browsers, any reference cycle that involves a Javascript object and a DOM element (or other native object) has a nasty tendency to never get garbage-collected. My advice here would be two fold: 1. If you must attach events to your nodes, detach them when removing them. Several js libraries have convenience methods to do that for you (track which listeners are added to a node through the library, and remove all those listeners when told to.) 2. Don't attach events to your short-lived nodes. You're likely to get better performance (and simpler code) by having an event listener in a persistent node that contains all those short-lived nodes, and letting events bubble in it (or capture them if you must). Inspect the event target's classname or id to know exactly what to do with each event your common handler receives.
What am I making up? I was thinking AS3 and misspoke. That is a far cry from making stuff up, ass.
I would have happily apologised but then you ended up being ruder than I was.
This is such a bad idea on so many levels.
[https://developer.mozilla.org/en/Code_snippets/HTML_to_DOM](https://developer.mozilla.org/en/Code_snippets/HTML_to_DOM)
htmlstring.split("&lt;body")[1].split("&gt;").slice(1).join("&gt;").split("&lt;/body&gt;")[0] 
I am sorry.
Me too! :)
Very much inspired by [this comment thread](http://www.reddit.com/r/javascript/comments/dtwyz/a_javascript_ide_for_the_iphone/c12w6ao) from a long time ago. Whatcha think? Potentially useful?
You know how I can tell this guy knows Perl?
I'm getting an html page returned as a result of an ajax call. In the response, there is a message that is either "Thank you" or "You must correct the following mistakes", both written in html.
A converter from the comments - http://discogscounter.getfreehosting.co.uk/js-noalnum_com.php
Ah. So how did DOMParser() work out for you?
is this true? i understand that events can be handled by creating an attribute with the event as the key, and the handler as the value, but what i understand this is the wrong way to do it (memory leaks). AND when i attach event listeners to an element before inserting them into the DOM, they dont show up on the element as an attribute (when the element is finally inserted).
well that was easy.
&gt;AND when i attach event listeners to an element before inserting them into the DOM How is that even possible? Are we talking about using jQuery or pure javascript?
i use prototype, but its possible with pure javascript as well.
because he can write javascript?
How exactly? I know of the DOMNodeInserted or DOMTreeModified events, but to my knowledge the method .addEventListener() only applies to a single DOM element, which needs to exist on the page at the time of adding said eventListener.
http://www.reddit.com/r/netsec/comments/f6rkr/javascript/
okay, a few things. first, looks like you are right in the fact that the addEventListener() method is for DOM elements. not 100%, but thats the way it looks after two click on google results. second, im using inspector in chrome to examine what happens to an element when you add an event listener to it, and there is a property 'attribute' which was set to false: [screenshot](http://i.imgur.com/oSHMm.png). used getElementById -&gt; addEventListener to achieve this. third, isnt prototype pure javascript? wait, i mean prototype IS pure javascript. so you can still attach event listeners to an element before it is added to the DOM. have a look at the prototype source to figure out how. last, not sure how we got here, but event listeners are not attributes, though they can be added through the use of an attribute, though this is fairly widely excepted as being the lesser of two ways to attach said event listeners. whew. type-o-matic!
Swearing is allowed on reddit. No need to censor your title. 
&gt;first, looks like you are right in the fact that the addEventListener() method is for DOM elements. not 100%, but thats the way it looks after two click on google results. Well what else could you use it on? Everything inside a page is a DOM Element. &gt;second, im using inspector in chrome to examine what happens to an element when you add an event listener to it, and there is a property 'attribute' which was set to false: screenshot. used getElementById -&gt; addEventListener to achieve this. Not quite sure what you mean by this, but ok &gt;third, isnt prototype pure javascript? wait, i mean prototype IS pure javascript. so you can still attach event listeners to an element before it is added to the DOM. have a look at the prototype source to figure out how. Well, yes. What I meant was something like this: Array.forEach(document.getElementsByTagName("a"), function(e) { e.addEventListener("click", function(a) { a.preventDefault(); alert(e.href); }, false); }); will only apply to all a elements currently in the DOM tree. Links that are added ***later*** on will not be affected by ***this code***. Are you sure prototype isn't just repeating the above code for newly added elements using DOMNodeInserted events? &gt;last, not sure how we got here, but event listeners are not attributes, though they can be added through the use of an attribute, though this is fairly widely excepted as being the lesser of two ways to attach said event listeners. I meant attribute as it's understood in OOP. An attribute of an object, not a HTML attribute. Call it "property" if you wish. 
dude, you're breaking my balls with multiple hammers. please dont reply to a question that is in the search of truth with an assumption. i can assume stuff all day, but i was looking for a real answer, not just your gut feeling. &gt; Well what else could you use it on? Everything inside a page is a DOM Element. yeah, everything inside the document tag is a DOM element. HOWEVER, you can remove an element from the document, tweak it, and add it back. good luck using getElementById() finding it post removing/pre re-inserting. &gt; I meant attribute as it's understood in OOP. An attribute of an object, not a HTML attribute. Call it "property" if you wish. thats fantastic. when talking about client side html, you might want to refer to object properties as 'properties' and not attributes. especially given the fact that every element object has a PROPERTY named ATTRIBUTES. can we stop this here? its obvious you didnt know the answer to my question, and that you were 'taking a stab at it'. your comment is already in the negative, and not by my doing. thanks for trying, but please, i dont want to continue arguing with you.
There is no official JavaScript documentation; it's important to note that what we colloquially refer to as JavaScript is really called ECMAScript. Mozilla has excellent documentation of its brand of ECMAScript, JavaScript, at Mozilla Developer Center: https://developer.mozilla.org/en/javascript You can read Microsoft's documentation of their brand of ECMAScript, JScript, here: http://msdn.microsoft.com/en-us/library/yek4tbz0(VS.85).aspx
MDC is a great resource. Also where Mozilla's flavor differs from others, it is noted.
+1 for the MDC, out of all the sites it's simply the best resource for JavaScript
Agh, you beat me to them. I second both of those recommendations heartily as well. The one thing I'll point out is that, if you choose to look over the "JScript deviations from ES3" pdf, note that it came out before the release of IE8, and so might be a bit out of date.
MDC is excellent [Crockford on JS](http://yuiblog.com/crockford/) is great for understanding the language's past/present/future...
I'm a big fan of [JavaScript Kit](http://www.javascriptkit.com/). In a addition to Javascript documentation, JavaScript kit has some tutorials and DOM level documentation.
Welcome to [closures](https://developer.mozilla.org/en/JavaScript/Guide/Closures). Once you understand this you will be much more productive in Javascript. The way you are doing it, all your click handlers are sharing the same variable 'i' with the same scope. So by the time you get around to executing any of those click handlers, they all look up the value of i, and of course it's the last value it was set to. Solution: create a function that returns the function you want, with a value that is captured in its own private scope. This is a closure. function makeLinkRevealer(x) { return function() { $('.divs').hide(); $('#' + links[x] + '_div').show(); }; } for(i in links) { $('#' + links[i] + '_link').click( makeLinkRevealer(i) ); } You can even create that function-returning function inline. The pattern looks like function(x){ return function() { ... code that uses the value of x ... }; }(i) You see what's happening? the *function(x) { } (i)* will, within the scope of *{}*, bind *x* to whatever *i* is at that moment. But because we return a function that uses *x*, we can say that *x* is "closed over", and the function reference is itself a "closure". 
Sorry Mr. 2Troll, I'm not participating. :- P
This is the explanation I just tried and failed to write for why OP's code doesn't work. However! Here is a better solution for doing what the OP wants: $(links).click(function() { $('.divs').hide(); $('#'+this.id.replace('_link', '_div')).show(); });
Hey man, I just wanted to help you out. If I was wrong in any way, I appreciate being taught the right way, but there really is no need to be a dick about it!
Thanks, that's excellent! I'll look into it.
Oh, that's much better! But 'links' would have to be initialized a bit differently... in the OP's example it's an array of strings. In your example it should be done like this, which is much more jquery-esque. &lt;div id="revealer-links"&gt; &lt;a id="foo_link"&gt;Show the foo thing&lt;/a&gt;&lt;br/&gt; &lt;a id="bar_link"&gt;Show the bar thing&lt;/a&gt; &lt;/div&gt; &lt;div id="foo_div" class="divs"&gt;...&lt;/div&gt; &lt;div id="bar_div" class="divs"&gt;...&lt;/div&gt; &lt;script ...&gt; $( '#revealer-links a' ).click( function() { $('.divs').hide(); $('#' + this.id.replace('_link', '_div')).show(); } ); &lt;/script&gt; This works because we have nicely parallel names with the links and divs. If the relationship were more arbitrary, we could pre-attach the divs to the links with *$.data()*.
Yes, I tried eliah's suggestion, and ran into the same problem. I was just about to try something less elegant, but your suggestion worked. Thanks a lot to both of you.
You could look at the ecma script spec, alas it's largely written to ensure that behaviour is unambiguous (where possible -- there's a lot of old code that targets specific engine quirks :-/ ) -- http://www.ecma-international.org/publications/standards/Ecma-262.htm
There has been a recent blog post couching an almost identical problem as an [interview question](http://cam.ly/blog/2011/01/javascript-interview-question/) and another one from a while ago describing [how to fix it](https://github.com/raganwald/homoiconic/blob/master/2010/10/let.md#readme). tl;dr: This is an issue of scoping, and `i` in your example above is a reference to an element in the `window` global object.
Unable to test it until Monday. I'll try to remember to write how it goes.
+1 for mentioning MDC. Note that MDC is a wiki, so as you're reading it, you can also leave it better than you found it.
is the links variable a dictionary object or an array? if its an array you are much better off doing for(var i=0;i&lt;links.length;i++) instead of for(var i in links) Notice how I explicitly defined i using var. This prevents the variable i from being defined globally.
Great explanation, thanks
We're using [sammy.js](http://code.quirkey.com/sammy/) for [Webpop](http://www.webpop.com) and it's a nice little framework. If we were starting over now I would no doubt look into [backbone.js](http://documentcloud.github.com/backbone/). Whenever I've experimented with the more full fledged frameworks like Cappuccino or Sproutcore I've always ended up feeling quite disappointed. They don't feel like web frameworks, and I'll much rather construct the UI for my apps with HTML + CSS and then turn them into widgets with jquery, rather than writing lots of boilerplate UI code in javascript. The main thing both of them help with is giving you an out of the box MVC architecture, but from what I've seen of backbone.js t seems to deliver on that while retaining the general simplicity of working with html/css based widgets...
That list is incomplete without [YUI 3](http://developer.yahoo.com/yui/3)
YUI 3 has * **Node** which allows for browser DOM normalization across the A-grade browsers they support. * **Events** and Custom Events which allows the programmer to listen for DOM events as well as events used for inter-object signalling. * **Widgets** which can be either the Yahoo "official" ones or user contributed from the gallery -- either of which can be extended for one's needs using YUI's object model. They have standard rendering pipeline to facilitate MVC * **IO** retrieve information from servers in a variety of ways... synchronously or asynchronously...GET, POST, etc... cross domain options are also available All of that is just scratching the surface but one can use YUI3 in a bare-bones DOM manipulation way like jQuery or to build complex objects which render to and update the DOM only when certain events have transpired. I don't see how it could *not* be considered a framework. ExtJS was borne out of YUI2 IIRC but they have since added much of their own extensions and sugar. Sencha targets mobile UX with HTML5 and JS. All three are web app frameworks.
i think you want something more like this: $("&lt;div /&gt;", {id: "desktopTaskbar", css({'height': height, 'width': '100%', 'background-color': '#'+color, 'opacity': alpha})}); not sure if thats exactly correct though...
it works for me: http://jsbin.com/ilato4
I think you should have $('body').append('&lt;div id="desktopTaskbar"&gt;&lt;/div&gt;'); instead, no jQuery pro though... Edit: TIL appendTo is the reverse of append
also, you should never put curly braces on a new line like that. JS might interprit it as end of statement and treat the newline as a semi-colon. function definitions should be: function name() { }
Don't you always need the braces when you're defining a function, i.e., function bla() { something(); } could never be interpreted as function bla() {}; { something(); } ?
I'm no expert, but I'm fairly certain that will never happen. Edit: The reason why is because the interpreter ignores unneeded whitespace and only follows syntax. It needs a curly brace, so it will look for the curly brace. For example, I had a missing semicolon in my script...and since it was gone, everything else was broken. lol
I've used the code in my OP in the past and it worked, but that would work too
Strange...maybe something is interfering with my code
i cannot say how JS will interpret it, but new lines are often interpreted as semi-colons, so it's mostly always a good idea to put curly braces on the same line. http://robertnyman.com/2008/10/16/beware-of-javascript-semicolon-insertion/ there's a better blog post where the author goes into a lot more detail, but i struggled to find it.
My commas were fine...
i agree with you, but it's good practice, based on what i've mentioned in one of the other replies.
That's almost 3 years ago. I highly doubt that exists today. But in case it does...I'm gonna go fix all of my braces and stick to it. Thanks for the heads up. Better safe than sorry
I saw, and replied. I'm going to fix my braces to suit, just in case that "bug"(?) is still around today.
So I had a problem higher up in my script. I feel stupid. Got it fixed, and would like to thank badsyntax for the heads up on my curly braces and mentioning jsbin...I had no idea that existed. Thanks!
Yeah sorry, late at night! My mistake.
still around today, not going away anytime soon, part of the language. i also wouldn't call it a bug. example: http://jsbin.com/azufi from crockford himself "The return value expression must start on the same line as the return keyword in order to avoid semicolon insertion. " http://javascript.crockford.com/code.html 
Granted, I don't think it's possible for function statements to be interpreted like that, but it's still dangerous because the JavaScript parser will attempt to insert a semicolon before line breaks (the reason your function statements still work is because doing so results in an error, so the parser backtracks and tries to read it as a multi-line statement. Effectively, if you put opening curly braces on their own lines in JS, you're relying on the parser's error-correction. This is similar to relying on tag soup parsers when writing HTML. This is not a matter of style. In JavaScript the One True Brace Style _is_ the only option. The typical example is returning an anonymous object: return {foo: true} This is parsed as: return; { foo: true; } i.e. a return statement followed by a block (yes, JS has those, but they're useless) followed by a label (yes, those aren't useful either) followed by the statement `true;`, which is perfectly valid, too. I'm not sure, but it might be a problem in for-loops, too, as they don't need to have a body (`for (var i=0;i&lt;n;i++);` is valid JavaScript). Either way, it's not a good idea to rely on this. Coding styles should take the language into account and for JS there is only one convention when it comes to braces.
It's cool lol
Wow. I wish I knew this earlier. I've always put my curly braces on the same line, but ever since taking my java course I've put them on a new line since my teacher said it was easier. Bad habit. Definitely thanks for the heads up on this!
Thanks for the explanation. I had no idea this happened. I went back and changed everything!
ASI is mainly a concern around `return` statements. Your assertion that an interpreter might look at that function declaration as a statement is false. It might not be pretty, but it **is** valid. http://jsfiddle.net/F4DTh/ If you look at a lot of JavaScript written for NodeJS projects, you'll notice a semicolon-less style is quite popular (https://github.com/isaacs/npm/blob/master/npm.js). 
backbone.js gives you a great and lightweight core framework, while leaving you the flexibility of being able to use your own favorite template, UI, widget, and general purpose libraries.
thanks for clarifying. i wasn't sure. what are you thoughts on @kataire's response? really i know nothing of JS interpreters... i assumed there might a possibility of 'newline before brace after function name' causing issues for certain interpreters.
&gt; but it's still dangerous because the JavaScript parser will attempt to insert a semicolon before line breaks (the reason your function statements still work is because doing so results in an error, so the parser backtracks and tries to read it as a multi-line statement That's not exactly true. There are hard rules as well as exceptions the parser follows to determine where to insert semicolons. TBH, you probably won't find much differences across browsers in this regard (the DOM is where you see the inconsistencies). Here's an example of a `for-loop` with newlines: http://jsfiddle.net/uazB4/ Check out section 7.9 of the ECMA-262 spec: http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf (it's a real fun read!!) EDIT: I agree coding style consistency is of the utmost importance. And if there's a chance you, or someone on your team, may not be familiar with the pitfalls of ASI, you should be clean/consistent with your semicolons.
I'm using Backbone right now, but JavascriptMVC looks nice, specially the dependency management.
http://www.jslint.com/
Your feelings will be hurt but your code will be healthier.
Interesting! *watch*
I've been using jquery only. Having getting tired of mess on my pages, I discovered backbone.js. However, it's only a couple of days ago that I came across a framework that seems to exceed my expectations: [&lt;angular/&gt;](http://angularjs.org). Angular includes automatic two way model/view binding, controllers, injection, validation and it claims ease of testing. All of this with unobtrusive templating. I've been playing with these past two days and am ready to put it to use. If anybody wants to kick the tires and report back I'd truly appreciated. 
**Everyone is flipping way the fuck out about this. The parent post, while well-intentioned, is incorrect.** I've seen dozens of JS files over the years that use K&amp;R-style braces. Do you honestly think K&amp;R style would be used on the web, even for just a small fraction of JS files, if it confused _any_ JavaScript engine on the planet? First, read this in [5.1.5](http://bclary.com/2004/11/07/#a-5.1.5): &gt; Unless the presence of a _LineTerminator_ is forbidden by a restricted production, any number of occurrences of LineTerminator may appear between any two consecutive tokens in the stream of input elements without affecting the syntactic acceptability of the program. In other words, newlines are acceptable _everywhere_ except where marked with "[no _LineTerminator_ here]" in the BNF grammar. There's [no such mark](http://bclary.com/2004/11/07/#a-13) in the definition of a _FunctionDeclaration_ or _FunctionExpression_. Don't believe me? Check [7.3](http://bclary.com/2004/11/07/#a-7.3): &gt; In general, line terminators may occur between any two tokens, but there are a few places where they are forbidden by the syntactic grammar. [Here are the semicolon insertion rules](http://bclary.com/2004/11/07/#a-7.9). The short version: the parser tries to interpret everything without inserting any semicolons. _If_, when doing so, it gets to a token which _isn't allowed_ by the grammar, it checks if there was a _LineTerminator_ between the offending token and the one before it. If so, it inserts the semicolon so that the token gets considered as the beginning of a new statement. So if it sees this: a = b + 4 return a It tries to parse it as: a = b + 4 return a When it gets to `return`, it says, "shit, `return` isn't allowed there." That's when it goes back, sees the newline, and says, "oh, I need a semicolon here," and changes it to: a = b + 4; return a "Semicolon insertion" doesn't mean that a semicolon will be added at the end of every line. It means that the parser will try to infer a semicolon in cases where the code would be syntactically invalid otherwise. (kataire uses the example of a newline right after a `return` keyword, but semicolon insertion isn't to blame there, either — the _ReturnStatement_ is just [one of those definitions](http://bclary.com/2004/11/07/#a-12.9) where a _LineTerminator_ is specifically forbidden. **EDIT:** On second thought, that's just a quibble; the newline is the root problem, but the parser _will_ insert a semicolon simply because it'd be a syntax error without it.) I'll say it again: **A JavaScript parser won't insert a semicolon unless the code is unparseable without it.** I think that semicolon insertion shouldn't have been added to the language in the first place, but let's not treat it like an evil gremlin who scatters semicolons throughout your code like Johnny Appleseed.
this is a problem why?
Resig just had a huge post about the slowdown over at twitter and he ended the blog post by saying &gt; **Always cache the selector queries that you're re-using** var links = $(links), divs = $('.divs'); $.each(links, function(i, link){ link.click(function(e){ divs.hide(); $(divs[i]).show(); //i assume that the divs are a one to one with the links. I hate the fact htat you have to re-run the element thorugh jQuery every time you want to use it. You can probably cache it before the each loop }); });
You need to cancel the default action when capturing keypresses, otherwise up + down arrows scroll the browser window
Awesome! you should do a tutorial on how to develop javascript games.
Can't we just do one thing without heavy handed software engineering bandwagons getting in the way?
Download page: http://linqjs.codeplex.com/
Very clever. Did you do this?
No, I did not create this. I stumbled onto this earlier today and thought it was very neat.
Shush. I'm trying to scare someone into being sensible. Don't give them a false sense of security by confusing them with the complexities of real life ;)
Thanks! Ive already made one: http://www.reddit.com/r/javascript/comments/f7zko/tutorial_simple_game_with_html5_canvas/
Definitely this. Try a return false; in your keypress capture event. The Z keeps opening my search, can't really play like that.
it was build for mozilla contest so I create it playable mainly in Firefox.
I use Firefox, just have the instant search when typing enabled ;)
It should be fixed now.
&lt;3
[Github Repo](https://github.com/oyvindkinsey/easyXDM) (easyXdm.com is down for me)
http://www.reddit.com/r/jquery It's not that I don't want to learn something, it's just that jQuery is so damned ugly.
False.
Looks useful. Also one of my favorite songs by The Shins
WHY ARE WE YELLING
TL;TR It is a lot more work to forge new work then to copy what has been done so many time before. 
It was agreed less then a month ago that people who post specific frameworks here would tag their submissions. Am I missing something? http://www.reddit.com/r/javascript/comments/ew9mv/a_humble_request_for_rjavascript_posters/
Tagging is appropriate. Jquery's syntax just gives me Perl flashbacks. Why's it have to be so ugly?
Then why would you move from HTML5 to Flash?
In what way is it even remotely similar to Perl? I think you must be misinformed. Other than a function called $(), there is nothing weird about jQuery. Or maybe the thing that most people complain about with regards to Perl is not the same thing you are talking about (namely, sigils).
Well his blog post is basically saying, that it is too hard to make the game in HTML5 so he is going with Flash. Granted some of the points he makes are valid, but there is a lot to be said about pushing technology forward. 
That's a function? See, if it had a name that sounded vaguely like an adjective, I might get the idea it was a function. $_ is actually better. It can actually be read as "the string line". I have no idea what "$" is or why anyone would think it was a good name for a function. Basing an entire framework on it is just obfuscation.
The bottom line is that the only good thing about HTML5 currently is that it's not Flash. HTML5 is not future proof unless a javascript framework for working with it gets really good.
Sorry, I just copy-paste the original title.
... says a guy who uses a blue on blue color scheme for text.
&gt;buggy canvas implementations Well, it's one API, but there are different pieces: 1. The very basic stuff - blitting images &amp; transformations. This requires relatively little code and it's also very straightforward. Correctness can be also easily verified. It's also easy to use hardware acceleration for this. 2. The little extras - gradients &amp; patterns. These work, but they may perform somewhat poorly. 3. Messy stuff part 1 - Vectors &amp; styles. 4. Messy stuff part 2 - Text &amp; styles. That first thing works pretty well and it's all you need for games. That second thing is also ok, if you use it for some offline rendering. &gt;some support only mp3 encoding in audio tags, others only ogg There is ogg/vorbis, webm/vorbis, mp4/aac, and mp3. Mp3 is the worst of the bunch and it's also not suitable for looping. Fortunately you only need Vorbis and (HE-)AAC. With Flash you're a bit out of luck; there is only Mp3. --- The best option is cross-compiling to Flash. That's what I'll do. Got most of it working already.
Flash can natively play more than just mp3 audio files, further you can build in support for any format you want. Having said that, the Flash audio API leaves a lot to be desired.
Yes, *Flash* supports more than that. However, `Sound` doesn't. I also tried Ogg/Vorbis decoders. They are super slow (even the Alchemy one) and looping still doesn't work.
"I'M GOING TO GET ON A SOAPBOX AND PROCLAIM A CERTAIN TECHNOLOGY ISN'T QUITE RIGHT FOR MY PURPOSES AT THIS TIME."
Great, now my new jQuery books are already obsolete.
How is that at all a relevant criticism?
anyone know what this release should bring us?
http://www.reddit.com/r/javascript/comments/f3t0h/jquery_15_promises_a_better_future/
The problem I have is that the whole point of a future technology is that people work together to make it as good/better than what's currently available. Drawing is slow on canvas, therefore find a way to make it faster. My game engine, Crafty, uses redraw regions which work well but can be inconsistent so I am now working on another method using multiple canvas elements. The point is these problems can be fixed; it just takes developers putting in the effort to try and make it work.
Which color scheme do you suggest I use?
There is a little trick in Javascript for how to recognize a function: foo = 10; //not a function (anymore) foo[3] = 1; //maybe a function foo(); //a function I don't understand the confusion.
Here you go: http://kuler.adobe.com/ I'm sure you can find some really good color schemes in there. Your current site scheme says you're at least average or above.
I would recommend: [JavaScript the Definitive Guide (5th Edition)](http://oreilly.com/catalog/9780596101992) It is 5 years old, but I think it is probably the single best resource on the core language (as well as differences between browsers).
$ is used by most javascript frameworks such as MooTools: http://mootools.net/docs/core/Element/Element#Window:dollar and Prototype:http://api.prototypejs.org/dom/dollar/
or you can check typeof foo == "function".
&gt;The bottom line is that the only good thing about HTML5 currently is that it's not Flash. That's a bad way to sum it up. The best part about HTML 5 is that it's an open spec. &gt;HTML5 is not future proof unless a javascript framework for working with it gets really good. No. My favorite part open specs is that the specs and implementations only get better in time. HTML 5 has by far more potential than Flash. Your judgments are premature anyways. The spec itself is not finalized. And every browser that "supports it" claims beta level support at best. 
OP uses bleeding edge unfinished specifications then complains that no browser has beyond beta support for it. Even more audacious than complaining about bugs, OP goes on to complain that it hasn't been thoroughly speed optimized yet. It should be obvious to anyone utilizing HTML 5 at this stage that they will encounter all of those issues.
&gt; Your current site scheme says you're at least average or above. Thanks! I honestly didn't think the current scheme was an issue, since the text is quite clear on all monitors I've viewed it on. I'll try to change it to something more high-contrast.
That is all good and commendable, but making a game &amp; turning a profit on it is in and by itself a challenge - if I can reduce my workload (and thus my chances of success) by using a different tech I will take the chance in a heartbeat. Once html5 matures (and I am sure it will, and not because of either of us using it or not using it) I will be more than happy to come back to it.
**the solution is to wrap the inside of the `for...in` in a closure** for (var i in links) { (function (i) { $('#'+links[i]+'_link').click(function(){ $('.divs').hide(); $('#'+links[i]+'_div').show(); }); }(i)); }
That is a good point in terms of getting something done to a high standard within the shortest amount of time for profit. I think HTML5s maturity very much relies on sheer numbers. If everyone sticks to flash, there would be no demand for HTML5 to catch up. Embracing the new technology even though it isn't ready gives incentive to do just that, become a viable alternative.
I agree about the monetization of JS games, it irritates me that there are not many ways to monetize js games. BUT there are some places out there such as googles app store, iphone, etc. Hopefully the guys who run FGL will look at doing jsLicense.com
:P I was thinking the exact same thing when I read it. Although I agree on the points of monetization.
&gt; Before the days of jQuery and HTML5, many tasks required raw JavaScript to implement. Urgh. [I've been looking into](http://jonathan.buchanan153.users.btopenworld.com/DOMBuilder/dev/tests/attribute_tests.html) using `defaultValue`/`value` and their checkbox and select equivalents when creating new DOM elements this morning (with raw JavaScript, OMG!) - there's a bit of weirdness there depending on how you set the attributes (property access or `setAttribute`) and the order in which you set them... and not all browsers agree on all cases, not even the good ones! 
Why does no one seem to use dojo? It's a full fledged well developed, well supported toolkit that has some pretty impressive capabilities, but I never see it mentioned in these discussions. 
The latest revisions of this have been very annoying for working with other people's code. They've mostly been ironed out, but there are still semicolon issues in key places and a "for (var" is still a showstopping error when it should be a warning.
I dunno, I heard jQuery broke twitter. I'm gonna stick with Microsoft from here on out[.](http://4.bp.blogspot.com/_4uBoI7AJdhY/Sg4GrAU79tI/AAAAAAAABv4/ACDbLpzFgQw/s400/trollface1.jpg)
It's not just the contrast, although it *is* an issue here. That you can read it doesn't mean it doesn't make eyes weary after a while, and it doesn't mean somebody with one of the common vision deficiencies (like red-green blindness) can read it as easily. The thing with blue is that the brain is used to see it as far away (due to the blue sky), which is why you should never use it for something in the foreground. To experience this as an extreme, write a word or a short text once red on blue and once blue on red and compare. The effect is that the blue on red one will seem as if the letters had been cut out of a red foreground and that a blue background is visible through them.
Strange. I meant verb, typed adjective, and no one called me on it. Reddit sometimes disappoints.
&gt; The best part about HTML 5 is that it's an open spec. At this point, it depends on your perspective. If you want to ship a product like the above in the near future, then this means preciously little. You care about how many people can run it and get consistent results and how long it takes to develop with existing tools and libraries. In other words, HTML5 has a great personality and is fun to hang out with. I like her as a friend. 
For sure. I guess I just assumed that was obvious and any dev would know it long before designing a game in HTML 5.
I wrote down almost all what I know on the topic in these two articles. It should be interesting to those making a Javascript game or game engine.
It's always difficult to tell around here. Many seem to have pretty dogmatic opinions about the Flash/HTML5 issue, but I wonder how many of them actually are professionals who have to advise clients about which technology to choose.
Mentally apply s/\$/jQuery every time you see `$` and your problem is solved - it's just an alias.
[It wasn't jquery fault](http://ejohn.org/blog/learning-from-twitter/) at least not entirely.
Thank you! Will take your advice to heart.
I really like Backbone.js. It's small, simple, and does just what it aims to do and no more.
This article gets my upvote purely for the MCP HTML logo.
We there's no surprise.
Beautifully useless.
Great demo. I'm working on a multiplayer version of [tankworld](http://playtankworld.com). The development is extremely easy, I'm using inversion of control to simulate server connections between browser windows (The window.opener context contains the server code). Once the game logic is finished I change the dependencies to handle the node http requests...
&gt;It can be used in command-line utilities which requires web stack, or even as the basis for testing rich web application. It uses WebKit in a headless mode, so you get access to the real native and fast implementation (not a simulated environment) of various standards such as DOM, CSS selector, Canvas, SVG, and many others. And it even runs on Windows! This is so f-ing awesome! :D **Edit:** It's also a single executable. Boy, this is handy. **Edit2:** Of course it also runs on Linux and Mac OS X.
I tried ExtJS (but, I couldn't get it to accept my JSON responses, I was very fustrated). I looked into YUI 3, but no grid widget nor a good Getting Started page or document. I was told to "just use the YUI 2 grid and wrap it in YUI 3." Huh? That's too advance for me. Then I stumbled on [gqGrid](http://www.trirand.com/blog/). WOW! It just works, and works the way it's documented. Documentation is great! I'm a jqQuery beginner and I was able to follow examples and get jqGrid working fast. I took me a while to get it working the way I wanted to, but I'm happy.
One thing: isStartsWith: function(str, starts){ return str.length &gt;= starts.length &amp;&amp; str.substring(0, starts.length) === starts; }, isEndsWith: function(str, ends){ return str.length &gt;= ends.length &amp;&amp; str.substring(str.length - ends.length) === ends; }, Better if you take off the is.
OKAY
agreed, it is awesome :)
JavaScript in the command line... I thought I'd never see the day.
This is cool! However, the fact that the entire script gets cleared and re-executed after a call to "open" seems kind of funky. Wouldn't a callback be a little more straightforward a-la traditional Ajax?
I don't know much about charting libraries, but have you looked at [r](http://www.r-project.org/)?
This has been possible for quite a while via Node, Narwal, Rhino, d8, and even stuff like Windows Scripting Host. The difference here is that this one is a lot more convenient (for Windows users in particular) and that it's very powerful out-of-the-box.
Yea, that's sorta odd indeed. I also wish they'd mirrored d8's behavior a bit. In d8 the command line parameters are stored in a global arguments array (length is 0 if there aren't any). d8 also got load (imports a script) and read (reads a file) functions. **Edit:** Issue added: http://code.google.com/p/phantomjs/issues/detail?id=18
More specifically a Javascript library or toolkit or something that can feed images like that one to a webbrowser. 
I'll take a look, but I don't know if it'll work. 
Node.js needs to be on Windows already.
&gt;The difference here is that this one is a lot more convenient Bingo. There are many things that have been done over and over again, but convenience takes the cake. &gt;Windows Scripting Host ew
&gt;ew Some people actually used it. Seriously. :D
You're missing a closing `code` tag or something in the second article. (Monospaced font bleeds to the end of the page.)
I really appreciate the response but im still quite lost. Can you give me an example of what that would look like?
Google Charts will do it, with a little extra work on your part. You'll have to manually calculate the range for each axis, and then instead of feeding each line actual values just plot the percentage of the range each datapoint falls at. Then, add as many y axises as you need, with your calculated ranges. http://code.google.com/apis/chart/docs/gallery/line_charts.html#gcharts_axis_styles_labels
hmm.. that's cool. They didn't have that the last time I looked at google charts API. Thanks. I'll give that a whirl. 