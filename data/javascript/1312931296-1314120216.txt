Komodo Edit (+kjslint).
Google Chrome Developer Tools Console.
Espresso 2 Kaboom! I use it for everything except terminal. Had to make a custom theme though, needed groovy translucent windows on Lion, very important.
Is vim your go-to editor for everything? Would you say vim would be good for PHP/Python/C++/etc as well? I develop on a windows platform with Dreamweaver's code section and the only reason I use it aside from simply being available to me, is the relatively tight feel it has with SFTP push/pull integration, however. I'm wanting to switch to a version control system like Git for uploading files and keeping version history, as well as upgrading my workflow to include more professional developer tools. I'm playing with PHPStorm right now, but in all honesty I don't think I really need or want a full-featured IDE. All I want is syntax highlighting, line numbers, and possibly the ability to integrate with a version control system (I can hit CTRL+SHIFT+U and it will upload to the server in Dreamweaver). I'm sure there's several features I'm sure to use that I've left out, but I just want something lightweight with the basics down really well.
How does it stack up to textmate?
What was the issue/solution?
well he is a bit creepy and has been subtly asking for all sorts of personal information - he also took a photo of me while on skype video hook-up. I'm going to pay him anyway so that there aren't any weird repercussions 
Yes fixed now thanks
http://en.wikipedia.org/wiki/TextMate#Limitations * Chinese, Japanese, Korean, etc work * RTL - no idea * SFTP is supported (+ FTP, FTPS, SCP) * macros/extensions can be written in JavaScript and Python * there are basic checks for HTML4/5 (also syntax checking for CSS, PHP, JavaScript, and so forth) * last 3: no idea Well, just [try it](http://www.activestate.com/komodo-edit/downloads). I use it 20+ hours each week (for 1.5 years or so). I really like it.
Can't do squiggly underlines though, which are nice, but certainly not required.
I just downloaded Komodo on my mac and uninstalled it after it took an eon to load some intellisense definition files. UI is too cluttered for me too.
&gt;it took an eon to load some intellisense definition files That's a one-time operation. &gt;UI is too cluttered for me too The visibility of top/left/bottom panels can be toggled. **edit:** http://i.imgur.com/kuHZw.png
Sublime doesn't get nearly as much love as it should IMO
When you want to chain ajax calls it can be pretty useful in combination with curried functions.
Yes, they provide encapsulation, but not really a 'type'.
Aptana 
There is a Vim-like plug-in for VS2010.
Webstorm
Yea I've tried it, still not the same, part of it being that VS.Net feel so bloated and chunky compared to a terminal
Love me some webstorm. I've had to use ExtJS for a recent project using their MVC approach. Gave me great completion for the entire app throughout 89+ js source files. Wonderful.
Hey, thanks for the encouragement! My little brother is 19 and I'm 23. I've been programming in all sorts of languages but just recently took a gander at Javascript and this is his first language. It was fun working on it with him and hearing his gears churn and process the logic. Immediately after Hangman I [devised this little toy](http://www.josephbleau.com/numbers). I've since picked up a book and plan on paging through the entire thing. I'm still not sure if this is the right area of programming for me, because I mostly loathe web-development, but maybe it will grow on me.
Yeah, I respect VS.Net, but I don't like running it either on my 1.66GHz + 1.99GB RAM computer.
Visual Studio at work, and it is awful for JS. Notepad++ at home, it is good. I have used Eclipse/Aptana in the past, it is pretty good. I tried Cloud 9 a while back, although I appreciate their efforts, it was worse than VS. I have heard nice things about Netbeans. Keep meaning to try it. 
I have nothing but love for Sublime 2; it's an absolutely outstanding editor and has become my default on Windows, OSX *and* Linux.
TextPad only, here.
http://i55.tinypic.com/2lownn.jpg
the main issue was that without any knowledge of javascript I was trying to write a script by googling bits of code and then hacking the code 600 times to try and make it work. I was using document.write which was then messing up everything on my site. The solution was to get someone who had a clue to do it. A little knowledge can be dangerous.
Extensions and use IE for debugging (yeah it sucks but it allows you to work through your code easier).
I am curious about why you only asked for ten bucks. Did you know the solution already? Bored? Feeling charitable?
well, there was some stuff the author did i couldnt agree with. when he created the mac version, only paying **windows** users were able to download the mac beta. i wrote him on twitter that i want the beta without paying for a win version i have no use for and i look forward to pay for the full version once done and of course if i actually like it. nothing happened for 10 month. suddenly he released the mac version for free. that whole process made absolutely no sense to me. BUT it turned out better than expected. if you have not tried sublime 2 - its awesome.
You learned vim in a week? Why are you wasting your time with JavaScript, please write code that will save the world.
I really like Sublime 2 a lot. I started using it when looking for a Textmate alternative for Linux. It has now replaced Textmate as my editor of choice on my Mac, as well.
There's nothing hipster about vim. It's a fucking amazing editor. One of the greatest programs ever written. Seriously.
It looked like a simple problem. Also here in Latvia 10$ = 10 beers.
I also use Webstorm. (PHPStorm actually, but same thing.)
Without. But I'm doing enterprise development so I have to do quite a bit of java coding and other server side stuff as well. In the past when I was strictly a front end developer things were easier and I'd stick with mostly just text pad when possible to avoid Eclipse. 
Ahh, answer accepted, my friend :)
Have you tried the compile of gvim that comes from the cream project? You can download a very recent, full-featured compile of vanilla win32 gvim from the cream project site on sourceforge.
Have a look at [this](http://sontek.net/turning-vim-into-a-modern-python-ide) post for turning vim into a python ide. Also take a look at [this](http://vim.runpaint.org/display/working-with-remote-files/) for working with remote files in vim. Finally, take a look at [this](http://vim.runpaint.org/extending/integrating-vim-with-git/) for integrating git with vim. vim is really powerful, it just takes a lot of time to get to know it; well worth it though.
VIM
I, like many others it seems, love Sublime text 2
I tend to use Notepad++ on Windows and gedit on Linux. I'm trying to get into vim but I have a hard time getting away from my mouse for text editing and I'm a huge keyboard user for everything else. I use js A LOT so I tend not to need as much help from my editor and I tend to opt for quick loading, but I have to say, aside from Visual Studio loading too slowly for a quick edit, I think it offers FAR more help than anything else out there. IntelliSense is automatic for anything defined in the file (as far as is possible with a language like js). You can give it a ref to another .js file by dragging it from solution explorer to the top of the editor (or type in the ref if you can remember the syntax to do so) and you get IntelliSense for things defined in that file (Ctrl+Shift+J to refresh js IntelliSense if it needs a little help figuring out there's a new ref). You can even do something crazy like: var o = { addProp: function(name, val) { this[name] = val; } }; o.addProp('b', 2); and get IntelliSense for 'b' when you enter 'o.' I haven't seen any other IDE do those things as well, if at all. Also, there is an extension to enable code folding and another for a tree view of the code but both names escape me at the moment and I'm on my Linux box, but they're popular enough that they'll show up with a quick search in the extension manager. If you try VS, DO NOT use IE to get the integrated debugging features, just use FireFox and Firebug. EDIT: In case it wasn't assumed or obvious, VS 2010 is what I'm referring to, anything earlier just got in your way.
You can write your for loop as follows : for(var i = 45, len = json.length; i &lt; len; i++) { document.write(json[i].stop_name + " lat: " + json[i].stop_lat); document.write("long: " + json[i].stop_lon); } May I know why do you start i from 45? You can also use forEach. This would work on IE9, Mozilla and Chrome. json.forEach(function(element){ document.write(element.stop_name + " lat: " + element.stop_lat); document.write(" long: " + element.stop_lon); }); 
Out of curiosity, is it VS 2010 you're using?
VirtualBox + your favorite distro + seamless mode
yes.
Don't think it matters much at this point, but no one's mentioned it. I use kdevelop for everything pretty much though, c/c++/python/php, and as you asked js, as well as html/css of course. I haven't used any ide for too long, but so far kdevelop is everything I need while not having too much I don't need either. It is linux only though afaik : /. On windows I guess I'd use visual studio or maybe just notepad++. I dunno, don't normally develop on windows. Vim is also my go to editor for smaller tasks.
PyCharm comes with the Javascript support as well, which is great, as my python web projects involve at least as much JS as Python recently. (PyCharm, WebStorm, PHPStorm, and RubyMine are different packagings of the IntelliJ IDEA editor.)
Emacs
If you like vim, you'll love Emacs. Viper-mode ftw.
I don't use it much for js anymore but I did for quite a while. I certainly found it better than Eclipse/Aptana. Any particular annoyances? I know for a while one of the js extensions would literally kick you in the nuts and then capitalize the 'f' when you typed 'function', but that was fixed a while back. Aside from that quirk, I found the IntelliSense support quite remarkable, and being able to add references to other js files to get IntelliSense for those was a huge time saver while I was learning jQuery and other externals. @rcinsf Please don't tease the new guys by suggesting they use IE :) To debug, FireFox w/Firebug. You can set break points and step through code. Chromes tools are ok too but a little lacking in comparison.
Yep and it can pick up the jQuery functions most of the time to use for code completion (if you're using the development version of jQuery).
Notepad++ has gotten awesome in the latest update. The code branch fold bar (I don't know the name for this) now turns red to indicate the current scope from where your cursor is.
Not exactly the best place to actually write your js. 
Emacs is closer to an operating system than an editor. (why not just use Vim if you're already using Vim bindings?)
Emacs isn't an operating system any more than vim is. I, for one, like being able to seamlessly edit files inside of zip files without decompressing and rezipping them, or on remote servers without any hassle. The zip-file thing came up today at work and saved me and my coworker a lot of round-trip time in testing some specs. Why not use a real editor and get the benefit of the alternative all in one package?
komodo is far ahead.
ttt
I won't get sucked into a Vim/Emacs battle. Because Vim is better than Emacs, and you're still technically unarchiving that file.
The point is that I don't have to do it myself and that it doesn't leave any junk on my filesystem.
I like Emacs best because of js2-mode. JetBrains' thing looks really good though, I would check that out first. I forget the name. [edit: it's [WebStorm](http://www.jetbrains.com/webstorm/)] Light JS I write in TextMate or BBEdit too. Hell more often than not I'm typing it into textarea's on the web somewhere, or twitter.
You can learn the basics in 5 minutes. - hjkl - 0$ - i - [ESC] - :e - :w - :q Some folks could squeeze number prefixes in and still be under 5 mins.
I know you didn't ask me, but... I've never tried javascript-mode. js2-mode parses JS properly and on the fly which is why I like it. Immediate error highlighting is really, really nice. It could be leveraged for a lot more too, refactoring and completion and all that.
I keep hearing Eclipse is bloated, but no one explains in what way. You can download different versions of Eclipse. I am sure if I was downloading the J2EE version to do Java applications, then yea it would be bloated.
* Windows = Ultraedit * OSX = XCode * iPad = Textmate 
http://i.imgur.com/BEtDY.png Hmm...
js2 for me
I use a programmer's editor which doesn't know anything about JavaScript other than how to color code it. (Which one doesn't matter, and starts holy wars, but if you're curious, I use ConTEXT - http://www.contexteditor.org/.)
Sure I won't be writing complete scripts there, but I'll use it to spike out some code.
I've been in iOS land for the past year fixing memory leaks there, just got put on a web project with a heavy JS front-end. This will be handy. Thanks.
Vim is my go to editor for everything except formatted documents like project proposals. It has excellent support and plugins for most programming languages.
I have now started using [Cloud9IDE](http://c9.io). Live javascript/css/coffee-script syntax checking and a full git and node.js environment!
The main problems I have with it are: 1. IntelliSense is dumb, it is almost never helpful, I really don't need it, so I would prefer it would just go away. The only time it does anything worthwhile is suggesting function names within the file I am currently in, which is rarely helpful. 2. The big one for me - Its indenting is fucking retarded, and makes me want to stab a baby pony in the face. Seriously, I make everybody in the office set their tabbing the same, but they do not work the same. Also, their "smart" indenting is god awful, it makes me wonder if they have any idea what a fucking block is. I have it turned completely off, and it mostly leaves me alone, but every once in a while it sticks its retarded face into my code.
I wasn't an expert by any means but I learned it enough to do my job efficiently. Also it helps to immerse yourself into it, don't straddle two editors, you gotta commit, google vim trick and tips, examine other people's vimrcs, etc.
That's probably the route I'm going to go, I just need some extra ram in it and I could probably dedicate a core or two.
I'll give it a shot, I seem to recall trying it and it conflicted with my keybindings.
This would be a lot more impressive as a list of ways to access window.location along side the exhaustive list.
Hey guys, look! I've found 535 more! 1. eval("location = location") 2. eval("location = location.href") ... 534. eval("self.location['reload']()") 535. eval("self['location']['reload']()") This is very silly.
Silly... but valid. Also: let's not go to the String.fromCharCode() way of doing it :D
It is valid, but that doesn't make it interesting. There are actually only a handful of ways to reload the page and everything else is just a variation of one of them. 1. Assign the current URL to the `window.location` object. 2. Assign the current URL to the `href` property of the `window.location` object. 3. Call the `assign` method of the `window.location` object with the current URL. 4. Call the `replace` method of the `window.location` object with the current URL. 5. Call the `reload` method of the `window.location` object. Perhaps there are a few other ways, but that's not really my point. There are an infinite number of variations, not 535.
and another 535 more! 1. new Function("location = location")(); 2. new Function("location = location.href")(); ... 534. new Function("self.location['reload']()")(); 535. new Function("self['location']['reload']()")();
Oh yeah, the auto formatting/tabbing, I turned that off too :) Lucky for me, when I was using VS, I was the only one touching the code so no one else messed it up. I still think IntelliSense is useful for learning new libs or remembering rarely used props/functions, all you have to do is add the reference to the unminified version of the lib at the top of your js file, the syntax for it is a js comment so it gets stripped out during minification.
You like it? I tried it once but got a little confused. Think it's worth another shot?
Yes and no. Along the lines of buckbova said; They're a timesaver and a clever bandaid of a larger problem.
Let's not forget: self.self.self.self.self.location = location; self.self.self.self.self.location = self.location; ....
yeah, indentation is maybe something to get used to but the error + undeclared vars highlighting is something I like. Downside is that it's not maintained by yegge anymore but there's a fork at https://github.com/mooz/js2-mode and on some files it freezes emacs (rare for me &amp; haven't figured out why yet)
I have been using requirejs for a non-trivial single page app, and it has been magnificent. It works really well when using a properly configured Dojo, since dojo can use the requirejs loader (via AMD module compat) By itself it's definitely slower, but before you deploy, you run an optimizer, and it concats and minifies into a single file. You get all of the code organization of multiple files, with a simple build that makes it fast. I can't speak for headjs, or labjs, but requirejs has been amazing.
Would be nice if it used wiki markup instead of editing html directly...looks good though!
They missed history.go(0)...
Another comment from jashkenas: &gt; In the one hand, we have a reliable, browser-supported, time-tested approach, that performs demonstrably better on real-world pages; and in the other hand, we have a hacked-together "technology" that in the past has actually broken every site that used it after a browser update, that performs demonstrably worse on average, and with a far greater variance of slowness. &gt; It's a no-brainer choice.
Crashing emacs? lolwat?
it doesn't exactly crash but stops responding and i have to kill it
They can be useful if you need to conditionally load scripts (though I can't think of many reasons why you would need to do this).
Ah, yes, forgot about squigglies. Mostly because I don't really use them myself. However, you are right, of course. Come to think of it, italic fonts don't work either, and I *do* use those, even if only for the word *do*.
Oh, I don't mean cream, I mean the vim binary that comes with it, which does not include their souped-up vim scripts. Here is a link: http://sourceforge.net/projects/cream/files/Vim/
 var x = 0; for( var i=0; i &lt; 10000; i++ ) { x = i / 2; location = location; } You can do any arbitrary bullshit while loading the page. It is not another way to load the page.
Ah cool I'll check it out
this comment from jashkenas is false and misleading. He's referring to some updates that some *nightly* versions of browsers did, which affected LABjs. The vast majority of sites using LABjs were not even testing their sites in the browser nightlies, so they never even saw the problem. No major browser release has come out which has broken LABjs. LABjs was, and is, reliable in all browsers. The more important take away is that the reason the nightly updates broke LABjs is because LABjs *used to* use hacks for loading. LABjs 2.0 de-emphasized those hacks, now using standardized and reliable approaches to parallel loading. The other script loaders have largely been slow to follow suit. But it proves that using hacks is a bad idea. That's why LABjs doesn't use them anymore if it can help it.
he also has failed to actually prove the phrase "performs demonstrably worse". I've more than proven the examples where LABjs is far faster than script tags. The burden of proof is on him to show that the thousands of pages currently using LABjs are all going slower because of it. I suspect this is a specious out-of-thin-air claim that he'll never be able to prove.
&gt; I can't think of many reasons why you would need to do this Loading touch-optimised behaviour for tablet and other touchscreen devices. *Not* loading mouse-oriented or heavyweight javascript widgets on mobile devices where they won't work well, or they'll consume limited (and unnecessary) quantities of CPU/memory/battery power. I've run into exactly this problem before, to the extent I've actually had to write my own javascript library to conditionally load scripts and images on (and optionally even hide whole chunks of markup from being parsed by) mobile devices. That way you can deliver the same HTML to all devices (an ideal of semantic HTML, and good for caching, and a few bytes of HTML here and there are hardly going to kill anyone's mobile data connection), but only load the (typically much larger) appropriate external CSS files (via media queries), Java scripts (via conditional-load scripts and a media-queries-for-Javascript library I'm still working on) and images (linked in CSS/JS files) for each type of client (desktop, tablet, smartphone, etc).
You don't need a plugin for this. You can do something like this: jQuery("#latestpost li").hover(function() { // mouseover jQuery(this).find('h2').animate({ top: '90px'}); }, function() { // reset to original position jQuery(this).find('h2').animate({ top: '115px'}); }); All this requires is jQuery.
 var meta = document.createElement('meta'); meta.setAttribute('http-equiv', 'refresh'); meta.setAttribute('content', '0,url=' + window.location); document.head.appendChild(meta);
I was just looking this up. I went with the self.location=self.location.href method because IT DOESN'T MAKE ANY SENSE.
You can accomplish the same functionality with by determining the UA via the HTTP header. 
well, that was unnecessary.
Yeah, but only if you're comfortable browser sniffing (which is very, very naughty and makes the baby Jesus cry) on the server, instead of *functionality* sniffing on the client (as far as possible). You can't sniff for touchscreens or mice (at least, not yet), but you can check for most other browser-functionality, resolution, aspect-ratio, viewport size and a whole host of other factors which are simply impossible (or, as stated, a Really Bad Idea) to check for on the server. People learned browser-sniffing was a bad idea *years* ago on the desktop - why are so many people apparently rushing headlong to make the same mistake on mobile devices now?
That was significantly easier than what I was trying to accomplish, I am in your gratitude! I tend to always make things more complicated than they need be. Do you have a website or anything that I could link to?
Ah yes - fair point. It's not good, or maintainable, or future-proof, but it is *possible*. ;-)
There are a ton of good reasons to use a JS loader, several of which are mentioned already in this thread. The one that is most crucial in my mind is that you can use a loader to essentially optimize for the DOM parsed event in a cross browser way. This is SUPER important for AJAXy apps. People in that thread can say "defer is better" all they want ... the fact of the matter is it's not implemented consistently across browsers and versions, thus you simply have to have a practical real-world approach to things --- Js loaders are just that.
[This is why.](http://i.imgur.com/b4Vwf.png) And that's a daily occurrence, I took the screenshot just now. Same results with vanilla Eclipse + PDT. It's a POS but unfortunately I'm forced to use it.
You don't need JavaScript for this. You can make the text overlay appear when the mouse hovers, and add a sexy transition for modern browsers. Old browsers will still work, just without the animation. Here's a live demo: http://jsfiddle.net/g105b/Ad9JM/
That's pretty cool, I assume that would also end up running smoother as well? Might have to switch over to that at some point.
Make use of all of them with [my new stupid javascript file](https://gist.github.com/1138419)! (I'll try to add some of the suggestions in the comments when possible)
Probably much like his claims that coffeescript is faster than javascript.
What's the canonical method?
For development of javascript projects, I use a loader. Large projects are broken up into many files. The loader serves as a single include and maps out my dependencies. It also keeps my single files as single files, which is killer for debugging. For javascript projects in production, I build my js into a single concatenated and minified file.
Thanks. One of our other projects is a Wiki-markup editor: http://wiki.pageforest.com We thought about using that here as well, but the standard "markdown" library we use is not compatible with some the the custom HTML5 elements (like &lt;article&gt;).
The only thing jashkenas proved in this thread is that he is incapable of conducting a civil online discussion about technology, and admitting when he is over-simplifying. 
&gt; The burden of proof is on him to show that the thousands of pages currently using LABjs are all going slower because of it I disagree with this. The burden of proof is on the providers of script loaders to demonstrate that it is infallible. Something that they've failed to do. It's not about performance. It's about reliability.
NOTE: New version has 1605 ways + recursive ways. Thanks, reddit! :) EDIT: What's with the commentless downvotes?
I want you to know, you made my life very difficult with this comment. However, [it is implemented](https://gist.github.com/1138419).
The issue is that you're using parseFloat and parseInt at several points and using the result to do computations, without making sure the argument of those functions is indeed a valid integer or floating point number. Add some validation code to your script and only add the totals when the fields are numbers.
http://jsfiddle.net/hDCCt/3/
I use this approach as well - on top of what you mention, I get to set breakpoints and debug in unminified JS, and I can reuse libraries on both server and client side. Love it.
Oh, that was really nice of you, thanks. May I ask you why this doesn't work though? http://jsfiddle.net/hDCCt/5/ If you see the .showtotal td has a hidden input, but when I try to add the value there too the input disappears. Any clues whY?
This jsfiddle.net looks cute, but I couldn't find how to use Firebug with it. Its debugger makes it a lot easier to spot simple problems like the ones you're facing.
I have no clue why the input disappears, I placed a breakpoint in `jQuery('#someid').val(total);`, if I continue I can see the "total" variable and that it contains a value, but if I continue again it stops and the &lt;input&gt; disappears. Really strange
I think it's because in this line you're replacing the TD's content: jQuery('.showtotal').text("$" + total); 
so if I wanted to store the total in a variable for later use with $_POST I the input should be outside the &lt;td&gt;?
nope, that didn't quite work. But at least I know why the input was disappearing
Just don't replace the whole thing. Do something like &lt;td&gt;&lt;div class="showtotal"&gt;total&lt;/div&gt;&lt;input id="someid" name="budget[total-total]" type="hidden"&gt;&lt;/td&gt; 
I'm so stupid you're gonna feel like coming all the way to Argentina and punch me in the face when you read this. I had jQUery instead of jQuery in the selector and that's why it wasn't working. Thanks for the help Fernando
no problem friend, and I loved visiting Buenos Aires :) and don't forget to use Firebug under Firefox, it helps a lot
Interesting. I don't know if you're a dev for DDG or not, but it looks like (at least in Mozilla) the comic is overflowing its container. Also, if you are a DDG dev is there (planned) support for other web-comics?
Some clever work there. As for downvotes: bots
I care much more about how the programming model looks than what is going on behind the scenes. It's so nice to do synchronous-looking node.js-style require()s and qualified exports that I would gladly take a performance hit to keep the code nice and tidy, whether or not a performance hit is even necessary.
I'd guess the down votes are because this is pretty pointless. It's a thought experiment, at best.
It's just a joke :) but still, no need for downvotes. The original article was a joke, too, it was upvoted quite a bit.
Hint: Fill in ALL of the input fields, and it will work, and then you'll understand why.
This just seems like an overly complex solution to a proper css :nth-child rule.
That isn't eclipse bloat. That is just the VM size. You can change that in the launcher settings. It is probably configured that way because the PHP stuff needs extra memory (eg. Opening large files, or data manipulation). Personally I've set mine to take up 2GB. Somewhat overkill but may machines can handle it. 
Reddit be a fickle mistress.
The author of that page is a bit daft, since many of them are syntactic equivalents, and some of his examples should behave differently. But, here goes: location.reload() is The Correct™ way of _reloading_ the current document. Whether you opt to write out `window.location.reload()` or not is a matter of taste/style guide. All other means of reloading the document are not strictly equal, or equal at all. See [HTML5: The Location interface](http://dev.w3.org/html5/spec/Overview.html#location) for reference. 
You can also use a server-side tool like Fanstatic. Many of the benefits of a client-side loader, and (apparently from this discussion) less overhead. http://www.fanstatic.org This is for Python. I know there's a Ruby equivalent of this, but it slips my mind now. 
It's not bots downvoting, it the anti spam system.
Thanks to this, I learned about jazz and express. Also, they're Australian and we're normally a little slow to use things like node.
[snuggles]
but how do you trigger a postback, and not a full reload?
[What no meta refresh?](http://www.reddit.com/r/javascript/comments/jekwr/535_ways_to_reload_the_page_with_javascript/c2bjbxj)
infallible? I agree that they have the burden of proof to demonstrate its benefits, but your standard is too high. 
We already have an infallible way of loading scripts: &lt;script src="app.js"&gt;&lt;/script&gt;
Is this guy off his rocker or what? Our website is being flagged as a trojan Kryptic.P and according to ESET, it's because we are minifying our javascript. In their response they pointed us to this article (http://blog.eset.com/2011/05/17/obfuscated-javascript-oh-what-a-tangled-web), but at best it is committee-driven buzzword bingo, at worst it's speculative misinformation. "However, using a JS packer and server side compression together may be worse from this point of view than using the original script with the server side compression only. As with compression in other contexts, compressing the same object twice or more does not make sense, and may actually result in increasing its size and time taken to load." That's a lotta maybe. How about some actual statistics? So what's the story r/javascript? They are driving me a little nutty in part because they are hypocrites, serving minified javascript all over their blog and homepage.
No, you're wrong, it's just plain bloated, but I couldn't be bothered to prove you anymore wrong. Troll elsewhere.
You're confusing minification with obfuscation, or packing. The latter involves completely refactoring the code to make it difficult (although not impossible) to reverse engineer. Such code needs parsing and evaluating by the browser before it can be executed, which adds to page load time. In this respect, he's spot on. Minification on the other hand involves removing unnecessary whitespace, and commonly gzipping the end result as well, so that only the bare minimum required for the script to execute is included in the file. Sometimes the code may be rewritten to shorten variable names etc, but functionally it stays the same. It may also involve combining scripts together into a single file to avoid unnecessary HTTP overhead. There is no harm in minification (and in fact it's highly advised).
I didn't see where he mentioned minifying being harmful. You can minify and compress without obfuscating. And he is correct in saying that compressing an object more then once can actually increase the size, but it really depends on the content.
The biggest wtf is: &gt; presumably in order to compress it so that it takes less disk-space ("packing") or using a "protector" in order to make it harder for a competitor to "steal" script code. People minify their code to save *whole kilobytes* of diskspace? I think not. And why is "steal" is scare quotes? Is Javascript supposed to never be a competitive advantage such that nobody should ever worry about it being stolen? I think it's more like what google says about their compiler--"helping your application to load faster and reducing your bandwidth needs."
This doesn't seem so much like a general canvas tutorial as it is explaining his own created wirelib library. While it looks great, I wanted to learn the fundamentals first, so I was left a bit disappointed. **EDIT:** Wow, all these great links, thanks guys! :)
I have used many expensive programs out their. But on top of them I have to rate Aptana Studio the best of all. The only thing thats missing in aptana is the lack of multi-line search when running regular expressions. Another very cool feature in Aptana is that it allows auto-filling so you can get work done faster. (I know that auto-fill, can get annoying on other engines, "such as the iPad" but this is not the case with Aptana. 
Mozilla has some good canvas tutorials
Um, no.
Make a "get_objects.php" that takes the "$_GET['myParams']", builds the array and spits it out using json_encode($myArray);. On the JS side, use $.getJSON('get_objects', {param1: 'hello', param2:'world'}, function(objects) { // do stuff with objects }); Let me know if that works or you need a more detailed explanation.
Thank you! Would I need to echo the json_encoded string in the php file at the end?
probably something like: print_r( json_encode( $array ) ); 
&gt; Such code needs parsing and evaluating by the browser before it can be executed, which adds to page load time. No, minification of scripts decreases the script load time: * fewer HTTP requests required if all scripts are concatenated into one * fewer characters to scan Obfuscation doesn't negatively affect the script load time. All it does is: * Shorten local variable names * Shorten object and function names * A few optimizations in some cases (Google closure compiler, for example) Google, Yahoo, Amazon, and other large companies wouldn't be minifying/compiling/obfuscating their scripts if doing so downgraded performance or caused security concerns.
I apologize, my mistake. I meant "echo". I tried print_r and realized that the json_encode string is not an array.
I thought this tutorial was a great intro: http://diveintohtml5.org/canvas.html#divingin
He uses Canvas to build a UI element, and I keep seeing it done in other tutorials. Can someone explain to me why you wouldn't just use SVG?
I [wrote a tutorial](http://billmill.org/static/canvastutorial/) that might help.
Indeed they do. It only took me about an hour to become familiar with the Canvas API thanks to those guys.
&gt; &gt; Such code needs parsing and evaluating by the browser before it can be executed, which adds to page load time. &gt; No, minification of scripts decreases the script load time: You fail at reading comprehension; let's take his full quote instead of taking a snippet out-of-context and then injecting your own [incorrect] context. Here's his full quote, emphasis mine: &gt; You're confusing minification with obfuscation, **or packing**. The **latter** involves completely refactoring the code to make it difficult (although not impossible) to reverse engineer. Such code needs parsing and evaluating by the browser before it can be executed, which adds to page load time. In this respect, he's spot on. Code that has been [packed](http://dean.edwards.name/packer/) may very well fit your criteria (re: HTTP requests, fewer chars, etc.), but the result of packing (if you enable both options, as is typically done) is a single string that is `eval()`'d by the client. It is this resulting need to `eval()` that actually hurts performance most of the time. There is a wealth of information out there demonstrating that packing is rarely beneficial, although at one time it was seen as the solution to JS loading times.
You missed the key word **presumably** there; in essence, he's admitting that he doesn't fully know the reasons why it's done. And he quotes "steal" because you cannot protect client-side JS, no matter what you do; I think he's making reference to the fact that if the minification is indeed implemented in an attempt to protect your source, then you're pursuing a futile effort.
Packing all javascript together, minifying it while at the same time reducing identifier-length (obfuscating them) is a great way to increase client-side performance. It reduces HTTP requests and bandwidth used. It is even better with content compression enabled. Note that I'm not talking about any sort of packing, requiring any kind of client-side decompression in javascript. Those things are usually not worth it. Here is some size analysis I did back in 2009 for the current OpenSAGA scripts at that time: js bundle 284935 100,0% yuicompressor compressed 126656 44.5% closure compiler compressed 97362 34.2% js bundle gzip only 75163 26.4% yui + gzip 42189 14.8% closure + gzip 35432 12.4% As you see, using both content compression *and* minification/obfuscation saves 44% to 53% of the result of all scripts only compressed with gzip.
I would think its because both of these things are fairly new, and people are still trying to figure out the best methods and work flows.
Um, hi? Have we met?
You haven't explained why it is bloated. So it just your imagination? Also you are not equating Eclipse, but an RCP application built off Eclipse. Oh and here is an article on tuning the memory (first link in google). http://www.eclipsezone.com/eclipse/forums/t61618.html 
I don't have time to download a fresh copy right now, but I know out-of-the-box configuration for Eclipse includes tons of "plugins" that I've never used nor care to use. My setup currently has the following disabled: * Apache Commons Codec Feature * Apache Derby Core Feature * Datatools Feature Patch * Dynamic Languages Toolkit - Core Frameworks * Dynamic Languages Toolkit - Core H2 Index Frameworks * Dynamic Languages Toolkit - Mylyn Integration SDK * Eclipse Provisioning Plug-in Development * Lowagie iText Feature * RSE Feature Patch * Webtools Development Tools Feature Patch * WYSIWYG PHP/HTML Editing Feature (srsly?!?) There are many more that I completely uninstalled, those were just the ones that I couldn't remove but could only disable. Also, this is little in the way of empirical evidence, but there are over 500k results on Google for "Eclipse bloated". More anecdotal evidence: it takes almost a full minute for Eclipse to startup, given 4gb RAM and a Core2-quad core CPU that is _excessive_.
That's a lot of code, could it be shortened to one line? EDIT: Oh, zeal23 is correct, the meta would have to be in the head on page load for it to work. These are 535 ways to refresh the page dynamically.
Like I said, it depends a lot on the version of eclipse you use. Try installing "Eclipse classic" and compare the number of plugins. Also you are confusing plugins with memory. Not all plugins installed actually run until called from within the program. 
The thing is, minifying (in the context of Javascript) isn't the same as compression. It is lossy, and what you're losing is the human readable part (space, identifiers, etc). This is something gzip can't do, and therefore if you minify then gzip you will get smaller files. In general though, compressing more than once is bad.
Read the whole comment before responding.
"Eclipse classic" is the vanilla Eclipse I was referring to. I am pretty sure that for PHP, I could disable/uninstall over half of the Eclipse classic plugins and still retain all of the PHP functionality. I didn't specify memory bloat, although that's what my screenshot demonstrated. Bloat comes in all forms and IMO Eclipse embodies all of them: memory bloat, filesystem bloat, feature bloat, etc.
The screen shot you posted is not Eclipse Classic. I don't believe you know what you are talking about.
Fuck, there are some dim people on reddit today. [Here, let me help you](http://www.reddit.com/r/javascript/comments/jdnbo/what_program_do_you_use_to_write_javascript/c2bjxn9): &gt; **Same results with vanilla Eclipse**
Just tried this and it doesn't seem to work after page load.
ZendStudio != Vanilla Eclipse. http://www.zend.com/products/studio/downloads-prev ZendStudio 7 = 316MB (Gz) vs http://eclipse.org/downloads/ Classic = 173MB (Gz) You can also see other flavours of various sizes, because you know they have different feature sets. The extra memory used is because ZendStudio requires more memory to run. Again you can modify this in the launch settings. 
Yeah, I know, but it's Zend Studio for Eclipse, aka. it's Eclipse with a renamed .exe and some proprietary plugins.
How is the crashing working out?
You're welcome. I'm glad you solved the problem. :) Sorry about my flawed syntax, I was in a hurry :)
I have seen people try to organize their code as global vs page and it never works very well. Try these things: * 1) Declare all variables before they are referenced. * 2) Use only 1 var keyword globally and only 1 var keyword per function. * 3) If possible always put variables at the top of your functions. * 4) Never name your functions. Make all functions anonymous and if 4hey need a reference then assign them to a variable. Do these things and your code will be very easy to read and will always be roughly organized. 
I'd appreciate an example.
I'm dumb and don't quite get what you mean.
what you probably need to do is create an object (or array if you prefer) that has properties 1, 2, etc. so, instead of defining multiple variables: var variable1 = 'foo'; var variable2 = 'bar'; define a single object: var variable = { }; variable[1] = 'foo'; variable[2] = 'bar'; then you can access the properties in your loop like this: for (var i = 1; i &lt; 5; i++) { document.write(variable[i]); }
I want the for loop to iterate like this: variable1, variable2, variable3. But instead of actually writing those words, I want it to use the what I have assigned to variables of the same name. I don't think it's possible but I was hoping someone might have a good workaround for it. I have to iterate through a loop to do other things and I have unique text for each iteration.
dude, thanks! I knew there was a simple way. Much thanks!
Hasn't really crashed lately but it disconnects from the server every so often and the ftp is touchy. *Really* wish it had a terminal though.
Is it possible to generate a string and use eval?
Depends on how it's packed. Consider the Closure Compiler in advanced mode. Its goal to reduce code side and improve performance, and in doing so much of the code is obfuscated. If you encrypt your code or something stupid like that, your performance will definitely suffer.
I think using an array to store the text is the correct way to go about it, but thanks for your looking at my problem!
Have you heard of [JSLint](http://www.jslint.com/lint.html)? 
Here's a very specific example: var badd = function (x, y) { return x + y; }; var goodadd = function (x, y) { return x + y; }; It might seem trivial but Javascript compilers can insert semi-colons in odd places, so the bad example can lead to this: var foo (); { doSomething(); }; This line is damn ugly (and too long stick to 80 chrs): return{init:init,show:show,show2:show2,page:page, additionalglobaljsmodule:additionalglobaljsmodule}; Your names are too long, and should have been camelCased anyway. 
I know the C-family goes bananas over this, but syntax like function() { [code] } [may break in weird ways](http://encosia.com/in-javascript-curly-brace-placement-matters-an-example/). Instead, do this: function() { [code] } to keep it all consistent.
If your going to use the following: (function() { ... })(); You should consider passing window, document, and undefined as arguments: (function(window, document, undefined) { ... })(window, document); jQuery does the same thing (only they don't pass document).
yes, but jslint doesn't tell me where to put files and how they should be laid out as far as i can tell.
ah yes, thank you. forgot about this.
The names are kind of temp as i was playing with it today. I would love to do return { thing:thing, thing2:thing2 }; but that seemingly didn't work before but i'd forgotten about the weird bracket issues with javascript. maybe i should try putting the { on the same line as return.
No, but you need to use that because there are bad habits in your JS code, and likely many more besides in the future (and that goes for experienced coders). If you want to organise your code look at the src code of good libraries like: [Underscore.js](http://documentcloud.github.com/underscore/docs/underscore.html). Of organising code: [the module pattern](http://www.adequatelygood.com/2010/3/JavaScript-Module-Pattern-In-Depth) should be helpful. What books are you using? Also go functional:http://www.ibm.com/developerworks/library/wa-javascript/index.html
You might want to add a why to that...
&gt; 4) Never name your functions. Make all functions anonymous and if 4hey need a reference then assign them to a variable. this sounds cool enough (kind of action-scripty to my ear), but why is this better?
thank you kind sir, i fixed some code to look nicer now that i remembered to put the curly brace on the same line as return.
that prevents people doing things like undefined = true, document = null, etc as when the function gets executed the actual values of those are passed in and used before they can be mutilated. 
Ah, yes, sorry. When you pass window and document to the function like that, the browser *should* reference the two objects by the passed arguments, allowing references to the two objects to be minified and / or gzipped. Slight decrease in file size, but if you reference them a lot, it adds up. And for undefined, well, it just ensures that it (undefined) wasn't somehow overwritten, eliminating the possibility of if statements breaking (if x == undefined) { ... }). 
that's right, i forgot about how effective minifying is by passing those in too. darn it i need to rewatch the paul irish javascript video and paul crockford's the good parts talk (at google)
i should try it and see what it says. i would love more input on how to structure my javascript files though (which is really the main point of this post).
The [jQuery tutorial](http://docs.jquery.com/Tutorials) and the [Mozilla Developer Network](https://developer.mozilla.org) should be interesting resources. But are you sure you want to develop a website in JavaScript, especially not being a programmer/web deveoper? It might be a lot easier to use a software like Wordpress, Drupal or Joomla, to name a few.
* 2) Use only 1 var keyword globally and only 1 var keyword per function. * 3) If possible always put variables at the top of your functions. * 4) Never name your functions. Make all functions anonymous and if 4hey need a reference then assign them to a variable. I used to practice these (arbitrarily; no one told me to), and over the years I have found these suggestions to be bad suggestions. Having only one `var` keyword (2) only makes minification simpler. I know UglifyJS merges `var` statements if they are next to each other. It's not a bad thing to merge your `var` statements; I just think the suggestion is bad. It's a matter of style. Putting `var` statements at the top of a function (3) versus closest to where it is used has tons of religious baggage. I would only do this to make JSLint happy (and I have turned of that option, so I don't bother with it). Making this a suggestion is silly, because you're pushing your side of the religious argument onto someone who isn't aware of the arguments of either side. There is only one JavaScript-specific problem I can think of (lack of block scope), and that problem can be solved in a number of ways. Not using function statements and named function expressions (4) is always a pain. Not only is `var x = function(){}` more boilerplate than `function x(){}`, but debuggers and tools (notably V8/Chrome) are much more helpful (especially with respect to stack traces and similar places where you'd want function names) if you name functions. Compare the output of the following two function calls in V8/Chrome: function thrower1() { throw new Error(); } var thrower2 = function() { throw new Error(); } try { thrower1(); } catch(e) { console.log(e.stack); } try { thrower2(); } catch(e) { console.log(e.stack); } In Node 0.4.10, you get: // thrower1 Error at thrower1 ([object Context]:1:29) at [object Context]:1:7 at Interface.&lt;anonymous&gt; (repl.js:171:22) at Interface.emit (events.js:64:17) at Interface._onLine (readline.js:153:10) at Interface._line (readline.js:408:8) at Interface._ttyWrite (readline.js:585:14) at ReadStream.&lt;anonymous&gt; (readline.js:73:12) at ReadStream.emit (events.js:81:20) at ReadStream._emitKey (tty_posix.js:307:10) // thrower2 Error at [object Context]:1:35 at [object Context]:1:7 at Interface.&lt;anonymous&gt; (repl.js:171:22) at Interface.emit (events.js:64:17) at Interface._onLine (readline.js:153:10) at Interface._line (readline.js:408:8) at Interface._ttyWrite (readline.js:585:14) at ReadStream.&lt;anonymous&gt; (readline.js:73:12) at ReadStream.emit (events.js:81:20) at ReadStream._emitKey (tty_posix.js:307:10) The problem manifests itself in different ways with different browsers, but the result is the same: debugging with named functions is never less difficult than debugging with unnamed functions. Please don't make such blind suggestions without explaining the reasoning behind each of them and each's drawbacks.
Most JS coders write JS using 1TBS (`{` at end of 'previous' line; `}` on line of its own) so they don't have to think or worry about issues like this. You still have to be aware of it, of course (especially when dealing with larger maths equations).
 var foo (); { doSomething(); }; This is not legal JavaScript and ASI would not insert like that.
I never write this. The build process does. When you have 100 files to collapse, wrapping every module which needs to touch the DOM with an immediately-executing function is irritating. [Example build script][1] (which is in need of an update) which shows how easy this technique is to do automatically. [1]: https://github.com/strager/owp/blob/1192d7b7076077e681929974f8c209f6a5ba26b4/bin/build.sh#L8 Note that when gzipping, the benefits of this technique are negligible (and it may even be harmful).
[JSHint][1] is the tool of choice for hipsters. [1]: http://jshint.com/
Watch [this](http://www.youtube.com/watch?v=hQVTIJBZook) video of Crockford delivering the message of "The Good Parts," then acquire the book for a quick reference to JS core methods. That will teach you the bulk of the core stuff that's non-DOM, and give you a solid foundation. I would then get familiar with [MDC](https://developer.mozilla.org/), [QuirksMode](http://www.quirksmode.org/compatibility.html), and [jsBeautifier](http://jsbeautifier.org/). MDC will have the important stuff you need to know/reference about the DOM, quirksmode will tell you if you need to do anything to make it x-browsers, jsBeautifier will help you read/study other peoples' code (important!). After getting familiar with all of that, I would start to look at frameworks like fernando suggested (jQuery, YUI, etc). 
If you want to go down the textbook route, I suggest JavaScript: The Good Parts for a quick(er) read, or JavaScript: The Definitive Guide for a more in-depth guide.
Find someone to work with you. Do you know any developers? Pair programming with someone is by far the best way for a noob to learn. JS is a fucking nightmare IMO. I use it sparingly (since 1996 no less). I still can't believe this is the best we've come up with. Cross browser compatibility makes it a nightmare as well. If you insist on using it, try jQuery. There are a gazillion examples online.
&gt; when gzipping, the benefits of this technique are negligible (and it may even be harmful). Could you please explain why this is?
If you ever learn PHP, you can use: http://php.net/manual/en/language.variables.variable.php
It's really a matter of what data you're running your code against. On larger data sets, I've noticed only a few-byte difference with gzip. `window` or `document` would likely compress to two bytes with LZ77 if referenced enough. I misspoke when I associated 'gzip' and 'harmful'. I meant to say e.g. putting `window` in the wrapper arguments list when `window` is not referenced could harm compression (only by a few bytes, but still). I ended up making a test script (which proves pretty much nothing) while answering your question (because I neglected to read my own post carefully first!). Here it is, with (again, meaningless) results: #!/bin/bash for test in test-1 test-2 test-3; do wrappedFile=$test.js unwrappedFile=$test.r.js echo "=== $test ===" cat $wrappedFile cat $unwrappedFile wrappedRaw=$(wc -c &lt; $wrappedFile) wrappedGzip=$(gzip -c &lt; $wrappedFile | wc -c) unwrappedRaw=$(wc -c &lt; $unwrappedFile) unwrappedGzip=$(gzip -c &lt; $unwrappedFile | wc -c) echo "Wrapped : $wrappedRaw raw; $wrappedGzip gzip; delta = $[$wrappedRaw - $wrappedGzip]" echo "Unwrapped: $unwrappedRaw raw; $unwrappedGzip gzip; delta = $[$unwrappedRaw - $unwrappedGzip]" echo done === test-1 === (function(a,b,c){}(window,document)) (function(){}()) Wrapped : 37 raw; 57 gzip; delta = -20 Unwrapped: 17 raw; 37 gzip; delta = -20 === test-2 === (function(a,b){a.document.appendChild(a.document.createElement('div'))}(window,document)) (function(){window.document.appendChild(window.document.createElement('div'))}()) Wrapped : 90 raw; 92 gzip; delta = -2 Unwrapped: 82 raw; 85 gzip; delta = -3 === test-3 === (function(a,b,c){b.appendChild(b.createElement('div'))}(window,document)) (function(){document.appendChild(document.createElement('div'))}()) Wrapped : 74 raw; 91 gzip; delta = -17 Unwrapped: 68 raw; 78 gzip; delta = -10 
The first example is my company's code style. We write *a lot* of javascript and it has never once caused an issue.
I'm pretty sure putting the bracket on the next line is only an issue if you do it after a return statement, and it is really obvious to most people that a return value should go on the same line as the return statement.
It's not, and last I checked, there are implementations of strict mode that disallow it.
Start with beginners books. A lot of coding material presumes you know stuff already - like DOM, objects, creating functions etc. My site at www.coderfap.co.uk has a basic tutorial which will move into beginning javascript as well. Contact me for help.
 eval('variable' + i); Never do that.
Do you serve compressed js?
I recommend getting a firm grip on CSS before diving into JS, if you haven't already. Most of the interesting stuff you'll want to actually build with JS will demand a firm grasp on HTML and CSS, particularly regarding layout. [The head first books](http://www.headfirstlabs.com/books/hfhtml/) are excellent starting references, though depending on your level of skill may be too introductory. Other than that, I echo the recommendations for "The Good Parts."
I do know php but I had not contemplated that. Is there ever a real reason to use variable variables instead of using arrays? It reminds me of SQL tables.
No, but everyone was being evil to you, so I thought you should have a hug!
*shrug* I've had worse on other reddits, /r/js has been a blast in comparison. Thanks for the sympathy, I suppose, awkward though it seemed at first.
Oh, hilarious. I had heard of minification in order to save bandwidth (I read between the lines, I assume disk space wasn't the real issue), but to obfuscate the source code to avoid copyright infringement? Here I thought Javascript for the web was the one place, the single place where free software would not have enemies. Javascript has been so pure and simple until now--all of the libraries are free, most of the applications' code is free. But obfuscating code for the sole purpose of stopping people from using it? That seems entirely counterintuitive to me. Put a copyright notice in and hire a good lawyer, but don't resort to low-down, dirty methods of protecting yourself.
Similar to what kbjr did: var variables = ['foo','bar','toto','foo bar']; for (var i = 0; i &lt; variables.length; i++) { document.write(variables[i]); } 
Very, very well written feedback, and I tend to agree with most of it. Upvote for you.
Might I point out, that the only number type in Javascript is floating-point - there are no integers. Due to the nature of floating point, this means all computations in Javascript are approximations. I'm not entirely sure what you're doing, but it's a good thing to keep in mind.
I dont think you understand what the arrows are for...
Not that I approve of this but because reddit uses jquery you can just open up console and type: $('.up').click();
textmate, vim or gedit ... haven't found a good IDE yet (too many features make me less productive)
+1 
I'd think of that but somehow, it does not work. That was why I bothered doing them one by one
The days I'm in good moods, I like most comments, therefore I want to click on every single arrows. Then I get tired of clicking... Therefore, This script same me up some clicks. Of couse, I recommand to double check the result and make sure you have not liked something that you dislike. I guess you might be some kind of old fashion boy who would rather click on every single arrows :)
My point was that even if functions might work when you place the curlybracket on an new line objects does not and therefore, for consistency, it's a good idea to place all curlybrackets on the same line as the block-starter. Also; do you unit test in most browsers? Because most browser may accept this syntax, but there may be stricter interpreters out there.
I have enough skill with HTML that I'm able to build simple tables, links, images, etc. and find basic problems with my wife's blog when blogger makes a mistake and breaks things. I used a master CSS sheet in the past, and I'll definitely brush up before diving into Java, thanks for the recommendation.
I'd heard that JS was the easiest way to deal with visual elements on a website, being object oriented and all that. What would you recommend instead of JS? What are some specific examples of things that would be unnecessarily difficult in JS?
I have some experience with programming, I was actually a BioPhysicist in a former life, and we compiled a lot of our programming for research purposes in a backwards language that I've realized was based on Java. It's not in my nature to put a black box between me and what I'm trying to do...I'd prefer to understand the code myself. I can appreciate that it will take a while, but I'm willing to invest a significant amount of time into learning over the next few years.
Well OK then. If you really want to develop the site in JavaScript, you should probably take a look at [NodeJS](http://nodejs.org/), which is a platform for building JavaScript server applications.
I'm not set on Javascript, but using a tool where I can't see the code myself is a frustrating experience for me. Do you have a suggestion for a different language?
If you upvote all the comments then you haven't made any impact at all, every comment just has one more upvote ;)
Sure, I can think of a few languages and platforms. Your request is a bit confusing, you seem concerned about the visual elements of the website. That's what gets into the browser and yeah, it's made of HTML, CSS and JavaScript. Learn jQuery for that. But building a website you'll probably need some server-based backend. You could do that in JavaScript using node.js, though that's a "bleeding edge" approach and you won't find as much information and library support compared to other approaches. I would probably recommend you to use the Python language for the server-side part, possibly with the Django framework, or with web2py if you'd rather develop your own supporting code instead of using other people's architecture. Java EE 6 with JSF would be viable too and it's not as complex or "corporate" as the names would imply. Look at the netbeans.org tutorials if you're interested. Microsoft ASP.NET MVC is also a very effective option and gives you a range of languages to choose from. It is very accessible and well-supported and you can get everything you need for free at www.asp.net. Of course there's Ruby on Rails as well. The initial versions had too much "magic" (i.e., black box, "clever" behaviors) for my taste, but I heard it is less so nowadays. Of course there are the other 9,999 alternatives I'm not going into right now. I advise you to write a "hello world" website in a few of those frameworks and see what fits your style better. I think it would be a choice between the white sheet style, total control and simplicity web2py gives you (at the cost of building everything yourself) versus the accessibility of Visual Studio with ASP.NET MVC or Netbeans with JSF.
Cross-browser compatibility comes with the territory of building for the browser. It is not inherent to JavaScript and frameworks like jQuery alleviate the problem. The only alternative I could think of would be not using the browser at all, except to display a plugin such as Flash or Silverlight, and develop for the plugin. That is not the path most websites should take and of course it comes with its own share of issues. I'd stick with HTML, CSS and JavaScript.
When you say CSS, I think of the master CSS sheets I wrote back when I was making my first websites in notepad...I assume that the master.css sheets are just one way of using the CSS language? Which order do you think I should implement them in? Which languages do which parts of a site better?
From https://developer.mozilla.org/en-US/learn: HTML - HyperText Markup Language is the core syntax for putting information on the worldwide web. If you want to create or modify web pages, it's best if you learn HTML. CSS - Cascading Style Sheets is a language for describing the appearance of web pages. To create good-looking web pages, you need to learn CSS in order to define the appearance and location of the HTML elements within the pages. JavaScript - (JS for short) is the programming language that enables web pages to respond to user interaction beyond the basic level provided by HTML links and forms. That is related to the client side (browser). Most websites have a server-side dynamic back-end as well and that can either be generated by a tool such as Wordpress, Joomla or Drupal, or developed in a programming language plus frameworks such as Python+Django or web2py, Java+JSF or C#+ASP.NET MVC.
I realize I'm bringing up something that will be totally out of my league, but say we wanted to put some information online that would only be accessible to people with an approved login and password. Is it a pipe dream to think that I could be able to implement that from scratch, or should we be looking at buying a CMS and using the coding ability that I have to keep it running? (I strongly suspect the latter, but I have to ask)
The module pattern is fugly and a bit error prone. Better solutions are something like module.js or dojo's require/provide.
Totally a CMS, for results, stability and safety. Doing it from scratch on the side to learn, perhaps. Building this kind of thing is like opening a can of worms. Most CMS systems will allow you to take control of the generated HTML, CSS and JavaScript code that the browser sees, which seems to be your major concern. And they provide a platform you can build upon as well. Take a look at Wordpress, Drupal and Joomla. References: http://en.wikipedia.org/wiki/Web_content_management_system and http://spyrestudios.com/free-content-management-systems/
How about a script that downvotes people with poor grammar?
Everyone here is going to give you a bunch of 30-days or head-first books - many of which will have the ostensible impremateur of big names like Crockford and Resig. Let me be the first to tell you to basically ignore this crap. Read the standard, get a good reference on browser differences, then focus on real programming books that are not language specific. That's the way to rise above making jQuery plugins and "HTML5 Game Demos" of Atari 2600 games. The standard: http://www.ecma-international.org/publications/standards/Ecma-262.htm Good reference on browser differences: http://www.quirksmode.org/compatibility.html The kinds of books you should be reading (notice the used prices please): http://www.amazon.com/Introduction-Algorithms-CD-Rom-Thomas-Cormen/dp/0072970545/ref=sr_1_1?ie=UTF8&amp;qid=1313160060&amp;sr=8-1 http://www.amazon.com/Computer-Programming-Volumes-1-4A-Boxed/dp/0321751043/ref=sr_1_1?ie=UTF8&amp;qid=1313160086&amp;sr=8-1 http://www.amazon.com/Structure-Interpretation-Computer-Programs-Second/dp/0070004846/ref=sr_1_1?ie=UTF8&amp;qid=1313160117&amp;sr=8-1 http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612/ref=sr_1_1?ie=UTF8&amp;qid=1313160130&amp;sr=8-1 http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672/ref=sr_1_1?ie=UTF8&amp;qid=1313160138&amp;sr=8-1 I'd throw in a rickroll if I could. A deep knowledge of CSS will help. If Javascript is your hammer, CSS is your screwdriver; the two are very related in most cases (sure there are exceptions, like node servers, but they're not common.) Like JS, the best way to learn CSS is the standard. http://www.w3.org/TR/CSS21/ Happy hunting.
&gt; I'd heard that JS was the easiest way to deal with visual elements on a website, being object oriented and all that. Whoever told you that is a cargo cult programmer. Whereas JS is OO, that it's OO has almost nothing to do with any of its desirable characteristics, and its OO system is honestly pretty silly. http://catb.org/jargon/html/C/cargo-cult-programming.html Learning JS is good. Learning OO as *one* tool in a broad toolchest is good. Learning OO from JS is bad. ECMA prototypal OO is retarded; ask any Actionscript 3 programmer, who has the choice between ECMA style and Stroustrup imperative style, and they'll tell you. Please be very careful with advice from that source, in the future.
The method of CSS inclusion isn't really very important unless you're dealing with a ridiculously high-scale webpage, and have to worry about things like how the local caching happens or what the 20ms latency effect is. There is some interesting discussion of this in the Y!Slow talks, but frankly, the best answer is "at this point in your development, just focus on learning CSS, and put it wherever you find convenient." It can be external, as your master.css example was, or it can be included within the page. Same as JavaScript. As far as what order to implement them in, they go hand in hand; first learn the languages, then later worry about the correct time to deploy each.
&gt; It is not inherent to JavaScript and frameworks like jQuery alleviate the problem. Actually, the explicit original purpose of jQuery was to wrap browser issues conveniently. (That it doesn't do a very good job is neither here nor there.)
&gt; Is it a pipe dream to think that I could be able to implement that from scratch We don't know how much time you have, and we don't know what your skill level is. What I can say is that Matt Mullenweg, who is a really nice guy and the original author of WordPress, is absolutely a garbage developer at PHP, JavaScript and CSS. It wasn't until he started hiring that the codebase even part-way got under control. If you've ever used a web application, you know that development skill has relatively little to do with release. The real question is what you need. If you have the money, and don't have the time or the ability to tolerate problems, then purchase. Notice that the judgment has little to do with your skill.
&gt; Totally a CMS, for results, stability and safety. Something like 90% of the VEs I've had to clean up for my customers after they got hacked were due to security problems in CMSes, mostly drupal and wordpress. If you're turning to CMSes for security, safety and reliability, you're doing it wrong.
Just learn PHP. It's simple, it's easy, it sends novice Redditors into apopleptic rage, it's stable, it's fast, and your cheap hosting already has it set up. Ruby, Python and garbage CMSes like Django are roads for amateurs to put together something amateurish and be proud; they're the Visual Basics of this decade. C++, Java and .NET are legitimate platforms, but are arguably too large and difficult for someone who's just getting started. There are lots of good choices out there. PHP is easy, it's fast, it's stable, and it's ready for you. Start there. The key understanding is simple: if you only speak a few languages, you aren't going far in life as a programmer. Once you're good at PHP, pick something *really* different, and keep learning. Six months later, three languages later, and you'll start to understand why the raging mob here all says the same shit, and never actually gets anything done.
True enough, and that's why I've been looking at CMS online. I realize there are lots of nice things that I'd like to be able to do which are probably out of reach for an individual whose job isn't web design. Thanks for the input.
Generally speaking, I want you to go learn to program. But starting with a paid CMS may be the better initial tack. Getting a CMS right is a lot of work; there's a reason that after all this time and money WordPress, Django and Drupal are still so very broken.
will do, thanks for the warning.
I was ready to thrash this submission, but it's actually a very good write-up; definitely much better than most of the other attempts at explaining `this` binding in JS; includes relevant, short examples, references to the ECMA spec (as well as new additions from ES5 like Function.prototype.bind). Good find.
I'm trying to balance the fact that I really want to learn to do it all and fully understand it...with the fact that this is a small portion of my job, and my boss is not likely to be happpy if I start spending all my time on the small part I enjoy and ignore the larger bit at hand. So maybe a free CMS to begin with, and I can learn and modify as I have time and experience.
I would, personally, recommend a similar but different strategy: a free CMS to begin with, and then when you have time and experience, work on your own thing. Hacking a CMS doesn't teach you much except about how to hack CMSes. Working from scratch is the way to learn to code.
More info... &gt; var variable = { }; That is an **object**, which should use the `for (... in ...)` form for iteration. If you want to use numerical indexes you should an **array**: var variable = []; variable[1] = 'foo'; variable[2] = 'bar'; This can also be written: var variable = []; variable.push('foo'); variable.push('bar'); ...or: var variable = []; variable[variable.length] = 'foo'; variable[variable.length] = 'bar'; ...or even: var variable = ['foo', 'bar']; Given arrays, this works: for (var i = 1; i &lt; variable.length; i++) { document.write(variable[i]); } 
I agree completely, although I'd like to expound a little; just keep in mind that this POV is from the eyes of a team coder who writes code that is maintained by at least 10 others. * 2) Use only 1 var keyword globally and only 1 var keyword per function. This makes it much harder (riskier) to use [docblocks](http://code.google.com/p/jsdoc-toolkit/) for documentation, because now you have to keep up with commas and whatnot over multiple lines of commented text. Not a huge issue but it is always a concern when working with devs of various skill and experience levels. * 3) If possible always put variables at the top of your functions. To me, this is bad because when you're working code that has to be maintained, you should try to keep changes as atomic as possible. For instance, given this random code I just made up: var enabler, enablers = this.getEnablers(), isEnabled = false; while (!isEnabled &amp;&amp; enablers.length &amp;&amp; (enabler = enablers.pop())) { isEnabled = enabler.apply(this, [this.getUser()]); } Today I add that code to a function, and let's say 5 years from now we determine that it's no longer needed, if the code is all in one place it's much less risky to remove than going through and pruning lines out that are separated by lots of other code. How can you be sure, without tracing each line, that the variables aren't being used in between where you declared them and your code? Someone could have come along in that 5 years and also used one of your vars, and so removing the `var` will now break that code. It's also helpful to have code that is semantically related to be located in close lexical proximity. What is the default value of `isEnabled`? Oh, let me scroll up a few pages...
Thank you for your explanation. I actually did not use his exact wording and wrote as you did when defining an array, but thank you for the clarification on the declaration of arrays.
I did not know that. Shit. Thank you for the heads up.
As compared to a website developed by someone that is just starting to learn? Software like wordpress gets a lot of eyeballs and security flaws are discovered and patched.
I mean it is implicit to browsers and DOM, not to the JavaScript language per se.
&gt; As compared to a website developed by someone that is just starting to learn? No. If you'll notice, instead of guessing, I actually also pointed him at using CMSes. &gt; and security flaws are discovered and patched. You ... might want to look into this.
An attribute is no property. The standard way for getting an attribute would be obj.getAttribute("rel") There are a lot of crossbrowser problems with getAttribute where it works for some attributes but not others depending on browser etc. That's why you might be better off using a library to relieves you of caring about these crossbrowser issues, e.g. jQuery.
I'll look into the jquery fix for this. Thanks for the info!
Ha. Was just describing what was going on at the time ;-) Got the bloody thumbs to prove it!
Decent guide, surprisingly. I made a similar thread on this subreddit recently due to the garbage articles about this around: http://www.reddit.com/r/javascript/comments/j2j8b/the_this_keyword_is_extremely_simple_and_doesnt/
Personally I like the traditional: var name = // what ever needs referencing.
This page got me up and running in Javascript and jQuery fairly quickly and helped me to understand what it was jQuery would do for me: http://jqfundamentals.com/ I'd recommend reading through that site, then check the books recommended here. Though you should avoid complicated editors, moving from notepad to an editor that has syntax highlighting would make things easier. Otherwise the simpler the better. Some suggestions: - [gedit](http://projects.gnome.org/gedit/index.html) - Super-simple, free, all platforms - [Notepad++](http://notepad-plus-plus.org/) - Free, Windows only - [Sublime Text](http://www.sublimetext.com/blog/articles/sublime-text-2-beta) - Paid, but you can use the free trial forever, all platforms 
The problem is that the "this" object in the href is "window", and window doesn't have the rel property. If you do the same on the click event "onclick" you will get the correct value. &lt;li class="first"&gt;&lt;a rel="0" href="#" onclick="nextpage(this);"&gt;link&lt;/a&gt;&lt;/li&gt;
you can access variables in the parent objects array. so if if my x1 and x2 variables are global i can access them in the window like window['x1'] or window['x2'] var x1 = "hi1"; var x2 = "hi2"; for (var i = 1; i &lt;= 2; i++) { window.alert(window["x" + i]); } 
Haven't dug deep into the code but you should be able to change the function with the timeout in it a variable and pass in a number depending on which image is requested. Make a hash of image &gt; time.
Thanks for the help!
change setInterval("snakey.draw()", 50); to setInterval(snakey.draw, 50); or, if you need more than just snakey.draw to be called, use setInterval(function(){ snakey.draw(); foo.bar(); }, 50); Passing a string instead of a function callback will cause Javascript to use eval() on the string, I believe (and is generally discouraged).
Nice job. I'm another JS newb who will be interested in hearing comments on good practices.
Ok. Done. Why is removing the quotations and parenthesis preferred? edit: When I do what you've shown, it doesn't work, at least on chrome.
The first parameter of setInterval and setTimeout is meant to be a function callback. If a string is passed it will be eval()'d, but that pattern is discouraged (and it will be slower if you only need to call a single function since it would be like calling (function(){snakey.draw();})() instead of simply snakey.draw()).
(Reply to the edit) Ah, the reason it won't work is because the function is called in the context of the window object when it is called by setTimeout and setInterval. In other words, "this" in the snake.draw function is referencing window instead of the snake. The simple way to fix this is to simply use setInterval(function(){ snakey.draw(); }, 50) You could also use setInterval(snakey.draw.bind(snakey), 50) but I'm not sure how widely supported the .bind method is. 
In your snake.add method, it seems like you're trying to address the last element of the segments array using this.segments[-1]. If so, you'll need to change it to this.segments[this.segments.length - 1].
Ah, that doesn't work is JS? Python habit I guess. Any thoughts on how to detect collision? I'm trying to figure out an efficient method to accomplish this.
The only way I've ever done collisions (which may also not be the most efficient way) is to check each pair of objects on the screen once per frame to see if the bounds of one box are inside the bounds of another box. Something like [this](http://pastebin.com/SSGQAe69).
This is the real answer. Most people seemed to assume he had or should have an array of variables. Of course, if you can make it so you have an array of variables that is best for what you're doing. But I'm sure there is some useful thing you could do with the knowledge that you can access object properties this way. 
Thanks, hope this is helpful to you as well.
That in no way will ever break. Ever. The "weird" behavior is exclusively for the return statement. To get the weird behavior, your first example would have to be valid with and without a semicolon after "function()". It isn't, so it will **always** be interpreted as intended.
*It does not matter*. That code will run in any compressor. Since function() on its own isn't a valid statement, the parser will not insert a semicolon for you.
Every week or so we get this shit. I think the rules for "this" should be in the sidebar of this subreddit. Edit: nevermind, this one's good. 
Eh, none that I can think of right now, but I imagine there is some use legitimate for them.
That's a mighty big library (for just a single function) you've got there.
Why won't you just come back to #subreddit?
[Here](http://pastebin.com/18L4PP1q) is a short-hand version that I used in a spacial library (r-tree).
2 quick suggestions on what I noticed. 1. You should consider using requestAnimationFrame (https://developer.mozilla.org/en/DOM/window.mozRequestAnimationFrame) instead of setInterval, to ensure that you are being called in sync with the screen repaint, so you are not doing extra or less draw cycles. If you want to use setInterval, instead of 50ms you should use 16.7ms (most monitors are ~60hz so that would be about 1 frame) The other thing you're doing thats 'off' is you just throw code into the html file after all your core html. In your example this works fine, since your DOM is already loaded. But usually when you 'initalize' your stuff, you really want to hook into the DOMContentLoaded event off the window object.
Posting without comment for the moment, because I'm tired, but this is in the style I would use (if avoiding libraries altogether): http://jsfiddle.net/draeton/pANn2/2/ I hope to come back in the morning and provide a little more detail.
Well, I'm using it for other purposes so I figured I'd look into it. But yes, Normally you wouldn't need jquery for a single thing like this.
[Sturgeon's law](http://en.wikipedia.org/wiki/Sturgeon%27s_Law) needs to be changed for Javascript. &gt; 98% of everything is crap. Maybe even higher. In all seriousness, I'm always delighted if I see javascript code that: * uses progressive enhancement. No inline event handler onclick="" crap, all js kept in nice external files. * doesn't use document.write * Isn't an unholy frankenpage using half of the existing jQuery plugins or other copy and paste scripts from the internet, stitched together badly. * Written by someone who really understands javascript's nature, the elegant ways it offers to augment webpages with behavior and who eschews creating large, monstrous, deeply name-spaced behemoths doing heaps of stuff better done on the server-side. 
OP should better stop doing both and instead use [progressive enhancement](http://en.wikipedia.org/wiki/Progressive_enhancement). Didn't say something about it at first because there's no need to drive the newbie to despair. 
That's why I said for example. It is sad that people still need libraries for the most standard things imaginable, but the reality just is that attribute handling, event handling, element creation and finer details of AJAX are depressingly browser dependent. You just need a library, even for the most silly small things (copy and pasting compatibility code is an exceptionally bad way to use libraries).
Well, this is what you call brute-force-programming. I do believe that there are ways that you can argue that this style of programming has its benefits.. Nah, this person has no clue. See line 4031: document.write(""); 
Not the worst, but I did say OMG out loud when I looked at the scrollbar, and realized it would go on, and on, and on, and...
Oh wow, thanks for the in depth response. I hope to study this a bit more and get back to you with any questions I have.
Looks like it was written by an outsourced coder in India, what with the setting of individual variables instead of using a loop.
amazon writes the worst javascript
IE 9's canvas support is seriously underrated. I have found multiple bugs, missing bits of implementation, or quirks in Safari, FireFox and Chrome. I have yet to find any in IE 9, and it's only now that Chrome's canvas is starting to overtake it in speed.
IE 9 has only the hardware support going for it, the rest of IE 9 is as shit as IE 6 was back in the day. Writing applications that support only one browser just because it some a certain thing a little better (and you can turn WebCL and WebGL on chrome and firefox) is silly. You should prefer to support as many browser as possible with what is available. Support the browsers that work to make the web a better place and not the browsers that want to show you flashing lights a little faster (IE 6 reference again...). Good luck
I hope this JS is machine generated (eg. a php script looping over 'echo' statements).
Hey man, sometimes you just need to output nothingness ya know? Haha.. no but in all fairness, the guy was probably just really high.
Heavily disagree. 'Back in the day' there was no FireFox or Chrome, and the alternatives that did exist were (mostly) terrible. At the time, IE 6 was easily the best. &gt;&gt; Writing applications that support only one browser just because it some a certain thing a little better ... I found issues in FireFox, Chrome and Safari, because I work across multiple browsers. So to clarify, no, I do not advocate solely targeting IE 9. I just think their canvas is something they got right, very right.
why is this being downvoted exactly? He has some good points and a great proof of concept that I see myself using in my projects. Any particular reasons not using it? it beats `typeof` when not testing for `undefined` values...
Your comment is contradictory. Almost all JS code written in jquery are an unholy mess of losely coupled event handlers that falls down when you change a single css property. Jquery's progressive enhancement religion is a bunch of nonsense that doesn't work in the real world and is responsible for a lot of the bad code out there.
FWIW, it also runs perfectly smooth with the WebGL build of Opera.
Interesting effect. And as you noted - chrome seems to really have issues with applying alphas in general, which is probably the root cause. Any specific reason you chose such blurry particle images to begin with? Also, any update on the writeup on how/why you did your drawing app? :-)
Stunning. I've never seen anything like it in a browser before.
wow. i scoffed when i saw the IE9 statement and saw it running at like 2 frames a second in Firefox 5 ... then smooth as butter in IE9. no shit.
The grouping operator isn't obscure. Calling his new function toType makes it seem like it might do some sort of casting instead of type checking. 
Microsoft's got a nice advantage with IE in their ability to heavily optimize it for Windows. Also it's nuts to finally be able to not only make a site that performs great in Internet Explorer, but looks great too. This also pushes the other vendors to get hardware acceleration working in their browsers as well. Competition in the browser market is so critically important. Look how quickly the performance of browsers increased when Chrome first stepped on the stage and was destroying everyone in Javascript performance.
Seems useful. Is the next JS iteration going to finally add a typeOf function so JS users do not have to keep implementing them? That sure would be handy...
No link. If you add text, the link isn't posted.
Thanks, I added a link.
You can't compare toType and typeof because they are not doing the same thing. typeof does not need to be fixed because it solves a basic problem: Is this argument an object, or is it a number. Is it a string? &gt;When typeof is applied to any object type other than Function, it returns “object”. It does not distinguish between generic objects and the other built-in types (Array, Arguments, Date, JSON, RegExp, Math, Error, and the primitive wrapper objects Number, Boolean and String). And? built-ins are still objects. Nobody uses wrappers. To report several kinds of native types makes your code more complex for checking them. Also lol: "But it works when I call it as a function?" No, it's a keyword (which is pointed out), why is that part in there. What the hell is this this edge case nonsense? IFrameArray is not an instance of a normal array, so what? That's more of a generics problem, not types. You're not going to get rid of duck-typing. I may be ranting misinformed...
I'm sure TRWTF is the code generating this stuff.
Isn't this actually just a form of [function overloading](http://en.wikipedia.org/wiki/Function_overloading)? You can do this in pretty much any language, though some (c++, c#) have native implementations.
A little misinformed.... a) You've never wanted to know if an object is an array, date or regex? b) Quite a few people think typeof is a function and code with it accordingly c) IFrameArray is totally an instance of a normal array. You have two windows means you have two of everything including two Array constructors. An instance of the iframe's array is in every way identical to an instance of the parent window's array - but cross-window instanceof will fail. d) Duck typing has its uses but its an approximation. This method is more precise and easier to use. 
Thank you. Guess I didn't see anyone with a huge opinion so I made one. a) Yeah but I think that's a problem with how those types are done internally, not the typeof operator. They can leave typeof the way it is if they differentiate date and regex the same way they do number and string. I don't know if they can do that if typeof is regulated by ECMAScript for that sort of thing. b) :( I guess that part stays. c) I see.
I think you can thank DirectX for that.
On the plus side, it works right?
Yes, but testing if the parameter is a function is just an implementation detail. The point is that you are not giving the function a value, but the means to get the most up to date value. This essentially allows the value to change between passing it in, and it being used. In theory, that allows you to write more terse code, where there is no need to update the value in the future. But I can imagine it can also lead to lots of bugs, and be difficult for library writers to manage. For example you would have to re-evaluate the function every time you needed the value, as otherwise you could get update errors. It can also lead to issues if the parameter-function does more internally then just return a value. But it's a good design pattern to know.
No, you're not stuck on 90% when loading. It's just a semi-large MP3 that needs to get to you through the tubes :).
I am stuck after teleporting. I climb and then run into a spot that doesn't allow me to get out again. Kinda frustrating.
SPOILER: ... go over the mountin ... :)
Cool game. I kept getting stuck though. Any place in the caves that was exactly the same size as the guy would occasionally get me stuck and the only option was the refresh the page.
Turtle.. like LOGO? *\*has elementary school flashbacks\**
I got stuck [here](http://i.imgur.com/8MuQv.gif).
I'm not spreading misinformation and I would appreciate you not saying that I am. I responded to the question asked. They asked about having hard coded variables, not a dynamic array. They showed having the condition (i &lt; 5) hard coded, that was not from me. While, yes, there are probably better ways of accomplishing this, there was not a lot of other information about the problem given, so I answered as closely to the original example as I could.
Sorry, didn't mean to offend.
Let's do this! I'm a Python dude so lay on the enlightenment if another language has something better than what I suggest, I will be making many comparisons to Python. First off with regard to the OP's suggestion, why not unify methods and attributes? What is the purpose of distinguishing them in Ruby? I wish there was an official dictionary object that was fully optimized and had nifty methods like keys, values and a method to override lookup. I know JavaScript can support that with an overlay of stuff but it also is kind of weird with the prototype always lingering. I use dictionaries in Python like crazy. Iterators with native iteration syntax and machinery. I think the JS people are working on that but I don't trust them. I use native iteration syntax in python because that is actually all there is and it is the bees' knees. I wish JavaScript function calling syntax was a bit more strict. In order to make that change I think optional arguments would need to be added. When I define a function with arguments that are required and then I call that function without them I want the program to punch me right in the face, ie. run time error. I think optional argument definition just being "don't pass that argument" is too hard to distinguish from passing too many or too few arguments. I think many languages have starting with a similar idea for variables, access an undefined variable and you get a soft response such as undefined being the value, but later everyone realizes that just masks bugs like crazy and try to turn it off. This same turn around I think is necessary with JavaScript function definition and calling. Python 3K has the latest and greatest function definition and invocation rules but I think I would take python 2.X rules as well over JavaScript rule-less functionality. Someone please enlightment if there are even more JS improvements I am unaware of. It is pretty hard to keep track of the back-and-forth. I wish there was a way for JavaScript big wigs to introduce a standard library that was upgrade-able that become the de-facto mini-framework. BUT when a browser didn't support some version the server-side could just provide it for its own code to call. This seems very possible but someone much smarter than me would need to work out the details. JavaScript developers everywhere are just pouring out engineering talent on the ground implementing thousands of frameworks that all do more or less the same thing. Python has the same problem with web frameworks but its stdlib is pretty good. On the same lines as my previous suggestion but more ballsy(pipe dream?): A more useful approach on language to language conversion(coffeescript) might be some standardized utilities that could take one version of a JavaScript feature set and convert it to the equivalent in each native JavaScript version. Then based on some standardized header the server can send the right version to the client. But then as JavaScript evolves developers can use the latest and greatest but still support older versions of the language. For example native iteration could be used while developing but on older browsers a function would be created and passed through a .each() method or whatever.
thats alright, just being clear. and, yes, the way you showed is better.
this comment seems shortsighted and please elaborate how jquery "doesn't work in the real world"
honestly if i was given this to maintain i would suggest keeping as is or suggest a re-build. there's no way i would touch any of it with a ten foot pole.
1. `arguments` should be an array (e.g. `__proto__` is `Array.prototype`). 2. Native, efficient promises. 3. A map type, or a way to get a UID for any object, or `Object` property keys. (I understand there are problems with this on the engine side.) 4. Weak references. (There was some `WeakMap` on MDC somewhere, for example). 5. More native `Array.prototype` methods, like `unique`, `binarySearch`, and `insertIntoSorted`. Those are my big five (that I can recall). Some syntactical goodies I'd also like: 1. ~~Destructors~~ destructuring, à la [PHP's `list`][1]. 2. Argument splats. 3. `??` and `??=` operators (instead of `||` or `typeof x === 'undefined' ? y : x` checks for optional arguments, for example). 4. Less ugly lambdas (e.g. `\x y -&gt; x + y` or `(x, y) =&gt; x + y`). 5. Nicer function syntax in object literals. For example: `{ function foo() { }, prop: 42 }`. [1]: http://php.net/list
&gt; First off with regard to the OP's suggestion, why not unify methods and attributes? What is the purpose of distinguishing them in Ruby? I think it is partly because of the whole optional parentheses invocation design choice. When you go down that road you have to decide whether foo.bar is trying to get a property at bar or invoke bar with no args. Ruby chooses to say you are always invoking, so getters without parens emulate accessing properties, with syntactic help from attr_*. CoffeeScript made a different choice with optional parens, instead saying a no-arg invocation must have parens. The only way a paren-free invocation is recognized if there is func-space-arg[, args]. Optional parens can cause confusion unless you really know how they work. Definitely not pythonic, but it's a choice that fits with Ruby's view of 'beautiful code'
Sorry guys, a last minute tweak made it possible to get stuck in levels I've been playing through for days. Thanks for the screenshot DreadPirateJay.. I've fixed it, played through the whole game to doubletest it and uploaded the new version.
It's running fine right up to 2048x1152 (fullscreen) in Chromium 15.0.840.0 on my Archlinux box. Also not sure if Chromium specific bug or general, but the canvas goes black if I resize it while it's running and I have to reload the page.
After about 30 seconds I assumed it was going to be a shock game/screamer and quit it, lol. Something about that music.. :-)
How is this better than requirejs or headjs? In my experience, iframes are more trouble than they are worth. 
Cool thanks for the explanation for the need of separation in Ruby. I guess that separation would not be necessary in JavaScript. Yeah I don't think I'd be a big fan of paren-free stuff. Python has a syntactic edge case where a trailing comma without parens creates a tuple which has turned out to be a wart that burns people pretty regularly.
Except that none of the links are noticed by the search engines.
You're numbering is pretty smart so I'm going to reference them with a prefixed number for the first 5(1.x) and second 5(2.x). I agree with 1.1 and 1.3, not sure about promises but they look promising. They are sort of a "solution" to the spaghetti produced with excessive nesting of callbacks right ? I guess weak references, 1.4, might be helpful but seems so far from where JavaScript is at now. Are you ever using JS and feel like "man... I wish I had a weak reference right now"? Just curious, your development might be a bit more involved than mine. I never quite get that feeling. Can you explain the destructor in 2.1? As I understand it, it is a method called when something is garbage collected or on the path to be garbage collected. Correct me if I'm wrong there. How would that be used in JavaScript? Like what is the use-case, destroying a widget with delete instead of explicitly calling a method for it to destroy itself? 2.3 I could understand the need for this if other changes cannot be made for backward's compatibility but it seems like a patch for a problem that could be more permanently fixed. 2.4 I know this has been discussed and re-discussed and it just doesn't seem worth the effort. I guess that is why it is in the goodies section. 2.5 Interesting idea, the problem of not being able to give functions names seems pretty serious.
Yeah, I just responded to a similar comment on Forrst. Basically I had never done it before and was pretty sure I could, so just wanted to try. I like experimenting. I think the more important concept is pulling in templates from a separate location (I personally haven't seen it done before).
Hate the name, love the function.
- [http://ippa.se/webgames/unexpected_outcome/media/level3.png]() - [http://ippa.se/webgames/unexpected_outcome/media/level2.png]() - [http://ippa.se/webgames/unexpected_outcome/media/level1.png]() Not really sure if people had different orders but I had level3.png as my first level. He's also tacking on a random seed to each of the images which makes it reload the image all over again... nice for testing but really annoying if you refresh and it reloads all over again. Total page size was over 2MB and it from after first level and gave NaN as fps. Kinda neat I guess. 
&gt; I agree with 1.1 and 1.3, not sure about promises but they look promising. They are sort of a "solution" to the spaghetti produced with excessive nesting of callbacks right ? Promises are *beautiful*, especially for things like asset loading when you want the maximum parallelism with a simple syntax. It's an alternative way of looking at continuations, so in a sense it's a "solution" to nested callback hell. &gt; I guess weak references, 1.4, might be helpful but seems so far from where JavaScript is at now. Are you ever using JS and feel like "man... I wish I had a weak reference right now"? Just curious, your development might be a bit more involved than mine. I never quite get that feeling. I do encounter problems with JavaScript's memory management from time to time. Say for example you're making a game engine/library for others to use. Now say you have a representation of game objects somewhere external (e.g. in WebGL GPU memory). When a user imports a mesh, that mesh will be uploaded to the GPU. But what about cleanup strategies? You have to 'free' GPU memory explicitly (e.g. destroy textures and attribute buffers). You could: 1. have the user explicitly clean up the mesh, 2. detect that a mesh hasn't been used in a while and clean up, or 3. detect when there are no other references to the mesh and clean up. Option 1 leads to memory leaks and an inconvenient API in an environment where everything is pretty much garbage collected. Option 2 may harm bandwidth, and the actual mesh data has to be kept around in CPU memory in case the user actually wants to use it again. Option 3 hogs GPU memory even when the mesh isn't being rendered often (though combined with option 2 this is less of an issue), but things magically clean up when the user is done touching that data. I guess I should have explicitly said "better interaction with the garbage collector" instead of a possible implementation ("[w]eak references"). &gt; Can you explain the destructor in 2.1? As I understand it, it is a method called when something is garbage collected or on the path to be garbage collected. Correct me if I'm wrong there. How would that be used in JavaScript? Like what is the use-case, destroying a widget with delete instead of explicitly calling a method for it to destroy itself? Destructuring, not deconstructing. See the [MDC article on destructuring][1]. (I miswrote when I said "destructors"; sorry!) [1]: https://developer.mozilla.org/en/New_in_javascript_1.7#Destructuring_assignment_(Merge_into_own_page.2fsection) &gt; 2.3 I could understand the need for this if other changes cannot be made for backward's compatibility but it seems like a patch for a problem that could be more permanently fixed. ~~I'm not sure I understand you properly. My argument (heh) for optional arguments and argument splats is that it solves the problems of poorly-self-documenting function signatures, erroneous manual handling, and `arguments` juggling we have to put up with today.~~ Thought you were referring to 2.2. Yes, I agree. `??` is pretty much a hack to solve the lack of 2.2 and optional arguments in 90% of cases. Still, if we can't move on to having 2.2 and 1.1, at least give us `??`, yeah? ;P &gt; 2.5 Interesting idea, the problem of not being able to give functions names seems pretty serious. I'm not sure what you mean. It's simply a sugar; `{ function foo() { }, prop: 42 }` would convert to `{ foo: function foo() { }, prop: 42 }`. Thanks for your comments, btw.
This is what happens when incompetence is rewarded.
JavaScript is a good language because its simple, flexible, and powerful. Adding dictionaries because you don't like prototypes is missing the point. I don't agree that functions should abject to missing arguments. JavaScript doesn't do this probably for the same reason it has loose typing. It just restricts the language. I do agree that we need a replacement for the DOM API. I am really happy with the work Mozilla is doing on this issue.
I wish [some other language] programmers would stop trying to fuck with JavaScript standards because they don't understand how to use Prototypes and closures, or think that their favorite classical language feature needs to be added. If I hear another idiot seriously try to argue how JavaScript is useless without classes I'm going to throw my computer at them. "GO FUCKING PROGRAM IN C++ THEN, LEAVE MY LANGUAGE ALONE!".
Runs very smoothly in Safari 5.1 for OSX Lion. Runs like crap in any other OSX browser though. It's to be expected as Safari 5.1 is the first one to support hardware acceleration properly.
C doesn't have classes.
* Proper tail calls. (Possibly coming in the future) * imports would be nice * A shorter keyword for function (# might be coming I hear, but I think I'd prefer fn for clarity) * A native method to copy the properties/methods of one object to another * Default parameters * Not JS, but related, I wish DOM methods had a flag to return a native JS array instead of a NodeList
here is our take on it. we do it simply because one of the environments we deploy into is an adobe air application, so all templates must be compiled before the document onready event function Template( node ) { node = node || 'div'; return '&lt;'+node+'&gt;&lt;/'+node+'&gt;'; }; $.extend( Template, { $ : new Object() // holder for special templates }); Template.GlobalContext = { "TRUE" : true, "FALSE" : false, Helpers : Helpers, top : top // only during development cycles } Template._load = function ( url ) { try { var _template = Handlebars.compile( $.ajax({ async: false, dataType: 'text', url: url }).responseText.newLineTrim() ); return function ( context ) { var newContext = new Object(); $.extend( newContext, Template.GlobalContext, context ); try { return _template( newContext ); } catch(e) { console.log( "[Template] Failed to render: " + url ); console.log( " context is : " + JSON.stringify( context ) ); console.log( " error is : " + e.message ); return ""; }; }; } catch (e) { console.log( "Template Failed to Load at: " + url ); console.log( e ); return function(){ return '[failed to load template]' }; }; }; // Template.load( name, uri ); // Template.load({ name: uri, name: uri }); Template.load = function( name, url ) { // if an object is passed; if( typeof name == 'object' ) { for( var a in name ) { if( name.hasOwnProperty( a ) ) { Template.load( a, name[a] ); }; }; return Template; }; Template[name] = Template._load( url ); }; if( false ) $( document ).ready(function(){ delete Template._load; delete Template.load; }); // Load Handlebar Templates Template.load({ EventFootballTeamBanner : "templates/event/football-team-banner.handle", EventKeyStats : "templates/event/key-stats.handle", TwoColorTemplate : "templates/two-color-template.handle", ThreeColorTemplate : "templates/three-color-template.handle", Twitter : "templates/news/twitter-item.handle", Rss : "templates/news/rss-item.handle", LiveItem : "templates/news/live-item.handle", Connextra : "templates/news/connextra-item.handle", MenuItem : 'templates/menu-item.handle', ErrorContainer : 'templates/error-container.handle', NewsCountTooltip : 'templates/tooltips/news-count.handle', Tooltip : 'templates/tooltips/general.handle' }); 
also as you can see we just grab it from seperate files called .handle. but this is specifically for air where the resources are local, we branch this differently for the web.
I can use the existing language to implement a dictionary its just more code I write that is unoptimized and non-standard. Why not include something that everyone would use on a daily basis into the language? I think, with regard to argument handling, JavaScript probably does this just because it seemed like a good idea at the time. I'm sure it is hard to change but I think it is pretty difficult to argue that the current behavior is better than separating required and optional arguments so that errors can be detected earlier. It wasn't like there were 100s of language designers making the language, it is a mistake that has been made in many permutations in many languages. I can understand arguments that browser vendors will fuck all this up or the spec writers will fuck all this up because those are valid concerns. But maybe the only thing I agree with Brendan Ech about is that no-action isn't really a course of action. Shit, I'd even go for Crockford's plan of just cutting the language down to the bone and not really adding anything. But I do not think clinging desperately to the exact spec and not adding or removing anything is really progress in any sense.
nothing like that ;)
Starting on Level 3 was of course wrong and it's fixed now. Thanks for the feedback! ...... annoying I got so many errors into the final game, I know ppl in general have a 3-second attentionspan and things needs to be working 100% :).
The need for cross-window arrayness checking is what drove us to add Array.isArray in ES5, in fact. IIRC we couldn't find other cross-window instanceofs that were anywhere near as common. ES.next does fix typeof so that |typeof null| evaluates to "null" rather than "object", for code that opts in to the new version. (I don't think it helps people to perpetuate the myth that typeof is a function, myself. Can't pass it as a callback to [].map or similar, can't call it with extra arguments, can't store a reference to it, etc. IME it's easy enough to explain that it's a unary operator, like ~, and be done.) The trick behind duck typing is figuring out what you actually want to determine about the subject of the test. "Is it an Array?" is usually less interesting than "can I call Array.prototype.whatever on it?" or "does it have a .length property that makes sense?", but mostly these things focus on emulating nominal types in a language that doesn't really admit them outside a few built-in cases.
mm, it's fixed.
I consider it harmful in a different way. One of the initial beauties of the web, was being able to see at a right-click, what was happening. These techniques, especially the minification, is only a few steps away from machine code, which is where Google want's to go with nativeclient. If that arrives then the web becomes closed source to a large extent, and I can see intellectual property rights being an issue; reverse re-engineering, etc. Better would be to have greater cache mechanisms in the browser and downstream closer to the client. The idea that you can save ~80% on your traffic can be misleading with the cache systems that already exist. I can imagine for a company the size of google, it could save millions of dollars a year with a few a tweaks, but pressuring the average programmer to adhere to these 'standards' could be seen as premature optimisation.
-Modules and dependency declarations should be a language feature. -Classical inheritance. Prototypical inheritance(in js, at least) sucks. e.g. try to call super.method() from this.method, the existence of "new", it is cryptic - all the usual gripes. If something is a class, I like to declare it by using the keyword *class*, if something is private, I'd like to signal this by using the keyword *private*. Using closures to hide properties is clever. I am not a clever person and I don't like reading clever code. -typeof should work. Basically, I don't want to think about problems that other languages have solved.
Haskell's Prelude, list comprehensions... a short form for **function** creation. 
With that reasoning we should oppose any language that is compiled and where the source code for the software in question is not available via its interface. Abandon C, Python and co. -- only Scheme and Lisp machines running. The difference in client side performance alone should be reason enough for anyone to minify and combine javascript resources, where request avoidance is even more important than pure bytes. This also applies to CSS and graphics (see CSS spriting techniques). Nothing improves the perceived performance of your web application more than this. For a decently written application, no amount of server-side tweaking will come close to the performance gains you can achieve with this optimizations. Calling them premature optimizations is as silly as calling what a C compiler does premature optimization. The point of avoiding premature optimization is that you might be tempted to sacrifice clarity and architectural integrity to questionable gains in performance before you can measure the real application performance. It does not apply to C compiler optimization techniques or minimization/request avoidance. This is mostly an unsolved or not generally solved tooling issue. The code you write is only isomorph to the one running in your prod environment, not identical -- there is a tooling / deployment step between that. It is also pretty orthogonal to licensing issues. You can minify closed and proprietary source code just as well as free and open source software. 
Spam? Linking to a poorly designed blog that hasn't posted a javascript article in excess of a year... Link to the FAQ or the XHR section if you had intended to do that.
Trees. Definitely, a good tree library with plenty of relevant things. Like splay trees, b-trees and red black trees. 
I like it, I definitely have this requesting templates from the same file to cut back on HTTP requests, but eventually I would like to have it in the beginning request everything that it requires then if it decides it needs something else it requests it from a server. Kind of a mix between both.
* Importing files. * A way to create a new scope without using a function (i.e. Firefox's let keyword) * Classical or Prototypal. Pick one.
Yes! I remember we had to draw a house. I finished in 5 minutes while everyone else took 3 days. I had animated shit in there!
&gt; With that reasoning we should oppose any language that is compiled and where the source code for the software in question is not available via its interface. Abandon C, Python and co. -- only Scheme and Lisp machines running. I don't think that is a fair representation of what was said. If you was to go to the extreme, the implication is only software complied from an open inteligible source. Besides that I was talking about a language for common communication, one for the web, not just for computers. So arguing for C and Python is futile. (For context Haskell would be more language of choice, dependent on domain of course.) &gt; combine javascript resources, where request avoidance is even more important than pure bytes. The only impact is the first view, and gains there after are small, and it is not as clear cut as you make out. An example: I have a 2mb javascript app packaged with the html, and I only tweak what would be a 100kb file. One could argue I have broken the caching system of the browser: instead of everyone downloading that 100kb, the whole 2mb file has to be retrieved. Once again requests aren't that big of a deal once a web app has been 'installed'. 'Optimisations' like embedding pictures in the HTML (&lt;img src="data:image/jpg...) again break caching systems and break the logical map of resources. &gt; This also applies to CSS and graphics (see CSS spriting techniques). Did I even say not to do this? I was spriting before it was commonly know as spriting. My stance is *everything isn't one size fits all, and rarely sacrifice clarity unless it significantly makes ***your*** application and development process better, not because it is known to make apps better.* Profile and measure, acting accordingly, trying not to sacrifice clarity. &gt; Premature optimisation. I know how this is defined and I know you can minify closed and proprietary sources... the point I was making is you used to be able to view a site, go wow that's cool how have they done this? Usually implementing what you like was a copy/paste and a tweak away. Heavily minified and obfuscated code tends to break that culture, and that is even more the case for pre-compiled JS. Why not 'precompiled' HTML or some such? Good bye open web.
Asynchronous control flow (without callbacks).
An openess that is forced by technical limitations isn't really open, is it? It's kind of an expropriation. While I certainly advocate free and open source software and currently make a living off writing GPLed software and implementing projects with it, I don't want to force people to free their software. 
I wouldn't say force, encourage is better. Everything has a bias.
Can you give an example?
Was the unexpected outcome no outcome at all? My son loved the game, btw. he is a big fan of simple graphics like this. One of his favorite games is [feist](http://playfeist.net/)
String score looks to be optimized for many things besides relevance, so you might want to change the way you look for the algorithm if speed etc. aren't constraints for you (e.g. Hunt around in the NLP literature). Off the top of my head, some things: probably valuable to take into account word entropy (words like "the" matched should count for less than words like "eat"), look at syntactic role of the words (eat is the main verb for two of three sentences, which makes it highly relevant to the passage), and try to keep the text to be matched against of considerable and consistent length (it's hard to normalize the relevance when the string lengths are so vastly different).
You have to press SPACE on the very last computer you find in the caves to see the results of the experiemnts :). If your son liked this game you Have to have him test "The light at the end of the tunnel" .. you can download it here: http://ippa.se/gaming 
It sounds like you have a few more constraints on your algorithm than "0 for no match upto 1 for perfect". Maybe you need to write down what those are. One reason I could think of for the second string scoring lower is that it contains more characters that do not resemble "eat". Why do you think it should score higher?
&gt; One of the initial beauties of the web, was being able to see at a right-click, what was happening. this would be true if the web ran on javascript. you can't right-click and read PHP or java code; back-ends have always been 'closed-source' in this respect.
Dang, his domain is throwing a 403 forbidden error.. looks like reddit probably removes the link from your post when that happens. :( UPDATE: It's back up. Here's the post: http://yehudakatz.com/2011/08/12/understanding-prototypes-in-javascript/
No, you added text to your posting, so you removed it yourself.
Darn. Added the link in the text box. My mistake
I would guess it scores higher because a larger percentage of the words contain the key "eat".
I guess I'm looking to do a better relevancy search, in javascript. You know, google, on the client side ;) 
noSuchMethod is something I'd also like to see. It would be nice to see some things cleared up, like instanceof. For example: "foo" instanceof String // returns false String("foo") instanceof String // returns true A proper hashmap would be high on my list, support for multiple returns, and immutable tuples. But most of all, when I set multiple functions to a prototype, I'd like the whitespace to help reflect this. For example with: var Foo = function() { }; Foo.prototype.bar = function() { }; Foo.prototype.foobar = function() { }; ... the indentation does not show that 'bar' and 'foobar' and for the 'Foo' function. Classes would also help to show this. Although thinking about it now, perhaps you could just use 'with' to achieve this.
Did the same some weeks ago: https://github.com/joside/jsTurtle Demo: http://playground.josi.de/dragon/index.html
I think the trick is to know which templates you will need immediately. I have been looking at what handlebars does for a bit on the side, it basically just writes a function for your template, this means (IMO) that the most efficient way of handling this would be to precompile these templates and just include the javascript function itself. not had time to do that however. on a side note, i am very impressed with handlebars.
Why didn't he use an animated gif like everyone else? Is he still living in the 1990s? More serious, doesn't built in firebug have a javascript console? (I might be thinking of Chrome, not Safari).
Firebug does, but it seems like Mozilla is trying to make Firebug tools built into FF itself because Firebug may be going away soon.
I'm too mad.
&gt; Firebug may be going away soon. Reference?
Oh hell no.
[Sounds false](http://blog.mozilla.com/devtools/2011/07/25/firebug-alive-and-well/). &gt; Jan (Honza) Odvarko works in the Mozilla Developer Tools group and is the new leader of Firebug.
why you mad tho? also add me on google plus
sweet! thanks :)
If I recall, the lead dev for Firebug joined Google and the Chrome team.
I'd say the problem is more that the lastest versions of Javascript aren't implemented by browsers or Node.js, and not so much that the latest version is lacking features.
yeah exactly this- maybe you could split the paragraphs you're searching into sentences and then return the highest string score?
I think this explains it all (from the page's sorurce): &lt;meta name="GENERATOR" content="Microsoft FrontPage 5.0"&gt; 
#2 is coming in the next version with the Let keyword. Let is the new var, spread the word ;)
http://blog.mozilla.com/devtools/2011/07/25/firebug-alive-and-well/
i'm not saying that Firebug is dying or going away. Just that the lead dev person left for Chrome
I'm just adding information to your comment. 
word
To be honest, box2d is probably one of the "better" ones out there that I've found. I'd be interested if there are any decent libraries out there as well (not ported from another language). I'm currently building my own since I haven't found decent simply physics libraries, which is why I'm interested in finding some others.
5 ways to rewrite the jQuery docs on ajax.
sorry I meant C++ not C.
Yes you could add dictionaries if you wanted to, but adding to the spec is a bad idea. Most problems can be solved by writing a library. You don't have to complicate the language to add functionality. If you need more stuff write a library. If you don't like JavaScript don't use it.
Never use get, post or getJSON. Use .ajax. You'll thank me later.
If you're doing it synchronously, just embed them in the main page. Don't waste time with the overhead of new requests.
Agreed. They all use .ajax under the covers anyway so you can do the same thing with less function calls and without having to look up the arguments each variant takes.
I've been trying to come up with a way to put my response to this into a comment, and all I can come up with is "Ugh".
why?
Really? I thought that was much easier to understand than the jQuery docs, at least as a first introduction.
http://blog.mozilla.com/devtools/2011/08/15/introducing-scratchpad/
&gt; It should be noted that Internet Explorer always caches AJAX calls, while other browsers behave differently. So we’d better tell the browser explicitly whether or not AJAX should be cached. With jQuery, we can accomplish this simply by typing... So does using the $.ajaxSetup thing to false properly tell IE not to cache or does IE still "always caches AJAX calls"?
I've never looked into the inner workings of it, but one way to get around it was to append a random query value to the end of the url making it a new url.
Das vim
Closures are simple. Code that accesses the scope it is defined in, but evaluated in a different scope.
I've been doing that as well but I was hopping for a more elegant solution.
The blog saying that the lead dev was switching jobs seemed "well this is the end" to me. With this, and the fact that Mozilla is working on tools which do the same things as Firebug built directly into the browser leads me to believe that Firebug, as a plugin, won't be around for long once they are all built in.
Goes against normal jQuery/jQuery-plugin architecture by extensive use of requiring **`new`** everywhere. Also....let's talk about globals. classes = { Validator: Validator, LengthValidator: LengthValidator, EmptyValidator: EmptyValidator, PassValidator: PassValidator, Validators: Validators, ValueValidator: ValueValidator, EmailValidator: EmailValidator, RegexValidator: RegexValidator }; for (exp in classes) { window[exp] = classes[exp]; } That is a **lot** of globals for such a simple script.
The JS you have will basically do the same thing as if you were to hit the reload button on your browser. The nature of CSS is a fluid thing, unless there is some JS that is actually loading or generating CSS you will never have to reload the page to "re-render" the CSS. If you have a JS controlled slideshow this is likely to get deformed on a window resize if it's size is relative to the viewport (size of the browser window). Sorry I can't be more help, I'm having trouble understanding the big picture of what exactly is going on. Sounds like there are several elements at play and you really need to get some handmade CSS in there.
I'm pretty sure that by doing: $.ajaxSetup({ cache: false }); All you are really doing is telling jQuery to append the random value. Seems to satify IE's cache craving quite well.
can you explain a bit in detail? Thanks!
To add some context, $.getJSON, $.post and $.get (the shortcut functions) are all interfaces that wrap the functionality available in $.ajax. Some might consider them convenience methods but when you work with a large project and multiple contributors it's better to standardize on one approach for your sanity. The approach that I've seen work best is to use $.ajax exclusively for a couple of reasons: * **Explicit argument assignment** - the shortcut functions use positional (and optional) arguments and it can be hard to remember what is what when you are reading the source code. * **Self documenting** - When not using all arguments in the options object for $.ajax it is very easy to see exactly what you _are_ using. In short, use this: $.ajax({ type: 'POST', // GET, etc.. url: '/some/url', data: { key: val }, // or form.serialize() for form posts success: function() {}, error: function() {}, dataType: 'json' // 'xml', etc.. }); not these: $.getJSON('/some/url', {key:val}, function() {}, function() {}); $.get('/some/url', {key:val}, function() {}, function() {}); $.post('/some/url', {key:val}, function() {}, function() {}); Also, 1 additional tip. If you can support proper HTTP statusCodes in your responses you can also map those inside $.ajax like this: $.ajax({ statusCode: { 200: function() {}, // ok 500: function() {} // error 403: function() {} // forbidden } }); I find this even more self documenting especially when you can have variable response status codes from 1 endpoint. When in doubt, read the [source](http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.js) first and then the [docs](http://api.jquery.com/jQuery.ajax/)
I prefer if JQuery i*f* does it. In any case if it solves the caching issues with IE, I'm happy. I shall test it with Firebug open to see how it works.
Up voted because this is exactly how you should do it. The convenience methods cause more confusion than they solve. It's easier to read and understand the explicit $.ajax code, making refactoring and maintenance much much easier.
Its ok for your loop to use more than one second. This is premature optimization. JavaScript is single threaded. It will finish whatever its doing before it executes the next timer. That's why setInterval() and setTimeout() are not always on time; they can drift.
Yup. Not too great. :( Perhaps something along this would work: $('form').validate({ fields: { 'input': $.validators.empty, '#email': $.validators.email('Please enter valid...'), '#pass': $.validators.length(6, 'The password should be...') }, onSend: { ... } }); I think it's a little prettier to bind the validators to the $ directly. I'm not overly fond of the usage of ids. Perhaps it would be neater to refer to the fields using their names instead. Overall I would rather solve this problem driven by my backend. Ideally I should be able to generate a form based on some given data model and then attach validators like this dynamically (this phase should bind i18n strs too). One benefit of backend driven solution is that this allows you to validate the data twice. There is no guarantee whatsoever that the data the user passes to the server is valid (it's easy to bypass the validation).
I like [jQuery validation](http://bassistance.de/jquery-plugins/jquery-plugin-validation/). It integrates with ASP.NET MVC's DataAnnotations attributes (disclosure: the plugin was written by Microsoft), but it is also easy to use in other languanges/frameworks (I use it with Python/Jinja2/WTForms). It has simple class-based validation as well as more complex rules configured via javascript (or magically transferred from the DataAnnotations in ASP.NET when using the HtmlHelper extension methods in your views).
It seems to me that sometimes you actually want the native typeof-style comparison. Someone please correct me if I'm wrong: var foo = 'test'; var bar = new String('test'); foo == 'test' (true) bar == 'test' (true) foo === 'test' (true) bar === 'test' (false) typeof foo (string) typeof bar (object) Object.typeof foo (string) Object.typeof bar (string) If you used the typeof mentioned in this article to check type before doing an === comparison, you might get unexpected results. Doing a plain old typeof and checking for string would ensure your === comparison worked as planned. I haven't really thought this through too much so, again, someone please point out whatever mistakes in reasoning I'm making here.
Have a global variable *score*. duck onclick="score++; document.element.text = score;" I must be misunderstanding the question... disclaimer: If it's not obvious, that is not real code that I posted; it's just what your code should kinda sorta look like.
I'm a little confused by your confusion. The scoring system seems to be the easiest part of a duck hunt game. Do you already have "ducks" ? How did you do those? Where exactly is your problem?
I've managed to pull the ducks together using some basic random image rotation and animation code, but i've just been struggling to get my head around a points system for some reason.
The only non-ugly way would be to actually fix the css. If the issue is with the file you can always load your css with a bunch of !important (I'm gonna throw up here). If by re-drawing you think you can fix it, check this: http://www.javascriptkit.com/javatutors/loadjavascriptcss2.shtml You can add and remove the css dynamically (I'm getting really sick here). Anyway I think the issue shouldn't be just on the css (from your explanation). The most probable thing is some javascript calculating where to place something and not updating when resizing, so you may have to hunt and check it. Check particularly if the broken elements have in-line styling (style="position:xxx;left:yyy;right:zzzz"). Or it might just be that the whole styling is meant for a particular size and breaks otherwise. Tell the big bosses to fu*k off and let you do your work.
As a web designer, the three sentences in the parentheses are grounds to drop them as a client, at least in my book.
He's right. Using JS to fix CSS that was bad in the first place is like using duct tape to hold up a falling building. You need foundation of solid HTML and CSS before you get in there with any JS.
Take a look at [this screenshot](http://d2o0t5hpnwv4c1.cloudfront.net/412_ajaxCalls/images/firebug_load_4.png) from the posted article, the _ parameter listed is the random seed that jQuery appends to the request when you use the code that LaughingFridge posted.
I've had good success with the jQuery validation plugin as well. It also integrates nicely with the [jQuery form](http://malsup.com/jquery/form/) plugin for doing automated ajax submits with validation.
I know it seems like a prop-job, and I am not a fan either. I had to fight tooth and nail to get them to let me use ASP.Net, and not just ASP. I feel like starting another battle would probably leave me jobless... You guys are helping immensely so far, I have been able to fix all but two or three issues so far. A few were CSS issues on my part, and several others have been JS writing. They added position:relative; to everything except of course the borders which is what was making everything move within the page. Still working on the rest. Thanks guys!
That's pretty much what [jquery validation](http://bassistance.de/jquery-plugins/jquery-plugin-validation/) does (with simple rules specs), and for simple rules it can even take advantage of in-markup attributes (such as the HTML5 form validation attributes), which is pretty cool.
Interestingly enough the refresh button, and "F5" worked. They popped up the "Need to resend data" dialog box, and the slideshow would appear. It was something with the resize, and that script that is causing problems. In an effort to make my question more clear, what I am trying to ask is does location.replace(location.href) actually cause the ASP.Net page to unload, and then begin a new lifecycle as a new page? Or does it trigger a Page_Refresh event that I can catch and work with? You guys have helped a lot so far, I'm just trying to understand better. Thanks!
Whenever a duck is clicked, just increment a variable holding the score, and update it on the screen. Simple as that (look at drewmeisters comment for actual code).
As drewmeister said, just have a global variable. I would probably update the score through a function though: var score = { points: 0, ducks: 0 }; // This will allow you to have different points per duck function duckShot( points ){ score.ducks++; score.points += points; /* Possibly hide the duck that has been shot? */ updateScore(); } function resetScore(){ score = { points: 0, ducks: 0 }; updateScore(); } function updateScore(){ // update &lt;div id="score"&gt;&lt;/div&gt; document.getElementById('score').innerHTML = score.points + " Points. " + score.ducks + " ducks MUURRRDEERRED"; } Then every time you either fire an event for a duck being show just call duckShot( 100 ) or whatever. You could also include the code for hiding the duck layer there after it has been shot. 
I work in local government, so they're not really clients as much as they are the main IT group. It's a complicated structure, but essentially I am on a team of people (2 guys) managing one specific section. We are placed organizationally underneath the main group. This has obviously been the source of much frustration, and we are trying our best to make our section as independent as possible. As a personal aside, the main group is a group of older "gentlemen" that I think prefer the if it ain't broke don't touch it method. This leads to a lack of plans, etc. when things do break/need updating. (We have an enterprise assessments and collections system running on outdated servers at 100% with 1 processor broken, it took them three days to bring the network access drives back up by running a process with no progress tracking, and no estimated completion time, so on and so forth). /end personal gripes Anyways, my resume's being aggressively floated around :D
are you already able to detect whether the user hit a / the duck or if he missed? 
Ah, thank you, I didn't notice. Many thanks.
Jesus H. Christ. There are so many things wrong with your situation and the increasingly baroque workarounds you're being forced into that I can only interpret this post as being a complex and subtle attack on the lives of all the web developers and javascript programmers who frequent this community... ... because if this *isn't* a cunningly-crafted attempt to progressively raise our blood pressures until we explosively haemorrhage from our every bodily orifice then you deserve more sympathy than I'm *biologically capable* of giving. :-( TL;DR: I hate to be one of *those* guys, but don't solve the problem; quit your job, and burn down the building on the way out. Then get a job licking public toilet bowls clean - from the sound of it it'll be less degrading to you as a professional web-... well, *anything*. &lt;:-)
Realistically simulating piled-up objects (such that they don't wobble a lot) is **hard**. You're probably better off sticking with an established physics library for that. However, you might be able to use more efficient collision detection than what is supplied (I don't know box2d so I don't know whether those are separable components), since your "grapes" are presumably all circles.
Come at me bro.
Its actually a very impressive library, I have find a little difficult to find good resources about it, but without doubt it seems to be the very best physics library out there. I found a fork of box2djs that uses SVG instead of canvas and that makes it a lot more efficient (IMHO), here it is, check it https://github.com/hrj/box2d-js
You might be right, I'm still very new to all this physics/animation thing so I for sure I'm doing more than one thing the wrong way, I'll try to release a demo I just made to share what I learnt. One thing that I "improved" on the libraries is that all of them rely on js timeouts, I used the requestAnimationFrame thing and it is doing very good.
Indeed its quite hard, a lot of mathemagics in there, its just sad to realize how much I have forgot about trigonometry and all that in the past years :( Actually the grapes are an example, and I need it to be flexible enough to even handle complex shapes as stars or irregular shapes, I think box2d is the only library out there capable of it. Thanks anyway.
Thanks for your support, it's been a journey. I am fresh out of college too, so I have been trying to teach myself, and use industry standards on my own. (They got angry when I tried using Hungarian notation). Plus I have no real oversight which I regret because I get very little feedback on my coding style/inefficiencies which I would appreicate being a budding software developer. Yea it was funny because I spent the better part of the past 4 or 5 months of my life converting what they copy pasted from ASP to ASP.Net, and they still used ASP for their page. I think this is funny because they send the pages to non-technically savvy people. In essence they send a web page that recreates the wheel (the entire surrounding template) to people that have no idea what they're doing, and pray they don't edit outside the lines. Whereas if they'd used ASP.Net like I tried to get them to do, they'd send them a page with: asp:ContentPlaceHolder /asp:ContentPlacHolder and thats about it. Their reasoning for not wanting to? They didn't want to update the .Net libraries from 2.0 to 4.0. After I redid the entire site in 4.0, I then had to go back and try and shoehorn 4.0 solutions into the 2.0 framework. Plus imagine this, as an employee of the IT industry, and a technically savvy person, requesting, and being denied 3 times, the ability to access your own production web server. So you have to make a request as a "Webmaster" to the "Main-Webmasters" to upload from development to production. If you want more, I can certainly keep going, but I definitely don't want to cause massive internal bleeding so I'll stop there for now :D
Wow, this was the best explanation of prototypes i've ever seen.
&gt;I'd be massively grateful if someone could give me some idea as to where to start [...] Sure thing, pal. Learn the basics. Use a book for that. It's the most effective method. Asking other people beforehand is a waste of everyone's precious time. Teaching a whole class is already a massive waste. Teaching just one person is 15-30 times worse. It won't help anyone else. Seriously. Books are awesome for this. They are cheap, cover all basic things, the pace is up to you, and they usually explain things in sufficient detail. Quickly written replies will never be as good as a somewhat decent book.
Going freelance may be a good option. :-)
Why not just wrap this in another anonymous function that is called at once? var Foo = (function () { function Foo() { }; Foo.prototype.bar = function() { }; Foo.prototype.foobar = function() { }; return Foo; })(); Or I guess rather, I think hashmap usage probably exceeds "class" declarations in inconvenience. 
Please correct me if I'm misinterpreting your intent, but... function gEBCN_ie(classe) { el_body = document.body.childNodes; ts = new Array(); for (var i = 1; i &lt; el_body.length; i++) { Both of your for loops that iterate over elements are starting at 1. `NodeList` objects such as `document.body.childNodes` are zero-indexed. Perhaps that's why your function is skipping the first element?
What's wrong with using jQuery?
I don't fully understand childNodes and when I tried a couple of month ago, it was with an xmlhttprequest and el[0] was the same element (el_body[0] = document.body).
I don't know how to use jQuery and I prefer to stick with some classic javascript code.
Hi, my 2c. 1) Your gEBCN_ie loop is going from 1 to length, I really think you should start from zero ;) 2) INstead of document.body.childNodes, why don't you use getElementsByTagName('*'), I think that will filter out all the text nodes. 3) I really think you should re-think all this translation approach, because its not very SEO-friendly :)
Thanks. I didn't know that you could use *. I will upvote you then I will try your code ;) 
chromakode already gave you a good answer to your question. So, this just an unrelated suggestion to improve your code. You should be using object literal initialization for your array. It's faster and less error-prone: var texte = [ [ "Rechercher", "Ou...", "Créer un profil" ], [ "Find", "Or...", "Create a profile" ] ]; Of course, if possible, you should be doing your internationalization server-side to reduce the size of your downloads to the user.
I would recommend using firstChild and nextSibling instead of childNodes. I find it makes the code a bit cleaner.
 It's nice to learn how to do it in straight javascript, but then you end up dealing with browser quirks, also known as IE suckage. [jQuery class selectors](http://api.jquery.com/class-selector/) &lt;head&gt; &lt;script src="http://code.jquery.com/jquery-latest.js"&gt;&lt;/script&gt; &lt;/head&gt; ... function init() { var tsElems = $(".ts"); for (var i = 0; i &lt; tsElems.length; i++) { tsElems[i].innerHTML = texte[langue][parseInt(tsElems[i].getAttribute("t"))]; }
Thanks for the tip. I modified my gEBCN_ie code and removed sous_elements function. Here is my new code. function gEBCN_ie(classe) { el = document.body.getElementsByTagName("*"); ts = new Array(); for (var i = 0; i &lt; el.length; i++) { if (el[i].className == classe) ts.push(el[i]); } return ts; }
Thanks but I for the server side I prefer using localstorage. But should I put a var in front of texte?
Not sure if....
Sorry my computer didn't copy paste the right thing I meant this: function gEBCN_ie(classe) { el = document.body.getElementsByTagName("*"); ts = new Array(); for (var i = 0; i &lt; el.length; i++) { if (el[i].className == classe) ts.push(el[i]); } return ts; }
Nice :) just in case is needed, remember that className will return the whole string with classes attached to the element, example: &lt;div class="hi world"&gt; The className prop value will be 'hi world' and it will fail if you're looking for 'world', so you can use regex like /world/.test(el[i].className) instead of the == comparison.
Thanks allot. I forgot about that. edit: modified code using now: reg = new RegExp(classe); if (el[i].className.match(reg)) ts.push(el[i]);
You're welcome :)
Everybody upvote this guy ^^^^ He just arranged my ie problems.
Moved this post from a comment, as [snarfy](http://www.reddit.com/user/snarfy) was saying, you could definitely use jQuery. You can easily accomplish all of your code with something like this, it's much more readable, maintainable and will be much much more cross-browser ([here's a working example on JS Bin](http://jsbin.com/ozufej/2/edit#javascript,html)): var texte = [ [ "Rechercher", "Ou...", "Créer un profil" ] , [ "Find", "Or...", "Create a profil" ] ]; var langue = 0; $( function(){ var lang = texte[langue]; $('.ts').text( function(i){ return lang[ parseInt( $(this).attr('t') ) ]; } ); } ); Edit: Fixed JS Bin link
If you like this and program Python, you should check out http://py.codeconf.com
This is so sexy, node.js is going to be a big player in the future of multiuser web apps and games. That being said, I haven't used it but am in the process of trying to write my own back-end to handle MMO-type interactions. emit.on, baby!
Unless you need to support very old (6+ years) IE, this is the natural answer: var Tags = document.querySelectorAll('[ts]'); foreach (Idx in Tags) { Tags[Idx].innerHTML = texte[currLang][Tags[Idx].attributes['t']]; } Relying on libraries like jQuery for something like this is silly, and increases your maintenance cost over time.
He gave you bad advice. It's a two-liner with querySelectorAll and .attributes[]. See post base.
It's wasteful and unnecessary, for one.
&gt; It's nice to learn how to do it in straight javascript, but then you end up dealing with browser quirks, also known as IE suckage. Not really. var Tags = document.querySelectorAll('[ts]'); foreach (Idx in Tags) { Tags[Idx].innerHTML = texte[currLang][Tags[Idx].attributes['t']]; }
I've been following a number of these engines for quite some time, and have been experimenting with one of my own (more-so a general node game server framework, not necessarily isometric-specific). A few videos on the topic in general: * http://www.youtube.com/watch?v=_RRnyChxijA * http://www.youtube.com/watch?v=Ol3qQ4CEUTo Will definitely be reading the docs and signing up for a beta on this one, thanks for posting!
Much better to let the browser handle traversal internally than to do it externally via script. This is a call for querySelectorAll.
Paul Bakaus programmed a very similiar engine (Aves). Sadly got bought by Zynga :/
Consider querySelectorAll instead. Manual iteration is slow, defect prone and extremely cumbersome.
Personally, I don't think it's worth wasting time writing validation plugins that aren't built on html5 design.
How widespread is the browser support on that? Iterating a linked list is generally pretty fast.
Jesus, Aves looks awesome.
Have you come across any other similar products? Looks pretty cool.
I programmed something similar a while back using Python and Twisted (An event driven game backend). Unfortunately it got boring and I moved on. Perhaps I'll pick it up again.
is it open source? most of those "modern browser" game engines are not.
yea... its too bad zynga bought 'em :\
Doesn't look like it - only their premium (1500 $ license) includes the source (though I'd guess since its written in js that just means unobfuscated source - need to read more of the documentation)
Here's my version: http://jsdo.it/bebraw/turtle Overall it's pretty standard. It comes with recording, though. This allows you to define "functions" easily. It's missing some bits and pieces but might serve as some kind of inspiration for someone. There's some good info about LOGO and Turtle at http://el.media.mit.edu/logo-foundation/logo/turtle.html . It would be really interesting to generalize the app into some kind of a sprite engine. I think it might be cool if you could "clone" the turtles and then offset them somehow (follow, link with offset, etc.). There's also some room of development in group behavior (boids and such).
This is well covered by the quora question: http://www.quora.com/What-alternatives-to-the-Aves-Engine-exist-for-HTML-CSS-Javascript-games
I'm not coming anywhere near you.
I'm curious how they've handled the isometric tile sorting/masking. I've played with creating isometric engines in the past and it's a whole lot more tricky than it first seams, especially if you don't want everything limited to a grid.
setting the ducks on fire earns you 100 points
You can, and I do this today, but it still doesn't show the relationship as elegantly as say: class Foo { bar( ) { } foobar( ) { } } To me, that shows the relationship stronger that 'bar' and 'foobar' are methods of the Foo type. It also has the added '(function() {' and 'return Foo;})()' cruft surrounding it. Tbh, this added cruft that JS developers use for writing what are essentially classes and modules, is my number 1 issue with JS.
BTW, you should declare your local variables to avoid potential side effects.
Instead of another downvote, here are a few thoughts: - jQuery decreases maintenance cost, as any junior dev/back-end dev/designer/etc. will know exactly what's happening when they see Sizzle syntax - jQuery (at least for the foreseeable future) helps future-proof your code against mobile/tablet/television/etc. environments - unless you're not planning on supporting &lt; IE9, you'll need a forEach shim - there *should* be a hasOwnProperty test inside that loop to avoid going up the prototype chain - you *should* avoid starting variable names with capital letters, as that's the conventional way of denoting a constructor function
Again.
These problems you're having -- they were solved _years_ ago. It's foolish not to leverage the knowledge and work of others.
Lets keep this up, it's almost like we're in IRC bby.
Every browser since 2003. And if you think walking the DOM tree is iterating a linked list, well, you're in trouble.
.8=d
&gt; jQuery decreases maintenance cost No, it doesn't. This is a static two-liner that's worked unchanged for seven years. The jQuery equivalent has needed four bugfix library replacements over the last two years alone. &gt; jQuery (at least for the foreseeable future) helps future-proof your code No, it doesn't. This is a static two-liner that's worked unchanged for seven years. The jQuery equivalent has needed four bugfix library replacements over the last two years alone. &gt; unless you're not planning on supporting &lt; IE9, you'll need a forEach shim What are you talking about? foreach works fine in old ie. Did you think I meant `for each`, which is a different operator? &gt; there should be a hasOwnProperty test inside that loop to avoid going up the prototype chain Why? We're seeking DOM nodes with a specific property set. There's no going up the prototype chain here. Either the developer wants the DOM node targetted or they don't. Please provide a simple code example which shows the problem you're trying to discuss. I can't decide if you've made a mistake, or if you have a real concern which is just being incompletely communicated. &gt; you should avoid starting variable names with capital letters Oh god, you're so desperate to pad out your list to make it look like a legitimate crititcism that you're telling me how to format my code? &gt; as that's the conventional way of denoting a constructor function No it isn't. Also, what I did isn't a constructor. Good lord.
.8=d |@ TEMPACCOUNT09
/kban ukdkbr
14:47 -!- #subreddit You're not channel operator 
/msg poutine ban ukdkbr please
/msg martinp23 can you kline abarrett plz?
umad bro?
Show me your pussy.
That reminds me, how's Sam?
Iterating the linked list of children replaces counted iteration, not the recursive step used to dive into the DOM. Question: "How widespread is the browser support?" Answer: [CanIUse.com](http://caniuse.com/queryselector) Summary: Fine unless you need a version of IE before 8 or Opera Mini. That would worry me.
Does anyone have any idea how they're persisting the data? Is everything being written / read from a DB rather than stored in memory? I've been doing some digging on node.js and it seems to be pretty stateless but that could be just the samples I've been looking at.
Damn you.
Go stalk Morgan's fetus.
Building object systems from functions is fun and makes for a better understanding of object systems. You'll see people do it in Scheme a lot, http://learnmeahaskell.blogspot.com/2011/01/redux-sicp-and-subclass-implementation.html , probably because they do it in SICP or maybe because Scheme is awesome. I personally started understanding Javascript when I decided it was a bad syntax on top of Scheme, but it's object system makes it more like a bad syntax on top of Self.
Sounds like they're using MongoDB. Pretty cool. http://www.isogenicengine.com/documentation/setup-your-environment/
$(this) should (theoretically) be the link element wrapped with jQuery. (or prototype?) setKarma probably checks the links 'href' or text value at some point to decide on an action.
This sounds about right. Not how I would do it, but there is no accounting for taste. My guess would be that it uses the text (+/-) to up/down vote, and the links are there in case JavaScript is turned off.
This is correct. I turned off javascript and the page would refresh each time the + or - were hit.
http://www.newschoolers.com To see the karma rating you will need to view a member of the site. The owner of the site is here. I picked his because if any of his "karma" were to be tampered with he could probably fix it lol. http://newschoolers.com/ns/members/profile/member_id/1706/ 
setKarma($(this)) is basically calling a function called setKarma and giving it a parameter, something it needs to run it's logic. If you look for the setKarma function definition (it might be in a separate .js file included in the html header) you should see what's actually going on. The parameter $(this), though, is actually the result of another function call. The $ is actually a function, similar to setKarma, and it is given 'this' as a parameter. Most likely the site uses [jQuery](http://jquery.com/). See [this](http://stackoverflow.com/questions/306583/this-selector-and-children) for an example. Note that this function runs first! My guess is the setKarma function will have a test to figure out whether it was called through the + link or the - link. If it was the + link, it'll increment some variable and write it on the page. If it was the -, it'll decrement the same variable and write it on the page. The key is the function knowing which was clicked, + or -.
&gt; Iterating the linked list of children replaces counted iteration, not the recursive step used to dive into the DOM. You seem to be missing the point. In one case, the browser iterates the DOM; in the other case, userland code does. Your discussion of iterating the result list is a non-sequitur. &gt; Question: "How widespread is the browser support?" &gt; Answer: CanIUse.com &gt; Summary: Fine unless you need a version of IE before 8 or Opera Mini. &gt; &gt; That would worry me. That's nice. It's not what you said before - "before 8" is not the same as "before nine." It's also not correct: qSA works in IE7, and just doesn't support all selectors. It *does* support the selector I mentioned; just try it, instead of referring to daft webpages which make broad claims, then assuming they apply in context. But yeah, you're totally on-base criticising someone for something they said before you spoke up.
I can't look at source on my phone, but the function almost certainly takes $(this), grabs the href attribute $(this).attr('href') or something, and makes an XHR with it. $.ajax($(this).attr('href'));
pretty obvious mumblings of Old Wizened Wizard ;) anyway very nice and quite funny (i laughed) video. It seems that Crockford is quite good spiker. I enjoyed it.
&gt;Why? We're seeking DOM nodes with a specific property set. There's no going up the prototype chain here. Either the developer wants the DOM node targetted or they don't. The OP didn't explain it fully. *hasOwnProperty* is required if they're using a library that pollutes the namespace (like Prototype does/used to do) or if they have polluted the namespace themselves. Otherwise the loop iterates over every property that the object has inherited through the prototype chain. In this case it would be the properties of the Array object. What this means is that in some cases *Tags[Idx]* will return undefined, which means that you will get an error when you try to access the *attributes* property. Also I think you meant: for(Idx in Tags) and not: foreach(Idx in Tags) Typically for arrays I use the traditional for-loop syntax since it has a known length, and I don't have to use the *hasOwnProperty* test either. [More information](https://developer.mozilla.org/en/JavaScript/Reference/Statements/for...in#Description).
&gt; hasOwnProperty is required if they're using a library that pollutes the namespace (like Prototype does/used to do) or if they have polluted the namespace themselves I still don't understand why this would be a problem. I'm only gathering the nodes that already match the property, and once they're gathered, I only work directly with the property. It shouldn't matter whether the prototype has been polluted. Thank you for taking a swing at completing the criticism. I'm worried there is actually a problem here which I just don't get. &gt; Also I think you meant: `for(Idx in Tags)` and not: `foreach(Idx in Tags)` 's possible. I don't do a whole lot of ECMA these days.
&gt;I still don't understand why this would be a problem. I'm only gathering the nodes that already match the property, and once they're gathered, I only work directly with the property. It shouldn't matter whether the prototype has been polluted. Yes, the array itself only contains the elements you need, but the *for...in* construct iterates over the properties of an object. The second argument in *for...in* specifically takes an object. So when you iterate over the properties of the array, you get the subscripts *and* any properties of the array object it may have inherited through the prototype chain. So assuming Prototype, or somebody played around with \_\_proto\_\_ and added a property called *foo*, you would encounter this property inside your *for...in* body. So you'd essentially be accessing *Tags["foo"]*, which is *undefined*. The *hasOwnProperty* test fixes this by ensuring that the property you're currently looking at is actually the property of the object and that it hasn't been inherited through the prototype chain.
Agreed. I really appreciate the quips about design decisions (JS and C) and which language features are artifacts, leftover from ALGOL, Fortran, etc.
So far as defined in the [FileList API](http://dev.w3.org/2006/webapi/FileAPI/#dfn-filelist) I don't think this is possible. Are you trying to block a certain type of file, client side? Perhaps it would be better to just define what types of file you want to allow via markup, e.g. http://dev.w3.org/html5/spec/number-state.html#attr-input-accept
No, I've done validation fine. But I can't actually stop things beyond that: what's to stop someone adding the same file twice in two separate elements? I don't want to cancel the other things they may have selected. Also, if they want to remove anything before uploading it isn't possible. I've been looking at the same link you posted with frustration. It's been a long day! Thank you for helping me anyway. If you see anything that can help me I'd really appreciate it!!
I don't know the answer to this one, to be honest. Would it be possible to get the file data, replace the node, and insert the data into the replacement node? At least as a hack.
AFAIK you can't copy from one file input element to another. If you could it would solve all my problems.
A method to restrict a function from access outside of it's own scope. Unless JS has that already and I forget how to do it.
I liked that, too. Interesting stuff. I like listening to him speak. He's good at it, comfortable, and engaging to listen to without overdoing it. I don't necessarily agree with all of the recommended style conventions jsLint enforces, but I agree with the overall message.
&gt; I don't necessarily agree with all of the recommended style conventions jsLint enforces, but I agree with the overall message. Not to call you out really but.. the central theme of this talk seems to be that this mindset is often a mistake. A mindset which Crockford himself, as well as developers everywhere, have stumbled on over and over again. I'm not saying his ideas aren't up for debate but it seems unlikely that many of them are wrong given the amount of effort he has spent on JSLint and being as objective as possible. Can you elaborate on the background of this statement with respect to the talk ?
Yeah you gotta respect the man. He really does a good job of simplifying concepts in order to move forward discussion. The head/gut model isn't new but he ties it in well with programming. It is just another reminder that in many ways it is unnatural for us to sit at a desk 8 hours a day and try to make perfect things. His other idea that forms that hide defects should be considered defects I think is understated. This should be an axiom in Software Engineering. All langauges introduce these forms to some extent but I think JavaScript especially has too many of these forms.
I just threw up a little in my mouth. This, in a comment chain where someone else claimed using libraries like Prototype makes code more maintainable. Thank you for explaining that. I now want to punch ECMA-262 in the face. Please enjoy an upboat on me, and if you find yourself in the Washington DC area, a beer or two as well.
yeah me too, if you don't understand something as simple as incrementing a variable, how in the hell did you write the rest of the game?
As far as I'm aware, you're not allowed to mess with file input elements client-side (other than basic DOM manipulation eg). If you were desperate, you could use a Flash alternative. But then, you know... Flash.
Oh, I don't necessarily think they're wrong. A consistent, non-cluttered coding style makes life easier for anyone inheriting a project or reading any 3rd party code. I just think they're, in some instances, overkill. Take these two object definitions, for example: var foo = { property1:"some value", property2:"some other value", property3:"some third value" } var bar = { thing1:"some thing", thing2:"some other thing", thing3:"some third thing" } That's almost about as simple as you can get in terms of doing anything in JavasSript, yet jsLint will throw no less than 8 errors, because it's not: var foo = { property1: "some value", property2: "some other value", property3: "some third value" }; var bar = { thing1: "some thing", thing2: "some other thing", thing3: "some third thing" }; when the former is perfectly legible and valid. Is the latter cleaner? Arguably so, but it's largely a matter of opinion. I'm not a fan of ASI in a lot of instances, but I don't see the point in adding semi-colons after curly braces, either (but hey, if I'm missing out on some good reason to do so here, by all means, tell me). The first example, if adhered to consistently, is just as legible. Now, the suggestions jsLint makes with regards to the format are fine - nothing at all wrong with them. I just don't think they're exactly necessary, either. Don't get me wrong. I'm a stickler for formatting my code consistently and legibly. I can't stand messy code. But I think as long as something is formatted neatly and with consistency then there's nothing wrong with: function foo (test) { // do stuff... } vs. function foo(test) { // do stuff.... } for instance... i.e. I personally dislike putting the curly braces on their own lines like that, but I also don't find it any more difficult to understand and know a lot of developers who prefer it.
AFAIK this can't be done. What you can do is get one or many File objects from the FileList and send them as AJAX requests. Browser needs to support the File and XMLHttpRequestUpload APIs, available in at least Chrome and FF4+ (not sure about Safari and Opera). I think IE10 will support all these APIs as well. Sadly FF3.6 supports &lt;input file multiple..&gt; but not these APIs. I'm not speaking from experience so I may have some details off, but I've done a bit of research on this as I have project that will need to do something similar to yours. I highly recommend you check the source code of the [jQuery File Upload plugin](http://aquantum-demo.appspot.com/file-upload).
 var bar = { thing1:"some thing", thing2:"some other thing", thing3:"some third thing" } (5) fail.js:6: TypeError: object is not a function (Note: I generally agree with your points about optional spacing and indentation, but as someone who has written a compliant JavaScript parser, I must point out that the semicolon thing is insidious.)
Do you understand functional programming? If not, then we can't explain it to you like you're five. http://www.bogotobogo.com/python/python_fncs_map_filter_reduce.html There's the baby-basics in Python. Readily understood by anybody.
Sure thing :) Except I don't think I can manage "like I'm five". So, you've heard of JQuery right? JQuery wraps elements so that they are nicer to interact with. Instead of writing: document.getElementById('myelement').style.height You can write: $('#myelement').height() It also removes browser inconsistencies by giving a single common interface, which is handy, because browsers are very inconsistent. Underscore is similar, except it wraps JavaScript things (like Arrays, Functions and Objects) to give them extended functionality. Many of these functions are available in more modern versions of JavaScript, but as usual browser inconsistencies don't allow you to use them. As an example. Let's say you made a server request and got back an array of users: var users = [ { name: "Steve", age: 18 }, { name: "Dorothy", age: 23 } ]; And you wanted to get just the names. You could do this: var names = []; for(var i = 0; i &lt; users.length; i++){ names.push(users[i].name); } Which is perfectly valid. But if you had underscore you could do this: var names = _(users).map(function(user){ return user.name; }); This is slightly more succinct. Often you will find that programmers make a trade-off between development speed and the amount they need to know. Languages like Python and Ruby are fast to develop in because they have extensive libraries and language features that do complex things with simple syntax. However it often takes a long time to learn all of these features. Underscore is trying to pull many of these features from other languages and put them into JavaScript. Feel free to ask more. PS: As an aside, my above example in CoffeeScript would be names = (user.name for user in users)
&gt;var names = _(users).map(function(user){ return user.name; } He has no idea what this means, or what map does. Do you realize this?
Read this: http://www.joelonsoftware.com/items/2006/08/01.html
I realise. I'm explaining the idea of Underscore. There's much too much to actually explain the library. This is a start that will spawn more questions like "what does map do?" (as you picked up).
Let's say I want to create a function f(v), where v is a collection of objects, and f creates some new collection of objects, not necessarily the same. Let's say I already have a function g(x), where x is a single object, and g creates a new single object, again not necessarily the same kind of object. But let's say g(x) produces the same kind of object(s) that f(v) would produce. I can create a function h(v, g(x)) which takes a *variable* v and a *function* g, and h(v, g(x)) = f(v). So I'm passing g as a kind of variable, a pointer to a function that performs g. For example, I can make a function sum (a, b, f(x)) = {sum =0; for x &lt;- a to b do sum += f(x); return sum; } And then I can make some g(x) = 1/(x^2) (or whatever) and then call "sum (0, 10, g)" and it will do the addition for me. And "v map { _ =&gt; g( _ )}" just does some function g for all elements in a collection v. "{ _ =&gt; g( _ )}" is an unnamed function that I can pass to map (or collect/reject/select ala Smalltalk). The underscore just says, whatever the current value in v I'm looking at "_", do g(_) and add the result to a new collection. "_" is just a placeholder for the current variable in v. That's "functional" programming, and it reduces code size and complexity roughly to half of the number of lines of code. By passing functions (essentially pointers to functions) to other functions, we can built up the ability to perform calculations without having to type as many for or while loops. underscore.js adds enhanced ability to do functional programming in javascript.
You're missing a # in your jQuery selector. ;)
Simply put, underscore.js allows many functional constructs to be added to javascript. Functional coding concentrates on expressions that work with collections of data. The technique minimizes the need for variables to maintain state while looping/processing a given procedure. It treats functions as first class citizens and can therefore create functions that can have other functions as arguments and can also create and return functions from within functions! (also known a higher order functions). The minimization of state also allows for better functional cohesion. A side benefit is that functional coding can more easily take advantage of multi-core processors as since they are not directly tied to state as methods in imperative languages are, they can easily be shuffled off to other processors. Underscore.js (which is pretty much a standard now) is an amazing piece of software which makes JS come into it's own as a player into the functional landscape which is shared by (haskell, scheme, erlang, clojure/lisp, ocaml/f#, ...) I really urge you to study underscore.js as it's as close to a work of art as any software that I have ever seen. 
I realized this when running over my reply in my head after I left work. Let's just assume that the element also happens to be a "myelement" tag :P
Don't downvote this guy, as he's probably right. I imagine the functional nature of map, select, etc is what's confusing to the OP.
Sounds pretty readable to me. It's another library that is trying to "fix" JavaScript and adding stuff from other languages – classical inheritance, functional operators, etc.
Java and javascript, two totally different beasts. I'm sure /r/java schooled you on that one. So help me understand your problem-- that is, what you're trying to do. You have this .js file that you've linked to, what exactly are you trying to do with it? Just use one of the functions to modify a variable elsewhere? It might help if we saw the code that you were trying to make use this .js file.
If you nip over to the [site I'm working on, the unit converter](http://www.foamcutters.co.uk/) (left bar, below)-- I need to REMOVE the other unit conversions- so ONLY LENGTH is there. I simply don't want or need the volume/temperature, etc etc etc. Is that clearer? Thanks, btw. edit: in fact, to lose that 'conversion type' would be ideal, leaving only the two measurement parts.
I like the way you think.
Wait, I think you missed the 'Like I'm five' part... &amp;#3232;\_&amp;#3232; 
Ok, it seems the code you linked to populates that pulldown by calling loadCategory() which calls PopulateComboBox("CT"). Line 72 is the one you're interested in: &gt; var CTArray=new Array("('Area', 'Area')","('Length', 'Length')","('Mass', 'Mass')","('Temperature', 'Temperature')","('Volume Liquid', 'Volume')","('Volume Solid', 'VolumeDry')"); Change it to: &gt;var CTArray=new Array("('Length', 'Length')"); And everything else should vanish. That's my 5-minute guess, anything more will cost ya. :)
Whoa, thanks. I appreciate your time- I guess it's like the karma going around on techsupport coming back to me :-) especially because I have no idea what a .. whatever you described... ehheh
Hey heyyy! it worked! thank you ever so much!
Heh, no problem. Just be glad the code you linked to was clean and easy to read or else you would've been on your own. Functions and arrays are programming 101, the first is basically a set of instructions for the compiler/ interpreter to process, the later is just a list of things. The only real 'tricky' part of the code you linked to is how it gets its input-- via those dynamic getElementById() calls. You can also delete all of the arrays at the top that aren't the Length or CT ones.. or you could just leave it be since it's working. :)
Let's take forEach that work in all modern browsers https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/array/foreach if you try this code [1, 2 ,3, 4].forEach(alert); on every modern browser it will loop and alert: 1 then 2 then 3 then 4. forEach is cool and is used for loop through arrays, unfortunately forEach will not work in older browsers like Internet Explorer 6 or 7 or 8. That is why underscore.js is used. The same code in underscore will be: _.each([1, 2, 3, 4], function(num){ alert(num); }); And it will work in older browsers. The purpose of underscore.js is to bring cool stuff from modern browsers into older browsers. underscore.js also provides some utility functions like template, chaining and other cools stuff.
Let's say you have some data, a bag of M&amp;M's. With underscore, you can apply really simple functions like: Give me the red ones: _(mm).filter(function(m){return m.color === "red;}) How many red ones are there: _(mm).count(function(m){return m.color === "red;}) What colors do I have: _(_(mm).map(function(m){return m.color;})).unique() edit: formatting
\I think I'll leave it. It's not my field. HTML &amp; CSS, fine. Java... might as well be martian tongue.
var names = _(users).pluck('name') is even more underscore awesomeness :)
Sadly it's a bit buggy. I think it has problems with words that contain a "t".
And, thank you. That's all the argument I needed. ; it is, then. :)
Personally, while I really like the /idea/ of undersscore, in practice I would much rather use native methods with shims for non-supported browsers (in this example, I'd much rather use arr.forEach(function(){}); syntax with a shim for IE&lt;9)
&gt; It's the tie to go along with jQuery's tux I think your example may not be the best, since jQuery actually has a fully-funcitonal _map_ implementation: jQuery.map(users, function(user){ return user.name; }); &gt; ["Steve", "Dorothy"]
Thanks for linking one of my favorite articles from Joel. This is a concept that I wish I could drive home to more developers; specifically, this one section: &gt; The really interesting thing I want you to notice, here, is that as soon as you think of map and reduce as functions that everybody can use, and they use them, you only have to get one supergenius to write the hard code to run map and reduce on a global massively parallel array of computers, and all the old code that used to work fine when you just ran a loop still works only it's a zillion times faster which means it can be used to tackle huge problems in an instant. &gt; Lemme repeat that. By abstracting away the very concept of looping, you can implement looping any way you want, including implementing it in a way that scales nicely with extra hardware. This fundamental notion helped me to finally grasp the concept of mapreduce (and why it's such a big deal), and is one of the few articles that has had a large impact on the way that I write code.
You know how jQuery makes a convenient API, i.e., makes JavaScript easier to use? Underscore does the same thing.
Just skimmed the article but WOW it looks like a great one! I've been waiting for an article like this for a long time. Not only is it very well organized and written, with a ToC (who does that anymore? I wish more did...), relevant diagrams (but not too many), links to external resources, links to relevant standards (w3c.org), BNF, and the list goes on. It's been a long time since I've seen an article that was as well put together as this one. p.s. it looks like the same content is also found in a slightly different style on the [author's homepage](http://taligarsiel.com/Projects/howbrowserswork1.htm).
Why are you doing this? There's _not that much code_ there to start with, so I don't think there's really a need -- from a performance standpoint -- to prune out unused code.
Great article. All web developers should give this a read.
what's a shim?
A shim is a small piece of code that checks for the existence of native methods, and if it doesn't find them, provides a standard-compliant implementation (augmenting, for example, Array.prototype with a forEach method). There is a fine line here, as I see no problem with augmenting native objects with standard methods, but abhor tacking your own custom methods onto the native objects. An example of several shims: http://stackoverflow.com/questions/2790001/fixing-javascript-array-functions-in-internet-explorer-indexof-foreach-etc
We only work in length measurements, there's no need for the other conversions; they distract customers. This is a stop gap solution until my brother can implement it in the main part of the page; where the calculation is made for the pricing of the product.
I had a similar idea few weeks back! Anyways very well done :)
Thank you, I'm glad you liked it
underscore.js is what daddy uses late at night when he doesn't want to manually iterate over you mothers objects
I assumed because he equivocated to getElementById(). But it's a silly argument to have anyway; we all make typos and it was prety obvious. We've all had that 10 minutes of refresh, comment, refresh, wondering where we made a grave coding error, only to realize that it was something pretty basic.
Great read! [I thought this was going to be a repost](http://i.imgur.com/S0sQ7.jpg)
In fact, it's pretty much completely built out of open-source technologies. Ubuntu, Nginx, Node.js, MongoDB, Express, Cluster, Handlebars, node-mongodb-native, npm, Google Prettify, Git More info here: http://new.yuilibrary.com/about/
by sticking to putting curly braces on the next line, it increases the chances for the 'return gotcha' in javascript, which is why it is always best to put curly braces on the same line. function foo(test) { //something in here } will inveitably lead to: return { //something in here } and this will not do what some people think it should.
nice!, will this handle ssl as well?
Animated gifs run like turds on mobile browsers. Will definitely be giving this a shot for my latest project.
I'd like to suggest JavaScript: The Good Parts or Object Oriented JavaScript. But, tell us what you want to do with js?
This is absolutely true. The best part about Javascript is it is such a simple language. By being so simple and straight forward, it makes it possible to emulate just about any feature that is normally sugar added to another language. E.g., someone else mentioned they wanted "native, efficient promises". **Bullshit**. There is nothing processor intensive that a Javascript implementation of promises needs to do, so why have it be native? You can just run someone's implementation of promises and it should work *exactly like if they were native*. A map type? Here's your map, guy: {}. {}.hasOwnProperty('key') -&gt; false. Done.
A function to keep people from messing with Javascript as it currently is.
Javascript: The Definitive Guide is/was one of the decent books but for the most part they're all the same. Learning js without jquery will possible give you more of an insight as to why jquery is so nice and a decent enough understanding of it's internals. I can't remember but I think ie &lt; 9 is js1.5. The better way to handle different browsers is to use [object detection](http://www.quirksmode.org/js/support.html) There's a lot to learn without going to newer versions that support html5.
They're called closures.
&gt;tell us what you want to do with js? I'm not entirely sure yet. I started learning python a few months ago and found that really enjoy programming. So now I'm branching into the web part of things. I'm almost done with an HTML/CSS book, I figured the next logical step would be to tackle Javascript. I thought JavaScript handles all of the fancy interactive stuff on the web, no? 
As HTML 5 becomes more and more popular will that phase out jquery? (I'm completely in the dark on to why this would be. I'm just going off of a random amazon comment) 
&gt;JavaScript: The Good Parts It's awesome if you already know some C-like language and if you know where to look for API stuff ([hint](https://developer.mozilla.org/en/JavaScript)).
There is a little overlap between jQuery and more modern DOM features, but there also many areas that are not really connected to each other. jQuery handles a lot of crossbrowser issues for you and people are usually slow to update, so you will have to cope with older or retarded browsers. jQuery detects some of the relevant features and uses them to speed things up, and as I said lots of parts are orthogonal. You can very well use e.g. jQuery and HTML5 canvas together. Note the jQuery also offers a more fluent way to express things, making your code much shorter. These advantages are not really touched by HTML5 either.
Still waiting for the example to load...
This implementation doesn't come that cheap either. I can see a noticeable increase in my cpu meters with the spinner running. I like it though.
Yes it does. The Twitter demo is using ssl for GET: http://alotaiba.github.com/FlyJSONP/#!/demo-get-tweets For POST, you could use tumblr's demo with https, or try other services that support it: http://alotaiba.github.com/FlyJSONP/#!/demo-post-tumblr
I am happy to see people finally updating their browser icons to use the IE9 icon instead of the lame IE8 one :)
I feel like an idiot for forgetting how to do that. I re-learned something today. Thanks.
JavaScript does a lot more than just that. Go for JS: The good parts.
http://www.preloaders.net/
Hey... mine is even more minimal. http://jsfiddle.net/4mrCU/2/embedded/result/
Find it free here http://library.nu/docs/EUA9LJCXPQ/JavaScript%3A%20The%20Missing%20Manual
++ 
I'd suggest to get a copy of **Professional JavaScript for Web Developers, 2nd Edition** by **Nicholas C. Zakas** as your first JS book and then start reading more advanced books like: * JavaScript: The good part by Douglas Crockford * JavaScript: The Definitive Guide by David Flanagan
it is the example.
Not really. jQuery's implementation of map is less than ideal since it automatically flattens the return values, and filters nulls. Compare the output of: var fn = function(user) { if (user.age % 2 === 0) return [ user.name ]; else return null; } jQuery.map(users, fn); // output: ["Steve"] _.map(users, fn); // or users.map(fn); in a modern browser // output: [ ["Steve"], null ] 
Any update on this? :)
Sort of like this jquery one. [http://neteye.github.com/activity-indicator.html](http://neteye.github.com/activity-indicator.html)
The 3D ones remind me of AOL
"several hours later" FTFY
Nice!
/sarcasm
The hardware wasn't there. I actually got a free phone and month of service at an early developer event. Tried it for a few minutes, then forgot about it. The phone was small and chunky and slow -- loading Maps took like 10 seconds if the app wasn't already loaded. I think they were too worked up about having an app platform and developer ecosystem, not realizing that you need a kick-ass phone first. The iPhone is a FAST, slick phone even without apps. Appealing to developers is secondary.
JG:TGP is a great book. I've read it twice and it's the only book on my desk. I write serverside JS for a 20,000 visit/day website. However if you are a beginner with programming in general, I would not recommend it. If you do manage to understand the subtleties of it then you'll be an awesome developer. But personally I think it's really not aimed at programming noobs. I'd go through some general JS tutorials first and then in 6 months once you can understand code and think like a programmer, then read JS:TGP. Example, if you can't spot and code in your head an obvious way to make this code more generic and reusable, you're not ready for JS:TGP yet: function getDiceRoll() { return Math.round(Math.random()*5)+1; } edit: or alternatively, argue convincingly as to why it doesn't need any improvements.
The potential market is tiny. Why waste our time developing for such a small market when you can develop for iOS or Android instead?
Ach! I'm stuck in 4DOS again!
Yeah, this seems to run really slowly on my browser. And I don't have a slow machine by any stretch of the imagination. 
Then what are [web workers](http://ejohn.org/blog/web-workers/) for?
Enforcing strong typing in Javascript? You're doing it wrong.
Good contribution. During development, having to go through the function call stack to route out which argument was initialised incorrectly or omitted entirely is a pain. This seems a nice way to enforce a function that wanted an array of strings to only ever get an array of strings. Errors are explicit and never silent, telling you exactly which argument of a function was incorrect.
If you have lot's of arguments to your functions then that's another problem. Once you have more than two arguments to a function (especially if some are optional) then it will start being more appealing to use a single argument object with named parameters. You should provide default values for any null or undefined arguments. In coffeescript this is trivial to do. Certainly you are not serious about doing this during release runtime as this will have a significant impact on performance. Also, you must weigh the cost of declaring all these strongly typed interfaces in your code vs the benefit that you hope to gain.
&gt; Certainly you are not serious about doing this during release runtime as this will have a significant impact on performance. He said: &gt; I threw together the following function that would be included during development, **and perhaps removed afterwards for performance**.
So there's a few things in this area to consider. One is just developer productivity/happiness. Type checking can be very useful during development to make debugging easier. To that end, you can use something like closure compiler; closure compiler let's you provide [type-annotations](http://code.google.com/closure/compiler/docs/js-for-compiler.html) with a java-doc style syntax. When you compile your code, it will do some static analysis to do some optimization and error-checking. Another option is to do run-time checking. If you go this route, I recommend having the function call optionally in-lined with a -debug flag during build. That way type-checking is only done during development, or can be turned off. I'd also say it's only really necessary at API boundaries. The reason you don't really want to have a bunch of run-time (or even just compile-time) type-checking in your production code is that it eliminates a lot of the advantages of a dynamic language like JavaScript. The dynamic nature of JavaScript is great for writing these generic composable functions that you can just glue together without thinking too much. You don't have to mess with types, you just care about interfaces. Let's say you are writing a library, and have a function that translates all of an object's property names to Spanish (for whatever reason). function foo( obby ) { var results = []; if ( !(typeof obby === "object") { throw new Error("Invalid Type: expected Object"); } for( prop_name in obby ) { results.push( toSpanish(prop_name) ); } return results; } Awesome...until one day one of your users decides to translate all of the things in jQuery to spanish... foo( $ ); Except, oh no! they got an error because $ is a function! ...but there's no reason your function couldn't work in that case. (keep in mind this is one very half-assed example, there are a million more) Now your user has to modify your library, or you have to try and anticipate everything your user will pass to it, or just limit the ability of your library. Your code will get ugly and slower. You end up with something that's crippled, perhaps without much benefit. If you practice good coding methods, avoiding too many anonymous functions in the call stack, giving descriptive names, etc... you'll find that errors can be quite informative. You get a TypeError for an undefined method, and leads you to the line: function_argument_name.match(".... It's pretty obvious what's going on, you passed in a value that has no match property. One thing I would consider is instead of checking against type, use liberal logging. Log whatever arguments are passed to your function in the console, and other strategic values...and when something goes wrong it will be easy to figure out what went wrong by checking the console. Have your build process take care of all those console.log() lines in your source so they don't litter your production code. You can also use the debugger to resolve problems pretty quickly. So while think it's something that's definitely useful, it's important to find a balance. You only want to check types if you're *absolutely* *completely* sure that only one possible value is good or you want to think very carefully about in what situations and for what reasons you want to do it. I definitely think you don't want to just try to bolt something on indiscriminately. 
maybe instead of coding something use this. http://jsonviewer.stack.hu/ 
You maybe want to look at Google Closure Compiler. It provides type-checking during compiling which is sometimes really useful.
PERHAPS removed. How he will remove it is an open question. Just overwrite the single method to an empty function, or manually remove all declarations, or some type of automated system? This whole situation is only a problem if you have many methods that take too many arguments. Most my methods take no more than a single argument and almost none take more than three. If an argument causes an exception then it is trivial to track it down.
Thanks for the reply! I used tools like that when I first started writing the JSON and they were cool. The problem is that I need somewhat non technical folks to be able to edit/author it within specific confines. I want to make the UI restrict the users to a very specific set of actions and check that they are correct. I aslo want to make it more friendly so a user can select valid options forma dropdown or something like that. Also, some of the data is a bit obfuscated. When a user would check something like "JavaScript" from a list of languages, this has to be written as JS_SCRIPT_ECMA_LNG or something crappy like that. I want to make it human readable. 
not sure if they're the best but, Three.js (https://github.com/mrdoob/Three.js) I-AM-GLOW (http://i-am-glow.com/) processing.js (http://processingjs.org/)
howdy there, for your ui, something free and quite cool : http://ukijs.org/ you should also check out http://dojotoolkit.org/ since they have both cool ui library as well as core library otherwise some good JS tools i would use: backbone.js underscore.js jquery.js json2.js 
http://learningthreejs.com/
&gt; use a single argument object with named parameters I second this. A single object passed to a function is the way to go with several parameters. It is pretty much always easier to deal with than a long list of arguments that may or may not be passed to the function.
Here's a neat effect: Put all aspects to maximum except for the Radius. Put that to minimum. Check the Shadow box.
Another one of the major long term benefits of this is that you can add and remove parameters by name without breaking any current consumers of your api. Especially relevant if you're writing a public api. 
I assume flex is as3, if so, you'll feel right at home with MooTools. I'd say check it out. I ant the other way (mootools -&gt; as3 with ease)
maybe an easier way to approach this is to create an xml schema let them edit the xml (there are quite a few editors out there which enforce a schema) and write code which converts it into json. writing an editor is a fair bit of work.
&gt; I tried messing around with jQuery UI and it seems like a shit ton of work for every little piece of data. How exactly are you doing it then? I'd have thought it'd be pretty straightforward to create text fields, selects, even jQueryUI elements on the page to edit each value. Are you not using loops or functions???
Type annotations might be what I was after. It looks like I might have been trying to re-implement parts the closure compiler....
That sounds like what I want. What I am really after is to have a Haskell environment but be writing in pure Javascript; like having the prelude functions available globally (map, reduce, filter, etc), and restrict array elements to being of all the same type. Annotations that have type signatures would be awesome, partially applied functions, a decoupling of methods and data objects.
cuz apple or android, shut the fuck up
Look into ExtJS http://www.sencha.com/products/extjs/
He never said he had functions with lots of arguments, where are you getting that? 
I need to get my hands on socket.io and node.js :/ So much cool stuff to do.
You should watch this video http://www.meetup.com/Seattle-Android-Developers/events/16602974/ It's on Android game development, but the actual platform is not the reason why I want you to watch it. It's about deciding whether you want to write a game engine or write a game. It might change your mind about using an existing engine. Trying to get too low level means you might spent more working out subtle bugs between different browsers than you are working on your game and that might not be fun for you.
Definitely will watch this, thanks a bunch!
Look above in this thread, he said: "having to go through the function call stack to route out *which argument* was initialised incorrectly or omitted entirely is a pain". This implies multiple arguments as well as the fact that his sample code contains three arguments.
Check out backbone.js
Holy crap, Thanks! The Ext Designer (Co$t$) is a lot like flex builder in eclipse. I can prolly hand code what I need without the paid tool. I am going to explore using something kinda like this as a starting point: http://dev.sencha.com/deploy/ext-4.0.2a/examples/form/form-grid-access.html
You may be interested in the small, growing subreddit [threejs](http://www.reddit.com/r/threejs).
http://senchalabs.github.com/philogl/ PhiloGL always piqued my interest, although I've never used it myself.
Thanks! If I code it in AS3, I'll likely end up having to own it forever. If I use .js, I can more easily give it to someone else to maintain.
Requires Redis.... &amp;#3232;\_&amp;#3232; 
This is what XForms was designed for. XSLTForms (use the SVN version) includes JSON support, but not bidirectional. 
Is 3 arguments a lot? That sounds pretty absurd.
No. Each argument could be created elsewhere even in a different module, and be passed along a chain of functions. Knowing precisely what happened where down to the index of an offending array is helpful. And if types where that bad then why is there such a great push for compiling from strongly typed languages to Javascript, or type annotations? Don't forget there is already a type system in Javascript, although be it limited.
The push to add strong typing to javascript comes from people who come from strongly typed languages. If your strongly typed system prevents duck-typing then you will be losing one of javascripts greatest strengths.
I just reviewed my latest API. Probably 98% of my methods contain 0,1 or 2 arguments. 2% may contain 3 arguments. Nothing more. arguments suck. Once you have 4... do you require all callers to provide them all? What happens to existing callers when you add a new option 5? Do you provide default values? What if you only want to provide the 1st, 2nd and 4th values only? There are other deeper reasons why arguments suck, but that is beyond the scope of this discussion.
why is that a LoD? redis is awesome, and a persistence layer is needed, so why not redis?
The push for strong typing is surely derived from the desire to have compile time errors, and the introduction of Javascript to the server where correctness is more critical. If one wants a proper functional style, a type system is a very helpful tool. Javascript could be used almost like Haskell. I even thought it possible to 'isolate' (at least visually) side effects with the do {} while () syntax native to Javascript, and similar to the do notation of Haskell. I can also completely disassociate functions from prototypes. I'd also like a more expressive global namespace for the most common functions. If I can see the types a function accepts and outputs, that helps me reason about the program and have explicit the behaviour. 
This just blows me away. Here I thought functions were for passing arguments to, but it turns out argument police say that 2 is the max since 98% (not all!) of his functions take 2 or less arguments. I guess jQuery does it wrong: [animate](http://api.jquery.com/animate/), [delegate](http://api.jquery.com/delegate/) As well as Underscore.js: [reduce](http://documentcloud.github.com/underscore/#reduce), [detect](http://documentcloud.github.com/underscore/#detect), [indexOf](http://documentcloud.github.com/underscore/#indexOf), [range](http://documentcloud.github.com/underscore/#range) Making blanket statements almost never works. There are perfectly valid reasons for having more than 2 arguments. "Arguments suck" makes you sound like an idiot spouting some garbage you read on a forum somewhere. (edit: formatting)
It does look very well put-together, and the documentation is quite good. I don't think I've ever seen it used for game development, though.
Sounds like you don't want an intelligent discussion of why arguments are bad.
Is there a subreddit, similar to /r/javascript, except where people go to ask redditors to do their job/homework/research for them? It sure would be nice if I could come to /r/javascript to read *"All about the JavaScript programming language."* instead of posts like "help me debug my code". Just saying.
I have been working on a micro framework called [tko.js](http://tkojs.com) that sounds close to what you are looking for. It binds a data layer, stored as JSON or backbone models, to HTML elements and keeps everything in sync. When used with backbone it gives you some nice bindings that make things like sortable lists fairly trivial. The site is in need of some love but the read me should give a good you a good start and I would be happy to answer any questions. It is being used on [shorttermhousing.com](http://shorttermhousing.com) and would l love to see how well it works for other projects and get some feedback.
Whoa dude. I spend *my* time on reddit doing techsupport because *I* learn whilst I do it. I also support the picrequests and photoshop help reddits. Also the typography reddit, where we have multiple, and often tedious and repetitive requests for type identification. Whilst I don't take your response as a personal attack, I think there are points of view which are profoundly different to yours as to how and why reddit works for them. Edit: also, in response; how about you need a favour with a typeface- the first place you would look or post would possibly be /r/typography- not /r/identifythisfont. I do a good deed when I can, not get my back up. What's the point? Just saying.
i've found that unit tests provide a lot of the benefit of compile time checking in my libraries. every time I save a file, my unit tests run automatically. are you just interested in enforcing primitive types (Boolean, Number, String, Object, Array, Date), or are you interested in more aggressive type enforcement? how will you still allow duck-typing when enforcing types?
TL;DW
See towards the bottom http://weblogs.asp.net/scottgu/archive/2010/05/07/jquery-templates-and-data-linking-and-microsoft-contributing-to-jquery.aspx Also http://dev.michaelrog.com/js/datalink/basic.html Also for data grids you might consider slickgrid http://mleibman.github.com/SlickGrid/examples/example1-simple.html Also if it doesn't really have to be JSON, there is http://ajaxcrud.com/
I was going to suggest this myself. My company hired some 'front end guys' to work on a project we're building. Personally, I'd rather do it my way, but they had hired them prior to me coming along, so we're stuck, but I was pretty impressed with what I saw of ExtJS. Good call. Shame it's so expensive, though.
My best guess is it has to do with js hoisting variables to the top of the function they are defined in, why that is, I'm not sure.
Don't do this, It's not better. Functions are declared exactly the same way variables are. People that do this are just making there code harder to debug. This is worse not better.
You should be writing unit tests to lok for these errors. The unit tests will net you far more value than trying to force strong typing to boot.
JavaScript isn't Haskell though. I'm strongly of the opinion to use a language as it was intended, and to not try to shoehorn it to look like your favorite language.
The man of the coffee shop said words to this effect, but honestly I have no idea what this means.
A pretty good article on hoisting in Javascript: http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting Then to follow that up, you can create closures for your variables by following the Module Pattern. Ironically, this article is hosted on the same site. http://www.adequatelygood.com/2010/3/JavaScript-Module-Pattern-In-Depth
There are differences. Here are the main ones which involve readability and writing programs: * Assigning a function to a variable shows that the variable may be reassigned. Conceptually, a function statement name is `const`, whereas a variable assigned to a function expression is not. * Using [function statements may assist in debugging][1]. * Assigning a function to a variable everywhere maintains consistency. (Function or other value? Who cares; they're all the same!) * Using named function expressions may make it difficult to program in IE. [1]: http://www.reddit.com/r/javascript/comments/jg4tx/critique_my_javascript/c2bvfer As I mentioned in the [thread last week][1] to which you refer, I used to use `var x = function () { };` everywhere. Now, I use `function x() { }` where `x` is effectively constant. It *greatly* assists in debugging, and is more clear to me that `x` *shouldn't* (isn't intended to) be reassigned. But I say, use whichever way you want. At the end of the day, it's just a matter of style.
Try using google.
Generalized statements such as these have to take into consideration every possible permutation of an application. I don't think you can feasibly say: "It's not better." Using the Module Pattern in JavaScript, you are able to do things that you simply can't any other way.
Or ask the handy web forum so everybody can learn.
Most difficult concept to get is stores, column/selection models (at least in 3.3, I think they changed the way grids work in 4.0)
function foo() {}; is exactly the same as var foo = function() {}; You want to write a module? I write them all the time without your silly var foo = function () {}. Hear you go genius, a module: function fooBarModule() { function foo () { alert('foo'); } function bar () { alert('bar'); } return { "foo": foo "bar": bar } } And one more thing. When someone states that someone else is wrong that is not a general statement. Its just a statement.
It's because you absolutely refuse to be honest. You just did it, "why arguments are bad". That **doesn't even make sense**. That is like saying "why variables are bad". It doesn't even mean anything. 
What's the point? /r/javascript is for javascript. Not about teaching remedial programming. I mean, sure people could decide it is for teaching beginners how to program, but that isn't what it means to me. If this is where beginners come to post their latest spammy help request, then there is no alternative subreddit where I can just find news and information about javascript. Maybe the problem is there aren't enough moderators and there is no direction to this subreddit.
RobertWHurst shows below that the function method is possible--*I* happen to prefer the variable method because it doesn't require me to return anything at the end of the constructor. I feel that's better. Maybe I'm wrong :)
A couple people have mentioned debugging, and I think someone should come out and say *why* it helps with debugging. I'm not sure. But is it because firebug (or others) will tell you the name of the function in a stack trace etc. when you use "function foo(){}" instead of the var foo way?
Instead of ID or even name (which isn't globally unique), it could be just any selector relative to the form you are validating. Actually, other than being rooted on the form I think the op's validator already allows any selector: 'input[name=foo]': ... 
Don't shoot things unless you plan on eating them.
Sounds bad. But the part about accessing the web server - that is normal and a good idea. The developers probably shouldn't all get to willy nilly write to the production web server.
I for one appreciate an opinionated response to something like this.
It seems Javascript is whatever you want it to be. Look at Crockford: he picks and chooses which features he deems legal. I'm picking and enhancing the functional side, and it's more of an academic exercise to see what happens with the hope of creating a nice lasting environment in which to program. 
Yes unit testing would be an accompaniment. Isn't that a given these days? 
The code snippet enforces all types. Regarding duck-typing I am wondering if I can side step the issue entirely... It's early I'll see how I go. I'm just interested in a personal javascript framework/environment to make the language pleasurable; something between a set of conventions and code enhancement.
I prefer having the exported API clearly visible in one chunk at the top. So hoisting is advantageous and allows me to write [something like this](https://github.com/samsonjs/deferred-js/blob/master/lib/deferred.js#L9-31): module.exports = { foo: foo, bar: bar } function foo() { ... } function bar() { ... } Tools do need to get better at recognizing the names of functions in JavaScript but to each his own. I work on projects where people do things like `MyThing.prototype = { foo: function() { ... }, bar: function() { ... } }` and I don't mind it. One reason to use named functions is that you never have to manage commas in object literals full of functions. If you do `var foo = function(){...}` for each function then I really don't see the point. It's just extra typing for no reason, I don't see any advantages to those either.
I am grateful for the help I got. This isn't getting us anywhere.
This is the Javascript subreddit, not the Java one. They're completely different languages.
I don't know if this is a joke or not, but Javascript is not Java. The syntax is a little bit close and they both have Java in the name, but they are very different. r/java might be more helpful. JavaScript is a scripting language that is usually run in the web browser. Now that JavaScript virtual machines have become really fast, it's also used to run servers like node.js. Java is a programming language that looks a little bit like C that is compiled into byte-code and run on the Java Virtual Machine (JVM) on different operating systems. If you need help with Java I suggest you get started with the Sun (now Oracle) tutorials at http://download.oracle.com/javase/tutorial/tutorialLearningPaths.html
A wild troll appears.
http://www.reddit.com/r/java
for my pacman in webgl i use three.js see it at http://pacmaze.com of http://buddymaze.com a webgl fps (this one is quite beta) uses three.js too i have a blog which focus on learning three.js http://learningthreejs.com maybe you can look at the presentation i did recently about it, it may give you an idea of the framework. http://learningthreejs.com/blog/2011/07/28/presentation_at_parisjs/
Variable declarations only occur at the beginning of a scope. JS doesn't have block scope (only functions and, IIRC, files). This means the following code: var foo; foo = 'foo'; var bar; bar = 'bar'; is equivalent to this: var foo; var bar; foo = 'foo'; bar = 'bar'; This gets a bit more surprising if you add for-loops which can have declarations in them. The declarations are all hoisted to the top of the scope, i.e. the function containing the loop. This can lead to unexpected results. The traditional function definition contains both a local variable declaration and an assignment. The two can't be separated without using an anonymous function definition instead. This has two problems: 1. The entire function definition will be hoisted to the beginning of the scope. 2. It creates an additional syntax to look out for when dealing with variable declarations. The first problem violates the common rule to put all variable declarations at the beginning of the scope (although some people disagree -- especially programmers coming from other languages and trying to enforce their own style rather than adapting to the language at hand). The second problem violates the principle of least surprise _and_ masks the fact that functions are just another data type and not special (unlike in languages which handle them differently, like Java (1.5, anyway) and PHP). Because variables you use to put functions in them and variables you use to put other stuff in them are otherwise identical, many programmers prefer to declare and assign them the same way. Also, as most programmers will eventually use anonymous functions without assigning them to a variable directly, one might as well be consistent and use one syntax exclusively.
I could only really bare the first half, Please do tell if I'm missing out. He's got some good points on how to think about approaching things. 
Oh sure, because no one else has access to google. Or, you could have used google and told everyone about what you found. Way to go Baby Huey.
You sure are easily excited. Are you about fifteen?
Debuggers will show a list of the functions in scope. You can then select one and say, put a break point. If you declare all of your functions as variables, they all have the same name: "anonymous function". 
&gt; function foo() {}; is exactly the same as var foo = function() {}; The first form of function definition gets hoisted to the top of the scope where it's declared, the second one does not. They are definitely not the same thing.
Scenario for you: Class Size { width: int, height: int } Class Rect { x: int, y: int, width: int, height: int } Function area(a) { return a.width* b.width; } In a strongly typed language you will need to make th 'a' parameter of type size or rect, then dupe the code for the other. Or you will need to declare an interface and jump through extra hoops. In a loosely tyoed language with duck typing this is never a problem. Instead of trying to make yourself comfortable with a paradigm you already know, you should learn to use javascripts strengths. You asked if you were doing javascript right. You are not. You are doing it like haskell. Dynamic typing is not a weakness to be overcome. It is a powerful feature to be embraced. 
JavaScript: The Good Parts by Douglas Crockford http://oreilly.com/catalog/9780596517748
Follow this up with [JavaScript Patterns](http://oreilly.com/catalog/9780596806767)
Write something, pass it through JsLint or Closure Compiler etc., read some popular literature, realize your code sucks, try again, realize it still sucks. Write something bigger, realize the organization sucks. Begin realizing a lot of the popular literature sucks and you've found a trick or two that works for you. Give up your evenings and weekends, write something even more ambitious and better architected, realize it still sucks, rinse and repeat (stopping occasionally to eat and shave), realize you'll never be good but can only get better, build something else, ad infinitum.. :) Pretty much like anything just takes a bit of principle and tonnes of practice. 
All my files use the commonjs standard "require('dependency')" function to import other modules. My build process analyses all the file dependencies to automatically build a single file in correct order. Then minify etc. I also have many css files that correspond to js ui classes. These get merged in same fashion. Images are also all merged into a single image and css image references are modified to use part of the big image. I also have a daemon that automatically compiles any coffeescript and runs unit tests any time i save a file. All of my build processes are authored in javascript or coffeescript. I use rhino and/or nodejs as the build time execution engine. Since all tools are javascript they can run on windows, mac, unix etc. 
&gt; I know that I need to build things to learn it Have you thought about what to build?
ASP.NET? Go node.js, never look back.
And how does one go about setting up this awesomeness?
I wrote it all myself. I may open source some of the build process at some point. You need to start with the ability to write file processing scripts in js. Use nodejs to run them. Your design time web pages should include all files individually in dependency order, so debugging is easier. Only merge for release. For the daemon you need to use a filewatcher. Nodejs has this but it doesnt work on windows yet so i use rhino and java nio's filewatcher. 
I follow everything except "effectively constant". What about function x(){ return "foo"; } function x(){ return "bar"; }
I wrote a build script that does the same thing, and it's open source: https://github.com/spiceapps/sardines . 
We use Google Closure for our JS development. We have an ant task which runs the compiler on the outward facing classes. The compiler handles minification and concatenation for us. It scans the codebase, and pulls in only classes and their methods / properties that are used. It then runs its minification wizardry, and out pops a small compiled version of our page.
My environment's .net. My web.config has the names of all the JavaScript files i'll need. On the application_start event...First, I have it concatenate all the files into one big string... run that string in through a function that replaces any tokens it finds with the corresponding .net variable (this is nice when I need a variable on both the server and client, or need strings in the language of the client's accept-language) ... ... Next, I run the resulting string through YUICompressor (making sure the JS libraries have /*! for the copyright comments first, so YUI doesn't strip those comments) ... Lastly I store that string in some caching variable for http requests. I do the same thing for CSS.
I dont recommend you the Definitive Guide. I read it and didn't learn anything. I am going to try now with the "good parts".
don't forget to practice on jsfiddle.net also, try reading the source code of jquery :)
Yup, [cat](https://github.com/samsonjs/samhuri.net/blob/master/combine.sh) + [closure-compiler](https://github.com/samsonjs/samhuri.net/blob/master/minify.sh#L5-11).
Between these two books, you'll know all you ever need. Almost mind blowing the first time you really learn what javascript can really do... especially if not much of a background in functional programming prior.
I posted [this comment](http://www.reddit.com/r/javascript/comments/fpp7m/recommendations_for_mastering_javascript/c1hs3fq) several months ago [here](http://www.reddit.com/r/javascript/comments/fpp7m/recommendations_for_mastering_javascript/). The "do this, then this" takeaway is to read what smart people think about writing JS, then write JS yourself. Lather, rinse, repeat ... and discuss. *edit: Updated the comment below with SomeArmenianGuy's suggestion, JavaScript Weekly, and some notes on [Crock](http://crockfordfacts.com).* ---- Read code, especially code from projects maintained by the best. And of course write code of your own! You have to find out what *you* think are good and bad parts, etc. And when you run into surprises and gotchas in your own code you really learn about them, because you care more at that time. Read about JavaScript's strengths, weaknesses, good, bad, and surprising bits: * [My Variable Declaration got Hoisted](http://pierrespring.com/2010/05/20/my-variable-declaration-got-hoisted/) * [Learning Advanced JavaScript](http://ejohn.org/apps/learn/) by John Resig * [JavaScript Garden](http://bonsaiden.github.com/JavaScript-Garden/) * [Eloquent JavaScript](http://eloquentjavascript.net/) * [Another JavaScript Quiz](http://james.padolsey.com/javascript/another-javascript-quiz/) (Be sure to check [qfox's](http://qfox.nl/ "aka. Pieter van der Zee") comment with explanations) * [wtfjs](http://wtfjs.com/) * [A Crash Course in DOM Events](http://jupiterit.com/news/a-crash-course-in-how-dom-events-work) (Relevant only in browsers of course) Learn JavaScript inside and out: * [Javascript: The core](http://dmitrysoshnikov.com/ecmascript/javascript-the-core/) by Dmitry Soshnikov * [Learning JavaScript with Object Graphs I](http://howtonode.org/object-graphs) * [Learning JavaScript with Object Graphs II](http://howtonode.org/object-graphs-2) * [Learning JavaScript with Object Graphs II](http://howtonode.org/object-graphs-3) * [What is "this"?](http://howtonode.org/what-is-this) * [ECMAScript specification](http://www.ecma-international.org/publications/standards/Ecma-262.htm) * Use your browser's console, [Node](http://nodejs.org), [Rhino](http://www.mozilla.org/rhino/), [SpiderMonkey](https://developer.mozilla.org/en/SpiderMonkey), any JavaScript [repl](http://en.wikipedia.org/wiki/Read-eval-print_loop) you can get your hands on and just try things to see what happens for yourself. Watch [Douglas Crockford's lectures and talks](http://search.yahoo.com/search?p=crockford&amp;fr2=sb-top&amp;vs=developer.yahoo.com&amp;vs=developer.yahoo.net&amp;type_param=), they are excellent, even if he's a little too opinionated sometimes. It's good for the community to have an opinionated, pragmatic guy like him around. Don't take his word as final though. He's not the only smart guy involved with JavaScript and many others have valuable things to say too. The Good Parts is not a bible, think for yourself. Doesn't hurt to follow [The Changelog](http://thechangelog.com/) and [notable JavaScripters](http://net.tutsplus.com/articles/web-roundups/30-developers-you-must-subscribe-to-as-a-javascript-junkie/) either. If you don't read that list just follow [@BrendanEich](https://twitter.com/BrendanEich), [@awbjs](https://twitter.com/awbjs), and anyone twitter says is similar to them. [Peter Cooper's JavaScript Weekly](http://javascriptweekly.com/) is great too.
I just optimize with the closure compiler, that's it. However I also have JS files only required on the pages where you need them.
I'm not sure what you're trying to say. Your example is Bad Code and would look ugly with the function statement syntax or with a `var`-and-function-expression syntax.
I gave [an example of unnamed function expressions harming debugging][1] in another thread (which I linked to in another post here). [1]: http://www.reddit.com/r/javascript/comments/jg4tx/critique_my_javascript/c2bvfer
+ make + echo ";\n" + oh damn jquery has to come first voilá
I don't get it.
This is always the hard part for me. Some kind of to-do list was what I was thinking.
I would love for you to take a look at Etherpad Lite, it is javascript both server and client side and we're hungry for contributors/developers to get involved :) http://github.com/Pita/etherpad-lite/ We're a pretty supportive little community and we would love the help! :)
some files don't have a line break at the end and if it's a // comment the first line on the next file won't run which is esp. problematic if it's already minified, and some libs expect jquery to be already loaded when they load. So I had to take care of those things in my Makefile
[Jammit](http://documentcloud.github.com/jammit/) using Closure Compiler for compression, environment willing.
Aha, that's one reason why I minify before combining and take care to begin files with a semicolon. Usually they do anyway because they start with an immediately invoked function expression (iife). `;(function(){ ... }())`
I think his point is that you can [overwrite?] a function on the fly, making it un-const-like.
We don't. Seems like excessive optimization that wouldn't ever be noticeable nor appreciated.
The cliff's notes: http://www.youtube.com/watch?v=hQVTIJBZook
Great Idea. I'm stealing it :)
I use [Sprockets](http://getsprockets.org/) as it is bundled with Rails 3.1.
I'm reading this right now. It is very dense and I find myself reading sections over again just to make sure I got it but it is a good read for sure
Exactly. It's even worse when you *think* using function expression makes x constant, but have two differing definitions of x, separated by multiple lines, or (in the global namespace) across separate files.
So is it pretty safe to say you'd recommend Three for game development? Does it support importing 3D models/environments from programs like Blender, etc.? I know a few of the others (GLGE, Copperlicht) support Collada or similar formats.
The overall summary of things is: if you want to write an engine, write an engine. If you want to write a game, write a game. Don't try to do both, because you will never, ever be able to do that in a reasonable amount of time.
I was mostly commenting on how code looks to *humans*, not to the computer. If I have `function x() { return "foo"; }`, I expect calls to `x` (in that scope) to *always* return `"foo"`. I do *not* expect `x` to be assigned a different value than the one `(function x() { return "foo"; })`. This is what I mean by "effectively const" (and why I added the "effectively" qualifier).
Safest way to handle problems like this, I have found, is to stick `\n//*/\n` after each file. It handles missing semicolons, `//` comments, and dangling `/*` comments.
I use a [custom build script][1]. The steps are: 1. Merge my RequireJS-style module files into one file, without `require` and `define` uses (so I don't need to include RJS/URJS). 2. Manually merge in an external library (because it doesn't play well with my automatic merging tool; will need to fix that sometime). 3. Manually merge in a binary PNG as a base64-encoded string. It's basically a "loading" image which is shown as soon as possible. 4. Set global flags (`DEBUG` and `VERSION`) and wrap in a closure providing some commonly-used globals (`document`, `window`, `Array`, `Object`, `undefined`). 5. Minify merged file using Google Closure Compiler (under `SIMPLE_OPTIMIZATIONS`) then UglifyJS. 6. Insert license comments. 7. Cat to output file. Steps 1 through 3, of course, I hope to make completely automated (i.e. no hacks like I am doing now) some time. Basically, it's not dark magic. As long as you have something which works, which produces output you're comfortable with, you're golden. But whatever you do, **make it one click**. (Preferably one click to a staging server.) Note: The project I discuss doesn't need to be intensely minified or obfuscated, so there are no major magic tricks performed. [1]: https://github.com/strager/owp/blob/780f7e9780e8593e72d7e5f5cdfd844629119f27/bin/build.sh
Why is that ironic?
If you are on rails jammit does most of this for you. It is a thing of beauty.
If i can piggyback.. There's lots of good articles reccomended at learning JavaScript as a language but I'd be interested to learn what people think are good articles to guide building applications - code organization, best practices, some opinions on tempting etc.
That looks pretty cool. We use google app engine for cheap hosting and scalability. 
Its better if you dont have to add file names to web.config or anywhere else. Auto-detection of new files is worth the effort, and on .net if you put the intellisense comments at the top then you can parse those and determine dependency inclusion order. 
When you grow to hundreds of source files then not compressing is not an option. 
Check out [knockoutjs](http://knockoutjs.com), it has a lot of the data binding capability you're talking about being able to support. Using the observables and observable arrays it wouldn't be too hard to rig something up that had an entire UI controlled via a JSON singleton.
This is such an overrated book; and Doug Crockford is a pompous ass
Three.js, hands down
Funny you should ask, I've just released a very early and experimental Node module that handles concatenating Javascript files together and also enables you to use the CommonJS module system. It's early days so use at your own risk: [https://github.com/ryanwilliams/jah](https://github.com/ryanwilliams/jah) [http://search.npmjs.org/#/jah](http://search.npmjs.org/#/jah) To install: npm install -g jah Then create a new project: jah new plop cd plop jah server All your code is in 'src' and the entry point is src/main.js. When you want to publish just use `jah make` which dumps a single .js file in build/. 
It seems everyone has written one :) Here's mine: https://github.com/ryanwilliams/jah http://search.npmjs.org/#/jah See my other comment: http://www.reddit.com/r/javascript/comments/jovqp/how_do_you_guys_build_your_js_files_for_deployment/c2e0dwo
I put the list together a few months back. http://www.reddit.com/r/javascript/comments/fqht8/references_for_javascript_mastery/
One nice thing about jammit is that if you find yourself debugging on the server you can pass ?debug_assets=true and it will give you the page without merging JS assets. I use engineyard. Capistrano for deployment scripts which is really nice because you can use different git branches for dev/test/production.
You are a bit fook'd if you don't have a good basis with CSS and HTML. There is metric tons of stuff to learn over there w/o even touching JS. That being said, JS is a relatively small language after you get past first-class functions and have at least a passing (yet *true*) understanding of closures. DOM and x-browser stuff is the big thing that will whip you. Get used to messing with firebug and the debug console of everything. And skip anything w.r.t. IE6 compatibility because you will now never be solely responsible for making something work on "the really old" browsers and it is so much easier to just pre-erase that part from your brain. There are too many existing people who are already too good at that so don't try to specialize in it or generalize to include it. Good luck, I'm doing the same thing you are but in the perl direction. It gets easier after 1-2 months of legit work and deadlines so don't worry too much. --Robert
Yea. I only put them in the web.config to maintain the JS files order... def would love to get something better in place just like what you suggested. Anything that saves me an extra step is def worth it in the long run.
If you minify before you deploy, you can make your source code spread out with nice variable names, thorough comments, and just making it easier to read.
They produce the same object in scope. I don't care if function foo() {} gets hoisted in scope and var foo = function () {} does not. This is an anti-pattern. named functions were added for declaring named functions, anonymous functions were added executing anonymous code. This is an abuse of anonymous functions, and makes it really hard to debug your code.
&gt; I don't care if function foo() {} gets hoisted in scope and var foo = function () {} does not. No one asked if you care. You said they were exactly the same, and you were wrong. &gt; This is an anti-pattern. Say who? You? &gt; This is an abuse of anonymous functions, and makes it really hard to debug your code. No, this makes it easier to debug your code, but you'd have to understand the difference between the two to understand why.
It was raining
Not saying you point is invalid or anything like that, but do you have a better suggestion? Just curious.
reddit does build-time concatenation and optimization. We use Google Closure Compiler via a [python script](https://github.com/reddit/reddit/blob/master/r2/r2/lib/js.py) that and does concatenation and some simple localized string serialization. Currently dependencies are statically defined for a set of modules intended to optimize for cached JS in common use cases.
I also wrote one myself, for .NET - https://github.com/fakedarren/Packager.NET
one one asked if you cared ether, yet your responding to my post. I do understand the difference, I just acknowledged the difference and I think using anonymous functions everywhere its an anti pattern. Yes this is my opinion. I think know why you think its better too. Its probably because you think you can find out where your program failed by watching when your functions are defined. That's not going to help you when you have a hole shit load of unnamed exceptions.
Can you use ASP.NET MVC? The biggest problem you will face is that you will want to write more event wired up to handling code you probably do everyday in ASP.NET. You need to get away from that before anything else. The lack of HTML control in ASP.NET is pretty bad. I mean you can fix the output, but you shouldn't need to fight your framework to get clean HTML. That said, try one of the mvc js frameworks. AgilityJS is pretty simple and a good place to start. Best of luck and I hope you succeed.
Math.round skews the returns of 1 and 6 vs 2,3,4,5. Each face of the die should be p=.1667 for a fair die. With Math.round p(1) and p(6)=.0833 and the rest have p=.1667 A fair formula is either Math.ceil(Math.random()*6); or Math.floor(Math.random()*5)+1; 
I will soon allow bidirectional JSON support in XSLTForms. I have already created an XML editor with a generic XForms page and it will be very easy to extend it to JSON notation (arrays,...)
You can leave out the persistence stuff. But maybe needed for larger applications.
Spent way to much time on it and I understand the problems with Wingdings and different browsers but for some strange reason I like this because it is different: http://jsfiddle.net/BcS65/embedded/result/
First step is to use microsoft intellisense tags at the top of each file that has a dependency: /// &lt;reference path="ScriptFile1.js" /&gt; Then you can process the files with a regex and determine order dynamically. 
We use a custom built bundler that builds them realtime server side when requested (and memcaches on live) and then we use .htaccess rewrite to direct all js file requests to our bundler script. The bundler script will concat up all the files in a given bundle, minify (if on live) and gzip for transmission.
Start with [Beginning JavaScript with DOM scripting and Ajax: from novice to professional](http://books.google.com/books?id=M3Uqna8RIAkC&amp;pg=PA9&amp;lpg=PA9&amp;dq=heilmann+scripting&amp;source=bl&amp;ots=DR1YK2x--F&amp;sig=8bxNAdqKg0Murv3PeiDajnNgyKM&amp;hl=en&amp;ei=RiJRTurUPMPKgQfHzN2QBw&amp;sa=X&amp;oi=book_result&amp;ct=result&amp;resnum=2&amp;ved=0CCAQ6AEwAQ#v=twopage&amp;q&amp;f=false) (pretty old skewl, but a it's a great intro and is library agnostic) and then move onto [Eloquent JavaScript](http://eloquentjavascript.net/), The Good Parts and [Pro JavaScript Design Patterns](http://www.amazon.com/JavaScript-Design-Patterns-Recipes-Problem-Solution/dp/159059908X).
Yes! This is what I am talking about. Not learning the language itself so much but learning how good JS developers use the language...what tools and patterns they rely on, etc.
Great. I'll def give this a whirl. Thanks.
No, that's not why I think it's better, and my response was not factually incorrect.
that's a great answer. I was expecting more along the lines of getRandom(min, max) with getDiceRoll a wrapper calling getRandom(1,6), but I love the improvement to the actual randomisation. Thanks :)
Lol, I didn't say you were wrong. I've said this three fucking times now. I know that named functions get hoisted. You are correct. But I don't think that using anonomyous functions in place of named ones is a useful pattern.
As a layman that desperately wants to enter the world of GreaseMonkey scripting, would you recommend the same path as OP?
No, I don't think you need such an in depth understanding. If you are keen then by all means but if I were in your shoes I would only learn as much as I needed to accomplish the tasks I wanted to do. Start at the top but don't necessarily read everything. The DOM events one would be good though. The quizes are just for hardcore nerds. Start with the basics and start writing Greasemonkey scripts quickly thereafter so you can gauge your progress. Keep learning basics until you can write short scripts without looking at documentation or code snippets all the time and you feel comfortable writing them. Then go from there, learn what prevents you from doing what you want. Or learn to discover what sort of things are possible.
Don't take it personally, my opinion was just a statement. :S
I think you are the only one.
Don't forget [Javascript: The core](http://dmitrysoshnikov.com/ecmascript/javascript-the-core/).
Good one, thanks.
It's Twitter for JavaScript.
I'll be quick since StayFocusd is already kicking in. - Text is garbled. [pic](http://i.imgur.com/lbseI.png). up-to-date Chrome on Snow Leopard. - on the "click and drag to add new puzzle", you can click on the picture (without dragging), and it will display NaN on both the width and height of the puzzle piece, resulting in an error when trying to solve it. (I'm sure you already know this) - I like how you are going framework-less at first, it could really help with the learning. But if you are thinking of going the jQuery route (and imo you should), there is a great plugin called [imgAreaSelect](http://odyniec.net/projects/imgareaselect/) that you might want to check out. Design is passable, and for a js beginner (especially without jquery), this is a good job! 
&gt;Text is garbled. pic. up-to-date Chrome on Snow Leopard. Ew, unfortunate. I don't have a mac environment to test in, but I assumed that chrome would render the same across platforms, is this not the case? &gt;on the "click and drag to add new puzzle", you can click on the picture (without dragging), and it will display NaN on both the width and height of the puzzle piece, resulting in an error when trying to solve it. (I'm sure you already know this) Yep, and actually this would be pretty easy to fix. (Minimum selection size, or just simply check for NaN). I will do that. &gt;Design is passable, and for a js beginner (especially without jquery), this is a good job! Thanks. Personally I feel it is awful. I find JS to be conceptually very hard to program in. Not the syntax of the language, or even prototypal inheritence, those were EASY, but managing the project. How do I separate the content / script? What if there are reasons I need to have the script in the page (using PHP with it?) Do I create a new script for each page? Are closures acceptable for namespacing? What does a "javascript library" or "package" even look like? Etc. I need a long hard lesson in project management, but the hardships that come with JS are that you're not just working with JS. I am working with JS, the DOM, HTML, CSS, and the many browser incompatibilities. I imagine it takes a very long time to master managing all of these variables. And never mind trying to manage a suitable solution for mixing languages (like I have with PHP/JS). I believe this gets easier, especially if I start using something like CodeIgniter and jQuery, but it just seems all so ugly to me. It's so painfully obvious the web was not designed for any of this. It's intimidating but maybe one day it will all just make sense to me.
excellent! i've been thinking about whipping up a *client killswitch* and this could definitely be of use.
Actually, a pretty good job.
I use C preprocessor. /usr/bin/cpp -P -undef -Wundef -std=c99 -nostdinc -Wtrigraphs -fdollars-in-identifiers -C \ "main.jscpp" &gt; main.js It allows me for doing include, common header files, conditional compilations (so I develop one version, but then can disable / enable: debuging, assertions, tracing, browser-specific fixes, or target particular browser, localization, etc.). Then (if not using debug build) minimize it additionally with [jsPacker.pl](http://dean.edwards.name/download/#packer) and at the end in same directory with main.js I put also gzip-9ed (btw. there are few better gzip encoders than GNU gzip - using them you can save next 5-10%) it into main.jsgz, and use [this](http://perfectionlabstips.wordpress.com/2008/12/30/serving-gzipped-gz-files-as-compressed-css-javascript-html-content/) .htaccess or rule in apache (or put it somewhere like cdn): RewriteEngine On RewriteBase / RewriteCond %{HTTP:Accept-Encoding} .*gzip.* RewriteRule ^js/(.*)\.js$ /scripts/$1.jsgz [L] RewriteRule ^css/(.*)\.css$ /css/$1.cssgz [L] AddEncoding x-gzip text.gz I try to avoid using Goggle Closure Compiler, because It sometimes introduces bugs (our codes is sometimes very tricky). I still of course miss like renaming local variables, or partial inlining and dead-code elimination, but I considering the fact that most of the aving is by normal minificaton and serving precompressed files, I do not really care currently (however, I will definitely look again at it, as out codebase is growing, and we tend to use very descriptive functions and variable names. I also often use good old Make, if I'm managing multiple different targets. When deploying to the server, we also generate unique UUID, and substitute all names for it (wth .js and .jsgz where needed), so there would be no problems with caching, and mixing of old and new files in the browser. And we keep old scripts very, very long, so to keep everything working. My friend also written an greate minimizer + obfuscator, it is really effective (sorry, not publicly available), however I do not use it. 
So browser basically performs one request like this: cat.cgi?files=a.js,b.js,c.js,h.js,x.js 
Sort of except its more like `js.php?mainBundle.js` and the js.php is aware of the files that need to be in the bundle. 
i think i can fix this.
I see. Even better :) 
That's cool and all but we were doing this for a long time before Google came along with their competing standard. I know it just moved into beta with Chrome 14, but helloooooo, remember Firefox?
That's cool and all but we were doing this for a long time before Google came along with their competing 'standard'. I know it just moved into beta with Chrome 14, but helloooooo, remember Firefox?
Storing data on (his by default) server using GET requests.. sounds like a great idea!
In the readme, for the first couple of examples you forgot to add the key for `name` in the initializers. Neat project. 
Finally a place for me to put all my plaintext passwords!
var NAMESPACENAME = (function($){ var somefunction = function(){ alert('hello world'); } return {init:somefunction}; })(jQuery); NAMESPACENAME.init(); There are many frameworks, you probably want to try out yepnope and backbone http://documentcloud.github.com/backbone/#Introduction http://yepnopejs.com/ These both will help you organise your js much better.
Thanks, I've updated the README. That's what you get when committing at 1am...
Very nice. Solves a problem that's a royal pain in that some very specific styles and formatting are frequently requested by end-users, some of which just isn't that easy to do from CSS alone. What I would absolutely love to see (feature request!) is a way to also call these functions as jQuery object methods, so that we can make use of it's selectors. e.g. $('#financialTable td:nth-child(2)').formatMoney(); I realize that you probably want to keep the code library-independent, but this could be in the form of a plug-in or something that exists just outside of the core code. Awesome work!
I think a better idea to stop the timer would be to pass an object with a stop-function as a parameter to the timer function, rather than returning false. Something like this: Poll({ /* ... */ action: function(p) { p.stop(); } }); That makes it behave more like regular events, and you can stop the timer even if the code in the action function throws an exception for some reason.
Doesn't work for me in the current version of Chrome on OSX Lion. Also, check out SoundManager2. It has some stuff that falls back to Flash if there isn't HTML5 audio support.
If you Google you're going to (probably) find a forum somewhere else where someone has asked this question and other people have answered it. Should they, too, have Googled instead of asking? If everyone Googled instead of asking, there'd be far less material for future people to Google. The Internet isn't finite in size; it always has room for more discussion.
Does it offer support for the client's locale settings, or does that have to be done manually? It'd be nice to simply do: accounting.formatMoney(12345678); ...and have it be correct, per locale, without needing special considerations.
key/value pairs are hard.
https://github.com/richardanaya/Juniper Is a very simple 2D engine you might like to play with and see how it works.
Still don't know what TerrificJS is or why the fuck I'd care about using it.
http://logo.nodester.com/ Here's my version too!
I'm enjoying me some webstorm now too. Refactoring functionality is just plain awesome from JetBrains.
Awesome! It would be cool if this also included the ability to read the formatted number as well, in case calculations need to be done (and so we wouldn't have to keep track of the number in two places), but it isn't necessary (probably better to tie an event to an object that holds the unformatted number anyway, if you plan on doing basic calculations).
http://2011.full-frontal.org/ is the next "major" javascript related conference and the only one I know of this year. Also http://jsconf.eu/2011/ - but they haven't published their speakers yet. ----- Names to look out for when looking for conferences (this is not comprehensive): - Douglas Crockford - JS Guru/Extremely opinionated proponent of JS coding standards and JSON evangelist - Brendan Eich - Creator of JavaScript - Jeremy Ashkenas - Backbone.js, CoffeeScript, etc - Marjin Haverbeke - Wrote Elequoent JS (great book) - John Resig - founder of jQuery - Juriy Zaytsev - former core developer of PrototypeJS aka kangax - Thomas Fuchs - (Ex-?)PrototypeJS dev now does a lot of workshops and work in the MicroJS/Mobile field. 
http://secure.lenos.com/lenos/sencha/SenchaCon2011/
This sounds really interesting, but the site with examples isn't working currently.
The problem with that is that PollJS can no longer act as a drop-in replacement for existing timer/interval code. As it is, you can simply take the method used in your existing intervals and pass it in as a parameter to PollJS.
Your company actually sends devs to conferences? What company is this?
Absolutely, using jQuery selectors would be great!
Eh. Which continent? There are tons of conferences in every part of the world. There should be a few somewhat nearby.
Thanks for the great suggestions.
Haha. Believe it or not we do. Unfortunately by company policy I'm not generally supposed to disclose company information on public forums. Sorry :(
North America.
Looks very cool. Thanks for the suggestion.
sxswi
It's pretty new, there is not much information about it yet, except http://www.terrifically.org. It helps you to keep your frontend code organized using modular architecture. But I agree, that it's still a little bit confusing.
Not strictly JavaScript, but jQuery conference is going to be in Boston in early October. I will most likely be there.
I'm planning on attending [Red Dirt JS](http://reddirtjs.com/) in OKC.
Implemented in Node! Very nice!
Is this possible in Javascript at all right now? ES5 is kind of a localization backwater. Requires server-side support (or ActiveX/Native plugins) to even know what locale you're in.
Not at all really, you can know only the user preferred language, which is only in the same neighbourhood as the locale.
From my Chrome: &gt; navigator.language &gt; "en-US" [Also](http://stackoverflow.com/questions/5314237/javascript-convert-to-european-locale): // '50.00 €' or '50,00 €' (50.00).toFixed(2).toLocaleString() + ' €'; 
Interesting, never heard of navigator.language, though it doesn't seem to appear to work in IE. In any case, navigator.language and toLocaleString on various builtins doesn't even approach a reasonable localization solution :)
FOWA: http://futureofwebapps.com/london-2011/
Ah, so you work for Fox.
This may sound dick-ish, but how is setTimeout/setInterval hard as it stands?
I don't think this should work (and it doesn't at least in IE9 and FF6). Test should be declared but undefined, so attempting to get a on it should fail. Are you sure you have a clean environment? FYI, this.a makes no sense in this context. This doesn't work as you expect in Javascript. See this post: http://www.reddit.com/r/javascript/comments/j2j8b/the_this_keyword_is_extremely_simple_and_doesnt/. This will be the global object in the sample above (or undefined in strict mode).
I am speaking! Although i am not one of those people :( So do i still count? 
This throws an '`undefined` is not an object' error in both Chrome 13 and Safari 5 when evaluating test.a in the immediately invoked function expression. In other words, this does not work.
Hmm you guys might be correct, I threw it up on a test html page and I did get a TypeError on Chrome. I was testing this using www.jconsole.com and I bet the REPL somehow makes it valid, maybe it uses eval? I'd actually be interested to know...
I get the same error on jconsole.com fwiw.
Thanks, and please let me know if it helps you with your project, or if you need any kind of support.
... now I just don't know what happened... good thing it's Friday ( :( )! FML (Thanks for your help though)
Excellent find. This is going right in my current project.
This looks really cool. I'd like to see the option for a degrading timer, *i.e.*, start polling every 5 seconds, and if a certain condition is not met after so long or so many polls, increase the time between poll requests by some specified amount. I thought Prototype.js had a feature like this, but I can't seem to find it in the API docs now.
Good call, feel free to add a feature request on the Github repository! I'll probably add a very simple jquery adapter soon.
Good call - I'm considering adding a library settings object that can be set once to change the default parameters for one-time localisation or configuration. Using navigator.language or toLocaleString is a little shaky, so it would be a way that the developer can set up the locale manually (as in PHP or most well-written apps) and then it's used as the default for that instance, unless they override it via the parameters, or change it via the settings object.
I love kangax, some of his writeups are pretty good reads, like [this one](http://perfectionkills.com/whats-wrong-with-extending-the-dom/) or [this one](http://perfectionkills.com/how-ecmascript-5-still-does-not-allow-to-subclass-an-array/) for example. Never seen/heard any of his talks though.
That can be done via `accounting.unformat()`: accounting.unformat("£ 1,432,32.90 GBP") // 143232.9 It just uses a regex to match numeric digits, minus signs and decimal point only, stripping out any other characters, so there's actually a potential for it to fail silently (eg. where a developer would expect `NaN` from something like `.unformat("1asdf2")` but actually gets `12`) but I'll address that later with a more complex regex.
He is pompous, but yet, everything he says about Javascript is true. And much of it is insightful and unique. I wouldn't want to hang out with him for a weekend, but I enjoyed his Good Parts talk. 
Cool! If you find any bugs/issues or have feature requests, just make an issue on the github repo and I'll see what I can do, or submit a pull request. Cheers
What's the advantage of this over just using the site?
emacs v23 and later has js-mode built in; it is a rebadged espresso-mode. It works. I couple that with [flymake-for-jslint](http://www.emacswiki.org/emacs/FlymakeJavaScript) and I get dynamic lint-style highlighting of errors and warnings . 
emacs v23 and later has js-mode built in; it is a rebadged espresso-mode. It works. I couple that with [flymake-for-jslint](http://www.emacswiki.org/emacs/FlymakeJavaScript) and I get dynamic lint-style highlighting of errors and warnings . 
setTimeout isn't too bad, but setInterval is a pain. Say you have a web application with 10 potential "long-running" requests (such as generating a PDF/CSV, updating an external data source, or executing legacy batch files). You'd want to set up a poller (setInterval) to check when they're completed. Except, to cancel the interval when it's done, you need to store it in a variable. Because you'll lose method scope once you start the interval, you need to store that in the global scope. So now you've got a polluted global scope with 10 variables that may or may not get used in any given session.
This does support incremental polling, but not after `n` tries. Essentially, you just specify the "increment" parameter to the configuration and every time it polls, it will wait that extra time before running the action again.
it doesn't require an Internet connection
I hear that argument, but there are easy ways to structure the code to avoid that. I rarely use setInterval in favor of setTimeout, so that I ensure the code is done running before the timer starts again. I just have been using them so long they feel natural.
Where's the source code?
I see, that makes sense. Thanks for the explanation.
This is actually a pretty nice point. I would have loved to have this last week while I was stuck working without Internet.
phpjs? sprintf
ipad? pretty please! 
Love it. My only gripe is I feel like the scrolling is a bit slow. 
Reminds me of [this](http://29.media.tumblr.com/tumblr_l3h9z5pNkT1qc25jyo1_500.jpg)
I'm a contractor with a company and they send me to one conference each year. Pretty sweet, from my perspective, as it usually means a trip to San Francisco right when the weather is sucking hard where I am.
This turns out to be a lot slower then you'd think. JS just isn't built for strings and arrays the way C is. I implemented this in a project a few months ago, and the moment we had to make some optimizations, this got pulled in favor of simple templating. On the plus side, I could be sure that my formats in PHP would act the same in JS, which is nice...so there's that.
[https://github.com/edtsech/underscore.string](https://github.com/edtsech/underscore.string)
And momentum scrolling doesn't work well when apparently the rows are not display before. I don't mean to sound picky. Thanks GOBL1N. 
Great tutorial and the framework seems very easy to use.
A good starting point could be to ask the devs.
this is nice. here is a cronn implementation that one of the kids at work wrote. https://github.com/StefanLiebenberg/cron.js that might interest you as well.
How is it compared with [jQAPI](http://jqapi.com/)? I'm interested in the performance difference between AIR &amp; native app, but I have no iStuff to test on and they don't have an SDK for Ubuntu or Windows... 
&gt;Currently Red Locomotive is in heavy development. It is not ready for use. More information about Red Locomotive will be added here once there is something to play with. Damn...
this actually works perfect on the ipad. im impressed.
Im working on that at the moment actually
Looks great, but I can't use it on 4.2.1. 2nd gen iPod, yay I fail. Yeah, I know it's a little old, but I don't see why it shouldn't be able to run on it. If you have the ability to add that, it'd be great.
The laggy scrolling is because my scroller is written in JavaScrip
&gt; emacs v23 and later has js-mode built in; it is a rebadged espresso-mode. It works. I use this as it's baked in. &gt; I couple that with flymake-for-jslint and I get dynamic lint-style highlighting of errors and warnings . I need to get it set up with flymake...
That is probably a hardware thing. I wrote this app with the intent to create an app written entirely in JavaScript. That alone is probably limiting the performance on older devices
Some additional info for those unfamiliar with jslint: [JSlint calls itself "The JavaScript Code Quality Tool"](http://www.jslint.com/). It's a javascript program that examines Javascript programs, scanning for common errors, style problems, unclear usage, pitfalls. Douglas Crockford created it and still maintains it. For a while he produced a version that ran on WSH - the windows scripting Host that is builtin to windows. (It lets you run scripts of a variety of languages, including Javascript, from the Windows command-line). But apparently [Crockford dropped support for WSH some time ago](http://www.seank.com/index.php/2010/11/28/262). I'm not really sure of the rationale behind that. Even without Crockford's explicit support, [it's simple to get jslint to run under WSH](http://www.seank.com/index.php/2010/11/28/262). If you use emacs on windows to edit Javascript, it's also nice to run [jslint as part of flymake](http://www.emacswiki.org/emacs/FlymakeJavaScript) - it highlights errors in your javascript programs as you edit. To get this to work properly, you will have to modify jslint so that it emits error messages in a different format - more similar to a C compiler. Like this: sprintf.js(53,42) JSLINT: Use the array literal notation []. In the March 2010 version of jslint, jslint messages actually look like this: Problem at line 53 character 42: Use the array literal notation []. It doesn't mention the filename, and the line/column is non-standard. In emacs, that means `next-error` doesn't know where to go. Not sure if jslint still emits error messages like this, but it's simple to fix with some boilerplate added to jslint.js. The jslint-for-wsh that is linked in this article solves this problem. 
yeah, flymake is pretty handy. once you get it set up, it just works invisibly. Excellent for catching inadvertent typos, style problems, etc. http://i47.tinypic.com/2mk1eh.jpg 
&gt; Should they, too, have Googled instead of asking? Yes, everyone should Google first, then ask questions. It's even faster for the person who's asking the question. &gt; If everyone Googled instead of asking, there'd be far less material for future people to Google. Oh, please! As though you lazy !@#ts are somehow laying down the foundation for future generations of Google users, by asking the same questions that are already answered by many links in Google's results. Way to go, Baby Huey.
I love it for other languages so I guess I should also love it for js...
sshh guys, I think I heard something.... nevermind its gone
Maybe he did Google first, but couldn't find an answer? Some people are better at searching than others. At what point does it become okay to move your attention towards asking rather than searching?
&gt; Maybe he did Google first, but couldn't find an answer? I'm sure I'd have that excuse if I was too lazy to read, too. In this case, I didn't see the submitter mention anything about what he found using Google, so I suggested he use Google. I don't know why this would bother you, unless you are too lazy to read or use Google. &gt; Some people are better at searching than others. If you mean they're born that way, I'd disagree. If you mean better because they try to do things themselves until they actually improve at it, and put in a little bit of effort most the time, then I'd agree with you. &gt; At what point does it become okay to move your attention towards asking rather than searching? When you have googled for the relevant keywords or question, like "assign javascript anonymous function to variables", and actually read through the first page or two of results, and learned enough to refine your query, and googled a second time with your refined query, and read through the first page or two of results again. Most of the time you should get an answer before all of this happens, but the crappy results you should be able to skim through and weed out fairly quickly. The good results are worth reading. The good results are how you learn a lot more background/relevant information on the topic so that you are able to effectively refine and speed up subsequent Google searches on the topic.
Fair enough.
The parens don't create a new scope, the function does. The parens are there so that browsers don't confuse it with a function declaration.
thanks, I didn't know how to explain it so I took the shortcut of talking about "scope". I'll change it in the post. Thanks!
Technically, I believe the parens make the function an *expression* instead of a *declaration*.
Just so everyone knows, most of this code is less than 1 day old.
You might want to direct your devs to http://ontwik.com/ it's a site aggregating videos from tech conferences. There is a ton of information online (not just referring to ontwik), any dev worth their salt is aware of this and keeping up on their own.
onmouseover="dostuff()" ^ that
Looks nice
cheers. this is going to make me look like a rockstar at work.
I would look into using the [jQuery](http://jquery.com/) library which has an api for handling [hover events](http://api.jquery.com/hover/).
I think it is technically feasable. Just build a form for reading the starting URL and range delimiters. And then you can use Javascript for building new URLs dyinamically in that range. Use window.open("&lt;dynamicurl&gt;", "_blank") to open each url in a different window, being sure that your browser opens new windows in tabs automatically. For avoiding the security problems, try to use the JS setTimeout(...) function. If I were you, I'd use a clock interval larger than 0.5sec.
but what goes into the "dostuff()"?
I was trying to avoid jQuery. It would be so much easier to use it; but for what i'm trying to do; I don't want any slowdown.
i don't know, what stuff do you want it to change? function dostuff() { document.getElementById('stufftochange').innerHTML = '&lt;b&gt;look it's bold&lt;/b&gt;'; } 
Most of the latency for firing the hover event, is caused by browser, and this will be tiny. Any latency that jQuery adds, if any, will be trivial.
This is friggin' sweet man. Super impressive and well done. I have a meetup presentation coming up and I'm definitely going to use deck.js for it.
Once the user hovers over an image. Show an image in a completely different div and text in another div. I know I'm not giving you much to go on, and probably sounds messed up. But that's all I got.