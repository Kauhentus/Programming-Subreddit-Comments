Ah, useful. Thanks.
No 
The default value is "TRUMP" but you can protest against any topic you like. protest-against.now.sh was inspired by @NikkitaFTW’s fun apps to create music together. https://magicdrums.now.sh That’s also a much better way to spent your time, but sometimes you gotta make a stand for your political cause. The source code can be found here: https://github.com/vnglst/protest-against It’s still very hacky since I wanted to get this out of the door, but I’ll clean it up soon (I promise 😆) I’ve got many ideas for improvements, like: - start a counterdemonstration on same page (two columns) - start a riot! - call the police (if many people do that the protest will be closed down!) - let protester shout short chat messages - more sound effects - custom protester images! Let the protests begin! 📢📢📢📢 
Why would I use this instead of React or the many other jsx-based frameworks
I'd love to try out Go in the company I work at. Unfortunately it is not allowed, because at the moment the dependencies system is hard to mirror internally, thus makes it unusable for Pharma industries :(
[removed]
1: No 2: Java and Javascript are 2 COMPLETELY different things 
[removed]
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://github.com/websockets/ws) - Previous text "ws" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
I have never understood the appeal for Go. Its type system and ergonomics haven't really evolved beyond that of C, without providing the performance of C (though it's still on the fast side of the spectrum). If you want low-level and high-performance, why not use Rust instead? Or if you want to have a bit more comfort, but still stay high-performance (like Go), why not use Kotlin or even Java instead? All of these provide similar or better performance, with better type systems and ergonomics to boot (though Java only barely). I honestly don't see how a static language without null-safety, without generics, with poor type inference, with no convenient way of error handling and with a heavy emphasis on an old-fashioned imperative code style, fits in with modern software development. And if you don't care about type systems at all, like most JS devs, why not keep using JavaScript? For those people, switching to Go gives you the limitations of a static type system, without many of the advantages.
Well it depends on what you want. Thins includes prototype members, which may or may not be useful. function isEmpty(obj) { for (var key in obj) if (Object.prototype.hasOwnProperty.call(obj, key) return false return true } But I would generally just use the Object.keys way.
I like it, I'll definitely give it a try. Is with React suspense in mind? Could there be a SSR support?
As someone learning Kotlin and Java at the same time, coming from a JS background, Kotlin is fantastic and Java is verbose dogs balls.
You could use a pull through git server to vendor and proxy.
The biggest appeal of go is the strong networking primitives, concurrency model, and simple deployment model of small binaries perfectly suited for microservices architectures. The type system is OK, but the way you write and structure programs in go shapes the way you think about your networked distributed system.
I deal with 50-75 Invoices daily. The invoices are always formatted the same, the only difference is that if there are multiple items, the bottom half could change vertically, but everything on the top is a constant. I want to know, if there is a way where I can run a batch of PDF's through a script where the "Save As" Function would apply and have the Doc Name be what the "Invoice No." is Thanks for the help in advance.
https://github.com/golang/go/wiki/PackageManagementTools might be an option to self host a package management tool 
Good to know, will check that out, thanks!
 This is a short demo of water dynamics from my evolution simulator I'm building in TypeScript / WebGL2. Each "Pixling" (agent) has a neural network which controls their behavior, and I currently run up to one million of them at 60 steps per second, in the same simulation! Each time they reproduce their network is slightly tweaked and whoever is more fit to survive spreads more, so you get real evolution. Pixlings can also modify their environment, just like the player. Here's a video of Pixlings pouring out water: r/https://youtu.be/S6ysbht5Io4 , but really, you can give them abilities to do anything with their environment and each other (they then evolve behaviors using the abilities you give them). Some abilities my friends have given their Pixlings: plant trees, dig for food, steal from each other, fight each other, swim and generally survive in different biomes etc. etc. You can also add environments so there's a lot of possibilities to be creative with a world! I'm planing to write a blog post about the technology behind this, but figured I'd share something first to give people an idea of what it is. If you want to try it out yourself it's available here: r/https://pixling.world 
Lol this is so extra, I love it. 
Hi /u/ADingo8MyMemes, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
This is quite amazing
Hi /u/shahchirag1709, it looks like you're new to /r/javascript, welcome! Thanks for the submissions, but please make sure you read our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `blog.bigbinary.com`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [blog.bigbinary.com](/search?q=%28and+site%3Ablog.bigbinary.com+author%3Ashahchirag1709+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|33|97%
Hi /u/121blog, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Finally. A useful extension. 
It doesnt work with webpack yet, afaik. I couldn't even copy the number adding codepen to npm+webpack /w babel. Any tutorial on that? 
Languages shape the way you think whether written and verbal or programming. A Java programmer coming into JavaScript is going to do things in a very class-based manner and probably be bitten by the fact that JavaScript is prototypical inheritance and not Clasic OOP. Here's a link that goes into more detail about it. http://wiki.c2.com/?ProgrammingLanguagesShapeThoughts Regarding channels, communicating sequential processes CSP have some very nice mathematical properties to it. However, it is a fairly advanced use case often mis used when first learning the language.
Go's concurrency model is shit. It's inherently nondeterministic and requires a boatload of error prone boilerplate to do the most trivial task. There I said it. The only thing Go has going for it are the small binaries, which isn't much of an advantage given that Kotlin and Scala compile to native as well. (not to mention Graal native-image). 
This is awesome! I've been playing around with this myself for a while and you can get the neural networks to achieve pretty cool things like learning to dig through dirt or evolve into different specialized species that either gain energy from the environment or by hunting down other species and stealing their energy. My favorite emergent behavior so far was when I added a "Poop" action to my world and the Pixlings evolved to use it to essentially regurgitate food (ew) so they could sustain themselves longer in one spot instead of spending energy walking around, then they essentially waited for other species to walk near them and then they'd snatch the other unsuspecting creature (steal all their energy).
Well I guess I'll have to go to that site to test out your extension!
Thank you for your feedback! I think my documentation could definitely use some work. I'll take your advice and spend some time on creating better documentation tonight!
Behind the scenes it is a HoC that caches the state using \`setState\`. I opted to not to use any new react APIs yet primarily because it's so new and I wanted to use this library at work. I'll think about how I can use this with the new \`simple-cache-provider\` and suspense in the future. 
I agree the boilerplate is verbose however I found that I've been able to write fairly functional style programming, albeit with a lot of duplications because of the lack of generic support and requirement to be specific about the types the functions are handling or returning. However, interfaces can alleviate some of that pain even though I'm often more interested in the data type than the behavior. I find the lack of constructors and classical OOP refreshing and often use closures to create my functions with a bound context
This is really, really impressive!
Please bring this up in an interview and report back.
One thing to note about [https://www.reddit.com/r/javascript/comments/9cwg3o/cant\_get\_any\_other\_script\_working\_because\_the/e5dv7a8](https://www.reddit.com/r/javascript/comments/9cwg3o/cant_get_any_other_script_working_because_the/e5dv7a8) Is that those errors come from your \`style linter\` and are not actually runtime errors. The script might actually work fine. [https://www.jslint.com/](https://www.jslint.com/)
Thanks for your reply !
You are right, go forces the programmer to think about a lot of edge cases and error handling up front. The explicit nature has some benefits when attempting to debug applications at runtime. I think this is especially true when comparing with languages and frameworks that make heavy use of magical annotations. I like scala and think it's probably the best jvm language out there. I have yet to play with kotlin.
It's just some simple scripts , hahah. Maybe I can try it
I have an ideas similar to this, but is about peace and crime levels in US cities and towns. 
Technically it's possible and in fact node already does some of this with C bindings. However C libraries have their own deployment headaches. Another possible pitfall with this approach is the expansiveness of modern C plus plus. There is a strong correlation between language complexity and bug density. Simpler languages like closure and go tend to have a lower bug density count whereas more complex languages have more, regardless of type system. I think you would be hard-pressed to match go's performance with node even with C bindings. In fact when you look at case studies such as Raygun, when they ran into performance problems with their nodejs services they ended up replacing them with dot Net. So the question becomes is it worth the effort? Facebook thought so and they essentially rewrote PHP and are now doing the same with python. But most of us aren't at that scale with that many application in production to support. It comes down to picking the right tool for the job. That might be the one you're most familiar with, or it could be good to learn different paradigms and think about the problem in a whole new light.
Hi /u/Yogi_DMT, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
I like that article. It's good to know the warts. &gt;There are only two kinds of languages: the ones people complain about and the ones nobody uses - Bjarne Stroustrup &amp;#x200B;
I once had done a very simple generation simulation in js. Eat food or poison. Based on the coding train. Added the option if they are hungry enough to eat each other. Was hilarious how they avoided food just to hunt others. 
I may be the outlier here but I really enjoy the language. Pros: - Performance! - Extremely simple - Strict typed - Garbage collected (no memory management unlike rust, c++, etc) - Compiled (single, small executable. No node_modules directory to install and pass around) Negatives: - Lacking package management (pro and a con giving the issues with NPM) - Error handling is verbose. Below sample needs to be perfermed after ever action that returns an error. if err != nil { &lt;handle error&gt; } 
This is really cool 
Yes, but you need to give permission to use your camera.
Nope, I do not
Ok.
Hi, Can you give me an idea of how you have done working apollo-client with Postgraphile? I cant connect it using the API of Graphile. Thanks
Yeah, you might be on point, but still can't figure out why the second script stops the first. Any hints? I've looked at it but no idea.
I'm aware of that. But this article is about what TypeScript supports in JSDoc, which is different than what the Closure Compiler does. The TypeScript team has chosen to ignore optionality that use the "=" operator: https://github.com/Microsoft/TypeScript/wiki/JsDoc-support-in-JavaScript#patterns-that-are-known-not-to-be-supported /** * Optional members of object literals (optionality is ignored) * * @type {{a: string, b: number=}} */ var var12; 
Ah cool, I'll have to check it out! And thanks :)
Yea well, you already have advanced algorithms there and he only scratched the basics. Nonetheless, worth the view. 
What part of it looks useful to you?
Stellar work. Really eager to read your blog post and about the tech; and particularly if you'll be sharing any source code or what your plans are for the future of it. 
Thank you for your answer Ni55aN, here is a link to my [Github GIST](https://gist.github.com/AdamSpindle/0a4f73ff33ad8a83d4b246c063c6bb12), I tried with vue loader etc, but the inputs are not showing in either chrome nor ie11. &amp;#x200B; Thanks in advance. :) &amp;#x200B;
What's your background in? This is incredibly impressive.
&gt; small binaries perfectly suited for microservices architectures Microservices is a software architecture for large systems. Binary size is a storage issue. I doubt anybody is saying their microservices architecture is being hindered by a couple of megabytes... I do feel that there is a strong overlap of go users and microservice advocates.. I'd like to call that overlap hype-oriented programmers.
\&gt; Go is typed, but [no generics](https://golang.org/doc/faq#generics). This means that you don’t have the lodash-like map/reduce functions. Since when do map/reduce/filter require generics? 
Debug it to make sure you're following the right lead. copy + paste all the code into the \`scrollTop\` script tag and see if it's the code or something else. then just keep pulling the threads until you find the issue. 
I wish I could say the same thing about their API
[This is one of my Lambdas](https://github.com/cazzer/breakdown/blob/master/src/postgraphile/index.ts) which handle GraphQL via Postgraphile. The repository as an entire stack is a bit tricky to setup and undocumented, but you should be able to use the logic in that function independently, as it's own API endpoint. I mostly this [the Schema Usage](https://www.graphile.org/postgraphile/usage-schema/) page from the docs. The important bits are: ``` const postgraphileSchema = await createPostGraphileSchema(DB_ENDPOINT) const result = await withPostGraphileContext( { pgPool: pool }, async context =&gt; { return await graphql( postgraphileSchema, // graphql input is the body of the request graphqlInput.query, null, { ...context }, graphqlInput.variables, graphqlInput.operationName ) } ) ```
I amount of time yu
Thanks for the insightful reply.
Why the hell would someone down vote "thanks"?
Binary size can be meaningful in other ways, such as: * Shipping large containers over the wire frequently can cost money and deployment MTTR time * exacerbated by following best practices of always pulling containers to avoid local cache injection * having larger attack surfaces of unused unneeded code * having long startup times When your code is explicit and smaller it is easier to review and audit.
Found it! Countdown timer worked after I ran debug and this was popping up as error: easing: transitionEase So I deleted it and the timer started to work. Now gotta figure out how to make scrollTop work :)
amazing demo. not perfect but pretty cool to see that 'just' on a browser
Thanks, this is a great idea. I'm trying it out now.
People definitely care about versions. If you want your package to be used, you should adhere to semver. As for .gitignore, if you're storing it on GitHub you should be ignoring your node_modules folder at the very least. I don't personally know how it actually calculates those values but for reference, one of my modules https://www.npmjs.com/search?q=kwiwk%2Fit-utils has high maintenance and quality (probably because I have a license, .gitignore and other things). I'd be curious to know how it decides to rank such things.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Very cool work! love it. I enjoy coding on these kind of projects as well. A while back I was planning on simulating metabolism and needed some basic “blood vessels” with flowing blood. The end result was quite nice: [http://insector.se/biosim/biosim.html?1](http://insector.se/biosim/biosim.html?1) [http://insector.se/biosim/biosim.html?2](http://insector.se/biosim/biosim.html?2)
&gt;Reverse Compatibility do you mean Backwards Compatibility? or something else?
[https://forum.vuejs.org/t/vue-2-0-warn-you-are-using-the-runtime-only-build-of-vue-where-the-template-compiler-is-not-available/9429/2](https://forum.vuejs.org/t/vue-2-0-warn-you-are-using-the-runtime-only-build-of-vue-where-the-template-compiler-is-not-available/9429/2)
Very cool, any plans on open sourcing this?
arr you the creatures evolution guy ? 
Remove numbers from string: const strWithoutNumbers = str.replace(/\d+/g, '') // output: ​​​​​iuehrvbiuuyghughuytgnjeyhurreywtcyytbtftbe​​​​​ &amp;nbsp; Extract numbers in an array: const numbers = str .split(/[^\d]+/) // split by non-digits .filter(Boolean) // filter away empty values .map(Number) // convert strings to numbers // output: ​​​​​[585584, 7845, 4, 5, 7, 5, 9, 8, 5, 98, 9, 7, 7, 45, 476, 9]
I tried to make a similar game to this but failed. I like your use of a grid though... Might take another stab at it using a grid! Good work :)! 
Actually, latest release of VSCode now supports using "=" to indicate optionality. So I take my previous comment back. Both work. However, since this has nothing to do with actually compiling with Closure Compile, which you use doesn't really matter. Personally I prefer the brackets because using "=" for optionality looks too much like ES6 default value assignment, except the value is missing. 
Second try: [https://github.com/stepanvanzuriak/Finite](https://github.com/stepanvanzuriak/Finite) (Finite state based JS micro framework)
The post practically says nothing about composition other than inheritance is not available and composition must be used. It makes me want to rip my hair out - I can't believe the author writes Go and managed to exclude such massive implementation details. Think of it this way - you have two "objects" that you want to spec out, you have `person` and an augmentation of `person` called `developer` to add role-specific properties. With inheritance, you'd subclass and override methods as needed. With composition, `developer` would compose of `person` and all functional methods define which constructs they will operate upon. The idea is to avoid long chains of inheritance that complicate code. Think how many levels of inheritance abstraction HTTP networking goes through in a modern application; it gets messy really fast! Here's a fairly good writeup of composition in Go (most articles well ranked do a terrible job): https://blog.johncrisostomo.com/basic-oop-and-composition-in-golang/ And Wikipedia has good info as well: https://en.wikipedia.org/wiki/Composition_over_inheritance
Worth noting a few things, nothing that's a complete show stopper - but implementations have a big impact. For example, have you ever tried to use realtime communication with PHP? It's a nightmare, Ratchet is the most elegant solution and it's still [arguably] overly complex. PHP wasn't designed to handle realtime persistent communication at its core. 1) Almost all of the Go ecosystem is optimized for multiple threads, while Node can be a nightmare to efficiently handle many multi-threading use cases. There are a lot of tools to handle this in Node, but proper architecture for good performance is not always clear to all devs. 2) Check out how Golang pushes JSON parsing; the ability to stream and chunk objects in memory is really awesome. This can be done easily on Node with packages like `stream-json`, but most devs wouldn't bother to use it and many use cases likely won't yield performance benefits due to response size (using globally would likely be a deficit). 3) Forced composition is really awesome and took me some time to understand (mostly due to ingrained conventions and poor articles), check these out: https://blog.johncrisostomo.com/basic-oop-and-composition-in-golang/ https://en.wikipedia.org/wiki/Composition_over_inheritance
I generally recognize it as a replacement for Java with performance similar to C++, with conventions that make things more comfortable for Java &amp; JavaScript developers. At some point it's less about performance and more about implementation; I love decoupling from a Java runtime, being able to statically build, and automating docker deployments with &lt;15mb images (I have some down to 5mb for dynamic web application servers). I can build and deploy a Go application to something as small as an ARM Cortex-M0; traditionally that's been something limited to C/C++. I'm also a fan of Rust, but have zero interesting in pushing it on JavaScript/Web devs. Plus it's taken Rust a really long time just to get HTTP/2 support in any form. Rust and Go target entirely different demographics.
Why would you ever want to do this check?
That was great, thanks for sharing!!
One way is to do it like below. let str = 'iuehrvbiuu585584yghu7845gh4u5y7t5g9n8j5eyh98u9rre7ywt7cy45ytbtftb476e9'; let result = []; str.replace(/[^0-9]+/g, (m) =&gt; { result.push(m); }); console.log(result); 
It's the software developers' job to filter the data, not `innerHTML`. `innerHTML` does what it is told.
Thank you!! you really went above and beyond. I see some new things here that i can use and learn. Do you know what was wrong with my functions?
Looks nice.
Exactly. I'm emphasizing that it can be a security risk if input is relayed directly to innerHTML. InnerHTML vulnerabilities are somewhat common so we should tread carefully before assuming a developer will use it correctly. That is why I placed my caveat and offered more secure-by-default alternatives.
Reminds me of carykh's evolv.io
&gt;Q. What’s the result? &gt; &gt;`(function() { return +(new Date()) })();` Well then...
There's a reddit for that /r/learnjavascript Do you already know HTML and CSS? Or have you worked with other languages? What do you hope to achieve?
Which one is that?
I opened up a couple of extra spots, you should have access now.
OMG What are you doing, you monster? You destroyed those people's homes and cities!!! Have some mercy, will ya?
This is really awesome.
Hi /u/PeanuT_EU, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Many things that should be are done implicitly in Kotlin. It’s like the short hand version of Java that’s easy to read, write and remember. I’m only done with general syntax, so there’s many more differences to learn, but it makes a lot more sense than Java.
Man that's nice, I really need to learn webgl, do you use an engine like phaser or is it from scratch ?
You wrote: &gt; If it's a string, innerHTML would be used in most cases. which on its own is a bit misleading. I'd say "If it's a *safe* string of HTML..." If it's a plain text string you should definitely be using `textContent`.
this is how God flooded Earth
Technically rust doesn't have memory management either.
JavaScript doesn't have strict typing so it doesn't matter but most languages would need to express a generic method say for map where map takes A and returns B. Otherwise you'd need to enumerate all As and Bs to have a method signature that matched. Or I'm an idiot, just guessing.
You can play 3d pinball on windows NT 3.51 so you don't need xp for that.
The newer versions of Chrome absolutely do not support Windows 2000. 
No It gets the values in the wincombos array at indexes 0,1 &amp; 2 and gets the cell value so if the first array in winCombos is [0,1,2] then it will get the value of cell0, cell1 and cell2
There were logic errors in your checkForWin() and misplaced return statements 
Odin Project. [https://www.theodinproject.com/](https://www.theodinproject.com/)
Thanks. And what micro-services you recommend?
WOW! Thank you so much for the time you took to reply and the resources as well!! I was wondering how to manage state and didn’t even know there was a client side DB I could take advantage of! So much to learn, but thank you for the head start! I was thinking React might have been a bit overkill too, though the challenge would be cool. 
Good to know! I kept hearing about GraphQL lately so I was curious to know if it was something to consider!
WOW! Thank you so much for the time you took to reply and the resources as well!! I was wondering how to manage state and didn’t even know there was a client side DB I could take advantage of! So much to learn, but thank you for the head start! I was thinking React might have been a bit overkill too, though the challenge would be cool. 
ohhh ok thanks!
Micro services are an architectural term not a shopping cart of plugins. You need to flesh out what you need in regards to feature set before asking again. Also mongodb can be used in a traditional database just takes a bit of configuring. 
Oh, alright. I will have to check that out. Thanks
Great advice! I often bite off more than I can chew when I try to include more specialized frameworks/libraries. I never worked with web-sockets before, but now is a good time as any! Yeah the text log is really the only big thing I’m worried about. I don’t know how to save a user’s progress or how to determine where a user is in the storyline (so I can parse the right next line). The easiest way I think is to save the whole history log to an object and store it in local storage? I REALLY need to do more research. 
Its types are by default non-null. Meaning I **can't** do `var num: Int = null` but I can make it optionally null like `var num: Int? = null`
Np, btw after you've got some mocks and a bit of code going; I suggest to shift gears from thinking about creating the full game in one shot and instead begin making bite sized "demos" of each of the features you want in the game; each demo demonstrates a certain situation or scenario in which you have something special going on. Extra points if you export a (private) module from each demo you can use in the main game; thus achieving. Extra extra points if you write a [test](https://github.com/substack/tape) to test this module routinely as you develop the rest of the game to ensure you aren't breaking existing code as the project comes together. 
Does this use WASM? If not then I've truly understated webGL
Thank very much sir for sinking my productivity. Signing up and recording video as I write.
Indent with 4 spaces: https://www.reddit.com/r/HFY/wiki/ref/faq/formatting_guide
Within days I am launching a beta version of a curriculum geared to high school students. PM me and I'll be happy to give you access now, pre-beta, in return for your feedback.
Move switchTurn(); in runGame() function after checking if the game is over i.e. function runGame() { //if game is over or cell is not empty, do nothing if(gameEnded===true||cell.innerHTML!=='') { return; } //set cell to playerTurn cell.innerHTML = playerTurn; //change playerTurn //check for winner if(checkForWin()) { alert('game over'); } switchTurn(); } 
But Ember is by far the slowest framework around.
[removed]
If you check out [this blog post ](https://engineering.linkedin.com/blog/2018/03/how-we-built-the-same-app-twice-with-preact-and-glimmerjs) you’ll actually see that Glimmer.js was comparable to Preact in all perf scenarios. Ember does add some extra weight on top of Glimmer, but the Ember team has been working to make that extra weight opt-in, like adding additional libraries to a React/Preact/Vue app. You can see the [2018 roadmap RFC](https://github.com/emberjs/rfcs/pull/364) for more details on those goals! In the long run I believe templating will pay off for perf, but it still remains to be seen.
Well the Go designers are geniuses because you can do map/filter as shown in this post. “Functional Go” @geisonfgfg https://medium.com/@geisonfgfg/functional-go-bc116f4c96a4
Web gl is basically open gl
This is amazing OP. I've always wondered when seeing cool stuff like this how much time have you spent on this so far and how many lines of code have you written? 
Go doesn't have close to C++'s performance lol. It even lags behind Java sometimes (speed wise). 
I dont even work with react-native but this is amazing. Makes me want to learn react native and build something. For now please take my upvote and a star. 
No plans to open source, but I'm planning on writing a little bit about the tech behind it
No WASM, it's just webgl
Rails is still a thing?
Started in May this year, and working quite a lot on it since then. It's getting close to 15k LOC now
the document.ready function will get called *once* when the document is ready. At that point the scroll position is probably at the top of the page. You're not calling anything again when the user scrolls, so your animate code never gets called.
Makes sense. Would putting it in a scroll function work? 
Yes. Your code is checking when the user has scrolled, so you need to check it after the user has scrolled - in a scroll function. Your code will only run when you explicitly tell it to - the presence of an if statement won't make the browser think (oh yeah, I saw an if statement about that a while ago, better run that bit of code) - it'll evaluate it only when it's run, and only execute the body of the statement there and then if the result is true.
If you compile down to wasm, would you get a huge performance boost? 
Thanks!! It already seems to work better!! 
Further to this, there is an event listener for the "onscroll" event on the window. You can use it to change your height variable every time the user scrolls. MDN is your friend: https://developer.mozilla.org/en-US/docs/Web/Events/scroll
Preferably use `.textContent` instead of `.innerHTML`
Plenty of teams still use it ¯\_(ツ)_/¯ 
You dropped this \ *** ^^&amp;#32;To&amp;#32;prevent&amp;#32;anymore&amp;#32;lost&amp;#32;limbs&amp;#32;throughout&amp;#32;Reddit,&amp;#32;correctly&amp;#32;escape&amp;#32;the&amp;#32;arms&amp;#32;and&amp;#32;shoulders&amp;#32;by&amp;#32;typing&amp;#32;the&amp;#32;shrug&amp;#32;as&amp;#32;`¯\\\_(ツ)_/¯`&amp;#32;or&amp;#32;`¯\\\_(ツ)\_/¯` [^^Click&amp;#32;here&amp;#32;to&amp;#32;see&amp;#32;why&amp;#32;this&amp;#32;is&amp;#32;necessary](https://np.reddit.com/r/OutOfTheLoop/comments/3fbrg3/is_there_a_reason_why_the_arm_is_always_missing/ctn5gbf/)
Probably not a huge one, since it's currently GPU bound (i.e. the CPU is mostly waiting for the GPU to be done with its work).
imo, anyone worth hiring will be able to pick it up. :) the good devs should be able to pick up anything.
[removed]
So you only want to enable the animate class the *first* time the user scrolls to the right position? In which case, only call toggleClass if the element *doesn't already have* that class enabled if (!$(".appearh3").hasClass("animate")) { ...toggleclass... }
I fixed it like this, works now! &amp;#x200B; $(document).ready(function(){ var toegepast = false &amp;#x200B; $(window).scroll(function(){ var scrollPos = window.scrollY &amp;#x200B; if (scrollPos &gt; 200 &amp;&amp; !toegepast){ $(".appearh3").toggleClass("animate"); toegepast = true; } }); &amp;#x200B; &amp;#x200B; &amp;#x200B; });
WTF JS [https://odykyi.github.io/javascript-idiosyncrasies/](https://odykyi.github.io/javascript-idiosyncrasies/) 
Yes, it is more accurate approach
Please don't comment code in languages other than English, even if you're working in non-english environment. You never know who might be looking at the code in the future - the amount of times I had to debug a library only to find all the comments and documentation is in Chinese...
Thank you regnagleppod1128!
That is impressive, but still a bit blotchy to me. It's like Minecraft. It would be so nice if the resolution increased when you zoom in. (But only locally, things that are off screen can keep the current resolution.)
looks cool
&gt;We can achieve similar parallel processing by spawning multiple threads in other languages. But, it comes with the cost of increase in CPU and RAM utilisation. nginx (not JS) manages to do async, and does a damn good job of it using minimal resources. &gt;JavaScript’s evolution has helped push innovations such as hot reloading, Hate to be that guy but Erlang was doing that quite a few years before JS.
Thank you, it works just fine. Starred on github. :) 
Thank you! Maybe if you have some CS/IT students at your school, someone would (know someone who'd) be keen to help set it up for what you want.
You need to use it. While you are learning it think: I could use this in order to... And then go use it to do something. The only way to really learn programming is massive amounts of practice. 
Or at least read its source code. Back in the day I found that very useful for figuring why it works like it does for some things. In OP's code there is nothing that wouldn't be the same effort with plain Javascript.
I've been improving my JavaScript knowledge with a video course on Udemy recently and I've found if I pause the video and write my own explanation of the concept being covered with examples if needed, it helps it stick a bit better because I've taken the time to think it through and translate it into how I think. It's been my most successful attempt so far. Also, when we've moved on and covered another concept and it builds upon one we've learnt before but I need a refresher, I then have a searchable document with my own explanations to quickly remind me. You could probably translate the technique over and stop at the end of each chapter/topic/concept. &amp;#x200B;
[FreeCodeCamp.org](https://FreeCodeCamp.org) is my #1 recommendation if you're starting out. It's quite wonderful, and I'm completely self taught. After that, consider using Udemy and getting a few paid courses. You shouldn't pay more than $12 a course on there.
I didn't see a clear statement for why to use this. I'm assuming it's not for development or testing, since there's Flow and TypeScript for that on the code &amp; compile side, and at least Flow has a runtime checker (https://codemix.github.io/flow-runtime/) that can tell you when your models are assigned the wrong value type. So I imagine this is for cases outside development such as user input or API usage, but this type checking would be one step removed from those parts of the code, and preferably the type checking would be explicit there as opposed to implicit to improve the chances for the end user to recover from a problem. Anyway, did I miss a clear use case for this library?
No worries, your English is good enough. The point wasn’t to comment this particular repository, but rather give an advice for future work of yours.
Hey, this is really cool! Great work. Are you planning to add more effects in the future? Watching just one effect might be a bit dizzying in the long run.
I vote for the giant json blob in a single data- attribute. ASP View State is back in fashion it seems.
Learning to program is not learning to retain information. Think of it more like learning to play a guitar. If you just read about guitars, chords and whatnot do you think you will know how to play it as soon as you pick it up? Not a chance. You need to pick it up and use it. Be bad, make mistakes, but use it a lot untill you get comfortable. Programming is a skill, not a list of information, you have to write the same thing over and over again for different purposes and it will become like a second nature to you. Also, don't just try to learn commands, you can always google commands later, it's more important to understand concepts. Once you know and understand what an arrow function is and what it's used for, you can always google how to write it if you forget correct syntax. Make some projects, make a button that increases a number each tine you press it. Do it with the most basic JavaScript possible, then read a few new things and try to apply them to your program. Make a simple todo list etc
can someone tell me the use case for this im struggling to think of one 
If there are two comments here (beside this one), i cannot see them.
If you have to pre-render a lot of stuff while the main canvas is loading without causing frame drop
Thanks!
At my old company we used GitHub and TeamCity. At my current company we're using Gerrit and ESlint. I got very used to both setups while I was using them, so it's hard for me to say if either one was "better". I've been very interested in moving to Phabricator, but I don't have any experience with it yet to say if it's actually good or not.
If you're using the old Reddit layout, when posting a self text, you can click on the *formatting help* link at bottom right below the text input box to see a brief help.
Might want to drop the templating engine and work on primitives, then render the form based on that. Also read up on state machines.
I suppose the only new problem now is, &amp;#x200B; How do I reset the function when the Y is back at 0
Thanks! &gt; ASP View State Exactly! I'm seeing this more and more in the wild also. I found this in the meantime: https://github.com/renvrant/conditionize.js, which reminds me of Vue's `v-if` syntax, which I'm a big fan of. I'm not using jQuery, so I'm considering using the json blob + creating something similar to that plugin in vanilla JS. Wonder if it's worth packaging it up and sharing it... if it isn't garbage 
Also dynamic images. Draw on canvas -&gt; convert to blob -&gt; send blob
Can I ask if you wouldn't mind explaining a bit further? The reason I chose to template is because the API returns the form structure, which can vary massively. I wanted the API to control the form, and the JS just build whatever it was told to (from the API). I understand I could've used Vue (my preferred go to), but I had a few constraints out of my control, and it 100% needed to be drag-drop compatible with the minimal amount of setup possible on the frontend
sounds like /r/java to me
I'm excited for this feature, but very disappointed at the almost completely non-existent browser support. Similar with SharedArrayBuffer.
Add another check if height is zero and your flag is set, then unset the flag and remove the class
&gt; What's the proper way to put text from a JavaScript variable into the inner text of an element like that? It depends on what you meant by "put". If it is to replace, you can use either `innerHTML` or `textContent` - depending on the source text. If the text is formatted, meaning that it's a multiple-lined text, you'll have to use `innerHTML`. New line characters should be converted to `BR` HTML tags, and characters which are part of HTML special characters must be escaped using HTML entity. e.g. the `&lt;` character should be converted to `&amp;lt;`. If it is to append or insert, for formatted text, use `insertAdjacentHTML()` so that it won't force browser to re-parse the existing HTML code, re-create the DOM nodes, and re-insert the DOM nodes into the document. For plain text, reassign the `nodeValue` property of the text node. If the target element contains only text and doesn't contain any element, you can simply reassign the `textContent` property.
Ugh feature toggles, feel like either using a proxy and running previous versions in parallel would be better, but that’s just me.
&gt;PS: The above code rejects a Promise after given number of ms. Correct. It will wrap a given promise in a new promise that will either, resolve when the wrapped promise resolves, or fail when the wrapped promise fails, or fail after a given amount of milliseconds. 
&gt; this subroutine Off topic, do you come from Perl?
we live in a society
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
It depends on the contents of the string and how it's supposed to be displayed.
this.typingTimer isn't actually referencing the typingTimer variable that you created in the constructor. If you bind this to the listener, then it would be. The others are all referencing variables that you expect to be initialized to something. When they aren't, it fails. typingTimer doesn't need to have been initialized. You're probably actually creating a second typingTimer variable on the search field itself.
Thank you! Yeah, it can get a little epileptic can't it? You know, what I'd really like to do is integrate with something crazy using three.js – I have zero experience with it, though, and it's a little intimidating. 
Sorry, was in a bit of a hurry. What I meant by "dropping the templating engine" was actually just dropping it until you have the structure figured out. I'd say primitives offer much more flexibility and readability, you could construct an object which represents the final state of the form and only then render it with the templating engine. This is somehow similar to what React and is doing with virtual DOM. If this is as complex of a system as you portrait it, the way I'd try to approach it would be to build a state machine that defines all the transitions (or can understand the API form definition structure), so whatever happens after your "toggle" evaluates to true. Then, invoke the state machine on input events, and update the form based on the difference between your previous and next state. So let's say the API provided you with the following configuration: { form: { age: { element: 'input', type: 'number', }, parentName: { element: 'input', type: 'text', toggle: { show: ['age', '&lt;', 18], }, }, }, } On every `age` change, you'd run a function evaluating all the toggle conditions, and whichever passed would execute appropriate action, in this case `show` a `parentName` input of type `text`. If you settled for primitives, this would update a key on an object abstraction of your form, which you could later compare with your previous state and update the part of the DOM tree this entry was for. Obviously this is a very simplified example and I'd have to see the structure or better understand the actual behaviour you're trying to program to provide any meaningful POC, but it's an interesting task. Probably easier to implement the actual behaviour on the front-end, but having the API decide the shape of the form only makes it more interesting.
404
Retention for me comes after implementation; it is even better if I run into roadblocks.
https://webcache.googleusercontent.com/search?q=cache%3A%2F%2Fwww.polemicdigital.com%2Fgoogle-amp-go-to-hell%2F&amp;oq=cache%3A%2F%2Fwww.polemicdigital.com%2Fgoogle-amp-go-to-hell%2F&amp;aqs=chrome..69i57j69i58j69i60.4173j0j4&amp;sourceid=chrome&amp;ie=UTF-8
learn by doing - 1 read an entire tutorial from start to finish - 2 try to complete the tutorial with what you memorized without looking at it. The only exception are obviously api or tool names, you're not supposed to remember a 150 character long namespaces, or every methods, on the other hand you should remember what each of them do given a name and how API and classes fit. - 3 revisit the tutorial a week or a month later. For instance I'm learning web audio. I read a tutorial on MDN (mozilla dev network) about playing an audio file. I need to remember what ArrayBuffer , AudioBuffer, AudioBufferSource AudioContext are and how they interact together in order for me to play a sound. I don't remember the exact api of each classes but I know I need to fetch a wav with ajax as an ArrayBuffer, then decode it as an AudioBuffer then create an AudioContext which will create an AudioBufferSource, set the buffer source to my AudioBuffer, connent the audio buffer source the the context destination and call the start method at time T to play the audio file. In fact it is exactly like remembering cooking recipes. In order to make a cake you need this and that and eggs, then perform some operations in a sequential order. So for instance. Ask yourself. How do you persist a record with eloquent, what are the steps? If you remember the steps then you learned something. 
I think the biggest problem is just the lack of structure. Ultimately you are just proposing an RPC solution which is not what rest or graphql are doing. The value of them is the structure they provide - specific methods and resources in rest or explicit schema in graphql. When designing your own protocol you should first and foremost think about the end goal. If you want to do RPC cool, but you have to figure out if what you have is somehow better than other RPC approaches. I would suggest going even more on the json side of things. Have an option to document your api in json (look up jsonschema) and generate front-end and back-end code from it. This way you could abstract a server side function into a client side function that returns a promise - all configured through a json config and optionally type safe. 
They are shadow banned
It will be created on `window` actually. Anonymous unbound functions will get called with `this` set to `window`. Also, referencing the variable like that in your constructor won’t do anything; without an = it’s a reference, not a declaration. But like name_was_taken pointed out, timers don’t need to be initialized before you clear them.
Code camp is awesome, thanks!
" **When to use innerHTML** ", NEVER!
`this` will be [whatever the event has been bound to](https://codepen.io/anon/pen/ZMXvGv?editors=1111).
I don't know if I understand you, but the problem is not with typingTimer, but with the call to the function. The problem is with the callback functions of the event listeners, not the variables from the constructor. If you look the 3 eventlisteners inside event() you will see that 2 only work with bind and the last work without bind, that is what I don't understand.
Inside 2 of your callbacks you reference variables that are initialized with DOM elements. Those are the 2 that don't work unless bound. Inside the third callback, you *attempt* to reference a timer variable that you created in the constructor, but it doesn't need to be initialized and is instead *being created somewhere else*. The first 2 fail because they expect objects to exist that don't exist in their scope. The third one doesn't fail because it silently creates the variable inside its scope. .bind changes the scope of the function. 2 of them require a certain scope. The other one doesn't. I hope that's more clear?
I don't know if I understand you, but the problem is not with typingTimer, but with the call to the function typingLogic inside of the eventListener The problem is with the callback functions of the event listeners, not the variables from the constructor. If you look the 3 eventlisteners inside event() you will see that 2 only work with bind and the last work without bind, that is what I don't understand. openOverlay and closeOverlay must be boind, but typingLogic doesn't... don't know why
Inside 2 of your callbacks you reference variables that are initialized with DOM elements. Those are the 2 that don't work unless bound. Inside the third callback, you attempt to reference a timer variable that you created in the constructor, but it doesn't need to be initialized and is instead being created somewhere else. The first 2 fail because they expect objects to exist that don't exist in their scope. The third one doesn't fail because it silently creates the variable inside its scope. .bind changes the scope of the function. 2 of them require a certain scope. The other one doesn't. I hope that's more clear?
I thought that it failed at calling the method, not at executing it, I can be wrong, I will take a look later 🤔
Your third listener will not bind the function to the correct `this`. If you `console.log(this)` in `typingLogic` you will see that it is the element it is referring to not the class itself. So if you need to play with a property of your class you will need the `bind` there too.
But the third listener shouldnt even find this.typingLogic because that method doesn't exist in that 'this', am I wrong?
You're not wrong, Walter, you're just an asshole.
the irony
WHY?!?!
It can, log `this` inside your events() function and you'll see the context there. What you're binding in those handler functions is the `this` reference for those handlers themselves. It doesn't change the `this` for the place where you're binding the event - in events().
In my day, we called Algol68's functions subroutines too!
[I'll just leave this here as another resource.](https://github.com/micromata/awesome-javascript-learning#free-ebooks)
Wow, so much rage (from a guy that, per Krayjake's comment, can't even keep his own site up ;) ). I would have found that article so much more convincing if the author had actually addressed **WHY** Google is pushing AMP in the first place. He makes it sound like it's just Google wanting to tell everyone how to make their page because they are evil and want to control everything, which honestly makes me question whether the author even understood what AMP was. Allow me to explain: AMP is just a set of standards for minimalist (mobile) pages. That's it. Certain tags/attributes/etc. are prohibited (eg. no `script` tag unless it has type `application/ld+json`) and others are replaced. For instance `img` is replaced with `amp-img`, because the latter has functionality for fallback images, extra AMP attributes like "layout", etc. The goal of all these changes is to get mobile pages to run faster, at least in Chrome mobile, and that's good for both users and developers. And these aren't just random changes: this is what some of the smartest web engineers on the planet, working on (arguably) the smartest browser on the planet, have found to be the best ways possible to optimize things. Does this make AMP good? Of course not! Microsoft used to push Internet-Explorer-only features on developers back in the day, promising that they'd be better, and all it did was fracture the web. After years of developers hating on the IE team, they finally realized their error and stopped doing it ... and now Google's taking their place. But again, it's not as simple as "Google is evil and is trying to abuse a monopoly" (like with Microsoft). This is a technically sound approach for improved mobile performance from the people who write the browser code responsible for that performance. It's just tragic that Google has decided to go it on their own like old/dumb Microsoft, instead of trying to standardize AMP.
If the document is secure in S3, you'll have to make generate a public token long enough for the google viewer to read the document. In addition the google viewer download may not work unless you keep the token active for a long time. I've never used pdf.js but have used the Microsoft office viewer - which is create for xcel and word, but no PDF support.
Yep, I am creating a URl for public consumption with a brief expiration date for the user to use as you described! I just wanted to be safe and hope this is a pretty modern way of doing this since most info i saw online was 5 year old stackoverflow posts. 
Code splitting is one of those things that generally seems like its more trouble and more of a maintenance headache than its worth until there is some universally standardized approach regardless of app architecture.
Firstly, I upvoted: thank you for a great rebuttal :) Secondly, AMP is great when it’s instant. However it’s only instant through Google because the pages are requested before you even intend to visit them: see #4 here https://ferdychristant.com/amp-the-missing-controversy-3b424031047 This means your connection is downloading those pages even if you don’t view them. Maybe not much data is used, since AMP enforces light pages, but more data than the current page you’re viewing (e.g. Google search). I’d love to see if any other AMP cache hosts do the same. Interesting how this may turn out :)
So, the IIFE will not hoist here?
[https://codepen.io/spabsa/pen/wxJqPq](https://codepen.io/spabsa/pen/wxJqPq) &amp;#x200B; here it is on codePen, I've tried a few other things that's why the code is different but same issue, I'm thinking its gotta be the way javascript runs, at least that's the best answer I've gotten from stack overflow, but no real solution for the code.
Hoist to where?
When you don’t need webpack anymore to get fully working imports and dynamic imports in ECMAScript in all browsers and when HTTP2, which can transfer multiple files in one response, is the standard mostly everywhere, then it will make sense again. Then you can cleanly load only what you need, when you need it. And even then, there’s still the argument of minifying a whole bundle, which is more efficient than minifying single files through the way minification works and that will probably not change. Everything else will end up in request orgies.
Use *Promise.reject* and it's even easier to read: const timeout = (promise, ms) =&gt; Promise.race([ promise, delay(ms).then(() =&gt; Promise.reject(new TimeoutError())) ]);
AMP is also Google's way of spying further on everything you do. From Google themselves: &gt; The Viewer is a hybrid environment where **Google and the third-party webmaster may each collect data about you**. Data collection by Google is governed by Google’s privacy policy. Data collection by the third-party webmaster is governed by its privacy policy. /u/amp-is-watching-you built a bot already to deliver the actual link rather than the amp link. 
&gt; I think it's better to have it on my version I guess that depends on the use-case, both make similar sense. I have plenty of use-cases in mind that would justify either structure. &gt; I'm a little perplexed by the state machine, I'm sure I understand the principle, but unsure how to apply it to my application. Technically you would have finite number of states in any of your forms, and any event would either trigger a state update, or not. But maybe that isn't the best way to describe it - after second thought FSM may not be the best thing to use. You might try to start with a mechanism that just translates the definitions into elements, with initial values, event handlers bound and what not. So, for each field definition, create and append an element with appropriate listener, and within that listener construct update functions according to your "toggles". That way you should be able to dynamically build any form with any sort of behaviour.
I thought it will hoist to top of the function definition.
Hoisting only happens for function declarations, not expressions
So, you mean hositing happens only when there is: function() {...} and not just {...} ?
Depends on the SPA framework. AngularJS (1.x) doesn't support this, but Angular (2.x) does. Pretty sure Vue and React both support it, as well. 
Looks great! Can I use koa middleware with curveball?
I'd recommend you to read this stuff https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/ch4.md
&gt; AMP is just a set of standards for minimalist (mobile) pages. Unfortunately, this is not true. The content is served through Google CDNs. The URL in the browser is literally an AMP URL. It's analogous to when Digg installed the terrible frame bar so that the pages you visited were still in the context of Digg's domain. This is not acceptable no matter how much it improves the speed of the mobile web. Something DOES need to do be done about the mobile web though. It's a fucking wasteland. You *really* feel it on older phones like the iPhone 6. Websites load double digit megabyte of data and the whole page just lags out. Loading any given recipe site eats 2% of my battery. Then you have to fight the multiple sticky bars and newsletter solicitation modals. Something has to be done to seriously punish sites that do this, but AMP is not the answer.
How does this affect semantics?
Yeah, lol
I was definitely wrong, yours is definitely more fluent and is actually only the way we can do stuff like this: hide: ['program__level', '==', null'], show: ['program__level', '==', 'graduate'], show: ['education__highest_level_completed', '==', 'bachelors'], hide: ['professional__work_experience_length', '&gt;', '49'], hide: [['program__stat_year', '&gt;', '2018'], ['program__stat_year', '&lt;', '2021']], which would work like a waterfall, from top to bottom, if they evaluate as true, they're either shown or hidden. Just working it through with my colleague, I think we'll do something like this: {"value":"graduate","operator": "==", "display":"show" } Just so we can add other attributes in weird edge cases. That's exactly what I'm doing, thankfully! I'm currently looking for fields which contain toggles, add a class, and then attach a on-change listener which triggers the toggles. That way I was limiting the amount of listeners, albeit lose a little speed from looping through a few things. 
Right now that's not the suggested approach. You are supposed to load your reusable components at once in a single file and then have pages or sections of the app as remaining files loaded when accessed by user. Webpack and React Loadable make it plenty simple. 
Yup, even better!
This is the worst idea. Why doesn't AMP allow zooming!
&gt; Got it. Still don't care. Making you part of the problem, nothing more.
No worries! Scope and the context of `this` can be confusing, even for experienced devs. If I'm in doubt, I will usually just start logging things all over the place and that can be helpful. I can see your line of thinking though and I originally wrote a totally different comment elsewhere in the thread... but I was misunderstanding you until this comment chain. I think the other responders were too! Then I was like, oooh I think I see what you're thinking here. Sometimes it just takes a little back and forth.
No, you just still haven't fully explained the problem. Nothing in this has really laid out a problem. Google has always prioritized websites based on loadtimes, AMP is really fast. What did you expect? Don't want to use AMP? No problem, don't use it. Worried about Google knowing who went to your site? Well, it's mostly for Google users, they were just on "[google.com](https://google.com)"? Worried that they might crawl your site a little easier? Really? You think it might limit your design? AMP Pages are only on the first page... My data is already being collected by Google Analytics. Why do I care that AMP does it too? If I am a person that cares, I will prevent them from tracking me. \---------------- Oh wait, the article was posted by a SEO company. I think we have a motive...
For every benchmark claiming Go is behind Java, there's another thread discussing how the benchmarks are poorly executed. Executing a `*.go` file isn't close to a proper benchmark nor does it contain optimization flags for production compilations.
**tl;dr** AMP appears to be marketing driven and that's why "we" hate it. It's a decent concept, poorly executed. AMP is nice in theory - except it was launched outside of any open organization like W3C and the features at launch were intended to keep articles within the Google domain. AMP seems so marketing driven that I can't stand it; there are times Google omitted the original link in the right corner that made it a miserable experience for broken media content.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [TechEmpower/FrameworkBenchmarks/.../**Go** (master → 9fae1f0)](https://github.com/TechEmpower/FrameworkBenchmarks/tree/9fae1f0373b415c4188baa45b6ad521fee2adb77/frameworks/Go) ---- 
It's not Google Analytics baked in... With AMP, you're giving them the right to cache and host your content from Google's domain. If you hit an AMP site from Google's search, that traffic doesn't hit your domain, it shows up as a Google domain. Also, AFAIK, they only work with Google Analytics for tracking so far, so you can't use other solutions from other companies as of yet. Additionally, the analytics you can even get from Google on AMP cached sites is pretty limited.
Fuck amp
I would check out [Covalence](https://covalence.io). You can take their free Intro to Web Development course. 
I don’t understand still ... with AMP will a large part of the internet be mirrored and reached under the google.com domain? In name of few seconds it looks like the web will be less free. Is this true?
If the issue is that developers aren’t doing their best to stay within ‘industry standards’ in terms of load time etc why would enforcing this make things any better? Couldn’t it just be another thing those developers don’t adhere to or am I missing the point?
&gt;I would have found that article so much more convincing if the author had actually addressed **WHY** Google is pushing AMP in the first place. He did address why Google is pushing AMP: it makes pages easier for their crawler to ingest and it helps them monetize content. Both should be very concerning.
It is crazy easy to split bundles per route in Vue. It's also worth it.
You can also replace `Promise.reject()` with `throw new TimeoutError()` to make it even shorter.
That's not even the argument though. I know the benefits of data, I have no problem with them taking it. Why *should I* care? What do you mean without your consent? It's your consent by using it, and I assume you are updating your privacy policy accordingly to what services you use to bolster your online business. Are you seriously complaining about an optional infrastructure upgrade? SMFH.
conspiracy theory much?
No, that's not *why*, that's a side-effect benefit to Google. The reason why AMP exists in the first place is (at least ostensibly) faster mobile page loads.
&gt; It's a decent concept, poorly executed. Way to sum up my entire post in six words! :-P
Let's not forget that for many cases, [amp actually introduces bloat](https://lolware.net/2017/07/04/amp-bloat.html.
Sums up both of us; I didn't intend for that to be a tl;dr for you but more of less my addition that was a bit of an echo. We share the same sentiment! :)
Use the markdown style for coding blocks : \`\`\`javascript function greet (who) { console.log ('hello ' + who.fullName); } \`\`\` and it will be rendered as: ```javascript function greet (who) { console.log ('hello ' + who.fullName); } ```
[About a week ago, I commented this](https://www.reddit.com/r/programming/comments/9arail/i_need_an_estimate_for_this_feature/e4yqsva/) about estimates. Most fail not because of methodology, but because people don't really know what an estimate is. Other than that, I can't really agree with some of your ideas. &gt; C. Don't forget the miscellaneous tasks like code review, migration, and the time it'll take to deploy. Those are different tasks and should be estimated separately. You estimate how long development takes, and you estimate how long migration takes, and deployment... When you just bag all those together, you're bound to give a _much_ worse estimate (less accurate). &gt; D. Consider unexpected delays like public holidays, bugs showing up like an unwelcome guest to a house party, and falling sick. I can't agree with this at all. Public holidays, like weekends do _not_ affect an estimate, because you should **never** say something like "next Thursday" but "3 days". The same applies to falling sick or having to suddenly attend a different task or whatever. Those are _scheduling_ events, which may affect _deadlines_ or calendars, but they should **never** affect estimates. Again, you estimate _cost_, _effort_; you **never** estimate a deadline or a fixed date. So you say "3 weeks plus or minus 3 days". That is your estimate. Now, the manager has to fit that into the schedule, and they may decide that the task be started now or that it should be started in two weeks. Given that, then is the approximate deadline _calculated_. And that calculation _will_ take into account holidays. And unexpected events should _not_, in principle, modify the estimation, but they will, naturally, modify the delivery date. And you _might_ think that unexpected events should change the estimation. Say that you find _unexpected difficulties or needs_ that mean more effort is required. That's fine, you should react to that, but **not** by changing the estimate. Instead you measure the deviation, and then later analyse that and find the reasons why that happened and use that knowledge to produce better estimates in the future. If you let unforeseen events modify your estimate, you'll never learn to foresee them and you'll never learn to give better estimates.
In my point of view AMP is the solution of Google for the lack of features in the HTML standard. And while it is logical that they made it like this, it is still better to make them into standards. We already have enough webkit-only websites. We don't need mobile only either
This is more to personal preference, but I would prefer to explicitly reject the promise. You also will have to use the "block body" instead of the "concise body" for the arrow function if you use `throw`: delay(ms).then(() =&gt; { throw new TimeoutError(); }) vs delay(ms).then(() =&gt; Promise.reject(new TimeoutError())) Pretty subjective, and I'll admit, I do see the value in using the former, `throw` is simpler than `Promise.reject`
SimpleDateFormat in Java for an easy way of formatting dates to string
Please no outside politics
Isn't that's the reason for atom and rss to exist?
Definitely subjective, but I'd want to avoid the block body in this instance, mostly because I use prettier to format my code, and teh curlys would turn the one-liner into a 3 liner. I am aware that's a terrible reason to prefer one over the other, but still...
Yes, you’re missing the point. The point is that google wants to monopolize the entire internet.
moment.js doesn't do that?
I’m a big fan of C#’s System.Integer library, personally. 
I met with one of the lead developers of AMP at Google Campus in London a while back. Everyone around me were all excited and keen; asking questions and wanting to find out how it could help them. It was a small group of about 15 of us. Then I got to ask a question. He was probably expecting something about the technical dev side of things but I thought “screw it” and instead I didn’t just point out the elephant in the room, I made us ride the damn thing too... I asked him why Google gives preferential treatment in search results to websites that use AMP. He said they do not and I pointed out the carousel at the top. I asked what other ways they were going to expand on that in the future and was met with cold-faced stares. The atmosphere grew very sour, quickly. I then asked why, if AMP is all about speed for the end-user, does Google still decide to rank sites higher than other sites, despite some of them having better benchmarks for speed and optimisation (yes it is possible to load faster than an AMP site). No answers for that either. The devs may just be doing their thing (far removed from business decisions) and I felt like a dick for asking those questions, but I couldn’t sit there idly by, whilst the people around me were unaware as to the more sinister consequences something like AMP could bring to a “free and open” web. The whole thing is a sham with AMP; a massive contradiction to a Google I once knew. It may have SOME good intentions in there, but it’s certainly a massive conflict of interest when Google is the one that controls most people’s experience with searching the web. 
i mostly read news on my Phone and iPad (like most people apparently), and more and more I'm finding this, and it's really irksome when I want a better view of a photo accompanying the story.
If a page doesn't degrade for mobile gracefully, just penalize its search ranking when mobile users are doing their searching. Why make devs support AMP, when there are already other solutions. Personally, why can't this be done with CSS, etc (a la Bootstrap and company), rather than Google using their dominant position in search to push everyone over to using the HTML replacement they crafted for their browser?
Not interested Google. 
Do you hear yourself? "Why should I do the job that this article attempted doing? No! I'll just agree with it! You want me to personally back it up? No!" I'm not apathetic. I care about many things. This is not a big deal. Convince me otherwise, if you don't want to, get off your phone, I really don't care. I'm just giving you the opportunity to change some random guy's opinion. lmao, jfc.
They're getting close!
Cool project! Unfortunately my old(ish) iPhone 5c [doesn't render the unicode characters](https://i.imgur.com/fm2kHfm.png)
Do you hear yourself? Go back and read and tell me which of us is acting irate. Or don't. I *am* apathetic to you. 
The IR does have a limited range (especially with the case on). &amp;#x200B; I hadn't really intended to use the IR so that didn't bother me. As a BLE button/indicator with a handful of useful sensors it's great.
Eh? Too much reading between too many lines there.
"Irate" is pretty extreme, and i don't think either of us are acting that way. But really, other than a "smfh" here and the motive of an SEO company to push anti-AMP stance, I don't care. All I did was give you the opportunity to change my mind, you just keep coming back to tell me that you aren't going to do it. 
&gt; Unfortunately, this is not true. The content is served through Google CDNs. This isn’t an AMP requirement. You can 100% utilize AMP without this being the case. Access to Google’s cdn, and it’s speed, was the first incentive Google offered to try and get publishers to adopt AMP. I spoke with a couple of the engineers working on AMP at the last Google I/O and I really got the impression that they’re working diligently to try and improve the web. From their perspective, HTML/CSS/JS is broken - particularly on mobile - and they’re trying to redefine it in what they see as a better way. In fact, the original project was title “PCU” for “Portable Content Units” and it was envisioned a a set of standards and a JS library that would implement web components that offered functionality they felt everyone needed - like img fallbacks, and he ability to reference multiple images of different resolutions in a single tag. How that goal, which I think was a good one, morphed into what the current AMP project is, and whether or not the current AMP project is a good thing is still up for debate - but I can say definitively that I don’t believe there’s malice in the hearts of the engineers working on the project.
It’s a really neat device otherwise, and well worth the money I think. It just isn’t built for the purpose I had in mind for it, which is totally forgivable given that it runs on a coin battery. I’ve bought other Espruino-based devices since then, and I really enjoy playing with hardware in JavaScript.
Yeah he’s way better now! Great to see him again.
No. Almost all content you see from major websites are delivered to your computer via a CDN (content delivery network). CDN’s cache content for websites in data centers across the globe, and allow for it to get served quickly. Websites pay CDN’s for this service. As an incentive to try and get people to adopt AMP, Google offered sites using the technology access to use Google’s CDN’s. Since Google servers are already about as fast as a server can be and the content being cached on Google’s servers makes it easier for Google to scrape, categorize, etc the content for search results (which is something websites generally want) there’s a lot of benefit to having that content on Google’s CDN. However, there are some downsides. Notably, the way in which Google is allowing access to their CDN is basically a hack, and results in Google’s AMP domain being the TLD instead of the site’s. It doesn’t have to be that way, but that’s the lazy way Google is doing it right now. Ultimately, hosting content on Google’s CDN has zero affect on the “freedom” of the internet unless it lead to the abolishment of all other CDN’s. There are millions of sites hosted by Akamai, Cloudfront, Amazon, etc. and no one seems to care, but the minute it’s Google, the sky is falling.
What is "built in" you foolish pleeeb just need to yarnnpmbower all your billions of dependencies and it will be fine forever for 6 months.
I am generally apathetic towards data harvesting as you are, but what I disagree with is other people truly not having a choice in whether they want to be spied on. Now technically, they do have a choice, they can just use other platforms. But what makes Google AMP so evil is that it encourages all of the companies who want to show up on the Google front page and want to be seen to use AMP and only AMP, giving people who don't want their data taken no choice.
&gt;here it is on codePen, I've tried a few other things that's why the code is different but same issue, I'm thinking its gotta be the way javascript runs, at least that's the best answer I've gotten from stack overflow, but no real solution for the code. I have also given solution for your issue. It is not about how JS runs. You are switching the turn and checking for game over. It is more of a logical issue. Read my comment to get the solution.
And probably breaks any searching, text tooling, etc etc. 
TL;DR - SEO decries appeasing search engine, page quickly turns into 404.
date-fns [format](https://date-fns.org/v1.28.0/docs/format) is much lighter weight.
Because in an event handler this refers to the element on which the event was triggered. So in your case this refers to the cell which was clicked. 
I'm just tired that as a freelancer my clients claim that the front-end is already implemented and then they give me these sh\*tty CSS and HTML files that I don't feel like dealing with. Even after putting it into React Components they are still connected to these massive machine generated CSS files. Therefore I've created a tool that can pass all these barriers with a single function call. Checkout the link that I've posted if this sound relevant to you or anyone of your programmer fellows.
I thought Java had tons of security issues, though? And HTML5 or something was better? (Maybe it was the exact opposite? Idr)
 events(){ ... this.searchField.addEventListener('keydown', this.typingLogic.bind(this)); //Now this will work with binding } typingLogic(){ // Without binding: this === window // With binding: this === the instance of your Search class // Note: clearTimeout and setTimeout are functions of the window object, so when you do bind, you need to prefix with "window." window.clearTimeout(this.typingTimer); this.typingTimer = window.setTimeout(() =&gt; { console.log('hola'); }, 2000); }
Well emojis **is** unicode
.svg?
No ones deploying to China with servers? :P
I've tested AMP on a website. No SERP improvements, higher bounce rates on AMP pages, lower pages/session on AMP sessions. Never again.
[https://developer.mozilla.org/en-US/docs/Glossary/IIFE](https://developer.mozilla.org/en-US/docs/Glossary/IIFE) 
It's an IIFE (immediately invoked function expression) which adds 3 methods to the Math object via the Function creator (a form of eval). The "i" and "name" parameters are obfuscated variable declarations. Same goes for "b" of the evaled function. The code isn't very good. If you de-golf it, one of those functions look like this: function $floor(number, precision = 0) { let factor = 10 ** precision; return Math.floor(number * factor) / factor; } Same as your snippet but without an IIFE and eval: for (let name of ['floor', 'ceil', 'round']) { Math['$' + name] = (number, precision = 0) =&gt; { let factor = 10 ** precision; return Math[name](number * factor) / factor; }; } Anyhow, built-ins like the Math object shouldn't be modified.
Ohhh ok, thank you!
than you!
thanks for putting a name on it. It'll help me parse the various parts of this. 
thanks for the link.
Thanks for sharing this tutorial. It really helpful. I have also used the Live Chat gadget for my website which i have installed using Joleado - Live Chat Software. The [Live Chat Widget](https://www.joleadosystem.com/pricing/) on the webpage helps to engage the visitors directly into supportive chat sessions without having to scroll all over the site.
When people say javascript is a bad language, shit like this is why.
[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\_Objects/String/fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)
Chrome can still search it: https://i.redditmedia.com/QxzLA17sLAObQORqeyQ7GCOaU_m2dQt8MU17-Gs9y5E.png
FileReader reads the file from the users device (after being triggered by the open file input dialog). It then converts the contents to base64; https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL
I'm curious, does the below phrase show correctly (I promise it's not just squares)? 𝘛𝘢𝘬𝘦 𝘮𝘦 𝘥𝘰𝘸𝘯 𝘵𝘰 𝘙𝘦𝘥𝘥𝘪𝘵 𝘤𝘪𝘵𝘺 𝘸𝘩𝘦𝘳𝘦 𝘵𝘩𝘦 𝘶𝘱𝘷𝘰𝘵𝘦𝘴 𝘢𝘳𝘦 𝘳𝘦𝘥 𝘢𝘯𝘥 𝘸𝘦 𝘢𝘭𝘭 𝘨𝘦𝘵 𝘴𝘤𝘩𝘸𝘪𝘧𝘵𝘺.
There's some things I really like about AMP. The fact that it's so cache-oriented is cool. Google's data saver can't touch HTTPS I don't think, so there's some possibilities there to save data. What I don't like at all is that it's google-specific. The solution(For the average user who isn't concerned about privacy) is pretty simple in my mind. Content addressable networking in the browser. "Hey google, do you have the content identifed by hash XXX? or the latest page that was signed with key ZZZ?" Of course they do, they're who gave you the link. Got the link elsewhere? Ask your ISP, your router, the building's router, MDNS on the LAN, etc. It could be hierarchical like DNS. Want to make a site more reliable? No problem, the "Lookup by public key" accepts URL parameters, and the highest priority mirror that has the key handles it.
It is very similar. It's highly influenced by lit-html and even has the same api. Advantage is better handling of custom elements (native and polyfills) e.g. react-like 'props' setter (example [https://modulor-js.github.io/modulor-html/?story=Components&amp;storyKind=stateless&amp;width=80&amp;height=20&amp;addon=Usage](https://modulor-js.github.io/modulor-html/?story=Components&amp;storyKind=stateless&amp;width=80&amp;height=20&amp;addon=Usage))
in my openion using p5.js library and other p5 libraries makes thing very easier
try: &amp;#x200B; `var x = 22;` `function setup() {` `createCanvas(400, 400);` `textSize(20);` `fill(0);` `}` &amp;#x200B; `function draw() {` `background(120);` `text("score: " + x, 20, 40);` `}`
I'm not concerned about CDNs, I'm concerned with the fact that a site found on google it opens under [google.com](https://google.com). Why is google doing this and what it has to do with AMP? &amp;#x200B;
finally someone answered yeah that's what i was looking for thank you man :) i was sitting here for an hour looking for an answer in p5 references page they didn't include that
Hey bot, this is an npm package that specifies an MIT license in its package.json. You should learn to read those.
This is an IIFE( Immediately Invoked Function Expression). You can invoke this type of function while you create it. Like this `(function(i){` `console.log(i);` `})(20);` &amp;#x200B;
It isn't hosted. The URL is the entire content. It's going to be very long.
1. There is no commented code in that link. There is also no `SwitchTurn`, no `setTimeout` and no `gameEnded = true`, so probably you either copied the wrong link or deleted stuff after you posted. 2. You should go to /r/LearnJavascript for these questions.
Thank you for asking these question! I think a developer should be aware of his work and the impact it is doing. Maybe they have just the good parts of it in mind while creating this technology, but that is hardly an excuse for not knowing about the bad sides of it - especially at a company with such an impact.
Because AMP isn't about you getting better engagement, it's about search users becoming prisoners of google websites.
Wow this is very beatiful! well done!
Fair, but common practice used everywhere is to add verbatim copy of licence in COPYING, LICENC(S)E etc. package.json's entry is just meta for \`npmjs.org\` repository and - more important it's not verbatim text in easily discoverable file. 
http://es6katas.org how about this one?
Awesome this one looks great. Thanks! 
Total click bait: I clicked on it because I wanted to hear the perspective from a business "runner" (dunno WTF that means exactly I equated it to owner). &amp;#x200B; As a business owner I'm disappointed. No real rationale on why we do/should choose react native. There's a heading about it but it's talking about what developers look for not business people. &amp;#x200B; This is just more content marketing aimed at no one. Please report it as spam.
Wrong. If you don't "bind(this)" the "this" will be the element that the event got attached to.
If that can helps you can try using a transpiler which basically take your code that you wrote in the latest spec and make it compatible with older browser that doesn't support it. Doing that you can use arrow functions. Using arrow functions your "this" will always be the class itself. Example of usage : ``` bindEvents() { $('.someClass').on('click', (event) =&gt; this.someFunction()); } someFunction() { console.log(this); // Logs the class your into } ``` That way you always have access to the current "this" you expected and don't have to "bind"
I would really like to have multimethods like CLOS as a library. Does anyone know if this has been done?
Indeed. Just to shed some light on this to assist the OP; If your UI is generated dynamically based upon data which is provided AFTER the page is loaded, such as that retrieved from an ajax request, you should use `.on()` to be able to interact with it. It's actually a better practice to use this method as opposed to something like `.click()`, as you'll be able to transfer that approach if you ever move onto truly responsive UI's (such as those built with React or Angular) as well as node.js web development (if you end up building event-driven server applications).
Ah, I see. Thanks! 
 Q. What's the result? (function() { return \`text 'inner'\` == \`text "inner"\`; })(); 
I see. Thanks man. Still a bit new to JavaScript (Which is kind of embarrassing to say since I'm a recent computer engineer graduate..) so tips like this is very much appreciated.
That's cool, but lots of things can't.
The syntax is pretty close to hybrids, i like it. I dislike only the render method, web component libraries shouldn’t transform an element into an custom element, only add the possibility for me to define the name of the custom element so i can put it where suits best for me.
It doesn't transform an element into a custom element. All the rendered elements are created using 'document.createElement', no magic there. Here's the line: [https://github.com/modulor-js/modulor-html/blob/master/src/html.js#L417](https://github.com/modulor-js/modulor-html/blob/master/src/html.js#L417) &amp;#x200B; Moreover, the library doesn't have any functionality of custom elements handling - custom and native elements are handled the same way
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [modulor-js/modulor-html/.../**html.js#L417** (master → e2366a6)](https://github.com/modulor-js/modulor-html/blob/e2366a625c4874bdfbac5763c644496fa5c5f066/src/html.js#L417) ---- 
Seeing the example, the render method will get the element with id root and replace it with my web component, right?
Seeing the example, the render method will get the element with id root and replace it with my web component, right?
Chaos, a dice, and a fuckton of swearing.
Explained in detail here: https://medium.com/@pbakaus/why-amp-caches-exist-cd7938da2456
Oh, now i guess the example might be a bit confusing. It takes the element with id root and renders template from the first argument \*into\* it, no replacing
If you're not a pro at functional programming I would super recommend this youtube series. It starts with ES5 and going over some javascript concepts and slowly mixes in ES6 and everything makes a lot of sense. Dude is a bit weird, but he's a great teacher. https://www.youtube.com/watch?v=BMUiFMZr7vk
Google is starting to smell like Microsoft
False
This is good for beginners. Thanks
The age of "being offended by everything" has come to stay, I see.
Lol, like anyone gives a flying fuck.
So, how do you _really_ feel about this?
Came here to recommend funfunfunction. Dude is the reason I have my current gig
The AMP ecosystem is built on top of existing standards like HTML and Javascript. There is nothing that AMP can do that isnt possible in regular HTML. The solution is to male lighter websites, but not to untroduce a lock-in in the process
You have asked the same question in another post, where I have answered it: [https://www.reddit.com/r/javascript/comments/9drfv4/how\_would\_i\_insert\_a\_variable\_to\_into\_a\_unicode/](https://www.reddit.com/r/javascript/comments/9drfv4/how_would_i_insert_a_variable_to_into_a_unicode/)
Found the Googler
Unfortunately, making "smaller websites" isn't the answer. We need smaller websites that properly structure data in a common parsable manner. The web has had decades to figure that out on its own, but instead we get massive monolithic webapps running huge amounts of custom javascript and tens of megabytes of injected ad-code, just to serve articles to a browser. Positive change requires an external benefit that is tangible to people who have no incentive to "improve the web" if it doesn't immediately improve their sales. Amp is a great example of a tangible benefit that drives change.
Do you think the open-source community can come-up with a lock-free approach? Or are there already existing ones? Asking out of curiosity..
You can allow yourself to zoom, find this in Chrome's settings: [https://ibb.co/eJuZ0K](https://ibb.co/eJuZ0K) &amp;#x200B; &amp;#x200B; &amp;#x200B;
Addendum: const codePoint = parseInt('0021', 16); // base 16 (hex) console.log(String.fromCodePoint(codePoint));
That's what I used to say about bundling!
That's awesome! I recently started watching his videos and they're really good. 
Out of curiosity, could you post a link to the source code?
why.
Yep, this is not good. Things that would make it suck less: 1. Really ratchet up the search ranking performance penalty for sites that are heavy and bloated. 2. Allow sites to publish an AMP-compatible version of their site and offer search users the choice between the AMP version and the real version. Even let logged in search users pick the default if they want.
His energy is super infectious. I'm so happy to have discovered the channel.
Keep your filthy types out of my JavaScript!
I used "You don't know js" on github, it has resources on everything es6 as well as earlier things
That thumbnail brings out my inner father figure. These boys need to consider the actions of their consequences
They’re not just starting to try this now, they’ve been pushing this for a long time..
Now we push back! Try and create awareness? 
Because they prefer export const PAGES_CONTENT_CHANGED: EventId&lt;PagesContentChanged&gt; = new EventId(events.getUniqueId('PAGES_CONTENT_CHANGED')); export class PagesContentChanged extends Event { constructor(public readonly pages: {[key: string]: boolean}) { super(PAGES_CONTENT_CHANGED); } } over * @extends {goog.events.Event} * @final * @param {!Object&lt;boolean&gt;} pages * @struct */ lucid.model.DocumentEvents.PagesContentChanged = function(pages) { lucid.model.DocumentEvents.PagesContentChanged.base( this, 'constructor', lucid.model.DocumentEvents.PAGES_CONTENT_CHANGED ); /** @const {!Object&lt;boolean&gt;} */ this.pages = pages; }; goog.inherits(lucid.model.DocumentEvents.PagesContentChanged, goog.events.Event);
But it was already written, tested, and working. 
It's really hard to hire engineers for active development of a legacy codebase. If the app/library was simply in maintenance/bug fix mode, sure leave it as it. But if you're still actively adding new features and plan to do, it helps to bring it up to modern day standards.
But that's not a guarantee that it'll continue working in future, especially if you're adding new features.
I'm not sure to understand you issue, but you better not use integer for IDs, [it's not standard](https://stackoverflow.com/questions/70579/what-are-valid-values-for-the-id-attribute-in-html#79022) and can cause errors sometimes. 
Google is now definitely evil. Weird really how we reached this point. 
lol you've obviously never worked on a project of any significant complexity.
https://github.com/quinton-ashley/qodemate-core/blob/master/index.js
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [quinton-ashley/qodemate-core/.../**index.js** (master → 4a79b56)](https://github.com/quinton-ashley/qodemate-core/blob/4a79b566383ba7ef36d6d02a75bb6177ad604092/index.js) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e5k8ohn.)
I'm confused. Is this supposed to be a project of "significant complexity" or something? This is just a 400 line file with most of those taken up by comments and declarations. lol This is like a day's work. 
I'm with u/brentonstrine on this. If they have thorough tests, any breaking changes would be caught. Typescript doesn't automatically guarantee anything either.
okay what does it do?
Typings help a lot when trying to read someone else's code. The downside is that you have to write more code...
while i kind of agree, i was hoping the article had a little bit more to it than 'google is evil'.
I'm impressed by the work you've done and the comments you left in your code. But your question to phpkcuf raises a question. Your question implies that someone else will have a hard time understanding your code despite the amount of comments you have left in your code. How do we as developers make it easy for other devs to understand your code?
All this is doing is reading a directory and looks like it's spitting out some kind of slideshow. This is a utility. This is not a major project.
Wrong.
The original article that spurred this was posted a few days ago here. It's by an SEO company that has a lot to lose if Google results became more homogenized. Google is trying to improve their user experience by taking something they've always done to an extreme - ranking with load times in mind. Remember, only the first visited page is AMPed. I got flamed on because I didn't see the big deal, but no one came to convince me. I had a neckbeard tell me he wasn't going to waste his time, about 5 times, but other than that no one expanded on the article or why I (or the general public) may fear it. I was told that it was a personal privacy thing, and the fact of being able to disable it via extensions was a moot point to them. Honestly, AMP has been around for a while, yet only in the last week or two have I seen any legitimate backlash. It sounds to me like an anti-google campaign, not based in merit but in fear and fake outrage.
Sure.
It's because they are not forcing AMP pages to be exactly same as you canonical pages. &gt;Google is trying to improve their user experience by taking something they've always done to an extreme - ranking with load times in mind. Remember, only the first visited page is AMPed. Imaging you making another platform and Google resisting users to leave it's own platform. It this not unfair. User has indicated that they want to be off Google once they click. Google is holding their feet.
They kinda always were. Especially after they bought youtube and started the entire youtube apocalypse stuff, demonetising people with channels, that were not "advertiser friendly".
Agreed, though something *does* have to be done about the mobile web. It is a wasteland right now. There are plenty of standards and ways to make websites run fast, but currently not enough developers are doing that for whatever reason. So we need *something*, hence why I suggested generically punishing bloated sites in search results and allowing fast, slim sites to have better rank regardless of whether AMP is used or not.
they bought youtube wayyyyy before that happened
It doesn't guarantee but the type definitions are read and interpreted by the computer. I trust that far more than comment documentation that can easily become out of sync with the actual code.
You can't even tell me what it does so how can you say it's simple is my point though.
But bundling is standardized across all tooling, app architectures and frameworks, its not something you have to design around or even think about.
I haven't seen a single AMP site where Google injects its own ads or search results. I have never seen anything that is "adding resistance" to going to your site. You're lowering bounce rate right off the bat, actually. I mean, yeah, the visitor may technically be on Google's domain, but its your content, your ads, it's still \*your\* page, They click on something else, they are now on your server - there is (arguably) less friction to go forward than back.
let em try. Users are lazy. Takes a business to really use pile on the abuse for users to abandon them for any alternative. and really, users leaving google en masse would be much better than the government coming in and making decisions google shouldve made to help them retain usership. Googles tampering with search results has made it impossible to find anythin thats not a listicle, not some blog post copies from a lesser known blogpost that copied from an even lesser known genuine resource. Its one of the reasons trump won as people couldnt tell what the truth is, and still cant. 
Typescript guarantees more than plain js in any case
Sounds like a troll comment honestly
I actually found the [Airbnb Javascript style guide](https://github.com/airbnb/javascript/blob/master/README.md) to be really helpful for learning ES6 since it uses all the new features. They give you side by side examples too which is awesome. 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [airbnb/javascript/.../**README.md** (master → 02b4eea)](https://github.com/airbnb/javascript/blob/02b4eea3452b0ae6da666b01f9da23f26148f5b6/README.md) ---- 
Yes. You are correct, but the team in the article already had a type-checking system with thorough tests. They could've just started new files in Typescript without migrating all other code and possibly introducing new bugs that they would have to spend extra time to fix.
ESLint checks in real time with JSDoc but not as extensive as Typescript.
You worked on Facebook or Reddit Mobile?
Surely because it's a new thing. It's not even enabled in chrome by default - it's behind a flag. Looks very promising though.
Okay thank you for your feedback. I usually would not but I need to somehow tie the input box with my search results and so far that is what I have come up with :/
Yeah this article feels vaguely more like conspiracy theory than actual arguments against AMP. I'm all for being against Google telling us how to make websites, but to go "Google is promoting AMP therefore, evil" feels a bit tenuous.
No, it's not just for speed. Read the article again. There are also privacy benefits to doing things this way, and it's necessary to ensure that all AMP pages are actually valid AMP.
Postgraphile
So I was right. Gotcha. Thanks for clearing that up.
Bad argument. People have literally worked on thousands of complex project over the years with JS only. Source: JS libs and framework. Typescript is good but not mandatory for complex projects.
If you could've done it in a day why didn't you do it?
&gt;No, it's not just for speed. There are also privacy benefits to doing things this way Do you mean the "privacy benefits" for the pre-rendering thing that Google itself introduced? So now to fix a privacy issue they introduced, they create a new one masked as benefit? Look, the article you posted explains clearly that the benefits of AMP are for ads and analytics, which means for Google and its business. They are imposing them to their users because they know they win, and they do it by tricking and misleading readers like you with such articles.
I actually have done a very similar project for updating dependencies where Learna wasn't applicable.
The classic way to solve this problem is to save off every finished drawing in one canvas and then keep the live drawings in another. The live drawing remembers all the draw commands sent, clears itself and then redraws all the commands it has. When a draw is finished, the complete path is then sent to the canvas behind with the permanent lines and forgotten by the live canvas.
Way to go. You just switched coorperate overlords.
&gt; Do you mean the "privacy benefits" for the pre-rendering thing that Google itself introduced? Yes, prerendering makes page loads nearly instant in some cases, so implementing it is a huge benefit to users. One of the benefits AMP caches provide is that you can do prerendering without compromising privacy. &gt; Look, the article you posted explains clearly that the benefits of AMP are for ads and analytics No. Read more carefully. The benefit of APM is fast load times on mobile. The article explains why AMP caches are necessary to achieve those benefits, and how they're mitigating the downsides of that necessity (one such potential downside from the perspective of publishers being them losing analytics data on their users).
If you can build an AMP site, you can already build a performant and mobile friendly site. At that point why hand the reigns over to Google? Just make that your website. 
Qodemate is an app primarily for computer science teachers to use in a classroom setting, not a Dev tool though. https://github.com/quinton-ashley/qodemate
It is sure helpful, but TS keeps growing to the point where more and more developers think it's mandatory. And some are even delusional, thinking that type checking is the source of truth. That's what personally worries me. I like JS as it is, and wouldn't like one day to wake up in a world where TS is mandatory.
I think you need to think through how you want to solve this problem differently. Javascript isn't truly multi-threaded, so maybe there is a way to take advantage of how it interleaves it's events and updates. The problem isn't that you're doing multiple paths, it's that you're not thinking of these paths as state. So how does that look? I think you don't want multiple atomic canvases, or even a live vs completed canvas. I think your sockets need some very simple state that will track if the user is drawing, what their last draw position was, and what their current is. Then each time you get a draw message from a socket, draw the next line. If the user sending the messages is holding a click, then the lines should be pretty small and appear much smoother. You could also track the last 3 positions and maybe handle some sort of [curve](https://stackoverflow.com/questions/6711707/draw-a-quadratic-b%C3%A9zier-curve-through-three-given-points).
Particularly a version that very often is less functional, or even looks like a blown-up mobile site when viewed on desktop. People share amp links outside of the Google walled garden, and then Google gets to track clicks from that shared link (yay for Google!) but with the downside being I'm still looking at a worse version of the same website. &amp;#x200B; I have a browser add-on to redirect to the canonical URL though. Mostly gets rid of the annoyance, although you have to load the initial HTML for it to realise you're looking at an AMP page.
Ha, I appreciate the Irony. Thing is though I remember when, back in the day, IBM was evil and Microsoft the good guys. Then MS became evil and IBM sort of OK. I think we've just stepped onwards with Microsoft to Google. Thing is I think Google now is on a mission, whereas MS has been past that and is just a corporate trying to serve it's customers. So sure, eyes open.
Exactly, should use DuckDuckGo instead.
Yeah, I don't feel as though anything was actually explained.
This is outrageously awful way to do Javascript. Where did you find this? Put it on the waaaaall!
UpWork Elance Fiverr /r/forhire
Babel just converts the code from ES6 (or whatever) to something that will work in more browsers. Webpack, on the other hand, will let you split the files into as many files as you like and handle the conversion, combination, and compression of the files into a single minified file. There are others like Rollup that also do the same work as Webpack, but I've been very happy with Webpack at work and on my personal projects both.
Assuming you're talking about Node.js GraphQL solutions, [Dataloader](https://github.com/facebook/dataloader) &amp; [Join Monster](https://join-monster.readthedocs.io/en/latest/) are 2 popular libraries. DataLoader is a clever, and generic, way of handling the problem. The docs have some good examples. Join Monster is intended to convert your GraphQL queries into a single SQL statement, with all of the JOINs your heart desires. Depending on your queries and database indexes/optimizations, this may be perfect for you, or cause perf issues.
*wow.* That's a lot of hardcoding there, but I'm not going to get into the optimization of this all So 1st of all, remove all the comma's within the if statements and replace them with &amp;&amp; 2nd, it's not if else(...) But else if(...) Hope this should get you going a bit
Exactly. They bought youtube like 10+ years ago and the demonetization shitshow (which only really affected creators) happened last year i guess.
I was so confused at first. The bot reposts AMP links as non-AMP links.
The fun thing is that AMP is great for sites that are already capable of being static like news and informational. It's no so great for things like e-commerce or the dynamic web.
There is a valid argument against Google's power and search monopoly, but I'm not seeing anything that requires you use Google's domains for any of this? Why would they? You can use Google servers without using Google domains... and they make money off selling domains... It makes no sense. And I see nothing about having to use Google servers either... I don't see where the article gets: &gt;The hiding of URLs fits perfectly with AMPs preferred method of making sites fast, which is to host them directly on Google’s servers, and to serve them from a Google domain. Hiding the URL from the user then makes a Google AMP site indistinguishable from an ordinary site. The AMP documentation doesn't require it be hosted by Google, associated with Google, or have code injected by Google (outside of the AMP library, obviously). And they know better than to do anything of this sort because they have already paid out billions in fines for doing far less bad anti-competitive behavior... This all sounds way to over conspiratorial. 
Learn what docker is and what it can do for you.
As someone who works for a major news publication who is struggling with AMP, we don't fault Google for working to encourage everyone to a safer/faster standard. But how they're doing it and how it's affecting us is problematic. AMP articles at the moment circumvent our paywall. This is until we integrate with their "Subscribe with Google" Product [https://www.blog.google/outreach-initiatives/google-news-initiative/introducing-subscribe-google/](https://www.blog.google/outreach-initiatives/google-news-initiative/introducing-subscribe-google/). So we not only have to make sure our CMS and page structure adhere to AMP rules through a totally separate application but we also need to make sure we integrate with a subscription and user onboarding tool that is not ours. The other thing is that AMP articles feed into Google News Feeds. As someone who reads content through Google News, rarely do I click out to go to a publishers' website after getting the content I wanted. Instead, I basically get what I want and then bail out on the publisher. And finally the last big thing is that Google AMP is meant to be fast and there are restrictions on how you go about doing that. The Ad Partners you've partnered with may not be meeting the standards that AMP has but you know which Ad Partner will always have ads that meet Google AMP standards? Ads from Google Ad Servers. We've pushed the decision to be on AMP for quite some time but it's become not a choice anymore for us unfortunately. \*\* Sidenote, we dont have shitty ads on our site :(. Or at least we try really hard not to. We don't have an autoplaying video that sticks and follows you through your experience. We don't have secret pop overs. And we have a very intense ad moderation team who work extremely hard to make sure our editorial experience is great for you the reader along w/ the ad partners we chose. &amp;#x200B; &amp;#x200B;
Not only that, the code is shit to be frank
This could be killer for extremely interactive slideshows with embedded content.
Actually AMP enabled sites in many cases ARE hosted by Google's servers (cached) and served from that cache. Not from the original server. (Assuming usage of the Google AMP Cache). I don't like AMP - I'd rather see Google emphasize best practices rather than this, but I also don't agree with the author of the article that it is evil.
Yeah you could do some really cool stuff
If they have thorough tests then they can test the converted code.
If people still paid newspapers for content, they wouldn't give a damn what Google wanted.
That doesn't change where the content is hosted or what the URLs look like. Opera did this automatically as a browser feature years ago for it's Turbo mode and that was without anything sites could opt-in or opt-out of. As long as it's providing the same data or a compressed form of it and it's only doing it on &lt;amp&gt; tags and not injecting anything new, I don't see the issue... The site owner is explicitly using &lt;amp-img&gt; instead of &lt;img&gt; or similar &lt;amp&gt; tags when it wants to use these features. And again... nobody is forcing this API on you... Google isn't going to prefer AMP sites over other sites that manage to achieve equal load speeds. That's not how they operate and it's not in their interest to operate like that. 
Wes Bos’s https://es6.io is awesome 
Brings this back to mind - [https://www.theverge.com/2018/5/17/17344250/google-x-selfish-ledger-video-data-privacy](https://www.theverge.com/2018/5/17/17344250/google-x-selfish-ledger-video-data-privacy)
Nice try, Larry.
&gt; but I've seen tests that show AMP pages do tend to rank slightly better Compared to what? Pages that load just as quickly on multiple platforms? If you source that and it's at all convincing, then I'd agree, but I'm doubting that AMP pages and being explicitly favored because they are AMP. That's an antitrust lawsuit waiting to happen. 
You can use babel on the command line: https://babeljs.io/docs/en/babel-cli.html
You need to convert the result to an integer (you are also getting values such as 1.1 etc.): function getRandomInteger(max) { return Math.floor(Math.random() * max); }
Oh yes, I forgot to put duckduckgo as my default search engine on my new work computer, did a search and had to scroll down to get to the first relevant search result that was not spam or ads
For more Pepsi products find us online at Google keyword Pepsi!
I was looking at that but was worried about it recommending to do a npm install for each project, and the projects don't use npm. Trying to keep project bloat down. I think I will give that a try attempting the global install Thanks.
Gonna use this for other people to refer to. Great link
I think you need to abstract the actual canvas operations away from the networking and collaboration code. Usually we would treat a drawing action (touch, drag around, end touch) as an atomic unit. We do need to display it to the drawing user immediately without a round trip to the server though - nobody wants to draw with latency! So it would go like this: 1. Alice performs a drawing action. Alice's canvas context is locked. 2. Alice finishes a drawing action. The data describing what she drew is sent to the server. 3. The server sends a message with that data to Bob. 4. When Bob's canvas context is available, it renders Alice's drawing in full. This is the simpler version that I would recommend starting with. When you play around with it, you'll quickly notice a drawback: no updates from collaborators can be rendered until you're finished drawing. So if you spend 30 seconds doing an elaborate signature in one touch, by the end your canvas will be 30 seconds behind the server! To solve that you have to give your client a heartbeat. Every 20ms it stops rendering your local drawing, receives updates from the server, renders those, and resumes local rendering. 
What is with this obsession trying to punish bloated sites? The only thing content is what matters, Google should not be filtering things for us. Let the consumer decide if he wants to visit the bloated site or not. Giving a corporation this kind of power is a huge slippery slope.
Do you know what the word "Monopoly" means?
That makes sense. I completely overlooked that. Thanks so much. This is my first "Big" JavaScript project, so i sincerely appreciate the help
&gt;console.log(String.fromCodePoint(codePoint)); 😊
I do not mean any disrespect when I say that I don’t think you have a full understanding of the technology at play here. With that in mind, I’m going to try and clear up some details I feel might better help your understanding. First, Google didn’t opt you into anything. AMP is a technology Google offers to publishers, and they opt into the program. If you dislike that AMP pages currently reveal the google domain instead of the publisher’s domain, then you dislike the publisher - not Google. Google has not forced anyone into anything here - they offered a solution to publishers for a problem the publishers were having, and the publishers adopted that solution. Second, milliseconds matter. You may not see saving milliseconds off of load times as a problem, but publishers do. Every study shows that the faster a site loads, the more likely users are to stay on it, and visit other pages on that same site. Slow page loads cost publishers hundreds of thousands of dollars per month. Monetization on the internet is difficult, and sites can’t afford to miss out on that money if they want to stay up and running. Third, Google controlling the domain doesn’t really have any affect on the ‘freedom’ of the internet. In this case, Google is simply acting as a CDN. Because of the poor way in which Google has rolled this out, their domain is exposed rather than the publisher’s domain - but they exert no more control on the content than any other CDN - which is to say, very little to none. Google isn’t trying to keep you on their domain because it’s a domain they control - they used that as a carrot to entice publishers to adopt AMP because they think slow loading websites, especially on mobile, hurt the entire ecosystem. Of course, as the biggest player in the ecosystem, that means it hurts them, so it’s not like their motives are entirely altruistic, but they certainly aren’t sinister (tag least, not in this case). 
Fuck AMP! You can give them feedback by tapping the menu button at the top right of the page on mobile. Maybe if enough of us do it they’ll give us at least an option to disable it...
Making a web page with javascript, html and css. Imagine that. How creative. This reminds me of the Microsoft commercials for Surface where they try and tell you that you, too, can create stunning presentations. Just buy a Microsoft Surface!
I agréée with you, but just don't go to that site anymore and problem solved don't let google be your censor.
I can't just not go to that site anymore. They're *all* like that. If Google actually punished bloated sites, it would incentivize them to not be so bloated if they wanted to keep getting traffic from Google search results. This isn't one or two bad sites. This is like 90% of the mobile web.
This is a JavaScript subreddit, not a Java subreddit 
I made this, is one of my first projects on JS (i'm still learning), any feedback would be appreciated. &amp;#x200B; [https://github.com/SillyArgie/Breviare](https://github.com/SillyArgie/Breviare) &amp;#x200B; It was made on NodeJS / ExpressJS / MongoDB. Also, if you know a good practice i should apply or you notice something i'm doing in a bad way, i'd be alike to know it! greetings.
The one on the left is a dude
Trump tweeds disarming for Googl and suddenly redheads are telling Reddit that AMP is the end of the open web. I mean, not that AMP isn’t _stupid_, but we all knew that and this reeks of message-shaping.
If you don't already follow the coding train, he is awesome too
 $(".previewanswerdisplay").text($("textarea[name='answer']").val()) -&gt; $(".previewanswerdisplay").html($("textarea[name='answer']").val())
Zxaxaxaxaxa a qra
I think it should be a web-extension (browser extension) or a script for [https://tampermonkey.net/](https://tampermonkey.net/) (which I never used). Web-extension may be published or passed to you in an unpacked form. &gt; Is there a place where people write scripts like that... You may post your job offer on some freelance site. &gt; would it be difficult (and therefore expensive)? Yet I see nothing difficult with it, but there may be pitfalls. If you downvote, please, let me know why.
Which one do you think would be sufficient starter or full? 
[You Don't know Is:Es6 and beyond ](https://github.com/getify/You-Dont-Know-JS/tree/master/es6%20%26%20beyond)
“Best scripting language”... does this guy even TCL?
I like how the writer's pic relates to the topic
Javascript.info is a Great resource for learning JS
Regardless of politics, amp is just garbage
my bad i forgot to save, try the link again
[removed]
I really do enjoy surveys that become exponentially longer the more engaged I am /s
Switch to duckduckgo.com. It perfectly does the job.
Next.js! That's it!
Rate using emoji? I think that sums up the state of js more than anything else. 
How is a simple survey significantly slower than a large reddit thread on my phone? 
I was hesitating to vote for “used it and would like to use it again” at the end because they will prompt me for another one..... should really just be a simple one layer survey. 
It takes about 10 seconds to load on my computer, spews errors/warnings on the console, and has invented its own UI design. So in some ways it already represents the state of JavaScript. 
[removed]
Duck duck go works pretty well nowadays and the bangs feature makes it easy to make a secondary search elsewhere if it didn't deliver. I'm trying to free myself from the Google ecosystem too but damn it is so smooth. 
It _is_ a function call http://exploringjs.com/es6/ch_template-literals.html#_tagged-template-literals https://devdocs.io/javascript/template_literals#Tagged_templates
It’s a tagged template, and is in fact a function call.
uhhhh, thanks!! 
It is in fact a function call, it's an ES6 feature called Tagged Template Literals, used to create functions that will parse template strings (and any variables used in the strings). The syntax is indeed a bit weird to see at first. Some examples and information about it here. [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template\_literals#Tagged\_templates](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_templates)
yeah, the syntax is just horrible, but what it offers is very useful!
So you know what a template literal is. This is a tagged template literal and it basically is a function that you pass a template literal too. So html-lit has defined a function somewhere called html. Tagged template literals basically give you the raw string as well as the variables used in the template literal as arguments to the function. Then you can manipulate the string however you want, you don't have to return a string from the function. You could create a css function that takes a string of css properties for example (as a template literal) then inside your css function you could do whatever you wanted with the text, such as turning it into an object to attach to a DOM node. It's a bit complex but the beauty of it is that you can just write normal css or html in these case and get back whatever you need to work with real DOM nodes: objects, DOM elements , whatever. If you search for tagged template literal you should find some good information and tutorials. The MDN article is pretty good. Html-lit uses this approach and a few css-in-js libraries use it as well.
Yea, I agree that that's a really odd design decision. (I'm not the author, I'm just spreading the word) 
I'm not the author, I'm just spreading the word...
What is the conclusion and why?
Those vs's don't really match up. this can refer to values inherited through the prototype, loose/strict equality either does or doesn't perform type coercion, and closures can be hoisted.
Great feedback! You're right, they're not "related" but from my experience, you tend to learn them around the same time, that's why I've linked them together. Would it be better if I would instead use "A and B" instead of "A vs. B"? 
+1 for Next.js. It can also be exported to static chunks, so that your website can be hosted on static hosting provider like GitHub Pages or Netlify.
The **[EnArticle](http://ai.neocities.org/EnArticle.html)** module of the JavaScript version of the **[first working artificial intelligence](http://ai.neocities.org/FirstWorkingAGI.html)** now holds onto seven recently thought concepts and intelligently inserts "a" or "the" before each mention of them. JSAI is the first working AI because it solves the AI-hard **[NLU problem](http://en.wikipedia.org/wiki/Natural_language_understanding)**. 
Very nice. http://breviare.herokuapp.com/DmR-Ue-jq
yeah... and it's written in react. This is evidence that the choice of technology is not always inherently faster. 
&gt; There's a multitude of factors an interviewer needs to consider. The experience of the candidate, number of projects they've worked on, technologies they've used in the past, as well as how they perform in the current moment, when solving technical challenge, for example. Oh fuck me are you doing hiring wrong. Any 'beginners' reading this, ignore this moron. A company worth your time will care about if you can solve problems, if you are passionate, and if you can learn. Yes, they will care about some baseline of knowledge against some tier in their org, but not arbitrary bullshit like this.
This thread shows two comments but I only see one. Whoever posted but isn't user "arswright" may be shadowbanned?
I'd lean towards upping your count. While prototypal inheritance and this are related, they're not exactly the same and have behaviors independent of one another. Same with hoisting and closures. Equality and type coercion are closely related enough to continue to be one item. So something more like: 1. Prototypal inheritance 2. this 3. Type coercion and loose/strict equality 4. Hoisting 5. Closures 6. Discerning between array methods (forEach, map, filter and reduce) 7. Event delegation 8. Pseudo-code / verbalizing your thoughts
That did it. Thank you!
So many whiners in the comments. Thanks for posting!
And I don’t believe knowing web platform concepts is random bullshit. I think we are exaggerating a lot with the “React” or “angular” or “x framework” developers. Most of the companies I work with hire JavaScript web developers for a reason. That is so that they can rely on them when it comes to working with web-development related concepts. Simply knowing the base syntax of a language such as JavaScript and being able to install libraries off of npm doesn’t make you an experienced web developer. That doesn’t make you less of a problem solver, but this is where the nuance lies. I think it’s all a matter of perspective here and I would gladly take your point and debate it, if you want to.
I'd like to file a bug report please
Emojis can quickly and concisely convey thought, and has been adopted by Millennials as a supplement to digital communication — a surprising return to an older graphical form of written language. And they are finding it effective for certain things. Most of the occasions I have seen hate on emojis, it has been veiled generational prejudice. Even Millennials themselves are capable of this: I could imagine a liberal arts person who might dislike emojis based on a learned prejudice *in favor of*, say, Victorian literature or Classical-era philosophy. But it's still snooty, alienating, narrow-minded, and entirely unnecessary. 
An experienced dev might tell you they avoid using 'this', prototypal inheritance and maybe other things on your list.
Emojis are important when working remote to convey intent or subtle emotions when not physically talking to someone
What actual, *experienced* developer says that the choice in technology is *always inherently better?* I hear a lot of "use what is appropriate for the job at the time." "Appropriate" sometimes entails familiarity, which gives rise to differences in appropriate technology from individual to individual and team to team. But anyway, the survey loaded on my phone reasonably promptly. The blame might actually lie on another technology, like a web server or CDN, rather than on React itself. 
Why is that? I’ve never met such a developer. I have been warned about the dangers lurking behind `this` for example, but that motivated me to learn it to the degree where those problems did not affect me. As for not using prototypal inheritance, I don’t know what to say. What else would you use, in JavaScript? 
This is going to sound really harsh, but if you said these things to me as an interviewer I would run away. It's great that you learned 'this' to a degree that you are comfortable with it. The problem is that 'this' is innately confusing, and using it makes it impossible to reason about a function in isolation. Relatedly, it isn't realistic for all developers on your team to understand all of the rules for 'this' perfectly, so you're really asking for odd 'this'-related bugs if you're using it a lot in your codebase. This problem in particular will affect you no matter how much you practice. An alternative is to 'this' is to use plain objects and pure functions, and in the case where you need inheritance, classes are a viable, perhaps preferable, alternative to prototypes.
Written language has conveyed emotion and intent for thousands of years without emojis. 
While I probably shouldn't be complaining about there being too few questions on this survey, it might be useful to allow a preferred option - there's several frameworks I would happy use again, but only one that's my go-to if given the choice.
Hi /u/Gqr, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Shouldn't the first one be prototypal inheritance vs class inheritance?
Or sapper, or nuxt. Etc.
No option for phpstorm.
Hmm gotta say this is not true. Good companies will get more applicants that can problem solve than they have budget for. This is a good way to figure out who deserves a mid level position vs a junior one.
Yep. Poorly
Didn’t know about that new primitive, that’s pretty awesome. Thanks for pointing it out. 
Duckduckgo's bangs are an awesome feature.
This is reasonable but was not seen as standard practice until very recently.
Yeah. I do these yearly but I'm going to skip this time. Too much and the layout is very obnoxious. Kinda ironic. 
Plot twist: emojis can have different meaning based on culture, age, etc.
After.js It uses express and react-router with splitting
Any handy links or just a snarky comment?
Shows 500 error
Damn, you got me
Ultimately none of it really matters, a month in and decent engineers will have everything figured out even if they didn't at start.
I should really get rid of the “versus” part. Those *this vs. that* sections should actually be *this and that*. To answer your question, when I talk to a candidate about prototypal inheritance, it’s usually within the context of “what other paradigms do you know of” and we’re probably doing a comparison between prototype-based vs class-based. I don’t expect them to know about class-based OOP, since they might have learned only JS, but that’s definitely a plus. Extra points for mentioning FP.
_writes infinite loop in Vue_ See? Proof Vue is slower.
What? 
Javascript is like the big bang of space. It keeps expanding.
that's exactly my point... bad dev practices can happen anywhere
There's a great Ars article on this topic https://arstechnica.com/gadgets/2016/08/emoji-are-getting-ever-more-expressive-but-not-without-growing-pains/ 
I wouldn't call someone a beginner if he didn't know some of this. I would say a beginner is someone that: 1) Don't declare his variables. 2) Struggles understanding the difference between declarations and expressions (most notably functions expressions and declarations). 3) Struggles understanding property access, e.g. bracket notation vs string notation. 4) Struggles understanding closures (most common mistake i'd think is functions that part of loops with `var` declarations). 5) Tries escaping async flow by putting a variable on a higher scope of a callback and then using it immediately after it. 6) Struggles understanding the simplest "TypeErrors". I am talking about "Something something is undefined", "Something something is not a function". Those are almost dead giveaways that they have just begun programming on Javascript. I guess you can conceptualize their mistakes but that's much harder. For example, would you say someone is not familiar with "prototypal inheritance" if they don't understand why setters on the prototype chain "override" assignment on that property of the child object? Would you say someone is not familiar with `this` if they don't know that a top level scope `this` is the global object on javascript scripts, undefined on javascript modules and the module object in cjs? It's hard to say how well you know a concept, it's just easier to pin point mistakes.
Written language has also caused serious misunderstandings, sometimes in life or death situations.
https://github.com/jamiebuilds/react-loadable/blob/master/LICENSE
Does he have a reputation of doing stuff like this? It seems like his repositories are kind of cool. It's mostly just instructional things. 
One of the best presented viewpoints so far. I’m talking about people who claim to be, or would love to be considered “intermediate” but they’re not. So, I’m not arguing that beginners should know what I listed. On the contrary, I’m saying that beginners don’t know those concepts nor should they be evaluated by such criteria. I also said, in the article, that nobody should be considered “still a beginner” just because they don’t know one isolated concept. Thanks for sharing your viewpoint.
Reading won't make you much better at programming unfortunately. It's like 5% of the battle.
removing the MIT license from OSS is the software equivalent of a redneck burning his new Nikes. did every PR contributor approve the change? nope. not enforceable. can I fork the previous commit, publish to NPM &amp; keep the MIT groove train rollin? Yup.
Thanks a lot. I will update the article and the post to make things clearer. 
You should keep a list of items to contain all item data, so that you can retrieve an item data based on other item data. e.g. //create the list let itemList = {}; //add item let ele = document.createElement("INPUT"); itemList[itemUpc] = { name: itemName, //if needed eleQuantity: ele //the item's input box element object }; //change quantity of an item let ele = itemList[itemUpc].eleQuantity; ele.value = newQuantity; 
I can only say good things or bad things once I like or dislike a certain item. I like using some of them but I would like to provide what holds me back or why I dislike them. Also I can't say what I would use most or less. I mean, I still have some jQuery applications to support but I really dislike using that right now. Same for some of the frameworks that I have used and wasn't really satisfied about them and can't tell what was good. Or I use them but can't tell what I dislike about them. And when hearing about stuff I also can't say what I like or disliked about it.
These surveys are interesting, but I also find it interesting that they mostly ask about buzzword compliance with trendy libraries, tools and APIs. Relatively little attention is paid to JavaScript-the-language, general development skills and how they are being used with JS, or what JS developers are actually making and what lessons are being learned along the way. So the survey itself is also a pretty good metaphor for the current state of JS. :-)
The survey really needs a meh option about things you've used. It seems silly that I can only either want to use it again or avoid it.
It's the same idiot.
You're saying that emojis would be able to help in those life or death situations? 
🥖🥖💦😘🐢
🤗😤🤗🐎🦄
He seems pretty unstable. When he pulled this with Lerna, he went around to a bunch of companies' open source repositories using projects he has contributed in the past to tell them not to use "his" project. He also told employees that they should quit working for said companies. Jamie is (or has been) a contributor on a number of big projects, but the vast majority of his commits are just housekeeping (like 100 commits of single line changes to `package.json` or minor changes to documentation). I have not seen any commits of his with significant substance, so calling those projects "his" is delusional. I get the message behind the change in license, but leveraging community driven OSS is not the way to express it. The way Jamie handled the situation made him look childish, which diminished and distracted from the message that was meant to be focused on. I just looked at some of his projects; it looks like he has disabled the ability to file issues. I would not trust any project where Jamie has any kind of influence.
Yeah that was crazy childish. Also screw him if you can't file issues AND for claiming open source projects are his. He's also well within his right, but still out of line to question the companies people work for. In short, he seems like a real jerk.
I found that sometimes you just CANNOT use one canvas to do what you need to do. So I got around that by creating layers of canvases atop one another and then specific things happen on specific layers. It is slightly more resource intensive but I can do it even on a raspberry pi so when I say slight I mean nearly non-existant slight.
My advice is don't reinvent the wheel unless you have a very good reason too. Use next.js. they have some thorough docs. Also, tons of examples. I made a next stack a few weeks ago with Express. Express spins up the ssr process that next uses and then you can do whatever you want for api calls/backend stuff in Express like normal. They even have some pretty clear examples for integrating redux as well incase you need state management.
Get your foot into something, wait for some usage, then strangle hold it with your ideology. Seriously fuck people like this. I said it last time but imagine the backlash if someone pro-life in the abortion debate did this for any of their repos.
👁1️⃣🐜✌💪📥🍑👁🚫1️⃣🐜✌🚬
Put it on laugh. Our reactions should be more positive and supportive than bashing him.
Https://docker.com if you're unable to search for it yourself.
Hi grandpa! 
Ya man, Typeform is great. Depending on how its used, it can be blazing fast to fill those surveys out only using keyboard shortcuts, which I think is quite innovative.
... so can in-person interactions.
So... you're saying you support ICE and you're a racist?!!?
How about using [document.createElement](https://www.w3schools.com/js/js_htmldom_nodes.asp)?
Innerhtml
I support activism against a lot of the immoral things that are happening over complacency, but this just isn't tactically sound. It's a kamikaze attack into the beach and it won't work.
My [React/Redux links list](https://github.com/markerikson/react-redux-links) has a whole section of [ES6 feature overviews and learning resources](https://github.com/markerikson/react-redux-links/blob/master/es6-features.md).
Toxic. Stupid.
I know I'm adding fuel to the fire, [but here you go](https://github.com/GoogleCloudPlatform/click-to-deploy/pull/209).
Your best bet would be to 1) Create a temp string that acts as an accumulator for the HTML you're writing, and then concatenate all of the markup into it. 2) When you're done, you can then use document.createElement() to create a div, and then overwrite that div's innerHTML with the temp string. 3) Use document.body.appendChild() or document.getElementById().appendChild() to insert it into the document. If you already have an element you want to insert it into, you can skip step 2. :-)
I’d like to see him removed from TC39 committee. This person does not have the attitude needed for consensus-building. 
Agreed. I agree with his political stance (assuming this is also about ICE) but this is an awful way to try and enact change. In reality, all he's accomplishing is harming the open source community.
It seems to have been [successfully merged](https://github.com/GoogleCloudPlatform/click-to-deploy/pull/221). Sigh.
You filthy privileged-ridden American
Sums up many of the exchanges I see between devs on Twitter. Rant and rubbish other people's ideas without offering an alternative.
Look up TodoMVC
words can be accurate. Emojis can never be. It's no different from smileys. 
&gt; I’m not saying emojis are a more elegant solution to writing, you are strongly implying it, which makes whatever point you are making preposterous. Emojis aren't an improvement, they are a regression.
&gt; adopted by Millennials of which country? idiotic american teens maybe.
Hi toddler.
Because this survey is mostly a giant ad, check their survey for last year, it's full of "sponsored by this or that" douche bag company. Don't be fooled.
Thanks for your answer, so do i just keep overwriting the temp string ? &amp;#x200B; temp += "&lt;h2&gt;"+race+"&lt;/h2&gt;"; temp +=""&lt;table cellspacing='0'&gt;"; &amp;#x200B; etc etc? &amp;#x200B;
[https://medium.com/javascript-in-plain-english](https://medium.com/javascript-in-plain-english)
Providing Useful Feedback !== Whining Lots of people providing useful feedback for this very long and tiresome survey. 
&gt; Emojis are important... Let me stop you right there, you sound like a toddler.
haha, yeeeeeep
Something about that title had me smiling.
in theory, you're absolutely right! until 2 tech titans have a decade-long legal battle, we won't really know for sure. ...but how do you know a PR that you merged is original work &amp; not copied from a GPL-licensed source? what if the PR author has a change of heart? you've gotta make the PR author pinky promise that the PR a) was originally theirs and b) is yours now, no takebacks. That's why CLAs are a thing.
This was super helpful up to the “don’t use” admonition. All that hard work didn’t get put into designing those features just so we can turn our noses up at them. There is always a good use case or two for such things.
Perfectly reasonable request? Unimportant naming convention who cares. 
I was thinking the same thing, though as a data point it's not terribly useful. 
For a large enough codebase with enough developers, language "features" like these may cause more harm than benefit.
You don’t think that someone who writes and reads code for a living can be expected to understand how a for loop works?
If this was a one-off, I don't like it still, but whatever. Think of this context though. This is a total ideological strategy that is straight out of socialism on controlling language. He's saying if you use the phrases "master" and "slave" for naming conventions in your software you are essentially propping up patriarchy/oppression. So, if you use those terms you are *offensive*. If you don't see the road this is going down, take a look at the list of words someone else wants to change in that same ticket: ```blacklist whitelist kill git blame svn trunk man in the middle attack white-hat/black-hat hacker man page daemon blackbox/whitebox testing penetration testing minion``` It's a form of ideological control, and it will keep getting worse and worse. If any of those words offends you, you simply are not an adult. I won't dive into the subject that these are mostly white men thinking they know what's best for minorities.
I'd expect yes, for normal for-loops. This here is a lot of "magic" imbued to a for-loop that many JS developers don't know exists. One day some smartypants is going to write code with asynchronous side effects in the for-loop expressions and another poor soul is going to spend a week pinpointing the bug caused by it after a refactor, and heavens be with him if he doesn't know about this "magic" behavior. I think many JS developers know the scoping nature of `var`, and yet it still confuses too many people. I think also many JS developers assume a reasonable C-like scoping model for `let` in the for-loop, where the parentheses are all one scope and the block is another scope. But this is magic fuckery where the increment happens in the block's scope, and is duplicated into a new reference after every loop. There's a very good reason why React encourages writing functional components, why Vue tries to make developer code as plain-ol' as possible, why developers like "lightweight" stuff; hidden, "magic" behavior cause exponential distress as the code grows; pinpointing the wrong assumption of the magic is very difficult.
As childish as the other PR was in this thread, I’m completely okay with the ICE references in the license, because fuck Trump. Seen quite a few libraries following suit as well.
might want a landing page that actually answers why
Wow that's a hell of a compliment! Thank you so much for checking out my stuff:) I have used solo-learn to get up to speed quickly with unfamiliar languages but did not know it had a code-share mechanism. I will most certainly check it out.
not a fan of shortid, isn't the point of url shortener to have shortest url possible. Looks like you already generate 9 digits urls, something you would only need to do after shortening 4.2 billions urls if you incremented it correctly.
*opens with smartphone*
I get that perspective, and if what you’re doing could really be classified as “magic” then a short comment would probably clear it up for future developers, especially as the behavior of `let` becomes more widely understood throughout the JS world. That being said, I think this concept could be explained a little differently without Archibald’s incredibly deep understanding of the topic making it seem so complicated and scary. I understood this concept previously (through simpler explanation that `let` is scoped to each iteration of the loop. Nothing more than those words and a code example, and it made sense.), and thus found this video insightful for grepping the internals of what is happening, but I don’t think I would use this video to introduce the topic for the first time to someone.
I don't really find that a compelling argument. It's perfectly fine to address these things on a case by case basis, I don't think there is a slippery slope here.
Quite the opposite I think it is so unoffensive that I think it's a real stretch to include it on that list.
It's a joke - check out the root URL (or click About This at the bottom).
I didn't pull it out my ass, someone commented in the ticket linked that you are responding to with that. Don't you see the game that is being played and how it's going to get worse, he's embedding things with politics willingly, and that's dangerous. If you let "master" and "slave" pass, then why wouldn't you let "black hat"? If you don't allow black hat, why are you propping up a power structure that is oppressive? Are you racist?
The person in that PR who was using that list was making the same uninspired slippery slope argument you are making. 
Are you so sure? The comment right underneath says "I'm up for changing those too." This is Poe's law. Slippery slope here is actually real and it's not a logical fantasy. This is the guy that says he hates straight white men.
Is that really true with his commits being that small? I thought he was supposed to be a talented programmer.
I'm sure that was the point of that comment, they are clearly very offended by `git blame`. Let's stop here for a moment though, do you actually think google shouldn't change this language or is it just the toxic originator?
Good call, I could also probably avoid calculating the window width each \`mousemove\` too and only update if the user changes the window size... Thanks for taking the time to peek at my stuff!
Correct. :-) Remember it’s concatenating to or appending to when you use the += operator in a string. It’s overwriting or assignment when you use the = operator. And it is easier to use single quotes or backticks (which are ideal if you’re writing for a browser that supports ES6 syntax) as your string delimiters when you’re writing out HTML tags, since you’ll more often than not need to use double quotes for your attribute values. :-)
Google clearly is for this change and they're motivated by the same idealogy as jamiebuilds. I actually have friends there at Google who cannot say they're libertarian or conservative for fear of being fired and the stigma it brings (which they have gotten people fired). Google will make whatever change here, and that's their prerogative. I don't think they should change it, but they're far beyond this point of language games. The person saying "I'm up for changing those too", this is the road I'm talking about. You may think he's joking, but I'm not sure at all, and the guy commenting doesn't look to be who thought it was a good idea. You can see my profile I'm conservative, so I get that would put you off and make me seem bias. Do you really think I would resist unless I sincerely thought it was a bad road? I'm not shoving politics into anything here, they're the ones doing that. I'm not making it up that they believe language is a power structure that breeds oppression, and that's where it simply starts and it will get worse. Jamie is already calling people racist for not doing his license changes.
Jesus christ this fucking child is at it again
Yes, if the code is part of the product, those companies cannot use your product. Likewise, if you are an employee of one of those companies, you may not use it for any work related purpose, or on work issued or owned computers.
It's clear from the merged request that google is anything but embracing the toxic behavior of that pr author. I don't see anything wrong about choosing to use language that they deem as more professional and they went out of their way not to offend you. If that doesn't satisfy you I don't know what will, and I don't who has the time to go to the effort of figuring that out.
😂
They accepted the merge request? I'm not sure what you're saying here. I'm not seeing any critiques from Google on the author. Am I wrong here? If so, would you please link me to whatever you're talking about? With your last comment you're implying that you think "master" and "slave" is not professional/offensive? I hope that's not the case, because it's not offensive. The person bringing it up is a white man who makes a good living, don't you see that as kind of odd? It's virtue signaling, and worse, it's pushing an ideological narrative. Do you think people ever bring up that kind of racial argument with BDSM (somewhat being facetious, but you get the point). It's giving into the dynamic of language power structures that should not be touched in programming. I really don't want to let up an inch here because they will keep doing it. Smart/dumb components being changed to stateless and container, I get that as being unprofessional. Master and slave? That's clear what the intentions are.
Looks nice, but you might want to make sure the sun doesn't move.
Code review: - use `const` instead of `let`, unless you need `let` - make utility functions and loops instead of doing all the copypasta. This goes for the CSS too (use a pre-processor) const addEvent = (event, cb, node=document.body) =&gt; node.addEventListener(event, cb); - use `template ${strings}` (why can't I escape backticks in inline code?!?) - If you're ever using `setTimeout` to undo something you're doing it wrong. There's a `transitionend` event, but even that is hacky. You generally do this by adding/removing class names
&gt;Google and contributors of this project do not affiliate with comments from #209 They reiterated that many times over in the merged PR. Also wait you think smart/dumb components are too far, but you're fine with master/slave?
No, smart and dumb components I can see the point that it's unprofessional. Master/Slave, it's clear they're trying to avoid "racial" associations, which is the problem. That's why I said virtue signaling and agenda driven. Smart/Dumb is not agenda driven (also stateless/container is more accurate and telling which is better for naming conventions). I highlighted that part because it's not like I'm against any name changing ever, the context of this change and the reasoning is why I'm against this one. You also conveniently left out the part where they said: &gt;it is also more inclusive language And again, if you look at the thread where you got that quote, it's clear the poster who said "I'm for that change" was serious by his other comments. The one who posted the list that I copy and pasted was a joke so that was my mistake there and you were right, but still the other poster agreeing with it makes my point still.
_Mobile firs...._
Ok, in the prompt I finally got the numbers 0-100 that I submitted to show up by Number Grade. However I'm not sure how to set the alert to display the letter grade.
Do you want a different letter grade for every number, or just one letter that encompasses all the numbers you entered? This is starting to smell like homework ;)
You need to loop through every element in the array and print a letter grade for each one.
Sure, it's more accurate, however I don't see how anyone could argue that manager/worker is anything less than a lateral move. As for the inclusiveness statement. What do you expect google to do here? "not wanting to have to tell a coworker to 'kill a slave'" is a very specific, actionable, and reasonable request. Now what you are talking about is at best vague and broad 'not wanting x, y, z, to police the language'/'not wanting programming to get political'/'not wanting some hidden agenda to dictate how we program' and at worst is very knee jerk and confrontational, "I don't think you should be offended by master/slave". It just doesn't seem all that 'political' to me, just practical.
Not sure how to do this but, im attempting.
That's awesome! Fantastic work. There's also [this site](https://redditsearch.io) if you suspect a comment is a repost but don't know where from, but it can't scan through whole threads like your code can. It would be amazing to have a combination of the features so that you can check any post's comments for any duplicate comments, but that would probably take too much processing power for general use.
It may seem reactionary when you drop the context of who is asking for the change and the way it's done. If the context, for example, was a person who is not politically driven at all, I would listen of course. I could be wrong with master/slave being offensive and I'm willing to accept that from someone reasonable. I don't want to hurt anyone who's actually sincere. Jamie *is* very politically driven though and he's saying it's offensive, not only that he says things that could be offensive but they're considered safe targets because it's "punching up" (straight white men). It's the same with CoC's, being vehemently against those sounds strange at first, and it sounds fine, but it's people wedging in their ideologies when it's simply not needed. I don't think this framing this as me being confrontational is correct. I live in a incredibly liberal state and everyone I'm close to is liberal, I have no issue with liberalism even though I'm conservative. I'm very wary of these kind of language games though and I don't like to let up on it, and it always starts here and it's about control and not being sincere. It will sound extreme, but the same way you wouldn't want a conservatives to play language games with calling a fetus an unborn child or any inch there.
I wanted the same option too though I changed my mind as I gave it more thought. I wouldn't use *technology X* if I were in charge, otherwise I don't really have a choice. In that case, the answer is simply No.
It looks like you are already iterating through the scores at line 29, so inside that block just add an if statement to check if the current score (score\[i\]) is greater than highestScore and reassigin highestScore if it is.
hehe, similar to:[https://medium.com/@adrai/a-tale-of-the-last-10-years-in-web-development-9c74ead7e6a5](https://medium.com/@adrai/a-tale-of-the-last-10-years-in-web-development-9c74ead7e6a5) 
I guess it would be something that does what that sites does, but it would have to do it hundreds or thousands of times at once which... might be a bit much, yeah. I'd really love to be able to run comments on political posts through it, though. In most cases it's hard to nail down which commenters aren't genuine. Not that all shady accounts post duplicate comments, but it would catch some at least.
# good
Why does JavaScript, React in particular, attract these loons?
https://kangax.github.io/compat-table/es6/
If you wanted something that continuously scans reddit, you'd definitely want to constrain the scope of the search, e.g. to just one political subreddit. You might also only search threads that achieve a certain level of popularity, e.g. only scan threads with 50+ comments, if there's reason to believe disingenuous accounts post more often in popular threads than in popular threads. Since in the thread that spawned this all of the accounts were created on the same day, if you were to encounter a user who duplicated a comment, if the API allowed you to fetch a list of usernames based on the date they were created, you could then look into the activity of those users as a way to more quickly find fake accounts.
Nothing against what you’ve said but without these buzzword tools you’d probably still use es5 due to IE and the mobile web, there wouldn’t be anything to tell. 
&gt; i dont want to keep it as a module What do you mean?
Correct. You can get an earlier release and continue to use it as you please within the confines of the original license. &amp;#x200B; What you won't be able to do is merge in any new changes from the original source, since the newer code was committed under the new license with prohibitions. &amp;#x200B; Ostensibly, someone could fork the repo, and start making their own changes, trying to keep pace (without directly copying) with the original repo. The trouble, of course, is getting the community to settle on the "One True" fork. What's more likely to happen is a half dozen or dozen people will fork the repo, and noone will use the code anymore because there's no authoritative open source project that everyone else is also using.
I still don't know what you mean. Does your code above work? What do you want to do differently?
I was thinking subs like /r/news and /r/worldnews. There are always a bunch of comments on major political stories in those subs from new and low activity accounts. Though if there is a coordinated effort I don't really know if they're reusing comments anyway. Finding accounts created at the same time could be useful, though. I remember once when there were some suspicious accounts someone posted some account names and the exact time and date they were created to show they were linked/suspicious. Still don't know how that got that information, though.
This is good thanks.
Well the subject here is "lerna style", and that's basically the answer. &amp;#x200B; Look up the drama around Lerna - which he hadn't meaningfully contributed to for quite some time before springing this same license change on a product used by a lot of people.
I have no idea what you are talking about - what is your problem, what are you trying to achieve, what doesn't work?
Seems like not thinking is my problem ,i fixed it.
It's MOUSE based :rolls_eyes: who upvotes crap comments like this?
It's quite different, but reminds me of [yonatan's code golf masterpiece](https://codegolf.tk/a/68). Sun rays behind procedurally generated mountains in 754 characters. It's unfair to compare golfed code to regular code, they serve different purposes. I'm posting for peoples enjoyment. Enjoy it for what it is, or don't.
If you're on Windows, Docker requires you to run Hyper-V. If you have AMD CPU like I have, it doesn't sync well with Hyper-V and your other option is VritualBox. I'd like to try docker but it's way too much work to make it viable.
All it takes to create a touch based parallax in js is to add a `touchmove` event listener other than the `mousemove`one. It really only takes a few lines of code to make a MOUSE based script into a responsive script
Does the MIT license allow you to sublicense as MIT or must the sublicense also have these limitations?
Without a few particularly important tools and libraries, I agree we would probably not be where we are today. Babel has obviously changed the landscape fundamentally through enabling the use of future ES features in production code before browsers supported them natively. Perhaps Browserify, as the first widely used tool to support building larger, modular JS projects without horribly over-complicating it. Then there's Node, which practically created the concepts of both using JS on the back end and writing JS tools in JS itself. (It also gave us NPM, but let's pretend that never happened.) Likewise, a few libraries really have qualitatively advanced the industry. jQuery of course, for making a few everyday tasks simple enough that you could do them with a few lines of code and without being an expert on lots of APIs and how they differed across browsers. Perhaps React, for popularising declarative UI coding on the front-end. On the other hand, how many unit testing libraries do we really need? How many module bundling tools? Big UI frameworks? Minifiers? For a lot of these jobs, there are many options, but the fundamental differences between them are few and the incremental improvements from one to another are small. Once you know one decent tool or library for each job, you can get on with more important things, like actually building stuff.
It's typeform, a very popular survey platform. The surveyors didn't just build a platform for this
I’m not arguing with the efficacy of it (provided you manage your variables *perfectly*) my comment is more a lament of the obtuseness of the vanilla DOM api in general, which is a holdover from XHTML days.
looks cool! Definitely getting some [Firewatch](http://www.firewatchgame.com/) vibes - was that the inspiration?
* Babel's version of the typescript playground: https://babeljs.io/repl * Node compatibility table: https://node.green/ * New feature proposals: https://github.com/tc39/ecma262 * Current language spec: http://www.ecma-international.org/publications/standards/Ecma-262.htm
While this issue is obviously a hot button issue right now in the FOSS community, we'd like to remind everybody that witch hunting is not allowed or tolerated by reddit or our mod team.
How is that obtuse?
Have you ever taught first year Web Dev students the vanilla DOM?
I did just that and I was tapping around like an idiot thinking wtf does this do... *mouse based* OH right....
Or even better, learn to contribute to Free Software alternatives instead of further coercing people into using Discord, which is massively harmful to users' privacy.
Source?
 &lt;!DOCTYPE html&gt; &lt;head&gt; &lt;title&gt;Basics&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;script&gt; console.log("hello world"); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;
But you can use ‘ for attribute values.
In your browser hit Ctrl + Shft +i 
No. I only see what I wrote in my script, Hello World.
Explaining: this shortcut opens devtools with a console of the current page/tab. `console.log` writes messages to this console, not to the page.
Oh, could it be what's normal? I looked at a youtube video and followed it, and the console.log would display on his browser, just like the html code.
I'm a little curious: why do you use Chrome 53 and not the latest Chrome 69?
Still have a link to that video?
I suspect this is what you were trying to attempt? &amp;#x200B; [https://www.w3schools.com/js/tryit.asp?filename=tryjs\_intro\_inner\_html](https://www.w3schools.com/js/tryit.asp?filename=tryjs_intro_inner_html) Replace some content on the page with a text string such as "Hello world!" ?
I liked the music, and it was easy to read the code. My recommendation is to communicate what you are building and why. Many videos have the creators speaking while they code (or as a voiceover). Another way to communicate the project is with on screen text. Good luck and happy coding!
&amp;#x200B; y bad guys I completely misunderstood what console.log was supposed to do (even when it's made pretty clear in the name). So I don't actually have a problem(yet). But thanks for all the replies! This sub is really quick and friendly.
No it's just as you said, I just completely misunderstood what the outcome was supposed to be, but thanks anyway ;)
When you enter `999`, it ends the loop. But the executions still continues. i.e. You only have one condition check for `999` for exiting the loop. With your current code model, you'll need another condition check to end the whole script.
Was this supposed to be sarcastic? If not, you have committed one of the biggest strawmen arguments I think I have ever seen.
Javascript has a low barrier for entry. It's a simple language with giant reach. If you want to make things quickly to show people, web languages are how you do it. People are people, eventually somebody is going to try and create a religion out of JavaScript because it makes them feel powerful when many eyes are on their seemingly "righteous" acts. The truth is, it is just attention seeking and will lead to their projects dying while companies scramble forks for their own purposes.
Yea, it was a joke. It's what Jamie is doing on these Github repos that if you don't make the license change you are racist.
Faith in humanity restored. Sorry you got down voted, you should use /s to communicate sarcasm.
Is there a petition? If not, how can it be organized? This kind of manipulation and censorship is extremely damaging to productivity. Contributors are stretched enough without having to worry about which terminology offends which person. This is completely unacceptable. Some of his bizarre contributions have also been merged.
Don't tell me what to do, fascist.
Woot?
:D
1 var j = 5 ; 2 var l = 5 ; stop and restart the code execution in line 2
Hi /u/Mittalmailbox, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/BananaBobbyX, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
Hi /u/BananaBobbyX, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Hi /u/tuckerconnelly, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/tuckerconnelly, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/lil2good20, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
It's not possible.
Depends on your background, and what you’re trying to accomplish. Are you putting together a simple node server with a solid C++ background, or are you building a complicated single page web app with no programming experience? JavaScript syntax is pretty straight forward, but the asynchronous event loop is a little confusing if you’re coming from a traditional Python/C++/Java background. 
this sub is becoming more and more ridiculous
Like a goto or something? The question doesn't really make sense to me, but I guess you could take the script as a string, then run eval( scriptStr.split('\n').slice(lineNumber).join('\n') )
there can be loops and brakets
Then keep scrolling
You'll be able to manipulate the dom to the extent of changing text colours and adding elements to the page. An understanding of loops, functions, arrays and what not will likely take weeks to get a basic understanding and months and beyond, to get a good grip of (just my opinion, currently been learning for 2 weeks or so now). 
JavaScript is actually not that hard to learn if you have a programming background already. Getting acquainted with the environments (browser, node, etc), its ecosystem (popular libraries, npm) and tooling will definitely take you more than 24hrs.
I agree. It is very glitchy around the left and right edges mostly because it resets to the middle as soon as the user moves too far. Removing the "mouseexit" makes it behave much nicer.
If you want to pause execution at a specific line, do some debugging, then resume execution at the same line you might be able to do something by injecting debugger; in the code at that specific line and using some debug api in V8. Otherwise what you what doesn't make any sense. Try explaining your use-case better. You might want to check at some forum for the V8 engine instead.
i have a website where user a can write javascript code and i execute in server now the code controls mouse , input , screen grabing so now there can be some error at a specific line so the fix the problem but now i don't want the execution of the code to restart from the begining but in specific line 
Hi /u/BananaBobbyX, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Thats where `debugger` can help. Basically add conditional breakpoints using v8 and only break on error, inject new line of code, rerun. You are still in the same script context. Not sure if this will work.
Neat! Just enabled it. We’ll see how it goes...
You need to go deeper into something. Just choose something in the stack of things you know and go deeper into it
If you really think you need to do this, stop, rethink why you need to do this, and then don't do it.
[https://codepen.io/jondiprose/full/MXNBML/](https://codepen.io/jondiprose/full/MXNBML/) Not this week but made recently.
Depending on where you work, the requirements needed for the next level should be clearly spelled out. These largely don't revolve around technically proficiency of a language specifically, but that may be included (and may be more prevalent at the lower levels). Manager discretion is also a big part of it, so you may want to sit down with them to talk about your plans for advancing forward quickly.
..and he was never seen again. 
Would you say it would be the best ideea to first get deep knowledge of JS and only after that go deeper into what I mentioned in the stack ?
A big differentiator between junior and mid-level is your ability to complete non-trivial tasks without constant oversight. It doesn’t even mean you need to be a master of every library, it means you know how to find the solutions to new challenges that you’re likely to see day to day, your work meets the standards of the organization, and your approach is reasonable. Beyond that, it’s specific to the tools and needs of the organization.
And does that come with time and practice, or is there something you learn to get better at ?
Some more context to the question might help, but in general it's recommended to use the ["test pyramid"](https://martinfowler.com/bliki/TestPyramid.html) From top to bottom it's UI/end-to-end tests, the integration tests, then unit tests. UI tests are written to simulate a real user, using an automated tool like Selenium, TestCafe, etc. Integration tests test multiple units of your code. So if you have an Express route for example, that takes in a HTTP request and passes that along to a Node service/controller/whatever you want to call it. You can test that with an integration test. I usually use a combination of all three, but primarily write unit tests.
blah blah blah blah blah. massively harmful my ass. Unless you are sending them insanely personal information (which..... totally your fault), its not massively harmful.
I realize this is a bit different advice than you're after, but think it's still relevant: I think you'll find that after a certain point, the technical skills stop mattering as much if your goal is to climb up the ranks. At most companies climbing the ladder is a combination of a base-level of technical skills, but quickly becomes more about being able to deliver business value, gain an understanding of _why_ you're code needs to be written in the first place (what business problem is it solving), and unfortunately being able to play a little bit of politics (and obviously this will vary from company to company). Some companies claim they have technical tracks where climbing the ladder means getting better and better at technical skills. And some of these companies may adhere to this, but code does not exist in a vacuum so I've always been skeptical to how "meritocratic" those companies truly are. And again, code is just a means to an end, so I think there is a lot of value in understanding the business domain. Once you're able to start working with less supervision and able to work more autonomously, from a technical standpoint that will be a good sign you're no longer junior. And that just comes from practice. But like I already mentioned that's only one piece of the puzzle to climbing the ladder.
Absolutely this. When we hire for our admittedly small firm I’m looking for techies that don’t need led by the hand often. 
[removed]
Very welcome; thank you for sharing your work -- will be looking forward to anything else you do :)
At least for now, all it does is a GET of all items in a collection. It could very easily allow you to get all the users in a database, and since it's Mongo, it likely means not just things like name but email, address, phone etc. If you're looking for auto-rest type things, I'd recommend FeathersJS, there's a little bit of configuration involved for each document or table you want to expose, but that's not a bad thing.
Time and practice. I fully agree with him. As someone who’s been doing this for around 6 years professionally, in just about every job I’ve had our senior developers, self included, are distinguished by their ability to lead and churn out consistent quality versus their knowledge sets or experience. I’d trust many of the devs I know to pick up a new language and churn out tickets in it in their first month than I would someone with a year of experience that is still learning the ropes of the development world. 
You'll gain a deeper knowledge of JS by going deeper into that stack. You should know JS well enough to be productive, but learning language trivia isn't necessary before going deeper into the tools. I recommend The Mostly Adequate Guide To Functional Programming to everyone.
I get where you're coming from, but for the moment, I want to focus on being technically proficient. Adding value to the company, in my humble opinion, comes later on where you have enough technical knowledge and the ability to lead other people.
Here's a hint: var scores = []; scores[scores.length] = entry; if (scores &lt; 60) { `scores` is an array, but in the final line you treat it as a scalar (a single value).
Time and practice. There are a few things that can help. - Take on new challenges and cherish unfamiliar territory. Accept tasks that are out of your reach at work, find small projects you can start or contribute to that, especially if they are a little out of your reach. - Get comfortable with admitting when you don’t know something, be happy for any opportunity to learn from someone more experienced. - Seek out and fix broken things, even if they’re not your problem. Those warnings or errors that your team knows about but they but ignores cause they aren’t hurting anything? When you’ve got some time, research them and fix them. - Write tutorials about difficult/novel problems you’ve solved, even if you don’t share them with anyone. Not only do you never know when someone else might need to solve that problem, forcing yourself to explain something complicated is a great way to fill in gaps of your own understanding. - Don’t be distracted by COOL if something nearby SUCKS. The path towards COOL code and technology makes it really easy to overlook bad things, but the bad things are usually challenging in unique, healthy ways. For me, a very senior developer has few to no things that suck when they complete a project. More junior devs tend to have COOL things that start to suck as soon as you poke at them. I could go on and on, but basically: be curious, pay attention to details, try new things, work to make things better.
Technical proficiency is assumed at anything other than an intern/junior developer level. There are no tech stacks or libraries you are expected to know to climb the ranks. As a mid to senior level person, your job is not about ability to make things that work - that is assumed. Your job is to build maintainable, easy to read software, and be able to quickly learn and assimilate new libraries/frameworks into your workflow. This cannot be achieved by crash study, it comes with experience. People grow at different paces to be sure, but there are often good reasons why you need a certain amount of time served to be considered senior. It doesn't mean a senior dev is smarter than you or even writes better code. They've just seen more than you have. And the more experienced you become, the less novel each new problem seems. You have a memory of having seen something similar before, and you know what approaches worked and what didn't. Then there are the soft-skills. No one is going to teach you how to interface more effectively with product managers. No one is going to teach you how to give more accurate LOE approximations. And no one is going to teach you how to assess risk with changes to a codebase. You might be worried about technical proficiency, but these are the things that get people promoted. Writing good code is just the starting point. At a certain point, to paraphrase u/ccleary00, the difference in technical knowledge between developers becomes trivial and isn't that meaningful on a day to day level. The difference between me now and me 3 years ago is not my knowledge of javascript or experience with React. It is the ability to write software. This is the difference between "knowing English" and "being a writer." Having said all that, the things you *can* be looking into that can help you level up aren't specific to javascript. Learn about software design patterns (there are even books that explain these things using javascript). Become an expert on something in your field (browser animations, state management solutions for React, unit/integration tests, build tooling for dev and deployment). But above all, build things. The only way to jump start your trajectory in terms of experience is to build more things.
I think you’re both right. You need the technical proficiency as the means to the aforementioned end. My advice is focus on learning powerful patterns and when to use them. In terms of implementing, learn how to do so with clean and efficient code. The difference between juniors and mid level at my company in terms of the optics of their code in completely arbitrary examples: - they know when and why to use let vs const - they recognize an inefficient iteration pattern and are more likely to use reduce and map functions - they don’t assign unnecessary variables or control flow (nested if statements) - they write smaller, simpler functions that are composeable - they pay attention to having consistent return types from functions Let me know if you would like more examples
I didn't see you mention testing anywhere. We wouldn't consider anyone mid level until they could at least competently unit test (preferably TDD).
goto I guess...but why ?
Do you know some basic computer science? Can you tell me why Array.find is slower than Object.[]? Do you know what big O is? I'm not talking super advanced CS here. Just enough to understand runtime complexity and basic performance. Second, do you understand code quality? If you haven't already, pick up a copy of Code Complete 2. Or really any of the books on [this list](https://blog.codinghorror.com/recommended-reading-for-developers/). Do you understand why hiding information is important? How about the importance of a good interface? Third, can you read code effectively? Writing code is great and all, but can you dive into the source of a library and understand it? If you have an issue with an NPM package, do you just post on StackOverflow/open a GitHub issue, or can you read the source and fix the issue yourself? Fourth, how are your communication skills? Can you make a well reasoned argument for or against a technology? Can you communicate why a project is taking longer than predicted? Of course there's a lot of technical stuff too. Do you understand JavaScript's scoping rules? Do you know how `this` works? Can you explain the difference between `()=&gt;{}` and `function () {}`? How do you use a union/sum type in TypeScript? What is structural duck typing? But really, that's secondary. Specific knowledge can be learned when necessary. Generalized fundamentals are always necessary.
[removed]
As others have said, being mid-weight is less about technical knowledge that your ability to start directing your own work and anticipate problems in advance. Both are earned via on-the-job experience and cannot be leapfrogged with personal study. That said, what you can do is make sure you that you learn from experience *effectively*. That involves learning several habits of thinking, which I would (shooting from the hip) boil down to the following: 1. **Defensive thinking**. Get into the habit of asking yourself - what could go wrong? How could this component be misused? When it fails, how could I make sure the user's experience isn't degraded too badly? What can I do to ensure another programmer (or myself) can diagnose the issue quickly and confidently? You can build this skill be debugging / supporting heavily-used projects in production. 2. **Clarity of expression**. How could someone reading this \[code / repository / documentation\] misinterpret it? What tools are available to me to help me express my intent? Collaborate with others to discover where and why they cannot understand your work. If someone shows signs of misinterpreting something - take a hold of that thread, unravel it, and think creatively about what you could do in future to prevent that. Take opportunities to speak and write. 3. **Problem solving**. Start trying to think of your success in terms of business results rather than adherence to the narrow specification of a user story. Question requirements and don't be afraid to propose alternative solutions. Build tools for your team and make sure you're in contact with users. If your company has a UX &amp; design team, ask to sit in on user research interviews (UX people have tons of paperwork to complete, so will always accept another pair of hands). Keep thinking about customers, ask people about how the business really works, talk to 'businesspeople' about what's happening and how your work could fit into it. 4. **Comprehend the technology**. Always try and have a thorough grasp of how everything works, at least one layer below the layer you're using. Learn how to identify good sources of information, and also how to identify bogus, timewasting sources. &amp;#x200B; &amp;#x200B;
Lerna reverted the change: [https://github.com/lerna/lerna/pull/1633](https://github.com/lerna/lerna/pull/1633) and removed him from direct contributions on the codebase. Hopefully others will follow (GCP). He is also claiming ownership of Babel [https://github.com/palantir/tslint/issues/4132](https://github.com/palantir/tslint/issues/4132) Unfortunately, React-Loadable is his, so I don't see this happening. The up side is, as far as I can tell, it's still an MIT license which make his exceptions invalid. I'm not a lawyer, however. I do agree he should probably be removed from TC39, personal views should not interfere with millions of applications. His opinions are second hand knowledge at best and just because some companies work without another, doesn't mean that company is evil.
Check out https://github.com/GalvanizeOpenSource/developer-standards/blob/master/standards_for_developers.md How do you grade yourself at each level for a given standard?
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [GalvanizeOpenSource/developer-standards/.../**standards_for_developers.md** (master → 521a78d)](https://github.com/GalvanizeOpenSource/developer-standards/blob/521a78d6aaafa4d221fac10289462a3f87b5fbf2/standards_for_developers.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e5on8pm.)
Hi /u/rehfore, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (/r/javascript is not a job board). Thanks for your understanding.
*Stopping* learning about specific languages, frameworks and libraries helped me the most when I started out. Instead I focussed on general principles of programming through [HtDP](https://htdp.org/) and [SICP](https://github.com/sarabander/sicp) ([video lectures](https://www.youtube.com/playlist?list=PLB63C06FAF154F047)). You will use high-level tools (React, Redux, etc.) much more effectively and with greater confidence once you understand what's going on under the hood. Strive to become a *developer* instead of a front-end / JavaScript / React / &lt;insert here&gt;-developer. Also, being able to effectively deal with people is more important than talking to computers if you want to earn money.
Reading *blogs* wont very much, I agree with that.
Dude I want Samuel L Jackson to read this to me every morning before work.
Well you could use the alert statement I noticed when you have the system do an alert everything in the background seems to lock up until you clear the alert popup away. alert example alert('testing testing 123'); happy coding friend :)
Chrome blocks autoplay audio now. The user has to interact with the page in some way (i.e. click something). Open up the chrome web developer tools to see the error message: &gt; Uncaught (in promise) DOMException: play() failed because the user didn't interact with the document first. For more information: https://developers.google.com/web/updates/2017/09/autoplay-policy-changes 
No? Haha. Nothing?
I've been looking for something like this for a while! Thanks for sharing OP :D
You'll also want look into putting your animation changes into requestAnimationFrame – which will make sure that your changes are in sync with when the browser actually repaints the screen, which is not something you can predict well (esp. considering browser differences). Right now, you are depending on your callbacks firing regularly, and once per repaint, but you can't trust the callback queue for that. This recent talk from Jake Archibald does a really good job explaining this: https://youtu.be/cCOL7MC4Pl0 Also, note /u/jones1618 below's observation on the effect of your `mouseleave` event.
Second this. It will also think about problems differently and write safer code, less prone to errors.
Is he on the committee? This guy is constantly submitting issues harrassing maintainers on GitHub
FWIW, I became a senior engineer not by following a strategy to learn X or Y, but by simply caring deeply about the end product and company strategy, and therefore going where the problems were like a fire-fighter to fire. When I recognized a problem, I'd raise it and tackle it, be it either via personal coding or more often, interpersonal coordination between developers. Management quickly realized I was one of the few people looking out for the big picture and getting sh\*t done, so I got progressively promoted and handled more responsibility. Every specific skill I learned (be it a particular technology, a particular architecture like N-tier frontend/backends, or soft skills like how to listen to others and communicate requirements among a team of engs) was learned because I needed to learn as a prerequisite to solving the problems I saw my team/company heading into that I felt was within striking distance of me being able to solve (some thing you can't solve, don't go too far.) The result of this was an extreme learning curve and a fast rise in seniority. The downside was that I was stressing myself out, taking on more responsibility than my individual job required, and was at risk for burning out. Which I did do, a couple times.
Nothing to see here, this dude is getting banned from more and more repositories every day.
That list wasn't as bad as I expected. Disabling third-party cookies causes half of those issues, so I'm already fairly well versed in browsing with limitations.
Pretty sure he's not on the committee tho.
He is on this list. https://github.com/orgs/tc39/people
http://exploringjs.com/ es6 es7 es2018
You can use JavaScript tap events to provide same functionality on mobile phones :) Other than that, great demo. Much better than I thought it was going to be when I read the title. Next thought... would be fun to make this with random-generated terrain.
for an administrative tool ... why not.
If you are already a programmer(understand basic fundamentals or syntax) then it is possible to learn. But if you are a new programmer then it is hard to learn it within one week or even month. Hope you understand.
You haven't seen anything yet, darling. This is still foreplay 😂
I'd suggest getting Prettier.
i am not in a browser environement &amp;#x200B;
They often seem pretty talented folks though. They just all seem troubled and insular.
The article needs 100 more instances of the phrase “mother fuckin” for him to be attracted to the role, though.
I'll note that it doesn't seem to work if you manually drag the scroll bar. Other than that, this is pretty much how list views on Android and (I'm pretty sure) iOS work. It just keeps recycling the same *N* rows where *N* is the number of rows it takes to fill the screen.
It's not really *React* virtual rendering - it's just *virtual rendering*. This technique has been used for far more than a decade in other frameworks and plain JS/DOM.
Looks good, I love the clean look of the code. But do you use Postgres environment variables to connect if no config is provided?
I'd do it with classes. Get the class of td and tr and add "dark" to those, remove it from the others.
This looks like dependency inversion. Don't give it another name to confuse people.
What's wrong with 4 spaces? 2 can be way too cramped.
You could also phrase your question about 10000x better. It’s like someone asking “can I learn math in 24 hours?”
Well it's a small demo and OP decided not to bother. You guys need to get a life.
Very cool! 
Seems like it would be easier and probably more efficient to just structure the html so this could be handled purely with css :hover. 
Interested to know!
Surely it's up to him how many tabs or spaces he uses... what's wrong with you
this guy is obviously a troll
&gt; Is this just killing two birds with one stone? (Setting x equal to y and then comparing to z?) Looks that way. When `y&gt;z` finally evaluates to false, `x==y`. &gt; I'm trying to understand someone's mistake? It's possible. I can't think of much use for this construct vs just assigning x=y after the while loop.
Thanks. I just rewrote it with that assumption and it worked. 
Shit does that mean I'm mid level now?
Yes, I do. I use Postgres environment variables to connect. Honestly, I don't have any idea about no config situation.
How about techies that would be led by hand for a short while then let loose after? We also have an admittedly small team. Me and my other co-worker who were interns at first, now I think we are doing fine and can execute pretty much anything front-end related.
integration acceptance and invariance
That's so cool, but If you can make a small change that will make it much better is to bring the sun and the cloud from top and keep the other stuff coming from the bottom as you did, sounds so cool 👏
I don't have any experience or much knowledge about assembly so I can't attest for that, but I have written a tokenizer for a compiler/interpreter project twice. The second time around I was about to do it correctly, so I'd say taking small steps with something like this is a must, especially with the assembly. Also, the jslinux program seems incredible!
Creating a x86 interpreter in JS is actually quite simple (if you don't care about performance and/or completeness). If you want to emulate a whole OS that's another story :-) &amp;#x200B; You have to know a little bit about the (von Neumann) architecture of the CPU (registers, instruction pointer, memory, stack), but you don't have to go deep to create something like this. The whole thing can be represented with three arrays (memory, stack and registers). You then go over the instructions and execute them one by one, changing the contents of the three arrays. The assembly instructions are very simple, they usually just copy a few bytes from place A to place B or do a simple arithmetic operation (addition, subtraction, multiply etc.). Each instruction can be translated to max. 1-5 lines of JS (if you ignore all the nitty-gritty details of vector and string instructions etc.). For example if you encounter the instruction `MOV EAX, 5` it can be translated into the following JS code: `registers['EAX'] = 5;` There are some subtleties if you want to emulate the CPU very precisely, but otherwise it's just a matter of updating the arrays by executing simple operations on them. &amp;#x200B; Probably the hardest thing to do (if you never wrote a compiler/interpreter before) is parsing the source code. Luckily assembly has very little structure and with a bit of effort it could be parsed line-by-line by simple regular expressions. I wanted a little more robustness, so I'm using the PEG.js parser generator ([https://pegjs.org/](https://pegjs.org/)), which generates the parsing code for you if you specify the grammer (rules for how the input looks like). &amp;#x200B; If you are interested, I can specify the details of the implementation, basic CPU architecture or anything else concerning this project in chat or a blog post :) To answer your question, I have been programming for 7 years, but I think that you should be able to write a simple x86 interpreter after 6 months of learning JavaScript or even less. Provided that you understand the basic of the CPU architecture, which may be the harder thing to learn. More broadly, if you want to improve you have to be programming a lot, and tackle problems that you don't know yet how to solve (repeatedly writing the same/similar piece of software again and again won't get you very far).
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
can be done with css only. use a trick: [https://css-tricks.com/simple-css-row-column-highlighting/](https://css-tricks.com/simple-css-row-column-highlighting/)
Last time I tried using native Dates, I found out it still had a lot of cross browser compatibility issues with evergreen browsers like FF and Chrome. I can't remember exactly what the issues were, but it blew my mind that it still existed. Having dates fuck up is a big deal. Moment on the other hand, is one of the cleanest and most complete date libraries I've ever used. If you're doing anything serious with dates, use Moment. 
Yeah I’ve been using date-fns instead of moment for a couple of years now. Moment is great, but is just massive and often overkill - unless you’re working with timezones. Timezones are hard.
Oh, nice I'm glad you can implement everything without a lib... import parse from "date-fns/parse"; Lol, get out of here you fool /s
FWIW my usual pattern is: /app - all the server-side files and directories (app.js would be at the root of this directory, could even name it index.js and shorten the path in your package.json) /source - all the uncompiled source files /public - a mixture of static files (index.html, favicon, etc...) and compiled files with the .gitignore to match
[https://github.com/you-dont-need/You-Dont-Need-Momentjs](https://github.com/you-dont-need/You-Dont-Need-Momentjs) List of date-fns or native functions which you can use to replace moment.js
I would agree but the code in the article has inconsistent indentation and that is annoying.
Now you need to pair it with a C compiler! Btw, I always wanted to create an online game where users program bots in C and see the memory layout of their execution. How easy would be to integrate your code with a totally different interface?
The timezones component of Moment is a separate bundle again - so it’s even bigger! The philosophies are different between date-fns and moment. I haven’t bothered checking their histories, but I suspect that moment is much older and was written before tree-shaking was a thing and concepts like immutability were modus operandi.
Fair enough, cool.
I'll pass.
Luxon, bruh.
Maybe I missed something, but the title doesn’t imply that you can do anything without a library. It implies you don’t need moment. I replaced moment with date-fns a long time ago. This is nice cheat sheet. 
Last time I tried doing that, I found out it was one of those things that still are not consistent across evergreen browsers.
&gt; moment.js doesn't support treeshaking, isn't modulised and mutates objects. The project is a great reference for removing it. Some alternatives might use &gt; date-fns &gt; but the function you import is minimal. I'm pasting my previous comment here. Also note that `date-fns` is not "another" lib, it's a module.
A single function with a small footprint, not a library. Date-fns is written to be extremely modular. You can import tiny pieces without a monolithic dependencies. MomentJS is huge and was/is the go-to date library for a lot of devs and is often overkill. Is it worth reinventing the wheel every time you parse a date?
The title certainly does imply that. That said, if you make it to the third paragraph the author eventually explains they just mean you can save 50kb by using `date-fns` instead.
Is it similar to this? https://github.com/copy/v86 Someone managed to get Win98 to emulate through it! https://copy.sh/v86/?profile=windows98 
&gt; Also note that date-fns is not "another" lib, it's a module. What..? What distinction are you making between a 'lib' and 'module'? Also, from the `date-fns` GitHub description: &gt; ⏳ Modern JavaScript date utility **library** ⌛️ https://date-fns.org 
"you don't need that library use another one" is as hypocritical as it can get.
&gt; I'm pasting my previous comment here. Also note that date-fns is not "another" lib, it's a module. distinction completely irrelevant. A library is figurative. A module is a definition used by node.js nomenclature. Both are modules, because that's what you import in a node.js script, a freaking module.
You misunderstand how FPI works. You can still load resources from third-parties like CDNs. However, *Everything* loaded while visiting Website.A (even if it’s loaded from Website.B) is stored in Website.A’s scope. So if Website.C tries to load the same resource from Website.B; it can’t access cookies, HTTP cache, or DNS cache entries for Website.B as set when visiting Website.A. Think of it as loading every domain in a separate browser profile. FPI removes the link between origins/domains. Technically, Firefox double-keys every resource it stores by origin-domain;domain. (E.g. Website.A;Website.B – so Website.C only has access to resources loaded as Website.C;Website.B.)
You missed return before `result.json()`
Oh! It wasn't even that I forgot, I'm just plain dumb. That makes sense. Thank you! XD. I'll leave this up for others.
Take a look at https://github.com/slanatech/vue-monorepo-boilerplate 
No mention of timezones???
Huh, I thought I ran into a race condition earlier like this but I'm sure that was some other issue now. I'll continue with this. Thank you!
When there's such a clear separation between server/API and client (like you're describing here), I like separating the two into separate `src` directories and orchestrating both for development with `docker-compose`, sharing dependencies in the top-level directory. Something like: ``` / |- node_modules // shared between api and web |- src |- api // express/api stuff, including database configuration |- web // client-side stuff, including templates like index.html |- spec // because you're writing tests, right? ``` Then you can spin up a database, api, client-side service, and test service all at once if you describe each as a docker-based service. You could also do a similar thing with a little script that kicks off each service manually without the learning overhead of Docker... the key is to start thinking of each part of your application as a separate service now, before it gets to be too difficult to untangle them later.
reaching a mid or senior position is not so much about "skills" as about mindset - it happens when you take responsibility for the projects, the clients, and the team, and start making meaningful choices or at least arguing them to your superiors, instead of just working off a tasklist and doing what you're told. 
A {} needs a key and a value right now you just a have a list inside he outer most {} 
Objects are key-value pairs. Try something like (sorry, phone formatting) { arr: [ {}, {}] }
at first i was with you, but the more i thought about it, the more i'm wondering what you're on about. instead of importing the entire moment library, you can import a specific module from `date-fn` which allows you to code split your bundle.
&gt;Objects are key-value pairs. Try something like (sorry, phone formatting) thank you very much, that was dumb question
thanks
It's really not. Clickbait yes. He has a very valid point - moment.js is *really* large. I've replaced it with date-fns wherever I normally use moment, and it's much more light weight, and handles timezone issues better (imo)
Of course he/she doesn't or he/she actually would need moment.js this is the elephant in the room.
Giant objects which mutate rather than having them be immutable. Also mucks with the Date class I believe.
Well, the thing is moment is huge so there are good reasons for replacing it.
&gt; Well, the thing is moment is huge so there are good reasons for replacing it. The title is "You don't really need moment.js" mimicking "You don't really need jQuery". If you're just going to tell people to use another lib then use another title as well.
By the way, everyone here seems to be using date-fns but I replaced moment with dayjs (https://github.com/iamkun/dayjs) as it is super easy to do so. Is date-fns better in any particular regard?
`id` is a variable binding 10. Function `QUERY` is [tagged template](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_templates). That function interpret query string and return result from DB. As a result, variable `posts` bind posts data. I hope it will be answer for you. :)
This is very rigid outview that you have. Having options with regards to date management that are more modern is a good thing. And there is nothing wrong with paying homage to a good title. Nowhere in the text does it say that you don't need any other library and the whole point about is that the moment is huge and there is no good reason to use it for the most part.
Curious: what do you consider hacky about `transitionend`?
I was experimenting with date libraries for a countdown that used a lot of date time math and used moment, date-fns, and luxon. I don't quite remember my specific gripes with date-fns, but I noticed that it didn't provide much beyond the native Date libraries. date-fns seemed to act as immutable, functional, wrappers around the native Date API and lacking in convenience functions that really made me look for a date library in the first place. Though, it *is* nice being able to use native Date objects, which allows for easy interop with other modules if you're not doing anything more complicated than formatting/parsing dates. I ended up liking luxon a lot more than moment or date-fns, though -- it was immutable and had the ease of use that I liked about moment.
Because we're web scale
Take a look [here](https://github.com/unimonkiez/mono-js-boilerplate), simple and versatile. 
It's not tied to any one transition so it's a pain to properly use. There are a few libs that cleanly handle this for you so you can not have to juggle transitions and just write promises that only get triggered on a specific transition finishing/canceling
Yeah, but to be fair I fell for the same thing as OP because I expected some kind of trick to format the date without a library. A more fair title would be "A better alternative to momentJs" not "you don't need momentjs"
Because its &gt; 0kb. Why did you get into this field if you're not concerned with efficiency?
&gt; This is very rigid outview that you have no, I just don't like bullshitter.
So can I use this to convert a date from one arbitrary, named time zone (with or without DST) to any other arbitrary time zone? I'm not seeing it in the docs. That is pretty much the only thing I've ever "needed" moment.js for, and presumably one of the main reasons why it is so bulky.
Yep, me too. Then I go and look at what's most impactful for performance, and fix that.
The thing is that your assumption of not needing a library being a premise of this article is without solid basis. Basically having a substitute for a library means that you do not need that library. And given that the title is qualified with may making it even weaker assertion - makes it a pretty honest title.
&gt; The thing is that your assumption of not needing a library being a premise of this article is without solid basis. Basically having a substitute for a library means that you do not need that library. And given that the title is qualified with may making it even weaker assertion - makes it a pretty honest title. The thing is your assumption of not needing a library being a premise for needing another one is without a solid basis.
Why? I might not need moment.js - because I can use xyz.js. Using xyz.js enables me to get rid of moment.js - making the previous statement true. You seem to be confusing the sentence you don't need moment.js with you don't need a library.
Agreed, especially since you could use a CDN at the edge. Externalize the library to a cdn and there’s a good chance the end user browser will already have it cached.
In principle yes, but that project is much more feature complete, my app is a toy implementation that is complex just enough to write some basic assembly.
&gt; Why? I might not need moment.js - because I can use xyz.js. Using xyz.js enables me to get rid of moment.js - making the previous statement true. &gt; &gt; Cool story bro, I couldn't give 2 fucks about what you need. Changes nothing to my point.
That shouldn't be hard at all :-) My CPU ([https://github.com/Kobzol/davis/blob/master/src/app/emulation/cpu.ts](https://github.com/Kobzol/davis/blob/master/src/app/emulation/cpu.ts)) receives the program in text form and an array of memory. If you give it a working simple assembly program and write some new syscalls that will control the bots, it should work. Translating a simple subset of C to assembly should be a weekend project, you can get inspiration here: [https://www.youtube.com/watch?v=N9B2KeAWXgE](https://www.youtube.com/watch?v=N9B2KeAWXgE).
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [Kobzol/davis/.../**cpu.ts** (master → 2813b91)](https://github.com/Kobzol/davis/blob/2813b91dd362466af2421dbd830b4367a6c2f406/src/app/emulation/cpu.ts) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e5q89if.)
But is MongoDB as well? /s
In a async method, you don’t need to use the nested callbacks. If it is a promise (all async methods returns a promise), you can just await, and catch the error with a regular try/catch. Your fetch calls could be rewritten as async function getWeather () { const response = await fetch(safeURL); const body = await response.json(); console.log(‘fetched weather’); return body; }; async function getTemp (unit) { const weather = await getWeather(); console.log(‘got the weather’); }; module.exports = { getWeather, getTemp };
TL;DR The article explains when and why we need proxy, gives an overview of how a proxy server works with an example (node-http-proxy) and then discusses how a create-react-app based application allows proxy usage with some common use cases
[Laughs in enterprise applications]
That's before you add locale support.
&gt; The title definitely implies you don't need a library. No it does not.
Has anyone put this to the test or is it something that just gets repeated because it sounds good? 
There are no dumb questions :)
&gt;No it does not. Yes it does. It's a blatant copy of YouDontNeedjQuery.com, which encourages native API. 
It encourages an alternative, which happens to be a non-library solution.
Ah cool - sorry if my comment wasn't helpful. It's only because i saw the other recently and it reminded me of it! It's not something I understand particularly well.
Try aliyun.com
Looks good, I feel like i could use an example of usage combining data sources so that i can envision creating a project using this. Either for offline use combining indexDb and a rest API or realtime socket and rest api. I feel like this fixes a tons of problems but still need to dig in more to make sure its a good solution to theses and is worth the abstraction. 
Timezones without moment is like running onto a busy motorway. Well maybe not exactly, but it's a car crash waiting to happen unless you have a lot of time on your hands.
It's how browser caching works? If the user has already visited a site w/the same library, the browser won't download it again (assuming that site also used the same CDN).
I'm talking about http://youmightnotneedjquery.com/. 
have they added utc support yet?
Oh I gotcha. I was confused because your use of "It" is ambiguous.
You might consider using the singular _they_ in place of he/she. Reads a bit better, easier to type. :)
I think an article needs to be a bit more in-depth to merit a link, soz! That was just 4 paragraphs.
&gt; I'm not convinced front-end is really its own discipline (despite being a senior FE Dev lol) you don't think UX/UI is its own discipline? because you can't rely do FE without knowing at least some GUI design basics.
Efficiency can be measure several ways...
Moment is pretty big so if you are worried about bundle size date fns is a great option 
date-fns is not object oriented and it's functions are immutable.
Yep, that is exactly what it implies. Good job. You're getting it! But I think you're missing the point. In that sentence, the person is not trading their pickup for a Prius, as is being suggested here.
I specifically use Momentjs for the timezones tools. everything else can be done using vanilla.
I mean, there's a reason CDNs with high cache timeouts exist
&gt; I'm not going to get into a English dispute Good call, since it doesn't seem like your strong point. Most of your hang up is because you are confusing a "you don't really need" title with someone elses "youmightnotneed" website. Re-using the words "you" and "need" is tripping you up?
just happy accidents c:
Of course that's how browser caching works. But, there are like `n` minor versions of all these libs, and `m` CDNs that they live on. What are the odds that some user has the version of the lib that i'm using on my CDN of choice before they visit my site for the first time? Seems like a reasonable question. Plus, a lot of sites bundle all of their external vendor code into one bundle. 
Well of course the conditions have to be met in order for the advantages to be there but if you're using a popular version of a library then there is a good chance it will already have been downloaded to the user's cache. 
Great post. Definitely checking out some of the presentations.
We needed timezones, but Moment.js was literally too slow. So we used [js-joda](https://js-joda.github.io/js-joda/), since our backend was Java anyway.
You posted this like 10 days ago. https://www.reddit.com/r/javascript/comments/9bty55/javascript_idiosyncrasies_with_examples/
&gt; Is it worth reinventing the wheel every time you parse a date? No, which is why you should use moment?
The code can be found at the [Github Repo](https://github.com/sciecode/sciecode.github.io) and you can check the current [Live Demo](https://sciecode.github.io/). There aren't many code comments, but the modules are decently organized. For those interested in the technology used: FBO is a way of rendering objects on a scene, based on a initial render pass projected onto a texture. You can learn more about it on this amazing [Article](http://barradeau.com/blog/?p=621).
thanks man, article was interesting
&gt;Because efficiency isn't as important as developers make it out to be. That it exactly the type of mind which helped such a cancer as Electron to be born.
Ahem! Moment actually offers `.clone()`, so you get immutability that way
How is using a library reinventing a wheel? 
I don't see the connection between being a mod for a very large subreddit and knowledge of English. 
And electron is absolutely wonderful for small teams/companies looking for a cross-platform desktop presence. When the choice is between an Electron app or no app, I'll take Electron all day. That being said I find it unreasonable that larger companies (cough, Slack) continue to develop on Electron when the situation warrants a more performant base.
https://cdnjs.com/libraries/moment.js/ How to externalize libraries with webpack https://webpack.js.org/configuration/externals/
The problem is there is no good replacements for what moment does. If you want to use timezone, for example, you need a LOT of raw data that cannot just be replaced.
 parse("2012 mars", "yyyy MMMM", new Date(), { locale: fr }); Is that part of 2.0 alpha releases? Because the docs for 1.29 doesn't say anything about that.
Agreed, thing is though that alternatives to moment (for those simple enough needs) are not that well advertised IMO - I got myself into moment when I don't really most of its functionality to justify the size, so I think rising awareness about the alternatives is not a bad thing.
Well, I definitely read it that way (i.e., that you don't need a library).
/me waits for GitLab support
/me waits for BitBucket support
Moment is the car, Date-Fns is the bike :)
This. Moment dates back to 2012, date-fns back to 2015. Last I heard MomentJS wanted things like immutability or support for tree-shaking optimizations but lacked both developer time from core contributors to undergo that large of a refactor and a concrete migration plan for their existing users and applications.
Exactly. Muppets telling muppets to use sub-par libraries when what they should be using is their goddamn brains to learn tree-shaking.
Oh yeah good luck repeat-solving problems already solved by other devs, you fucking muppet.
Yes this do make sense. If you're using it umd-style and you don't feel like trusting any third-party cdn's, you can always set up your own with Azure / GCP / AWS all within less than an hour - and with very minimal overhead costs.
Sorry If i worded the question poorly. 
That is significant for an older phone to download and parse, considering there are better and more efficient alternatives 
And if you read the article, you would've read that because of the OOP design of Moment.js, it does not support tree shaking.
I have a question regarding learning whats under the hood of react. How did you go about that? Did you just look at the source code of it and went from there or did you have any good resources to look at? 
your problem might be the , in your If clauses. Try &amp;&amp; or ||
I'm pretty sure any phone made in the last 10 years will handle it just fine.
I was trying to get a better handle on why this is the case, perhaps it's obvious but I can't find anything specifically about tree-shaking and OOP API's. Is it just the encapsulation that is used?
Thanks, was looking for this. The overhead to use webpack is way more. Pick your battles, optimize for code quality because that's what will bite you in the ass in two years.
Of course you don't need a library. Right up to the point that you do. The Date object is horrific. I don't want a library to wrap it no matter how slim it is, I want the abomination replaced with something that properly distinguishes between local date/times and universal date/times. Something that can handle timezones. Something immutable. Something without a bloody zero-based month indexing. Roll on [temporal](https://github.com/tc39/proposal-temporal).
You can have a simple Date object like `{ year, month, day }`. And then, if you want to compare of operate that object, you have to options. Create a standalone function that takes that date object as argument, or embed that function into the object itself (having `compareFunc = function()` and use `compareFunc(date, otherDate)`, versus having `date.compareFunc(otherDate)`). So when using moment you have to import all the code, because every moment object needs all those methods and everything is coupled. Using the alternative library, you only import the functions you need to use. That's what I understand with all of this, not really sure though.
Well said!
does not install
I think you are forgetting how much has changed in 10 years! 
That was really helpful, however, even after i changed the if clause the function does not seem to run or do anything. Am i doing the comparisons incorrectly ? 
I'm sorry... I'm so, so, sorry. I hope you aren't still using VC6 like my last team
Could YouTube create your project on https://jsfiddle.com and Share a Link?
[You can find that here.](https://www.youtube.com/watch?v=dQw4w9WgXcQ)
[https://jsfiddle.net/Nazarook/nqdj49kr/2/#&amp;togetherjs=koNHAr2xUJ](https://jsfiddle.net/Nazarook/nqdj49kr/2/#&amp;togetherjs=koNHAr2xUJ) &amp;#x200B; lol The link-Help-Bot got me hahaha. 
Awful bootstrap crap
Bad Bot Lying bots are not helpful.
I notice a lot of people using vs code to do their git stuff and then, when they’re in trouble, don’t know how to ‘git’ properly. Anyone else shares this experience?
&gt; I feel like this fixes a tons of problems but still need to dig in more to make sure its a good solution to theses and is worth the abstraction. I'm using it here: https://github.com/sillsdev/appbuilder-portal/ (with react) but the app doesn't (yet) have offline support (wanted to keep data flow simple while we implement the features of the app). [Here is the main config for the orbit datastore](https://github.com/sillsdev/appbuilder-portal/blob/master/source/SIL.AppBuilder.Portal.Frontend/src/data/store.ts)
Your calling comparison() only once and without parameters
The point isn't whether or not the phones can handle it, the point is how long it takes to download and parse the javascript. Read up on benchmarking for that. 
Why is this in r/javascript?
Read up on why you shouldn't give a shit about the original 2007 iPhone in the year of our lord almost 2019.
VSCode is written in JS
\&gt; ... they should be using is their goddamn brains to learn tree-shaking with module bundlers. The README says that Moment can't be tree shook. Do you have experience to the contrary? \&gt; Highly based on OOP API, which makes it won't work with tree-shaking, thus leading to a huge bundle size and performance issue. &amp;#x200B;
Look up benchmarking on recent phones for javascript, even within the last several years mid-end phones take a long time parsing. I'm done arguing facts. 
Does the response given above represent a single element on the response array ? const results = e.results.map((x) =&gt; x); Why are we doing the above ? Its essentially copying the array e.results to results, which could be easily accomplished by direct assignment. &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B;
I had this issue as well, went away after I updated VS Code. 
Moment.js is dying since years and not even trying to rewrite a treeshakable version
It imports only a single function you fool
I don't know how people don't have at least a basic understanding of how to use the CLI. Plus how else are you going to use your [CLI GUI for git](https://github.com/jesseduffield/lazygit)? 
Yeah. I frequently give up on built in support features for git and go back to a terminal. 
Buy yourself a sense of humor you idiot.
It looks like this maybe? https://gijsroge.github.io/tilt.js/
/me waits for Amazon Prime support, so I can order groceries without tabbing out of VSCode.
I wish I could git like u
What kind of app are you building where moment is the bottleneck?
No- take a look at scopes in Javascript an how functions are called
And surely you’re the kind of programmer I wouldn’t want on my team. I have to read/write code and all day long so I’d like it to be nice and tidy. Hence why linting standards exist. If you’re going out of your way to make tutorials for other people, I’d expect you to produce something above and beyond. I was just giving a suggestion. That’s all. 
Because every dependency is just one among a long list of others? If you are unconcerned with 70kb imports 20 times over, you're at a careless 1.4mb. Small decisions matter when there's lot of them.
A schedule with a couple thousand items, where the time is used to compute position.
While it is interesting when popular projects just go inactive out of the blue the fact these are still so heavily used is more of a signal that developers need to update dependencies. Node isn't real old and we've already gotten to the point we're used to having outdated dependencies rather than trying to stay up to date when that means finding or creating an alternative. Obviously some things are harder to recreate than others, but there's always the option to fork and become the latest maintainer for projects in cases where the owner(s) won't give up the original repo. Not that it's simple to let people know -- there's still users trying to make due with older versions of some open source programs though there are actively maintained versions. Some things are also so specialized they require a specific base of knowledge that others may not have acquired as of yet. For example I'm into the Steam client &amp; it's configuration data and have discovered multiple tricks relating to it, along with noticing some quiet changes during recent updates, because I've spent so long with the data. All of my projects are public and AFAIK I've shared everything I know about the basics and what can be accomplished at one point or another, but nobody else seems to be doing anything similar as of yet.
I was using it but was forced to disable it most of the time because I need to use Jira and it's not compatible. However, I'm using [temporary-containers](https://github.com/stoically/temporary-containers) that creates a new container for each top level domain I browse in tabs, and it works great to compartiment stuff.
You can do a few things to get the bundle size down though, like removing language support. 
Pff, how about Alexa support to do the coding for me? "Alexa, fix this bug" -"I'm sorry Martinspire, I can't fix that trash"
You haven't argued any facts, all you said is "look up these things" which is the equivalent of handing someone a dirty cum sock after they ask you what time it is.
&gt; Are YOU tired of typing every git command directly into the terminal, but you're too stubborn to use Sourcetree because you'll never forgive Atlassian for making Jira? omg this person can read my mind 
I was curious about this too, so I thought about it... [According to Google](https://developers.google.com/web/fundamentals/performance/why-performance-matters/), 53% of mobile site visits were abandoned if a page took longer than 3 seconds to load. And, often, a 100ms improvement to page load time lead to a 1% increase in conversions. So, that could mean you're losing 10% of your potential users for every second or two your add to your load time. Keep in mind, 52% of *all* internet users are browsing on mobile devices these days... So, if someone's browsing your website on a bus or in a cafe and has 3g or 4g internet (which is often the case these days), your 70kb library is going to add 2-3 seconds to your website's load time, which can mean a lot of lost revenue for your business (or employer). What about edge caching the package on a CDN? Isn't the user likely to have already cached this package? The simple answer is **no**. I thought about this too because I was curious, and although I don't have exact statistics, I think relying on CDN cache hits for JS packages is a *super* bad idea in practice. * A library like jQuery is used by ~85% of the top 10k websites, sure, but those same sites use more than *57* different versions of jQuery. So, the version you're using probably isn't going to overlap with the version they're using (e.g. Wikipedia uses version jQuery v3.2.1, while old Reddit uses v2.1.1). * To add to this low overlap probability, of these top 10k website, a lot of them (e.g. Google, YouTube, Facebook, Amazon) don't use jQuery or Moment.js, so if your user is just a casual internet user (most of them are...), they're not even likely to have 1 or 2 of the 57 versions cached. * Also, to add to this, *even if* the user already has the exact same version cached that your site is using (which we've established isn't likely), there's a pretty high chance they didn't get it from the same CDN as the CDN you're using, in which case they'll have to download the library again... Now, of course, these statistics all get worse for a packages that aren't as popular as jQuery or Moment. **TLDR** * Load time is money. If your site loads in under 3 seconds, you get to keep your users and convert more of them to paying customers. * Most of your users are browsing on mobile devices with connections that can be spotty. Make sure you're thinking of them when building out your fancy new site. * Your 70kb JS package probably isn't already cached before the first time they load your website, which is **the most important time they load your website**, so it's a bad idea to rely on CDN caching. * Build your website with as little JS as possible, load it asynchronously, and don't rely on huge libraries like jQuery and Moment.js when you're using 5% of their functionality.
Electron is trash. Slack? That's what businesses do. Multiply profits. It doesn't mean it's good for their users. The day someone develops decent non-electron based text messenger like Slack is the day I quit using it. The only reason people use Slack is that there is nothing better to use. Literally the best IM of all the bad IMs we have.
The over-abundance of bootstrap boilerplate a few years ago doesn't make bootstrap a 'crap' framework nor does it make someone a bad dev for using it. At least they built something to achieve a task, what did you put out there lately, and more to the point, why do you feel that because you might find no benefit in the project, that you should be paid to test it?
Same. We seemingly always wait the longest us BitBucketers. 
&gt; Ahem! Moment actually offers .clone(), so you get immutability that way Not I can't. `.clone()` is expensive. I cannot use momentjs as pure functions to do functional programming
Tons of JavaScript devs use both github and vscode 
Fuck. Apparently it's more common than I thought.
Sorry, I wasn't clear. I meant writing a robust date parsing func from scratch would be reinventing the wheel. OP seems to be presenting a 3rd party imports or none dichotomy as if all 3rd party imports are equal.
I was under impression that OP, fooled by a clickbait title, was glad there was a "native" way for a second but article didn't deliver. But I get you point of view as well after your explanation. 
Hi /u/iamgigamesh, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/webautogui, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Hi /u/MaoStevemao, please refrain from personal attacks. Thanks.
https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/javascript-startup-optimization/ https://timkadlec.com/2014/09/js-parse-and-execution-time/ Good luck on your journey on learning these things so you actually know what you are talking about.
Not sure if just trolling/ joking but in my experience the js devs are more comfortable on the command line. JavaScript is only now beginning to have the kinds of modern tooling that other environments have had for decades, making good CLI skills essential for efficient debugging, finding, refactoring by symbol, etc. Essentially express mass text operations against source code that static strongly typed languages typically have IDE tools to handle.
Yeah, it pretty much lays there and doesn't reciprocate But no, I haven't seen any slowness yet. I just updated today though, so haven't spent too much time in it
&gt; Something without a bloody zero-based month indexing. Amen. Just... why? _Why?!_ &gt; Roll on temporal. Yes please. Annoyingly these things takes literally years to get fleshed out, make the spec, then be implemented... :(
Thank you for checking that out.
&gt; Let Users Know About Your Mobile Application Just don't shove it in their face every time they visit to force them to use it. Looking at you, Reddit 
&gt; if you are worried about bundle size And you should be.
The article is pretty heavily sarcastic..
json is faster and data manipulation is more easy without the need for parsing data,on the other hand xml is more suited for complicated schemas since you can define your own datatype and structure (structure is important advantage against json). 
Can you give an example?
getElementsByTagName returns elements as array. document.getElementByTagName("iframe"); shoul give you all iframes.
yeah of course maybe this helps [https://stackoverflow.com/questions/4862310/json-and-xml-comparison](https://stackoverflow.com/questions/4862310/json-and-xml-comparison) &amp;#x200B; &amp;#x200B;
Well, yeah.
I found that as soon as you extend JSON with schemas an namespaces, both used to great effect with these protocols, it turns into XML.I don't really think XML deserves the bad reputation it has in the JavaScript community.
What a ridiculous statement
How is that different from any other git GUI? They will migrate over to the terminal eventually. 
I don't have a bad idea of it. It's just most parsers present security problems when dealing with it and the parser most programs use was last updated in the 90s. It has a massive data overhead for the trade off of being human readable.
[JSONFeed](https://jsonfeed.org/) is already published and supported by many RSS readers and services. I don’t know if it’ll gain more share beyond the early enthusiasm, but maybe check it out.
ATOM was meant to replace RSS, but RSS is still around. Starting something new is cool, but it's very hard to get people to stop using something that still works. A simple conversion of ATOM to JSON wouldn't give enough value for it to be adopted.
I love this and I searched Google for it -- didn't come up. Thanks but I'm concerned as there are too many required valuables in it. Just an observation.
If there's no need for a new release that's a good thing. And even dead projects can still be useful. It would've been better if this article had limited itself to listing the projects with security flaws or major unpatched bugs.
So, I need to present new features not seen in RSS?
Basically, yes, you'd need to give people a good reason to switch. Typically, the new solution needs to be about 10x better than the old one it intends to replace, to overcome inertia.
Also (and I haven't hard to do this stuff in awhile, so I may be misremembering it) isn't there a `window.frames` which has references to all the frames?
Checked out as soon as I saw there was no mention. &amp;#x200B; Moment is only ever a problem really when you're importing all of those localisation files anyway...
`querySelector`, `querySelectorAll`, or `getElementsByTagName` to get the tags, then spread the HTMLCollection into an array and map the `src` attribute to a new array. Viola, list of all iframe `src`s on the current page. ``` function getIFrameSrc () { const iframes = document.getElementsByTagName('iframe'); return [...iframes].map(({ src }) =&gt; src); } ```
Well it's easier on developers so if I wrote a reader, wouldn't the benefit to developers -- most of whom already hate XML parsing -- force their clients to adhere to using the reader and eventually other readers like it?
I'm running into issues of large periods of unresponsiveness, so either you're not crazy or we both are.
Brent Simmons was/is-now-again the owner/author of NetNewsWire. He’s worked at Newsgator and Userland software. Manton Reece currently operates Micro.blog. They are the primary authors of this spec and they *know* RSS. I don’t doubt that there may be valid critical responses to the 1.0 spec (or future specs for that matter). But if you want to go in another direction you may want to put yourself in dialogue with the spec and really evaluate what you want, why, and it’s benefit others to adopt it. The decisions made for JSONFeed were likely to support existing, past, and future syndication needs.
The funniest thing I've ever come across concerning the \`==\` operator is this: const thing = new Thing() if (thing == 1 &amp;&amp; thing == 2 &amp;&amp; thing == 3) { console.log(true) } else { console.log(false) } &amp;#x200B; Conventional wisdom would say that \`false\` would be logged to the console, right? &amp;#x200B; Actually, it's not really possible to know what the answer is since JavaScript doesn't have const correctness (made all the more confusing by the use of the \`const\` keyword above), but I don't think anyone would ever guess that an equality lookup would mutate the concerned object's state! &amp;#x200B; Here's an implementation of \`Thing\` that would lead to \`true\` being logged to the console: &amp;#x200B; class Thing { constructor () { this.value = 1 } valueOf () { return this.value++ } } 
Haha. I don't know if I should find that comforting or not... But seriously, I have 68 and 69 both installed now. I can switch between the two and recreate the problem. Even things like [s](https://sliter.io)lither.io are super choppy...
I was exagerating, its a common trope. But like most stereotypes there is some truth. I also would not say as you just did, that js devs are *more* comfortable on the command line. Lots of beginners start with js because you can get shit done (its my favorite language) and they do not initially need to be able to navigate and run bash scripts, ssh into boxes, use tmux, create batch jobs. Probably one of the first more complex things they use the terminal for besides navigation is actually git. Also all people with experience are proficient at the command line no matter what language they use, but, I think the backend and ops devs at my company would know more unix tips and tricks than the frontend devs. 
Excellent question. React happens to have a very sound concept: &gt;*UI as a function of state* This principle has proven itself to hold so well in practice that you don't have to worry all that much about the exact implementation of React. It's really a very simple idea executed brilliantly allowing you to design maintainable UI's. Most of the components I write are just pure functions without any state. Very simple, easy to test and highly maintainable. Learning about the DOM and its quirks and features is well worth your time. React is more or less a thin layer over the DOM. You will have no trouble writing maintainable and *simple* code once you have a fairly solid understanding of general (FP) program design principles, the concept of React and the DOM.