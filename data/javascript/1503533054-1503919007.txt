This is pretty close. Both Java and JavaScript do what's called 'Pass by Sharing'. They pass a reference by value, which sounds weird. Basically, the objects methods and values are available through the 'reference', but overwriting the reference (like swap) will only overwrite the local object, not the one it looks like it points to, because it's not a real reference, like in C/C++.
Look up 'Pass By Sharing', a subtle nuance that Java and JS both use... also known as passing a reference by value.
Don't know why this is being downvoted, damp &gt; dry for tests is a well tread path at this point.
You think implementing a type system doesn't create more code. Lol. Go to sleep. 
it *possibly* could if you're referring to gradual typing, otherwise that's not a coherent statement.
C++ options: 1. Pass by value - testFunc(int val) 2. Pass a pointer by value (I think this is most similar to your question) - testFunc(int *val) 3. Pass a reference - testFunc(int &amp;val)
Yep, well done. I think it looks reasonably straightforward to adapt to MySQL? 
It would be better to keep track of how many promises remain and reject if and when all promises have rejected, rather than specifying an arbitrary timeout.
The biggest problem I have with Promise.race() is that once a promise has resolved, there's still no way to cancel any remaining pending promises. But that's more an issue with the lack of native cancelable promises, rather than specifically with race. I often see race() used to implement naive timeouts, but people frequently forget to clean up other running code if and when a timeout occurs.
&gt; I don't owe you shit, dude. Blow me. &gt; there's a ton out there. Sounds like you don't have anything in the chamber. GOT IT.
If you have static typing it's going to add code to your base. Yes that doesn't imply that it's going to add files to your code base. You could cram all your code into one file like an idiot. Having procedures only means it could possibly add procedure calls right? Cuz everything can go in main right? SMH my statements are not coherent. You're exactly the kind of person I'm talking about. Which I'm sure is exactly why you're trolling cuz I'm sure you say pompous things like this on a regular basis. At least I don't have to work with you.
It appears to be just a programming language with sentence based syntax. So instead of something like a == b, you would write "a is like b." Nothing too interesting honestly. It's also intermingled with the Author's political opinions if you check out their website or some posts on the subreddit. Something about elitism and enslavement. E.g. "ALL THE SOCIAL PROBLEMS COME FROM THE HAND OF THE ELITES (even terrorism!!!!! DAMN, AWAKE FUCKING NOW FUCKING PLEASE!!!!). DO YOU SEE THE ENEMY, OR STILL BLIND?" 
The perhaps you're applying for the wrong positions? We do algorithms and data structures in our interviews because we need good software engineers. Being able to just code a web app is not sufficient for our problem space. We have a strong brand to protect and an international development team so performance, reliability and maintainability are the primary concerns. It's also not feasible to test a candidate's practicality in a short interview. Sure, I like to do a small data structure operation on the whiteboard but that's really something you have to find out after hiring. I'd personally look for positions for "web ui developer" or "web ui developer intern" as that's where I started! Also, do you have a portfolio I could look at? It can go a long way towards showing your practicality. Ultimately though, programming is math and you'll need to learn those skills if you want to advance a career in web development. If you want to stay just front-end, you could limit your data structure knowledge to: 1. Arrays. The primary data structure you will interact with the make a web app. Think getting results from a REST API or validating a user form. 2. Maps. Everything in javascript is, in essence, a hash map. These will become your best friend when trying to optimize the performance of your application. 3. Trees. This is the most complex but necessary. Your entire web page is represented by the DOM which is a tree of nodes. You'll need to know how to efficiently traverse and modify this tree to make the page interactive. It would be hard to imagine a day when I did not work with those data structures for front end web dev. I'd be happy to answer any questions you have. 
What was the reason to not use it, if everything worked and was faster - was it wanting to stay on latest version of React (waiting for those fiber gains), or other reasons? Curious as we're about to be kicking off our first project using React, so want to get a feel for some discussions around this sort of stuff now.
&gt;I do understand your pain. There are way too many evangelists in the JavaScript community who hype up technologies because they heard some sound bites and are too inexperienced to scrutinise these claims with further research. As a consequence, they adopt the view that such tech must be used everywhere or else one is doing it wrong. It's an industry where 'making it work' is often rewarded and it's very difficult to stop success from going right to your head. Every developer has a tough time dealing with this I think. You get something going. It succeeds. You feel like you're a god of CS and your method is what got you there. &gt;I see the same thing with coding bootcamps. While JavaScript requires the mastery of a lot of concepts, the entry barrier is very low compared to other languages. I'm not talking about the ecosystem or tooling, but writing rudimentary JS itself. This results in coding bootcamp classes that are led by people who graduated from the same ones 6 months prior; it's a case of the blind leading the blind and it results in a perpetuating cycle of boosted egos and evangelism. Yup. The PHP Swamp we used to call it. All those guys who realized that if they don't quit they can get shit going and all they need to know is a few loops, conditionals and HTML. Ruby on rails. It's the ONLY way to do it. I once attended a meet up where a guy gave "a history of the internet" that was basically static pages, PHP and ruby/rails. It was like, you forgot some things man. It's so difficult to discuss methods of building software in the JS space these days because of all of this. You really touch on something when you mention the experience factor. When you've 'really' worked on a ton of projects over long periods of time you start to see where the debt collects and builds. When people say x tool is the greatest and you see the chinks in it's armour that will be exposed in 5 years when it's obsolete and it's quirks that people think make it so great actually make it rigid and hard to integrate with the next generation of tools and you mention them they just have not seen enough software at end of life to even look for those issues. Take typescript since it's the one in question. They tried to get it incorporated into the standard. They failed. So to use it you need to transpile it. That's fine and dandy and it works but what about when a static typing system for JS DOES rear it's head and DOES get baked into browsers as a standard? Who's going to maintain the transpilers for what will become a useless project? Not being supported in Chrome is a huge, huge thing for typescript. If there's one thing I've learned is that your code is going to live, on and on and on, for years, decades even. If you're decent and it does work it's going to be around perhaps into your retirement as it changes to legacy. If typescript no longer can transpile to modern javascript in 5 years because it gets dropped and falls out of fashion what then? Whoever is working on your code is going to be locked in to old libraries they're frantically trying to code their way out of. That's really just one issue. Another is that a whole ton of people who work in this space hate typescript because (like me) they felt the freedom of JS after years of OO and it grew on them. Angular2 was freaking HOT when it was being discussed and I don't think it's a coincidence that their adoption of typescript has contributed to it's failed launch. People will rightfully point at the migration path issues but a lot of that comes from them dictating that everyone should start using typescript as well and just port their web apps to it. And I know people are going to say "you don't really need to use the types, it's a superset" but it doesn't change that this subverts angulars strength (huge benefits from adhering to their opinions) and ignores the fact that typescript is actually a hack to implement static typing in a dynamically typed language. (that's IMHO, but I don't know what else forcing static typing intoa dynamic language can be referred to as). Anyway, love your response. Long day of work and feeling ranty again. :) Cheers.
In addition to higher order functions, being able to explain pure functions and their benefits is one I've come across in every JS interview I've ever had.
The thing is, people have stopped reading documentation. The webpack documentation is _incredibly_ good but people expect to read a one line description about it, a couple of samples and then be able to master all the nuances of delivering a highly optimized SPA in 2017
The js file doesn’t seem to be loaded. 
if I do a simple console.log("hey") at the top of it, not inside a function...it shows the word "hey".
Can you show me screenshots of your files? :)
As a very experienced interviewer of front end developers, I'd say this is the best interview topic guide that's been posted here... And a lot have been posted. Good work, OP.
I'll preface this: my team likes to make lots of decisions that I don't agree with (I'm just out-numbered). The team was skeptical of the performance improvements and we're worried about the compatibility layer (even though I'd proven it to work fine). They were also concerned with straying away from (the mainline) React library, thinking a 3rd party could just disappear. Which is weird because I'm normally told to "just find a library" for just about everything... A few related answers in case they help: If I had to use React or a React-like library, I'd choose Preact. If you build targeting the library, you may not even need the compatibility layer which makes things smaller and therefore faster! If I had the option of moving from React to Preact, I would. The performance was solid and the bundle size shrank enough to notice. If I could choose any library, I'd choose Vue. I managed to convince one of the guys on my team it worth trying and we ended up building another application in it. The whole team likes (or at least tolerates) Vue now. EDIT: I forgot to mention that staying on React had nothing to do with v16. The team (other than me) had no idea it existed. I actually tried to transition the application to v16 for a few hours but the whole thing is so strangely designed and so large/bloated that I was just wasting time. EDIT 2: I'd also like to mention that the Vue application we built made it harder for them to architect things strangely (good thing). Instead, it was mostly straight forward. There are still questionable design choices, but Vue makes things more pleasant because the performance doesn't suffer because of it...
Does that not mean that you're essentially passing a pointer? Which is, at its core, passing by reference? The only difference between this and how C does it it, for example, is that you don't need to use `-&gt;`? I'm genuinely asking, I'm not the most familiar with JavaScript. 
How do I get better at verbalizing concepts for interviews? I could easily explain all of these through code snippets but if I had explain them without code I fear I would sound like a mumbling idiot. Is this just me being an anxious mess worrying about interviews or does everyone struggle with this at first?
bind, call, and apply are hacky. You don't them. **I promise.** Sending variable numbers of arguments does not optimize well. In fact, much of the time it won't compile at all. A better solution is to give your function a single argument, which expects to be an object literal. You can populate this variable numbers of items without harming performance. If you wanted to populate your object like an array, fine, you can do this with array notation. You can even populate it in a loop with numbers as keys (though they will be coerced to strings). Explaining this in the last job interview and why I will never use bind, call, or apply helped me to nail the interview. Out of 72 people actually interviewed during that blitz only 9 were selected and of those 9 I was the only senior.
It's linked in the sidebar: /r/node
here you go: http://imgur.com/a/S5Kh9
How old are these resources? For the most part you can just use `class` and skip all these old conversations about the right or best way to create an object.
Can anybody explain what happened ?
Thanks!
In that screenshot you're defining your function within an IIFE. As a result it only exists within that IIFE and not in the global scope.
&gt; a lot of front end developers aren't exactly the sharpest pencils in the box Well that's a fairly large generalization isn't it? My fee fees are hurt 
Anybody have experience using this tool with JavaScript? Does it work as well as advertised?
&gt; IIFE ehhhhh, so how do I access it?
The first place I saw it in is the You Dont Know JS series by Kyle Simpson. The specific book in the series is "this and objects". That led me to some things from Douglas Crockford, some of which are about a year old, some are about 2 years old. And on a note about `class`, the same people also speak out against the use of class. The argument against class (and `new` to an extent, but more so against class) is how misleading it is since JavaScript doesn't actually have classes or inheritance.
Try adding the .js files to web_accessible_resources. 
&gt; I am having a pretty difficult time understanding why new and apparently this are bad. Many languages are single paradigm and so you are locked into this madness. Java finally allowed a way out of the insane asylum with lambda expressions, which are essentially JavaScript arrow functions. They aren't necessary bad (this is highly subjective), but arrogant code snobs like me will think you incompetent if you cannot organize your code without `new` or `this`. Here is a quick list of why they aren't preferred by people who have been doing this for a little while: * It makes the code more verbose.... far more verbose. * They make code maintenance much harder. This is due in part to the increased verbosity, but largely due to a less clear flow control of the code. * OOP heavy code like this generally performs faster on the first run, but after that it will usually perform much slower in subsequent runs. This is because JavaScript compiles on the fly, so the first run has to compile the code and then run it. Additional runs generally have the compiled code cached. * Most of the time I have seen code written with a reliance on `new`/`this` is because the developer doesn't know how scope works in the language. And so the code eventually becomes an over-engineered pile of spaghetti bullshit. This is part of the reason I left the last job. I have never needed to write a constructor function in this language. Not once. I have been coding in this language fulltime for nearly a decade and I write a lot of open source software, of which some of it people actually use. I use `this` about as often as I use `eval` in my own code.
what's unfortunate is that while much of this is useful knowledge, memorizing it doesn't make you useful at all. knowing what `__proto__` is or contains reflects little on your skills as a software architect / engineer give me someone who understands architecture any day over someone who is capable of regurgitating javascript factoids. i'd rather they pick up the details of javascript and apply their knowledge of architecture than try to pick up architecture with their solid knowledge of what hoisting is. language means shit to a talented developer. it's just another tool. knowing the bigger picture is priceless and what constitutes a talented engineer. there is nothing *particularly* impressive about knowing all the mindless drivel that is the minutiae of javascript, in my personal opinion. we only *hope* that it correlates with experience, but in reality so many places drill kids on these facts they hardly mean anything anymore.
I got it working by using a CDN hosted version. I don't know if this a pro or a con. I will try what you're suggesting for sure. Then I need to figure out how to color the popover with my color choice and I'm friggin done baby.
Ok I got it working. I went through my scripts.js and removed the jquery ready, and named all of the files function x()..., Then in my main fail, I did this &lt;script&gt; (function($) { loadProviderDetailPage(); })(jQuery); &lt;/script&gt; and now it's working
It depends on the goal of the IIFE. If you're using it as a kind of namespace then you can return an object where one of the properties is your function (this is known as [the revealing module pattern](http://jargon.js.org/_glossary/REVEALING_MODULE_PATTERN.md)). If you want to be lazy because this is just for learning you can add window.someFunction = someFunction; That brings the function into the global scope.
In my observation, this point about `class` not being good because JavaScript classes aren't like classes in other languages has become less and less of a concern since the keyword was standardized in 2015. In my opinion it wasn't that useful of an argument anyway because for many practical purposes you can use them in very similar cases as you would in other languages for the rest, well, at some point you need to actually know the language you're using. I have a similar experience with `this`: the rules for how it behaves are not complex. Avoiding it use because it's the keyword behaves differently in C++ or Java is silly. Accept that you're not using these languages and things work out better. Edit: also note that this is not at odds with /u/achen2345's comment, which I also would agree with. JavaScript doesn't force you to use OOP and in many cases OOP is used where plain functions would be a simpler solution.
&gt; The first place I saw it in is the You Dont Know JS series by Kyle Simpson. Kyle Simpson (the author of YDKJS) is generally a smart guy, but when it comes to classes and inheritance, then [his reasoning starts to make less sense and a strong bias starts to show through](https://www.reddit.com/r/javascript/comments/5m6tkz/should_i_use_es6_classes_or_not_js_beginner/dc1dw3y/). &gt; The argument against class is how misleading it is since JavaScript doesn't actually have classes or inheritance. My usual rebuttal to those arguments are... First, there is no single correct implementation of classes and inheritance. Different languages implement the concepts in different ways. In Python and Ruby, for example, a class is itself an object (a building, not a blueprint), and inheritance is done by delegating down a chain of objects, from instance to class object to superclass object and so on. Just like in JavaScript. So if JavaScript's classes and inheritance are "fake", then so too are Python's and Ruby's classes and inheritance "fake". It turns out, real vs fake isn't a useful distinction. And second, if a JavaScript feature being implemented differently than in Java makes it "fake," then we also have to acknowledge that JavaScript's *arrays* are fake. As are JavaScript's objects. And functions. And even JavaScript's local variables are implemented differently than in Java. So to be against JavaScript's classes and inheritance because they're implemented differently than in Java takes an awful lot of cherry picking.
There are certainly times where you _can_ use `this`, and every JS developer _should_ know if for no other reason than understanding and troubleshooting code they might encounter that they didn't write themselves... But I think it's entirely reasonable for a moderately experienced front-end dev to have never been in a situation where they've *had* to use `this`. And, further, given two otherwise comparable solutions, I'd always recommend the one that didn't use `this`. Hell, Douglas Crockford even has a project for making [ad-safe JS](http://www.adsafe.org/) that bans the use of `this` altogether.
Firstly, thanks for taking the time to respond! If anything following sounds like I'm trying to argue, then just know that I'm not. Just discussing. So of those reasons, only code verbosity, and by extension code maintenance stand out to me as quality reasons to not use them. Your 3rd reason doesn't make sense to me. It seems like what you said in the latter part of that reason directly contradicts the first part of the reason. I'm assuming you meant it runs slow first, then faster later...seeing as how that is the entire point of JIT's and why they were added to JS engines to begin with. And this is obviously not a negative as long as the code to be executed has a good chance of being run multiple times. Though I do understand avoiding these OOP heavy constructs in code that will not be compiled and optimized. The 4th point seems more like an issue of developer competence then issues with the language constructs themselves. As for you never having to write a constructor function, that does shock me since I have never once seen a tutorial or guide...or anything for JS that handles object creation without `new`, unless that resource is specifically speaking out against `new`. Not saying I don't believe you, but I do find it odd that it would be so bad and yet also the most widely used method and one of the first taught ways of doing something in the language.
IE11 doesn't support arrow functions. We have a big client that won't let us drop IE11 support. So I still have to use bind. :/ And lots of other fun things I can't use at work, either. Although I did just realize today that IE11 supports `let` and `const`, so... that's exciting. lol
thanks!
This pretty accurately reflects my initial reaction/feelings towards these things that he mentioned in his books. However since I'm a pretty new developer, and even newer to JS, I wasn't sure if there was some glaring issue that I just couldn't see for the life of me. As for his reasoning making less and less sense...I was slowly losing my mind when he would say things like "x is bad but y is good," and I couldn't understand why. Which again led to me thinking I was missing something very obvious.
&gt; Though I do understand avoiding these OOP heavy constructs in code that will not be compiled and optimized. Though it turns out JavaScript's OOP tends to perform *better* than factory functions. https://jsperf.com/prototype-vs-factory-vs-class
Haven't tested this but you could try making condtional breakpoints instead, set them up to only be hit when `__enableBreak===true`. Then in the console before you hit your button `__enableBreak=true`
I love explaining `this`. I have a coworker who was writing an annotator that would wrap a class function (babel, react). He needed to use `apply` to make sure the `this` context transferred, but some functions were also bound by the class because they would lose the `this` context for the class in some cases. Binding the functions would break the `this` context for the annotations, so we had to develop a nice way to preserve the this context so that that didn't break this.
I agree with most of that, but I'm not convinced that mastery of trees is required to know how to work in the front end. Especially with tools like React. For example, if you asked me the last time I had to determine whether to use depth-first or breadth-first traversal to search for something in the DOM, my answer would be "never".
Consider the perspectives of the people writing those tutorials. Generally the people writing tutorials on how to write code are people who are prepping for a book or talk. Everybody else is somebody who recently mastered the concept in a way that they can explain it clearly with confidence, which means no longer newb. Everybody else has moved on and take these *how to write the code* concepts for granted. Most people who are professionally developing in JavaScript are formally educated in some other language. They learn the concepts that remind them of *how to program* and adapt those concepts as necessary to fit the mold of the new language. In my case I forced to learn programming to keep my job. JavaScript is my first programming language. I had to simply figure it out from books and on my own. In order to wrap my head around the *how to program* part I had to keep it simple and my code had to work in a variety of unknown situations. I did not have C or Java experience to fall back on. If I needed simple extensible reuse I would divide logic up into child functions that can be called when needed, because that logic always worked the same and you could visually see where things were declared. To me this was far more simple than figuring out the reference of `this` in various different contexts or whether inheritance via model extension had what you needed to grow the code in different ways.
You don't need arrow functions for that, you can just use currying: function add(a) { return function (b) { return a + b; } } var increment = add(1); increment(5) // -&gt; 6 Also the arrow one can be improved to be similar: const add = a =&gt; b =&gt; a + b; const inc = add(1); inc(5) // -&gt; 6
Why not use babel?
Right? It's like the whole problem with teachers teaching to standardized tests. It seems to me most good JS software is written by people bringing concepts from other languages - who realize they're working with a shoddy bastard child of the browser wars.
Last time this came up in here, someone clever suggested using a little custom decorator to bind methods you care about to the current instance. Not that it saves much over something like `_.bindAll(this, "methodA", "methodB");` in a constructor, but it's prettier. 
Yeah using `__proto__` is definitely an anti-pattern. Someone should just be able to explain what prototypes are, and how they work. Don't need to know the difference between classical classes and prototypes, that's useless.
Also as an engineering manager that does a shit ton of interviews, I also agree. There's are all basic things to understand about JS.
Seems like you could just use Redux for this and standardize on it. What are your objections to this?
Well, that makes me feel better about that part then! It would be pretty crappy if the engine implementations couldn't outperform a factory function.
Yea, no way I can argue with that. People tend to stick with what they know and how they initially learned something. Though I don't think that makes new or this inherently bad. They just need to be used responsibly.
the feeling is mutual, to be certain. :)
If you're using babel, there are some experimental features that let you use arrow functions in classes.
we let in typescript
It's been my experience that people don't look at your portfolio. I've had maybe half a dozen clear hits on my portfolio website from potential employers. You either make it past the resume screening and get a phone interview to talk about your experience/projects or you hear nothing. This over a hundred applications over 8 months in a 4 state area. Basically anything that doesn't say senior developer, and few that do but match very closely with my skills, but not total experience. This landed dozen or so calls from HR, about half that from an actual technical lead, and a couple of technical interviews. You never get feedback even when requested. I don't where people get this notion that there is a shortage of developers. If there were, I'd be getting more calls, the salaries would be higher, and the requirements would be lower.
&gt; A better solution is to give your function a single argument, which expects to be an object literal. What if the function you need to use was written by someone else?
We don't even have node. It was a mighty win when I got my company to adopt sass. And even then, we didn't install ruby. No. We use a c port called sassc. Sigh...
Hi /u/vshjxyz, please don't use slurs.
Well sassc is waaay faster than the ruby version, so at least you have that going for you!
&gt;I was quite turned off by the fact that even simple shit like typing an image URL where I wanted What do you mean? You can point an image src at a URL and it will work fine... 
&gt; There aren't many good tutorials on webpack and in my experience a distinct lack of people who really know what's going on under the hood and are able to explain it to the uninitiated. For most, Webpack seems to be "near-magic" as you say, when what it should be is unmagical and clearly understandable. I think that most people unfortunately end up learning webpack from a third-party tutorial that kind of blows right past a lot of important details on understanding it to get to the actual thing that they want to teach you that relies on webpack as a build tool (e.g. react.) If you haven't, you should read the [project documentation and walkthrough](https://webpack.js.org/concepts/) It's really good, and it goes into quite a bit of detail about how it works and what every config line does, how loaders work in general and specific, etc. It's honestly one of the better pieces of documentation I've seen for a tool/technology like this. You aren't going to have made a cool modern SPA todo app by the end of reading through it, but you are going to have a deep understanding and appreciation for how webpack works and how to bend it to your will when it comes up later in learning technologies and workflows that depend on it. 
Tell your junior developers to [RTFM.](https://webpack.js.org/concepts/) It's seriously really good.
&gt; arrogant code snobs like me will think you [are] incompetent if you cannot organize your code without new or this Far more people will think you're lacking experience if you won't use classes where they make sense. &gt; It makes the code more verbose.... far more verbose. There is no significant difference between factory functions and classes. &gt; They make code maintenance much harder. This is due in part to the increased verbosity, but largely due to a less clear flow control of the code. You get proper tooling support for this and you can also document your classes. This is much simpler than dealing with unlabeled object shapes. E.g. this function expects some object with has these properties with these types. How do you communicate this? Saying that it should be an instance of Foo is much more straightforward. &gt; OOP heavy code like this generally performs faster on the first run, but after that it will usually perform much slower in subsequent runs. You get the best performance if the engine can use hidden classes to stamp out instances. This works if you use constructor functions and it of course also works if you use classes. It might be able to do the same for other constructs if it happens to figure out that those objects have a fixed shape. The problem with being at the mercy of heuristics is that seemingly innocent changes can break those heuristics and cripple performance. If you use classes, your code (as far as object creation is concerned) will stay on the fast track. &gt; because the developer doesn't know how scope works I don't see how scope is related to this.
Me too, neither call and apply. I've been doing Node+React for the last couple of years and I can't remember the last time I've used bind, call and apply. If an interviewer was pushing too hard this question I'd think the company would be working in this giant pre ES6 monster.
Maybe just my experience, but it seems the modern hiring process for Javascript/front-end developers is being asked questions like this: - Can you solve this complex coding puzzle on this whiteboard for me? - Write a bubble sorting algorithm - Write a Fibonacci number calculator - What's the difference between call and apply? I rarely have been asked questions relating to the DOM or broad Javascript topics, save for maybe a handful of them. Most Javascript interviews seem to be heavily skewed towards developers with academic mindsets.
&gt; Value vs. Reference — Understand that objects, arrays, and functions are copied and passed by reference. Understand that primitives are copied and passed by value. This is way off the mark, and it seems to be a very common misconception. There is *no difference* between how objects and primitive types are handled when passed into a function. They are treated exactly the same, both when passing arguments into functions and in `=` assignments. It's best to avoid terminology like "pass by value" and pass by reference", because they lead to assumptions based on what those terms mean when talking about other languages. Instead, let's talk about *names* and *things*, where a "thing" may be either an object or an instance of a primitive type. When you pass an argument into a named function parameter, or when you use an `=` assignment, you are taking a name and making it refer to a specific thing. This is in addition to any other names that may already refer to the thing. Those don't change just because you made yet another name refer to the thing. Also, these names are specific to each function invocation. If you call a function twice, the parameter names are spelled the same, of course, but in effect each invocation has a brand new set of names. All of this is true whether the "thing" is an object or a primitive type. So, why does it seem that they are so different? After all, what if we pass an object into a function and then modify the object inside the function: var obj = { a: 1 }; fun( obj ); function fun( o ) { o.b = 2; } This modifies the original `obj` so it is now: { a: 1, b: 2 } So obviously, the object was passed by reference, right? Contrast that with passing a primitive value into a function and then modifying the value: var value = 1; fun( value ); function fun( v ) { v = 2; } Here the original `value` hasn't changed at all - it's still 1! So obviously, the primitive value was passed by value, right? Wrong. Look more closely at the code. In the first example we have: o.b = 2; This *adds a new property* to the `o` object. And `o` is just another name for the object that is named `obj` outside the function. So both `o` and `obj` have changed, because they are the same *thing*. The second example is quite different: v = 2; We're not adding or modifying a property of `v`, we're *discarding* the reference that `v` originally held and *replacing* it with a new reference. So now `v` is a reference to the number `2`, but this doesn't affect `value` outside the function, because we didn't do anything that affects that name. Suppose we had done something similar in the first example, say: o = { b: 2 }; Now we're not *modifying* the original `obj` object, because we have discarded the reference that `o` had to it and replaced it with a new reference. `o` and `obj` no longer refer to the same thing - just like the "primitive value" case where we changed `v` to no longer refer to the same thing as `value`. Going back to the primitive value case again, what if we tried to set a property on the value? var value = 1; fun( value ); function fun( v ) { v.b = 2; } The assignment into `v.b` would fail, but not because primitive values are handled differently from objects. It would fail because primitive values are *immutable*. The same would be true for an immutable object: var obj = { a: 1 }; Object.freeze( obj ); fun( obj ); function fun( o ) { o.b = 2; } The assignment into `o.b` would fail just like the previous case, but not because it's an object or a primitive value. It fails because the thing that `o` refers to is immutable. The purported difference between objects ("passed by reference") and primitive types ("passed by value") is nothing more than an illusion caused by the fact that we *don't write the same code* when dealing with each. Update: I wrote this long-winded explanation before I noticed that one of the comments on the article itself covers much of the same ground. But I still think it's useful to talk about "names" that refer to "things" instead of "pass by value" and "pass by reference", just to avoid mental baggage that comes from other languages that use those terms to mean something subtly different.
TIL programming is math
Important note on `Object.assign`, if you don't want a side-effect of the first object being mutated in place with all changes, you should avoid passing a variable as the first arg, and instead pass the empty object literal `{}` and then all of the things you want combined (in order.) let a = { x : 1, y : 1 }; let b = { y : 2, z : 2 }; let c = Object.assign(a, b); // Bad. a will be mutated in place let c = Object.assign({}, a, b); // Doesn't alter a or b.
I have been a professional Javascript user for right about 5 years now, and the only times I have ever used _this_ is when it's required because something else i'm interfacing puts it's output into _this_. While _this_ is technically predictable, if you're writing something that is intended to be used by other code that you don't have control over, you can't always know what _this_ will be, without resorting to ugliness, and if you can't know what it's going to be, then you have to validate that it is what you expect it to be, and it's just a huge mess. Add on top of that, that since "bind" was so popular in old code to force "this" to something or other, then it becomes a real nightmare to reason about. * yes, i'm aware that this is somewhat simplified, and i'm aware that in the past people have made significant use of the _this_ behavior. 
Plus if you ever migrate the code to something like Flow or TypeScript the computer will recognize the types of your parameters. Pretty sure that bind kills type checking.
Unless you're writing a class, there's not a single appropriate usage of this. Apply, call and bind are fine to be understood, I ask about them in interviews to get a grasp of how deep someone's knowledge is. But they are redundant and a candidate would get points for explaining why. 
Probably depends on the environment. If you're being hired for a Javascript specific job, they probably really want you to know Javascript. My current job started supposedly as a Javascript/HTML, but my first day, I was in C++ land (a place I hadn't been in 20 years), so that was certainly fun and entertaining. I've now worked with upwards of 7 different languages in a single day. It's been .. . interesting. 
In the third case, are you passing any information beyond a memory address?
All of these examples are better served with simple functional composition. It'd be clearer to read and more flexible (why overwrite existing behaviour when you can compose a new function like your second example?)
I have implicitly understood all of this for a long time, but was not entirely able to explain it. thank you. 
Typescript is a super set of javascript. Kotlin is a different language.
Couple suggestions: 1. watch lectures or read up on algorithms 2. Read Cracking the Coding Interview 3. Practice solving these types of problems on leetcode or hackerrank.
I would suggest using the logging feature of nock to determine what is happening. It has helped me in the past. Sorry I can't be of more help. https://github.com/node-nock/nock#logging
`(.)` Captures any single character except newline `\1` Matches the results of capture group 1 `*` Match the previous symbol 0 or more times `g` Flag to find all matches instead of just the first So this will match sequences of repeated characters. For example the string `aaabcdeefff` will produce the matches `aaa`, `b`, `c`, `d`, `ee`, `fff`. [RegexPal](http://www.regexpal.com/) is a great tool for quickly analyzing/testing regex.
Everyone struggles, it's difficult to share knowledge. Practice helps.
In an object function, if there's an event for something like image load... inside the callbacked function, we need to use "that" or whatever name we want to remember the object context in - otherwise "this" is going to be be wrong... I can imagine even beginners hitting that with copy/pasted code they use... Do you think it's not that common? I'm just wondering.
instance members .... Class.prototype.function = function(){} ?
How about understanding both?
I guess this would mean exporting actions and reducers which will result in coupling the modules with redux. I would like for them to remain agnostic (expect for React itself). Or what exactly did you had in mind?
It's a nice trick but I'd never use that pattern in a language where it isn't the norm (e.g. Haskell). For a start, I now need to call add like this `add(2)(3)` which I don't like, and secondly there's no easy way to construct `add` with an arbitrary number of arguments. For example, you couldn't write the following function in a curryable way without additional logic: // Call with add(1, 2, 3, 4) function add(...xs) { if (xs.length == 0) return 0; return xs[0] + add(...xs.slice(1)); } // Partial application const add3 = ...xs =&gt; add(3, ...xs); This is important because there are many functions which work like this so knowing how to do it this way is necessary. E.g.: const max100 = ...xs =&gt; Math.max(100, ...xs); I like the functional style, but I don't think that shoe horning functional patterns into a language without the syntax to support it (i.e. `add(2)(3)` vs `add 2 3` is a good idea when it's not the community norm.
&gt; It's not just me personally being dumb. I certainly didn't mean to imply that! &gt; No, more like it's convoluted and makes everything more complicated than it needs to be. Is it quite complex to set up? Yes, it is. It definitely requires effort to learn. But that doesn't in itself make it "shit". My team are using a complex webpack setup, and it *works extremely great*. It's one of the pieces that "just works" now, and really, really well.
I praised the lord the day node-sass came out to wrap sassc for node. It was my final ruby dependency after I had replaced vagrant with docker and I was more than happy to be able to uninstall ruby. Your company made absolutely the right choice there, regardless of how slow to modernise they might be otherwise.
More like x = new Class x.function = function () {}
Did not work :(
It already existts and is named cobol. It is not a very poular programming language nowadays.
Good point. Here's a code snippet showcasing this: var _myObject = {hello: 'world'}; function deleteMyObject(myObject) { // Or use _myObject without passing a function arg myObject.lastFunctionCall = 'deleteMyObject'; myObject = null; // `delete` keyword doesn't work on object references, so we need to set this to null delete myObject; }; deleteMyObject(_myObject); // _myObject still exists // _myObject now equals {hello: 'world', lastFunctionCall: 'deleteMyObject'}
I'm confused, what's going on here?
I'd also know Promises well. During my Amazon interview I was asked to write a Promise.resolve and Promise.reject from scratch
Now, I'm actually as a novice quite surprised about the 'this' keyword. Because from what I understand there is a lot of emphasis in learning materials on understanding this concept and it turns out it's a dangerous concept overall. The question is how do I not use it? What are the best practices without 'this'?
Can you you explain more on why they are redundant? I'm a newbie.
Senior react developers I've seen use bind extensively... not sure how you're avoiding that.
My Amazon interviewer showed me what an Applicant.reject method looks like when called.
Yes, you can use Knex with MySQL driver. From Knex homepage: &gt; Knex.js is a "batteries included" SQL query builder for Postgres, MSSQL, MySQL, MariaDB, SQLite3, and Oracle
Hit the weights and eat more chicken and beef man, it will get your testosterone up. 100% guaranteed you'll be happier.
Interesting. Though I'm not sure if I like the async approach to getting templates/views... How does AAA libraries such as react/vue/angular solve this? I always thought that they load everything on init in terms of markup. 
Lack of desire to be engineers.
This is a common pattern for third party tools of all different kinds in the digital marketing space. All of the A/B testing tools, for instance, do some variation of what you're talking about. From a security perspective, I can tell you that if you're planning on selling this tool to "enterprise" customers, you will face a security review for the code itself and the infrastructure that code lives on. As far as weird things to consider ... well, first and foremost you should go with an asynchronous implementation. That is, instead of recommending a script tag that is synchronous as you've done above, do something else like: &lt;script&gt; scriptTag = document.createElement('script'); scriptTag.src = "yourURL"; document.body.appendChild(scriptTag); &lt;/script&gt; Go look at the google analytics code and copy whatever they did. This way, when your infrastructure fails it won't take down client sites. Next, if you're inserting content ... the first complain you'll get is that you're thrashing your customer's page. You know how in mobile you're loading a page and you're about to click a link and all of the content shifts? You'll be one of the assholes causing that. There isn't a great solution other than to know how much real estate your widget or whatever is going to take up and code that into the place holder div which makes upgrading or dynamic content a real PITA for the site devs (changing the code on page associated with your tool is a bad thing for business in this world). Other than those general suggestions, nothing comes to mind. If you tell me more about your target market, I might have more specific advice. I'll also second what another commenter is hinting at... if you can get away with it, going with an iframe implementation instead of a script and placeholder element will make your life way easier in terms of passing security reviews (even if iframes sucks for UX when implemented poorly). 
I'm actually interested in what exactly the difference between *val and &amp;val is. Could you elaborate? 
Knew you was doing something other than the snippets :) glad you sorted it 
"sure. what happens when you need to use `async / await` with an arrow function?"
Then I would either ask them to change it or I would simply rewrite it myself.
Let's say you have a seasoned software engineer going into a JavaScript interview for a job he is grossly overqualified for in terms of development experience. These are the types of questions that would throw him off. However ask him basic programming concepts and he would smoke any of the other candidates. Learning a language is easy when you understand the fundamentals of programming. Learning the quirks are even easier. 
Thanks for this.
I am very much an imperative coder, so all the extra fluff of factory functions and tooling is just wasted space and increased tech debt for me. Also, hidden classes are a V8 only compile step optimization applied to arrays that contain only number types. Hidden classes have nothing to do with this conversation. &gt; I don't see how scope is related to this. It is about code organization. You can organize your code entirely using functions, block structures, and scope without need for any sort of *new* or *this*. Scope is intrinsically baked into the language and cannot be avoided. Since *new* and *this* are conventions supplied by the language they absolutely can be avoided. In many more popular languages did not provide scope mechanisms until very recently and it is not really how many of these other languages work. In such cases you are forced to use conventions like *new* and *this*, because that is all the language would provide you to work with. This course of thinking is problematic when applied to JavaScript without an understanding of scope. I have seen this break code and people do very stupid things to hide or work around their broken design resulting in substantial bloat.
so i've been programming with JS for about 16 years and i'm not sure what homeboy above is on about, to be honest. you're going to need to use `this` any time you write a complex object with any kind of functionality. if you have closures (for example anonymous callbacks or anonymous promise handlers) in those functions you'll probably need to rebind `this` from time to time in the anonymous functions as well. it's not scary or a nightmare, it's just a normal part of JS. my advice is understand JavaScript scopes and JavaScript binding and work through those to get an intuitive understanding of how `this` works. 
&gt; Also, hidden classes are a V8 only compile step optimization applied to arrays that contain only number types. Hidden classes have nothing to do with this conversation. https://github.com/v8/v8/wiki/Design%20Elements#fast-property-access
hey, this guy was the most qualified candidate for the job he applied to. you should listen to him.
not to mention, pass by reference and pass by values are concepts that existed for decades before javascript even showed up. it might be beneficial to show you have some perspective and don't just solely focus on js.
i'm also a very experienced interviewer (i guess? i dont know i never really thought to quantify experience interviewing) and i'm wondering why you think that. the fact that there are blog posts like this that tell you what to memorize makes it a pretty bad set of questions in my opinion.
Wicked article, has anyone used Cypress.io before/have any feedback
Slot exposes light dom passed to element. Not shadow DOM.
Or, you know, report the performance issue to JetBrains? If you were looking for an excuse to move to VSCode, I'd stick with price being your main talking point. Not some feature that can probably be remedied with a bug report.
I'd hire you based on that comment. 
Modern concept of "equality" is simply communism masquerading as virtue.
Uncaught TypeError: Cannot read property 'dispatchEvent' of null &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at &lt;anonymous&gt;:20:5 (anonymous) @ VM186:20 main-base.bundle.S2o-Jr9NagCEDRfv95NwIQ.js:2030 Uncaught TypeError: Cannot read property 'textContent' of null &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at window.setInterval (&lt;anonymous&gt;:10:62) &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at main-base.bundle.S2o-Jr9NagCEDRfv95NwIQ.js:2030 window.setInterval @ VM186:10 (anonymous) @ main-base.bundle.S2o-Jr9NagCEDRfv95NwIQ.js:2030 setInterval (async) window.setInterval @ main-base.bundle.S2o-Jr9NagCEDRfv95NwIQ.js:803 (anonymous) @ VM186:8
Just write functional code. I do react/redux in a functional manner, and in that code base I don't have to deal with 'this'. In my meteor code base, its unfortunately common. Learn a little haskell, its a big language, but you don't need much to get a taste for how a purely functional language works. Then start playing with lodash, ramda, etc. Your code structure will tend to become simpler over time (modules, closures, functions is all you need) and 'this' is simply not needed. At least in your own code :)
[It's not like flow is great at resource management.](https://i.imgur.com/QIbPeGu.png)
Yeah. I had an interviewer ask me tons of questions about eval, only to read Douglas Crockford say how bad eval is. Thought about calling the interviewer back and saying "look! Eval is bad anyways!"
They dropped all the new HTML stuff and are just another JS framework using `get template` with inline HTML strings instead of JSX?
can it run in JavaScript? no. both compile to JavaScript? yes.
JetBrains are really on the ball with feedback. I submitted an issue with IntelliJ and the next they were emailing me asking for details and ways to reproduce 
*val - a pointer (memory address) &amp;val - a reference (also a memory address) For most purposes, these two are the same. However, if you have a function that takes a pointer like testFunc(int *val), every time you pass a pointer to it you make a copy of the pointer. You can change the passed pointer without changing the original. A function that takes a reference, like testFunc(int &amp;val), doesn't make a copy of the value, so if you change that reference you will also change the original reference. There are also some fundamental differences in the way C++ treats pointers and references, but I assume you aren't that interested in them for the purpose of this question.
Well it can't be mutual friend. Sure perhaps we both wouldn't like working together but it's not the same thing. While I'd hate working with you it's going to be because you're the kind of guy who makes up bullshit cuz he's in love with his own ideas because they're his. You'd hate me cuz I never accept this kind of ego driven development. 
Nope, both cases 2 and 3 just pass a memory address. The difference is that case 2 passes a copy, and case 3 passes the real deal.
thanks haha. Yea trying to show people all the code would be a pain in the ass.
[class properties!](https://babeljs.io/docs/plugins/transform-class-properties/)
Sure Binding functions to a `class` used to be popular like this: class Foo { constructor() { this.bar = this.bar.bind(this); } bar() { } } Which then allowed you to pass `this.bar` as an argument to be executed elsewhere, knowing `this` would actually be referring to the current class instance. Now we can just make `bar` a property of the `class`: class Foo { bar = () =&gt; {}; } Another example given elsewhere in this thread was calling a function when you have a variable number of arguments, ie: const myArray = [1, 2, 3]; Math.max.apply(null, myArray); Rather: const myArray = [1, 2, 3]; Math.max(...myArray); Or currying. Proposed: var greetingPrinter = print.bind(null, 'hello '); greetingPrinter('Bob') // hello Bob Better: const greetingPrinter = (name) =&gt; print(`hello ${name}`); greetingPrinter('Bob') // hello Bob 
Yes, util.promisify is used in this module, as well as Proxy and WeakMap. Promisification happens on-the-fly without manual preparation of object methods or any other function.
Who still remembers https://github.com/reactide/reactide ? Well, Fermion, are you going to keep up or leave the project in some time as reactide did?
Oh, not the questions themselves, they're a good set of subjects to study. A lot of devs that are newer don't know what things they need to learn about js.
You can more easily add more properties and reorder them.
It helps with consistency, preventing copy-paste errors, and maintaining attribution (minimizing impact on diffs).
the primary reason i've been told is that this helps with diffs in source control, like git. If you add a new parameter to the end of that list, the only change you get is a new line. If you _didn't_ have a trailing comma, to add a new parameter at the end you'd also have to change the last line (adding a new comma), meaning the diff would come out as "i'm removing the line without a comma and adding 2 lines. Something like { q:"value", - a:42 + a:42, + newParam: "newval" } does that make sense? 
What's the issue? That's the foundation of a v-dom. It allows you to declaratively specify components and freely compose them. Each node transpiles to `createElement`, or `h` in hyperscript, so the virtual dom calls/creates itself. `ListItem` and `SomeWidget` are actual objects, not string references, so you can use them directly: h('div', h('div', h(ListItem), h(ListItem), h(ListItem), ), h(SomeWidget), ) If you had to inject, i suppose you mean like in a template oriented framework, it would destroy scope, cause imperative actions and it would make it much harder to compose, debug, type and test. 
I keep hearing "consistency" as a reason for behaviors like this (from other fellow devs) without any kind of justification. can you elaborate?
it relates to the "copy paste errors" bit of it. Each line in the set is consistent so moving, copying, deleting doesn't require special attention for the exceptions, i.e. the last item which wouldn't otherwise contain the comma.
Kinda, sorta, but it really doesn't seem like a large advantage to my mind. Perhaps I think too much in C to understand it, it just /looks/ wrong to my eyes.
This is a really cool idea. However I don't think we should leave error handling to the default error handler . There are many cases where individual operations can error out and a different response should be done for a specific error. 
Any tips or resources for learning about software architecture? I've been a programmer for a long time and write code in my current position but I'd like to eventually move into software development.
So maybe i didnt explain well, but this site: http://www.jamesmonger.com/post/react-component-dependency-injection.htm basically describes what i mean. I am wondering why a lot of people dont opt for this. With my example, as you mentioned, they are all actual objects, meaning its essentially like writing "new class(...) inside another class, thus tightly coupling them together. Does that make sense?
It helps with the blame game. When the person fixing the bug relating to `a` being 42 and not 24 and is figuring out who to blame, your name doesn't come up because all you did was add newParam. As is, source control clearly points the finger at you being the author of the last line change for `a` there (and yes, looking into it deeper, seeing _what_ was changed is possible, but we're dealing with _people_ here; they're not thorough).
What do you need explained about consitency? All other lines has commas in the end of them, so why not the last one? You could also ask why you should leave it out, apart from saving one byte of space pr list.
I'm sorry, but why the FUCK doesn't readme has english language?
I listed my reasons here... https://pawelgrzybek.com/trailing-comma-in-ecmascript2017-function-parameter-list/
DI in my opinion was a countermeasure as there was no clear path of distributing content. While you can still inject and pass on references, it is often not desirable. The rule is: props down, events up. This will make more sense if you have a basic background in redux, it illustrates it best imo. &gt; its essentially like writing "new class(...) inside another class, thus tightly coupling them together Yes, but they are coupled. If you have a component `A` and it's using `B`inside, then `A` should have a clear relation to `B`. In a string template that relation is implicit. In v-dom this is explicit and typesafe. This really isn't any different from using a lodash function in another function, the import creates the bond.
Can you explain in what contexts and situations they utilize `bind`? It could be some tiny lack of knowledge as I've been working on a project where people have been caught up using `bind` in a component's constructor (React) way too much and didn't know about the class fields existing. Not all senior developers are created equal, though.
So a pointer is a memory address where the memory address of the reference is saved? 
I like it because it greatly reduces syntax errors when adding additional fields to the set or shuffling them around. If there wasn't a trailing comma after a:42 and I went to add a new key:value after it, probably 9 times out of 10 I'll forget to add the comma and get a syntax error. A trailing comma mitigates that entirely. Working with json reminds me on an almost daily basis why I dislike working with something that doesn't support trailing commas. 
Thank you!! One thing I am thinking of is it might be better to try to include the whole process of the tool on a single page. So using React, Vue, or Angular2 might be the best path forward for that. Do you see any issue where including those in the script would have any issues?There are be some API calls that the tool will need to use as well such as Stripe for payment. So that in itself will require the page to have HTTPS. Can you see any other concerns there? When I mention issues and concerns, I totally know that there are things that I will have to do to get them to work and work well. I am just looking for a overview of initial insight that might help me be aware of problems that could totally block me before I am too far down the road. Also, I did of course consider iframes to make it easy, but I feel with the awesome JS technologies we have to day, I could do a much better implementation using this method.
&gt; positive discrimination 
No, a pointer is a memory address where you can find a value of the same type as the pointer (in this case, int). A pointer to a pointer is a memory address where the memory address of the reference is saved. It sounds like you're not familiar with C++, if you're interested in more I recommend something from the Beginner/Introductory lists here: https://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list
"[DEPRECATED] Elegant Markdown Editor."
Mind sharing?
if i need tiny, i use https://github.com/chrisdavies/rlite https://github.com/riot/route is good, too
Deleted from the list.
That's almost as bad as Slack :P
Moment and lightweight shouldn't be used in the same sentence, good list though!
I've updated the gist to wrap the bookmarklet in an IIFE, would you mind trying this: javascript:(()=&gt;{const a=new MouseEvent("mouseup",{bubbles:!0}),b=new MouseEvent("mousedown",{bubbles:!0}),c=document.querySelector(`.js-postActionsFooter button[data-action="multivote"]`);let d=0;const e=window.setInterval(()=&gt;{const f=document.querySelector(".js-floatingMultirecommendCount"),g=parseInt(f&amp;&amp;f.textContent||-1,10);(50===g||100&lt;d)&amp;&amp;(c.dispatchEvent(a),window.clearInterval(e)),d++},500);c.dispatchEvent(b)})(); 
"this" is, effectively, an invisible function parameter, that you can not be 100% positive refers to any specific thing (what if someone calls your function with it bound to something totally unexpected?) therefore, IMO, it is not useful. I truly cannot recall the last time I used "this", only that in the modern Javascript era, I've often thought "i'm so glad I don't have to constantly figure out what the hell 'this' points to". Perhaps I've used it inside some classes on front-end code, since inside class objects, it almost always refers to what you actually expect it to be, instead of what someone else might've set it to be. 
The true answer is: laziness. That's all there is to it. The parser accepts it, and deleting them provides no functional value whatsoever, and the only true reason to delete them is for aesthetics, therefore many people don't. 
"Prettier" will remove that anyway, right? 
&gt;You don't need arrow functions for that, you can just use currying: function add(a) { return function (b) { return a + b; } } You never *need* to use arrow functions since they're just shorthand. But this is just a more verbose version of the code in the comment you're replying to. They're both partial application.
&gt; I like the functional style, but I don't think that shoe horning functional patterns into a language without the syntax to support it (i.e. add(2)(3) vs add 2 3 is a good idea when it's not the community norm. This is what ramdajs is for.
Class fields aren't yet part of the spec, though they are stage 3, and pretty close to being in the next version. Bind is pretty much what it says it is, bind a method to an object. One example is if you create an object with `Object.create(null)` this creates an object with no methods, as it doesn't have any prototype chain. So what happens if you want to use a method from `Object`? const obj = Object.create(null) Object.prototype.toString.bind(obj) const toString = Object.prototype.toString.bind(obj) toString() // -&gt; "[object Object]" You can do this with any object you create, or any other method, so it can become pretty interesting when using object composition. I personally like to use a more functional approach than an object oriented one.
I'm suitably impressed. ;-)
`add` was a contrived example, higher order functions and currying are still great patterns to know in javascript, and shouldn't be ignored.
Almost yes, it's shorthand without lexical `this`.
Is that really a sensible position if we're talking about, for example, an API for a library providing some complex functionality? Perhaps I'm not completely sure what you meant by &gt; Sending variable numbers of arguments does not optimize well. In fact, much of the time it won't compile at all. before, and we're talking at cross-purposes here?
I'm curious what you see the gain is from doing DI here? I use the pattern you described all over, and don't get the sense that my components are even slightly coupled together. I used DI a lot with angular 1 and Laravel years ago and always felt like it was a patch to work around the language to make code testable, and not necessarily a useful pattern. (Nice username by the way)
I think a counter-argument would be that sometimes you just need a butt in the seat, someone who's not going to be architecting anything soon, but more-or-less doing mundane bug fixes and smallish features. Yes, in a perfect world with unlimited hiring capital, we'd all be hiring the cream of the crop, but in reality, sometimes it's better for the org to hire 2x $50k developers than it is to hire 1x $100k because it's more about the breadth of the work than the depth.
Prettier allows some configuration in regards to semicolons, tabs/spaces, and single/double quotes, and trailing commas. You can set a flag if you want to use trailing commas everywhere.
Try to write about them, i.e., a blog post, or going on /r/learnjavascript and replying to comments and such, even if it has an answer already.
**Here's a sneak peek of /r/learnjavascript using the [top posts](https://np.reddit.com/r/learnjavascript/top/?sort=top&amp;t=year) of the year!** \#1: [The Entire JavaScript Language in a Single Image](https://fossbytes.com/wp-content/uploads/2015/09/infographic-the-entire-javascript-language-in-one-single-image-491250-2.jpg) | [29 comments](https://np.reddit.com/r/learnjavascript/comments/675fk4/the_entire_javascript_language_in_a_single_image/) \#2: [This pretty accurately describes my feelings on my JS learning journey so far.](http://imgur.com/zKJt5rb) | [6 comments](https://np.reddit.com/r/learnjavascript/comments/5k71cn/this_pretty_accurately_describes_my_feelings_on/) \#3: [Github Repo with 100+ Free resources to learn Full Stack Web Development.](https://np.reddit.com/r/learnjavascript/comments/5zse5u/github_repo_with_100_free_resources_to_learn_full/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/6l7i0m/blacklist/)
That mongodb ui looks dead. No updates in over a year. still in alpha
Anyone using FuseBox instead of Webpack who can compare with Brunch?
Helps with git diffs. People also say it helps with copy+pasting, IMO if you're copy+pasting a lot and are doing it in such a way that you don't notice a comma, then you're probably doing something wrong. For that reason, I think it's a crutch, and shouldn't be used. No idea why people get some tribal about it though
I can't find Popper.js in the list 🤔
No, nonono, really, it's useful. Trust me. It's useful. :)
True, but we run Prettier as vanilla as we can. We only use --use-tabs since that is a company thing. The rest we don't worry about, like their website suggests. 
yeah, dunno how they missed it. /s a "large" list this is not. not by any stretch of the imagination. this is a large list: http://microjs.com/#
My linter adds them automatically so it's usually a non issue. As far as moving too quickly or recklessly, sometimes it's the nature of the beast being overworked with strict deadlines. I mostly have to trust my tests at that point.
Fair enough, it probably is not high priority for most. Though I am on a team whose main focus is client performance so we investigate and write tools for our devs to help them better understand how the dom updates and cpu time underneath React work. Trusting the DOM diffing engine to do the right thing can only take you so far. Particularly if you have nodes being marked as dirty too high up in the tree which is the most common pitfall I see.
:D
Apart from 2 or 3 lectures for c in college I have never done anything with c/c++, but thanks for explaining. I'll check out the beginner's guide when i have some time. 
How well do you know JS? Have you worked with ng1? Or other frameworks? Learning TS + ng2 took me a couple weeks to really know how to do things. 
While I generally agree, a great developer will adjust to the specific environment. I see far, far too many people writing C# like they do Java (the 2 only LOOK similar, but they have subtle and extremely important differences) or JavaScript like they do C# and so on. Languages are just tools, but they are tools with very large amounts of subtleties. Eg: If you're writing Java, you're going to be using classes. If you're using JavaScript, you MIGHT be using classes. Understanding why it's not always the case is important: if you just blindly follow the paradigms you're used to, you'll write shit. I don't care if someone know how to use prototypes when they code, but I still have to ask if they're aware of these things. Why? To make sure they understand why some patterns are the way they are in our code base.
I've worked with JavaScript, CSS and HTML for 6 years. Do you think after a couple of weeks learning Angular I'd be able to develop new features competently? 
Offline eh? http://imgur.com/a/rsnn1
Collaborative editors are _really_ powerful, but they're also _really_ hard to build. TextSync is something we've been working hard on, which makes it possible to turn a `textarea`, Quill editor, or even code editor (like Atom) into a realtime, collaborative text/code editor. What do you think? 
Witchcraft!!
I'm a bit of noob when it comes to JavaScript, how did they do this? 
This really depends on you. Tons of programmers have been able to build production sites using every version of Angular, so there's no question if it can be done. The question is if you're familiar with frameworks, working within new conventions, etc. Have you tried React? Vue? Backbone? Meteor? If this is your first adventure into an actual framework, then there will be definitely some time to get up to speed. If you're used to jumping between libraries, no reason to assume Angular would be any different.
For me personally, a portfolio is the most important piece. Even better if they've been active on github. However, I don't come into the interview loop until rather late in the process, after tech screenings. So I can't speak too much to that first layer. What I can confirm is that it is hard to find really good front end engineers. Recruiters often do a poor job in tech screening so they end up wasting a ton of our time on garbage candidates. In my conversations with others attempting to hire in our industry, there seems to be a large divide in the skills we're looking for. On one side, we want strong engineers. There are plenty of these out there, fresh out of college, but most are used to... real languages. They wouldn't touch front end web with a 10ft stick and I don't blame them. The confluence of a shitty (but improving) language and varied browser ecosystem is a bit of a nightmare. And that's without mentioning the increased pay they would get doing anything but web development. In short, good engineers often lack practical experience with front-end web technologies. On the other side, we want experience with web technologies. The amount of domain knowledge required is rather high for the web so it's often not feasible to hire a good engineer then train them up on the front end. These candidates with experience are your "script kiddies", often self taught with no engineering experience which is where I started. Unfortunately they often have problems working on a team in an enterprise environment or meeting our performance and quality targets. Who we really want to hire is someone in the middle of these two extremes, which has proven hard to find. However, if you have a strong portfolio and can sell yourself as a candidate that possesses both, you should get more real interviews. Though I do not perform phone screens so am not sure what would be most helpful there. In general, we prefer strong CS fundamentals over experience. 
It looks more complicated than it actually is. The relevant line of code is something like: `window.addEventListener('offline', updateText);`. The browser detects that a connection changed and fires an event, you just wait (*listen*) for it and call a function when it occurs. 
Oh that makes sense, thanks!
I don't understand what you're trying to accomplish, so this is a bit hard to comment on. What I'd say is that if you're talking about inserting some widget into another company's website then including a front-end framework is almost certainly a very bad idea. If you're going to do that, you HAVE to do it in an iframe or you'll end up breaking peoples' sites because these frameworks aren't meant to coexist and certainly aren't meant to be deployed more than once to a single page. You'll end up clobbering variables and whatnot. Yes, you can namespace stuff. No, it's not as easy as it sounds. The general rule you should be working from is: keep this thing as small and unobtrusive as possible. As for using HTTPS --- definitely do it --- the only issues you might run into there are around the potential for unsecured content in your secured pages popping up security warnings which would 100% get your tool removed from the client site. I suppose another issue with HTTPS is that you'll need to manage a cert. This seems like a minor detail, but I've seen more than one vendor let their cert expire which leads to security warnings on client pages and the removal of their tool/code. Now, back to the iframe thing for a moment. The reason I say you should use an iframe if you're injecting content into a client page is because iframes are sandboxed away from the page they live on when they are on different domains. This makes your life easier NOT from a coding perspective, but from a sales cycle perspective. You WILL lose deals specifically because people don't want what they see as some startup's insecure code having unfettered access to an environment they likely worked hard to secure.
https://imgflip.com/i/1unzdi
If you have a good foundation in JavaScript, understand concepts like promises, know common design patterns, you shouldn't have any problem. 
I see you have worked with JS for more than 6 years, but if all these years you have worked with plain JS + jQuery, you will need a little more time to get that "Aha" moment that all these Components oriented frameworks like Angular2+, React, Vue have. But in all cases in few weeks you will be able to write new features. Also, it really depends if there is already written a significant codebase or you will start from scratch. I recommend you to take the "Angular 4 - The complete guide" online course at Udemy. It covers pretty much all about Angular2+. Good look!
Thanks very much for that, appreciate that advice 👍 I will be working with a platform that already has a pretty solid foundation so I don't think amends will be a problem it's more creating new features. However, if all it takes is a few weeks to get up to speed then that sounds achievable to me. Thanks again, I'll definitely check out the course! 
Probably
 'The quick brown fox jumps, over the lazy dog.' .split(/\b/) .filter(w =&gt; !['the', 'fox'].includes(w.toLowerCase())) .join(''); Or: 'The quick brown fox jumps, over the lazy dog.'.replace(/\w+/g, w =&gt; ['the', 'fox'].includes(w.toLowerCase()) ? '' : w) Output: quick brown jumps, over lazy dog. Note, there are extraneous spaces. The sentence starts with a space and there are two spaces between "brown" &amp; "jumps" and "over" &amp; "lazy". Well, if you display this in a browser it doesn't really matter. By the way, if this is about counting words and skipping articles etc, it would be easier to skip those words when you count them.
Here is my code. I didn't write this, so I'm trying to decipher: `query = SEARCH_WORD_COUNT &gt; 0 ? query.replace(new RegExp(SEARCH_WORD_IGNORE, "igm"), " ").replace(/^\s+|\s+$/igm, '').split(/\s+/).slice(0, SEARCH_WORD_COUNT).join(' AND ') : query;`
Its only coupled if you make it that way. react-redux maps external state/fns to local props so you could just as easily do away with Redux and just reimplement the circular logic necessary to get global state updated and local components re-rerendered.
Good thing your eyes never saw comma-first style then...
Sorry -- I tried to implement that, but I must not be implementing it correctly. I pasted my code above. If you can help, that would be awesome. 
I'm guessing you're not using vim as your editor. With a trailing comma you can add to a list with two distinct operations, without a trailing comma you're looking at like 5 or 6. When you're writing enums or lists, it does make a difference. This probably doesn't matter as much with an editor like Atom or VS Code.
You should be more aware of the amount of resources you're using to produce that tiny static page. Using React for this was extreme.
Where: `var SEARCH_WORD_IGNORE = "A|AN|AND|AT|THE|OF|Vol. \\d+|\\W+";`
Test Cafe for the win! It's so much easier to use than anything else I've tried. 
Currently working on a PR for Octotree, a pretty useful tree view for Github (experimental with Bitbucket) https://github.com/buunguyen/octotree/
Debatable I guess, payload is just 73KB. The author seems to know what he's doing, check out his [other pages](https://chris.bolin.co/).
In the last two years, the standard for javascript has changed significantly with a feature set called ES6. Basically a lot of the old jQuery and lodash library features are now incorporated into normal javascript. * let / const instead of var * (arrowFunctions) =&gt; {} * Arrays with map, reduce, filter, forEach * Array and Object spread functions for passing around data For web pages, jQuery tends to have been replaced by: * React or Angular2 When you're making a single page app and your state gets messy, check out: * Redux or Flux When you need to test your components, check out: * Mocha and Chai Also today we tend to get packages with NPM. Also today we tend to compile and bundle our javascript with Webpack. So that makes: **ES6, NPM, Webpack, React.** When you get complex, add Mocha, Chai, and Redux
[instapage](https://instapage.com/) (paid), [wordpres](https://wordpress.org) (free) 
 window.dispatchEvent(new Event('offline'));
&gt; ust 73KB 73Kb for a static site that is only a handful of paragraphs and hardly any CSS or JavaScript is massive.
is typescript still relevant? I have been reading a lot of mixed feedback on it since ES6. Is it still worth taking the time to learn?
This is pretty much the exact response I was hoping for. Gives me a solid starting point to get up to speed. Thanks for the response!
oh sure, i'm a really bad guy and you're a righteous good guy.
omfg thank you for this
I doubt anybody advocates using `Object.create` over constructors. The main usage is `Object.create(null)` (if you cannot use Map I am guessing). Many dev don't like JS's constructors; the "new" operator is from class -based language and defining prototype values/method wasn't exactly elegant: It was neither good for classical inherence or prototypical inherence. Object.create was suppose to help but it didn't took off. People would either implements their own class library or would abstain using prototype chains altogether, favouring plain object factory and mixins. With ES6, the divide is between "class" and plain object factories.
So, first of all, i am not advocating either approach, just collecting opinions. The recent trend in a lot of front end frameworks seemed to have a heavy focus on declaring and injecting dependencies, ala angular, aurelia etc... So seeing objects being responsible for creating their own objects in react kinda surprised me. In terms of general programming practice, im not sure how inversion of control/di is a "patch" or "workaround" - so would love to hear you guys elaborate on that. I get that things are somewhat different for front end concerns however. My real worry is that ive been needlessly and rigorously applying a pattern in my own code. At work i have a series of completely self contained components such as an "uploader", a user notifications modal, a directory picker/creator. These are used all over the place, and hence i created them to be used in isolation and ignorant of consumers. When i actually use these components in other components, i explicitly instansiate them and pass them to other components via their constructors. This as opposed to letting the other component create their own new instances. I am always seeing other developers/learning material always talk about the "new" keyword showing up in classes as a really bad thing that introduces tight coupling to a particular library or object. Back to my example, what if i want to change the implementation of my dependent components?, isnt that far easier to deal with if ive gone the route of explicitly passing instances to calling code? 
No, I think it means humans toast toast.
what benefit does React bring to D3? and vice-versa? the libraries are orthogonal, and data-vis is 100% D3. feels like React was thrown in either as filler content or for that extra marketing hype.
You could look into howler js possibly.
What do you mean? As alternates if the MP3 isn't supported?
More on this, looking at angular 2, vue js i see they require you to declare components that another component will use via the "directives" property. To me that smells like some form of factory creation is happening, eg the class/component is not responsible for creation. My other point would be - if you saw me writing a custom component and i start newing up a bunch of other components inside my class - would you be concerned? Again not advocating either approach, just trying to determine if im being a stickler for a moot point. Personally not needing to use crazy levels of injection in react is appealing, the code looks and feels simpler/easier to deal with.
Componentization and reusability. Adding React to the mix helps with separation of concerns. D3 handles the data manipulation, which it's amazing at, and React handles DOM diffing and rendering, which it's amazing at. You can then do things like this: ``` &lt;Chart&gt; &lt;Scatterplot /&gt; &lt;LinearRegressionLine /&gt; &lt;PolynomialRegressionCurve /&gt; &lt;Axis /&gt; &lt;/Chart&gt; ``` Makes your code easier to read and understand as well. Saying React brings nothing to dataviz is like saying you don't need React because you already have jQuery.
New to reddit, not sure if you got notified when i replied to the comments further down, so just bumping this so you dont miss it. 
&gt; Saying React brings nothing to dataviz is like saying you don't need React because you already have jQuery. the analogy is pretty weak, IMO. jQuery and React both target the same problem: dom manipulation. one is imperative, the other is declarative. what does dom-diffing add to D3? and what does D3 add to dom-diffing? is React diffing D3's dom or is D3 manipulating React's dom? you can embed D3 using any UI framework, including jQuery. or no UI framework. is it just JSX sugar for calling the normal D3 apis? http://bl.ocks.org/benvandyke/8459843
That is really useful tool. I'll wait PR. Thank you!
What you pass isn't the created object but a reference to the class prototype, createElement will then create your component and pass in props (`new classRef(props)`). That is a relatively new development, before that we had imperative factory creation that needed global or local "registration" so that the template parser would find the component class it needs to create. It would also cause the destruction of scope since components are evaluated at a later time in a different scope and have no access to variables any longer, so you needed to inject these as well. Angular has that problem, Vue as well. They are both older approaches. That type of DI is a workaround for shortcomings in framework architecture. Newer (and by todays standards, most) frameworks do not have these problems any longer, components are part of the scope, they are type-safe and import explicitely. Instead of DI and inversion there are newer things you can do now, like higher order components, contexts, props and flux pattern. Redux for instance is a higher order component/function that takes a component, picks a slice of state and informs its original component when changes happen to that state by passing it down as props again. It knows the store by context. This is radically different from how Angular and other MVC frameworks used to treat state. Since redux makes handling state very simple, "technically older" frameworks (like Angular, Aurelia, Polymer, Vue) are retro-fitted (using DI internally) to emulate redux (ngStore, Vuex, etc).
Ok that makes sense, and answers my question as to why im not seeing it mentioned much with react. Thanks for taking the time to write that out! 
&gt; active &gt; Grunt Are you sure?
Deleted. 
Hold on - i'm not looking for an argument. i asked because i want to understand. the obvious reason is, of course, as you explained, but some devs don't only do js. not all languages support the trailing comma, and in reality for many people it's second nature to not put the comma at the end of a list when there's nothing there (we don't do it in written english either for lists of subjects). that's not to say the reason is wrong. the language feature has been added for a reason, but a little respect and understanding would be appreciated before coming across as hostile.
this could be true, but is it really helpful to call a feature in a language lazy because its addition saves you time/hassle later on? the main justification from most people seems to be a more long-term benefit than short.
Ultimately it's a matter of opinion. i think understanding the reason is more important than doing it yourself. everyone's coding style is different (i prefer tabs over spaces, for instance, even though that appears to be sacrilegious in some circles). JS's parsers provide it as an option.
People are saying diffs and consistency, but it's also just more ergonomic. Imagine swapping the two lines in your object. Now you have to remove one comma and add a comma.. then you swap again later and repeat the same silly comma moving. Seems much better to leave the comma always just for this.
How would I know if you're a bad guy? All that's obvious is you lack maturity 'n aren't that creative.
There was actually a great talk by Shirley Wu at ReactRally today about using React and D3 together. Absolutely worth watching. 
I'd also suggest looking at your local market if you are thinking about what people actually use. Vue.js seems to be getting a good amount of momentum in certain locales so it might be worth checking out. If you're interesting in the being more full stack (now that Javascript can be) make sure to visit various server implementations built on Node. Express seems to be the defacto.
I have no idea what cutting a string is supposed to mean and the two functions' names and their examples are pretty confusing. For example, why does the result of cutStart not include the string in the first parameter while the result from cutEnd does?
Would love to see Rocket.Chat on the list. Open source chat platform written in JavaScript.
TC;DR ( Too Chinese, Didn't Read ) 
Thumbs up for disable cache!
Haha yeah those locale files are massive 
I mean, laziness isn't necessarily a bad thing in computer programming. I suppose societal connotations inherently apply that descriptor to it, but as a programmer I've often said that laziness is a good trait in this industry... to a point. A lazy programmer understands that the computer is their friend and can help prevent doing extra unnecessary work in the future. 
i've learned it by working with other developers with more experience. i don't think it's necessarily something you read a book on and suddenly grok, it's more just the fine art of balancing the practical solution and the most elegant solution given a bunch of constraints. working with experienced developers will gradually expose you to that art and build your intuitions. building things, screwing them up, building them again, watching them become crappy in light of new constraints... you start to arrive at patterns and approaches that help. frankly i think most of what you need to know isn't particularly complicated or something that you couldn't arrive at yourself. a lot of it falls from approaches to simplifying complexity that given enough time i wager most any developer could arrive at (with few exceptions). as far as action items? remain thoughtful about your solutions and if nobody is a better developer than you at your current job AND the problems you're solving are not pushing your boundaries as a developer, then jump ship and find a place that has one of those.
If you're interested in blockchain: https://github.com/nimiq-network
definitely not going to disagree with you there. it takes all kinds.
sure! i hope i get to interview that person one day and present them an offer before they get snatched up by someone else. i'm moreso pointing out the issue of relying on the less informative signal (imo) about developer quality. js factoids are, in my measure, a poor signal. architectural prowess is a strong one, but it's hard to test. as a result, we lean on the shittier signal because it's the least terrible approach of a bunch of terrible approaches. tl;dr interviewing is hard
aye, and you're quite mature and very creative.
Too add a bit if you want to get into angular or react both have clis that will set up everything for you. I highly suggest these, as both provide ways to eject the Web pack configs and go off on your own later if needed but it is much easier to get started with them and not have to learn an entire stack just to get to use either of them. Oh and if you look at angular I can't speak highly enough of ngrx. It is a redux style single state store that makes use of rxjs observables, something angular makes extensive use of anyway, to manage data flow from it.
Does this count as a low effort post? 
Just wait for part 2: D3 with AJAX! _\*crowd cheers\*_
U mad? 
&gt; A better solution is to give your function a single argument, which expects to be an object literal. You can populate this variable numbers of items without harming performance. Changing shape of an argument can easily cause de-opt. Very wrong to say this won't harm performance.
Exactly
you're the one telling me how terrible i am.
Won't that last comma causes a syntax error if there isn't any more object member following it?
Yea u mad. Lol
You may want to check the status of the audio player after e.g. 200ms right after you call `play()`. If it's paused, then it's not playing.
`padStart` and `padEnd` exist to make sure that strings are padded to a certain length with a specified character, by default using a " ". I would have expected cutStart and cutEnd to follow the pattern and look like. const string = '1234567'; string.cutStart(3) // &gt; '567' string.cutEnd(3) // &gt; '123' Using the cutStart and cutEnd terminology to mean anything else would seem like a very confusing language feature to add.
Hi! I'm a tech recruiter in the bay area (please don't hate me!). Do what you love because it's all just work; fluidity and flexibility are key in this industry. I see a quite a few unmet JS needs, and those clients are typically willing to pay well for strong JavaScript talent. Long term, if you can get into Java+JS, you're money. Companies go nuts for a full-stack or performance test engineer.
I find it amusing to see Clipboard.js on the list. It is certainly an interesting project. I mean it is interesting to see how one line of useful code (`document.execCommand("copy");`) can be fluffed up and bloated into over 300 lines of code and a complete website with its own domain. I know that most of the projects on the list are actually good and useful. But a few rode in via the twitter and social media hype-train. 
In my experience of using D3 at work, the maths/data processing modules are incredible. However, it's DOM rendering portion essentially does what React does, i.e. functional mapping of data -&gt; view. The difference is that JSX is completely declarative, it's syntax is already familiar, and it lets you visualize the resulting html hierarchy. Whereas D3's view methods are a bit linear and imperative, e.g. ".append()" and ".selectAll()", not to mention the sort of vague DSL naming like ".data()" that had me visiting the docs way more than I cared to. Given that d3 and react were created around the same time, Mike B definitely deserves some credit for seeing the merit of functional view rendering before it was made cool by react. But at the end of the day I think react excels at the one thing it set out to do well.
In terms of UI programming, the Elm architecture (or React/Redux combo) has quickly proved its success in the industry.
totally!
A more honest description would be: &gt; A big and very powerful library that you'd better use to fast develop when dealing with localization and timezones but that you'll probably remove from your application when you realize *how* much of a burden it is for your application loading and general working. More generally, those library descriptions really lack consistency.
This list is much too random. It looks like the personal bookmarks of somebody. 
Upon installation!? I can't imagine that being good in any way for the user. I would initialize the database on first run, and keep the database somewhere you control, such as your own installation directory, not the user's home folder.
`takeStart` and `takeEnd` probably make more sense as names after looking at the other examples you added. './src/file/path/filename.json' .takeEnd('/') .takeStart('.json') Merging the two makes either naming choice of `cutEnd` or `takeEnd` fairly obscure/innacurate './src/file/path/filename.json' .takeEnd('/', '.json')
Just a note, countly, while looks cool, the commercial license starts from USD 250/ month. Are there any open source alternatives that permit commercial use?
I agree, but would perhaps suggest Jest. Also when you're tired of NPM install times, want to work offline or have a build server, replace it with Yarn. Some other utility libraries I would suggest that have become pretty much standards: lodash rxjs momentjs when working with dates 
Closures. https://developer.mozilla.org/en/docs/Web/JavaScript/Closures
Maybe do an init command that initializes the database in the current directory.
Fizz Buzz If they're clueless.
Darn it, sorry, I replied to the wrong comment. Thanks for your input into the topic, mate. I gotta be more careful next time.
https://codeburst.io/10-javascript-concepts-you-need-to-know-for-interviews-136df65ecce
From my experience goint through this it was depending by company which you are going for interview. It depends what techonolgies they use, what projects they are doing in that moment etc. If u are looking on google and find some "top x jS questions", you will have a clue anyway about almost every concept
Are you experienced in *JavaScript* or are you mainly good at HTML+CSS, with some JS here and there. That would make a big difference in your learning curve. 
Using React for a static web page. Now that's a first. 
Awesome! Very informative. Thanks for the help! This is more of exactly what I'm looking for. Thanks!!
Depends on the role, a few classics: * Do you write unit tests? * What testing framework do you use? * How do you avoid polluting the global scope? * Are you familiar with jQuery? * What jQuery plugins have you written? * How do you support multiple browsers? * What are the security implications of using JavaScript and how do you protect against them? * What steps can be taken to reduce load times? * How do you avoid slow script execution?
What's a promise ? What does it improve on ? Why ?
Great way to educate people that some websites work offline.
It depends entirely on the company. For my graduate job JS wasn't mentioned once in the interview, just had to answer some DS &amp; algos questions. I'm not a junior at my current job, but it's still relevant: * Had to talk about folder structure, both front and backend. How would you organise your front end components and why? How would you organise your backend services and why? * Which database would you use for which situations? When would you use MongoDB over PostgreSQL and why? * Describe a situation in which you'd use a 3rd party package vs writing your own solution * State management questions (basically questions about Redux). Preferred method of handling async actions, promise-based middleware vs thunks * React component and file structure
Say what you want, that's a damn sexy repo...
Remind me, please, what kind of project in question do you mean. Thank you.
It might sound obvious, but if you put it on your CV you may be questioned on it. Be prepared to back up everything on your CV including anything that might be there just to fill space. 
Money is my main concern so thanks for your feedback 
 var result = prompt('Write me something'); if (result === null) { console.log("User canceled the prompt"); } else { console.log("User prompted: ", result); }
nice one. Just tried it in the developer console and it worked
I think correctness is more important and usually remove them.
The examples are confusing for several reasons: * Cut is a fairly generic verb. What does cutting a string mean? * As a result it's not clear that `cutStart('string')` would remove everything after the first index of `start`. * The second argument does not help clarify anything. I guess `cutStart('string', 'is')` would mean `Cut out everything after and including the first index of start and everything before the first index of is`. That's a very complicated process and so should almost certainly be split into multiple functions. In the end this exists to save a few calls to `indexOf` in a case where you're doing some very basic string parsing? What's wrong with `indexOf` aside from it's been around for a very long time? Is this scenario encountered so often that it really needs to be handled by a standard set of machinery? My suggestion: first prove the scenario is relevant by creating an npm package. If it takes off like leftPad then maybe there's something useful.
&gt; However, the idea is to simplify usage of string methods so that you can use them in a functional and stateless way; which means no index variables in that case. Functional or stateless code does not prevent you from creating variables.
"This light bulb lights up when you remove it from the socket!" &gt;You need to enable JavaScript to run this app. "But it needs batteries..."
"countly", it is in the list of projects you've shared.
Needs search or at least tags for each job listing. For example, if I'm interested in a Vue job, how do I find it without reading every listing?
for (var i=0; i&lt;10; i++) { setTimeout(() =&gt; { console.log(i) }) } What does it log, how can you improve it?
Woohoo, that's the first thing on my list! That feature will be deployed this weekend. Thanks for your feedback! 🎉
Exactly. D3 is great at data manipulation, but so-so to non-existing in the other things an app needs to do like building a UI to manage the visualization. I also find JSX easier to work with and more extensible than the general update pattern. I suppose it's the sort of thing you really shouldn't knock until you try.
I'm a backend developer and I have a lot of experience working with different frameworks. It took me a couple of hours to get the basics of Angular 1, and a few days to be proficient in fixing bugs and writing new features. Assuming you are proficient with javascript, a couple of weeks should be more than enough time to get the basics.
1. Explain "this". 2. What does prototypital inheritance mean? 3. Explain lexical scope in JS. 4. Explain hoisting in JS. 4. Explain the concept of closures in JS. Just those 5 questions would tell me a ton about the candidate's knowledge of JS.
And how do you use async/await with promises?
&gt; What are the security implications of using JavaScript and how do you protect against them? This seems more like an intermediate to advanced question to me. Out of curiosity, would you have an answer off the top of your head? 
https://stackoverflow.com/questions/36828639/check-with-webdriver-if-browser-is-still-open says confirmed to have worked with the try catch method.
Rod Vagg
I like these courses - https://nodeschool.io/index.html#workshoppers If you can get through them all, you should feel very confident in your skills.
Thanks man. Have you tried angular 2 or 4? Is there much difference? 
As a junior dev? Really?
Whenever I interview a junior dev, I never expect them to know the answers to everything. What's generally useful to me is getting a feel for what you've worked with (jQuery, Angular, React, node, etc), and watching you write actual code. One particular exercise that I cooked up at a previous job, which served well, was to put a computer in front of the candidate and ask them to create a `map` function that does what `Array.map()` does. Often the junior devs don't even know what that function is, but if I ask for a function that takes an array and a function to map to it, we generally end up getting to the desired result. Over the course of such an exercise, I'm able to see first-hand where the person struggles, how well they take requirements and translate them to a working result, and where they turn when they get stuck. If I see potential, and a personality that fits with my team, I'll be willing to make the hire and spend my time teaching this junior dev all the things s/he does not know.
Whenever I interview a junior dev, I never expect them to know the answers to everything. What's generally useful to me is getting a feel for what you've worked with (jQuery, Angular, React, node, etc), and watching you write actual code. One particular exercise that I cooked up at a previous job, which served well, was to put a computer in front of the candidate and ask them to create a `map` function that does what `Array.map()` does. Often the junior devs don't even know what that function is, but if I ask for a function that takes an array and a function to map to it, we generally end up getting to the desired result. Over the course of such an exercise, I'm able to see first-hand where the person struggles, how well they take requirements and translate them to a working result, and where they turn when they get stuck. If I see potential, and a personality that fits with my team, I'll be willing to make the hire and spend my time teaching this junior dev all the things s/he does not know.
Is this going to have a dependency on pusher ? I'd be interrested, did one myself with google [diff/match/patch](https://github.com/GerHobbelt/google-diff-match-patch)
I've been meaning to try my hand at game development for a while now, but I'm not interested enough to learn C# just to use Unity. The fact that nunuStudio uses js might be the catalyst I need. I just played around with the demo and it seems pretty cool. I'll definitely go through this tutorial later.
What a ridiculous name too
Sure, I wouldn't expect a candidate to be an expert on the subject but at least understand there are security implications. The security implications of JS are two fold, the developer relying on JS for security within a web application and secondly, the additional attack vectors JS opens up. Protecting against the first starts with ensuring all validation is done server side as well as client side. Protecting against the second should begin with data sanitisation on output as well as consideration on how authentication tokens and other sensitive bits of data are handled.
To be fair, that's already in the book.
Posted by Jewishbuttfucker.... I hate Reddit sometimes
Rod Vagg
Use canPlayType to figure out which formats are supported. https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType The only two types you need are Opus (Chrome/Opera, Firefox, Edge) and AAC (IE11, Safari).
Antisemitic and homophobic. How dare you!
I'm not super familiar with the function calls yout are using, but it appears to me that you are returning from the callback in getJson, but not from your "get" function. 
Yeah I am returning from getJson beacause I am using node.js
Most likely the line you commented doesn't return undefined. It's the output of the get() that returns undefined. You do not have a return statement for the get() which is why when you execute your code the console.log returns an array, but the output is undefined. 
I'm glad he posted this, its the kinda of clarity to the issues at hand I think most of us were expecting. Every threat and accusation was smokey at best, I think he makes a good case that this is pure _horseshit_
TL;DR: SJW snowflakes looking for trouble can look elsewhere.
Your `return ids;` is returning from _this_ function: ``` getJson(url, function(error, response){ ``` _not_ from ``` function get (ID) { ``` The `get()` function will always return `undefined` as you have it because it has no return statement at all. (you are returning `ids` from a nested function, not from `get()`) You probably want to add a `return ids;` line to the end of the `get()` function.
Create an npm run command or add a [script](https://docs.npmjs.com/misc/scripts) to the post install? 
&gt; To a random one I wouldn't, but if they say they've built apps with recent tooling, its a good question to see if they're truly keeping up or making shit up.
A few questions before I can help. Are you trying to implement the API endpoints on the server side, or are the API endpoints already setup and you aren't sure how to request data from an API. 
another resource: https://www.udemy.com/top-javascript-interview-questions-and-answers/
How do you guys handle these kinds of client-side mobile-only errors?
This is pretty much my first time using Javascript so i'm not sure how well I can answer your question. Basically, I am trying to use this API that was provided to me in order to add a "Chat with me" button onto my profile pages. https://support.cometchat.com/documentation/cloud/javascript-api/chatwith/ So I went into the file for my profile pages and added the code: &lt;a href="javascript:void(0)" onclick="javascript:jqcc.cometchat.chatwith(USERID);"&gt;Chat with me&lt;a&gt; But I also want to use another API they provided: https://support.cometchat.com/documentation/cloud/javascript-api/getuserid/ This will provide the User ID that I need for the first API. I am adding all this code onto a file on my website so I guess the answer to your question would be that the endpoints are already setup since I didn't make the API myself and I am just adding the code that they provided.
 var audio = new Audio() var aac = document.createElement('source') aac.type = 'audio/mp4' aac.src = 'audio.mp4' audio.appendChild(aac) var ogg = document.createElement('source') ogg.type = 'audio/ogg' ogg.src = 'audio.ogg' audio.appendChild(ogg) audio.play()
`appids.push(response[i].id);` what's `appids` and where is it declared? `var foo = boo.function(;` what is this? I'd recommend starting at http://javascript.info 
If you're interested in Vue 2 and Vuex, I can't recommend this course enough: [Vue JS 2 - The Complete Guide (incl. Vue Router &amp; Vuex)](https://www.udemy.com/vuejs-2-the-complete-guide/) And it's only $10 for the next 6 days.
Those are typical questions for a JS interview, but I wouldn't expect a junior developer to know all/any of those. So, good to know, but don't get frustrated or depressed if you're not an expert in these things yet.
Xcode and safari can simulate mobile devices and allow you to inspect. My other technique was using Vagrant share to my mobile device.
Yeah, to some extent, junior development interviews are really just "are you a moron?" Which, to be fair, is a test a *lot* of people can't pass. I'd rather have a junior developer who can think clearly and is confident about what they know and what they need to learn above a person who can recite some rote answers. Like, a junior developer can tell me why one might use Postgres over Mongo or vice versa but they won't *understand* it in the way that a dev who ran up against limitations in one or the other would understand it. 
I am using nodejs to crop my images too - but to be honest - it's just my laziness to learn - because you can achieve that with one liners of imagemagick.
In a nutshell const myAwesomeLib = {} myAwesomeLib.foo = function() {} myAwesomeLib.foo.bar = function() {} If the behavior of foo.bar depends on the behavior of foo, then: const myAwesomeLib = {} function createVariation(name) { myAwesomeLib[name]= function() {console.log(name)} myAwesomeLib[name].bar = function() {console.log(name, 'bar')} } createVariation('blue') createVariation('yellow') 
instead of just downvoting, why not share thoughts? haters gonna hate?
Basically this. Functions in JavaScript are first-class objects, so you can add properties to them. var chalk = {} chalk.blue = function(str) { console.log('BLUE ' + str) } // We are adding a property to the chalk.blue function chalk.blue.bold = function(str) { console.log('BOLD and BLUE ' + str) } chalk.blue('hi') // BLUE hi chalk.blue.bold('hi') // BOLD and BLUE hi
Yeah I agree. Don't know if I would go so far as to call people morons (not publicly anyway lol). I think the reasons why at my graduate job we didn't get asked anything language-specific was because they wouldn't expect much real world experience from grads. Instead it was all data structures and algorithms, which just showed that you studied a relevant degree or have similar knowledge and that you actually paid attention in classes, both things you want your juniors to be doing. I know the front end devs, which I guess the majority of people here are, had wildly different interviews though. Theirs involved a lot of UX stuff which I just had no clue about.
So there isn't a way to do it cleverly, like having `chalk.blue` sometimes return `this` (with some modifications) and sometimes just return a modified string?
An ugly way to do this jqcc.cometchat.chatWith(jqcc.cometchat.getUserID());
I've also put a request out for code review, more formally here: https://codereview.stackexchange.com/questions/173987/a-generic-higher-order-react-component-which-allows-undo-and-redo
if(result=="")
It doesn't need to be pretty lol. So this might be a dumb question, but hovering over the button on the profile page shows "javascript:void(0)" in the bottom left box of chrome. Clicking the button does not do anything. Any suggestions?
Oh, nice. This solves one of my biggest gripes with reselect - no easy no to create &amp; compose keyed selectors.
I missed that you could inspect in xcode. I'll have to try that. Thanks!
Currently don't have a laptop or desktop available to me so I can't play with the API and test the functions to see the response data. The issue is due to the asynchronous nature of Javascript. getUserID() hasn't had a response from the server before chatWith() is being invoked. As a result its calling chatWith(null) and you get that error. edit: You can test it out by calling `console.log(jqcc.cometchat.getUserID())` to see if it returns null
Look into javascript proxies 
its getters returning functions which themselves have getters returning functions etc. At least I'm assuming chalk is doing that based on your examples. const api = ['blue', 'bold'] const chalk = addApi({}, api) console.log(chalk.blue.bold('bar')) //-&gt; {blue:true, bold:true, args:bar} console.log(chalk.blue('foo')) //-&gt; {blue:true, args:foo} function addApi (target, api, state) { const isRoot = !state return api.reduce((target, name) =&gt; { Object.defineProperty( target, name, { get () { if (isRoot) { state = {} // reset state for first in chain } state[name] = true // what a property does in a chain function call(args) { // what the chain end method does when called state.args = args return state // final return state } addApi(call, api, state) // adds methods to this link in chain return call } }) return target }, target) } 
You're going to want to use promises to invoke getUserID() and then chatWith() with the data returned from the response of getUserID(). If this is your first time dealing with Javascript, it might seem way over your head, but its the best way to make API calls that need to done synchronously.
I have just deployed this feature now! Check it out: http://jsremotely.com/ I am also working on tags, and grouping the jobs. More things to come, stay tuned!
Hey, thanks for the support! I'm putting together a Patreon at the moment yeah. The ask will be quite high though. For me to be able to really dedicate the huge amounts of time needed to make my vision into reality, I need to be able to work on it at least part time. Right now I'm building this 100% in my spare time, which is very little. But yes, any financial help will be awesome! I'm not looking for contributors right now but I'll post on here in the future if I am. Thanks again!
It's not very readable. I mean functions `_updateThread` and `_moveIndex` - I don't know what's happen here. 
Thanks, I'll consider renaming, anything else unreadable? 
Thanks! I'll check it out!
Renaming can be good if name is the problem. Probably it is (why `update` thread? what `thread`?), but I think also using spread operator is very unreadable. Maybe I am old fashioned, but I still think that slice or Object.assign is more readable than `...`. It's maybe because `...` makes me think and causes a bigger mental overhead. I do use `...` in function arguments though. 
I'll look into promises and see if that is something I am able to do
Ya, glad you checked it out. And the keyed part of the selector can be any valid key on an ES6 map. Let me know if you have any questions/feedback please.
Agreed, although a general timeout can be used in addition to this in case there is a promise that never ends up resolving/rejecting
I formatted the code so it is readable and added comments: function makeLine(length) { // Initialize a variable as an empty string which we will add more to var line = ""; // Loop n times, where n is the provided length argument for (var j = 1; j &lt;= length; j++) { // Each iteration of the loop, add an asterisk and a space to the end of our line variable // This is a shorter version of: line = line + "* " line += "* "; } // Now that the loop is finished and n asterisks/spaces have been added to the line, // we return a string containing the contents of our line var, plus a newline character at the end return line + "\n" } In pseudo code this reads like: When told to make a line with length N: Start with an empty string of (zero) characters Do this N times: Add an asterisk character and a space character to the end of the string Add a newline character to the end of the string Respond with the resulting fully-constructed string
Hey and welcome to the world of programming! This is a simple function, it initiates a variable as empty string, then loops as many times as the input supplied as the argument. For each loop, it appends another star and space character to the variable. After the cycle, it appends "\n" - character for end-of-line - to the variable, and returns it to the caller. So if you call makeLine(3), you get "* * * " from that function. With the end of quote at new line.
Sorry for this guys but what chances for a student living in fucking Africa especially "Sudan " to work as aprogramer in any American company, any where just a way from fucking Africa, dudes , we can't choose our countrys 😔
I watched it and I couldn't believe my eyes! Especially the tips at 02:05. My skills shot through the roof! Thanks, Dr. Scholls!
Thanks so much. Just when you think you're making progress something so simple as this stumps me. 
All of this is interesting stuff. And well thought through. Just seems like a lot of work just to avoid writing a native app. Still good read.
Yep, classic asynchronous js problem. I'd just add a callback to get(), and call it at the end getJson's callback.
Reading your blog I found some similarities I published a tool As well, hope some can use it! https://github.com/pieterhoekstra/ip2range
You can use js with Unity as well. 
Verbing weirds language.
&gt; Redux and MobX are way more complex than they need to be. Exactly. Vuex is simply a joy to use.
Making a tutorial for Vuex is tough. If you just watch the tutorial, you really don't get the sense of calm that Vuex can bring to chaos. Totally worth learning and implementing. https://twitter.com/dan_abramov/status/704304462739939328?lang=en
Thought I'd make a configurable version. The callback here in `createChainable` lets you decide how you want to treat property access/method calls so you don't have to worry about messing with the innards to do what you're looking for. const api = ['blue', 'bold'] const chalk = createChainable(api, (state, name, args) =&gt; { if (name) { // exists when accessed as a property (blue or bold etc.) state[name] = true } if (args) { // exists when called (['bar'] or ['foo'], etc.) state.args = args.join(',') } return state // result returned if this was a call }) console.log(chalk.blue.bold('bar')) //-&gt; {blue:true, bold:true, args:bar} console.log(chalk.blue('foo')) //-&gt; {blue:true, args:foo} function createChainable (api, callback, /* private: */ chain, state) { const isRoot = !chain if (isRoot) { chain = (...args) =&gt; callback({}, null, args) } return api.reduce((chain, name) =&gt; Object.defineProperty(chain, name, { get () { let chainState = state || {} if (isRoot) { chain = createChainable(api, callback, (...args) =&gt; callback(chainState, name, args), chainState) } callback(chainState, name, null) return chain } }), chain) }
You can but it's not standard Javascript. Unity uses its own dialect, and most of the community seems to have rallied around C# so most of the learning resources assume you're using C#. It kind of reminds me of how Angular 2 and 4 can technically be written in plain javascript, but almost everyone uses typescript.
I'm not allowed to comment on vue.js posts anymore :{ somebody got upset at me because I like vue.js :{
Definitely worth the $10.
Does your html render at 60fps? MINE DOES!
Same shit they ask people with 20 years experience. Also be prepared to invent something you've never heard of before.
I didn't realize how useful it would be until well after I started using it. I started just to learn and see what it did but it quickly became invaluable. 
We're still supporting it. I can't promise what's going to happen in a year or two but ideally we'll gain contributors for every one that we lose. 
This looks like a poorman's Elm. 
This post's comments are a good read regarding state management: https://www.reddit.com/r/javascript/comments/67xdyg/vue_or_react_for_someone_who_is_experienced_with/
If you already thought they were clueless, why would you be interviewing them?
This, and play around with arrays. A lot.
I know this is good criticism but im sure it came a little too harsh. Just saying
For me, it is still worth the effort. If you only look at the advantages over es6, what is left ist the type system. It really helps preventing runtime errors. Ist also gives you great tooling like auto-completion and suggestion. It also helps with refactoring. In a large code base, these features are key. I know there are options for plain JS that offer that, as well, but TS is much more accurate and relyable. Typescript ist still ahead of the standard. Things like async/await just got announced and an consistent implementation accross all browsers ist probably years away. With Typescript, you can use these features today, without having to sorry about compability. So that is my oppinion. But I also agree with you, that es6 took some of Typescript's arguments away.
I'm a big user of redux, love vue, love react, etc =&gt; but really this doesn't seem that much more simple to me than redux or just understanding flux in general or even building your own in-house process. Once you understand general state management, all of these libraries or any solution in between are pretty trivial.
What you're trying will not work. This is because the getUserID() function will return the logged in user's ID. And then the chatWith() function will load a chat box for that user ID. So effectively you will create a chat box for the same user who is logged in- in other words, the user will end up chatting with him/herself. You need to get the USERID for chatWith() function from your base software. Your developer will be able to help you find this. Feel free to create a support ticket if you need help. Please note that we do not actively monitor reddit; so you may not receive a response back if you reply here :)
This is very helpful! I'll see if I can get it to work, and if not then I'll create a ticket
This is a super dope project! :) Will definitely check it out
Thanks, man! :) And I hope you like it!
that's nightmare fuel right there
Not allowed by who? Your daddy?? I'm quite curious what you mean by that. You just commented in a thread about vue after all.
Go on...
Nunustudio looks great! Will try.
You'd have to give an example but what you are saying seems impossible. In the original example `chalk.blue` always evaluates to a function that has extra properties. The context doesn't matter.
&gt; At least I'm assuming chalk is doing that based on your examples. chalk API is immutable, it creates a new state when accessing properties
This is going to take some time for me to parse through and comprehend!
Some jsbin or codepen would be helpful to understand your issue...
I mean the interviewers, not the interviewee. It's a bad test, that people still use. Then they over analyze it, and think they can learn something about the coder. It's dumb, and needs to stop.
I guess at least for redux, this sentiment comes from the concepts of functional programming used, which are not technically complex, but alien tomany "traditional" programmers. It requires a change of thinking in a couple of places, but once you "get it", its pretty simple, there's not a lot of moving parts involved. Vuex might seem more appealing to those people because mutating some piece of data is a better known concept so it's maybe a bit more approachable.
In a way, that's true, Elm was in fact one of the inspirtions for vuex: &gt; This is the basic idea behind Vuex, inspired by Flux, Redux and The Elm Architecture. https://vuex.vuejs.org/en/intro.html
Huuuum. He just missed the best resizing tool for nodejs: sharp (vips bindings for nodejs). Need an express proxy ? Use sharpie.
Considering that a few seconds on Google located it, I’m sure you’ve come across this already: http://data-alabama.opendata.arcgis.com The second thing listed there is “Lake Depth” (although it reported having trouble loading). More and more states and cities are starting to make data they collect publicly available through APIs. 
I was actually running into some strange errors with mp4's a while ago. What fixed it for me was re-encoding the video using known supported codecs (H.264 &amp; AAC). See if you can re-encoding one of the webm's and try opening it in the browser. It may just be that the encoding is wonky.
Where are your variables `e` and `num` coming from?
I should preface this with an explanation of the way it looks. First, this was started because an interviewer had asked me how I would implement Minesweeper in pure Javascript. I answered the question as best as I could in 30 minutes, even creating a simple table and a randomized mine filler, but I couldn't complete the task. I wanted to complete that challenge, making a clone which is as similar as possible to the regular Minesweeper by Microsoft. The design is intentionally ugly for now. The goal was to make it work, make it as ugly as the original, and do this quickly. I could easily spend days on the CSS, making it look great, but that wasn't my goal. The Javascript needs to be cleaned up as well. Again, the goal was to get this done quickly and make it work. Whether I could optimize the structure with forEach loops instead of for loops, or whether I should use full ES6 syntax is an afterthought. I just did what was comfortable at the time to solve the problem. There are likely a few places where I can normalize some code into a function to reduce duplication, but those optimizations can come later. I really hope you enjoy this little challenge. Please feel free to fork it and improve the code yourself. Changes yet to land: - It's possible to lose on the first pick. I don't think Microsoft's Minesweeper allowed you to lose on the first pick, so I would need to prevent mine generation until a choice had been made and exclude that choice from getting a mine. - A timer! It's no use to win if you can't challenge yourself. - Scorecards? - Hard is too damn hard! How to make Hard just hard enough without making it impossible? - Better CSS
Very useful. It's perfect for remote edit ! Nice work
[ES6 Proxy](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Proxy) makes this a lot easier and more flexible. You can use any property name without defining it beforehand. I've made a wrapper for [debug](https://www.npmjs.com/package/debug) that lets you create levels like `debug.app()` `debug.app.log(msg)` `debug.app.something(msg)` etc: [debug-any-level](https://github.com/laggingreflex/debug-any-level)
You really don't need to tack on two more dependencies that're both less than a hundred lines long. Just look at the documentation for the functions they use and check for the window property accordingly.
I'm still a bit sad that Atom can't run in the browser. Would be so amazing.
I'd go with this emoji: 💣 You can still flag bomb tiles after you've lost the game. The markup is leaky. data-is-mine=true/false. &gt; an interviewer had asked me how I would implement Minesweeper in pure Javascript. I answered the question as best as I could in 30 minutes [...] but I couldn't complete the task. Eh. Implementing Minesweeper in 30 minutes is ridiculous. You needed over 300 lines so far and it's not like there is anything wrong with your implementation. Just typing that much code already takes about half an hour.
Thank you
Yeah, that makes sense. Version 3 it is: const api = ['blue', 'bold'] const chalk = createChainable(api, (path, args) =&gt; { const result = path.reduce((result, name) =&gt; (result[name] = true, result), {}) result.args = args.join(',') return result }) const blue = chalk.blue; console.log(blue.bold('bar')) //-&gt; {blue:true, bold:true, args:bar} console.log(blue('foo')) //-&gt; {blue:true, args:foo} function createChainable (api, callback, /* private: */ chain = (...args) =&gt; callback([], args), path = []) { return api.reduce((chain, name) =&gt; Object.defineProperty(chain, name, { get () { const chainPath = path.concat(name) return createChainable(api, callback, (...args) =&gt; callback(chainPath, args), chainPath) } }), chain) } This version reduces callback calls from including each access to instead only on the final call, providing the access as an array of names (`path`).
I'm glad I'm not the only one working on similar project :) having an editor in the browser allows for more flexibility than just packing all in Electron. Will your project allow for integrating it into existing website/web application? Let's assume somebody makes a HTML5 game editor and wants to add IDE functionality (I don't mean simply Monaco/CodeMirror/Ace but full fledged IDE with tabs, file tree, searching in project etc.). Would it be possible with wcode? I also think there is no point in making another monolithic code editor and editors of the future should be more modular. For example very thin "IDE core" and very simple API protocols, and you plug anything you like, choose "IDE components" you like etc. This part is missing. There is still lack of universal "IDE core" or reusable IDE components, or universal editor plugin standard (I think it's bad that every editor has its own plugin standard, and for example Atom plugins don't work in VSCode). Maybe it's beyond scope of your project, but I'm just saying, what I would like to see in editors as a whole
I had already used that method, and it failed. I figured out, though, that the driver runs all functions asynchronously. I posted another answer on that link about using the `.then/.catch` method, which *actually* works.
Invent something I've never heard of before? What do you mean?
Thanks so much, ill definitely use that.
Thanks man! I'll do that.
I'm pretty sure you can lose on first pick.
I'll break it down. :) I should start by mentioning this approach is a little different than the original, and not just in that this one uses a callback. First off, the "chalk" object here is itself callable (a function) rather than just being an object like before. const chalk = addApi({}, api) chalk() // Nope. Error // vs. const chalk = createChainable(api, ...) chalk() // Ok Well, technically, you could make chalk callable in the first one because you're passing in the first object, and you could pass a function there. So I guess, really, the difference is controlling the first object vs not ;) Secondly, the original added the API to a new function each time one was returned from a getter. So first, `chalk` was given all the methods in `api` (as getters), then when you accessed one of those properties from the getter, it created a new function and added the api again. chalk.blue // addApi(blue) chalk.blue.bold // addApi(blue) + addApi(bold) This second version only does the "add api" part once after the original `chalk`, then that function gets reused on each additional property access after that. So even with long paths, there'd only be 1 addApi call and that function keeps getting returned after each following access. I did this because of how I was treating each use off of `chalk` as representing a new state that is maintained with the resulting chain. chalk.blue.bold.foo.bar // addApi(blue) + reuse blue for each additional access Of course as /u/localvoid pointed out, chalk isn't as stateful as my examples - which makes sense; it shouldn't be. So I made a [version 3](https://www.reddit.com/r/javascript/comments/6w12m6/how_did_chalk_create_their_api/dm5dxry/) which goes back to adding the api to each property access so that each access maintains a separate state (and even though the first example added the api to each access, it still kept a single state between them). In that version "state" is effectively represented as a `path` array since that version also only calls the callback in the end when the last property is called as a function. I'll still break down version 2, the one you replied to. To start off there's the `createChainable` function which creates the chalk-like object function createChainable (api, callback, /* private: */ chain, state) { ... } This is a recursive function which calls itself. The user should only be using the `api` and `callback` parameters, while the remaining `chain` and `state` are used in internal, recursive calls. `api` represents an array of properties that are expected to exist on this "chainable" object being created, each of which can be called like a function or be used to access properties of the same name. `callback` is used to let you do something when a property access is made or when one is called as a function. const isRoot = !chain if (isRoot) { chain = (...args) =&gt; callback({}, null, args) } Given that the user shouldn't supply a `chain` argument, we can know if this call is the original, root call used to create the chalk object by seeing if it exists. If it doesn't, we create the original function to represent the base root object - or what would get assigned to chalk - and assign it to `chain`. If called, this provides an empty state for the object, null for the name (since no property access occurred, there is no name), and whatever arguments were passed in. So this gets called if you simply did chalk() With this object (function) created, we can add properties to it based on what was provided in `api`. This is done through [Object.defineProperty](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty). `defineProperty` lets you add getter properties to objects so that accessing a property can call a function. const obj = {} Object.defineProperty(obj, 'prop', { get () { console.log('property access calling a function!') } }) obj.prop // "property access calling a function!" This is the what makes all of this possible - have property access call a function so that you can update a state that can be built up as you access more properties. [reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce) is used to loop through the `api` array, adding a getter for each property name in that array to our original chain object. The result, which is just the chain object again (chain is passed in to `reduce` then given to `defineProperty` which returns it back to the reduce callback which ultimately gets returned from the root `reduce` call), becomes `chalk`. return api.reduce((chain, name) =&gt; Object.defineProperty(chain, name, { // ... }), chain) Whenever one of those properties is accessed from chalk, the `get` function gets called. And this is where it gets funky. get () { let chainState = state || {} if (isRoot) { chain = createChainable(api, callback, (...args) =&gt; callback(chainState, name, args), chainState) } callback(chainState, name, null) return chain } Starting at the top: let chainState = state || {} `chainState` represents the state in a chain started from the root, or `chalk`. Because our first call of `createChainable`, where `isRoot` is true, has no state argument, we create a new state for the chain if it doesn't exist by setting it to a new object `{}` (a falsy `state` returns the `{}` after `||`). This object is the object being used throughout the rest of the chain, and maintains any data you decide to add to it through the callbacks it gets passed to. if (isRoot) { chain = createChainable(api, callback, (...args) =&gt; callback(chainState, name, args), chainState) } Next, if this is the root call from `chalk`, we want to create a new `chain` object to represent the functions and state for a new set of properties and eventual function call. This does so by calling `createChainable` one more time, using the same `api` and `callback` as the user provided, but now passing in a new version of `chain` (`(...args) =&gt; callback(chainState, name, args)`) - one without an empty state like we used for `chalk()` - and the new `chainState` value which, here, being root, is the new `{}`. For `chalk.blue`, this new `chain` is the `blue` object. We only create this if `isRoot` is true, because as I mentioned before, this second version reuses that same function for each additional property access after the first. callback(chainState, name, null) This is where the callback is called to indicate a property access has been made. The name is passed in to tell which property is accessed, but args are not because a property access is, itself, not a function call. Even if you did this: chalk.blue() that's two different steps. 1) access the `blue` property, get its value and return it and 2) given that returned value, invoke it. The `callback` here represents the getting of the property alone. The returning of the function - which you need if you ever intend to call it - happens after the callback: return chain For a root property access call from `chalk`, this becomes the new `chain` object we just created. For any other call after that, its the `chain` argument passed into that call from the recursive `createChainable` that made that chain. chalk.blue // blue = if (isRoot) { chain = ... } chain chalk.blue.bold // bold = createChainable (api, callback, chain, state) { ... } chain, which is the same as blue With every first access (e.g. `blue`), a new `chainState` and new `chain` is created. After that, each of those are the same because each access reuses the `chain` and `state` passed in to the `createChainable` that created that new `chain`. And there you have it. It's simple, but not easy. Version 3 might even be a little easier to understand because it doesn't try to maintain state or attempt to reduce api-creation overhead by reusing the chain after the first access. Its a better approach anyway. 
Honestly, I never thought in this direction, but it really seems to be a good point. As this project started more like a proof-of-concept, certainly it still very far from the possibility to be that modular, but I loved the idea. In this first version, essentially it's a express server running the application statically inside and communicating through websockets, and they are very coupled right now (or I'd take much more time to make it work and wouldn't be able to present a MVP soon). But I'm intended to break it into two separate pieces that can work independently later. So probably achieving your objective may be achievable. If you want, you could open an issue for this in the repository and we can keep on maturating it, I'll be glad to keep.on discussing it further.
Thanks, man!
They will ask you a ridiculous question that nobody can answer. and then expect you to answer it.
someone bitched to the mods and wanted me banned 
Does this use the same engine as VSCode? It's called Monaco. It can run in the browser. EDIT: yes it does I should have looked at the github read me :P
Yes. The actual code editor is Microsoft's Monaco. It's the best I've found in the last years, and it'd be a very dumb solution to start something from the scratch, I think.
Yes, and it'd have spared me two full weeks of work :P
Yeah it's pretty much the best non-native editor around. I've tried forwarding emacs-daemon sessions over a network but it doesn't work well at all haha. Perhaps styling a terminal over nodejs that run emacs would be ok.
Thanks man! And a built-in terminal is a must for me too. This is one of the next features I'm willing to implement. Today I'm a VSCode user, and I always run every command I need in it's terminal. Wouldn't live well with this alternative without it haha
ah I see. Wouldn't the best way to answer that to say "I'm not sure but I would assume it would be this" instead of just inventing something on the spot?
No. That means you suck.
I created Yode to introduce a new way of code editing. The idea is to enable your favorite editor to edit smaller parts of your code not just a whole file. As a proof of concept the prototype enables you to edit functions in addition to files. It also uses a new way of window layout to remove the need for resizing splits. Check out the github readme for detailed info: https://github.com/hoschi/yode
Pick a project and fumble your way through making it.
I made [this](https://hashtags.chat/) anonymous Slack/Discord-style web app using React and Firebase. Would love to hear what you think!
Is this open source? Nice layout!
There's also much less boilerplate involved.
I thought they drastically improved it recently
As far as IDE's go, jetBrains makes great stuff. 
Bug report: Any size below 10 will generate an empty canvas every time. http://i.imgur.com/j0PKMxj.png
If you have a bot feel free to post in /r/remotejs
Thank you! It's still not open source, I've built it for 2 weekends and you probably don't want to read that code lol :D I'll probably open source it in next couple weeks. Want to refactor things and add couple more feature. Thanks for understanding and support! I appreciate!
Hey, thanks a lot! I have a twitter bot right now, it's posting on https://twitter.com/jsremotely. I am going to update that code and post on https://www.reddit.com/r/remotejs/. Thanks for your support!
PHP, they're strings. I have the JavaScript embedded via echo 
Spoiler: It's line 77. &gt; let numMines = Math.floor(board[i].length * chance); &gt; Math.floor(9 * 0.1) 0 I'd probably use a [Fisher-Yates](https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle) based algorithm. Create a 10 \* 10 (or whatever) long array, fill it with... say... 10 times true and 90 times false, shuffle it, and then use this to initialize the board. This way there will be exactly 10 mines. This would be more random that the currently used algorithm, which places exactly 2 mines per line if size is 10 and difficulty is easy. I'm not sure if there are established rules for this. E.g. in Tetris, you typically play through a shuffled set of 2x7 pieces. So, you can at most get the same piece 4 times in a row.
I've been following OP for a while because he/she posts crazy shit all over the place and yeah, they're pretty hopeless, sadly. Good on you for offering helpful advice (unlike me).
Thanks. I considered that t he html shows the answer but decided to ignore that for now. A better implementation would be to store the bomb locations in another array. I'll consider this for an improvement.
Thanks. I had considered the randomization algorithm to be extremely naive at the time but figured I'd fix that later. I appreciate your suggestion and the bug report above. Thanks for suggesting a different algorithm, I'll work on improving it soon.
You could also just slightly tweak your algorithm by making it work across the entire board instead of doing this row-wise. &gt; Math.random() * 10 * 10 | 0 79 &gt; 79 % 10 9 &gt; 79 / 10 | 0 7 You'd determine the X/Y coords like that and just have one loop to place all N mines.
This is Reddit. Reddit only likes React.
I shouldn't have even listed react since they already dominate. I do feel like the smart money is on vue though.
Hi /u/suckmydb, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Hi /u/LostMyCharm, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Well, you're not banned. So I don't know what you're talking about either.
What is complex about MobX?
No, in the original mine sweeper you cannot loose on the first pick. Even on the hardest difficulty, it waits to generate the layout until after your first pick.
give it a few years "proved its success" is a bold statement you can write solid architecture with most any framework. react/redux guides your implementation in a general direction, but talented engineers have been writing code that accomplished similar things for years. there will be another framework after this, and another, and another. learning about architecture isnt about picking up frameworks. learning about architecture is learning the how and why of many frameworks, and understanding how you can implement solid fundamental principles in *any* framework.
perhaps r/java would be a better place to post? (java =/= javascript)
seems like some teen drama.
No no, there were a few Medium articles on why React is now terrible if you're startup, or ever want to be acquired. Drop in replacements to React are the new hotness, to avoid React's licensing issues.
more javascript drama
This should be helpful
I can't even win at 4x4 easy minesweeper...
Minesweeper is pretty easy until you get into a deadlock situation where you have to guess. Each number corresponds to how many adjacent squares have a mine. If each square has 8 adjacent squares, then the number can be from 0-8 (where 0 is clear and will attempt to open up other 0 squares beside it. If you free up a corner square which is lined with 1's then you know that the corner is a mine. If a 1 touches more than one square, and you've already identified the mine, then you know that you can click on any other square touching that 1. You would right-click on the mine square to mark it with a flag of course, or a question mark if you're unsure. The same logic applies to 2, 3, and 4, where all you have to do is count the number of known mines touching that square, or unknown squares, and see if it corresponds to the number shown.
I thought I remembered dying on the first click before, but you're right.
Source on why it's terrible? Curious
And neither are erlang
For example that with Vuex you don't need to use annotations or observers in your code. It integrates seamlessly with Vue's reactive system.
If you are using an iPhone with a mac you can do the following 1) go to the settings of your iPhone 2) select safari &gt; advanced &gt; and toggle "web inspector" on 3) go to safari on your desktop and somewhere in the settings toggle "show developer menu" on (or something similar) 4) Connect your iPhone via USB to your Mac and open the desired webpage in safari on your iPhone 5) in the safari menu on your Mac access the developer menu, find your device and click the desired page. This will give you safari's inspector but for your iphones safari I'm pretty sure chrome has a similar feature under the devices tab if your connect an android phone. 
Why do a poll then?
Not sure what your real question is, but it looks like you should start by adding return result; At the bottom of your filterObj function.
This is javascript. Frameworks are only good for 1-2 years max. We're going on 3 almost with react so it'll be dead soon.
Freecodecamp IMO
You must be trolling. Obviously, that's a completely nonsensical way to vet a framework. And even if it was, Vue is not much newer than React.
He's being tongue-in-cheek. It was the flavor of the week to write a blog post about it when Apache decided not to use it for legal reasons. Plenty of other companies use it, including the big ones (Microsoft, Google, etc), so there's no reason to be concerned unless you want to be acquired by Apache. 
You must be new to javascript.
Awesome, that's great to know! 
Sure, about 12 years now. For what it's worth I feel like the sentiment of "javascript changes all the time, get used to it" is actually something frequently taught to newcomers of javascript. It's not wrong at all, but it's not something I find seasoned javascript developers complaining about. I'm well aware of the framework churn in javascript. I'm looking forward to the day something better comes out. If you look at all the shifts (vanilla -&gt; jquery -&gt; backbone -&gt; angular 1 -&gt; react/etc) they all had a substantial paradigm shift along with them. Vue is fine, but it's not a substantial step away from React, so it's not going to replace it just because it's a bit newer.
It doesn't wait, if there is a mine in the spot you clicked first, the mine is moved to the first free cell, starting at the top left cell, going right then down.
Awesome, I am a big monaco fan and have been swapping out ace installations for my client. Also love that you accept bitcoin for donations. So I guess I can forgive you for using react. Will have to fork and give it a try, maybe contribute(code or coin) if I find it worthy.
Hahahhaha, thanks! I've started with React because this is what I'm using professionaly in the company I'm working, but I'm already thinking about how to remove it :P I know it wasn't the best solution, but my intention at first was just prove a concept, and it was the lib which would make me finish it ASAP right now. But I'm already looking for alternatives for the view layer. If you have any good suggestions, I'm listening ;) And thank you very much for all contribution intention, I'll love whatever kind of help you give!
I could start by saying "I make a javascript function to get the value of the first dropdownbox (#ATID) and use the change method. Everytime the value changes for ATID, I call a method in the controller and pass in the value of the first dropdownlist? The method executes an SQL query to retrieve the selected data for that particular dropdownlist value and returns a JSON value?" What do you call the $.get and $.each in technical terms? If someone could explain how this whole interaction works that would be awesome.
I was sort of kidding about react, it is the standard these days but I just can't get over the bloat, but if you need all the bells and whistles before they get to the browser, you are stuck anyway, but being stuck, I would prefer typescript, more worth the bloat but react/babel seems to rule. I like libraries that work out of the box and I am fine with es5, like vue, knockout, riot, but don't listen to me, I am a vegan, anarchist that runs barefoot so I do not generally relate to the rest of the world and their ways.
&gt;What do you call the $.get and $.each in technical terms? Those are called functions - specifically, jQuery functions. https://api.jquery.com/get/ https://api.jquery.com/each/ ****** The first snip of code uses a JQuery onReady function to add a change listener to an element with id atid. On change, an ajax call is made to the backend to GET some data. The each function processes data as an array, applying a function to each element in that array. In this case, for each data, append an option to a select element.
Have you looked at svelt? That's the only one I've seen lately that includes a paradigm shift. http://blog.debugme.eu/lightweight-javascript-framework-svelte/ https://svelte.technology/blog/frameworks-without-the-framework
On the other hand in Minesweeper for Windows 8, you can lose on first click if you retry the same board.
Hahahaha, I see. But I'm kind of trying to "stop" using react due to Facebook's change in the license. I've been studying some alternatives and liked what I've found. And you aren't won't. I know too many people by here who uses Vue and loves it. They say it's the best case possible.
Technically those are methods of the global $ object which is exposed by jQuery as an alias to the jQuery object itself. $.get calls jQuery.ajax, with 'GET' as the method option. This creates an AJAX request, also referred to as an XMLHTTPRequest. $.each is used to iterate over an array, provided in its first parameter, passing in each item into the function provided in the second parameter, also called a callback. This function also receives the index of the item on the given array. In modern browsers $.each can be exchanged for native Array.forEach, and $.get can be substituted by fetch, however this may not be done by the developer in favour of supporting legacy (a.k.a.: older) browsers, which do not implement those API's natively.
The $.get is an API call and the $.each is an iteration method.
your response is exactly what I was looking for, thanks~ another question, do I say that the list from the method is returned as a JSON result? or JSON object? can the javascript function only understand what's being sent back in JSON?
Absolutely. I was caught in the beginner loop of jumping from one tutorial to another for a long time, and after the initial rush of learning the basic syntax, my progress plateaued. After I started working on my first project I learned an incredible amount about js and software engineering in general. I never really understood the need for centralized state management libraries for example until I built a sizable project and had to pass state up and down long component chains. That's something that's hard to capture in a tutorial but inevitably rears its head in a real world project.
Hey, I made this and would love it if you could try it out and let me know if it works (or not). The reason I made this is because I like viewing PRs and repos in my text editor rather than GitHub's online interface, which I feel limits my ability to move around the codebase.
JSON object is common, or just plain JSON. This javascript function expects the data to be JSON, and won't do anything if the data isn't in the correct format. In practical terms, all returned data is a string- JQuery handles the work of converting the string into the proper data format, JSON, XML, HTML, and do forth.
Svelte is really nice, but it isnt complete yet an for a few things the doku isnt that great. For a personal project i use svelte, for a lroject of my school with a company i use react
not exactly accurate to say it's "an API call". $.get is a shorthand for jQuery's $.ajax method for making a GET request.
Vanilla.js will make a comeback.
You'll still need a framework.
Yeah. I didn't try svelte because there was nobody hiring for it.
It's a GET call to a RESTful API. You're arguing semantics.
Yes. You basically just push to the browser history. https://developer.mozilla.org/en-US/docs/Web/API/History_API The plural sight tutorial “Your first production ready React app” has a great bit about this. I’m sure there’s others as well. 
The `filter` method on arrays accepts a function that must return a boolean. Your function isn't returning a boolean.
The result of your call contains a JSON string which represents a JavaScript object, array, or string, etc.. JQuery will take care of parsing it to an actual JavaScript object for you, before sending it to the success callback. Some people consider "JSON object" (etc.) to be incorrect, since JSON can technically only be a *string representation* of an object, but I'm not sure they deserve to be taken seriously on that point.
I'm not really arguing, just stating a fact. Semantics are particularly important when someone asks to explain specific methods and what they do. I wasn't trying to undermine your comment, just clarify. 
Pretty much. They downvoted everyone away that doesn't constantly praise React and Vue long ago.
If you want realtime, I recommend using canvas. You can draw lines directly on the canvas. Here's an example of a fast use of canvas: http://milk.com/mimu/awkward-js-music/ What kind of charts are you graphing? Line graphs? Do you want to gradually add data to the right end of it, and drop it from the left end? If so, you can get a speedup by only drawing the new data on the right, and shifting the whole existing graph over by that amount to the left, rather than redrawing the whole thing each time.
Hi /u/moving808s, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
oh for fork's sake
This is why you don't have a code of conduct. The hordes will use it against you.
RemindMe! 2 days
I will be messaging you on [**2017-08-29 01:49:20 UTC**](http://www.wolframalpha.com/input/?i=2017-08-29 01:49:20 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/javascript/comments/6w963f/quickly_view_github_repos_and_pullrequests_in/dm6cce6) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/javascript/comments/6w963f/quickly_view_github_repos_and_pullrequests_in/dm6cce6]%0A%0ARemindMe! 2 days) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! dm6ccm7) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Geez...build minesweeper as an interview question? That's a little bit over the top.
In open source, all you need is to be an excellent programmer. Period. Why do people want to tilt the box? I suspect that some people in software who obsess about social issues are NOT good programmers, and cannot come to terms with that. It must be some conspiracy. They need to find their success from another angle, and codes of conduct are their alibi. Edit: If I did have a code of conduct, it would be a mix of Bill and Ted, and George Carlin: Be excellent to one another. 
Git outta town
This reads like a script
This line of theimplementation: map: (transformer) =&gt; !!value ? Maybe.just(transformer(value)) : Maybe.nothing() Because of `!!value`, the maybe will turn into a `nothing` if value is 0, an empty string, or false. Should replace that with `value == null` if you want those values to be preserved. Otherwise, good article on a very useful construct! I have yet to do much exploration with it, blaming laziness.
This isn't a new issue. The recent news was confirmation from React that React isn't changing to something more friendly (as people had hoped). Where I work, we're not allowed to use React for this very reason.
new MyThing() is always better. Why? If your function/object has a name, it is MUCH easier to debug. It will be apparent on stacktraces and/or debugger steps. It will be MyThing rather than just generic Object. 
An open source project does not survive purely on the quality of its code, no more than a bakery can survive purely on the quality of its bread. Users are people. Your fellow programmers are people. If you don't want to deal with people, the job you're looking for isn't developer, it's hermit.
In this case it appears that they will be working on their own code of conduct (instead of actual code).
How well does "hermit" pay? 
*Maybe* I'm missing something here... but what's the overall goal? Is it simply to not get a TypeError from trying to operate on an `undefined` value?
Yes, I'm using line graphs and shifting when adding new data to the right end. I never thought about just canvas thinkin it could be too rudimentary but I will give it a try. Thx!
Didn't they do this already once before?
Again?
So what was actually said that started all this drama?!
Nice. Looks like the toxic element just cleaved itself off.
You need to decide which routes are real (handled by the server), and which are virtual (client side). The simplest case is that all routes fall back to the site.com/index.html. That means that every request to your domain (site.com/some/page/) has a response of the root index.html file. When that html page loads, it needs to check the current URL against known routes. So, you need to embed all the routing data/handlers in that index.html. You can just make an array of routes, loop thru them, and check if route.path == window.location. To summarize: A single index.html file is served for all routes, and when it arrives in the client's browser, it looks at the actual URL to decide how to handle it. All links should then be handled with JavaScript: to update the DOM, and to use history.pushState() to update the URL and history state. The last part is to listen to the popstate event, so that if the user presses the forward/back buttons, you can rematch the new URL, and update to that URL.
A coc is still useless. If people have issues with eachother, these issues should be handled privately, and if possible in person. Github is NOT for social, religious, political or similar topics. It is and must be pure code. The sjw's i see is really a big problem today, and now these people are turning to github. 
 Jesus fuck aren't you people supposed to be working? Not voting on weather some fucking asshole was an asshole earlier? Need to get feelings out if software.
This is what happens when alt left gets involved.
Yep, io.js. It was brief, and they ended up merging back into Node. 
The whole political debate is obviously heavily related, but at the same time kind of tertiary. These people were at-will employees presumptively (maybe not even employees, but voluntary contributors). They have no obligation to work on Node.js, just like we have no obligation to use their fork. 
Take a deep breath and rebase yourself. 
See you guys are pulling these jokes out the 'ol stash, eh?
And you are cherry picking the easiest puns. 
So it's the same group of people?
Apparently one of the senior members of the Node TSC said some things on Twitter that made people feel excluded. I mean, there were some other things brought against them but after researching for a few hours I couldn't find any evidence of anything worse than offending some potential contributors on social media.
No. And last time it was for technical reasons. Io.js was forked because contributors felt node was too slow to adopt es6 features. This is a fork because of feels.
https://medium.com/@rvagg/the-truth-about-rod-vagg-f063f6a53557
Moreover, where does one find this 'hermit' job? Asking for a friend.
&gt; An open source project does not survive purely on the quality of its code Of course it does!
**[Here are some revealing details](https://www.reddit.com/r/webdev/comments/6w5dmj/nodejs_just_got_forked_by_former_governing/dm5kuj6/)** from the discussion about this happening over at r/webdev 
I would argue with you, but I believe that you are the anti-example, that you are an excellent programmer. But your "if" is wrong. You assume that a non-code-of-conduct person is not a people person. That is a wild-ass assumption. Some of the best programmers I have known are women, and I respect the hell out of them. But this this artificially-enforced piece of crap is something from the Soviet era. I will NOT honor something like that. 
[Issue: Reasons and goals for Ayo?](https://github.com/ayojs/ayo/issues/7) [Profile of varjmes, the person answering](https://github.com/varjmes) &gt;trying hard. agender with an accessible agenda. developer. polyam transmasc queer. they/them.
Does anyone have a list of those that stayed and those that left? Curious to compare this to https://github.com/nodejs/node/graphs/contributors
Here's one of the people that left because apparently *someone else* was violating the CoC? I guess only she is allowed to do that. https://twitter.com/maybekatz/status/900414216888139776 &gt; Men are fragile, often incompetent babies with no sense of humor, and I like reminding them of their inferiority. From her profile &gt; Professional Mantagonizer. 
&gt; trying hard. agender with an accessible agenda. developer. polyam transmasc queer. they/them. Literally all I need to know about this project is that this is who's propping it up.
Less feels and more politics. 
Y'all are committed to the puns. 
Or you could just use lodash.get
You are starting with `animals[animals.length]`, which is the element after the last array element. Fix: for (var i = animals.length-1; i &gt;= 0; i--) {
Thanks for the fix! I guess I'm just confused as to why the code given starts executing at i = 3, not i = 2, and working it's way down to 0. Could you explain?
Also consider quality not just quantity. Remember that pronouns drama.
Kat is one of the main folks behind npm, the cli tool. I followed her recently on Twitter, but ended up having to mute her. I don't agree with the extreme statements she makes on Twitter. I'm left-wing, but not *that* left. But I didn't stop using npm because of this. And while I don't exactly feel comfortable contributing to the project now, I also didn't feel the need to fork npm. It works both ways.
Coc is a farce. It is purely a Trojan to enable the hostile takeover of tech projects by political partisans. 
so they are complaining because "he said things I didn't agree with...online...to no one in particular" that is so pathetic. 
GitHubs tag line is "social coding". 
It's a big loss of personnel for Node regardless of whether or not anyone uses Ayo. The whole situation is a reminder of how important it is to get your culture and governance in order when you rely on volunteers to do the work. 
Bad governance hurts code quality. Hopefully Node gets their house in order. If not, there's an alternative now. 
[removed]
Arrays are 0-based var animals= ["cats", "dogs", "pigs"]; animals.length // 3 animals[0]; // cats animals[1]; // dogs animals[2]; // pigs animals[3]; // undefined
[removed]
[removed]
[removed]
Its funny that you are downvoted and I was upvoted, because I agree with you, but was just saying it in a say that is digestable to people who arent motivated by social justice. As if to say, nobody was forcing them to work there, check your privilege, etc
me me big disappointment
What, you expect us to revert to serious discussion *now?*
Ah, surely the comments on Reddit will be tolerant and informed--definitely not a bunch of reactionary children that everyone else on the Internet makes fun of. Now to take a huge sip of coffee and check them out
&gt; Persons of all possible and impossible genders are fragile, often incompetent young persons of all possible and impossible genders Maybe it's inclusive enough now?
Same as git stash git fetch git checkout &lt;branch|commit&gt; ?
This is pushing the limits now.
Social, not social jerking.
Can you list said offending tweets?
&gt; non-binary Fuck off.
ಠ_ಠ
True for projects you're working on, but before installing an external library for my projects, I always check out their code to make sure I'm not using something bad/malicious. It's great for that.
Lovely to see politics taking a role in the code I use for work. Wish we could get that in other aspects of life. Like, maybe people could start a political fight over the brand of toilet paper preferred at my company or have people send me angry letters about how the well water we use is not only no longer acceptable for making lemonade but actually makes us the worst sort of human beings in the world for using it. Super great stuff, all of this drama. Too bad code can't be an objective thing.
Rod goes into more detail about it [here] (https://medium.com/@rvagg/the-truth-about-rod-vagg-f063f6a53557). I haven't found any other tweets of his that would warrant being offended by.
given for (&lt;initialize&gt;; &lt;condition&gt;; &lt;change&gt;) { &lt;body&gt; } `&lt;change&gt;` doesn't happen until after `&lt;body&gt;`. In a while loop it would be: &lt;initialize&gt; while (&lt;condition&gt;) { &lt;body&gt; &lt;change&gt; } So to start, `i` is `animals.length` when evaluating `animals[i]` in the body which is not a valid index resulting in `undefined`. When starting a loop like this, you'll want to initialize `i` to the first valid index, `animals.length - 1`.
You have to stay in your room until the hermit fairy comes and offers you the job. But the hermit fairy sees all, so no cheating by going outside, showering, or changing underwear until the fairy arrives.
isn't it weird how all of this drama only happens with javascript developers? 
There's already /r/learnjavascript which seems like it might fit the bill?
So if these resources exist, why don't the /r/JavaScript mods require all help topics to be posted there?
What a bloody waste of time. The article seems to be one long, biased diatribe over nothing. 
Canvas is way faster. When you manipulate the DOM, browsers have to update other things, that depend on the DOM according to the DOM spec. You don't need those things.
Nothing that involves people is an objective thing. 
Why does someone else's personal identity upset you so much?
This actually seems like the best thing that could have happened to it, the mob has left - and all it took was [a tweet](https://twitter.com/rvagg/status/887652116524707841) they didn't agree with. 
I read stuff like this and feel very out of the loop when it comes to social issues. From my limited perspective, this is a bunch of people being upset with their colleagues because they didn't like what they said or thought. I could be a callous jerk, but this is weird. Without specifics (very few are given in this article, the various blog posts, and the tweets), I have no idea what's going on.
I wish there was a stronger more descriptive word than pathetic here.
Don't cut yourself on that edge
I'm consistently surprised at how immature and unprofessional a large portion of the Node.js governance team is. Hopefully, all of the unprofessional ones have left for Ayo and Node can actually focus on _making Node better_.
I agree. I would also prefer if this sub focused on interesting news rather than endless beginner questions and "How to use &lt;basic language feature&gt;" blog posts.
I'm tagging out. This has gone too far. 
right. nowhere fast. FYI to anyone listening: trans? gay? bi? ugly? purple? changed name to an equation? Don't care. I don't mean like "i don't care about you" what i mean is that it in no way figures in to how I interact with you or anything I'm doing or saying in that regard. My apathy is pure acceptance. On the other hand, demanding that I pay attention to... whatever... by putting it on your profile isn't a statement of ... whatever... it's attention seeking. All that extra bullshit is just ***bullshit***. All the profile needed was "Hi, I'm James". And then moving on to Get Things Done.
pc culture strikes
it's not about the identity. I don't care about your identity, whatever it is. What I care about is working code. A personality description doesn't belong in the comments of a PR.
yyeeeaahhh... Right. Node, partnered by a who's who of the tech industry, now has an alternative, backed by people whose feelings were hurt, and no mission statement or project goals. This entire exercise is a waste of spirit. 
give it a rest.
Has it? Pull yourself together. 
Because it has no place in this context. 
&gt; Many of the complaints, since removed from the committee's pages, **document a litany of violations of the community's code of conduct**. No, they did not. They documented accusations without a shred of proof in sight. Before Rod wrote his rebuttal, I thought this looked like an attack on someone some people just didn't like. Afterwards, it seemed even more that way. The whole article linked here is written in a way that makes me think the author is close friends with the people who started Ayo. Does anyone have any kind of link that details what Rod did do wrong and why he's a horrible person?
It's worth mentioning that this is an article called "The Truth about Rod Vagg" written by… Rod Vagg. So probably not particularly fair. (This is a 20 minute read so I haven't read it, and I also have no idea what all the drama is about and--at least for the moment--have no opinion on it.)
Create website and convert it to app, with https://www.appstrand.com/ or http://gonative.io/
Its about functional style. Two important aspects of it is to reduce sideeffects and to work with immutable data: when you look at the chain of map functions in the article, you can see, that each function takes a value and returns a value (they dont overwrite any variable directly). How to store the new value is handled by "maybe". So "maybe" is more than just a way to handle null checks - but I guess the author will talk about this in later articles...
Come one guys, let not get into conflicts here.
I'm in*diff*erent to this.
There was one recently with drupal (php) because someone found out a contributor was into some extreme dom/sub relationship, they booted him. So much for being inclusive.
Good point, I've updated the article to fix this.
The main benefits for me are being able to safely create chains of functions without having to null check at each stage. If we wanted to do something equivalent without the maybe construct, for example, if we used a resolved Promise, then we would have to check each time: const a = { b: { c: "value } }; Promise.resolve(a) .then(a =&gt; a === null ? null : a.b) .then(b =&gt; b === null ? null : b.c) .then(val =&gt; val === null ? null : val + " appendedString"); versus Maybe.chain( a =&gt; a.b, b =&gt; b.c, c =&gt; c + " appendedString" )(Maybe.just(a)); Using a maybe then the null checking logic is encapsulated within the object being operated upon - we can never forget about null checking, and it is always explicit that the returned value might be null. A nice additional benefit is that by removing the null checking our composed functions are easier to understand, and our code reads much more easily. Personally if I was looking through a codebase I think it would be much faster to understand what the second example was intending.
Added some cool feedback animations to game engine which uses three, react and, for this part, animejs. You can check them out [here](https://imgur.com/gallery/n3dNV)
Can't find it on my phone, but I'm pretty sure there is an ecmascript proposal so we can have a symbol to check a.b.c in your example directly. This looked promising, I'm usually using lodash.get but it makes me sad I have to import it if I don't want to write unbearable ifs in my code. :(
[Optional Chaining](https://github.com/tc39/proposal-optional-chaining) might be the one? I think that would be nice in some situations, but that a functional data structure like Maybe can offer other benefits as well. I'm planning to write a second part to this in the next week which can cover some of these, like `withDefault` and mapping arrays of maybes.
There's nothing 'lefty' about that attitude.
📺 Check out live demo https://www.webpackbin.com/bins/-KsUVUj_IHaULBEW0oKx
Seriously, and if they left over butt hurts instead of legitimate concerns, then Ayo will have nothing of value and will quickly die out
Yawn
I think feels might be more accurate when discussing software. Don't really think politics exists for this stuff, only feels.
the idea is good but only if the mods will strictly enforce the rules. otherwise it's useless.
&lt;Man&gt; retweeted article criticizing aspects of Codes of Conduct. &lt;Group&gt; that created / supports node.js' Code of Conduct got offended and used that, along with a number of other minor mistakes the guy had made in the past, to get the guy fired or forced to resign. &lt;Organization&gt; voted on &lt;Group&gt;'s desire for him to get fired or resign, and the vote came out negative (to not fire him or make him resign). &lt;Group&gt; was displeased with that vote, so they are going off to play at someone else's house.
Not even remotely. You don't remember the Linux kernel scheduler battles of the mid-2000's. Linus Torvalds himself admitted that the choice of Molnár's CFS rather than Kolivas's SD (on which CFS was based) was partly because he felt Kolivas was difficult to work with. Meanwhile, Linus insults senior contributors for conduct, code, and even physical appearance. Express.js went through a [rough time and transition](https://github.com/expressjs/express/issues/2844) not because of the code, but because the primary maintainer felt/was left out of decision making. There are dozens of articles and arguments about React, not because of the code, but because of the `PATENTS` file and the disconnect between what Facebook says and does. Thousands of packages and companies were [crippled when `left-pad` was removed](https://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/) because NPM made a business decision about another package name of the contributor. There are many factors in the success of a project. Code is one of them, but there's more to a project than a linter configuration and a Halstead score.
Obviously node has trouble keeping a single thread.
Because most of what happened took place in non-public forums, most of the conversation is running on second-hand information at best. The list of issues was *briefly* public, and then removed from the comment because it was only relevant (or accessible) to the committee members and was appropriately removed from public view, *I think* as part of the CoC. I did not get a chance to see how many incidents or what level of description was provided. It looks like a big chunk of this thread at least is running almost solely on the profile descriptions of the few people involved in the public conversations.
Fuck Kat, seriously. I recently muted her as well. The dev scene Twitter has become infested with attention-whoring manhaters trying to out-PC each other. This warmongering is extremely counter-productive.
http://www.npmtrends.com/vue-vs-react-vs-@angular/core-vs-ember-cli-vs-@polymer/polymer There's an objective case here i'm afraid, npmtrends isn't a vote, it shows real world data, switch it to 2 years to see the climb. 
What does personal identity have to do with this? I thought he was annoyed at their enthusiasm for unconventional non-binary computers.
I agree that basic questions are not the reason I subscribe here. If there is no appetite to enforce posting the questions elsewhere, maybe a middle-ground could be requiring flairing of help questions with a particular flair so that they can be filtered out by people who don't wish to see them. As an example, see how /r/askscience/ enforces a "subject" flair, then provides filters based on subject.
What paradigm shift? It doesn't break tradition at all. I love Rich Harrises work, but he sometimes misplaces his potential due to sentimentality or personal ideals that don't line up with real-world demands. Rollup, buble and svelte, all marvels in their own right, follow this pattern. He wants to go back to inspectable content - that's a noble thought but completely unrealistic. We're *finally* at the verge of real applications and javascript is preparing to drive virtually all UI no matter on which platform. And it actually excels in it. Obviously that wasn't and isn't possible with the dom and HTML as a generic content host, that train has left many years ago and svelte is on that train. 
Trailing commas are supported pretty much everywhere in JS. Heck, we are even getting dangling commas in function calls! You read that right, I can write `f(a,b,)` and that's perfectly valid. What a time to be alive...
It was written by someone that doesn't know English or just hasn't gotten around to translating it yet?
Seems to be all about feels, this one. Talking back and forth about some code of conduct or whatever. 0% technology or substance.
From that, his summary of the complaints seems to be * He apologised to someone in a discussion for the behaviour of another mod without having checked with the other mod to see whether there was anything to apologise for. * There was disagreement about putting company names in a thread, that already had company names in, that don't seem to have been removed * He retweeted an article about whether codes of conduct might have downsides The summary is obviously biased, as it's written by him, but is this really what it's all about? As a completely neutral observer (I use node, but have no involvement in the community side, and have never heard of any of the people involved before today) I can only see two possibilities * Either this is just the tip of the iceberg in terms of this kind of issue, and there's a lot more examples that he's choosing not to mention, because the article talks about "years of efforts to reform a pattern of harmful behaviors that was tearing the community apart" yet these sound like the sorts of minor tiffs that we get a couple of times a week in our office * There's something else going on and these things are just an excuse - I've noticed that one of the key people in that article also seemed to be looking for an opportunity to remove Vagg based on an exclusion clause based the company he works for (or maybe was looking to use the exclusion clause as a way of removing a troublesome person). So does anyone have a link to examples of the systematic pattern of behaviour that's repeatedly mentioned in the article? I assume they must be out there, but I'm struggling to find them. 
/r/newtojavascript would fix this - no?
I've reported that Tweet to Twitter and I suggest everyone else (man and woman) do so too. It's a toxic attitude and I'm sick to death of seeing the tech industry infested with this rubbish. Did anyone ever really learn that two wrongs definitely don't make it right? 
I read through it all and he seems well spoken, it didn't come off as very biased. What did seem biased was the OP article, it didn't really have any citations despite saying he has troublesome behavior, or whatever. If he was such a bother, consistently, then there should be mailing list / github issue / etc proof. Instead what I saw were accusations and a link to a twitter tweet by Vagg retweeting an article about downsides of free speech limitations on *college campuses*. Nowhere did he say he was anti-CoC or anything, and being critical of something / pointing out downsides is hardly controversial or bad.
I agree, but the article seems similarly biased by pointing out such accusations but not showing any real proof. Just so-and-so said such and such, so-and-so is a problem, but no actual citations or screenshots of them being a problem. Also the tweet referred to CoCs in a critical way but if you read the article itself it's about speech at colleges
I really like the idea of compile the project to reduce runtime overhead, and i must say it works really well I made a mini version of gliffy with it and its relativly small When i think that react min has like 30kb (not sure) and then the components, so the basic hello world is huge, but in svelte it has like 1kb. But i must admit zhat it isnt production ready yet. But i would stay tuned.
To see just how ~~retarded~~special this whole thing is, replace `Vagg -&gt; Vag`, `Code of Conduct(s) -&gt; CoC(s)`, `fork(ed) -&gt; fuck(ed)` in the title, article content and comments. Bjork once did a song about how she's [seen it all](https://www.youtube.com/watch?v=N8FJyhnC2Eo) but I don't think she's seen this...
Well someone has time to post it at the place where everyone speak english
I would like discussions on the language's grammar and design decisions. Patterns and best practices. Things like, when to use proxies, not what are proxies. Would be nice to have discussions about why the language is popular, who is learning it and what for. New uses of the language like in IOT. I personally don't like posts like "why this code that I copied and pasted is not working".
Politics exists everywhere.
Good fucking question!
Have you checked out fantasy-land? https://github.com/fantasyland/fantasy-land Along with folktale's data.maybe? https://github.com/folktale/data.maybe Having the `.chain` interface defined here really makes creating a chain clear and easy. Having all of my modules have a Maybe/Either interface, and knowing that I can continue to chain on the result is smooth. Having to declare work with a higher order function that takes n functions, instead of chaining through, also doesn't work with the ADT bind law as it's not a single function. Anyways, good start and have fun with Monadic JS! I know I enjoy it. In regards to the comment of Promise your chain would look something like this: const a = { b: { c: "value" } }; const prop = (key) =&gt; (val) =&gt; val[key] ? Promise.resolve(val[key]) : Promise.reject(new Error(`${key} not found`)); const ch = (a) =&gt; ( Promise.resolve(a) .then(prop('b')) .then(prop('c')) .then(val =&gt; (val + " appendedString")) .catch(e =&gt; console.log(e)) ) ch(a).then(console.log).catch(console.error); // value appendedString ch({}).then(console.log).catch(console.error); // Error: b not found `.then` is like map but also like bind/chain. If you return a Promise it works with what you have returned, otherwise it wraps your result in a Promise.resolve() so you can continue to chain.
lets hope Ayo doesn't choose github if they don't want dogmatic activists meddling in everything.
Also this implementation can't contain legit `undefined` or `null` values. I would use unique private object to indicate nothingness. const NOTHING = {}; const isNothing = (value) =&gt; value === NOTHING; Maybe.nothing = () =&gt; maybe(NOTHING); 
I called this last year and was made fun of for my name by Kat on Twitter. https://twitter.com/maybekatz/status/771876666326908928 Fuck the whole SJW NPM team that Seldo has created and fuck Ayo.
Honestly, I would learn programming. I'm assuming you have no background in dev. I don't know the advantage of one particular language over another for someone with a background of marketing. That's like asking what sport should I play coming from a background of music. There's not much correlation. That being said, the basics of programming are beneficial to JavaScript, C#, php, whatever language you want. 
Thanks for the suggestion, seems like a better way to go.
Thanks for the comments. I've had a look at the fantasy land spec which was somewhat useful, but some parts of which are beyond my current understanding! I'm only an FP beginner really, but some of the ways of working seem to fit nicely into JS-land.
Since JS has this truthy/falsy thing going on, a reverse for-loop can be shortened to this: let animals = ["cats", "dogs", "pigs"]; for (let i = animals.length; i--;) { console.log('I like ' + animals[i]); } -&gt; I like pigs/dogs/cats If you just want to iterate over something, use for-of: let animals = ["cats", "dogs", "pigs"]; for (let animal of animals) { console.log('I like ' + animal); } -&gt; I like cats/dogs/pigs
Eh, I can see wanting developers to treat each other with respect. I think respect also means knowing that criticism is okay, and being criticized is not the same as being bullied. Even though some developers, such as Torvalds can often tightrope walk the line between outright bullying and criticism, you can tell he's doing it because he cares about the project, and not because he has an issue with the individual. The problem is that the people who write these policies insert their own political and moral foundations rather then making them simple and built on mutual respect. Or acknowledging that you shouldn't need a wall of text to tell you to play nice if you want your patches accepted. So what happens is the second someone upsets the balance, the people who can't handle criticism lose their cool and it's drama because they feel personally slighted. Then that drama causes a lot of outside attention which creates an even bigger turf war from people who have a personal interest in "being right". 
Nope, that's just plain old hypocrisy on Kat's part
I had an *amazing* conversation with this person last night over here - https://www.reddit.com/r/node/comments/6w1sv3/after_governance_breakdown_nodejs_leaders_fight/?st=J6UQGXE8&amp;sh=9f8725d7
Yeah fantasy land goes real deep. On my journey learning functional JS I found these videos helped a bit. Should be free with an account https://egghead.io/courses/professor-frisby-introduces-composable-functional-javascript I still revisit the videos as I learn more and it cements so much. I also find the author's tweets really enlightening. 
This stupidity seems to be rampant in all tech circles at the moment :(
Your name is fucking stupid and you know it!
I kinda agree with you. Although I'm not much of a follower of these characters, I've found the same with a bunch of other tech people I follow, which are almost exclusively US-based. Recently had a few exchanges of tweets and I found myself in the middle of an argument around the same man-hating topic. Being myself supportive and aware of it, it felt nonetheless out of place and counter productive, as you said. From an higher perspective, I agree we need to raise it to bring it to attention, but this goes beyond what I expect: you're mostly preaching to the choir creating an echo-chamber, plus, it doesn't bring anything constructive to it, if not the other way around.
&gt; 0% technology or substance. Yeah, life is all about technology!
Yeah it is. I get a chuckle almost every time I post. I love it. Fortunately, my name has nothing to do with whether or not the things I say are correct or not. I made this account with the full intention of being helpful and positive to tech communities. This is in contrast to other places where people use their real names to spread nothing but negativity and hate... even if they live under some other delusion that they are inclusive and accepting. 
It's true though.
&gt; 2017 &gt; not specifying your gender and sexual preferences, along with the pronoun to be used when people is talking with you in your professional profile (xir is the best) you must be new here... srsly PC in america went a bit too far 
It takes a suprising amount of effort to track down what you ably summarized in a paragraph. 
The Technical Steering Committee of a software development framework is (or should be) all about technology.
He tweeted a link to an article which suggests that campus speech codes can discriminate against people on the autism spectrum. Some supporters of Node's equivalent (the Code of Conduct) want him kicked off the Technical Steering Committee as a result. The Committee as a whole didn't agree, so the critics have started their own Node fork so they can set their own rules.
How long until BronyJS
A committee is a group of people. When you have a group of people who have to work together, politics becomes a factor - as does "feels". There's no way to transcend this.
So... https://m.imgur.com/gallery/G2POM
Thank you for that description! I read what &lt;Man&gt; said about his end, but didn't have a good grasp on the full picture.
Take out the variable (Math.random) in this code and replace it with its respective extremes (0 and 1) and you’ll get either 0 + 3 or 5 + 3. therefore numbers could be between 3 and (theoretically) 8 (see edit and first comment below) Edit: As /u/senocular correctly states, the range of Math.random actually excludes 1, so my remark regarding never hitting 8 can be ignored, you will always get values between 3 and 7. 
Twitter is in on this as well
3 - 7 is correct; Math.random generates a number value from 0 up to but not including 1. So at no point will you get a 5 + 3 within the Math.floor call. If you did, an 8 would be an infinitesimal possibility.
Feminist?
I don't know if you can do things like this AWS Lambda (probably yes). But I'm sure you can do it with Firebase and Firebase / Google Cloud Functions. _____ You can make script, which will get all data from spreadsheet and then pass them as parameters in URL. You can invoke script with button / figure made in spreadsheet (execute function on click).
Sounds to me like *your* feelings are hurt, they just went ahead and forked.
lol so now being to the *left* of redditors is edgy got it
Archive caught it: https://web.archive.org/web/20170821212745/https://github.com/nodejs/TSC/issues/310
Because then this sub would be 100% blog spam 
where the actual fuck do these people come from???
You are correct, should have checked the spec. 
Why not just `const z = a &amp;&amp; a.b &amp;&amp; a.b.c + 'appendedString';`?
It does if the violations of the CoC include telling non-binary people to fuck off.
My initial reaction was "Why not just Why not just `const z = a &amp;&amp; a.b &amp;&amp; a.b.c + 'appendedString';`?" Surely I'm missing something...
This is Status Quo Bias. Right now Node.js has more partners and contributors, but that is no guarantee it will continue into the future. If they don't course correct, they may continue to lose contributors, and eventually partners (especially if it is bad PR to stick with Node). If I were on the TSC, I would take this exodus very seriously.
I feel like those behind io.js were eventually proven correct by the fact that their fork was merged back into Node.js and various concessions were made to how future releases would be handled. So history proved them right. I suspect history will show ayo.js to be a bit of a ghost town. 95% of those using Node care more about features and stability (both technical and institutional) than they do about whatever political or personal issues lie behind this new fork. That's why io.js gained traction while this fork likely won't. But again, it's all about the numbers. So if people do start flocking to ayo.js, it WILL prove the rightness of their position. I don't see it happening but I guess we'll see. 
&gt; I don't care about your identity, whatever it is. What I care about is working code. That sounds great until someone says non-binary people can fuck off during some planning meeting, and suddenly all the non-binary contributors have to ask themselves whether it is worth sticking around anymore. You can shit on a person without caring who they are. Often times, not caring is the problem.
PC at its best. Its a toxic nasty thing you cannot reason with.
I have to add a very minor correction to this. Due to the way floating point numbers are rounded, sometimes the rounding works out badly, e.g. look at this: 0.99999999999999994 * 5 + 3 7.999999999999999 0.99999999999999994 * 3 + 5 8 So if the question had been about Math.random() * 3 + 5 returning 8 sometimes, it evidently can happen, but Math.random() * 5 + 3 can't return 8. I guess you have to kind-of-sort-of treat Math.random() as possibly returning a number so close to 1 that it ends up rounding as if it had been 1 in further processing.
oh. svelte goes back to jquery dom manipulation? did not know that.
It's a shame that the few replies to this tweet that are questioning but reasonable do not continue to be discussed. The core concept sounds like a fantastic point of discussion. Something that could progress the use of CoCs, making them more effective and applicable. Instead, we get drama. Is this really how the world ends, not with a bang, but with a whiner?
This isn't feasible. Even big subreddits like /r/apple allow newbies to make comments. I personally don't come here just to hear about new libraries and updates to existing ones... if anything, if all you want to hear about is stuff like that, then there's probably a better place for you. A normal Javascript developer probably shouldn't be wanting to hear about new packages and new ways to do stuff constantly. You pick paradigms and then you buckle down and stick to them. So you're most likely the outlier. The mods could institute more aggressive tagging of topics so people can sort, but that's a lot of effort on mods to enforce rules like that. Some subreddits have the manpower to get it done, who knows if /r/javascript does, is even wiling, or if it's even necessary.
I wasn't talking about specific frameworks/langs. There's a body of similar purely functional inspired architectures and concepts found in elm, react, cycle.js, om, purescript, and so on. I don't know if it has a name.. immutable, unidirectional, data flow?
Edit: I think Math.random maxes out at 16 decimal places, and keeping the addition out of the floor should keep it safe Math.floor(0.9999999999999999 * 3 + 5) // 8 Math.floor(0.9999999999999999 * 3) + 5 // 7
Mostly it's not. Chrome complains about it. http://i.imgur.com/PnPnKcw.jpg However, Firefox doesn't complain on the second code (the first one fails like Chrome).
It's a profile blurb, man. If there's any place where it's fine to be "attention seeking" (whatever that means), it's there. No one's forcing you to read anyone's profile. It's not going to jump in your face unannounced like a goddamn drop bear, you actually have to click on this shit. Besides, if they have a preferred pronoun, and it's important to them, where else would you want them to mention it?
Comments like this and the use of pejoratives like SJW are how you can tell this is about politics. Conservatives are backing Rod and his "geniuses should be allowed to be racist assholes" twitter post. Liberals are upset by it. 
If you read the discussions of this fork online you'll see a lot of epitaphs like SJW tossed around by supporters of Vagg. If you especially read the link Rod Vagg posted in twitter which start d it all -- which can be boiled down to "geniuses think different and we should let them have their racist opinions because they're geniuses" -- you'll see what caused the controversy. This is conservatives and liberals fighting a culture war. 
I read his statement. And I read the whole thing that was posted including the now redacted post. I'm asking for information about all the other things as according to the forkers this was just the straw that broke the camels back.
The exact decimal value for the constant appears to be something like this: &gt;&gt;&gt; "%.53f" % (1 - 1e-16) '0.99999999999999988897769753748434595763683319091796875' The print formatter functions typically stop printing digits when enough decimals have been emitted to uniquely distinguish the value for the floating point precision in use. I guess it just happens that when you multiply this value by some integer and find the closest floating point number, it never ends up rounding up, so your suggestion works. I did not exhaustively test it though.
Something another sub I'm in does, r/homebrewing, is a daily Q&amp;A. Maybe introduce something similar? 
Do not report it! This needs to stay up so that everyone in the world can see who this person truly is.
That seems weird. I don't feel that way at all. Most of the posts, I would say, are probably not very basic questions. Most of the posts, I would say, are links to blog articles or github projects. Unsurprising, though, that a major open source contributor (assuming the tag "Node.js Core Contributor" is correct) says, basically, "fuck the new people, i don't even want to see their stupid bullshit". A little surprising that they do it out in public, though, most people are usually a little more self aware than that. When the "Hot" tab on a subreddit still shows posts that have 0 upvotes on it, you know, there's really not a whole lot of traffic in that sub. I'm pretty sure that you can mentally filter out based on the topic, and just not click the links for the newbs you don't want to see or help. 
Any ideas on the JS syntax I can use in Google App Script to make a call to a URL endpoint?
I think it looks nice and works well for me. What's the reason you built it? How much time did you spend? I'm thinking there's lots of more work if it's going to be "usable" -- right now I'm getting a new username for each comment.
i would argue that your reverse for-loop looks like an error. clearly, it's not, but if i were scanning that code, my eyes would stop and say "wait, what?" while my brain figured it out. Also, you might want to use 'const' in your loops instead of 'let'. 
The game / game-engine has any website? What animations are you referring to? The mouse-click-effects or the blue person/creature that moves a little bit? The animations = hard to see (for me), because small images.
Make a regular XHR call, either using XHR or fetch(). 
at first i was going to say how hilarious this is, how they just sit around and read reddit threads to see people criticizing them. then i felt bad when i realized how pathetically sad and lonely that is. it's so hard to drum up any empathy for these people when they act the way they do. still, they seem like profoundly unhappy people, so much so that they have to tell the world any time something upsets them. jesus.
To me it's an idiomatic construct. That's how my reverse for-loops in JS/TS look like. I mean, iterating in reverse is something typically only do when I remove elements as I go, which is rather weird by itself. Const works in for-of, but not in regular for-loops. Personally, I don't use const everywhere in ES6+ code. It's pointless.
&gt;Github is NOT for social, religious, political or similar topics. It is and must be pure code. The SJWs i see is really a big problem today, and now these people are turning to github. In 2014 GitHub **[removed the word "Merit"](https://readwrite.com/2014/01/24/github-meritocracy-rug/)** (Meritocracy) from their slogan because it has been identified as an offensive term by certain activist groups. Further, GitHub adheres to the **[Open Code of Conduct](http://todogroup.org/opencodeofconduct/)**, which includes the following in its definitions of harassment: &gt; Our open source community prioritizes marginalized people’s safety over privileged people’s comfort. We will not act on complaints regarding: &gt; &gt; - ‘Reverse’ -isms, including ‘reverse racism,’ ‘reverse sexism,’ and ‘cisphobia’ &gt; - Reasonable communication of boundaries, such as “leave me alone,” “go away,” or “I’m not discussing this with you” &gt; - Refusal to explain or debate social justice concepts &gt; - Communicating in a ‘tone’ you don’t find congenial &gt; - Criticizing racist, sexist, cissexist, or otherwise oppressive behavior or assumptions
It could well be the doPost call method that could do this. Check out the "Chuck Norris API" part of this post. Not sure if I need a payload, just hit the API Gateway URL http://googleappscripting.com/doget-dopost-tutorial-examples
The main advantage is that `Maybe` can be used point free. Meaning, you don't need your data in order to declare your behavior, thus making it much more reusable and and composable. In the example above, you can only declare your behavior by first having access to the object `a`. If you want to re-use this code for another object or a list of objects you need to redeclare your behavior each time, rather than declaring it in one and only one place.
just screenshot it and share it to remind everyone that she is a sexist hypocrit crybaby http://i.imgur.com/25SbPhF.png
There is always a advantage to learn js, just depends what you want to do with it 
great someone's feelings were hurt and the result is yet another fucking js library to track.
You are correct. Github as a company seems really obnoxious. I would personally never work there, but they keep their politics, and im not interested. As long as people will tolarate the PC bullies code will be hosted on GH. A few more of these kinds of political bullshit forks/complaints and more projects will move to other platforms. Gitlab is very close to feature par.
Just announced this: https://github.com/davidkpiano/xstate
yeah because learning is dumb. amirite guys?
It's my understanding that ImageMagick is chock full of security issues (or at least, has been in the past) .. i'm not familiar with GraphicsMagick, but it sounds like it might be a fork? which might have some of that baggage as well? none of this info that i have is particularly up to date, so i don't know if that's relevant. the short version is, as of a few years back, it was a *really* bad idea to use ImageMagick for anything that a user could manipulate the input to. 
And in three months... exit Ayo.js. While it is true that Node.js needs to tighten up their interpersonal standards and practices... this fork is nothing like what happened with IO.js and will go absolutely nowhere. This is a prime example of how forking can be bad and non-productive. Rather than forking they should work within the Node.js organization to CHANGE it and make it better. Splitting and then failing will send a far worse message than staying and continually pushing for positive change.
One could say this about a lot of JavaScript developers, honestly. 
I thought the article was fascinating, actually. I'm just taking the opportunity to represent a pragmatic view. I'm a huge fan of functional style, but there comes a point at which it becomes absurd. In this case, the author decries verbosity, and then goes on to construct this monster. In a practical project, I would always choose the one-liner `lodash.get(obj, 'a.b.c', ' is great!')` over anything I saw in this article. Even native destructuring is often a better choice: `const { a: { b: { c } } = obj`. 
Unfortunately you're right when it comes to politics. Regarding feels, no. That's what keeping it professional is about.
Thank you.
/r/programming and /r/java both do this so I don't buy the argument that it's not feasible. &gt; if anything, if all you want to hear about is stuff like that, then there's probably a better place for you. If you know of a news aggregator like this, I'd love to hear it. &gt; A normal Javascript developer probably shouldn't be wanting to hear about new packages and new ways to do stuff constantly. You pick paradigms and then you buckle down and stick to them. So you're most likely the outlier. Wow, if that's your attitude then good luck, but it's kind of ridiculous to say that JS programmers don't want to learn about what's on the horizon or what's big in the community right now. 
/r/python is pretty militant about sending people to /r/learnpython. We just need to become more vigilant about doing that here too. 
Honestly I don't think the mods have the manpower currently to do aggressive tagging/etc of posts. Look at the mods - you've got jeresig (creator of jQuery) who hasn't been active on reddis in a year, honestbleeps (of RES fame) who is probably busy with RES 90% of his time on reddit, and kenman who does all the work. The mod team would need to be expanded quite heavily to make this work.
The same reason why some people write a += b instead of a = a+b, or !c instead of c == false. It's syntactic sugar. When getting a nested objects property value, it'd be nice to do let name = a?.b?.name instead of the necessary null checks and or ternary to figure out.
Should prolly add Walmart to the list. I don't particularly like Walmart, but their eng. teams took an early gamble on Node and it really paid off. 
I am actually a liberal and this is still completely overblown if you actually read any of the "accusations" against him. Sharing a post and advocating for discussion on the things that post presents is not the same as wholeheartedly agreeing with those viewpoints. Attitudes like that are the reasons why politics is becoming more and more polarised and alienating to the middle ground. This whole debacle is pushing me more towards the right simply because of how insanely uncooperative the left is if you offer *any* dissenting opinion whatsoever. And I hate *all* of the things the right stands for.
Excellent. I would add a nuanced fact about the article he tweeted.. it wasnt even about CoC but rather free speech on school campuses. Lessons from the academic experience should be heeded for development of CoC policies. 
Two of the three mods (John Resig and honestbleeps from RES) are very popular in the JS community, and probably have better things to do than moderate a subreddit. So that leaves only one mod left to manage a subreddit with 100k+ subscribers. So I guess the real question is, do we feel like this subreddit is well moderated?
&gt; The Geek Feminism community prioritizes marginalized people’s safety over privileged people’s comfort. The Geek Feminism Anti-Abuse Team will not act on complaints regarding: &gt;‘Reverse’ -isms, including ‘reverse racism,’ ‘reverse sexism,’ and ‘cisphobia’ (because these things don’t exist) 
&gt; One could say this about a lot of ~~JavaScript developers~~ humans, honestly. ftfy 
Agree:)
Since we don't have the mod numbers to do it by personal review, an automoderator would be better. Lots of subreddits have something that detects formatting in new posts and automatically deletes them if they violate the format. Forcing all questions into /r/LearnJavascript is an idea a lot will like, but they'll bleed back out of there into here if not enough people with expertise subscribe there. 
Nah, often there are some interesting questions here. I say keep them here, it's the minority anyway.
Maybe you should start it. I don't want to see posts like this.
To allow people to better assist you, can I ask what Discord framework you are using? I assume it is one of the JavaScript ones, which means I would highly recommend not using the php example code. There is a Node library for working with the Yahoo Fantasy API, which would serve you much better if that is the case. 
Sounds like you've gone through a lot of hardships and can offer a valid perspective on the matter.
**TL:DR;** You probably want to adjust your implementation to [something like this jsBin](http://jsbin.com/hucugiroxa/edit?js,console), because your current implementation doesn't conform to several important mathematical laws that are normally attributed to Maybe. &amp;nbsp; --- &amp;nbsp; `chain` (or `bind`) has a pretty specific meaning in FP—a function that is used to "map" special kind of functions, that take "unwrapped" values and return "wrapped" (in something like Maybe) values—so you might want to rename your `chain`. &amp;nbsp; In fact, if you want this implementation of Maybe to hold up to functional scrutiny, in general, `map`ing several functions one after another should be the same as `map`ing composite of those functions once: const plusOne = x =&gt; x + 1 const minusOne = x =&gt; x - 1 const timesTwo = x =&gt; x * 2 Maybe.just(1) .map(plusOne) //=&gt; Maybe.just(2) .map(timesTwo) //=&gt; Maybe.just(4) .map(minusOne) //=&gt; Maybe.just(3) Maybe.just(1) .map(x =&gt; minusOne( timesTwo( plusOne(x) //=&gt; 2 ) //=&gt; 4 ) //=&gt; 3 ) //=&gt; Maybe.just(3) // or with a helper for function composition: const pipe = (...fns) =&gt; x =&gt; fns.reduce((result, f) =&gt; f(result), x) Maybe.just(1) .map(pipe( plusOne, timesTwo, minusOne )) //=&gt; Maybe.just(3) (This is usually called functor composition law if you want to learn more about this property.) &amp;nbsp; However, with current implementation of `prop`: const prop = propName =&gt; obj =&gt; obj[propName] Maybe.just({}) .map(prop("a")) //=&gt; Maybe.nothing() .map(prop("b")) //=&gt; Maybe.nothing() Maybe.just({}) .map(pipe( prop("a"), prop("b") //=&gt; TypeError: obj is undefined )) And it makes sense if you think about it: it's `prop` that might or might not return a value, so it should return Maybe, and we should decide whether to run `map`ed function not based on value, but whether it's tagged with `Just` or not: const maybe = tag =&gt; value =&gt; ({ map: fn =&gt; tag === 'Just' ? Maybe.just(fn(value)) : Maybe.nothing() }) const Maybe = { just: maybe('Just'), nothing: maybe('Nothing') } const propM = propName =&gt; obj =&gt; propName in obj ? Maybe.just(obj[propName]) : Maybe.nothing() // `M` for `Maybe`, just so it doesn't conflict with previous definition of `prop` propM("a")({a: 1}) //=&gt; Maybe.just(1) propM("a")({}) //=&gt; Maybe.nothing() &amp;nbsp; Now `propM` successfully signals that it might not return a value, but how do we actually use it in a Maybe transformation chain? Maybe.just({a: 1}) .map(propM("a")) //=&gt; Maybe.just(Maybe.just(1)) This is where law-abiding `Maybe.chain` comes in: const maybe = tag =&gt; value =&gt; ({ map: fn =&gt; tag === "Just" ? Maybe.just(fn(value)) : Maybe.nothing(), chain: fn =&gt; tag === "Just" ? fn(value) : Maybe.nothing() }) Maybe.just({a: {b: 1}}) .chain(propM("a")) .chain(propM("b")) //=&gt; Maybe.just(1) Maybe.just({}) .chain(propM("a")) .chain(propM("b")) //=&gt; Maybe.nothing() So now `appendToC` can be written as: const appendToC = object =&gt; propM("b")(object) .chain(propM("c")) .map(append(" is great!")) appendToC({b: {c: "fp"}}) //=&gt; Maybe.just("fp is great!") appendToC({}) //=&gt; Maybe.nothing() &amp;nbsp; To make it point-free, we need to be able to compose functions that go into `Maybe.chain` (i.e. which take plain values and return Maybe): const pipeK = (...fns) =&gt; x =&gt; fns.slice(1).reduce((result, f) =&gt; result.chain(f), fns[0](x)) // `K` because this kind of composition is usually called Kleisli composition const appendToC = pipeK( propM("b"), propM("c"), pipe(append(" is great!"), Maybe.just) ) appendToC({b: {c: "fp"}}) //=&gt; Maybe.just("fp is great!") appendToC({}) //=&gt; Maybe.nothing() &amp;nbsp; In addition to already-recommended `data.maybe` from Folktale, you might find [Sanctuary's `Maybe`](https://sanctuary.js.org/#maybe-type) interesting.
I'd be game to go the /r/goodyearwelt or /r/elm route with a Simple Questions or Beginners Only thread posted weekly.
**Here's a sneak peek of /r/goodyearwelt using the [top posts](https://np.reddit.com/r/goodyearwelt/top/?sort=top&amp;t=year) of the year!** \#1: [It's the 30th and I'm turning 30 today. Here are the nearly 30 pairs of Østmo boots and shoes I've made over the course of 2016](http://imgur.com/a/49K5F) | [108 comments](https://np.reddit.com/r/goodyearwelt/comments/5l3qde/its_the_30th_and_im_turning_30_today_here_are_the/) \#2: [\[10 Year Review\] GAP Thong Sandals](http://imgur.com/elPDlxv) | [62 comments](https://np.reddit.com/r/goodyearwelt/comments/62tnp4/10_year_review_gap_thong_sandals/) \#3: [Østmo MKII Trooper Boot in Acadia Pecan Grafton leather](http://imgur.com/a/2KXH6) | [50 comments](https://np.reddit.com/r/goodyearwelt/comments/5h7lw4/østmo_mkii_trooper_boot_in_acadia_pecan_grafton/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/6l7i0m/blacklist/)
&gt; A normal Javascript developer probably shouldn't be wanting to hear about new packages and new ways to do stuff constantly. dude are you even in 2017
It looks like the posts you complain about are about 50% of the posts to this sub. But, they are all consistently tagged with Help flair so they can be immediately and easily identified. Through the magic of google I was able to see that RES supports filtering out specific flair: https://www.reddit.com/r/Enhancement/comments/5msefo/can_i_filter_out_tags/ Admittedly, this won't work on mobile. Personally, I think that the existing flair mechanism works well and the mods are obviously enforcing this well since everything seems properly tagged. It's easy enough for me to scroll past the Help items -- or actually click through and help someone out who's struggling. Not that I ever actually do. 
Does IBM have anything to do with the dissent?
Thanks for the great resource!
Should I learn react or Vue? Which one is better for job?
if they are too busy to be mods then they should not be mods. 
So we should blame *her* for npm having so many issues! 
lol, you serious? It's just a dumb tweet. Might as well report the entire Internet. 
Check out this item from the list of complaints that were lodged against Rod: &gt; His tweeting of screen captures of immature responses suggests pleasure at having upset members of the JavaScript community and others. As a perceived leader, such behavior reflects poorly on the project. https://twitter.com/rvagg/status/887790865766268928" Irony much? What a joke.
[removed]
Do other language ecosystems also suffer from this kind of socio-political drama, or is it only poor JavaScript, and Node in particular, that is plagued by it? Remember last year’s story about Douglas Crockford uninvited from Nodevember?
[removed]
Not to mention that it is rare that you get into situation where you want to check `a &amp;&amp; a.b &amp;&amp; a.b.c` and handle it somehow other than throwing an error. If you cannot predict input shape, then it is a code smell. If your code does not fail when it receives unexpected input, then it is a code smell.
Here's the idea. Once you settle on something like React... do you really need to be hearing about the hundred other view libraries? Most people should choose 1 and be doing damage with it. The idea of these packages isn't to be changing to new ones every 6 seconds. At some point you pull the trigger, and then you do ACTUAL work.
&gt; If you know of a news aggregator like this, I'd love to hear it. I absolutely love the [Web Development Reading List (WDRL)](https://wdrl.info/) newsletter. The guy (Anselm Hannemann) puts it out about once a week. When I'm really on-the-ball reading everything on my coding subreddits, hacker news, github, etc, the newsletter is a nice recap. He honestly doesn't miss much noteworthy stuff. Latest issue is [195](https://wdrl.info/archive/195) but doesn't have a big JavaScript section. Check [last week's 194](https://wdrl.info/archive/194) for a better example of JavaScript news. You can read online or sub for email delivery (I do).
&gt; Wow, if that's your attitude then good luck, but it's kind of ridiculous to say that JS programmers don't want to learn about what's on the horizon or what's big in the community right now. Straw man. What I'm saying is this. Truly productive developers don't adopt new frameworks every week, or every month even. Sure we want to hear about new tools, new editors, but if you're switching your editors every month, switching your frameworks, updating your packages every month, you're most likely not spending enough time on the work itself. The point of these packages and editors is to facilitate WORK. So the same sentiments are echo'd right back to you: good luck if that's your attitude.
Because it's a crapton of work and reddit's moderation tools suck. If it was as simple as saying, "make it so", it'd probably be done already. It's also easy to volunteer _someone else's_ time without consideration into how much effort would really be required; in other words, I wish I could just say "you're free to open a PR if you want it that bad" ;) Nothing against you though, this is a conversation that needs to be had I think. http://redditmetrics.com/r/javascript Since I came on as mod (3/2014), we've gone from 43k to 123k subs; yes, we've almost tripled in size in over 3 years! That's pretty astounding. I'm not trying to claim responsibility for the increase -- that's almost purely the result of reddit + JS's emerging popularity. And with that, moderation duties have increased probably more than 3x's, as we now attract quite a bit more attention from bonafide spammers (blog spam, etc.) and spam-like behaviors (excessive self-promotion, etc.). There have always been a vocal [what-I-assumed-were-a] minority complaining about help posts, and I personally think that most of the help posts should be on SO (a platform created explicitly for such), but when I came on the status quo was that help posts were OK, and were recognized as a part of the fabric of /r/javascript. One of the challenges in dealing with these posts lies in the fact that [not all help questions were created equal](https://www.reddit.com/r/javascript/search?sort=top&amp;q=flair%3Ahelp&amp;restrict_sr=on); some are really interesting, even for a seasoned developer, so there's some editorial discretion that has to be applied. If you can just look at a post and say, _"that's a help post!"_ and then action it that's one thing; but, if one has to grok the question then make a judgement call about whether or not it belongs, then that can really consume some time. Some of the questions that I've reviewed and thought _meh_ but allowed, have gone on to have 50+ replies. With that said, I think a majority of questions could easily be actioned without much thought, I'm just nervous about over-actioning and killing some of the spirit of the sub. So, perhaps it's time for the subreddit to re-evaluate itself? We've evolved a lot over the past 3 years, and maybe the mod philosophy needs to adjust to the current needs and wants of the sub.
The impression I get is that the immature members are those remaining in the TSC of Node.js, not those who left.
Going to sticky this post for a week or so to give all frequent readers of /r/javascript time to voice their opinions regarding their desired direction for the sub, because I think this is an important discussion that will impact all of us. Please see [my long comment](https://www.reddit.com/r/javascript/comments/6waspe/do_we_need_a_javascripthelp_subreddit/dm7965l/?context=2) for some context. All viewpoints, suggestions, complaints, etc. welcomed! **Tuesday edit**: changing _suggested sort_ on this post to `new` (you can always change it back yourself with `best`)
I don't mean to tread on anyone's toes here, but have there been any cases where this has happened? If there is, that is totally unacceptable, and I condemn it. Identity politics have no place in a project like this, and anyone who brings it up as a negative, along with many other topics - homophobia, racism, ageism, sexism, (this is not an exhaustive list) should be removed from the project/organisation. 
You don't want to see what it would look like if I removed the 189 domains from the banned list...
It does have advantages, and once you're used to it it will look wrong to leave them off. There isn't anything that objectively makes it "look wrong" and you gain nothing by doing it that way.
&gt; The mod team would need to be expanded quite heavily to make this work. This is something I've been mulling over for the past half-year or so, and we probably could stand to pick-up 1-2 more active mods. I will need to create some type of application and run it by /u/honestbleeps first, though.
&gt; and "How to use &lt;basic language feature&gt;" blog posts. The hot new thing these days is YouTube videos of such topics, and I agree, it's annoying. I don't want to stamp out good content, but it does seem that there's a super-short list of topics that are being covered _ad nauseum_.
In my defense, the work load has changed drastically since I was 'hired' (3-5x's as much work) -- with no change in compensation ($0 vs. $0). If this was a real job, I would've left for greener pastures a long time ago...
&gt; the mods are obviously enforcing this well since everything seems properly tagged. Actually, about 12-18 months ago, I made an automod change whereby all self-posts were tagged as `help`, and then a PM was sent to the poster letting them know how to change it if it wasn't a help question. It works pretty well, I must say, though sometimes they don't change it for non-help posts.
I would like to see more of this in action, because while automod can do some great things, it's mostly based on regex and some very basic metrics (account age, karma, etc.) One route would be to remove _all_ self-posts, and message the user to notify the mods in the case that it's not a help question? Not sure how much of a hassle that'd be.
I think you probably both are on the same side of this argument. Exploring is not deploying.
I tend to find those who object to any kind of empathy for how others feel in the workplace usually means you haven't gone through it yourself or seen or talked to anyone who has. I'm sorry if you've ever been harassed or been uncomfortable while someone else has. Perspective is completely valid, but you didn't offer that, you just sought to dismiss and attack, you even went so far to say: &gt; This comment will likely cost me a job at some point but I'll risk it. It's not what you're saying, it's entirely the way you're saying it. Forking the project is bringing about two sided conversation. The fork is symbolic if anything, as it certainly isn't technical this time around, and that's a good thing IMO. Given the legacy of those who built and worked on Node I think rocking the boat will offer a checks and balances like approach to social issues. I could be completely wrong, but this is how I see it anyways.
oh word? what about this one on the front page? https://www.reddit.com/r/Python/comments/6w8r75/best_way_to_export_my_program_into_an_exe_or_at/
that's bullshit. Unless you want to step up to the plate, stop making ignorant suggestions.
My point was that it's a bad argument to determine what should be in a subreddit, since as you say js devs want to hear about these things. Obviously real devs don't switch workflows every month, but that doesn't mean we shouldn't try and encourage that type of content in /r/javascript.
Yes.
Almost all of them do. The single biggest indicator for such insanity is if they have adopted a [particular CoD](https://www.contributor-covenant.org/). 
I'm merely making a devils advocate argument. I personally like hearing about that stuff but what I'm saying is, if we're going to sit here and say "well this doesn't belong" then I'm going to identify the majority of the user base and it's preference. I'd say most of that is people trying to learn, fix bugs, and problem solve. That's what all these libraries are for anyway.
Hi! Check out: https://bombsweeper.js.org 😉
I really hope RE:DOM will 😎👍 https://redom.js.org
&gt; It's also easy to volunteer someone else's time without consideration into how much effort would really be required He just ethered all of you with a single sentence. Well done /u/kenman &gt; I personally think that most of the help posts should be on SO The problem with a lot of help posts, is most of them are completely subjective. What framework should I be using? What's the best way to approach this? Stackoverflow in general doesn't encourage those kinds of questions and they will often lock those questions because of it. 
Very insightful comment. I suppose I will be down voted by someone someday for using an incrementing operator that is subjectively offensive to somebody. i++; //Code Review: HR wants to speak with you about this 
**TL:DR;** For me the main benefit of Maybe is that it allows you to cleanly specify "happy" path and think about what should happen in the case of "sad" path separately. I would still recommend skimming through the rest of my response below, where I've tried to evolve motivation for Maybe from your code sample. &amp;nbsp; Let's start with function that does the same as your snippet, just so it's a bit easier to experiment with: const f = a =&gt; a &amp;&amp; a.b &amp;&amp; a.b.c + ' appendString'; f({}); //=&gt; undefined f({b: {}}); //=&gt; "undefined appendString" Well, let's just guard against falsy `a.b.c`. A bit strange-looking, but we've all seen worse. const f = a =&gt; a &amp;&amp; a.b &amp;&amp; a.b.c &amp;&amp; a.b.c + ' appendString'; f({}); //=&gt; undefined f({b: {}}); //=&gt; undefined f({b: {c: 'Hey'}}); //=&gt; "Hey appendString" Wait, are we supposed to handle numbers too?! const f = a =&gt; a &amp;&amp; a.b &amp;&amp; a.b.c &amp;&amp; a.b.c + ' nukes launched'; f({b: {c: 2}}); //=&gt; "2 nukes launched" f({b: {c: 0}}); //=&gt; 0 Ternary to the rescue: const f = a =&gt; a &amp;&amp; a.b &amp;&amp; a.b.c ? a.b.c + ' nukes launched' : '0 nukes launched'; f({b: {c: 2}}); //=&gt; "2 nukes launched" f({b: {c: 0}}); //=&gt; "0 nukes launched" // No one relies on this function to return falsy value when there's no `a`, `b`, or `c`, right? f(); //=&gt; "0 nukes launched" f({}); //=&gt; "0 nukes launched" f({b: {}}); //=&gt; "0 nukes launched" A this point you are probably thinking &gt; /u/i_am_smurfing, you dummy, don't rely on values being truthy, just check if key is in the object! const f = a =&gt; a &amp;&amp; 'b' in a &amp;&amp; 'c' in a.b &amp;&amp; a.b.c + ' nukes launched' f({b: {c: 2}}); //=&gt; "2 nukes launched" f({b: {c: 0}}); //=&gt; "0 nukes launched" f({b: {}}); //=&gt; false f({}); //=&gt; false f(); //=&gt; undefined Phew, this should make QA department slightly more happy. &amp;nbsp; Writing that thing every time we want to access a prop nested inside objects would be a bit inconvenient, so let's assume we have a function `getPath` that given a path like `b.c` and an object would do all that checking for us: getPath('b.c', null); //=&gt; undefined getPath('b.c', {}); //=&gt; undefined getPath('b.c', {b: {}}); //=&gt; undefined getPath('b.c', {b: {c: 1}}); //=&gt; 1 This works, but if we want to know if we actually retrieved a value with `getPath`, we need to check it: const f = object =&gt; { const didLaunchNukes = getPath('b.c', object); if (didLaunchNukes) return 'Nukes launched'; } What if we forget to do that check? Also, what if we do want to know when prop is there, but holds `undefined`? &amp;nbsp; This is where Maybe can help. If `getPath` returns value tagged with `Just`, we know that that value was found at the prop we requested; if we get back a value tagged with `Nothing` then the prop wasn't found: getPath('b.c', null); //=&gt; Nothing getPath('b.c', {}); //=&gt; Nothing getPath('b.c', {b: {}}); //=&gt; Nothing getPath('b.c', {b: {c: 1}}); //=&gt; Just(1) getPath('b.c', {b: {c: undefined}}); //=&gt; Just(undefined) And since `Maybe.map` will not run provided to it function on values tagged with `Nothing`, we can skip doing check in our code, as if nothing bad can ever happen: const f = object =&gt; getPath('b.c', object).map(_ =&gt; 'Nukes launched'); f({}); //=&gt; Nothing f({b: {c: 1}}); //=&gt; Just("Nukes launched") Now, if we don't want this value to be in a Maybe anymore, we can write a function that would extract it, but we also would need to provide it a default value, in case we are trying to extract value from Nothing — this is where we are forced to think about what happens if something went wrong: // of course default value can be `undefined`, but you probably have a better one withDefault("Nukes were not launched", f({})); //=&gt; "Nukes were not launched" withDefault("Nukes were not launched", f({b: {c: 1}})); //=&gt; "Nukes launched" 
Oh boy I can't wait to see the estimate of their active users once Ayo.js is up and running.
you also need to do the inverse - reading the current url from the browser and rendering the correct information, to handle reloading or bookmarking or sharing links
Non-binary people don't exist. They are nothing but narcissists.
In this case I am just quoting OP. Speaking more generally, yes both outright harassment and casual insensitivity are a problem in many coding spaces.
Yeah. Their Happy.js framework, while difficult to get the hang of, is incredibly powerful. They have some smart people working for them.
&gt; All the women and non-binary people left the group, as did several men, following the disbandment last August. How many non-binary people were there? I can't say I know any from my daily life. 
Maybe out of curiosity. 
&gt; Once you settle on something like React. dude are you even in 2017
I never heard "non-binary" before, so I guess binary means men and women, which is 1 and which is 0? No matter which, that sounds like a "social issue"
I made this crappy thing to help my dev students wrap their heads around Math.random() and to try out React a little. Not made for mobile, but it might work in landscape. http://circuslabs.net/~chris.silich/math.random/
If you can't "transcend this" and desperate your personal beliefs/ editions, then maybe you don't belong on a Technology committee. 
It's all the rage now to be not man nor women. I really don't understand why there seem to be so many non-binary people in tech. Or maybe they are just louder. The number of tech conferences blowing up because the speakers were all men is ridiculous. I haven't heard that from any other industry.
I get what you are saying and my comment was a little tongue-in-cheek. But it does seem like the technology that I using project-to-project is changing. As the projects that I work on usually run for about 6 months it's not unlikely that our team will use something for 2 projects and then move onto something else, as is the case with Angular, React, npm, bower etc. I don't think of these things as anything other than Javascript, however. I think people get too attached to a framework and forget the language underneath, sometimes.
To be fair, the broken stuff in npm@5 shares blame with a number of folks. Really, they just have an inadequate test suite. But that's easy to fix by submitting PRs with (intentionally) failing tests. If that PR can also include a fix, great. But at the very least, it gives them a direct course of action to repair the defect.
ewww
Don't see node on the list
Proving my point.
Walmart is a backer of ~~hapijs~~ hapi, but I wouldn't call it theirs. [electrode](https://github.com/walmartlabs/electrode) is their project and what they use on most of their site and their internal systems.
Ugh. 
Need more like this on the team: https://www.youtube.com/watch?v=dk2LcKP81YY
I'm sure the author would as well but this is an introduction to monadic programming. Whenever we write tutorials targeted at beginners we should use trivial examples so that they can quickly grok concept without being bogged down by more complex issues
Dumb tweet. Not unto itself anything special, but I'm just sick of this crap. I'm a developer. I try to follow people who are doing great things and I find I see this shit all too frequently now. It's nothing special. I'm just annoyed. This woman is a hypocrite. 
&gt; Professional Mantagonizer. Professional Asshole.
Keep in mind - this is the stuff they say in PUBLIC, imagine their private conversations.
Very happy I work for a sane Irish company that focus's on hard work and not SJW bullshit. Dreading the day I have to go back to an American company.
I dont apply for jobs I cant do. What a novel concept.
Hmm, the trailing comma in object literals shouldn't be an issue. We've been able to do that for a long time. The one in function calls is new, however, and isn't supported everywhere just yet. With that said, my chrome install seems to not mind either of them: http://imgur.com/a/bVwrO. Browser compatibility: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas#Browser_compatibility
^(Hi, I'm a bot for linking direct images of albums with only 1 image) https://i.imgur.com/K7Fyx6T.png ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dm7g26k) 
I don't disagree that it makes little sense to post a chinese-only project to an english-speaking board. I just don't think swearing at them is the right answer.
Is it possible that you'd be less tired of hearing about those things if they led to making things better for you? Is it possible that the people who keep bringing them up do so because they want to feel better about their workplace or whatever community they are a part of? I'm a straight white guy who's never faced discrimination over anything other than being a nerd. I can't relate to a lot of these issues. I tend to keep my mouth shut about it because I trust that these issues keep coming up because they matter to people affected by them. If you're not personally affected by the Ayo.js fork, I think it's reasonable to let the people with skin in the game duke it out, which means giving these folks the opportunity to say their piece without being ridiculed.
It's twitter. Of course it's retarded. Twitter is literally defined by stupid tag lines. 
I think many of the issues were honestly just horribly thought out designs by people reinventing the wheel.
What I did with ckeditor was upload the image with the uploadimage plugin, and have the image link inserted instead of the base64 representation. https://ckeditor.com/addon/uploadimage You are gonna run into this problem with any editor I'm guessing. 
&gt; hapijs Unrelated to the main topic at first glance there's is nothing that separates hapijs from any other web framework. Can someone shed a light?
You're right, I will probably have that with any editor. Thanks for the suggestion about the upload image plugin! 
I'd rather just see the 189 domains. What are they?
Possible addition: Include the location (city, state, country) in the listing in case someone wants the option to work in-person?
Npm 5 was an atrocious experience for me in - I will try again later possibly but Im sticking with yarn for now... :( Man/Woman - Fix that shit!!!
Hey yeah you can read more about the project on its website http://projectgoldscript.com Yeah the GIFs aren't super great. I'm still trying to find a way to create good ones. I prefer video as a format but imgur doesn't allow you to do that and you can't seem to put their GIFV format into albums which kind of sucks. 
Seems like a bit of overkill if you ask me. 
I know I'll take a shelacking for having this opinion, but whenever I feel uncomfortable with a marginalized group's actions I do my level best to step back and really try to understand what could drive a reasonable person to take what looks like unreasonable actions. In other words, I try and dismiss my initial feeling of: these people are idiots that are, at best, fighting in a stupid way for a good cause and replace it with at least my best attempt at empathy. In this case, the reasonable person acts this way when they feel like they've been ignored even in their own community. They feel like nothing else has gotten any attention for their issue, so they get more and more extreme and intrusive until they get the result they want (attention, and I don't mean that pejoratively). So, if I assume that these people are actually reasonable, then I'm lead to the conclusion that this is sort of the modern day equivalent of doing a restaurant sit-in which makes all of the locals feel uncomfortable with these stupid SJW's pushing their agenda in a counterproductive way because it drives away the "good whites" that, despite eating in a white only restaurant would like to see black people allowed to do so as well. Never mind the fact that they largely didn't see it as an important issue at all until the sit-ins. Rather than look around and say: everyone already agrees with you and this is an echo chamber... perhaps step back and say, maybe from MY perspective it looks like we all agree, but from their perspective it doesn't look that way. They could be right... it's hard to know because it's really hard to actually walk a mile in someone's shoes that really does have a totally different set of life experiences. I know that I've had a very different experience as an engineering leader based on my demographic, but that none of my colleagues take that perspective seriously (how can you say you faced an uphill battle when you make more money than me!!!). Really, marginalized people are in a lose-lose. You either complain in a way that is easily ignored, or you get heat for rocking the boat. Kaepernick much? 
Yeah... thinking the same.
Happy.js was built in response to Wallmart's issues with Express. There is a book on it by Hapi's creator. I would find it for you but I'm on mobile.
So basically using ayo would be similar to buying “conflict free” diamonds? Useless but politically “correct”
Almost all modern digital marketing is implemented with JavaScript on the front-end. Having a solid understanding of JS and of the fundamentals of the web (cookies, basic security principles, DOM API, etc) will make you pretty valuable in the many many marketing organizations looking for a hybrid marketer that can help implement and maintain their digital marketing implementations. One of the great evils in modern marketing is how much it can distract the engineers from their real work (keeping the damn site up to date and running smoothly). 
And there's typescript
Hapi.js is a more "batteries included" http framework than most of the other options out there. It was built with scalability in mind, something that I can vouch for having used it in production for about a year now. While it's useful for small stuff, I highly recommend it for large scale projects. I could go into more, but I'm on mobile and I'm sure you could find some good articles on what it does differently with a quick Google search. [edit]: Auto carrot made a mistake.
You're totally right. I had forgotten about that. I know they concentrate on Electrode now, but still you're right. I actually work with their Labs and engineering teams so I should know better.
https://hapijs.com/ ? Or is Happy.js something different?
Thanks for the feedback! The IDs are actually behaving as intended--I wanted to avoid individual identities altogether so that anyone can join a conversation and the focus is on what's being said rather than who's saying it. The whole thing took a couple months while working on and off (I'm pretty inexperienced). I've always liked "anonymous" chatting, so the motivation was to make something fun that I could see myself using while also getting familiar with React.
look /u/sotimting, we're famous :) https://twitter.com/maybekatz/status/901650656540278784
There website sure, but for their associates website (walmartone) is down 95% of the time. Source: use to be associate
Yep, agreed. And a thorough test suite (integration tests, in particular) should be catching incomplete or broken implementations.
I don't know about you, but I would be thrilled if every member of the JS community read this thread. Wonder why she didn't actually link to the full discussion?
Just replied and included the link. Perhaps you could do the same.
I have a feeling that this is a very US-localized, might I even say SF localized issue, which is being projected globally at the moment due to the nature of the medium and the profession itself. Might be since all the douchebags like Vaynerchuk and a new breed of brogrammers are swarming to the Valley and getting a ton of exposition. Maybe the issue hasn't even reached across the pond. I've seen nothing but the utmost respect for the women in the STEM industry here in Croatia, and it's basically a shithole concerning progressive views and gender equality. Tech is the most gender inclusive industry I can imagine right now. So the way I experience it is in two extremes. Preaching to the choir, or to those who don't have the issue. The first one is an echo chamber, and the second one has all kinds of negative effects as well.
I feel that way about most open source governing bodies. It's almost like managing people is a real skill, and you can't just ask programmers to do it and expect them to be remotely capable. (Unless you get lucky.)
Led me to [this demo of Chakracore](https://blogs.windows.com/msedgedev/2017/07/27/node-chakracore-update-n-api-ios/) ( Microsoft's Edge version of Nodejs ) running on iOS. 
I'd rather not engage in further discussion. saving pitchforks for if/when the nodejs board does something stupid.
Agree that further discussion is basically useless. At least the full thread is easily accessible for those who are willing to read it.
Another article biased against Vagg. 
Not make any sense, **_for sure_**. First, you can scroll over it through github, hence.. Second, you can just `git clone` any project, even if it not yours. If you need something to simplify all the git cloning stuff, you definitely can try `gitclone-cli`, which can clone master or any other branch or sha - directly, also accepts short patterns like `user/repo`. Not to mention that it tries to detect your github username, so you can just `gitclone yourRepo` instead of `gitclone yourUsername/yourRepo`. It's not just self promotion, it make sense and is used by many, every single day. edit: One more thing, if you need better navigation use `Hide Files on Github` and `OctoLinker`. You're probably new here.
&gt; I have a feeling that this is a very US-localized Perhaps. You should ask some of your female engineer friends privately what their experience has been and find out. You might also consider that in a "shithole concerning progressive views and gender equality" the women work really hard to make men comfortable with their presence in the knowledge that, as soon as men are uncomfortable, women will be out of the job. Maybe the problem isn't local to San Francisco. It might just be that we're only *hearing about it* in San Francisco because that's where many of the most liberated and empowered women are. 
Hapi is difficult? Oh my sweet summer child.
"Maturity" is caring more about the work than how nice people are. No mature adult tries to win an argument by storming around breaking things until they get their way.
the fact that this user was deleted makes me feel like it was one of them trying to advertise the fork to get people to switch over.
Just something I've been working on over the bank holiday weekend. I want to improve the start and end point selection and there are some UI and UX tweaks I want to make, especially asynchronous generation via [Web Workers](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API), but it was fun to get this working!
Congratulations on making `gitclone-cli`, which makes sense and is used by many, every single day!! vie is different. It is for quickly viewing repositories that you don't intend to keep on your disk. It clones to a temporary directory and opens the repo in your editor for you. After you close your editor, you can forget that you've ever cloned that repo. I find that useful, especially with pull-requests. (P.S. Looks like somebody down-voted you. Sorry about that. It wasn't me 😁)
While I agree with you - and welcome the downvote or two I'll get for that sentiment - I think you should probably know that an Epitaph is what you put on a grave, an Epithet is the word you were going for there. 
Big proponent of the framework doesn't even know its name 🤔
Can confirm. Transitioned from digital marketing to front end development.
IMO we are close to peak JS. The language is getting better, but the TC39 is slow and tepid. The language needs radical changes which won't happen thanks to design by committee. I don't think we'll see much more growth in the server side. Node is popular because it's easy to get in, it's somewhat fast at IO, and there are so many front end guys these days. But writing good Node is hard and we all know debugging complex applications can be a nightmare. It became popular because .NET and Java were too "corporate", Python and Ruby were too slow, and everybody was hating PHP. Today there are so many better options for server side than there were in 2012 when Node was being adopted at Paypal, Walmart, Uber, Netflix, etc. For example Go, .NET Core, Erlang/Elixir, new JVM languages, Crystal, etc. Even Rust or Swift may become good back end contenders pretty soon. Also NPM is a clusterfuck and let's not forget the fucking drama. On the browser side JS is a monopoly so it's irrelevant to talk about growth. But once WebAssembly is commonplace and gets [browser APIs](https://github.com/WebAssembly/design/blob/master/FutureFeatures.md#gcdom-integration) (GC, DOM, window, etc) a lot of devs will flock to other languages. Time will tell.
[removed]
Lol just stop with the bullshit. You have no idea what you're talking about. 
That operator is actually empowering because it reminds two female symbols, but it's recommended that you use the letter o for the variable name so the resemblance is clearer. On the other hand, operators like -&gt; are frowned upon and considered disrupting for the culture of inclusivty we strive toward. 
Your needed behavior can be accomplished with few series of commands (like gitclone &amp;&amp; $EDITOR . &amp;&amp; cd .. &amp;&amp; rm -rf dir), so i don't see it's point, except cross-platform-ablity. But yea, okey.
You can make games, web apps, desktop apps, mobile native apps and everything you might imagine and we owe them all to NodeJs and it's pretty nice package manager, NPM. (and also its very active community made of dreamy developers)
Yeah, that is true. Hapi seems to be in a fairly stable state right now and probably doesn't need much of a concerted effort to maintain. That's cool. I really like the concepts behind electrode. Our internal tooling and tech stack is quite similar. It was too young to use for our codebase when we started development, but I've drawn inspiration from that and create-react-app along the way. Off topic, but could you explain how Walmart labs differs from Walmart? I'm curious 
I think even a mother should learn how to code because it's necessary for who likes to live along with logic. Javascript is a programming language. But I would suggest to learn python (or something same) for none-developers (programmers) because it's really easy to learn, scalable, reliable, readable, useful to perform simple tasks, and at the end it works for people! Notice that some programming languages like JS, PHP, Java and C++ are really same in syntax. So if you just learn once you can learn others in less time than the first language! Also their Compiling (or Interpreting) process is more the same. so you just need to learn concepts once and use them times to time. Consider C++ if you want to become to a professional system level programmer. Also consider learning C# because it is very useful to design apps fast and in the right way with mostly pure OOP (Object Oriented Programming) mechanism. As I said I would suggest you learn python. It's enough. If you will to go further, then start digging and learning others!
What are you using it for? If you're just defining some routes for a simple website or app then it's very simple to pick up, perhaps one of the easiest http frameworks, but there is a ton built into happy that can be difficult to dig into if you don't know where to look. Their docs, while detailed, are often fragmented in a way that can lead to a wild-doc-chase. To add to the problem, there are not a whole lot of articles or stack-exchange answers for commonly encountered problems.
&gt; The language needs radical changes Consider how explosively successful it has been, that sure is an interesting opinion.
That's a completely pointless article.
They're basically like any "lab" at a tech organization. They do a lot of R&amp;D, develop new software, new metrics, etc. They also develop and maintain the internal tools used to publish content to the website, and tools to transition the organization from legacy systems to their new ones. They probably do more but that's what I know about firsthand. They are very tightly integrated with the "regular" engineering department and to be honest the lines are blurry to me since I'm a third party developer. I did work on their campus in San Bruno with some of the Labs team (and I still work with them remotely) but we are talking about a massive organization with hundreds if not thousands of engineers. I interacted with a small and specific group relevant to my development work only. e: I don't know if that answered your question... I'm happy to explain more if you still have more questions.
&gt; You're a Loser! wow thanks man was already have a shitty day
There's an easy way to fix that, just be more of a winner.
can someone plz tell me how javascript my website?
&gt;Microsoft has embraced NodeJS, offering direct integrations into their Azure Platform, releasing a wealth of tutorials targeted at Node I've had a hard time finding these
if (!testing) { setTimeout(() =&gt; alert("You're more of a winner"), 300); }
I'm using it in a couple of projects. Using Boom, Scooter, Joi, JWT scopes, making plugins, etc. I agree that the documentation is not great though. You should take a look at some more complex SDKs / frameworks. For example the iOS and Android SDKs, or the Unreal Engine SDK. Those are much harder to swallow and require years to master.
I agree, adding mods isn't a option? i'm sure with a few more helping hands we can make the subreddit better.
I guess? But i still dont even think the dude did anything egregious....
It's incorporated into Azure Functions. I know that at least. That said, I get the sense the author of this article doesn't fully understand the difference between JavaScript and NodeJS. They also mentioned that Netflix "still uses Java on the back end, but everything you see is NodeJS". What? I guess what is and isn't NodeJS can be somewhat hard to define since projects that don't rely on NodeJS libraries may still use the Node Package Manager for their build process. Maybe that's enough to qualify as NodeJS? 
The issue with the most comments so far is [about logo ideas](https://github.com/ayojs/ayo/issues/17)
As a Redux maintainer, the idea of building isolation and encapsulation on top of an inherently _un_-encapsulated global store is one that I'm very interested in. I've actually accumulated a list of many existing libs that attempt to provide this in some form, in the [Component State and Encapsulation](https://github.com/markerikson/redux-ecosystem-links/blob/master/component-state.md) page of my Redux addons catalog. Sadly, I have enough stuff on my plate that I haven't had time to sit down and do serious research on what most of these libs actually do and how they compare to each other. That said, `redux-subspace` is definitely one that I've thought seems particularly interesting, and it looks like there's been some recent API updates. I may have to find some time to play around with it.
Maybe you shouldn't use a varchar for content that contains html and use text instead. 
Variable names can't start with a number. So `var 5 = ...` is not valid. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Variables &gt; A JavaScript identifier must start with a letter, underscore (_), or dollar sign ($) 
Are you trying to set '5' as a variable name? This is not valid, albeit you should be receiving an Unexpected number error rather than missing variable name. 
I've not seen that declaration type. Cool.
That answers my question, thanks. My old roommate was a director level data scientist for them, but I never bothered asking him about work much. Cheers.
JavaScript is a hipster language? WTF does that mean?
I have worked with all three actually. To that end, hands down, you are correct. My comment was speaking relative to other Node.js http libraries. If you're an experienced software engineer, Hapi.js has a fairly average learning curve, but for your average "web developer", it can be a bit difficult to fully grasp and utilize it's API. [edit]: However, it does sound like your use of Hapi's functionality is still rather limited.
Maybe comments like this are the things we should be fixing.
As mentioned in my comment, I'm on mobile. Autocorrect made the mistake.
Yes, sorry; auto carrot.
Hmm, I think that's probably not a good idea, the whole point of this is remote work, so country, city etc. is not so important
For what it's worth, I really appreciate the attitude you're giving this topic. So many other subs handle it worse. I'm curious how the sub as a whole responds. 
Reddit is a aggregator, and the vast majority of subscribers are not visiting /r/JavaScript and then filtering by topics pertaining to their interest, they're usually loading these stories from the front page.
Without getting too subjective on that topic. These are all tools. Sometimes adding a tool to your belt is good. Sometimes a job allows you to stick with the same tools for years. Sometimes a job affords the extra overhead of you learning and playing with stuff. Sometimes that's due to lots of projects starting up frequently, or lots of extra time to refactor. But as you mention, sometimes people don't make the correct decisions for their environment either. It's hardly for us, or the mods to decide whether or not those tools should be discussed, given that they are quite on topic.
What sort of time investment is being an active mod? Are there less-active mods as well? 
It's literally the opposite of hipster. It's pretty freakin mainstream
looks dead to me
I think you got somewhat wrong understanding about this. Instead of creating an array with numbers, just get a number from *Math.random()*. second of all even though you cant assign var as a number you can do so as an object key. var lootItems = { 1: "lorem", 2: "ipsum", } and to get the desired outcome: console.log(lootItems[generatedRandomNumber])
I am definitely interested in this sort of thing, since we are writing a multi-store app at our company. From what I can tell, this library's basic approach is to create a wrapper around the Redux store. This wrapper filters the `getState` method, namespaces the `dispatch` method, and applies its own separate middleware chain. The end result looks and feels a lot like using multiple separate stores, but with a single "real" store underlying things. Unfortunately, the documentation for this library is pretty hard to read - too broken down into too many little sections. When I look at a new project, I expect at least a little code example in the readme, but this has nothing. In fact, the entire `Basics` section could probably just go into the readme, or at least be combined into a single file. Based on this, it's not really clear how the two sub-apps can communicate. I suppose events dispatched to the "real" store might find their way into both sub-apps (depending on how the filtering works), but that's about it. I have no idea why I would prefer this library over just using two separate redux stores.
a-mazing? i'll show myself out.
No we don't need. Often there are interesting questions here...let's keep the sub alive and flowing please
We use jira at work and it has a plugin called tempo.... you start the tracker and stop when you finish a task. It's an over-glorified timer.... I bet you could whip something up without much difficulty.
Depending on your text editor, there are some extensions that will keep track of how long you have them open. For a standalone tool, you can use Toggl; which is free and has a nice reporting utility. 
Sorry for being off topic, but could you explain what "ethered" means? I could not find it on dict.cc
That's the one ! I would love to read the second part. 
Toggl works great if you can stay on top of it. But I always had trouble going back and adding in historical data. The UI could have improved rhough.
It's not that they don't have their uses, but it just feels.. out of place. It makes it awkward to string multiple manipulations together and it's generally not something people expect to see in code (from my own experience of course).
I like the site but I tend to agree. I get that it's intended for remote work but I imagine a lot of people want to work remotely in their own country and some companies still want workers in their own country or English speakers etc. I clicked on a job and it said it was for US residents only, if I'd known it was in the US I wouldn't have clicked it because I'm looking for a job in the UK. Either that or as already mentioned some tagging / filter system to make browsing more efficient.
But it isn't. It used to be
Right, I see what you mean! I can guarantee you that filtering feature will be released this week and I will work on some functionality to enable showing the country of the company. Thanks for you support and suggestions! 😊
 &gt;I guess what is and isn't NodeJS can be somewhat hard to define since projects that don't rely on NodeJS libraries may still use the Node Package Manager for their build process. Maybe that's enough to qualify as NodeJS? Using NPM shouldn't qualify as using Node. Let's say I've a static website on which I use some task runners. Saying I use Node for that website is laughable at best. Just my opinion though.
https://caolan.github.io/async/docs.html#eachOfLimit function does exactly what it supposed
Don't forget embedded devices (I am referring to Raspberry Pi / NXP i.MX6 / Qualcomm Snapdragon / TI DaVinci style platforms with an embedded Linux installed). Node is pretty big there. I used it myself. What's nice is how easy it is to integrate it into the system, and how its performance is substantially better than Python, Ruby, or PHP for example (the thought of running any of these, especially Ruby, on an embedded device with maybe 256MB RAM is scary). You can't expect the kind of huge loads on an embedded device that big web servers experience, so load balancing etc. is typically not a concern. That said, I never actually liked dynamically typed languages. I don't think they scale well, and I can never trust them as much as I can trust statically typed languages. No, unit tests are not a replacement, they solve a completely different problem. Perhaps a Rust equivalent of Node is going to be the next big thing..?
It isn't JavaScript that was called hipster. The article was referring to what was said about Node.js back in the early 0.x days. 
Thank you for your response! I will learn them :) 
npm isn't even the "Node Package Manager" anymore and that's because of what you are saying. 
Thank you for this!! Really helpful :) 
Don't be a dick. Everyone is at different stages of learning, and a lot of people here don't have a CS background or are purely front end, in which case they would have a fair bit to learn before they could use any backend framework.
Any feedback or request are very welcome ;)
not having to use webpack, transpilers or css dialects. I'd like es6 with all the trimmings by default everywhere, I'd like to be able to scope and parameterize css without some wonky naming convention. I'd like my js files to only contain js, and not have some combination of syntaxes that murder my editors highlighter/linting. oh, and I'd like new libraries to be written without being implicitly bound to a very popular rendering framework... I can live with thus stuff, but it's just a lot of extra noise that detracts from solving actual business problems 
Yep, completely agree with you. I'd absolutely love to be able to use ES6, 7, etc absolutely everywhere. Even saw a bit of a conversation on Twitter the other day about rekindling talk of being able to handle a virtual DOM a browser. 
Well he's right. With the growth in popularity there are also higher demands. If you start using a language like JS in big enterprise projects, the current solutions aren't going to cut it. The emergence of projects like Typescript point to that.
Both love and hate Webpack. Helped out a work mate today. He's on a different team, mostly made up of designers that build landing pages. They've built a small landing page tool that uses Webpack to serve their work so that they can test it on different devices. It's crazy to see just how much complexity Webpack adds to even the simplest projects if your not careful.
Considering how explosively successful any monopoly becomes, that opinion is nothing new.
it's an amazing tool - but it's solving a problem i wish we didn't have. at the same time i recognize it's a cornerstone that allows the js community to be so innovative/flexible. 
because the world is filled with billion dollar companies
I was hoping to learn something. :(
 const quality = 'pointless'; const comment = `That's a completely ${quality} article.`;
Even 30kb would be nothing, a single png/svg you load is more than that. You can easily go lower than that, if you alias to preact-compat the entire runtime overhead is under 3kb. Sveltes idea was nice but it was pretty much made obsolete by how optimized and tiny modern v-dom implementations are. 
 const result = 'something'; const emoji = ':('; const comment = `I was hoping to learn ${result}. ${emoji}`;
[Badum-tsh](https://youtu.be/bcYppAs6ZdI)
Yeah: &gt; Once only thought of as "hipster" technology, NodeJS is quickly becoming one of the most commonly used environments for building web applications and is beginning to find its way into the Enterprise.
May as well just use an array though
NPM is cool and all, but there's something very painful about using an ecosystem where `node_modules` is usually &gt;100MB for essentially _just code_
this ^
Wakatime is great, works with a bunch of text editors and will break down your dev time by language. Also there is a program called Timing App if you want to track all of your computer activity. It requires a bit of configuration but works really well. 
Microsoft is depreciating text, ntext, and image data types. Varchar should be correct in this situation. I have verified that the column is set to MAX, though I have not tested it to see if it will give me 2Gb. I also do not have SQL Server Manager...my hands are tied as to what I can really do. Microsoft source for depreciating text data type: https://docs.microsoft.com/en-us/sql/t-sql/data-types/ntext-text-and-image-transact-sql
And it's ultra-nested, repeated, messy, dependent... I know it feeds off it but for the client side it's **yarn** all the way.
Yeah, but only a fraction of that ends up in production 