Well, i pretty disagree with 2 cons of React from your listed 3 * Difficult to master for a newbie in web development - Our experience is strongly opposite. React is much better grasped by newbies or backend-only developers instead of for example quirks in jquery, backbone or different difficulties of Angular 1 (digest.apply i am looking at you...) * Lack of properly done documentation - documentation with examples and tutorials and underlying filosophy https://facebook.github.io/react/docs/hello-world.html . Did you accidentaly mean poorly documented components? Thats up to their authors.
It might be a dumb questions but is learning Redux really that important? I'm learning how to use React-Native and so far I've created a few pages for my application and well, I just don't know in what way using all this patterns would help me.
And you lack Vue there.
Why a JS library for setting CSS styles? Wouldn't http://tachyons.io/ suffice? Or I didn't get the point?
I have the same experience. We are using vuejs at my workplace and people who has never worked with any kind of js framework can pick it up in a matter of hours vs days or weeks. It's definitely sped up our development and is pretty fun and easy to work with.
`handleEvent` is an option, but its messy because you're dealing with a big conditional of event checking to determine how to route your events and doesn't provide a way to easily turn on/off events individually. While it solves the context problem, its usually easier to bind or use arrow functions to address that.
Hi /u/agentf90, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Hi /u/agentf90, English-only please.
Hey, I didn't quite understand what you meant by 'work with pointer events', could you please explain? :)
As others have said... install node or open the console in your browser. Essentially what you're looking for is a REPL. That stands for Read Eval Print Loop. Essentially every statement entered gets evaluated and the results printed to the console. That's really all a console is. A REPL.
Karma and The Truth are often at odds. 
By React, the article means framework. That's my only point and it is misleading to junior devs, business managers, and others in tech who aren't writing code and think it's an apples to apples comparison. Libs are not frameworks. They should not be evaluated alongside them 1:1. 
I think this line of criticism is valid. I don't dislike the current JavaScript ecosystem; as someone who's been at this for nearly a decade, writing reliable, complex JS applications is a lot easier than it was in the past. The downside is that there's a heavy emphasis in the community on creating complex applications, and less of an emphasis on starting out simply, with no libraries or frameworks, and just layering on what you need when you need it. When I first started developing web applications, JavaScript wasn't just a language; its ability to easily interact the the DOM and Canvas elements almost made JS feel like a medium of expression that I could use to translate my thoughts into real things that appeared on the screen. That's still just as easy as it used to be. But a newcomer right now might feel like they *have* to start out using Webpack, React, Redux, etc. or else they'll be hopelessly outdated. The solution to this is more cultural than technical. When hiring, I wouldn't hesitate to hire someone who understand JS really well but hasn't done much or any React/Angular/Vue. It seems as though most of the industry doesn't approach it this way, however. From what I've observed, there's usually a heavy emphasis on having experience with very specific frameworks. I dislike this approach because it often prevents teams from hiring the best people they could. If you're hiring a short term contractor who needs to be at full productivity immediately, being specific is fine. A few years back, the dev team I was on hired a co-op student from the University of Waterloo to help us out for 4 months. He was very smart, but didn't really have any experience with the tech stack we were using. It didn't matter; he was up to speed within a couple of weeks, and within a couple of months was outproducing some very experienced developers. I'd like to see more awareness of this in the JS community, and the dev community in general. Or maybe not; when the majority of hiring is done badly, it makes it easier for people like me to take a 'Moneyball' approach to hiring and pick up top talent that other teams miss out on.
Take a look at salyne it is a vanilla nodejs di framework. It's really flexible and very small. Or if you are using typescript I would use AngularJS's di framework. 
I think the idea is that they want to learn, but know nothing yet. I don't think they're trying to teach someone else.
Find a "learn javascript free" tutorial on the web and follow it. Then do it again, trying to do as much as you can without the tutorial. Repeat that until you feel you've got a handle on it. Then find a harder tutorial.
The definition of ignorant: &gt; lacking knowledge or awareness in general; uneducated or unsophisticated
We use both React and Vue for our projects. With "pick it up" you mean grok the hello world example. Vue is deep and complex and has cognitive overhead. Less complex than Angular maybe but immensely more so than, say, React. To learn it "in a matter of hours" is improbable. It has over 60 pages of documentation that needs to be understood as you're bumping into obscure edge cases and observer intricacies once you stray from hello-world and todo. As well as a large API surface and template language with arbitrary code-in-html directives, which are also changing from version to version. It took me a week, probably more, until i got the more esoteric edge cases. Maybe a month or two in until i could say i fully understand what's going on. I have learned React, fully, under an hour, never read a single page of documentation, rarely felt the need to look something up. This is because React doesn't introduce anything new. It's simple Javascript, some class lifecycles and extended HTML.
I find the best way to learn a new language or framework is to simply build something with it. If you follow a tutorial, make sure you are not copying and pasting the code. Try and understand what you are writing and why you are writing it. As for the language to choose, it is up to you. People say to start with this language because of x or that language because of y. But in reality it doesn't matter that much in the long run. Over at /r/learnprogramming, in the FAQ they have a ["How do I get started with programming"](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_do_i_get_started_with_programming.3F) which will probably be somewhat helpful.
It seamlessly integrates with Vue components and Vue's official devtools extension to provide advanced features such as zero-config time-travel debugging and state snapshot export / import.
Well more like "npm package", or "hackage package", etc. Just packages of software we cludge together. In other news I hope people see we've gone full circle. VueJS is practically Angular 1.5+ (which introduced component based development, like React) - and people love it. I don't see how Redux is much different from a client-side database too, besides state reducers (which I haven't informed myself about). The one thing that is nice about this movement is the reactive programming model that has been around for awhile in the academic function programming world. It is so natural to just 'let data flow'. I think libraries like RxJS and friends are going to see a huge surge in popularity. It's basically like map/filter/reduce in more places. Although I have almost no problems thinking in terms of map/filter/reduce I do have issues gaining intuition for when to use merge/concat/the 20 other methods in RxJS, but I think practice will solve that :) Actually a lot of the time the other methods are just helpers.
Pointer events are a modern alternative to touch events that unify touch and mouse events. https://developers.google.com/web/updates/2016/10/pointer-events
I see frameworks/view libraries listed all of the time on job applications but usually with the caveat "but not necessary". It would help as far as getting up to speed if a candidate don't have to learn whatever framework or view library, which does take time. But I agree, I don't think it should ever be a dealbreaker. But I guess the thing is that front ends are pretty complex nowadays and need more care given to how they are written and how they are tooled. Hacking together some stuff with vanilla JS and jQuery is great but that's also not really realistic for what your working conditions will be on any web application. I personally learned on my own and started with simple interactive pages with a single .js file before moving onto frameworks, not because I wanted to learn a framework specifically, but because I wanted to build more interesting things, which is where a framework can really help. So I think when we talk about experience with frameworks what we're really talking about is experience building complex apps with lots of moving parts / logic.
You're right, this i believe was also the argument Andr√© Staltz made. See here: https://twitter.com/andrestaltz/status/702177514320486400 Though i still find it very different than working with traditional MVVM back in the day (mostly C#/XAML). 
That's what [wavy](https://www.npmjs.com/package/wavy) does, but the big issue is when you don't have sudo control on linux. Symlinking requires sudo (depending on your setup), and in cases like elasticbeanstalk, installing wavy fails. I love wavy, but it doesn't always work. 
&gt; I'm sorry but software runs on real benefits and flaws, not emotions. Man, not even McDonalds food is that salty. As the french say, on se calme toi!
There's one big advantage of using .vue files - templates are auto compiled to vdom render functions - it's much better for your app performance. 
Not really, I assumed they would be more manageable. Next project I'll try it without the .vue files :)
Yeah I get you, that's the thing i'm most worried about, not being able to solve a fairly simple question, either because I'm nervous, or because I know how to do it, but I may need to Google some things to refresh my memory. 
Sorry, forgot that part. I did it now
&gt; static hello = "world"; That's a field declaration. It's not part of the language yet. https://tc39.github.io/proposal-class-public-fields/ https://tc39.github.io/proposal-private-fields/
Yeah for Vue!
well, local paths seems easier
Thanks for this, I actually bought and watched it, it was really helpful and I took down notes as I was watching. 
Exactly this. In my experience Vuex is perfect until you start building more business logic that has nothing to do with rendering an UI. We have a lot of logic for keeping vuex state in sync in a websocket heavy app (normal js code that does not touch vue) - in this case there are more gotchas and it's not as vanilla as redux.
Currently I'm just fiddling with server-side code rather than client code but thanks! 
I said this in a few other comments, when you are doing local paths they are copied into your Node_modules folder, which don't update until you do another npm install. 
I want to like yarn, but I've had to hold off due to numerous issues that have come up during development. I wasn't able to pinpoint the exact cause, but essentially, installing dependencies with yarn and then running our build process resulted in numerous, hard to debug javascript runtime errors. Doing a clean dependency install with npm and then running our build process everything worked fine. This happened on two different projects, with different dependencies. On a tight timeline I don't have time to debug issues with the build process, so I'm going to pass on yarn until it can be proven stable in my own experience. It definitely is faster, so it has that going for it.
Seems like you should be using the [Intersection Observer API](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API) for this instead of attaching 'scroll' event listeners.
Wherever shortcoming yarn still has, npm is worse by default. Using npm w/o shrink-wrap is a time bomb
Guess I'll just wait for npm to catch up.
The speed increase is nice, but to me the most important difference is the checksum per package/version. It is still a single point of failure though (single repository name resolution). To me this is still a huge killer. If we think back to the leftpad failure the root cause of the issue was potential trademark infringement of another of that developer's packages. Yarn looks to the NPM repository to resolve a name. Another problem here is name squatting. A frequently downloaded package can be abandoned and become stale, but will never be unpublished for fear of breaking dependent applications.
Thanks. I think I have it solved then. The global-plugin should be included *after* babel has run, not before. All the tutorials seemed to show it coming before though, so I'm not sure if it'll cause compilation differences.
We definitely ran into that problem when yarn was first released, but it's come a **long** way since then. I'd recommend giving it another shot.
Yeah, using a native OS package manager is listed as the preferred download method, but I (and many on my team) use some kind of node version manager (e.g. [nvm](https://github.com/creationix/nvm)), which forces us to install via `npm i -g`. Not sure if there's a way to get around that limitation. Having said that, I've yet to run into any problems related to the `npm i -g` installation method.
Yeah, one thing I'm definitely hoping for is that this spurs the npm team to catch up in the many ways that yarn has outperformed.
Here's a temp link to the website if you'd like to take a look: http://17e.80d.mwp.accessdomain.com/
You're saying you *knew* you can't [use =&gt; in certain places because `this` will be missing](https://github.com/vuejs-templates/browserify-simple/issues/6), yet in other places you can. You knew that this.localDataDontTouch can get transformed into deep observers unless you define it in the created hook. You knew that you need to [register components](https://vuejs.org/v2/guide/components.html#ad) globally or link them locally to be able to use them in other templates. You knew that you [cannot add new fields to existing datasets](https://vuejs.org/v2/guide/reactivity.html#ad) (`data.newAttribute = 123`) unless you use $set. You knew that you can't [replace array elements] (https://vuejs.org/v2/guide/list.html#Caveats) (`data.items[1] = newValue`) unless you use set or splice. Not to mention the templating syntax. It's just weird, i wonder what kind of Vue you're using, because the one i learned had me study docs and github issues. I write, every now and then, because people spread misinformation. I don't doubt you got the example under an hour. I doubt you understood Vue without reading large parts of the documentation once or in passing, or that you needed "an hour" and that was that. 
In what context?
It definitely works. You're probably running into a scope issue. You'll need to provide all the code you're running. Also please format your code with \`\`\````code```\`\`\` 
How do I format it like that?
I'll try that, thank you!
How's the size and performance of the generated JS? &gt; Numerous popular JS libraries will be available through typed headers (converted from DefinitelyTyped). Heh. Now that's pretty interesting. Type definitions are now useful for TypeScript (obviously), JavaScript (if you use an editor which can load them), Dart (conversion), and Kotlin (conversion). Writing "JavaScript" libraries in TypeScript really sounds like the most sensible option. Especially if you consider that you should document the types anyways.
You are solving the problem with indirection which feels good but is actually counter productive. Now the freshly hired node dev needs to learn this one off system. Not just how to use it but also how to debug when it goes wrong. 
can you just change the html? That will be a lot easier
Also [Flow](https://flowtype.org/)
It's not maintainable, read the comments from the other guys.
I assume I can but I'm not sure what I need to change and where I'd find it.
Ceylon [might join the fun some day](https://github.com/ceylon/ceylon/issues/3041) too. [Ping /u/gavinaking]
Damn I missed this book in the $5 holidays sale
Just start... Literally type "javascript tutorial" into google and start clicking links. I feel like this post is procrastination.
but also https://www.reddit.com/r/javascript/comments/5n8slk/why_you_should_give_aurelia_a_chance_in_2017/
Wow ! Just Wow ! Thanks a ton !
Maybe with that attitude it is. There are several advantages to compiling for server code. For starters, you will get better backwards compatibility to older version of node. This is most useful if you are shipping a node module because you don't want your module to dictate what version of node the person consuming your library has to use. In addition to being able to use useful plugins like babel-module-resolver you can add static type checkers such as flow or typescript. You sound like people from a year ago arguing the merits of compiling client side code or like people who claim they don't like react because they don't like JSX. At the end of the day babel is a huge breakthrough in language theory not using it because you think it's stupid is... well stupid. 
&gt; $(basename $0) hey, when I use $(basename $0) in a preinstall script in my package.json it returns `sh` on both `npm install`and `yarn`. apologies for my inexperience, but do you know how to return something more useful? thank you!
Compiling client-side code isn't in the same realm as server side code. They have different use cases and need different solutions. If you're making a module, sure, compile it to make it backwards compatible. I might end up having to do that just so it's not only a 6.x module, but for now I'm writing my application in 6.x and didn't want to bother testing backwards compatibility just yet. When writing a node server application thought I want to not have to compile and try to figure out where an error came from. (I don't recall if sourcemaps work in a server environment) This may not be the solution for you, but it definitely helps me write the server code structure I want, plus the less modules I rely on the better.
I've basically just swapped out npm in my workflow with yarn. In the above example, I would run `yarn test:prod`.
So it turns out, you have problems with webpack (gulp, grunt, ...) and not with particular framework. And then, you divide framework to easy ones where appending script tag is sufficient to get running, and hard ones where you (for real usage) need some bundler. (Let me remind you, Angular 2 is transpiled/bundled too)
`salesStaff` is just an array so it won't have your `getName` method. You have to provide an index to use the Person objects in the array. You'd do something like: temp += "Name: " + salesStaff[i].getName; Also this line will probably get you in some trouble: var salesStaff = new Array(Person); It should just be `new Array()` or even better just `[]`. edit: failed attempt to improve formatting
Rule of thumb for using Redux for managing state is when managing state starts getting pretty inconvenient. For example, if one section fetches data on render, and another separate section's state depends on that data, then Redux can help you manage that flow. Or if you pass a method from a parent to a child component 3 levels down that updates the parent's state when called, you could use React context to avoid the boilerplate of passing props multiple levels, but at that point you might as well use Redux. It's up to your personal judgement, but in the apps I've worked on it doesn't take more than a few days to realize managing an app's state without state management tools will start being cumbersome.
I've run this command several times with yarn 0.18.1 and above: `yarn add git+ssh://git@github.com/{orgname}/{reponame}.git#vx.x.x` The tag could be different of course. I believe it just takes default branch if nothing specified. It would've been impossible for us to use yarn in our organization if this did not work. FWIW, using the `file://` syntax also works. I do that a lot for local development when working on libraries or other packages.
I posted the wrong issue and updated it probably while you were reading the comment. I also clarified in my OP about what I meant.
 function Person(name, startTime, endTime, area, comment) { this.name = name; this.startTime = startTime; this.endTime = endTime; this.area = area; this.comment = comment; } function fillMonday() { var spreadSheet = SpreadsheetApp.getActiveSpreadsheet(); var sheet = spreadSheet.getSheetByName('Schedule'); var salesNames = sheet.getRange("A8:A58").getValues(); var salesDetails = sheet.getRange("E8:E58").getValues(); var salesEndTime = sheet.getRange("F8:F58").getValues(); var salesStaff = []; var row; var salesPerson; for (row = 0, row &lt; salesNames.length; row += 3) { if (salesNames[row] != "") { salesPerson = new Person( salesNames[row], salesDetails[row], salesEndTime[row], salesDetails[row + 1], salesDetails[row + 2] ); salesStaff.push(salesPerson); } } var output = salesStaff.map(function (salesPerson) { return [ 'Name: ', salesPerson.name, 'Start Time: ', salesPerson.startTime, 'End Time:', salesPerson.endTime, 'Area: ', salesPerson.area, 'Comment: ', salesPerson.comment ].join(''); }).join('\n'); SpreadsheetApp.getUi().alert(output); } This should be okay, but I'm guessing you might have an issue with the number of elements in salesNames and salesDetails.
As I mentioned, it probably does solve it, but we have 8 pages of repos on github (so up to 240 repos). Even if we cut down actively used repos down to 50 that is a lot of places that we'd need to update the package.json files. The effort for that isn't exactly hard, but is a pain in the ass particularly when there are more pressing things to get done. It also was a known issue since around September with a PR for it for awhile, so I was hoping it would get resolved already.
Yeah, makes sense. Probably isn't for everyone at this point.
I'm not sure if you'll find a mentor, but I'd recommend joining SpeakJS on discord, it's always got active discussions going. I'll give you an invite if you'd like?
[removed]
I don't have a problem with webpack, and I don't think react is "hard". I just have a hard time justifying the overhead. (I have the same feelings about angular 2 btw). It isn't whether they're "Hard" or "Easy", both frameworks are fairly easy to learn it's about overhead. What does having 7 thousand files and an otherwise unnecessary build process get me? From what I've seen after working with react for a while, very little... If you're building an app that needs to display 5000 things at once and they all need to be constantly updated (like a stock tracker maybe) I can see why you might go with react. Other than that, I don't see what makes it worth it.
you're absolutely right about that. 1-1 translations don't work really well between those 2 paradigms. However, since a lot of people are used to MVC, I tried to explain how to transition that thinking.
I think you should at first learn react native to get a handle on it (understand when it renders, how state and props work...). However, if you are building something semi-serious (outside of a hello world) I would definitely recommend using Redux to handle your state.
a bit off-topic. But do you not find nvm.sh to slow down your shell startup time? By seconds...
I would eat the "pain" of relative path. Your solution is worst than the problem 
Using vue at work to redo an app implemented in angular 1.x....i love it
Thx mate
Yes, I have. It takes forever to load. I still use it however, as there are sometimes when I want to switch node versions easily...
thank you! great solution
It helps especially when you are doing this often, when you are working in a team or when you're working in a bigger project. If this is just your own experiment or work, it may not be worth it to break it into its own function. But if you're working in a bigger project or as a team, it'll make things much more readable as it separates what you're doing (making a range) from how you're doing it. But then again readability is subjective so if in the context that you are using it it makes sense to leave it then so be it. 
Just target with css...but yes this is possible with jquery pretty easily using the .css method 
True but your first point isn't really fair. Missing 'this' when using =&gt; is a part of ES6, not Vue specific. Sort of the same gotcha when you move from React 'Create Class' to extending an existing one and having to bind props to this in the constructor. 
brackets represent optional arguments. So given that format, you can take Array.from to be called in any of the following ways: Array.from(arrayLike) // or Array.from(arrayLike, mapFn) // or Array.from(arrayLike, mapFn, thisArg) You may also see ellipsis (`...`) used which represents any number of additional arguments can be used. Methods like Array.prototype.push would have this. When you see a pipe (`|`) that means an or, so one of any of the values bridged by 1 or more pipes.
My pleasure :)
One thing, when I'm talking about 'a much better alternative approach to OP's problem', I'm not talking about alternative ways to make it seem like you're cloning while you actually aren't. What I rather mean is that there's probably some other way to approach the original problem so that you don't have to worry about any of this.
Tried it not long after release. If they've added support for private npm registries then the switch might be worth it..until then it's borderline useless to me at work :(
Sure, but that's Javascript, not React. It is the same thing you run into when you use vanilla `addEventListener`. Not just that, new specs fix it, and it's fixable to begin with because React sticks to Javascript. class Button extends Component { onChange = () =&gt; console.log(this) render() { return &lt;button onClick={this.onChange} /&gt; } With Vue you run into it because you're passing arbitrary props into a blackbox and nothing's gonna fix that. Something internal has to inject/bind `this`, hence it has to be a function, or so you find out after searching through Github issues. Most of Vues gotchas are like this. There are reasons always, but they're intricate and internal, which makes it tough to learn.
Depends on the problem. Sometimes you spend more time trying to avoid it than if you just confronted it. I would rather deep clone and finish something in half an hour than spend half a day trying to avoid the issue. Only if it becomes a problem would I then go back. It's useful to know how to do both and be flexible.
The `run` command is optional for scripts that aren't named like a default command, that's a nice touch, and there are no walls of text on error.
Can't this be resolved with practical discussion, rather than resorting to statistics? "Look at how many people are doing this" is unlikely to convince them if they weren't already convinced before, beyond just pressuring them to fall in line. If there is currently no build process for your project, then not wanting to add one for transpilation is a valid concern and usage statistics strip away that important context. But if you're already concatenating/minifying code, preprocessing CSS, etc, then the argument becomes much easier. Hear their arguments, provide counterarguments, and figure out what the best solution is for your project.
That would be great if you could send me an invite on Discord. 
Here it is... untested... and requires jquery because im super lazy (sorry): $(function () { $('img').each(function () { var _data = $(this).data(); var _img_src = _data.src ? _data.src : this.src; if (typeof (localStorage[_img_src]) !== "undefined") { this.src = localStorage[_img_src]; } }); }); $(document).load(function () { setTimeout(function () { $('img').each(function () { var _data = $(this).data(); var _img_src = _data.src ? _data.src : this.src; if (typeof (localStorage[_img_src]) === "undefined") { getDataUri(_img_src, function (dataUri) { localStorage[_img_src] = dataUri; }); } }); }, 2000); }); function getDataUri(url, callback) { var image = new Image(); image.onload = function () { var canvas = document.createElement('canvas'); canvas.width = this.naturalWidth; canvas.height = this.naturalHeight; canvas.getContext('2d').drawImage(this, 0, 0); callback(canvas.toDataURL('image/png')); }; image.src = url; }
Here it is formatted... $(function() { $('img').each(function() { var _data = $(this).data(); var _img_src = _data.src ? _data.src : this.src; if (typeof(localStorage[_img_src]) !== "undefined") { this.src = localStorage[_img_src]; } }); }); $(document).load(function() { setTimeout(function() { $('img').each(function() { var _data = $(this).data(); var _img_src = _data.src ? _data.src : this.src; if (typeof(localStorage[_img_src]) === "undefined") { getDataUri(_img_src, function(dataUri) { localStorage[_img_src] = dataUri; }); } }); }, 2000); }); function getDataUri(url, callback) { var image = new Image(); image.onload = function() { var canvas = document.createElement('canvas'); canvas.width = this.naturalWidth; canvas.height = this.naturalHeight; canvas.getContext('2d').drawImage(this, 0, 0); callback(canvas.toDataURL('image/png')); }; image.src = url; }
Thanks
In fact, it's was the main counter argument; no one is using this, only blogger. We are already using gulp in our process, so adding babel would be pretty trivial. The main concern remains the difference between the transpired code and the source code while debugging. Is there a easy way to use "raw" es6 for browser that supported it and send the transpired version for the older browser?
Do you have any idea how annoying that would be? Cache should be able to be cleared.
Both angular2 and salyne work on nodejs server side. 
Might consider https://auth0.com/lock. It's takes care of a lot of lifting for you. https://scotch.io/tutorials/%E2%80%8Bthe-easiest-way-to-add-authentication-to-any-app
It's very old syntax, I know *nix man pages use it.
There is better way: service worker + application cache
It's missing LazySizes, simply the most useful tool I have in my arsenal. Lazy loads srcsets, so I can specify a range of sizes from small to large and it loads the appropriate img for mobile all the way up to large desktop size. With plugins, you can also lazy load iframes or HTML fragments. Works like a charm.
Can you elaborate a bit?
Redux store with a complex data object. This would make updates in the reducers more terse. Destructuring and the "splat" operator has made it much better than it was though. 
Though I would argue that maybe you need to break apart your store
Jquery.lazy is 5kb minified. not 1.27.
fair enough
https://discord.gg/TCjsZcP :)
I just use the DOM methods. Sometimes I will write aliases to make the code faster to write, like `id("whatever")` instead of `document.getElementById("whatever")`. Its just so much faster at execution time.
Reference for Chrome's [Command Line API](https://developers.google.com/web/tools/chrome-devtools/console/command-line-reference). As the link says, not only does it provide `$()` for `document.querySelector()`, but it also provides `$$()` for `document.querySelectorAll()`. Additionally it lists `$0` to `$4` as references to the last selected elements (so there's only five, not ten). One interesting oddity though, is that `$_` is provided to 'reference the value of the most recently evaluated expression', which has nothing to do with the DOM at all. So in some ways, '$' is being used more generally as a symbol with special meaning. Still, it's very commonly used specifically to indicate DOM interaction, and you could consider that in itself a special meaning. So I wholly agree that it's a perfectly fine convention for indicating DOM elements. Besides, /u/newmarc, what would your alternative be? Simply leaving out the special indication and use regular variable naming doesn't seem like an option to me.Even though you're not working with jQuery objects, you're still working with DOM objects which are arguably more special in their own right.
this is pretty much what i was looking for a solid starting place to reference and learn the basics.. i appreciate you taking the time to explaining everything for me..
I just added a symlink in `~/bin/` so if I need node in the shell I just source it, wait the couple of seconds: `source ~/bin/nvm.sh` or shorthand `. ~/bin/nvm.sh`. Helps me keep my sanity.
Kudos
&gt; https://github.com/yarnpkg/yarn/issues/2500 I've been waiting for this to be fixed for months. There was PR merged a few weeks ago that was supposed to fix it, but didn't actually. So disappointed. Everyone always says "change the : to a /" but that's not possible when 2nd-level deps use a colon and you can't change their package.json...
There was a PR merged recently to fix this.
Nice. Hope IE supports it soon.
I am not sure i follow. These are just language specifics. They are fully ratified. If someone doesn't understand an aspect of it, that someone needs more study, especially in a professional environment because it is literally limiting the enterprise. I find the amish culture that surrounds Javascript really odd, i have never seen that happen with C++ or otherwise, where new specs are anticipated because they allow for better code. And especially 5 to 6 had such an impact when it comes to a clean codebase. There is nothing in current Javascript that is more confusing than ES5 was. If anything Javascript has become a viable and flexible language.
`Promise.all(promises.map(p =&gt; p.catch(e =&gt; {})))`
yes, that's right, my god
Yeah, speed has become an issue recently.. I've been investigating other testing frameworks such as Jest, which has cut running down from ~60 seconds to ~10 seconds, it took about 15 minutes to convert all the tests over and get everything running. Just need to get over the implicit globals and large API..
Don't see [github.com/vvo/lazyload](https://github.com/vvo/lazyload) mentioned. When I looked for such library, its description seemed very promising: &gt; Lazyload images, iframes, widgets with a ~1kb standalone script. But the project is not so actively updated...
Yes, SPDY has been replaced by HTTP/2, which started as a branch off of SPDY as I understand it. In fact, one webserver, NGINX, dropped SPDY support in the same version that it gained HTTP/2 support, as the devs said that maintaining the two different ways of doing the same thing caused all sorts of havoc in their code. The biggest drawback I've encountered with HTTP/2 over SPDY (limited personal play, none of my work projects have converted over yet) is that websockets don't work over HTTP/2, though that's not as big a deal as it would be in the HTTP/1.X world, since the combination of fetch and EventSource over a multiplexed connection gets you much of what websockets did. That, however, is a different discussion with pros and cons on both sides.
Prevent the autoplay.
Hi aFoolsDuty, sorry for not responding to this faster and thanks for your question. Yes, we are funded by VCs and a handful of well-known Angels. We don't have any intention to exit over the next few years which could potentially harm the platform. Let me know if you have any further questions or reach out to me [via Slack](https://slack.graph.cool).
a "query selector" variable is just a dom node (or a list of nodes), it doesn't need any special prefix. Do you prefix your arrays with A and objects with O ? no. so don't.
EventSource is one-directional. Are you sure sockets aren't supported in HTTP2? Sockets are bi-directional.
$dom convention and stream$ convetion look pretty similar. It could be really inapprehensible.. 
&gt; It would basically be a much faster version of caching images I'm almost certain it would be much slower. You're suggesting we store the data in a way that inflates it by 30%, then load all that extra data, then parse it into a JS string, then parse it into a URL, then parse it as base 64, and only then get to the image binary. Whereas native caching just directly loads the image binary. And we haven't even gotten to slow localStorage implementations. &gt; *it would persist even after the user clears their cache* ... which is a big problem. Managing caches is hard, "just make it stay cached" is not sufficient. HTTP has gone through iterations of strategies here. All that said, an implementation would be interesting, even if all it gives us is more knowledge of what not to do.
Don't kid yourself man...
It depends, I'll illustrate with examples. ### Example: Form inputs let name_input = document.querySelector('.my_form input[name="username"]'); let lang_select = document.querySelector('.my_form select[name="language"]); ### Example: List elements let menu_item = document.querySelector('.menu .item'); let link_elem = document.querySelector('.menu a.link'); ### Example: Text node ``` let text_node = document.createTextNode('some string'); ``` ### Example: Node list ``` let menu_item_node_list = document.querySelectorAll('.menu .item'); ``` 
I was basically just suggesting that it might be faster to load the important images in this obscure way rather than loading it from temporary files...
I know it's from Facebook that's why it can't be trusted (being automatically biased). And having a single source of truth isn't necessarily foreign to a more classic MVC pattern and definitely not a Flux-only thing. I'm pretty sure you can do some nice MVVM stuff with two-way binding that still maintains the single source of truth paradigm. You most certainly can keep control flow clean and simple when using mutations, as long as you can still guarantee that everything that depends on what you just mutated gets updated. Flux/Redux are pretty basic libraries that are pretty limited by React's poor state and prop tracking, meaning that going full immutable is probably the only way you're not going to have any problems dealing with rerendering, at the cost of efficiency (unless you waste a lot of man-hours to create a very tight model with connectors that might not be the most obvious solution to your initial problem). You choose immutability because it's the basic easy and predictable solution for most problems, while a mutable solution is most of the time pretty damn impossible to do right. But it turns out, at least for state management in a React app, that a library like MobX solves every single mutability-related issue there is. You can mutate everything around as you please and it will still maintain the single source of truth for free, synchronously, without any manual intervention (like writing connectors and lifecycle methods). It's not about appease MVC people, it's about designing the most simple and efficent way of solving the state issue.
That being said, transpilation is great right now, and there are contexts (node) where you probably don't even need to do that. Rereading this it comes off as kind of aggressive, but I don't want anyone to read it and walk away thinking "ES6 looks really cool but I guess I shouldn't use it." If you want to use ES6 you can do it now and still support old browsers. Babel supports I think all the way back to IE10 or something. Just requires an extra build step.
For example, let's say you have a game state for a multiplayer trivia game { status: 'RUNNING', currentRound: 0, rounds: [ { question: 'Wut?', options: [ 'Foo', 'Bar', 'Foobar' ], answer: 1, guesses: { p1: 1, p2: 0, p3: null, p4: 2 } } ] } Now you receive an action with the following payload { type: 'guess', player: 'p3', value: 1 } If you *mutate* the state, applying this action is easy const { value, player } = action state.rounds[state.currentRound].guesses[player] = value But if you *don't want to mutate the state* and instead, want to create a new immutable state with similar update, it's not very pretty, even if you use the ES6 destructor notation `...` in place of the more verbose `Object.assign()` method const { value, player } = action { ...state, rounds: [ ...state.rounds, [state.currentRound]: { ...state.rounds[state.currentRound], guesses: { [player]: answer } } ] } Did you notice this code is wrong and unintentionally removes the answers for everyone else? It should actually read const { value, player } = action { ...state, rounds: [ ...state.rounds, [state.currentRound]: { ...state.rounds[state.currentRound], guesses: { ...state.rounds[s.currentRound].guesses, [player]: [answer] } } ] } I'm not at all sure that's right either, because it's a total mess, when the goal is to just create a new state with a slight modification inside it. That's why additional tooling is sometimes required to deal with immutable objects. (I don't think this is necessarily the best library to do it, but that's the idea behind it anyway) 
Not yet! Just an RSS feed. Closest thing is Twitter or checking weekly. Here's this week's https://aframe.io/blog/awoa-44/
Facebooks example reflects my experience. We're doing heavy CAD applications, before in C++/C#/XAML. The bigger the apps got, the more we ran into complex issues channeling the intense flow of data. We're doing the same now in Javascript, still at a very early stage ([#1](http://i.imgur.com/4czNdW5.png), [#2](http://i.imgur.com/R1OzDFw.png)). State in Redux is no problem. The basic structure of the app has never been that small. It will reach parity with the desktop class application this year at probably 70% less code using React and Redux. As for MobX. Another problem is that it fights against the language. There are no observers in JS without stable proxies (it will be years until IE11 goes away). The hacked set/get observer in MobX has [drawbacks](https://mobx.js.org/best/react.html) and gotchas. But it may not apply to your project. Another reason for Redux was that we can take code out wholesale and plug it into any framework we like. The logic is completely abstracted and universal. 
Yes if you still not look at vue, please take some time just to look at make simple component (on weekend). Very simple and just can pull in anywhere in old application. Like you have app now exist, you can just write the vue component then include the `&lt;script&gt;` and custom vue element in HTML (or which any virtual view layer) and you can let this vue be render. Great if you just want to make new prototype part of app but in one place and you do not need refactor any. Now Laravel is use it in default project and optional but still use template engine PHP blade for general (just special case they want use vue).
You assign `friendsInput` at the top of your script - the part that gets run as soon as the page loads. When the page loads, the value of "#friends" input is an empty string because no one has had time to add anything to it. What you want is to assign `friendsInput` inside your click handler because this is the code that gets run when the user has identified that they're done typing in their name and is ready for you to capture it.
that is exactly the type of problem I was running into (there is socket.broadcast.emit which emits to every other connected socket, but nothing within a room). Using a domain.io function like emitToDifference works well in this case. Another common problem I ran into was users in multiple rooms receiving 2 * events when something interesting to both rooms happened. Afaik, socket.io doesn't have something built in for that, so emitToUnion came about ;)
The '$' prefix was used to differentiate between jQuery collections and regular DOM objects. E.g. "$button" vs "button". In JS, I don't use any special prefix for DOM elements, NodeLists, or whatever. And in Dart and TypeScript, I got types for that.
Looks promising. Thanks.
If doing this, set width and height properly where possible so that your page doesn't bounce all over the place as the images eventually load and the tag is resized to fit.
I'm an admitted enthusiast...I use node in the shell practically every time I open the shell haha
I have a hard time believing you can reach parity between a native app and a React/Redux app, especially in a heavy CAD application. Unless of course your native app was horribly designed, which indeed looks to be the case from your experience. MobX's drawbacks are pretty negligeable in the real world (except maybe for arrays not being arrays which is a definte gotcha), and I don't exactly understand how the code I'm writing wouldn't be portable, it's entirely agnostic. It even has some uses on the server from what I've seen.
I was unaware about those kinds of issues. It's not hero worship, and I certainly can't support that kind of talk either, but I seriously doubt everyone at npm is that way. And besides, when any group of people is lumped together (as in my "awesome people" comment) there are bound to be outliers. I'm not going to add qualifiers to everything I say. 
Write a real time app in plain JS with 3-4 people. Over the course of a year your codebase will be a giant mess of spaghetti. React (and others) solve this problem but React solves it without imposing an entirely separate api on you (unless you count the 10 or so lifecycle events). Also React doesn't really belong on this list. It not being a fully featured framework is exactly why I (and I know others) use it. I can pick exactly what I need and bring it all together so there is very little magic going on. I also have never encountered weird JSX compilation problems with the single exception of not being aware SVG was not fully supported back in React 13. Could you elaborate more on this?
Gulp is way, way more complex to handle in a modern environment, using modules. It's just not made for the task. As for Wp being a bundler, that's not entirely true. It's a build-system that bundles. There's probably not a single thing left that Gulp could do, or even do better and simpler. Or name it at least, i'd like to know. Anyway, throwing someone into the Gulp pit, in a modern ES2017 oriented project, with modules. It's quite silly.
It doesn't look like this filters-out the rejected ones. The OP's code does.
Right, EventSource is one way, which is why I said the combination of fetch and EventSource. Slightly more complicated in the case where you need to make fetch alter what the EventSource gets (matching them up, I mean), but with HTTP/2, doesn't cause a new connection negotiation. If you're using a web server that fully supports HTTP/2 header compression (nghttp2 or h2o do, apache and nginx don't, for example), you can wind up with significantly less bandwidth use due to headers compared to without, though still more overhead than websockets. There was a proposal to adapt HTTP/2 to be able to handle websockets, but it died. EDIT: another difference between websockets and fetch/EventSource is that needing to polyfill or provide alternatives is more common than websockets, which are available on almost all modern browsers. 
I use RethinkDB at work, and I am generally impressed with it. It is a shame they couldn't make a profitable business out of it. Excellent post-mortem. Good reading for anyone thinking about doing a startup.
Hi /u/cendant, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Why are you using snake_case in JavaScript? Y'know, when in Rome, use camelCase as everyone else.
Dude. Nobody does. Did you even read the article. 
Like this? { thing_1: { className: 'stuff-thing', style={}, stuff: 88, children: { className: 'stuff-thing', style={}, header: 'stuff' } } }
/whoosh "I like this. I use it at work. Shame it went under."
In my experience it doesn't clear localStorage when clearing cache/cookies... in Chrome anyway 
Thanks for the insight. Yeah, I went against Monaca as well. To be honest I was a little surprised it was basically a paid service on top of Cordova. I played a bit with Onsen UI but they don't have any good Windows 10 support so that's out, too. I wish NativeScript was there for Windows at this point, it looked the best. I started to learn CSS + HTML5 and have fun building my own UIs on top of Cordova. This was a good idea as I am getting better at it quickly. I am sure this will come in handy, I want to learn web dev, too. Building custom controls is challenging and rewarding. I am focused on Windows 10 primarily (with maybe some Android later on) and feel free to use any design language I come up with myself.
Nope.
No offence but I think that its your design problem, not library problem. Socket.IO is not flawless but it is great library, you just seem to struggle how to develop a client-server application at all. Socket.IO is NOT a "chat library" - it is generic library that abstracts away WebSocket communication to some simple rules. Anyway if you are making a chat or whatever application, you want to manually store list of connected clients anyway. Even as a simple implementation, server.on('connection' , s =&gt; connectedClients.push( { name: 'John' , socket: s } ) ); On disconnect you remove client from list, on receiving a message you are broadcasting to everyone but sender using your list etc. If you need more features like room, it is better to use just OOP and create a client class that has its fields like room, a socket attached to it etc. There is nothing wrong with Socket.IO.
1. I don't make purchasing decisions. 2. I did not make this architectural decision as it predated me. 3. As the article points out, the problem is the market. You can't just expect people to pay for something when there are many rough equivalents for free. You aren't going to shame people into a profitable business model.
I'm confused about your goal in moving the salt string to the frontend. If the idea is that it isn't stored anywhere, wouldn't the user interaction be the same if you just sent it to the backend each time?
Nope! I have used it with Preact, but pubsub is often not the best tool for the job (or not the entire tool) - it only provides subscription to changes, not a view of current state.
BOOM.
Wow, that performance difference is insane. What's the disadvantage of using Marko over React?
I really liked my experiences using this. I hope they can shuttle it off to an open source team willing to take it on. It looks really clean in my code.
It's what we use at work, and I honestly prefer it. Also, my background in C and Python surely plays an influence.
I'm not sure exactly what your use case is, but I would say that for consistency (of both data, and the way your code implements the rendering of data) this is not a bad thing. If you render your chat message locally, and not when you receive the data from the server - there is a chance that maybe the server was down, and nobody else received the data. Now your users are out of sync. This maybe doesn't matter so much for a simple chat room, but going forwards it could cause you issues if you build something more complex. It becomes even more of an issue if you also store the data in a database for use later. 
If I remember correctly most of the company went to work for stripe and then they open sourced what they had. Someone correct me if I'm wrong though. 
This is neat. Has it been tried on large code bases?
If you just looking to create something for internal use, use 'eval'. It will evaluate a string as javascript code. This will accomplish what you want with very little work. Beware this allows anyone to execute arbitrary (and possibly evil) code. Otherwise you want to use a recursive descent parser such as: http://ericbn.github.io/js-abstract-descent-parser/ 
It's been open source since before they went under, and most of the company does work for Stripe now. They're currently figuring out what to do for stewardship and community contributions in the future.
Ah it's 6. I read it as being 8 for some reason.
Is the author sure about `created()`? &gt; created() is similar to reacts componentDidMount life cycle method According to the Vue 2.0 docs, `created()` should be called server-side while `mounted()` is not.
I haven't used it yet, but no one else has posted. You've used Vue? What are your impressions?
That investment they aren't disparaging is also the only reason they were able to work full-time on building a database while affording to live in the bay area for years.
I switched the majority of a personal project from MongoDB to RethinkDB and loved it. ReQL is a fantastic query language compared to what I was writing with Mongoose. I hope it does flourish in the hands of the open source community. 
This
Looking at views docs this is what it says for created(): Called synchronously after the instance is created. At this stage, the instance has finished processing the options which means the following have been set up: data observation, computed properties, methods, watch/event callbacks. However, the mounting phase has not been started, and the $el property will not be available yet. Sounds like 'componentWillMount()' is a closer match, as componentDidMount() has access to DOM nodes where created() is just before the mounting of the DOM nodes.
I agree that socket io is really just a generic Websocket library with a simple api. However, it's simplicity also makes it necessary to write quite a bit of overhead code just as you described for even for simple applications. I love socket io and its barebones nature is clearly a design choice and not a flaw. The reason I worked on this library was because I found myself writing similar code in multiple production apps in order to manage socket io connections in one place at a single level of abstraction without constant context switching.
Nope. Spotify provides a service: convenience. On the free side, they outcompete other free offerings, and support that by making a premium upgrade available. They made a difficult market work in the same way GitHub and MongoDB have, creativity and aggressive marketing, spearheaded by a free offering.
Nearley is pretty powerful and easy to learn. I used it two years ago for a logical proposition analyzer [truth-table](https://github.com/andrejewski/truth-table) and it looks like better tooling has been built in that time; [nearley-railroad](https://github.com/Hardmath123/nearley#automagical-railroad-diagrams) looks especially handy.
You failed because there's no way to to ensure more than one field is unique on a collection....at least that's when I stopped using it.
Majority of sites are not http2. This is what I mean by "becoming a thing"
Cool tutorial, but nitpick: the title is only true if, by "absolutely anything", you mean "CFLs" (which, to be fair, covers a lot of things).
Isn't the lichess.org also 6 then?
You are right, it should read Alpha. I'll correct it right away. I'm not a native English speaker so I still struggle with spelling and English in general :) Thanks for letting me know.
I never said laziness. I said that ease of extension is greatly improved if you write it yourself. The concept is neither difficult to understand nor implement; it was done in after all 10 lines of code and under 500 characters. Do you write a test for every for-loop that you write to make sure you iterated properly? If not---then there's a certain level of code where testing is not needed and optimisation can be rightly seen as pre-mature. Consider this---these exchange of 3 comment we have had currently contains more meaningful lines and more characters than the entirety of this library. I'd encourage everyone to write a functional emitter themselves to demystify the issue. The core is really really simple (look! only 10 lines of code! 5 lines of tests!), its the extensions where complexity lies.
I tested it and when you explicitly flush your history in Chrome, it removes localstorage items as well. What you may be thinking of is that localstorage doesn't expire automatically. It has to be cleared--either by the user themselves via chromes' settings page, or via a script on that domain.
The arrow function always takes its value of `this` from the enclosing scope where it was defined. It does not have its own `this` binding, so attempting to bind its `this` by using the first arg of `f.call()` does nothing. In other words, it's lexically scoped, not dynamically scoped.
Yes, but the branch shows the solution for a specific version.
I find it ironic that this is literally the first time I've heard of "RethinkDB." If they were a real open source project, the idea of "shutting down" would be meaningless. It would continue on its own momentum.
Why? Just don't try to *monetize* it like these idiots. Do it because you love it.
I see what you did there. 
Strings can be added in JavaScript, so we get
No need to inject bad language just because you're frustrated 
 Webpack configuration is not liked by many. Many tools have been created to tackle this issue, and failed. Laravel Mix, on other hand, has very elegant api. And I am sure it will be quite popular. Note: the default pakage.json refered in docs is present at https://github.com/laravel/laravel/blob/develop/package.json Full code for the lazy. { "private": true, "scripts": { "dev": "cross-env NODE_ENV=development webpack --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js", "watch": "cross-env NODE_ENV=development webpack --watch --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js", "hot": "cross-env NODE_ENV=development webpack-dev-server --inline --hot --config=node_modules/laravel-mix/setup/webpack.config.js", "production": "cross-env NODE_ENV=production webpack --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js" }, "devDependencies": { "axios": "^0.15.2", "bootstrap-sass": "^3.3.7", "jquery": "^3.1.0", "laravel-mix": "^0.4.0", "lodash": "^4.16.2", "vue": "^2.0.1" } } 
Author here, larger code bases every day : ) Here's the biggest PR so far: https://github.com/transloadit/node-sdk/pull/40 - However, it's not really the size of the project, it will just take a little bit longer if you have more files, and there's a bit more manual labor involved ironing out the things automation could not yet fix. However, for the PR in question, this was just 20 minutes of work - small price to pay for modernizing a codebase imho.
 document.querySelectorAll("#my_div &gt; a.box") selects all *a* elements with class *box* that have parent element with id *my_div*. or if you already have *my_div*: var element = document.getElementById("my_div").querySelectorAll("a.box")[ind]; 
I'm not sure I can give a clear explanation without a few pages of context, but I'll give it a try. I'm also far from an expert on this, so hopefully I won't screw up this explanation. For further reading, I highly recommend Dick Grune's _Parsing Techniques_ (the first edition is [free online](http://dickgrune.com/Books/PTAPG_1st_Edition/)) So there's this thing called the [Chomsky hierarchy](https://en.wikipedia.org/wiki/Chomsky_hierarchy), which classifies grammars into four different types. Type-0 is unrestricted, Type-1 includes context-sensitive grammars, Type-2 is context-free (these are what an Earley parser can handle), and Type-3 are regular grammars (basically, anything you can parse with a regular expression). (Technically, any Type-N grammar is also a Type-(N-1) grammar, but for clarity, just assume that if I say "Type-1" here, I mean "Type-1 but not Type-2", etc.) So the grammars that Earley can handle are Types-2 and -3. It can't handle Types-0 and -1. Almost any programming language is going to be at least context-free (Type-2). Wikipedia gives a good [example of a context-sensitive grammar](https://en.wikipedia.org/wiki/Context-sensitive_grammar#Examples): a^(n)b^(n)c^(n). This grammar defines the language that includes the strings "abc", "aabbcc", "aaabbbccc", and so on; but does not include "abbc", or "aaabc". That is, you must have an equal number of a's, b's, and c's, and they must be ordered so that it's "all the a's", then "all the b's", then "all the c's". I _believe_ (but I'm a little shaky on this, so don't quote me) that the "context" in question is the information about what "n" is. When you're parsing, you'll see a certain number of a's. Now you know, when you get to the sequence of b's that you're going to have the _same_ number of them. And again for the c's. That "context" of "how many a's were there?" (which could just as easily be "how many b's were there?") is what makes this context-sensitive. Another characteristic that Grune points out: &gt;[I]f a language keeps on being original in longer and longer sentences without reducing to families of nested sentences, there cannot be a CF grammar for it. We have already encountered the context- sensitive language a^(n)b^(n)c^(n) and it is easy to see (but not quite so easy to prove!) that it does not decay into such nested sentences, as sentences get longer and longer. Consequently, there is no CF grammar for it. I hope that helps make it a little clearer. Again, I super recommend that book. It helped me to make more of these concepts click.
{a^n b^n c^n , n &gt;= 0} is not part of a context free language. Natural languages are a subset of context free languages. If you can parse a CFL then you can parse a natural language. All natural languages are context free, but not all context free languages are natural.
it works! Thanks!!
Cli's are great for getting things up and running if you have never worked with Webpack before, but the moment you need to adapt them to your needs you're in trouble. To be fair, Webpack has come a long way since version 1. The latest Webpack has a pretty good [documentation](https://webpack.js.org/) and configs are trivial: import webpack from 'webpack'; export default const config = { entry: './index.js', output: { filename: 'bundle.js', path: './dist' }, module: { rules: [ { test: /\.(js|jsx)$/, use: 'babel-loader' } ] }, plugins: [ new webpack.optimize.UglifyJsPlugin() ] }; 
A good way to figure out that {a^(n) b^(n) c^(n), n &gt;= 0} is not Context-Free is by using a Push Down Automata. You can recognize {a^(n) b^(n) } with [this push down automata](http://i.imgur.com/Qzbnp5W.png). This means, if you are in state S, and you see nothing, then it is accepted. If you see an "a", and there is nothing on the stack ("Z" on the stack), then keep "Z" on the stack and push an "a" on top of it, then move to the state q1. If you are in q1, for every "a" you see, push another "a" onto the stack. Then when you start to see "b"s, take an "a" off of the stack for every b. And when you see the starting stack symbol ("Z"), and no input then you accept the input. You are not able to represent {a^(n)b^(n)c^(n), n &gt;= 0} in this same way, which means it is not a Context-Free language. Think about it. Once you have cleared all the "a"s from the stack, then how do you know what the n is in c^(n)? 
That's a good point. I only meant to point out that loops can only run synchronously, and cannot be used to repeat asynchronous functions. 
"rebinding" the arrow function FTW! f = function(){return eval(f.toString());}.call(b);
Bit of offtopic - it seems like my knowledge is bit limited. I'd like to know more about vDOM and serverside rendering. Could anyone point me to some comprehesive resources about it, so I can deep dive in? Thanks.
This is interesting. Just one small detail. This can actually be used for anything where you need to partition or distribute a collection, right? I mean, nothing in that code is _actually_ about WebWorkers, is it? The presentation confused me a bit at first but reading the code it seems clear that this is so. I'm pointing this out because, well, one _could_ use this for things other than WebWorkers. Maybe distributing a number of DOM elements into a number of containers or other uses.
That makes complete sense. Thank you.
If anyone is on the East Coast or South East, check out www.jazzcon.tech in New Orleans in March 
Good stuff, thanks for sharing. :)
I see! Thanks.
You're right, yes! I wonder where else it could come in useful?
That makes me feel gross.
You forgot to use webpack, systemjs, gulp, and grunt somewhere in there.
Excellent articles thank you, and although at first I was thinking of it as simply de-nesting, but after you mentioned normalization it occurred to me that in a way they're both kind of similar. I mean if i want to change a piece of data nested in two different components, having them nested as separate objects would be super complex. So thanks for the insight! 
Maybe a load balancer
Does anyone know what the selling points of this over TypeScript are? Off the cuff, I'd probably hedge my bets with a solution that's backed by Microsoft and already quite popular if the only reason to use this is so you can use OCAML (and presumably its existing toolchain). EDIT: While I enjoy the pedantic replies explaining that yes in fact BuckleScript is different than TypeScript, my question still goes unanswered. It's probably my fault for not being more explicit with my question. Obviously Typescript != OCaml. Obviously if someone writes OCaml, BuckleScript is a no brainer. Obviously if you prefer JavaScript, TypeScript is a no brainer. My question was more meant to frame the choice from the perspective of a developer who is looking to use JavaScript with types and other features of statically typed languages. Given that angle, why would a developer, who is not predisposed towards writing TypeScript or OCaml, use BuckleScript over TypeScript? What sort of features would sway them? How's the community? How're the libraries? Are there crazy OCaml language features that blow TypeScript out of the water?
Can't you just...you know...learn javascript?
You could learn actual languages instead of a variation of javascript... Of course some variations, like to make javascript statically typed are good and necessary for a long time, but we don't need 30 new every week. Learn rust, python3, go, php, C#, Java whatever, we don't need to invent a language with a personal change every time our ego says so, specially lose our time learning it, it's not productive to learn all of those variations. edit: https://xkcd.com/927/
CFL?
This is comparing apples to oranges. Both languages compile to js, but that is where it stops. Typescript is a superset of JavaScript. This is a tool that will compile ocaml to JavaScript and then some. Take a look at their manual and GitHub page, there is a bit more that goes on. 
Typescript is an object-oriented language, with types that you can opt in (alternatively, you can just use an "any" type, and Typescript will not check it). It's a superset of JavaScript that makes Javascript more like Java. OCaml is a typed functional language, which is nothing like Javascript or Java.
&gt; They are fully ratified. Mostly, but there are some bits like [Object Spread that aren't quite standardised](http://stackoverflow.com/questions/36074419/is-application-of-the-es6-spread-operator-on-objects-a-standard-ecmascript-speci) and yet people use them, hoping that the standard will adopt it and they won't have to rewrite their code.
I wouldn't say being dynamically typed is an inherent weakness, there are definite pros and cons to static and dynamic typing. I also wouldn't say that OCaml as a language is trying to rectify any weaknesses in javascript. If you're saying this transpiler is trying to rectify weaknesses in javascript, my argument to this is simply that you're introducing new weaknesses and fail points in your software by adding an addition build step, I can't say if the trade off is worth it however since I haven't used this particular transpiler, but in my experience it's usually not worth it. just my 2¬¢
Until I read your question I hadn't even considered a reference for generic OOP concepts. I'm not aware of one tbh (not that there isn't one, I'm sure there is). Each language that claims to have OOP features tends to have their own idiosyncrasies in how OOP concepts are implemented but for the most part it's usually done in very similar ways. As a result, I think people just tend to stick to how the language they are working with implements OOP and starts from there in understanding it. At OOP's core though, there are really only a few key concepts: * data encapsulation * abstraction * inheritance * polymorphism The rest is just details in how a languages choose to implement those concepts. The internet is chock full of info them. But just be careful not to drink the OOP kool-aid. There are many programming paradigms, each with their strengths and weaknesses, but they have their fanatical adherents too. I say this from experience because back when I was in college learning programming, I thought OOP was the "be all end all" of approaches to programming. It wasn't until I got into the working world that I was exposed to the deficiencies of OOP and saw that there are other, better options. OOP has a few traps, particularly inheritance. Anyway, long ass rant. Sorry. Just look up those core concepts and get to know them well and you'll be off to a decent start with OOP.
Ha! Very cool. &gt; Since this is not bound in arrow functions, the call() or apply() methods can only pass in parameters; this is ignored. according to MDN. The more you know!
Oh shut the fuck up already. Both of you
* This book got me started with object-oriented design. It‚Äôs really well written, but in an old programming language (Oberon-2). http://ssw.jku.at/Research/Books/Oberon2.pdf * Rebecca Wirfs-Brock is really good, too: http://www.wirfs-brock.com/DesignBooks.html * If you want to get into the details of ES6 classes, you can read this chapter in my book: ‚Äú[Classes](http://exploringjs.com/es6/ch_classes.html)‚Äù
&gt;That does not look like trivial to me. This doesn't look like anything to me, you mean?
lol? a language tool can be beneficial for users and developers - it's not mutually exclusive
Each and every feature in es2017 is official and can be used. Javascript is now es2017. Object spread isn't in that spec. Although it's a stage 3 living draft and now native in Chrome (flagged), i could understand why you would not take the risk, even if it appears to be minor. 
If anyone wants to see how to actually do asyncronous operations such as `map` `filter ` and `forEach` look no further than async. https://github.com/caolan/async/blob/0.1.24/lib/async.js#L94-L118 I've linked the very first tagged version as... things were simpler back then. Now that everything is split out I'm not sure where the guts are. 
Just released version 4.1.1 of Qoopido.demand a require.js like module loader with localStorage-caching and a promise-like interface: https://github.com/dlueth/qoopido.demand
Is there a function loader API in Safari Tech Preview too? For example, something like `import('./foo.js').then()`? I don't see `import()` is available, but maybe I don't know where to look besides globals.
Well I understand all of those concepts extremely well from the point of view of JavaScript so again, I'm mostly looking for things related to class-based OOP. Would you recommend just learning another language really deeply like Java (or Python or C++ or C# etc.)? Is there a certain one that might be closest to a gold standard or best representation of class-based OOP?
Another custom compile2js language. Oh joy. 
Does anyone use vanilla js without a framework anymore? 
This doesn't work. ```process([1, 0, 1, 1, 1, 0, 1, 1]); // =&gt; [1, 0, 3, 0, 2]```
Currently there is only a proposal of the dynamic import() : http://www.2ality.com/2017/01/import-operator.html?m=1 It's available via Babel plugin https://github.com/airbnb/babel-plugin-dynamic-import-node but there is still no native implementations.
This algorithm has a big O(n) const compressBinary = (ary) =&gt; { let onesInARow = 0; let result = []; for (let i = 0; i &lt; ary.length; i++) { result.push(0); if (ary[i] === 1) { onesInARow++; } else { if (onesInARow &gt; 0) { result[i - onesInARow] = onesInARow; } onesInARow = 0; } } if (onesInARow &gt; 0) { result[result.length - onesInARow] = onesInARow; } return result; }
 function process(array) { var currentOnePosition; var newArray = []; for(var i = 0; i &lt; array.length; i++) { newArray.push(0); if(array[i] === 1) { if(currentOnePosition === undefined) { currentOnePosition = i; } newArray[currentOnePosition] += 1; } else { currentOnePosition = undefined; } } return newArray; } 
Hows this var arr = [0,0,0,1,1,0,0,0,1,1]; console.log(arr); var out = []; var counter = function(arr) { var count = 0; while (arr[0] == 1) { count++; arr.shift(); } return count; } while (arr.length &gt; 0) { if (arr[0] == 0) { out.push(arr.shift()); } else { out.push(counter(arr)); } } console.log(out); It is destructive. *Edit*: fixed so it answers op's request. 
It's implied, as OCaml literally doesn't have any advantages over JS other than being statically typed. 
I actually disagree. I believe JavaScript is multi-paradigm, and so is TypeScript. But hey, I just work on it, so what do I know. ;)
Do I get extra points for not creating any variables? Uses only one loop and one if. Pretty sure there's not a more efficient way to do this. function process(array) { for (var i = array.length - 1; i &gt; -1; i--) { if (array[i] &amp;&amp; array[i-1]) { array[i-1] += array[i]; array[i] = 0; } else { array[i] = array[i]; } } }
I'm well into this project and am so glad I chose angular over trying to do it with jQuery. It's just so much easier, with angular's routing, templating &amp; two data binding etc. Would have been madness to do it with jQuery!
Recursion based solution, because why not: function proceed (array, tally) { if (array.length === 1) { return [array[0] + tally] } else { var number = array[0] if (number &gt; 0 &amp;&amp; array[1] &gt; 0) { tally += number number = 0 } else { number += tally tally = 0 } return [number].concat(proceed(array.slice(1), tally)) } } function process (array) { return proceed(input.slice(0).reverse(), 0).reverse() }
It doesn't look like this one is rewriting the rest of the sequence of 1's to be 0's, it's only rewriting the start of the sequence correctly.
You won't get better performance on any modern engine by caching the ary.length value. Where you'll get a nice boost is if you switch the for loop for a decremental while
I understand you're trying to not have to calculate the length each loop, but for some reason with jsperf I am getting that to be not optimal to calculating the length each iteration. See 1st and 3rd tests [here](https://jsperf.com/fastest-array-loops-in-javascript/24)
People just don't want to waste their time learning something new and similar I guess. They don't want to lose their investment learning angular or react.
Your question is a bit unclear. &gt; Good reference for understanding class-based OOP Depends what you mean by "class". I would generally define a class as a template for churning out instances of an object, in which case all OOP is class-based, so if you understand OOP at all (and you say you do) then you already understand what you're asking. :) Other people would try and make (in my view arbitrary) distinctions between types of classes, with Java on one end, and Self on the other, and most languages (JS, Ruby, Python) in the middle. But as a practical matter, this has no impact on how you program (hence why I don't feel the distinction is meaningful), so again, I'm not sure why you're asking. &gt; Since then I've self taught JavaScript and gotten pretty deep into the way JS works with prototypes and all. Great, then you understand JS classes, because the classes are just prototypes. There's no magic here. &gt; I was thinking learning some (mainstream?) class-based OOP might provide some nice contrast to help me understand JS even more, especially some of the ES6 class features. There's no contrast. Behind door number one, we have a mechanism for creating a template object which we can use to churn out additional instances. Behind door number two, we have the exact same thing, because it's the same room. It doesn't matter which door you walk though. &gt; I'm actually pretty solid on JS classes and mostly looking for a contrast I don't get it. You claim you understand the theory of OOP programming, you understand how prototypes work in JS, and you understand how classes work in JS, but you're still looking for a "contrast". *With what?* That's literally all there is. &gt; &gt; At OOP's core though, there are really only a few key concepts: &gt; &gt; * data encapsulation * abstraction * inheritance * polymorphism &gt; Well I understand all of those concepts extremely well from the point of view of JavaScript so again These are fundamental principles of OOP, and what makes them fundamental principles is that they're universally applicable. Data encapsulation is an idea which various languages implement (or not) in different ways. Python has a strong convention that anything that starts with an underscore is private, PHP and Java have visibility modifiers which you can fairly easily circumvent using reflection or rebinding contexts, JS has some clever tricks with closures and weakmaps, but *data encapsulation* isn't about the language. If you understand inheritance **from the point of view of Javascript** then you understand inheritance full stop, because Javascript has no unique point of view on inheritance. There are a small number of ways you can implement inheritance in JS, most of which involve mangling the prototype chain in interesting ways. In another language, inheritance is implemented differently. The implementation in Python is very similar to JS; the implementation in Java is pretty different. But inheritance is the same everywhere. If you know much about inheritance *in JS*, you probably know that you can move shared behaviours up the prototype chain to allow for code re-use, but you also know that this makes for exponentially harder to maintain code as the inheritance chain becomes larger. In other words, you know the same things someone who knows about inheritance in any language knows, because it's the same. Mutiple inheritance in Python and JS are both easy (although the syntax is wildly different); it has the same strengths and the same weaknesses. And so on. What are you actually asking?
They still do: The set of developers is not monolithic.
Jsperf has some issues sometimes depending on the code you're running. The method I'm using isn't exactly perfect either, but check this js Fiddle I just whipped together. https://jsfiddle.net/rooxo2yg/ The normal compared to cacheI, normal wins about half the time. However, cacheII and cacheIII offer a performance boost, with cacheIII being the best. Either way, these are very small boosts, so unless your data set is huge it won't matter much. 
no need to uglify
Last I checked this is not supported in a lot of mobile browsers making the explicit hoisting better. If this isn't the case anymore then thank you for letting me know. 
As I said before, to my knowledge, most mobile browsers don't automatically hoist and cache length. If this has changed I would love to know. As for the decremented loop, mind providing some sources? I Googled because this didn't use to be the case in older engines, but I hadn't checked for while in, well, a while. I didn't much of anything except for 1 or 2 not very reputable blog posts whose comparison code I ran myself and still found that my cacheIII version in my fiddle posted above performed better. Not trying to disagree at all here by the way. I just couldn't find anything reliable so I was hoping that you could point me to some reading?
Virtually every mobile browser is using either V8 (on Android) or JSC (on iOS). Both will hoist invariants. 
My day job has migrated from our in-house Javascript framework to Vue 1.x and now Vue 2.1.8. It's been great. It's a much better developer experience than what we've done in the past and we have turned out higher quality code ever since. ES6 has definitely played a role in both those points, though. Outside of my day job I almost strictly use React and React Native. Comparing Vue to React, Vue leaves a lot to be desired. The lifecycle methods of Vue are underdeveloped and the React ecosystem/community is very strong. Vue is not nearly as ambitious as React. Being able to use a toolset in multiple mediums (with good performance) is huge. Soon we'll have React Fiber, right now we have React VR and React Native/etc. Vue does have a much easier learning curve than React, which is the main reason we've chose it at my day job.
V interesting. I would love to see Vue with more fleshed out lifecycle methods in the future.
Throw in some test cases. I'm pretty sure it'll pass all the good data cases. If you find one it doesn't let me know.
Was thinking the same thing, to me Lazysizes is simply the best lazyloader out there. So simple to get started, yet so flexible and powerful when you need to do more. 
That's what he asked for.
Or use regex -- easier to change the algorithm in case you want to match other chars, change the repetition rule, etc. const RX = /(1{1,}|0{1,})/g; const array = [1, 0, 1, 1, 1, 0, 1, 1]; const str = array.join(''); const out = []; let match = RX.exec(str); while(match !== null) { console.log(match[1]); const n = match[1].length; const val = n&gt;1?0:match[1].charAt(0); out.push(n&gt;1?n:val); for(let i=1; i&lt;n; i++) { out.push(val); } match = RX.exec(str); } console.log(out); 
I don't think there is, the problem is angular is an MVC framework and cue and react are view libraries, you can think of them as directives/views, services, controllers, models, they do not strictly form part of what these libraries do. You are no longer working with the M and the C, just the V. To strictly honor single responsibility you should look at implementing redux, it manages data state, you would then use a container to wrap your component which would dispatch an action that in run triggers a saga which makes the api call, fires off a response action which triggers a reduced which then updates the view based on the action that was triggered from the response. Basically, you need to either Fudge some of the single responsibility or build up the Vue and react equivalents of the M and C on top of the V yourself. They are solely responsible for the DOM in their truest form. 
You probably have a string, parse it to a number and then do your operations on it.
It's not impossible to use some of Bootstraps jQuery functions, for example this works just fine with modals: &lt;div ref="modal" class="modal fade" tabindex="-1" role="dialog"&gt; &lt;/div&gt; // then somewhere in your vue component $(this.$refs.modal).modal('toggle') However, when it does become a problem is if you're trying to initialize tooltips that are conditionally rendered. Because you have to initialize them all at once (`$('[data-toggle="tooltip"]').tooltip()`), you don't have any guarantees that the all the tooltips that are going to be rendered are rendered, so this won't initialize all of them unless they've been rendered on the page when it was called. So, you can use bootstrap's jQuery functions with Vue, you just have to mindful of whether or not the elements you are attempting to use have been rendered or not. For simple things like modals/tooltips/other bootstrap javascripts, it's probably easier to implement them within Vue so you don't have to rely on jQuery and hoping that all the elements are rendered. 
I'd argue that in React, a component can take the place of a controller. It's a smart move to separate between smart and dumb components. Dumb components have no state, they render a single object (like a button). Then you have smart components which render many dumb components to keep there state and synchronize them. If you want, you can throw a state manager like redux or mobx (which are both framework independent). In that case a smart component could be connected to the redux store, to update global state. 
That's when looking at either zero or ending a (backward) chain of 1's. e.g. [1, 0, 1, 1, 1, 0, 1, 1] from OP in a few steps: * i = 7 enters the if, changes array to [1, 0, 1, 1, 1, 0, 2, 0] * i = 6 enters the else, leaves the array alone, * i = 5 enters the else, leaves the array alone, * i = 4 enters the if, changes array to [1, 0, 1, 2, 0, 0, 2, 0] * i = 3 enters the if, changes array to [1, 0, 3, 0, 0, 0, 2, 0] * i = 2 enters the else, leaves array alone * i = 1 enters else, leaves array alone Loop can probably actually end at &gt; 0 instead of &gt; -1 though, since it's already updating array[i-1]. That and array[-1] should be undefined/always cause the if to be false/ go to the else 
React and Vue do not really work that way, it is a new paradigm. The Single Responsibility Principle lies in the way components are structured, which all have their own responsibility and API. Redux and Vuex help you manage the state of larger applications.
The hashing function of your lib should probably only take in, hash and return byte buffer. That way the function doesn't care where the file came from or where it will go. You can then mock the "file opening" and "file saving" part. For the test I would then create a byte stream in a loop, so that the files will not become big. 
Angular is MVC, while Vue is pretty much MVVM. I don't have experience with React tjough.
I think /u/dvlsg is just saying that the else statement is redundant and doesn't buy you anything. The array will be left alone regardless when the if statement doesn't pass. Just a small simplification on an already solid answer!
Modern frameworks are functional, which makes it very easy to supply it with data. The basic principle is: input &gt; component &gt; UI. This is how you make a simple component in React: const Button = ({ color, children }) =&gt; &lt;button style={{ color }}&gt;&lt;{ children })&lt;/button&gt; You have a component now. If you call it you pass properties to it, just like a function: &lt;button color="red"&gt;hi there&lt;/button&gt; If you use a statemanager like Redux, you can "connect" any component to a portion of state. If that state changes, Redux will call your component with the updated props. connect(state =&gt; ({ color: state.options.color }))(Button) There, this injects "color" as a property if options.color changes in your statetree. Your Button renders. You can also build stateful components that keep their local state, using es6 classes. You can connect these to Redux as well of course. In this example everything you type in the input will be presented in the span: const Test extends Component { state = { text: "" } onChange = event =&gt; this.setState({ text: event target.value }) render () { return ( &lt;div&gt; &lt;input value={this.state.text} onChange={this.onChange} /&gt; &lt;span&gt;{this.state.text}&lt;/span&gt; &lt;/div&gt; ) } } Just by looking at these examples you have learned 2/3s of React. Redux will be a little tougher to understand, but it's worth it. Here are some courses: https://egghead.io/courses/react-fundamentals https://egghead.io/courses/getting-started-with-redux
Just chop it up. Have one function which picks the algorithm. This is easy to test. You pass one number (or File-like) and you get one or the other. And those two algorithms can be tested with one relatively small inlined input.
You should probably have a grasp of a component based architecture, no matter the framework. The way you talk about angular makes me assume you're using ngController and friends
You can use React as a v in your MVWhatever. That's what documentation says. They have even some two-way binding helpers for inputs. https://facebook.github.io/react/docs/two-way-binding-helpers.html Just keep in mind thats React is only View library, not a framework like Angular, so you have to create other parts by yourself. But It would be better if you look at some FLUX and Redux patterns instead. It differs a lot from classical Angular way, but I think it is more convenient and reliable. No more mutated state problems, etc. 
JS has some weird aspects to it maybe, and then there are prototypes, but it's not the ongoing, relentless journey you're making it seem like. Flexibility and the sheer community effort are Javascripts highest assets. This is the one thing all other languages can not do no matter how powerful they are. And you are ignoring it. Javascript can easily be the best pick today if you want to make a real application for the web, a desktop application, or a mobile app, a server backend, or controlling an IOT appliance. It has gotten that powerful. But not without help. 
Redux, redux is an agnostic principal for better state management, you can implement either vanilla redux or you can use the react fork, react-redux or Vue's fork, Vuex. The ultimate benefits is the library specific flavors are designed to be almost plug and play as they are wired up with the same API logic, so just less work for you, but if a library or framework you wish to use does not have it's own flavor you can still just use the original
&gt; but it's not the ongoing, relentless journey you're making it seem like. It really is. Almost every week there seems to be a new framework or transpiler. Do you see that in other languages? I'm not saying have a choice is a bad thing, but it is pretty exhausting to keep up to date and to choose a tool to begin with. Years back I learnt Backbone, then came Marionette, then it was all about React and Redux, now vue.js is getting a lot of traction (which does look cool, I must admit), and that's just to name a few. There definitely seems to be an endless journey. And if you were to say "but you can just pick one you like and stick with it" -- it's not as simple as that. Employers are often looking for developers with experience in a certain framework, unless your up to date with nearly all the frameworks out there, your appeal and options are limited. The same could be said for PHP, but Javascript I believe is the real exception due to the huge variety of frameworks that are available.
I could list all the anti-patterns that Angular encourages, but that list wouldn't fit into a single Reddit post. The most important thing about React is composition. Learn to use it, and you'll find that Angular had you "violate the DRY principle", "write yo-yo code" and "cook lasagna". Don't fall victim to other people's cargo-cult programming, especially for thin frontends. Your frontend is a bridge between the browser and your backend (which is the service layer), it's supposed to be as simple and transparent as possible.
[removed]
Is this even JS then?
it's written by victor savkin (member of the angular team) and the concepts are still relevant.
True that!
I saw people use regex for this simple task, it's definitely overkill. I believe you need to use the right tool for the right task. My solution consists of just a simple loop which iterates over the array (starting from the end of the array to the beginning), and counts the 1s it encounters, replacing them with 0s on its way, and when it reaches the last one in each sequence (which is actually the first one if you consider it from the beginning), will replace it with the count so far. This is an O(n) algorithm, and it's actually the most efficient algorithm you can think of in terms of time complexity, and also in space complexity, because I perform the substitution in-place, so no additional space is required. function sub(arr) { let onesCount = 0; for (let i = arr.length - 1 ; i &gt;= 0 ; i--) { if (arr[i] == 1) { onesCount++; if ((i &gt; 0 &amp;&amp; arr[i-1] == 0) || i == 0) { arr[i] = onesCount; onesCount = 0; } else { arr[i] = 0; } } } } Sorry about formatting, reddit is not very good in formatting multi-line code. It's pretty simple actually - only one loop, and a nested if to detect 1s, and in particular the last 1 in each sequence. 
Was this written by an algorithm or something?
No Aurelia is an MVVM react and Vue are just view managers, they are the V. 
4 years is a lot in Javascript evolution
Would it not more likely be the container over the component. Trying to compare the sun and a person is too freaking complicated. 
Yes. However, it's no longer the object oriented paradigm you're used to seeing. The switch to the functional paradigm can be a difficult one, but it definitely has benefits in some (most) cases. It is absolutely, 100%, still JavaScript. It's just functional.
This has nothing to do with React.
Haha, great point! I totally missed that. I was originally copying everything to a new array and just replaced newArray[i] = array[i] without thinking. Here's the even shorter version: function process(array) { for (var i = array.length - 1; i &gt; -1; i--) { if (array[i] &amp;&amp; array[i-1]) { array[i-1] += array[i]; array[i] = 0; } } }
`if (!date.match(regEx)) { ... } `
You don't want to compare since date isn't going to be a regex itself, rather a string. So as a comparison it will always fail. What you want to do is to run the string through your regex to see if it fits that format. You can do that with test regEx.test(date)
Community is working hard on it :)
ahhhh yeah I see.. could this be used like: if (regEx.test(date) == false) {...} 
It should be noted you will have some awkward dumb components, don't complicate things by sticking to this rule with no grey area. It's okay to have dumb components handle their own state sometimes. The thing with React is you'll hear all these best practice rules and you'll feel the need to adhere to them 100%. As you get more comfortable with the framework you realize these are all soft guidelines and there's always exceptions. 
That is why I would consider the container to be that, it to me fills that role as it sits between the saga and the components. When correctly structured you would have a function in the container which fires the dispatch which triggers the saga, action and then reducer. That function you hand down to the component so that it can be called when needed, or it would be triggered by the containers preLoad handler so that the data can be passed onto the component as soon as it is available. When correctly setup in Angular, the controller should ideally be sitting between the service and the view, although most times we use it as the view. I prefer that the controller hands down to a directive which takes care of the view, that way the controller asks for the data and distributes it accordingly keeping the directives "dumb"
So. Is Horizon discontinued ?
tried however seemed not to apply
it's wacky on mobile, if you want linebreak you need to add 2 or else it won't work
Oh. I'm an idiot. *shows himself out*
Why would you have to switch between 5-10 library API's in the first place? I don't get why devs shy away from learning underlying technologies =&gt; it will make you a better dev. Want to know how to judge a module's worth? Start using it and see what it adds to your build times, bundle size, quality of life, etc. Or better yet write your own and it will change your view on the entire ecosystem. I reiterate to my team often that understanding both how to write a modern web application and utilize node is very important in developing an application that both meets the product's goal and build environment (which any of our devs can step in to and navigate semantically). Your readme makes me feel like you haven't taken the time to learn the technologies you're trying to highlight as unnecessary.
I found a helpful blog post about replacing some features from bootstrap+jQuery with Vue. Might help you a bit: https://medium.com/js-dojo/drop-jquery-from-your-bootstrap-project-and-replace-it-with-vue-js-82230bfca98a
String.prototype.match() is less efficient than RegExp.prototype.test(). [Between 30%-60% actually.](http://stackoverflow.com/questions/10940137/regex-test-v-s-string-match-to-know-if-a-string-matches-a-regular-expression/10940138#10940138)
Your `App` file's render logic is really hard to follow since you have to go up and down the file to see what's actually being rendered where. I would suggest making all those small local methods into completely separate files / components, or just inline them in your main render function.
Well, yes, but you're not answering the question.. You can just leave the array alone by not touching it, setting array[i] to array[i] doesn't do anything. Couldn't you get rid of the else entirely?
You're talking about frameworks and libraries (which admittedly have a pretty high churn rate right now), but the commenter specifically said they don't have time to learn the frameworks and libraries because js the language is evolving so rapidly, which, really it's not. 
Released 1.0 of my redux/refetch solution for connecting React components to a REST backend: [react-reflorp](https://github.com/tomat/react-reflorp)
Without a framework, sure. Without a toolchain, eeehhh...I don't feel like managing my dependencies manually or minifying my code by hand.
JS, yeah, though it's missing native immutable data structure and a bit of syntax sugar to go all out functional style. I've been successful pushing it pretty hard by abusing arrow functions, ternaries and comma operator to chain expressions, with object spreads to fake immutability, but it has limit. TypeScript can do all that fine, and in my own project it's been working decently doing the above. In a work environment with a reasonably sized team however, stopping people from using TypeScript-specific sugar to write "C# on top of JavaScript" is super hard though. You have to literally go to war with your coworkers, and that's not fun.
To elaborate, to me it feels like there are more and more developers who are unable to code a simple proof of concept without lots of tooling and frameworks and that's a little alarming. If you're working on a full scale project, especially a complex enterprise level implementation, of course you'll want to use something. 
If you learnt React first, it seems like there are strict, organized rules. But people coming from other backgrounds may not see it or may try to do things differently...and it totally does work. There's nothing stopping you from storing state in a singleton module, importing it in a React component and accessing it in render. Doing so would create an unmaintainable spaghetti mess, but it would -work-. So it is still pretty important for newcomers to understand what constructs are used in idiomatic React. The same is true for any framework in any language, obviously.
Opensource Community already working on it and we need you guys's help . Head to our community https://rethinkdb.slack.com/messages/open-rethinkdb/details/ We are almost ready to release 2.4 , need all you guys help for testing.
http://pastebin.com/7x87KAW2 I have now got the loops to work, i have checked that they pull all the data using console logging and all is well, however the content doesn't get displayed, when i try alert the content is blank and its not displayed to the body, any ideas?
UPDATE: http://pastebin.com/7x87KAW2 I have now got the loops to work, i have checked that they pull all the data using console logging and all is well, however the content doesn't get displayed, when i try alert the content is blank and its not displayed to the body, any ideas?
http://redux.js.org The documentation is great. There are also a bunch of free videos from the creator to show you how it's used.
[removed]
The Redux FAQ answers your first question: http://redux.js.org/docs/faq/OrganizingState.html#organizing-state-only-redux-state . Basically, it's up to you to decide what goes into Redux and what doesn't. There's an explanation of the basic idea of Redux in the docs: http://redux.js.org/docs/introduction/CoreConcepts.html . For explanations of how Redux works and how to use it, read the rest of the Redux docs, and also see the [Redux Tutorials](https://github.com/markerikson/react-redux-links/blob/master/redux-tutorials.md) section of my [React/Redux links list](https://github.com/markerikson/react-redux-links).
Neat.
The complexity of interaction begs for a single data-store (normalized as needed) and multiple views that can represent this store in different ways. The whole "one-way data flow" thing. This alone will give you most of the simplification. Single data store + fast vdom lib. Change something in the store, call a global or local `redraw` and forget about it. On top of this base concept, frameworks provide different conveniences. Reactivity (via streams, events, observables in the datastore), global redraw optimization (via immutable datastore structures), isomorphism for server-side rendering, etc. The first part may be sufficient for your application without introducing framework-level complexity/concepts.
rereading it after sleep, yeah, I totally see that now
... but this one does: http://jsfiddle.net/FM3qu/367/ The only difference is, that I pass 'key' and 'val' to the 'getObject' function to dynamically determine which object to access - and it won't work. 
&gt; One particular case would be a developer who is familiar with OCaml and has no experience with JavaScript. In that case static types has literally nothing to do with it. see my original comment.
What is `getObject` supposed to do? Can you write some examples of behavior you're expecting from it?
I still can't read most of JS lol
When you call the function recursively, you're only passing a single argument, so `key` and `value` are `undefined`, which will never match and you never find anything. 
Check this one http://jsfiddle.net/FM3qu/368/ Every another call to your getObject() function should be done with same amount of args (in this particular implementation).
going backwards through the array is easier because you dont have to keep track of the leading 1. Although I like the [reduce method](https://www.reddit.com/r/javascript/comments/5pdq89/how_could_i_make_this_algorithm_more_efficient/dcr9uan/) better. function process (arr) { for (var i = arr.length - 1; i &gt; 1; i--){ if (arr[i - 1]) { arr[i - 1] += arr[i]; arr[i] = 0; } } return arr; }
getObject is supposed to extract the object matching a key-value pair. I just figured out I got the recursion wrong. 
Thank you very much for the updated jsfiddle. I somehow knew this is going to be a hillariously simple mistake. :-)
Are they? Worries me a bit that there have been no commits on horizon in 3 months.
Looks nice! One suggestion though, allow for keyboard input to select letters? Should be fairly trivial to implement I would think and make the UX much nicer.
Have a look at Aurelia, it's more an MVVM like you're expecting. Solid framework. Solid architecture. http://aurelia.io/
FYI: You can use a regex right inside the `&lt;input&gt;` tag. `&lt;input type="text" pattern="^\d{4}-\d{2}-\d{2}$" title="Hint text here"&gt;` Not exactly what you asked for, but I like using this method... they've built in some extra bells and whistles like highlighting the field, giving a tooltip, etc.
i would dock points for messing with the incoming array. I had considered going backwards through it also, but it was easier to reason about going forwards, I thought. 
Yes, the single data-store idea is probably a must, and I'm not sure how compatible it is with cyclejs and reflex. However I'm definitely going to need optimizations for redraw, since even the vdom will be too big to traverse wholly for every modification. 
A lot of interesting reading! 
975 commits and 211 branches. Yikes.
"realtime", just sayin'
https://egghead.io/courses/getting-started-with-redux &lt;- These lessons were made by Dan Abramov, Reduxes creator. They're quite dry to watch through, but then again if you get the why and how of it, it it will positively affect the way you write apps. As for your question, try to make this run and play with it, import { createStore } from 'redux'; import omit from 'lodash/omit'; const types = { add: "ACTION_ADD", remove: "ACTION_REMOVE" } const actions = { add: (id, text) =&gt; ({ type: types.add, payload: { id, text } }), remove: (ids) =&gt; ({ type: types.remove, payload: ids }) } const reducer = (state = { 0: "initial state" }, { type, payload }) =&gt; { switch (type) { case types.add: return { ...state, [payload.id]: payload.text } case types.remove: return omit(state, payload); } return state; } const store = createStore(reducer); console.log(store.getState()) // { 0: "initial state" } store.dispatch(actions.add(1, "hello")) console.log(store.getState()) // { 0: "initial state", 1: "hello" } store.dispatch(actions.add(2, "world")) console.log(store.getState()) // { 0: "initial state", 1: "hello", 2: "world" } store.dispatch(actions.remove([0, 1, 2])) console.log(store.getState()) // {} As you see, there's not much to it. Redux is a tiny little library with maybe two api calls. The big surprise comes when you figure out that now you can *connect* a store or a specific portion of it to your components just like that. This will make a huge impact, because you can say good-bye to complex and messy UI composing you had to go through in the past. Libs like React/Angular/etc are now just forming the dress, the app itself lives in Redux.
which _ library is that? 
I tried rethinkdb but was turned away from it when I realized you could only have one unique key on a collection. Made it a pita to enforce unique usernames and emails on an `accounts` collection.
lookup.val would look for a key called val, rather than the parameter you pass in. You would need to use lookup[val]
True but not all website owners keep the comments! 
https://jsfiddle.net/drqh4wzg/1/
&gt; Recursion again... More like straightforward function-calling. ;-)
Hit view source to see its HTML or hit ctrl/alt/I
Okay, so lookup.val is searching using "val" and since there is no such a string. The function fails. Right?
Bla bla old shit, bla bla 1 == "2" is truthy. Really??? The author didn't bother to check what he wrote.
A maintained and awesome similar hint is deepstream.io
ES4 wasn't adopted by browsers because it broke backwards compatibility (not sure what exactly) and because it seemed too drastic of a change. Personally, I kinda liked using AS3 (which is based on that draft). Function scope was the only thing which was seriously annoying about it.
I'm not exactly sure what you're doing with the code so this may be a bit off, but I think [this](https://jsfiddle.net/shaddix09/z5o4jnv2/5/) is what you're trying to achieve.
What if function f1 will have 20 function f2 calls? Isn't it inefficient?
The problem is that there will be much more f2 calls. [I uncommented that line, hell happends](https://jsfiddle.net/z5o4jnv2/8/) The whole code is a base for text-sound game. Function pisz() writes text to the screen like it is in some visual novels. Every text should start appearing after the one before is done.
AFAIK promises don't require 3rd party library now but still I don't get them :( Is there any way to pause the execution of function by for example some seconds? I couldn't find any by googling.
Damn, it will be pain in ass to do multiple functions like that. 
You can do this as well, though browser support is pretty weak sauce, so you'll need to transpile your code using something like Babel. https://jsfiddle.net/z5o4jnv2/10/ EDIT: Just saw you say you only need newest Chrome. You can safely use async/await and Promises :-) PM me if you have any ?s about promises or async/await.
Either way I would master callbacks before moving on to advanced methods like promises. 
If you are learning async javascript, Promises are the route to take for sure.
Looks solid. Given webpack 2.2 going final do you have any plans to refine the configs? Also wondering what your thoughts are on not including unit testing?
[removed]
Promises: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise
The function doesn't fail, `lookup.val` returns `undefined`if `'val'` is not a property of `lookup`.
"Following Copyright Law" guy Google
Thank you, this looks very useful!
As an apparent Angular hater, have you tried Angular 2? Angular 2 is considerably different to Angular 1. No more controllers, just reactive components like React and Vue. In my opinion Angular 2 is pretty much equivalent to a typical React or Vue stack, except Angular is larger overall and has more structure in regards to complex app architecture, whereas React and Vue are "just UI libraries" which absolutely nobody uses without pulling in other libraries anyway. So I think the Angular haters are misguided when they hate on Angular for being bloated and opinionated. Angular is certainly opinionated, but you have to be when you're a complete framework and not a UI library. 
A synonym for Ordered is Sorted. So you're checking whether your string is properly sorted, just with custom sorting rules. Now figure out how you can use sorting to actually solve the problem.
&gt; However I'm definitely going to need optimizations for redraw, since even the vdom will be too big to traverse wholly for every modification. How certain are you of this? Take a look at [1]. It takes 1.25ms lib overhead on my 2014 ThinkPad to redraw all 2925 nodes [2] without any optimizations. With optimizations it can get down to 0.10ms. It is incredibly cheap. Many vdom libs are stupidly fast [3] these days. [1] https://rawgit.com/leeoniya/domvm/2.x-dev/demos/bench/dbmonster/index.html [2] document.querySelectorAll("body *").length [3] https://rawgit.com/krausest/js-framework-benchmark/961932c4471c04d9fc673e361400cc4eb26c2107/webdriver-ts/table.html
I've never needed to actually use this, but I made this as an experiment a little while back. Similar to the queue idea that you're talking about. Basically it's a little util that lets you create a queue that calls the next queued up item once the current one has resolved. Sharing in case you get some ideas out of it: http://codepen.io/dgca/pen/WoLzjK?editors=0010 You could also write an async function with a for...of loop that awaits the current async call before calling the next one. 
The function is written so that you can either pass a function, or a method name as a string. If you wrote `foo.later(500, 'bar', 42)`, it will do the equivalent of `foo.bar(42)` in 500ms. `that[method]` is retrieving the 'bar' property of `foo` so that it can be called. If that doesn't answer your question, then be more specific about what you don't understand, exactly. 
Did you do the official tutorial yet? https://facebook.github.io/react/tutorial/tutorial.html
Yeah, but I'd rather not use something that can be shortened to "BS".
Am I Right to assume that it's fine to remove those comments if you include the full license on the same website?
how does this make Google the good guy? I'm pretty sure this is a standard process for most companies. 
Good stuff - I enjoy seeing how other people approach their project environment :D
Woooah, I must have overlooked it. Thanks for catching it, I've already fixed it.
This one https://egghead.io/courses/react-fundamentals Everything egghead does is high quality. React is the simplest of all view layers. Learning React isn't about rules and API, if you can write es6 you already know most of it.
Wrap your SQL call into a function, then have that function recursively call itself (via setTimeout) at the end. Kick things off by invoking the function 10 (or whatever) times... Voila! You now have 10 parallel worker 'threads'. 
Yeah you can do that. Regular (compiled) applications do that all the time since you can't view source comments anymore anyways. You either have to include a license file with your binary distribution and/or add a link to your application leading to a page listing all third party licenses (and you want the latter). It's important that someone looking for them will find them in a reasonable timeframe though, meaning it must not be a hidden link. Try finding the list in e.g. the Facebook app as an example for the low bar you should be aiming at (or... rather above). And remember to include a full copy of the license text each time, even if other licenses use the same text.
You could fork a script i wrote that queues work async with priority and scheduling [https://gist.github.com/thysultan/3761df3e73d0092baa0527a83c35a5aa](https://gist.github.com/thysultan/3761df3e73d0092baa0527a83c35a5aa) though you'd have to replace requestAnimationFrame with a node timer like nextTick or setImmediate.
uh oh! it is here, it is here! new wagon of the hype train is here! rails -&gt; node -&gt; go -&gt; elixir -&gt; [webassembly] there will be tons of new blog posts and libraries and rewrites of finished products! Sorry, could not resist edit: Also, I am looking forward to a new webassembly-optimized bignum library for my unfinished project. Maybe I will write it myself.
you can set your shapeContainer.visible = false and in your tween you can do a .call so createjs.Tween.get(shapeContainer) .wait(10) .call(function(){shapeContainer.visible = true;}) .to({scaleX:0.4,scaleY:0.4},0) https://jsfiddle.net/ps0dp6kp/38/
Computing one hash at a time is *massively* faster than computing 5,000 simultaneously on most storage mediums, though. If you let Node compute the hashes concurrently, it'll read a tiny part of file #1, seek to file #2, read a tiny part, seek to file #3, read a tiny part, etc. That seeking takes time on most media. Seeking to an arbitrary position on a DVD can take 2-3 seconds, so you'll spend far far more time seeking around than actually reading data. Magnetic hard drives are still more popular than SSDs and have the same issue. Additionally, you're likely to get errors from the OS complaining about you grabbing too many files at once, like I just did when I tried to benchmark hashing 5,000 files.
We use Spring on backend also, and recently shifted to React (+redux+saga+lint+webpack+...) and your concern about disciplined teams is unnecessary (You need discipline for all code, not for React in particular among frameworks/libraries).
Good to mention it's enabled by default on Canary only.
&gt;There‚Äôs a new flavor of the day in software development... &gt;You can simply write code, ship it, and never worry about the context in which your code is executing or the resources it‚Äôs consuming. This is new? You mean, kids in school aren't taught this as the norm anymore?! Has all programming knowledge and the art been lost? I mean, I was taught this when I switched from hardware design to programming in 1992, and before, so am I missing something? 
dat name though :)
Lets assume your spoilers will be wrapped in some div/span with class and second with wrapper &lt;span class="spoiler"&gt;&lt;span class="spoiler-inner"&gt;....&lt;/span&gt;&lt;/span&gt; and in css, it has some visibility hidden and some bordering etc .spoiler { background: black; cursor: pointer } .spoiler:hover { background: grey; } .spoiler-inner { visibility: hidden; } .show .spoiler-inner { visibility: visible; } then, assuming you use modern browser and without jquery, you would need something like: var spoilers = document.getElementsByClassName("spoiler_reveal"); for(var i =0; i&lt; spoilers.length; i++){ createOnClick(spoilers[i]); } function createOnClick(spoiler) { spoiler.onClick = function () { if(spoiler.classList.contains("show")){ spoiler.classList.remove("show"); }else{ spoiler.classList.add("show"); } } }
`getElementsByClassName` returns an array with an elements that have `'spoiler'` class. What You can do is go through that array and add `click` event to each one - to reveal clicked spoiler, instead of one button to reveal them all
I wonder if you're not already limited in amount of concurrent operations by the libuv thread pool?
I did a lot of reading on creating a REST API for work. This API violates a few things that I think are important, such as naming of endpoints (/team/{ID} and not /teams/{ID} because you want 1 team) and only returning an ID, but not the full path to the resource. The full path seems like a minor thing but it means that people don't have to figure out your naming scheme *at all*. Also, /competitions/438/leagueTable should have been /competition/438/teams instead because you're getting the list of teams from the competition. That way, it matches the endpoints when you want to request a team. I get that the point of this tutorial was how to consume a REST API, but it would have been nice to pick one that was a little better designed, IMO.
I have a few issues with this article where I think it misses mark a little bit. First it limits its audience to those who already know and are familiar with CSS. But not even just CSS as it jumps in to using SASS for the use of `@extends`, the primary mechanism by which the connection to prototypal inheritance is made. Only using @extends actually takes you further from prototypes than normal CSS inheritance. SASS extends is more like using jQuery's `$.extend` - [using an extension for...] copying properties from one definition to another. In the end, there's no connection with `.btn` and `.btn-solid` as there would be with prototypal inheritance. If standard CSS inheritance was used (inheritance through DOM) it would better show that a child element inherits the styles of its parent, even as it changes at runtime, all without additional dependencies (SASS). I started skimming at the end, but it looks like there wasn't a JS example of property overriding - something equivalent to `font-size` which was used a lot in the CSS examples. This would be a matter of giving `obj2` its own `a` property. There's also a bug in the `Circle` example. `this.radius = ...` should be `obj.radius = ...`. As `this.radius`, the assignment is being added to the prototype (`Circle`) which means its being inherited by all instances. So the last circle created defines the radius used by all circles.
To me, the real value of a post like this is summarized by this quote on that page: &gt;Learning multiple ways to solve the same problem amplifies your mental toolkit by magnitudes. It's not necessarily that you'd *use* this technique all the time, or even most of the time, but that sometimes it could be rather useful and might actually improve readability. In fact, I'd say that when I use the ternary operator, the best thing it does it the improvement in readability.
That you lump all those together, and with webassembly, shows you haven't a clue what you are commenting about. Especially when you act like webassembly is something new.
A working, but not beautiful quick example, hope it leads you to your solution: http://jsbin.com/wenawubexe/edit?html,css,js,console,output
good to know! thanks
I actually really like Angular as a framework, but its view layer is *really* annoying. I would be *very* happy if there was an Angular 2, but with Angular components replaced by React components. While Angular 2 is certainly a huge improvement over Angular 1, and I love the fact that it defaults to TypeScript and Rx, I just can't go back from JSX now. Being able to use proper TS for rendering logic is amazing, and to say that Angular's templating language is limited would be an understatement.
No need. Now we have this: https://www.chromestatus.com/feature/5694172086403072
In some cases absolutely, but the official answer is **no**.
What have you tried so far?
Works in all relevant browsers except IE. If the target audience is tech-savvy use it ...
I recently purchased [The Complete React Web App Developer Course](https://www.udemy.com/the-complete-react-web-app-developer-course/) from Udemy because it was $10 (looks to be $15 at this time). I've gone through a couple non-Udemy tutorials and built some dumb shit before buying this, but it looked interesting based on the curriculum (covering Redux, Firebase and ES6 classes, none of which I've used in my forementioned dumb shit). I haven't started it yet, but I say grab the one you mentioned for $15, I mean it's $15 and you'll learn *something* from it, I'm sure. BTW, if anyone is looking for a good Vue JS tutorial, this one on Udemy is excellent, https://www.udemy.com/vuejs-2-the-complete-guide/ The instructor, Maximilian Schwarzm√ºller is really good. He has some Angular 2 courses as well if that's your bag.
I've been playing with Vue 2 (I like it a lot) and recently just started playing with vue-cli and the single file components which is definitely worth checking out.
It implies either: - the code is either so fragile almost any change could break it, and thus a new branch is needed - the development is extremely fragmented The latter implies bad performance, or very bad code smell.
Thanks a lot! About the upper/lower/camel - casing, this is an export from Active Directory, so I don't have much control over it or to change it automatically every time, it would be great overhead. One question here : why did you declare **value: [String]** like this as it is an array?
I'd recommend vue or react. I am gonna get downvoted for the rest of this response, but what the hell, I don't care about karma-so Angular 1 is outdated. Angular 2 is over engineered. Ember is slow.
&gt;Do you as a dev or lead prefer to use the seemingly popular mainstream projects (Angular 2.0 / React), do you think it'll hurt your career or company in the long term when using one of the lesser known frameworks? e.g. You will not be hired because you never used X, or you won't find devs anymore that are willing to do Y? I think knowing vanilla JS is the most important skill. Having a strong fundamental knowledge means you can be taught whatever framework/libraries that the company uses.
Over engineered as in too much unnecassary detailed functionality or simple things being made too complicated for no apparent reason?
I'm guessing something like this? function findMax(arr) { var currentMax = 0; for (var i = 0; i &lt; arr.length; i++) { currentMax = (currentMax &gt; arr[i]) ? currentMax : arr[i]; } return currentMax; } Feel free to ask me about any of it.
dude, 211 branches just means that there are 211 people working on adding or fixing the code.
I think the best way is to write some proof of concept apps and then see what you guys like best.
Yeah that's true, I guess I was hoping he'd ask us about it and learn from it
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/rcbredditbot] [I'm trying to make a spoiler button cross-post from javascript](https://np.reddit.com/r/RCBRedditBot/comments/5ppr39/im_trying_to_make_a_spoiler_button_crosspost_from/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
[They picked a logo](https://webassembly.github.io/spec/) for the spec page, but it's temporary
I'm pretty jealous. I graduated in 2010 and our BASIC class was using books **printed** in 1987.
Hi /u/gdangelo, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `eloquentwebapp.com`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [eloquentwebapp.com](/search?q=%28and+site%3A%27eloquentwebapp.com%27+author%3A%27gdangelo%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|33|100%
Hi /u/thatghostkid64, if you have a specific question and have already attempted to answer it, then we're more than glad to help, but we're not going to do your homework for you.
People usually refer to the latter when saying that Angular is over engineered. Too much abstraction impacting negatively readability and productivity. 
Oh, missed that one. My personal suggestion would be: * Place the W on the bottom to symbolize that the web is the "base" technology. * Put the A on top of the W and have the letters touch to symbolize the unity of the two words. * To symbolize the "holistic" nature of the technology, stylize the letters to be extra round. * As a nod to the original concept, let's put in an arrow pointing at the logo. Ladies and gentlemen, [I give to you...](http://i.imgur.com/OCicNXw.png) **edit:** just to be clear here, this is all in good fun. It's no statement about Web Assembly. I just spent the last two and a half hours listening to our designer and marketing guy talking about our awesome* new product design - making this image was kinda cathartic... 
So do I.
Really looking forward to porting the syntax/structure of pre-.net Visual Basic to the web. But seriously the only other language that is as malleable in comparison to ECMA is possibly lua. Especially when dealing with DOM madness. Second might be python where everything is an object but trying to follow the Zen of python would slowly drive me insane. 
Pat on the back for following the law. Fuck off, sir!
Unbelievable ... .NET web forms, which were basically obsolete in 2006, HTML tables, which were basically obsolete in 2008, and doing something in JS that has been done in CSS for the past few years. In other words ... this article is totally bleeding-edge for all those developers out there who work for places that don't want to be "too trendy".
a = b + c; Becomes ........= ....../....\ ....A........+ .........../.....\ .........B........C. At parser level to make sense out of your code written in English. This is called a tree made out of the syntax, or Syntax Tree. Abstract Syntax Tree simply describes what's happening at each level without using language specificities in similar tree fashion. Abstract part for above example can be like = becomes Equate &lt;left&gt; (i.e. A) to &lt;right&gt; ( I.e. Sum of &lt;left&gt; and &lt;right&gt; ) Imagine this info as a JSON object, that's your AST https://astexplorer.net this site can help you understand it better. Every compiler has a parser that ultimately reduces code to this tree object and then actually executes (interpreted languages) or further translate it to a language at further lower level like say assembly language (compiled languages) This is how Babel makes sense out of () =&gt; () and then does what's needed (translates it to function () {}). I'm not quite sure what portability means here but I assume it simply means it's designed in a way that it's very simple to translate any language into it. 
Pick frameworks that fit your company. Anything else is insane. You can be influenced by whats popular, but that can't be your deciding factor. If your current team has good experience with angular, I don't really see a reason to change that. Have you had a discussion with them about updating the toolset? I'm sure things will go easier if you invite them in for discussion, instead of us ;-)
So it's just a better parser? It's not a language or anything on it's own? Does that mean you can use any language with webassembly (so long as they have bindings for it)? Sorry if that's a dumb question, I'm just still not sure I fully understand it.
Okay, so, what does view do that other frameworks don't?
Depends on the size. What is likely to happen is people will make frameworks that are based on layout systems that can't be directly built with html and css, hiding all the complexities. The UI primitives will be entirely different. They tried to do this with sproutcore, and now Polymer. This could provide a complete control system, making such things more feasible.
The structure of the WebAssembly code which is sent over the network is an AST. The real point of WebAssembly is that the AST (actually the language and semantics it describes) is designed such that it can be effectively translated to super-fast native code at run time. The fact that an AST is used as the format for code transfer on the network isn't all that important really. 
Doesn't anyone use Knockout anymore? I love the flexibility of it -- you can implement your viewmodels however it makes sense for your app, rather than whatever way your chosen framework wants it done.
Keep up the good work. Really easy read and good explanations!
Is that your only criticism of Vue? I've always wondered why more people don't use it
&gt; This is especially useful for Single Page Applications (SPAs), **which is the defacto standard for Web Applications today.** Nope.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/rcbredditbot] [Is this a decent learning path?](https://np.reddit.com/r/RCBRedditBot/comments/5psd5f/is_this_a_decent_learning_path/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
You might be surprised how widespread Knockout still is! It isn't sexy enough to dominate online conversation, nor is it currently cool to bash it, nor is it a giant monolith that employers might list against their job offers... it just doesn't get brought up often. I'm working in C# .NET enterprise app dev. My current project uses Knockout. Of the companies I interviewed for before my current job, about half turned out to be using Knockout!
You should focus on learning ES6 first. Not only are the current React docs written with ES6 examples, but ES6 is being widely used in general. You should also at least familiarize yourself with the basic concepts of using NPM (or Yarn) for package management early on. By "Node.js" I assume you mean trying to use Node to write servers. You might also want to consider looking into Webpack at some point, although that can be put off for a bit. FYI, I keep a big list of links to high-quality tutorials and articles on React, Redux, and related topics, at https://github.com/markerikson/react-redux-links . Specifically intended to be a great starting point for anyone trying to learn the ecosystem, as well as a solid source of good info on more advanced topics. In particular, see the "Basic Concepts and Overviews" page for info on commonly used tools and suggested learning approaches, as well as the "ES6 Features" and "React Tutorials" categories.
variables can be functions
I have more in my comment history. The underdeveloped lifecycle methods are prob the worst and a pretty consistent problem for me, though. I had to do some transitions earlier that was `fun` to get working. Props change mid transition/etc.
[removed]
[removed]
[removed]
Webpack is great for bundling my JS modules, and the tree-shaking feature in Webpack 2 is *very* cool, but I feel its usefulness ends there. I think it's bad practice and generally ghetto AF to bundle stylesheets with JS. The same thing goes for bundling other data assets like .json files, where it's obviously smarter to simply update the .json data in order to update my page/app's content instead of bundling it all together, which would then require a recompile and redeployment for each update. Personally, I think Webpack works great along with Babel to transpile my JS within my Gulp build pipeline, but using Webpack for anything more than that just seems like unnecessary overkill, like forcing a square peg into a round hole.
They have since switched to a stack machine as the model for WebAssembly, resulting in flat code: http://webassembly.org/docs/rationale/
We should also try and replace the dom too
He can now implement front-end PHP thanks to WebAssembly!
&gt; The inclusion of them in package form is quite dangerous, as leftPad has taught us. I'm not sure I'd agree with that, `left-pad` caused problems because it was unpublished. That would of caused the same problem regardless of whether it was a small package or a large package. &gt; Why re educate developers on your unique Dom ready approach when the other methods have been common knowledge for a while. Because the existing solutions don't work if the script is loaded async.
Yes, if you didn't do that then `this` in the anonymous function installed as the timeout handler would not be the same `this` as when the `later` method was called. This is probably a somewhat old example, because today you'd probably use a fat arrow function instead of the `that` thing. And likewise the `Array.prototype.slice.apply()` stuff would be replaced by an ES6 rest parameter. 
We'll probably be retired before that happens. 
I usually make the parts I need in Vue without including netheir jquery nor bootstrap.js, but in some cases I used this to replace bootstrap.js. http://thednp.github.io/bootstrap.native/ I found it very useful
I'd recommend trying out [Polymer](https://www.polymer-project.org/1.0/); the learning curve is relatively low and it's built on top of the [webcomponent specs](https://www.webcomponents.org/introduction) which look to be a big deal in the coming years. However, Polymer is currently switching from v1 to v2 and is somewhat less stable than established frameworks like React. That hasn't stopped it from being used in production though, for example [Youtube Gaming](https://gaming.youtube.com/). It's also worth pointing out that Polymer is a library rather than a framework and doesn't have a canonical app architecture in the same way frameworks like AngularJS do, which gives you more rope to hang yourself with. Learning a framework won't necessarily solve your spaghetti code issue though, for that you'll probably need to learn more JavaScript. Some potential starting points for doing so: * [Learn the basics of functional programming in JavaScript](http://jrsinclair.com/articles/2016/gentle-introduction-to-functional-javascript-arrays/) * [Read a JavaScript style-guide](https://github.com/airbnb/javascript) * Try out a utility library like [Lo-Dash](https://lodash.com/) * [Use less jQuery](http://youmightnotneedjquery.com) * [Read about ES6 in-depth](https://ponyfoo.com/articles/es6) For the specific problems you mentioned (AJAX polling via setTimeout, event listener memory leaks) you might want to look into: * [Promises](https://developers.google.com/web/fundamentals/getting-started/primers/promises) * Observables (using [ReactiveX](http://reactivex.io/)) If you're already using `jQuery.ajax()` then you're (more or less) already using promises but you might not be aware of things like chaining, `Promise.all` and `Promise.race`. While promises let you handle one off asynchronous data (e.g. http response) observables let you handle a stream of asynchronous data (e.g. a stream of http responses, mousemove events). They can be a bit of a pain to get your head around initially, but they're well worth the effort. (To give you a flavor how terse observables can be, here's a [jsfiddle that polls httpbin every second and renders the result](https://jsfiddle.net/ArranStirton/sxfkkjzj/4/).)
Wouldn't it be quite a bit smaller if you stripped all the extra spaces? Also, you can either lose 4 characters by re-writing the `on` handler for a total of 118 bytes. e=(a={})=&gt;({on(t,x){a[t]=[...(a[t]||[]),x]},off(t,x){a[t]=a[t].filter(f=&gt;f!=x)},emit(t,x){a[t].map(f=&gt;f(x))}}); I'd argue that you also need N arguments on the emit which adds 6 characters (net gain of 2) e=(a={})=&gt;({on(t,x){a[t]=[...(a[t]||[]),x]},off(t,x){a[t]=a[t].filter(f=&gt;f!=x)},emit(t,...x){a[t].map(f=&gt;f(...x))}}); 
Very nice concat trick! I didn't use spaces because I thought maybe es6 code would break. I will add these changes in the morning :)
so were not gonna be using javascript anymore right?
&gt; visible Thanks!!!. That is perfect. I didnt know you could have a .call() in the middle of a tween. Always thought the .call() would be used when the tween was completed. 
linting, live reload/hot-module-replacement, code splitting, less/sass, unit testing, etc are all great features of webpack. Granted, gulp could do all of these as well, but it involves building each task separately and then pipping them through correctly, which can be a bit cumbersome than just installing a module and filling in some config options.
Hi ! Yeah I guess the title could be more explicit but at least it's catchy ;) I guess it depends if you call front-end controllers + twig view a Symfony project or not. I plan on having pure REST API controllers and a separate front-end. For now, i have every controller duplicated because at first I had a full Symfony environment
Dreamy. Would be nice to see an estimate timescale but sounds great nonetheless. 
&gt; Switch ReactDOM implementation to Fiber without changing public API.
&gt; less/sass Injecting Sass into the Webpack bundle is the only way for it to preprocess CSS, which is no big surprise when you consider that Webpack is a **module bundler** and not a **task runner**, but this is exactly what I do not want, so I have to use a task runner (Gulp) to manage my CSS preprocessing anyway. Webpack's ExtractTextPlugin, which *could* be used to regain those bundled CSS files is precisely what I meant by forcing a square peg into a round hole, in that it's an unnecessary complexity, forcing the *user* to bend for it instead of *it* bending for the user, as it should be in the case for all good tooling.
Huh? I fail to understand how SPA is less secure, use JWT or sessions to access a thin restful api at the backend.
Thank you for pointing to mitt - did know about that one. Neat!
4th question was the same as the first -_-
[removed]
`watch` is Firefox only unless you use a polyfill. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/watch 
Thanks. Having fun making it. Can't wait till I get passed Transform Matrices and having a working camera, then I can start prototyping some ideas I have that might be fun.
What do you want to get a full address from? Are you looking to provide a partial address to some api and get back a full address? Are you providing at map geographic coordinate in latitude, longitude? Is this for anywhere in the world or a certain region? The databases that back address geocoders will vary widely depending on the area. For example even in the US, Google maps geocoder can have a hard time with places in Puerto Rico. If you are providing map coordinates, then that is called reverse geocoding, and again, the response is only as good as the providers database. There are many services that do geocoding, perhaps try the OpenStreetMap Geocoder as an alternative to Google? Or mapbox? 
Guys, can someone explain like I'm 5, what is Fiber?
Rust will be also an option.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/rcbredditbot] [Firefox and Chromium are now WebGL2 by default (x-post from r\/WebGL) (X-post from \/r\/javascript)](https://np.reddit.com/r/RCBRedditBot/comments/5pwma2/firefox_and_chromium_are_now_webgl2_by_default/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
Thing is, street numbers and postal code were missing for me. And now i am getting all the address details, interesting, it probably randomly returns full data or just a part of data.
Thanks for the info. But would this bootstrap.native suffers the same problem as jquery with VueJS? Granted it has better performance than jquery, but it'd still be redundant if you have VueJS. Am I correct? Have you tried Vue-strap, or bootstrap-vue instead? They supposedly don't use javascript at all (which is handled by Vue). https://bootstrap-vue.github.io https://yuche.github.io/vue-strap/ 
interesting. I think i used the bare-bones geocode api request for both, i.e. with no additional parameters, bbox, etc.
Joke or not, it's going on my resume NOW ! Imma expert wit' litt.js !
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/rcbredditbot] [I need help (X-post from \/r\/javascript)](https://np.reddit.com/r/RCBRedditBot/comments/5pwsd8/i_need_help_xpost_from_rjavascript/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
Webpack is an amazing task runner; not to mention you can run any async or sync processes with it simply via node and npm (can't think of any use cases for that though at the moment). In my work we've ditched gulp and just use webpack with our own express server and webpack-hot-middleware. Makes parallel development really easy assuming our front end and back end teams have established a clear data contract. We can also mock our backend requests easily with that setup. We also use extract as you mentioned above to separate out CSS, feels pretty straight forward to me. Gulp just feels like an unnecessary wrapper =&gt; why not just point to an index file and execute tasks natively? We just hook in to an index file, run a few tasks natively, spin up a server, inject webpack, build out our own requests, and then do our development. Otherwise we manage other parts of our build via npm scripts (karma for unit tests or just a straight up webpack bundle in production). Hooking a webpack build in karma is also a nicety.
I believe that the new return types are: * Multiple/sibling components * If you return an error from a component, will be able to `try {} catch () {}` to render a backup component Not sure about `undefined`. What's the use case for returning `undefined` ?
These are great. What I am really missing in Flow type is ability to describe class interfaces. There appears to be no way to do it. (You can describe base class and annotate it, but thats not an interface ‚Äì class should be able to satisfy multiple interfaces).
To have images easily added to your page you could just set all the images to the same base name like "image" and then have a postfix with a number like "image1.jpg" "image2.jpg" then you could use the random number function I wrote on that codepen to pick one at random on document load.
Sadly, I suspect most developers won't care. Convenience is king.
I think you're thinking too much into it. Focus on the part where you're dealing with whole numbers now. Math.random() alone may not be inclusive of 1, but it represents everything else from 0 up to it. Once you go whole, you have Math.floor(Math.random()) which is 0-0 inclusive. This is 0 plus every fraction of 0 up to but not including the next whole number, 1. Math.random() represents a single, entire, inclusive number. Add one to that range and you have 0 and all its fractions, and 1 and all its fractions, or 0 and 1 inclusive. The more you add to that range, the more whole numbers you include. The max/mins just help you get to that range with the +1 representing that original full 0 whole number (1 * Math.random() === Math.random()).
We want to have the image stored directly on the server in a specific folder. Does that work? And thanks for your help 
It's a poor article and has been removed.
What's the utility of multiple returns? 
As long as the specific folder is public.
The basic idea is to split up the work of rendering React components into small chunks instead of trying to do it all at once. That way, some things can be marked as higher priority than others, and React can be more efficient in how it updates the UI. This will make animations run better. The internal changes will also allow the React team to start implementing some new capabilities, many of which have been requested for a long time. One example is allowing components to return multiple children at once, instead of always having to return a single root child with other children inside of it. For links to more info on React Fiber, see the [React Implementation#React Fiber](https://github.com/markerikson/react-redux-links/blob/master/react-implementation.md#react-fiber) section of my [React/Redux links list](https://github.com/markerikson/react-redux-links).
I didn't really see this expanded in the article, but the author talks about not wanting to use redux as it adds another abstraction layer. How does vue handle complex component to component communication without? I've seen vuex before, but from the tone of this article it seems you can use vue and achive this without it.? I'd be interesting on hearing more about that. I really like react, but i'm not a huge fan of the amount of boilerplate and abstraction necessary to have individual components communicate (without having to use a convoluted container component passing a bunch of methods and props). 
You're - I beg to differ, no reason to get hostile though.
To avoid having to wrap everything in a `&lt;div&gt;`. 
So if i just throw the folder onto the server it's fine right? I just have to indicate the folder's path?
Not exactly. What tech stack are you using?
Is that really that bad? 
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/rcbredditbot] [Explain javascript Promises to me like I'm 5? (X-post from \/r\/javascript)](https://np.reddit.com/r/RCBRedditBot/comments/5pxotr/explain_javascript_promises_to_me_like_im_5_xpost/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
When something doesn't happen instantly (like asking for some information over the internet), you need a way to tell your code to wait while that thing happens, before you can continue. So let's say you want to get the kittens from the kitten database, and then display all the kittens on your website. What you basically want to say is: get the kittens, then: insert the kittens information to the webpage Before promises, we would use callbacks to do that: getKittens(function(kittenData) { document.body.innerHTML = kittenData; }); You are passing in a function, and that function gets called with the data when the kittens have arrived. But if the getKittens function uses promises, we can do it like this: getKittens().then(function(kittenData) { document.body.innerHTML = kittenData; }) So getKittens returns an object, and we are calling `.then()` on that object, passing in a function with the code that we want to execute when the kittens have arrived. Based only on this example it might seem like you're basically still just passing in a function, just into a different place. But this pattern allows for much more powerful behaviour - and provides a more consistent way to deal with asynchronous code. It also ends up looking cleaner when we have to do nested asynchronous things, with the next thing depending on the previous having completed. Of course, that's only half of the story. Here's an example of how you would implement and use a promise that waits a second before executing your code: function wait(ms) { return new Promise(resolve =&gt; { setTimeout(() =&gt; { resolve('Hello world'); }, ms); } } wait(1000).then(response =&gt; { console.log(response); // 'Hello world' } You could condense that down a bit, but I was trying to be more explicit. Also I used arrow functions. You will probably see them used a lot with this sort of code.
When you go to a restaurant, the hostess gives you a buzzer for your table. When the table is ready, the buzzer buzzes. You respond by sitting at the table. The buzzer is a promise. It buzzes when the promise resolves, or is ready. The buzz is your handler. var buzzer = promise(); fetchTableAsync(hostess =&gt; { var table = hostess.prepareTable(); hostess.informServer(); buzzer.resolve(table); }); buzzer.then(table =&gt; me.sitAtTable(table));
express is your server side code that delivers assets to the client. It's an always running application that listens for requests from clients. Server applications can be written in almost any modern computer language. Express is a built on top of NodeJS. Take that tutorial and you'll have a super basic local server. You'll want something slightly more advanced once you want to start delivering web pages (not much more advanced unless you want a database). If you want a backend with a database you can add functionality as you go or find some boilerplate. There is a lot to learn right now for you. Your current main problem is that you don't know what you don't know. You'll want to learn about all the topics that you'll want to deep dive into later when the need arrises. A lot of people swear by https://www.freecodecamp.com/ for a good intro into web development.
Just to clarify, this is not what you want, why? https://flowtype.org/docs/syntax.html#interface-declarations . By the way, for those coming here unfamiliar with Flow, this is probably the best short document explaining some differences: http://djcordhose.github.io/flow-vs-typescript/elm-flow-typescript.html#/ I stick to Flow after trying both because it is more strict, the examples in the above presentation don't show all details.
Imagine you wanted to do a simple popover. Now you can just have a Popover component that takes your anchor element as a child. In your Popover component, you can just return [Anchor, Popover].
Alright thanks man
Yes! I would love to add GitLab support. I've built all of the git-related functionality in a generic enough way that adding GitLab shouldn't be too much of a chore.
No, the author (myself) didn't mean you can go on forever without Redux/Vuex. Like...you'll know when you hit the point that you need Redux/Vuex. Also for smaller apps/website one can use Vue's custom-events if needed for component-to-component communication. For an SPA I developed in the past, the application had a central "App" object that was also a publisher ("publisher" from the publisher-subscriber pattern) and was accessible if any component needed it. This "App" object was used for much of the application level events. This idea is also mentioned here - https://vuejs.org/v2/guide/components.html#Non-Parent-Child-Communication. But for larger applications/websites better to go for Redux/Vuex early on.
I like where you're going with this, but I think its a little backwards. If the kid is getting the cookie, he shouldn't have any responsibility for accomplishing tasks. He just waits for the cookie. I think its more like, you want a cookie? Hold this plate where the cookie, after its done cooking in the oven, will be placed. The cookies might burn, at which point you get no cookie. You may also go off and play, and the cookies, when done, will sit and wait until you come back with your plate, where one can then be placed.
X-Post referenced from [/r/programming](http://np.reddit.com/r/programming) by /u/ploggingdev [1096 - Cisco: Magic WebEx URL Allows Arbitrary Remote Command Execution - project-zero](http://np.reddit.com/r/programming/comments/5pu055/1096_cisco_magic_webex_url_allows_arbitrary/) ***** ^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
Even on Linux and Android? I can never play WebGL games on my phone or computers for some reason, usually because WebGL isn't enabled by default.
I think larger sites will have a mix of parent-to-child communication (through props) and central redux. I think excessive use of a central state manager/pub-sub is also bad as it becomes hard to track/debug.
You can use classes or prototype inheritance for this (speaking specifically to how to handle utilizing functions for common data sets); it will make it so a function is universally shared and instantiated when necessary; e.g. const MyVideoComponent = (id, text, userId) =&gt; { this.id = id || '' this.text = text || '' this.userId = userId || '' } myVideoComponent.prototype.play = () =&gt; { // do something with this.id } // or if you like ES6 syntax sugar coating... class MyVideoComponent { constructor(id, text, userId) { // this function runs on creating a new component this.id = id || '' this.text = text || '' this.userId = userId || '' this.play = this.play.bind(this) } play() { // do something with this.id } } // and to use either one... const someInstanceOfTheClass = new MyVideoComponent('someId', 'someText', 'someUserId') someInstanceOfTheClass.play() Now regarding your question as far as what's the best approach to take; really doesn't matter =&gt; netflix and big sites like that will do everything to increase performance and optimization, both with flux in mind or following angular / react / inferno / vue / etc. Frameworks are picked primarily on support/business continuity and performance when it comes to those big companies, and there's a lot of right and wrong ways to manage their data and implement it (so without knowing their underlying architecture it is difficult to discuss what they use). I do know netflix uses promise-based approach, probably lazy-loading as well, and then I would imagine some type of framework considering how much code they probably have to reuse in their site. Here's a bunch of vids on what technology netflix uses: https://www.youtube.com/channel/UCGGRRqAjPm6sL3-WGBDnKJA (looks like React for the front-end at least, but they may also use it for server-side rendering and/or react-native as well). 
My company uses ExtJS 6. I wish we didn't.
Aah, finally. [Node.js made up its mind on how to interface with es6 modules](https://github.com/joshgav/CTC/blob/f702046e23385ebf8959d657cf8cd8abc4129ec8/meetings/2017-01-11.md#rewrite-002---esm-node-eps39) Default export only. Simple and logical. The .mjs extension however requires changing the whole world. Everything will be forced to recognize it. And apart from a bit of easy performance gain, I don't see its point at all!
Yes, I know about prot inheritance and all that. My doubt was more about which approach was better or more used nowadays. Classes and mutating the state or having the state and using functions to create a new state with the new changes(where state is inmutable). 
Do you remember the tale of the Milkmaid And Her Pail? The milkmaid didn't wait to get each of the things she expected in order to decide what to do with them. And when the first thing she was waiting for failed to materialize because of a bucket overflow, her whole plan was frustrated! Promises are like that but in Javascript. 
If I understand correctly, the gist of it is instead of immediately _doing_ the rendering work as it shows up, they will instead make a wrapper (a `fiber`) which declares _how_ to do the work, so that work can be handled by a scheduling process (including orders, priorities, pausing, resuming, etc). It's more complicated than that, but that's the underlying concept, I think.
Thanks! I think mutating the state and using objects in the manner post.save(); makes code easier to read. But at the same time, avoiding state mutations and using functions which return a new state makes code easier to follow and also helps in avoiding unwanted effects. Wish there were some open source web app source code from a big company to check out how they do it. 
I'm currently in the process of creating my first react app. Should I use Redux over flux? Is there something like a best practice or standard stack?
this ^ no bueno
My company uses Ext 4 and 6 (About to move off of 4 completely) Loving it. It's not without its issues, but for what we use it for it is great. Mind you we don't use it quite how other people use it.
Yes. Some contexts don't let you wrap things in a div. (Tables, for instance.) There's a trillion other reasons that this feature is super important, many of which are on the GitHub issue for it. (Which is now locked, because people kept flooding it with their reasons for wanting the feature.)
Well you could be using ExtJS 2
Thank you! 
How is cooking a cookie in the oven more relevant than cleaning the room? Both are async tasks that we define needs to be done before a cookie will be given.
With the latest release you can even use the 'implements' keyword with classes. https://github.com/facebook/flow/releases/tag/v0.38.0
The name is useful so you can call it, but the difference between `var foo = function () { }` and `function foo() { }` are subtle and usually can be replaced with each-other. The name is also handy for debugging purposes - it's this reason why I give names to every function, even otherwise anonymous ones passed as callbacks. Now, why a constructor over an object literal? In this case, they are equal, but if you did calculations on name/age, you might want a constructor (or factory). If you had methods you'd also likely want a constructor as well - adding methods to each individual object instead of on the prototype is much more expensive. 
There are numerous reasons for using a constructor function. You might have actual program logic involved in initializing the object, not just assigning properties. You might have private state. And if you want to have methods, it gives you a convenient prototype object to hang them off of, instead of assigning them as properties of every object (not to mention the obvious problem that you wouldn't want end users to have to do that.) 
Because who gets the value isn't the person performing the async operation. They're simply the one waiting for it. The async operation does its thing in the background producing a value, handing it off in the then callback. If the operation is cleaning the room, the kid is the process performing the operation and would then be responsible for handing off a value. Who is the recipient then? This would be equivalent to rewarding `fetch()` with some "cookie" for doing a good job of fetching something. But no one cares about fetch. They give fetch a slap on the ass, letting it run off to do its thing while they sit happy with the promise it left behind. fetch itself becomes dead to them and gets no recognition for a job well done. So sad.
Not using a prototype: var obj1 = { foo() { } }; Using a prototype: var obj2 = Object.create(obj1); You can call foo on either obj2 or obj1, but obj2 has to look up to the prototype to find it. In practice with, say, classes, you end up with one object like obj1 (MyClass.prototype) and many objects like obj2 (instances of MyClass). 
I'd like to give a shout out to MobX (https://mobx.js.org/) at this point, given that you mention boilerplate. I've used Redux for a pretty large application and like it well enough but MobX will definitely be my state library of choice for my next project. It appears to be elegant, low on boilerplate and makes ES6 classes first class citizens (if you want).
I agree with OP. I use vueJS over reactJS in various projects. My concern with React and Angular2 is that they both feel like hacks after spending ANY length of time with it. Its obvious that React likes the web component model. So lets just use that and extend the functionality as needed to save time. This page from the react team is what put the nail in the coffin for my team: https://facebook.github.io/react/docs/web-components.html Just read that first paragraph. I am not a lawyer and I know I do not write english well, but that explanation is B.S. Just use web components and save the headaches. 
If you add a method (or any property) to an object's prototype, you can't `delete` it directly from the object. This is practical for a lot of reasons, e.g. for when you want to "clean" an object with `delete`, but don't want to remove all the handy things like `.toString()` `.hasOwnProperty()` `.valueOf()` etc that provide its basic usage. Adding methods to a prototype is also practical because maybe you don't want to manually add a `.printVIN()` method to every `new Car()` your script creates. Just add it to the prototype and you know every `new Car()` will come with `.printVIN()` included.
That's debatable. Some people don't like using constructors and avoid them by choice. They can take different approaches that allow for this. This includes using object literals like `{...}` or using other methods like `Object.assign` to copy properties between objects or `Object.create` to create objects with inheritance (the inheritance aspect of objects, btw, is what `instanceof` uses to work). The constructor approach is just one that includes automatic object creation with a built-in prototype that has a function called (the constructor) for the new object instance when created. If you're doing much with OOP in JavaScript, the constructor approach tends to be pretty common. And with the newer versions of JavaScript, there's a `class` syntax which makes it a bit cleaner and easier to work with. As you start using objects with more complex definitions - not just objects with a couple of values, but objects with values and specific behaviors that are used with those values, making classes like that tends to make things a bit easier.
My cents about JSX vs templates point: Well, I worked many years with many JS frameworks/libraries/architectures/methodologies, and every time there were templates (string, angular, mustache, ...) for interactive apps (not talking about generating statical documents/pdfs), it ALWAYS ended with separation concerns (markup in one place, logic in another). So i take JSX/hyperscript -like methodologies as a huge PRO, since it helped our teams (around sizes 10 people collaborating) hugely reduce few big classes of bugs.
I will be a bit anarchist here, but what about https://cycle.js.org/ ? :)
Yes definetly use Redux. It might be a little harder to understand in the beginning but it will quickly pay off.
Do something. When it's done (possibly with the result), let me do more. Otherwise, let me get onto other things. If an error occurs tell me and let me do stuff with it. No more messy callbacks.
Using the top React component's state is another way of avoiding Redux (I tend to use Redux though)
[Careful about using top-level arrays](https://github.com/tornadoweb/tornado/issues/1009)
It's all relative, but I'm in the camp of developers that will avoid any project that uses it. YMMV but there isn't a $$ you could pay me to use it.
We have two large codebases(enterprise webapp) in ext4 and are actively moving to React. We will probably never convert the legacy app, but plan is to switch new app over the next year. I can't wait to move away, it was ok in its day but js has moved on. I would not want to to stay with sencha anymore Edit: typo
It's becoming more popular for restaurants to text you when your table is ready. I've been to a few where they had this and it worked well.
Yes yes,that was just an example. I usually use { response: data } Or something similar!
I wholeheartedly disagree with the authors first point in preferring templates over jsx/javascript.
Hey guys! Last week I [shared a weird idea](https://medium.com/@joshuawcomeau/array-filter-as-a-react-component-8a6570a2be82#.jtlcxp1xb) about doing array manipulation with React components. It got some pretty good feedback, so I decided to develop it into a module. I'm still not 100% sold on its value, so I'm sharing it here to collect feedback and see if it's worth pursuing. I think that there _is_ something here, but it might take some more experimentation to really sort it out. You can play around with it by editing the fiddles [on the demo page](https://joshwcomeau.github.io/react-collection-helpers/demo/dist/).
I was trying to make it look like Java, per management orders. Honest! :-P Worse than + coercing operands to primitive, as in Java (but Java has static types, so you can tell what + means at compile time), I think, is [1] coercing to '1'. I wanted a '[1]' and fought for it in ES3 era, but by then we couldn't change toString(), and no one wanted toSource() too. SpiderMonkey supported uneval/toSource for a while, though. You could decompile a canonical representation of any non-"host object" value, which would eval back into the same (or isomorphic if reference not primitive type). Hence the name `uneval`.
What do you envision that would work like? Would you suggest different various registers or even no registration? What about people hosting their own modules accessed by some common tool? 
Yes, just like that. Only I want to customize the design and the parts.
Or, you know, you could stick to (soon-to-be) [standards](https://github.com/tc39/proposal-dynamic-import) instead.
I sometimes work on an ExtJS 2 app where code files are at a minimum 2000 lines long. Its not my favorite. 
Huh, **every project always published.** Example project: https://playcode.io/5025?tabs=app.html&amp;style.css&amp;output And as normal web page: http://5025.playcode.io
Sounds like you need a better editor to make it feel less cluttered. That or you need to work on keeping more code context in your head. Large code files will eventually happen with any language/framework. 
Not dead, they've just "merged" their mobile offering (sencha touch) into Ext (modern framework vs classic framework). 
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/rcbredditbot] [Simple image filters based on convolution matrixes. (X-post from \/r\/javascript)](https://np.reddit.com/r/RCBRedditBot/comments/5q0j4t/simple_image_filters_based_on_convolution/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
I see. It all makes sense now. :) Yes I need to start looking at ES6 syntax. Thank you again.
I like this analogy because one of the cool things about a promise is that you can listen to it after it resolves. As opposed to an event, where it fires once and if you miss it, you miss it. Edit: plus that the cookies can be burned. You're always going to get something back on the plate. Just, sometimes it's a message that something went horribly wrong. Promises need to resolve or reject. You can reject a promise, or you could indefinitely delay, but you can't turn the promise off. Once you hand the child a plate, you *must* eventually put something on it, even if it's a burnt cookie.
Thanks for the input! Ok I will try to get a bit more detailed, the reason I post this was to get a broad answer on how someone would implement this with the mean technology. I am hoping to create this on the web first, maybe go crossplatform with reactive native later? I am guessing mongodb would house the data of who is currently "connected". The node.js/express part would do the calculations to find a match depending on who is in the database and the right elo criteria. The angular would be the front end development for the card game itself. I was hoping for a design pattern to implement such a game and the reason why I wanted to implement it with mean stack is for practice (I have a bit of expertise in development, I have been doing java/Android Developement for a few years already, mostly frontend though). Not trying to get a full source code, more like a guideline on what the best practices are if I would want to go through with this.
http://javascript.info/tutorial/mouse-events 
https://youtu.be/lQA8ea11MyU https://www.kirupa.com/html5/learn_javascript.htm
I prefer to avoid Javascript spaghetti. Down with React! 
I've always thought of callbacks as saying "here, do this thing I need done when you're ready", whereas promises are "just tell me when you're done, then I'll worry about doing what I need done".
That's cool that you can serve just the output like that. I meant the source of [this](https://playcode.io/static/js/main.1d3db37.js).
I guess I asked the wrong question in the wrong subreddit. Anyways, my point of the post is to practice coding in the mean stack. The best practice is to actually work on something, I decided that I wanted to design a simple card game that can be played by multiple players. General requirements/specs: * user can go to a website and start searching for a game * two game modes, party game mode or 1on1 * server matches users to elo and party size (4 max) * players play the game * game calculates elo on finish
alright well here you go https://search.scotch.io/?query=mean I still don't understand why you want MEAN.. but I suspect you'll figure that out as you go forward.
It all comes down to personal preference tbh.
Arrow function cannot be used as constructor 
ah yea good catch, what I get for writing without a compiler/syntax checker.
"In the end, I was able to get the testing in place in a Sharepoint page, while still keeping the modern elements of Node.js and ES6 that I wanted to use." what you actually want to convey in your blog post ?
Totally agree with you. When I use Vue, I always write [Single File Components](https://vuejs.org/v2/guide/single-file-components.html).
We have a few legacy apps in 3.4, I *think* 2 with v5...and then we switched over to basically anything else.
completely off topic, but yeah they do.
If you want to easily connect events and form fields and interface changes, VueJS is worth a cursory look.
Unless you have a reason to otherwise, throwing the source code of this project on github is a great way to help the community. 
**tldr**: it is best to understand a need of a module by *feeling* how it is like without it. Please do not take any offence, people tend to question "why X is better than Y? Even, why is X required to begin with?". In the process of making a 'vanilla' react app -- by using only props &amp; setState and a few context -- you *will* encounter some "pain in the ass" moment. Only at that moment, you can feel the real need of better data &amp; event management solution. Tutorials and boilerplates are indeed god-send. But if you do not fully understand each and every component of your stack, you will have a hard time customizing the stack on your own. Real-life projects often needs case specific tuning, and you're gonna miss *simple days* where you could replace `&lt;script src="jquery-pwn.js"&gt;&lt;/script&gt;` and everything ..sorta.. works. **edit**: My personal opinion is: 1. feel the pain of `$('#dank').data('data-meme','stale').on('click',function(ev){$(ev.target).killme()})` hell 2. learn vanilla react &amp; es6 3. thank god for sending these geniuses for us 4. try to make an app, preferably bigger than a todo-sample. 5. feel the pain of passing `onAddItem`, `onClick` props down there and dealing with `shouldComponentUpdate` each and every time 6. learn redux/mobx whatever 7. thank god for sending those geniuses for us 
Redux is so well integrated that it's almost natural, even if a bit harder, to learn it together.
&gt; I was wondering if a MySQL connection is secure? How do you mean? Security is not handled over the network by MySQL or JS it is handled by networking protocols specifically TLS. &gt; I can view JavaScript source code with web browser plugins and was wondering if I released a tool that grabs tables from my MySQL database am I releasing the MySQL user and password? No for a number of reasons. 1. You seem to be confused with the execution of code. I assume you're running nodeJS. Client-side execution and Server-side (which handle queries) execution are 2 different things. Just because you can execute JS on your server does not mean you need to make it available via request client-side over HTTP(s). 2. Assuming you've protected yourself against injection (escaping / parameterization), unless you specifically have a part of your app that does this and therefore that query exists (querying the entire user table and dumping the output to the browser) and you leave security vulnerabilities regarding access, then there is very little risk. 3. Even assuming the table was compromised you should be storing passwords in hashed form not cleartext. 
What browser are you using? Works fine on chrome 55
It is Chome pal. But I got it fixed. It's because I used jsbin.com It doesn't seem to work well there. I did the same in jsfiddle.net and it worked. Thanks for answering! ^_^. On another note if possible. Why does it output 19 and not 20?
You used i&lt;20 instead of &lt;=
Because you told it to stop when `i` is no longer less than 20.
Well, this is so basic, why should it not work there? Can you share a link?
Thank you, by far the best answer :-)
A few years back browser APIs were terribly inconsistent and the general advice was: use jQuery. While this is still a great tip if you want something that works in a lot of different environments (most modern browsers nowadays are quite consistent), most people would probably recommend a web framework. Hooking up a program to a button might not be easy, but programming web interfaces is it's own subfield within programming and not a lot of people are dealing with native browser events and the DOM directly (while it is still important to understand how they work).
&gt; Debug Node.js in This is great. The Chrome developer tool is by far the best debugging tool I have ever used. There were tools in the past to use the Chrome developer tools together with Node, but now that it is supported natively it probably works much better.
I understand. Work does not ~~always~~ usually allow for the best approach. It is possible to learn both at once. 18 months ago I started with node / webpack / react / redux / knex. All for the first time. Admittedly I am an experienced developer (18 years). It was hard. The basic mix up between Redux and React that can happen is not knowing where to store your stuff. Do you put it in the React state or the Redux state. The basic rule of thumb I follow is to ask myself what happens if someone clicks the back button to return to the current page. Should that state data effect the page rendering. If the answer is yes, then it needs to be in the Redux state - which involves writing more code, otherwise you can just put it in the React components state - which is lost when the component unmounts. Everything else should become clearer over time without the need for major refactoring.
If you just want an easy to use solution, take a look at https://clipboardjs.com/
You should definitely try Visual Studio Code debugger then. It makes debugging webpack loaders much easier for example.
Not yet.
why do you keep available languages inside state? they doesn't change anywhere so they should be kept outside in a const
your looking for .addEventListener(); method and if you want to use it from an html element getElementById(""); i would personally suggest avoiding jquery but thats an option as well
the loop is stopping after 19 because 20 isnt &lt; 20 so you either need 21 or &lt;= for it to work.
Don't blame modules, blame the loader spec.
I know it will probably confuse you a little more but consider MobX too, really easy to set up (I mean, REALLY) and to use, when I looked at redux and then mobX, it wasn't hard to decide for me.
I think it keeps the means of accessing data consistent, regardless of whether it is dynamic or static.
You are using babel just for modules? I don't think it makes sense to transpile on server side.
There is not such thing as "Prototypal Inheritance" there is prototypal delegation and understanding the difference answer the question. https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch6.md
I agree with you, is there any reason to do this on server side? 
Chrome 49.0.2623.75: for(let i = 0; i &lt; 20; i++){ console.log(i); } VM100:2 0 VM100:2 1 VM100:2 2 VM100:2 3 VM100:2 4 VM100:2 5 VM100:2 6 VM100:2 7 VM100:2 8 VM100:2 9 VM100:2 10 VM100:2 11 VM100:2 12 VM100:2 13 VM100:2 14 VM100:2 15 VM100:2 16 VM100:2 17 VM100:2 18 VM100:2 19 undefined
This doesn't sound like something a reasonable dev could do for 5$ 
No Bower tried that and it's dumb. Just put it all in one highly available place. 
They are both pointers pointing to the same function. When you set foo to null, you are saying "foo no longer points at anything". b on the other hand still points to that function. You cannot delete the function explicitly. The best you can do is set b to null as well, in which case the function will have no remaining pointers and will eventually be garbage collected 
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/rcbredditbot] [foo=null; (X-post from \/r\/javascript)](https://np.reddit.com/r/RCBRedditBot/comments/5q3d9p/foonull_xpost_from_rjavascript/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
Author clearly has a lot of experience with angular, and not much with react. As a result his pro/cons do not accurately reflect real-world experience. 
If foo points to nothing, then what does b point to?
Hi. I think document online confuse for this. Instead normal run like `node index.js` run `node --debug index.js` (if use nodemon or other something they will have the match `--debug` flag). Now you get message: `Debugger listening on 127.0.0.1:5858` Good. In VSCode go the debug view. In dropdown select the "attach to process" and press setting button (right the dropdown). This open up a `launch.json` file save in you project dir (can ignore in git or share whatever man) . Don't worry this just change `port` at the bottom if the debugger not on `5858` (message above). It not work - you tell me. We can get work. I have no get it work when node app run inside the docker (port expose but vscode just cannot).
One the cool thing with this you can add the node project you work on repo into Chrome dev tools workspace and use Chrome dev tools as all IDE. [This how to do workspace](https://developers.google.com/web/tools/setup/setup-workflow). I think this new, many dev I know not know this before. Also many new non-famous useful new feature in chrome dev tool like the set debug breakpoint on many point in same line (for one-line higher order fat-arrow function for example). Have good youtube video many new feature but I cannot look now. Thanks you for read
well, actually at this point closures move in. in the metaphor, table is a closure. which means, you carry the table while doing someone else (next statements in the queue), and once you see the table ready, you put it down where you are and sit.
If only I were getting better at writing them.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/rcbredditbot] [Help with creating multiple sprites (X-post from \/r\/javascript)](https://np.reddit.com/r/RCBRedditBot/comments/5q3klj/help_with_creating_multiple_sprites_xpost_from/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
When did I ever say I was working with React?
Ok. 
Each has its own point. - King of immutability + scalability + declarative: redux - Best for: state management for huge apps, undo-ing things, bold(significant) and less frequent actions - King of mutability + atomicity + imperative: mobX - Best for: state management for each interactive components (like a vending machine), frequent actions with entangled inner structures I *love* both libraries. Both helped my ass many times.
Hi /u/php03, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
I would like to see this video once you have the time!
Finally they can be used to [parse html](http://stackoverflow.com/a/1732454)!
import() is stage 3, we could theoretically start loading modules any day now if they enable a harmony mode...
If your problem is the syntax rather than the semantics, I invite you to try [compose-regexp](https://github.com/pygy/compose-regexp.js). I use it mostly as a generator from CLI scripts, and paste the result in the real source code.
My understanding is that Bower pulled from Github, which is a single highly available place. Is this an improper understanding of how Bower works?
I am producing a distribution app [biddle](https://github.com/prettydiff/biddle/) and I think Keygen would be an awesome integration. License management is something completely missing from my application and I would like to fill that gap. I signed up for beta access.
Thanks very much man!
This is probably the only thing about ES6+ that I'll be using.
You can use things like the babel rewire plugin for mocking in tests, or use es6 modules, and until recently async/await with babel on the server. Babel has its place
Seriously ? What about arrow functions ? spread ? destructuring ? await ? *(and this is assuming you don't need ES6 for Promises thanks to Bluebird)*
Sorry, must have misread on the bus this morning. What did he end up giving you? Something made in vanilla js / jquery? 
Please don't come and work near me then!
/s
or she, asshole
You're right, es6 is overkill for your jQuery animations.
I agree that some features might make the code harder to read (for example abuses of destructuring assignements) but seriously, most of them really simplify your code. Arrow functions for example will let you stop storing the context in a variable just to make it available to callbacks. Speaking of callback, any complex application without promises (or async/await) is a callback hell or incredibly verbose. The spread operator will also only simplify the games you play with `arguments`.
Ya, can I show you? http://hypegfx.com/pos/ The t-shirt was supposed to be a popup for after they were finished simply asking if they wanted one. Huge waste of money here as you can see...
/su
I don't have any experience with `MutationObserver`, but is it possible that the game isn't adding a new node for each message, but is instead reusing a node? Alternatively, it may not be using the DOM at all. Maybe it's drawing everything to a `&lt;canvas&gt;`?
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/rcbredditbot] [Anyone here currently developing an app on Electron\/NW.js or Node? (X-post from \/r\/javascript)](https://np.reddit.com/r/RCBRedditBot/comments/5q4h4r/anyone_here_currently_developing_an_app_on/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/rcbredditbot] [Help writing a script (X-post from \/r\/javascript)](https://np.reddit.com/r/RCBRedditBot/comments/5q4h4s/help_writing_a_script_xpost_from_rjavascript/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
I've started using it. It looks like a really good UI lib.
What mutations do you obtain when adding a full tree to the document? something like &lt;div&gt; &lt;div&gt; &lt;span&gt; You've killed joefred44&lt;span&gt;
You hate callback hell, and I hate promise hell. It's not a big improvement, and many devs find ways to make promises overly complicated. Arrow functions are less readable to me. Spread is a fucking nightmare. Not using that shit, and I won't hire anyone who does..
You have no clue what I'm working on. Try machine vision in js, augmented reality, web audio synths, and plenty of other juicy projects. No es6 needed, and yes, the code is well documented and easy to maintain.
You won't hire devs that use modern syntax? I'm highly doubtful you hire anyone at all, but if you do, I'd love to see what this company does.
Yeah, no thanks Microsoft, go home.
I built a mobile app with it (Sencha Touch) a few years ago. It's been collecting dust and I haven't seen a v3 from them. Sounds like they gave up on it. Ext did a lot of things well but it feels like the market moved on to the next thing. Angular v1 taking off the way it didn't help Ext. I wouldn't use ST again because I enjoy working with ng more and it would be easier for someone else to pick up something written with ng opposed to the steep learning curve of Ext.
[2016]
&gt; most devs don't want or need ES6 I assure you this isn't true---but let's just imagine for a second that it was. That's like saying you don't need a car because a horse has been working well for you and horses are less complicated. Well okay I'll be getting on the highway now, have fun on the ranch!
&gt; most of them really simplify your code. Like *classes*?
Moving as in animation or changing of the visual location or moving as in relocation to a different point in the HTML?
So I didn't say I was working with React
It's true, and very clearly shows what competition in the node space can bring.
you don't have to click on every post. go find yourself a life
Previous position: C# (with VB.net and others prior to that). Now: CFM (I know, right!?) and Node (which probably doesn't quite count :) And I've always used PHP (well, PERL before that) on my personal/side projects.
What are you working on where huge files are common? I can't think of one modern JS framework where this is the case.
&gt; most devs don't want or need ES6 Well how would you know, since you only hire devs who don't? And given your attitude I'd be surprised if anyone who likes ES6 would actually want to socialise with you In my experience _everyone_ loves ES6, although there may be doubts about the bloat in transpiled code and a small minority may hold back using it until fully supported natively, and then, depending on needs, until native support for ES6 features is as fast as that for ES5. But it's just a matter of giving browsers manufacturers a chance to catch up rather than any objections to the language itself.
A bad programmer.
Now: JavaScript (front end, back end, and app), and a little Objective C Previously: JavaScript, ActionScript, PHP, Java, ColdFusion, C#, Python, tiny bit of C/C++ PHP isn't the best language, and is largely universally hated, but its easy and available almost anywhere. Its a good one to get your feet wet on the back end. This is my go to for simple server stuff. Other than that, Java would be a good one to go with. Its used all over the place and should be easy to pick up for doing almost anything - desktop apps, mobile apps, even back end stuff.
&gt; something called Ajax Ajax means **A**synchronous **J**avaScript **A**nd **X**ML. It's mostly to do with how you used an event-based flow for making XMLHttpRequests. FYI. https://developer.mozilla.org/en-US/docs/AJAX/Getting_Started
Have always been a JavaScript developer (so HTML and CSS comes with the territory). I use Java, C#, R, Python, Shell scripting for most of my tasks.
C#, Java and PHP are the ones that have come up the most for me. And SQL, if that counts as a programming language. If you just want to be marketable to potential employers, you'll want to be fluent in one of these pairs: - C# + MSSQL - Java + Oracle - PHP + MySQL - Javascript (Node.js) + PostgreSQL If you want to be a *desirable* candidate, you'll want to be able to use all of those at a moment's notice. (I define "desirable" as someone who can land jobs doing little or no job search)
There are many ways to do it, like appending to an element's `.innerHTML` property, or using DOM operations to build up this element tree (either as a simple off-DOM element with descendants, or as a `DocumentFragment`), and then add the top-level element in this tree to the `document` or merge the `DocumentFragment` in.
laughed out loud, +1
Even if you write them fluently they are mostly write-only past a certain point in complexity, especially if you use nested groups and captures. compose-regexp makes for the lack of Python-like multi-line regexes in JS.
Do you consider Redux easier to scale than MobX? If so, do you think it's an inherent property of their design? 
Because context isn't automatically bound to class methods. They still require the instance to call the function in order for context to be established (as the instance) instance.doSomething(); // &lt;- called from instance means `this` is instance When you pass doSomething into then as a callback, you're passing just the function reference of doSomething. When the promise calls then, it calls it as a lone function without an instance to tie it to .then(instance.doSomething) // &lt;- passes doSomething into then without instance // then (the promise) will call doSomething like: callback() // &lt;- no object for context In every other variation, you're calling doSomething from instance. To fix this, you can bind instance to doSomething so that context is passed along with the function and enforced when called .then(instance.doSomething.bind(instance)) // &lt;- force context to be instance when called
"Ideally things that need that level of branching should be their own component or some helper function which should NOT be declared in render" I think we hit levels of branching very quickly...even for simple components. The balance here is too many helpers/components vs too less. Both extreme seems to be bad. Template &amp; the jsx extension I mentioned helps to keep this in control.
I looked through the console and is says that observer failed to execute, because parameter 1 was not of type 'Node'. Does .getElementsByTagName return a list of nodes?
Is it the next best thing? 
Well, I hoped you we're because the alternative is sad.
If you are working with Babel, you can add the Public Class fields proposal (stage 2). Use this plugin: https://babeljs.io/docs/plugins/transform-class-properties/ With this you can do this: class Test { constructor() { this.x = 5; } callMe = () =&gt; alert(this.x) } const instance = new Test(); setTimeout(instance.callMe, 0);
Yeah that was a pretty extreme analogy, but I was trying to make a point that it's not so much about the additional features, it's the attitude towards newer technologies. The additions to ES6 weren't arbitrarily chosen.. maybe some things aren't as good as they should be (A+ promises for instance), but a lot of this stuff has been coming through the pipeline ever since coffeescript was getting popular (and it *was* getting popular). I seriously don't think I'm in an echo chamber though. I live in a big city with a huge development community, go to conferences, participate in a lot of online forums, slacks, etc.. I'd say there's overwhelming support for ES6 features. I also teach at a web dev bootcamp aside from my full time job and students with only a few months of coding experience can read and write ES6 just fine. The only devs I meet that have trouble with it are the old guard who are just too accustomed to seeing `function () {}` instead of `() =&gt; {}`. So to anyone feeling pressured into learning it.. try to keep your cool. We're not pushing dreams, these are truly useful additions to the language (for the very most part). No one is forcing anyone to upgrade, but if you want to work for modern companies that are attempting to keep up with the technology you'll likely have to suck it up and learn. FWIW I don't think you're trolling.. I just have a suspicion that within a few years you'll be like, "oh yeah I guess this is kind of useful". I've seen plenty of old coworkers come around---especially with things like React. Once you grok it you can't believe you've been missing it for so long. It's like learning about `map`, `filter` and `reduce` for the first time.
FWIW, the having your functions be named, rather than anonymous, makes debugging easier, since most debuggers will show you the function name in the calls stack.
&gt; How do you match that? Not with a regex, is what it sounds like.
https://regexcrossword.com/
Yet, you can, and the code I'm writing needs to be tight (it is part of a CSS in JS prefixer that can be part of the initial page load) so bringing in a third party library is not an option. The resulting regexp does the job correctly and compresses well because it is made of identical sub-patterns. What you can't match with a single regexp is unlimited nesting. These grammars are at least context-free you must bring a more advanced parser. For a definite amount of nesting Regexps are fine.
Brilliant stuff man. Would love to see a video of this.
Regarding the resulting literal, I agree, but you are looking at object code here. The JS source that generates it is on par with an embedded parser generator or a parser combinator lib, regarding readability.
Also, regular expressions are awesome. I still feel like a wizard whenever I write one.
http://www.jsfuck.com I'm not sure if it supports the full JavaScript spec. I am sure though you really shouldn't use this in production.
I'll be sending out the next batch of invites tonight. So as long as you've signed up, you should receive one.
Works great on Windows Mobile 10
Is it just my phone or is this absolutely terrible on mobile chrome? Half the screen is cut off and it's not mobile optimized...
basically, be the NSA without a backdoor!
dat ass https://api.monosnap.com/rpc/file/download?id=oagNKR3sxy1LziygvFJc9ifTueHaOY
[removed]
/u/jetpacmonkey has the answer for why the given example isn't working (you need to swap the argument order, or use the non-fp version). --- But, to answer the original question of the best way to use lodash in webpack: the standard way to use lodash is just do `import _ from "lodash";` and then do `_.find` or whatever other methods you're using. This is the simplest way, and in most cases this is probably what I'd recommend. (Certainly if you're talking about a NodeJS app, where build size isn't super important) However, you're pulling in the entire lodash library, and are probably not using the whole thing. That's the purpose of stuff like `import _find from "lodash/find"`. When you import a specific function, you're only pulling in the parts that you need. The downside is the hassle of managing all of those imports, but it'll cut your build size down. (If the ~70KB of lodash's full minified library is worth haggling over) [This article](http://knpw.rs/blog/using-lodash) has a pretty good overview of this, as well as a few other ways to use lodash that only uses what you need: tree-shaking and babel-plugin-lodash.
The trick is to always write regex's inside a Regex IDE (e.g. https://regex101.com/). This makes it far easier to understand what is happening and why a regex is failing.
I believe everything discussed in this article is still in the proposal phase.
Why would you use Bluebird over Promises? Which have been native forever.
FWIW The current hack for dotAll `/.../s` is `[^]` which matches everyting. Read it as *not nothing* this is a JavaScript only hack. Now we can just wait for the `x` flag to make spaces and other blanks interpreted as nothing, and making `#` a comment. Making a regex like this: /"((?:\\"|[^"\n])*?)"/ Be way more readable: / " ( # Capture 1 (?: \\" | [^"\n] ) *? # Escaped quote or anything ) # /Capture 1 " /x Edit: Align comments
I'm on the other side of your || statement there, currently falling into the MERN Mongo Express React Node stack. I really enjoy that JavaScript seems to be able to "do it all". From what I understand PHP and Java are good for handling server-side tasks but I don't know why really. This is what lead me to ask this initial question, ya know? I appreciate the direction starting first with focusing on JavaScript front and backend projects before moving on to one of the two other languages you mentioned. Hey I also learned what the LAMP stack is, thanks for the input I value it greatly.
I really like JavaScript since it works on both the front and back end as I've mentioned to a few other people who have been nice enough to reply to this post. Funny enough I first started learning Ruby and met someone at a party who told me to start learning JavaScript. When you say tasks are you describing tasks such as bundling code and linting? I sort of use Webpack as a task runner I think to bundle code into one big file, I also use SASS to compile CSS (something I know is written in Ruby) are we speaking the same language or am I a bit off?
Java Java Java with a little side of Java then? I'll put your advice into the "Java" category then.
Thanks for the advice, I'm glad to see that you're using JavaScript in the past and present. C# is a language I don't know much about and it seems like lots of people are suggesting Java, which I was leaning toward before I even wrote this post. I mentioned earlier to someone else that I actually started learning Ruby before I ever touched JavaScript. What is the state of Ruby as of today? Someone in my bootcamp cohort mentioned that Ruby was dying. I'm interested to hear what someone who actually uses the language thinks.
Mongo was "hot" for a while in Node.js circles, but not so much anymore after its warts started to become apparent. The only thing it really has going for it is that its API is less intimidating than SQL for Node.js beginners (assuming you're using mongoose), but it sucks pretty hard for data integrity (which is kinda the whole point of databases) and just about anything that is slightly more complex than basic CRUD apps. I mean, just look up the docs for auto-incrementing fields, it's a horrible mess. For databases, you *really* should learn SQL. It's what most companies use, and for very very good reason.
Yeah, it sounds like Java is a good place for you to head. But be warned. There's a _lot_ of "Java" out there. Go too deep, get too involved, and suddenly you might find yourself pigeonholed into a "Java Developer" and not have a place anywhere else. Then you end up getting stuck maintaining some massive, legacy system which is too big and too old to properly update, dreading your days at work and lamenting your nights at home where you constantly rewatch "Office Space" thinking to yourself, "its funny, because its true!"
You could look at the [documentation](https://code.visualstudio.com/Docs/editor/debugging).
I'm loving destructuring. It adds some very flexible capabilities to the language; with less code. You can't ask for more.
https://github.com/dNetGuru/JSUNFuck
in case anyone's wondering, Round 5 is much more representative of relative performance than Rounds 1-4 since keyed and unkeyed implementations have been split up [1], addressing [2]...see prior discussion [3]. BTW, if anyone knows how to get CPU throttling and network throttling working via chromedriver, please help [4]. This way we can get a good benchmark for lib sizes vs boot-time overhead as well as mobile performance. [1] http://www.stefankrause.net/wp/?p=342 [2] https://medium.com/@localvoid/how-to-win-in-web-framework-benchmarks-8bc31af76ce7#.b6vsn9w8e [3] https://www.reddit.com/r/javascript/comments/5ddwqq/how_to_win_in_web_framework_benchmarks/ [4] https://github.com/krausest/js-framework-benchmark/issues/115
Amazing!
It doesn't look fully responsive, so I'd have to hold off on this and start with something like Quasar.
Starred. 
Same thing for me. Maybe they forgot to cross browser test?
Yeah, I know that. My understanding, though, is that you put the year if it's more than 3 months, otherwise you would put (2016) for an article from 31st last year posted on 1st January xD. We should have some reasonable guidelines for that.
Related discussions: https://www.reddit.com/r/webdev/duplicates/5cbf19/debugging_the_web_learn_the_art_of_debugging/ Ping /r/iRuisu
It does indeed return a `NodeList`, and what you should do instead is put the observer on the body; you might want to have your UserScript run at `document-end` instead, so that `document.body` will exist.
IMO, speed that is negligible in common real-world websites.
I already say this above. Can read instruction of me and tell me if have problem. I will fix for you
i was asking where you learned, but thanks! I'll read it over.
To me, Node totally counts. I have a lot of fun using NodeJS. I don't know what CFM is, though. PHP doesn't seem as popular as Java, I wonder why that is- what is it that appeals to you when working on your own projects? It has to be useful whenever someone sends me a link from facebook on mobile and I open it in my iPhone's browser I see something like *facebook.php?something=more+something* you get the picture.
Quick glance at the source for vanilla appears that the events for the row actions are delegated, but the ones for the frameworks are not. I only checked out the react source, but it didn't employ event delegation as well. In this particular case (which is fastest?) it doesn't seem like an apples to apples comparison. Is there a particular reason for this strategy? More ops always will be slower than less ops. For the react code the "command" buttons were also re-rendered for every state change, adding to the number of events that need to be added every render. I love speed tests and will be pouring through these in the future. Good job. 
I'm sure those are fine. But you really don't know until you try. Everyone learns differently and sometimes some curriculums are too slow or too advanced and you might need to jump to something else. It sounds like you've had good success with TTH in the past. Don't worry too much about the pigeonhole thing just yet ;) That's more about when you start taking jobs that are purely based in Java. That's when your career path might start going in that direction. But at the same time, maybe that's what you'll find passion in. If so, go for it!
Now that's what I really like. Nice clean and easy. Thanks 
This is just dope. 
Certainly, I'll give it a spin starting next week and see where it takes me. I appreciate all your feedback!
PHP - Ease of server config and years of me using it. It was what all the cool kids used after PERL and before Ruby, so it's somewhat gone out of vogue I guess. Other than Facebook I don't think many heavy hitters use PHP at scale, but Wordpress is (or was) PHP based.
**Here's a sneak peek of /r/homeautomation using the [top posts](https://np.reddit.com/r/homeautomation/top/?sort=top&amp;t=all) of the year!** \#1: [Amazon Echo and Echo Dot update adds ‚ÄúComputer‚Äù wake word to help complete the Star Trek fantasy](http://www.aftvnews.com/amazon-echo-and-echo-dot-update-adds-computer-wake-word-to-help-complete-the-star-trek-fantasy/) | [101 comments](https://np.reddit.com/r/homeautomation/comments/5o407g/amazon_echo_and_echo_dot_update_adds_computer/) \#2: [My house was broken into yesterday, my cameras caught a lot of action and I made a movie (repost from r/videos)](https://youtu.be/5_YUw7KxrZk) | [67 comments](https://np.reddit.com/r/homeautomation/comments/5hbnuw/my_house_was_broken_into_yesterday_my_cameras/) \#3: [Nest failed, house froze to -20, then Nest emailed me celebrating staying safe and cozy.](https://np.reddit.com/r/homeautomation/comments/5njyc6/nest_failed_house_froze_to_20_then_nest_emailed/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/5lveo6/blacklist/)
I think react uses DOM event delegation: http://www.pyco.me/events-in-react/ I once attached the listener to a parent element to see the effect here: https://cdn.rawgit.com/krausest/js-framework-benchmark/fc5957d31fdd1a75308f7072acc4b444a5b3a7f0/webdriver-ts/table.html It had an effect but not like night and day, but it would be quite uncommon to so in react. Otherwise I could delegate to the vanillajs impl in componentDidMount to get very fast results :-)
Thanks, will try that! I appreciate you taking the time to help!
*Client-side*, the server-side template rendering is coming from something similar to Rails/ERB or Flask/Jinja.
How does the RPI3 handle Node? I have the RPI 1 model B and had to leave it installing node overnight lol, btw, awesome job man
Side-effects may include data leakage, breach of intellectual property, loss of bowel control, and nausea.
SQL is a standard. SQL is its own language, but you can interact with SQL databases in various languages such as Java, C++, Python, PHP, and apparently NodeJS. Basically SQL works by creating a table of data, where each row is a new piece of data (e.g. a student in a table of students). Each column represents some data in that entry (e.g. a student's GPA in a table of students). There's more to it than that, but that's a quick overview. There are a bunch of different implementations that extend/implement it differently. At a basic level, once you learn one, you can easily transfer that knowledge. The two database implementations I would look into are PostgreSQL and MySQL. IDK what the best tutorials are for them, but for setting them up check the following documentation from their respective sites: https://www.postgresql.org/docs/9.6/static/tutorial.html https://dev.mysql.com/doc/refman/5.7/en/installing.html I am sure if you look up PostgreSQL nodejs tutorial or MySQL nodejs tutorial, you will find something useful.
They're transistors to allow for PWM control of the LEDs by the pi, so that the pi can control the colour and intensity of the LED. A similar thing occurs for the IR emitter and temp sensor. The pi GPIO is 3.3V, which isn't enough to power the LED strips, so the transistor takes the 12V power and applies the PWM from the pi to it.
It was, you missed the window.
Damn do your research if you write a blog. ES6 is ES2015, not ES2016...
The 3 handles it well, installation did not take more than 10 minutes, although apt-get upgrade took 2 hours. The bottleneck is the SD card, If you have an external drive, I guess it's gonna be much faster
I might be hated for this, but I've used Knockout.js successfully in a .NET application for frontend needs
Yes, of course I saw it. But it's 9 months old article. Many things changed/added
No I'm an atheist actually and one doesn't have to be a Muslim to recognise Israel as a racist apartheid state.
try to implement it in css instead : http://www.w3schools.com/css/tryit.asp?filename=trycss3_transition1 Add a class to body on document readyState with javascript that would trigger that animation
You could replace the src for the jade compilation to a direct file selection like, and keep a src for the watcher task var srcJadeWatch = './templates/**/*.jade'; var srcJade = './templates/index.jade'; 
Great to see the difference that Ember's new rendering engine has made.
Why bother what they say?
what you usually do with trolls: do not feed them
I have used PHP for many years and it's definitely not going any where any time soon. It's mainly backend web developers first port of call due to it's ease of getting started and how it was never strict (much like JS back in the day) unlike Java, C#, C++ etc. Wordpress has always used PHP and still does, Facebook has always been built on PHP as the serving backend, but their frontend uses JS (FB built React). Facebook also built HHVM and Hack, Hack is pretty much a fork of PHP, but with extra functionality and HHVM is a compiler for Hack and PHP. As for checking programming trends, I recommend you check out https://trends.builtwith.com/ which shows what is on the up and what isn't. (Side note: JS and PHP are much more robust nowadays, PHP7 has come a long way just like the latest JS versions have).
I'm only writing JS for my current client, but I use C# for a lot of my backend stuff.
the [DOM](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model)
It should be noted that *try/catch* breaks JIT compilation.
WAT NOT COOL DOOD
You show them a superior application written in JavaScript compared to anything that could be written in their own language. I extended my JavaScript parser (written in JavaScript) to also support TypeScript, Java, and C# this past summer and made the claim that it performs substantially faster than any equivalent technology written in these languages and is many fewer lines of code than anything half as fast written in those languages. Then they simply stop talking to me. *edit - grammar fix.*
[removed]
when destructuring a object how to get rest of the the properties?? like in arrays.
"You're"! I thought you were doing your research now!? :P
love the class name!
While I agree that it's not particularly "hard" to do, it's still a nicely done DIY project. Source: did something like this in my home. It's also able to log into my router to setup a guest WLAN on demand. :)
PHP is often the shortest route between having an idea and having it up and running. Often much less dev environment setup and server config to get your project live. See this article on why Slack chose a PHP stack https://slack.engineering/taking-php-seriously-cf7a60065329#.krrblsahw
neat. but World's fastest? Don't sell yourself short, sir; it's the fastest in the Universe.
I commend you on your positive reception of the gammar-nazi criticism!
Hey dumbass. The guy said what he did is nothing new and they were doing it in 1997. You asked for proof and he gave it to you. You are going off on your own topic. Stay focused!
Show them your users &amp; money.
Hi /u/ahnerd, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `techiediaries.com`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [techiediaries.com](/search?q=%28and+site%3A%27techiediaries.com%27+author%3A%27ahnerd%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|12|71%
You've just described every Java endpoint I've ever worked with haha.
Correct them and say, "I think you meant to say JavaScript is an awful language" ;) Don't feed the trolls. 
(In the "Flow" section) &gt; However, editor support was essentially non-existent. You couldn‚Äôt, for example, view errors inline within an editor like Intellij IDEA or Emacs. Just for the record, WebStorm now supports Flow and you get the errors in the IDE. For comparison, Elm vs. Flow vs. TypeScript: http://djcordhose.github.io/flow-vs-typescript/elm-flow-typescript.html After trying Flow and TypeScript I found quite a few cases where Flow was more strict, more than that presentation shows. Overall, regardless of which type tool one chooses, one has to adopt some coding style occasionally - or choose *lesser types*. For example, when I build an object in a `reduce` loop I can't make the variable that ultimately gets the result the strict type of that object, because in the inner `reduce` callback function it won't have all the properties. Quite a few other little "gotchas" where I had to "dumb down" code for the type system. I also find myself writing new tickets (both TypeScript and Flow) a lot - I already spend a considerable time writing (good, reproducible with test case) tickets for my IDE. I spend way too much time with and on the tools, the Javascript ecosystem sure does have disadvantages, but hey, the result runs everywhere so not much choice. But there still are soooo many little annoying bugs and integration problems (between tools)...
He's got a point and it's a fun and well written article. My favorite quote was "Now every language is cocaine!" Summary: author believes WebAssembly with such enormous flexibility will replace most JavaScript front end jobs by 2022.
I would really recommend finishing up your book, Eloquent Javascript, it's a really good read. ES5's features are not phasing out, you'll just get easier shorthands in ES6, so it's very useful to know the basics before you want to go ahead and use syntactic shorthands. As for the platform, I don't think there's a silver bullet to solving your problem of understanding instantly. I'd recommend reading up on the meaning, purpose and scope of different components of the stack on wikipedia, or rangom google searches: Front-end: Modern front-end development, MVC libraries like: React, Angular, Vue.js, or even jQuery Back-end: Servers in general, Node.js, Express.js, swagger Data layer: Data bases, SQL, MongoDB Of course, you can go and try to swallow the thing whole, but I don't think it'll be enjoyable, easy to understand, or helpful. I can recomment studying the [MEAN stack](https://en.wikipedia.org/wiki/MEAN_(software_bundle)) (MongoDB &lt;-&gt; ExpressJS &lt;-&gt; AngularJS &amp; Node.js) 
This gives zero guarantees that an ES6 feature is fully implemented. It only tells you the features are implemented in their most basic form. Take the destructuring assignment for instance, there is a lot more to it than just unpacking an array, see Kangax compat table: https://kangax.github.io/compat-table/es6/#test-destructuring,_assignment. 
Correct, but with more and more browsers supporting the full spec vs. other browsers not doing so at all, this is a ok litmus test for a good portion of the features you'd normally use and thus, is capable of loading your ES6 bundle for.
so why is it called Israeli-queue? I don't get it
Number of packages does not mean anything. Too many options, IMO, is also not a problem that needs solving. The community will decide which ones are good or not, and NPM and other package managers will intelligently rank results when searching for whatever thing you need. To ask the authors of open source projects to monitor the web for competing projects is asking a lot out of people who already do a ton of free work. I agree with the sentiment, though. Do your research first. You might not need another dep.
can they still be inside zip files? If not fml
You can still share them over Google Drive.
Can't do this with just CSS currently, all examples you have seen will have been using Javascript to reposition the elements.
lamp + jquery
If you let such little things get to you then you're going to have a rough time. Every language is derided by at least some group of people and the reasoning is almost always due to ignorance.
Yes, finish your book and then take a look at ES6 (especially promises!) I'd rather recommend PERN (Postgres, Express, React, Node) over MEAN. But stack is of course up to you. Good luck!
[removed]
Referring directly to the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment): let [a, b, ...c] = [10, 20, 30, 40, 50]; console.log({a, b, c}); // { a: 10, b: 20, c: [ 30, 40, 50 ] } Applying that to function parameters: function foo([a, b, ...c]) { console.log({a, b, c}); } foo([10, 20, 30, 40, 50]); // { a: 10, b: 20, c: [ 30, 40, 50 ] }
No, personally I use it in conjunction with babel, as ES6 modules haven't really landed in browsers yet. Produce two files, one with all of these features polyfilled for ES5 browsers, and one with very little polyfilled for ES6 compatible browsers
alternatively: window.onload or document.onload -__-
Pot calling the kettle black much?
How did I make this about me? You're the one who turned a post about someone else's project into a completely unsubstaniated claim about how great you think you are.
Except he didn't and they (apparently) weren't and I am not. Go take a nap.
What was your startup doing?
In Chrome you can set a breakpoint on DOM changes. See: [https://developers.google.com/web/tools/chrome-devtools/javascript/add-breakpoints#dom](https://developers.google.com/web/tools/chrome-devtools/javascript/add-breakpoints#dom) Following the example in the link above, set a breakpoint on the parent element that is filling up with anchor tags and you should be able to track down the code that is adding them. Depending on whether they are being added with a library like jQuery, you may need to inspect the Call Stack to find the actual site-specific code which is calling jQuery. To get a better view of minified libraries, Chrome also has a "Pretty Print" feature that will reformat the source to make it more readable. You can find it at the bottom of the Sources screen and looks like a pair of bold parentheses **{ }**.
Oof. That sounds like not fun 
Version control over e-mail
First determine your path. Do you want to do creative artistic stuff or engineering automation stuff? It sounds like you want to move towards the first one. I recommend gaining a mastery of usability and accessibility. I would also focus on really learning CSS well. You need to have an understanding of how CSS works and where its performance bottlenecks are if you really want to do amazing visual things. Learn SVG and get comfortable with vector art too. You will also need to learn things unrelated to technology like advanced communication skills. Learning to take really complex ideas and explain them in really simple ways with pretty pictures is an important skill not related to writing code. Once you get comfortable with communications and visual technologies you will eventually have to master an understanding of the DOM if you want to engineer awesome animation skills. Keep in mind that animation is the same to the browser whether it comes from CSS or JS (its still in the DOM). The only real exception is in writing animations in HTML Canvas. If animation mastery is not your thing there are really good animation libraries out there like greenSock that still allow building really powerful and creative things.
we would prank email 3rd parties a random js file for a fee. kind of like those prank sites that send people glitter. 
Stop doing courses. Try to build the things you want to build. If you get stuck, learn only what you need to get unstuck. And just keep reading and experimenting with stuff only tangentially related to your goals.
So I was right. You're a dumbass.
This is very helpful thanks. I was put off by that 'no point' comment :/ I am just learning functional programming and I think I need to do more reading on it to clarify some of these things.
It doesn't break compilation, it breaks some optimizations and even this varies by browser. 
I had no knowledge of React about a month ago. So I gave myself the challenge to learn, design, develop and deploy a React App (http://citii.io) as as fast as possible. Would love to hear opinions from you all!
&gt; shamelessly copied from Netflix So, do we have a license for this?
Where did you get the data from? Curious to how accurate this is as it suggests that I'd have to make double what I make in Dallas to live in San Fran and that seems a little high compared to my previous research
They are right on StackOverflow. The classical observer pattern makes no sense since Javascript has the concept of first class functions which allows you to register "callbacks" to something. Basically giving the "Subject" in the observer pattern a function it should call instead of a whole class. In this example the EventEmitter takes the role of the Subject: class EventEmitter { constructor() { this._subscribers = [] this._token = 0 } emit(event, data) { this._subscribers.forEach(s =&gt; s.handler(data)) } on(event, handler) { const token = ++this._token this._subscribers = [...this._subscribers, { handler, token }] return token } off(token) { this._subscribers = this._subscribers.filter(s =&gt; s.token !== token) } } const eventEmitter = new EventEmitter() const token = eventEmitter.on('hello', message =&gt; { console.log(message) }) eventEmitter.emit('hello', 'Hello') eventEmitter.emit('hello', 'world!') eventEmitter.off(token) What also makes the classical observer pattern make less sense in javascript is the lack of types and interfaces. You cannot guarantee that a class has an expected method.
The shamelessly copied was a bit tongue-in-cheek, but it can get rewritten and licensed if you're concerned about Netflix being angry/lawsuit-y. I mean, having never seen this code anywhere on the internet with a license attached to it, and the feature detection being relatively straight-forward, it could probably have an MIT license smacked onto it without much fuzz.
Perfection. That worked brilliantly.
I don't think so. I noticed the other day that an encrypted zip with a js file in it was moved to spam.
awesome.. I guess the question now is whether typescript would decide to compile like this instead of the way it currently does.. fingers crossed I suppose :)
Re: the comment, why did you want the "most ... verbose" way of doing it?
Or write out the password in reverse or in two parts with a space and instruct the client to just follow 1 or 2 simple steps.
I mean, that's OK, as far as I'm concerned. The code seems trivial enough. I just found it curious the way you presented it.
yes I see that now, I had thought that `foo.bar` would reference the method of the instance foo along with its context and to do what it actually does you would use a static method like `Foo.bar` but clearly that's not the case typescript obfuscates the issue a bit (at least it did for me) because you declare methods without the `function` keyword, and also you can declare static methods
meh it's fine, I have source control myself for the project and just bundle a release to sesd through mail and they'll handle it
All the 2017 cost of living indices were obtained from www.numbeo.com (which is supposedly the largest database for user contributed data on cities/countries). You do make an interesting point however since I do notice a few discrepancies that raised my eyebrows as well lol. 
I think this guy is right. I'm new too and i've done couple small projects trying to learn javascript and i feel that the best way to learn is to start a project and whenever u dont know just try to search about it on google and try to understand it
I'd think that all of those would be *more* verbose than what you went with, so I don't understand why your comment says that the code is the most verbose.
I think the issue that /u/kindall raises, is that you may not be using "verbose" according to [its definition](https://en.wiktionary.org/wiki/verbose) - it looks like you may be meaning something closer to the opposite (like "concise" or "simple" or "efficient"). tl;dr: I do not think it means what you think it means.
Usually it is the effect of using [Masonry](http://masonry.desandro.com/). I believe this is what you're looking for
EDIT: It looks like I'm a moron and have for the entirety of my life believed that verbose meant quite the opposite of what it does. Oh well.. Hm, I guess it depends on what the end goal is. In terms of readability of the actual feature detect, I agree, it's nowhere near capable of being categorised as verbose, but in terms of the simplicity of the approach, it was the clearest to implement.
I second this fully. Courses help you grasp the core and help you crawl through the first bits but make a to do list that is fully front end managed or make an interactive calendar. Create a modal window that allows dragging and resizing. Start having fun with it and when your stuck, then your learning for real :-)
https://clojars.org/cljsjs/jquery (js/$ #(js/console.log "am I doing this right?"))
Oh wow, I've been using that word wrong my entire life it seems. Thanks for the enlightenment. Edits galore, I guess.
For multi-line code blocks there should be an empty new line at the top and the each line after should be indented 4 spaces. let user = prompt("What's your name?"); let favFood = prompt("What's your favourite food?"); const myFavFood = "chips"; if (favFood === myFavFood) { let foodPerson = user.concat(favFood); console.log(foodPerson); } else { console.log("User does not match"); }
This is pretty cool, but I cant get the artsy QR codes to scan using [Barcode Scanner](https://play.google.com/store/apps/details?id=com.google.zxing.client.android) on my Android phone. I tried the QR code on the cat, and the one [here](https://kciter.github.io/qart.js/).
I find that it is easier to not convert from exchanging formats between languages but to the credit of the people posting recommendations the OP asked about full stack JavaScript which MySQL is not. So to the question is one better than the others that's super subjective the the application your using it in and how you need your data stored based on how is needs to be secured and retrieved. And like.... Other stuff... :)
That sounds like its a violation of DMCA laws for circumventing systems of encryption.
React is hardly Beefy, it's 43KB vs Jquery's 33Kb. React also was *not* built for a SPA, it was built to handle single components.
Google should crack down on this as well. Every time I search for something it returns millions of results - how is anyone supposed to vet everything!? /s
[removed]
Only if I keep arguing with you. I'm tellino your nurse to revoke your internet priveleges.
I think [this](https://www.udemy.com/understand-javascript/) is a good start for you , if you don't mind 11 hour as a big time . 
https://planttheidea.github.io/moize/#benchmarks__anchor
&gt; Quasar What the hell is that and wow !
well if vue keeps getting theses really nice framework maybe... i can handle its api. Wonder where bootstrap is going or material design lite alike
Nice work! This is very interesting for certain use cases, but be sure to read the comments on the article before relying on it as a general solution, as there are cases where it will fail.
I present the [Quasar Framework](http://quasar-framework.org/).
can't really tell if this is real or not
I thought that was the whole point 
What's the point? Random in what sense?
If you're worrying about how the JIT optimizes a cheap function that only gets called once, you are not doing performance correctly.
This is cool, but overall, I think it would be a lot better if the tests were individualized. In particular, bundling unicode identifier detection with everything else makes this strictly less useful than simply omitting it. Or are people really using that feature, and if so, why?
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/reactjs] [A small package to make react-redux's mapStateToProps nicer to write ‚Ä¢ \/r\/javascript](https://np.reddit.com/r/reactjs/comments/5qd0gq/a_small_package_to_make_reactreduxs/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
i was way too confused by this until i realized i had the js blocked on my browser
My office uses gmail on a custom domain and it doesn't let you send encrypted archives. I found out a way around it though, by changing the extension to jpg before sending.
I'm entirely at fault then. As said, title was a bit tongue-in-cheek, but if people are getting the wrong impression, that's not so good.
I mean Google's clearly hinting at you to start using `.es6`.
I tend to use factory functions and define my objects about what they do instead of what they are. That approach allows you to compose objects together into another object for instance. So, in your case I think maybe I would've created a Game object that'd be composed with objects like perhaps a "Renderer" (that'd provide a public render method to render the game). There is a good video that's explaining the concept of it: https://www.youtube.com/watch?v=wfMtDGfHWpA. Happy coding :)
So, government consulting?
Speaking of which, your test only passes in strict mode in ES2016 engines. Use `new Function('"use strict"\n' + snippet')()` to make sure that is the case.
eval will do the job. var fn = "x*x+2"; var x = 2; // iterate over a range var y = eval(fn); // y will be 6 plot y proof of concept: https://jsfiddle.net/pu0jb9nb/
FreeCodeCamp
Thanks man!
You're getting 'Missing initializer in const declaration' because you're using const wrong. const variables can only be defined once and thus trying to define it with no value. But it seems from your second edit that you've fixed that. Now, for your next issue. You're calling your makeList function immediately instead of passing it as a parameter. If you instead do the following: button.addEventListener('click', makeList.bind(this, questions)); You'll be good. But read up on what bind does, or it will be an ugly crutch that you might not want to lean on.
Cool. Next up maybe do some reading on keyboard accessibility. You should make sure to give all actionable buttons a tabindex and capture enter keypress to advance to next page (or let a &lt;form&gt; element do that for you). Would be nice to have a quick "choose another city to compare to" without needing to go all the way back through the choices. There seems to be a bug when using the keyboard and pressing "down" repeatedly in the list. Once you reach the bottom, it reveals the next item (as expected) but then selects the top item on the list. Also seems to be a discrepancy between the city names in the list, and the data in the field you use for autocomplete. I.e. if you type in "Canada" you see "Quebec City" and "Edmonton" even though their display names in the list don't include Canada like the rest of the Canadian cities.
This is great! I'm trying to learn react too, so I think looking over your code on github is really going to help make things clearer to me. One thought though, maybe you could have a step to pick country before you pick the city? It's a little tedious to scroll through hundreds of cities to get to the ones you want.
Yeah, it could be a good idea to learn Java and SQL. Although in my experience, interacting with SQL in various languages is pretty similar so you could probably translate knowledge from NodeJS to Java.
I'm not sure about games, but writing web and mobile apps now the trend is functional programming and it's really neat. You want each block of code to have as few side effects as possible and do as specific a job as possible. As /u/Magellol says, you can then compose your objects out of these smaller objects, which will definitely save you some headaches further down the line. Classical inheritance can cause major problems down the line and will make your code very brittle, so even though it's new and shiny in ES6 I would only use it when really necessary. Imagine further down the line you have chains of extended classes, you make one seemingly small change to a base class, or any class really, and you can cause a whole host of unintended changes. Proper patterns can only account for this so well and you will be fighting an uphill battle. If you keep your functions pure and free of side effects you have the massive benefit of predictable behaviour from your app. Behaviour will only get harder and harder to predict and holding an entire app in your head, let alone a game, is pretty tough even for the smartest guys out there. A pure function is more like a function in the mathematical sense, in that if a function is totally pure it will always give the same output if you give it the same input and has *no side effects*. A pure functions knows nothing other than what it has been given, so it cannot access instance variables etc. f(x) = x^2 . Here, f of x is x^2 and nothing else. You can even map every possible input to a given output. Your functions will of course be a bit more complex, but the idea is still the same and incredibly simple and if you can keep to functions in the mathematical sense (aka keep them pure) then you'll save yourself a lot of headaches down the line! Obviously you will have a hard time making every function pure, so it's more of a goal to strive for. I'm certainly no game developer, I'll leave that to the smart guys, but a quick Google tells me FP can definitely work for making games. Good luck!
Honestly if you want to learn programming principles I'd say get away from JS for a bit. I came into JS after uni and found a background working with strictly typed OO languages to be incredibly helpful in understanding a lot of the lower level programming concepts that really underpin everything we do (even if FP is all the rage right now). I may come off as a massive hipster here but I would recommend staying the hell away from jQuery, doubly so if you're just starting out. JS is already a highly abstracted language and jQuery takes that to the extreme (not to mention adding bloat)! Any compatibility benefits jQuery offers are quickly becoming a thing of the past now that we have tools like Babel and people are moving away from older browsers. As a tip, never learn a framework or library before the language itself. I made that mistake with CakePHP and it ruined PHP for me, forever. Anecdotal but I have a friend who is a self-taught front end developer, he's kind of ruined JS for himself by learning jQuery over everything and now basically uses that as a crutch without even realising just how simple the vanilla JS solution would be. Look at jQuery's `on` method: var myElement = $('.myClass') myElement.on('click', function(){ ... }) vs the vanilla method for adding an event listener: var myElement = document.getElementsByClassName('myClass')[0] myElement.addEventListener('click', function(){ ... }) and it's easy to see the difference is often just a matter of keystrokes. 
Why not just use destructuring? const mapStateToProps = state =&gt; { const { objectField1, objectField2, ... } = state; return { objectField1, objectField2, ... }; };
Can't you just send it as a txt file? After the first couple of times you do it they'll get the hang of changing the file extension.
You don't control how the click handler is called. The implementation of events does that - as is the case with all callbacks. They're called from some other source _back_ into your code. Event callbacks are always called with an event object, so that's what's getting passed in. You can't change that. But, because you've defined the click handler function in the scope with your variables, that function inherently gets access to them as a closure. So if you want to access questions, reference it directly. button.addEventListener('click', (event) =&gt; { // now use questions here ... You seem concerned about having the handler reference variables outside of itself, but that's generally not a concern for handlers. Event handlers normally have to be able to reach out into some other scope or context because as callbacks they're not under your control. Arrow functions help maintain context (value of `this`), but that doesn't seem to be applicable to your code, so its just a matter of referencing existing variables in the outer scope.
Not only the extension. If you change the extension on an unencrypted archive it will flag it as an archive and deny the send. Not sure why it can't see that the encrypted archives aren't really jpgs since I assume that all jpgs have headers indicating as such. Perhaps to minimize false positives. 
Maybe jsx.
This comment gave me severe anxiety. 
Got a question for ya - I signed up, clicked the token, and it basically took me to the docs. Do you have or plan to have a web portal to manage things from there as well? 
back when hotmail wouldn't attach .zip files (because they were scared) i'd just rename to .jpg extension and tell recipient to rename back to .zip .. attached fine 
You do know that being able to do that is a vector used by cryptolocker malware, right?
jesus I remember doing that
Second point is really interesting. Do you know if this is mentioned in any official literature anywhere, off the top of your head? 
Uses W2UI toolbar, button, and grid. Also uses wkhtmltopdf, mysql and php
Not that I think Netflix would care about this little bit of code, but at best unlicensed code falls under copyrighted with 'All Right ls Reserved'. Copy &amp; Pasting it with a MIT license means nothing. But you are giving the copyright owner credit, so props there. IANAL, but [this answer seems right](http://softwareengineering.stackexchange.com/a/276147) 
Unless I'm missing something it seems you can only pick one city to compare to and need to start over for another. Would be nicer if you could simply change the selection. Otherwise, nicely done.
Why would you be sending JavaScript over email? Git anyone? 
1. Could be serverside, which occasionally needs to be very performant 2. Bluebird promises also have other features (like `spread`, for example) 3. Does it matter? If it's a babel plugin, it's 0 effort to use them instead of native promises.
Thanks so much man! Yup this code would definitely be of use since I pretty much stuck to the React basics so you'll be able to pick things up. I was thinking of incorporating country then city so I'll keep that in mind. I do hope you know you can also type the city you belong to (instead of scrolling). Maybe I should make that more clear to the user.
Yeah I've sort of set it up in such a way that the user picks from a list twice. I'll definitely look into a faster way of just picking two cities right off the bat. Thanks so much for the feedback :).
 I remember them saying it in one of the conference presentations last year. At the time... Facebook didn't really have any forward facing React SPA's, but React was used all over the newsfeed for writing comments, and displaying certain custom sections. I think the first SPA they built with it was for advertiser accounts. Lot's of people don't use React for SPAs.... Wallmart uses it on the checkout, and intermitently on promo pages. NatGeo uses it for sections of articles that need enhancement--like videos, or special displays. Netflix though does everything in React---mobile, desktop, and TV. They're the ones to look for if you want to see an SPA implementation. 
Yo you realize you can just rename the extension of a .zip and email it right? Like just make it a .asdf file, send it, they open it, rename it to .zip and boom it's there
They can be executed by Windows. EDIT: *they
Or just `"use strict";`, no need for a newline.
In my view, any addition or language that isn't a superset is worthless to me. SCSS vs Stylus, TS vs CS, etc. This is because when the language moves too far away from JS, it becomes very difficult to use existing APIs, existing code examples, etc in your codebase.
This works, but only in specific circumstances. Be aware of the limitations of the library before using it. 
Yes, it's planned, but right now my priorities are getting the API locked and releasing client libraries for the most popular languages. At the moment, everything that would be done via the admin dashboard needs to be done through the API. The admin dashboard will likely not be ready until closer to launch. Is a web interface something that is important to you?
No problem, just checking. I'm just one data point so don't worry too much about me! What I would ideally like to do, though, is create some manual tokens for testing through the web (and denote them as such). I'd also like to create a token that lasts forever as well, just to give to a user. I'm still super interested in your service, but I might have to hold off for the time being.
&gt; Whoa, since when is a try/catch block more fragile? It is slow. Developers generally know it is slow and deliberately use it anyways. This typically occurs because the developer is not creative enough to write an appropriate condition or because they are doing risky things without appropriate safeguards. Either way its stupid. I am of the opinion that more fragile people tend to write more fragile software. You don't need *try/catch* bottleneck to write software that is durable. I would argue that you are anticipating failure and used a convenience convention instead of addressing a know failure more directly with a resolution (opposed to a fallback). &gt; I'd also rather have them write good java script vs target minor implementation details that may may not still be valid 5 years from now. It will still be valid 5 years from now, and paying attention to minor implementation details make for more precise code. If details, code quality, and performance aren't important to you then you likely define *good software* far differently than I do. Also, this language isn't related to Java where try/catch blocks aren't performance bottlenecks.
Or a mail system of a company who controls their email. If it is a ISP doing it for Joe Soap, that is another story.
Look into an entity framework. It's a similar system to what Unreal and Unity uses. Everything in the game is an entity. An entity has one or more components associated with it. You will have PhysicsComponents, ImageComponent, ScoreComponent etc. Then you create several Systems to modify these Components. There was a write up a while back on how to build this framework on Android. I'll find the article. Edit: [here is the android tutorial](http://t-machine.org/index.php/2010/05/09/entity-system-1-javaandroid/) god damn, 2010?!?! I'm old haha. 
But doesn't everyone sell their soul to Google??87!?
Not sure, but it's more like a ts replacement. So you can keep on writing JS with types, without all the ts baggage.
I just added a video of it! https://youtu.be/wh0OoLUTeM8
&gt;[**Home automation - Raspberry Pi 3, NodeJS &amp; React Native | Deepsyx [1:32]**](http://youtu.be/wh0OoLUTeM8) &gt; [*^Aleksandra ^Aleksandrova*](https://www.youtube.com/channel/UCvUMcshX7aNWFGc4rqUiD5w) ^in ^Science ^&amp; ^Technology &gt;*^17 ^views ^since ^Jan ^2017* [^bot ^info](/r/youtubefactsbot/wiki/index)
https://youtu.be/wh0OoLUTeM8
&gt;[**Home automation - Raspberry Pi 3, NodeJS &amp; React Native | Deepsyx [1:32]**](http://youtu.be/wh0OoLUTeM8) &gt; [*^Aleksandra ^Aleksandrova*](https://www.youtube.com/channel/UCvUMcshX7aNWFGc4rqUiD5w) ^in ^Science ^&amp; ^Technology &gt;*^18 ^views ^since ^Jan ^2017* [^bot ^info](/r/youtubefactsbot/wiki/index)
You could, but then your code to read data would become very tedious and complicated. There are no queries like in SQL. You would have to send multiple requests for each piece of data you need, then compose that into an object, etc.
Right? I guess I'll be printing out all my js and using snail mail from now on. 
Secrets of the Javascript Ninja by John Resig is an excellent book. Perhaps not for ES6 though... but it lays a solid foundation for JavaScript. (the author is the the creator of jQuery)
What the fuck
You can use this to attach arbitrary files to GitHub comments! Rename .zip to .jpg and drag and drop it into the comment. It appears as a broken image icon, but can still be saved and renamed back by other users without damage.
Clarify?
There will also be a solar eclipse in 2017. 
[removed]
I think most folks think Postgres is better than MySQL. However, they still get the job done, which is why I said stack is up to you. I agree that stacks dont mean much, but this fella was asking what to look into. and I think Postgres, Express, React, Node is a good stack to know. 
Reselects goal is much simpler, as it only has to cache the last input. They will just hold references to the last args and check each argument for strict equality. (should be much faster) 
This is a limitation of nearly every memoization lib in any language that has ordered maps. It's simply too expensive to call a sort if the language isn't doing it internally. I'd also argue that this is a somewhat obscure edge case, not really "only in specific circumstances". It's memoizing the arguments to a function, which aren't going to appear in random orders. The vast majority of memoized functions shouldn't be accepting arrays or objects anyway as it has the potential to explode memory usage. Also most code will never generate objects with keys in different orders like this.
If you learn how to program properly, it'll only take you a few days to learn a new language, and a few projects in that new language to really kick ass with it. If you can't operate another language within a few days, then you have not learned how to program, you have learned how to copy-paste code from Stack Overflow. 
Why do you have to attach them? Just make separate objects, one for each system. Store the references in a namespace (object) that is globally defined. They will be able to access themselves by calling GameRouter.RenderEngine...
The other day, I went between a full blown ES7 dev environment, into working on code that only ran on a current browser, then to QML (which has Javascript, but it's years out of date), did some things in Node, C++, C#, Go, and Python, and Java. So effectively 6 different languages, 4 vastly differing versions of Javascript, and also worked with two different markup languages (html and qml). By the end of that work day, I was searching for someone to converse in Spanish with . . . I don't know Spanish. :-D (I also hadn't used Python in probably 5 years, had never seen Go or C#, had never written Java, and hadn't used C++ in 20 years, prior to that day) Some people I know are boggled that I only make low 6-digits. I don't think it's all that special to be able to switch like that, though, is it? I mean, i'm not *proficient* at any of these languages except Javascript, and I'm only proficient at that because I've been using it continuously for years now. 
Rather than having the else clause be empty string, return null instead. That will cause react to return a noscript or comment tag (or possibly nothing in the future releases). However, unless you have stying reasons to actually remove the element from the dom, I now recommend display:none on components that need to go away based on a boolean. Changing a single style or class declaration on a tag is far mor efficient than adding or removing a whole dom subtree. Unless you are extremely memory constrained, this is almost always the better option.
Ahhh, microbenchmarking. The root of all evil.
Hm, I wonder if it blocks .ts, .tsx, .jsx
 { renderLogin &amp;&amp; &lt;LoginForm.... /&gt; } or return renderLogin ? &lt;LoginForm.... /&gt; : null; or if you use jsx control statements &lt;If condition={ renderLogin }&gt; &lt;LoginForm.... /&gt; &lt;/If&gt;
 As mentioned " Node.JS is not a JavaScript framework, but JavaScript has been put into use for writing many of its basic modules". Please read full blog. Thanks 
Exchange sometimes strips zip files with js inside. The best way to get around this is to use 7zip instead. The people you're sending to will have to be able to open a 7zip archive of course.
this.renderBoxes.call(this) wtf 
It's been linked some time here on the forums, but [here is the link](https://www.youtube.com/watch?v=M1qm-AWWu-M&amp;t=2960s)
Try working in design and also web programming. I'm sorry but I don't want to waste 3 hours trying to compile some odd tool or trying to make it work in WINE when I can just an installer and be done with it. Also, with Bash for Windows you don't really have a reason to lock yourself up to Linux.
So Meteor is heavily investing in GraphQL? I am not really convinced on the power of GraphQL for simple/prototype applications, but then again I haven't really used it that much either. Is Meteor still planning on supporting other databases than MongoDB?
Thank you so much for your comment, I will make sure to add that!
In addition to what others have commented, I think I can clarify some things for you that will help you understand what's going on. In the last line, `button.addEventListener('click', makeList(questions));`, you are passing *the result of `makeList(questions)`* as a second argument to `button.addEventListener`. This is why you are seeing the `makeList` function being called before you're expecting it to be: adding parentheses (`()`) after a function name, whether they contain parameters or not, tells the runtime to call the function. This is desired and expected behaviour. In fact, since the result of that call can be another function, it can be a very useful pattern: we can dynamically create a function that has a certain property and behaviour and use it, e.g. to pass it as the second parameter to `addEventListener`. This is in fact what /u/TheNumberOneCulprit 's code does: `makeList.bind(null, questions)` calls the `bind` method of `makeList` (which is an instance of `Function`), which returns a version of `makeList` that has its first argument *bound* to `questions`. That means that when it (*it* being the function that was *returned from* the call to `bind`) is called by the event handler (which, as /u/senocular pointed out, you have no further control over), it will be passed `questions` as its first argument, and the event object (usually named `event` or `e` by convention) as its second argument. A more explicit way to write this would be: const handleClick = makeList.bind(null, questions); button.addEventListener('click', handleClick); // notice the missing parentheses here: we are passing the function itself, not the result of calling it! However, I generally find the following pattern clearer myself, since the code declares what's going on more explicitly: const handleClick = (event) =&gt; { // optionally do stuff with `event` makeList(questions); }; button.addEventListener('click', handleClick); Or, since you're not using the event data in any way in this case, you can simply do this: button.addEventListener('click', () =&gt; makeList(questions)); Another way of looking at this is that you're *deferring* the action you want to take until the event is fired. You do this by writing the logic as if the event happened just now, but wrapping it in a function that is to be called when it actually does happen (hence the name "callback"). I hope that clears up the mechanics a bit for you.
Needs more Vue.
Its the same, or returning empty span for example. But null is definitely preffered and cleanest way to return
Looks amazing! I'm also new to react but cannot yet build something like this. Great job! I used it and learned something new about cost of living 
Second this. Tony has a talent to convey information and understanding of the matter. Plus the course is on sale now!
 const list = [1,1,2,3,4,4,5]; list.filter((item) =&gt; list.indexof(item) === list.lastIndexOf(item))
Zip it up...?
You've been going on and on about try/catch being a bottleneck, not realizing that the linked code snippet is only executed once, while ironically missing the fact that the syscall alone for downloading those few bytes takes longer than the overhead of executing the try/catch. Oh.... right... You also completely missed the fact that not a single JS engine in existince includes a AOT compiler anyways. But okay... Now I'm intrigued. Do you mind writing a JS script showing a slowdown due to try/catch being used? Especially in combination with the `eval()` used in the linked script, since... you know... that's what all this is about? I'd be amazed to see the difference. Really. Please show me. \&gt; MFW a web dev talks about bottlenecks in a webscale, single-thread language like JS. topkek.
&gt; const list = [1,1,2,3,4,4,5]; list.filter((item) =&gt; list.indexof(item) === list.lastIndexOf(item)) Thanks. My limited testing seems to say it works. indexof should be indexOf. Now, my explanation of this: Filter the array (create a new array from returned values) using a callback function. The fat arrow function (a shorter syntax for an anonymous function) compares the first index of the item from the array with the lastindexof the item in the array to see if the indexes are both the same.
I have never used this data, but: * Are the other values normal? * What are the user agents associated with the 0 values? * Are these visitors getting everything from their cache? * Can you infer anything from the IPs they use? 
You have to use the DOM to interface between the JS and HTML. You can throttle very minor text updates as fast as 2ms, but it isn't stable. The maximum stable updates are somewhere between 5-10ms depending upon the browser, the user's hardware, and how you are updating the DOM. The only faster interaction is that there are some CSS changes that can throttle faster than 1ms (JavaScript doesn't provide greater clock precision to know just how fast) so long as they don't modify a node with many child/descendant nodes, don't modify a node's dimensions, don't modify a node's shape or rotation, and don't move the node. These CSS changes are typically things related to colors, opacity, shadows, and so forth. Here is a guide to get you started on the DOM: http://prettydiff.com/guide/unrelated_dom.xhtml A more complete and exhaustive reference can be found at: https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model
Not sure how your project is set up, but you probably just want to `npm install` dirtyforms, and then in your JS file(s) where you need it import it like so: `import dirtyForms from 'jquery.dirtyforms'`. Then just use it per the examples. *Probably.* Not used jQuery plugins with a modern setup.
Yea, you have it correct (sorry for typo in indexOf) - if there are 2 or more same numbers, firstIndexOf and lastIndexOf wil differ. When there is only one occurence, they will be the same. And this creates array only of those items, where the condition is true Question is - does it solve your problem or not? because it basically "detects duplicates". Is you case for example required to solve it by one pass to achieve O(n) complexity? (because indexOf will iterate over array)
There's already a (popular) CSS pre-processor named [Stylus](http://stylus-lang.com/).
React suggests &lt;div&gt; {renderLogin &amp;&amp; &lt;LoginForm /&gt; } &lt;/div&gt; and &lt;div&gt; {renderLogin ? ( &lt;LoginForm /&gt; ) : ( &lt;NotLoggedIn /&gt; )} &lt;/div&gt; https://facebook.github.io/react/docs/conditional-rendering.html
The syntax support is closer to sass-like than stylus, other than that it supports features that other css pre-processors don't, it's closer to postcss than stylus/sass.
&gt; you can easily use it client-side. No thanks
I have an initial client whom I want to have my product forever but I don't want to make a special case for them in my program. Yeah, it looks simple and I'm definitely willing to give it a try down the line especially to try stuff out. Definitely on your newsletter and will be keeping up with it. It looks great so far.
Okay. So tokens and licenses are different things. Tokens authenticate your client with the API, and only need to be done when booting the app (or when the token expires). When booting the app, you have your client log in, you then generate a token with their credentials and save the token to local storage. On every boot, you check if a token is in local storage and if not, you prompt to re-login. That handles authentication. Policies are how you actually set up license 'types' for your product. You can set up a specialize policy for your initial client that has a `null` expiry, effectively allowing all licenses that 'implement' that policy an unlimited expiry, e.g. it never expires. So on each boot, after your client has obtained a token, you can look up their license ID(s) (possibly cached in local storage) and then send a request like curl -H 'Authorization: Bearer {THEIR_TOKEN}' https://api.keygen.sh/v1/accounts/{YOUR_ACCOUNT}/licenses/{THEIR_LICENSE}/actions/validate to check if each of their licenses are still valid. Hope that clears things up. I'll keep you up to date on my progress via the newsletter. :)
I am not really interested in 'efficiency'. Basically I had a list of names, then I had another list of names which I wanted to find out where the update names were. I have read about the disjoint union where you would compare 2 arrays but I think it's more useful to find the 1 item uniques in a list. I found an easy way to do it in a prog called Beyond Compare. Post 1 list in the left and 1 in the right and it will show you the items that are in only 1 side. I'm only learning javascript and the call back functions are something alien to me. I still think in arrays and pushing things about. This chaining aspect is something I am not used to. It seems to be simple (and 'elegant') but under the hood it seems to be doing something I haven't learned of.
Ternary. 
Almost certainly not. The risk of .js is that it is an executable script. It's essentially like passing a .exe.
Hi /u/caiogondim, please don't post links as self posts. Thanks!
You can't directly access UDP in the browser normally. You can use webrtc: https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection You can also use UDP from a chrome extension, but that's browser specific and can't just be deployed to a website. Lastly you can use [electron](http://electron.atom.io/) (or NW.js, etc), then you can distribute a desktop app with a node backend all integrated, and they can communicate to each other. I believe this is the only way you could use your existing node code.
https://blog-assets.risingstack.com/2017/01/variable-serializer.png &gt; JSON.stringify **bound**
Thank you greatly! Yup I'm currently working on making a brief blog post on how I crafted the site. But even before I finish that - I'll gather my thoughts and I'll share it with you.
Maybe I'm missing something, but aren't Vue viewmodels already reactive on their own? What are the pros and cons of using RxJS and Vue together? IMHO, RxJS code has always felt operator-heavy (which is kinda understandable if you compare to non-reactive imperative js), but it seems unnecessarily verbose in the context of using Vue.
You might want to look at functional programming concepts at some time (https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536#.bzfhj0jv8). filter, map and other "callback functions" are concepts from it :) But take your time to adapt
Was making a joke about how email used to be my version control
Very nice tool. One suggestion: give the option to change the currency. I tried from a city in Canada to one in US and it only gave me CAD as an option. Would be useful to have the option to see the result in USD as well. It would also be nice to see more cities, especially suburbs of large cities. For example, Oakland has much lower average rent of than downtown San Francisco, despite being only like 30 minutes away by transit. Most other large metropolitan cities are like that as well. One last thing: notice I didn't mention React/Javascript above at all. That means you're doing it right (i.e. using your tools to achieve a more meaningful product). Keep it up!
Valid point. The thing is, this is bought traffic, sent to a domain that is around 35 hours old and never been registered before. It's also all mobile traffic, so I'm wondering how these things can be cached.
That has O(N) space complexity, though. It looks like OP might be using pre-sorted lists, which makes it possible to just track the previous value in the iteration. 
a person is not a number. a plant is not a number. is `person === plant` since they're both non-numbers? just as two numbers do not imply equivalency, two non-numbers also do not imply it.
Sounds like a single client is loading multiple pages using a persistent connection. As [this comment](https://www.reddit.com/r/javascript/comments/5qh9ro/_/dczaje3) notes, the spec can tell you more about how using a persistent connection affects these values.
OO as a concept has many properties, often loosely defined. ES6 class syntax definitely gets you into OO territory along with `extends`, `this` and `new`, `constructor`. Any time you have methods that operate on and/or mutate some implicit state you're also in OO territory. i would not classify private functions and closures as OO concepts. that being said, you can still mimic many OO concepts without using any of the above, and you can mix and match function overloading/polymorphism, etc. Javascript is quite flexible, so use OO when it makes sense, and don't use it when it doesn't.
Thank you so much man! Your feedback is beyond appreciated. I'm hoping to incorporate currency exchange because that seems to be the next best thing - to give the option to people to compare their salaries with that country's salary. Hopefully I'll be able to make those changes soon :).
On that note you can support source maps with a middleware/plugin since middleware will receive every rule/block/property with the line/col number.
No worries, it's a treat watching most of their videos and they have a lot of concrete answers to real problems.
Ah, I see! Yeah, I hadn't quite expected that level of thoroughness. I was trying to piece it all together in the docs, though. I did mean license in this case, yeah. But it does sound like what you have will work out really well :D
It's not the same. An emtpy string will result in a text node in the dom, null will output nothing. 
It's not my library. If you don't have jquery in your project, include it or fork Tilt.js for whatever implementation you want. It's dependent on [jquery 3.1.1 which looks to be 24-30k](https://blog.jquery.com/2016/09/22/jquery-3-1-1-released/) (slim version -vs- regular), I wouldn't really call that "drastically increasing the size", but that's just me. "Good reasons" are subjective so people will have to make some big decisions...Heavy is the crown we wear.
&gt; you may need to hang on to that function reference if you ever want to remove the listener Derp, good point Thanks for the tips!
It is because one of the draws of this library is that it claims to be "lightweight", and in your title "tiny". Adding so much weight relatively for no gain is... a poor choice. In my opinion. As it's only 100LOC, without looking at details I expect it could be fairly easily rewritten to vanilla.
Hey hey hey, I didn't mean to come across so negatively, just trying to articulate exactly why I'm perturbed by the use of jQuery. I'm still glad you posted it. :-)
*.js only runs on macbooks
... when did "false" become a valid render option? (serious question, that doesn't make sense to me based on what I already know, but it's entirely possible that things have changed in the month that I've been working with it, or I learned bad info) 
The point is that it's capable of running at 60fps on modern hardware because it uses hardware-accelerated CSS properties that don't cause repaints, unlike a surprising number of animation libs like this that will never be able to hit 60fps. I agree that saying '60+fps' may sound like a fake promise, but I understood it in the context that (I believe) it was intended.
I agree that if you are only accessing the data in one place that syntax is concise and readable, and using anything else is needless abstraction. However, it becomes less concise when the same logic has to be written multiple times. For example, I might use four components that all took the same pageData prop and just displayed it in different ways. At this point I think there is an advantage to factoring the selector out.
It'd be nice if you were managing browser history. I hit the back button expecting I'd be able to pick another city, and instead came back here. Since I'm here now, I'm leaving you this comment :)
It's more like kernels much larger than 10 x 10 rather than 3 x 3. For example consider the 1D case of convolving a row of n pixels with a filter of m pixels: * O(nm) with naive convolution * O(n log n + m log m) with FFT convolution, with a much larger constant factor of overhead Clearly, when m &lt; log n, naive convolution is faster. Note that for a typical 1024 pixel wide image, log_2 1024 = 10. Anyhow, if performance were critical, a CPU-based implementation should use [simd](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SIMD) in addition to multithreading. Of course, GPUs are much faster than CPUs for convolution.
It's annoying when people use `typeof NaN === 'number'` as a reason why JS is stupid. JS is just following the standard, a JS number is just an IEEE 754 value, NaN being one of those.
Yes, beginners seem to be obsessed with courses and books because it's the (seemingly) easy and obvious way to learn. It isn't. You retain almost nothing unless you put your new knowledge and skills to use, and the sooner you use them the more you retain.
I'm guessing your professor is talking about [this site](http://youmightnotneedjquery.com/). 
The examples on the page, other than the one on the top-left, don't actually show off the parallax effect. I was somewhat confused by that.
Yeah that makes total sense. I think learning about programming fundamentals will be very helpful regardless of the language. I personally find interactive courses helpful. Learning any language will definitely help you nail the JS side of front end and will also come in handy with Sass too. Once you get programming it'll just be a case of learning about the various browser APIs. Good luck!
Sure, but this is going to be a two liner no matter what. I don't see the need for a new package/library.
How could you multithread something like this in JS?
http://mcdlr.com/i/fork-off.png
Web workers, as you mentioned. For example you can divide an image into four quadrants and convolve each quadrant with a different web worker (while treating the boundary conditions carefully). Here's an example using SIMD with web workers to render the mandelbrot set: http://peterjensen.github.io/mandelbrot/js/mandelbrot-ww-asm.html
Yeah, you have to be careful of calling "WAT, LOLOLOL!!" on something you don't fully understand - it can sometimes backfire and highlight a gap in your knowledge of compsci fundamentals.
What about RSA ?
My idea to implement webworkers would be quite brutal - spin off a new WW for the inner two loops - for a reasonable image size that generates thousands of webworkers which is no doubt inefficient. What is SIMD? I've never heard of it and it doesn't seem supported in either chrome, firefox, or edge (or at least, it doesn't work in the demo you linked). I don't think the source code for that is very elegant. I was hoping for something with a more user-friendly implementation.
Infinity isn't NaN. Infinity - Infinity is, though.
Parallax isn't restricted to overlayed objects, alterations of proportions due to viewpoint change occur just the same whether or not text is floating in front.
It's a drastic increase when it's ~3x the size of the library. 
Oh, I completely misread the OP's question. Not to be a know-it-all or a one-upper, but FYI you can do it in one pass with reduce. var list = [1,1,2,3,4,4,5]; var helperObj = {}; list.reduce(function(acc, item) { if (helperObj[item]) { return acc; } else { helperObj[item] = true; return acc.concat(item); } }, []); 