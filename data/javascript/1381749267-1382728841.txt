Not really, but the code isn't minified or obfuscated... The main bulk of it is here: http://imaginate.redbull.com/assets/js/modules/map.js It's a bit soup-like, but should be easy enough to follow.
Moving to JSON is a really great idea! Do you have a timeline for the future features? And do you plan that this engine will handle multi-players? I saw that the IA and the path-finding were client side so I guess not. But great project anyway!
I know being JS I can just view it and pick my way through it, but I don't steal people's code. I can see the amount of work you put into it, so there is no way I'd just 'take it'
This is what I'm using for my timelines: http://almende.github.io/chap-links-library/timeline.html It's very very customizable and easy to use. And there's a bunch of examples to get you up and running.
Yep - I think one problem is that the device is generally sitting on your desk at the moment - right beside your keyboard and your mouse - offering what is basically (currently) a lower-resolution version of the input they provide. On the other hand, with computing becoming ever more ubiquitous, the keyboard and mouse won't always be there - because we won't always be sitting at our computers. Technologies like OLED may bring interfaces to any surface - and it seems like we can expect computers to become less something we sit in front of, and more something all around us all the time. That, I think, is where technologies like motion input will come to the fore. I put together a demo of something that might look a little (more or less) like how we might imagine interacting with computers as they demand less for us to be parked in front of them (it's dark and blurry I know - I'm a low budget operation! : ): http://www.youtube.com/watch?v=HB50_Vl6HkU 
I disagree about the module system. Just use namespaces. Much simpler and without the headache of the modules. 
a small separate file like license.txt would make it much clearer
Did you know that your Twitter account been suspended?
One tiny complaint. I am running 1920x1080 and the website only half loads initially. The upper aqua section loads, but it takes up less than half the screen. The rest is just big empty white nothing. I almost closed the window without even scrolling, but I gave the wheel a quick flick and the remaining images started to load and I could see the rest of the site. Just a gripe.
Thanks, added check for high resolutions.
Much better!
.008%
Every single day.
So, not quite 1 in 10,000.
So, what exactly is this? A tool to draw SVG images?
Happen to have a link to the tutorials?
I worked on an open source project combining a time-slider with line charts of sensors (using HighCharts) and an interactive map (using Leaflet): http://mote-0-bike.heroku.com/viewtrip/5180366206effe0200000003 The underlying JSON data looks like this: http://mote-0-bike.heroku.com/api/trip/5180366206effe0200000003
Seems like the blog doesn't exist anymore. But the linked repository should be an even better source, as the tutorials covered just some basic stuff...
Obfuscation usually equals evaluation of scrambled code. Replace eval (or whatever is used to evaluate the code) with console.log and all the scrambling will only baffle those who don't know enough JS to understand the code anyway. Therefore, JS obfuscation is pretty useless (and mostly employed by those who wish to do something illegal anyway).
ELI5 Functional JS?
Ah, i see. Thank you! 
Might check out [ReclineJS](http://reclinejs.com/).
Thanks, yeah :( Twitter's bot detection seems completely borked, I get spammed all the time with really obvious bots that don't get suspended. Should have set it up day before - lesson learned :)
My current one is: pipelines, not objects. Rather than little cells passing messages, you have pipelines of data like unix pipes, each function changing the data's shape in some way. You have a very 'flat' program - lots of functions working on pure data, rather than lots of hierarchical objects (data) with functions attached.
Popular sites using Modernizr: 1) Microsoft. ...aaaand i'm no longer interested.
Friday's date was October 11, 2013. Date's (getMonth, getYear, etc.) are numbers. ``` var month = currentDate.getMonth() + 1; if ( month &lt; 10 ) { month = "0" + month; } ``` You're saying, if the month is January to September, add a "0" infront of the number, which would change it to a string. Since October (10), 11th are both false to your `if` statements (greater than or equal to 10), both dates stay numbers and when you try to return.. ``` currentDate = (month + day + hours + minutes); ``` .. you're adding numbers together instead of strings. I can't think of a better way to do this off of the top of my head but you could add an empty string to the final return: ``` currentDate = ( '' + month + day + hours + minutes ); ```
heh, microsoft HAS to use modernizr, they really should be doing something their shitty old browsers and it will look plain BAD if one of their main sites crashed on IE7
Ghost looks really awesome actually. Excited to try it out.
Me too! On my raspberry pi!
Neat, although probably not really *that* useful in idiomatic JavaScript. It suffers from the same minification bug that catches new users of AngularJS, though. If you minify your script, and let it mangle function arguments, then everything will break. For example, if you have a method with this format: function(msg$string){ // say it in the console console.info(msg$string); } It minifies to this: function(a){console.info(a);} Which loses the additional information in the variable's name. I didn't see any support in the library to handle this. Alternatively, it might be better to flip the design on it's head, so you pass in an object map with the keys being the expected values, something like this: Over({ '$string': function(msg) { ... }, '$string,$number': function(msg, number) { ... }, etc... }); I still feel like overloading a function in JS like this *could* lead to a sloppy design.
Thanks a lot, man! That's the simplest solution for what I needed,
Love that markdown editor
Is this like wordpress, as in, it will have an administrative section? Do I install it on my server or do I sign up? Or is this all based in command line like octopress, and I think jekyll? I could just read but I'm being lazy : D
Sadly we don't have a back-up of the old Glacialflame website however you should be able to access a few of them via [archive.org](http://web.archive.org/web/20120625130244/http://glacialflame.com/). On the whole they are pretty dated and this project should follow a better approach!
I installed nodejs on my webfaction account. Then, I hooked it up via their control panel to an external IP and port. Then, I installed ghost and kicked it off with forever. I hope that keeps it alive, else I'll have to put in a cron script to check/restart.
What's forever? 
There is more to obfuscation than that case (as you imply). Changing variable names is one thing that can compress and can also obfuscate.
It would help to know in what country/location your job is.
https://npmjs.org/package/forever
I'm located in Norway, so conferences in Europe would be the easiest. But there are not really a restriction of distance. 
Thanks for the info!
As steelcirtynorth said, once you convert a variable to string the plus operator starts to do string concatenation. If you're after a 'unique date number', you can just use : Date.now() // 1381785842716 This will return the number of milliseconds since epoch.
Saw some other posts about Ghost in other subs. Didn't realize it used Node.js . Can someone explain how it takes advantage of Node?
I'm not sure how namespaces are less of a headache than modules. Both employ some sort of code encapsulation, usually by way of a closure. The benefit you get from a module system like AMD or CommonJS is declaring code dependencies in code, rather than in script tags. 
Takes advantage of and uses are two different things. Basically, it usees the expressjs framework to respond to http requests on a server. Expressjs is a layer on top of node.js. It also uses jugglingdb and handlebars. so... this is a web stack just like any other. Instead of php with laravel and mysql or ruby with rails and postgres, this is Node.js with Express and MySQL or SQLite.
Nice! This could use a `sync` feature: it would take a configurable selection of property names, one specified json name and copy the selected fields to the other jsons. Also a grunt-task to automatically do some of these tasks (at least sync, maybe others). And if you re really bored a configurable list of json (for the niche package managers).
It has an awesome Markdown editor you operate through a web browser. You edit in Markdown in the left pane and get a live preview on the right. It's so much slicker than WordPress.
It's single user for now, but it's going to be multiauthor eventually. It's still in alpha, essentially, hence the 0.3.x versioning.
I ran some Apache Bench tests against it just to see how much memory it uses, and it's pretty damn light. Lighter than a simple Sinatra app, even. I'm impressed. It was using very little memory to serve a hundred concurrent requests...
Anyone step back and think about how stupid it is that we have to manually manage these files? Why don't we unify them somehow?
Holy shit codemirror is awesome
Tried creating an account but for some reason I cant log in... keep getting redirected to the front page.
Ace editor is also pretty nice :)
These explain it far better than I could: * http://www.joelonsoftware.com/items/2006/08/01.html * http://victorsavkin.com/post/63551894251/functional-refactoring-in-javascript
Depending on your use case, v8 is much faster than the ruby runtime. 
This would need to be polyfilled for older browsers. eg. IE8. You could just use: new Date().getTime()
The goals of compression are very different than those of obfuscation.
Yes, yes it is!
keeps a process running ... so the ghost/nodejs blog will keep running: after I log out, and restarting after the process dies. http://blog.nodejitsu.com/keep-a-nodejs-server-up-with-forever 
I saw that in the notes. There is a whole roadmap, on github or somewhere, that plots out features, etc. 
What I'm really looking for is a [markup](https://github.com/github/markup) editor. The one GitHub uses. Gotta have me some code snippets!
*(Note: I'm not trying to say bad things about this library, this is just my opinion!)* Those usages are pretty common, but I think using a library to overload those sort of functions seems overkill, when the code is so simple: function attr(prop, val) { if(val !== undefined) { this[prop] = val; } return this[prop]; } and function doThing(url) { var config = (typeof url === "object") ? url : { url: url }; // rest of code } Those are just so easy, that while this library is cool from a technical standpoint, it just doesn't (seem) to provide enough benefit for those use cases. It's more verbose and has more layers of indirection: var doThing = Over( function(url$string) { doThing({ url: url }); }, function(config$object) { // rest of code } ); This would require calling `Over-&gt;function(url$string)-&gt;Over-&gt;function(config$object)`, just to do the same thing, and it only *appears* cleaner if you are used to a true OOP language, like Java or C#. Idiomatic JS usually would look more like the other examples. Now, please don't get me wrong, this is just my personal opinion, and this is a really slick solution to a potential issue, but I think that it's more common to pass in an map of properties to a function, rather than overload a function to handle a variety of cases. As a final example, I think it's much better to have code that looks like this: doThing({url: '...', params: {...}, headers: {...}); Rather than overloading the code to have a function like this: doThing('...', {...}, {...}); The latter creates a funtion with ambigous parameters.
I'm not sure if I understand GPL3 properly, but doesn't GPL3 requires that you only need to publish the modification of the framework (and not the game itself). So, unless you need to modify the framework, you don't have to publish anything.
JavaScript obfuscation in usage doesn't do much, but it's always good to keep in mind that it exists and that writing entire code without letter or number is possible. Some security exploit can only be done with JavaScript obfuscation and that's often because the person that wrote the vulnerable code didn't knew about that weird part of JavaScript. So while, nobody is expected to write obfuscated code, learning about obfuscation is not a bad idea.
Wow. Thanks for sharing this, it means a lot. I did enjoy writing the tutorials and I'm super glad that they helped. Your game looks sweet, what language is it developed in?
What would you suggest? I don't have any experience really with licenses. I'm guessing you're going to suggest MIT. In all honesty all I want to do is create a cool isometric game and hopefully have other people contributing and developing it further. If others can use the backbone of it all to do other cool things then that's fine with me.
Basically, GPL means "you can use this, but your game needs to be open source". MIT means "you can do anything with this, just don't blame us. Have fun!" Here's the MIT license, in its entirety: &gt;The MIT License (MIT) &gt; &gt;Copyright (c) &lt;year&gt; &lt;copyright holders&gt; &gt; &gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: &gt; &gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. &gt; &gt;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. The BSD licenses are similarly permissive. MIT seems more popular these days, though. By the way, I'd be interested in contributing, especially if it were MIT licensed. I'd especially like to make a node.js server side module for it, as an alternative to the php implementation.
I think the issue for me is that engines almost always require some form of modification for a particular game. They are almost never suitable as-is.
So is "functional" the opposite of object oriented paradigm where data and manipulation of said data are kept together?
Unifying the package managers creates coupling and inflexibility and you don't always want to use same information anyway. Why would you bump node.js version if your bower build needs a fix? It'll only create problems.
Awesome, I'll change the code to reflect MIT later tonight. :)
Here's an example of obfuscation without `eval()` at all. http://www.reddit.com/r/Kappa/comments/1m6aqk/the_complete_guide_to_blocking_ads_on_eventhubs/cc7ee0b Is obfuscation perfect? Of course not. It can always be deobfuscated by a skilled developer. The ultimate goal of obfuscation is to make it as annoying as possible to reverse engineer.
This seems like a compilation of strange decisions to minify/obfuscate javascript, and I'm not just saying that because it uses php. The first problem is the parser. You can't just grep for identifiers, and using regexps to solve the problem just gives you two problems. You want a parser that knows about javascript syntax and grammar and produces a parse tree. There are a bunch of open source ones out there that are generally expected to be correct, and will provide a good foundation for transforming JS code in a non-destructive fashion. Unfortunately, there are also bad open source parsers out there, and the author happened to pick one of those, which is [thusly described](https://github.com/rgrove/jsmin-php/) by its maintainer: &gt; This project is unmaintained. I stopped using it years ago. You shouldn't use it. You shouldn't use any version of JSMin. There are much better tools available now. The other issue mentioned is knowing which identifier to minify and which to leave alone. If he had a proper parser, he would know what scope an identifier is in, which would him allow to know which ones can be safely minified (those used only in local scopes), and which are trickier because they're attached to the global scope. Normal minifiers usually just quit there, but an opinionated obfuscator could catalog and recognize known global identifiers and obfuscate the rest. tl;dr: shoulda used a real parser, and used parse tree context data to know what to change and what to leave alone.
[I have a Digital Ocean account](https://www.digitalocean.com/?refcode=946a5ddabb69) (disclaimer: referral link) currently running a Node.js server (MEAN stack, actually, as well) and it works beautifully.
I have had both, for a portfolio site, a few small node apps, and a Ghost blog. I initially bought the Linode because I thought I would need some extra horsepower to debug and deploy several apps. But the reality is, you're really paying Linode for bandwidth on pretty similar machines. I'm not really getting traffic to justify that. Digital Ocean has been great for cheap, simple machines. If you're not looking to scale, and you're not getting a ton of traffic, its probably what you want.
Thanks, sounds exactly like what I want.
How does this compare to https://github.com/flatiron/winston
If you're willing to travel to the US, Fluent Conf in March is supposed to be a pretty decent conference.
How I would probably do it: var currentDate = new Date(); currentDate = [ ("0" + currentDate.getMonth()+1).slice(-2), ("0" + currentDate.getDate()).slice(-2), currentDate.getHours(), currentDate.getMinutes() ].join(""); 
http://communityjs.org/ maps down user groups and conferences around the world
I think Digital Ocean will probably work great even for a larger server although I haven't tested that. What I am working on now is a docker hosting service (current name is oic.io but that may change). By using docker containers or just putting several apps on one VPS you can save a lot of money. You just need a proxy in front of it like substack's bouncy and then you can map each subdomain or regular domain to a different port and run many different node apps on one virtual machine.
Loglevel's quite a bit smaller, and aiming to solve a different problem. Winston's looking to be a big serious logging framework for people with proper large application concerns; stuff like programmatic log search and configurable log transports are great if you're writing the next google, but not really required if you're building a small/medium sized app. Loglevel meanwhile is looking to be an totally trivial way to add logging to smaller applications, without having to think about browser compatibility at all. So you just have to drop it in to instantly have it working, it's super tiny (&lt;1KB gzip + minified), and it 'just works'^TM Notably Winston's also Node-only too, whereas loglevel is primarily for browsers, and only really has node compatibility so that you can safely write console-logging code using it that'll then run both in browser &amp; node environments. Node-only means Winston doesn't have to handle any browser-compatibility, whereas fundamentally loglevel is really a smattering of extremely core features over a big layer of make-sure-it-works-absolutely-everywhere-no-matter-what browser compatibility.
Just because the strings "eval", "Function", or "setTimeout" are not readable in the code, doesn't mean that no statement is evaluated. Still, you can easily run parts of the code to see what they are doing; reverse engineering of obfuscated JS will always be easier than the obfuscation itself.
That is compression, not obfuscation. I can read compressed code almost fluently, but have to unmangle obfuscated code.
You are talking about ways to obfuscate XSS- or CSRF-Attacks. Yes, one should know about these.
Despite the intention being to compress, it also will disguise. It could also disguise the intention to disguise if that is the intention. Compression increases entropy in the data which makes it less like natural speech. For example, there could be a variable called 'deltaMargin'. While it's not clear what this does by itself, with that variable name replaced with 'bG' or similar it will make a lot less sense to the human reader as well as being smaller.
It's all JS. Here's an older demonstration vid of the game (and a webGL-experiment, unfortunately in german): https://vimeo.com/47407224 I am currently refwriting all the code in my free-time as this was my first project and the code was horrible... (and also to make sth. different out of it: free movement and a huge world instead of a small battlefield)
Your main problem is that spidering to find posts requires a server-side script. Luckily for you, the We Feel Fine people have opened up theirs, and published an API - http://www.wefeelfine.org/api.html . So, all you'll need is some AJAX that calls http://api.wefeelfine.org:8080/ShowFeelings?city=Stockholm , and then you can process the (XML) results. 
brilliant! thank you so much! 
Seems like you're on Linux. If you don't want to install Forever, chances are that you already have tmux or screen. Even if you don't want to use it for ghost, I strongly recommend that you learn one of these tools. They're extremely useful to anybody running a Linux server. I also believe that you should make the process into a service instead of having it as a cronjob.
Maybe [Fronteers](http://fronteers.nl/congres/2013) next year? You also get to visit Amsterdam for that.
This is really cool. How long have you been programming, and how long did it take you to make this? 
Also OpenShift and AppFog.
Thanks. I started working on this project in March, but as a toy project besides daytime work. How long have I been programming? Hard to say, a while, couple of years...
Full frontal in Brighton is another great conference to attend.
Yeah, you can have a functional object that is just composed of methods to manipulate data without actually containing the data, but functional programming doesn't rule out generating data. You can even mix the two methodologies (which JavaScript handily allows and uses...) by having objects dedicated to data and objects dedicated to manipulating that data. Some people even take the next step and merge the two, but if you can make your functions generic enough you shouldn't need to because those functions could be used on alternate data (or data structures). You can think of functional programming as being stateless where OO developers normally embrace stateful design. Like the OP who posted a response to me, you can also think of functional programming like building a pipeline with a series of valves that each shape the water as they go along. At the beginning of that pipe is the data source (or generator) and the end result is a returned value that is filtered or manipulated by your functions. Along that pipe you can convert your oil to gasoline or plastic depending on what you put inline. Generally, you can safely make the distinction you made with a little asterisk next to it. Functional Programming was born from Mathematics. It's hard to imagine a function in your math book that stores complex data or state. If you are interested: http://www.defmacro.org/ramblings/fp.html
I can obfuscate without compressing. I can also compress without obfuscating.
I'm kind of old school -- like real old, from 80s Bell Labs pre-IP, no computing device on my desk, ATT SysV Unix. So, I am a pre-VI master of ed &amp; ex, and a pre-screen/tmux nohup-master ;-) Anecdote: before DNS, I was the att.com!postmaster who downloaded the /etc/hosts file - every night, and distributed it into AT&amp;T. The whole DARPAnet/pre-Internet fit into a single text file. So -- back on topic: WebFaction does have the user crons open. So, I'll write a quick shell script to check for a live process, touch a lock file, and restart nodejs (if needed). This is something I know and love. You young kids with your multi-user sessions, tmuxing and screening! Don't make me shake my cane at you.
what is Ghost? I would google it, but I'm guessing that won't really help much without another keyword.
Looks interesting. Have you done any kind of performance testing on it?
How can it be static and multi-user? Do you mean multiple users on the same machine?
Wait so is it static or can it be changed?
Cool, but it flickers in Firefox 24 Windows 8.
I've used nearly everything and for a while I did all my development in vanilla JS. If I were to rewrite Gate One from scratch today I'd still use mostly vanilla JS but I'd also use underscore and definitely an event library like OnOff (it's just like backbone's events but without all the MVC cruft that is pointless if your app doesn't use a db back end). 
This looks a lot like my OnOff event library (https://github.com/LiftoffSoftware/OnOff). A really great feature you could add would be something like 'once()'. Which would be called the next time a matching event is triggered and never again.
Just realized I forgot the link to OnOff: https://github.com/LiftoffSoftware/OnOff
One problem I noticed is if I I add the slightest motion during the click, turning it into a mini-drag, it doesn't register anything. 
TIL: Corporate Ipsum exists: http://www.cipsum.com/ Made my day.
Clever. This is a very creative idea and it's pulled off very well. 
This was a great write up - thanks!
First thing, you need an interface to the database to interact with it. If you have some kind of REST api, you can read data with a GET, do some javascript wizardry to determine if anything has changed and write back changes with a POST. You don't need a library for this -- maybe jQuery to get $.ajax, but that's about it. 
Why are you learning programming with JavaScript? You should learn Python first. Easiest way would be to just add an increment variable which gets incremented every time you find a new odd and print using that. Also, get rid of that nested for loop—it's not doing anything. var oddCounter = 0; for ( ... ) { ... oddCounter += 1; document.write(oddCounter + ...) } **EDIT** 6 downvotes for recommending people learn Python before JavaScript? How about some arguments instead of "I don't like it"s?
Well, a few things ... First, you're treating the variable "odd" like an array, but you aren't defining it or using it as such. Second, your code is strangely nested -- so for every increment of "i" you're looping through your odd array when you don't need to. Lastly, you are iterating through your result array, but not referencing the index -- you just keep repeating "i" (you wouldn't notice this until you first the first two though). Here's a quick fix for you; http://jsbin.com/uViXozo/1/edit?html,js,output **EDIT** I should add that your code could be more easily condensed to; var j = 0; for (var i = 0; i &lt; 100; i++) if (i%2 &gt; 0) document.write(j++ + ": " + i + "&lt;br&gt;"); 
Nothing shows up on the website. I have JavaScript disabled.
This is great. Thanks.
It works fine in Chrome. Try it again. Maybe it was a temporary problem.
Definitely not. It hasn't worked for the past two weeks. I did download the program from somewhere else, though. Thanks for the help. 
You just forgot the curlys. for ( ... ) { if (..) { for(..){ //code here } } } JavaScript is a C descendant, lots of semis and curlys. ;-) 
Are you running something like Adblock in your browser? In my browser, the download button didn't work because the function `dcsMultiTrack` wasn't defined because the file http://tags.tiqcdn.com/utag/logitech/main/prod/utag.js was being blocked by Adblock. 
That must be it. I'm on my phone now but I was getting that dcsMultiTrack error. I knew it was weird because I don't have NoScript, and I didn't even consider it might be Adblock. 
:S, It doesn't flicker in Firefox 17.0.9 (Linux).
Awesome. It worked fine in FF. I played until I hit 21K and then I got tired. It might be more fun if the faces started to speed up over time or something like that. Have you posted this to /r/onetruegod ?
Works for me, too, on Chrome and Firefox.
Same with Windows Azure too.
Nice! Looks like it's already really far along, very cool. How easy do you picture the rest of your plans being? do you have a twitter or something so I can follow this?
var j; var i; var odd= []; for (i = 0; i &lt; 102; i++){ if((i % 2) !== 0){ odd.push(i); } } for (j = 0; j &lt; odd.length; j++){ document.write(j + ": " + odd[j] + ", " + "&lt;br /&gt;"); console.log("j"+j); }
Thanks. Yeah, I should totally amp up the gameplay and make it harder as you go. I have not posted it to that subreddit, I didn't know about it, but I will though!
Love it!
the reason your indices aren't increasing is because you're creating a new array `odd` at every iteration of your outer for loop. (`var odd = [i];` is nested in the for i from 0 to 99). also, your for loop that then prints the numbers in the array `odd` is nested in there as well. this means that each time through the outer loop you end up creating a new array with `i` in it as the value at index 0. because there is only that one number in the new array (which is set as the first element) the inner loop always only loops through (and prints) index 0. what you're probably looking for is something like this: // creates the array `odd` that will contain the odd numbers var odd = []; // loop `i` from 0 to 99 for (var i = 0; i &lt; 100; i++) { // if `i` is odd if ((i % 2) == 1) { // append `i` to the array of odd numbers odd.push(i); } } // loop `j` through all indices in `odd` for (var j = 0; j &lt; odd.length; j++) { // print the index we're at and the value in `odd` at that index document.write("" + j + ": " + odd[j] + ", "); } if you want to print indices starting at 1 instead of 0 (like in your example), just change `j` to `(j + 1)` in the document.write call.
yeah, I understand. I was asking more in that sense of general performance, not comparative. Thanks. The project looks interesting nevertheless :)
Hoping amazon s3 or something similar supported GET Range requests and PATCH submits. This would be very doable all without a server-side. Not scalable, but it'll have a small subset of users. Unfortunately AmazonAWS only supports Get Range, no PATCH.
Yeah you can do it on greasemonkey. Shouldn't be too hard to get all links that have the renew and add a target attribute to it. 
Works fine on Firefox 24, except for the Shift key (at least for me). Nice game, though a bit dull. (Love how the shots get your plane's angle, though). EDIT: The Shift key works too, I just misused it - a severe case of [PEBCAK](http://en.wikipedia.org/wiki/User_error).
Just use npm and get over it. It's most popular and superior to all the others.
Whenever people bring up FRP and JavaScript I point to [Knockout.js](http://learn.knockoutjs.com/). In addition to being FRP (depending on how you define FRP) it has declarative bindings. This means that you don't need to explicitly bind to an element, you do it implicitly. It also means you can bind one property to many elements.
What does the the table of letters on the left mean?
What options have you looked at? Would a node/connect/noSQL setup be suitable?
I think it's showing that it's using a section of the source code itself as the map - the operators are the columns?
Cool - I see where I've made some mistakes here. Thanks for all of the clarification and sorry once again for such a basic question. 
That is really clever! I wish there was an easier way to get these things to work though. I really dislike the way you have to use the global scope. After playing around a bit I came up with this: var Decorator = (function (window) { //A variable to store the decorator that is going to be used next var activeDecorator; var activeScope = window; function Decorator (decorator) { this.decorator = decorator; //when valueOf is triggered on a function Function.prototype.valueOf = function () { //check if there is a decorator to add to it if (activeDecorator) { //change the function to a decorataed version of it. //The function is changed/declared in the global scope because to my knowledge that's the only way. activeScope[this.name] = activeDecorator(this, activeScope); //null the active decorator var activeDecorator = null; activeScope = window; return 0; } //return the actual function like nothing happened here return this; }; } //just sets the active decorator when triggering the valueOf of a Decorator object Decorator.prototype.valueOf = function() { activeDecorator = this.decorator; return 3; }; Decorator.scope = function(s){ activeScope = s; } Decorator.scope.valueOf = function(){ return 1; }; return Decorator; }(window)) var scope = Decorator.scope; //Initialize new Decorator object var memoize = (function(){ //initialize a meomoized object var memory = {}; return new Decorator(function (fn, scope) { return function () { //set the arguments which the function is called in to a string. var args = ""; for (idx in arguments) { args += "," + arguments[idx]; } //set the key to store the result of the function call. base on the function name and called args var key = fn.name + args; //if the function call is not memoized yet, call the function and store the result in the 'memoized' object. if (key in memory == false) { memory[key] = fn.apply(scope, arguments); } //return function result return memory[key]; } }); })(); //create a new constructor function TestScope(){ //this sets the scope for the function double +scope(this) +memoize +function double(param){ alert(param);//If memoize works, it should only alert once, even if called multiple times return param*2; }; } //new instance of TestScope testScope = new TestScope; testScope.double(2)//this alerts 2 and returns 4 testScope.double(2)//this remembers the value and returns 4 
This time I did some fixed step raymarching: It is a bit less precise than Wolf3D which checks exact ray/wall collision in 2D, but since I do cast the rays in 3D, I could easily render something à la Minecraft ;)
Don't worry I will explain all the details in the next 1-2 days. If that helps, you can think of WOLFENSTEINY as: TEA STORM meets MINI DISTRICT meets WOLFENSTEIN. The earlier two being some of my most [recent JavaScript tiny demos](http://www.p01.org/).
Ah, nice. I look forward to your explanation of the code. I've always been interested in size-optimized demos like this but have never really been able to wrap my head around they are done.
There is one problem with the way events are used in this example: they say what should happen! Events describe what has happened, not what should happen. It is up to the receiver of the event to decide what to do, and the sender of the event should only say what has happened. The reason is simple: an event can have many receivers. You might start out with one event having one receiver, and so it is tempting to name the event what you want the receiver to do, for example `'List.UpdateFromServer'`. This could happen when a new item is added in another controller. But then add a count of the number of items, and you want to show this in a third controller. But with the event name above the code would look something like this: $scope.$on('List.UpdateFromServer', function (newItem, newCount) { $scope.itemCount = newCount; }); This makes no senes, since you are not getting anything from the server. It would be much better if the event name was someting like `'List.ItemAdded'`. Notice that the name is in the past tense, describing something that has happened. Events should always have names in the past tense. It is now up to the receiver to decide what to do with the information. One receiver can decide to fetch the list from the server, while another can decide to display the number of items in the list. But don't completely dismiss using services. Events are great when you have many receivers, but in some scenarios you only have one receiver. If you know who is going to do something, then you only have one receiver, and using events is not a good idea. In these scenarios using events becomes akward. When the user clicks a button and you want to show a popup, then sending the event `'Popup.Requested'` might work, but the name tells us that something is wrong. The user requested something; it was a command from the user. Nothing has happened yet; we want something to happen. In this case a PopupService is a better way to do things. This PopupService would have a method which can be used by anyone which has it as a dependency: `PopupService.showPopup(url)`. Because there is only one popup service we already know who would receive the event, and so it is better to call the receiver directly. In most cases you would want a Controller to react to this, so the PopupService needs another method as well, the `PopuService.setReceiver(receiver)`. Whenever anyone calls the showPopup method, the PopupService forwards the call to the receiver. So **TL;DR** * Events are used when there are (potentially) many receivers * Events should only ever describe something that has happened * Events should have a past tense name (ButtonClicked, UserLoggedIn, etc) * If you know who (single instance) is going to receive the event, then it is not an event. * Instead use a Service, and call the method on the service directly.
You interpreted State.Update has a command, that wasn't intended at all. By State.Update I just meant State _has_ Update. Feel free to call the event State.HasUpdated or State.Updated. I should point out however that calling an event "Update" is very standard. Edit: As an example, all of the jQuery events are written in this tense. 'keydown', 'click' etc. By your logic, they should be called clicked or hasclicked or UserHasClicked. Events are never quite necessary, really, you could always just expose hooks. It leads to a much cleaner code base though, keeping logic neatly packaged.
Awesome, got it going, thanks! What about it is outdated? Just curious trying to learn as much as I can.
Seriously I have no idea why almost all the reactive programming sources barely even mention knockout.js, or in general the MVVM architecture that is obviously a similar approach. They also seem to be focused on dealing with event propagation from the gui, but I think they need to emphasize that the concept is more general. It can be usefull for managing "computed values", and it reminds me of some of the ideas in this article http://shaffner.us/cs/papers/tarpit.pdf
Ok, not very familiar with the naming conventions in Angular, but we try hard to differentiate between events and messages. Events should always have past-tense names (HasUpdated) while messages are commands and should be imperative (Update). This prevents any confusion in usage.
jQuery is based on the original DOM events, which used to be `onKeydown`, `onClick`, which for some reason was reduced to `keydown` and `click` when `addEventListener` was used, probably to reduce the redundant `on` eveywhere and because there was no ambiguity when using it in `addEventListener('click')` as opposed to `&lt;button click=""&gt;` Also, jQuery screws it up by having click be both a command and an event listener: $("button").click();//trigger it $("button").click(reaction);//react to it 
You made me curious, so I googled a bit. Looks like the past tense thing is common at least in C#, however not so much in JavaScript. Just like you say, the naming convention comes from the original DOM events, but it is pervasive in the JavaScript world. http://stackoverflow.com/questions/11450397/javascript-event-naming-conventions
`document.write()` is frowned upon. A more common practice would be, for example, to have the iframe in your HTML, but not give it a `src` attribute, and give it an ID, for example, 'video'. Then, somewhere after that, but usually just before the closing `&lt;/body&gt;` you add the following script: &lt;script&gt; var videos = [ 'Ig-DbfPoz3o', 'estPhyfBGho', '6JL4hpnZklk' ]; document.getElementById('video').src = 'http://www.youtube.com/embed/' + videos[Math.floor(Math.random() * videos.length)] &lt;/script&gt; or something like that.
Not the wolf3D engine. Cool project, but nowhere near wolf3D.
&gt; TEA STORM meets MINI DISTRICT meets WOLFENSTEIN The only part of this that I understand is "WOLFENSTEIN."
Which browser did this happen for you? The only issues I could find: 1) If you click inside the checkbox and drag outside of it, it won't "check it". But that's kinda expected 2) In IE, the animations are little less obvious.
You might like this approach: http://www.2ality.com/2011/12/fake-operator-overloading.html
It's basically x86_64 Firefox 24.0 on Linux. &gt; Mozilla/5.0 (X11; Linux x86_64; rv:24.0) Gecko/20100101 Firefox/24.0 Iceweasel/24.0 It happens even when the drag stays entirely in the checkbox. At first I thought it wasn't registering some clicks, but then I figured out I was dragging very slightly. It's working fine in Chromium on the same machine. 
Python-like*
Check the link in my previous comment. FWIW [TEAS STORM](http://www.p01.org/releases/tea_storm/) and [MINI DISTRICT](http://www.p01.org/releases/MINI_DISTRICT/) were on [/tinycode/](/r/tinycode/) not long ago.
Awesome, thanks for the heads up! Really appreciate the help.
This won't work in any version of IE, unless you add a polyfill for `Function.name`... which will get ugly fast.
Also in Windows 7. Rather damped my impression. Concept is cool, though.
http://emberjs.jsbin.com/UFoVoGO/2/edit?html,js,output This could probably be trimmed down some more, but there's about 66 relevant lines of code between the templates and Ember code. 58 if you don't count the script tags wrapping the templates, which you wouldn't have with a build process. You'd defined a bunch of views that didn't need to exist. The rendering helpers are very handy: http://emberjs.com/guides/templates/rendering-with-helpers/ Some of your templates were just proxies for another template. I moved that into the render hook in the routes. From: http://emberjs.com/guides/templates/links/ &gt; The {{link-to}} helper takes: &gt; The name of a route. In this example, it would be index, photos, or photos.edit. &gt; At most one model for each dynamic segment. By default, Ember.js will replace each segment with the value of the corresponding object's id property. ... &gt; If there is no model to pass to the helper, you can provide an explicit identifier value instead. The value will be filled into the dynamic segment of the route, and will make sure that the model hook is triggered. I figure you probably read that page to learn to use the link-to helper and how to pass it models for your dynamic segments, so I don't know what you found so confusing about that error message, but this is the first Stack Overflow result when you google the error message: http://stackoverflow.com/questions/17937433/uncaught-more-context-objects-were-passed-than-there-are-dynamic-segments-for-th Likewise with binding attributes. The docs are actually very good if you really read them. I don't know why you'd expect pre-1.0.0 Stack Overflow stuff to be relevant. They were really upfront about how it was going to be volatile up until 1.0.0 release, about a month and a half ago. The 1.0.0 API is stable now. It is sad that it's difficult to find version filtered stuff on SO, though. Ember has a lot of source, but it's well organized, so you don't need to know all of it to contribute. It also does a lot. You can't blame the framework for being huge when you use it for something trivial. Tilde is very good at breaking components out for isolated use. Seeing as how your app uses no models or controllers, or any of the other neat computed property/binding/runloop/etc. stuff Ember gives you, you could probably just use handlebars, and https://github.com/tildeio/route-recognizer 
Thanks. I need to think about mobile or decide if I even care. I am lazy.
Possible, but still need server to generate bearer token. It is also possible to use oath connect token. I had pure static angular js app, that post user test result to google cloud storage and analyse them. Indexeddb is used to cached data. Also note instead of loading all data, only meta data of the file is fetch and indexed to database. Only necessary file are loaded from gcs. The app is available at https://github.com/yathit/feature-matrix it is not multi user app, but not far.
I can understand that position, but there is some context to this project that is lost in the mix here. p01 has been coding homages to Wolfenstein 3D for several years, such as [this one](http://www.p01.org/releases/20_lines_Castle_Wolfenstein/), which is a somewhat more complete raycasting engine replete with keyboard controls done in 20 lines of JavaScript(no canvas), which eventually led to [this one](http://www.p01.org/releases/WOLF1K/), ultimately culminating in the 251 byte version linked above.
There wouldn't be a bearer token, access to files are set by a signed policy generator that gets sent to the javascript app so it can read/write with specific permissions. The authentication server handles oauth bounces and generates the signed policy file. This is the only part of the stack that actually requires a backend system, although even it is pretty sparse as it just responds to oauth linked/facebook requests and matches signed policies (or generates them) to oauth responses.
It is of no surprise to me that an Ember developer can do my Ember example better than me. Maybe "You should have been better at doing Ember right" would be fair criticism of "Ember doesn't work very well," but my criticism of Ember is "It's hard to do Ember right, very easy to do wrong, and the rewards aren't actually worth it." &gt;this is the first Stack Overflow result when you google the error message When I googled the error message, I got the forum post with the unanswered question and a technical discussion on the Route abstraction. Just because the right answer is out there doesn't mean it's as easy to find it as you claim. It's like you're saying "You shouldn't have found anything confusing," which doesn't give me a lot to go with. I read the documentation as best I could. I found Angular's to be far more helpful. You aren't going to convince me otherwise by blithely saying they're "actually very good." 
Probably true, but not the reason I was thinking of. Python teaches good programming habits, whereas learning JavaScript instills not the best programming habits, some bad ideas, and perhaps a slew of other problems that would harm the thinking of a new programmer. For one, client-side JS is almost inevitably tied into the DOM, which is a terrible API. Learning programming through JS is like having a giant monkey (DOM) on your back the entire time. I think it's telling that the most popular book on JavaScript is called "The Good Parts of JavaScript", immediately creating a separation between the "good" and "bad" parts. This, global namespace, confusing scope, strange truthiness, semicolon insertions, and variable hoisting, just to name a few. I like JavaScript, and I recommend everyone learn and use it. It's got a lot of good parts. But I wouldn't recommend anyone learn it as a first language.
Probably to save bytes. requestAnimationFrame is a longer name (hence more bytes), and I doubt that you can pass a string into it to be `eval`ed, which means he'd have to make a function first, which is still more bytes.
Really now.
Is that like Web 2.0?
Title should be 'Raycasting demo in 251 bytes of Javascript' A Wolfenstein 3D engine would need to take and process player input, read assets from pak archives, collision detection, enemy AI, render textures, sound, etc. This barely does anything. 
There is nothing wrong with building full JavaScript apps in this day and age. http://tomdale.net/2013/09/progressive-enhancement-is-dead/
There is one thing wrong: it requires JavaScript to be enabled. Many would argue that allowing arbitrary code to execute from any number of websites is an exploit or bug. The example that site gives is complete crap by the way. No other way to put it: it's complete crap.
Let's just agree to disagree then.
I would agree, except JavaScript is an integrated, well sandboxed runtime that at this point is completely ubiquitous amongst web browsers. To expect anything other than the most static of sites to feature no javascript is to be in ignorance of the modern web. It's like worrying about running arbitrary apps on a mobile phone. Even if some tried to do something malicious, they couldn't (at least not without your explicit permission).
[The language we've all been waiting for!](http://www.reactiongifs.com/wp-content/uploads/2013/03/magic.gif)
If it becomes an issue, I will opt for using an Object literal. or use the arguments object. 
This is the correct question.
Not really a Wolfenstein 3D engine, but really cool nonetheless. 
HTML5 pretty much became umbrella term for bleeding edge client side web technologies.
Only a few months ago that there was a JavaScript exploit in Firefox that compromised users of Tor. Yes, running JavaScript from random sites I don't trust is worrying, which is why I don't do it. * http://thehackernews.com/2013/08/Firefox-Exploit-Tor-Network-child-pornography-Freedom-Hosting.html * http://pastebin.com/96htM60z
A loop hole that was quickly blocked shortly after being disclosed. Blocking javascript completely because of a few very edge case bad actors seem to be an over reaction to me. Edit: I should also point out that you're posting this on a thread about a javascript framework and a subreddit dedicated to javascript.
EXACTLY
There's a bug in the demo. Tried to insert 123 as first name and it says "Only alphabets are allowed in the last name."
Java was blocked for similar reasons. None of these arguments apply to server-side JS.
Java was also poorly updated and on a whole other level of unsecure. It also doesn't have quite nearly the sandboxing of Javascript. I don't see what "server-side" has to do with this. Ember and Backbone are both client side frameworks.
Sorry about the title. Let me blame, a bit, Twitter and its 140 characters limit for that. Actually this little demo does not use what is commonly called 'raycasting'. The title should really be: '*Fixed step raymarching of a regular 2D grid demo in 27 bytes of HTML and 224 bytes of JavaScript using the Canvas 2D API*'. But such title doesn't speak to many people. When you mention 'Wolfenstein', most people have an idea of what to expect. Granted it's not precise, but I'm sure we can live with such approximation. Hope that sounds reasonable. 
Why is it when I do a jsfiddle of this, the little map doesn't show up? Edit: Changing the T value is kind of fun. .01 makes it pretty slow.
&gt; Suddenly, JavaScript, the language that has before seemed impossible to be given structure, has it. QooxDoo gave it structure a long time ago ;)
For the millionth time, HTML5 specifies more than just markup.
Right so you still need a server that understand PATCH/GET? This is a tricky one I think
but this is not "251 bytes of HTML5"
Yeah. AmazonAWS S3 have everything other than HTTP Patch :/. In addition I need some sort of signed policy access list control. This is available with most CDN static services though. Sigh. My dreams of client side processing only are slowly dying.
Using jQuery / prefixfree just to apply two or property change based on random number ;-) People, please stop!
&gt;edit: Stay classy, r/javascript There *ARE* no classes in javascript! DOWNVOTE
Awesome! These are great examples of pushing the boundaries of JS. 
I agree with you on most points, but JS doesn't have to be tied to the DOM... there are a [ton](https://github.com/maximecb/Higgs) [of](https://github.com/joyent/node) [projects](http://www.flashjs.com/) defending this idea.
Another one? This is getting fucking silly now guys.
I think there are some free auto mobile optimisation tools out there though I've only just started it myself
Yes, I'm sure Logitech wants people to download their software that helps their products to work. &gt;_&gt; They make money on their hardware, not this.
Fine, but if you're going to be a pedant, then you'd better be accurate, too.
It doesn't have to be, but it usually is, and I'd imagine most intro to JS books deal primarily with client-side JS.
Well, I'm guessing that in theory this should be enough: var allLinks = document.querySelectorAll('a'); var i = 0; for(i = 0; i &lt; allLinks.length; i++) { var link = allLinks[i]; if(link.text === 'Renew') { link.target = '_blank'; link.click(); } } EDIT: I've never user craiglist myself, so I'm assuming that the links are just links with the "Renew" text - To use this, you should be able to just copy paste this to the javascript console (F12)
;) but this one is pretty, right? *...right?*
I think psychologically it works against you. You get people's expectations up (mine included) when you mention Wolf3D engine in the title. To their dismay, it's nothing of the sort. So then instead of appreciating it for what it is, it's compared unfavorably to what people think it should be. 'Raymarching demo in 251 bytes of Javascript' might not be something that will get a layman's attention but this is r/javascript. Odds are the people here will have an interest.
no need to act like an ass. There is plenty of room for more than one thread of conversation here. you'll probably find what you are looking for here too
Great stuff, looks like were finally catching up with the fidelity and complexity level of FWA level Flash sites. Now if everybody would be so kind to upgrade their computers and use fancy browser.. :P
If you want a good guide about ray casting, check out [Permadi's tutorial](http://www.permadi.com/tutorial/raycast/rayc1.html).
Seeing a lot of comments about how this isn't HTML5. It is, because it's using the `&lt;canvas&gt;` element, which basically requires JS to do anything useful. Saying anything dynamic and graphics-oriented is done in HTML5 is basically saying HTML5 Canvas, which implies JS. If they were to say it was done in JS, it would be equally/more misleading, since JS does not imply HTML5/Canvas. This is pretty neat, and makes me hopeful for the future of web-based games, though it clearly needs some optimizing, since you can see the scan lines in some spots. That may be a deficiency of Canvas.
My best jab at the answer: Every HTML element has properties and methods in the DOM. The standard ones for canvas just happen to include methods for drawing stuff in the document. How would the browser know what to do with a `&lt;canvas&gt;` element if such instructions weren't in an HTML spec?
Would have been really good info for OP to post that, because of course, everyone else wouldn't know of that info otherwise. Still, like I said, the title is misleading but cool project nonetheless.
Totally. People should post whatever they want with any title that they like, regardless if said title is patently untrue or is a huge sensationalization of the actual content. It's completely unreasonable to hold people accountable for saying stupid shit. When it comes to getting clicks and upvotes, the end justifies the means. And the only acceptable kind of whiny post are those which whine about other whiny posts, much like your brave post.
&gt;The JSBin is your code, just slightly reorganized. I know. I'm considering reworking my LoC claim, but part of that will take into account my previous generosity in overlooking the code I had to write as an API that Angular made inessential. &gt;I don't believe it's fair for you to say anything about the rewards, as you haven't experienced the vast majority of them. You shoehorned Ember into a role in a toy app that needs almost none of its functionality. My goal was to see if I could do something _simple_ and _essential_ with Ember. * URL structure * View hierarchy * API calls That's it. If Ember can't make that easy for me, I am **not interested.** And I'm aware that there's functionality I haven't tried. Some of it I take for granted--I know how data-binding works, I know a thing or two about Ember's run loop, I carefully took in [the comparison of two-way binding in Angular, Ember, and Knockout](http://www.youtube.com/watch?v=mVjpwia1YN4&amp;feature=share). I am not exactly coming into this wholly ignorant, nor am I assuming that anything I haven't personally touched doesn't exist. I'm making a statement about the rewards I have seen already, not insisting there are no further rewards to be gained. &gt;My statement about the docs being good is based on the fact that I sit in the Ember IRC channel and try to put in some time every day helping beginners out, and something like 90% of the questions people have, I just link them to the appropriate section of the docs, and it solves their problem. The docs are good because you know them well enough to reference them quickly and correctly? I never said the information wasn't out there; I'm saying that there's too much of it and it's not cohesive. --- Look, you're not going to convince me. I've had enough frustration. If I'm missing out on the best of Ember, I guess that's just my loss. 
/r/tinycode would love this
Congrats! I may dislike JSX, but I've come around to having another alternative to data-binding kicking around :D
Congrats to the dev team, seems like this is an early build (or tech demo) but it's neat nonetheless. :) If I can make some comments and crits (if I can understand what you're trying to do here, and the dev team is aware of this thread)... - Awesome work! Quite a hefty undertaking. I'm also especially impressed with the design work on the front page - flawless. Eye-catching, simple, easy. - Suggestion: eliminate AJAX completely. Don't worry about fallbacks for websocket - AJAX is way too slow and performance-inhibiting to be of any use for a real-time webapp. All client-server communication once the game is initialized (and not hardcoded) should be done via websocket calls. Who cares about browsers that can't support it - if there's no websocket support, you're almost guaranteed there's no WebGL support. Go big - you're exploring awesome technology, don't get hung up on legacy protocol and paradigms. - You say you're using node for the game server, you might want to experiment with Go. Amazing support for multithreading with goroutines, this is what the language was designed for. Forgive me if this is intentionally a JS-only tech demo. :) - One minor, minor complaint: There's no drag in space! ;)
:) You have some semantic elements and some of them are so extra special you can interact with them via JS, like canvas. That all gets defined in the same spot so it's HTML5: "This specification is limited to providing a semantic-level markup language and associated semantic-level scripting APIs for authoring accessible pages on the Web ranging from static documents to dynamic applications.", from http://www.w3.org/html/wg/drafts/html/master/introduction.html#scope But arguing whether or not something is or isn't HTML5 is probably the least productive thing you could do on Reddit (next to circlejerking in r/atheism, maybe).
Yes. When you don't know how to code and can't spell DOM you need a crutch. As Sir Laurence Olivier told Dustin Hoffman, "Learn to code, my dear boy!" But Auntie Em! I only know Angular! Too bad, young man. We use Backbone. Back to your studies. I'll have nothing to do with you.
Response was a little too sane to be taken seriously.
The best two conferences each year are JSConf and JSConf EU. Both are amazing in quality of talks, people there, and production values. Make those your top priority. If you are interested in Node.js, I would put NodeConf and NodeConf EU next on the list. Great format, great community, great times. But you said front end, so maybe not a good match. After that I prefer to go to destination conferences. LXJS in Lisbon, HuJS or JingJS in China, Fronteers in Amsterdam, maybe one or two of the South American conferences, or JSConf AU... One thing I can guarantee is that the JSConf events, and JSConf family events, will be much more enjoyable than the more corporate-ey ones like Fluent Conf or HTML5DevConf. The people putting them on care more about the experience and the community they are building. Check out http://jsconf.com/ to see all of them.
You're being downvoted, but you're right. I'm really not impressed with most of the "buzzword" frameworks out there right now. They all attempt to do things by breaking the rules. Knockout puts logic inside DOM element properties. Handlebars mixes logic and HTML. Backbone is just as kooky, and limited. It seems more and more like all these "solutions" are really just stepping-stones for the people who write them to gain notoriety. How many more MV** frameworks are needed? I'll write another one tonight, and post it to github and then spam all the blogospheres about how "beautiful" it will make your code. 
Since we're on the downvote train here: As much as I hate to admit it, it's really a lot of back-end envy. I love JavaScript. I like to see it grow. But... Having an MV* framework in your V of your other MV* framework is convoluting those roles for the sake of abstraction. JS needs a different paradigm in the browser. Something to both represent markup and data... Something at its core maybe... Maybe some kind of Document Object Model.
Ember Data has a bunch of issues for advanced usage, but you can use it for simple data fetching like this without any worries. That's been true for a long time. ED does a lot of crazy, magic cache management and ORM stuff, and it's way beyond the scope of basic AJAX. The biggest hassle is that it's not API stable, like Ember was before 1.0.0. But this is so simple it's not worth pulling it in. Here's your app without your API code: http://emberjs.jsbin.com/iGoWila/1/edit Added a couple of controllers to decorate the model response from the reddit API, to keep the templates looking sane, and switched to render helpers, appropriately. Up to 75 lines of relevant code, or 68 if you don't count the script tags again. It's a common misconception that you can't just do $.getJSON() calls for your models, for some reason. Again, it's right in the docs: http://emberjs.com/guides/routing/specifying-a-routes-model/#toc_asynchronously-loading-models edit: I forgot you could chain promises (I don't do it much with ED). Was reminded by the docs I linked: http://emberjs.jsbin.com/iGoWila/2/edit Chained the promise on the ThreadRoute, returned a simplified object to use as the model. Didn't need the ThreadController anymore, so got rid of it. Now 53 lines of relevant code. edit: I miscounted on the second one. It's actually 66 lines. I think I forgot the application template.
+1 templates with recursion aren't the primary language. The templates have recursion just because they reflect models with recursive structure. I don't really know what the alternative would be.
Thank you for finding that bug, I have fixed that now :)
o_O? This is not a deficiency of Canvas or anything. The scanlines are there on purpose: It is a style decision I made considering the visual style and size constraint I set for this demo.
WebGL is not available on my browser, the error is not displayed and goes silently to the console during loading.
Nice, but the movement isn't organic enough - Have a look at this example (still not great though!) http://codepen.io/outofroutine/pen/CADvB
"All objects (classes) created this way will be stored in the global $class variable." ... why? 
I can't tell if you're being sarcastic or not... The DOM is an API interface that is implemented in a variety of languages to manipulate markup language. HTML, XML, and other markup, is really just a form of annotation or definition. This is all fine and well, but by itself, is not suitable for large UIs. At somepoint, you're going to want commonality in your UI, and this will inevitably lead to abstraction. You want a dialog box, it should always have a title and a message and a close button. Well now I need a module for that. Then you'll end up having a bunch of modules with repetitious code that inserts the module's generated HTML into the DOM. So now you need a common class with say, a render() method, to avoid repetitious code. Voila you have a view. Now you'll want to display some data that comes from somewhere else. Say you have also developed a series of RESTful APIs. Since you developed it, presumably they all have some common, predictable features, not least of which is following HTTP in a purist fashion. You need to abstract away the means of talking to these APIs to avoid repetitious code. Voila, you have a Model. Now whenever a model updates itself, you'll probably want one of your views to do the same, perhaps passing the data through other chunks of logic before it is displayed. Not only that, but you'll want to trigger logic on models when a user interacts with a view. These series of callbacks could all be written in your HTML file but that's hard to test. So you create a class to bind events from views and models. Perhaps several classes in order to keep things a bit organized. One for the user registration form, one for the search form and search results, etc. Now you have a controller. 
Why do you think MVC is a nightmare?
Depends on what you see as a nightmare. If you have a site with a lot of javascript and user interaction then some of those tools may help you to structure your code. Others may give you a lot of additional functionality but come with a burden of additional complexity. All depends how you use those things and for what you use them. Deciding which tools are worth using becomes relevant step when planning the architecture of your project. Sometimes it may be easier to implement the one and only feature you need from a certain tool by yourself in other cases you need the whole thing and accept the complexity (in such cases the complexity should be even worse if you don't use it)
if you don't want to start a flameware, or if you don't want to sound like you're starting a flamework, you're going to have to offer up somemore specifics? what do you find overly complicated about require? how would you simplify it while still having the same feature set? or do you think we don't need the features require prodives? re backbone, which i myself do not know very well, what would you use it its place? do you think we don't need a cross-browser way to structure our apps in models and views and controllers? (if you don't i'd love to hear what you'd use instead, i'm no fan of MVC, but i can't think of anything better)
Working for a reputable digital marketing agency - we are being asked to code in a more MVC/MVVM way to write even the smallest bit of code. It's just making my life awkward, I could write competent, future proof and readable code in a fraction of the time in a standard OOP direction. **Perhaps I'm just moaning**
Depends what you are using JS for, if you're just writing some event handlers and a bit of animation then you don't need a framework. If your entire app is JS based with thousands of lines of code then you will benefit from an MVC framework, same as any programming language.
I'm just after a discussion of what other people think, read my replies to view details. " if I had a one page website with JS only providing animations. MVC is overkill right...?"
For me (15+ years experience with javascript) has never been so easy and fun programming javascript as in the last years, and this is also because the projects &amp; similar you are talking about. Sure it can be complex, but is rather a dream than a nightmare, imho.
Appreciate your views, I too have been coding JS for around 14 years. I just feel like everyone is going mental with pushing these JS frameworks. I agree some projects are helpful, but there does seem to be a obscene amount of libraries/frameworks available... Every man and his dog is bringing one out.
Wouldn't a (decent) OOP piece of code do the same thing?
well, if you don't use MVC then MVC is overkill; i totally agree. but you started out saying "...are people trying to make javascript more complicated than it needs to be?". it sounds to me like you may be forced to make *your* javascript code more complicated than it needs to be, but that's a problem between you and management, not a problem with javascript or the libraries you mention. though i have to say i'm still confused, what is the "Standard OOP direction" you're talking? and, if you going to use object oriented programming with capital letters, aren't you going in the highly structured/organized direction of MVC anyway? or is there something unstandard or unOOP about MVC?
It's just the general "seperation of concerns" - Having Models and Controllers for Javascript. Just seems wrong to me, that's all. I feel a little attacked by your comments...
&gt; Perhaps I'm just moaning Well, usually I would say that self-diagnosis is never the way to go... MV* didn't emerge by accident. It emerged as a response to the increasing complexity and maintenance challenges that arose when websites became more and more complicated. In those situations, it is the right tool for the job for most people. If all you're doing is simple behaviour and you're being forced to use an MV* framework, then the **problem isn't the framework it's the imposed requirements**.
Cheers for your input!
you seem to hint (but i'm not sure) that you have a page that uses js just to provide eye candy and you're being forced to use tools designed to structure data-centric applications; if that's the case, but you haven't made yourself very clear, then i would say: your javascript to too complicated, i'm sorry. but if you're developing an entire application in javascript, an application where both the design and the functionality are implemented on the client, then i feel that the libraries you mention serve a real purpose and i don't see how we could work without them (or without something else almost as complicated). finally, i am attacking you a little bit. i don't want to be mean, but you're asking a very general question and not providing enough information to give you a helpful answer. i've asked you a few very specific questions and only gotten vague answers ("Just seems wrong to me, that's all." is a very hard statement for me to respond to). if you do want a discussion, and not just 'bar talk', then you'll need to put some more time into your answers. However, if it is true that "Perhaps I'm just moaning" then it doesn't matter what i say, does it? moan away, though i feel a little bit a fool for having taken the time to think about it, but oh well.
hey, it wasn't meant to be personal. if you want more discussion (and lots moaning) try ##javascript on irc.freenode.net; it might be better for this than reddit. 
If all you need to do is write 'even the smallest bit of code'. I don't see why you are using an MVC framework/library for it. If you are just building a quick standalone form, or adding some interactivity to the page, just use straight jQuery. Even a very simple multi-view single-page app can be done in straight JavaScript. For me, its fairly instinctive to recognise when a project is complex enough to warrant using an MVC framework/library.
I think that a new generation of coders is growing up (i call me out :) bringing new ideas and methods that are yes exciting but also overwhelming. So I just watch them, waiting them to die or evolve and become mature... it would be irresponsible for the company i work for to adopt any new framework popping out, but ignore them would take out part of to the fun. Take for example express.js or require.js... Those are good example for me to rejoice. Backbone, angular and others are interesting but they would not improve my productivity. Ps i'm a dojo coder and i can't like jquery - just to tell a bit more about myself :)
When you do more with javascript than just control simple animations on the DOM, you need these things in one form or another. I find require.js to be an essential part of javascript. It gives modular functionality to the language where it doesn't have it natively. For me, the thing that really complicates these frameworks is the lack of strong typing. And I'm not talking strong typing like what is enforced in Java or C++. I'm talking just the trivialist attention to detail of what is passed into the functions of an API. "This param can be an object, a string, an array, or an integer." What?? Also, Javascript allows you to pass any number of arguments into a function no problemo. Have too few? They become undefined. Have too many? The function just drops them. What?? These deficiencies make it very easy to create loosey goosey interfaces that make their use and maintenance a nightmare.
Would you mind providing an example of this nightmarish code and also how you would do it in plain JS?
&gt;Design decision A pretty ugly one IMO 
A lot of this has to do with what people are programming. In my personal projects, I've never seen the need for backbone, ember, and similar MVCs. In projects with lots of people, some working on the M, others on the V, it's necessary to separate those into modules. In websites with lots of objects and interactions, it helps to have inheritance and UI updates worked out for you. 
As a hybrid language, both functional and oo paradigms should be used when appropriate.
This statement was a breath of fresh air in all this ocean of OOP crap!
I think it's a comfort thing. I use jquery for damn near everything. Why? Because I hate mangling the DOM without it. I know a javascript guy who is as comfortable with [vanilla.js](http://vanilla-js.com) as with jquery, and who used to pitch a fit that we used jquery so much. He got over it.
http://jsconf.asia is happening this November in the Philippines. Consider it a great way to get a vacation on the side — lots of fine beaches over there :) (Disclaimer: I'm one of the organizers. Contact me if you're interested, let's work in a reddit discount :)
&gt; what do you find overly complicated about require? RequireJS is not complicated in itself but does require a build step before you go into production. I've also noticed certain race conditions using RequireJS which give different outcomes before/after the build step. I think the main question is what problems does RequireJS solve? It mostly seems to be avoiding global namespace collisions. Is that really a problem for most people? 
One good reason why MVC is a nightmare is that people don't entirely agree what it actually means. There are the purists, who see it the way it was originally intended, where a view and a controller are paired up to operate on the model. Controller is for input, view is for output. Many view/controller pairs work together to handle the I/O for the system, and the model is the business logic. Then there are the pragmatists, who tend to see it the way it has ended up being used - with the view comprising all aspects of the UI and the controller being the logic that mediates between the view and the model. This viewpoint probably came about due to the prevalence of database abstraction layers and ORMs, which can conveniently be labelled as the model, implying that implement your business logic elsewhere, ie. the controller. The first approach doesn't work well for modern web applications. The second approach loses many of the single-responsibility benefits of the first. So we usually end up with some hybrid.
i'd like to point out, that upon loading the page w/o clicking on anything, your focus is on the timeline item in the background; which is capturing the arrow keys, and makes scrolling down w/ the arrow key require clicking the article to change focus. you should change that.
&gt; It emerged as a response to the increasing complexity and maintenance challenges that arose when websites became more and more complicated. You young whippersnappers! MVC is twenty years older than the web!
True. In particular, the controller is often what is most unclear. I like to keep the fundamental reason in mind why the MVC pattern is so useful: it's all about state synchronization. Essentially, the MVC implements a star-like topology, with the controller as the center. State updates are coordinated by the controller. The view is notified of updates by the controller etc. without MVC, the state updates and view updates can easily work in parallel, causing these to deviate. Imagine a text view, showing a counter. The naive approach is to manually call update(view) after directly incrementing the counter. But what if the counter is incremented in several places in the code? Then you have to put update(view) calls at each one of these places. Then you may have to refactor the code, introduce new behavior, and need to replace each and every one of these occurrences etc. With MVC, state update and access goes through one component, the controller. Update notifications are sent automatically, so no manual update(view) calls are necessary. The actual increment process can be done in the controller, making refactoring much easier. Multiple ways to edit the same state are automatically synchronized etc.
JS development is no different than development anywhere else and is full of people who go "you're too high up! you don't know anything about what makes all this work!" C programmers will scream at ruby/python/php devs with the precisely the same complaint. "You don't know the intricacies of GC, you don't know how memory is allocated" etc etc etc. (I enjoyed abstracting your complaint btw :P ) I do agree that over engineering is a problem. People who can't understand that a design pattern is suggestive, rather than absolute, often create incredibly large chunks of code for very simple things. But that said, nowadays, it's safe to regard web application development as no different than any other UI development. The differences are very small.
It sounds like your current use-case of "a very basic application" - then yes, tossing a MV* framework like Backbone, Ember or Angular JS on top is over kill, and could be complicating things. It can be like using power-drill with 1,000 bits and attachments to it when all you need is a simple phillips-head. But, for complex applications - these frameworks can become a great asset to use. I've built a few things using Angular, some are in production, others are still in development - and the benefits of using it have been great, and with one of the things that just went to production, I honestly do not think I could have developed what I did, has fast as I did and how robust, flexible and testable as it has been had I been trying to build it from scratch or only jQuery. One of the things I'm really enjoying about Angular JS, is that it allows me to focus on what is important - the logic of my client-side application. My DOM-manipulation considerations are almost non-existent now, and when I do need to worry about messing around with the DOM - I have a clean and obvious place to put it (directives) that isn't messing up my logic. I don't need to worry about two-way data binding, and how if I update a property on an object in one context - how to propagate it to everything else that cares about it. Yes, I could do this by hand/scratch (and I have many times in the past), but it is such a huge time saver knowing that when a value changes on the screen - my object reflects it, and if I update my object - the screen reflects it I can't imagine /not/ making use of that any more. The simplicity of creating services, and being able to easily inject them where I need - so no matter what controller/directive/other thing is calling MyServce.get({id:1}) --- if things in that MyService changes, I don't need to update everything calling it as long as the inputs/returns are the same. Yes, I could do this without angular, but toss in a good DI framework, testing environment and mocks - frankly, why recreate that wheel - smarter people who are working on this. When a deadline is looming - I don't have the time to re-create all of this stuff, I need to get stuff done. It's not my job to roll my own client side MVC framework (which is what I need for most of the things I build) - it's my job to build applications, of which a MVC framework is an **appropriate solution for the problem**. If it's not an appropriate solution for the problem you are trying to solve - then yes, you are simply making it more complex. For me though, it's simplified things greatly and lets me focus on what matters. 
but... prototypes are OOP and therefore OOP is built in. Maybe not "classical", but still OOP. If you're complaining that people are trying too hard to make it seem like "classical" compile time OOP, well okay, but "OOP should be avoided" is a little heavy handed.
I hate posts like this..."I only want a discussion" then when ever someone makes a valid point against your opinion you act like it was a personal slight. Stop posting Shrek YouTube videos and just learn a new framework. 
No it wasn't. Js has prototypical inheritance for a reason. 
Not sure what I'm missing here, but isn't MVC a standard OOP direction? And what specifically about MV* is a nightmare if you're from an OOP background? Unless you're building an SPA, I probably wouldn't bother with an MV* framework - but if you are, it makes a lot of sense.
I wasn't blaming you specifically - I meant 'you' generally, as in 'all people who would post such a misleading title' As for demos, I'm a big fan of the demoscene, but none that I've done myself. Well none that I've published. As a teenager in the early 90s I played around with x86 ASM and ModeX and BIOS calls and all that jazz. It was fun and I made some nifty things with fractals and geometric shapes and colors dancing around but nothing worth writing home about. These days my time is devoted less to 'fun' programming, but I still sometimes check out the demoscene. Sites like [pouet.net](http://www.pouet.net/) are a great resource. And while not technically demoscene, [JS1K](http://js1k.com/) is a great site that continues the spirit of demos into modern times. 
Not bad. I'll add a notation with the updated jsbin to my article sometime tonight. While I have you interested, could you illustrate the best way to get the url structure to match Reddit's? That is: #/r/:subreddit goes to the subreddit list, and #/r/:subreddit/:threadid goes to the comment thread. 
MV*, OOP and so many libraries do not exist as a definitive answer to anything. They all address different problems in different ways, none of them will ever be the panacea. I do not think they are making JavaScript complex. If anything, they make it simpler. They are tools and we, as developers, have the duty to learn how and when to use them. But I do agree that people are trying to make JavaScript more complicated than it needs to be. Point in case: coffeescript. I won't go into detail on what's something that's been discussed over and over again by much brighter minds than mine, but it comes down to taking JavaScript, try to make it look like something it is not and add a lot of downsides on the way. All because people didn't bother to understand or write the syntax the way it was designed. This is what bothers me the most, not only about coffescript, but similars like HAML, SASS, et al. It's just saying "this language sucks, but the one I use is awesome, so I'll write that other one that sucks in mine because I'm right and you are wrong", and end up with a complicated version of a very simple thing.
link to the interactive page is: http://stgcp.net/ajm/3d
As someone who has done only a bit of JS *for web pages*, but has lots of experience coding in Python, Node.js, ObjC, Lisp, C and other languages, I have to say, I'm breathing a *huge* sigh of relief now that I'm seeing these frameworks coming out. Browser JS always seemed like the messiest most disorganized, adhoc and error-prone code I've come across. I avoided it like the plague. I'm particularly interested in frameworks like Angular/Ember/CanJS, and even excited (for the first time ever) to write web front end code. More people will be able to write extremely powerful applications because of these frameworks. So, I'm quite excited about them. 
Well OOP and MVC are not mutually exclusive; for some tasks, if you want to write a decent piece of OOP code, you need to follow a MVC pattern one way or another. It's not like when you use OOP, you can't use MVC...
&gt; (I enjoyed abstracting your complaint btw :P ) That was kind of awesome and gave me a chuckle. I see where you're coming from and I think you see where I'm at too. Lots to ponder as it all unfolds around us. In the end, it's better than stagnance I guess - we could all still be trying to do this stuff in Cobol.
good to know!
I'm new to the realm of MV* frameworks. I've done a little bit of delving, but not much. As you appear to have familiarity with some of the most popular ones, is there a clear winner as to which one I should learn first?
MVC MVP MVVM are patterns not code.
The thing to remember is that the right tool for the job is "the right tool for the job". There isn't a one size fits all answer. If whatever you're using is appropriate for the task, then it becomes reasonable. 
Thank you! As for the pointer lock, I incorporated that in order to have a continuously orbiting camera, and I have just added a note to tell people it will request pointer lock.
&gt; I think the main question is what problems does RequireJS solve? it manages the dependencies between .js files so that i can load only the bit and pieces that i actually need; it (using the same dependency chaining mechanism) allows me to build optimized and minified js files containing just the code a specific page needs; the local renaming is just a nice little convenience, i could happily live without it. i've never noticed the race conditions, but require (as it exists in dojo, which is what i'm actually using) isn't exactly the easiest tools to use...
&gt; I'm not saying this is wrong, but it does drop a lot of the benefits of the data-file based approach. you're totally right. we lose all (and not a lot of) the benefits of the data based approach. in particular we lose: * sharing of the schema across languages. * global naming of schemas (schemas can't be attached to a uri (well, the could, sort of, but it'd be a hack))). * processing of schema in languages other than javascript * use of the schema for things other than validation (as you said, code generatiors, api browsers, etc.) * validation (at least syntactically) of the schema itself. (it is possible in my approach to write a non-terminating schema) * following a standard (so now users of our data have to learn yet another api/language) * and probably more... it sucks to lose all that, sure, but in my case (and in almost every case where i've seen people try to actually use json schema), none of those of those things actually have any value (i've yet to read documentation generated from a json schema, i've yet to reference a url from a json schema, etc.). but maybe that's just me, and if so, that's totally ok. but the big thing you get for that (assuming you can give those things up) is that **all of your schema validation is actually in the schema**. json-schema can only verify those things that it knows about , and you can only describe those constraints that json-schema lets you express. this functional approach grew out of the need to express, among other things, that a date field be a monday. as another example, why does json-schema specify multpleOf but not powerOf? isn't that a reasonable thing to want to specify in your schema? with json schema you have to have your schema validation and then, somewhere (more than likely in multiple places) your code will have to re-validate the data with whatever constraints you can't specify in the schema. 
Thanks for that clarification. We never could have figured that one out. 
not quite but close. js also support s protoypical inheritance therefore functional and POP is ok. the problem is attempting OOP with halfway implementations.
I've been seeing javashit used to obfuscate itself at least since the early 90's. My money is on Job Security Through Spaghetti Code.
Not trying to be a dick here, but you could have just typed the title of your post into Google, or something similar, and found results. http://stackoverflow.com/questions/14511036/how-to-change-module-timeout-in-require-js http://requirejs.org/docs/api.html#config-waitSeconds As an aside I'd recommend using the [RequireJS optimizer](http://requirejs.org/docs/optimization.html) so you don't have to load several scripts, but instead load one smaller script. Keep using RequireJS for development so it's easier to debug your scripts, but in production you should consider minifying and concatenating your scripts. If you do this the payload will be smaller, and people with slow connections will have less problems.
If you had actually tried to learn the mer basics of it (like, gosh, opened wikipedia: https://en.wikipedia.org/wiki/Model_view_controller), you would know that **MVC does NOT implements a star-like topology**. I'm getting sick and tired of all these people who "learned MVC" from one framework or another.
One other thing... while cell-shaded effect is pretty cool I have trouble distinguishing depth. Might I suggest putting a very light grid on the bottom to give the eye just a little bit of orientation? Perhaps this ruins the effect though.
I think that frameworks make sense if you're going to be writing large amounts of JavaScript. If you opt to not use a framework, but still try to write consistent code, you're going to end up with a ton of boilerplate. Why not let a framework reduce that boilerplate for you while also offering guidance? It just seems like a natural path to follow. If you're not sure when is a good time to start using a framework... well, consider the fact that, if you've never used a framework before, it will be a lot easier to learn with a small code sample to iterate upon rather than attempting to convert a pre-existing codebase. You should evaluate where you want your project to go before even starting and, if you believe it will grow beyond a simple scenario, build with a framework from the ground up, IMHO. Source: https://github.com/MeoMix/StreamusChromeExtension I make this. It's a ton of JavaScript and I can't fathom managing it without BackboneJS. 
How do you expect to innovate and move the platform forward without doing library innovation? Having a ton of options to pick from is merely a consequence of a staggering amount of library-space innovation happening right now. Lots of this library innovation feeds back into the specification, as well. Promises will be baked in soon. Prototype and others' implementations of various Math, String, and Number built-ins are making it to ES6. You didn't mention language innovation, but the wealth of options there (TypeScript, CoffeeScript, etc.) also helps drive the entire platform forward (TS helped solidify ES6 classes, ES6 arrow functions and destructuring patterns are inspired partially by CS). Basically, what you're seeing is the result of having a healthy platform that drives innovation at a staggering pace. It's a great time to be involved :)
This seems to only output "true" or "false"; is there a way to find out more information about what's wrong with the schema? Like, for instance, if a field is supposed to be a string, and an integer is given instead, some way of identifying the jsonpath and type error? Also, any plans to port this to Python?
I spent a bit of time looking into Backbone, Ember and AngularJS about a year ago. In each one I sort of made a similar 'contact app' - list, edit, view contacts. I also read up on a few others, but didn't spend much hands-on time with them. The one that clicked the most with me was Angular JS, and would recommend it as a starting point to learn. First, there is a bit of a hype-train around it - I started working with it before it really blew up - but I must admit that there is something a little comforting in feeling like I made the right-choice in going with it for a major application I am working on seeing the amount of steam and support it is gaining. That said, making a choice shouldn't be based on hype alone. Another thing that I liked about Angular, is simply using POJO's for working with data. Personally, I hate needing to do stuff like var X = Ember.Object.extend( { stuff }) and using something.get('property') - that said, there can be some really useful things that can be done with computed properties / etc in Ember that would be nice. I also like the markup/templating system in Angular - there is a bit of room to abuse things here, ie: modfying a model from the view with ng-click="item.property = somethingElse", but to me, there is something much more intuitive and understandable of &lt;input data-ng-model="something.value"&gt; and things like &lt;li data-ng-repeat="item in items"&gt;{{item.property}}&lt;/li&gt; compared to Ember with {{input type="text" value=something}} {{#each items}} &lt;li&gt;{{this}}&lt;/li&gt; {{/each}} I also find creating controllers / views / etc and the relationship between them to be easier to understand with Angular than Ember. The learning curve with Angular is a bit like a hockey stick - really easy to get up and running, then it has a steep increase then levels out a bit, where Ember felt like a brick wall right at the outset. Knowing the environment/team that I work in - having something that is quick and easy for people to jump into and start working with / maintain other peoples code is important. I've had people that generally don't like javascript / consider themselves javascript developers be able to jump in and enhance / add a feature / fix a bug in Angular code that I've written without needing to provide much guidance - much of the code just feels like normal JavaScript/logic/etc that is easy to grasp. I also found with Ember, I'd feel like I kept 'coding myself into a corner', and needing to scrap large parts of what I was trying to do because I wasn't fitting in with their rather opinionated structure / way of doing things. With Angular - I've generally found it very easy to rip things apart, rearrange things, pull things out into reusable components and piece things together as I need without feeling like I need to 'scrap and restart', or I've gotten myself into a corner that I couldn't get out of. But, for another point of reference of Angular vs Ember, there is this article - http://eviltrout.com/2013/06/15/ember-vs-angular.html which raises some points and is in favor of Ember. This isn't to say that Angualr doesn't have it's own downsides/pitfalls - it can be hard to wrap your head around a few things like scopes, directives, etc - especially if using a directive that creates it's own scope and how binding can work between things. A tip though, is if your using ng-model, if you don't have a 'dot' your doing it wrong - ng-model="property" vs ng-model="object.property", it can be tricky to understand binding to scope vs binding to object, and if you have a directive that creates it's own scope you can have issues. There is also the issue of getting things to play nice with jQuery and jQuery plugins - but there are two sides to this story. One side is - if you want to use jQuery with your Angular code, you should be wrapping that logic up inside of a directive and using $scope.apply/etc appropriately to keep the two talking with each-other nicely. On the other side, is I've found for MOST things, you actually don't need to use jQuery or your plugin of choice - and it's actually less hassle to write your own native 'angular' way of doing things. Often the hoops people jump through to get their favorite jQuery plugin working would have been better spent just creating it from scratch again. There are a few exceptions of course - date pickers / etc, but once you understand enough about it before looking to write a wrapper for some certian jquery/plugin functionality - seriously consider if you'd be better off just doing it from scratch. 
You need to use a closure. By the time the onclick function is run as a callback (asynchronously), i will equal 4. The trick being by the time the function runs, the loop has already ended and since you are using i in the context of that loop, it will equal the length of the loop. To get around this, in the loop you want to save that index within a closure which links to the item. for (var i in array) { (function(i) { p.onclick = function(){ console.log(i); }; }(i)); }
This is a weird property of javascript. This fix makes sense but there is no way that it should by default be handled like this.
Well, yes. It seems counter-intuitive. If you look carefully it makes a lot of sense. If i is simply a counter which tracks which index of the loop you are in, and you call this function after the loop has ended. Of course i will be the length of the loop. A more intuitive example would be if instead i incremented once per second as a time tracker, and you make a new paragraph also every second with the same onclick function. Would you expect each paragraph to log the amount of seconds at which it was created?
It's not weird, this is how closure capture would work in most (all?) languages that have closures. Taking a snapshot of the environment for each function would have poor memory characteristics.
Thank you very much for your extensive reply. Angular is the path that I've gone the furthest down so far. The one thing I've learned is that I really need to improve my understanding of JavaScript and OOP in general. Hopefully continuing with Angular will be advantageous for better understanding of all of thee above. Thanks again. 
For the same reason as bunkbed's answer (closure) you can also use this. Though it relies on [Array.prototype.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) (JavaScript 1.6). array.forEach(function(item, i){ var p=document.createElement('p'); p.innerHTML= item; p.onclick=function(){ alert(item);//Will always be pie (array[array.length]) alert(i); //Will always be 4 (array.length) }; document.body.appendChild(p); });
I agree. I think there's many frameworks/libraries built by people who don't truly understand the problem they're trying to solve. Infact, the frameworks may have been built to help them understand the problems their encountering. Take any MVVM/MVC library. Most of the templating, binding, etc can be done with less code and less time in pure JavaScript/HTML. No need for "handlebars" or templates. I don't believe these frameworks provide enough value for the complications they bring. Take the all too popular "two-way" binding (which isn't really FRP, but I digress). Why not just put getters/setters on your Models properties to add/remove/change HTML? Instead of templating just define the HTML and copy nodes/append nodes/replace nodes when the model changes within the getters setters? If you really need to track view changes, overload the getters/setters of properties you need to track on the DOM objects. I think people make solutions to problems that aren't really problems, simply because they lack the experience or knowledge to program it in the native language. Great example: Anonymous functions. I can't tell you how many times closure and anonymous functions are used haphazardly. I think it might be good for someone to put together a list of javascript features/capabilities/examples and a definitive list of what they're good for. Maybe that way, if we had some sort of rationale, people could make better choices before including a 100K+ framework that doesn't really do much.
Angular is not that complicated, and is in my opinion the best front end framework out there by far. I've used Backbone, Ember, and Angular in production projects and Angular was the most powerful and simple for sure. I think the reputation for complexity comes from how in-depth it goes, but for the basics needed to build an app, it's pretty simple. I picked it up and became very productive with it in a day or two. Once you start thinking in terms of doing everything within the angular scope, it really makes sense and is quite beautiful and elegant. The only issue is a lack of good documentation. Backbone wins in that regard. What exactly are your requirements?
I am not sure if I will write any Javascript now without going into some sort of a MVC model (whether it's an existing one or done from scratch). If you are writing a complex system in the browser, you owe it to yourself to start thinking of using a MVC/MVVM framework to strive for quality. One discipline that separates a good engineer and a script kiddie is testing your code (in an automated way). As your Javascript code in a system get way too complex, it can turn into a hairy, duplicated and unmanageable mess. You got to ask yourself, how much of your code is testable then you will start to understand the need for MVC/MVVM type of approach. Working with something like Mocha, Sinon and Jasmine along with Backbone, Ember and Angular has really made me a much more confident and effective Javascript developer over time. Especially if you have continuous integration regressing your unit tests and integration tests, I am just that confident that what I write mostly works as expected. I do agree with you there are too many Javascript libraries that are unnecessary. For example, some parts of jQuery like ID element selection that can be done faster with vanilla JS. Also underscore offers ease of use but most of the methods can be done faster vanilla as well.
Don't use a form for navigation. What I'm guessing happens is it starts submitting them all, but each submit replaces the previous submit. What are you trying to accomplish?
How would you lazy load an empty div? There isn't anything to load. There isn't anything to be lazy about.
In my instance, the canvas has content that is operated on by JavaScript. Since I have about 100 canvases, I need lazy loading or the page takes 30 seconds to load.
Sounds more like you need lazy interaction between the javascript and the canvas. I would put your canvas initialization functions in a queue and listen for page scroll. When that happens, loop over your queue and determine which canvas elements are visible. For each one that is, execute the code and splice that one from the queue. 
itt: blub programmer complains about the difficulty of blub programming in javascript
I'd probably collect all the forms that need to be submitted into an array, and use setTimeout to submit them in a queue-like fashion (pop an element of the array, submit it, setTimeout to do the same in 750ms if there are elements left in the array). I can't guarantee it'd work, though. CL is pretty heavyhanded in dealing with people who try to cheat the timesinks they put in to prevent spamming.
Oops, it's late. I meant: how do you like the require.js feature that the define() function has 5 different signatures.
And I'm just sitting here trying to debug [this](http://i.imgur.com/xxyeqCh.png).
Looks great! Thanks for keeping the source legible.
this is great. thanks for sharing!
I never knew #2 however I'm running this snippet in a function so that the variables inside the for only last for the duration of the function correct. I also feel like I tried your first point and it didn't work. Thanks for the education though! I'll be coming to /r/JavaScript much more frequently that's for sure.
I didn't know that in JavaScript the variables declared in a for loop have a scope that extends past the for loop. (Which is weird Non of the other language I program in do that I'm pretty sure.) I'm new to js, but that combined with asynchronous proccessing makes code that seems realitivly straight forward frustrating.
It's fine because it is well documented. You can do the same in C++. It is called function overloading. The issue is the latent bugs caused by poorly documented APIs and lazy programming where you might miss an argument and weird things start happening. You get undefines showing up where they don't belong. The only real strategy to combat this is for your API functions to be highly defensive with input checking, throwing exceptions when the types aren't allowed. (Nobody does this, however.)
Thank you. I was about to say, HTML+CSS/DOM/JavaScript already has a very-VERY competent View/Model/Controller built into it. Your view is HTML/CSS, your model is the Document Object Model, your controller is JavaScript which binds to events the user initiates. 
Sure: http://emberjs.jsbin.com/owORimI/1/edit Nest the route: RedditApp.Router.map(function() { this.resource("sub", { path: "/r/:subreddit" }, function(){ this.resource("thread", { path:"/:threadid" }); }); }); Tell the route to render into the application template's outlet, instead of the parent template's, since you said you didn't want a master detail layout: RedditApp.ThreadRoute = Em.Route.extend({ ... renderTemplate: function(){ this.render("thread", { into: "application" }); } }); Adjust the link-to with two dynamic segments to match the route definition: {{#link-to "thread" thread.data.subreddit thread.data.id}}{{thread.data.title}}{{/link-to}} I messed up counting last night. I think forgetting to count the application template or something, which is mostly just some hard coded links for the sub nav, but whatever. This puts it at 70.
Just learn the DOM, vanilla javascript and HTML. There's really no need for anything else.
+1. Outside of creating your own directives, Angular is actually really intuitive, and things like angular-ui/router make angular even simpler. I had zero experience creating a large javascript app but with angular I've been able to build out something substantial from zero angular knowledge in 2 months. 
+1 as well. I'm very new to angular, coming from a strict .net MVC/jquery environment. Angular has been very easy to learn and I am going to start using it in production soon. I started going the knockout direction, as it is now packaged with Asp.Net MVC, but I find angular to be much more intuitive and well thought out in regard to how the framework is built. The lack of documentation is a little frustrating at times, but I find that I never have to spend too much time to find the information I need.
Great job! How long did this take you to build? On a related note, you might dig this: http://jeanhelfenstein.com/rotsketch/app/
This is pretty anecdotal, but I threw ~2 million floats at it with no mismatches. http://jsfiddle.net/VZNnf/
I was destroying my performance by logging every iteration. Here's a modified version that does 100mil random numbers and logs a tick ever 10mil. This takes roughly 25 seconds my machine. http://jsfiddle.net/CVmdb/ That's another ~1 billion numbers converted back and forth with no error detected on my end.
Cool. Thanks for that.
It took me only about an hour to get the basics down but I've spent countless hours tweaking it to what it is now (with all the controls, patterns, blur, and colors). Also, that link is pretty cool!
&gt; Also, Javascript allows you to pass any number of arguments into a function no problemo. Have too few? They become undefined. Have too many? The function just drops them. What?? This is a problem with the programmer, not the language. Also, what you describe is a superstition. Superstitious programming is the hallmark of the novice. If you code a function with multiple arguments, and you are calling it without supplying all the arguments, or too many arguments, then that is not a problem with JavaScript. If the code breaks or gives unexpected results because you do these things then you are probably not disciplined enough to be writing software in the first place. I often write functions that accept multiple arguments in javascript, and it has never once been a problem. If an argument is undefined, you can bet that I expect it to be undefined in some cases and the function handles it appropriately. Passing in different types is also never a problem because I know exactly what is getting passed in arguments. It really never has been a problem, ever, not at all, not even once. I'm really tired of people whining about javascript when they should really take a look at themselves. 
Busting out the MVC is overkill for my Hello World app, so I don't like it.
Told ya it'd do well here. Get it on CodePen now and Tweet @codepen to pick it. \^_^ Definitely deserves tens o thousands o views.
Function invocation implies that control has been returned to the calling scope; so no, you can't call a self invoked function.
Hey, I'm the React zealot on Reddit (slash on the core team :)) I expect lots of debate from this :) I wrote a blog post a while ago about this: http://www.quora.com/Pete-Hunt/Posts/Facebooks-React-vs-AngularJS-A-Closer-Look First of all I think it's important to evaluate technologies on objective rather than subjective features. "It feels nicer" or "it's cleaner" aren't valid reasons: performance, modularity, community size and ease of testing / integration with other tools are. I've done a lot of work benchmarking, building apps, and reading the code of Angular to try to come up with a reasonable comparison between their ways of doing things. Community / project maturity --------------------------------- I think Angular's big advantage on React is that its open-source community is larger since it's been open-sourced since 2009 I believe and we only open-sourced in May 2013. So there's certainly a bigger ecosystem of Angular code and docs than React at this time. We try to compensate for this by being super responsive on IRC/Twitter/Google Groups, but it's still an advantage for Angular for sure. Please don't confuse that with project maturity though. We've had React in production at Facebook since 2011. And while that's two years younger than Angular, we actually use it on all of our major JS initiatives for Facebook and Instagram. Even though Google maintains the project, they aren't betting much of their core products on Angular at this time. So while our open-source tooling may be a bit immature, I'd wager that the React core is probably the most battle-tested of any modern JS library except for jQuery and Google Closure (which is what they use on Plus and other properties). Performance -------------- There's two ways to look at performance: how performant is your code written the naive way, and how hard is it to optimize within the constraints of the framework? With smaller apps Angular and React don't have a noticeable difference in performance. When you scale up, both can get a little slow, but their performance is still comparable (I think React is a bit faster usually since we dirty check only what's rendered vs all the data in Angular, but that's certainly debatable and not really that much of an advantage anyway). React really shines in terms of performance when you want to optimize. React optimizations are just one-liner methods added to a single component to provide "hints" to React to help it short-circuit change detection. We should really write a blog about this, but usually you can add one simple line of code and get crazy (20x) speedups. With Angular you have to basically turn off data binding for parts of your application since it relies on dirty checking via $watch(). This is slow because you have to keep two copies of the data model around (expensive) and do an O(n) check on each change. At this point you lose many of the benefits of Angular. The thing is, Angular's philosophy about performance is that 50ms is imperceptible to humans and is an adequate level of performance (http://stackoverflow.com/questions/9682092/databinding-in-angularjs). I think this is crazy: when motion is involved humans can perceive hiccups as small as 16ms (which is why browsers run at 60fps. Movies run at 30fps because the camera captures motion blur). So if you want to use declarative data binding for direct manipulation via touch, you're gonna want to be able to do it in under 16ms. That's the level of performance we aim for (and get) with React. You have to work around Angular to get that level of performance. Also, Object.observe() will help in the future, but it's unclear whether it will ever be as fast as our technique which doesn't require any browser support. I've read the implementation of Object.observe() in the v8 source code and it has similar downsides to using getters and setters for everything (I've heard it may change in the future, though). Finally, I don't think Angular directives have a great notion of lifecycle. With React (and Ext, and some others) we batch reads on the DOM and writes to the DOM. I don't think Angular has a way of enforcing this with directives since you're free to do any sort of DOM manipulation within them. This can be a *huge* source of performance problems if you aren't disciplined everywhere (which is hard to scale in a big eng org) Mechanisms for code reuse ------------------------------ If you look at Angular examples you'll see fewer lines of code than for React. That's because Angular's built-in directives are optimized for simple tasks, which make for great demos but break down when you try to build anything big. When you try to build something big, you'll be writing new directives. The problem is that Angular directives were designed to bridge JavaScript and the DOM. Specifically, you write them in JavaScript and invoke them from the DOM. This has a few implications. First, since you're not invoking from JavaScript, Angular has rebuilt some programming language features without going all the way and admitting that it's a new programming environment. This is why isolate scopes are hard to use. Second, directives are hard to compose. You need to basically invoke them from a string in your template (or parse it into a string from the DOM). This makes them impossible to statically analyze and easy for people to screw up and introduce XSS holes since you're passing a string into Angular. This is clear from the fact that the default recursion limit in Angular is 10. Since composing directives is so annoying, they end up being basically mini-jQuery apps that are pretty hard to maintain. Since they're hard to maintain people don't use them enough, so you end up with monolithic directives or fat controllers. When you get these big modules, changes in one part of the codebase require changes in other parts of the codebase, which reduces maintainability. Said another way, coupling goes up, cohesion goes down. React is all about data flow between loosely-coupled, cohesive components. See my deck here: http://slideshare.net/floydophone/react-preso-v2 Server rendering ------------------- React was built from the beginning to support server rendering (i.e. the React core does not use a *single* browser API). Rendering in PhantomJS isn't really an option for us since booting up a whole DOM to handle a page request is simply too expensive to do at scale. Sure -- it works for mostly static pages or low-traffic sites, but if you want to get the awesome performance benefits it won't scale. I'm not even sure if Angular supports reusing server-rendered markup like we do (the only framework I know of that does this correctly is AirBnb's Rendr). Tooling integration --------------------- Both projects have some issues here -- we encourage the use of JSX syntax which may cause users some friction, and Angular came up with its own module system rather than use the battle-tested CommonJS standard as well as having problems with minification and DI. Angular's community size compensates for all of the stuff that they've invented. The fact that you can precompile your JSX to regular JS and that React reuses community standards and tools for everything means I think that we're pretty even on this front too. Simplicity ----------- Angular is built on the idea of adding HTML attributes to make it powerful enough to build applications. This is not a solid theoretical foundation and results in lots of neologisms -- scopes, transclusion, directives, reliance on dependency injection (in JS? really?), its own module system, its own idea of model/view/controller, etc etc. There is so much to learn, and it's because the foundation of Angular is fundamentally flawed. It's sad too: if you read the source of Angular it's written very well. The team behind it is obviously very good. It just feels like they have to keep hacking around the fact that the core ideas are pretty bad. With React, the only thing you need to learn about to build scalable apps are components. My conclusion ---------------- If you're building a simple example or prototype, use Angular. Its built-in directives will get you farther in a shorter amount of time than React. But simple apps are simple until they aren't anymore. At the point you start needing to write a lot of custom directives, you'll really start to fall out of love with Angular like I did. And this point always happens earlier than you think you will (ever want to insert an extra row with ng-repeat?) React scales down and up and we use it at scale on all sorts of stuff (newsfeed, page insights, mobile site navigation, basically all new JS development since mid 2012). And we're around to support you when you try it out. I think you should give it a shot :)
That's what I usually end up doing, but isn't the purpose of self-invocation to say "do this code now and name it for future use"? Edit: It was also pointed out to me that it could be run like this as well - http://jsfiddle.net/dangoodspeed/p7BjT/2/ Not sure of the pros/cons of doing it this way vs just calling the function afterward.
Why name self-involed functions at all then? I know it's mostly used for anonymous functions, but I've definitely seen them named as well.
i think it's less obvious to other devs working in the project. but really the difference is insignificant, and i think either would be ok.
I honestly don't think there are any real runtime differences - or at least the differences would be an implementation detail of JavaScript engine you're running on - hidden far from you. I prefer this version to the one I posted, but not for any functional reason I can see.
Because it is not needed? This is not a complicated solution. On top of that, angular-ui router is pre-beta and under heavy development.
Your code does not set the `showtime` variable to be a reference to your function. It sets the variable to the *result* of *executing* the function. Your function does not return any value, so the assignment sets `showtime` to `undefined`. That's why it doesn't work when you use that variable later. You are really making this far too complicated. As ZeroBugBounce said, don't use a self-invoking function here at all. There is no reason to use one. Simply *name* the function, *call* it using the function name, and then you can use that name in your event handler too. That gives you clear, understandable code. The version in http://jsfiddle.net/dangoodspeed/p7BjT/2/ is not very good. It works, but there is no need for this kind of trickery. You should write the most straightforward code possible, like this: $(function() { function showtime() { var currentdate = new Date(); var time = currentdate.getHours() + ":" + currentdate.getMinutes() + ":" + currentdate.getSeconds(); $("output").html(time); } showtime(); $("button").click(showtime); }); http://jsfiddle.net/p7BjT/3/ That is similar to ZeroBugBounce's code but even more straightforward. Don't use trickery when you can write simple code instead.
I've been doing JS stuff for about the same amount of time, and personally, I think it's an exciting time for it, because of new frameworks and new HTML5 capabilities. I believe a lot of the appeal is that JS is such a free language, it's possible to shoot yourself in the foot so many different ways, and it can be hard to get people together on a team with the same sort of background, accustomed to the same kind of idioms. The MV* frameworks are valuable in the way that if I hire an Ember developer, I can get him up and running in an Ember team with a minimum of effort, because he'll already know the paradigms for adding certain functionality, and naming conventions, etc. Without that structure, just bringing them up to speed on what functionality goes where, and what to name things can be a big drain on brain resources. I personally really appreciate when there are conventions for that. But your mileage may vary. These things are for web apps, rather than traditional pages and brochure sites and stuff. As someone who cut his teeth doing DHTML for intranet UIs, I really appreciate what they provide.
Correct me if i'm wrong, but isn't the entire point of a front end framework to shift page rendering from the server to the client? What benefits do you get from pre-generation?
+1 for the facebook team, you guys rock
Prerendering on the server for seo purposes. You still have the normal front end app. For example Walmart or Amazon need product pages to be pre rendered so Google can find that product when you search for something on that product page.
What did you use to record the first gif? It's pretty.
So, what's happening here? Let's say I have the following expression: var showtime = (function () { alert('Showtime!'); })() That's like writing: function x() { alert('Showtime!'); } var showtime = x(); except that you don't have an `x` floating around afterwards. But you should see that what you are storing as `showtime` is the *result* of running the function, not the function itself. The function returns nothing, so `showtime` is undefined. So it should be obvious why `$('button').click(showtime);` doesn't work, since `showtime` isn't a function. It is agreed that the best way to remedy things is to write function showtime() { alert('Showtime!'); } showtime(); $('button').on('click', showtime); but let's see what else we can do. You could also write $('button') .on('click', function () { alert('Showtime!'); }) .trigger('click'); i.e. automatically click the button once on page load. Interestingly, you could also write var showtime = (function showtime() { alert('Showtime!'); return showtime; })(); $('button').on('click', showtime); The function has to be named in order for this to work, unless you use `return arguments.callee`, but let's not do that. I have named the function `showtime` and at the end of it, it returns itself. Now, the *variable* showtime will correctly point to that function, and you can use it as if it were one.
&gt; reliance on dependency injection (in JS? really?) would you elaborate this statement? i think DI is a good approach no matter what language. 
That is absolutely amazing. Very awesome. Could I do a similar thing for my high school Resume?
Lot of images is missing on the last level
Amazingly designed and done, but it's a bit painful to get to the actual information. It's all over the place and mixed in with irrelevant stuff (NBA fan?). I guess I works for this guy because he is a designer/developer so he is basically showing off his skill with the resume. Also this is potentially going viral so lots of attention too. But if anyone just wants to get a short overview of the guys experience, he's gonna get an epileptic attack :)
This is amazing
Backbone and Angular *can* improve your productivity if you're doing the right kind of project. If you can't at least appreciate jQuery then you haven't been coding JS for long enough. Way too many people abuse it but it's an incredible DOM abstraction tool.
Anyone else wonder why you have to scroll down when the information is coming at you horizontally?
Am I missing something? [http://imgur.com/Y69mbJ0](http://imgur.com/Y69mbJ0) EDIT: All your scripts and CSS are returning 502 errors.
i can't take anyone seriously who calls themselves a master or expert in that many fields. I also didn't take the time to look into his portfolio either, i just held the down button down to watch the little dude run through it all. edit: as pointed out http://www.reddit.com/r/javascript/comments/1ope8f/interactive_resume_that_hiroshi_yamauchi_would_be/ccueb3o his main.js file is terrible. he has script tags right after the opening body tag, and throughout the page. there are no sprites, that i can see from a cursory glance. 126 http requests for such a small page. complete and utter disregard for the global namespace. if (deviceName != "computer") { if (layersMovement == "vertical") { positionHorizontalLayersToHaveSameRightPosition(); } } terrible if statement, and an incredibly way to long named function really novice level stuff that would be talked about in beginner tutorials on what not to do. it's a neat page design wise. but it doesn't belong here in /r/javascript 
Oh dear. Looks like [something broke](http://i.imgur.com/aMSasfG.png)... 
I name them because my error reporting code can then show me the proper stack, as opposed to showing me a bunch of anonymous functions. For reference I use [stacktrace.js](http://stacktracejs.com/)
I had that the first visit too. A refresh fixed it.
Ah yes, it's working this time I clicked it. OP might want to make sure that doesn't occur regularly as people interested in hiring might have less patience than even your average reddit reader.
I think it's designed for a tablet. At least I saw swipe left/right, coming from an iPad.
502 bad gateway - i suppose that's the downside to an interactive resume :)
Looks quite bad on Firefox, and great on Chrome.
On the very first page he should have included a link to a pdf with his "actual" resume in it
Well if that wasn't a troll then I'm not sure why you replied. I'm not denying that javascript has good and bad parts. I never said javascript has no faults, did I? Where did I say that? You're trolling. If you don't know how to write code that works correctly given the design of the language, then you are doing it wrong. Your claim about function arguments being a problem with javascript is just wrong. If you don't know how to write code that doesn't fail because you are using the functions that *you wrote* in a way that breaks them, then the code *you wrote* is bad, not the language. It's perfectly simple to write functions that don't break given undefined arguments, if you expect the arguments to sometimes be undefined. It's how you design the function, not a flaw in the design of the language itself. 
If it is easy for reasonable programmers to make mistakes, that is a fault of the language, not the programmer. The fact that you can't understand some languages make those types of mistakes harder to make than others suggests a lack of experience on your part, tbh.
Not seeing how swipe left/right translates into "Scroll down, or use the up and down arrow keys," which is exactly what I get on desktop. I even caught myself trying to navigate with the left and right arrow keys because the guy was moving horizontally.
very creative! Curious as to how someone can be an expert level at JS but only proficient at jQuery.
I don't log in often, but when I do, it is to upvote awesomeness like this.
If you need an actual resume after seeing that then he may not want to work for your company.
also resumes contain personal information like address and phone number which you might not want public on the internet, I certainly don't.
yeah Im not a big fan of the self-ranking system people like to do in resumes these days. Just list what you know and you can talk about your proficiency in them at the interview. 
this is amazing! Can you tell us how you made it? 
So even though I don't like DI, I don't think it is the worst thing in the world. When you want to move fast while building a product for production, the trick is to have a list of properties that you want your software to have. Some are more important than others. For example, I think that explicit interfaces between modules and minimal (if any) shared mutable state are the two most important things. The reason these techniques are helpful is that they minimize cascading changes across the codebase (i.e. if you change module A, you have to update module B and C as a result). If you can avoid these, you can basically refactor your way out of any technical debt in the future. Another property I value (but further down that list) is statically being able to follow the flow of the program logic. This is why I don't like DI in many cases. DI basically adds another layer of indirection, so whenever you call into a service you can't just jump to its definition; you need to look at all your different providers and where they get hooked up and trace through each step. JavaScript makes it much harder because it's dynamically typed, so you can't use language tooling to help you manage this indirection. Additionally, contemporary DI frameworks (like the ones Angular is insipired from) came mostly from Java, where functions aren't first-class and the syntax is verbose for passing these services around. JavaScript on the other hand is nice and compact and has first-class everything, so I think the benefit of an explicit DI framework (vs just passing services as plain old parameters) is diminished. Finally I think DI is a little overused. Think YAGNI -- You Ain't Gonna Need It. I think avoiding extra indirection unless there's tangible value is important, so unless it's *really* some service that you need multiple implementations of (usually it's for mocking external services for test cases) I think making it DI is more costly than it's worth.
Props for being honest and putting a skill level with software/languages. I can't tell you how cynical a "Software/Language Experience" section of an application can make one who is hiring. I've met several folks that listed languages they obvious just wrote a "hello world" for. Maybe I'm too grumpy, but I hate that shit.
Thank you! There's a lot of code in there. Seriously, what would you like to know?
Coding: expert? Hmm :/ The [main js file](http://www.rleonardi.com/interactive-resume/script/main.js) made my eyes bleed. I really wouldn't call this javascript expert-level.
In 2013 you should be using a good browser. =)
Right that's even easier. That project uses phantomjs.
Indeed, rather he should have a quick-link to the last page where you can contact him for the actual resume.
Ha, I was just going to comment on that. I've been trying to find a decent JS developer to help out where I work... My gawd. I think everyone who's built something that involves DOM manipulation and a few bits of Ajax considers themselves an "expert". Link to the js for the lazy: http://www.rleonardi.com/interactive-resume/script/main.js ... All them globals ... 
&gt;function makeSeaAnimalsBlinking(seaAnimalEyeArray){...} &gt;function positionRobbyAtSeaFloorLevel(){...} &gt;function positionRobbyAtGroundLevel(){...} &gt;function closeSquidHands(){...} 
Very nice work! I work in an ad agency as well and for the most part developers are usually left out of the creative process and integrate their ideas adding in some cool things along the way if we have the time. I would think you would need quite the team of competent and creative individuals all working cohesively to get to this level of quality. How much time would have gone into this from planning to execution and how big of a part did you play? ps. I'm not trying take anything away from you, I'm just trying to figure out what kind of team effort this would be or if you're some sort of one man army :) 
that depends do you actually want to become a better programmer or are you looking for a tool to help you through something you don't necessarily have a strong passion for? If it's the former, then it's time to stop looking at frameworks for a while and start looking at how to identify problems, what kind of abstract design patterns exist to tackle those problems, then figure out the framework that best fits.
Say I have a list of items, and in each row of that list, is an &lt;a&gt; tag that when clicked, should open a dialog box. I have a view that represents the list (which is contained in a &lt;div&gt; or a &lt;table&gt;). When someone clicks on the &lt;a&gt; tag in that list, that click event will bubble up to the list's container tag. The view can register a callback on the &lt;div&gt;'s click event, then decide what to do with that click. This is better than say, having one callback registered on each &lt;a&gt; tag. So yes, I have a view that is responsible for one HTML element, and everything inside it. 
**features of the site** 1. Full-browser video - *HTML5 and broadband work well together* 1. portrait generator - *a generative art piece inspired by the work of Kumi Yamashita* 1. genome player - *lazy loaded frame sequence player* 1. passion picker dots - *limited magnetic pull* 1. Item Web - *using MVC to coordinate DOM elements and canvas elements* 1. friend web - *each friend is shown with a like or passion you have in common* 1. facebook integration - *uses the details and photos from your profile, share, set profile pic* 1. single-page site - *garbage collection is most important* **tech features** 1. variable media size 1. deep links 1. RESTful api 1. responsive design 1. server-generated shareable portrait 1. extensive use of HTML5 features **front-end** 1. Backbone 1. Underscore 1. Jquery 1. GSAP 1. Parallel.js 1. Facebook JS SDK **back-end** 1. PHP 1. Facebook PHP SDK 1. Express.js 1. Phantomjs **production tools** 1. Node 1. Yeoman 1. Bower 1. Grunt 1. Phantomjs 1. Jam.js 1. BBB 1. FFMpeg 1. PNGQuant 1. jquery.spriteAnimation 1. LESS 1. WebStorm 1. Sublime Text 2 1. Bash **design tools** 1. Photoshop 1. indesign 1. After Effects 1. Houdini 1. Cinema 4D 1. Maya
Shady behavior for sure. There are still references to Spry in the code, but it certainly looks like an attempt was made to discredit them.
There was a huge team on this. Nissan had a team, TBWA (the ad agency) had a team, and our production company had a team, all collaborating. Additionally we relied of outside vendors for certain aspects of the project including 3D animation and sound design. My role is as lead developer, and director during production. I had a team of 3 developers, 2 designers, and a producer within my company (plus the executives and directors above me). TBWA has a team of ~10 account reps, producers, writers, planners, designers, and Nissan has a team reviewing and approving throughout the process. TBWA came to us with the idea to make a portrait generator and a facebook like explorer. I was put on the project with a partner to develop that idea into the finished product, from look and feel to technical features to actual production of the site. I built 4 separate portrait generators using js and canvas before landing on this one. Additionally I architected the site, and I built a large portion of the UI myself.
Dubious of an "expert" javascript programmer who lists jQuery as a separate language. Edit: Also his English is fucking terrible. &gt;"Designed online advertising to promote many entertainment programs in AOL music website." &gt;"Designed and developed diverse online advertising projects such as rich media, banner, landing page, and microsite." Un-proofread resume is still going in the trash!
I really agree with this. I rolled my own solutions before reaching for a prefab solution (e.g., Backbone, Angular, etc) and it has really helped me understand the larger issues of what those packages are attempting to 'solve', as well as helping me evaluate each package's 'solutions' to said issues.
It will break sometimes deleting an object from the array of moons/shoots. I tried to fix it by incrementing backwards when checking if there was a collision of if they left the screen but it hasn't seem to fix some outlying condition I can't figure out.
Nice, thanks for the detailed response. Also, I like the Nissan logo in the console -- nice touch :)
You should **begin** with understanding MVC without frameworks.
He does.
I'm gonna start putting "god-tier" on my resume.
Yes, but you're still going to need one that can be quickly printed off and reviewed. Just create a standard resume and put a link to your interactive one.
Someone with extensive javascript programming doesn't necessarily mean that they use jquery, or perform much DOM manipulation.
Let's not forget the mix of Javascript and jQuery. It's like OP can't decide on one or the other. Also, this: function positionChainBlockAndStringContainer() { for (var i=0; i&lt;chainBlockAndStringContainerArray.length; i++) { if (i == 0) { canAnimateBossInformation = canAnimateRobotInformation; } if (i == 1) { canAnimateBossInformation = canAnimateSquidInformation; } if (i == 2) { canAnimateBossInformation = canAnimateAlienInformation; } [..]
Your resume is cute, but your JavaScript is terrible. * You don't fully commit to using jQuery, so you have a mix of jQuery and JS DOM selection, which looks nasty (and cuts your credibility in both subjects, imo). Use one or the other. * You have a switch statement checking the value of an iterator in a for() loop. * You abuse the global namespace. * Why can't I use the left/right arrows on my desktop? * You use absolutely zero objects, it seems like. Why not take advantage of one of the great things JavaScript gives you? You don't need all this "isFooStillAnimating" garbage. * Your few jQuery selectors are selecting stuff you have stored in an array. Why don't these DOM elements have classes?
Yeah, I personally don't get how people can do this. Especially when we have that silly 10000 hour/10 year metric for considering yourself an expert in something. Whether anyone believes that is up to them, but ranking yourself based on arbitrary criteria is not useful to anyone. If you have to say something, say how many years you've been doing it or not at all, I think.
Yeah, except ranking oneself based on arbitrary criteria like that is terrible. Also, it's very easy to filter out candidates who suck at a programming language, because they won't know much at all when you ask questions on it. If they're lying about something on their resume, it will come out.
I use facebook but I'm not giving all my data to Nissan just to look at an ad. I don't care how cool it looks. &gt;Nissan Passion Genome will receive the following info: your public profile, friend list, email address, interests, photos and likes and your friends' interests and likes.
I'll be there!
As the lead developer, I can assure you, your data is only being used on this site.
I don't know man, with this level of design and animation, I think he is gonna be fine.
I love god-tier as a descriptor. I've used it to refer to some of my coworkers in the past.
Well some people will love it some people will hate it, but it certainly stands out and since you only need 1 person to love I would say it will probably be very effective for you.
fine is way different than calling yourself an expert. The knowledge presented within the individual files does not allude to that of an expert, or master, or intermediately skilled person. He'll certainly get himself work, i'm not arguing that. but it won't be from someone that takes a look at how this page was built. I was impressed myself, until i took a look. it's neat, but it isn't well done (other than graphically)
Thank you. I really just want to learn. I feel that I am not a weak programmer and that I have been very simple minded sticking to the same thing for years (jQuery). I want to expand and dive into newer technologies. I tried to Google but I am overwhelmed and I am trying to figure out where to begin. I like the idea of learning about "design patterns". What do you suggest (books, articles, online links, etc.)? Thank you.
Too bad after authenticating with the OAuth and granting the app permissions, it still wouldn't let me in. Facebook login status: Object {status: "connected", authResponse: Object} source.js:54 Facebook.getUserSuccess: Object {...} source.js:54 View.onConnectSuccessPortrait() [Object] source.js:96 View.onConnectSuccess() [Object, "photoPicker"] source.js:96 Uncaught SyntaxError: Unexpected token &lt; photo.js:2 Looks like `http://www.nissanusa.com/passiongenome/api/user/530767910/photos?callback=jQuery20006645076894201338_1382127294462&amp;first=0&amp;count=8&amp;_=1382127294465` is returning: &lt;br /&gt; &lt;b&gt;Fatal error&lt;/b&gt;: Uncaught Exception: 102: Session key invalid or no longer valid thrown in &lt;b&gt;/var/www/passiongenome/api/facebook_sdk/base_facebook.php&lt;/b&gt; on line &lt;b&gt;1276&lt;/b&gt;&lt;br /&gt; 
Form at the end was a bit of a letdown, no fancy CSS in the input fields?
Sorry, we're updating the site presently. You may have run into a CDN cache sync error.
You're not "master" level at a tech unless you've written a book about it that sold (imho).
Lol weekly standard. I'm sure they're reporting this because they're *reeeeally* concerned about copyright issues for a widely used javascript library. Absolutely no political motivation whatsoever....
[When ignorance begets confidence](http://www.psychologytoday.com/blog/evolved-primate/201006/when-ignorance-begets-confidence-the-classic-dunning-kruger-effect)
wow this is really creative... i would definitely borrow from this but im too lazy for such an elaborate resume.
That adage is nonsense in the tech world, fwiw.
It's nonsense in general. I'm only using it as a point that just because someone hasn't written a book doesn't mean they're not an expert on a subject. Though I do know some folks that teach who could never get hired to do.
Right? I kept pressing the &lt;- key to go back to something.
obviously they are detractors of obamacare. HOWEVER, its still pretty shitty to rip out the copyright statement out of free and open source software. it still deserves a call out regardless of the political agenda of the weekly standard. 
Except people outside of the industry certainly don't care.
&gt;Maybe start be refactoring some of your old projects utilizing some of the above patterns. That should give you a good perspective on the different ways to do the same things and which ways work best for the situation. Yes! This is exactly what I wanted to do. I was trying to figure out which framework to start with. There are so many, but I think figuring out the problem of my old project was trying to solve is where I will begin then find a solution with one of the new JS frameworks as suggested by the redditors in this thread. I will read the JS design pattern article. Looks very complicated but I'll take my time and digest it.
Especially when they're not even remotely proficient with either. This guy calls himself an expert at JavaScript when it's pretty obvious that he never got quite got to the chapter on "Objects" in his learning process.
I can't really recommend any books. MVC (model-view-controller) is a good place to start though. Try to grasp it beyond this description: A model represents business logic and data A view represents presentation logic A controller acts as a messenger between the two That description is overly basic. Try to expand on it. Don't just focus on javascript, these are abstract topics. You should be able to figure it out reading Java code (Java developers are so god damn gung ho for design patterns it's almost sickening, but what a great ecosystem to learn about them). It'll look different, but not that different from your JS code. Once you feel you can grasp it, try thinking about how you will build your models. Go learn about unit testing using something like [Jasmine](http://pivotal.github.io/jasmine/) or [QUnit](http://qunitjs.com/) as your unit test tool. Learn about what makes code easy to test. This will help you start to see the big picture. I guess that's a decent place to go. This will allow you to become better at the one critical thing about programming: learning to identify the right problem. Now you're really learning how to program. Now you can check out frameworks, and more importantly, better understand why the different frameworks are built the way they are built. You can also poke around the code of each framework which will be a great learning tool. I am of the opinion that using frameworks before learning the fundamentals is a bad idea. Of course, all this said is just the tip of the ice berg, and while it's a great thing to learn, if you wanted to say... use an HTML5 canvas and do animations, then you have an entirely different skillset to learn as well: math and algorithms. But architecture and code organization is not as hard and a great place to start. One last thing, one of the best ways to learn, is to make something you actually want, not something that you'll just throw away, and have fun
Perhaps you could simply retrieve the value from the URL using the `window.location.href` object? If the URL preceding /141c723b46f423a never changes, you could just write some basic `object.replace()` code and grab it that way. E.g: function get_url() { var url = window.location.href.replace("https://mail.google.com/mail/?shva=1#inbox/", ""); // Proof. console.log(url); }
A stack composed only of libraries from [Microjs.](http://microjs.com/#)
I wouldn't be so sour if it was more tongue in cheek. I'd still have an issue with him rating his abilities so extraordinarily high regardless of the words used though. I think the biggest reason I take offense to this is that its the top post here, yet is severely lacking in technical skill and knowledge. This isn't something the folks here should admire. Its not amazing, but its a great example of what not to do. Unfortunately he looks like an expert because people only care about what they can see, and everyone here calling it amazing need to take a website at more than face value. See what makes it tick... then cringe 
Thanks for sharing. Can you please explain, why is this your choice? Did you get a chance to use any other frameworks?
I like everything you said except "You don't fully commit to using jQuery, so you have a mix of jQuery and JS DOM selection, which looks nasty (and cuts your credibility in both subjects, imo). Use one or the other." When it's faster to use vanilla JS then just use it. Throwing everything through jQuery because it's there isn't necessary or correct.
Ha. [Gotcha.](http://emberjs.jsbin.com/owORimI/4/edit) The Routes are each invoked; when the user clicks on a thread, both ThreadRoute and SubRoute are 'hit'; your code makes an unnecessary call to the subreddit list for that thread. (I will at some point get to notating the line count (70?) and making a more precise count for Angular.) Edit: Also, when I was working I was hoping to mimic Reddit's url structure as well, but [this](http://emberjs.jsbin.com/owORimI/6/edit) doesn't work. Somewhere between here--Router frustration--and the finished app is when I got into my {{#link-to}} frustration, with a confusing namespace problem along the way that I _still_ don't understand (and didn't cover). 
Think of the children! - this is basically your argument. Do you think all programmers have difficulty programming javascript, or only the ones who don't understand it? 
If the code is altered, it should be noted in the comments, but the original copyright should stay. Think of the analysts who are going to have to maintain this code in a few years when the programmers move on.
I'm actually trying to get the URL each mail will point to. I want it before the URL changes to a specific email. So I want to know how each email row points to their corresponding email ID while the URL is still "https://mail.google.com/mail/?shva=1#inbox". 
Backbone seems to have a solid user base and community. Any opinions about Angular JS?
I'll agree that it's faster, but I wouldn't bother optimizing it unless it's actually a problem. If it becomes a problem, then I'd look into optimizing it. 
Yeah, but the odds of convincing an Angular fan that Angular is broken are pretty slim, and I get into it often enough that I should really learn to hold my tongue and exit the conversation now. 
There is no point, unless it is as good as this one, you'll look like a try hard. When it comes to college, it's in your best interest to follow directions to the t to get accepted. 
I really enjoy Ember more than Backbone and Angular. I like how routes are top priority in the app and really dictate things compared to Angular. Handlebars is an amazing templating language and paired with two way makes it even more awesome. Having `{{outlet}}` and nested routes can make things a ton easier. Components seem to be a lot more simple than Angular's directives but just as powerful. We have Ember-Data and Ember-Model for models or can even $.ajax promises in your routes as your models. Computed properties and observers in Ember are also a huge benefit when working on SPA's. That's just a few things I like better over than the others. Either way Backbone is pretty irrelevant since it lacks two way data binding and there's nothing wrong with preferring Angular over Ember.
I could understand stripping the comments accidentally by minifying it, but it looks like they really just got rid of the copyright message while leaving other comments intact. So, in a case like this, which party is actually liable for copyright infringement? Is it the US government or the contractor?
This specific bad application doesn't impact what I wrote. I'm just tired of seeing developers run everything through jQuery when it is equally easy to use vanilla JavaScript and you have less overhead. I give extra points to an interviewee that uses vanilla JavaScript when appropriate without trying to over-optimize.
Two-way data-binding is like writing a sentence where the sentence changes your mind. 
It's a lot better than manually managing the templates like with vanilla Backbone. That can become a nightmare very quickly.
 if (canScrollOrSwipe == true) { ... } ugh.... As a professor of mine would say, "-10,000 points".
It does though, because it's within context. But I do agree, jquery doesn't need to be used all the time. Except that it's used nearly everywhere now. 
I mean, you're not wrong; no one uses vanilla Backbone anymore, so there's too many competing additional libraries--the fact that Backbone's render function reads "return this" is a big hole. That doesn't make data-binding fundamentally workable when computation is inherently unidirectional. 
I was responding to the blanket statement, not the specific example. For smaller site and web apps tossing everything in jQuery isn't bad, but I manage large enterprise web apps where adding that amount of overhead can have a decent impact on performance. 
There are thousands of programmers operating at the expert level who have not written(and have no interest in writing) a book. That doesn't make them lesser programmers.
Unusable on Samsung s3. Too bad. 
http://thenewboston.org/list.php?cat=31 Edit: just curious why you guys don't like thenewboston. I'm a designer starting to learn jquery, and the tutorials have been helpful. Is it bad info?
Oh alright. I just thought it would be interesting and fun to have a website for my high school career achievements and such to show the college admissions. 
My vote's for Meteor.
why so? is it because you consider it as a more full blown solution? just curious...
I don't think I'm following that last sentence (at least in this context), care to elaborate?
This has been something that I've been wondering for a while. Clearly, if the source isn't minified, then the license should be there in its entirety, which is why this particular case of it is baffling. But when concatenating and minifying code, it seems strange to still retain license notices as if a human is meant to read it.
IE 11 has full support for Pointer Events. I'm not saying old versions of IE, but the new ones are fully-featured enough that it's really not that hard.
Here is a link to a site that has different MVC frames and working examples. http://todomvc.com/ My advice, learn/use couple of them. Next, know their plus/minus and when they best fit what you are trying to accomplish. ;-). Remember, your are not hunting werewolves!
...and it is gone. 
I don't know I make all kinds of changes to 3rd party libraries and when I publish my code for production I compress it and remove ALL comments period.
+1 for Ember. If you've got some time, check out the [Ember vs Angular cage match](http://vimeo.com/68215606). The Angular guy had to keep going back and refactoring existing code as he added new features. Existing Ember code was barely touched.
&gt; That doesn't make data-binding fundamentally workable when computation is inherently unidirectional. This is a fancy way to say a whole lot of nothing... 
Even minified code should have the license included. Distributing a copy of some open source code (including jquery) without the license violates the license.
Technically, you're violating their licenses. Many minifiers nowadays will look for comments with "@license" in them in order to preserve it.
There is no best. I personally like and use backbone.js. It's more of a micro framework. If you want the 'rails of front end' ember is your choice. Angular is neat and I would probably choose it over ember personally but both ember and angular are large and require a lot of learning to master. I like to keep things more simple.
Has it been ruled out that they may have paid for commercial license?
If the code you use specifies in the license that you should preserve the copyright notice, you are stealing from them and leaving yourself open to civil liability. 
What would be wrong with making a "licenses.txt" file, and including all the licenses for the code that you're using. You could even have a single extra line at the end of your minified code: /* @licenses licenses.txt */ That way minified code can be only slightly larger than the code instead of big block licenses for jquery and each other 3rd party library.
People in this thread are raging about the wrong thing. There is no legal requirement as far as I'm aware to include MIT/BSD license text in the same source file as the work. It is sufficient to include the copyright notice elsewhere in the software. If the license cannot be seen anywhere on the site then that's a problem. If you don't want someone to include your naked source file in their project then don't license it as MIT/BSD.
It actually looks like some weird formatting stuff going on as well, since the docblock comments are all off by one space: -- ^^**Original**: /** * @summary DataTables * @description Paginate, search and sort HTML tables * @version 1.9.1 -- ^^**Healthcare.gov**: /** * @summary DataTables * @version 1.9.1 Regardless, I think it's prudent to apply Hanlon's razor and chalk this up to incompetence on the part of some developer working on the project.
Yeah guys, this is the Weekly Standard, run by that squirmy fucker who always wants to bomb people on Fox News Sunday. 
It's not really up to you at all, though. A lot of work goes into libraries like jquery, and all they ask is that you not remove the license. If the extra few bytes of data really bottleneck your application, you could always write your own library. Also, modifying the library itself should be a last resort, because you lose the benefit of using commonly cached files like the Google CDN's. I find it hard to believe that the license would be too much extra data but having a unique version of a fairly large library like jquery is not a performance concern.
Yeah, I love John Carmack's books. Avi Tevanian's too. Jamie Zawinski's books on Lisp changed my life. Linus Torvalds is a gripping writer as well. Your point is bad and you should feel bad. 
None of those people are people who would ever be asked about their level of expertise with a given environment/language (though I dunno how much LISP expertise jwz has, honestly), and so I wouldn't be looking for book-author-level expertise from time. That said, I wouldn't take someone's word for it that they were a master/expert or 10/10 competency in C++, if they weren't Herb Sutter, Andre Andrescu, etc. Frankly, I would guess that even the guys you mention here would have enough humility/knowledge to admit that they may not necessarily be master level C++ programmers, themselves.
I just deleted my account instead. Screw spam tactics. 
In addition to stack trace labeling, a self-invoked function can call itself if it is named. For example: (function consoleClock() { console.log('The time is', new Date()); setTimeout(consoleClock, 60000); }()); That will output the current time in the console once every minute. But the identifier `consoleClock` is only in scope inside the function. For more information on named function expressions and the difference between function expressions and function statements, see http://kangax.github.io/nfe/
Yeah, I've seen it and it's really nice. I've been using/following Ember since the early 0.9 days with that terrible router.
This seems to be the argument a lot of people try to make. "I don't have any use for backbone/coffeescript/express/meteor/whatever, so therefore it's *bad for the language*."
Awesome! Thanks for the info.
Looking at the Google's [jQuery minimized source](http://ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js), it removed most of the licensing info and just replaced it with "/*! jQuery v2.0.3 | (c) 2005, 2013 jQuery Foundation, Inc. | jquery.org/license"
Sorry about that. I think you just have to rename the SubRoute to SubIndexRoute, and then you're good. edit: Here's a working version: http://emberjs.jsbin.com/owORimI/9/edit There's an issue where subroutes (in this case, sub.index) don't have access to the same params as their parents, which I think is probably a design mistake. If you do a log of the params object passed to SubIndexRoute's model hook, it's empty. I'm kind of exhausted, but I'll check if there are any existing issues on GitHub tomorrow, and open it up for discussion if there aren't. The default behavior for the sub route is to return a model with the subreddit param, which I access in SubIndexRoute via this.modelFor("sub").subreddit, instead of taking the param from the URL, to build the sub index route's request URL.
interesting...I heard the same from some other dev.
beautiful! thanks for sharing this.
/u/dokushin may be right. If the license specifically says that even the minified version must keep the notice, they probably are. But it does seem a bit silly. Minified JS is essentially a binary format. Are you required to embed the license in the ELF or EXE file if you use an open-source C++ library?
Presumably that would have to be www.example.com/licenses.txt right? But yes, I agree. It would be nice if more libraries allowed this kind of thing.
HTML.
It compensates for gesture input. On OSX, swiping left and right will take you back or forward in browser history instead of scrolling the page.
Yeah I totally agree with you there, I've had to rewrite some directive about 3 times because I was slowly learning and found I was doing it wrong. Directives are hard, I don't really understand the difference between link and controller. But other than that I really like angular, I think it makes a lot of stuff very easy and quite natural to do
I haven't had a go with backbone or ember tbh, so I can't really compare it to them, I have read a bit about them and I like how objects in angular are normal JavaScript objects bound to the scope instead of Backbone.Model or whatever. I think it is very easy to get started with Angular and making apps whith the basics is great. It's when you start doing more with it that it gets a bit tricky - sharing scopes with directives etc but I'm still finding more out about it and I'm still finding it fun. 
I haven't had a go with backbone or ember tbh, so I can't really compare it to them, I have read a bit about them and I like how objects in angular are normal JavaScript objects bound to the scope instead of Backbone.Model or whatever. I think it is very easy to get started with Angular and making apps whith the basics is great. It's when you start doing more with it that it gets a bit tricky - sharing scopes with directives etc but I'm still finding more out about it and I'm still finding it fun. 
running phantom on the webserver to render is not optimal under any sort of load. 
Admit it. Its because you dont have any solid arguments to do so! :)
I like how the author doesn't first ask the question: Does my app require a framework? EDIT: I accidentally a word.
What if the interviewer hates basketball? Now you're suddenly being judged on criteria that have nothing to do with your actual fitness for the job.
Depends on the requirements. ExtJs can be a joy working in for some type of data heavy applications. If the application is small you can do fine with say a library like KnockoutJs. I have not worked with Backbone by I think it fits the same type of app. For really small applications good ol' jQuery and good architecture is fine. I would personaly use Angular.js for any large application that is not data heavy. 
&gt; If the interview hates basketball then he won't care that you're a fan. In a perfect world, maybe. This may not happen on a conscious level, but given two equal otherwise candidates, who is the interviewer going to pick: the one who kept things totally professional, or the one who needlessly disclosed that they are passionate about something that the interviewer hates? Whether you're willing to admit it or not, such disclosures are a gamble. It's possible to be personable in an interview without getting personal about things that nothing to do with your qualifications. Unless being an NBA is so core to your being tact you couldn't bear to work in an environment that wasn't NBA-friendly, I would shy away from revealing personal interests that aren't at least peripherally related to your ability to do the job.
Angular.js has the best minds in the web development world. One can assume it is very safe bet.
It's fine not to be an expert on every subject. It's another thing entirely to call yourself an expert at something at which you're objectively not very good at.
Their code also still had comments in it.
Am I socially inept for having a different position in an argument than you? Do you handle every minor disagreement like that? If so, then maybe you should be asking yourself that question, rather than me. At any rate, there is no need to be a dick about it, and keep in mind that you aren't the only person in this conversation to have successfully nailed a job interview. I have never had problems getting interviewers to like me because I'm comfortable with talking about my craft. If it makes you feel more at ease in an interview to break the ice by talking about something non-job oriented, then that's fine, but I stand by my point that it *could* work to your detriment.
Depends on what turns you on. I personally prefer to use Backbone, and then cherry pick the goodies. Need 2way binging? Backbone.ModelBinder. Need some good foundation for your views? Backbone.Marionette. Validations? Backbone Validation. and so on... Backbone more of a skeleton, rather then a framework. Most of the time, you have to build the stack yourself. I really like that kind of control
You'd probably have more luck on implementation, speed and efficiency if you had a script that was bound to a keyboard shortcut rather than a GUI.
He doesn't have to. Maybe he just wants to play with some new tech. 
&gt; I'm opposed to data-binding Mind elaborating? I've used both Ember and Backbone extensively, and having data-bindings just gets rid of a lot of the boilerplate you have to churn out with BB.
I'm working on a few different apps; I've used Ember and Backbone+Marionette extensively, played around a bit with Angular. My conclusions thus far are the following: Small app: use Backbone or Knockout. Mid- to large / complex app: use Angular or Ember. The more complex, the more you should consider Ember. You REALLY don't want to have a large app written in Backbone. You'll end up spending a lot of time maintaining heaps of boilerplate code and different Backbone extensions.
Yes, Its like a normal controller,except you define functions on "this" here instead of the $scope. So when you "require" this directive in another one, you get an instance of this controller and so you can call its functions. 
It's a single page app. Unless you're making a toy the answer is "yes".
Why do you feel you need a javascript framework? It's hard to recommend one without knowing your reason for using one.
I guess the difference is that binaries are compiled into something completely different from the source code, whereas minification is just renaming identifiers and stripping comments and whitespace. 
Could you possibly give some more details about what you're trying to do? Maybe a look at your template? From what you've told me so far, Photoshop really doesn't seem like the best tool for the job.
Um cool? Keep downvoting me; I guess I'm wrong about weakly standard being a conservative rag? 
You're required to deliver the license with the executable. Alongside is fine for ELF or PE , but there's no alongside with webapps. 
Dunno why you got downvoted. Can someone explain how to make a single page app without a framwork?
I use an in-house develpped framework. Its open source but still version 0.3 and we haven't yet made any docs....but its really good. It combines knockoutjs with requirejs and to make modular, loosely coupled mvvm components. It also relies on extensions which abstract base libraries away from applications by exposing only certain functions to the sandbox which modules can use. Edit: another neat feature are the use of statecharts.
Agreed, I don't like the idea of someone (even myself) arbitrarily rating their own knowledge of a programming language on a scale like that. Imo, there is no upper limit (in this case "master") to being a software developer, you should always be learning.
Seems to be a large and highly misguided conservative presence in r/javascript. This sub sucks anyway. Fuck you assholes
In most tech companies (at least in 2013), attempting to write a single-page web app automatically means you will have to settle first for a robust and a good framework. Unless, it is some kind of a small personal project this is an obvious decision. 
Yes, they are a conservative rag. And yes, they're making a big deal of the story because they hope it makes Obama/AHA look bad. But the story is still true, and when I posted it, the WS was the only publication I saw talking about it. I would have rather found a less biased source, but hey. I was hoping to leave politics out of this discussion.
I can also recommend looking outside of just JavaScript for learning design patterns and better technique. Clean Code, while written for Java, is a book every programmer should read (even if you write more functional code, it's worth understanding how the other side lives). Much of what we consider modern JavaScript is borrowing and improving upon good general techniques from other languages. Unit testing, proper commenting, elegant code structure, not screwing over other people (and yourself) when they look at your code -- this stuff is important no matter what tools you use.
Suppose index.html (which serves up jquery.dataTables.js in a license-less, minified form) points to licenses.html, which details all the OSS projects you're using and the terms under which they're licensed. Is this enough? It may not be under GPL v2.0... what about the BSD license?
All of them are good. If you use Backbone, I highly recommend checking out Marionette
Had my mind blown by this approach yesterday on Codewars (need account): http://www.codewars.com/dojo/katas/5258b272e6925db09900386a/solutions/javascript
Thankfully with ES6 (with rest parameters, default parameters, and destructuring) you won't need to use the arguments object ever again! function foo(...args) { return args.filter( a =&gt; a &gt; 0 ) } 
Chaplin is nice. chaplinjs.org
Thank you, I love knockout.js, and with the new release you're not locked in to any one way of doing things, it's amazing.
Isn't `argument` a no-no on strict mode?
Knockout is great by itself, but combined with other libraries it is very powerful since it is very good at what it does.
Not from what I have seen, I've used it in my strict code without problems. 
Haha, WTFFFFFFFF
Not looking very hard then.
What's wrong with `[].slice.call(arguments)`?
Why not just use Backbone?
Sure, but the undefined argument thing is seen as a feature by experienced programmers in javascript. So in js you can't overload your functions. You also can't specify defaults if the user doesn't specify them. So when you program, and want to overload or set some overrideable variables, you handle it there. Say for example though its really important to provide an argument. You can check its defined and log a warning or error. On the other hand, say if the input is undefined you want to return without executing the code. Thats easy too. Lastly, for a programmer who feels safe within the confines of safe type-strict OOP, the flexibility and trust given to a programmer by JavaScript might be overwhelming. I think people forget how the language was built and what it was built to do, and what it doesn't do so well. Keeping that in mind, I feel that taking advantage of the flexibility means you can write really robust code. I personally use functional programming techniques which make my code a little nicer. :)
It seems like one of those things that's nice to have but not really worth coding. Put it on the programmer to read the api.
If we're talking style and ease of programming, `slice()` is much simpler to type than `[].slice.call()` and you just hafta add `function slice() { ... }` somewhere. It'd be interesting to see efficiency comparisons of `slice()` vs `[].slice.call()` vs `Array.prototype.slice.call()`. I'll bet the differences get optimized away by modern JS engines, though.
What libs do you combine it with? I can imagine bootstrap and the obligatory jquery, but what else?
Its seems as if the bound slice function is actually the slowest method in Chrome, and in IE9 is sometimes the fastest, while `[].slice.call` and `Array.prototype.slice.call` are really no different. The "applied" slice is relatively fast in Chrome, but slow in IE9: var slice = function() { return Function.prototype.call.apply(Array.prototype.slice, arguments); }; http://jsperf.com/array-slice-arguments
context.fillStyle = colour; Did you mean context.fillStyle = boxes[i].colour;
No bootstrap currently, actually. jQuery yes but reluctantly so. Too many good plugins out there use jQuery. But for dom manipulation we use knockout. Rx for pub/sub, scion for statecharts,linqjs for lists/collections/arrays, and tons of smaller libs based on what the project needs. I've thought about making an extension which uses bootstrap but I haven't found the need for it. You can ask about how we achieve certain functionality but listing all the small libraries we currently use is silly. The point of the framework is it make it easy to swap out base libraries for other ones.
The differences are largely unimportant unless you're making thousands (or hundreds of thousands) of calls. Performance is rarely a good reason to pick one solution over another. Ease of maintenance and readability are almost always more important. 
No, it's there. Arguments.caller/arguments.callee is poisoned (throws when you attempt to use) and there is no link between arguments object and formal parameters (ie. if you change one it doesn't change the other). In other words, strict mode arguments object is just more sane.
Also the framework doesn't rely on these smaller libs directly. Rather it exposes a way to extend the core framework. So we only use what we need for a project. If another project doesnt need some functionality we don't add it. Edit: the framework doesn't rely on jQuery either. If one wanted to avoid jQuery then they could.
Ahh, I thought maybe you used something as a model / view base/template or something along those lines, or another large compatible lib in conjunction with ko. If you're using linq.js I take it you're working in visual studio? I'm not about to change over to windows, but is it easier working with ko in visual studio? 
Oh I almost completely forgot to mention the knockout binding class provider. Great lib!
&gt; knockout binding class provider https://github.com/rniemeyer/knockout-classBindingProvider This one I take it?
The intellisense is nice ofcourse :) Yeah, the framework is stil v0 so its evolving. Knockout works well with something else that does the heavy lifting, in this case the core framework is the heavy lifter which glues everything else things together. The framework makes heavy use of nuget. :) all extensions are included as nuget packages.
Yep!
I agree with this: learning other languages helps solidify an underlying understanding about patterns and ideas. The catch is trying to come up with a project. Some suggest recreating command line utilities in other languages to better understand them.
I'd find it pretty funny if it was actually a bit of code that checks for JavaScript imports and then removes them.
I could write something like that using jQuery and angular js MVW framework, and of course I'll need to make it responsive, so I'll include Zurb's Foundation...
Can you gist it?
Hahah, I love it. Douglas is the man 
 function numbers() { return Array.prototype.slice.call(arguments).every(function (i) { return typeof i == 'number' }); }
that's pretty cool
Yeah, I should have just stopped at the sentence metaphor. 
See, this is all why I don't want to work with Ember. I have to _know_ that SubRoute will get triggered, but SubIndexRoute won't; there's a possible design mistake in how parameters get passed to the routes (which should be _simple_ and _straightforward_). I'm sure it's in the documentation somewhere: the documentation is too massive. You're subject to the same confusion as I am. 
I thought this was a great breakdown of how a fairly complicated effect could be represented in fewer characters than this paragraph. I had figured a lot of this stuff out for myself already, but some of it still seems like black magic to me. Can anyone recommend a good reference for implementing different rendering techniques like this? Also, I *knew* that the "b" and "d" variables were only named as such because `b-d` makes for a cute emoticon.
i think i'd rather keep using angular
Heh. Pretty funny. Reminds me of POJO: http://en.wikipedia.org/wiki/Plain_Old_Java_Object &gt;We wondered why people were so against using regular objects in their systems and concluded that it was because simple objects lacked a fancy name. So we gave them one, and it's caught on very nicely.
I've already implemented it in all of my projects. The best part is, using it teaches you how to actually code js from scratch. The downside though is taking 2-5 times as long to complete larger projects :P (for me at least)
I tried to fork your project but it self destructed immediately... 
Why would you call that function "slice"? It's not supposed to slice, is it?
Sounds like Durandal, have you tried that?
Maybe that has to do with the knowledge level of the two developers? One created Ember, one just started using Angular.
As odd as it may sound, ~~vanilla~~ native is not as fast as you'd expect. Take indexFor, for example: http://jsperf.com/indexof-vs-vanilla And it's not the only one. A lot of native methods are slower (some are REALLY slow) compared to rewritten functions using loops and whatnot. Check this out: http://allyoucanleet.com/post/21624742336/jsconf-us-12-slides
I'm a programmer, I want an explantation not an analogy. Two way data binding has been working just fine for me in numerous projects and I haven't hit any issues. Can you give an example of where "such a library will fail"?
I recently took another look at React and its quite amazing, If starting such a project today i would use that over angular and friends.
take a look at React, its way faster then Angular and much simpler. it also have a large evil corporation behind it so probably wont go away.
Both of them, its illegal for the contractor to sell and illegal for the government to distribute.
Now you are pointing to the limitations of Angular - Angular and two way data-binding are not interchangeable. 
Hey -- it's actually really simple. Inside `render`, you can put a conditional like this: &lt;div className="content-area"&gt; {this.props.page === 1 ? &lt;MyTabPage1 /&gt; : &lt;MyTabPage2 /&gt;} &lt;/div&gt; If you want more complex logic, you can also define a variable earlier in the `render` function and refer back to it: var page; if (this.props.page === 1) { page = &lt;MyTabPage1 /&gt;; } ... &lt;div className="content-area"&gt;{page}&lt;/div&gt; Hope that makes sense.
While it's a funny joke, they seem to be ignoring the fact that almost every company in their list also uses some kind of framework(s). Not to mention that they include &lt;script&gt; tags for the jquery examples but choose to leave them out for the vanilla examples...
There's a funny meta joke in there somewhere. 
Given how fast it is, it'd be nice if they rewrote JQuery and AngularJS on top of VanillaJS.
I suppose this is the end of meaningful conversation. &gt;Failing that, you have to ask people who know how to work with it to show you, preferably not just looking to go, "Gotcha," later, lest you exhaust their good will. Hey, my question was in earnest: I really was hoping to learn from how you approached the same problem I did. I wasn't trying to trip you up. My article _discusses_ the parent Route firing, so it's not like I was thinking "I hope he falls for it" because you had my entire experience with Ember available to you: I wasn't hiding anything. I asked you an honest question, and your solution had a bug, and that is _not my fault_. 
If you do it at compile time wouldn't plain module system a-la CommonJS suite your needs better? Google Closure even has built-in support for CommonJS modules.
For React you can check out my project [react-app](https://github.com/andreypopp/react-app) which provides some conveniences to write apps which are pre-rendered on a server, without PhantomJS so it's quite fast.
Hey I moved from Angular.js to React.js as well. It's a bit different but after having to deal with the millions of concepts in Angular.js it's kinda refreshing to just have one concept for everything.
I started this framework for a new website, which isn't online yet. I was looking for other frameworks, but e.g. sencha or or backbone.js are way too much for our needs.
If you don't want to come off as an asshole, it helps if you don't go, "Ha. Gotcha," when someone doing late night volunteer work forgets something minor while they're trying to help you learn something. Your readily apparent glee just makes it really unconvincing when you try to pull this, "I suppose this is the end of meaningful conversation," I'm-the-bigger-man-here shit. Index routes aren't novel, nor complicated, and my oversight was just an issue of me changing as little of your code as possible to make it work. If you read the first section of the Routing guide after the introduction, "Defining Your Routes", you'd know all about them. I didn't convert your API code the first time, because I didn't really feel like learning reddit's API just to show you how your line count was inflated. These aren't Ember problems. Your article is basically a bunch of your unknown unknowns that stem from not having RTFM, not understanding semantic versioning and absurd expectations about alpha API stability (granted, they went to RCs too early, though this is unrelated to what you wrote), and baseless assumptions about what Ember Data even is. Hint: It's in the first damn section of the readme: https://github.com/emberjs/data#ember-data-
Sorry :(
You're in luck, JQuery is already written on VanillaJS.
I've written a number of interactive web pages in vanilla JS (e.g., [this WebGL maze game](http://www.madore.org/~david/misc/webglmaze.html) or [this (proof-of-concept) text adventure game](http://www.madore.org/~david/misc/adventure.html), both of which are standalone HTML files requiring no includes whatsoever). One thing that annoys me is how difficult it is to find documentation on how to do things in plain JavaScript: searching for "how to do &lt;X&gt; in JavaScript" is often flooded with information about how to do it in jQuery or others.
Yep, it can be (at times) almost impossible. We run into this problem at my work constantly as we try to keep all our JS code library agnostic, you can look at jQuery's source code though thankfully which can help or you can browse Mozilla Developers Network for a bit and have a guess at an implementation.
That's a very good point, but it's not like the problems they had to solve were incredibly complex. They were tasks that any front-end MVC should have been able to handle intuitively. The Angular guy seems to be qualified enough to be able to pull off at least that.
Except that array.indexof has more functionality than your function ... here is a more fair comparison: http://jsperf.com/indexof-vs-vanilla/3 Also in your comment you said vanilla is not as fast and in your jsperf you called the fastest one vanilla and the slower one native.
Comparing apples to oranges, a framework is specific to one particular thing. However, I do agree that writing vanilla js and ensuring browser capability is pretty tough, in that case zepto is useful. That said, I use jquery everywhere because it is popular and CDN cached mostly.
True. I mean I just see a lot of purists here say, you can use vanilla to do everything and anything. I'd have to see it to believe it honestly. Its more like comparing storebought applesauce to apples. Store bought Applesauce is made of apples, but which is better for particular meals? For example, applesauce goes great with pork chops, but chopped up apples are delicious in salads, and if you wanted applesauce you could make it from apples yourself.
I waiting for the version 2.0
What were some of the issues that you found with Angular JS that made you decide to switch to React? I'm a few months into a rather large scale application - like, enterprise back-office application replacing several older applications and so far have been enjoying Angular. It hasn't been without a few hickups here and there that you get when adopting a new framework - it's been great. Just curious to hear the challenges others have had, and their reasons for switching away from it. The main issue I've seen with it, is when a new developer starts working with it and want's to jQuery all the things and getting them to re-think how they approach some things.
I'm curious about those benchmarks there, e.g. operations per second while getting element by id. Has anyone did performance tests between js frameworks and vanilla js?
It can be done with polyfills and is quite liberating, but be warned, document.querySelectorAll does not work how you may think that it does.
:)
So you're including the entire mootools library. Why shouldn't I just use backbone, knockout, ember, or angular? They do all of the things your library claims to and already come with a community and support.
I can't speak for knockout (havn't looked at it in detail), but the others do have a different focus. For example: I put view and controller in a single javascript file (JsonML instead of HTML) and don't constraint the developer on how to implement the model. But you're right, if one doesn't want to use mootools, woottools is unsuitable, as it depends on mootools.
i just pressed run example with the default settings and cars only were going in circles crashing with each other in the grass
Apparently they will learn if you let it run long enough. This is how we, as a society, came up with the "Rules of the Road". First the incidents had to happen, then we set laws to help guide people in the right direction.
They take on average about 10 generations to start showing intelligence (default settings 2 minutes). But it is possible that it takes longer.
As /u/tidder112 points out, that's the point! Wait and see.
It all depends on the engine running and what you want to do with, of course. It's also [brought quite a heated debate between developers](https://github.com/jashkenas/underscore/commit/4e4bc194c0a0e06aa8f7633695ad10030d871a2b#commitcomment-1371961), so I'm betting there's tons to be explored here. The point I tried to make was that, for all it's beauty and glory, native javascript still has downs that frameworks can help us overcome. Performance, bugs and (arguably not JavaScript's fault) compatibility, all necessary in todays app. It's only a matter of choosing the right tool for the job. :)
Yea normal websites rarely have to watch performance anyway.
It's called generations. You build upon the last data to improve the next, while introducing random mutations which leads to the next generation. Wait and you'll go to generation 2.
You can increase the speed in the top-right corner.
It's called slice because you can supply an argument to specify where to begin the slice. If you don't supply a first argument the it assumes that the starting index to slice at is 0 and returns a copy of the array. So an example of a function that returns every argument except the first as an array (with the shortcut slice function) would look like function exceptFirst() { return slice(arguments, 1); } exceptFirst(1, 2, 3); // &gt; [2, 3]
Well, do you want to spend your time writing a framework that probably won't be as robust or well-tested as Zepto, jQuery, etc or do you want to spend your time writing apps and websites? Overhead of these frameworks is generally pretty negligible. More likely culprits to poor performance is going to be layout thrashing, not using compression / texture packing / image optimizing / minifying / CDNs / inline images / etc, poor use of frameworks, stupidly programmed algorithms, etc.
I agree with you there. Performance is a non issue in my applications, really. Robustness and QA is a very good benefit. 
http://jsperf.com/getelementbyid-vs-jquery-id/25
But then it is no longer running on the default settings.
Woo large evil corporation backing! I've had a little look at the docs but not tried it out yet, I want to try everything but it's finding the time to do it! The one thing I noticed was a bit different was it's templating. I read in the other thread that it's used in fb so quite battle tested which is a strong point.
Very cool, but looking at the code, the JS architecture and style could be better. :) Also it appears to hang my browser occasionally. Are you welcoming contribution or is this a personal project? 
So I ran it with fewer cars (since my machine can't keep up with 100 cars at runspeeds greater than 1), and turned on collisions. The cars eventually decided that the best strategy is to just sit still. So I've got one retired car that's going around crashing into everything, and 19 cars just sitting still.
tl;dr; - healthcare.gov and the datatable people need to get lawyers involved &gt; i don't think there's any question about distribution when it comes to js. The Affero license applies to code that runs on the server. I really don't think that's accurate. http://www.gnu.org/licenses/license-list.html#AGPL: &gt; This is a free software, copyleft license. Its terms effectively consist of the terms of GPLv3, with an additional paragraph in section 13 to allow users who interact with the licensed software over a network to receive the source for that program. If you run a piece of server software like OpenArena that is GPL licensed then you do not have to provide the source. If it is AGPL licensed then you must make it available. The Affero applies to any work used over the network - including javascript/css etc. Here is a good [quote](http://stackoverflow.com/a/10787009/195722): &gt; Programmers commonly know that AGPL is with strong copyleft and **offering the software to users** counts as distribution to close the ASP loophole the GPL has. There is a difference between just "offering" and "distribution" - which is why the Affero GPL was created - to close that legal loophole. According to [drupal](https://drupal.org/licensing/faq#q11): &gt; 11: Do I have to give the code for my web site to anyone who visits it? &gt; &gt; No. The GPL does not consider viewing a web site to count as "distributing", so you are not required to share the code running on your server. If the BSD people define "distributing" differently than the GPL people - then that is a really bad precedent to set. Even the authors of that software admit they may not even understand what the [GPL means](http://datatables.net/forums/discussion/comment/14785) - I'm not saying he's stupid, many people don't understand the ramifications of licensing under GPL: &gt; **I'm not a lawyer and don't understand the ins about outs of the GPL license**, however my understanding is that any code that is integrated with GPL code must also be released. I know I'm diverting anyway from the BSD license to GPL but it is dual license and I feel like if one open source license sets a precedent then you could use that to help guide opinions in other circumstances. Obviously every license is different, and may have specific clauses - but there will probably always be ambiguity. Also the simple fact that makes this sticky is that BSD doesn't define exactly what "Redistribution" means. Also is Javascript source or binary (I guess that question could be applied to any interperted language)? [What about minified code?](http://stackoverflow.com/a/14026450/195722) In any case [this GPL FAQ](http://www.gnu.org/licenses/gpl-faq.html#UnreleasedMods) says this: &gt; A company is running a modified version of a GPL'ed program on a web site. Does the GPL say they must release their modified sources? &gt; --- &gt; The GPL permits anyone to make a modified version and use it without ever distributing it to others. What this company is doing is a special case of that. Therefore, the company does not have to release the modified sources. Which is great...but then it goes on to say: &gt; It is essential for people to have the freedom to make modifications and use them privately, without ever publishing those modifications. However, putting the program on a server machine for the public to talk to is hardly “private” use, so it would be legitimate to require release of the source code in that special case. Developers who wish to address this might want to use the GNU Affero GPL for programs designed for network server use. Wait...so does that mean a public website running GPL software like Drupal is required to release the source...but the drupal FAQ says otherwise? Bah! Screw this computer stuff - I'm going to go follow my life long dream of underwater basket weaving! Here is a headache of a FAQ - [If a programming language interpreter has a license that is incompatible with the GPL, can I run GPL-covered programs on it?](http://www.gnu.org/licenses/gpl-faq.html#InterpreterIncompat)
Somehow reminds me of being a little younger and driving around in cars
I've had the tab open for about 15 minutes and it's looking pretty good. http://imgur.com/QpWVGPl
I would love contribution. Any examples of architecture that could be better? I tried making it as readable and performant as possible. *edit* Ideas and feedback are also always welcome :)
That is actually a bug that I thought about just 5 minutes ago. If you switch the collision on or off during the simulation, the inputnodes don't match the expected input anymore and it'll make values in the network go to NaN which in turn makes the output go NaN and that makes the cars velocity NaN. I'm gonna fix that asap. *edit* Fixed and pushed
Right. Well, in the examples it was only used to turn that sort-of-array into an actual `Array`. That makes it kinda weird to read. There is the primary effect, the slicing, and a side-effect which turns it into an array. If you only go for the side-effect, having it named after its primary effect is a bit odd. Like, there is a "Bucket" and you use its "empty" method because that one *happens* to turn it upside down. Someone else who reads this code might wonder why you're calling "empty" when this freshly created Bucket was obviously empty to begin with.
I don't understand your analogy where you said "I'd have to see it to believe it" when right after you admitted that jQuery is just JavaScript (with your analogy) so technically... you're seeing it.
...You're not exactly tutoring inner-city kids here, you've explicitly stated that you are defending your framework. &gt;&gt;I'm honestly more interested in keeping all of the wrong kneejerk stuff in your post from dissuading other people from giving it a fair shot Either argue against me or don't, but don't pretend you're acting out of boundless generosity. I'm doing 'volunteer' work here too, you know. That said, I do sincerely appreciate your work and effort. It has, perhaps, a side effect you did not intend (in that I think it makes my article stronger), but I appreciate your work nonetheless. I didn't mean "Ha. Gotcha." in the sense of some strident "_J'accuse!_" but I suppose I can't pretend I didn't feel some satisfaction that you're mired in the same Triassic swamp. &gt;not understanding semantic versioning and absurd expectations about alpha API stability (granted, they went to RCs too early, though this is unrelated to what you wrote) Uh huh. Alright, I'm finished here I guess. Seeya round the bend. 
This is the first [demoscene](http://en.wikipedia.org/wiki/Demoscene) entry I've made, with help from two friends (graphics and music). [Here](https://www.pouet.net/party.php?which=258&amp;when=2013) are other demos from the party, we had a very good time. There's some more feedback as well as a download link [here](https://www.pouet.net/prod.php?which=62010) and I also set up a repository [on GitHub](https://github.com/jammi/demo_puvut) including full change history and development tools.
Yes but I'd have to see how to make applesauce or find a recipe to know what to do. Or else I will make really shitty applesauce, and my meal will be inedible. Its much easier to go to the store and get the same thing. 
What does it mean when a car turns purple?
What is the score based on, amount of time on asphalt?
The cars each have their own neural network. The top cars (blue) are copied randomly by the red cars and slightly mutated. When a car is in the top long enough it will retire and turn purple after which it will no longer change or be used to copy by other cars. 
Angular.js has been nothing but frustration for me. The more I try to dig into it, the more I seem to get lost in the mire. The documentation is so incomplete, outdated, or incorrect that trying to derive even the most trivial information from it tends to do more harm than good.
Framework-wise, I'll adopt AngularJS, since it's the second one I've tried after Knockout.js. I've yet to try out others. AngularJS from my perspective, seems to have a lot of 'community support', which can help when googling something quickly related to AngularJS. Along with frameworks, whatever I'm working with, my toolkit for JavaScript in terms of web development is lodash (used to be underscore.js), require.js, coffeescript, and grunt.js (requires node.js). Later on, I'd like to adopt jasmine for testing. My toolkit evolves as I work on JavaScript projects.
Unfortunately since javascript does not have an idiomatic method to create a copy of an array, `Array.prototype.slice` is the standard. You could create a method that forces the first argument to `slice` to be zero, and bind it to `Function.prototype.call` so that it can be used with the `arguments` object. function copyAsArray() { return Function.prototype.call.call(Array.prototype.slice, arguments[0]); } function getArgs() { return copyAsArray(arguments); }
I did read the entire thing... that's why my comment is a take on one of the last sentences of the entire article. "However, it brings more flexibility, because it is a pure JavaScript." 
Can you comment or link to when said books will come available?
You are awesome!
Here's an example: http://jsfiddle.net/rzP2w/1/ Basically we use state to determine which tab is open, then change the content variable based on it. We then just drop the content variable inside the component we return from render().
It means they are assumed to be fully trained and are taken out of the gene pool.
You can avoid this problem (after grokking it), by using event delegation. You don't need to register an event handler for each paragraph you create, you can just create a click handler on a parent element of all paragraphs and [access the target property on the event object](http://jsfiddle.net/D9Uww/). 
This is pretty sweet. Good job!
Framerate really sucks even on my i7 4770k :/ and it's just sine wave text with spinning image! You should really profile it.
IMO if somebody only learns to write JavaScript by using a framework such as jQuery, they a weaker coder for it. They miss out on the benefits of learning pure JS because they miss lots of features of the language and never have a complete learning experience. You might think that most people who learn jQuery are experienced coders, but based purely on my subjective and highly biased opinion, I'd say most of them never bother to learn the language. In fact, I've seen so many people claim jQuery and JavaScript are separate languages I'd put my money on it. I've always believed frameworks to be meant for moderate to advanced users with a thorough knowledge of the language to speed up app development time. My view is that if you don't know the language your framework is written in, don't use the framework. You should be able to demonstrate a sound understanding of the core language before delving into a framework otherwise how will you fix problems in code, debug, optimise, etc? I don't use any frameworks myself and I disagree somewhat with the person who said building your own is time consuming. It's only time consuming if you build it all at once and try to anticipate every solution. If you build it ad hoc, your library / framework should be fine.
Hello all. I threw this together today and thought others would appreciate this. I was unable to find anything that solved the problem that I had.
There's more to it than that, but yeah. Framerate kinda kills it. Interesting SVG stuff though.
For me it snapped into place. At first it was confusing and made no sense, but suddenly it started making sense. I'm still not 100% there, but every day, I realise a little bit more why angular is laid out the way it is. A big part of the confusion for me was not understanding *why* you would do things in angular style. One of the problems, I think, is that all the examples (almost by definition) deal with small simple problems that could easily be solved in more obvious ways. I think, once you have to manage a large project, that uses more parts of angular's functionality, you can start to see the whys - which then makes their examples make a lot of sense. Once you use the [seed project](https://github.com/angular/angular-seed/tree/master/app/js) and write a project that uses at least a few custom directives, a couple controllers, and some services and filters and shit, then you start to be pretty thankful for the organisation.
Well, it's a demoscene entry; they're written during a few days until the deadline and basically shouldn't be touched after that. It's art.
Try with a lower res (smaller window), fullscreen is optional. It's mostly up to browser developers to optimize their drawing engines. Unaccelerated graphics need a beefy CPU to render in higher resolutions.
That's a pretty big turnoff that their very first example uses some weird meta-language. 
Well, it ran well during development on my laptop and ran well on the big screen at 1080p. What's your setup?
I really like underscore: it's simple, easy to use and useful. I really hate Sencha's ExtJS: bulky, cumbersome, setting up an UI is annoying. When I worked on it, the chrome dev tools would routinely get up to 3.5GB of ram.
Ah, underscore. Good one, I have used/liked that as well. That's interesting. Is Sencha ExtJS the main js file for html5 app development? I've actually used that too and had a similar experience lol
It is for webapp development, yes. I don't think it cares if it's run in a html5 or html4 page.
Currently Win7 x64 on i7 3770 16gb of ram, nvidia geforce 610gt. Display is 1080p. All drives are up to date. If you are interested I can test later at home on i7 4770k 8gb of ram win7 x64 intel hd 4600 video card. I am not saying it is SLOW as hell, but your demo really jitters on my setup :)
Isn't this what [Pointer Events](http://www.w3.org/TR/pointerevents/) are designed to solve?
Use both, but frameworks are good for developers who want to write programs and applications more efficiently. I prefer vanilla but jQuery is a necessity nowadays so you need to learn it. All jobs want devs to know jQuery as well.
If you use vanilla, and your app becomes sufficiently complex, then you're going to write your own solution and end up with a homebrew framework anyway (or a mass of procedural goo). The advantage of a framework is establishing a common working pattern that extends beyond the lifecycle of your app (and business). This helps when hiring
that was my first reaction too, you can skip it if you dont like it but i went through the tutorial and im stuck, its just 30 minutes or so to go over. And its not that weird of a markup if you compare it to other js templaters i.e handlebars et all.
Ok, well.. it runs fine at 2880x1800 on my 2.3GHz retina MacBook Pro, which has just a 3615QM and a GeForce GT 650m. It also ran well on the demo setup, which I don't have specifics on other than "high-end pc". I'm sure performance is just up to browser optimizations between platforms, the code just sets things up; the motion is done by the browser. If your browser/os setup does no GPU acceleration for SVG and other browser elements, it's pretty much a no-brainer that your CPU alone isn't able to render to bitmap and push the data to the GPU's frame buffer fast enough by just brute force.
Theres no easy way around this problem, i'll just leave this here http://www.codeproject.com/Articles/16419/AI-Neural-Network-for-beginners-Part-1-of-3
Thanks. &gt;One last thing, one of the best ways to learn, is to make something you actually want, not something that you'll just throw away, and have fun I agree with this. I usually build something I want to use or need.
AMAA? Why not just share the demo and wait for comments? Haha
Your images already have transparency, so just throw a background-color onto the div.
Because `slice` is so common, people think it's the only function you can borrow from `Array.prototype`. You could also write: function numbers() { return Array.prototype.every.call(arguments, function (i) { return typeof i === 'number'; }); )
Thank you :)
I'm going to throw in my 2 cents, just to put it out there. But remember, this is strictly my opinion, and not fact. I would choose Ember.js for one reason and one reason only: it does EVERYTHING. I'm not joking. I've been using Ember.js roughly 20 hours a week since early June. I'm not an expert, but I am fairly familiar with it. After all of that time, I can say one thing: there's not a single problem that I've had that Ember.js didn't solve. Put yourself in programming mode for a second. You have a framework that is helping you with most of your stuff. But like every project ever, you have some special needs. You just know you're going to have to do some things by hand. You get to a particularly nasty part of code. You're either going to have to use a few workarounds, or contribute to the library directly. This is going to be a pain. As you're searching the codebase to figure out how to modify the source, you find out it's already been done. The feature is already there (albeit, lightly documented). Ever had that feeling? It's a good feeling, isn't it? Well now imagine that for nearly EVERY problem you'll have in your project. Seriously, I don't know how those guys do it, but they've covered every use case. I have yet to run into a single issue that wasn't already solved by Ember.js for me. Don't get me wrong, Ember.js has a VERY steep learning curve. But if you can get over that, it'll be the best framework you'll ever use, hands down. It's also highly configurable, which is very nice if you're using a proprietary backend with an odd data model (which is my case).
Meteor is still a bit away from 1.0 but I have already used it for a couple projects and I love it. Being able to share huge amounts of client and server code is a big plus for efficiency and maintainability.
Modifying an object with known guarantees seems like a Bad Idea™ Not to mention Backbone's [default constructor mechanism](http://backbonejs.org/docs/backbone.html#section-117) makes it simple to "forget" about calling your parent's `.prototype.constructor.apply(this, arguments)`.
Agreed. I could be wrong, but it seems like http://handjs.codeplex.com/ already solves this issue.
&gt; This module will save a lot of memory in your applications. Could you explain how? And why would I use this?
React.js does this from the get-go with an extra, even better, step by only updating changes between the old and new DOM.
You're welcome! Anything you'd like me to expand on?
Actually no. It's mixed. I use grunt to compile targeted coffeescript files into js source files from which becomes an authoritative copy to be used elsewhere in the project (testing, minify, build step, etc). That is, only the coffeescript compiler touches the coffeescript files. It's no different than using vanilla JavaScript. I just prefer coffeescript as I find that I'm more efficient; it's all syntactic sugar anyways. But one would need to be able to understand the syntactic sugar s/he uses to use coffeescript properly.
I'm actually curious what the general algorithm or concept of implementing heuristic AI and/or natural selection into a program is. Do you just let them go randomly about and then the ones with the higher scores live for the next generation? And how does the imitation work? Thanks :D
Do you know how neural networks work?
Not in depth, I just know that nodes communicate with other nodes through synaptics (?) and activate those around them. :p I should google that.
I'm planning on writing it out soon, when I have time.
so why take the fully trained ones out of the gene pool? isn't the goal to get them all fully trained?
Excellent link, didn't read all of it though. So does AI literally try to copy the human brain's method(s) of learning?
&gt; there is an implementation of insertion sort without any loop statements at all. map and reduce are both loop statements... hell, even splice. While, for and each are not the only loops.
Map, reduce, and forEach are not loops as far as a language construct is concerned. 
Looks promising, since this should allow front-end developers to use build tools like Grunt without requiring back-end developers (and build systems) to install NodeJS. Found via: https://groups.google.com/forum/#!msg/nodejs/NUkLRVU-G8w/12OP0OBu0y0J
They are Collection-controlled loops.
With collisions on, I'm frequently getting clusters of cars that are "stuck together" just slowly rotating around. 
Sorry but JSX is hideous. Try getting a team of devs to buy that.
Yea collision sucks, I haven't had a single car yet that dodged other cars. I'm not sure what the problem is. *edit* That's also the reason it's off by default.
Cool. I had a similar project going a while back but got bored of it as I couldn't see a real future for it. I wanted to create a Cocoa Touch inspired Backbone/JS framework for building PhoneGap apps
JSX is just a plain transformation of /** @jsx React.DOM */ React.createClass({ render: function() { return (&lt;b data-attr="foo"&gt;Text&lt;/b&gt;); } }); to React.createClass({ render: function() { return (React.DOM.b( {'data-attr':"foo"}, "Text")); } }); It is *completely optional* because you can just write the latter.
There is no 'technically' involved. If your source is written in coffeescript, then your source is not written in javascript. There is no gray area here. 
This is /r/javascript. The entire point of this subreddit is to discuss javascript, and that's what people are doing. If this was posted to a design subreddit, I would assume people would talk about his choice of design elements.
You need to post all of your code, preferably in a working `codepen` or the like.
Yeah, see, that's not actually much less hideous. Don't get me wrong, React is a neat bit of tech and addresses the layout thrashing problem well, but no one's buying the "JSX is optional" tagline. 
It's a java problem not JavaScript.
er..to be honest i don't know what you mean. this is honestly my first time working with javascript and i don't think i have a good idea on how scopes work quite yet
hi, looked through the examples page at https://github.com/millermedeiros/js-signals/wiki/Examples. Nice feel to it. Is there a example set that incorporates this into a whole script ? I was trying to imagine how to use this.
Take a look at https://github.com/23/resumable.js
yeah i just stumbled upon this and it looks like a great fit. as long as it allows me to use sjcl for the client side file encryption, it should work perfectly. Thanks for the link! :D
I have rackspace. Yea, it might be more "buzz" worthy to showcase a site running Wordpress, with a downloaded theme, jQuery, jQuery UI, backbone, modernizer, boilerplate, etc... to run a 4 page website ;) but doesn't make much sense. Plus, I want my design, UX, and site behaviors to shine, as well as load very fast.
Okay basically you want to attach [events](https://developer.mozilla.org/en-US/docs/Web/API/Event) to the arrow elements. These events then trigger a function that gets or sets the *value* on the [input](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement) fields. Useful: [Element Selection by ID](https://developer.mozilla.org/en-US/docs/Web/API/document.getElementById) Good Luck! 
I uploaded what I have so far, the problem is I don't know what the problem is. I've got up to the point where I can just get with my basic knowledge. I know the text needs to be moved from one box to the other, yet how that is supposed to be done I don't know. This is for school so I imagine there is a concept I should be learning. thanks for the resources ! 
Couple of points. 1) Your doctype is incorrect: &lt;!DOCTYPE html&gt; 2) The type attribute is no longer necessary in the script tag for javascript. c) Never use tables for layout. EDIT: Looking at the downvotes is one of the reasons why I tell people they should never come to reddit for help with technical questions.
&gt; This is for school so I imagine there is a concept I should be learning. Especially if you're going to school to learn this.
You are wrong that not hosting your site means you cannot use node.js. Are you trolling?
This is a javascript library with a HTML/WebGL interface - it receives input from a Leap Motion : http://leapmotion.com
Also, the article doesn't mention that bind() performs partial application, not just binding the context.
Or just [polyfill it.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Compatibility)
No not exclusively, however this is a skill that I want to have. 
Reminds me of: [shouldiusetablesforlayout.com](http://shouldiusetablesforlayout.com/)
having an object with known guarantees that get ripped out from under your code with instructions to just add it back in seems like a Bad Idea (tm)
Please name some JavaScript libraries that you can not use directly from CoffeeScript. Some CS libraries that you can not use directly from JS? How about some things that you can do with JS but not CS? Some good practice design patterns that can be implemented in JS but not CS? Significant (non-stylistic) differences between the structure of a CS application and an equivalent JS application? Just because you have some personal vendetta against jashkenas and want to pretend CoffeeScript doesn't exist, does not mean CoffeeScript is not directly related to JavaScript. CoffeeScript is nothing more than an alternative syntax for JavaScript with shortcuts for some of the most common patterns. And if this is anything like the last several times you trolled about CoffeeScript, you're just going to downvote this post and ignore my points. Probably call me a "syntax fetishist", "coffeecritter", or "expert beginner", because who needs to come up with valid arguments when you can just resort to name calling? Maybe you'll even whine about all the CoffeeScript jobs you've supposedly turned down because of your pride. Perhaps you'll make a false comparison by typing out english or SMS shorthand without any punctuation or formatting? Go troll elsewhere.
At the end, the author briefly mentions the performance impact of using these functions. If you're writing library code or you've profiled your code and found that an `apply()` call is slowing your app down, a common performance optimization is to do direct calls for small numbers of arguments, then fall back on `apply()` for large numbers of arguments. Here's an example from [the angular.js dependency injector](https://github.com/angular/angular.js/blob/v1.1.5/src/auto/injector.js#L578): switch (self ? -1 : args.length) { case 0: return fn(); case 1: return fn(args[0]); case 2: return fn(args[0], args[1]); case 3: return fn(args[0], args[1], args[2]); case 4: return fn(args[0], args[1], args[2], args[3]); case 5: return fn(args[0], args[1], args[2], args[3], args[4]); case 6: return fn(args[0], args[1], args[2], args[3], args[4], args[5]); case 7: return fn(args[0], args[1], args[2], args[3], args[4], args[5], args[6]); case 8: return fn(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); case 9: return fn(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); case 10: return fn(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); default: return fn.apply(self, args); }
Trick to remember if it's apply or call that takes an array. Apply starts and ends with the same letter as array and has equal amount of letters.
Mostly I use it in conjunction with require-js wich provides a simple "jsx!module" plugin for requirejs and relieves me of setting up a watchdog and can also use the requirejs optimizer to bundle up and precompile the jsx once it's time for deployment. Together with IDEA that for some reason manages to deal with JSX quite well without any plugins, I get along with JSX quite fine. Expected it to be more of an issue. When I write React without JSX, I just alias React.DOM to usually "b" to shorten it a little. Back in the days, I used to use my own DOM-builder, so I'm somewhat used to that style and I really like it more than at least string-template concatenation. Handlebars or so might look nicer, but I see the problems with React's model in conjunction with templates. 
I'm fairly new to this too but I think this is correct. The solution is as below: MemberWrapper.dao.checkForUpdates(); You are correct that this is to do with scoping, the *this.eventModule.addListener* line begins a new level of scope making *this* apply to the function rather than the object you have created.
Generally, objects define the scope of `this` in Javascript. Inside of this.eventModule.addListener('refreshMembers', function(caller, data) { this.dao.checkForUpdates(); // &lt;-- 'this.dao' is undefined } ); `this` refers to `eventModule`, as that's the object you're in at the time. So, you probably need to [bind to a different scope](https://medium.com/the-javascript-collection/9e6122cde639). 
Imagine you see this code without any further context and knowledge about performance.
... and "call" has the same amount of letters as "list". :) OK that is stupid.
Call = Coll = Collection = hf3 confirmed.
The only important code convention is consistency. Everything else is just flavours of readability.
I recommend reading https://medium.com/the-javascript-collection/9e6122cde639 too, it is great.
At least we don't have to do [this.](http://svn.codehaus.org/groovy/trunk/groovy/groovy-core/src/main/org/codehaus/groovy/runtime/ArrayUtil.java)
or simply define `this` as some other variable outside of the listener callback var self = this; ... this.eventModule.addListener('refreshMembers', function(){ self.dao.checkForUpdates(); }); 
Definitely easier, but a bit of a hack.
Yeah and isnt 'use strict' compatible 
Yeah, but the variable is named `array`, not `nodelist`. There are countless examples to be found of using `call()` appropriately, and this isn't one that makes for a good demonstration on its usefulness. If you're going to demo some method, at least do it in context and include all supporting code...
I'm guessing they named it `array` because `arrayOrNodeListOrArguments` was too cumbersome.
TIL there is a pile of poo in Unicode.
FANTASTIC post. Including what's broken along with how to work around it -- in detail -- is awesome.
and the coffeescript version of that is render: -&gt; (b {attr:value}, "Text")
I'm not faulting Underscore, I'm faulting the author who used it as an example.
So basically, you are saying Angular then? Or is it polymer that gets your vote? 
BB doesnt have data binding ( at all ) . jashkenas is strictly against the idea. Are you talking about a plugin?
more specifically, [wombat poop](http://www.reddit.com/r/todayilearned/comments/1oz2cp/til_wombat_poop_is_shaped_like_a_cube_this/). Edit: Ok. I just realized the symbol actually looks like poo and not the &amp;#x25AF; that showed up in my browser...
That was extremely informative, thanks!
No, that would be like calling a method on the static property `MemberWrapper.dao`. 
If you're using Unicode string length for anything but storage space, you're going to have a bad time. In particular, if you expect it to be linguistically meaningful, think again. Similarly, if you think you're going to do something with a single code point and you're not writing a massive Unicode library that could trivially handle surrogate pairs, you're wrong. IOW, yeah, JavaScript is really wrong, but if these are your biggest problem in dealing with Unicode, maybe rethink whether you really ought to be dealing with Unicode.
also fixes environments that don't have call/apply (can you guess which browser I'm talking about?)
Yeah, that does not explain why CS shouldn't be discussed on a JS forum. They're directly compatible languages with nearly identical structure. When you program in CS, you are still essentially thinking in JS. The whole point of CS is to write JS. Clearly you have no points again, and went straight to name calling, so there's just no point arguing with you.
I'm talking about the data binding in Ember.
This is pretty damn great. I like the style and it flows very nicely. 
Change this.dao.checkForUpdates(); to this.dao.checkForUpdates.bind(this)() Think of the operation "bind" and "this" as taking place when the MemberWrapper() function runs. However the execution of this.dao.checkForUpdates only occurs when the actual function is needed to run. Right now the "dao" object (and any methods executed to it) has the "this" object set to a combination of dao scope and any variables in the parent **execution** scope, and the parent **definition** scope. Unfortunately your MemberWrapper is the parent's parent **definition** scope. So when the event "refreshMembers" throws, the scope ends up being whatever threw it + this.dao. It has no idea what MemberWrapper is or its variables. For example: function MyObj() { this.somevalue='1'; this.someotherobj = { foo:function(e) { return this.somevalue; } }; this.somefunc = function(e) { return this.someotherobj.foo(); } } var p = new MyObj(); p.somefunc(); This returns undefined because the execution of this.someotherobj.foo() exists in the "someotherobj" **definition** scope and the **execution** scope of what called it, which since it (e.g., foo()) wasn't called or defined in the MyObj scope (but defined in the someotherobj scope) the value 'somevalue' is unknown (since 'somevalue' was defined in the MyObj scope). However we can "hack" around this by adding a bind(this) to the end of the function: function MyObj() { this.somevalue='1'; this.someotherobj = { foo:function(e) { return this.somevalue }.bind(this) }; this.somefunc = function(e) { return this.someotherobj.foo(); } } var p = new MyObj(); p.somefunc(); I should note be very careful when explicitly telling javascript to use a different scope. This can result in very odd bugs.
Read the [meta style guide](http://www.2ality.com/2013/07/meta-style-guide.html) before you say anything about coding styles at all.
I've detected a hexadecimal color code in your comment. Please allow me to provide visual representation. [#128169](http://color.re/128169.png) *** [^^Learn ^^more ^^about ^^me](http://color.re) ^^| ^^Don't ^^want ^^me ^^replying ^^on ^^your ^^comments ^^again? ^^Respond ^^to ^^this ^^comment ^^with: ^^'colorcodebot ^^leave ^^me ^^alone' 
You are the one with no valid points. You can't even understand that coffeescript is not javascript. Trying to prove to anyone that coffeeacript is javascript os a fools errand. It makes you look silly. You should just accept that your coffeescript source is not javascript source. Move over to r/coffeescript if you don't feel like getting called out for bringing it up in r/javascript.
One doesn't use unicode for advantage, one uses it because one must. You'll know if you need it. FWIW, if you're using JavaScript, your strings are already unicode strings (UCS-2, technically).
While the comment you are replying to doesn't make any sense, what you wrote is not the true power of promises at all, you could write a helper function in 1 minute to do the same with callbacks. Maybe read the article.
As a javascript noob I've a question: What's the difference or benefits using prototype or the method OP used?
There are also, among other oddities: * U+1F391 MOON VIEWING CEREMONY (🎑) * U+1F46F WOMAN WITH BUNNY EARS (👯) * U+1F47D EXTRATERRESTRIAL ALIEN (👽) * U+1F4B9 CHART WITH UPWARDS TREND AND YEN SIGN (💹) * U+1F63B SMILING CAT FACE WITH HEART-SHAPED EYES (😻) But to be honest, I think it was even more silly to introduce the [Phaistos disc](http://en.wikipedia.org/wiki/Phaistos_Disc) script in Unicode when it's a hapax and not even decoded (so basically the only thing you can do with those characters is spell the Phaistos disk itself!). Why not the Voynich manuscript as well?
mostly less writing
To summarize it more succinctly: &gt; JavaScript treats character strings as sequences of [UTF-16](http://en.wikipedia.org/wiki/UTF-16) units (so "astral" Unicode code points appear as two surrogates). (I'm amazed the page managed not to say "UTF-16" anywhere!) Exactly the same is true of Java. Except that Java has a reasonable library for counting code points and so on, while JavaScript will only have it starting from ES-6. Of course, it's also good to recall that several Unicode code points can combine to form a single "symbol", but it's rarely ever useful to know the number of symbols in a string (and perhaps not even meaningful: does the U+200D ZERO WIDTH JOINER count as a 1 or 0 symbols, for example? why would one care?). One very important thing about UTF-16 representing a single code point as two surrocates, however, is that one should never truncate a character string with .substr() without checking that one isn't leaving a lone surrogate at the end, because that can cause, for example, XML to be non-well-formed (a lone surrogate is invalid UTF-16, so cannot appear in well-formed XML), hence very subtle errors.
I'n a perfect world this would be true.
Hey, thanks for that note! My personal opinion is to not use bind for currying. In general, I use bind to bind a context, and currying to bind arguments. Really great point, though :)
&gt;When you program in CS, you are still essentially thinking in JS. The whole point of CS is to write JS. Close enough. Don't get mad at me for your poor choice in using a non-standard language for your codebase. You seem very angry that I said coffeescript != javascript. Seems like I hit a nerve, but don't blame me for pointing out the obvious. If you are so fragile about your decision to use coffeescript, maybe you should reevaluate your decision to use it. 
I recently went through a similar experience trying to wrap my head around `Function.prototype.call.bind(Array.prototype.slice)` - http://kavun.github.io/2013/10/19/understanding-the-shortcut-for-array-prototype-slice/ I agree with you that JavaScript Allongé is an excellent book for learning functional javascript.
Sure, IE5.0, but who cares?
http://prerender.io/
Ooh! Toilet! 🚽 Perfect place to put the 💩
I was hoping to learn how to write a method where args are optional and a callback is the last argument... I got as far as: function myFunc(arg1, arg2, callback) { arguments.pop()(myReturnData); } ... but I have no idea how to handle `arg2` as sometimes it could be passed as a function, and sometimes not. 
Keep this development under your radar sweeps!
This is really nice!
You have to "overload" based on type. See if arg2's typeof is "function" and if so set callback to arg2 and set arg2 to null/undefined.
Interesting. On my Mac, I get very cartoony versions. Going to have to remember the dramatic difference if I ever need to use these. 
Another one: http://pyz.socialgamer.net/game.jsp / https://github.com/ajanata/PretendYoureXyzzy
I dig the SavySoda faces.
I've always been a fan of this example: function greet( person ) { alert( "Hello " + person.name + ", I'm " + this.name ); }; var alice = { name: "Alice" }; var bob = { name: "Bob" }; greet.call( bob, alice ); // alerts "Hello Alice, I'm Bob" greet.call( alice, bob ); // alerts "Hello Bob, I'm Alice" greet.apply( bob, [ alice ] ); // alerts "Hello Alice, I'm Bob" greet.apply( alice, [ bob ] ); // alerts "Hello Bob, I'm Alice" From trephine.org's [JavaScript call and apply quick reference](http://trephine.org/t/index.php?title=JavaScript_call_and_apply_quick_reference) (which is actually a summation of their [lengthier explanation](http://trephine.org/t/index.php?title=JavaScript_call_and_apply)).
You can use `pop` as you are trying and then copy `arguments` as an array with `slice` so that you can loop through the other preceding args. function myFunc() { var lastArg = [].pop.call(arguments); var arrayOfOtherArgs = [].slice.call(arguments); if (typeof lastArg === 'function') { lastArg.call(this); } }
I've seen this while perusing the ng codebase. I always assumed it was some kind of performance / optimization. If it wasn't, we'd all be in trouble.
I recommend checking out lodash. I've used underscore for a while and switched up to lodash. Lodash pretty much provides the same functions as underscore along with even more useful functions.
I prefer to keep my generators light-hearted and fun.
Good attempt, but .... well, actually, no. Terrible attempt. There was no hex code in that comment, it was part of a hyperlink... and the link you've provided is to an image on a server that returns 'this page isnt redirecting properly'.. /u/supersniperguy will hear about this!
^(If this actually is a javascript question and not java...) Why not use objects within an array? var myPlayer; myPlayer.songs = [ { file:"herp.mp3", title:"Herpity" }, { file:"derp.mp3", title:"Derpity" }, { file:"lerp.mp3", title:"Linear interpolation" }, { file:"warp.mp3", title:"Hyperspeed" }, { file:"perp.mp3", title:"Bad guy" } ]; This way you can be sure the title will be in sync with the song... myPlayer.play = function ( nth ) { myPlayer.showSongInfo( myPlayer.songs[ nth ].title ); myPlayer.playSongFile( myPlayer.songs[ nth ].file ); }; myPlayer.showSongInfo = function ( title ) { console.log( "The current song is called " + title ); } myPlayer.playSongFile = function ( file ) { myPlayer.current = new Audio( file ); myPlayer.current.play(); } Calling myPlayer.play( 3 ); will play warp.mp3 while displaying "Hyperspeed" in the console.
Nice, thanks for the example! 
Mobile website needs work, great idea though
I don't know why you're being downvoted for posting a fact, but he is right. &lt;script type="text/javascript" src="http://localhost:35729/livereload.js"&gt;&lt;/script&gt; It looks like a dev artifact.
***NEEDS [MOWIN' BORIS!](http://www.youtube.com/watch?feature=player_detailpage&amp;v=ZsKYXftB68M#t=228)***
Most definitely a dev artifact from grunt... Most likely he is using "grunt server" to host it... strange
Looks like it is down?
been up since yesterday will have a look though clickable &gt; http://endpoints.io/autocomplete
I just played, as a guest, and I won! 2 things: * It's too fast. I need more time to decide. * it said the game was over because too many people left. But I won 5/5. Great job, though!
Really well done!
I’ve written a separate post on JavaScript’s internal character encoding: http://mathiasbynens.be/notes/javascript-encoding It’s more like UCS-2 than it is UTF-16, by the way.
&gt; UTF-8 character list This page is confusing UTF-8 (a character encoding) with Unicode (the set of symbols). 
Yep. You don’t really have a choice. Especially if you deal with user-supplied or third-party content, you have to write your code in such a way that it can handle any Unicode symbol, not just the most commonly used ones.
Pulling in jquery as a dependency just to set a cookie and do an ajax call is unnecessary. You should do it in vanilla JS instead, it's not worth the bandwidth cost unless you need it for other stuff as part of a larger project. You should also look into error handling in your PHP code, if I remember correctly PHP will complain if you try to access non-existing array variables (which is good), but you need to handle the errors somehow. You could do it inline by using isset() and the ternary operator to handle missing post data. Also, never tell your user if an sql query succeeded or failed.
cool story bro.
some time ago a made something quite similar but more disgusting: http://codepen.io/AndyTheGiant/pen/rHhGA
I could use some advice here guys :-/
Cool. So how many hours did it take you to make that? Why didn't you just use this http://dimsemenov.com/plugins/royal-slider/? or this one https://iosscripts.com/iosslider/ or this one http://touchslider.com/ or this one http://jquery-plugins.net/rtp-slider-js-flexible-and-responsive-slider-plugin-with-touch-support or this one http://dimsemenov.com/plugins/touchcarousel/#carousel-gallery or this one http://torontographic.wordpress.com/2012/02/23/jquery-mouseswipe/ 
You could do something like that in [D3](http://d3js.org/). [Here's an example](http://bl.ocks.org/mbostock/4062045)
Well, what they are using there is flash. Perhaps D3 could help you with generating such a presentation?
Took around 8 hours in total. We did look at quite a few ready made solutions but none of them were exactly what my client wanted. One of the important aspects was that the images should not snap into position.
I was looking into D3, though I haven't done any large scale development with it. Is there a way to extend the types of layouts that it has (like variations on the force directed graph or something)
Thanks! I was planning to do an autoinit as you suggest, but I chose to focus on the key features first. I probably will add this feature later to make the setup easier. The multi jogwheel feature was unplanned as it was not a requirement. Currently, multiple jogwheeled elements are all transitioned together when using arrow keys. Again, I might improve this in the future, but it's not a priority. Good call though, I didn't think of it.
I'll check the houses on the left, you check the ones on the right... 
I'm glad to see such enthusiasm! It's exactly what we need once we start rolling out ;) But seriously, I wouldn't miss the chance to share our project with reddit. Just give me a few months to finish the beta.
No plain source ? No github ? What is this, Microsoft ?
[ketchup here](http://kirahvi.dy.fi/~thykka/c/jogwheel/vnd/jogwheel.js)
Makes sense, I guess outside of determining the maximum character count of something to be internationalized I can't think of many other use cases where this is an issue. But I think most programmers internalize strings as an array of characters, not glyphs. In addition, some of the examples in the post seem to hint that something is wrong, when really I believe its behaving exactly as it should (e.g., 'mañana' == 'mañana') The two strings specified have not only different byte sequences, but also different unicode sequences. These shouldn't ever be equal, even though they look visually the same. There are actually quite a few unicode sequences that represent the same glyph but have different semantic meanings and shouldn't be interchanged (or have any sort of equality). I'm not sure if that was the reason for bringing it up but it seemed a tangental point that diluted the argument.
Sim City 2000!
Yeah, off hand I can think of 2 ways. Turn the canvas into an image and load it into a webgl canvas to post process it. Get the pixel data out of the canvas and do an operation over them all similar to how a shader would. (this is an expensive operation)
Well done! It's a great feeling :)
It doesn't look like you've actually investigated the problem much, or if you have, you've for some reason failed to mention any of it in your SO post. I'm sorry, but it looks like you're not even trying, instead just giving up when the build fails. For instance, the errors reference many strings that look to be searchable: `box2d.PolyDef`, `pl.KeyBinding`, etc. What happens when you search the codebase for those? I've never touched Google's Closure, but it took me only a few seconds to find [this page](https://code.google.com/p/closure-compiler/wiki/ManageClosureDependencies) and quickly understand what the error means. Considering that this is all open-source, you have every ability to open up `closurebuilder.py` and start poking around at the lines indicated in the error message. Put in some log statements, do some variable inspection, whatever... but Python isn't hard at all to follow. Figure out what the script is doing -- at least superficially at those particular failure spots -- and that should provide you with what the problem is.
Some bump/normal mapping
Maybe a webgl canvas with an orthographic perspective might be better?
Nobody ever talks about the brittleness of significant white-space when used with spaces for indenting. It is a flawed combination of choices, especially with the arcane notations used in CoffeeScript I personally find it odd serious devs can propose such a thing. 
Brittleness of significant white space? Best practice is to indent properly, so the significant white space tries to catch two birds with one stone. Granted, stylistically some people dislike this. However, all the curly braces in javascript are similarly "brittle". You can't tell me you've never searched through a javascript file trying to figure out where you were missing a closing curly brace? (On a side note, html is even worse, trying to figure out where that closing div tag goes drives me crazy)
Vanilla JS == just plain JS, no external libraries or anything like that. jQuery is a library with tons of features, and unless you need many of these features (selecting, traversing and manipulating elements, animation, etc.) you should try to avoid using it. For tiny projects like this one you should definitely just use the features you actually need, which means using only simple wrappers like [this one](http://www.quirksmode.org/js/cookies.html) for cookies. For prototyping or larger projects jQuery or other libraries can be very useful, but this project is very small and I recommend that you try to learn plain javascript first, and use external libraries only if needed. jQuery dumbs down a lot of javascript's features and it's always useful to know what happens in the background before depending on an external library to make your day easier.
But with braces a good IDE can make a whole lot of difference, especially since you will still indent. It will highlight the matching brace, even if it is a huge mess when somebody merged code without fixing the indents. Also because you are not mixing program structure with visual structure. If you also use tabs instead of spaces (and show whitespace in the editor view) you get code that is super robust. And then there is of course auto-formatting. Why waste brainpower formatting code? Hit a key and let the IDE do it for you. Never bitch or bumble about coding standards, let the machines do it. 
Can't get it to load in Chrome. (edit: Ok... now it seems to work and chrome doesn't have the city hall bug) Whenever I build a city hall the trees/buildings all vanish and the game seems to lock up.
I agree with your observations but I think the conclusion to draw from them is that "JavaScript uses UTF-16 rather than UCS-4 (with the footnote that it confusingly calls 'characters' what are actually UTF-16 code units)", not "JavaScript uses UCS-2 rather than UTF-16". If JavaScript really used UCS-2, then the value of "👽".length would be 1 because "👽" would be remapped as U+FFFD REPLACEMENT CHARACTER since the character is not representable in UCS-2. Also, if JavaScript used UCS-2, then (as you yourself point out), one could not include surrogates in strings because they are not Unicode characters and can never be part of a UCS-2-encoded character string (they are, by essence, part of UTF-16). It is possible that there are some browsers that behave like this, and they would conform to the standard (albeit stupidly). If JavaScript used UCS-4, then of course everything would be fine: every Unicode character would be represented by a single code unit. The same would be true, of course, if JavaScript used UTF-16 transparently (or UTF-8 transparently), i.e., by exposing only Unicode code points and not code units — but then the question of what JavaScript actually uses would become essentially meaningless. Instead, JavaScript, like Java, exposes 16-bit code units and presents a single astral Unicode code point as two surrogate code units: I think the best way of describing this situation is to say that it presents character strings as UTF-16 encoded strings and confusingly describes UTF-16 code units as "characters".
thanks for that link.
some remarks, 1) you are loading bootstrap.css/bootstrap.js/backbone will not using it(on first sight)0. 2) hooray for requireJS 3) think about minifiing and bundeling you js files, would boost your load time 4) and some failed to load services: Failed to load resource: the server responded with a status of 404 (Not Found) http://narushevich.lv/vkaria/js/vendor/jquery-2.0.3.min.map Failed to load resource: the server responded with a status of 404 (Not Found) 5) good work questions, are you using a task runner like grunt? are you using a javascript unit tester? How long have you been working on this?
.bind() is in ECMAScript 5 however: [Compatibility Table](http://kangax.github.io/es5-compat-table/#Function.prototype.bind). You can use it like: http://jsfiddle.net/path411/TGGqb/ function MyClass() { this.Property = 5; document.getElementById('mybutton').addEventListener('click', this.onClick.bind(this)); } MyClass.prototype.onClick = function() { console.log(this.Property); } If I'm not using .bind, my preferred method of this is actually: http://jsfiddle.net/path411/qrGP6/ function MyClass() { this.Property = 5; document.getElementById('mybutton').addEventListener('click', this.onClick()); } MyClass.prototype.onClick = function() { var self = this; return function() { console.log(self.Property); } }
I see, I will rewrite this little project to not use any jquery. The main site I am implementing it on, uses a lot of jquery (slider effects). But for other sites and learning purposes I will convert it to Vanilla, to get a grasp on Javascript better! Thanks :) I will post back when I make the changes and do some error handling in the php as well. 
Wow... after reading through some of the source files in some of the source folders...... You're a professional games programmer by trade?
Edit: I figured it out, window.onload worked, I just forgot to link the vanilla.js file.
so do you generate everything client side or are parts being generated on a server?
agreed. this is temporal issue for simpler code across all platforms, because touch devices dont have middle mouse button. 
This is sources of game and all stuff. https://bitbucket.org/narushevich/vkaria But you may be more interested in engine, which I wrote. https://bitbucket.org/narushevich/scalia It's inspired from Unity3D, and is entity-component based, and uses canvas for rendering. It is actually a 3D scene graph, with only ortographic 2d renderer) I've done even simple 3d rendering with it, but later took that code out. some old 3d demo: http://narushevich.lv/debris Engine is not documented, but there is not much to document :) It's not near then finished, lot of things to optimize, lot's of hacks. But it works.
look at it as a learning experience, now you know exactly what to expect from a game engine and what the challenges are.
Great, thank you, I'll have a look under the hood. I'm not familiar with "Unity3D approach" so I guess I have something new to learn/discover which is always nice :)
Doesn't detect my OS at all (win 7)
Do you really want to know what requirement each of those scripts lacked? 
Same here. Except Win 8. 
Thirded. But really, to me the device and orientation would be more important for general targeting. I can't think of any practical cases that I would be doing that would need OS specific targeting.
They open sourced it! https://github.com/cardsforhumanity/cardsforhumanity
Anyone else on Firefox not getting the mentioned outputs in manana examples? [There's visual difference where the article says there's none, and the reversing seems to happen fine where the article says it's messed up!](http://imgur.com/LTh4cNz) Firefox (actually Palemoon) 24.0.2 on Win7, "Character Encoding" within "Web Developer" menu says "Unicode (UTF-8)". 
It's more convenient in the long run, though, to have a helper function called something like `toArray` that converts an array-like, like `arguments` or a `NodeList`, to an array. Then you can use it in the same way: `return toArray(arguments).map(fn);` (Also, those underscores... *shudders*)
Sure. I find that interesting. Learning about other people's thought processes is very educational. 
I think that's not really a requirement. And if it was, and you only had found one script, couldn't you just comment out the snapping code? Anyway the first one that I checked again today jquery-mouseswipe has an option for snapping or not snapping etc. I know its hard to find the right component sometime, and its nice to have a little project, but I object to this because literally hundreds of people have solved that exact same problem before, and dozens of them have put their code on the internet for free or for peanuts.
This looks very promising and exciting. I am curious, has anyone tried using it for mobile yet? Since it's under the Adobe umbrella, I wonder how it behaves in a PhoneGap implementation.
Its actually not true. Its really not that case that there exists zero free or inexpensive components on the internet to do that within your actual requirements. That's false. So many people have solved that problem already. Its as if you went to a custom car shop and said you wanted a racing-style seat with an adjustable headrest and they decided they had to make their own because they couldn't find one with an adjustable headrest.
I think I might start using SVG now...
This is cool stuff! I've always wanted to build an iosmetric game. Looks like you're on to something neat. Keep it up! One comment I do have: The sound you have for placing a house -- omg my ears hurt. :/
It's pretty cool, but I'm not sold on all of this shipping my backend out to some random servers on the Internet. 
Also, no IndexedDB, which has been supported for some time now in Firefox, Chrome, and IE. The real question is... why? Options include: 1. They don't care (seems unlikely, since they actively don't allow other browsers on iOS) 2. They are incompetent (seems unlikely, given all Apple has accomplished in the software world) 3. They are evil and want to cripple HTML5 so people are encouraged to make native apps rather than crossplatform HTML5 apps I know it makes me sound like a conspiracy theorist, but I can't see any reasonable explanation except #3.
Thanks! We appreciate it.
Thanks! If you have any specific feedback on how we can make the mobile experience better, definitely let us know! Either post a comment here or email us via cardsforhumanityteam@gmail.com
Duly noted - thanks for checking it out!
Pumped. Starting a node.js code base e-learning system where anyone can publish courses and make money. This will be used extensively.
Any strong reasons to use this over d3.js? Not criticizing, just not a great Javascript programmer.
Bind an onclick event to your button, instead of binding window.onload to your CreateTimer method. You're close. Google what I mentioned. ;)
You don't invent, ship and pass as standard CSS animations, transitions and Canvas because you want to cripple HTML5. I concur with you on IndexedDB, though. The fact they continue to ship WebSQL in favor of an adopted standard is as baffling as it is frustrating. Regarding the article: SPDY is a nascent draft. Same with WebRTC. NavTiming is nice, but a developer's game, not a user's. The article doesn't convince me that Safari is holding the web back, simply that they're taking a more conservative approach to emerging and unfinished web standards. (See also: their continued lack of official support for WebGL)
Thank you. I replaced all of the body with this &lt;button onclick="CreateTimer()"&gt;Try it&lt;/button&gt; &lt;div id='timer' /&gt; But it still won't work. Getting closer though
Look up how to bind events to DOM elements using JavaScript. It'll open a whole new world.
d3 is useful for data-driven documents, which commonly, but not necessarily, involves SVGs. d3's focus is manipulating data and binding it to the DOM. Snap looks like it's good for more generic / pure SVG manipulation ... as described in the "why snap" page, Snap was written by the author of Raphael, and is essentially Raphael, but taking advantage of features only implemented in newer browsers.
NSFE
also, don't forget about http://benhowdle.im/svgeezy/ for svg assets you make that need png alternatives for unsupported devices.
It works great with PhoneGap! Multiple vector animations can be hard on the app's performance though.
I wrote this a while back to proselytize Parser Combinators internally. I was recently showing it to a friend and they reminded me I should let the world see it. The parse module serves as an attempt at an intro to parser combinators using [jsparse](https://github.com/doublec/jsparse). It was really fun when I discovered you could compress the CSS paths by using a Trie where the keys where lists of selectors instead of lists of characters. 
The point was, what if you want to count the number of symbols in such a string? In both those cases (`'mañana'` vs. `'mañana'`) any human being would expect a count of `6`, not `7`. The blog post then goes on to explain how you could get to that result of `6` for both strings.
Made by same guy who made raphael. I thought raphael was dead (unmaintained) but here we go, groups whoho!
q. What do you do with a JavaScript function losing its scope? a. You give it closure.
Any reason why raphael is dead? Is there an alternative that is better?
Well, apparently the head guy was working on this. So this snap thing is a replacement! :)
That depends on the target audience. You'll still need Raphael if you're wanting it to work on old IE.
No. Nobody wants to work with old IE. It doesnt exist. Lalalala. 
Apple allow Chrome on iOS. It is a very good mobile browser.
I think they're probably focussed on other things. I'd like to see Safari removed from OSX and replaced with Chrome by default. Not going to happen of course.
of course it would. assuming it's a 2D game, for example, you can have your sprites as billboards, then have normal maps/height maps for each sprite/texture, and wala, you have normal/bump mapping. I don't know why TechnoCat is being down voted as he gave promising advice.
Looks interesting but I'm having trouble seeing what it is for. Could you explain why I'd use this?
This looks like a much needed upgrade over Raphael.js! No more weirdness with the Raphael sets (which are not SVG groups) although it still has them, native drag support, touch support, 
In the past, Safari was like an outdated version of Chrome. Today, it's worse.
Yeah, you can use their settings, but can you create a custom layout - ie. instead of layout.force(), something like layout.custom()?
No. caniuse.com shows overall support by Safari far ahead of IE11 in all categories except HTML5 (I presume APIs) where it's tied. IE11, as always, trails behind every other browser. Note that the author only lists 3 APIs out of hundreds in a lame attempt to prove his point. EDIT: Ooh! A blog on a site with a product to sell! And only the 12th post. Who woulda thought?
It's how all browser based games do it, you get used to it. I didn't even consider that it might be something different, I just started using it in the standard way.
I'm still not 100% sure how this concerns three.js specifically. It looks like another tutorial on how to structure a requirejs app.
I guess it's true that you could do a similar integration with another framework, rather than three.js. For me, at least, the value is in having a starting point that has the building blocks of three.js and require.js in place. Had I used something like this a few weeks back, rather than starting from the sample code of the three.js examples, I would have saved myself a refactor when things got too big.
That's not a script.
I apologize, here's the script: https://github.com/UsabilityDynamics/resizely-client The script goes hand in hand with the site.
Oops! Here's the script, itself, that should probably be in place of the main link: https://github.com/UsabilityDynamics/resizely-client - the site/script go hand in hand.
Yeah that's probably awful close. I'll have a look through the docs, but do you know if you can hookup custom SVG elements? (Like if I wanted to draw my own valves etc)
Bit of a slowpoke on the reply here, but oh well. The final solution ended up as bit of a [kludge](http://en.wikipedia.org/wiki/Kludge), trying to reference back to the original object in these unknown scopes. It's basically the same as what /u/needed_an_account mentioned. function MemberWrapper() { this.eventModule = new EventModule(); this.gui = new MemberGuiTable(); this.dao = new MemberDataAccess(); // Adding custom events: this.eventModule.addEvent('refreshMembers'); this.eventModule.addListener('refreshMembers', (function(me){ return function(caller, data) { me.dao.checkForUpdates(); }; }(this)) ); // [...] Rest of constructor }; MemberWrapper.prototype.init = function(refreshTime) { window.setInterval( (function(me){ return function() { me.eventModule.triggerEvent('refreshMembers', this, 'none'); }; }(this)), refreshTime); // [...] Rest of method }; I will try to make myself more stable on the use of bind, as it seems like the better solution than this workaround. Thanks a lot for the replies people! 
In the testData directory you will find a legacy ~15,000 loc css file. The original use case was to do some automated cleanup on this file to make hand-maintenance more tractable. Running this file through csscleaner you get 4986 lines of human-readable Less.
Need more time to choose. Reading and processing that many cards as well as how it fits into the sentence is too short. Feels rushed and hectic.
Is that... is that real?
I haven't done anything with HTML5 online/offline events, but MDN suggests this article from html5rocks, [working off the grid with html5 offline](http://www.html5rocks.com/en/mobile/workingoffthegrid/), that seems to have a few different ways to work out if the browser is offline. Good luck!
Without even reading the body of your post; yes. There's a js lib for everything.
You'll probably want to look into this http://snapsvg.io/ There is also this that I altered to make snap https://github.com/mvanlonden/jquery-svgpansnap
How about against paper.js and such? 
According to the jQuery I just ran against caniuse.com shows IE11 with 55 Partial or No supported features and Safari with 33. However, iOS 7 Safari has 48. The code I ran was the following: $('#browser_comparison').find('tbody').find('td:nth-child(2)').filter(':contains(Partial), :contains(No)').length $('#browser_comparison').find('tbody').find('td:nth-child(3)').filter(':contains(Partial), :contains(No)').length I chose All for Status and only IE11 and Safari 7. I repeated it for all the modern browsers. * Chrome 31 has only 23 * Chrome for Android 29 has 36 * Firefox 25 has 29 * Opera 18 has 29 * Opera Mobile 16 has 29 IE 11 for the next will be over 2x "worse" than Chrome and 1.5x worse than other browsers. However, iOS 7 Safari, which many would consider as important to support would find themselves in the same situation.
Yeah that's going through be a lot more helpful for oss projects once you can ignore files. In [this project of mine](https://codeclimate.com/github/calvinmetcalf/catiline) it mainly focuses on all the duplicated code between the src and dist folders. 
Nice article. I've spent a lot of time with KO, less time with NG. One thing that I really liked about NG is it has better scoping than KO, which seems designed for a global scope., with local controls kind of "hacked on".
I've never seen so many buzzwords in one title!
this is an nice idea
Although your point is mostly* valid, those dozens of people don't pay my rent. Nor would I have learned as much by using someone else's script. ^(* commenting out the snapping code would still leave me without swipe inertia)
If you follow along in their tutorial and are extremely confused by their path which they use as a pattern.... s.path("M10-5-10,15M15,0,0,15M0-5-20,15") This is some funky looking code if you're not familiar with SVG. Apparently you can use a second set of coordinates instead of using 'L'. Because this will draw the same thing. s.path("M10 -5 L -10 15, M 15 0 L 0 15, M 0 -5 L -20 15") as well as s.path("M10 -5 -10 15, M 15 0 0 15, M 0 -5 -20 15") as well as s.path("M 10 -5, -10, 15, M 15, 0, 0, 15, M 0, -5, -20, 15") I had no idea that comma usage with path was more for humans than code. 
Next up: A comparison of Lions vs Kittens! "Well they're both cats, and I love petting cats, so they both win! Look at the fur! Just look at it!" ... There is a drastic difference between these two: One is just a binding library (KO) and the other is a complete application development framework (Angular). Kittens (KO) vs Lions (Angular) Similar, but very, very different.
I really like it, but I don't like that the czar can see the cards as soon as they're picked. I feel like it really biases the decision toward whoever can just pick a card the fastest, and since there's already a 20sec time limit it's not really necessary.
OK that's a valid point. Actually to be fair every time I go back on npmjs.org and search for keywords related to the current Node.is module I am working on I get close to deciding I was wasting my time because I find similar modules. Luckily so far for this task those other modules don't have a way to integrate with my code.
Angular vs Durandal would have been a better comparison
This. Knockout doesn't even bill itself as a framework. It's a small library for databinding. It gives you observables and observable arrays - that's about it. You would generally use knockout to add databinding functionality where you would need it. AngularJS is a whole different ballgame. There's databinding, opinionated code organization (controllers for example), routing, built in api for dealing with RESTful services, dependency injection, and the ability to create your own custom markup with directives. Hell, it even has built in unit testing. Two very different architectures serving different needs.
Air vs Oxygen.... 
Are they allowed to use v8?
i wrote jsPlumb. drop me a line on the google groups if you want to discuss the question of custom elements. it's kind of on my roadmap and probably not much work.
From http://www.reddit.com/wiki/reddiquette : &gt; Post to the most appropriate community possible. Also, consider cross posting if the contents fits more communities. From the "Please don't" section: &gt; Complain about cross posts. Just because you saw it in one place, doesn't mean everyone has seen it. Just vote and move on.
paper.js implements it's own vector graphics based in &lt;canvas&gt;, not &lt;svg&gt;. I've never used either paper or snap, but the difference between canvas and SVG would be a huge factor in determining which you'd choose for a particular task.
Your going to want to attempt to download a very small file from a cdn, remember to put `?_=Math.random()` at the end so it isn't cached. for local storage in ie8 your pretty fucked but as long as it isn't to much data you could use, wait for it, cookies. [mdn](https://developer.mozilla.org/en-US/) is your friend here. Also try to avoid having to support browsers where there are 3 newer versions that a shit show right there.
As far as I can tell this is nearly identical to Raphaël, but only supports SVG, whereas Raphaël supports SVG and VML, which is useful for IE7 &amp; 8. Am I wrong or did Adobe really just re-create it? http://raphaeljs.com/
You are correct. They removed the support for VML (IE's proprietary vector engine) to make the library faster, more compact and feature-rich. **edit:** reworded to be more correct.
Made by the author of Raphael. And as mentioned, remove VML support to support full features of SVG instead of parity features with VML. Just faster and more modern -- kinda like jQuery2.
One huge advantage of not having to support VML is that you can now have true svg groups, aka nesting of svg elements. This allows you to manipulate a parent element (for example translating it) instead of an entire set of would-be child elements. This improves performance. &gt;Am I wrong or did Adobe really just re-create it? Adobe hired the guy who wrote raphael, and this is his new creation. So yeah there is probably a lot of re-used code and common API.
[Paper](http://paperjs.org/) might be able to help. Haven't used it (only major canvas stuff I've done was with [dojox.gfx](http://dojotoolkit.org/features/graphics-and-charting), which was pretty bulky), but I've heard good things.
There are some basic tags available which I am using.
Didn't mean you literally couldn't use anything from html5 just meant nothing fun.
Alright, I knew it looked super familiar (I have written a lot of Raphael code). Yeah I kinda wish they didn't release as a separate product, but instead did what jQuery did and bump the version number and remove support for older browsers.
You're god damn right about that. I hate IE, especially versions &lt; 10. Modern browsers are the only way to develop. You miss out on too much.
You seriously put the contents in `.gitignore`?
No. Only Safari's rendering engine is allowed. So when people want to use my IndexedDB-based app on their iDevice, I have to tell them that they unfortunately own the only device that simply can't run it.
I've detected a hexadecimal color code in your comment. Please allow me to provide visual representation. [#c3c3c3](http://color.re/c3c3c3.png) *** [^^Learn ^^more ^^about ^^me](http://color.re) ^^| ^^Don't ^^want ^^me ^^replying ^^on ^^your ^^comments ^^again? ^^Respond ^^to ^^this ^^comment ^^with: ^^'colorcodebot ^^leave ^^me ^^alone' 
On a Nokia Lumia 920 (windows phone) it detected that I was on a tablet.
This thread is a train wreck.
I'll keep that in mind.
You can run node.js in interactive mode
Alright this sub can be a little harsh, I should know, I knight /r/JavaScript/new here and I'm very pissed at how frequently I pull 1:1 threads out of the new queue and frankly the voters shit all over self posts, but you've got some solid stuff (It's got javascript! My bar is that low). That I even have to give directions for people to improve their post quality so this kind of immature downvoting shit doesn't happen (Especially when /r/Javascript don't get more than a dozen submissions a day) highlights the sad state of this sub.&lt;/rant&gt; What you can do to retry: Separate the core JS from the HTML into separate files on github, let people draw their own interfaces. Github uses ReadMe.md for a description which uses the same (or highly similar) markdown Reddit does. Describe the program and what it does, the API, and link a demo somewhere. Resubmit with the github link (FOR KARMA!) and maybe you'll get a better reception. Also: /r/SCP
So don't cater to it, catering to it only gives it a reason to stick around longer.
`rhino` is a Java-based JavaScript engine with an interactive shell. Available in Debian/Ubuntu apt repos.
If you don't need the browser or the server part, there's a v8 binary without chrome/node.js.
Have a look at my [talk from JSConfEU](http://www.youtube.com/watch?v=mVjpwia1YN4) if you want to know how the two of them differ/compare in the way they do binding. &lt;/shameless plug&gt;
I will point out that every package has unit and coverage testing, it's only like 30% a joke at this point.
Well your supporting IE8 for the right reasons, more fucking money, so that's good. I'd recommend stack exchange for this kind of thing they tend to be VERY good about it. One thought is that since IE8 tends not to be used on mobile devices you might be able to get away with not doing the offline sync in on it. 
Most ad includes feature a script tag that uses ugly document.write-Constructs to insert flash/image banners. If you want something without the ugliness, create a script that will use its own tag as a reference for the banner content (and delivers multiple banner versions for different sizes of the container). &lt;script src="//myserver.com/banner.js"&gt;&lt;/script&gt; (function(s, i, d){ for(s=document.getElementsByTagName('script'),i=s.length;s[i--];) { if (s[i].src.indexOf('//myserver.com/banner.js') &gt; -1) { d = document.createElement('div'); d.innerHTML = '&lt;insert html content here&gt;'; s[i].parentNode.insertBefore(d, s[i]); } } })()
At first this seemed like a really good idea: you can let users save and load things from an in app database which is automatically synced and merged with a remote database. Instead of assuming that the user has internet, and then failing to save with an ugly message, you can save it locally. And when the internet reappears you sync it automatically in the background! But I don't see how this could be used for anything real, since all users get access to the entire database. This means that anyone can add, remove or edit anything in the database. There doesn't seem to be any way to partition it off, so a user only has access to his personal data. So while this is very clever technology, I don't think it is ready for production. There will probably be another database in the near future which uses the same syncing procedure, but is better able to control user access to different documents.
You can directly save it in indexeddb. The reason using couch is for replication. The usual design pattern for couch db is each user has its own database.
I'm not very familiar with using couch db in real projects, so forgive me if I ask silly questions. Each user having their own database makes sense, that would prevent me from messing with your data. But how about data that we want to share? For example a twitter feed, how would you replicate my tweet into all my followers database? I'm assuming there needs to be a way for couchdb to trigger some backend business logic to do this?
Not really ripped out, it says: &gt; Snap.svg was written entirely from scratch by Adobe’s Dmitry Baranovskiy who also authored Raphaël
Both V8 (Chrome) and Spidermonkey (Firefox) have command line shell builds. V8 Shell you have to [build yourself](https://developers.google.com/v8/build). Or you could install [node.js](http://nodejs.org), which also uses V8. Spidermonkey has [nightly binaries](http://ftp.mozilla.org/pub/mozilla.org/firefox/nightly/latest-trunk/) (grab one of the jsshell builds)
Dat 2004 technology.
&gt; since all users get access to the entire database Heh. No. Each user gets their own "database".
You can use the client-side database instantly. It'll replicate over time. As for replicating all versions, the documentation seems to imply it replicates all versions, but I couldn't tell you for sure. Want to throw the question on [StackOverflow](http://stackoverflow.com/questions/tagged/pouchdb)?
&gt; all users get access to the entire database Not necessarily. You could... 1. Create one database for each user, so they can only write to their own account. You can then use document update handlers to make sure writes from each user conform to your schema / constraints / eccentric whims. 2. Replicate the whole database to each app server, while each app server uses filtered replication to expose very specific elements of the database to each client. 3. Replicate the whole database to each client, but use document update validators to limit who can write what and how. Different apps will want a different setup. The typical approach is one database per user, but everyone is free to play around :D
Thanks for the advice 
Sencha acquired raphael and g.raphael, Dmitriy went to Adobe. Maybe something to do with that.
So I haven't used knockout. I've been doing this stuff for a number of years now and when I read this in the knockout Introduction: &gt;Consider an example: you’re displaying a list of items, stating the number of items in that list, and want to enable an ‘Add’ button only when there are fewer than 5 items. jQuery doesn’t have a concept of an underlying data model, so to get the number of items you have to infer it from the number of TRs in a table or the number of DIVs with a certain CSS class. Maybe the number of items is displayed in some SPAN, and you have to remember to update that SPAN’s text when the user adds an item. You also must remember to disable the ‘Add’ button when the number of TRs is 5. Later, you’re asked also to implement a ‘Delete’ button and you have to figure out which DOM elements to change whenever it’s clicked. My reaction is... any one of those things takes me about five minutes to implement using jQuery.
i'm not familiar with Ember, but have some experience with Backbone. How are you looking to display the relationship? a drop down? auto complete text input? how are you specifying the relationship within the model? can you post code?
Or a single directive using Angular
You probably should read about what the advantages are with two-way binding over jQuery. In my opinion jQuery is decent up to a point where it turns into maintenance hell. If somebody would ask me to add some cosmetic features (slideout, animations, ...) to a CMS site I would probably use jQuery. Sites or apps that use more complex data structures are better suited for two-way binding. When the lines start to blur it's sometimes hard to make a good decision. For example a content website with app like parts. In that case whatever side you pick will leave you annoyed at how hard some things are that are really easy if you picked the other one.
sure thing. [Here](https://gist.github.com/dadamssg/7157107) are my models and fixture data. [Here](https://gist.github.com/dadamssg/7157220) are my controllers. I think an auto complete text input makes the most sense. I don't know how to create that though. It seems like the auto complete would make sense to be a separate component. Have its own controller(?) that dictates where its data should come from and once a company is selected, pass that data to another controller...but then i don't know how to incorporate that into the PersonEditController. There are just a lot of moving parts and i can't seem to find anything about how to hook them together.
Friends don't let friends mix UI logic with application logic 😊 Look up the MVVM Pattern and it will make more sense.
seeing as how i'm not familiar with Ember, i'm going to make some suggestions, and then go take a look at documentation. I like to assume things... First, i'd look into a way to add company selection into the person controller. you already have a relation set up in the person model; so there must be something to allow that within the controller as well. I'm not sure how ember handles templates, or passing information to them. If it's possible to pass through the entire person model/fixture reference to the template then you should be able to access the company model as well. I'd probably do a loop and output all the companies into a select for now, just to get something working. with backbone all that is rather easy. and I assume ember also has ways to accomplish these things. backbone would really just be setting a model attribute that points to a company model, with a function available to the model instance that references a collection of company models and then applies the selected model to the "company" variable. the model instance itself would have that reference applied to it at creation, so once we hit the template it's as simple as Person.getAttribute('companies') and lopping through the models in that.
Yeah I forgot Raphael became a Sencha Labs product.
Excellent post. For those of you who also work in Java, it has the same issues due to the underlying representation (16-bit characters). However, starting in Java 5 the String API added additional methods to help deal with some of these problems, which are distinguished by the keyword codepoint in their method names or parameters (codePointAt(), codePointCount(), a constructor taking an int[] codePoints, etc). And I believe Java 6 added a Normalizer class to implement various types of normalization.
There are quite a few alternatives as mentioned, it might help if you'd share for what purpose you need it. [Mozilla keeps a good list of Javascript shells.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Shells)
You know this offers ***zero*** protection and only obstructs the user? Both the hidden content as well as the password are right there in the code. It reloads because you are submitting a form on the button click. Use a regular on-click listener.
The default behavior of a submit button (&lt;input type="submit" /&gt;) is to load the page specified by the form action. In your case, the action is set to # so it reloads the current page. Your two options are to prevent the default behavior of the submit button or to use a regular button element and hook your script up to that. If I remember correctly, returning false at the end of your event handler should block the submit behavior. Also, (and forgive me if I'm pointing out the obvious) but this is not actually secured from anyone as the elements are already loaded and the password is in the script.
It's working, however your page is refreshing immediatly because you're calling the function projectsshow() onSubmit of a form. Any time a form is submitted (in this fashion) the page is refreshed. Fix: Remove the form, change the input element to a button element, and add an onClick event to the button with projectsshow().
Alternatively, add "`; return false`" to the "onsubmit" handler. That wil prevent the actual form submit.
2 return statements? The second one won't even be called.
I'm not sure ember's routes and controllers are responsible for the same things as in backbone. In ember, the route is responsible for finding records. The controller is responsible for interpreting user input...but so are views. I think i might need to create a view for my company selector but i don't know how to tell it where to get its data from. Then again, i may be talking out of my ass. Ember's docs are separated our into each piece of ember, there is hardly any information on how to bring it all together.
Exactly what I meant. She seems to have simply changed the projectsshow function to return false instead of being undefined, and that works too.
yes! I'm aware. Its a short term solution because I need to get this done in like 20 min. I'm just trying to hide my projects from the general public because my old employer is weird about that stuff. But I'm not too worried if someone does find a way to see it. Thanks for your input though! :)
Well... *technically* you can roll your own MV* pattern with JQuery.
Reddit does format code well, but I'd suggest using http://jsfiddle.net/.
Agreed. I have a /dependencies directory with all my 3rd party dependencies. And my GPA is getting brought down by lint errors in those files. I received this response from CodeClimate support: &gt; Regarding excluding directories: Currently, this feature is only available for private repos under a Code Climate account, not free-for-OSS repos. Too bad, as this makes the report pretty useless for me.
Note that the standard repo has an old version of node. Follow the longer steps here: https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager#ubuntu-mint-elementary-os. (Editted for type-o)
ignore everyone but this guy.
I tried the 2 week trial, to check it out, but you have to sign on to view, why would I put a badge with a link on my repo if nobody could view where it pointed 
Until you `require('underscore')`...
Nice concise list Kalv. Thanks for compiling it. I think more people should take the time to explore Ember.js. 
Is it possible to just get Ace in an empty browser window, much like data:text/html &lt;contenteditable&gt; ?
As someone who is very familiar w/ Ember and several other frameworks I can safely say that Reddit is one of the worst possible places to ask for advice on code. freenode.net #emberjs is much better and discuss.emberjs.com is also very alive. In the latest version of Ember and Ember Data you can specify relationships trivially. There are many examples in the docs already but here is a direct link to the most pertinent information. http://emberjs.com/guides/models/defining-models/ As you can see at the bottom of that page, relationships are dirrect object injections. For example, if you have a person who belongs to a company you would have the following App.Person = DS.Model.extend({ company: Ember.belongsTo("company") }) Then, when you have access to a person you can directly access their company by doing person.get('company') If you wanted to scan over all companies in your local cache (the store) you would do something like App.Company.find() which returns a recordarray of all your companies. You could then do something like this in a computed property or observer or method or whatever: companies.getEach("name").find(someName) Hope this helps.
I agree. It seems like people jump on the Angular train immediately and don't even take time to explore Ember.
thank you :)
thanks for the response. I've [posted](http://discuss.emberjs.com/t/how-to-relate-models-to-each-other-with-aid-from-the-ui/3108) on the forum and I've read that page. All the routes examples illustrate using a single type of model. How do i put together a form that draws from several models? For example, a person form that i can choose which company they belong to, which groups they're in, the car they own, etc. Several model stores being used at once.
It saves a lot of memory because you only will have one event handler per event instead of have a lot of them attached to different elements in DOM. Another improvements of use this delegate: * If you use jQuery to add events to elements in DOm but you don't remove the elements using remove it could start a memory leak. (Modifying your page using templates or even innerHTML) * SPA (Single Page Applications) could change the full content without taking care about removing events in elements in the views, because is document who takes care about the event handlers.
I was asking myself the same questions a while ago...then I tried the knockout tutorial and it truly changed my mind about building web apps...when you know how to deal with objects (in general in programming) these development pattern will push your js code quality into new dimensions... simply suggesting to save development time in the first place shouldn't stop you from giving it a try in a (sample) project. It's really worth it.
For that I'd use an [htaccess password](http://www.elated.com/articles/password-protecting-your-pages-with-htaccess/) which is easy to set up if you're running apache on your server.