Ask them what types JavaScript has. They'll get it wrong :)
He's relying on this thing called context. If I ran some software project that was really intent on attracting developers who were new to the field and/or my project's domain, I probably wouldn't do that, or at least I'd try to provide the necessary context. This is a joke. Trying to establish enough context for people who have never worked with CI to understand the joke would kill it.
Microsoft really has to step up its game to compete, and it's done a really admirable job. The Surface Book is the first Windows laptop I've actually wanted to buy in years.
IE11 came with the Windows update from 8.0 to 8.1 and you only get Edge if you switch to Windows 10. Edge 12 to Edge 13 should have been automatic though.
You asked the same thing yesterday. https://www.reddit.com/r/javascript/comments/3ntzo0/javascript_question_help/
A big change with Edge was decoupling it with Windows' core so that it can update independently and have better backwards compatibility.
The seniority part of 'senior developer' is the same seniority as in any field. Stuff like experience, depth of knowledge, higher level thinking, management skills, communication skills, connecting to stakeholders etc. If you are recruiter you know this. The javascript/developer part is mostly experience and theoretical background, so point-in-carreer, education level and things like open-source/community contribution activity help.
Well, perhaps now that react is being split into react and react-dom, someone can write a react-dom replacement that correctly handles all shadow stuff natively. It may be a bit early to expect support for that kind of thing though. Shadow DOM is only available in Chrome and Opera right now.
What compiles ruby to JavaScript...the best one?
True. There are also patches and pull requests up on github to fix this but they still haven't landed (and don't look like they will any time soon.) 
Being ahead on javascript alone does not make any browser "up to date" and Edge is the worst of them all: http://html5test.com/ http://css3test.com/ http://caniuse.com/#compare=edge+13,firefox+44,chrome+48,safari+9
That's beautiful. Often times HTML that worked great everywhere failed those stupid validators because they were out of date.
Have they implemented drag and drop yet?
That does it, thank you!! Last question. Related...kinda. getElementById("someID").style; Upon doing a console.log it appears to only get style information if explicitly set in the tag itself but not if the the style is inherited from a .css file or a &lt;style&gt;&lt;/style&gt; tag? EDIT: I think I may have found the answer...getComputedStyle?
"Microsoft" maybe?
They are really doing their best to grow up to *real* browsers and they started with ES support. They still have a lot to do, but Edge is absolutely better than IE. Maybe in a few years Chrome and FF will have a competitor.
Check the `.gitignore`. &gt; emissions
Not directly related to Edge's support of ES6. It's more that Microsoft is doing a great job stepping up.
Some times web workers are necessary, some times they are not. You need to explain when web workers are necessary. &gt; the biggest benefit is that they don’t block the UI This is not an explanation, since some times code is fast enough to not interfere with UI.
I agree they still have work to do to catch up with Chrome and Firefox in other areas but in 2 years Microsoft has taken themselves from 20% to 80% ES6 compliance, which is amazing to see such an effort by the browser that has consistently well behind the others. I am hoping that this effort by Microsoft will encourage Apple to increase their efforts with Safari to reduce the fragmentation between browsers so that we can use newer features sooner.
The real test is when they announce extension support. If they provide a good API with good access to internal browser mechanics, it'll likely flourish. 
I believe it's accurate to term IE as "deprecated". No new features will be added to IE and it really only exists still in order to support sites (mostly intranet) that require it. (MSFT employee, opinions are my own)
TIL Skype has a web client. Uninstalling Skype on all my Linux boxes...
Edge is the worst of the major browsers overall, as I pointed out in my other post, so stepping up is not what I would call it
Sorry, I meant external drag and drop/ drag and drop file upload. Ms says they're "working on it" https://wpdev.uservoice.com/forums/257854-microsoft-edge-developer/suggestions/8964523-support-html5-drag-and-drop-of-files-from-explorer
Article doesn't say babel is a language ..it states it is compliler that compiles next gen of JavaScript to current version ...gwt is bad is your opinion, look at how many people are using it and why...anyways you of course are free to share your opinion but not to distort facts
I wrote something recently that uses this asynchronicity to unblock the thread. [Here's the post](https://www.reddit.com/r/javascript/comments/3nlpp3/chunkifyjs_a_functional_api_to_unblock_your/). Also, I believe another downside of Web Workers be that you can't use them on the server, as opposed to the standard async technique of using timeouts.
&gt; right click to save a file Seems like that's working fine to me.
Why are you making this a web application? I didn't see anything about user's interacting with the app.
Yeah yeah yeah. And the rest of us are still out here dealing with it.
MS have, as far as anyone can tell, the biggest team working on their layout engine, and have for a number of years. It's hardly surprising they're continuing to improve, and at a fairly quick rate, as they've been doing for almost a decade by this point (which really just shows how far behind they'd become when work on IE7 began!).
IE9 remains supported on Vista SP2 (as it's the latest release supported there). But yes, otherwise on consumer OSes it's IE9, IE11, and Edge.
I use a very similar method to scrape ISOs for various Linux distributions: https://github.com/FrozenCow/distscraper However, I do have to say, things get messy quickly. See https://github.com/FrozenCow/distscraper/blob/master/scrapers/archlinux.js. Libraries like async.js help a bit, but you probably want something like promises to keep things sane. Later I needed a scraper that retrieves releases from Distrowatch. For this I've used [when](https://github.com/cujojs/when) and [most](https://github.com/cujojs/most). `when` for promises and most for lazy lists/streams (or however you'd like to call it). They allow you to compose things nicely together. It results in a more flattened structure, showing each step of the scraping process more clearly. If I would do things again I would try to see how well [RxJS](https://github.com/Reactive-Extensions/RxJS) fits this job. It is very similar to what most does, but is presumably simpler than when+most because you don't have to distinguish between a promise (from when) and a stream (from most). With RxJS, everything is an observable (which is very similar to streams). Additionally, RxJS has a larger following now compared to most.
I actually made a very similar api implementation. I am able to send messages, edit them, and I found a few other things. (It's really cool you can actually edit anyone's messages, regardless of your role in the conversation. You can also edit multimedia messages, I made a cool plugin for my implementation that will animate a gif IN CHAT :D) I also made a plugin to convert spotify uris to links, gather information AND thumbnails of any youtube link you put in the chat and post the thumbnail in chat. I'm busy atm, I'll post later with some code.
Too bad we'll all be held back by IE for several more years before it really even matters that their current browser maybe doesn't suck.
Edge doesn't run on Windows 7, so there's no chance of being able to assume Edge as a baseline for a lot of years yet.
They prefix it until it is fully implemented, or am I missing something?
Not if it works. But I wonder... `(?!\.)(/|^)` seems like would look for `..\btheWorld\b`, but `.\btheWord\b` would still get through. I wonder if the /m flag is at play depending on how your strings being regex'd are set up. If it works, yay for all. But my gut says to do some extra edge case testing just to be sure. Relative to the seriousness of your project, that is. (Also thanks for the gild.)
Debugging in modern FF is comparable to debugging in Chrome. I remember back in the day when Firebug was necessary to do any real development in FF. FF's native dev tools have come a long way since then. Of course I still prefer Chrome because the dev tools are still a bit easier to use, plus the built-in Pepper Flash is nice for those few sites that still require Flash (I'm looking at you, Twitch.tv) especially on Linux where Adobe's Flash is completely abandoned.
That day has not arrived yet. 
I'm just making a .html file that when opened does all this. Is this even possible, or is there a better way that I could do it?
does this mean you can build [Chakra-node](https://github.com/microsoft/node) and start using all this es6 right now in node applications? Only one way to find out, oh wait I don't have windows.
Edge only works on Windows whereas firefox and chrome work across platforms.
That's indeed what it means!
Its just like any other developer role, javascript is just like PHP, C, Java, etc. Firstly, knowing the basis of the paradigms of javascript (i.e., oop, functional, procedural) is very important. They should know about classes vs prototypes, and be able to explain them. The should know about functional programming, recursive programming, and how to use them. They should also know about common programming patterns commonly used in JS and be able to name a few, and how and when to use them (e.g., revealing module pattern, factory pattern, etc.) They should know about general programming patterns found in other languages and javascript, like MVC, singletons, etc. They should be able to explain what functional programming is, what closures are, and how they work. They should know JS is asynchronous and know callbacks is a form of asynchrony in JS. They should be able to explain things like this work to you, when you use them, and even give examples of a use case they have. They should also know about popular frameworks, even if they haven't used them, such as what two-way binding is (ala angular) and one way data flow (ala react).
&gt; Would love to see them do Edge for OSX. The Office app team did it. Well, sort of anyhow.
Just wait til you see what's hanging out in chrome canary.
All of these are fantastic. http://nodepatternsbooks.com/ The author also makes a great series of screencasts. http://nodetuts.com/
Web workers feel like they aren't implemented properly in the web standard and are largely ignored. They force same-origin security, so you cannot use them across domains or from cdns. Except that if you do a search for workarounds, it's possible with a bunch of dumb code. Why even have that security there in the first place, but then to allow such work arounds just rubs salt in the wound. You literally can build a web worker using a string that was assembled from an ajax call. Doesn't make any sense.
Actually IE6 was the most up to date for a long time after Netscape 4.7 stagnated. 
The native drag and drop API is horrendous. To be quite honest, it needs to be scrapped entirely and removed from all browsers. Have you ever worked with it? You'll pull out all of your hair and develop specification induced insomnia..
You should probably show us some code so we can help you figure out what's wrong...
Is it against terms to scrape Amazon?
but, but, but... if we favored pragmatism over religious zealotry, who would pay for tweedledee and tweedledum's* speaking appearances? *(eric and kyle)
We haven't seen this since IE 4.
Problem now is that Safari is not competing anymore as capable browser. Apple doesn't focus its resources on building a great browser anymore. They are trailing big time behind Chrome and the others, including MS Edge. The new IE is Safari.
Should be more like a standard Windows update.
I think your last paragraph is spot on, but I disagree that analyzing a person's way of thinking can, in anyway, indicate their competence with a particular language. At this point in my career, and I'm certain I'm not alone here, I can intuit my way through most programming languages, including both languages I've never been exposed to, and languages that are quite stylistically different from those I'm used to.
So you have never heard of TypeScript? 
What every religious zealot does after losing their power, [work on Wall Street.](http://i.imgur.com/QvcCctY.jpg)
Classes are perfectly good, as long as you: * [Avoid inheritance.](http://raganwald.com/2014/03/31/class-hierarchies-dont-do-that.html) Inheritance creates brittle, highly-coupled chains that make you afraid to change stuff. * Don't make *everything* a class. Computations should be functions. Avoid Java-style patterns that were invented only because of Java/C++'s constrained nature. JavaScript is flexible and powerful. * If a method doesn't depend on `this`, then it should probably be a function. * Avoid God classes, or do so sparingly and with good reason. They sound cool at least. Classes still aren't ideal, but at least they provide a clean, statically-analyzable syntax that most programmers understand (or think they understand).
&gt; Python seems to be moving that direction one step at a time too. I am surprised that it took them so long, honest. Where they all so afraid of becoming "next Java" that they completely lost their minds and ran into other extreme? 
In what way is it not smooth? What are you missing specifically? 
&gt; And Safari and Opera (FWIW). ?? safari is not cross platform but opera is, did i miss you're point? 
&gt; Don't make everything a class. This is really the best advice given in this whole debate. Eric saw the carnage done by Java programmers who only learnt how to make classes and more classes. He then overreacted and freaked out by throwing the class-baby out with the bath water when he really should have just chilled out and realised that a mix of approaches is often best. There is one problem which you often see though with classes in Java and other languages but so far hasn't been mentioned yet. It is often very useful to specify a hierarchy of is-a relationships with more specific subtypes. But often in Java if you uses classes to model these types then you also often end up fusing the implementations of those types together (for example, subclasses often override behaviour in their superclasses or depend on protected methods in their superclasses). The type hierarchy and its implementation should be seen as two separate things. It should not force the implementation of a subclass for example to share code or directly depend on its superclass. A solution to this in Java would be to interfaces and sub-interfaces to model API. Then you would have more freedom to implement it as you see best. 
&gt;Eric goes on about composition when he probably means traits, mixins or multiple inheritance. This just confuses the issue. Also annoying is that he constantly uses the "composition over inheritance" from OOP to support his different definition of composition.
Also in the latest iOS 9 release: window.WebGLRenderingContext.ONE -&gt; undefined window.WebGLRenderingContext.prototype.ONE -&gt; 1 Applies to all GL constants and probably constants in other object prototypes too. Webkit bug that was fixed in August but still made it into the release.
Thank you :') I got it to work! Lifesaver!!!
It is not easy. Remember how ES4 got stuck for so long? Adobe did adapt lots of it into ActionScript 3, it was pretty good. Kinda like ES5 with class syntax and runtime type checks.
They messed up with demanding "every class in different file" BS and some other things. Too much like Java, IMHO.
The Edge updates are handled by Windows Update. By the way, Chrome, Opera, and Firefox do not check for updates on every startup. E.g. Firefox will do this at most every 43,200 seconds (=twice a day).
they would have added some code reduction
It strikes me as odd that method are not automatically bound during class instantiation. But I guess that would change the whole thing from sugar to a new concept, which is not what ECMA wanted to do.
Too convoluted, imho.
What's ideal about TypeScript and similar approaches is that its not native. Instead its part of a build step allowing it to produce optimized, minimized code. Imagine the bloat type annotations would add if part of the native language. Now, maybe as we start moving into using WebAssembly, it could make more sense and type annotations could be optimally retained for runtime (and asm kind of already does this to an extent too). But we're not quite there yet.
Try looking in the existing script examples. I'm sure you can find an example that does some saving without prompting - something like `Layer Comps To Files.jsx`
That's the trick, isn't it. You can only scale so much without having that extra tooling as backup. It's pretty standard now for at least some build step to be part of most JS projects nowadays, even extremely simple ones. Having that already in place makes using typescript/flow/whatever pretty trivial.
Yeah that's the trick. But I still find a prospect of one universal language (well not totally universal, you still need C/C++ for low level work but that was true since forever) really enticing. And I feel as JavaScript is agonizingly close to that. It would be shame for it to lose to web assembly or some other technology because everyone is too distracted to to what is necessary.
&gt; Don't make everything a class. Yes, this isn't Java where everything must be inside some class. If your library is just 3 top-level functions, that's totally okay.
&gt; A solution to this in Java would be... That's a good solution, but you seem to think it's novel for some reason? This is what people already do. 
Sorry for this long post but here is my entire onclick even handler: &lt;input type="button" value="Generate story" onclick="noun1=document.getElementById('noun1').value; noun2=document.getElementById('noun2').value; food=document.getElementById('food').value; noun3=document.getElementById('noun3').value; place=document.getElementById('place').value; document.getElementById('story').innerHTML='&lt;h2&gt;The ' + noun2 + ' and the ' + food + '&lt;/h2&gt;' + 'Once upon a time there was ' + noun1 + ' who wanted to marry a ' + noun2 + '; but she would have to be a real ' + noun2 + '. He travelled all over the world to find one, but nowhere could he get ' + 'what he wanted. There were ' + noun2 + 's enough, but it was difficult to find out ' + 'whether they were real ones. There was always something about them that was not as ' + 'it should be. So he came home again and was sad, for he would have liked very much ' + 'to have a real ' + noun2 + '.&lt;br&gt;&lt;br&gt;' + 'One evening a terrible storm came on; there was thunder and lightning, and the rain ' + 'poured down in torrents. Suddenly a knocking was heard at the city gate, and the ' + noun1 + '\`s father went to open it .&lt;br&gt;&lt;br&gt;' + 'It was a ' + noun2 + ' standing out there in front of the gate. But, good gracious! What ' + 'a sight the rain and the wind had made her look. The ' + noun2 + ' was bedraggled and muddy. ' + 'And yet she said that she was a real ' + noun2 + '.&lt;br&gt;&lt;br&gt;' + 'Well we\`ll soon find out, thought the ' + noun1 + '\`s mother. But she said nothing, went ' + 'into the bedroom, took all of the bedding off the bedstead, and laid a ' + food + ' on the ' + 'bottom; then she took twenty ' + noun3 + 's and laid them on the ' + food + '.&lt;br&gt;&lt;br&gt;' + 'On this the ' + noun2 + ' had to lie all night. In the morning she was asked how she had slept.' + '&lt;i&gt; Oh, very badly!&lt;/i&gt; said she. &lt;i&gt;I have scarcely closed my eyes all night. Heaven only knows ' + 'what was in the bed, but I was lying on something hard, so that I am black and blue all over my body.' + ' It\`s horrible!&lt;/i&gt;&lt;br&gt;&lt;br&gt; ' + 'Now they knew that she was a real ' + noun2 + ' because she had felt the ' + food + ' right through the ' + 'twenty ' + noun3 + 's.&lt;br&gt;&lt;br&gt;' + 'Nobody but a real '+ noun2 + ' could be as sensitive as that.&lt;br&gt;&lt;br&gt;' + 'So the ' + noun1 + ' took her for his wife, for now he knew that he had a real ' + noun2 + '; and the ' + food + ' was put in the ' + place + ', where it may still be seen, ' + 'if no one has stolen it.&lt;br&gt;&lt;br&gt;&lt;br&gt;' + 'http://www.eastoftheweb.com/short-stories/UBooks/PriPea.shtml&lt;br&gt;&lt;br&gt;' + '&lt;small&gt;Christopher McKain &lt;/small&gt;' + '&lt;a href="http://www.eastoftheweb.com/short-stories/UBooks/PriPea.shtml&gt;&lt;/a&gt;'"&gt;
Without having to transpile to ES5, some methods might be slower when on ES5 and if I'm not mistaken the JS engines (V8, Chakra...) can optimize those features, kinda like having the native feel.
FYI, there's a [PR with support for pure functions](https://github.com/gaearon/babel-plugin-react-transform/pull/34) at babel-plugin-react-transform. Hopefully it lands soon.
Wow thanks for sharing. I don't know how many times I've started to learn webgl only to hit a wall. Definitely looking forward to trying out this path!
Read the article OP submitted an that these comments are supposed to be about - *it is the response to your comment*. It explains the role of *class* in ES2015 perfectly.
There is no such thing as "classical OOP". There is C++ OOP, Java OOP, Python OOP, Ruby OOP etc etc. The norm in the industry when changing languages is that things can (will!) work differently. This is why I find "classes will confuse newbs" a poor argument. 
One of the the stickied posts has tons of book suggestions; don't dwell on patterns, focus on writing good code instead.
The issue is that even if typing was implemented, you'd still have to transpile for legacy browsers.
Apple does NOT want you using the web. It will be interesting to see how the Apple customers react. I really do NOT have a feel. I think some of it will depend on how well Google On Tap actually works. With mobile phone replacement slowing down will be a catalyst for Apple to potentially change their approach. But it is not clear if they will react by fortifying their walled garden. Or they will allow some holes in the wall. My guess is that a very successful corporation like Apple will react by fortifying the walls. Since most very successful companies tend to make the wrong decision I suspect this will end up being the wrong decision. But ultimately time will tell. Also Apple has been able to do things with their brand and marketing that would be impossible for other companies to achieve. Being wired from birth to be an engineer it has taken me time to understand and appreciate the value of marketing. I lived it already once with DEC. Incredible engineering feats by DEC but ultimately a weak company when it comes to marketing. I was watching a video on CoreOS yesterday and understood exactly how the clustering worked because we had the same approach in the mid 80s with DEC. That was 30 years ago!
On that regard, the tests I list are updated as each new browser version is released.
i tried webgl, and came up with this code. http://www.boringjourney.com/webgl/ i dont think the webgl and open gl es 2.0 is any diffrent. Edit, the code is probabley shitty, but feel free to use it. 
It seems Rauschmayer has been defending/supporting JS constructors for quite a while: http://www.2ality.com/2013/07/defending-constructors.html
Thanks for that, even if it is not something I would want to hear :) Well, I hope web assembly won't drown us before all this.
`save()` by itself will use the default options. If you still want to use it, you should add this line before the save line: `app.displayDialogs = DialogModes.NO` This will disable all dialogs while your script is running, which means if you get an error script will quietly fail. You can also try `DialogModes.ERROR` to see if that will stop the file prompt If you want to get the dialogs showing up again, just call this line after your save. `app.displayDialogs = DialogModes.ALL`
Try something like this for the HTML (plus the HTML form above it). &lt;input id="story-button" type="button" value="Generate story"&gt; You'll want to add JavaScript as a separate file. Save the JS as a file and then add it as a script at the top of the page. I rewrote your JS for you as well. document.addEventListener('DOMContentLoaded', function () { function getVal(elementId) { return document.getElementById(elementId).value; } storyButton.addEventListener('click', function () { var storyButton = document.getElementById('story-button'); var storyElement = document.getElementById('story'); var noun1 = getVal('noun1'); var noun2 = getVal('noun2'); var noun3 = getVal('noun3'); var food = getVal('food'); var place = getVal('place'); storyElement.innerHTML = [ '&lt;h2&gt;The ', noun2, ' and the ', food, '&lt;/h2&gt;', 'Once upon a time there was ', noun1, ' who wanted to marry a ', noun2, '; but she would have to be a real ', noun2, '. He travelled all over the world to find one, but nowhere could', 'he get what he wanted. There were ', noun2, 's enough, but it was difficult to find out ', 'whether they were real ones. There was always something about', 'them that was not as it should be. So he came home again and', 'was sad, for he would have liked very much to have a real ', noun2, '.&lt;br&gt;&lt;br&gt; One evening a terrible storm came on; there', ' was thunder and lightning, and the rain poured down in ', 'torrents. Suddenly a knocking was heard at the city gate, ', 'and the ', noun1, '`s father went to open it .&lt;br&gt;&lt;br&gt;', 'It was a ', noun2, ' standing out there in front of the gate. ', 'But, good gracious! What a sight the rain and the wind had made ', 'her look. The ', noun2, ' was bedraggled and muddy. ', 'And yet she said that she was a real ', noun2, '.&lt;br&gt;&lt;br&gt;', 'Well we`ll soon find out, thought the ', noun1, '`s mother. But she said nothing, went into the bedroom, took all ', 'of the bedding off the bedstead, and laid a ', food, ' on the ', 'bottom; then she took twenty ', noun3, 's and laid them on the ', food, '.&lt;br&gt;&lt;br&gt;', 'On this the ', noun2, ' had to lie all night. ', 'In the morning she was asked how she had slept. &lt;i&gt; Oh, very ', 'badly!&lt;/i&gt; said she. &lt;i&gt;I have scarcely closed my eyes all night.', 'Heaven only knows what was in the bed, but I was lying on ', 'something hard, so that I am black and blue all over my body.', ' It`s horrible!&lt;/i&gt;&lt;br&gt;&lt;br&gt; ', 'Now they knew that she was a ', 'real ', noun2, ' because she had felt the ', food, 'right through', ' the ', 'twenty ', noun3, 's.&lt;br&gt;&lt;br&gt;', 'Nobody but a real ', noun2, ' could be as sensitive as that.&lt;br&gt;&lt;br&gt;So the ', noun1, ' took her for his wife, for now he knew that he had a real ', noun2, '; and the ', food, ' was put in the ', place, ', where', ' it may still be seen, if no one has stolen it.&lt;br&gt;&lt;br&gt;&lt;br&gt;', 'http://www.eastoftheweb.com/short-stories/UBooks/PriPea.shtml', '&lt;br&gt;&lt;br&gt;&lt;small&gt;Christopher McKain &lt;/small&gt;&lt;a href=', '"http://www.eastoftheweb.com/short-stories/UBooks/PriPea.shtml"', '&gt;&lt;/a&gt;' ].join('') }); }, false); 
How about finding some interesting data using an open API and write a template to render that data to HTML in a nice way? Github is probably a good choice. For example, how about a Github user news feed: [https://api.github.com/users/patrick-steele-idem/events/public](https://api.github.com/users/patrick-steele-idem/events/public) Also, I'm not sure why you picked Handlebars.js, but I think you will like the [Marko templating engine](http://markojs.com/). Marko has better Node.js integration and you'll be able to learn a lot by looking at the readable compiled templates that are generated. Here are some introductory screencasts to help you get started building a modern application: https://www.youtube.com/playlist?list=PLZUgs-F38XXQJBxA58UqnwTVMZS_uza_C 
&gt; After having used optional types for a few years now Can you tell me where did you use optional types? What transpiler?
Perhaps this library might help - https://github.com/rafaelw/mutation-summary But I haven't tried it and thus don't see what that library provides or helps with. Using MutationObserver should be enough and yes, you can listen to DOM changes even when the code executes as an extension. Also, in case you overlooked, if you attach an observer to body, provide "subtree: true" to the MutationObserver config object so that you can listen for changes to all body descendants (not sure if you can attach it to 'document' tho, but I guarantee for the previous). Regarding the initial call for observer, I think that 'DOMContentLoaded' event should be enough as you don't have to wait for all of the page resources to load, but keep in mind that if there's a lot of DOM changes happening after the rest of javascript loads on an average website those changes will trigger your observers, which will result in a lot of callbacks during the initial DOM setup which nowadays happens a lot since there's a lot of third-party widgets that construct their own HTML after the page has been loaded (especially social widgets and ads you were mentioning, and I'm not even mentioning websites that are built as SPA), and yet there's a possibility that you won't be able to catch them with the same observer attached to body as the changes to the embedded documents (iframes) might not propagate back as a part of 'body', so you should watch for that.
Yes! Forgot about this one.
~~return (typeof $ !== 'undefined') ? true : false~~ Edit: Ignore me.
Composition vs inheritance is the dichotomy he's referring to. When you have an object of some type and you want to give it the the logic of another type, you create a new property of that other type on the object (composition) rather than inherit from that other object (inheritance). For example is you have a class User and you want it to have logic from class Event, you can either have the User class extend the Event class (inheritance) or you can add a new 'event' property to User which is an Event object (composition). Some programmers will favor one of these approaches over the other, but both achieve the same end result.
Since when is IE evergreen?
Ha didn't even notice Dart was missing. 
I switched to Vimperator from Pentadactyl a while back due to breakage. It's pretty much the same thing but didn't have the issues that Pentadactyl ended up having. But yeah, Vimium in Chrome is too frustrating which secures Firefox as my main surfing browser. Chrome is just too limited. Like, `t` (new tab) and `d` (delete tab) don't work on the New Tab page, etc. Too jarring. I reserve Chrome purely for development, though.
Something that might be worth looking into is PhantomJS. It's a headless browser (no UI), but would perform all of the rendering and javascript execution that you would need. This might not be the simplest solution though.
I actually learned how to do this in LUA before it became a current thing in JS too haha
Just last week I spent a lot of time debugging animating, showing, and hiding a fixed header. Worked like a charm in Firefox, Edge, and Chrome but had real issues with it in Safari, especially in-app WebViews in Safari. There are still a lot of edge cases that resets and libraries can't account for. I would say they're much less frequent than years past but I still see them fairy consistently.
Probably the simplest solution to what you're working with is to use forEach. Since each iteration is its own function call, the index variable is unique. txtInput.forEach(function(input, i) { input.onkeyup = function(){checkInput(i);} });
Did vanilla JS around 2007, and like 2 or 3 years later I was using Prototype, but that was around the time jQuery overtook it and I switched over to doing lots of jQuery. Since then, I'm still doing jQuery because it's tacked onto every legacy project I work on. You can thank lack of javascript standardization and maturity a few years previous for that, not to mention Stackoverflow answering every question in jQuery and pushing newbies to use it. Now I stick to mostly vanilla JS for my own projects since it is no longer this unstandardized abomination, but have considered Backbone.js for client scripting heavy projects. Honestly I don't like that JS has been popularized as a primary language for giant client-side apps and even server-side now. Stahp it JavaScript!
the args argument is an Event object. You can look to see what else it has. https://developer.mozilla.org/en-US/docs/Web/API/Event https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent Note that often, what you'll really want is `currentTarget` rather than `target`. currentTarget is what you attach your handler to, such as getElementById("txtMinInput"), while target may be something deeper in the DOM. Often these will be the same, but sometimes not, especially for mouse events.
It would be nice if you could write an example, as I'm not too sure what you mean.
I don't think that's an option. You'd need some way to emulate the browser loading the page and it's contents. That is what the a headless browser is will do for you.
it's cool and all, but sometimes I don't see the point with stuff like this - it's just another way to do the same thing
I agree on this. The more you learn JS the more you realize how functional programming just makes sense in JS but for beginners it can be a bit challenge when coming to a new language and different paradigm. I would just like to say that people who do use `class` either should know what this "class" is doing or should eventually educate themselves on how it actually works. 
Attaching a single event handler further up the tree and looking at "target" is called *event delegation*. What's convenient about event delegation is that it will also work for dynamically added elements. In modern browsers, you can use matches() to do some selector-based filtering similar to jQuery. IE/Edge needs a msMatchesSelector fallback, unfortunately. https://developer.mozilla.org/en/docs/Web/API/Element/matches
Anyone else remember the epic success and usefulness of VRML? http://www.w3.org/MarkUp/VRML/
Hi /u/MaxKK, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
I have... several times without any issues (in browsers that support it)...
As jodraws said, you essentially need to run all of the javascript on the page. 
That would be [Opal](http://opalrb.org)
Essentially copying and pasting into the correct template. Modifying it until it works.
You'll need *some* sort of headless browser (whether in-process or running in another thread) just to interpret the Javascript in the page you load. The only other option would be static analysis of the source code, and I can't believe that would be remotely feasible for a language as dynamic as JS.
I've got a Java background from University so thank you for this.
Pure `Object.create` is not much different than classes, except that classes are almost always better. (The former is more flexible, but not in a good way, unless you keep everything immutable.) Using `Object.create` as a replacement for classes is usually a bad idea, unless you have [a framework like stampit](https://github.com/stampit-org/stampit) built on top of it. (Sidenote: stampit uses a slightly better form of multiple inheritance. Inheritance in general is usually harmful, so I don't use it, but some people like it a lot. Eh.) Prototypes are super-powerful. Powerful enough to create a class system from scratch. Using pure prototypes is powerful indeed, but with that power comes responsibility, particularly in a mutable language like JS. If you're choosing between `Object.create` and classes, then save yourself some pain and analysis paralysis and use classes for now. Very few people still use `Object.create`. Even the creator of `Object.create` doesn't use it anymore. (He uses functions instead.) Only one particularly prominent person comes to mind. He knows who he is. As you get more experienced you'll find even better ways to do things in JavaScript, as long as you keep an open mind and keep trying to improve. Avoid the trap of learning something and then feeling like you need to defend it with your life and be personally offended when people disagree. Just keep improving, and have an open mind! Regarding classes, I'll re-iterate my points from [an earlier thread](https://www.reddit.com/r/javascript/comments/3o1y1z/dr_axel_rauschmayer_responds_to_a_simple/): * [Avoid inheritance.](http://raganwald.com/2014/03/31/class-hierarchies-dont-do-that.html) Inheritance creates brittle, highly-coupled chains that make you afraid to change stuff. * Don't make *everything* a class. Computations should be functions. Avoid Java-style patterns that were invented only because of Java/C++'s constrained nature. JavaScript is flexible and powerful. * If a method doesn't depend on `this`, then it should probably be a function. * Avoid God classes, or do so sparingly and with good reason. They sound cool at least. Classes still aren't ideal, but at least they provide a clean, statically-analyzable syntax that most programmers understand (or think they understand).
For what it's worth, that video doesn't advocate composition in the traditional sense, but instead multiple inheritance. It's a step up from single inheritance chains and classes, but let's not muddy our terminology. Composition (if using classes) is more like: class GameObject { x = 0 y = 0 constructor(...components) { this.components = components; } update() { this.components.forEach(component =&gt; component.update(this)); } } new GameObject(new Movable(), new Drawable()); instead of the inheritance-based approach: class Drawable {} class Movable extends Drawable {} class GameObject extends Movable {} You can do this wrong using classes, prototypes, and functions. The key is to not be tempted by the `extends` keyword.
&gt; Most people seem to think classes are a bad idea No, that's a vocal minority. Most people like it because the syntax is so much simpler and because it comes with tooling improvements. Plus, standardization is awesome. Pretty much all ES6 frameworks and game engines use classes. But that's no surprise given that pretty much all ES3/5 frameworks and game engines used ES3/5 wannabe classes. So, they now do the same thing but in a standardized less cumbersome manner.
No disclaimer? You're the author of Marko aren't you? :P I've not looked into templating languages for a while, I remember coming across your comparison about a year ago to dust.js. Has much changed between the two now? I saw a recent benchmark you maintain showing Marko dominating which was neat. Performance aside, not sure if I'd prefer Marko over Dust though. One thing I've been wondering is how beneficial is the async rendering these days? I'm not sure if you can mix Marko/Dust with React, I think I read Dust wasn't too compatible with Angular/Ember, but perhaps Marko is(not sure if there is a point in mixing Marko with these frameworks though?). Does async rendering(or is it streaming? the method where the Client can get the initial html faster and then add additional markup as it's rendered by the server) cause possible performance issues with layout/painting if you use it excessively? Kudos for getting the word out on Marko though, putting out some better material by the looks of it than I can find on Dust :p
If you want a universal language look into Haxe. It's a language that compiles to many other languages really well. You could write Haxe and compile JS for the frontend, backend too for Node.js if you want or C# if you prefer to use .Net/MVC. Need that extra performance with C/C++? Yeah Haxe can target that too. Wasm will be a target in future too.
I started with 'vanilla' js, then chose mootools over jquery, switched to jquery when it became obvious it was the winner. As I'm more a backend guy (my main language being C# back then), I kept using jquery for years for almost everything front-related, as it was easy and cross-browser for DOM querying, ajax, and event handling. What evolved though during that time was my coding style, becoming more modular. I completely skipped Dojo, Ember, Backbone, Angular, as I wasn't convinced by SPAs, or more specifically by these ways of making them. I progressively switched my backend stuff towards node, and my programming style to something more functional. (but I have still a lot to learn to become really proficient with the paradigm) Which leads us to now, with most of my backend built on node with Hapijs, and my attention turned to immutable/react/redux combo on the front side.
This is kind of more of a mongo question, but you probably want to look into cursors: http://docs.mongodb.org/manual/core/cursors/
Thanks for the detailed response :) I thought Dust and Marko were pretty close to each other with features in comparison to others like Handlebars. I'll be sure to give Marko a go and join the Gitter chat room if I have any questions :) Good to know eBay is still using Marko, I believe LinkedIn is still using Dust, but Paypal who were quite into it with Kraken seem to be switching to React for some reason. I figured perhaps there was something lacking with Dust, and since Marko seems similar that it might be passed for the same reasons. Do you have any idea why the uptake of these two haven't been too popular? They both seem pretty great yet I don't see much talk/blogs about them.
It's probably better to use forEach, but a modification to your code that works is: for (var i = 0; i &lt; txtInput.length; i++) { txtInput[i].onkeyup = (function(n) { return function() { checkInput(n); } })(i); }
&gt; Even the creator of Object.create doesn't use it anymore. Source?
https://www.youtube.com/watch?v=PSGEjv3Tqo0
&gt; I thought this youtube video was very informative. That's actually unfortunate, because Johansson (the guy in the video) got a lot of his information wrong, and whatever you think you learned from that video, you now need to unlearn. Check out this [top voted reddit comment](https://www.reddit.com/r/programming/comments/3m64ns/composition_over_inheritance/cvccr2u). What Johansson calls composition... isn't composition. And though he says no one should use inheritance, the pattern he replaces it with is... still inheritance.
Thank you! He mentions it at 6:45 if anyone's wondering as well.
I agree that values returned from functions/methods should be copies, and should not be mutated from the original. It is a pity the internal libraries don't follow this convention: var x = [1, 2, 3]; x.slice(1); // Returns [2, 3] in a new array x.reverse(); // Returns [3, 2, 1], but also modifies `x` There is also the problem of what to do when you have nested objects? Should you return a shallow copy? A deep copy? If you're looking for a nice, mostly immutable API, check out [Immutable JS](https://facebook.github.io/immutable-js/)
No momentum? It's still actively developed with a growing community. It's just not heavily used I'd assume due to employers wanting to be able to hire skilled staff in the language/ecosystem, where you'd have plenty of devs for the native platform language or the popular alternatives like TypeScript. And due to that low demand, there isn't much supply/motivation for devs to pick that language up. So you'll tend to see it in use more by Indie/hobby devs, maybe some freelancers. It's doing pretty well with game dev with some award winners like Papers Please.
Maybe I went too far, but it just doesn't have the reach js/node has now. Typed JS is imho the only path left to relatively universal language.
Your perspective on inheritance is a little strong. It has its place.
Of course. Those cases are rare though. [Composition over inheritance](http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612) and all that fun stuff.
I would love to use both at the same. Interfacing all of my objects makes me happy.
Thanks, great answer. Lots of stuff I've not heard of before there!
Right now you grab an array of docs, iterate over them -- the last one is saved as `value` - you then call a request on a page, run getData against that value and ... do some stuff with it. Sounds like what you want to do is perform the request first, and inside that callback perform the query against the model and create `client.messages` based upon what you find in the returned html request(url, function (...etc...) { var $ = cheerio.load(html); userModel.find({}).exec(function (err, docs) { docs.forEach(function (doc) { var value = getData(doc); var $el = $(...etc...); if ($el.length &gt; 0) { ...etc... } }); }); }); I've cut out a lot of that for brevity, but you should get the idea. Also, `find` returns an array -- not an object -- so use .forEach to iterate it. (you're actually getting back array properties like `length` when you use a `for(var x in y)` construct)
There's no definite answer to be had here. JS is a language that allows a variety of approaches to work, which is a big contributor to its popularity. Also, the different approaches you've named aren't necessarily mutually exclusive; for example, you can use prototypes in functional programming.
I believe this only works for ASP.NET Web Forms and is not an option for ASP.NET MVC or other web projects.
https://www.facebook.com/PortBookFaceToVrml
Classes in ES6 are fine. Classes work a bit different in every language that has them. In JavaScript, they happen to be a constructor function and a prototype object. If you want to get fancy, you can do some interesting things with that. Otherwise, you don't really need to care. 
Use a style that you think works best and be consistent. Don't be too worried about "what if this isn't the best way to do this?". As you grow, your style will mutate and eventually you'll have another style, or a handful of styles, each of which you have a better of idea when they're a good fit for a problem. 
That's a nice start. A couple of quick pointers are to use requestAnimationFrame for the draw loop instead of setInterval, and avoid making unnecessary GL state updates in your Entity's draw method. OpenGL ES 2 is the basis for the WebGL 1.0 spec, so they are very similar. The differences are mainly due to security concerns when running in a browser. OpenGL ES 3.0 will serve as the basis for the WebGL 2.0 spec.
Thanks for the detailed write up! Ended up looking into cursors and stumble upon mongoose stream so I rewrote everything like so below and it works a treat! Appreciate the info though. var data; var stream = userModel.find({}).stream(); stream.on('data', function (doc) { request(url, function(error, response, html) { if (!error &amp;&amp; response.statusCode == 200) { var $ = cheerio.load(html); var $el = $('h2 a:contains(' + doc.cheap + ')'); if ($el.length) { client.messages.create({ to: doc.number, from: "+61418739508", body: $el.text() }, function(err, message) { if(err){ console.log(err); } else { console.log(message.sid); } }); console.log($el.text()); } else { console.log('hey'); } } }); }).on('error', function (err) { // handle the error }).on('close', function () { // the stream is closed });
One of the beauties of JavaScript is that it's flexible enough to imitate many different programming styles. People argue such things as it's not actually a class-based language, but if it looks like a duck, and sounds like a duck, does it really matter that it's a mutant chicken? Basically, do whatever you want, use different styles for different projects as appropriate. The one thing to be aware of is that prototypes are _significantly_ ([~1,000%](http://jsperf.com/2015-proto-vs-local-methods) at a base level) faster than assigning local methods. e.g.: function foo() { } foo.prototype.bar = function() { return 42; } is 1,000% faster than: function foo2() { this.bar = function() { return 42; } } That seems like a _lot_, and it is, but note that in most applications it doesn't make a damn bit of difference (1μs vs 10μs, so what?), it's just something to be aware of if you are creating many of instances of "classes"
This is one of the best posts I've read in the last year. this is a high-level overview on why immutability is interesting in general and in the frontend space in particular, what are the libraries out there and compare them on a more fundamental level. Personally I think I would only introduce it in a project if I really needed the performance benefits, Im not sure that the cognitive overhead is justified otherwise. Redux seems like a really simple way to keep the state of your app under control: just keep the state in a single container and modify it via actions. The post goes in how to make the state immutable, to allow frameworks like Angular or React to be able to detect changes using the === operator, which is a lot faster than if we don't use immutability.
You will need *Event Handler* which will function where time is calculated and displayed, and in the end it's requested again using requestAnimationFrame, until timer is 0. However, it will require additional tweaking to make sure chances of time extending by miliseconds and near to zero.
Thanks for the help. I ended up figuring out what I need to do to make what I needed work. I'm sure what you put would work, but I have yet to learn about addEventListener. Like I said I'm still very new but I'm learning more and more everyday
No, I don't think DRM is an issue. Actually, I think the openness is one of the key reasons WebGL is thriving now. People are learning from what others are doing, and that's what's allowing the technology itself and our use of it to mature so quickly. I'd say the key challenges for WebGL have to do with the scope of its goals. In order to succeed as a web technology, WebGL has to work well across OSs, browsers, drivers and GPUs. The combinatorial explosion of those factors are one of the key challenges developers and implementers face. 
This is a hard question, because it mixes related but different things. The main thing to understand here is the conceptual difference between prototypes and classes. (the concepts, not the keywords). A class is a blueprint. When you create an object from a class, it gets the class shape. If your class is Car, then what you get from it is an independent Car. Modifying the class later won't affect existing cars, it's just an update to the blueprint. Now, prototypes. Prototypes are a different beast. A prototype is a full-blown object. You can use it directly if you want. And you don't create new objects from it like a class: you create an empty object, and you link it to its prototype. It's delegation. When something doesn't exist on the object, the runtime looks for it on the prototype. Then on the prototype's prototype, and so on. So an object whose prototype is a Car object is not itself a Car, it just exhibits Car behavior until it gets its own. If you modify the prototype, you modify the behavior of all the linked existing objects. It may not seem like a big deal, but it gives you some extra power, some different semantics, and some different pitfalls to fall in. I like the new class syntax, it's neat, and I know there is prototype wiring under the hood, but I think I wouldn't have reused the 'class' keyword, which may trick people into mixing up the concepts. So, that's the first point of the 'debate'. The second one is around the concept of inheritance itself, being with class or with prototypes. If you consider how inheritance works in class-based languages, what you're usually doing is creating hierarchies of 'types'. A cat is-a feline which is-a mammal which is-an animal. It's modeled as a tree of types and one object cannot easily get types from two branches at the same time, you're limited to the common ancestor. You usually trick around by defining interfaces that you then implements, but that's tedious. That's what is called 'classical inheritance'. [see comments, I seem to be wrong in my use of the term] What you can do instead if you have a language like JavaScript, dynamic in nature with first -class functions and function-binding ability, is favoring traits or mixins: You can mix one or several object's behaviors into your own, and get again extra power. [as it has been pointed out, that's a more relaxed form of multiple inheritance, but it's still inheritance. Favoring composition (= putting the object you want to borrow from in a property and proxy its methods) offers more advantages (e.g. no issue with conflicting names)]. As I said, classical inheritance is both achievable with classes and prototypes [see other comments about why my use of the term is probably wrong], so why is the fuss around class keyword? The thing is, the class concept comes deeply associated with the classical inheritance model. By reusing this keyword (also with inherits and super), the language kind of pushes you on this road, and that can prevent people from thinking that other ways can even exist. That's not saying that you can't do good programming that way (some people would go that far though) but rather that it limits you by not making obvious the true power hidden in the language. I'll stop there this lengthy post, hoping that it clarifies things. EDIT: corrects mistakes in terminology pointed out by MoTTs_
First, it's important to remember that The Good Parts was published in 2008. Since then, we've seen es5 and now es6. Some the things that Crockford advises have been directly addressed by these updates and now his advice is out of date. It's not true for the whole book, but for instance his way of doing inheritance might not make as much sense with classes. &gt;What are the benefits of using those styles, and which path should I take? It's up to you. There are myriad books and sites on the internet talking about these different styles and their benefits and how to use them and when to use them. It's up to you to experiment with these different methodologies, applying what you've learned, and then think about how writing and maintaining them worked for you. Figure out what you like and don't like and continue to refine your style. These styles aren't mutually exclusive and often work well together. You'll probably find that some places a certain style will be more applicable than others. There's no magic answer to this question, you just have to figure it out as you gain experience writing code.
This is the first great article I've seen on using ES6 classes in a reasonable, limited way. Dan is a great speaker and writer. I left a response in the comments and will be adding this article and another older article Dan wrote on composition to my "not awesome" list on GitHub.
I'd argue that functional programming is/can be an entirely separate from the notion of prototypal vs classical inheritance. For instance: class Foo { bar = (data) =&gt; compose(a, b, c) }
Great job on the repo. I've been reading about composition over inheritance for a while now, I even gave a lightning talk about it. But it would be good to have lots of examples of object designs using composition or refactoring an inheritance design towards composition. Could you add some to your repo?
addendum: If you read this, don't hesitate to correct me if required, I'm open to critique :) I see in particular that the terminology is not used the same way by everyone, so I feel like I'd explain a bit the way I use the terms. I see people using 'classical' inheritance as opposed to 'prototypal' inheritance (the two words being used as derivatives of class and prototype) more in the sense of the concepts I try to develop a bit as my first point. However, I tend to use 'classical inheritance' to describe the fact of 'modeling inheritance chains as tree-like hierarchies', technique more commonly found in class-based languages. I don't know which one is the 'right' use of the term. One more reason to avoid inheritance altogether: no more confusing loosely-defined inheritance model names ;)
This is no longer true in many cases (for instance optimized functions in v8) -- `obj.a.b.c.d.e.f.g` will perform exactly the same as `f.g`, and the additional assignment will actually slow things down. And even in browsers where it is still true, it's _nowhere near_ a 400% difference. It's more like ~10% in your average function -- The loop itself has more overhead than nested property access. [edit] [benchmark](http://jsperf.com/deep-vs-direct-access)
Do you know how to learn about addEventListener? Take 5 minutes and read about it. Seriously. You sound like a student that lacks the ability to study outside the curriculum. You need to get past that quickly. 
And its flexibility is a double-edged sword. I'm literally lost trying to know which path to go. I guess it will come with experience :)
Style is a personal preference and usually you cannot prove that one style is better than another. That is why you often hear people saying you should avoid something because it is evil.
The thing that bothers me the most about prototypes is that the members must be "public". But then again, I might just be paranoid because I came from C/C++ and Java.
https://gist.github.com/dmh2000/c946354c97f424330a96 
Let me help you -- It doesn't matter, at all. You can write horrible code in any style, you can write beautiful code in any style. So flip a coin, roll a die, whatever and go with it. Then on your next project try something else.
Or go the full monty and get the Best of both works: Haskell. (If you're learning Elm, might as well learn its primary inspiration too). 
&gt;Rather than force your coders to adhere to some "class-like" design pattern or style guide, ECMA has provided one for you. ES6 classes are still just "class-like" design patterns. All they did was add a keyword and standardized the layout, but they still use prototypal inheritance &gt;ECMAScript 6 introduced a new set of keywords implementing classes. Although these constructs look like those familiar to developers of class-based languages, they are not the same. JavaScript remains prototype-based. The new keywords include `class`, `constructor`, `static`, `extends`, and `super`. [MDN documentation](https://developer.mozilla.org/en/docs/Web/JavaScript/Inheritance_and_the_prototype_chain#With_the_class_keyword) [Codepen illustrating the prototypal inheritance behaviour of Javascript classes.](http://codepen.io/anon/pen/MamGpR?editors=001) So if you want to use classes while sleeping at night, just remember that they're not actually classes and all of the arguments about them on the internet are a bigger waste of time than internet arguments usually are.
Unfortunately for you, I already factually show that what I said it's true. That you didn't read it or already know that shows you lack experience and knowledge to state otherwise
Well that's why I stated *(some jsperf would be better here)*. Also that benchmark isn't anything like what I stated. It might not be 400%, but it definitely is more than 10%. And it's still case in FF for sure.
The benchmark is exactly what you stated. What do you think jsperf does? for (i=1; i&lt;1000000; i++) // test code The `+=` is just to get object access and assignments since testing one half of that isn't very useful, and the ternary is to prevent overflows from small to large ints internally that would screw with the later results. &gt; but it definitely is more than 10% FF is 17%. Much closer to 10% than 400% ;) Safari is 2% (on every other object?) and chrome is 0%
&gt; For concurrency: see Go. Another good option that's been gaining a lot of traction lately: [Elixir](http://elixir-lang.org/) and its web framework [Phoenix](http://www.phoenixframework.org/). Elixir is functional rather than imperative (Go) and actually has a nice community. Go's community is shit and filled with people who think they're smarter than everyone else for using a "systems" language. It's filled with excessive sexism, vitriol, and close-mindedness.
That's exactly the right way to use classes. Use them where they are useful, but don't force them where they are not. However, some "functional or die" bolsheviks seem to desire purity.
look at setTimeout() or setInterval() http://www.w3schools.com/js/js_timing.asp 
I honestly can't really remember. I got into web development in 1996. I'm trying to remember what, if anything, we used JavaScript for back then. Now it seems inconceivable to build a web page without at least some JavaScript. But for years you would do most programmatic stuff server-side. If you really wanted to do programmatic stuff client-side you used Flash (which, of course, used ActionScript - an ECMAScript implementation). AJAX and then mobile (especially Apple's decision not to include Flash on iOS) were the two real game changers. The most recent game changer has been ECMAScript 2015. Edit: actually, the other real game changer was Mozilla and Firefox. I'm afraid we'd still be stuck on IE 6 if not for Mozilla. Ah, the good old days of the standards wars. Edit 2: one of the other commenters reminded me of another game changer - Firebug. Of course we have lots of great dev tools built into the browsers today. But prior to Firebug we were pretty much limited to alert(). And you can forget about a JavaScript step debugger. Those really were the bad old days when we had to walk up hill both ways, in the snow, to debug our JS code. 
&gt; If you consider how inheritance works in class-based languages, what you're usually doing is creating hierarchies of 'types'. A cat is-a feline which is-a mammal which is-an animal. It's modeled as a tree of types and one object cannot easily get types from two branches at the same time, you're limited to the common ancestor. You usually trick around by defining interfaces that you then implements, but that's tedious. &gt; That's what is called 'classical inheritance'. When you're limited to a single ancestor, that's called single inheritance, and I think it's a mistake to associate that with classical inheritance. There are classical languages that can inherit from multiple ancestors (C++, Python), and there are prototypal languages that can inherit from only one (JavaScript). So neither classical nor prototypal is inherently single or multiple inheritance. Either kind of language could have either kind of inheritance. &gt; What you can do instead if you have a language like JavaScript, dynamic in nature with first -class functions and function-binding ability, is favoring composition: You can mix one or several object's behaviors into your own, and get again extra power. The word "composition" has been getting misused a lot lately. It means your object would have another *as a property*. But if you *mix* another object into yours, then that's not composition anymore; that's a form of inheritance.
Any links? The discussions that come to mind for me all revolve around generics &amp; error handling.
Thanks. I do want to have an internal section on tutorials/examples added at some point, but I can't make any promises about when that will happen. I have accepted &amp; merged 2 small pull-requests so far. I'd like people to contribute more, and a tutorials section would be a great place to do so. For now, check out some of the articles/videos linked. There are quite a few examples scattered within them, although not as easy to navigate.
so the [0] or [1] represents which one comes first or last? EDIT: Tried it out and it works. Thanks!
Yeah, we have a map of province to tax rate and calculate it on the server.
Replying alone is pain in ass on this phone, so perhaps some other time. 
https://news.ycombinator.com/item?id=10365710
Oh well I guess I should have read the docs a little more closely! I didn't even think to include the regenerator/runtime.js script (truth be told didn't even know it existed). Yeah babel has been slightly confusing me, can't wait for ES2015 to browser support! Thank you very much for your help, got it going :) 
[I found this](https://github.com/thejameskyle/Array.prototype.reject) But is it really needed? When you have this: [1, 2, 3].filter(n =&gt; n % 2 !== 0); // [1, 3]
/u/thejameskyle
Can't speak for others but i've enjoyed Kyle Simpson's series "You Don't Know Javascript". They're free to read from his github page too. Username getify. He does clash a bit with Crockford on a lot of their recommendations though. 
I don't care about them. I care about the misinformation they spread. 
I really wish `filterNot` was part of the spec, however its incredibly easy to implement, its just the inverse of filter.
Don't think it would be needed but however, it's basically drop a character and add another, other than doing the inverse it doesn't really do much more.
&gt; Then on your next project try something else. Just as a caution, be careful about this if you are working on a large codebase. There is a big difference between completely separate sites and projects on a large site. You should try out different styles, but be aware that the more things you try, the smaller the group of people who can maintain it all.
OP is just learning, I sincerely doubt (s)he is working on a huge code-base :P And if properly structured (modules) it doesn't make a bit of difference if things are written in different styles or even languages.
Premature optimizations. I'd say make it as clean as possible.... you have a dynamic language that can support any data structure you can come up with - use it. var items = [ {target: 'friends', replacement: 'enemies'}, ...etc... ] 
not without also allowing users to post any score they want. you fundamentally can't trust data generated client-side. you'd need to rearchitect your games to perform validity checks server-side of every move sequence and timing, then base your server-side score tables on that.
&gt; not without also allowing users to post any score they want I realize that this is somewhat of a problem, however, if I am willing to accept that risk, are there any options? (It it becomes a problem, worst thing that happens, visitors see some fake large scores. And I would get some information on what percentage of people a willing to hit f12 and spend time analyzing some obfuscated code just for the privilege of submitting a random number) Tracking game progress server-side and assessing the validity of submitted score is way more work than I feel makes sense in this context.
all of the score would be fake. that's why noone tries to build such a service as you describe. especially because as a service, you'd only have to break the obfuscation once and then post high scores to every game that uses the service.
Edit: The first sentence was a bit over the top, so I rewrote it. The proposal in this article is a bit drastic for me, and seems to remove some of the benefits of the class keyword. I think we need to let it be used when it works for the project and see where it goes. There were responses and examples in those threads where people gave examples and then you deleted the threads and your comments. My comment history still contains some of them. 
Depending on how you set it up one likely wouldn't need to analyze your code, obfuscated or not, by setting up a proxy, such as TamperData, and modifying the values that way. 
Point taken, I edited the first part the response to the article. FTR, I appreciate your repo and the contributions on here. I left in the criticism of your deletions, so that I get my proper down votes. Sorry for being an ass. I'm a bit butt hurt because of my long response is made moot at the deletion. A couple other threads that I had saved were deleted, I thought they were yours, but I am probably wrong and apologize. 
NB: [getElementsByTagName](https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByTagName) returns an HTMLCollection or a NodeList, depending on the browser. They are live, array-like objects, not actual instances of `Array`.
Don't worry about it. I was downvoted into oblivion by some just for creating and sharing a link to the repo in the first place, and, yet, there are many people out there who agree with me. Such is life on the internet.
`invoke` is the way to build a dependency, because your dependencies are all just `Target`s themselves. You're not going to do anything specific to the Makefile. There is already code that takes a Makefile and does `new Target`, etc. You can find it below. So you're writing code that will run as a method of a `Target` object, because it's being placed as Target.prototype.invoke. Have you used JS objects/prototypes before? If not, then this is not the place to explain it thoroughly. The point of it is that `Target` is like a class in OO languages. If you have an object which is a Target, it has a method called `invoke`. So this sort of thing is a usage of Target. var myTarget = new Target( /* stuff */); myTarget.addCommand( /* different stuff */); myTarget.invoke(); The line `new Target( ... stuff here ... )` creates a target with some dependencies, which are each Targets themselves. Read the constructor for how it stores the dependencies using `this`. You'll access them the same way in `invoke`.
&gt;I like using prototypes so that the methods are shared and not created for every object instance You get that regardless of what syntax you choose. Use whatever style suits you and never be afraid to adapt or change later. 
This should be integrated with functional test runners like protractor out of the box.
Your indexes seem to be off... You have two items in your image array, so you have 0 and 1 as the indexes. Does knowing that help?
Try to take this comment as what it is: talk about performance, not you. That comparison is shit. There are a lot of differences between the first and second case. The main one is nothing to do with prototypes: the first function creates `bar` once, the second creates it every time you instantiate it. Fix this and [the difference drops to about 40%](http://jsperf.com/prototypes-029385). 1,000% to 140%. Another problem is that this benchmark pretends that the JIT compiler isn't actively trying to defeat this benchmark. That would be nice, but it's not true. [Here's what happens when you force the browser to actually create `bar` in both cases](http://jsperf.com/prototypes-230958). 1,000% to 75%. Another problem is that we're only comparing instantiation. Real code can have any usage profile under the sun: instantation once and access 10 million times, instantiate 10 million times and access never, and everything in-between. Access is [about 10% faster without prototypes](http://jsperf.com/prototypes-23598), as expected, since we're decreasing the property lookup walk distance. Finally, saying something takes 10µs is meaningless without also saying when it's run. Even the simplest animations need to do 10,000 calculations for each frame, add a 10µs cost to each and you've got the CPU at 60% for that cost alone. On the other hand, add 10 *hours* to a job that needs to be run once per week, and you're fine. Time alone is meaningless.
Great! That's what you wanted, right?
Sorry I typed that wrong. It shows the first image, I click it, it shows the second image. there are 2 more pictures that it doesnt show after clicking. any idea?
Would anyone here would like to add me on skype and help out?
I see. Yeah, no prob! Let me know if you have any questions!
The TL;DR is basically: 1. Immutable.js and Mori use extremely efficient data structures and structural sharing to give **vastly** better performance when mutating very large or deeply nested data structures. 2. Seamless-immutable (or the many similar libraries) offer very convenient APIs/JS interop; they're basically vanilla arrays/objects + Object.freeze to enforce no mutation in development + some helper methods that do a shallow clone when you need to modify a value. Which is fine, assuming that you're okay with doing a shallow clone of your data structure, but these libraries aren't magic; they're just than wrappers over existing JS functions. The last time this was discussed on here, I commented this: &gt; I threw together a quick benchmark that tries to repeatedly increment the value of an object in a list of 1000 objects. Vanilla mutation is about 1300 ops/sec, Immutable JS is about 35 ops/sec, and Freezer is 0.1 ops/sec. The lesson here is that: * For serious, constant data crunching, you shouldn't be using immutable structures at all. This isn't the right tool for your WebGL game engine. (Keep in mind, you can always temporarily convert to a mutable structure, do a ton of mutation, and then convert back though.) * For doing important UI stuff like resorting a table or something, Immutable.js is probably fine, just don't go crazy. If you're not relying on mutating your state hundreds of times per second, you'll be fine. * Be very careful with seamless-immutable, freezer.js, etc if you're using large arrays or deeply nested objects; they work great right up until they don't; I literally managed to crash a browser tab trying to benchmark them. For me in particular, Immutable.js (and Mori) are very attractive due to their higher performance, but the fact that they work very poorly with libraries like Ramda or lodash-fp is a big failing. Which is why, for me, the single best thing in the linked article was the link to [typed-immutable](https://github.com/gozala/typed-immutable) It's a thin wrapper around Immutable.js that (at least for the code I'm writing) gives me the best of both worlds: Really good interop with Ramda, but really good performance because it's still Immutable.js under the hood. It really works amazingly for defining a state object in redux/marty/alt/whatever.
In practice, it's not a big deal. Prefix them with an underscore and add some text to your coding standards saying "Don't call methods with a leading underscore from outside their class." Private/protected/package methods are meant to protect you from misunderstandings, not from maliciousness. Even in C++ and Java it's possible to call them if you're dead-set against working around the language's access controls.
Try rake. 
basically remove the `fNames = [0]` then: function onImageClick() { imgIdx++; if (imgIdx&gt;fNames.length-1) imgIdx = 0 _img.style.backgroundImage = "url(fNames[imgIdx]+".jpg')"; } http://codepen.io/anon/pen/bVrGBd
http://codepen.io/anon/pen/WQENjw
setinterval is looped, settimeout is 1
It's not a callback and definitely not an "iterated callback". It's a predicate function or just a function that's passed as an argument. 
yea the arent cached yet ur gonna have to put 4 the img tags in a hidden div (and that gives you preloading), even if you dont use those imgs, or tags, or anything about them. then it wont flicker
probably not what you're looking for, but I would personally just swap between them based on whatever's more convenient. In lodash the helpers to do that are [_.pairs](https://lodash.com/docs#pairs) and [_.object](https://lodash.com/docs#zipObject) Also, I think you're probably optimizing the wrong thing. You could make the whole dom manipulation thing much simper by generating a new unattached dom node and swapping it in place, for instance. 
so I would do something like: &lt;div id="gameImgs"&gt; &lt;img id="RL1" src="images/RL1.png"&gt; &lt;img id="RL2" src="images/RL2.png"&gt; &lt;img id="RL3" src="images/RL3.png"&gt; &lt;/div&gt; ?
yup and #gameImgs { display:none; }
&gt;ES6 classes are not awesome: God. The banter is so good. 
&gt; If that's the only complaint then keeping memory leakage in mind and handling it from the start of an app isn't that difficult. Got any good tips/articles for that?
Not exactly. Classes encourage mutable state which is discouraged in modern fp languages.
I'm confused why not: dave[0].remove(); or dave[1].remove(); You're referencing the node's parent and then calling `removeChild` on the parent passing the node to remove, why not just call `remove`on the Node itself?
No prob! The tutorial linked at the bottom goes in more depth for robust apps.
Why would classes encourage mutable state any more than prototypes? They are simply a way to define data structures. JavaScript already encourages mutation very heavily - you need to fight it pretty hard to get anything near what you'd do in a real FP language. The use of the class keyword doesn't change that.
First, you should read the docs on `apply`: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply and execSync: https://nodejs.org/api/child_process.html#child_process_child_process_execsync_command_options and understand what each does. Then read on if you do not understand what to do. What *are* these commands? What kind of thing are they and where would they come from in the example Makefile above? Are they JS functions that you could use `apply` with? Or do you have the OS execute them for you? You could determine this based on `parse()`in the code you were given. Online resources about Makefiles would also probably help. As would reasoning about the end goal of this program.
If you already have a function "isEven", being able to negate it with reject is handy. You can also compose it with a "not" function, but that's a little more verbose. (tldr you're often filtering on an existing function, not a lambda)
No it wouldn't. This makes no difference when it comes to mutation and incurs a performance overhead. There is nothing particularly "functional" about this approach. It's still a method on an object that's no different to a prototype or class as far as consumers are concerned. A more functional style would have pure functions and plain immutable data structures. Not methods. But you can't do this properly in JavaScript because you lack the level of polymorphism required to do it properly that way. 
The relevant difference between static methods and prototype methods is that the static methods encourage referential transparency (functions whose output only depends on their input). On the other hand prototype methods typically depend on some context which is mutated over time, breaking referential transparency. Its more in line with the fp style to preserve functional transparency.
Hilarious! lmaooooo
It's a bit hard to read on mobile but setTimeout will only execute a function once, setInterval will execute a function until you tell it to stop. I think that's your issue.
The setTimeout function is reside in a function and when time is up it will call the same function again . Recusive loop
i just realised it doesn't work even after correcting the variable name ..... could be the initialised problem ........
&gt;Until one of our coworkers went on an inheritance binge. This thing inherits from that, and another inherits from that and on and on… One day I found myself working on a bug in a leaf component six layers deep in a class hierarchy. Each component ran some initialization code to fire up event listeners and so on. So I stepped through the code one line at a time up the `super` constructor tree, checking every value of every variable, trying to figure out where things had gone off the rails. Ugh, been there. Worked with an engineer who just loved inheritance nothing I did, said, or showed her could convince her that an inheritance chain 4 levels deep to handle an address form was overkill, difficult to reason about and a nightmare to maintain.
Not intending to get a hint to solve the problem. But some reading material which would direct me to the solution would be great. My knowledge of JS says that the validate function cannot get called as there is no way to change the CandidateChooser.name property.
I think [these lines](https://github.com/taco-spolsky/taco-spolsky.github.io/blob/master/index.html#L45-L55) clues you in to add a checksum in the url that will evaluate to your name based on [this function](https://github.com/taco-spolsky/taco-spolsky.github.io/blob/master/index.html#L28-L40). I think, but I haven't played with it because I realized I could be playing video games instead of solving problems for jobs I'm not going to apply to, so I'm going to do that now.
You're meant to include a link to Taco's recommendation service in your application. Ideally, you can construct the link in a way that when the person reviewing your resume follows the link and clicks the button, Taco recommends _you_!
What exactly are you supposed to be doing? The instructions are rather vague. Do you want a candidate to re-write the code that is at the github.io link?
The intent is for a candidate to figure out how the code works on Taco's page, and see if they can find a way to construct a link to Taco's existing recommendation page that will result in their name being displayed when the button is pressed. (The premise is meant to be that Taco writes terrible code, and you can use your knowledge of Javascript to take advantage of the bugs in the code to trick it into doing something it wasn't intended to do) EDIT: The link provided in the body of the emailed job application would be to https://taco-spolsky.github.io?…, where the … part is effectively the "solution" to the puzzle, i.e. the thing that changes the page's behavior.
The eventual goal is an email to us with a body that looks something like this: &gt; Taco recommends me, My Name Here! https://taco-spolsky.github.io?… &gt; &gt; I'm interested in your position because … blah blah blah &gt; &gt; Sincerely, My Name Here A developer (possibly me!) reading your cover letter clicks the link you've provided, clicks the button on the page, and sees **My Name Here** displayed on the page. The fun part is figuring out what goes in the … bit of the link.
pretty easy. unfortunately not looking for a job
No, you can manipulate the URL's query string and hash to change the text, though won't say it's easy!
I need to sleep in more on weekends. I can write sarcasm but can't read it this early!
Yes, that's a legitimate concern. I've updated the copy on the job page to be more clear what's expected.
Is it OK if I am called "checksum"? :p Edit: got it working with "check_ca", it was quite fun!
If you make a page, it may be hard to use it while you play Starcraft. Maybe AutoIt or AutoHotkey are easier for you in this situation.
I liked the format of this one - thanks for the tip peduxe!
Can't you make the same mistake with prototypes?
Click bait title leading to an unrelated article about an unfounded attack on OOP using marginally related examples and no suggestions for a better alternative. I want my 10 minutes back. It seems that some JS programmers need to step outside the JS world and realize the OOP has been an excellent practice in use in large apps since the 60's. Just because a few poorly trained JS programmers on a team somewhere misused inheritance doesn't mean the whole paradigm is "harmful" for everyone across the board.
&gt;It seems that some JS programmers need to step outside the JS world and realize the OOP has been an excellent practice in use in large apps since the 60's. Just because a few poorly trained JS programmers on a team somewhere misused inheritance doesn't mean the whole paradigm is "harmful" for everyone across the board. Well we are on /r/javascript. And in the context of javascript there are better patterns available, and class-based inheritance isn't synonymous with OOP since there are other OOP patterns. But this whole thing is especially stupid because javascript doesn't even support the class object model, and even the ES6 implementation of the `class` keyword is just syntactical sugar on top of the existing prototypal inheritance object model. It was just added to make transitioning developers feel more comfortable while they use class-like structures in their code. In any case though, the guy sure knows how to get pageviews, because this is a touchy subject and there's a lot of FUD surrounding it. I expect his next article will be something along the lines of "Anyone who uses semi-colons is a little baby bitch".
hint: put a breakpoint inside the `CandidateChooser.recommend` function and inspect `this`.
The author's overuse of bold, italic, uneven whitespace, and allcaps really makes me trust his lack of depth in coding. All languages are tools, each tool has a variety of features that make it suited to different jobs. There are very few languages that I've ever seen which can be "considered harmful", and it's not because of prototypical versus inheritance versus compositional; they were harmful because they didn't do very well at any particular paradigm. Saying inheritance is considered harmful might as well be saying that screwdrivers or shovels are considered harmful. &gt;This thing inherits from that, and another inherits from that and on and on… One day I found myself working on a bug in a leaf component six layers deep in a class hierarchy. Each component ran some initialization code to fire up event listeners and so on. So I stepped through the code one line at a time up the `super` constructor tree, checking every value of every variable, trying to figure out where things had gone off the rails. After way too much time doing that, I found the problem in the base class, and there was absolutely no way to work around it without changing the base class This is the sort of thing that gives JS developers a bad name. He's never refactored before? He's never debugged before? Are they even using source control enough so that he could have just used diffs to find the changes? Do they not have tests?
Like this? http://codepen.io/anon/pen/NGvxoz
Let me give you some help. Snake eyes is 11. Think about your if statement. What happens if you get 44? The same thing is wrong with the while loop condition. Also, in js you should only ever use ===, not ==. 
Here you go! http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding
Got a tip for the levelMap[level] problem? The combination of the 'random zone' and ```if(!levelMap[level]) { level = 'medium'; } ``` are where I am stuck. 
That was fun :) Take your time people. Fire up that debugger and go through it line by line ;)
Yes! (Disclaimer: author, as a Trello iOS programmer, is severely biased.)
So then should I just change `if (firstRoll == secondRoll)` to `if (firstRoll == 1) {` `if (firstRoll == secondRoll) {` *all the other code* `}` `}`
No, but you're getting there. Think about the question being asked. Both numbers are random. You want to break when both numbers equal 1. And stop using ==. 
reddit does https://github.com/reddit/reddit
You're missing one piece of the puzzle. ;) Why wouldn't it get run?
Saw the authors name and knew exactly what it was going to be about... 
Hi, I think you have some errors. First println is not a javascript function, second you have to call Randomizer INSIDE your loop, you need new values in firstRoll and secondRoll and then check them if they are equal to 1. I hope this helps. 
Yes, alternatively, I used the URI `data:text/html,&lt;iframe src="https://taco-spolsky.github.io/..."&gt;` which can be refreshed without any side effect when debugging ;).
You got part of it, but not the solution. For validate to be triggered you have to have changed name already.
:)
Thanks for your suggestion, will take a look into that. Really appreciate it.
Actually, there are a lot of string values with a length shorter than or equal to `"level=medium"` length! ;)
True on the application process, took me more time to write the letter than hacking that URL. Nice one with the checksum, makes it more personal :) And now I will spend some time persuading myself that checking hash keys is something I shouldn't be bothered about in my own apps...
For something involving Hotkeys, I would use [AutoIt](https://www.autoitscript.com/site/autoit/downloads/). [Here](https://gist.github.com/pl12133/b74c56f57998305db68c) is a little timer/hotkey script with a configuration file, it should be simple to read through. Does that cover the problem you're having here? To run that AutoIt script, download AutoIt and download the script and config file from my link. Put the script and config file in the same directory, and also add a sound file called "alert.mp3" in that directory. That "alert.mp3" will play when the countdown ends (I used the [MGS Alert](http://ringtones.mob.org/ringtone/IjNG6nQOEAtv1UF0jYxu_A/1444635897/bda82b67243bcbd08c25b0a5f66d50ad/metal_gear-alert.mp3) sound). Then right click the `.au3` file, and if AutoIt is installed you should be able to run it. Let me know if you need help running or configuring the script. Good luck getting back into SC2!
I definitely had to do some weird stuff to get inside that loop. Confused me for a few minutes, at least.
Solved in 20 minutes :) Greetings from London! 
Done it, but I would argue it tests knowledge of how web browsers work rather than javascript. Solving the why the f*** is that still set after an F5 was most of the problem.
 childObj = { parent: parentObj, ... } or if for whatever reason you don't want to do that: var objHash = Object.create(null); parentObjects.forEach(function (obj) { objHash[obj.uid] = obj; }); var someParent = objHash[someChild.parentUid];
* Edited to change function name You don't need two functions. It's a boolean answer. Just isEven() is enough. More, you can simplify the code like this var isEven = function(num) { return num % 2 === 0; } 
Thanks for the insightful reply!
Use CSS for the actual sizes and only set a data attribute via JS. body[data-size="1"] h1 { ... } That's the easiest way to do it.
I was under the understanding that JS cannot pass references, so if i were to pass the parent in, durring the initialization, it will not be updated unless i pass it in again, durring the next change. Do i have something wrong there?
That's weird :D I mean the goal was to play with url parameters and make it happen. At least, that's what I understood. I'm just wondering if we should do something like execute code in a url parameters like change window.name = "something" and make it run somehow. And my answer is no to your question, where I am right now I just need to get to change this.name to my name at the loading time and it's done. But I can't achieve that or I'm not skilled enough to know what to play with in order to achieve that :o
yeah, had to actually debug that code block with my brain. fuck that, never again. :D
Thanks for your help! 
Thank you for your help as well
thanks for your reply, I believe I have to use java only, like create a new function and call the function on the button press onclick="h1func()"
JavaScript is only needed for the interactive part. Styling (presentation) is better left to CSS. http://jsfiddle.net/kjd479vL/ It's easy stuff, really.
1. i will not provide a solution... BUT, you need a position array for the turning ring, that will help you with point 3, too! then, check where it is, where it has to be and what is the shortest way! the turning ring needs to stop at 6,7,8,9 different positions (depends on the chevron count)! 2. you had a space between "&lt;div id="dialer"&gt;&lt;div class="glyph"&gt;&lt;/div&gt;&lt;/div&gt;" 3. =&gt; look at 1. 4. keep forward! :)
fizz buzz it
Babel contrib here. They pronounce Babel wrong. It's Bah-bull. :P
I went ahead and made this just for fun, but I suspect (as others have mentioned), that you want something outside of a webpage so that the page doesn't have to have focus for it to work. Anyway here it is. Key is set to spacebar by default. Also, probably only works in newer browsers. http://codepen.io/anon/pen/ojeLpJ
My tips are: Randomizer function within the loop Test that each roll is equal to 1 Here is my attempt: https://jsfiddle.net/d1s2d38w/11/
Wrap all form elements with a form tag. 
You are making yourself vulnerable to dictionary attacks that way.
Thanks for this post! that was a fun puzzle and I'm looking for work anyways :D
http://lifehacker.com/5796816/why-multiword-phrases-make-more-secure-passwords-than-incomprehensible-gibberish First result I found.
I don't see any problem, looks good to me. Object literals are just comma separated keys part of the said object that can have different types (function, number, object, boolean...) Other than that, there are tweaks you can do to how you handle the view and model logic there. Currently on mobile so I can't really give a proper answer but this is what I immediately noticed, and you should avoid: if(this.checkbox.prop('checked') { this.checkboxValue = true; } else{ this.checkboxValue = false; } Can be shortened, you assign the variable to be the value returned from your condition: this.checkboxValue = this.checkbox.prop('checked'); 4 loc saved :)
Well, you can always use Rx or any other reactive extensions-like lib, might be a tad verbose but is a powerful set of tools. It is a completely different approach to how you program, so most people might not buy into it easily.
Sure ... but like you said, it's a different programming approach. The purpose of Rx is to operate on observables and streams, not to gain access to a set of utility functions.
Nice post, thanks a lot for sharing. Cloned your git repo and tried it out. Hope you don't mind :) 
Shot in the dark, but wasn't Babel created by a single person? Even thought I don't think having him saying how it's pronounced would end the discussion on the matter.
What a strong response to the pronunciation of a word. Pronounce it however you want. [These are the common pronunciations](https://dictionary.cambridge.org/us/pronunciation/english/babel). I pronounce it as the US one on that page (and before you say it, I don't want to argue about whether or not that's how the US pronounces it, it's just the way I do).
These days, any web app of significant size will have its source run through a minification tool like UglifyJS. So while it's technically available for you to read in the developer tools window, it's all garbled and impossible to reason about.
&gt; We have a large codebase written in **CoffeeScript** [Nope](https://drawception.com/pub/panels/2015/3-23/BC322qXPhz-4.png).
The Guardian open sources its entire frontend repository: [https://github.com/guardian/frontend](https://github.com/guardian/frontend).
Omit the innerHTML line. I only put it there for the sake of having some visual feedback. You only need: document.body.setAttribute('data-size', n); This doesn't change the size at all, however. It just sets that attribute. You'll need CSS to change the font size according to that attribute.
You might need to add one of these: Function(atob('YWxlcnQoJ0RvIHlvdXIgb3duIGRhbW4gaG9tZXdvcmsuJyk7'))();
Even shorter, as you just want a truthy (or falsey) value: function isOdd(n) { return n % 2; } BTW, your function was wrong. If `n % 2 === 0` then `n` is a multiple of 2 (or is 0).
I think this will give you an idea of what Im trying to do :( im sorry http://pastebin.com/L9h8SxUa
Unfortunately for who?
Good man.
My version returns true and false. Yours returns 0 and 1. Yes, typecasting will allow 0 &amp; 1 to be used for booleans, but in this case its better to explicitly return true and false directly. The function *is* wrong, but not for the reason you gave. I called the function isOdd, but really its isEven. Run this in the console to see. for (var i = 0; i &lt; 100; i++) { console.log(i, i % 2 === 0); } 
Can't blame, they're English and we know how bad the weather usually is there.
If anyone would be kind enough to share the answer via PM, I'd much appreciate it. I'm not applying for the job, just more curious than anything. 
You don't need that many functions. Use parameters. http://jsfiddle.net/4Lv0opk3/
This was a really fun puzzle to solve! Definitely learned a thing or two (you guys even made me believe that browser's dev tools were buggy at some point but I was not prepared to believe all my browsers were buggy.) I am a happy freelancer and you actually made me want to work with you guys.
I updated my code, much tidier and simpler, dude thank you so much, I have a few more things I have to do but Im gnna tackle it on my own hopefully I can get throught it. If you have a way to communicate that would be amazing too. &lt;3
Chrome dev tools has a button to format code.
One problem i see here that others haven't touched on is that you have what is refereed to as a magic number, a number that apears in multiple places for the same thing in your code, that being 39 in this case. Magic numbers should be avoided, because it isn't quite clear at a glance what they do and if you want to change one you have to know every place in the code where it's found. To fix this simply put it in a clearly named variable and use that instead of writing 39.
Thanks for the fun puzzle Trello! [Spoiler](/s "https://taco-spolsky.github.io/?____valueOf#|checksum=9861729|Lauren") Edit: Happy to explain over PM
I like that. You could also add a conditional breakpoint with a condition of `something=''` 
The pronunciation of babel isn't really my standard.
Ooh, good call; that was imprecise language. Edited — thanks!
This was really fun! Great job putting it together. Solving all the little intricacies (including the little in-browser one) was really enjoyable. Made sure I did it before I came back here and read the rest of the thread to not pick up any hints inadvertently. Wish I could actually apply :-/
While this is very valid, 39 is the number of glyphs on a stargate, and I don't forsee that changing anytime soon :). Thanks for the input, though!
Which provides restructuring, but doesn't reverse minification. Generally minifiers change variable names to something meaningless, and will refactor code to reduce the length. Not to mention comments being removed. Not the same as looking at source.
Assuming they've actually turned on mangling. A lot of places don't.
Not trying to start an argument, but whats your source for this? UglifyJS by default mangles, you have to pass a flag when minimizing to prevent it from doing so. A quick sample of the major tech sites (google, facebook, apple, this page) shows minified code using mangling. At work, we always minify in a way that reduces the footprint as much as possible, for both performance and code abstraction purposes.
It's safer, but still not safe. I still wouldn't do it. I have done it in the past, and it still created some really weird collisions / hard to find bugs. If you really need to extend an existing object, look into symbols. 
Hmmm, yeah that is a good point. I guess I am curious what could have gone wrong. And yeah - Symbols seem great.
There's an Axiom "Good code is self documenting" and while tying it to a variable making it easier to change doesn't affect you here... Giving the number a name that makes sense makes the code inherently more readable for someone not familiar with the project or for you when you're a bit tipsy or 6 months from now. Give your magic numbers name just makes the code better even if you're not going to change in the forseeable future. I mean with all the shennaigans Stargate has are you sure there will never be a subplot where you might need a gate with a few extra symbols to account for another galaxy/dimension or one with less because its a limited version like the one Sam's boyfriend made out of a toaster :P
How does this compare to electron and node WebKit?
That's just a basic module pattern though - there's nothing inherently FP about it. Just because you're not wrapping your functions up in classes doesn't meant you're using functional programming. (And vice versa)
Perhaps the "Javascript Cookbook" book: https://www.safaribooksonline.com/library/view/javascript-cookbook-2nd/9781491902431/ You can sign up to safari books for a free trial (you dont need a credit card).
Using modules instead of classes, referential transparency, minimizing mutability etc. These are all more in line with a functional style. Of course modules alone don't make a program functional.
I'm just spit balling here, but try this. var img = document.getElementById('img1'); var source = img.getAttribute('src'); if(source == './images/symbol1.png'){ alert('hi'); } edit: formatting
The biggest problem I ran into (and this was a long time ago), was that I extended objects with a method called `deepCopy`. Turns out Chrome has some built-in javascript which was being run on one of my pages, and they also attempted to create an object and use a method called `deepCopy`. I'm not actually sure how/when it ran -- I only found it because an exception ended up getting thrown from their javascript, and was never caught. The solution was to not extend the object, and everything went back to normal. Lesson learned for me. Thankfully, it was just on a small project I was using for personal use.
Since solutions have already been posted, I figured I'd post the JS gotchas that I found in the code so that others that find this thread can learn something instead of just copying the solutions: * Event callback functions need to be bound to their owners in order to use `this`. * `var` should be used to limit the scope of variables so that they aren't all global. * `.indexOf` returns -1 on not found, not `false`. * Object containment should be checked using `.hasOwnProperty` instead of square brackets. And then the non-JS ones, * `.length` checks are not good for validating URL input. * Checksums shouldn't be read in from the URL at all. :P All in all though, it's pretty impressive that your dog learned to code at all.
Yes. Complex types are always passed as references. The only caveat to this is if you pass an object to a function -- inside the function if you change the object completely it updates the reference to whatever you set it to.... uh, example because I don't think i've described that very well: var foo = {test: '1'}; bar1(foo); // foo is still {test: '1'} bar2(foo); // foo is now {test: '2'} function bar1 (b) { b = {test: '2'}; } // this assignment wont propagate up, you've only re-assigned b to something else function bar2 (b) { b.test = '2'; } // you can, however, set properties... this updates the `foo` object above.
yeah the '|' are being url encoded to '%7C'. If you cope paste into the address bar it works: https://taco-spolsky.github.io/?levevalueOf#|checksum=9632450|hannyajin=myname
Notice that even if you set the src of an image to a relative path like `./images/symbol1.png` When you retrieve the src it returns the full path of that image: `http://yourwebsite.com/images/symbol1.png` Try printing out the .src value to see what it says. By the way, in a case like this, you shouldn't be storing state in the DOM. You *should* have a separate object that stores the state of the slot machine, and keep it separate from the UI. Think about it... what if you want to change the images later?
http://www.jsnice.org/
You're right! It's basically just there to screw with you when you're trying to puzzle it up in the dev-tools - in a way completely unrelated to the puzzle. What a slap in the face! :D
yes.. I am able to alter the value of `level` variable through query strings. But then, I am stuck at the actual value that needs to be set to `level'. I understand that I need to pass a property name from the prototype chain so that levelMap[level] will return a truthy value and it still won't modify the name in the later stage (through &lt; &gt; = checks).. trying to figure that ONE property name. :) rest of the things are solved, though. Hopefully, the details are not too revealing to other devs who are trying to solve.
The only lines are : if(name == 'checksum') { checksum = value; } That's why I added the #checksum=antoine but I need to set the name at true which can be done by setting window.name = "" but I can't set things if dynamic code execution is not allowed. If there is a way to set window.name from the location.hash I don't know how to do it :o. still there [Spoiler](/s "aaaadeasy&amp;level=medium#aaaa|checksum=antoine")
 } } } } } Yeah, this is much better
I just wanted to comment that the tech trend of linking to a giant hard to read manual or spec is not a helpful practice for anyone who isn't already an expert on the topic. 
[removed]
Dang...I'm an idiot too. I actually got this far but was thinking the length of just "medium". Jesus.
I've seen lots of people, including experts and myself do that mistake. I wonder how it happens, as shorter variant is easier to think of :/
[removed]
You being a contrib doesn't give your voice any more weight. There are only two things at play here: - The Tower of Babel is pronounced baw-bel, and Douglas Adams' term Babelfish is pronounced bay-bull. As these are the origins of Babel being synonymous with translation (the tower historically, the book for popular culture), their pronunciation should be followed. - Works like this, however, are pronounced however the hell the creator feels like pronouncing them. The only person with any real weight here is /u/sebmck -- So if you have evidence that he pronounces it "bah-bull", fine (though he's bastardizing it at that point). If he says it's pronounced as "little pink duck", that's fine too.
No. You can still break heuristics and cripple performance. You can still break someone's code. Just use a regular function. s.foo(bar) foo(s, bar) It's not that much of a difference, really.
If someone's code has that much cyclomatic complexity then they deserve to deal with CoffeeScript. 
As a small tip for this: examine truthy and falsy values in JS.
Avoiding curly braces is why I love CS. I'm sure there are some really sound arguments against it, and it's a particularly bad time to adopt it while ES6/7 is being introduced...but the main hate I've seen for it comes from people who have never used it or rage quit after not being able to copy paste some boiler plate code from stack overflow.
I find language fascinating :) Start to look at English and you'll notice that many words are not pronounced like they are spelled. There are two common causes for this -- either the pronunciation has changed over time or the origin is from a foreign language. Look at Shakespeare's English and you'll see that he often re-spelled words to match common pronunciation of the time (e.g. he wrote "Wensday" which originated from Woden's Day) I didn't see the evidence as it was hidden under a buried comment :)
Btw both of your examples can be pronounced "babble" and I do for both. http://dictionary.reference.com/browse/babel
Hi /u/MrBester, please refrain from personal attacks.
Hi, mod, if someone cannot back up their opinion and simply repeatedly states another is wrong, that is also a personal attack.
Both of them _can_ be pronounced however you want, it's language. They were originally pronounced baw-bel and bay-bull.
Sorry about that but it was intentional in fact. I didn't want to give any additional hint related to the `name` property.
Incorrect.
A loop that has a conditional break/continue in it. A simple example: var out = ""; var x = 0; while (++x) { out += x; if (x === 10) { break; } out += ', '; } It is admittedly not good code (array join is better and lacks the condition), but it demonstrates the idea. 
The general rule in programming is to avoid making changes which may affect some unrelated code far far away. *Even when you think the change shouldn't matter.* I know this sounds bleeding obvious, but any experienced programmer can tell you of the times they've been bitten in the ass by changes elsewhere which shouldn't matter. 
If only we could resurrect him, we might get him to write another sequel as well :(
TL;DR : "If you use classes, you'll end up selling your body in a dark alley to pay for your meth".
I find it amusing to hear "I like to know that the code they write is the code that runs." or that they don't like having too much wool pulled over their eyes. Computers are just layers of wool, all the way down. 
Well, that was a time and a half. I've put up with brigading for several months by those who downvoted any post I made, but this sub is determined to be a disaster area that advocates and protects bullshit advice to new coders and I really can't be bothered any more.
Thanks for the feedback! :)
This doesn't improve anything.
Ow, that looks great. Any demo app ?
Check the comments at the top. There is no point in using the DOM for data storage. Just put those 3 values in an array.
There's many ways. The outline of what you need to do is: Find where the space is return all charcters before the space Some useful functions: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice
&gt; Checksums shouldn't be read in from the URL at all. :P This isn't true. Some HMAC implementations *require* you submit the checksum with the request, to establish that the request hasn't been altered. I.e. man-in-the-middle defense. It does have a (secret) salt, however. It is also useful to include the date of the request if you have time-sensitive submissions. Usually it's in the form of the hash being the entire content of the request (headers+footers) hashed with a shared secret, and a timestamp if time sensitive, with the resultant hash as a query string param, and the timestamp as another param.
Have you checked out something like /r/dailyprogrammer ? I find it's good for challenge ideas, and you can always add a web-spin to them by writing a front end interface to your code.
Indeed, we do ;-)
Sufficiently lose password requirements means there is no way to know what any characters in the password are out is structure. So a longer password even if it's made out of full words takes longer to crack. You would have to tailor your cracking software to passwords of that format, which you wouldn't know to do. Dictionary attacks are sourced from stolen password tables. Every common password generally is "8 characters long with a capital letter and a number." If yours fits those criteria, you are probably more vulnerable than you think.
http://lifehacker.com/5937303/your-clever-password-tricks-arent-protecting-you-from-todays-hackers &gt; You've probably heard that a random, four-word passphrase is more secure and more memorable than complicated but shorter passwords, as web comic xkcd pointed last year. This is true, but often irrelevant, because like we said: you need to use a different password for every account. 
Unfortunately there are a couple of postcodes that your rexexps won't match, e.g. [EC4Y 9BW](http://www.doogal.co.uk/ShowMap.php?postcode=EC4Y%209BW)
Yeah, but I don't worry about something I can't see. If the errors I get back make no sense to me, then it's definitely a problem that I created myself.
&gt; Citation needed. Mh? function isOdd(n) { return n % 2; } Returns a number (0, 1, or NaN), not a boolean. The "is" prefix suggests it returns a boolean. What would you put in the JSDoc? `@returns {Number}`? And then you'd add another line which explains that it's actually 0 or 1 (or NaN, but you'd probably won't notice that). Does that sound like something reasonable to do? Do you think this crap is justified by saving 4 characters (minified, uncompressed)? It isn't. Make your function do the thing it claims to do. Your code will be always full of nasty surprises. Don't add more if you can avoid it.
English is weird. There are many words that have vastly different pronunciations with just a single letter changed. Pronouncing it babble is much more true to the original Hebrew pronunciation so I don't buy this "purity" argument that many put forth.
Yep, you're quite right. There are a handful of abnormal post codes. We're able to match that assuming the user specifies a space, but troubling otherwise. As far as I know, these abnormal post codes are limited to London, and there aren't that many. Perhaps a simple array containing these exceptions?
So a loop... 
I think everyone has his own "most annoying part". I spend most of my time on the levelMap and getSetting.
Thanks! Glad to hear it.
Under "the importance of equality" header at the bottom, I see: * "We F\*cked up" -- which uses language *in its title* that offends *me*. Should I submit a pull request, or are you gonna tell me to get over it because that's "censorship" (and somehow what you're doing isn't?) Here's the difference between me and you: I'm not out to be your thought police. I'd rather convince you of how I see things than red-pen your every sentence scraping around to find every possible opportunity to wring miniscule drops of offense. * "Brendan Eich Steps Down as Mozilla CEO" -- yeah, awesome, let's trumpet out the career assassination of a dude based on his personal voting record. Turn the tables: if you were internet-lynch-mobbed out of a job -- particularly one for which you were otherwise overqualified -- just for voting, as a private citizen, *against* prop 8, is that something that everyone should celebrate? Grow up, lose the pedantry, and if you really think you're still in the right, try making a mature argument to persuade people to change instead of just writing a nitpicking linter to constantly slap everyone's wrists over minutiae.
O man -1 is true when inside an if conditional. FML, dogs and cats, living together, mass hyeteria. if(-1) {console.log('damn')} Thank you for posting your solution, I had ?levevalueOf#|checksum=9872964|Sponge%20Bob%20Square%20Pants but I was stuck like hell on the valueof part for about 4 hours. This would have drove me to the nuthouse.
Thanks for the ideas. Will have a look at Marko when I get to server side templating. I second that, linkedIn is still using Dust whikle React seems to becoming pretty popular
Instead of using reactify, use Babel through https://github.com/babel/babelify which handles both ES6 and JSX compilation for React.
[w3schools page for the hash property](http://www.w3schools.com/jsref/prop_loc_hash.asp)
`window.name` is a special property, rather than a normal property. See [documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/name).
use webpack! :) check out my example https://github.com/vshjxyz/es6-react-flux-node-quickstart it's basically allowing you to write es6 react components using flux, scss for styling and providing the pages/components in an isomorphic way
This part was the easiest one; I was not able to pass the 'level=medium'.length barrier until I realized, that this is not the problem.
The article you're commenting on has nothing to do with React. It's about [RxJs](https://github.com/Reactive-Extensions/RxJS) and Angular.
The first example involves changing a sentence such as "We’ve confirmed his identity" to "We’ve confirmed their identity." As many English-speakers over the age of 30 will note, this is grammatically incorrect. I see little need for an app that sabotages grammar, when the average person is often so talented at accomplishing this on his own.
I absolutely agree that an interviewee who uses if/else approach to FizzBuzz should not be "penalised". However, I think this problem can be a good starting point to figure out the candidate's views on software design process. For example, asking about pros and cons of both approaches may be interesting.
With all those restrictions, it seems like the page would load fast anyway even without any Google-side optimisation. It's basically a single HTML file that is being downloaded and rendered.
Yea, the index starts from 5 because of that. setting.indexOf(key) + key.length + 1 = 5 if level is not in the setting. valueOf is the only prototype function that has a length &lt;= 7.
That being said, the article's site could use some of those optimizations. 
Shame they didn't host that AMP page - would be nice to have a live example of how their widgets look/work without having to make one yourself. Edit: they are completely broken: https://i.imgur.com/GWeXd0g.jpg as iPhone 6 size in Chrome Dev Tools. https://i.imgur.com/Lrl5aOD.jpg is just in a narrow window on Chrome. Both cleared cache, no uBlock.
Some of those if-else code examples are a bit absurd, to be honest. I highly doubt I'd see people replicate those examples in the real world. Anyway, I do prefer using only ifs &amp; string concatenation + a guarded pattern. Guarding is always better than long, complex if-else statements.
Who would play a browser game on mobile? ;) It would just be horrible especially if you have limited bandwidth.
How about [this](http://www.spacejack.ca/bowling/)?
hey do you know how I would go about, say if I put my mouse over the button it would "preview" the effect, and if I mouseout it would return to the previous bgColor value? thanks bro
Also, look up the application cache manifest. You can easily make a game playable offline under 5MB. You can store more data offline but then you'll need to look at how to use offline storage libraries. Anyway if you want a more native-like app but want to write it in JS, then maybe look at React Native.
[I recommend this talk by RxJS main contributor to anyone starting.]( https://youtu.be/zlERo_JMGCw) Really makes you understand the concept of reactive programming. It's a big API and you're not required to know how to use every method but it's a powerful asset that will for sure pay off.
It seems like they're using some Polymer practices including custom elements; perhaps it's fast/optimized considering it has to be validated, probably including registering elements and rendering the valid HTML5. But yeah it seems that with all the best-practices we have now, there shouldn't be an issue with load times or data allowances for mobile.
this. babel is pretty much the way to go right now. Even if you're using node 4.1.x ... babel. (well i suppose you can do without it if you don't want to use `import`)
Another option is Unity. Most people use C# but you can actually use UnityScript which is very Javascript-like.
love webpack's hot module loader and react loader... but i'm still on the fence with webpack overall. On one hand I love how simple it is to set up a dev environment and just go.... but then you (read: I) start adding sass loaders, and importing sass into my modules, and now i'm forced to test in the DOM... and that annoys me. Sure I don't need sass-loaders/import sass statements in my JS... but that's one of the selling points of webpack - which is nice. but personally i'd rather unit test in the command line. Additionally I am not really a fan of the added jank needed to get somethings to play with webpack (sinon i'm looking at you, anything that imports `fs` you're just as guilty). meh. it's nitpicky i know. and in reality i always start a new scaffold with webpack then curse myself when i try and unit test a module that imports sass. 
TIL... thanks !
It's pretty obtuse for a FizzBuzz solution, imo. No need to reinvent the wheel here. 
&gt; I actually find myself learning about more advanced functional programming techniques now because I am writing a front-end web application I've found myself doing the exact same thing, are there any resources in particular you've found helpful?
not how to get the location.hash I meant how to set the window.name to something else. You could see in the spoiler I already did that.
You'll be printing the number for every non-dividing divisor, which is not according to spec. Edit: and you seem to have mashed up your if conditions and console.log.
Just realised and fixed 
I mean, not very surprising, but yeah. I've optimized the hell out of our CMS. Our pages build in milliseconds. Couple that with AWS and Varnish caching and the vast majority of users get our HTML, CSS, and JS delivered in 1000ms or less. Almost all of the noticeable page load time is due to two bottlenecks: - **Large images.** We've been doing better at trying to load smaller images on mobile, but there are still a few areas where this is a challenge. - **Third-party javascript.** This is the huge one. We're a newspaper, so we're loading several analytics scripts, DFP, Twitter scripts, Facebook scripts, plus a few random "widgets" like an event calendar and print classifieds. These are all completely out of control, taking as much as 3-12 *seconds* to fully load and render. But there are no real alternatives. I think it's pretty shitty, frankly, that companies like Facebook and Google are trying to make publishers host content on their platforms, when the main thing slowing down our sites is code coming from them. *Edit: I want to make it clear that I'm not trying to cut news sites too much slack. A lot of sites in this industry are terrible. What I'm saying is: even when you try to clean up all the garbage, you can only do so much. I'd appreciate some help from Google there instead of rewriting our templates to post to yet another third-party platform.*
I'd use css for the hover... just easier, but for reference, you would use a `mouseover` or `mouseenter` event handler with a `mouseout` one to get the css hover effect using javascript. Here's how I'd do it all: http://codepen.io/anon/pen/rOzYod
Another great resource: [The introduction to Reactive Programming you've been missing](https://gist.github.com/staltz/868e7e9bc2a7b8c1f754)
hey thank you so much for your detailed reply, I believe this is exactly what I have to do
Unless you are locked in to ReFlux for some reason, you may want to consider [Redux](https://github.com/rackt/redux). It has the momentum at the moment as the state management library of choice for React.
hey brother thank you so much for your detailed response I will go over your method and adapt :) thank you so much
1 - `i` and `j` are terrible variable names. you should choose names that are meaningful. 2 - you're printing `i` once for every factor of `i` (eg: you'd print 4, 3 times; once for 1, 2, and 4). 3 - I value clarity over simply saving characters. You're solution hides the requirements so it's difficult to understand what it is even trying to do. A good solution should at least surface the fact that you care about numbers that are divisible by 5 and 3.
hey your example it changes thhe background color of the button not the whole page itself, would I change buttonface to body in the var code?
&gt;Is everyone using a transpiler? Yes, [babel](https://babeljs.io/) and [traceur](https://github.com/google/traceur-compiler) to the rescue, so far Edge is the browser with most of the [ES6 features implemented](https://kangax.github.io/compat-table/es6/), Chrome and FF are still behind - I seriously think that neither will finish when the ES7 spec is done. Unless there's a real priority to have these features added in time, transpilers will still be relevant - people like to live in the bleeding edge and those features are handy in JS development. &gt;What's going on? ###Long live transpilers!
Ah, ok. Basically you need to have two different ways to set background - one that is temporary, the hover -- and one that is permanent, the click. There's a lot of ways to solve this, keeping with your existing code, you can modify the `setBackgroundColor` function to accept an extra parameter for `permanent` and if it is set, persist the value so when you call the function without a color &amp; permanent false, you can restore the permanentColor. var permenantColor; window.setBackgroundColor = function(color, permenant) { if (permenant &amp;&amp; color) { permenantColor = color; document.body.style.backgroundColor = permenantColor; return; } if (permenant &amp;&amp; !color) { document.body.style.backgroundColor = permenantColor; return; } if (!permenant &amp;&amp; color) { document.body.style.backgroundColor = color; } }; You can then call it like so: &lt;button type="button" onclick="setBackgroundColor('red', true)" onmouseover="setBackgroundColor('red', false)" onmouseout="setBackgroundColor(null, false)"&gt; red &lt;/button&gt;
wow dude Im gonna try and implement this right now and getright back to you &lt;3 &lt;3 &lt;3
This further reaffirms my opinion that until very recently memory profilers for JS did not exist. In this case it sounds like they are coming into release in Chrome, but are not complete yet due to changes in internal architecture. To my knowledge this is JS's first user-available JavaScript memory profiler at just a little over a year old: https://github.com/paulirish/memory-stats.js Some additional reading on JS memory: http://sealedabstract.com/rants/why-mobile-web-apps-are-slow/ If anybody ever tells you that classes in JS will reduce memory consumption they are lying to you, because they have no way to measure this.
We use Scribe at Format, and it's been really awesome. Thanks Guardian team!
Nice! I will be looking into this as well.
for hot module loading, there's: https://www.npmjs.com/package/browserify-hmr and a brief writeup on how it works in the browserify handbook: https://github.com/substack/browserify-handbook#browserify-hmr watchify -p browserify-hmr main.js -o bundle.js
WML FTW!
big fan. I actually was (trying to code with a 2yr old running around isn't as easy as one would think) writing an HTML reporter for your Tape lib... and its using browserify. :) thanks for all your work man. edit: i know i mentioned i prefer cli unit testing, so why would i write an HTML reporter? they have a use, and the current html reporter for tape is, well simple. and hijacks console log, which i don't like.
Que? Sure it is. Not freeing allocated memory in C and returning from your function is effectively the same as not freeing a reference in a DOM structure and returning from your function. But I don't want to argue this; you can research it yourself. There is a lot of literature out there regarding memory leaks in JavaScript, Java, C#, etc.
Yeah, same here. Learned something new though.
Thanks, fixed!
you only updated one of the buttons.
Pretty cool program. Describing what time it is in Dutch is Cra Cra!
Yep, there's probably some bugs in the code. Try adding some console.log statements in there to figure out what is going on.
will do I will keep you updated as to what I find!! :D dude big thanks!
Consider: why was the spec phrased the way it was? Maybe FizzBuzz was *intentionally* listed separately in order to emphasize that it's a distinct case. Maybe the real intent is as follows: &gt; Consider the *interesting numbers* 3 (keyword "Fizz"), 5 (keyword "Buzz"), and 15 (keyword "FizzBuzz"). Given an integer, find the largest interesting number by which it's divisible, and print the corresponding keyword. If the input number is not divisible by any interesting numbers, print the input number instead. Turns out, the spec authors just hadn't picked the final keywords yet, and were just using these cute words as a placeholder. This is an equally valid reading of the spec. I think the key takeaway here is this: **instead of trying to deduce the intent behind the spec, ask what the intent really is**! Changes in the spec result from changes in the underlying problem, and, if you *assume* that your understanding of the problem is correct, sometimes you'll discover that you were wrong and put lots of engineering effort into the wrong generalization, whoops. That said, I agree with the core message: it's important to be resilient to changes in the spec. But those changes derive from the underlying problem, and FizzBuzz is contrived and *has* no underlying problem, so it's not an effective example of this principle :/
Thnx!
http://codepen.io/anon/pen/rOzYod
Author, I think you've got a good point: when there are multiple ways to do something, prefer the approach which is most able to withstand changing requirements. But I think FizzBuzz fails to reveal anything along this axis — the best it can do is weed out people who have no idea how to code or follow directions. Your argument is that requirements change in a way that follows an implicit logic. But I don't think it's fair to ask an interviewee to be able to discern business requirements from an abstract piece of code like FizzBuzz. If you're trying to assess someone's ability to anticipate changing requirements, I think you owe it to them to give them a coding scenario that is closer to something they'd be doing in real life. Now, if all you're doing is using FizzBuzz to illustrate a lesson you've learned, that's fine. But you assert that one of the common answers to FizzBuzz is "fundamentally wrong," and I don't think that's true. FizzBuzz strikes me as a thing that was invented to weed out know-nothings during a phone screen. If someone solves it with if/else branching, that doesn't raise a red flag.
coming from java/as3, I was at the same crossroads. Went for Typescript and never looked back.
I learned a lot through assimilation through Redux and using Immutable.js, and reading about pure functional approaches to updating UIs efficiently. It's mostly been practicality driven (which is why I could get as far as I did at all), so I don't have really great tutorial-style resources. I did watch a video or two by Erik Meijer, he's a good speaker. You may be interested in this course: https://www.edx.org/course/introduction-functional-programming-delftx-fp101x-0#!
hey thanks for your reply I just saw it going to try and implement it and get back to you thanks for all your hard work!
Anytime!
hey I need to use mouseover and mouseout similar to what tswaters tried to do above but it still is sticking with the backgroundcolor of the mouseover event but your implementation Im sure works its just i need to use mouseover
Actually since you're coming from python/PHP you might not actually like all the type stuff that typescript has. Coming from scala/java/C# I personally preferred it. However, much like python 3.5 _optional_ typing, typescript typing can be more optional than something like Java. But honestly, I think typescript is the best language on the browser at this time.
Thank you a lot! I was banging my head trying to figure it out, and what happened in the end was that I misspelled a class.
Makes sense, and that course looks great, thanks! 
Funny you should mention that, because I gave up on AS years ago. It was a great language, and since it was based on ES I feel like ES6 is bringing that back without having to be cornered by Flash. If ES6 gets me closer to Java infrastructure then I'd be a happy coder.
If (line 66) nowHour = 0, hourText is left undefined. 46) var hourText = numbers[hour - 1]; Good start!
The event parameter (arguments[0]) is standard for event callbacks. The event global (`window.event`) you're comparing it to is not. This is IE behavior that Chrome is also matching for some improved compatibility. Firefox, for example, does not define the event global. You should stick to referencing the event argument you're passed in rather than attempting to use the (notably not widely supported) global. 
Any suggestions on getting a workbench/workflow set up? Some people mention using node.js, but I am completely lost on where to start.
Try this out: var isUnique = students.reduce(function (prev, student) { return prev &amp;&amp; sID != student.sID; }, true); And make sure to check out [how reduce works](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce) if you're not already familiar with it. EDIT: As /u/rauschma points out below, Array.prototype.every probably makes more sense here.
Requirement change: In fact, please output 'Bazz' when you encounter a number which is multiple of both 3 and 5. The progressive concatenation is no longer the 'best' approach. You assumed that if something had to change, it'd be to add new base factors and keep the logic of adding a string, but it's your assumption. It has never been told until it appeared in your own refactoring of the requirements. By trying to be future-proof, you earned a free rewrite. When in doubt about what can change or not, don't guess, ask the business to avoid having to get mad on your past self for trying to be clever. Edit: Sorry if my tone is a bit rude, but I experienced this exact kind of thing last week. A coworker assumed from sample data a rule that saved him a bit of time, rule which didn't hold true and ended up as a loss of time. Interpreting requirements is usually more costly than asking for clarification.
so there's not a mental switch needed i still use babel on the server side with node 4.... i recently installed node 4.1.2 and was getting Syntax Errors on `import` I realize its trivial, but i'd rather not have to remember `import` vs. `require` and just roll with `import`
its a specific problem in my book and I havent been able to solve it pretty much states : when a button has a "mouseover" event, change the "bgColor" property appropriately when a button has a "mouseout" event, change the "bgColor" property to the value of the JavaScript variable "bgcolor" when a button has a "click" event, change both the "bgColor" property and the "bgcolor" variable to the appropriate color in this way, the "bgcolor" variable is used to contain the permanent background colour so that a "mouseout" event can revert to that color if there was no click Also I would need to add this mouseover/out event functionality to all the buttons eventually, I just thought learning bgcolor first would help me do the others, boy was I wrong :(
[removed]
Reduce runs a function on each item of an array. For each item it provides the function with the returned result of the previous iteration, and the current item in the array. You can optionally pass in a starting value as well. In the code I just posted, we gave it a starting value of true. Then for each student in the array, the function returns true if the IDs are different, AND if all the previous returned true as well. If one of them ends up being the same, it returns false and that false value gets propagated through to the end (since false &amp;&amp; anything === false).
You can also use `Array.prototype.every()`: var students = [ { id: 1 }, { id: 2 }, { id: 3 }, ]; function isUnique(id) { return students.every(function (student) { return id !== student.id }); } console.log(isUnique(1)); // false console.log(isUnique(4)); // true I find `every()` easier to understand than `reduce()`. Additionally, it stops checking once the callback returns `false` (the `reduce()` version always checks every Array element).
We've got it then, right?
&gt; At first I was concerned that this was gonna be some google specific thing, but the way they did it is actually completely fair. The problem is that you aren't an official AMP^TM page unless you only use official AMP^TM components, and those components are only served from the official AMP^TM repo via an official AMP^TM blessed CDN. That gives the owner(s) of the single master repo a really unreasonable degree of power. It's not the end of the world unless Google (and whoever else) decide to get cute and start prioritising validating AMP pages in search results (presumably on the basis it "offers a better experience for mobile browsers", or similar)... but once they do you can't even meaningfully *fork* AMP without losing a significant chunk of the benefits from using it. That leaves it as an "open" standard that's monopolised by one vendor or group, and an "open source" project with no community competition or oversight because it's trivially easy for Google/whoever to render any and all forks largely worthless by fiat, at any moment. It's an interesting idea, but I'm sceptical about the governance and the degree of control over the web it gives specific parties (let alone commercial, for-profit parties).
&gt; why does order of else-ifs even matter? The order usually matters. Often, you guard in one direction and move the post with each check. if x &lt; 5 ... else if x &lt; 10 ... else if x &lt; 15 ... else ... Since it's done in this order, you know that you can omit "x &gt;= 5" in the second if-condition. &gt; We never want to print FizzBuzz, we just want the combination of them. No, the spec doesn't say that you should glue "Fizz" and "Buzz" together. That "Fizz" + "Buzz" results in "FizzBuzz" might be purely coincidental. We don't know what those strings represent. 10|5|15 :-:|:-:|:-: 十|五|十五 ten|five|fifteen Gluing them together happened to work in Japanese, but not in English. After translating it to English, the program would output "tenfive" instead of "fifteen". With a separate string for "十五", things would have been fine.
Nice! I didn't know that function existed. Definitely cleaner.
You'll want to look into the file reader api, here is a link to the MDN page. [FileReader](https://developer.mozilla.org/en-US/docs/Web/API/FileReader) 
lowercase `student`?
Why, is it bad to use? 
150/hour is not success. Lawyers make 500+ per hour. 
Haha I intend to remain an engineer, so 150 is a good next step. I would be interested in hearing from any developers making 500 though!
I think your point comes down to something important but not mentioned. Fizz buzz doesn't represent a real set of requirements at all when you start digging like this. The entire premise of it reeks of needing separation of concerns and other things. You have to draw a line somewhere or you end up with enterprise fizz buzz.
Yes... Does it go against convention?
It's a bit hard to compare, but i'll try. 1. Tint is just node with the event loop of the OS (e.g., mouse events, etc) integrated with libuv. While node-webkit/electron do this, they only do it for what a browser might give you, which you miss out on shell events typically. 2. Tint uses a native bridge to allow you to access .NET and Obj-C classes from javascript. This allows you access to any native object/class that you'd find in any Windows or OSX development system. If you're a bit squeemish of accessing the native objects there's a standard API (similar to the DOM) for accessing dealing with native things such as Windows, Notifications, WebViews, etc. 3. Tint is small, typically 15mb. 4. Tint is more compatible with the Apple Mac Store than chromium based renders. 5. You can still use chromium as an npm module, or you can ship and use WebKit/IE (respectively). Depending on your requirements (or if you even require a webview, this may not matter) 6. Tint is more compatible with node than node-webkit and electron, mostly because the contract loops, binding C++ addresses and the startup sequence/event loop more closely matches node (where as electron/node-webkit have to jump through some hoops to get these things to work) 7. You can create an app completely out of native components without using HTML/CSS (although you can always fireup a webview and embed a webpage or html page from your resources). 8. Tint is more secure, it doesn't share any contexts or need to rely on schema contexts to know whether to introduce dangerous API's to the executing js. E.g., imagine if you include JS from a server that can exploit and access node contexts in electron/nw, this would allow a remote server to completely take over a desktop app.) With Tint the contexts are completely seperate and share nothing, no node contexts are ever introduced in an HTML context, while theres ways of sharing information from Tint to the html/webview javascript context, its a much safer approach to app dev. 
what makes me wonder is on the buttons you dont have mouseover events just classes we havent been taught that so I didnt think it was what it wanted 
There's a getting started "App" here: https://www.trueinteractions.com/docs/tutorial-gettingstarted.html
Yup, no webviews, and you can access all of the native classes/objects from either objective-c (on OSX) or .NET (for Windows) You can also create webviews using webkit/IE, or install chromium via npm if you so choose to use chromium.
https://www.reddit.com/r/javascript/comments/3od5sd/javascript_help/ You think I was joking when I said that you need a loop? Are you just going to spam this sub until someone gives you a copy-pastable answer?
I think that could be perceived as being unwilling to solve the puzzle. like its clear its bad code. infact, the reason why you're able to do what the puzzle is suggesting at all is because the code is bad.
You saw this? http://codepen.io/anon/pen/rOzYod
Probably a silly question, but can you access Swift classes too?
yeah i saw it, but we havent learned that way yet and then in order to do that for every button on the page wouldnt I have to do that script again for the font buttons and the header buttons? and the mouseover events owuld be in the button code not in the script
What have you tried?
For writing libraries I recommend: es6 -&gt; [rollup](http://rollupjs.org/) -&gt; [babel](https://babeljs.io/) -&gt; [browserify](http://browserify.org/) for apps I recommend [jspm](http://jspm.io/)
sorry if it comes off as a stupid response, but i think we can all agree we've done this once or twice.. you sure the id of the button is `signIn`? otherwise the "is it in the DOM already?" question is a good one (basically does it exist at the time that code is being executed?) short of that I would probably need to see an example. jsFiddle/es6Fiddle/CodePen/etc. 
http://jsfiddle.net/vu1p97uL/10/ The performance here is slightly better. I also made it pretty.
I think you lost me... Code could be added to change font... not sure what you mean by header. And do you mean putting the javascript calls in to the html code instead of addeventlistener?
write your code so that humans can understand it. Meaning as long as its clear, concise, documented and tested it matters little which way you chose. I realize that's not helpful or answers your question.... but i'm not a fan of "bigshotX says this is the way to code, so that's what imma do!" if its for you, go crazy go nuts with experimentation and what not... if its for a team, I bring up this quote by rebecca murphy all the time "there should be a style guide, and you should follow it. argueing about styles is pointless". 
Yup, you can load up any .framework and use the classes from it. See: http://www.trueinteractions.com/tint2/docs/tutorial-native.html
Huh, that's interesting. I thought it wouldn't redraw until the function finished running. 
I love the fact that I literally learn something new from every single one of your comments. You're incredible.
I make around 235/hr (Bay Area). Nothing special about it either, rent is fucking expensive out here.
That one hour is an entire weeks worth of rent where I live in NZ 😳. Is that your freelance rate or do you have a permanent employer?
Are you sure desktop Chrome can read amp elements?
Oh right, that part. Ha, yeah, it's horribly inefficient. One challenge I have is the updates will flow over a web socket in batches of a hundred rows, and there will be thousands of rows in the table. Fortunately, most of the rows will be hidden, but it still means only a hundred out of a thousand will be updated in a message. Within five seconds, the all rows will have received update messages. I don't think a document fragment will work for my case. What's your opinion of setting the table display to none, doing the updates, and then setting the display back to block?
Yeah, I was thinking along those lines. Time to take it to the next level by completely abstracting out the logic and passing in a configuration object with the mappings of numbers to strings. Which of course only works until the next requirements change that voids all your assumptions. ;)
Working for law firms... with massive overhead... only tiny, tiny, tiny numbers of lawyers actually take home anywhere close to 500 an hour. Also what a narrow definition of success. You're weird bra.
Bigger crime here is OOP instead of prototypal code :P
&gt; If (line 66) nowHour = 0, hourText is left undefined. &gt; You're right! Thnx for the feedback.
If not, that makes it a fair shit to develop with in the first place, eh?
I agree, its a guess. My point is that it's going to be a guess anyway, so its better to try to deduce the underlying logic to found your guess on. It *might* be purely coincidental, but, given no other clues, I think its more likely to be not a coincidence. 
Well, nowdays we have the remote web inspectors that work with your phone connected through USB, so it wouldn't be THAT bad. But yeah, it would be easier to work with if desktop Chrome has it.
Yeah, that's true :) It's definitely seemingly significant that the 15 keyword is the concatenation of 3 and 5, but, if the words were placeholders, you can totally imagine saying "well, 15 is just 3 and 5, so I'll use FizzBuzz as the placeholder word! hehe I'm so clever :D" It's definitely a contrived interpretation, but, well, the same is true for any interpretation of a spec created out of thin air xP I think your guess makes more sense, but not by enough to just assume that it's correct.
Vera cool. I'm in need for something like this right now. Please publish to NPM.
[Christina Lopes](http://www.ics.uci.edu/~lopes/) who wrote the book [Exercises in Programming Style](http://www.amazon.de/Exercises-Programming-Style-Cristina-Videira/dp/1482227371) has a [github repo](https://github.com/crista/exercises-in-programming-style) hosting her exercises. I mainly use her teaching resources to read up on [Program Analysis](http://www.ics.uci.edu/~lopes/teaching/inf212W12/index.html). But her exercices really sound interesting and somewhat challenging. Also you may want to take a look at [codegolf.stackexchange.com](http://codegolf.stackexchange.com) it's rather not about long entries but I had some good fun on this community so far.
Another option that may or not work for your use case -- have 14, 21, 28, or however many `&lt;p&gt;` tags you need to contain each option of text. Put them in different `&lt;div&gt;` tags then show/hide the appropriate divs. If you go with one of yours, it's better to just replace text as opposed to the entire node.
&gt; Parsing things is tricky. Pretty much that. I started writing a full JavaScript parser (in js) by hand plus a codegenerator nearly 2 years ago. I'm still far from finishing it and probably have a shitload of bugs in it that i don't even know about. But it was tons of fun to write and i learnt a lot from it. And now i can use it to generate CFGs, programmatically refactor my code, lint my code, prettyprint, minify and uglify it. No automatic code optimizations so far though, but I'm in the process of implementing an experimental live preview. It's still pretty much hacked together though and would need either a major refactoring or a complete rewrite. Also I didn't test with much so far. The only things I tried to minify and prettyprint are jQuery, angular.js and underscore.js and that's probably broken again since i hacked the preview thingy in there.
You have a single value tuple. Seeing some pattern in a single sample doesn't mean anything. Car, pet, carpet. 3, 4, 7. Red, blue, purple. Anyhow, the spec mentions 3 distinct strings. It does not say that you should glue string A and string B together. You only want to understand it that way because it's convenient. In the real world, you're supposed to ask. Like programs, specs are generally flawed. They tend to be incomplete and imprecise. Often, they also contain a few errors.
Just the fact that you can have this kind of auto completion on Javascript is a reason to use typescript, hopefully they catch up with more ES6/7 features.
The bit where it forces you to use their prebuilt JS and separate your mobile and desktop websites. And the custom tags that won't make sense without the JS.
I've always used the default mode (commonjs) and had not problems with it. If you make webpack generate your bundle in your `dist` directory the resulting JS will have all the `require('...')` substituted with something like `_webpack_require` which is self contained, so you don't have to deal with it. If you're talking about deferred loading of chunks of JS I've always tried to avoid that approach as the complexity is higher and the performance gain is often lower than loading 2-3 "big" files at the bottom of the page
Yes, but you can still use a class for this, what you're advised to not use with excess is class inheritance.
for what would someone need something like this?
What do you actually need this for? I'm pretty curious but I can't think of a way in my professional life to use it. Not that there isn't a use or anything.
Why do you need to target es6 instead of just es5? 
&gt; Moreover, there is no protection against non-terminating programs. Maybe a type system could be used? Heh, good luck checking a program terminates....
If this is indeed secure enough to run 3rd party code, it could be useful as a way to configure automatic tasks for evaluation (eg one user submits data to be evaluated by an arbitrary function specified by another)
I prefer JavaScript because with jQuery you don't understand nothing and is difficult fix your problem. For that reason I have a talk http://mte90.github.io/Talk-JavaScript-1-hour/index.html with the differences. I think that learn together improve the skills and is more simple.
If you include experimental flags, they have quite a bit covered.
Well, yes: async/await and decorators I'm aware there's an option to enable but what else? I'm already on the nightly builds, so the rest must be covered. I need to explore a bit on this, there's certainly a wait to have it play well with babel, after running the tsc compiler.
I answered it above: https://www.reddit.com/r/javascript/comments/3ojx8b/%CE%BBjson_json_extended_with_pure_functions/cvxzs8k
If you plan to share Javascript with other devs, read and contribute to the community and open sources projects, move to different projects and jobs, stay away from Typescript. The latest is build on top of ES6 features which looks much more legit but it still is full of specific idioms and constructs that are not Javascript native. This might be a great solution in a corporate environment to inboard C# devs but this might also create devs that code the "Typescript way" and end up struggling with "low level" Javascript. Minus static typing (old dynamic vs static debate), Babel and ES6 + ES7 offer today a Javascript compliant solution that is widly adopted and get slowly into our browsers and NodeJS. If this was not for Angular 2 championing Typescript, I am not certain we would think much about it. At least not more than Coffeescript. By the way when it comes to sharing projects with the community a number of originally written in Coffescript projects moved back to idiomatic Javascript to broaden adoption, coverage and community involvement. The vast majority of libraries you might want to use are released in Javascript or Babel compliant ES6/ES7 and their integration into a Typescript project might mean extra work even if little. And yes decorators, async/await and more are available with Babel. Furthermore the transpilation produced by Babel should be better as the community and thousands of eyes scrutinize the code produced and refine it. 
I don't want to upset you but by looking to some recent news JavaScript may end up being really TypeScript-alike https://developers.google.com/v8/experiments
You can avoid the first conditional assuming that is the outcome if the later conditions are not met. I've also shortened the conditional logic similar to spinlocks, you could make them terser with ternary operators like I did with the return, but readability should be prioritized :) word = ''; // assumes `word` is empty string, could use `+=` if preferred if (number % Fizz === 0) { word = 'Fizz'; } if (number % Buzz === 0) { word += 'Buzz'; } return word ? word : number; // '' is falsy value, if word was not modified the number will be returned, I think this is an ok case for ternary operator and doesn't hurt readability much
sorry I meant that the functionality being added to the mouseover on the background buttons must be added to the other buttons on the page after as well. And yeah I believe we havent learned addeventlistener only having the calls in the code.. Thank you bro sorry for confusing you
&gt;LJSON adds pure functions to JSON and nothing else - no primitive is available. That means you can't use mathematical operators... Eh, what. Math operators (excluding those with assignment) *are* "pure functions" but with a different syntax. That said, I don't care either way because I cannot imagine any use for it.
Well, I would not recommend to someone to use TypeScript before mastering JavaScript, but once you have mastered JavaScript I think TypeScript it makes your life much easier in many ways. Babel.js also makes your life easier but TypeScript has even better development tools. TypeScript was born as a typed superset of JavaScript, this is JavaScript + types and nothing else, and as long as it stay like that I will be happy with it. If TypeScript starts to become a superset of many things in top of JavaScript I will not like it.
TypeScript? Sorry JavaScript is good enough. There is no reason to code JavaScript as if you coded in Java or C#
Goddammit, you beat me to it xD
Prototypal inheritance is still OOP. Using constructors is still using prototypes.
https://github.com/google/ios-webkit-debug-proxy/ to the resque
Did you look at the puzzle? Im just curious. also I've heard trello is a great place to work. It seems really cool and I love their products. So I wouldn't mind doing a fun puzzle for a job interview. It was easy enough anyway. 
"Master" would be when you feel confident enough about thigns like prototypes, scope, hoisting, etc
&gt; What if you can't ask? Then you apparently don't go with the guess. 3 separate strings. &gt; What if you're the author of the spec Then you either know the answer or you have to do more research. Once you have the answer update the spec.
Next thing I would do is learn about code quality. There are books on the subject... I think fundamental knowledge is important and it will keep your focus narrow as your improve as a programmer.
I did - briefly. There are lots of "puzzles" out there, the most extreme being a language based on Javascript that uses only brackets and numbers - and a transpiler that converts any Javascript program into that restricted version of Javascript. Of course, "Hello World" already is pretty big. Not all people are the same, and we go through phases. Anyone who in their youth doesn't play around with stuff is suspicious to me. A long time ago when there were only 8bit computers when I didn't have an assembler (i.e. the software that translates mnemonics to actual hex code) I wrote my assembler code on a sheet of paper, translated it by hand and then entered sheets and sheets of hex code. But I've been there, done that. And occasionally I *do* have to debug some real world stuff that is really tough. No problem. But *to me* it's a complete waste of time to have to "prove" that I can do that - for the reasons I gave. Not all people are or should be the same, I don't want to work for "puzzle-lovers" but don't expect everyone else to follow. For me IT is a *tool*. My view is on other things, like making sure that the guy(s) taking over from me - as is inevitable as a freelancer - never has to call me or, worse, curse my existence. So *not* leaving anything behind that looks like a "puzzle" is very important to me. And when I do use the inevitable hack I make sure I add plenty of inline comments about the reasons - which includes the "business reasons". When you know the guy you inherit a hack from did it because management refused to allow him to refactor the code it's easier to accept. Can you explain what you are doing - and *do* you explain it (in code comments) is a much more important criterion to me compared to an ability to "solve puzzles" or come up with clever algorithms. And as I said, how quickly you can get fresh and readable and maintainable code from a spec is much more important to me than refactoring bad old code. The fear of just starting from scratch is way overblown - once you know exactly what you want it is very easy. The hard part of coding is finding out what you want. When you rewrite code you never start from zero more like starting from 90%. 
i was referring to importing a 3rd party lib into some module, and that lib has a factory method at the top like the one on [this](http://davidbcalhoun.com/2014/what-is-amd-commonjs-and-umd/) page half way down (under the UMD heading). Some 3rd party libs that still have a block of code like that at the top of their page (particularly ones still focused on the browser). I've run into naming collisions on a few. The error, and this is one of my problems with webpack, is generic and unhelpful - as searches turn up a wide range of results. only to find the 3rd party lib has a name collision in that factory method, that I can do nothing about. Sure a good answer is, "that lib has a bug, you should file an issue" and you're right. But why can browserify compile it fine, and not webpack without extra definition in your loaders to explicitly ignore AMD crap in libs? edit: its not really a big deal. but as a heads up to anyone reading that comes across... explicitly ignore AMD stuff helps sometimes :)
Both will work, I'm using the Chrome Dev Channel with some harmony features but I believe that when you target ES6 it won't transpile features like const and let, but generators for example assuming your environment supports them. So this probably allows you to run babel against your compiled ts source file. If you enjoy using the TS tools and IDE/text editor support it may be a great workflow for you.
Oooh! That's why everyone on the Internet keeps saying Blaze It whenever this comes up. I was so confused.
420
Typescript compiles into ES5. You could write Angular modules in ES6 syntaxs then transpile them to ES5 with Babel.
Nahh he doesn't need loops, just use tail recursion. ;)
&gt; That said, I don't care either way because I cannot imagine any use for it. In-game scripting. I am hobby game developer and something like this might help with enabling scripting events in-game.
&gt; Fuck MooTools. 
I agree with a lot of what you said here even as a "young" one myself. I also believe that code maintainability and writing new code fresh that is clean is more important than puzzles. I believe any code which can confuse the reader must be commented with relevant information to help them understand the hack. I think that writing new code that can reduce the complexity of an older system is far better than being able to understand bad code. Being able to read code and think outside the box, although important, does not by itself make you a worthy candidate. I believe that kind of thing is just a filter, to see if people are knowledgeable enough about the language and browser. Maybe they are open to people who do not have the same priorities as you, and will condition/mold them to learn good design patterns and how to write good code. I personally would prefer to work for a company that chooses code maintainability and cleanliness over clever code, and definitely over hacky code. 
It's not possible in general to tell if any program terminates but if you add certain restrictions (i.e. when you are allowed to do recursive calls) to a programming language you can create a language where every program does terminate (see Coq, Epigram). I'm not sure how you could easily add such restrictions in this case to JavaScript but would be interested to know more.
As pointed out by others here, the parser currently in use is just eval... I would strongly recommend against using this in any production code. Seems like you may have the opportunity to take your ideas and apply them to this model though. 
`("foo" || "bar")` yields the first "truthy" value, so if you're actually using strings you're statement is equivalent to just: thing == 'foo' In other words, it's only ever checking to see if `thing` is equal to the first truth value of `foo` or `bar`, it's not checking both.
Edited.
I haven't got the time to go through that article man sorry! I've had some naming issues but nothing that can't be solved with webpack's aliases http://stackoverflow.com/questions/31313088/webpack-loader-aliases or https://github.com/webpack/webpack/issues/109 got some examples of what I'm talking about, not sure if that's what you need!
thing == ("foo" || "bar") compares 'thing' to the boolean value evaluated by ("foo" || "bar") thing == "foo" || thing == "bar" compares thing to "foo" and if truthy, stops, otherwise it compares thing to "bar", and returns true or false. It would be more compact if you could write it the other way, but then how would you write it when you *wanted* to compare 'thing' to the boolean evaluated value? 
K... How is this? http://codepen.io/anon/pen/Lpjqdy
Ha ha! This would be the best thing for webworker :D I will pass stringified function with callback to my webworker that will do anything I want in background! :D Or... Not. I need to test this thing out.
~~so ignoring all the stuff in that link you edited and simply going to a sign up page in google this is what i'm seeing. perhaps this is your issue. (edit: ignored bc it took me to a voice page that apparently i was already signed into)~~ ~~first thing is `document.getElementById('Passwd-hidden');` returns `null`... so check that you're targeting the right field. inspecting the page i'm looking at i see a `Passwd` input, but not `Passwd-hidden`. it looks like it creates that hidden field after input. otherwise if i use `Passwd` everything works as expected. the click fires. and i get an error bc obviously "username"/ "password" aren't valid creds. (but this is expected)~~ edit... nope ignore all that. used a browser that isn't signed into google, and used your link.. `Passwd-hidden` exits... digging deeper
Can you relax? I have done the majority of the work myself and am not registered elsewhere for assistance. Bye 
This is the 4th or 5th thread about this very topic. In the last one, I explained you step-by-step what your code has to do. I even explained how an infinite loop is done and I referred you to the MDN documentation of `break`. There is nothing else left except writing it for you. Since you started this thread once more, this is evidentially what you want. Read a book. Learn the basics. If you aren't interested in learning anything, pay someone to write it for you.
It sounds like there is a massive difference between London and NZ.. I taught my friend some angular and react for about a month and she landed a £38k job.. This is low in london though.. I have seen job specs which pay £130k. But £100k is quite common for senior js devs here ( with banking experience ). 
As explained by other commenters, `('foo' || 'bar')` returns the first truthy value, which is 'foo'. That's why `thing == ('foo' || 'bar')` won't work as expected. BTW, In such cases where I need to compare a variable to a **limited set of strings**, I use this code: `if( {'foo':1, 'bar':1}[thing] ) // do stuff`
If you're aiming to be a front-end dev, freecodecamp.com might be worth your while! I started it knowing 0 JavaScript and I have gotten pretty far into it. Definitely recommend it :D
upgrade your server? javascript isn't going to bottleneck your request speed
yep. Figured that out yesterday with some help. :)
Why are you hating on jQuery inside of done() but using it on both prior lines?
I'm sorry it was such a silly question.. These are SPOT ON suggestions and I'm very grateful you guys took a few seconds to reply!! These ideas are EXACTLY what I was after (especially bootstrap!!)
When I use jQuery to select the target element it slows down the content load.
You're using plain JS inside the done, but the done is just that...a callback for a completed request. The performance benefits would be negligible. 
This looks cool! Good idea. 
Really fantastic idea, I think I will throw this into a thumbnailing server.
Don't forget semantic ui!
That makes sense to me - why have the code look for it twice? I will implement that change. Maybe I can shave a millisecond or two off.
I remember something about reddit's own thumbnails having to solve a similar problem. It needs to be general, so "skin" color wouldn't work there, but they also only crop vertically, so that simplifies things a bit. Their approach is to center on the area of highest entropy, cropping out chunks of 10px at a time. https://github.com/reddit/reddit/blob/master/r2/r2/lib/media.py 
Lol shaving a millisecond is quite alot in JavaScript, or codin in general, the execution of that code won't take that long...
Very nice! Checked out the test page and most of them looked bang on. Definitely a huge improvement over taking the center of the image.
Is your skin colour definition smart? There are quite a range of skin colors.
Totally wrong article that completely misses the point. You absolutely should NEVER test private methods or private functionality. Private methods are implementation details - you should always be free to change implementation details without updating your tests, and your tests should aid you in refactoring this way. Exposing the private details to your tests is a complete anti pattern. It will lead to brittle tests that are unreliable and either lie to you or you have to continually remember to update when you update your implementations. It shows a lack of understanding in terms of what should be tested and where. Your public api is the ONLY thing you should ever test, and your tests should be written against expected behaviours, not written directly against methods.
Closer... http://codepen.io/anon/pen/OyjYmZ
I think testing private methods is useful in a narrow space between public module functionality and utility functions shared between different modules. Sometimes you write a local utility function that's not useful anywhere else but where you still want to document its requirements and detect when they are no longer fulfilled.
Rect Native is not a hybrid framework. Hybrid in the app context means web technologies combined with native capabilities (e.g. Apache Cordova, Phonegap, Ionic...)
Nope, there's no use cases when it makes sense to test private methods. If you're using that utility module in different places, it doesn't matter. If you only test the public api in all of those places, it will pass if the utility happens to do the thing it does correctly, otherwise it will fail. &gt;Sometimes you write a local utility function that's not useful anywhere else but where you still want to document its requirements and detect when they are no longer fulfilled. If that utility function is private it requires no documentation as it's an implementation detail. If it's not private then it requires its own tests. There's never a case where testing private methods makes sense unless you're *forced* to do it for some reason - for example if you have a private method that internally would do an api call to an external service - in that instance you woudn't so much test the private method as stub out a response, but mocks and stubs should also be rarely used. Two of the biggest mistakes testing newbies make - testing private implementation details and using mocks and stubs all over the place. I use almost no mocking in any of my unit tests - the main exception being when I need to call an external api or service.
We used that method when building a website for a girl band a few years ago. We had a load of photos for a photo gallery with varying aspect ratios, but they popped up in various other places with a square aspect ratio. So we used a thumbnail library that smart cropped based on entropy. I think it was sorl-thumbnail for Django. End result? Well it turned out that the algorithm has a bit of a foot fetish – a very large number of the photos completely ignored everything else to focus on the girls' feet. 
Thanks ! Now, can't find "Passwd-hidden" in your html code, which means it is added when you click "next". Considering "click()" executes async code that adds the ID, I guess the best you could do is wait until the page is updated with the new html and execute your code there. EDIT : Oh I just saw [another reply](https://www.reddit.com/r/javascript/comments/3ogclk/use_the_click_method_on_an_item_hidden_at_page/cvy7ynv) and find it quite appropriate.
wow that works exactly how it should in codepen, but for somereason if i create an html file and open it in browser it doesnt work, like if I direct copy into an html file and open it, the code doesnt work, but if i paste the same code back into codepen, it works.. so weird..any clue? dude ur a genious btw
&gt; http://philipwalton.com/articles/why-i-test-private-functions-in-javascript/ The article is wrong I'm afraid. He just doesn't seem to quite grasp it. He exposes his lack of understanding with this statement: &gt;If you were writing tests for HTML Inspector, you’d have to make a choice: &gt; * Keep the modules private, don’t test them at all, and hope the tests written for the public API provide enough coverage. &gt; * Expose the modules publicly by storing them on the HTMLInspector object and test their individual functions that way. If you are doing TDD, then 100% of the time the first case should be true. The point is that the private methods are *ALWAYS* implementation details - that's what makes them private. So the only reason to add a private method is to execute some logic somewhere that is required to produce the expected result in the public api. So if your private methods cannot be tested via the public api - it means they either don't work properly or can just be removed because they're not being used at all. There is never a reason to add tests for private methods. On some occasions you may need to mock out the result of an api call or something like that, but that's one of the very rare examples of a legitimate reason to expose your internal implementation details to your tests. Mocks should very rarely be used for that reason. His article misses the point.
You might want to use a different text input control than the standard WYSIWYG editor which will mess up your javascript, IF you are editing your template/document through the web UI.
definately working out of browser now, I see what you did, you created a var and a function for each event. My teacher taught DOM in 25 minutes and talked about was the window :( Turning those header resize buttons into a prompt now is my next step and then another prompt for the header font color, I also need to add a custom box for the background and regular font colors which use user prompts and a couple other things I wish I could hire you as a tutor do you do that kinda thing?
[Effective JavaScript: 68 Specific Ways to Harness the Power of JavaScript](http://www.amazon.com/Effective-JavaScript-Specific-Software-Development/dp/0321812182) - By David Herman. Even if you are a complete beginner to JS, this book has tremendous value.
if you wanna give me a shout out i'd appreciate it for sure. but no worries if not ... i like helping :) edit: i would recommend ditching the set timeout and go for something like (pseudo code): enterEmail( email ) { document.getElementById('Email').value=email; document.getElementById('next').click(); waitForPassword(); } enterPassword( password ) { document.getElementById('Passwd').value='password'; document.getElementById('signIn').click(); } waitForPassword () { // do something here that loops until Passwd-hidden isn't there anymore enterPassword( ... ); } // then somewhere when you're ready to start the login flow enterEmail( 'foo@bar.baz' );
I dont know whatever the appropriate tutor fee would be I guess, I never really had one before. I can give you a better scope of the idea of what I need to accomplish if you wanna pm me a contact I can add you wherever u need and show u my labs and we can discuss payment and such &lt;3
Testing private stuff is a code smell, and can be avoided easily ;) - If you have a complicated private function, then you should refactor it into a module (or just into a separate file, that *does* expose it as a public method), so you can test it. - If you want to inspect some private state (like the value of a variable that is not accessible from the outside), then you should test the changed external behavior of the module. That private state *does* modify the behavior (if doesn't, why does it exists in the first place?).
[removed]
Agreed, but the article is correct in that there are no private methods in JavaScript. It also mentions that private in JavaScript really just implies inaccessible, such as declared within a closure, which is also correct.
Yes, but I believe /u/CoryG89 intended that to show that the values you're checking for don't *have* to be strings with the array method.
always appreciate insight into mapping with D3. thanks.
Thing is... I like to stay anonymous on reddit here... How about just feel free to message me for help and I'll see what I can do! Maybe some reddit gold if I'm super helpful!
Is that what you have in mind ? http://jsfiddle.net/5w3jvca3/
I'm no machine learning expert (and I haven't poked at the source yet), but it seems like it's biasing the crop (x,y) based on detail and edge density, very interesting!
Thanks for the link, that's cool.
I never asked anyone to do it for me. I just wanted to understand the error message.
JavaScript is not the same as Java, you better asking it on /r/java or /r/larnprogramming
Basically, when listening for the scroll event on the window you need to store the scrollTop of the window and then compare it to the previous scrollTop. If the new scrollTop is less than the old one, your user is scrolling up. I'd recommend debouncing your event, too, because the scroll event can get fired a great number of times. Sorry for the lack of code, I'm on mobile, but that should point in the right direction.
Contribute to OWASP instead. Yes, I did see the footnote. https://www.owasp.org/index.php/Main_Page
Google "CORS". Your simplest solution is to set a couple of headers from each web-app, I forget exactly what they are. It's something like: Origin: http://my.app Allow-Origin: http://my.app
http://enable-cors.org/server_apache.html
IIRC, you have to sort-of apply it dynamically, or at least that is what I was looking at, vs wildcard allow everything. CORS was a little brain dead. You can also use a dns name that points to localhost, i.e. in /etc/hosts add 127.0.0.1 my.app and maybe you wont get as much grief from a hard coded localhost. I don't do apples, so maybe that is what you are saying you did. 
This is neither robust nor optimized, but you should be able to build from here. function logScrollDirection() { var previous = window.scrollY; window.addEventListener('scroll', function(){ window.scrollY &gt; previous ? console.log('down') : console.log('up'); previous = window.scrollY; }); }
 You'l need something like this if you're using a Node/Express server res.header('Access-Control-Allow-Origin', 'example.com'); res.header('Access-Control-Allow-Methods', GET,PUT,POST,DELETE'); res.header('Access-Control-Allow-Headers', 'Content-Type');
I think you should be able to do something like this: $('.element').sparkle().trigger('start.sparkle').off("mouseout.sparkle"); 
im so sorry, this is dumb of me but whereabouts should that go, in the html with a script tag or in the javascript file? I tried both but it's not doing anything, I suspect I'm not implementing it in the right place 
Well it seemed to require linking to a larger javascript file externally as well as a bit in a script tag inside the html, this is how it's setup for me at the moment (it's not working in the codepen for whatever reason but it does in my local setup) https://codepen.io/anon/pen/YyrPey
If you just added: $('.sparkly').trigger('start.sparkle'); After the first code you had already, I think that should do the trick? So it would look something like this: &lt;script&gt; $(document).ready(function() { $(".sparkly").sparkle({ color: ["#6ec5fd", "#ba6dfc", "#f7edfb"], count: 550, speed: 0.9, minSize: 0.5, maxSize: 8, overlap: 20, }); $(".sparkly") .off("mouseout.sparkle"); $('.sparkly').trigger('start.sparkle'); }); &lt;/script&gt;
You really shouldn't need to or be changing anything in that file. It's a bit difficult to trouble-shoot the codepen code since it won't be structured the way you'd have it locally. I'm *fairly* certain something along the lines of what I showed you should work if everything else is properly set up. [Here's a very minimalistic jsfiddle](http://jsfiddle.net/rbf09ayp/) as an example, the relevant jquery code is after line 420, with the sparkle script code above it, straight from github. You should be able to just put that small part inside some &lt;script&gt; tags if you've loaded jQuery and the sparkle script somewhere else on the page, which it looks like you're doing based on your codepen code.
oh hmm I see what you mean! I keep trying to do it just in the html part but every time I put the mouseover back in on the big one it comes back again. I It's not a class where we're marked on the javascript, only the css/html so I don't think it'll be a huge issue, in fact I'm not even sure she'll notice if I've modified the bigger one to make it go. If I get the time, I might rebuild that page from scratch, ensuring I get it going like that to start with and then add everything else after, since I think it might be that some of my other content is conflicting with it somehow. 
I'm not sure if this is the answer you're looking for, but if you're using JavaScript, you don't have a choice: the `class` keyword is still just sugar for Prototypal Inheritance. But apart from that, it is really best practice to avoid creating class hierarchies when at all possible. Seeing that JavaScript classes are plain objects, you can add any functionality which is shared across your classes by passing the classes to plain old functions. [Higher-order components](http://jamesknelson.com/structuring-react-applications-higher-order-components/) are a React-specific example of this problem, but the general process applies to Vanilla JS too. The only time I'd really consider using `extends` is when there is a single base class which most every class in your application will extend - `React.Component` from React is a good example.
Ooh, clever. I like that.
Your last function there shouldn't do anything, because you've removed everything in the array. Try it without the first function call. Edit: sorry my bad. Been up for ten minutes. I'll check an example when I get to work as I'm sure I did this recently. Edit 2: I did do this recently, and my solution will absolutely, under no circumstances, actually work. I've just animated them out in mine, they're still technically there. 
Here's that code, properly formatted in Markdown: var treeData = [ { "name": "Top Level", "parent": "null", "children": [ { "name": "Level 2: A", "parent": "Top Level", "children": [ { "name": "Son of A", "parent": "Level 2: A" }, { "name": "Daughter of A", "parent": "Level 2: A" } ] }, { "name": "Level 2: B", "parent": "Top Level" } ] } ]; Also, I suspect that you meant the `null` literal for the top-level node's parent, rather than the string `"null"`; anyway, it looks like you'll make an array with a single element that is an object, with `name` property equal to `"Top Level"` and a null `parent` property, and a property named `children` that is itself an array of objects with `name` and `parent` properties and possibly also `children` arrays... This suggests that once you figure out how to make the BST abstractly, you should first make the parent node, then populate its `children` array with the nodes below it, and continue until you've built the tree.
At first I was expecting a couple iterations beyond the work in [JSON3](https://bestiejs.github.io/json3/), but instead it's a hack job by someone who doesn't understand why JSON was designed the way it was designed. (BTW, JSON3 is a drop-in replacement for Douglas Crockford's own reference implementation, JSON2, and it even patches up broken native implementations of JSON and does not use `eval` or regexes.)
JSON explicitly skips over functions when serializing values because in general it is not safe to turn the string representation of a function back into a function (it also skips over `undefined` and symbol values, because most recipient languages don't have an equivalent for symbols and do not have an undefined value separate from `null`).
ah, you know I may have gone into the big one and accidentally have messed with it because I just repasted the whole of it back into the external file and now it's working as you said :'D my bad but thank you again!
Oh nah I don't think he was from NZ, just another redditor who lives in London. And just like the other comment in this thread, after a month of tutoring from a professional developer their friend got a 38k pound job too. Have looked into living costs of London, doesn't seem like it's as much money when you live there, remote work could be pretty sweet though!
I think it's a hack job that's purposefully ignoring Crockford's design decisions and focusing instead on actual uses of json in the wild (which reminds me of jslint vs jshint, although I suppose that's not exactly the same situation.) It's not for every use, or everyone, but it's useful for some things. In the end, this is about using a subset of javascript syntax for data representation, versus a slightly larger subset of javascript syntax for data representation. Network effect is the only meaningful reason to stick with the former, and it's certainly a good reason for many cases. I don't think it means one format is intrinsically better than the other. 
Are you using a framework? JQuery? How do you get the subtotals when a new number is typed in the input field? It must run some function to write those values. It could simply run a calculateTotal() function while it did that. The best thing to do would be to write a codepen or plnkr with an example so we could help.
http://stackoverflow.com/questions/17645478/node-js-how-to-read-a-file-and-then-write-the-same-file-with-two-seperate-functi
This is the HTML Code: &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt; &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt; &lt;head&gt; &lt;title&gt;Work Requirement 4 - Shopping Cart&lt;/title&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt; &lt;link rel="stylesheet" type="text/css" media="screen" href="css/style.css" /&gt; &lt;link rel="stylesheet" type="text/css" media="screen" href="css/cart.css" /&gt; &lt;script src="js/cart.js"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id="header"&gt; &lt;h1&gt;&lt;a href="index.html"&gt;Work Requirement 4&lt;/a&gt;&lt;/h1&gt; &lt;p&gt;Shopping Cart&lt;/p&gt; &lt;/div&gt; &lt;div id="content"&gt; &lt;div id="main"&gt; &lt;h2&gt;Shopping Cart&lt;/h2&gt; &lt;p&gt;Please review the contents of your basket and click "Go To Checkout" when you are happy to proceed.&lt;/p&gt; &lt;table&gt; &lt;tr&gt; &lt;th&gt;Description&lt;/th&gt; &lt;th&gt;Each&lt;/th&gt; &lt;th&gt;Qty&lt;/th&gt; &lt;th&gt;Subtotal&lt;/th&gt; &lt;/tr&gt; &lt;tr class="item"&gt; &lt;td class="description"&gt;&lt;a href=""&gt;&lt;img src="images/red-shirt.jpg" alt="" /&gt;Red T-Shirt&lt;/a&gt;&lt;/td&gt; &lt;td class="price"&gt;$15.00&lt;/td&gt; &lt;td class="qty"&gt; &lt;input type="number" value="1" /&gt; &lt;a href="" class="remove"&gt;&amp;times;&lt;/a&gt; &lt;/td&gt; &lt;td class="subtotal"&gt;$15.00&lt;/td&gt; &lt;/tr&gt; &lt;tr class="item"&gt; &lt;td class="description"&gt;&lt;a href=""&gt;&lt;img src="images/tropical-shirt.jpg" alt="" /&gt;Tropical T-Shirt&lt;/a&gt;&lt;/td&gt; &lt;td class="price"&gt;$25.00&lt;/td&gt; &lt;td class="qty"&gt; &lt;input type="number" value="1" /&gt; &lt;a href="" class="remove"&gt;&amp;times;&lt;/a&gt; &lt;/td&gt; &lt;td class="subtotal"&gt;$25.00&lt;/td&gt; &lt;/tr&gt; &lt;tr class="item"&gt; &lt;td class="description"&gt;&lt;a href=""&gt;&lt;img src="images/black-sneakers.jpg" alt="" /&gt;Black Sneakers&lt;/a&gt;&lt;/td&gt; &lt;td class="price"&gt;$35.00&lt;/td&gt; &lt;td class="qty"&gt; &lt;input type="number" value="1" /&gt; &lt;a href="" class="remove"&gt;&amp;times;&lt;/a&gt; &lt;/td&gt; &lt;td class="subtotal"&gt;$35.00&lt;/td&gt; &lt;/tr&gt; &lt;tr class="item"&gt; &lt;td class="description"&gt;&lt;a href=""&gt;&lt;img src="images/black-jacket.jpg" alt="" /&gt;Black Jacket&lt;/a&gt;&lt;/td&gt; &lt;td class="price"&gt;$40.00&lt;/td&gt; &lt;td class="qty"&gt; &lt;input type="number" value="1" /&gt; &lt;a href="" class="remove"&gt;&amp;times;&lt;/a&gt; &lt;/td&gt; &lt;td class="subtotal"&gt;$40.00&lt;/td&gt; &lt;/tr&gt; &lt;tr class="item"&gt; &lt;td class="description"&gt;&lt;a href=""&gt;&lt;img src="images/sunglasses.jpg" alt="" /&gt;Sunglasses&lt;/a&gt;&lt;/td&gt; &lt;td class="price"&gt;$15.00&lt;/td&gt; &lt;td class="qty"&gt; &lt;input type="number" value="1" /&gt; &lt;a href="" class="remove"&gt;&amp;times;&lt;/a&gt; &lt;/td&gt; &lt;td class="subtotal"&gt;$15.00&lt;/td&gt; &lt;/tr&gt; &lt;tr class="cart-summary"&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;th&gt;Total:&lt;/th&gt; &lt;td id="total"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;p&gt;&lt;a href=""&gt;Continue Shopping&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=""&gt;Go To Checkout&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;div id="navigation"&gt; &lt;h2&gt;Navigation&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="slideshow.html"&gt;Slideshow&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="cart.html"&gt;Shopping Cart&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id="footer"&gt; &lt;p&gt;All content, unless othewise stated, are &amp;copy; 2014 &lt;strong&gt;Your Name Here&lt;/strong&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt;
This is the javascript code: // when the page finishes loading, run setupCart window.onload = setupCart; function setupCart() { // Get a list of inputs found in class="qty" table cells var qtyInputs = document.querySelectorAll( '.qty input' ); // Loop through the list of inputs for (var i = 0; i &lt; qtyInputs.length; i++) { // Run updateQty when interacting with each input qtyInputs[i].oninput = updateQty; } // Get a list of all links with class="remove" var removeLinks = document.querySelectorAll( '.remove' ); // Loop through the list of links for (var i = 0; i &lt; removeLinks.length; i++) { // Run removeRow when clicking on each link removeLinks[i].onclick = removeRow; } // Update the final total updateTotal(); } function updateTotal() { // Get a list of all subTotal cells var subtotalCells = document.querySelectorAll( '.subtotal' ); var qtyInputs = document.querySelectorAll( '.qty input' ); var price2 = document.querySelectorAll( '.price' ); // Set a variable to keep track of the final total var total = 0; // Loop through the list of subTotal cells for ( var i = 0; i &lt; subtotalCells.length; i++ ) { // Get the number value inside of the cell var subtotal = subtotalCells[i].innerHTML.match(/[0-9]+.[0-9]{2}/); // Calculate the new final total subtotal = price2*qtyInputs; total += Number( subtotal ); } // Display the final total in the total cell document.querySelector( '#total' ).innerHTML = '$' + total.toFixed(2); } function updateQty() { // Get the quantity value from the input var qtyInputs = this.value; // Is the quantity less than 1? if (qtyInputs &lt; 1){ qtyInputs = 1; } // Set the quantity to 1 // Is the quantity greater than 10? if (qtyInputs &gt; 10){ qtyInputs = 10; } // Set the quantity to 10 // Display the updated quantity in the input this.value=qtyInputs; // DOM navigation to locate price cell // DOM navigation to locate subtotal cell // Get the number value inside of the price cell // Calculate the new sub-total // Display the sub-total in the subTotal cell // Update the final total } // FIT9027 only function removeRow() { // DOM navigation to locate the row for this link // Remove the row from the parent table // Update the final total // Prevent link click from triggering navigation } 
This is a fantastic module. It should actually be in jasmine.
Thanks! Yes, I agree. There is actually a GitHub issue for it on Jasmine that was closed/rejected.
Figure out how you would emulate a PHP class/subclass in Javascript without using ES6 syntax. That should explain the difference between prototypal/classical inheritance. What can you do with your Javascript "class" that you can't do in a PHP class? If you've got no idea where to start, just get familiar with Javascript objects and then read up more on how they work. (see: how most everything in Javascript is an object. Try editing the properties of the document/window functions and see what happens.) [Here's an older link that better teaches what's going on.](http://www.amirharel.com/2010/06/11/implementing-multiple-inheritance-in-javascript/) 
Thanks for writing the article, but I'm strongly of the belief that private functions (or w/e private stuff you have) don't need to be tested. It can be tested by way of testing the public functions that use it. Given this, I find it hard to justify any explicit testing of private functions as that couples the tests with implementation details.
Kind of related, not long ago we had to build a web component that could render shapes defined by the user (by clicking and dragging). Our initial question was: should we use Svg or Canvas? Each one with their pros and cons; ended up using Svg because of event handler goodness. However, at a later stage there was a need to draw Svg on top of canvas-generated images. We struggled a lot with this trying to make it work consistently across browsers. We failed and ended up having a second renderer for this use case, which in similar fashion as OP's post, has much less code. All in all, after having the initial implementation in Svg, making a transition to Canvas is quite painless. 
I agree. Under the hood, JavaScript always and only has prototypal inheritance. What makes things more complicated is how constructor functions are used to set up chains of prototypes. In ECMAScript 5, they are the mainstream way of doing inheritance, though. And in ECMAScript 6, you get classes as syntactic sugar for constructors that hides the complications well enough that you should never have problems in practice. ES6 classes were created with traits (to be added to the language later) in mind. Thus: * Use inheritance between classes sparingly. * Given that it will be a while until mixins or traits exist natively in JavaScript: Research techniques for implementing them in ES6. Use them for reusable class fragments. Interestingly, prototypal inheritance and (truly) class-based inheritance are not drastically different, conceptually. In prototypal inheritance prototypes roughly correspond to classes [1]. The main differences are: * Class-based inheritance: There are two entities (classes and objects) and two kinds of relationships between entities (the instance-of relationship between an object and a class and the subclass-of relationship between classes). * Prototypal inheritance: There is only one kind of entity (the object) and one relationship between entities (the prototype-of relationship between objects). However, the conceptual difference between subclassing and instantiating still exists. One advantage of prototypal inheritance is that you can start with objects and introduce abstractions later. In class-based languages you normally need a class to produce an object, even if it is just a single one (hence the singleton pattern, as a work-around). [1] http://bibliography.selflanguage.org/organizing-programs.html
[ob xkcd](https://xkcd.com/927/)
... which is, in all senses of the word, 'private'. You can have 'private methods' by using Symbols. /How/ something is made private is language- and implementation-specific, but it's irrelevant because the upshot is the same: it's an implementation detail. 
I try and watch projects on github that are trending this month... https://github.com/trending?since=monthly
This has officially been adopted. It's now known as WebScript. Please everyone make changes accordingly. 
Alright I concede it's not possible to agree on any one standard. Is there at least a website showing which technologies are on their way in and which ones are on their way out backed by data?
&gt; It bothers me how similar most client side JavaScript apps are (from an end user perspective) In all seriousness this seems to be the wrong way to look at it. Of course it's all just generating a mishmash of webtechnologies, just like all programs can be executed by every turing complete mechanism, but that doesn't mean that the developers will enjoy doing so all the same. And sadly, this also is largely a matter of taste and also a cultural issue. Never underestimate the importance of cultural factors in development ( see e.g. [Conway's Law](https://en.wikipedia.org/wiki/Conway's_law))
[Eat feces, a million flies can't be wrong](https://en.wikipedia.org/wiki/Argumentum_ad_populum)
Hey There are various tools that will deminify javascript, see: http://stackoverflow.com/questions/7634890/how-to-deminify-javascript But be aware these can't fix the variable names, so the code still may not make much sense. Are you sure the original version of your code is not available somewhere?
obvious troll is obvious
no u didnt
Nah dawg, it's all about WebularWS now.
There's a new thing out called Google. You should learn to use it. Your next training diaper will be Wikipedia. Let us know when you're done.
Where to begin... There is something of a religious war in JS around the subject of functional programming vs OO. I too came to JS from PHP and I too immediately tried to find an equivalent class construct to organise my work. Then I worked in a company with a strong FP culture (Clojure on the back end, functional javascript on the front). There was a lot of eye-rolling etc as I tried to establish a class hierarchy in our JS code. It all seemed very ivory tower to me at the time, and so I thought I would accept the challenge and get to the bottom of this FP bullshit. Cut a long story short, I'm now pretty strongly biased towards FP. (Ironically, we had an html server written in PHP/OO and by the time I left it had become exactly what anti-OO evangelists describe, an unmanageable mess of class hierarchies with brittle base classes.) There's arguably a cultural/cognition issue with OO in that once learnt, all solutions are immediately framed as object hierarchies. Why? Why conflate state and behaviour? You've already made a really big decision about your design without even seeing the problem. (There's a counterpoint to that in that FP proponents are often blind to how unreadable dense compositions of partially applied and curried functions can become.) My biggest complaint about OO (apart from inheritance) is that it can promote weird, side-effect heavy code. Methods are often (abused and thus) required to be fired in a certain order to shimmy the internal state of a thing into place. OO codebases just seem to get unwieldy and muddy over time. I've written sizeable JS apps on large teams without touching a single class (except for those forced on us by 3rd party libs) for the last 3 years (one of which involved replacing a Backbone app, with yet another towering class tree). I'd really recommend trying to think outside the OO box for a while - you might find yourself equally reluctant to get back in it... For what it's worth, I'd recommend reading this: [Javascript Allonge by Reg Braithwaite](https://leanpub.com/javascript-allonge). I love this author's work/[talks](https://www.youtube.com/results?search_query=reginald+braithwaite) - because he refrains from evangelising, and embraces both paradigms. He also raises the fact that FP, while pure and clean, does not come for free...there are significant cognitive overheads, and JS is not (currently) optimised for some FP fundamentals...(tail recursion, immutability..)
I know about origin of javascript word, i just wonder why we STILL use it
Completely agree that class hierarchies should be avoided in Javascript, seeing as how it's a prototypal-based OO language and not class-based, and thus classes don't even exist. The classes you see when you google "object oriented javascript" are just functions which end up creating a vague link to its children objects. That's prototypal architecture - not class architecture. I think that the prototypal nature of javascript is something a lot of developers still need to understand. Myself included a while back, so I wrote a blog post over it - [link in case anyone is interested](https://thesocietea.org/2015/08/prototypal-programming-in-javascript/)
The faces change but the game remains the same
The problem with webscript is that JavaScript is not exclusively used in the web.
Personally, I'm a big fan of reactjs which I think is clearly the biggest thing since jQuery but with a conceptual clarity yet unreached in popular js library. edit: Conceptually, jQuery wasn't that bad. It's architecture clearly follows the needs of a progessive enhancement approach to web development, find things and do things to them. The often unholy mess of spaghetti code it begot however..
select all DOM elements matching the class `subtotal`. Should return an array. Loop through array and calculate total. The details of that, I'll leave to you. as this screams homework assignment
[Here's](https://www.youtube.com/watch?v=wfMtDGfHWpA) a quick youtube vid explaining where inheritance can break down and how that problem is solved elegantly with composition. This really helped me understand why you should prefer composition to hierarchy.
You might like my other post then http://www.maori.geek.nz/tips_tricks_and_tools_for_creating_and_working_with_maps_in_d3_js/ :)
No, it's not possible, and that's a good thing. The day everyone agrees on one way to do something is the day innovation stops. Technology marches forward, people come up with better ways to do things, those new ideas gain traction and become popular, and that's the way it should be. https://www.youtube.com/watch?v=DFP6UDgVJtE
Unfortunately, you can't rely just on popularity alone. But it is a good starting point. I work as JS devloper professionally for last four years and I want to write apps exclusively in React. For the next few years. The main reason why it is so good is the code modularity. When I started writing Node.js modules with CommonJS, I discovered a world where it is possible ANYTIME ANYWHERE take any piece of code and put it into a separate module. Such modularity was unheard of in my C #/JAVA. Breaking a complex app into more modules is always a pleasure. Keeping it simple. This modularity however, does not work in a browser with UI code. That is, until you do not have a framework that allows you to define your own HTML tags. Which was what Angular did way before React, but it forced a bunch of other horrible things onto you along the way. Unlike Angular, React gives you only the UI code modularity and doesn't force you anything else. Modularity makes breaking a complex UI into small pieces a thing of beauty.
It is an old article but I learned a lot from it so I decided to share it for anyone that is looking for writing memory efficient code and boosting performance. 
Thanks - that link was very helpful.
The title might as well have been left blank. The other titles were much better: https://www.reddit.com/r/javascript/duplicates/3opoj5/the_more_things_change/
Thanks! From that video, it looks like he's using Object.assign to add 'traits' to an object. Is that correct? If so, that makes a lot of sense to me.
But they're not doing functional programming in most cases in this argument. They are calling functions to add methods to objects. Effectively doing inheritance or multiple inheritance, with a more verbose syntax.
The piece causing this is: $(cascadeDivs[i]).animate({ opacity:0.0, left: "+=25", top:"+=25" },resetDiv(cascadeDivs[i])); If you think about what's happening, you're executing resetDiv(cascadeDivs[i]) and passing its result to animate (undefined, since resetDiv has no return value). If you look at the API documentation for jQuery animate, you can see that your callback's "this" is set to the DOM element. You can take advantage of that with: $(cascadeDivs[i]).animate({ opacity:0.0, left: "+=25", top:"+=25" },resetDiv); ... function resetDiv(element){ element = element || this; // remainder of resetDiv }
The problem is that you're calling the function immediately using the parentheses `()` We've all been there
Which parenthesis? 
&gt; resetDiv(cascadeDivs[i]) This runs the function, setting the callback to the return of the function. You'd want it to be just resetDiv to pass a reference to the function
I figured out what I was doing wrong - I was attempting to add the markers in the success callback of an AJAX request. Moving that out into its own function now sets and clears the markers as expected.
you're calling the function `resetDiv` with the argument of `cascadeDivs[i]`. You want to pass in the function object. Open up the console in your browser and try this: var foo = function() { return 'foo'; }; console.log(foo()); console.log(foo);
You're using the result of resetDiv(cascadeDivs[i]) as your callback, when you want to be using the function object resetDiv as the callback.
It's quite possible and easy only if you consider memory leaks to be memory that can be accessed, but is not used. If you consider a memory leak to be a lost reference to memory, then memory leaks only happen because of bugs and limitations of the garbage collector.
you can set a parameter without calling a function with bind: resetDiv.bind(null, cascadeDivs[i])
That's not correct. You can lose references to memory in memory-managed languages without the cause being a bug or limitation in the garbage collector.
Here you are returning the allocated memory. I'm sure you know the intention behind my statement, and you are arguing semantics.
Thanks, very useful.
yea the way javascript works though is if you do `funca( "test", funcb() )`, funcb is run first and the result assigned a temporary value... so func so you have to do a work around like @jokebutt posted.
I see. I almost have it fixed! 
Not only are these awesome - but they're accompanied by the explanations on the techniques used to achieve the effects (including full source). What can I say? Really cool shit.
I think that you can lose references to memory in memory-managed languages. Example: var x = {}; x = {};
Why not? Why change a language's name? Should we spend millions of dollars and lots of hours in marketing just to change Ruby's name because people might confuse it with R? Should we change C++ and C#? It seems your only argument for spending a lot of money and time for almost nothing is that people completely outside of the programming world *might* mistake those two languages.
I wrote this based on my own uses, let me know if anyone finds any issues!
thx - forgot about this. a fix would be prepopulating the results array with undefined and wrapping the actual results in functions (to tell undefined results, from pending promises).
The title *memory efficient coding* is sooo misleading. While its educational to understand how garbage collection generally works in JavaScript it is absolutely implementation specific. Honestly, you have absolutely no idea how much memory you are using in JavaScript if you are not using a memory profiler. It looks like Edge has a memory profiler natively available from its developer tools. Since this is a native tool supplied by the browser it is more likely to be complete. Even still... you don't really know because many browsers leak memory (yes, even still in this modern age) with regard to JavaScript execution, which means the browser doesn't know how much memory its using or what to reclaim. Here is a link about an upcoming memory profiler in Chrome and some of the challenges: https://docs.google.com/presentation/d/1soWvmqxWuZQ_ZchvPZFgf5frAQBBlq5f2tJTuDDPZI8/preview If you need a memory profiler in Chrome right now there is this: https://github.com/paulirish/memory-stats.js Here is another good article about GC: http://sealedabstract.com/rants/why-mobile-web-apps-are-slow/ If anybody tells you that inheritance in JavaScript conserves memory they are probably lying to you and certainly don't have evidence. 
Wish they would just fix all the BS in JS so you didn't have all these unintuitive gotchas.
I can't see any problem. Take a look [at this code](https://gist.github.com/tweinfeld/c385a09b3be53a70eb23) for a similar code that sends out ordered results and doesn't depend on Underscore.
The post opens with this sentence: "In November 2011 he made a speech "Youtube", during the speech he talked about what JavaScript programming style is." and recommend watching it instead of reading the post. Here you go: https://www.youtube.com/watch?v=taaEzHI9xyY
[Off-topic] The page works perfectly fine without JavaScript. Why is the content hidden? Showing it via JS only makes the page appear to load *much* slower. It shows a blank page for several seconds. Don't do that. Faster is always better. The document and CSS are done in less than 1.5 seconds. I could have started to read the article at that point. If you want your page to appear fast, you have to start displaying something as fast as you can and then you have to fill the viewport as fast as you can. Displaying nothing for a couple of seconds is the worst thing you can do. If you display nothing for 5 seconds, many mobile users will already have abandoned your site. So, don't fucking do that.
Thank you. I don't know about the first method because I will be returning a lot of information so I feel if I am loading all of that it may slow down the page too much. The second method seems the better route for me. But my javascript experience is a limited. Do you know any links with a similar example. If not I'll just google and see what I can find to help me out
That is hard to believe. What is the code you wrote using jquery?
Inheritance as opposed to...?
It worked, thanks a lot.
Inheritance as opposed to instance composition or factorying
Thanks, I thought the article was informative for a beginner, but your comment is a great follow-up.
Basically, don't keep references to things you don't need, because they don't get to be garbage collected.
Yes exactly, which is why I specified *instance* composition - composing properties and methods onto an object "instance" - as well as factorying as a separate option, which is acquiring a new object instance from an object designed to instantiate other objects. Definitely not identical patterns :) Thanks for clarifying that for readers, there's lots of misinformation out there and my initial comment was ambiguous and could be seen as listing two names for the same practice. edit: added (my) definition of factory too so no googling necessary
If I'm not misunderstanding it, asm.js requires your app to do its own memory management, limiting its usefulness to low level languages like C. There's no DOM access either, so you're also limited to specific use cases. I think [this goal](https://github.com/WebAssembly/design/blob/master/GC.md) is the one that will make things interesting. Unfortunately I think it's a long way off. 
Do you avoid the pattern of adding functions to the prototype property? What do you do instead, store the function in a closure for reuse? Create a new copy of the function for each instance constructed?
And don't do anything stupid with `setTimeout`.
I hadn't dug into the implementation but it's definitely disappointing to hear it's a reinvention of multiple inheritance. Having read the overview I imagined they were implementing it exactly as you describe at the end of your comment - trait-based prototypal single inheritance - as it's how I do things currently and I was stoked to see it approaching a standard. Thanks for the in-depth answer, have you seen any overtures in the right direction? I've got my own handrolled solution as I mentioned but I haven't yet seen a library that doesn't try to just *do too much* with classes, and of course none of the major frameworks out there seem interested in shying away from classical models.
Since that won't ever happen, [we'll have to use a new language](http://elm-lang.org/).
Sure, easy. Write a program that gathers all the symbols matching the variable patterns (`_0xabe9`, `_0xa401x1` etc), for each one pulls a unique name from a set of identifiers ("cloud", "dog", "tent", etc) and replaces all instances of that symbol with the unique name (keeping track of the already-used symbols of course). Now you have named variables instead of hex ones...much easier to read the code. If you want to go further, convert all the \x42 crap into ascii (`String.fromCharCode(parseInt('3b', 16))` for example). Should get you some of the way there.
It's obfuscated, not encrypted. The thing at the top is an array which contains 890 strings in hex notation. Start by replacing all instances of _0xabe9[...] with its corresponding string. Then minify and pretty-print. Rename functions once you understand what they do. It should look fairly reasonable fairly quickly.
Thank you very much 
 $(cascadeDivs[i]).animate({ opacity:0.0, left: "+=25", top:"+=25" }, function() { resetDiv(cascadeDivs[i]); }); That's how you'd have to change what you have. But, as /u/JokeButt mentioned, you should just use the simpler, `this`-based form.
Thanks a lot for your reply, I'll have a read up on eval. Security isn't going to be a issue in this case, but I will for sure learn all about the risks involved with it. Apart from the security aspects are there any other reasons not to? Is it bad practice?
http://jsnice.org
I used to maintain code that looked like this. Except it had reasonable and memorable names, like `a1`, `b2`, etc. Can't imagine trying to remember what `_0xabe9` is.
exactly. But thats the point. It did not take them `so long` to make a new browser. It took them that long to remove all the old cruft, clean up the code and finally publish a modern browser that deserves that name .. In addition you are mixing the complexity of javascript and `the browser`. A browser is way more than its javascript engine .. and there are more javascript engines than just the one's in the common browsers .. have a look: https://en.wikipedia.org/wiki/JavaScript_engine#JavaScript_engines
my file looks a lot better now :) still have a lot of _0xabe9... but i'll get there only 2k+ lines :)
Nim has a fast GC and works with emscripten so it will work with web assembly.
Actually, there is DOM integration. As well, it has built-in garbage collection. So as long as you are reasonable, you shouldn't have to worry about memory.
Same thing for me. Only at Reddit, and only in Firefox. (Win7)
Typically it's used to resolve an issue that is a symptom of a deeper problem. Not sure what your use case is on why you would want to load and execute source from a string. Despite writing a lot of JS over many years I have only needed to use eval once, and even that case was a total hack to meet a deadline. 
Do you guys have any reddit-specific extensions installed? 
&gt; It's got to the point where hardly anyone can correctly predict the outcome of a comparison between any two possible variables. holy hyperbole batman
In what argument? In the book? I did point out that he embraces both paradigms...
Same problem here, man. I'm using AdBlock and RES. I tried disabling both and I still get the error message. Google chrome is working fine, but Firefox is my go to browser. I hope someone knows how to correct this problem. 
Admittedly I didn't read most of that wall of text, but the fact that you mention **32 bit**, **1GB** and **crashes** tells me that the program most likely crashed because it tried to allocate a large amount of RAM and it failed. I'm not sure what you expect, and maybe Firefox should handle it more gracefully; but this sort of thing is not totally unheard of on 32-bit systems especially if you're on Windows and there's some dll being loaded in the *wrong* place thus fragmenting your memory.
Actually, I did not **complain** about crashes at 1GB level, I complained about Firefox not freeing the RAM after closing all the unnecessary tabs (that is, even I have only one tab opened, the memory usage stays the same - this behavior is **absolutely** unacceptable).
&gt; Maybe there will come a time when only one browser engine will be maintained, due to the effort involved? Good God no. A single browser engine was tried before. Namely Trident in IE 6. Microsoft decided that the web was done and all progress ground to a halt. You see the same thing with Apple dragging its heels with Safari. Having a single browser engine means that only one vendor decides which features are coming to the web. Having multiple independent vendors means that they'll keep each other on their toes and everybody works on a better web in order to stay relevant.
&gt; Actually, I did not complain about crashes at 1GB level, I didn't say anything about you complaining (or not). &gt; I complained about Firefox not freeing the RAM after closing all the unnecessary tabs (that is, even I have only one tab opened, the memory usage stays the same - this behavior is absolutely unacceptable). Given your lack of evidence or information about how you came to your conclusions, this isn't surprising either. It's not unusual for a garbage collector to *release* memory to the OS simply by hinting that's it's unused. If the OS doesn't *need* the memory at that moment, then it's not going to reclaim it and any external (to the process) tool you use to measure its memory use will tell you that it's not freed when technically it has been freed. To clarify: for all we know, you're seeing a memory leak, or the Firefox GC hanging on to memory for a little while in-case it needs it. I'm simply trying to explain more realistic possibilities since it seems to me that you're getting all worked up over something you don't understand. 
Seems you're trying to deobfuscate agar.io javascript files :) I've found [this deobfuscator](http://output.jsbin.com/hazevo/1), courtesy of [Brock Adams at stackoverflow](http://stackoverflow.com/users/331508/brock-adams), which swaps the initial array with its proper meant values making it even more readable. [Here's my partial result](http://pastebin.com/Jd6MDcLj) for now, unfortunately I have to start working. I haven't tested it, but if someone can run a quick JSLint and see if I missed some closing brackets or stuff I would be glad. Few quick consideration on the last hour spent on this: * It's a concatenated file, the first Stats module comes from mrdoob they edited it a little bit (mainly the css style for the panel) and probably something else but I didn't spend too much time on that. I won't be surprised if there's another external JS. * I've learned that `!0` means true, `!1` means false. Never seen it in that way. Smart! * You can actually do variable assignments pretty much everywhere and in the most unexpected places: most seen here on returns and on loop arguments. * It seems `document.body === document['body']` WTF? Someone explain me this before I smash my screen. Same goes with all the DOM prototypes such as `.innerHeight`, `.style`, even `localStorage` can be called as an array as well as an object. * Manually deobfuscating a file it's actually fun. * Manually deobfuscating a file makes you hate variable scoping 
Thanks heaps man, you're the real MVP! I'm understanding the code
No
Remove McAfee browser extension
While I encourage the use of D3, I think specifically for this I would use Pixi, http://www.pixijs.com/ to have full capability of a webgl renderer. Also D3 isn't a graphic rendering engine and I wouldn't use it as such. Cheers :)
Well, shit. That is pretty hot.
It is better to ask this kind of question in one of the other subreddits like /r/learnprogramming or /r/LearnJavascript .
Went trough the whole course few weeks ago. It explains pretty well functional and object oriented programming concepts, explains how JS works under the hood and why and what values are returned. Basically, instead of syntax and stuff, explains what to expect when writing certain functions, creating objects and how to use them in real life. Dives into underscorejs and jquery source, explains it and you create your own little library at the end. If you want to learn to work with javascript - don't bother. If you want to understand, **how** to work with js- go ahead.
&gt; &gt;Execution context &gt; In JS its called scope, plain and simple. I don't know why he's using fancy terminology Execution context and scope aren't really the same thing. Execution context relates (mostly) to how a function was called (there is also the global execution context), and (usually) determines the value of `this`. If the execution context is just a plain function call, `this` defaults to the global object (when not in strict mode). If the execution context is that of a method call on an object, the `this` value will be that object. Of course it's a bit more complicated than that, but that's the basics. Scope determines what variables are accessible at any given time. JS is lexically scoped, meaning the scope is determined from the code as it was written. So: function A(){ // Scope A, can access globals and locals, but not scopes B or C function B(){ // Scope B, can access globals, locals and scope A, but not scope C function C(){ // Scope C, can access globals, locals, and scopes B or C } } } I didn't watch the video, though, so maybe this person is using these terms interchangeably, but they really are two separate things.
[removed]
That worked for me. Good call, dude or dudette.
dumbass like myself would try to everything in CSS but that Pixi looks like something that could be nice addition for my toolbox. thanks!
I don't use poly-instantiation in my code unless I am absolutely forced to by some predefined native/third-party library, because it introduces a lot of boilerplate that I don't want to have to manage. This means I don't get to use prototypes or classes and I am completely happy with that. If I need to create application structures I nest functions. If I need callbacks I separate things out at a high level. Beyond this I don't write code to adhere to any kind of named pattern. I use the right tool for the job.
* the ; is optional * `,` is just another way of doing `;` its for variable assignment * ex: `alert(1),alert(2)` is valid * originally for `var a=1,b=2` and `for(var i=0,n=0)` * (nobody knows why. but its fun for code golf!) * ! is because hes executing the function immediately: `{...}(args)` so this reverses the return value, I cant tell if hes using the value or not. * ex: `!function IsString (){ return true; }()` it says `false` maybe the names are just for reuse/organizing a long function that was broken into little peices? also valid doing something like for code-reuse or to obfuscate. function a() { alert('c'); }( function b() { alert('a'); return 1 }(), function c() { alert('b'), return 2 }() );
oops! thanks
It would also be helpful if link text was in some way distinguished from non-link text (color, weight, underline...)
It is in the comments above
Why not try OpenLayers, and then use a google maps base layer? Their documentation is loads better, I can give you a script that populates a layer from a database call...
For those wondering what Brownian Motion is : https://en.wikipedia.org/wiki/Brownian_motion
My understanding that you can use these words interchangeably, although they don't necessarily mean the same thing. I did some Googling to learn more about it. Thanks.
I was talking to a tech recruiter and they told me that Java and JavaScript are actually the same thing. 
I'm not seeing any code showing jquery in a success callback of an ajax call in the comment thread...
It looks nice. "Works" on mobile but can't navigate.
Looks interesting. But it's to much "art" and not enough usability. And i doubt it works with search engines, google translate and all that jazz. So, it's probably sort of OK'ish for a personal homepage, but wont work at all for a company website. Oops, spoke too soon: After looking at it for two or three minutes, i'm starting to feel dizzy and a little queasy. Must but the crooked text or something.
Double-equal will coerce a type and it may produce weird results. That's why you should check for strict equality, except for NaN, which isn't equal to anything. That's Javascript 101. Add an equal sign to your examples and they become predictable. What is really so hard? 
Yes. It's a clusterf**k.
Ok, ty. Just need to work out how to pass them in via command line.
It's kinda crazy how people notices that only now. It's like that for ~1.5months(or even more. I've no sense of time for past year) as of now.
Well how are you requesting the pages in the first place? It should be easy to wrap the code in an [interval](https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval).
Hmm, did not know that. Thanks
At present, WebAssembly is basically just a binary representation of asm.js, so I imaged they'll give the job to the existing JS engines (V8, Spidermonkey, JSC, Chakra, etc). As it grows more features and diverges further from JS, something more specialised might be required, though.
I tried disabling it, but it didn't work. did I not disable it correctly?
Not sure how to fix, but it looks like other people are having the same [issue](http://answers.microsoft.com/en-us/ie/forum/ie11-iewindows_10/java/58d3eca6-ab9e-4b6a-ac55-c97da5e6ceb4?auth=1). You using Firefox?
Thanks..still learning shorthands and stuff :)
Seems related: http://stackoverflow.com/questions/8404464/increasing-google-chromes-max-connections-per-server-limit-to-more-than-6
Check out [this jsfiddle I wrote](http://jsfiddle.net/oLuxpsk5). You can click the buttons and see the difference is negligible.
https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Property_accessors `document['body']` is usually used when you want to access a property in a more dynamic way, e.g. `var bodyString = 'body'; console.log(document[bodyString]);`
OK but still how are you requesting pages and then what are you doing after you're logged in? It sounds like you're trying to scrape a website for information, not say go to an API and get information that way. If it's an automated task then I wouldn't suggest using Javascript but something like [Selenium](http://www.seleniumhq.org/) or [JMeter](http://jmeter.apache.org/) 
Thanks! Can you please elaborate more on the second one?
The ```!``` does nothing but informing the parser that an *expression* follows. Functions are statements. expressions are values and values can be converted to other types of values. To convert to Booleans, one can use the shortform ```!``` instead of ### ```Boolean(VALUE)``` ### , its the shortest form in JS. Actually its also valid to translate the *statement* to a string ### ```String(VALUE)``` ### / shortform ### ```"" + function(){}``` ### But thats longer than converting to a Boolean.Only expressions (as functions) can be called. Anonymous functions also have to be expressions (like IIFEs). Typing ### ```function(){}``` ### into a console, would throw the an error. Its the same as typing ### ```a = if (5) {}``` ### if is a statement not an expression. The only thing is that you cant transform the if statement into an if-expression -- but thats ... javascript!
Thanks for the fiddle, I totally did not know that it could be done this way. I just used jQuery for these things.
Name a language that doesn't have any gotchas first.
Thanks for the advice! What would you suggest when working with a data driven application? We have a SQL Server DB that we need to communicate with, both for information to display to the user and to save user entered form submissions.
Here is an example of how I prefer to write code: https://github.com/prettydiff/prettydiff/blob/master/lib/markuppretty.js This code example is strange though since the bulk of the entire library's cyclomatic complexity is located in one place at: https://github.com/prettydiff/prettydiff/blob/master/lib/markuppretty.js#L342-L480 while nearly all the algorithmic complexity is present in one place at https://github.com/prettydiff/prettydiff/blob/master/lib/markuppretty.js#L485-L689 Normally things are broken down more evenly across various tasks. The library in this case is a markup parser that parses a very wide variety of various template syntaxes in a very small amount of logic. In the case of markup languages the syntax is generally incredibly regular and predictable, which allows me to make all the required decisions in one or two areas of the code. I don't get this luxury when parsing less predictable syntaxes. Looking at that library a couple of parallel arrays exist in a high scope to store things like parsed tokens, token types, and so forth. Then logic is segmented into various child functions, when then segment their decisions into further child functions as necessary for containment and encapsulation. Honestly, there are areas of that code that could be a bit cleaner, but the overhead is still very low. What I enjoy most about organizing code this way is that the structure of the application, both in how its written as well as how it executes, is immediately clear just by looking at the code directly. You may not understand everything that is happening immediately, but you can immediately see how its organized. This makes understanding what's going on internally much faster. What frustrates me the most about OO code is that I can see how things are organized as atomic units and how schemas are defined as object models, but you cannot immediately see where they are extended or consumed. You have to look for things by reference, and often across various files, and this wastes my time. I don't want to spend half my day putting a jigsaw puzzle together to make a single line code change to solve a 2 minute bug.
Thanks, I like that. I had learned the idiom of (f(a){})(arga) and this seems to save a char!
Perfect timing. This just started happening to me last night. Thanks, friend!
I could have sworn I removed any trace of mcafee from anything cause it's a pain in the ass. I'll try it again
correct. i physically open each chrome profile and then load up the webpage by typing in the address bar or clicking on the bookmark. after I click and load 2-3 profiles to the same webpage or a page on that webpage, the website fails to load, which i am assuming is a temporary IP block. But, I am able to load 20 tabs of the website, or different links on that website in 1 profile with no problem.
What you see there (in the fiddle) also shows a benefit of declaring functions as `function &lt;name&gt; (){}` instead of `var &lt;name&gt; = function(){}` in that in javascript the declaration is 'hoisted' along with the functions definition so that in terms of reading you can 'use' it before the line of code is read. http://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html Is a pretty good article on it. The benefits really come when you're writing large systems where a file exposes a javascript api to be used, and you want to see the methods easily without having to sift through the file. Helps keep things grouped and clean. Edit: clarify what you see
Sounds like confirmation bias to me. How many times did you try? Anything less than 100 is not enough. 
It's java wrapped in a closure served as a script right? 
 function sum(...args) { return 103; } I'm good at this.
You are an optimisation compiler xD
You broke codepen. Put it on a Github page? :D
Lol just kidding! Here's how I did the first one: function sum(...args) { let n = 0; args.forEach(x =&gt; n = n + x); return n; }
But, that's not recursive solution, it's iterative. Here's how it should be done recursively: function sum(x, ...xs) { return xs.length &gt; 0 ? x + sum(...xs) : x; }
&gt; **This website is under heavy load** &gt; We're sorry, too many people are accessing this website at the same time. We're working on this problem. Please try again later.
First time I have ever seen that on Codepen. I heard they were making some changes recently so that be a result.
Yeah so essentially, rather than a pure IP block I think that essentially every time you log in with one profile it will log out the previous one. This is pretty standard behaviour. Only a guess though as we don't know what site you are trying to access with multiple accounts. Selenium won't help with an IP block and to be honest I don't think it's a very good idea to try and get around an IP block that a company has put in place for a reason. However it will help you write a script that can open up multiple Chrome browsers that are sandboxed from each other and log in with different profiles. Also, through code, you could control the amount of requests by just putting waits after each request or something similar.
This might be easier, use .map to turn your list of ids into a list of promises, then yield the array of promises: ``` yield ids.map(function(id) { return fetchFromDb(id); }); ``` 
What if I want to use McAfee?
That's how I did that, here's my code: function sum() { if (arguments.length === 1) return arguments[0]; else { var slicedArgs = Array.prototype.slice.call(arguments, 1); return (arguments[0]+sum.apply(this, slicedArgs)); } } I was just wondering if there's a better way to get all the arguments except the first. 
Essentially the only way of doing it is to slow down. You can't get round the throttle and you shouldn't be trying to circumvent it. If you do I imagine they might well just ban the accounts you're logging in on. As I said in previous posts, check out Selenium, learn how to use it and then put waits in between your requests there.
Great demonstration on the live demo.
without a dictionary the second one couldn't find "words", but he is suggesting the same thing as http://phonespell.com/. You could do a "all combination of letters" option.
Maybe you should check the err variable for an error 
ok thanks! i appreciate all the help. ill definitely look into selenium. 
I'm not sure if JS is getting too complicated, but with the explosion of ways in which its used these days, the sheer amount of API's that you have to know is staggering. never mind the command line build tools that are now ubiquitous in most front end depts. im not sure how anyone truly keeps up
Disabled the add on first. Got another error. Removed it via control panel and looks like that's it for good now. Thanks!
I attended one meetup with the Pixi.js creators early this year and the demos shown were absolutely outstanding. One of the things it drawn more interest to me is that they shown a mixed webgl/html page which is what I am looking after to use soon in a project to overcome some CSS transition limitations. 
Cool! I'll help if you want! I'm leaving work right now... but if you'd like I can start recreating the page in about an hour or two here.
Nice and weird. But nicely weird.
What you mean is that you have no balls to accept criticism.
nothing better than some basic exercises to play :) thanks
Uuuh this is about ES6! Didn't get that, sorry... Then I retire myself from the game as I know nothing about ES6 :) 
that's green, now refactor
maybe do this, so if row is falsy it won't do the greater than condition if (row &amp;&amp; offer.items_to_receive_length &gt; 0)
Huh, I might end up doing that. I learned Javascript over the summer and when I learned about canvas, I made a little library that does all the nice stuff like rendering every frame based on objects that I create elsewhere. I don't know the limits of Canvas, since when I finally find the limit, I will just think I have found my own limits 
I get what you're saying, and there is definitely a lot to it. But it's not the same type of language as C/C++, Java, or even Python. It has a different purpose entirely, and it has evolved to serve that purpose better. It's not Korean, where basically one dude sat down and said, "Okay, let's do this all over and make it make sense." It's more like English, where several different peoples from different nations using different Prototypal Indo-European languages all just sort of spoke to each other over many hundreds of years, and now we have this Germanic/French/other amalgamated beast of a language. That doesn't necessarily mean one way is better or worse than the other, they're just different.
[Oh yeah, right! Uhh Brownian Motion.. how could I forget.](https://upload.wikimedia.org/math/8/3/c/83cbe70178e566b5655aaf5988b78554.png)
yea thats what i meant. too tired when i wrote that.
Maybe it's wrapped in a closure and served as a script but it's definitely not a java.
I was somewhat facetious; I'm sorry, I forgot that people can't guess the intended tone online. Now that I can see it: cool!
I doubt it'll make a big difference in speed, but just for future reference if a property is going to be the same, for each instance of the "Class" then set it on the prototype function A(_) { this.x = 0; this.y = 0; // etc } Each time you call `new A()` your setting its `x` and `y` to the same number which will be the same no matter what so, instead of doing it each function call do it once on the prototype: A.prototype = { x: 0, y: 0 } Either way cool!
Why? Are you going to try some lame, "Nothing is perfect so it's ok for JS to suck." argument?
thanks. I'll give it a try :)
comma operators are used in uglifyjs to chain iife's. &gt; The comma operator evaluates both of its operands (from left to right) and returns the value of the second operand. http://stackoverflow.com/questions/13090434/why-does-this-javascript-work
Sorry about the format, i copy/pasted from mobile
but isn't using prototypes supposed to have a single function shared between objects? And not created for every object instance?
Amazing.
I'm working on project where we're trying to scale up a d3 app to larger datasets, so this was a great article to read. Thanks for sharing. I'm wondering if you looked into any WebGL library such as Pixi.js? 
I am assuming a joke that went over everyone's head?
Interesting but how much traction has this gained? What kind of IDE and other tool support is there for it?
I want to be sold on meteor, but I can't find anything to use it for. Anyone ever been in this situation? I'm considering using falcorjs with web sockets for my next project (for which I also considered using meteor)
[Proper Link](http://imgur.com/nhFD0Gv)
Beautiful presentation. What tools did you use?
[Spectacle!](https://github.com/FormidableLabs/spectacle)
Yea that's because you're overriding it, that's the same with any variable. Not overriding: function A() {} A.prototype = { x: 0 } A.protototype.y = 0;
`sum.apply(null, Array.prototype.slice.call(arguments, 1))` You don't want the second `sum` call to pass an array as the first parameter. You want the sliced array to *be* the list of arguments with the first array index exposed as parameter `num`. [Function.prototype.apply](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply) has it's arguments provided as an array. function sum(num) { return arguments.length == 1 ? num : num + sum.apply(null, Array.prototype.slice.call(arguments,1)); } sum(4, 4, 10); // 18 sum(3, 3, 10); // 16
Ah, thanks! Will check out.
Do you work at VolksWagen?
uninstall McAfee Web/Siteadvisor 
This fixed it thanks
A good example + straightforward definition: http://gameprogrammingpatterns.com/component.html &gt; the growing trend in software design is to use composition instead of inheritance when possible. Instead of sharing code between two classes by having them *inherit* from the same class, we do so by having them both *own an instance* of the same class. The thing Elliot does with Object.assign is more like multiple inheritance, isn't it? Ah... LOL. He even said it himself. https://www.reddit.com/r/javascript/comments/2qtgyt/multiple_inheritance_in_javascript/cn9shmq &gt; In JavaScript, [multiple inheritance is] accomplished with concatenative inheritance, which is just a fancy way of saying, "copy properties from one object to another". And this *gem*: &gt; the diamond problem doesn't exist in JavaScript because whatever property you add last overrides any property it collides with. The problem does of course exist and simply overwriting a property is a rather crude way to mitigate it. https://en.wikipedia.org/wiki/Multiple_inheritance#Mitigation
ES6: function sum(...args) { return args.reduce((a, b) =&gt; a + b); } With pointless recursion: function sum(...args) { if (args.length === 1) { return args[0]; } return args.pop() + sum(...args); } TCO-able: function sum(...args) { function acc(a, s) { if (a.length &gt; 1) { return acc(a, s + a.pop()); } return s + a[0]; } return acc(args, 0); } Man, this is getting stupid. :)
Read more about it here: http://devdocs.io/dom/canvas_api/tutorial/pixel_manipulation_with_canvas
Or say why JavaScript sucks more than any other language of your choice.
Perfect. Thanks for your time.
Kinda my point. jQuery is not your bottle neck.
Wouldn't hurt everyone to sort by NEW at this point, as someone else has posted with the same issue, and does NOT run McAfee.
I see this variation of composition is coming from the functional side of the tracks, not the object-oriented. [Compose functions](https://en.wikipedia.org/wiki/Function_composition_%28computer_science%29) to get a single function containing the behavior of the originals... now let's do the same thing with objects. It's all composition right? While I can see how that could make sense, it doesn't help that object composition is already a well defined pattern representing the _has a_ relationship. (The linked function composition wiki page, coincidentally enough, notes that function composition should not to be confused with object composition and links to [object composition](https://en.wikipedia.org/wiki/Object_composition) where it proceeds to describe the _has a_ relationship).
&gt; According to that wiki page, the diamond problem does not exist in JavaScript Read the description at the beginning of that section. Read also how Free Pascal handles it. Sounds familiar, doesn't it? &gt; "Concatenative Inheritance" is really just single inheritance of an object created via mixins. Mixins are a form of multiple inheritance. If you extend one class and mix-in another, you get stuff from both parents, right?
Damn, he deleted the bit that makes you think he doesn't understand what a reference is. What did that say?
What are the main differences between Yolk.js and Cycle.js?
ah yes that was it thanks alot and sorry did not know such a subreddit excists
It's true, it can be considered grammatically incorrect, but it's also becoming preferred phrasing for people with non-standard gender identities and is generally a more inclusive term than the gendered pronouns anyway. Given that it doesn't muddy the meaning of the sentence, I think this usage is better than any other alternative I've heard of. I would argue that the grammar behind "their" is changing with usage, and that's perfectly fine. Languages just change as time goes on.
Its a good thing you won that internet argument and changed hearts and minds. Thanks for posting it here so we could see the difference this is making to the world.
dude that would be awesome Im just at school right now will get home in like 4 hours and show u my js from the previous lab :p I wanna impress you senpai haha
I'll get to work on it! Ha! Cool, yeah, I'd love to see what you ended up with!
It sucks on its own. You don't have to compare it to anything. It has some really stupid things baked into its design. It was developed in 10 days and had very few real updates for the first ~20 years, non of which fixed the major flaws. It's a turd, regardless of what features they duct tape to it in ES6 and ES7.
I don't see how it could work with tokens. Can you point me at an example? The difference is that in .NET cancellation was part of the system for the beginning, so it got wired through all of the task operators. That isn't the case with js promises. To use a cancellation token you need to wire it into each of the dependent promises. Things like Promise.all and the Fetch API aren't aware of cancellation tokens, so you're stuck. Another issue with tokens is that it seems like you'd have to check them after every step of your async function. yuck! I would love to see a real world (non-trivial) example of async/await with cancellation.
You can't just fix stuff if it breaks existing code, otherwise it ends up like python 3. They've done a great job at providing alternatives to bad features. Bad features still exist, you don't have to use them, and you'll be hard pressed to learn them without being told up front that you shouldn't use it.
&gt; I'm wondering if that is really a problem though? It depends on what your using the pattern for. The nice thing about composition is that because it obscures the actual held object, from the outside you can't actually directly affect it. This is really important because it ensures the goal (that of a sort of dynamic inheritance). If the end user of the composition has access to the internal objects, then they can write their code *based* on those objects, which break the pattern. Also, because JS "composition" is essentially mixins, you can lose information through duplicate declarations. 
thanks all! It did have to be recursion but the other options were helpful to see. 
Luckily I still had a page open that showed it. I've added a screenshot to my original post.
Discovered an issue: I dragged one, then just began clicking on the document around where the cards were located as it animated back, and both cards began jumping to the side with each click. I discovered this because I was trying to "catch" the cards as they animated back to the center.
At some point, you have to walk away from decades of accumulated crap. If people don't want to rewrite code, they can stick with older versions.
Done: http://codepen.io/anon/pen/meqJJO
&gt; Personally I don't get the point of posts like these or people arguing. Both Elliott and now Johansson are influencing increasing numbers of people. If they influence enough, if they reach a tipping point and are able to change the mind of the community as a whole, then that can affect the development and usage of the language. And it would be a shame if JavaScript's future was decided based on a misunderstanding of both composition and inheritance.
Correct definitions are vital to ensure that we aren't all talking at cross-purposes. He's not telling people to avoid inheritance altogether. His stampit library uses inheritance via the prototype (ie, delegates). He's saying **favor** composition over **classical** inheritance. However, if classical inheritance fits your use-case the best then, by all means, use it. 
He's giving lessons on lessening.
Sweet job on this Niall.
Even if you have to use jquery, use the least sugary version of it. Which here is, as you say: `$.attr('data-name');`
doh, swype autocomplete fucked me.
hard pass
I guess I should have qualified "work fine" - they "work fine" if all the things you await can also take a cancellation token. Which might work for your own APIs, but won't of course work for things that aren't cancellable like fetch. And yes you'd have to write your own version of Promise.all to handle cancellation.
Then all you have to do is switch to comma-first style! var a = 1 , b = 2 , c = 3 ; But I'm with you, I spent way too much time fighting with commas and first/last cases in that declaration form so I let/const each individually now and I've never been happier. My skin cleared up and my dog hasn't gotten into the trash since.
I really enjoy this blog generally and the ES6 stuff he's been writing. But, I am not sure this is correct: "In ES6, functions are block scoped" `let` and `const` are block-scoped, I guess that's what is meant there?
The point is Elliott's proposal solves -- and suffers from -- the same problems as multiple inheritance. Here's an example of the diamond problem with Elliott's StampIt: var storable = stampit().methods({ read: function () { console.log('storable::read'); }, write: function () { console.log('storable::write'); } }); var transmitter = stampit().compose(storable).methods({ write: function () { console.log('transmitter::write'); } }); var receiver = stampit().compose(storable).methods({ read: function () { console.log('receiver::read'); } }) var radio = stampit().compose(transmitter, receiver); radio().read(); // receiver::read -- ok radio().write(); // storable::write -- wait, what? tramsmitter::write lost due to diamond problem Today, of course, the way we'd solve this is with composition -- **real** composition. That is, our type "radio" would *have-a* transmitter and *have-a* receiver. More specifically, radio would hold *references* to a transmitter object and a receiver object.
Oh I see what you mean then. I've never cared to use Elliot solution and instead did composition myself. It's clearer and cleaner anyway. 
The decisions we make on how to write JavaScript (or any language), should not be based on esoteric hypotheticals. It should be based on viability (whether a thing will actually be written and how long it'll take) and performance. These arguments are no more sound than the semicolon arguments. 
this guy's got it.
Which case is better? The more granular one?
Pretty sure the article is not meant to be taken seriously.
you cannot comment out "a = 1" I was using comma last, then comma first, and once i was running into a problem with my build process (babelify,minifiy,...) so i just switchted to the first without semicolons, so i now do: var a = 1 var b = 2 var c = 3 
Not sure what you are trying to show here
At the end of the article, the author writes: &gt; PS: I’m working on a book about testing React code, send me an email, if you’re interested He also wrote a book on using React + D3. I can only assume he knows when to use jQuery vs. React. Meh, I dunno.
True, but maybe it'll end up being a book on how much he hates testing React code! ( ͡~ ͜ʖ ͡°)
https://medium.com/javascript-scene/common-misconceptions-about-inheritance-in-javascript-d5d9bab29b0a https://medium.com/javascript-scene/the-open-minded-explorer-s-guide-to-object-composition-88fe68961bed "Favor object composition over class inheritance." Which is a well-known quote from the GoF book. Naturally, the GoF definitions apply. *Object composition* is about *owning instances* of classes instead of inheriting from them. Throwing things together via `Object.assign` is mixin-like which means it's a form of multiple inheritance. It is not object composition.
I use the first style if a variable is being declared (no definition) or if the definition is simple (eg. `foo = "abcde"`). When the definitions become more complex, I find it easier to step through with a `var` for each definition.
That's subjective, man. I've been using comma-first for years because it makes my scripts much more readable. It's easier to spot a missing comma *at the beginning* of the line than it is to scroll over to the right every time to hunt down commas.
Let me TL;DR this for people. * Appropriate solutions for simple problems are not the same as solutions for complex problems * When applying solutions for complex problems, onto simple problems - you make the simple complex * The appropriate solution for a complex problem, can make it simple * Use the right solution for your problem * Avoid reading click-bait articles 
https://en.wikipedia.org/wiki/Multiple_inheritance#Mitigation &gt; Free Pascal, an Object Pascal dialect intended to be compatible with Delphi uses the "last man standing" rule, where there is a reference to two identifiers that have the same name, whichever is the last one defined is the one that is used. So if there is a Unit A and a Unit B that have a variable named Q, if the declaration is "USES A,B;" then a reference to Q will use B.Q.
Oh, you're one of *those* JavaScript developers...
I used the first quite a bit, because I put all the var declarations at the top of the innermost function. So, they always kinda piled up and half of them didn't get anything assigned. But now with `let` and `const`, I declare everything on first use. I generally use a separate statement for each one, because there usually is some initial value and because I might change it from `const` to `let` or vice versa.
Not if it makes it harder to read in the way that you'll most often be reading it just to make it easier the way you'll rarely be reading it. I'd call that a net decrease in readability. In SQL I can see it. If you're IDE is crap at pointing out where things like missing commas are, ok but I rarely use them. It's more important for me to be able to scan lists and find specific var names or values.
pfeww, I was starting to worry! it was a full 2 weeks without a new framework! things are back in order :) 
"readable" code means code that can be understood by others as well as yourself. Imagine somebody new reading through your program to try to understand it well enough to add a feature: are they looking for names and logic, or missing commas?
True to everything else you've said. It's a stylistic choice, I like it for brevity. I see it just as readable if the top of the line says var and the variable names below are indented, typing out var on every line and the resulting final semi-colon seems like wasted effort. Have you ever declared more than one variable in a for loop?
If you just assign simple values it does not matter. You see right away what is beeing assigned. If values are computed by functions or computed from previous values it might be better to use var on each line for debugging purposes.
This has nothing to do with the DOM, the problem is jQuery's "good enough" attempt at integrating `.data()` with data attributes.
we all remember that day ;)
I'm eagerly awaiting the release of framework.js.
Sounds like you narrowed it down man
Given that references are created with constructor calls (object allocations).. new A(new B()); ..their compositional use barely differs from the definition of functional composition.. (A . B)() = A( B()) How the result of "B()" or how the instance "new B()" is used is irrelevant. Those are implementation details that well designed objects and referentially transparent functions should not expose. I personally have no idea what distinction Jeff M is trying to make. These are abstract concepts that require more than a mechanical understanding of the terms. 
I sure hope not with how omnibox works.
You don't need to inspect the pixel data for this. Just be clever with the globalCompositeOperation of your canvas. If your image is positioned at (x,y) with width and height of w,h: You can increase the red with: ctx.save() ctx.globalCompositeOperation = "source-in"; ctx.fillStyle = "red"; ctx.globalAlpha = "0.1"; ctx.fillRect(x,y,w,h); ctx.restore(); You could similarly decrease the red with the exact same code, using "source-out" instead of "source-in" ctx.save() ctx.globalCompositeOperation = "source-out"; ctx.fillStyle = "red"; ctx.globalAlpha = "0.1"; ctx.fillRect(x,y,w,h); ctx.restore(); This will work for any color with any magnitude of tint. Just toggle the *fillStyle* and *globalAlpha*. Also worth noting--the simplest way to get around the cross-origin error when trying to get pixel data locally is to just to access your files using any server, rather than just viewing the static page. So if you have python installed, just navigate to the location of your html file in a terminal and run: python -m "SimpleHTTPServer" then access your site by going to localhost:8000 or whichever port your local server is using. This will let you access pixel data without making any changes to your code.
Serious question why do people care what Eric Elliot thinks? Is he anything more than some random crank?
Thanks for response, but there is no way of having them appended, i mean, to have 1 wav audio file with both sounds. I will have something like 30-50 different wav files linked, so i thought that having one file would be cleaner and better for the performance.
No, you can't concatenate audio files into a single file using javascript.
Stumbled upon this two days ago. Two hours of hacking to working pinning on right. Bazzilion times faster than ui-grid. Maybe bazzilion and half.
I find that using element.getAttribute('data-item'); Is not that bad and always works everywhere.
I also work with games in Javascript and I use grunt.js to organize code. When I'm ready to build, I use concat and uglify to put the code together. I modulate the code as much as possible. I keep the code divided between the model and the view, and from there I separate the code into minimal objects.
My private style guide reads: var a = 'a', b = 'b'; because of code folding.
Looks like the CDN that was serving Yolk to the jsbins is not working anymore :(. Will try to get it on cdnjs soon.
[removed]
Ideally, it wouldn't be. Legacy code is a real pain that way. SQL can get this way if there are long column names. We have to play the hand we are dealt sometimes.
[JavaScript Application Design](http://www.amazon.com/gp/product/1617291951/ref=as_li_ss_tl?ie=UTF8&amp;me=&amp;linkCode=sl1&amp;tag=ponyfoo-20&amp;linkId=1c2cc01329762e4890664b1e3563e2ba) *(disclaimer, author here)* 
A framework for creating frameworks is direly needed.
TIL! That is pretty cool.
http://jsfiddle.net/8nkx6txa/ In strict mode, a function declaration is block-scoped in Chrome, IE11, and Babel. Firefox doesn't like it: *SyntaxError: in strict mode code, functions may be declared only at top level or immediately within another function* Is that a bug in Firefox? **Edit:** Seems like it's still (?) not specified: https://esdiscuss.org/topic/lexicalenvironment-and-variableenvironment-in-ecma-262#content-2 For what it's worth, this stuff as one would expect in Dart. Top-level functions are available everywhere and inside blocks they are block-scoped.
If people aren't informed about the misinformation in Elliott's ideas, then that misinformation tends to spread. I've noticed a lot of newbies recently who regurgitate Elliott thinking they understand composition, but of course they don't because neither does Elliott. And sometimes even non-newbies get duped, such as Johansson, who's an entertaining character and ends up spreading Elliott's misinformation even further. I think it's important that the corrections become as widely known as the misinformation.
This is a good answer for this particular problem, but you can also use what you already know about functions to create one function which will combine both of your other functions! This could be called "wrapping" the two inner functions. For example: function callBothFunctions(event) { displayWindowSize(event); coverBlockSize(event); } window.addEventListener("load", callBothFunctions); window.addEventListener("resize", callBothFunctions); Notice that the `event` argument is passed through the wrapper function so that both of the functions you call inside receive the proper arguments.
window.setInterval?
This is the main reason I switched to $().attr()
I agree with what Jeff M said "words that have special and technical meaning beyond what you’ll find in Merriam-Webster". Understanding the technical meaning is important. As someone without a formal CS education, I enjoy seeing discussions of the technical meanings. Elliott is a smart guy with strong opinions about his passion. I don't think the name calling (from either side) helps.
What are the relationships between the components?
Rough. Good catch! Glad you got it sorted and thanks for the heads up. :)
Purely a cosmetic thing. First example is far more error prone and its possible you may accidentally create a global if you drop a semi-colon somewhere in the middle. Second example is rather safe and very explicit.
How does it perform?
For me - Ben Alman's article on the topic is definitive: [Multiple var statements in JavaScript, not superfluous](http://benalman.com/news/2012/05/multiple-var-statements-javascript/) 
No, you're doing it right. Part of the purpose of the "arguments" object being unavailable in arrow funcs is because they're trying to phase people out of using the array-like-but-not-quite-an-array arguments object. They just can't do that with existing functions, because it would break all the things.
Makes sense, thanks!
I'm just here to say I've misread this title as China declaring wars like 10 times today.
Kudos! You just saved me about 300k in file size. Turns out I was sending two copies of a large library to the user by some unfortunate nesting of node_modules. I was able to identify the waste and remove it with this tool. Great job!
I'm so sick of McAfees shit I think I'm gonna dump it before my sub runs out. I'm currently waiting for it to run out so I don't feel like I wasted money but at this point I think I should just cut and run
You need a major in CS and a phd in category theory or equivalent to learn true FP see here: http://bitemyapp.com/posts/2014-12-31-functional-education.html
Man! If I could a million upvotes for this comment here
Try programming in a fully functional language like erlang or haskell for a few weeks and then apply those concepts to javascript when you come back.
Lines 4 and 5 should be: for (i=0; i&lt;str.length; i++){ if (str[i].toLowerCase() == 'a' || str[i].toLowerCase() == 'e' || str[i].toLowerCase() == 'i' || str[i].toLowerCase() == 'o' || str[i].toLowerCase() == 'u'){ In line 4 you should count up to string length minus one. E.g. if a string has five characters, it has character #0, #1, #2, #3 and #4. In line 5 first of all I used double equals sign instead of a single one, so it is a condition, I don't want to assign any value to str[i]. Then I used "or" logical operator ( || ) to check if any of the conditions is true. I also used .toLowerCase() method to str[i], so if str[i] is "A" it first converts it to "a" and then checks if it is equal to any of the vowels. Alternative, shorter live 5: if ('aeiou'.indexOf(str[i].toLowerCase()) !== -1){ .indexOf method checks if str[i].toLowerCase() is in string 'aeiou'. If it is, it returns on what position of 'aeiou' it found it, if it is not, it returns -1. So if the character is a vowel, the method will not return -1. Therefore my statement checks if it doesn't return -1.
Like most things in programming, using it after having learned about it helps a lot. And then after working with it read about it again and you'll have a better grasp. I feel like I'm singing their praises a bit too often lately, but really, React and especially [Redux](https://redux.js.org/) (both fairly small APIs and relatively easy to learn) are based on sound concepts that will make a lot of the benefits of FP click, so you might want to do a small project with those.
If you really want to *get* functional programming, you probably want to try a truly functional language. I recommend Haskell (http://learnyouahaskell.com/chapters).
Totally agreed. I started diving deep with Haskell a few years ago, and it taught me a lot that I could bring back to JS. The problem was I never found myself using Haskell itself for anything more than toys. So while it was a great learning experience, I didn’t find it super practical (YMMV, I know Haskell is used in production quite often, I just didn’t find myself doing it). More recently I’ve been using Clojure and I think it strikes an excellent balance between functional purity and pragmatism. Clojure makes it easy to cause side-effects when I have to while still providing an extremely pleasant functional interface for the 99% of the time when I want that. Plus ClojureScript is extremely solid, so it’s definitely worth looking at if you normally build for the browser.
[Wait no further!](https://github.com/DeuxHuitHuit/framework.js)
two things: you're assigning when you want to compare you're trying to shortcut many individual comparisons into a single one Good news: both things are incredibly common and completely reasonable. The assigning is the big thing here in my opinion, because that's an insidious bug that pops up over and over again and is often tough to see. It happens on line 4 where you do `if (str[i] = 'a', 'e', 'i', ...)` if (x = 3) { ... if (x == 3) { ... The first statement is assigning the value of 3 to x, which will always evaluate true (storing the value of something into a variable typically returns true). The second statement is comparing the value of x to the value of three. That second equals sign is really important. The second bit is trying to compare many things at once. This is reasonable, but it's just an issue of syntax and this might be something you run into with new languages - you have to figure out how the syntax works to do things you're familiar with. In this case, in JavaScript, you can't compare a single item to a collection like that. There are a couple of ways of doing this in a single line. You could compare the current value to every possible value on every iteration using the logical `or` operator: if (str[i].toLowerCase() == 'a' || str[i].toLowerCase() == 'e' || str[i].toLowerCase() == 'i' || str[i].toLowerCase() == 'o' || str[i].toLowerCase() == 'u') { ... You could store the values of the vowels as keys and check if the current index of the string is in that structure using JavaScript's `in` operator. I like this one best because even though the data structure is kind of odd looking, it's the easiest to read when you're looking at the loo: var vowels = { 'a': 'a' , 'e': 'e', 'i': 'i', 'o': 'o', 'u': 'u' }; // ... if (str[i] in vowels) { ... You could also check an array of vowels against the current string: if (['a','e','i','o','u'].indexOf(str[i].toLowerCase()) !== -1) { ... of even if ('aeiou'.indexOf(str[i].toLowerCase()) !== -1) { ... The last two examples are equivalent, one uses an array, one uses a string. Lots of different ways to do this in a way that fits your style and preferences.
You could do var matches = myString.match(/aeoiu/gi); var vowelCount = matches ? matches.length : 0
How have you broken down your code to manage complexity?
Electron and NW.js are structurally different but with marginal performance difference. Although, I'd probably end up using electron, it doesn't matter for my question.
I am trying to find some previous research/blog/experiences on performance/challenges with native vs hybrid for desktop apps so that I can choose wisely for my upcoming project.
&gt; You need a major in CS and a phd in category theory or equivalent &gt; to learn true FP I don't believe this is true, but did someone managed to check out the link? It's actually very interesting
Thanks! No problem! But yeah, make sure to ask questions on anything that doesn't make sense to you... Hopefully you're learning by looking at the code and modifying it! :)
yeah thats exactly what I did! I looked at your code examples and figured out what exactly is going on, your the best dude!
There's always stuff like GHCjs or Elm-lang
just enter a space in place of the period google doesn't look at punctuation so `some-lib.js` gives the same search results as `some lib js`
Great article!