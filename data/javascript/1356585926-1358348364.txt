Forget the book, go to www.codecademy.com
You are being down voted for this post simply because good programming practice is to never repeat yourself, and to write simple, readable code.
What the fuck?
re: sprites: Yeah, I considered that for very large/very long animations that wouldn't work -- but at some point, you have to cut your loses and use real video. Animateing through hundreds of 640x480 images wastes **ENORMOUS** amounts of bandwidth by not taking advantage of video codecs. As much as I hate to say it, for something like that, you'll have a hell of a time doing better than flash, even if you need to combine the video with other elements as you've previously alluded to.
Good list, I may use some things from it. It was not started this year but AngularJS hit 1.0 in March and has gained much traction since.
I think at their age you should have them try the khanacademy.com tutorials.
What kind of posts would you find useful?
I tell you what does not exist yet, a blog or twitter account that posts new interesting webdev tools and libraries, and actually shows them off with examples. not a random list in which half of it has either a better library or is very buggy. 
Right, I understand not using Javascript 100%. I'm writing a transpiler myself, they're great fun. That's why I specified static typing as the issue. What sort of static analysis tools do you mean? To me, the only significantly useful static typing tool (in any language) has been the ability to rename members of classes and have confidence that it didn't break my code. But that's not that big of a boon, and testing has caught everything else. I'd be really interested to hear of more - autocomplete is more useful with static typing of course, but dynamic languages aside from javascript have pretty good autocompletion now.
Yea, so far on a couple side projects it has been quite helpful indeed.
Obviously a coding snob.
I like the list. I'll have to check some of these out in more detail. It would be nice if the list provide some additional rationale on why these are the best libraries. 
My examples were DRY and simple.
The condition is `!x || y &amp;&amp; z`. The presumption I was making was that the tests on x and y and z would be separated by a lot more code in between and a bitfield holds more fine-grained state than a boolean. Something like this isn't needed in most cases but it can be convenient if those values are some kind of constant, or need to be stored space efficiently.
Incorrect. Because in the example given, if x &amp;&amp; y &amp;&amp; !z or if x &amp;&amp; !y then no action should be taken.
Examples yeah. Would be nice.
Seems like almost every library on that list was using Twitter Bootstrap for their web page (if not in the library also). Definitely interested in each of these. Angular should've been included though, IMO.
Not sure about mooTools, but I know that Underscore defaults to `Function. prototype.bind` if it is present, so it performs a strong bind that cannot be rebound.
As you mention, refactoring is definitely a plus, and code completion as well. One major thing for me is code navigation: being able to know where something is declared whether it's in the same file or a third party library. Also for me, being able to see a valid list of methods and properties, with documentation when I press dot keeps me from having to remember everything. Another thing is performance:I watched a presentation a few weeks back on channel 9 about JS optimization. It had great details on how your code is JIT compiled. They basically explained that your code will be faster if you treat it like C++. So compiling from c# actually forces the kind of structure that will help the browser. Finally, because I use and enjoy c# server side, it's neat for me to also use it client side. I can even share some code files between the server and client projects.
Yeoman isn't a library, it's a package manager.
That morris.js charting library looks pretty awesome. Rather than using a flash or image generating fallback for IE, it uses RVML instead. Pretty nice if you ask me!
https://raw.github.com/douglascrockford/monad/master/monad.js The monad code from the talk, because I found myself transcribing it from the video and then felt like an idiot. I'm trying to build some objects/monads to drive a simple drag and drop game. I have no idea what I am doing. So many alternatives for drag and drop out there. Working with jquery ui at the moment and evaluating yui and kinetic.js Any advice from the redditverse?
The thing to keep in mind is how much your site HTML is injected at run time. Google likes your HTML to be accessible without JS enabled. I wouldn't go as far as saying that Google doesn't see HTML that is added by JS at run time, but I will say that we developed an extensive BB multi-page site for a client where most of the HTML content was injected by JS, and we saw a major SEO hit. The way to handle this sort of thing is to approach it using progressive enhancement ideologies. Build your site to be pure HTML/CSS, make it SEO friendly, and then add JS/BB as a layer on top that takes over and makes the site more interactive and ALAXy. BB was intended to build apps (which usually don't require SEO of their inner functionality), not content sites. You could build a content driven sure with it, but you will need to keep in mind the above.
"Engineer"
Knockoutjs is a fun little library, but has extremely shitty performance. I wouldn't touch it with a 10 foot pole.
Awesome, been looking for such a library. Am using Backbone and while their Event module is a great start, it leaves a bit to be desired. I didn't really find one I liked from this list here either: http://ricardo.cc/2012/08/09/Its-time-for-a-native-EventEmitter.html Will give this a shot and see how it works, cheers!
Lol. People like you crack me up. Ignorance and elitism FTW!
BE CAREFUL! The AppCache is probably the most dangerous thing you can add to your page. Everything is cached *nearly* permanently.
Front end development just never seemed like engineering to me as much as it was mainly design that needed to be implemented, often creatively. Granted maintaining cross-browser compatibility and juggling rapidly changing experimental features is a pain in the asp, but it's the similar to the idea that programming is an art, not a science (which I'm not entirely sure I agree with). And I guarantee it's not elitism - front end programming is the only kind I'm familiar with.
&gt; sounds like a lot of DOM walking There's actually very little DOM walking, just one call to document.getElementsByClassName() during app init, and then iterating that list whenever there's an update. It's a live list so it always reflects whatever's currently in the DOM. The looping isn't done on an interval, just whenever an interesting mutation event happens. Very lightweight.
From wikipedia: "Engineering is the science, skill, and profession of acquiring and applying scientific, economic, social, and practical knowledge, in order to design, build, and maintain structures, machines, devices, systems, materials and processes." --- Front end engineering combines aesthetic design (which many back end coders are TERRIBLE at), practical knowledge (HTML/CSS/etc), social (how people will interact with one another as well as whatever app you're working on) and economic (tons of marketing psychology goes into conversion rate optimization) principles to create a process on how users interact with websites. It fits the definition rather well! Now, very entry level front end developers might do only basic HTML and CSS, that in itself would not at all be considered engineering. But that would be overly simplifying the entire industry to say that is all front end people are ever responsible for. I could just as easily say that I can code a calculator in c# in a few minutes... therefore I am a software engineer. TL;DR -- If you look at the whole picture of what 'front end engineering' is... it is very easily considered engineering.
`listeners[i](data);`: I &lt;3 JavaScript. Good catch! I probably wouldn't modify `bind` using this scheme. Instead, I'd write: function unbound (fn) { return _.isFunction(fn.unbound) ? fn.unbound : fn } And: function rebind (fn, context) { return bind(unbind(fn), context) } Now bind still works like `.bind`, but you can use `rebind` if you want to force the new binding. Thanks for the thoughtful post.
All of the techniques you mention have huge performance costs. And as you say, none of them are really production usable. Nowadays you are encouraged to use the [MutationObserver API](http://www.w3.org/TR/domcore/#mutationobserver) but that is not widely supported right now.
Last year I wrote an extension to underscore.js with a similar idea (and name): https://github.com/mennovanslooten/Observable-Arrays I like your idea that .clone() should return another observable array, I'm definitely going to steal that.
Hmm, why would `listeners[i](data)` be called from a different context from `listener(data)`? Aren't the operators evaluated from left to right in both cases?
You might be able to evaluate their code twice. First, evaluate it on a temporary, invisible document which you keep in sync with the visible document. Then, traverse that DOM to see if anything has changed (you can compare it node-by-node with the visible DOM). If the change is acceptable, evaluate the same code on the visible document. Otherwise, reset the invisible document to be in sync with the visible document. Lots of work, but I think this might be the most reliable way to do it. Otherwise, you could try wrapping every single DOM object, so every method returns wrapped DOM objects instead of regular ones. Loop over every function in the Node prototype and wrap each one. Not sure if this would work, though.
I wonder if the *difficulty* of writing gmail in JS (and obviously I don't know how to get an objective measure of programming difficulty) was really at a comparable level to writing a similar application in c++ or java. Yes, it *can* be done, but at that scale I wonder how much the languages lack of built in supports for modules and etc was an impediment.
By misinformed I mean that I doubt you have seen any good implementations of object literal to have formed such an opinion that it is "inelegant", thus you are misinformed or uninformed, whatever the case may be. There are both elegant and inelegant examples of practically every design pattern you care to mention. No, I am not going to educate you on them. Spend more time looking at code. I personally find object literal to be a very powerful and elegant solution to a variety of programming problems when used by someone who knows what they are doing with it. 
Okay. Well, you can doubt what I've seen all you'd like but that's also an uninformed statement as you have no idea what I've seen. It's really just a matter of preference. I prefer my code to look like javascript, not JSON. It's easier for me to write and easier to read. I prefer to use events and context manipulation instead of object literals and passing around dependencies as arguments because it's basically as decoupled as an application can possibly get. I agree that object literal can solve a lot of problems, but they aren't programming problems, they're javascript problems...and usually browser problems at that.
Wouldn`t a similar application to gmail in java/c++ be a desktop application? I'd say a web application based email app like the modern gmail can only be done with js, or something that emits some js at some point (which might be what gmail does, have some orchestration in place that generates the js from a large oo codebase or directly from the data). We need an AMA with a gmail engi to enlighten us ^_^
I used this to learn HTML &amp; CSS. Great first book. I highly recommend the Head First series for fun introductory programming books.
Right here: var d = new Date(pts[0] * 1000); That's instantiating a new Date object and the variable they're passing in to the constructor is likely a [unix epoch time stamp](http://en.wikipedia.org/wiki/Unix_time), due to the fact that they're multiplying it by 1000 and the unix timestamp is in seconds while the constructor of the Date object requires milliseconds. Where are they getting this timestamp from? Apparently a file called "keystrokes.log" which uh... sounds a bit sketchy. var f = fs.readFileSync('keystrokes.log', 'utf8'); Unless you meant to ask where exactly "keystrokes.log" is being generated at, in which case I have no idea. It doesn't appear to be specified in that code. The code you linked appears to simply parse that file and generate output based on its contents. 
This kind of things could be a great use case for \_\_proto\_\_. With something like function Observable(obj) { var watchers = {}; var original = obj.__proto__; var proto = { __proto__: original, addWatcher: function(method, callback) { if (!proto.hasOwnProperty(method)) { proto[method] = function(){ // do something clever with obj "previous" state var ret = original[method].apply(obj, arguments); // do something clever with obj "updated" state // loop over watchers[method] and notify as needed return ret; }; watchers[method] = []; } watchers[method].push(callback); }, removeWatcher: function(method, callback) { // do the opposite of addWatcher. delete proto[method] if appropriate. } }; obj.__proto__ = proto; return obj; } You're inserting a custom object on an existing object's prototype chain, preserving all its existing behaviors, yet allowing you to supersede them at will. In this sample, you end up being able to attach watchers to any method belonging to a prototypically-built object, be it Array, Date, or many others. The performance profile would be generally much better, since no extra work is done unless there's a watcher registered for a given function call. Just one tiny little downside: This only works on javascript environments that understand __proto__, which essentially excludes IE browsers to date. But presumably, that will change someday, and this kind of approach will make a lot more sense. Still, node.js and such can totally use this right now. 
Yeah I agree. You shouldn't mix them. But I think for the sake of a style guide, it would be nice if they said use spaces XOR use tabs. If it's a generic style guide and not meant for a particular project, I guess it doesn't matter though. Section 3.B is valuable, no doubt, I just think it would be better as an appendix or even a different document. As a style guilde, it's a little confusing because I can't tell if they're endorsing code like: +string++; +bool === number !!~array.indexOf("c"); ~~num; My feeling would be that those are all confusing/weird ways of doing pretty simple operations so they shouldn't wind up in a style guide. But either way, it's a valuable reference. I've always liked: typeof NaN; //"number"
I don't really see the point in applying public style guides to your programming habits. Code style is something that should be agreed to with your team and every rule should have a specific purpose - when you're following rules for the sake of standardization, people will find it patronizing and ultimately draining and counter-productive. I know I have. Establishing and enforcing coding standards is all good and well, but don't make the mistake of thinking that it'll make you a better programmer. 
Code style should be decided on within the team your working with but I think its a good idea to look at other style guides to help make your own. Following standards does make you better programmer because if the code you write is more easily understood by others (which style standardization helps with) then you can be more productive within a team.
If you unquestioningly follow coding styles then I agree that it inhibits learning and doesn't make you a better programmer. Your making the generalization that there isn't any discussion or thought going on about these styles which I think is incorrect in most situations.
I don't think all the extra white space in statements/control structures makes the code more readable, rather, I think it makes it **less typeable**.
It's a good starting point, although, I disagree about var assignments, I prefer multiline var. var thing, that vs var thing var that The reason why I disagree is because when yanking variables around, it's much easier to move one complete expression verse half an expression or part of one. This doesn't include/exclude good practises of where to place your vars.
The majority of your time is invariably spent reading code, not writing it. Writing a few extra spaces so your code is more readable is always worth it. This is especially important if other people are going to be reading your code. I would posit that the majority of people would say that something like for (var i = 0; i &lt; 5; i++) is more pleasant to read than for(var i=0;i&lt;5;i++) Plus the spacebar is literally the largest and easiest key to hit. Typing a space takes less time than any other character. The pros of readable code are so much greater than the cons.
+1 for egyptian style braces!
The spaces vs tabs thing is a religious issue, so if the doc picked one, it could potentially put off 50 percent of potential adopters.
does someone found something similar for CS?
I put a line break after *var* as well so each variable has its own line without a keyword.
Although it uses an object rather than a primitive (and thus is slower though the engine might compile it out) &gt; txtBool = String(bool); is even clearer.
Considering this is a 'style-guide' i think it really sucks that they're using 2 spaces and not 4 for indentation.
The only way right now is to render the same content on the server side. There's no other way. Some folks tried to fix this problem by creating projects like Backbone Everywhere http://www.idiotz.nl/2011/08/28/backbone-everywhere/
It's a matter of taste anyway.
It's important to remember that when you move your variables around in they're scope, javascript declares them at the beginning of the scope regardless of where you put that declaration ([see first answer for an example](http://stackoverflow.com/questions/1236206/one-var-per-function-in-javascript)) That's why I always stick with the 'one var per scope' rule and I always put the var statement above everything else.
This is one of the better guides I've seen: http://diveintohtml5.info/offline.html This one is also great, and how we all feel at times: http://www.alistapart.com/articles/application-cache-is-a-douchebag/
Agreed. People claim that the method of putting the opening brace on its own line is much more readable, but personally I find the complete opposite to be true for me.
Or, get yourself a decent IDE which does all the formatting gratis. I use WebStorm, and it's the bees knees.
That's another good document. The only thing I prefer to change about it is newlines for else. When I see something like this: if ( condition ) { Operation(); } else if ( condition2 ) { Operation2(); } else { Operation3(); } I think the code is getting too spread out. It makes me want to scroll or reduce my font size. I like conserving the vertical space. It also puts the else if case on equal footing visially to me and connects the group. if ( condition ) { Operation(); } else if ( condition2 ) { Operation2(); } else { Operation3(); } Thanks for pointing that doc out. Bookmarked.
I've recently switched my vimrc file to shiftwidth of 2 spaces and I've found it to make things a lot more readable than my previous 4 space shiftwidth.
&gt; I know close to nothing about javascript. Imagine, for a moment, that this was a forum dedicated to civil construction. Someone posts a picture of a building, nothing ridiculous or overly huge, but perhaps a standalone Apple Store. "I know nothing about steel fabrication or glass, but can someone point me in the right direction to build this?" Why yes we can. Architecture School. Or to be more precise, take your idea and put it on the wall where you won't forget it. And then start small and take it step by step. Grab some tutorials and work your way through them one by one.
Just because the language works that way doesn't mean we have to hinder code readability. Most modern IDEs and static analysis tools can identify using an undefined variable, so why ruin maintainability? Paired with option strict and we really have no use for this rule.
This is the style guide that Google uses internally: http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml
Ugg, I hate extra white space like that. Parenthesis don't need interior padding (a + b) good ( a + b ) annoying I don't find any readability improvement in adding interior padding to parenthesis. It is just more junk.
It's just non-idiomatic. Although I would prefer a language to have 2 space indents vs 4, what I really prefer is people not try to diverge from what the rest of the community is doing. The vast vast majority of the js community uses 4 space indents.
but only the 50% that are wrong
I saved this link a while back to take a look.. not sure if this is exactly what you're looking for but I have found it to be incredible for debugging AJAX. Here you go [httpfox](https://addons.mozilla.org/en-us/firefox/addon/httpfox/)
Since my original post didn't explain it well enough, let me try again, expanding upon things I guess I implied. I believe I need to setup a var for bar1 which is 1-9. For example, if I click "3" that would change wave1bar1 to '**var wave1bar1="3"**'. That would then cause the **red outlined area** in the image to pop down, allowing for the customization process of **wave1bar1**. separate vars for each of those text boxes **wave1bar1quant**, **wave1bar1worth**, etc. I'm unsure how you could loop the var **wave1bar1** to create an infinite amount based on clicks mentioned in the **blue area** on the image. **wave1bar1="3";** **wave1bar2="4";** ... **wave1bar18="2";** etc. Then once you click "**Next wave**" (green area in the image), You're no longer modifying wave1. It shifts to wave2 and starts on bar1. **wave2bar1="5";** **wave2bar2="1";** ... **wave2bar18="6";** etc. This doesn't seem too difficult to me. I've coded hundreds of php scripts and this seems very easy, it would just take a while to organize. I assumed, perhaps wrongfully, I was implying all of the above text in the image. I wasn't simply posting an image of an apple store, there's actually detail in there for what I'd like to accomplish.
Only because js requires them for correctness.
w00t. I was hoping you had a chance to look at it. Glad you did. As an aside, if functions being passed around as arguments to other functions speaks to you, check out raganwald's posts about [taking it much deeper](https://github.com/raganwald/homoiconic/blob/master/2012/12/combinators_1.md).
If you have any specific questions, send me a PM. I work with Backbone quite a bit. I'd be happy to help in any way I can.
I second that motion. I found angular a few months ago and am loving it.
&gt;Type Checking &gt;Global: &gt;typeof variable === "undefined" &gt;Local: &gt;variable === undefined Nope. Chrome will throw an error. Always use typeof for checking undefined. Besides, why the inconsistency?
I like Google's JavaScript dev style guidelines the best: http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml
Give me a one liner, or something... inspire me.
I guess my issue is... if it's not that hard to make the attributes HTML5 valid just by adding the data- prefix, and it will make some coders lives easier, why not do it?
I never like constants, gladly in Ruby they are changeable. But who's assigning css directly instead of adding a class to an element?
You can scope angular to a particular element and not just HTML. For example, you can apply ng-app to a div and only that div will be bootstrapped. You get the entire angular experience, binding expressions, controllers, injector .. only on that div.
Thanks, that makes it clearer! What happens when I add in new JS dynamically? Let's say I'm working with some other templating library and I write a template including some elements with ng-* attributes, then use innerHTML on the parent element to put it in the DOM. What do I need to do to have Angular "do its thing" on my new elements? Are there global listeners waiting for new nodes to be inserted possessing ng-* attributes and handling them at insertion or do I call a specific method provided by Angular on the parent node and Angular processes the DOM that was just built, destroy it (if necessary), then recreate it?
I only repost when I add new features.
So you can use data-ng-model like I asked, and it even says in the link you gave that it's for purposes of validation. Nice. Though it looks like you can't do it for the initial ng-app call?
&gt;Though it looks like you can't do it for the initial ng-app call? `&lt;html data-ng-app&gt;` works fine: http://jsfiddle.net/jhv9S/
I know you said "The JQuery implemetation was to clunky and choppy. Plus it faded to fast." You know you can control the speed in jQuery, right? I squeezed 40 lines of your JavaScript code into one jQuery line, and set it for 5 seconds. code - http://jsfiddle.net/D3aJt/ result - http://fiddle.jshell.net/D3aJt/show/
Nice. :)
google closure has something even sweeter, defines. these are constants you can declare then pass into the compiler and have your code branch around them (eliminating dead code) there is a bunch of defines already defined for you, so you can branch around browsers (and compile minimal versions for certain user agents). we use the feature a lot for example propegation between different environments (ci-&gt;dev-&gt;qa-&gt;production) we compile in kind of different file path differences which might exists. Also things like debug = true/false allow us to drop all our debug code easily. anyway. 
Thanks for the fast response. I will give that a try.
I finished up this [backbone web application](http://delmarhealthcare.com/) earlier in the year. Most of the interesting functionality is contained behind a login, but you can see the basics of our approach to view rendering and a few composite views on the main page and the unauthenticated nav. To get started, pop open the web console of your choice (Chrome Dev Tools / Firebug) and check out window.APP The interesting backbone app code starts in the [minified bundle on line 11939](http://delmarhealthcare.com/galaxy-web/assets/unauth.js) If you are using Chrome Dev Tools you can use the [Pretty Print button](http://cl.ly/image/1m1k3R3f0s3w) to unminify the bundle. Some interesting pieces of functionality you might want to dissect: * The [Product Search page](http://delmarhealthcare.com/galaxy-web/#/products) which features a little netflix type product browsing widget * An [individual product details page](http://delmarhealthcare.com/galaxy-web/#/products/details/9781601515964) Relevant code bits you can poke at in the console for those examples: APP.Views.NetflixBrowser APP.Views.ProductDetails
Thanks for the help. Ya this is my first chapter getting into javascript and it didnt explain anything about images in the chapter. I was just guessing at what I had wrote. I have not gotten into functions yet. Think that is next chapter. I just thought there must be some simpler way of defining a variable with an image like you can put text in the definition and it will show up in the textarea. I didnt think the instructor would want me to use functions since we havent went over it yet. I will probably try it though cause I am not having any luck any other way.
Get your JS out of the HTML. Quit calling your get element function so much.
I knew that UglifyJS supported defines (I actually wrote about that here: http://jeremyckahn.github.com/blog/2012/07/01/treating-javascript-like-a-30-year-old-language/), but I didn't know that Closure Compiler did as well. Thanks for the heads up! I love UglifyJS and use it for most of my pet projects because it is so fast, but my biggest gripe is that it does not support annotations and type checking.
&gt; As a last resort, create an alias to this using self as an Identifier. This is extremely bug prone and should be avoided whenever possible. What bug?
the closure compiler is vastly superior imo. static analysis with proper annotations alongside with the compression (and actual speedup of the executable is amazing). the other thing to consider is that the source maps which the compiler outputs work with the chrome debugger. very handy.
Ok, I added the spaces now the code is readable.
Anything you can do with a function you can do without, it'll just be more repetitive.
It's increasingly common in this 'new wave' of projects, but 2 space indents were hardly ever seen in old projects. If we could somehow calculate this it would be very noticable.
Let it get going a bit.. The beginning of the song is a little dull and thus not much activity. 
Here one I made to show a friend. May not be perfect, but stresses all the novice points https://github.com/framerate/blackjackjs Let me know if you have any questions!
Nice concept, although users need to mark the warning `Security: need a way to lock down notifications so that only auth'd users can send them` since this (now) basically boils down to injecting yourself an XSS back-door in your webservice:) 
Thanks! Any ideas on how I can lock it down? 
Thanks, I am just trying to get a handle on how to write javascript without using jquery.
It is in the html so much to make it easier for people to look at. I have been trying to learn js, but on the same token it is better to have small js like that on page than consuming another http request.
The reason I did it like this was the code overhead slowed the execution time down on slow mobile devices. jquery worked fine in computer browser, but older Iphones or android phones it basically jumped from 0 alpha to 30 to 60 to 100 and was not smooth. 
Really awesome tool! I'll definitely start using it in my projects. Also, I had never heard of alertify, so thanks for that!
On page load you could initiate a session serverside and generate a random key. Send that key along with each notification, then have JS only display alerts if it matches the page load one. Optionally, if you are reporting client side javascript errors back to the server (often a good idea) you can generate an error report anytime a user receives an invalid key. This will let you know if people are trying XSS attacks.
That works with how much percent of the currently used browsers? 
I implemented this little easter egg on my homepage last year. Just digged up the project page, thought i'd share it this time :) Happy new year /r/javascript!
This doesn't work in Safari (and not just because it was using an OGG file [[MP3 example](http://codepen.io/joe/full/bhHfc)]). It's because `MediaElementSource` is [broken in Safari](http://www.reddit.com/r/javascript/comments/15ao96/is_there_a_particular_reason_why_safari_isnt_able/).
WebSockets !== Socket.IO They don't have to have anything to do with each other. The name of your tool is misleading.
&gt; I just watched the first tutorial on AngularJS. It makes sense, but just to be clear, that isn't valid HTML, is it? Correct, it uses its own attributes (and you can create your own, which is awesome), but, be aware that - Most frameworks of that type make you write HTML that's even "more" incorrect since the HTML is littered with directives that drive the templating engine (e.g. {{#each}} for Ember.js) - As a result, files processed by Angular are much easier to debug because the HTML you see is fully expanded. It's as close to "what you see is what you get" as you can get. 
&gt; Hasn't been necessary since the days of Netscape 4 or something. I'm pretty sure it was Netscape 3 and IE3 or later. e.g. Netscape 2 and earlier had the problem.
In Chrome on Linux it's a little choppy. EDIT: Maybe it's supposed to sound like that. Dubstep is nuts.
dat html
I've actually seen this thing done with EM on very complicated interfaces. Without EM this couldn't have been achieved. Unfortunately I cannot provide any examples atm :)
Globally, about 65%. Depending on your country might be more. Basically everything but IE&lt;10.
Windows + Chrome, volume slider doesn't seem to work. Cool idea though, I like it.
Targeting 65% of people only works 2/3rds of the time maximum.
Very Cool!
it zooms in, but on the right side of the screen, showing only a littlebit of the most left triangle
I don't mean instead of, I mean for the majority. Then you needn't feel bad about including and using jquery, as it's only for a third of users. In a year it will be only a quarter etc.
The sound is very very choppy on Chrome on Linux. What environment are you/your friend running this site in?
pretty cool
Not just JavaScript. Pretty much anything that made your HTML appear dynamic was called DHTML, e.g. dynamic CSS.
I do appreciate the thought, but I think that I can do this same sort of thing with firebug. 
For me Chrome (latest) and Win 7 it works fine. I presume he is use the same setup. I'm sure he will appreciate all of this feedback. 
Downloading each image is definitely the thing that's killing it. The limitation is the number of HTTP requests you're making (700 requests) rather than the size of each frame. Why not just make it a video instead of a HTML5 animation? If you're expecting HTML5 animations to work (so you don't need older browser support), then just use HTML5 video instead. Most newer browsers have built-in video codecs now, so just convert your animation to a video, and it should work out of the box.
Hahah. I was also wondering about the decade I last heard this.
Actually, valid JSON syntax requires double quotes around the key, also. The name as you use - "like" - is a string. Strings must be quoted. http://tools.ietf.org/html/rfc4627
The simplest solution here is to have a class on the element that you want to manipulate. For example, `&lt;body class="bg-1"&gt;`. Then when your event is triggered, change that element's class to `bg-2` or what have you. In the css, you'd define `.bg-1` and `.bg-2` to have different background images.
Other terms for it include 'AJAX' and 'HTML5'.
Seems like this is more of a string concatenation question. The example is just showing how to set/get items from local storage. Though, you can use the alternate syntax that's a little easier. This article's pretty good: http://www.sitekickr.com/blog/html-5-storage-better-cookies/
I agree it would be easier if it didn't require quotes like that, but it's just using the standard JavaScript parser: JSON.parse(); Take a look at http://jsonlint.com/
Big +1 here, declare vars directly before using them and no sooner. If you refactor it's much easy if all the code is contained within inclusive lines (and don't require you to modify bits of code outside of the current section you're working on).
So, you agree that multiline var statements are a good thing? More reading: http://benalman.com/news/2012/05/multiple-var-statements-javascript/ Crockford says avoid commas: http://javascript.crockford.com/code.html#bonus
It doesn't matter how you store the image; if it's a bunch of discrete frames, you're asking for way more bandwidth than that network card can provide. Either use a movie format, a radically lower framerate, or switch to vector.
The JS for the click is sound, but I would prefer to put all the styling in the CSS (i.e. Like the second answer here by joshuacc) 
No, I'm against multiline var statements. Personally, I couldn't care less what one does on their own project, but in a team setting I don't support their use. You're confusing me though, since your initial position seemed to indicate that you were _for_ multiline vars (_"I prefer multiline var"_), but the first link you provided actually seems to provide many arguments _against_ them. To make it even more confusing, the Crockford link actually _supports_ the use of multiline vars. From my POV, it seems like: * You are _for_ multiline vars * Alman is _against_ * Crockford is _for_ * I am _against_ Is it a discrepancy in "multiline var statements" (1 single use of `var`) and "multiple var statements" (as many `var` as needed)? Those are the 2 concepts, confusingly named similarly.
Hey, sorry about that I failed with the formatting, here is a jsfiddle link with the HTML / CSS / JS for the specific part, I tried this method and no luck, so tried this and still no luck :S http://jsfiddle.net/xXzuD/
Or better yet, Samantha Fox!
Dynamic HTML
We are going to use video for browser because it supports autoplay/hiding controls for a seamless experience. I'm trying to come up with a solution for mobile as autoplay is disabled.Video plays fine on mobile but would require user interaction and I want to mitigate the chance that they do not view the content (the people who will view this are very basic internet users) there is no audio attached either.
When you say vector you mean SVG? Right this moment I'm trying to encode the images into base64 and place them in one css/json file and either load them into canvas or something else does this sound like it might work? I just cut the framerate to about 12fps maybe that will help as well. Thanks 
Care to elaborate, I am just learning and it could help me.
This is spot on, and I'd definitely recommend the OP to take the advice. Even if you do image encoding, you're going to kill a data connection from the amount you need to download. There's a reason why autoplay is disabled on iOS mobile devices. The extra user interaction to play the video is worth the few minutes it might take for the user to actually load the page your animation is containing.
After reading the comments in the [same thread posted to Hacker News](http://news.ycombinator.com/item?id=4990327), it seems you can get the eBook version [directly from Manning](http://manning.com/resig/) for 50% off (~$16) if you use the code "bestof2012".
I go to RIT, as I read that I thought to myself "We have those! And those! And...oh"
Honestly I just wanted to make sure that I covered all the bases as I am fairly new to safari mobile. I will put up the video for now as it is the best solution and play around with vectors on my free time. Have you patented your steel box technology? I could just imagine having a meeting with clients, "Let's get started please take your ipads and place it inside the steel box in front of you to view your website" haha. Happy New Year!
Webserver, why? If it's just html, css and JS/jQuery you wont need a webserver, those can be run locally and on basically any webhost. No need for php, mysql etc. But yeah, very hands-on tutorial for total beginners so far, I would've posted it up on /r/edmproduction or somewhere not related to programming.
Okay, well I wouldn't have introduced that yet since it comes a lot later down the road and is no use to the user but it's your call :) The text was easy to follow so I guess it should be quite a good tutorial for someone who doesn't know these things.
If you know what the right answer is then why would you bother with sloppy invalid crap at all regardless of the doctype? I really do not understand this line of thinking. Its not as though writing valid code is a monumental increase of effort and an incredible technical challenge like breaking encryption.
the format for the tutorials are way too confusing, how many links do I have to click through
No love for Linux?
There's the big "getting started" button on the homepage and I wanted to make sure people read the "read me" first. So including this it would be a total of two clicks Or you could just hover over the "tutorials" tab and start on the first tutorial. In that case it would only be one click. If you let me know exactly what you did when you went to the homepage it would help clarify so I know what kind of a click tornado you went through, hence allowing for a possibly clearer funnel. I know it may sound like a bit of a cop out, but if someone is going to take the time to learn to program they need to be a bit resilient. If the site is too confusing then they should probably go to khan academy or codecadmy. I have no problem with redirecting them there. 
I guess you are joking. This code works in every browser for more than 10 years. Can you please explain me what is "[not valid](http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-17701901)" in this snippet? BTW, using setAttribute instead of using directly DOM properties may be [painful with old versions of IE](http://msdn.microsoft.com/en-us/library/ie/ms536739).
Can you find for me where the standard for ".src" or ".alt" is? I cannot seem to find it. They are not valid because they are not part of the DOM standard. They are non-standard HTML shortcuts that are very risky. Your point about older version of IE only concerns the class attribute. What is actually happening in that case is that the setAttribute method is working correctly and does set or change the value of the class attribute, but it does not update the presentation to reflect a link between the new class value and the corresponding property residing in a stylesheet. The link you provided does not indicate the nature of this problem, but IE8 quirks mode and older versions of IE were using an old parsing scheme that did not operate like modern web browsers. IE fixed this problem by starting over in IE9 with a parsing engine based upon the W3C infoset like all modern browsers.
Did you click the "[not valid](http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-17701901)" link? edit: here is another link to [DOM level 1 specs](http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-html.html#ID-17701901) written in 1998.
That's up to the browser-makers.
Impressive improvement! I'm just a javascript beginner, so please forgive me for asking about something simple... You declare variables at the top with some explicit values like (fictitious example) var a = 1, b = 2 c = 3; function reset() { a = 1; b = 2; c = 3; } This way of doing things, the values are repeated twice. Perhaps I am missing something but, from my understanding of the DRY principle, wouldn't it make more sense to do var a, b, c; function reset() { a = 1; b = 2; c = 3; } reset(); 
&gt;These were services being offered by one or two companies. Now it could be that, i was being told that the work was being done by the engine and intelligently but __in reality it was being done manually__. This is why they were selling you their services and not their 'engine'. 
This wordpress plugin is awesome: http://wordpress.org/extend/plugins/wptouch/ Non-wordpress: http://www.howtogomo.com/en/d/
[Readability](http://www.readability.com/) (now a service similar to Instapaper or Pocket — formerly Read It Later) started off as a bookmarklet that would analyze the document structure and extract what it deemed to be the relevant article portion. It is still available in their [Google Code Repository](http://code.google.com/p/arc90labs-readability/source/browse/trunk/js/readability.js). The scenario is different and it is not a library but it might provide inspiration how to accomplish such a task.
Any automatic stuff like this is going to make a sub-par site. Fortunately for you there are a handful of client-side frameworks that can help you. The first step you need to do is figure out what it is exactly you are trying to do. jQuery Mobile is a bit of a heavyweight, but it sets up styling and touch events, making pages look very much like iOS applications. (It can be customized with your own "themes", but this can take a bit of work.) Twitter Bootstrap (and many others) set up grids that are easy to use for responsive design. This way, you can easily build pages that work well on any size screen. If either of those don't meet your actual needs, please clarify your question with what exactly it is that you want.
Exactly what I was looking for. Thank you!
lanasa answered with exactly what I was looking for, but thanks for your response ;-)
Thanks!
Right. This should all be os-agnostic. The tutorial says it requires a Mac or Windows os. I didn't really read anything past that.
Mobify's service (and open source plugin) are pretty good at this. http://www.mobify.com/
You are referring to the HTML DOM part of the DOM 1 spec and not the core DOM model. This was abandoned when DOM2 was a made a recommendation 2 years later. All I am saying is that the HTML DOM is not a current valid standard and it is risky.
It is? Have you tried it personally? I thought it was more for things like device detection and what not?
I don't see your point. Even the [HTML5 specs](http://www.w3.org/TR/html5/embedded-content-0.html#the-img-element) define these DOM properties. What do you actually mean by "valid standard"? Why using a such stable API (15 years old) would be "risky"?
Yeah, I've played around with it. It's a library that manipulates your DOM before any resources are loaded, using JS templates you define yourself. That way, it can grab, reorder, and re-interpret elements on the page to produce a true alternate DOM for mobile devices, without any special URL. It takes some work to set up, but it's a pretty powerful way to generate a mobile version of an existing site.
You're totally correct. I think I was trying to keep some structure of the initial code untouched to make it easier to see the changes. I had left a bit of easter egg at http://jsfiddle.net/Nha5Z/10/ in the off chance someone would try the url. That version is dry-er, and fixes a few more things. 
ok. thanks for the headsup! Really appreciate it. 
Hmm. I've never tried to solve that particular problem, but my first idea is to try moving focus outside the textarea, doing work on the value, then putting the cursor in the appropriate place in the textarea? edit: nvm, just gave it a go, didn't work.
Source code?
Source is here! https://github.com/colinsullivan/Jnana/tree/master/src
You should try to emulate the EventEmitter API (.on instead of .addCallback etc.)
Have you considered exposing some of the generative features as a nodejs module?
Yes! This is possible currently with potentially a bit of simple wrapping logic. All of the Ableton code is separated from the actual generative logic to facilitate this. In fact, as I was developing I created unit tests that run in Node.js (using Mocha): https://github.com/colinsullivan/Jnana/tree/master/tests
Yep, [here](http://stackoverflow.com/questions/14114124/how-can-i-delete-text-in-a-textarea-in-such-a-way-that-it-gets-entered-in-the-na). One person suggested I just type a null character (`"\0"`), which would look right, but you would still have a zero-width character that you'd notice if you tried to navigate with the arrow keys, and which would bloat the content. My hope is that there's some slightly different type of event I can simulate that doesn't have this drawback. But I can barely find anything about creating events, especially textinput events, online. Which is strange, because everything else about javascript is documented in 500 different places - and this is actually part of the spec.
Also, does anybody know if doing nothing on an empty string is specified behavior or a bug?
I answered this already but deleted my post. You probably have to simulate your edit history instead of using the native Edit &gt; Undo stack. -- TinyMCE is a WYSIWYG editor that does this for example. Download a copy of it, and search for "UndoManager" to find the object that they use for reference.
[The standard](http://www.w3.org/TR/DOM-Level-3-Events/#events-keyboardevents) does not actually define a "TextEvent" event type so any behaviour is fair game. It was in [this older revision](http://www.w3.org/TR/2011/WD-DOM-Level-3-Events-20110531/#webidl-events-TextEvent) of the spec though. So my guess is that it was only experimentally implemented by the browsers and then they didn't bother fixing it because it was dropped from the spec. So really, the fact that the browser has it at all is *technically* the bug. :) The KeyboardEvent interface looks a lot more cumbersome but is presumably better supported. Perhaps sending a backspace or delete key event would work? (not tried)
Hey, this is really awesome. The link to the osx installation guide gives a 404 in your readme. What's the correct link?
Ok cool, thanks for the follow up. I'll check it out. 
Can you tell us more about Ableton Plugins development? And please, link resources which were useful for you:).
Have you taken a look at [ace](http://www.ace.ajax.org)? edit: seems that the website is bugged up for me at the moment, maybe same for you. Console is throwing errors from jQuery and the text editor is not functioning on their page. Even Mozilla have them days it seems.
I like it but there's a couple things that bother me. 1. It looks like bootstrap. For most people this isn't a problem but for people who have used bootstrap it becomes quite obvious what sites are using it. 2. It feels like an empty landing page. Stay tuned for what? Will there be a product here or a blog? Otherwise I like it :)
Thanks. I will take a look.
I think you just changed some text and deleted a couple things on the plain [Bootstrap template.](http://twitter.github.com/bootstrap/examples/marketing-narrow.html)
Also, one should always avoid using "here" as a link. People using screen readers that tab from one link to the next find that confusing, and it's often associated as a rookie mistake.
Design issues aside, it's exactly as relevant to /r/javascript as my resume. Not the right place to submit :/
I think it's saying to stayed tuned to his updates by following him on Twitter. But, yeah, it's not clear enough, especially for a personal landing page. The single most prominent bit of information on a page like this should be your name: you're selling *you*, not the idea of staying tuned to you on Twitter.
CKEditor 4 support mobile devices now, if that helps.
Thank you! This has been fixed. https://ccrma.stanford.edu/~colinsul/projects/jnana/osx-setup-guide/
I just started using [jQuery File Upload](http://blueimp.github.com/jQuery-File-Upload/). I'm pretty happy with it so far. 
looks pretty good. might actually use this in a future projects. gj
Thanks for the reply. I may end up doing that, but the reason I'm reluctant is both because unnecessary code is ugly, and more importantly because of the context menu. Since I can't override the context menu entries for undo or redo, I would need to make my own entire context menu, and duplicate every feature on it. And it still wouldn't be as good as the native implementation, because I would have no way of detecting entries added by extensions, no way of hooking into other applications, and no way of letting the menu extend outside the browser window.
By KeyboardEvent you mean keydown, keypress, or keyup, right? I don't know if I'm doing something wrong, but [KeyBoard events don't seem to be able to trigger a value change](http://jsfiddle.net/d8Mkt/2/).
I get redirected to /maintenance/ with the message: We are working on update Please come back later. New design is coming Please post/repost when we can see the article! Thanks.
Try Google Docs... Same thing. This is a problem that has an established solution: create your own undo manager (with or without the context menu). Go into other popular editors and see what they do. It's the same thing. If you need to hook into other extensions/plugins, they're only going to be making plain-text changes, same as human input. So it won't make a difference, it will still fire a "change" event and be caught by your UndoManager. Edit: [Here's a copy of the TinyMCE UndoManager](http://pastebin.com/hztJb7zL). -- You can see that theirs even works for Non-Typing actions (such as a when a user presses Control+B to make something bold). This should really get you started down this direction if that's what you need.
You're lucky this is Valve's product they're by far the most lenient, but I don't know if your aware how angry some developers could get at you for posting their protected material on the internet. The viewer itself is fine but the content is a no-go legally.
try fine-upload.
Combining Typescript with Google Closure's dead code elimination would be interesting. I expect that Microsoft is currently implementing that in TS tho, which would eliminate the use for Google Closure altogether.
Microsoft and Google technologies working together, love it. Though sounds like t was a pain to get running. The biggest thing that Closure is missing is good tooling, so it'd be quite interesting to see this, as Typescript seems already pretty close to Closure code and I'm betting has better editor support.
I was actually just talking about the compiler but I didn't make that clear. Never used the library but it could be used in conjunction with TS. 
actually that's why tabs are a good idea, because you can configure them to be 2 or 4 spaces when viewing, but it's always just written as 1 tab.
Dude, very interesting idea on making the decrement time sensitive. Also you are dead right on line 52. I really appreciate this feedback! :-D
Thanks! I appreciate it!
This isn't my project, but I think as far as it isn't a playable game, it can be considered as used for advertising purposes. But I'm not a lawyer too;).
Some things won't line up -- like expressions/statements spanning multiple lines -- unless you're using the same tab width as the author. For example, longFunctionName(this.isAReallyLongArgument[aLongVariableName + 10], "Some very very very long string."); 
Right! There's even a [jquery animation library](http://playground.benbarnett.net/jquery-animate-enhanced/) that will use css animations/transitions when available, else fall back to a code way of doing it. 
I'm not sure any of the previously mentioned options support resuming a failed upload. That's a somewhat tricky thing to do. Check out https://github.com/23/resumable.js Did I understand correctly? You want to upload 20gb over a browser? I know this probably isn't helpful, but I think uploading via a browser is probably the worst choice for files that big. If possible, I'd suggest something like an ftp site, which you can then use any ftp client (or even web-based ftp) to connect to. Hope this helps!
This would happen when you are writing elements with a different origin (images or fonts) to the Canvas object, and then trying to read the Canvas element's pixels in any way (which toDataURL does). See http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#security-with-canvas-elements Your current implementation does not include cross-origin images or fonts, so this is not a problem.
Anyone tried any of these?
Here's a nice breakdown of the 2: http://ui-cloud.com/ui-cage-match-bootstrap-2-2-1-vs-foundation-3-2/ No definitive conclusion - they're both pretty good. Some helpful comments here as well.
Since you are using backbone, you could just use [throttle](http://underscorejs.org/#throttle) or [debounce](http://underscorejs.org/#debounce) to achieve this same effect on the specific event you are trying to limit. Modifying Backbone.Model.prototype seems like using a shotgun approach to a design problem.
I use bower and I like it. If anything, it's a faster way to include common libs like jquery and underscore. 
Great review of an excellent book - I cannot think of a more valuable JavaScript book to own. I look forward to the next edition when ES6 is finished.
Thanks for this. Was looking for something more than an amazon paragraph.
I'd be really interested in working on a JavaScript API for Ableton as well, maybe send me a pm on github? My username is bruno-c. 
When our company looked at the two (as well as skeleton) we landed on Foundation, and it basically came down to "feel" as the tie-breaker. Foundation feels more comfortable to use and extend to us. It was very subjective and what I mean to say is that they will both do what you need and you should try them both out and see what fits your style.
The link I sent is an example of that technique. Look at badges specifically.
You're missing a { in front of the "else" statement before the alert. Also, your for loop syntax is wrong. http://www.w3schools.com/js/js_loop_for.asp edit: In case you want to see it. http://pastebin.com/6ANavbWk
The hapless language Nazi in me needs to point out: Catenation should be Concatenation. It's incorrectly used in the article 4 times. (catenated, catenation) (While both could "technically" be correct, concatenation is more widely used in programming. Catenation is primary used in chemistry to describe covalent bonds.)
Nothing wrong with your suggestion. Send me a pull request, it's a github repo! EDIT: Never mind, done!
I really need to look into pulling and posting articles on github! Thanks! (but you missed two catenations /grit_teeth) I assume it's a simple clone and commit like any other source code? (edit: except, I can't push because I'm not a contributor... man I need to contribute more often outside my circles. e2: request submitted!)
this is fantastic, really helpful for something I'm working on right now.
fork and submit a pull request!
This confuses me a little being a post in the Javascript subreddit. Are you asking what are the JS differences? I'm going to assume not, so here's my general take on the two: * Bootstrap tends to have more opinions on how things should look. It definitely "tries harder" to enforce a design, which can be a good or bad thing, depending who you are. For myself, because Foundation imposes less of itself on my work, I tend to lean towards Foundation. * Foundation has a nice collection of Javascript, erm, "widgets" (we'll just call them that for now), including orbit, reveal and joyride (that I've contributed to a couple times! Yay!). Bootstrap has a couple as well, but they're not as "high level" as what orbit or joyride are doing (if you need that stuff) * Bootstrap is built on LESS, Foundation on SASS. At the end of the day it totally doesn't matter, you can include them in your LESS or SASS files regardless of what they're built on. * Bootstrap uses a grid based on span*, meaning span1, span2, span3 classes. Foundations is a *little* more semantically pleasing, using "one column", "two columns", "three columns", etc. Hover, neither are using my personal favourite, "one-third", "two-fifths", "half", etc, so it's a bit of a wash. * Both are responsive, but neither are mobile first. Mobile can be a nice idea, since it theoretically leaves less work to do for the devices with less power. Niether win in this category, both have forks which provide that support, but getting off the beaten path for some of these projects can mean you might be behind the update curve. Honestly, they're both excellent. I actually use both, changing between them based on the kind of project I'm working on. If I want a nice basic setup for a site that isn't going to completely break all the rules, I'll use Foundation. I'll typically roll with Bootstrap for anything which I'm just looking to build a nice administration interface for. And if I'm working on something which is going to just go completely off the wall, I'll typically roll all the code myself, or pick and choose what I want from [inuit](https://github.com/csswizardry/inuit.css).
Thank you. It works now!
I'm a big fan of [dotjs](https://github.com/defunkt/dotjs), so I wrote an app that does the same sort of thing in iOS. It's not great, and I haven't put a ton of time into it, but it works. I originally created it out of the desire to have my [CouchPotato](https://couchpota.to/) scripts injected into the mobile pages I was looking at on my phone. One thing that I think might be helpful to mobile JS devs is how every page loads default.js, if such a file exists. During testing I dumped the [cordova-weirne](https://github.com/apache/incubator-cordova-weinre) client script into default.js so I could inspect every page loading. It made debugging scripts pretty easy. I really aimed at getting the functionality done, and I know it's not pretty. Just looking for feedback on what sorts of other functions could be useful. Thanks!
You're looking for `.value` http://jsfiddle.net/Xn8AS/ On click, you take a value (`input1`) from the input you want to copy and set it to another value (`input2`) to where you want to copy it. In this case, these values represent text boxes.
Or perhaps he means... the user can click in the textbox and the data is copied to the clipboard, not another box. Like these buttons: http://scriptsrc.net/ 
I've also seen the bang version: !function ($) { // ... }(jQuery); which seems to achieve the same but with no parenthesis around the function expression. 
I think I finally found a pro to publishing an article on github rather than on a traditional blog.
That makes much more sense. 
I'll just leave this here... http://w3fools.com/
I'll just leave this here... http://www.w3-tools.com/
Awesome!! :-)
Sorry to be stupid, but how do I get this on my phone?
Currently you would have to be an Apple developer. I'm working on pushing it out to the App Store though, so people can install it easily.
I'm a programmer first and a designer.... never. If you have a good design, I'd be more than happy to replace it!
What do you want to use your hypothetical format for?
You could look into a serialization library for a (js-based) AMF library. I know for a fact that in AS3 it will let you: byteArray.writeObject(myObject) with any arbitrary object. See [here](http://www.jamesward.com/2010/07/07/amf-js-a-pure-javascript-amf-implementation/), [here](http://www.adamia.com/blog/high-performance-javascript-port-of-actionscript-byteArray) or even [here](http://jacksondunstan.com/articles/1642) for more and info and maybe something you might be able to use. Good luck!
That would require me knowing what you meant to write.
that's too heavy-weight
Ironically w3fools is the outdated site now... Give it a look. You'll be hard-pressed to find something listed that hasn't been corrected at w3schools. That being said I still prefer MDN as a resource.
Maybe you should try it first. I used to use Spine, and I was a big fan of how lightweight it was. Then I needed to build an actual application, and I found out there are so many things missing. The solution is to build packages, such as yours. The thing is, when those modules add up, you have a huge mix of all kinds of code, which is a total mess and I would rather become a farmer than work with it. Anyway, now I'm using Ember.js, which is quite big, but the code is beautiful, consistent, and all of it is useful. Either way, upvoting your original post because it's the right idea, it's done very similarly in Ember.js: &lt;h1&gt; {{view App.BackButton}} Edit page &lt;/h1&gt;
Actually, this thing comes out of an experience of building actual applications — naively speaking "write code, discover patterns, extract patterns into reusable pieces". I've found out that Backbone is quite good with this approach — it allows many different reusable and *orthogonal* patterns to be composed inside single application. I understand that there's also a different approach — to use single framework with more features out of the box. But, I think, it doesn't come without its own cost. That usually means (1) you have to structure your application code in some predefined (by framework) way (2) you have to deal with features you probably don't need yet or at all (3) in the future it might be possible you will fight framework to do what you want. I don't speak specifically about angular.js and ember.js but that's just my experience of using big monolithic frameworks.
Umm, we can't really give much details unless we know what you are using. First off, what do you mean by 'Javascript-called popup'?
Such a format seems of very narrow use. So you'd probably better define it yourself. You could use special keywords to indicate blobs, regexps and any specific type of objects (e.g. "_regexp:a*"). To deal with cyclic objects, I would first find them (see [this related question](http://stackoverflow.com/q/13861254/263525)) and then put them in a table and replace their occurrence with some pointer (e.g. "_obj:2").
In the screenshot, if I press the button circled, a popup happens on the page. This is good and intended. And you can see the javascript in the status bar (circled) in the screenshot. What I am trying to do is to create another link on a different page of my website that forces the same popup to appear...I don't want the user to have to go to the page pictured to gain access to the button. I would rather present them a different imaged button that functions the same way as pressing the button on this screen (pictured). But, since it's not an actual link (i.e. http://xxxxx), but it's javascript being envoked, I can't simply copy the target to pop it up (which is, essentially, what I want to do).
Okay, got it. Try something like: &lt;a href="javascript:void(0)" onclick="function() { ... }"&gt;...&lt;/a&gt; Inside the function (`{...}`), place the URL that you get from the button, but remove `javascript:` from it. It's worth a try, not sure if it will work.
It depends on what's happening with that link. That link is likely going to trigger some sort of post (hence the call to __doPostBack). If that popup needs data posted to it to load then you're (mostly) out of luck. If it doesn't you can grab the URL that's used in the popup window and then just link to that directly. Firefox has a setting under content that disallows javascript to hide the URL bar. If you enable that and open the window you can easily get the URL.
this is slowly becoming one of the most reposted links http://www.reddit.com/r/javascript/search?q=grapnel&amp;restrict_sr=on
and yet another shortcoming of backbone. The most important feature of an MVC is data binding. Backbone is good at a first pass to split up data and views, but if you used any other MV* out there you wouldn't even need to think about this.
here you go: (1) you are structuring your application a specific way if you're using Backbone. More impotantly you're taking in jquery and underscore at the very least. If you're not structuring your application to work well with Backbone then chances are you're structuring your program the wrong way. Making code work with the libraries and frameworks supporting it is a good thing. (2) you don't have to deal with them. They just don't get used. And if you use the development code for the framework, chances are you can use dead code elimination from a compiler to fix the size. If it hasn't been written for you, then you have to write it. Besides, it's a good thing to know about a feature rather than wishing you had it later. (3) If you're fighting your framework you're doing it wrong. Most frameworks come with a system for plugins, or write customizations or at least have an inheritance system so you can subclass and modify (or decorate) functionality.
I loved using [r18n](https://github.com/ai/r18n) for translating my web app. But I needed to access translations dynamically using JavaScript and wanted to update the language without reloading the entire page, thus I developed x18n. I think it has some nice features that I didn't find in other JS internationalisation libs (dynamic data bindings, based on an event system, no opinion about views). It's well tested (1.4 to 1.0 test coverage), but I'll refactor the source a bit soon.
Here is an other example of how the code could be written https://gist.github.com/4458317
Added a test case and a fix for multiple calls for release!
Reviewing that gobbledygook, I think I'll place an order for "Effective English." Thanks for the heads-up.
This looks really well done and definitely the right idea. Looking forward to using it.
I don't see how this is a shortcoming of Backbone. render() is described in the docs as something that should be ready to be called repeatedly. initialize() is the method that should be used to create the initial DOM that the view manages. edit: re-reading the docs, I don't see it mentioned that render() is intended to be used repeatedly. I think I must have gotten that from tutorials, or from working with other libraries.
Time for github to add a &lt;link rel="canonical" ...&gt; and for reddit to notice it!
So you'd characterize Ember.js as a successful conglomeration of those modules? I can accept that. I mean, I don't trust Ember at all, but I'd prefer to use it than Angular. While I have you here, can you verify or debunk this statement on Ember I reached a while back: &gt;It seems to me like Ember just gives templates access to some or all of the javascript namespace. This falls under "cool magic" to me, if it really is done that well. I'll be sticking to Backbone for as long as I can resist, but I'm watching Ember more closely than anything else. 
&gt;The most important feature of an MVC is data binding. This is a very curious statement to me. I don't believe MVC traditionally uses the term "data binding," and even if "data binding" could be used to describe a core theory of it, it would be very different from the data binding used in browsers today. But then, I'm of the sort that thinks no one's really using MVC in the browser nowadays. If you try to tell me that Backbone is MVC I will surely and strongly disagree. Data binding in the browser today means simply that DOM and {} are automagically kept in alignment by the framework. For Angular this takes 14k LoC, for Knockout it takes 3.3k, for Ember it takes what, 22k? (Don't think I'm measuring LoC efficiency, my favorite of those three is Ember.) The reason you wouldn't need to think about it in those frameworks is that those frameworks all present solutions to Backbone.render; by which I mean, Backbone.render leaves that problem unresolved. To be fair as far as Backbone is concerned, rendering is the most glaring shortcoming. 
I get the feeling that this person has never written a spam bot. There are some significant problems. Firstly, the author seems to think that the bots are AIs that learn when they encounter forms, when in actuality, someone modifies the bot for a specific form. And everything that was proposed would be super simple for a human to code a robot to circumvent. 
Nice. I wish I had more to add but I'm quite a few beers deep, niceeee.
You aren't going to get any help by pasting a bunch of code. Host it somewhere like codepen.io or jsfiddle.net so people can actually debug it.
Seems similar to: https://github.com/marcelklehr/html10n.js which is forked from https://github.com/fabi1cazenave/webL10n and supported by http://translatewiki.net (translator used by Wikipedia etc) We use it in http://beta.etherpad.org you can see our implementation at https://github.com/ether/etherpad-lite
Hi! I wrote this a while ago, and got around to rebuilding it so it makes a little more sense. (And added better tests, and a code coverage checker.) It's for managing events so that you don't have to deal with massive volumes of callbacks, and so that you can add on, remove, and update events at any time. It supports predicates, too, so you can keep your code clean and simple, and break the logic away from events. I've published to npm with this version, too; all you have to do is `Mediator = require('mediator-js').Mediator;`, and you can pubsub within node.
How about [jsPlumb](http://jsplumb.org/jquery/demo.html) ?
Thanks. 
Thanks, that looks pretty close to perfect - I was originally thinking of something more general purpose like raphael but this looks much closer to providing everything I need for this component out of the box.
If you can run this script from a website, there's a chrome extension called [script-cover](http://code.google.com/p/script-cover/) which can help with the code coverage.
http://www.lassalle.com/ AddFlow for HTML5. 
1.1) yes, currently it does that behind the scenes — you get entire view hierarchy re-rendered and re-instantiated on a re-render of a root view 1.2) but it can be easily be improved — we can cache already instantiated subviews and their DOM elements. 1.3) At the same time, I think, it is more important not to re-render views at all but instead use some data-binding between model and DOM elements inside view. With Backbone.ViewDSL it is even easier because it is entirely DOM based and it even generates separate TextNode for every interpolated value. So the idea I have is to introduce some syntax for interpolations like `{{bind:model.title}}` which will trigger a code like this: class MyView extends Backbone.ViewDSL.View ... bind: (node, model, fieldName) -&gt; this.listenTo model, "change:#{fieldName}", (value) -&gt; $(node).text(value) ... 2) The current motivation is that views can be instantiated by a class residing in an AMD module, so I need to use an async API to access it. I also have models and collections maintaining their own states and knowing how to get data from server but at the same time it's up to views to initiate such processes and they do it during "render" phase.
Any unary operator can be used in place of ! My fav is the tilde :D
Thanks a lot for your feedback!
And separate your html, javascript and styling.
[Flot charts](http://www.flotcharts.org/) gread documentation, and easy implementation. Used on a project and i found it easy to set up.
These are graphs, not flow charts. If I'm creating graphs I'm using [highcharts](http://www.highcharts.com/) every time.
My biggest complaint about it is that you need to specify a fixed width for the container, otherwise it's great.
Very cool. I'm using jscoverage to run the tests through bash and build an html report.
Yea but you can easily calculate the width with javascript i used it with bootstrap and it worked pretty good . 
Yep, did the same, in Bootstrap as well :) But a fluid chart out of the box would be nice.
Good Article and this is the 3rd Prototype : http://prototypejs.org/ Cheers !
Thanks for sharing your view about this. What are the other significant problems?
You might be interested in learning about implementing a [Naive Bayes classifier](http://en.wikipedia.org/wiki/Naive_Bayes_classifier). It basically is trained on an existing large dataset of spam and non spam, then makes a probability of spam/not spam based on the tokens (most cases words) used. Hardest part is a good training set. Of course you're going to have to have somewhere to process and store the data, rather than hooking into an api or something.
You dont mention server side secrets. You cannot, I repeat, CANNOT, keep secrets on the client side alone. The text in the CAPTCHAs are not sent to the browser, it is kept on the server. Every approach you offer has no secrets stored on the server that could be passed to the client in an encrypted or protected way. That is unacceptable and incredibly easy to bypass. If your slider had images instead of numbers, and the users are prompted with another similar kind of image to match it. (match one kind of soccer ball to another, or better yet, match the soccer ball to the soccer player). Also you 100 scale, divided by 5, is 20 options, then you subtract 3 we are at 17 options. If we take a very very very conservative estimate and say that a bot can make 3 attempts at the form a second. It will take under 6 seconds to pass your test using random guesses. Even your double pass there are only 289 options, 17*17. It takes just over a minute and a half to pass this test, on the high side. And that is with doing completely no bypassing of the test. Even with the secret method of using images and human matching (soccer ball to player) if the robot is only presented with &lt;100 options it is easy to bypass with random guessing. The method with actual server side secrets but limited options might be good for low profile systems, like a comment wall for a small blog. This would not be enough protection for the comment wall on CNN. And definitely not enough for the authentication of facebook. You should look into video Captcha, they are great, really easy to use for humans almost impossible for computer, the real issue is that the tech needed for it is not fully cross browser yet. Sorry to be so hard on your article.
Neat. I wrote my own version in CoffeeScript a while back: [gist.github.com/9d69011f501437217c6e](https://gist.github.com/9d69011f501437217c6e)
Lovely collection of.... programming, history, technology, design, humour, psychology and more. Thanks!
I've yet to use much canvas but this looks pretty helpful. The chaining especially.
I had a tough luck finding the answer when I was looking for the best book to read about JavaScript. Therefore, I read five of the most recommended books and attempted to review all of them. Hopefully it helps for anyone who is thinking between any of these books.
[Cryo](https://github.com/hunterloftis/cryo) was just posted the other day, though I don't know if even that is adequate here.
So awesome. I wish I had more upvotes for this.
This is a great idea, it's just a shame the name is misleading. jQuery didn't invent or even popularize method chaining so there's no reason to name this project, which has nothing to do with *queries*, after it. 
What you interpret as snide, I consider instead: concise. I've built a lot of apps with Backbone.js, and now I'm building them with AngularJS. Backbone.js was a game-changer, but I have found that the amount of code I need to write for an Angular app is considerably less, which is a huge win. Now, it seems people are playing catch-up and trying to bolt on the additional functionality that other, newer frameworks have which Backbone.js lacks (in this instance DSL -- which Angular has in spades with [directives](http://docs.angularjs.org/guide/directive)). I'm suggesting it would behoove one to try one of these alternatives and decide for yourself -- but hey, guess what? If you don't want to do that, you can do that too.
This looks really cool! Almost makes me wish Three.js had a similar API.
My buddy made this and I was one of the first to try it out. It's a really great engine.
Who the fuck cares what they called it or why? 
I absolutely agree. If you read the article, this is the exact conclusion I drew in the last two paragraphs. Every book has a different approach, every book carries different level of JavaScript reference. It really depends on what you want to learn about JavaScript.
I saw Douglas give his "programming style &amp; your brain" talk in person at a recent Australian web conference. Wonderfully insightful and also entertaining. I have been meaning to watch his other talks. Bookmarked for sure. 
Too much code/work for such a relatively simple task. I'm staying with [AngularJS](http://angularjs.org/)
A question is raising on my mind: Am I the only one in the entire world, that found the amount of code needed to produce a such trivial user interface, not worth the effort? I'm not talking about thatcshould need 10 lines of code neither. But I thing the whole thing should be between 50 and 100. I think we are missing something on the front end part. Ok maybe I'm on the optimistic side this evening. ;)
I have yet to see a Backbone-powered application that doesn't have a shitload of code 
It does. It's called [tQuery](http://jeromeetienne.github.com/tquery/).
I guess ChainableCanvasWrapper was too easy :-)
Seriously. Does it let you query the canvas? No? Then name it something else for fuck's sake.
The #9726th time this question has been asked on reddit......today!
As the whole Three.js library is wrapped in a useless and inefficient chainable API, you're stuck waiting for the project maintainer to implement a new version of tQuery to match the latest version of Three, then you have to beware that it may contain bugs, omissions, or ridiculous decisions that aren't relevant to your application of Three. All of this to "eliminate boilerplate" which amounts to 50 short lines anyway when done with vanilla Three. You can't run off and say the same thing about jQuery. The DOM is not a rapidly evolving project like Three, and Three is not implemented differently on varying platforms like the DOM. jQuery, which is a layer of abstraction for the DOM that implemented a feature developers needed (an easy, cross-browser way to query the DOM), makes sense. However, no one has any business writing a layer of abstraction on top of a project like Three solely because they want a fancy chainable API and want to eliminate 50 lines of code at the same time. If you can't tell already, I've implemented a relatively large application using tQuery, got fed up with its bullshit, and converted the whole thing back to vanilla Three and realized I gained next to nothing from using tQuery in the first place. Using tQuery for any code you would like to maintain in a production environment is setting yourself up for failure. Besides, do you want to rely on a project that has a maintainer-filed issue like this? &gt;**Changin name to jquery3d** &gt;you knoz jquery, you know enoguth to make a 3d game - for jquery3d game &gt;new name &gt;clearer to begin with Screw tQuery. 
You typically don't connect JavaScript to a MySQL DB. That's done on the server, with a language like PHP. JavaScript generally does not allow access to remote processes. There is a new feature of JavaScript that does allow connecting to a SQLite database on the server. I have an example of that here: http://www.aharrisbooks.net/h5qr/part8/contact.html (The page itself doesn't look like anything special, but use the view source command to see that it is building and displaying a database. The example works best in Chrome.) I wrote a JavaScript book for the Dummies series, as well as a larger book that covers JavaScript, HTML, CSS, PHP, MySQL, and JQuery. Even if you don't want the book, you can have all my examples from any of my books at my web site: http://www.aharrisbooks.net/ 
In theory he could with node.js, if he wants to do some server side apps.
Ok, so what language runs in a web browser, besides PHP, that I can use to connect to an SQL database of some sort? 
Well, php does not run in the browser, it still needs an interpreter and an app server to send the output to the browser. But, as of version 5.4, it includes a built-in server that you can use for development. 
Could you link me to an AngularJS implementation of srchr for comparison? Googling "angular srchr" only leads to CanJS, interestingly. 
Most imperative languages don't have this in their spec. They probably didn't want to add more constraints on VM implementers. Supporting tail call optimization complexifies compiler design slightly.
It's _easier_ (for me at least) to see it if it's in a smaller number of files. I don't have your build system. I can't instantly run it on my local MAMP, WAMP, LAMP or whatever. You're basically giving us code that isn't compiled. The experience isn't pedagogical, regardless of the text of your article. 
I just see 27 circles. Checked both the latest firefox and chrome.
What do you mean with "code that isn't compiled"? The example is using requirejs to handle the file dependency management, you can easely compress all those files into a single production file using require.js r.js tool, for example. 
There are no secrets... Images (and videos) are not valid protections of text-based keys, but they do a good job in making them less accessible. I am certainly not trying to come up with a solid authentication system, my goal is to come up with a method that blocks most generic spam bots, and be really hard for special targeted ones. For the 17 options scale, if I regenerate the valid key on every wrong stop, would that make a good difference? (remember, in just making things "harder") I greatly appreciate the input, this is really helping me figure out the flaws of what I am doing.
Someone back-ported this feature to ES3 a month ago, it's called Brushtail: https://github.com/pufuwozu/brushtail I think they are a redditor, or maybe I found this on Hacker News. Either way, the AST modification community for JavaScript is getting more and more interesting. See also [streamline.js](https://github.com/Sage/streamlinejs) and [IcedCoffeeScript](http://maxtaco.github.com/coffee-script/).
**I don't have your build process**. I can't learn anything if I have to think like you in order to learn like you.
In other words, requirejs is a build process.
I can't wait until it actually ships. 
What?! :|
Have you used a module loader before? 
And [ chainvas]( http://leaverou.github.com/chainvas/) was taken. 
A hypercube is 4D. This is just a cube.
add checks that begin after the 5th move. If there is no win after the 9th move the game is over.
No information content. Does AngularJS do this with less code, or is this just a thoughtless plug?
I think the point is to establish a baseline application with good practices. You could write &lt;example application that fits in a blog post&gt; in one big function if you want. The point appears to be showing what a modular application looks like. I watched for months while Javascript was eviscerated for being unmaintainble at large line counts, how woefully unpopular the notion of modules was and how too many applications are written by dumping variables into the global scope. The author has demonstrated how to avoid these pitfalls -- that should be agreeable. Much of the bulk in the blog post comes from white space, module definitions, CSS and HTML templates. The Backbone logic is not overly complicated. He defines 11 views, 2 models and 1 collection.
Probably it's the 11 views vs 2 models that doesn't make sense. Well, it depends on the context I guess.
Step 1: stop, use a true framework like Ember or Angular
Excellent point! 'jQuery'.replace( 'jQuery', 'Java' ).split('').concat([ 'S', 'c', 'r', 'i', 'p', 't' ]).join('')
**ROFLCopter!** ps. soo pretty and cool.
Isn't this an implementation feature rather than a language feature? What part of the language spec prevents this from being implemented by a JavaScript Engine?
This is the spec: http://wiki.ecmascript.org/doku.php?id=harmony:proper_tail_calls Browsers could not implement this before because it would affect the call stack. The new way a call stack should behave is now defined in this spec. Also in the spec: Two new object properties: `tail` and `wrapped`.
Mostly due to `arguments` in non-strict-mode code, as pointed out by [the harmony page](http://wiki.ecmascript.org/doku.php?id=harmony:proper_tail_calls) linked in the blog post--although it might be worth mentioning it in the actual blog post too. (That is, previously it *wasn't possible* to perform TCO; in ES6 it'll be *required* [as far as I understand] in some cases.)
No, this is a language feature because you need to be able to count on its existence for it to be useful. It also needs to work interoperably and thus implementations need to treat the same return statements as tail calls. There's some gray area as to what could be considered a tail call and if it was implementation dependent whether a give chunk of code was in tail position or not then the feature would be much less useful.
tail and wrapped are properties of AST nodes used to calculate whether a given return statement should be treated as a tail call or not. You can see that in action in Continuum's assembler, where it notates tail and wrapped as it converts AST to bytecode (as the wiki page notes, since tail and wrapped are calculated top down they can be added during any pass of analysis/compilation). https://github.com/Benvie/continuum/blob/gh-pages/engine/assembler.js#L1806
Everyone complaining about the amount of code is missing the point. This is a simple application, but it's a foundation for a much more complex project. 
Continuum actually doesn't require strict mode for TCO and Dave Herman (one of the authors of the TCO stuff and champion for the ES6 version of the proposal) indicated that it might not be necessary for it to remain as strict only. It's possible to implement it in non-strict mode (as I have done) and I admit I don't really understand the limitations that prevent it from working in non-strict, except that it may be a consequence of how engines optimize the call stack. I plan to leave it available in non-strict until the reason for its limit to strict starts affecting Continuum, or the ES6 spec has clear language added governing this. Really, the reason JS doesn't have TCO is the same reason JS doesn't have a lot of things: it was rushed at the beginning and it just didn't get added. The ES6 TCO proposal dates back a long time, to work done for the ill-fated ES4. It wasn't in ES5 for the same reason a lot of things weren't in ES5: ES5 was basically a kind of compromise/fallback minimum "we just need to fix the biggest problems and inconsistencies in the language to get to an acceptable baseline, we'll add features next version" when it became clear that ES4 wasn't going to make it. So here we are at the next version and many thing discussed for nearly a decade are finally making it into the language in ES6 in some form (many/most ES6 additions can trace their roots to ES4 proposals).
Read comment history, user has been plugging Angular quite steady.
The stacking on the points is incorrect. The ones at the back appear over the ones at the front.
Just looking at the source, it definitely transforms recursive tail calls, but it seems to be limited only to return statements which are call expressions inside of named functions of the same name. This limits it to just TCO of self-calling recursive functions. The real power of it comes out when you have many functions working together that all end in tail calls and do so in a circular manner. Doing this would require a significant whole-program transformation, however, which is why it really needs to be implemented at the engine level. Continuum is not a code rewriter, but rather a complete JS engine in its own right, which is how it's able to correctly implement TCO for any amount of mutually recursive functions that have tail calls. Instead of modifying the AST, it converts it to bytecode and executes it in an interpreter loop, and provides a full ES6 runtime environment to execute the bytecode in.
Hm, fair point. Thinking it through a bit more I agree--I can't find any standardised feature that'd prohibit TCO in non-strict mode (the major crux would be the `caller` property of course, but it's non-standard and hence irrelevant). Reading the latest ES6 draft, it also doesn't seem to limit the TCO to strict-mode (unless it's somehow meant to be incorporated into the definition of a tail position).
What's your end goal here?
I've got a function that creates a table with other functions within it when the page loads, I need to be able to change the size of the table when a user clicks a button. E.g. grid is 9x9 and the player wants to make it harder for themselves so clicks the button to make the grid 15x15. 
Make an options object that can be changed. Then make the functions check the size in the options object before creating anything.
There's really no reason the javascript would change then, just change the parameters you're entering into your initial function, e.g. from (9,9) to (15,15). Unload the previous table and create a new one on that event. 
If I understood what he was saying correctly, Dave Herman's concept for non-strict TCO was that all the functions that were ended up using the same call frame could share the same 'arguments' slot. Something like this could possibly work for 'caller' as well to ensure all the TCO'd functions get their caller property cleaned up (if they all point to the same place for their .caller then you can just set that to null at the end). Since TCO is only really useful for recursive calls, the .caller property is already going to be of dubious value at best, or no value at all in the case of a function directly calling itself recursively.
Design your classes/functions in such a way that they can take an arbitrary grid size as a parameter.
&gt; We are using Node.js on the back-end and a combination of MongoDB and Redis for the data storage. *cough* hipster
Hey, Node.js and Mongo are awesome. I use them as well and I wear my hipsterism with honor.
Maybe upload your code somewhere like jsfiddle and I'll gladly help you out Are you able to use jQuery? It's almost trivial. Here I made an example for you that creates arbitrary sized tables, http://jsfiddle.net/CGm96/ (there are a few mistakes, it's not perfect, but you'll get the idea)
After talking this out, I think the .caller property is likely a deal breaker with non-strict tail calls. The .caller property has to continue functioning as it does currently, since it's interoperable across major JS engines and has been around forever. Since people can and do write code that results in calls in tail position all the time without realizing it, then this can't have an observably different effect on the .caller property than if there was no TCO. In order to maintain this would require adding extra overhead to keep track of the list of functions that need their caller property reset when the stack frame's execution completes, and this could penalize performance across the board. If it was possible to do this efficiently that then would made tail calls in non-strict feasible, but it hinges on that being possible.
&gt;never pay-to-play, pay-to-win They always say that until the greed kicks in.
I'm one of the two guys who have been working hard for the past year on this game. We actually have two older browser games that were developed in college, and we've managed to hold true to that claim for those. I love gaming and can't stand unfair pay-to-win. The free model is simply a small company's way to lower the barrier of entry for new players.
Incidentally, "throbber" is the technical term for "spinning indeterminate progress animation". also, it's fun to say because it sounds dirty.
Pft. Maybe they're using those technologies *ironically*. Today's hipster hacker is using Clojure, PostgresQL, and Redis.
Related question: Is there something like a browser plugin for swapping a javascript file for one of my choosing? (e.g. replacing an obfuscated js file with an easily-debuggable equivalent)
Think of it like iGoogle. iGoogle and Ozone use Sindig: http://shindig.apache.org/ 
That's subversion. Bassically comes down to: Source: /* $Id$ */ And then set svn:keywords from the commandline (or some SVN client): svn propset svn:keywords "Id" &lt;your file&gt;.js Everytime you (or someone else) commits that $Id$ part will get expanded to the data you see there. For reference: http://svnbook.red-bean.com/en/1.7/svn.advanced.props.special.keywords.html
Managed to get it working, thanks to everyone for their suggestions. Used an if statement that occurs at the start so the table isn't made before the choice is made. 
I don't understand why people fall for these hipster technologies. Node.js in nowhere near mature enough to be a serious platform for production. I mean, it's still in pre-release stage.
SVN inherited this from its ancestor CVS, which in turn got it from the great-granddaddy of version control [RCS](http://plumeria.vmth.ucdavis.edu/info/oreilly/unix_cd_bookshelf/unixnut/ch18_03.htm). It's also supported by some other more modern versioning systems, like Perforce.
The current version is extremely stable and nearing 1.0. I think the biggest concern is that it's seen as untested and unproven. (edit: I've been informed it's no longer actually considered pre-release.) But the attraction is mainly Websockets, rather than using a trendy technology like Node. There is a lot of stigma around "all in your browser" but the web is moving more and more away from a page-based experience to being more synchronous. Doing it this way allows us to reach a much broader audience. I hope you'll be surprised with what we've done with node and HTML5. Besides, someone has to prove out the technology, even if that does make us hipsters. :)
I like lynx browser.
That's only for Hardware, not Software.
How do you plan on handling all the possible console injections? Couldn't I just open console and change my local hand, or credits? I like html5 games, but your project seems to really depend on a strong security model where a simple 2d platformer would not. I'm interested in how you plan on handling this.
This isn't a gambling game, it is all for-play.
The server handles all of those things, if you modify your hand from the console, it will only change it for you and won't affect the game itself at all. The client-side code is only displaying the output of the server, not the other way around.
I believe you did miss some of it. Namely, the "JavaScript *Toy*" aspect. IMHO, it's not meant to be an absolute accurate 3D hypercube, but a fun example of using trig for positioning HTML elements.
&gt; For all the hackers out there, here's a little detail about our stack: Javascript. The front-end is of course all Javascript, rendering the game on the HTML canvas element and talking to the server through WebSockets using the Isogenic Game Engine. We are using Node.js on the back-end and a combination of MongoDB and Redis for the data storage. These are some fairly new, polarizing technologies. However, we have been using all of them in production for over a year. We specifically designed the system this way, because these are the right tools for this job, **not because they are the new trendy tools.**
Thanks. :)
&gt; *cough* hipster \**cough*\* Elitist... Using Node.js and noSQL is not just for the "cool kids" anymore. Both are maturing technologies. If it were Rails I might agree with you, but your snobbery just makes you sound even worse than a "hipster".
All your points here seem basically correct to me. What it comes down to in non-strict code is that we don't regress (a) observable behavior and (b) across-the-board performance. As for (a), I'm pretty sure we can preserve exactly compatible semantics with proper tail calls by using some variation of the approach you talk about here. This is basically an example of the general approach of "continuation marks" used in Racket (http://docs.racket-lang.org/reference/contmarks.html) and described fully in John Clements' dissertation: http://www.brinckerhoff.org/clements/papers/dissertation.pdf But you're also right that (b) is critical. I'm not yet convinced it can't be done; I have some thoughts about implementation strategies that in some ways might even *save* work for a JS engine. But I'm nowhere near close enough to the implementations to say for sure. But you've given me the push I need to discuss this with the SpiderMonkey team. And lucky for me (and JS!), John Clements just happens to have started his sabbatical at Mozilla Research this very morning... Dave PS Forgive me one nit: many PL folks, me included, prefer to use "TCO" to talk only about the best-effort compiler optimization. But for programmers to actually be able to use tail calls to implement iteration, they need a *guarantee* that tail calls won't grow the stack without bound, so it's not really an optimization. For that reason, many people use "proper tail calls" to mean a language-level guarantee that tail calls use O(1) space. So pedantically speaking, ES6 provides proper tail calls, not TCO. PPS And also, even if it's *possible* to achieve (b), it also has to be something that's reasonably implementable in practice in all the engines. So that's also a consideration when trying to standardize. The most important thing is that we have consensus that it'll be done for strict mode. I'd love to see it work in sloppy mode too, but I'll start with just talking with my colleagues to see if/how we think it might be possible.
Any data-intensive application like this game that is properly built will have all data and game logic being performed on the server while the client side is there only for displaying that data. You could change whatever you wanted on your end, but its not gonna match what the server and the rest of the world sees. 
Good call. To be truly hipster, for our next game I'm writing an MMORPG with Ruby on Rails.
hah that is a funny name, thank you though I had no idea what to call it.
https://twitter.com/horse_js/status/288403466198601728
LOL Don't forget to buy the tightest jeans you can find! Here's a handy [history](http://i.imgur.com/sMQlh.jpg) of your evolution. (Also, the game looks cool! Keep up the good work and good luck on your project.)
Haha, saving that link. Thanks!
This is why I don't make comics.
http://killdream.github.com/blog/2011/10/understanding-javascript-oop/ got a lot of mentions recently. Altough i`m looking for a more "practical" tutorial myself.
What is this madness? 
Your last point there about 'reasonably implementable' is pretty important - for example, .NET has had support for tail calls (special opcode in the VM, etc) but in practice a bunch of .NET runtime environments don't translate the tailcall instruction into an actual tail call. So even if your compiler emits code using the instruction, you still might run out of stack. What a mess.
Thank you, I'll check this out. What I'm really looking for is an application that I can tear apart and play with. Or a tutorial that builds an OO application. 
Thanks for clearing that up! I feel a lot more informed about this than I did a couple days ago between this post and discussion on twitter about it. Also now I understand why it's not an optimization (PTC vs. TCO), which I wasn't clear on before. I read the that fact before but didn't understand the distinction. Your explanation is clear to me now, in context, than when I originally read it. For my part, I'm going to leave it on non-strict mode in Continuum (and fix the inconsistencies currently observable in the .caller property) since it's already horribly inefficient and the main goal is just to be able to experiment with new language features. I will reevaluate this when either a.) you and the other folks working on it in Spidermonkey figure out how to optimize it, b.) decide it has to be limited to strict-mode, or c.) I actually succeed in optimizing Continuum to the point where the performance of this particular issue is a factor.
Could you explain to me how Rails is less of a mature technology than Node, Mongo or Redis? In addition: How are they being "snobby" by calling Node and NoSQL hipster but you calling Rails "hipster" isn't snobby?
I'm reading this: http://eloquentjavascript.net/ (see chapter 8) at the moment and find it very interesting. A bit too much 'code practice' IMO, but the explaining is great. Also: http://stackoverflow.com/questions/74884/good-javascript-books And http://mckoss.com/jscript/object.htm
thanks
Javascript - The good parts from OReilly Other than that, I have one piece of advice; if you're used to working with objects in another language, don't try to immitate that behavior. Learn how to work with Objects in the JavaScript way, THEN see what the other possibilities are. You're gonna get a lot of headache otherwise because something somehow doesn't work
This is a good site but keep in mind that it focuses on the ECMAScript version 5 way of doing things which is only supported by modern browsers.
I wrote something like this for PlastronJS: https://github.com/rhysbrettbowen/PlastronJS#mvcmediator
I can recommend trying TypeScript. It's pretty nice
One route to obtain money while honoring that credo would be DLC. It's tired, overdone, but a proven business model to loyal fans. Take a look at how Killing Floor did it. Basically they sell player skins and now weapon packs although it is hard to find a game with someone who will share the weapons. Players cannot buy DLC weapons if they haven't physically purchased them but in the interest and spirit of the game, players that have physically purchased the DLC weapons are free to share/drop with other players, with the usual financial constraints of having to virtually find/purchase them and the usual carrying constraints for players picking them up.
Yeah, that's what I'm seeing. I'm as ActionScript 3.0 developer trying to switch to JS. I have to unlearn a few things. Thanks for the response.
thank you
I'll check it out, thanks.
I think we may be working on a model that is very similar to what you're referring to. A lot of what we'll be selling is vanity-related. A player can decide never to pay for the game and work all the way up to owning a 5-star casino, level up their player to 50, or playing poker whenever they'd like. However, that player might want the Hugh Hefner smoking jacket for his character, and that might be a limited time premium vanity item. They'll need to trade another player who made the purchase for that. Or they may want a Alien-Themed slot machine to place in their casino for other players to play, so they'll have to go a similar route. Is that close to what you're referring to?
I see, so building a slot machine in my casino would make a call to remove a resource from the pool held as a variable on the server and not a pool of resources held in my quantity. Cool, good luck with your kickstarter!
http://javascript.crockford.com/
Authoritative server ftw. Thank you!
[Free JS OOP pdf book | JavaScript Enlightenment](http://javascriptenlightenment.com/?utm_source=javascriptweekly&amp;utm_medium=email) This was a link on JS weekly a while back. I really enjoyed the read.
[Alex Gomes](http://firmamento.org/blog/2012/12/20/how-to-build-a-large-single-page-javascript-application-using-extjs/) has been writing an interesting series that walks through building the same javascript application using a variety of frameworks and approaches. So far he's gone through extJS, JavaScriptMVC and Backbone. 
Thanks for clarifying that it does not have TCO, but rather one very specific optimization. Still nice to have though. 
thank you
thank you
I've been educated more on this matter and it's not so much about what things would be interpreted as a tail call, but whether the engine is deciding to reuse call frames or not needs to be predictable. See the above thread of discussion wherein dherman explains why proper tail calls (vs. tail call optimization) are important.
Addy Osmani has a book on JS Design Patterns with lots of practical approaches to different OO patterns. You can read it online here: http://addyosmani.com/resources/essentialjsdesignpatterns/book/ 
Somehow I missed the video in the original link, Apologies to everyone. I somehow clicked, didn't see the video- read through and started skimming when I didn't see a video or anything that looked real and thought the worst - I am so sorry. I am a complete ass, and an idiot. 
wasn't a fan of his book, and btw, I also did a lot of as 3 and I really like backbone.js' views, made it a little more oo-ish. Wouldn't know books on backbone though. 
Regular Expressions are not a regular language therefore they are impossible to define using Regular Expressions. While it is possible to pass each test for this weeks challenge it is impossible to write a generic RegEx to describe all valid regular expressions.
~~you also made a mistake, you claim that // is an invalid regex when it is valid, it is just pointless.~~ I was mistaken about `//` it is invalid but all of the following are valid: `/regex??/` `/\\*/` this matches a string that contains 0 or more `\` characters in a row. `/[Rr]egExp??/` tested using JS `validateRegex(/\\*/)`
// is sintactically invalid (in JS at least). If you want to make an empty regexp, you should use something like /(?:)/.
The first one is invalid in JS, as it is parsed as a comment. Multiple question marks were throwing an error for me in JS, but you're right about the other one - thanks. UPDATE: I've removed `/\\*/`.
interesting, chrome will execute that regex with no issue, but it throws an error when fed into `validateRegex()`
It's parsing it as a comment.
Yeah, the challenges will only be to match actually regular regular expressions.
Regular Expressions are a context-free language that cannot be expressed by regular expressions. I appreciate what you are trying to do with these, but you should be promoting a better more accurate understanding then leading people to dead ends. Can you get all the tests to pass, yes. But the goal of writing regex's is to define a general rule that will always validate valid input, this is impossible with today's challenge. PLEASE do not make a part 2 of this challenge next week.
Regular expressions are no longer regular. The challenges will only be to match actually regular regular expressions, and so it is perfectly possible. I wasn't planning on making a part 2 immediately, but don't see any reason why I shouldn't some time in the future.
thanks
&gt;Regular expressions are no longer regular. this is an extremely uninformed statement. the "Regular" in "Regular Expressions" describes the language Regex statements describe not the Regex statements themselves. At no point has the language of regex statements been regular. If you limit the statements you are willing to parse to regex statements which are themselves regular you are examining and infinitely small subset of the language. Saying this is not what RegEx was designed for is an extreme understatement. 
makes sense
I don't have much experience with Haxe JS, but I suggest you look into TypeScript. TypeScript has many advantages over HaxeJS, such as: - It's a superset of JavaScript (code reuse, for example). - It compiles to solid, idiomatic JavaScript. - Supported in mature IDEs (Visual Studio, IntelliJ), with code-completion. - Being developed by a major company (Microsoft). - Active community that's growing fast. Compiled JavaScript doesn't suffer any significant performance loss. With TypeScript you can always write any performance critical parts by hand if you wish.
&gt; regular regular expressions That isn't a thing. 
Even if you don't end up sticking with TypeScript, it can be useful to just write code in a normal class based OOP style, then compare it to the generated JavaScript. TypeScript is pretty good at generating best practice idiomatic JS as its output.
Yes I do realize that and I am sorry. I hoped to get more attention from jQuery users so I feel bad as a programmer because it was marketing decision.
Here is a graph of what the project has raised: G|20K | | |15K | | |10K | | oo |5K o | o | o |0 -------------------------------------- 1/6 1/11 1/16 1/21 1/26 1/31 2/5 [Click to see full graph](http://canhekick.it/projects/jsimpson/casinorpg) [FAQ](http://canhekick.it/reddit-faq) 
+1 to JavaScript the good parts. It was a fantastic read that has changed how I write my js code.
https://developer.mozilla.org/en-US/docs/JavaScript/Introduction_to_Object-Oriented_JavaScript This should help you at least get started.
The animations aren't very smooth.
This has been true for years. `filter` is just a new `Array` instance method that returns a set of truthy values. And since `0 == false`, it doesn't show up in the result set.
I don't understand the point? JS is already multi platform.
I second this book.
Why is this crazy? Most languages have this. e.g. You could 'grep' in perl. 
I would also recommend TypeScript. However I would say that in practice, it's not really a superset, as it can be a hassle mixing TypeScript with JavaScript.
Many modern regex engines are certainly capable of matching context-free languages. [This is due to the ability to perform recursive matches.](http://stackoverflow.com/questions/4840988/the-recognizing-power-of-modern-regexes)
I actually wrote something similar, [ease.js](http://11wings.com/javascript/ease.js). On top of the ones here it also has back-in, exponential, bouncing, elastic, spring-like, and circular easing, and the ability to transform any function to ease in, out, or both. edit: demo [here](http://11wings.com/etc/easing-demo.html).
What do you mean by checks?
interesting. I'll have a read through that. Did you write it with the closure library in mind? Or something else?
The crazy thing here is linking to an image of javascript code.
This is very good timing, I'm working on some closure animations at the moment and was a bit annoyed when I realised goog.fx.easing is limited to EasIn, EaseOut and EaseInOut. Saves me implementing the ones that I need myself.
I had a brief look, it's not closure compatible.
No, no library in mind, just my own use. I have a theory that easing functions are better off separated from time, position, etc - everything but % progress. I'm not sure yet that my theory is right, but it's applied in all my code, and the result is that my code is a lot shorter and simpler, and also incompatible with standard easing functions. Also, I edited a demo into the post.
You're welcome :) Just bare in mind that I am not a math wizard. I only know the basics, so I cannot promise any advanced easing functions!
It scrolls like silk while watching 10,000 or more elements. http://sakabako.github.com/scrollMonitor/demos/stress.html
If you want static typing, object orientation and packages for larger projects, you could just use the [google closure library/compiler](https://developers.google.com/closure/). You can still write javascript while having a manageable codebase and improved performance. The compiler gives you warnings and errors, optimizes and minimizes your code. Most of the web apps developed by google use their closure tools.
For now the server code is a little too messy (many new functions in progress) but I'll clean it and probably make it open-source if I get enough positive feedbacks. For the records it's in Go.
This is really interesting, but what's the difference between usage and market share for JavaScript libraries? 
Yes, you can. You can have and image thumbnail of the video, then replace the thumbnail with a video when it enters the viewport.
they are by the very definition not regular expressions. Also these challenges all use the javascript engine. the javascript regex engine does not support those features
partially unrelated, but if you're hunting memory leak on a recent version of node.js, most of the various memory profilers out there are in some state of disrepair. The one that still works is called `heapdump`. Basically, `npm install heapdump` then `require("heapdump");`, then kill -USR2 your node process pid to generate a memory dump. you can make as many of those as you want, and you can then load them in Chrome dev tools by clicking on the "Profiles" tab, then right clicking on the view and selecting "Load profile.." in the right click menu. between that and `longjohn`, tracking down badness in node.js becomes a lot easier.
this is great, thanks!
I found this tutorial on backbone.js: [tut](http://firmamento.org/blog/2013/01/05/how-to-build-a-large-single-page-javascript-application-using-backbonejs/)
thank you
thanks
This. TypeScript means less bugs, because of compile-time syntax and type errors. Also check this out: [List of languages that compile to JS](https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS)
https://leanpub.com/oopinjavascript - A new book by Nicholas Zakas, although I haven't read it yet, his previous books were pure genius.
I develop in AS3 too (though I learned JS first) and I recommend using [Google's Closure Tools](https://developers.google.com/closure/). Closure lets you add JSDoc type annotations (along with other information, such as visibility) to your JS code, which allows the Closure tools to perform static analysis, catching bugs before run time and allowing for a much higher level of minification by identifying code that will never will be used. If you use IntelliJ / WebStorm, it can use the type tags for far better IDE comprehension than is possible for regular JS. It also has the advantage that the JSDoc tags can be used to generate documentation for your code as you go. Some more links: http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml https://developers.google.com/closure/compiler/docs/js-for-compiler http://plovr.com/
Actionscript is very similar to Haxe (assuming you use the relevant subset of Haxe, since Haxe has many more language features not found in AS). It's much more similar to Actionscript, than Javascript is to Actionscript really (assuming you're talking about AS3 and not AS1/2 which are much more similar to Javascript) You mention using another option like TypeScript or Dart or CoffeeScript... all of which require a compilation step too so your second point isn't very valid :P Haxe has been around for over 7 years and is growing... what makes you think it'd suddenly die? Even if it died, why would you be fucked? The language and compiler is very mature; you're not going to find some critical bug that absolutely could never be worked around that fucks your project because you're not going to get an update.
Haxe is not a superset of JS, but when targetting JS you can use any JS library via externs. There are programs to generate these externs automatically, though of course hand written ones would be better in the long run to add extra typing information etc. Haxe compiles to very good javascript; the js backend is programmable via haxe if you wanted to customise it. Haxe has great code-completion, but it obviously isn't supported by visual studio. The main IDEs are sublime, flashdevelop, fdt, textmate and there are haxe plugins for intelliJ and eclipse (and emacs, vim of course). Code-completion is provided by the compiler; editor just makes requests to it. edit: Haxe doesn't suffer any significant performance loss either, and you can if you wanted write parts in native JS embedded in the code like inline asm in c/c++
I typed in `//` 27/44 passed. wut.
I like this library, however there is one big problem with it: it doesn't support older browsers. Therefore many people can't really use it for large websites or applications.
I said TypeScript is a superset language of JavaScript.
May I add: Web sites that would be faster and more usable without random JS effects thrown in: 80% 
TypeScript, for example, has class-based oop, interfaces, modules, better static analysis, static typing and more advanced code completion. It makes development easier and less error prone.
thanks!
thanks for posting this
Hopefully that doesn't mean that we're raising a new breed of developer that relies on libraries without actually understanding code behind them. Sadly, I know this isn't true.
But it has to pop :(
thinking i should make the switch to Hogan
However I believe a lot of those libraries are actually very good for folks to start getting an intro into JS. (not in every scenario obviously) I know a couple of designers who have gotten to a reasonable working/maintenance skillset in JS by what was introduced to them through these libraries.
May I counter-add that many use these JS libraries to make internal data requests thereby cutting down on full page requests. I've seen more things improved with jQuery than I've seen ruined by it.
I use Haxe as my primary language for web development (target php, neko, js, and nodejs) and for game development (target swf, js, obj-c). The coolest thing that still impresses me is that when i'm working on a project that will run on multiple platforms, such as a web app which requires a backend (php/neko/nodejs) and client side script (js/as3) i can use the same shared typedefs, enums, and classes which as you can imagine is very useful! i haven't experienced any of the downsides to using haxe for js. compiling before running in browser/server is better in my experience... vanilla js: save, run in browser/server, test, see errors, refactor haxejs: save, compile, see errors, refactor only run in browser/server when i know at least silly syntax and misspelling errors are not present. really take into account how long a pageload or server reset takes. compiling saves me tons more time. (maybe just cause i make more mistakes than others?) bottom line is them all out, and stick with the one(s) you enjoy writing in! that's what i did, and nothing i've used is more enjoyable than doing it with Haxe, it's tools and syntax. TL;DR go with what you enjoy using.
That is what I understood... whats the problem? I'm saying haxe is 'not' a superset of javascript, but when targetting JS you can use JS libs. Added to my post to clarify.
Thanks for the awesome example. I was just messing around with Mustache for the first time last night. Some cool stuff. Thanks again.
Would it be a good idea to include some recent versions of jQuery standard with in each major browser so you don't have to download it every time again and again for each website. Maybe you could activate it and make it availbale to the JavaScript runtime through a meta tag &lt;meta name="jslib" content="jquery" version="1.8.3" /&gt; One out of two website uses jQuery. You might as well include it in the browser. EDIT: Okay this was fun. To be honest I don't know if it's such a good idea either but I loved to discuss and test it. One other major drawback would be that for the next 10 years there will be browsers around that don't support this (yet) so that would render it totally unusable for at least another 10 years.
Sad conclusion: Microsoft Ajax has more market share than Backbone or AngularJS
Two different purposes; the ms library is just to make asp.net apps more dynamic (and there are a lot of asp.net apps in the wild enterprise) and the others you mentioned are mostly for single page apps/rest clients. 
Codecademy.com is brilliant.
&gt;a new breed of developer that relies on libraries without actually understanding code behind them Even if you do something very simple like querying the width of an image, you're sitting on top of millions of lines of code. You'll never read all of that and you'll never understand all of that. The human lifespan is simply too short for that. When computers where simpler, you could read a dozen books over the span of a couple of years and then you were actually able to understand all of it. Nowadays it just isn't possible anymore. The BIOS alone can be [over 200k lines of code](http://www.ohloh.net/p/openbios). Then there is all kinds of firmware, the OS, tons and tons and tons of libraries... and then finally some application which runs your application. And JS libraries... well, not having to bother with some of those details is their biggest selling point. Browser normalization is very annoying and knowing about all those issues is essentially pointless since those issues are handled by your base library. Furthermore, that knowledge has a fairly close expiration date.
I'll check it out, thanks.
No problem, hopefully it helps you as much as it has helped me. I don't know if you have any experience or not, but using this site alone, I've learned the basics and OOP in only a week.
JavaScript has around 7 types... it's usually pretty obvious when you're not working with the right type. Speaking professionally and anecdotally, I've never spent hours debugging a type issue.
But just think! Those websites *could* have implemented those effects in Flash! I think we should consider ourselves lucky that it's just JS!
&gt;it doesn't support older browsers IE9, Chrome 5, Firefox 4, Safari 5, and Opera 11.60 are older browsers. You mean that it doesn't support IE8 and below.
That is a bad idea in my opinion. It bloats the browser, simply in order to provide an alternative to all of the CDNs like Google Libraries. It is not the browsers job to promote one library, especially to give it a competitive advantage over others. Browsers are not on the same release schedule as the library, so IE 8 would still have v1.6 bundled with it. Furthermore, [while people love to recommend jQuery for everything](http://www.doxdesk.com/img/updates/20091116-so-large.gif) it has serious drawbacks. It is 5-10x slower than vanilla JS in most benchmarks, which has very real implication for anything beyond a basic web page. 
In my proposal the browser would download a new version if it encounters a metatag with a more recent version number for a library. That is what the version attribute in the metatag is for. I think the bloating will be minimal. It just a simple JS library. Jquery is used on half the website and we keep on feeding it again and again. That seems somehow bloated to me. Also I am not proposing that jQuery should be the only one (that's what the content attricbute is for) If Vanilla JS is so much faster when used in an everyday context I am sure it will quickly gain popularity as well and it will finds it place next to jQuery. 
I agree. We had a couple years where things were a little over the top visually, but jQuery (And others) has seriously enabled developers overall. From improving user experience visually to in the background, it's a solid library.
As opposed to? using FLASH? Get fucking real.
Who cares? There is always going to be a market for people who fully understand pure Javascript... but do you think anyone who codes in pure Javascript would be able to put together half of the things that are in jQuery? No! Matter of fact, a lot of techniques done in pure Javascript are inspired by what some JS library somewhere invented (or popularized). A library is a smart collection of things packaged into one. You don't need to know how to fix your car, but it's nice to know. You need to know more of the Javascript fundamentals the higher you go and the higher your salary gets... but jQuery is a fine way to start off without having to worry too much about cross browser compatibility and other bullshit. If you are an absolute BEAST in doing Javascript (and live in NY) you can get like 75,000+ easy... but you have to know your shit. Most sites don't need a beast in Javascript. They need basic things, and jQuery serves that just fine.
Ok. So you have a meta tag. What happens when the browser doesn't have the version of jQuery you're requesting? What happens when the version you're using with the meta tag gets updated? How many version of jQuery is the browser expected to contain? You realize that the browser would have to hold ALL of the versions? Meaning... let's pick jQuery 1.4: how many small point releases you think released between 1.4. and the current? The browser (and all different browsers) would have to hold that. And the client would be downloading all of that. And has ZERO ability to even use those versions of jQuery for their own scripting? This is an all around bad idea and is very short sighted.
You quote me, you tell me I make you laugh and then you elaborate on something completely unrelated to the quote. Nice. I can imagine how your suggestion would work as well. I haven't sufficient knowledge about hashing to be able to judge how hard it is for a hacker to create a file with an similar hash but partly malicious code in it. I can imagine that it's not undoable and that would open the floodgates. Cross site scripting attack through the browsers cache.
V8 is over 100 times faster than the engines from 2006. Furthermore, hardware became faster, too. Also, usually the reflows/redraws are the bottleneck. &gt;now that [...] even video games are becoming browser based performance is a serious concern. How's that related to jQuery? There is no point in using jQuery for a canvas based game. Even if you use it for looking up that one element, input handling, and perhaps some AJAX... it won't matter. No one cares if your game can handle 500k inputs instead of 100k per frame, because there will be like... 0-4 (no 'k' there).
If the browser does not have the version the site you are visiting needsit download's it from a CDN just like it would do if this mechanisme wasn't in place. You ask me how many versions a browser should contain? As many as are being used by the different sites your are visiting. That's what happens now in the cache doesn't it. And the cache even contains multiple copies of the exact same version of a lib. And when it get's removed from the cache when the cache is full you need to redownload it next time you visit the site again. I could imagine that a browser drops a version of a lib when it's not being used in a certain time span to keep the number of libs it has saved to a minimum. But I don't see the issue. jQuery is 100kb and in the past two years they have done 10 releases. That's 2 MB. Max. 
Ok I still think this is a silly idea, but I don't care to discuss it further, so I'll put the nail in this coffin: If this is a meta tag, when does jQuery load? Many people start to load scripts before the body tag... what is the browser going to do? You can't place meta tags outside of the head... and if the browser doesn't have the version of jQuery, you're going to forcefully block the page until that renders? What happens to people who are using require.js? How are they going to manage jQuery with that?
I don't know about embedding jquery but it sure would be nice to see native support for jquery-style DOM access. The terribly inconvenient DOM api's are the reason I use jquery for most of my web development. 
Well you can make it available (and if needed load it) right before the first script tag is parsed. And if you want to load it yourself through require.js feel free to do so. Just don't include the meta tag and you are free as a bird.
Mobile is an interesting situation because the browser does not send any scroll events until the scroll stops. I have an image lazy loader that I will probably add when I have time to make a demo of it.
Agreed on the predictable bit. Or, rather, than the specification needs to be clear. The thing is, I get a very strong impression that the Scheme community has already dived into the depth of it tail call identification. Can you give an example where it's grey in JavaScript? The only think I can think of is perhaps nested infinite loops should be considered in the tail position and so not consume stack space? // is this it? f = function(){ for(;f;) { f(); } }; f(); // not tail call, for sure. f = function(){ for(;;){ f(); } }; f(); // maybe they want this to be tail call, constant space? 
Ah of course, however, the problem with mobile that I am talking about is memory allocation for infinite content. ie. when you have scrolled down the page, removing imagesthat are not longer visible above the scroll and placing them back when they scroll into view again. [Explained here](http://stackoverflow.com/questions/2986039/ipad-iphone-browser-crashing-when-loading-images-in-javascript) [and here](http://www.fngtps.com/2010/mobile-safari-image-resource-limit-workaround/)
The HTML should remain in the intended W3C form. Anyway Angular is still distant from the effort I have in mind to present things. But they are just my though.
&gt; but do you think anyone who codes in pure Javascript would be able to put together half of the things that are in jQuery? No! What are you talking about? It's the other way around. A person who understands the language they're writing can do everything you can do with some library and much, much more; a person that only knows one library is limited by that library's scope and inefficiencies.
He's talking about a global cache, so , for example: you visit reddit, reddit loads a version of jquery, you browser stores that version of jquery in a cache along with a hash of the file. Another site uses the same version of jquery, the hash of the script file is sent in the header, your browser detects that it is the same version that reddit uses, and loads in that script rather than downloading it from the site
I think it made him laugh that you thought "Vanilla JS" was anoter JavaScript framework/library like JQuery. That is how I understood you, too (you even capitalized it), and it made me laugh, too. Something is referred to "vanilla" if it is in its pure (uncustomized) form, or in other words: plain JS, without any libraries/frameworks used. ([see here](http://en.wikipedia.org/wiki/Vanilla_software).
I believe most mobile browsers already do something similar under the hood.
Op basically said there is no reason to not use a framework. I pointed out just a couple of reasons why a developer might not use one. As I was saying, jQuery is not designed for online apps, just basic HTML sites that need a sprinkling of JS. Anything above that should seriously consider whether using five to ten times more battery life and CPU is worth it.
In my experience, both the development as well as the maintenance of vanilla JS is significantly more expensive than using jQuery. You're correct that the end result with vanilla JS is faster but one has to consider whether or not the extra costs are worth it. 
Hash collisions are mathematically unfeasible. Not impossible mind you, but nothing with security ever is. They are on par with a hacker guessing your 20char fully random password in one attempt. Further, the hacker would have to be the first one to deliver the file to a user. I forgot that Google and all the other library hosting CDNs set extreme caching values on these files. Really we are both trying to solve a problem that does not exist. We already have a system in place where everyone only has to download a file once and virtually never has to send a second HTTP request. The browser can then cache it for as long as the user wants. All that has been accomplished without any extra standards or markup. 
Note there are more advantages than just overriding getters. For one, setters are overridden as well. Using defineProperty() is also the reason iterating over maps and models works as you would expect. And finally, overriding getters is not just nice syntactical sugar, it's also what makes it possible to feed your model directly into a template engine, for example. I explain in the rationale I needed this model for a map editor for a game engine, which is heavily dependent on WebSockets. For my use case anything below IE10 was already irrelevant. I didn't do anything to lock IE out though, so IE9+ still got supported.
FIY: I tagged the current release as [v1.0](https://github.com/exhuma/closure-easing/tree/v1.0)! I might change the package name in the future. The v1.x releases will always keep the same external API.
You seem very uninformed about tQuery. i know game companies using tQuery to write a webgl game ala second life. So i guess they considere it ok for production. 
You're missing my point. Have you read the source of jQuery? You realize jQuery IS Javascript, and is the culmination of some of the best minds ever to work with Javascript? Surely you don't think just anyone who has a good grasp on Javascript could duplicate what John Resig, the jQuery team, and hundreds of other sought after developers accomplished with jQuery. I'm not saying jQuery replaces Javascript, but a lot of ground breaking Javascript happened in a lot of these libraries, and people ended up just repurposing them.
So the main benefit I get from this is that I can bind on change events for the properties?
That, and computed properties. That pretty much sums it up :)
Fixed; I removed a test but forgot to change the number.
The problem then is, what do you want to sync with? Do you want to sync with an HTTP REST server? Do you only want to store data client-side in LocalStorage? Or are you using a custom WebSockets based API (as was my case)? If you want to integrate server syncing though, I advise to create a subclass of LacesModel which will handle the syncing transparently by adding the proper bindings. I have created a very simple example for TodoMVC that also does this: https://github.com/arendjr/todomvc/blob/gh-pages/labs/architecture-examples/lacesjs/js/app.js I agree standard add-ons that provide syncing would be a useful next step :)
One of the things they did very well was standardizing cross-browser methods of doing things. I wrote a cross-browser AJAX implementation for a client about 7 years ago and trying to handle all of the various browser issues was a royal pain. When I started using jQuery a little while later, I was blown away by the simplicity of the ajax() call. A good library does just that, it solves a problem and gets out of your way so that your time goes to solving business problems instead of programming problems.
As opposed to using nothing but HTML, kid.
Right, have fun with that one! Your client asks for some visual flash like &lt;insert site here&gt; did, and instead of suggesting Flash or Javascript, you suggest just pure HTML. You do realize that most sites don't have games on them, and Flash used to be a big deal on many sites because Javascript / jQuery for doing things Flash normally did was not the norm, right? So basically you're doing 3 things: 1. You're being historically ignorant 2. You're suggesting you deny the client what they're requesting 3. You act as if animations or things with Javascript / jQuery can't add value to the user experience, while still not being absolutely important.
Well, I've heard the argument that JavaScript is static and strongly typed. The catch is, there's only one type: Object :P
5-10 times slower doing exactly what? Odds are that you are doing something stupid if this is actually impacts you. 
Upvoted since it starts a good discussion, even if I do think it is a bad idea. What might be a good idea might be to create specialized methods in browsers for actions that ends up being slow, since that would make a whole lot of clients slower. 
If validation is important to you, you can prefix all Angular attributes with data- to make your HTML valid. I'm not sure if your gripe with Angular is that it mixes HTML with behaviour, but some people make that argument. To me, that's a trade off I'm willing to make since it makes my templates more understandable, and it keeps CSS-selectors/DOM code out of my JavaScript. 
I agree that jQuery is groundbreaking and expertly written. I sometimes use the source as a reference when I'm not sure which way of dealing with a problem is best. But no matter how well-written it is, the fact is that jQuery solves a problem larger than any one person needs to solve, and because of that, no solution using jQuery can be an optimal solution. And yes, I do know that I can write the code I need without using jQuery, because I've done it for every project I've taken on.
I have never had that problem with Google's fast search so I can't really relate. You can come up with examples of where it sucks or make outlandish claims that it's improving a shitty old PHP site, but the fact remains. jQuery has done more to improve the web than it has done to harm it. You can't judge the value of something by citing a few places where it doesn't work.
When I first saw the tQuery project, it looked promising, professional, and easy to get started with. I began using it and found that it seemed to be all of the above. However, when I was looking for solutions to tough problems, I would find sample code and solutions that pertained to THREE. tQuery was great, but the lack of a community giving solutions for everything the tQuery way meant I had to parse through a solution for vanilla THREE, adapt it to tQuery's API, and then implement it. I could skip all that and go around tQuery and work with THREE directly, which is what I often found myself doing, and, as a result, found myself learning both APIs. Furthermore, when I actually dug into the project on Github, I realized it was a one man show, and frankly didn't see the professionalism I saw on the surface when I got deeper into the project. I am more than well informed on tQuery, and in fact used it extensively before I dumped it. Here are my thoughts. **API** I don't feel the chainable API adds any value to THREE's API. Why should I chain function calls to set configuration values when configuring a light? tQuery.createDirectionalLight() .addTo(world) .position(-100, 100, -100) .color(0xffffff) .intensity(3.5) .castShadow(true) .shadowDarkness(0.4) .shadowMap(512*2,512*2); What's the gain of having tons of differently named functions to set configuration values? With THREE, it would look like this: var light = new THREE.DirectionalLight(0xffffff, 3.5); light.position.set(-100, 100, -100); light.castShadow = true; light.shadowDarkness = 0.4; light.shadowMapEnabled = true; light.shadowMapWidth = 1024; light.shadowMapHeight = 1024; scene.add(directionalLight); tQuery provides a mixin attributes utility function called tQuery.mixinAttributes that makes this look nicer, but it's usage isn't documented anywhere... why couldn't we just do something like this? tQuery.createDirectionalLight().addTo(world).set({ position: [-100, 100, -100], color: 0xffffff, intensity: 3.5, castShadow: true, shadowDarkness: 0.4, shadowMap: [1024, 1024] }); And what if you decide it should look like this in the future? Does my tQuery project break or do you keep supporting 3 ways to do the same thing? **Plugins** The plugins are a great idea, but their existence doesn't necessitate wrapping the entire API. Simple, well documented JavaScript objects that follow the THREE API would do just fine. **Support &amp; Community** You are the only real contributor and maintainer of tQuery, not including the two other people contributed a total of 57 lines of code. What if you get hit by a beer truck and my product (which is already production) needs a feature in a version of THREE that came after your demise? What if you lose interest, have triplets, or get a new job that takes all your time? Then I have to rewrite my software and tear tQuery out of it just to upgrade THREE. **Bottom line** I know this is your baby. You've spent hundreds of hours on it and you truly believe in it. However, all the potential gains provided by the chainable API you've added, boilerplate you've eliminated, and plugin system you've developed aren't worth the potential problems that could result from relying on a project like this. In its current state, with no community and, as a result, an API that I feel causes me more problems than it solves, I can't rely on this software and will advocate that others do not as well.
click on "New Pen", top left.
I really love your version, but I've ended up with -1 mines on the board, and a confusing 1 mines left message, and 2 apparent mines on the grid. 
Nice. Really clean looking code. The computer scientist in me has a problem with the algorithm used to determine the surrounding mine number (but that's really, really minor). Have you thought about implementing a similar version using something like [Laces](https://github.com/arendjr/laces.js)? I think a game like this could really benefit from it.
Huh, that's pretty odd. I don't suppose you got any errors in your console, did you? Also, what browser are you using? Im glad you liked my version!
Didn't check the console, Chrome 23 on Windows 7
I'll dig into it, thanks!
Actually, scratch that comment about the algorithm. I thought about it a bit, and it makes sense. I just saw all of the for loops in there and thought it was a problem, but it actually isn't.
For some reason I remember the original minesweeper worked on mouse up rather than mouse down. I could be wrong as I'm on a mac now, but doing it on mouse down rather than mouse up felt weird. Good work though!
That's odd, i'm on Chrome OSX myself and haven't been able to reproduce that issue. What version are you on?
I think you're right, now that you mention it. Do you think mouse up would work better, usability wise? 
I'm having the same problem but only with the Chrome Reddit Toolbar installed. Plagues a lot of submissions on this subreddit!
Awesome! Would be cool if you implemented the middle click feature of clicking on numbers for speed solving! (perhaps just use right click instead of middle click though)
Close the Reddit Chrome toolbar and it works
Can you explain why "on steroids" ? What's better than in jsfiddle ?
The look... Hum... Wouldn't it be possible to do it lighter ? And with less space wasted in decoration ?
Deceptively so. Twice now as I was clicking it brought me to GitHub and reset my game. :(
Ok, I thought about it even more, and came up with one that will work better for the majority of cases. Instead of checking all of the non-mine spaces, find all of the mine spaces. Add 1 to all surrounding non-mine spaces. Splitting hairs, but still! 
Yeah, I think mouse up would be better. I wasn't ready to commit to selecting the first square I touched. It lets users abort in a way.
Definitely worth a shot. I'll work it out and keep you posted!
Yup that's the problem: pesky reddit companion chrome extension. It doesn't often cause problems, but when it does ... argh!
No middle mouse button support? Also why use the "HTML5" logo for the mines? It's confusing because it looks like a number 5.
Very nice, just needs right+left mouse click at the same time, most useful feature in minesweeper ever. If you didn't know, if you have the right number of bombs touching (Say I had marked a bomb next to a "1") then it opens up any of the other adjacent spaces because you already "know" you have the right number of bombs marked, so all of the other spaces should be safe!
&gt; no solution using jQuery can be an optimal solution. So now you're advocating pre-optimization. Also, can you say that you can mimick anything done in jQuery not only optimally, but as fast? How's the saying go? Great coders re-use? Is the amount of time spent doing something "optimally" the right choice if someone has already written it good enough where you could get by without implementing it your own way? Many sites DO NOT need some optimally coded magnificent piece of JS. Yes if everyone could do everything in pure JS that would be great, but that is some fantasy situation in which you are ignoring the actuality: how many people would get as far with Javascript as they would with jQuery? Why discourage people using jQuery if it gives them an interest in Javascript? See, you're speaking to the wrong crowd. The best way to go about becoming a Javascript developer right now... is to learn jQuery? Wanna know how? Every job that requires you to know and code only in Javascript, usually wants you to "know your shit", e.g. 5+ years of experience. Jobs that require less experience, usually have other people of less experience on the job, and they're already using jQuery. You are advocating to the wrong people! People who are in mission critical apps are already using pure JS. People that are on the fence, should probably pick up jQuery, as it's an efficient way to accomplish things that otherwise would be pretty difficult for a beginner to accomplish without it.
Thanks! I added this feature to my todo-list. One question though.. say my first open square is a 1, leaving 8 squares as potential mines. With this feature could i try flagging them all one by one, till i mark the actual mine, and then the rest of the squares open up? Won't this make the game a bit too easy?
damnit... and i thought i was actually going to get work done today... now i must... sweep... mines...........
Nope, the game doesn't check to see whether you're correct or not. If I improperly mark a mine and then both-click the space, it should open all of them as long as there is the right amount of bombs surrounding (thus opening a bomb and killing you). So, if you only marked one bomb, and you both-clicked a "2" it wouldn't open anything. 
I just started it today in conjunction with the Stack Overflow [javascript room](http://chat.stackoverflow.com/rooms/17/javascript) If you have any ideas please let me know. If you think that I should use a different WP theme let me know as well! \^_^
You're correct, I can't count the amount of times I would mouse down, then realize I'm making a stupid mistake =)
It really bothers me that I have to split up my view horizontally, especially considering that widescreen monitors are the norm now.
one does not simply walkthrough mortar
Agree with this completely. Would be nice to have a drag &amp; drop grid system where I could move and resize all 4 sections to fit my needs. Maybe a 3x3 grid where I can drag and resize the 4 sections, and each section can take up multiple squares in the grid. I'd also make the header smaller. Space is key in an online IDE like this.
It shows that when you write `//` in the input field then 27 of 44 tests are passed. Is input regular expression? If yes AFAIK `//` is invalid regular expression, and either way why would it match any of these test cases? Or maybe I'm wrong and I should put in the input field normal text (not regexp) so that: `text.match(regexp_test_case)` evaluates to `true`? Edit: Clearly I have a problem understanding how this test works ;)
Nobody said anything about struggling.
In Minesweeper, typically the win condition is checked after a square is revealed, not when a flag is placed. The goal is to clear the board, not flag all the mines. It should be possible to win without placing any flags. I'm not sure if you wanted your implementation to be different, but I just wanted to point this out.
&gt;You mention using another option like TypeScript or Dart or CoffeeScript... all of which require a compilation step too so your second point isn't very valid :P With Dart, there is no compile step during development. It's shipped with Dartium, a build of Chromium which includes a Dart VM. You can even step-debug your code from within the IDE, set break points while it's running, and things like that.
It's "uni typed".
Nah, that's not it. No one spends much time with debugging that kind of errors. However, if there are types and if the editor/IDE is any good, it will *immediately* tell you if you screwed something up. Furthermore, it can then also provide call-tips and auto-complete. Finally, types at the API boundaries are the bare minimum of documentation and it's something you should do anyways. Basically, optional types remove some friction in several key areas. Since you only have to add those types at the API boundaries to get those advantages, it's virtually free. It's amazingly convenient, really. Also, if you compare it with doc comments, it's actually much cheaper to use type annotations. JS with YUI Doc annotations (CC looks pretty much the same): /** * Initializes the lazer shoe. * @param {Shoe} shoe * @param {Laser} laser * @param {Number} joule * @return {Boolean} */ function initializeLaserShoe (shoe, lazer, joule) { var ... } Same thing with Dart: /// Initializes the laser shoe. bool initializeLaserShoe (Shoe shoe, Laser laser, num joule) { var ... }
Valid point and i'll rethink this with my next commit.
Thanks for the lengthy comment! I really appreciate it. I do have the context menu on the canvas element switched off at this point, but I'm guessing it doesnt work in all browsers and on all OS's. I'll look into a more universal approach to solve this issue. Goog point that the game doesn't need to automatically reset after a win or lose. I put that there for development reasons so i can quickly test and retest. Maybe its a better idea to just remove that now. The text at the bottom is pretty light isn't it? Idk, i just wanted to keep the focus on the game and have a short story there for those who were interested. I'll make it a bit darker. As for the other suggestions, i've added them to my bug/todo-list.
Sent you a pull request. I added support for HiDPI (Retina) screens since canvas is pretty blurry by default. The mine images still need to be double resolution, but I don't have access to those source files.
It's important to note that JavaScript takes time to download and by default blocks parsing of the page. If the script is downloaded at the end of the page the user has to wait for the download. If the script is loaded in the head it can block parsing (and first render) of the page. With a little care you can kick off the download in the head without blocking and use DOM complete or similar event to ensure the content is ready.
Just approved your request, thanks for the contribution! I'll upload the image source files asap.
I also ran it through the online closure compiler.
Shit made me dizzy. What's it supposed to do?
 /^\/(((\w|\\[\/+*?\[\]])+|\[[\w+*?]*\])([+*?]\??)?)+\/[gim]*$/ 62 chars. It passes all the tests...
What a faux pas. Thanks, really :)
Yes, top left for me, I thought it was a 3 click trial version or something...
For the blocking reasons you mention it is not advisable to put any JS code on HEAD. I am not sure that by "with a little care" you mean issuing asynchronous load of your scripts via a "master loader" script on HEAD. While that is an accepted technique, it is not supported by all browsers and the article is really explaining that you don't really need such anti-patterns
If you don't start loading it in the head you waste time because you delay the js download until the end of the page. There are ways to asynchronously download js that are cross browser. The only time this wouldn't matter is when all of your content is generated through JavaScript.
So which one is it? JS load gets delays so it needs to be on the HEAD or it should be loaded asynchronously? Whichever the case, loading JS scripts in HEAD is highly inadvisable and not a common good practice. This issue has been exhaustively discussed and is widely accepted in the best practices repo html5 boilerplate (https://github.com/h5bp/html5-boilerplate/blob/master/doc/html.md#modernizr). As mentioned in the article i linked from h5bp, it's only modernizr that's worth putting in the HEAD, everything else goes to the bottom of the document. In modern webpages, it really matters when your JS code evaluates as you have rich elements that need JS's to be operable. That said, it makes a difference if your JS executes inline (synchronously) or on DOM Ready (asynchronously). That the whole case in point of the blog post.
&gt; Here is a quick example of a very very basic version of the program Looks like you forgot to include a link
Let me show you a real example this time. MSN loads 3 scripts in the head. All download in parallel and without blocking the rest of the page. I ran a test on webpagetest.org just a few minutes ago http://www.webpagetest.org/result/130110_JZ_9A3/ Notice that jQuery (loaded from a CDN) takes about 700ms to download. If you waited until the end of the page, you would delay your script execution by at least that time. If it was simply downloaded in the head synchronously it would obviously block the rest of the page. Asynchronous download in the head gives the best performance. You may notice that test was done on t.msn.com using IE10. It's taking advantage of the async attribute on the script tag. Let's take a look at www.msn.com on IE8 where the async attribute doesn't work. http://www.webpagetest.org/result/130110_TB_9CE/ Notice that there js files are still downloading in parallel in the head. I think there's code examples of what they do on the web, but essentially they use some inline js to create a script tag, set a src, and append the element to the head. I haven't tested it, but I believe using something like RequireJS (requirejs.org) should give similar performance gains. I feel that it's appropriate to mention that I work for MSN so my opinion my be viewed as biased there. However please look at the performance data I linked, and run your own tests on them as well.
Sigh.. I don't really get the reasoning. Of course I don't want to load heaps of unecessary scripts in the head.. On the other hand, the blocking of rendering can be actually a good thing. Because if your scripts do transform your page, you will see rather ugly flashes of unenhanced content and cause additional reflows in the document. If you put the documents in the head they block rendering, set up all necessary stuff which can then be rendered instantly.
Please understand that loading more than two script (JS) files in parallel is against the [HTTP/1.1 spec](http://www.w3.org/Protocols/rfc2616/rfc2616-sec8.html#sec8.1.4) Also, loading files in parallel does not mean that this is what actually happens when the page is rendered. If you study the same page (www.msn.com) on Google Chrome's 'Timeline' devtool you will notice how the scripts in HEAD are blocking the rendering / parsing of the rest of the document: http://than.pol.as/M5Na Notice the 'Blue Line' which indicates that load is done, and see how far away from loading the page is actually rendered and painted. Read more about the issue at these links that i found at the top of a google search: http://developer.yahoo.com/performance/rules.html#js_bottom http://stackoverflow.com/questions/5329807/benefits-of-loading-js-at-the-bottom-as-opposed-to-the-top-of-the-document
That's not quite accurate. If scripts load in the HEAD, there are no elements in the DOM yet to manipulate, or 'necessary stuff' to set up. That's why you need to rely on the DOM Ready event before you start manipulating anything on the page to make it usable. And that's the exact point of what the blog post discusses. To make your page usable as fast as possible you need to let go of the DOM Ready event and execute your JS payload synchronously at the bottom of the document.
The first option is not more functional, it is *correct*. What you are proposing is certainly more readable, but for a single line of code that does one thing that can be simply explained, the risk of client code having weird edge cases that aren't simply explained in the function's documentation is much greater. Plus there's a fundamental breakage with your design: if the receiving function inspects `arguments`, it's going to always see five arguments rather than the number the invoker tried to call it with. That could completely break how the function is supposed to work. 
I think the current version is actually more readable than the second. It is obvious to anyone that understands JavaScript what `.apply` does and why you need `Array.prototype.slice.call(arguments, ...)`. The second hides the fact that the function is meant to be variadic, and, as grayvedigga explains, its not really a solution anyway.
Always go for readability! However the code snippet you pasted makes perfect sense and is readable enough. DocBlock comments on what this method does are indeed missing, but that's another issue
Really cool -- how long did it take to make?
That was my motivation to post it here. Readability ftw. However, as commented elsewhere, the first option isn't just functional, it's correct. It is the way how it should be done. Even if I don't like calling it that way, it is correct.
Hmm, maybe you're right, this is completely sane Javascript code. Even though it looks like voodoo if you are used to another language :P
prerender content on the server, drop your javascript at the bottom, decorate when the js is loaded in. by far the fastest way of getting content to the user and not be blocked in anyway. your example of putting js inside your html is fine and dandy, but on large apps it is a maintenance nightmare.
this is awesome. thanks for sharing.
Awesome, now I can play minesweeper at work :)!
That's great. It will be interesting to see later in the day when it gets more views. There were five of us for a short time when I was checking it out. Nice code; thanks for sharing.
Replaced the banner, hope this is better!
Thank you!
Thanks for all the feedback, guys. With my latest commit I added the following: * Speed solving, right click on a revealed square * Faster mine index algorithm * Listener put on mouseup rather than mousedown * Retina support (contributed by meltingice) * Image preloading * Replaced that Github ribbon * Game no longer automatically resets after a win or loss I still need to add a couple of things though. If you guys have any more ideas or suggestions, i'm all ears!
Consider using [quickcheck](https://npmjs.org/package/quickcheck)?
There are a couple of ways to think about this that may help you come to terms with the messy code: * the function you showed is not a piece of code that's going to have to be maintained often. It's a library feature, exposing very well-defined semantics to users: behaviour can be described concisely in one sentence or so, such that any sane Javascripter - even an inexperienced one - should know exactly what to expect from it. As long as it's well named, it serves to make the dozens of places that use it more readable. * you're looking at one line of code, for chrissakes. It even does one thing. That's not exactly low-hanging fruit in the unreadability stakes. * it's an unfortunate fact that "highly dynamic" (I'm using that term loosely, of course) behaviour in libraries often has to do things that user code very rarely does. Variadic dispatch is a prime example - it's pretty ugly in most languages that support it. The good thing is it's something that (mostly) only library writers have to deal with. `Array.prototype.slice.call(arguments, ...)` and even `Object.apply` are such features in Javascript. This particular incantation is the only correct way to do it in Javascript, so it's an idiom that more advanced Javascripters (those writing libraries) need to be familiar with, and this function is doing a Very Good Thing by encapsulating that behaviour so that users can take advantage of it without cluttering their code with low-level mechanics and exposing themselves to errors from a construct that doesn't fit the pattern of whatever they're trying to do. It would be awkward to say the least if constructions like this appeared in your business logic ... in this sense, the code above is a readability *win* because it abstracts the ugly details into a (hopefully) nice name whose meaning and use is (hopefully) obvious.
I think the game is very promising and though it seems like it is quite ambitious that it's coming a good way and will soon be in a first beta state. Maybe it is not possible to make an mmorpg with one programmer alone, but in this case the playbase will make most of the programming within the framework delivered. Came here to post about topia myself, but it seems like there already is a thread about it (though quite old already) so I will not spam this subreddit by making a new submission.
Okay here I go overboard .. I don't do a lot of Javascript on a daily basis, so this is probably far from idiomatic and people will scream at me (which is good - they'll have good reason I'm sure), but I'd be tempted to rewrite your function as below: function titleCase(string) { return string[0].toUpperCase() + string.slice(1); } Communicator.prototype.get = function(key) { var realThing = this.realThing; var method = get + titleCase(key); if(foo[method] instanceof Function) { var args = Array.prototype.slice.call(arguments, 1); realThing[method].apply(args); } else { // throw error } }; The only really crappy thing is finding a place to put `titleCase`. I'd worry about that but then I'd start getting frustrated about JS's lack of module support. Also, it should probably be called `upperFirst` or something so people don't wonder why it doesn't handle sentences as they expect. I've made the function longer, but I prefer reading more shorter lines, the `realThing` variable might make a performance improvement and I trust the JIT to remove any overhead from `var args`. I've made the condition precise because testing for "Falsey" in Javascript gives me the heebie jeebies, and because precise code is self-documenting. If you trust your JIT a little bit more you could move `var args` outside the `if` block because I think that scans better, but it does sort of go against the principle of least (scope) visibility. I for one loathe lines of code wider than 80 characters and I'm happy to have eliminated one here ... though I know a lot of Javascripters disagree vehemently with my dinosaur-like ways. 
I'm not sure about putting realThing in a variable, other than that... I gotta admit, it looks pretty good. The check for a function is an obvious miss in my original code, though I think a typeof check would be better suited. Putting the arguments in a variable makes it much easier to see what it does. I had the same problem with the titleCase function, it should be a function somewhere, but just as you, I was unsure where. So far, that's the only place I use it so I'm leaving it there. Once I need it somewhere else, I'll find a better place for it.
Putting `realThing` in a variable actually serves two purposes: it eliminates a lot of `this.`, making further code more concise; and it (theoretically) gives the optimiser an easier job by making it explicit that we can hold a reference rather than consulting `this`'s dictionary every time we use that object. The latter is probably a bit moot with `this` given its dynamic scope, but in general that's a reason to do something like I have done. I tend to handle functions like `titleCase` in a fairly ugly way -- for a lot of projects I'll have a "fooUtils" module which is a grab-bag of functions and small objects that don't belong anywhere else (until they do), which is used gradually throughout the codebase as it's needed to extract a common vocabulary. It's a sort of worse-is-better approach to modularity: the contents of "fooUtils" are pretty disparate and unconnected, but I don't feel so bad because each component is small and I try to keep them independent. Now and then I see a Grand Unifying Theory that ties some of them together and would make a good standalone library, but the marginal utility of extracting and polishing that is so low it seldom happens. In the best cases, those libraries become side projects, implemented independently of fooUtils, and the main project never transitions to the polished library because it's too much effort and fooUtils works well enough in that project. The problem with this approach is getting other developers on board .. people tend to be distrustful of "gravey's bag of tricks" and it takes a bit of work to convince them that using (and contributing!) to it actually does improve maintainability of the main project. On the other hand, I find factoring in this direction very satisfying and if refactoring for maintainability and robustness is an important responsibility, having a place on hand to put (and look for!) functions that capture a recurrent pattern in the application without giving them a full taxonomy is a useful tool - sometimes you'll find very similar things being done in completely different parts of the codebase that benefit from being brought into line.
Can you share the code you used to make it?
Yes, the code is available at https://github.com/jchavannes/webiverse/ If you're interested, I also have other demos at http://noobsonly.com/projects
I created another game using Socket.io (socketracing.com) that had over 30 people connected fairly seamlessly. This game uses the same timeout interval (200ms) and theoretically should have the same performance (from a network perspective). I'm not sure the limits of WebGL.
On Chrome I get: Error creating WebGL context. Three.js:275 Uncaught TypeError: Cannot call method 'clearColor' of null. Three.js:275 :( But on Chrome Canary it works! :)
If you want to open this with safari, you have to enable webGL: [instructions](http://onvert.com/guides/enable-webgl-safari/)
I don't have the time to do this but you've got some technical hurdles you'll need to figure out when you do (I bring it up so you can work with your programmer to address these in ways you're happy with): Memory, if you're making a flip book of images like that your going to have to ask yourself how are you going to deal with the memory problems. 1 - Quality. How big are these frames going to be and how are you going to store them, high quality png files? 2 - Storage. How many frames are there going to be and where are they going to be kept, in memory or on disk? If in memory you could hog too much, if on disk you've got the 3rd problem. 3 - Latency. For playing back the flipbook of animation you'll need fast switching, the best way to switch fast is to have the images in active memory, but that'll limit your app. If you load them from somewhere else you can have quite a bit of latency trying to put that many images on screen at a reasonable rate.
ECMA5, you're not crazy - besides hearing voices, I find you quite rational!
Normally I'd agree, however, not in this case since realThing is only used once. I've often pondered whether or not to make a utility module. But in the end I never really do it. If it really has to be a function but is only used once, I declare it inside the method that's using it. Otherwise, I declare it as method of the class that's using it. If multiple classes need it, It's time to find a real place for it.
Well yes, i know the 5 is almost always wrong, but thats because i dont use it as a 5. It has nothing to do with the number of surrounding mines.
I've worked on something similar to this, albeit just for breaking down and viewing animations frame by frame. We had animations with thousands of frames built up from spritesheets of about 20 frames each and we didn't have any problems. Modern browsers can easily handle loading a few hundred megabytes of image data and crunching through it.
Thanks for this
The browser can sure, but I've users get pretty grumpy when their browser eats up a lot of memory. I mean it's to be expected but it's something to be aware of and test if you have problems with in your target audience. If I was programming it for myself there'd be little concern but I'm not sure what frame sizes they're after etc. It's a good thing to keep your eye on is more my point than the fact that it'll ruin the application :)
I really like this concept and it was amazing watching your creation come alive in that video. I build HTML5 tools for animators for a living and I've been meaning to do a frame-by-frame drawing tool along the lines of this. I can't promise anything right away, but I'll show this video to the rest of the guys and see if it would make sense to make a module that comes close to this behavior. BTW, we build [Moonbase](http://moonbase.com), which is very much in its infancy as we only launched it a couple of weeks ago, but that's where I would want to tie it in to if it was decided to build a feature like this.
Totally agree, but it comes back to "a stitch in time saves nine". There's a balance to be stuck between avoiding memory/performance problems and only fixing the ones that actually matter. Spending 20 hours avoiding what amounts to 0.05% of your CPU usage is not a good idea so you need a benchmark to figure out what is worth time optimizing for I.E. the finished product or prior experience. But if you follow typical MVC for what could be a demanding app only to discover your MVC is wasting a lot of performance you really needed you're better catching it early because you made yourself aware it might of been a problem and keeping an eye on it, like I'm suggesting here :)
Excellent. I'd consider moving the difficulty selection and other controls inside the main screen area, but otherwise, good job! Let's see what else ya can make!
My first comment (currently on top) wasn't an attack but a question. OP should have answered with a list of what is, in his opinion, better. Depending of those points, he might have converted some of us from jsFiddle (which is very useful but not without problems).
I agree, I hate the lazy marketing attempts. At least follow up the questions in the thread that you chose to create! RABBLE RABBLE RABBLE!
I had a lot of fun but I have no idea why. Will you update it or do you want to keep it this way? Some more actions would be sweet (jumping?)
I chased someone off the main plane for about 45 seconds and then decided to turn around and try to find my way back. After a while of not reaching it, I changed course a bit and continued. I never made it back. I have to say, the disorientation I felt when turning and not being able to see anything, and realizing that I was probably never going to make it back to safety was a little unnerving. Edit: Oh gosh, I went back into the game and I'm still stuck in the abyss. Forever Alone. :(
&gt; It has nothing to do with the number of surrounding mines. That's exactly my point.
Haha, try clearing your cookies if you want to reset back to the middle.
Beautiful Hatred....
eggs, stir, min 8
get enough people in that room, it really look like an asylum of daleks
Are you totally sure this is just marketing? I don't know this user but as a developer I very well might present a new tool I discovered.
Very nice library. Only thing I can think of right now that I'd like to see in there is a way to subscribe to the changes of a property, so that if a value is changed, I can react to that change. Other than that, very nicely done, looks very useful.
Thanks! Any suggestions for my next experiment?
&gt; which is something that should be done very often Ideally, this is done elsewhere by machines. Fortunately, browsers and JS engines are much better nowadays. You'll need a lot less testing if you don't support IE7 and IE8. &gt; you need to be able to also debug on different browsers than dartium There are source maps for that. (Same deal with the Closure Compiler, CoffeeScript, TypeScript, and so forth.)
Source mapping is what Haxe-js uses also.
Point being, with Dart, compiling to JS and debugging via source maps is just a fallback. Typically, you'll rarely do that during development.
just shooting from the hip here.. first you'll need a way to make the user-input code uniform.. I'd say first off is to remove spaces before/after punctuation.. so 'POWER (' becomes 'POWER(' From there you'd need a method that would generate ranges using the excel coordinates. Next.. um... loop over every instance of [a-zA-Z]\\( and strip out any attempts at function calls that are not in a pre-approved list. (I'll explain later) Then.. you can run the code through some sort of eval within a javascript object. Your object would actually have methods called 'POWER', 'SUM', etc. It could then take the already-supplied arguments, run it through your method that would convert g2:g6 to a range of cell values. Using this method, the browser and nested functions will take care of 'order of operations' for you. the function cleanup, since the code would be eval'd in some fashion, would just help reduce the vulnerability of JS code injection. You don't want the user putting in an arbitrary function name that you don't want them running. formula = '(POWER (SUM(G2:G6), 3)*COUNT(H2:H6)+ SOMEBADFUNCTION(2))'; formula = cleanupFormula(formula); //(POWER(SUM(G2:G6), 3)*COUNT(H2:H6)+(2)) then you'd prepare the code to run against a javascript object that has all these methods formula = makeRunable(formula); //(myObject.POWER(myObject.SUM(G2:G6), 3)*myObject.COUNT(H2:H6)+(2)) result = eval(formula); each method would then just utilize native JS API, for example: SUM: function(range){ dataArray = myObject.argumentParser(range); total = 0; $.each(dataArray, function(index, val) { total += parseFloat(val); }); //obviously some error checking in there somewhere. return total; } each method will send its arguments through an argument parser that would return something like this g2:g6 = [100,52,3,4,0.6]; I know eval is frowned upon but this may be one of those rare times. --edit for clarity
Strange, working fine on Win7 here, which OS are you using?
As long as it's able to do many data types, nested objects, and custom property naming, it should be awesome. Go for it.
For some reason I was expecting this to be a really complex coding task but what you've said makes it seem really straightforward - thanks a lot for the quick response! If there were over 100 different functions would doing it like this put a lot of strain on the browser?
My little game: Creep around behind other users and never let them see you moving.
Oh no, merely loading the jquery library is probably a few hundred functions/methods already. Now, a browser that's 20 years old might cry a little but with any computer in the last 10 years you won't have a problem. You'll get results sub-second.
I just googled this and haven't used it myself, but it looks promising: http://jscc.phorward-software.com/ I searched for "JavaScript lexer", btw. It looks like you can define some grammar that will take a string and translate it into javascript like MMDeveloper recommended.
I personally like http://cssdeck.com/ better. You don't have to pay for things like live changes preview. And afaik - cssdeck was first but didn't had marketing resources.
True. The factors I was referring to were execution speed and download size.
Nice demo. Has [alot](http://4.bp.blogspot.com/_D_Z-D2tzi14/S8TRIo4br3I/AAAAAAAACv4/Zh7_GcMlRKo/s400/ALOT.png) of potential
&gt; Otherwise, I declare it as method of the class that's using it. This particular choice irks me, as the function really has nothing to do with the class and certainly doesn't benefit from being called as a method. Whatever works for you though :-)
Thanks for your reply. Id love to share with you the idea in it's entirety. I'm very confident in this application being used for animation line test, and later can be imported by multiple animation packages. Thanks for taking my idea into consideration.
Sorry, missed this earlier. It took ~10 hours probably. I was trying to learn WebGL (Three.js), so this started out as just a rotating cube (which is still there) but then I kept messing around and decided to try integrating Socket.io as well. I am extremely impressed with the Socket.io/WebGL combo and would not be surprised if it started to take off. Hell it even works in Linux!
No that's a good point. I'll have a quick look and see if you can fake it using white vector lines and an appropriate blend mode. edit: Hmm, maybe. It looks like it would be possible but you'd lose the ability to edit the vectors this way. It might be better to just do the math and cut the existing lines. That would be easy for straight lines, a little trickier with bezier curves
Ooops, major fail. I just added the link, but here it is again: http://schematic-ipsum.herokuapp.com.
I don't believe it's supported on XP tbh, although you can do some quick google searches to figure out the real reason. And I _highly_ recommend you upgrade to Windows 7, XP is depreciated and old as hell by today's standards \^_^
It's not a perfect solution, but where else to put it? Making a new object just for such small stuff that nobody else uses feels worse to me :/
How is that different from model.bind("change:&lt;propertyName&gt;", mySubscriptionCallback) ? Edit: I have just updated the documentation for the events.
I would not call variadic dispatch in python unreadable
Yes there is. All good text editors already provide color code samples for all of their code syntax highlighting. 
Fair point - Python's probably the most readable of the lot in terms of handling varargs and kwargs. You don't have to scratch Python too deep to find metaprogramming constructs that get ugly though - decorators come to mind: the obvious "clean" implementation leaves a lot to be desired so you end up having to resort to functools/decolib. Before you dig in for an argument (kidding), Python does a lot - more than most languages - to make code readable. There are some unfortunate edge cases, but I don't know a single language that's immune from having those ... even ones with crippled facilities for abstraction!
Just write one yourself :) If you do, please post a Git gist or something. It would be useful. You might want to include: - All the reserved words https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Reserved_Words - String literals (i.e. "foo" and 'foo') - Number literals - Object literals - Regex literals (thx Boldewyn) - True, false, undefined, null - Comments (i.e. // and /* */) - Operators https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/Operator_Precedence ... did I miss anything?
That's the thing, did you miss anything? Maybe? How will I know? Not until I use what I missed and the syntax highlighting ends up being off.
I've never seen that in any text editors I've used. I really gotta get away from notepad. /s # What text editors have you experienced that provide this?
Well if you look at it for a few minutes and can't think of anything to add, you probably won't need it.
I'm looking over it now (there wasn't a link when I posted before ; ) and it looks awesome. I haven't really tested it yet, but assuming it does exactly as it says in the description/instructions I'll be using it to it's fullest.
There are two situations which cause this type of thing. In one, things start getting less interesting and smoothing out. Sometimes there will be big holes with a solid background color. When this occurs it is due to the maximum number of iterations being too low. This can be changed through the settings, or by pressing the "D" key, which cycles through some iterations values. By default it is somewhat low in order to maintain performance on slower computers. Normally, just press the "D" key and much more detail will be filled in to explore. The other situation occurs when you've zoomed in a whole lot. With this, things get very blocky. This is the one that occurs from the floats running out of precision. These are both things that all fractal programs are affected by. There are potential solutions. I tried a test in implementing what is called "deep zooming," which would have allowed zooming to go on many many times further without getting blocky by allowing larger floats. The performance was awful though, so I didn't include that in the released version. 
If there's one thing you should do, it's to set globals as red. They'll bite you, especially in the beginning. Consider enabling jshint or jslint at your editor as well. That'll catch certain errors early on as well.
Check out Notepad++. It's free and provides syntax highlighting for tons of languages.
Thanks for letting me know. I'll see what I can do.
Good god, that site. Audiovisual overload.
I need to come up with some useful projects like this for my spare time, and nice job. 
Just drop in an unminified version of any JS lib.
This is actually what I've been using, with the Deep Black Theme. My current project requires access to a lot of files and putting them all in one notepad++ instance is too cumbersome. Having multiple notepad++ instances open also isn't ideal as the title of the instance changes constantly and it's difficult to remember which instance has the files I need to access. Therefore I'm currently looking into sublime2 text editor which has quad view, but I would like to preserve NP++ deep black theme with sublime.
FYI, this is what PhpStorm uses. var globalVar; /** * Constructor for &lt;code&gt;AjaxRequest&lt;/code&gt; class * @param url the url for the request&lt;p/&gt; */ function AjaxRequest(url) { var urls = [ "www.cnn.com", 5, globalVar]; this.request = new XMLHttpRequest(); url = url.replace(/^\s*(.*)/, "$1"); // skip leading whitespace /* check the url to be in urls */ var a = "\u1111\z\n\u11"; this.foo = new function() {}; foo(); # }
Linux++, absolutely recommend it!
The fish with mustache broke me
 Uncaught SyntaxError: Unexpected token u MIDI.loadPlugin.js:79 GET http://mudcu.be/midi-js/soundfont/soundfont-ogg.js DOMLoader.XMLHttp.js:121 tries to load a file http://mudcu.be/midi-js/soundfont/soundfont-ogg.js but can't find it. 
i was mostly psyched at the sass support. also, full width is generally better for styling purposes instead of rending the html output in one sector. i guess it never occurred to me that it'd be taken as a marketing thing. if you take a look at my previous posts, i was posting jsfiddle stuff, so im just generally piqued by online editors. buddy sent me a link to the [roflcopter codepen](http://codepen.io/AdmiralPotato/pen/LtEnC) and i flipped. 
sass and scss support, coffeescript support, etc. click the cogs in the respective sections
hit the button next to each of the cogs for css, js and html
really i was just happy about sass support. this looks pretty sweet, and free. 
Wow... every single one of these worked flawlessly on my iPad.
On the IPhone 5 as well... Mesmerizing. 
These are simply amazing. 
I don't see any options to resolve my issue, and really, it should be in a vertical layout by default.
Very well done! Also running without any flaws in alien blue.
it works on my touchscreen, but not with a mouse on my laptop... what's the point?
You should check out his website. This guy is elite.
That's a good idea. I added it to the issue list here: https://github.com/jonahkagan/schematic-ipsum/issues/3. Feel free to add your comments or more ideas for where/how to get images.
Not a single one works on my android tablet. I picked the wrong device :-(
It was a good thing to post it. A follow-up would have made it better but anyway thanks for sharing.
On my One X (Android 4.1.1) it works flawlessly
It's sooo sloppy under Firefox Nightly on Linux. Is there anything in about:config I can do about it?
Doesn't appear to work in stock. Use Chrome.
That was kind of what I was thinking about: a simple way to write a syncing layer. I like the approach that allows you to compose the whole MV* setup with the partts that you want, rather than a single library that tries to do handle everything.
Looks like it has issues with Chrome 24.0.1312.52 on desktop, but if you point your browser to [one of the sections](http://fff.cmiscm.com/#!/section/triangulation) it seems to correct itself. Also, the navigation works in FF, but some of the CSS 3D transforms are borked. EDIT: I updated Firefox, now the navigation doesn't work there either. 
That's curious. I won't say I find this interesting but it works on Chrome on my desktop PC with a mouse.
Website is Flash though, not Javascript
Works perfectly in Firefox for Android (Aurora channel).
Works great on the nexus 4.
note sur if this is helpful, I used jquery to test the width of a div which was the width of the page, using media queries and testing display:none on the div If the div was less than 800px I served up low res/low bitrate videos (Phones / tablets) and wider I served up the full rez videos (desktops)
Gorgeous.
Yes, I was thinking of doing something similar but my friend would like to do bandwidth detection. Hrm, if it's that big of a pain we may just scrap the feature. Thanks for your response :)
Thought this would be about a built-in framework for javascipt file dependency injection, like a class including jquery automatically if it couldn't find the JQuery object. I know require.js handles this but it would be nice to call a built-in function.
Great blog. I look forward to a follow up post on 'bind' if you choose to discuss it.
thanks for reading!
Bandwidth detection is 'impossible', http://mobile.smashingmagazine.com/2013/01/09/bandwidth-media-queries-we-dont-need-em/ Serve content based on screen size. BTW I also used javascript to only autoplay the video on large screens, small devices you need to click the video, and i've set preload="none" so its your on a mobile you choose to ply the video.
A few comments The array and object literal syntax is also safer and faster than new Object/Array numbers.sort(function(a,b){return b - a}); this isn't a safe comparison function (NaN, Infinity, and a few other values can break it). This is also an O(N log N) method (at best) for an O(N) operation. A lot of the stuff you mention is also browser APIs not JS :( 
So much to absorb and learn and realize with js.
I prefer jsbin.com. Lots of neat features. JsFiddle, actually has to be the worst. 
DI isn't worth much without a service locator. Having to constantly pass around various objects would get tedious and convolute the code.
A good resource to learn the intricacies of JavaScript is [JavaScript Garden](http://bonsaiden.github.com/JavaScript-Garden/).
Why would you do this? Your examples completely bypass testing the actual database. Instead, you test the objects you created, what's the point in that? You almost never have to test the database, what you should be testing is the abstractions on top of it. And when you DO have to test the actual database implementation, testing like this is pretty much useless.
I think you'd change your mind on that idea of requiring every possible internal dependency with a guard if you really tried it. Sure that's pure inversion of control, but it's definitely not the easy way. All of those dependencies you're injecting would need to be injected at the very top of your application and cascaded down everywhere. The point of the post though is that I believe an IoC container is unnecessary in javascript, because it doesn't have private access modifiers like the languages that IoC containers were originally invented for. My personal experiences (thousands of tests in node apps and libs) so far support basic monkey-patching as a viable and simpler alternative. Of course, YMMV.
The post is just trying to make the case that you can just monkey-patch to inject fakes and you don't need an IoC container like other languages do. Sure, you and I can agree that it's obvious, but there are still people saying you need an IoC container in this very thread. I can point you to countless projects trying to create one, or achieve something similar. (Re angular: Sorry... It looks like they've removed the java requirement. I haven't used it in a couple of years, so I have no idea how they implement the IoC container now.)
&gt; JavaScript may be the only language people don’t need to learn before using it, I think learning it is a good idea if you're going to use it.
Wow, that's the best performance in JS I've seen so far. I once tried to generate the mandelbrot set but failed miserably..
I was just updating range.js, and implemented char code ranges, but they don't work well, so I'll leave them like they are currently. Building a range from 'A' to 'z' would not only include the expected letters, but also "[", "\", "]", "^", "_", "`" since their char codes are between 'Z' and 'a'.
great article, thank you. i`d use the more accurate term "Immediately-Invoked Function Expression (IIFE)" instead of "self-executing anonymous function" though. http://benalman.com/news/2010/11/immediately-invoked-function-expression/
Well done
I would guess D, as the first three are definitely false. I'm not aware of `alert` not working in some browsers, though; I've always not used it because it is so damn ugly and invasive. I would advise you to think twice before applying for this job, too.
 if (x &lt; 10) { console.log("There are less than 10 items"); } else { console.log("There are more than 10 items"); } 10 will fall into the else, so there is code for that condition. The text is wrong, but that isn't a logic error.
In the `numbers.sort(function(a,b){return b - a});` example, he's trying to get the max element from an array of numbers, a one liner: Math.max.apply(null, [-1, 2, 3, Infinity]);
I often say it myself, but this might be more dangerous than beneficial. You've probably already seen new coders using || to provide a default value but forgetting 0 was a legal value. I prefer to encourage coders to test using nb = typeof nb!=='undefined' ? nb : 2; 
To make code more readable, split as much as you can into variables and functions, and try to use single small words when possible (camelCaseCanMakeUglyCode): // reference to slice var slice = [].slice // abstracting utils like these will // clean the code overall function capitalize (str) { return str[0].toUpperCase() + str.slice(1) } Communicator.prototype.get = function (key) { var method = 'get' + capitalize(key) // return early saves an indent level if (!(method in this.real)) return // or throw error var args = slice.call(arguments, 1) this.real[method].apply(this.real, args) } 
So the correct answer is **E**: *a moron concocted this exam*. Which should be followed by the question: Are you sure you want to work for these losers?
I finished the test and can't get back in. Most of the questions were outdated and/or ripped directly from w3schools. E.g. correct MIME type for javascript and the only correct-seeming answer was "text/javascript" whereas it should be "application/javascript", and a lot of questions like "what is the output of this..." that I just copy/pasted into my browser's console. Thanks though. I don't like their answer as there is code to account for cases where X is 10. I got 85% correct so I guess it's fine, this is for a PHP job anyway, they just wanted me to take all the tests.
it's the evaluation for a temp agency, I wouldn't be working for them, they just have crappy outdated tests.
&gt; For example, when I had the task of finding the largest number in an array of numbers, I used to write a loop, like so: &gt; &gt; var numbers = [3,342,23,22,124]; &gt; var max = 0; &gt; for(var i=0;i&lt;numbers.length;i++){ &gt; if(numbers[i] &gt; max){ &gt; max = numbers[i]; &gt; } &gt; } &gt; alert(max); &gt; &gt; This can be achieved without a loop: &gt; &gt; var numbers = [3,342,23,22,124]; &gt; numbers.sort(function(a,b){return b - a}); &gt; alert(numbers[0]); No, no, no, no! You just replaced an `O(n)` algorithm with a `O(n log n)` one! I'm all for writing high level code and not getting mired in optimization details, but using an *algorithm* with worse complexity just to avoid writing a tiny `max()` function is awful. What's even crazier is he points out that `Math.max()` is built in on the very next line. Instead of a sort, just do: var numbers = [3,342,23,22,124]; var max = Math.max.apply(null, numbers); alert(max); The article it links to on sorting is just as bad, suggesting using `Math.random()` in sort in order to shuffle an array. No!
FWIW, the proper way to shuffle an array is to implement the [Fisher-Yates Shuffle](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle) algorithm. It essentially works like throwing everything into a bag and then pulling items out of it until it's empty. It's a very simple linear algorithm which does exactly what it's supposed to do. Java's `Collection.shuffle` also uses that algorithm. **Edit:** For people who have trouble reading the pseudo code, in JS it looks like this: var shuffle = function (a) { var i, grab, temp; for (i = a.length - 1; i &gt; 0; --i) { grab = Math.floor(Math.random() * (i + 1)); temp = a[grab]; a[grab] = a[i]; a[i] = temp; } return a; // for convenience }; `console.log(shuffle([1, 2]))` will either print "[1, 2]" or "[2, 1]".
Is this basically a standalone version of Backbone.Events?
Basically, if you'd replace: "There are more than 10 items" (&gt; 10) with: "There are 10 or more items" (&gt;= 10) It would be okay.
A service locator is more or less the antithesis of DI. DI is about "give me what I need" and decidedly not "give me foo-ed bar with qux".
You seem to misunderstand tests. A good test is about reducing the complexity of the tested scenario, to quickly test different arrangements / configurations. Of course you'd finally also need a "data base test" which would be an integration test that tests the whole application. But for testing smaller parts of the application you want to isolate them as good as possible. So if I am testing some specific type of data processing, I don't care where the data comes from and what is does after I'm done with it, I just want to test that operation. 
Shouldn't database tests be run in the databases's test suite?
This looks really useful! Thank you!
Thanks. This was actually my 3rd try (over many years) at implementing fractals, and the first attempt that actually made any progress. I think in my earlier attempts I failed to grasp how complex numbers worked properly. Once that was done right, everything else fell into place. Keep at it, and I'm sure you can get it going. I put a lot of effort into optimizing this, and I think it paid off. There was a ton of profiling, manually inlining code, jsperf tests, and general cheating and attention to detail everywhere in the code that does the work. There also are 4 different draw phases to keep everything feeling responsive. I never fully optimized the newton fractals. The mandelbrot and julia formulas are simple enough to write out inline, but for the newtons I ended up creating a complex number class because they were getting too crazy to write out fully without making mistakes. It is probably the strangest complex number class out there though, because it is created to minimize the need for allocating new variables or repeating function calls, and so its usage is a little odd. I'm currently working on figuring out how to get the stripe average method of coloring working fast enough. I think it is close. Once I have that there will be an update that can make some very nicely shaded images, hopefully without too much of a performance hit. 
Thanks for your detailed reply. :) &gt; I think in my earlier attempts I failed to grasp how complex numbers worked properly. That's pretty much where I'm at right now. Do you remember any specific resources that helped you understanding imginary numbers in the field of programming ? &gt; I put a lot of effort into optimizing this, and I think it paid off. You probably took advantage of the 32-Bit pixel manipulation method aswell, right ? I just recently discovered this method. Very interesting stuff.
Integration tests are crucial, you can't claim to have tested your application if you completely ignore the constraints provided by the dependencies, IMHO.
&gt; for (topic in topics) { &gt; fn = topics[topic]; &gt; ... Why no .hasOwnProperty() check? Is there something else in CoffeeScript that's supposed to ensure that the for loop won't hit properties tacked onto Object.prototype?
They might mean human logic, not computer logic -- like, what would a human think is logical for this function to return / display / alert? tl;dr: different logic, shitty English
&gt; var scrollTop= Math.max(... Doesn't Math.max(undefined, 1000) return NaN?
Yeah when I saw that I just had no words. This is why everyone who learns programming should be taught the basics of runtime complexity.
I suppose I'm just an old-timer because I didn't find this article very useful. Definitely a good one for new-ish comers as long as they ignore the part about sorting.
It's c. The answers don't take into consideration that there could be exactly 10. 
It seems cleaner to me to fully embrace DI and not instantiate the database in the CarModel object at all. What if BikeModel also needs a database? What if the Database object caches the result of queries and you have two or more instances of those? A central object keeping track of such instances would seem vital to me. 
Ok, yes, I do see your (and the article's) point; people need to be more aware of DI as a pattern, but there's still not a built-in framework. I was expecting to read about something really cool to use during runtime. But instead, it's about how to test better? I wasn't even expecting to read about testing. Also, if you haven't used Angular in a couple years, it's going to blow your mind, now. I'm definitely an Angular evangelist, if only for its amazing DI framework. =D Honestly, it's reignited my love for front-end work again. 
What blows my mind is that the author has written books and works for Mozilla. He should know better.
Thanks for the suggestion :) You wouldn't have any sample code you would be willing to share would you? I will give you all the karma XD
It does in my node interpreter.
It specifically says "... and there is no code **or text** for that condition." (emphasis mine)
How the hell did you only get 85% if you were just running them in your console?
The algorithm looks like it still needs a random factor (i.e. `Math.random()`), no?
some were questions like this... not "what is the result of" questions. A lot of stuff about best practices where none of the answers was even close to a best practice.
 var StartingStrength = 5, StartingIntelligence = 5, StartingCharisma = 5, StartingLuck = 5, StartingStats = 20, StatsOkText = document.getElementById("startingStatsConfirmOrDeny"), StatsAreOk = true; function checkStats() { StartingStrength = parseInt(document.getElementById("startingStatsStrength").value); StartingIntelligence = parseInt(document.getElementById("startingStatsIntelligence").value); StartingCharisma = parseInt(document.getElementById("startingStatsCharisma").value); StartingLuck = parseInt(document.getElementById("startingStatsLuck").value); StartingStats = StartingStrength + StartingIntelligence + StartingCharisma + StartingLuck; console.log(StartingStats); if (StartingStrength&lt;0 || StartingIntelligence&lt;0 || StartingCharisma&lt;0 || StartingLuck&lt;0) { StatsOkText.innerHTML = "You can't have negative stats. Sorry?"; StatsOkText.style.color = "#C24641"; StatsAreOk = false; } if (StartingStats == 20) { StatsOkText.innerHTML = "That adds up to 20!"; StatsOkText.style.color = "#57E964"; StatsAreOk = true; } else { StatsOkText.innerHTML = "That doesn't add up to 20!"; StatsOkText.style.color = "C24641"; console.log(StatsOkText.value); StatsAreOk = false; } }
Notably StartingStrength = parseInt(document.getElementById("startingStatsStrength").value); and StatsOkText.innerHTML = "That doesn't add up to 20!"; EDIT: formatting...
Wow, what a silly error. The editor I'm using even changes the text color when I put "getElementById" instead of "getElementbyId". Thanks for the help and the tip about the console as well.
Thank you :)
Grunt is an incredible tool, it makes minifying, concatenating, precompiling and many other tasks trivial.
Have you looked into rx.js? 
Since also true in browsers, maybe the code should be var scrollTop = a | b instead of var scrollTop = Math.max(a,b)
Not sure, I have not used that feature yet. If you can reproduce reliably, it would be worth filing a ticket for.
Syntax is different, and there is a different set of set-able styles. Asking the internet is not the best way to learn this, though. Just try it yourself. This may be a good place to start: http://www.nihilogic.dk/labs/canvas_sheet/HTML5_Canvas_Cheat_Sheet.png
Both versions of that code seemed like poor examples to me. Why would you write either version as straight-up inline code like this instead of writing a function? Even in example code - *especially* in example code - one ought to try to get this right. Also, there's a bug in the first version: What happens if the array has only negative numbers in it and no positive numbers? Oops. And the second version doesn't just find the max value in an array, it *modifies the original array*. Let's try again: // Return the maximum value in an array of numbers, // or -Infinity for an empty array. function numericArrayMax( array ) { var max = -Infinity; for( var i = 0, n = array.length; i &lt; n; ++i ) { if( max &lt; array[i] ) { max = array[i]; } } return max; } alert( numericArrayMax([ 3, 342, 23, 22, 124, -17, -401 ]) ); alert( numericArrayMax([ -17, -401 ]) ); alert( numericArrayMax([]) ); Or we could try the `sort()` approach with the modify-in-place bug fixed: // Return the maximum value in an array of numbers, // or -Infinity for an empty array. // Experimental version using sort() just for fun. // Very slow for large arrays! function numericArrayMax( array ) { return array.length == 0 ? -Infinity : array.slice().sort( function( a, b ) { return b - a; } )[0]; } alert( numericArrayMax([ 3, 342, 23, 22, 124, -17, -401 ]) ); alert( numericArrayMax([ -17, -401 ]) ); alert( numericArrayMax([]) ); And finally, when we learn the fast and simple way to do it (thanks, munificent!): // Return the maximum value in an array of numbers, // or -Infinity for an empty array. function numericArrayMax( array ) { Math.max.apply( null, array ); } alert( numericArrayMax([ 3, 342, 23, 22, 124, -17, -401 ]) ); alert( numericArrayMax([ -17, -401 ]) ); alert( numericArrayMax([]) ); 
This is a known issue in OSX, the default number of processes/files open at any one time is very low (my 2012 MBA defaulted to 256). What I've done to solve this problem is use the `ulimit` command to up the limit temporarily when opening a shell that I'm going to use for grunt. The reason I do this temporarily instead of permanently is I've grown wary of modifying defaults in OSX due to other problems I've encountered. If you want to fix this, open your terminal and before running grunt use the following command: ulimit -n 2560 This will up your limit by a factor of 10 if your default is the same as mine was; this setting is only temporary and will revert to the default on a new shell so feel free to modify permanently in a .profile alias if you get tired of typing it :)
This sure was an interesting first JavaScript project. It turned out harder than I expected, but I've learnt a lot, from JavaScript/jQuery basics to free dictionary APIs and JSONP format. Obviously, there is still work to be done, but this is a basic functional bookmarklet. The goal will be to fix some bugs to enable it on as many websites as possible. Also, there are many ways to expand this (translation, more dictionaires, ...), but it obviously depends on available free APIs. I'd love to hear some feedback from you (especially on speed, compatibility and user-friendliness)!
Alternatively, presuming that length is &gt; 0, since the function is meant to return some value: function arrayMax( array ) { var index = array.length; var max = array[0]; while (index &gt; 1) max = Math.Max(max, array[--index]); return max; } Avoids rechecks on array length, avoids assigning negative infinite, negative loops generally run faster, etc.
The worst thing that ever happened to me in JS was when I wrote the selector engine for my own toolkit tiny.js: I did not know that IE doesn't reset lastIndex for named RegExp, so when I stored the Selector RegExp and used it via .replace to run the selector, it worked only for the first time in IE and then started wherever the last selector had its last match. It was a total PITA to debug this one.
just one of the many challenges we face in the browser development environment
i agree with you on this. we use server side pre-rendering with closure then decorate. our decoration is done via code we generate as well based on our json, since the json has to map to a view in order to render on the server. very sweet, incredibly fast and easy.
Woah, aweseome. I knew there were issues like that watching files in OS X because I have written watch utilities in the past. I wasn't aware of ulimit, thank you very much. You taught me something.
Most of this should be obvious to anybody with formal training or a little bit of experience in any programming language. Use existing libraries, don't duplicate code, et cetera.
Every week, without fail.
https://www.destroyallsoftware.com/talks/wat
Yup, JavaScript objects are hashes.
IOC containers are used to build up graphs of objects. DI is not used for testing, that is just a side effect of it. If you think you don't need a service container in Ruby/Javascript/YourDynamicLanguage, it's because you don't understand what DI is or what it's used for. If you think you can encode your dependencies in your classes as optional instantiations, you have entirely missed the point of DI.
Backbone would only be the latest in a long line of libs to offer such support for events. jQuery and NodeJS come to mind as predecessors that offer a similar or nearly-identical implementation.
Begin with getting yourself confortable with any of the current frontend frameworks (backbone, angular, whatever). That way you can translate familiar concepts from backend frameworks and getting yourself a beachhead into javascript before you get into the hard-to-classical-programers stuff like dom-painting or async stuff
Anybody know of some good "getting started" guides?
Grunt is in a state of flux as the transition from 0.3.x to 0.4.x takes place; there are some pretty fundamental differences between the two. However, there are still a number of good articles out there that should give you a good idea of what the typical grunt workflow looks like: - http://scriptogr.am/micmath/post/getting-started-with-grunt - https://github.com/gruntjs/grunt/wiki/Getting-started
Thank you!
why not combine the two? You can place Dom elements on top of the canvas. So let's say you have a game with a score counter. The score counter could be a a regular span. See [this example](http://realstuffforabstractpeople.com/the_rgb_game/)
I've got plenty of examples of these things available here: http://aharrisbooks.net/h5qr/part9/ These are the examples from the canvas chapter of one of my books, but you can follow the source code without the book and probably figure out what's going on. I've got examples of rotation, animation, shadows, text formatting, and more. I actually prefer the canvas approach for now simply because the implementation is consistent across browsers. If the canvas is supported at all, pretty much everything will work. On the DOM side, you often need to repeat the concepts for multiple browsers. Here's my examples for the various new CSS styles: http://aharrisbooks.net/h5qr/part6/ Let me know if you have questions about anything specific and I'll be happy to go over it with you.
"One of the most annoying things about JavaScript is that it has no scope for variables. Any variable, function, array or object you define that is not inside another function is global," This, IMO, is a poor explanation on a very important aspect of JS. First, it says JS has no scope, then it essentially says it has function scope. Kind of confusing, though maybe it's just me. Would have been better, IMO, to have said JS has function scope, any variable defined within a function is not accessible outside that function. Any function defined outside a function is global and is accessible everywhere, blah, blah, blah.
If you want to apply CSS to canvas, what you actually want is SVG, which keeps track of these elements in the DOM and allows CSS to be applied to them. Re-implementing CSS type behavior into canvas (and all of the state tracking of your objects that will be needed) seems overkill.
very cool! I didn't know JSFiddle had done that!
One where IE 6/7/8 support is removed from jQuery 2.0!
Also worth noting that in every browser the request is sent to the server correctly, the site just doesn't update.
Not sure if this is the problem, but could be that readystate == "complete" might fix it?
True. There are no items in a canvas, only pixels. Though the idea of an object with a bunch of attributes that specify how it's rendered suddenly strikes me as an interesting take on a view for a game object, even though you mention it as a bad idea. Perhaps some modification of that.
Not sure but I suspect it's fine. Prefixing isn't an issue (easy to code for) but deviation from spec is (but those browsers don't do a lot of that). IE is hard because of spec deviations so needs more code.
Nope, no change.
Oh, it can work on that just fine, but as a purposely-tuned model of the game world, not re-inventing the DOM rendering engine and CSS layout directives -- too general-purpose and there have been years of optimization put into those engines for that purpose in compiled languages. The advantage of an immediate-mode rendering API is that *you* can decide where the abstractions will go, and how abstracted they should be, but if you're going to perfectly mirror the already available retained-mode rendering API available, why go through the trouble?
Right, and nobody in their right mind would choose an API notorious for making things like putting boxes beside eachother next to impossible (CSS). I think gamequery or similar actually use DOM elements for rendering the game, but I never saw the point. Though I feel as someone who wrote a few flash games in the past that SVG (a bit more logical) seems miles away from having the tools and libraries for low-barrier-to-entry games yet, I'm actually having more fun with canvas from the ground up.
You might consider adding 'var xmlhttp;' to the top of the function. Right now xmlhttp is in a global context, which is could be the problem. Tracing what is happening in the program with console.log() or alert() can be a useful tool to see if the onreadystatechange is being called. Failing that, why not use jQuery or another library to help out? Writing AJAX requests like this is for the birds.
The same world you used to live in.
While SVG is probably what the OP is looking for, one should mention that its performance is limited when using many or complex objects in realtime.
Hmm, but that's true of all retained mode APIs, including HTML itself. Just figured that warning was a given.
Are older chrome versions relevant at all? It automatically updates anyway. And from a quick look there's no option to disable it.
Hey, thanks again for the feed back. Thinking about injection of $scope, also solved the second design requirement, a easy mechanism to register server requests. [Here](https://github.com/SergeiGolos/Angular/tree/master/RoutingEvents#server-communication) is how both were solved. Tried to keep it angular feeling.
Added an example of server side data request with updated version of the module. Added a data resolution function into the event function injection.
Chromium, the open source version of Chrome does not autoupdate. I am not sure how the version numbers track between the two though.
Why aren't you using a library so you don't have to special-case things for IE?
Hey JavaScripters! I recently programmed an auto-buying script for Steam's Community Market an decided to release the code once I found out it was against the TOS. I hope you all enjoy! If anyone has any pro-tips or feedback, I'd love to hear about it! P.S. The script doesn't work out of the box (on purpose.) The only intention here is education so please, enjoy!
So... You want to manipulate the DOM when you access some API through AJAX? Just use plain old JavaScript or, even better, jQuery since you already have it loaded.
You might be surprised to know that the vast majority of the people writing "Ruby/Javascript/YourDynamicLanguage" do somehow get by without using a service container. I think your assertion that we "need" it has been thoroughly debunked in practice. I'm also not sure what definition of DI you're using. Dependency Injection is just finding some way to inject a dependency into a class, rather than forcing it to instantiate it itself. IoC containers are just one way to achieve that, but simply passing a dependency as a parameter is also Dependency Injection. However you achieve it, if you are providing a class with one of its dependencies from the outside, you are doing dependency injection. Read "Manually Injected dependency" at http://en.wikipedia.org/wiki/Dependency_injection for a java example, which is very similar to my first js example (and then I continue to detail other possible patterns that are not possible in Java). I spent a couple of years doing Grails (built on spring), so I'm quite familiar with IoC containers. 
more of an example than an introduction.
I know people get by without DI and without service containers. I guess it was unfair to say you aren't doing DI. Sorry. What I meant to say was you're reaping only half of the benefits you could be. Your classes should not have a "default" dependency like you have. I know you think it's flexible by allowing an override but providing a default, but it's still a form of tight coupling. The only benefit you are getting here is testability, which is only one of the benefits of DI. If you do this, you still have a coupling to your preferred dependency. Imagine you want to use your class in another project. You have a dependency on a class called `Database` in there. I have to edit your class to use my own database class, which is named `DB` but implements the same methods. This is not good, and it's because you coupled your classes together by instantiating the dependency in the constructor, even though you left the door open for someone to override it. If you had just taken the database in the constructor, there would be no issue. The only coupling is to the interface, which is how it should be. Service containers become almost necessary if you really decouple everything. If all your big components are broken up into sub components, and then those subcomponents have dependencies, you may need 3-4 levels of dependencies. This is hard to manage. You end up either rolling your own service container (perhaps you call it a factory), or you end up using one of the many libraries out there. I used to do the exact same thing you're doing. I'd instantiate all of the "defaults" in the constructor, and put them in public properties so they could be overridden. I was admittedly only doing it for testing and did not fully understand DI. Then a coworker showed me the light. 
These are just hypothetical examples for the purpose of showing some DI patterns. It's not intended as an example of how to architect a full-blown model layer. If it helps, just imagine that it's some other fake-worthy dependency like a CSV file that will only be accessed from that one place.
Not at all. C++ application code normally hides internals. This is not (usually) the case with javascript code. It's a cultural difference more than anything else, but it's reality. Javascript doesn't have 'private', and most people don't write all their methods in constructor scope ( http://javascript.crockford.com/private.html ). And since the guy writing the test is also the guy writing the application code, I don't see why the tests shouldn't take advantage of the fact that the application code exposes everything. I know it's not workable in most other languages, but I'm more interested in hearing the actual downsides for the solution for javascript.
Well the examples have both, because I'm using DI for the purpose of injecting mocks. If I wanted to write a tutorial on mocking I wouldn't have written manual mocks like that but rather used a mocking framework like sinon. I was just trying to show a few different seams that Javascript objects have for injecting mocks (that most other languages do not have). 
this was good.
Honestly, it sounds like a pretty run-of-the-mill strategy pattern would solve the example you gave. I usually just inject my strategy as an argument to the constructor when this problem arises (which is still very infrequent). I have to say I've never had the need for a general solution to swap out all dependencies of any class at any time for re-use in another application. I have a feeling that I misunderstood you, because I doubt you have either. I guarantee that no one would use any JS libraries I've written if they relied on an IoC container. I feel like you're talking about experience in another language when you talk about public properties though. We're definitely in agreement that one shouldn't follow these patterns in a language with private properties. 
any errors in the console when you try to run the function? Also (in chrome) check the network tab of developer tools, what is going on there?
To chime in with everyone else, when the term AJAX was first coined, I rolled my own homegrown framework, and we used that in production for a little while. Then I kept running into edge cases, that were just major pains in the ass to address...things that had already been solved by people more experienced than I was. I switched to Sarissa shortly after that, and later onto Dojo. So basically, unless you're seriously trying to learn exactly how the ajax request lifecycle works (which is valuable in its own right)...save your sanity, pick a framework and use its abstraction.
First, test with an alert("test") to see if the onreadystatechangefunction is executing at all. Next assign the responsetext to a variable, like: xmlDoc = xmlhttp.responseText; document.getElementById(div).innerHTML = xmlDoc; You say it's hitting the url, so not a domain problem. Also you may want to put the xmlhttp.send() and the .open above where you define the function, and not sure why you have null in there. I'm just looking at my code, I have basically the exact same thing and it works great. That's how I have it laid out. 
Here is example of the Ajax code I recently used in one of my apps. Seems to work decently so far. Haven't fully tested it across all browsers. For sure works in Chrome, Firefox, and Safari. http://pastebin.com/37vhJXS5
Thank you. I was hoping there was a custom plugin to automate what I was trying to accomplish, but I see now that I must create one myself. Thanks though
It depends on what you mean by relevant. According to [this data](http://caniuse.com/usage_table.php), about 7.2% of Chrome users are using something that is more than 2 versions old (4 - 22), which accounts for about 2.2% of total traffic. [This shows the same idea in graphical form](http://cdn.arstechnica.net/wp-content/uploads/2012/12/chrome-adoption-2012-11.png), although it appears to be slightly older data. Does 2-3% of total traffic matter? Maybe, maybe not. But IE6 + IE7 combined account for only about 1% of total, and there still seems to be a desire to support them in some cases, so if 1% is worth worrying about then certainly 2.2% is worth worrying about. 
Hrm, odd. I'd expect those who install that in the first place to keep their browser up to date.
I guess my biggest concern with the Angular supplant method is SEO. Web crawlers would just get the formatting of the data instead of the actual data we'd want them to match.
But i think when you do a system update it will pick it up . 
I would use multiple overlayed canvasses, one bigger for the background that you shift fluently in the required direction that is only changed if you hit a border and one for the moving characters and monsters.
Here are some good examples: http://www.kesiev.com/akihabara/ This one sounds kind of like your game: http://www.kesiev.com/akihabara/demo/game-tlol.html ('z' key is actually the 'a' button inside the engine, btw) The great thing is you can view source in the browser and check out the js files. Example: http://www.kesiev.com/akihabara/demo/akihabara/gamecycle.js http://www.kesiev.com/akihabara/demo/akihabara/gbox.js 
Yes, that definitely is somewhat in the style I am aiming for :) thanks for the link!
The movie.css and movie.js don't matter 
Put it on JSFiddle.
I've tired calling it using a body onload but that over rules everything and just prints the JavaScript.
I tried it there and it still didn't work.
Let's start with the basics, It is very likely you want to redraw the canvas every frame. In some cases you can get away with just redrawing changed entities but most of the time, you just want to redraw everything. The key of doing this without chocking the canvas is pre-rendering. If the background doesn't change, generate it (completely, not just screen sizes) and draw the required part of it on the main canvas using the drawImage method. This works because you can draw other canvas elements with drawImage, so make a new canvas with document.createElement('canvas') set the width and height, draw your stuff, save the result, and use that to draw on the main canvas. Player movement, every entity (players, monsters, bullets, whatever) have world coordinates and screen coordinates. The world coordinates are the same for everybody, but the screen coordinates depend (in your case) on the player. An example to calculate the screen coordinates for every entity: this.screenX = (this.x - player.x + (canvasWidth / 2)); this.screenY = (this.y - player.y + (canvasHeight / 2)); Assuming the screen coordinates are inside the canvas, draw them. Sprites; Ideally, you want to have all the sprites in one single image, this saves downloading them all (having a http handshake on every image) However, if you're not using That much different images, you can get away with 1 sprite per image, this could even be faster with lower amount images because most browsers can download multiple images at the same time. For custimizing you go back to pre-rendering. Make a new canvas, draw the base species, draw the custimisations, save the result, and don't care about it anymore. Animating the images is very easy aswell, an animation is just mulitple images after each other, so you save all the frames of the animiation, and draw them after each other 
The first thing you mentioned about likely wanting to redraw everything...it depends. You should look at the background as that in the pokémon or zelda games...most of the times it's pretty static with the character in the center, however as the character moves the background moves...but if I had to redraw the whole background every frame I think that would be really expensive and I should better just translate the background image slightly. I could be wrong though, I'm still mainly a back-end programmer :)
Look up the Google Grits demo. There is a talk on YouTube that goes with it. They cover most of the problems you're facing. I'd link you but I'm on a phone. 
Multiple overlaid canvasses for parallax scrolling. Nice idea.
the crawlers you really care about actually do execute javascript
The crawlers your clients and employers really care about may not.
Not really....this isn't really a "look at my cool website that happens to use javascript" subreddit. It's a subreddit about javascript. If you want us to review some of your code and offer feedback, then that'd be fun -- just state such and provide links to the source files. If you have a demonstration of some javascript code that is truly innovative and groundbreaking, then that's great -- tell us why and show us the code. If you want to discuss how your site benefited from some methodology or tool, then by all means, bring that up! Those are all great basis for posts. If you just want to pimp your site for a figurative pat-on-the-head, then this is probably not the place. p.s. looking at the code, there is definitely room for improvement.
I'm sorry but this doesn't belong here if you ask me. And that is coming from a fellow game botter. Why would the general public need an exact script to spam the steam store every 250 ms ??
Not much meat on the bone, more like an introductory article. Not bad, but not really anything new being brought up that hasn't been posted to this sub many times before.
It's definitely more targeted towards those unfamiliar with RequireJS, since I've found that some people don't know why they would want to use such a tool. For more advanced usage, I'd say that the official API docs are fairly comprehensive.
This is pretty much the same approach I use in the large Angular apps that I have/am working on. The only thing you missed is this: angular.module('myApp').controller('MyCtrl', function ($scope, $http, $filter) { //stuff }); should be this: angular.module('myApp').controller('MyCtrl', ['$scope', '$http', '$filter', function ($scope, $http, $filter) { //stuff }]); .. in order to prevent minification from breaking everything. EDIT: Actually looking at that ngmin project you made, it looks like maybe you didn't know that one. ;) hehe.
ngmin adds these annotations for you automatically.
You can do that too. The point of ngmin is to make the code minification-safe while saving you precious keystrokes.
if the pixel is fine staying where it is then you don't need to redraw it; however, when something moves you need to erase the pixels it drew where it was before, that's the nut buster of simply drawing only what's changed. With your tile based system you could mark tiles as dirty and redraw them on an individual basis, but really this is only going to save you FPS when the camera isn't moving. Benchmark everything as depending upon what you adjust where the performance reponses might surprise you.
Time for you to re-read the reddiquette. Frankly this elitist crap is a pervasive problem preventing the growth this subreddit. Also the Fork Me on Github ribbon which shows Twicture as 100% Javascript makes this /r/JavaScript worthy. If you find yourself downvoting a lot of things here, maybe you should unsubscribe.
I don't think there should be much problems in the net code. My issue is that I believe I'd get bad slowdowns in case I intend to redraw a canvas which is basically the size of the screen every frame. I might be wrong there but I assume it'll create slow code if you have to draw a good 2000 tiles every frame at a decent FPS
Which tools would you recommend to do this benchmark?
I think it's mostly Linear Algebra that started to shout at me that I could use a translation for it. So for you the best solution would be to just predraw everything virtually and then draw the final image on the screen itself?
Chrome's built in profiler is a good one, other times I simply use a timer.
Well the underlying point here is that depending on what is actually going on in your game loop will determine how you approach the problem. You could start with the tiles and see how your performance is - esp on the systems you think you'll end up running it on towards the lower-end You are right when you're looking into not redrawing everything - but depending on what the character did or what is moving on the screen determines what you could or could not redraw sometimes you'll have to squeeze as much as you can out of each frame if you have a complicated scene or detailed graphics animations but you'll also find that over optimization could be completely unnecessary with the speeds and performance of JS / canvas these days Awhile back I saw that a person was doing experiments using only DOM elements to do animation rendering (ofc with the requestAnimationFrame as well) The canvas can be a kind of tricky thing that sucks you in to it but you might end up using almost none of its power and all of its complexity. If you're going to utilize some of the more advanced drawing features and capabilities of the canvas then you're good to start tinkering and then analyze the problems as they come along.
Exactly! The only real disadvantage I've encountered is higher memory requirements, but that's a tradeoff you'll have to decide on yourself after evaluating target hardware and such. For desktop computers it's rarely a concern anymore.
An easy to drop in application for handling client side image cropping. Application is name spaced to ensure nothing conflicts with your code. HTML element id's can be easily renamed in the settings so that this can work with your own conventions. Checkout the demo here: http://files.theyoungastronauts.com/kropr At the moment, this is purely a frontend application. Once you have cropped your image, right click and choose save. My next step is to build the server-side api component to make it easy to integrate with an upload script.
reading that gave me a headache.
There isn't any real reason why the script you typed up should be dying. It looks like there might be a problem in the CoffeeScript in jsfiddle.net/js/heyoffline.js file. Not exactly sure what's causing it, though.
Maybe the JS engines don't handle base64 coded stuff very well?
nice work. I am currently making a hobby personal site and one of the requirements is auto thumbnail generation. did not know [you could save canvas to a file](http://stackoverflow.com/questions/5867534/how-to-save-canvas-data-to-file), js ftw! think I am gonna revisit my thumbnail code ....
When I crop then right-click to save, it saves the entire image with the cropping overlay with it. Edit: Using FF18, btw.
I prefer the 'django' project structure over the 'ruby' structure. Meaning that each directory (app) has it's own controllers, models, services, partials, ... So if I have a products and users dirs they all will have their own files. That way if you want to reuse it for an other project it's easier to copy or extract it as some library. Here's an example I am working on: https://github.com/Enome/sproutsheet/tree/master/parts
I prefer the 'django' project structure over the 'ruby' structure. Meaning that each directory (app) has it's own controllers, models, services, partials, ... So if I have a products and users dirs they all will have their own files. That way if you want to reuse it for an other project it's easier to copy or extract it as some library. Here's an example I am working on: https://github.com/Enome/sproutsheet/tree/master/parts
Yes, I've made something before that downloads a file. My bigger plan is writing the image data to a hidden textfield allowing it to be submitted via a form. Then server side, the image data can either be saved right to the DB as a blob OR the image can just be processed and saved to the file system. I think the power in this is that someone can "upload" a really big image but since it's client side (at least until the crop is made) you don't have to wait for the slow internet.
I just tried it in firefox 17 and it worked as expected. I'll update to 18 and see if anything is different. Thanks!
Created an account just to say this: Remove the jQuery requirement from this project. Nevermind talking about why jQuery is bad. You've got it included in your tool and you only use it about 5 different times; as selectors. Vanilla javascript has selectors. You should be more careful about creating dependencies like this, as you've alienated a large base who might use this script, but who do not want to use jQuery. For that matter, you should take modernizer out as well and leave it as a suggestion for devs. 
Thank you for this. I'm new to AngularJS and you had some good points what I should think about while I'm creating my first serious AngularJS app. I'd like to read more of these in the future. ;)
All versions of IE? What's the error that IE is throwing?
I agree - there isn't really a need for jquery in this project. Wouldn't take too much to alter. As for modernizr, my boilerplate has it included right away but as you can probably tell, it's not being used even once. Thanks for the tip - this should improve the load time quite a bit.
I never meant to imply that you had ill intentions, sorry if you got that. Since your post had no comments or votes, I thought I'd try to explain why that was (and how you could avoid it in the future). Good luck!
Thanks! I'll take a look.
When moving the mouse quickly to the border it doesn't select until that very border which is a major bug in my opinion as people expect that behavior and it's incredibly hard to select everything in some direction atm
How does angularjs compare to backbone?
Please make the "crop" link a button and move it next to the input in the demo! I'm in a laptop and had uploaded a large image, I've been a solid 2 minutes right-clicking different areas and wondering what I was doing wrong 8) Btw, what browsers are currently supported?
parallax scrolling is the type of scrolling you see in old platform jumper games where the background passes by "slower" than the foreground, creating the illusion of depth :)
So there is no way I can draw on the canvas in a relative way to achieve this? That way I can really do the scaling the way I'd intend to.
It would be nice if the thumb loaded the tweet or twitter profile.
This doesn't seem to work in Chrome. This is what I get in the JS console: &gt; Uncaught SyntaxError: Unexpected end of input twucL:1
Hi, thanks for the reply. It should actually do that when hovering over the thumb, might be a small bug as I'm just testing it with jQuery 1.9 that was released today. I've reverted it back, try a different search and hover over the results. I am running into a small bug with the jQuery where very rarely it would return the error, "Cannot get .length of undefined." That's when I notice the script stops and doesn't return the tweet etc... Give it another go and let me know :)
That memoization article linked in there was pretty good and informative.
Is the site on the same port 8080? Domain policy strikes again... http://stackoverflow.com/questions/1767443/can-i-use-xmlhttprequest-on-a-different-port-from-a-script-file-loaded-from-that
It seems to make controlling public vs private functions and variables super simple by just making everything a variable and returning only what you want to be public. Additionally, has anyone seen a jQuery plugin pattern that's similar? I always have trouble figuring out how to pass parameters and how to expose/publicly call functions and variables in jQuery plugin patterns. And making everything a variable in a similar way seems to make it very consistent and easy to follow. Please let me know if anyone has any recommendations or examples that make other patterns more transparent. Thanks
It's called the module pattern.
Specifically the revealing module pattern: http://addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript Also, the whole module is wrapped in an IIFE (Immediately Invoked Function Expression), passing in jQuery as $.
I want to point out that the performance comparison in that link assumes a static background, meaning it doesn't move when the character moves, like the original Legend of Zelda. I'd also be interested in seeing a comparison where the background scrolls and the main character stays in the center, like the OP describes. It may well be that it's still more performant, but I've never seen a benchmark showing it.
Lots of claim about faster this, etc., but the fact is that it is much slower than static html and will not work unless javascript is enabled, which is not always the case.
Getting something similar, except that it's indicating that the squareclicked function is not defined.
How would that help performance? Drawing isn't suddenly free just because you use DOM elements. If you want to cache the background, you can draw to a output bitmap that can in turn be drawn behind the characters. http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#output-bitmap
&gt; as you've alienated a large base who might use this script, but who do not want to use jQuery. How large is "large"? Did you catch the [post last week](http://www.reddit.com/r/javascript/comments/166xla/javascript_libs_usage_change_2012_jquery_12/) about [JavaScript library usage](http://w3techs.com/technologies/history_overview/javascript_library/all)?
My code, and most others I've seen, more closely resembles the link above. Once you decide a method should become public, it may as well go in the returned object literal. If it's a huge object then you'll see: //......^ code, private stuff, boilerplate wrapper var m = {}; m.doWorkSon = function() { }; //.... lots 'o more code return m; Where "m" is a common name for "module". 
You should probably make it so that the crop box can't be moved outside of the image. Right now it seems to distort the image if you move the box past the boundary of the image. Firefox 18.0 on Windows 7
That is epic, upvote for you, although it could use a bit more styling, but otherwise epic
I'm kind of curious why you're re(writing) your own CMS instead of moving the content into something like Drupal. 
Glad it was helpful. I've got a few topics for upcoming posts planned, but let me know if there's something you're interested in reading about.
AngularJS is more prescriptive, and gives you a higher level of abstraction to build on.
The major differences are that it's a revealing module, which sets up all the objects as private and then returns an anonymous object with the properties to be made public. This allows for more consistent code between public and private objects, allows renaming the objects for public consumption differently from their private internal names, and makes it easier to move something from being private to public. Additionally, the module is wrapped in an IIFE which has the primary benefit of not allowing any scope leak and explicitly passing in external dependencies. (Though given that $ is used later outside that IIFE, I'd have wrapped the whole file in it rather than just the module.)
Honestly this was just a code snippet I'd written to use as a template for myself and the junior programmers on my team, based on my understanding of js objects. I'm relatively aware of its advantages and disadvantages (like the fact that technically internal and external references to a variable within it are not necessarily referring to the same thing, because the public variation is technically a new and distinct instance of that variable that's returned). I just didn't know how to refer to it and decided to ask if anyone recognized it as an existing pattern archetype, not realizing that I'd apparently recreated a module pattern using a different syntax (which, at least to me, feels a bit more consistent). Regarding the last line where I use the $ again, I typically remove it in production and just have a init function in a different file that inits all of my objects in sequence to prevent race conditions. In this case it's only there to show how to refer to public functions from outside of the object scope. But you do make a good point in that taken as it right now it seems a bit odd hanging there at the bottom. Thanks for the feedback and info on it though.
Great looking code. Thanks for the link!
Singleton.
&gt; (like the fact that technically internal and external references to a variable within it are not necessarily referring to the same thing, because the public variation is technically a new and distinct instance of that variable that's returned). Actually, not necessarily. Anything other than a [primitive data type](http://es5.github.com/#primitive_value) is passed by reference, not by value.
For a contrary expansion of btford's statement, Angular is more dictatorial, and requires investing in the learning of a large, somewhat-documented framework in a field of active experimentation. Angular's got a lot of momentum (there's a physics joke in there somewhere), but it _does_, in my opinion, amount to extending HTML in an unhealthy manner. One consequence of this is that (in my understanding) [Angular places recursion in HTML](http://stackoverflow.com/questions/11854514/is-it-possible-to-make-a-tree-view-with-angular/11861030#11861030)--either that, or relies on its internal custom-built javascript interpreter. Or maybe that's _actually_ what it does, and recursion requires calling the Angular HTML 'compiler!' (I'm still researching for my next article.) If HTML is gaining recursion without gaining formal admission to the Turing-complete pantheon, something is going terribly wrong and it's going to either crash down in a terrible mess or result in obfuscated HTML contests. I expect the first, because C++ was built on the very robust C, whereas HTML is _just a scripting/display language_. 
Hmm, so hypothetically if the public variable in question were an object, then it'd be maintained through reference as pointing to the dame data set as opposed to instantiating a new one? Interesting... I might have to try that... Thanks for the tip
I wrote out what was meant to be a concise contrary expression to your comment and found myself typing out a [longer set of paragraphs](http://www.reddit.com/r/javascript/comments/16mdck/building_huuuuuge_apps_with_angularjs/c7xt5um), and then I realized I'd actually really like to get your take (given your defense of Angular to my last article) on that criticism. I'm about to write the final draft for a critical article of Angular, and attacking Angular's treatment of recursion is one of my main points. Additionally, what do you know/where can you point me on using canvas elements within Angular?
agreed. or joomla or even wordpress
qooxdoo!
dojo is good..
Yes, undefined is built-in, but it is actually a variable that can be assigned. The following is a perfectly valid JavaScript statement: undefined = true; By adding undefined in the argument list, but not passing it as an actual argument, you guarantee that it is really, really undefined, even if some other code had assigned a different value to undefined in the global scope. As an added benefit, minifiers may now actually shorten the undefined variable.
So, essentially, it is to preserve functionality if someone globally overwrites the value of undefined? 
This actually can't happen in newer browsers.
I see, but the location still doesn't make sense to me, If you want to make sure 'undefined' is always undefined, why not do something like this? (function(stuff) { var undefined; if(stuff === undefined) { // stuff is undefined; } })(stuff); Same functionality but more save because you don't polute the argument list, and minifiers can still shorten it.
I sometimes internally use: var undefined; Though personally I prefer to engineer my code around situations where something *might* be undefined. typeof foo === "undefined" is perfectly fine if you're not calling it 10 million times.
So, basically, using the transitive property: &gt; undefined = 42 &gt;42 = "the answer to life the universe and everything" &gt; "the answer to life the universe and everything" = undefined That's deep man. Deep.
All I can think it's one code line less. While your way is just as good, perhaps even slightly better, at this point the undefined-argument has become idiomatic so that's what most people prefer to use. 
That's what I use aswell, even if it's a bit slower I doubt that's gonna become a bottleneck. 
what was hard for me to understand is how you manage ui updates in backbone. it needs a third party template library, doesn't it? it seems that angularjs has it built-it, correct?
&gt; (function(stuff, undefined) { // code here })(stuff); This is basically a sanity guard. There is a global variable called "undefined"; a property of the Window object...it gets the default value of the type 'undefined' (this is a hack left over from JS's birth). In some versions of EcmaScript you can overwrite the global "undefined" with whatever you want since it's not treated specially. So that just creates a local private version that can't be changed. It's functionally equivalent to: (function(stuff){ var undefined; })(stuff) It also may have a small perf benefit in that you're accessing a local variable rather than a global one, but I wouldn't worry about that too much. In terms of these: if(typeof stuff === 'undefined') if(stuff === undefined) What you need to understand is **they are two different things**. The first one is asking "Is the value variable 'stuff' of the type 'undefined'?"...while the second one is asking "Is the value of the variable 'stuff' the same value as the variable 'undefined'?". This distinctions becomes important if you consider this script: (function(){ if ( typeof foo === 'undefined' ) console.log("NO FOO!"); })() If there is no global variable 'foo', this will log "NO FOO!" to the console. (function(undefined){ if ( foo === undefined ) console.log("NO FOO!"); })() If there is no global variable 'foo', this will throw an error because you are trying to dereference a variable that doesn't exist. 
&gt; Though personally I prefer to engineer my code around situations where something *might* be undefined Did you accidentally a negation here? Additionally, I feel it's worth to point out that `typeof x == 'undefined'` and `x === undefined` are slightly different: the former holds even if `x` is *undeclared*, whereas the latter only holds if `x` is declared but has the *value* `undefined`. Then again, it's always a good reason to declare one's variables, so this difference probably isn't of much use.
Your version minifies to something like: (function(x){var y;if(x===y){foo()}})(stuff); The "argument" version minifies to something like: (function(x,y){if(x===y){foo()}})(stuff); ~ 5 characters shorter. There's also an argument to be made that it makes sense because you are getting the value of "undefined" as an argument from the environment the same way you might pull in "window". Really I think it's just a stylistic preference though. Use whichever you prefer.
Pradeep Singh, get the fuck off.
We use typeof when we're conditionally including code, it's just safer incase someone yanks a declaration somewhere. Certain features are only for certain users and we'll server side include them depending on whether or not they are applicable. This and the combination of working with 3rd party libraries is why I always use typeof, now I don't depend on a 3rd party to properly include their variables.. either way my code won't break because of their bad. (I think of it like name-spacing, protecting your code from the possibilities of other people's mistakes or stupidity)
Other people already described why this is done, but I like to tell you why you shouldn't being doing this anymore. Per Ecmascript 5 "undefined" is actually non-writable and non-configurable (http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.1). This means nobody is able to change it. When you are also using strict-mode, chaning "undefined" would result in an error. Thus I strongly recommend using strict-mode in new code. Oh and the idea that using the global "undefined" might be slower is not true, when your code isn't using eval or while or some other deoptimizing chunk of code, "undefined" is just going to be optimized to the "Undefined Type". (This is also a benefit of undefined being immutable.)
I'd make it a function function isUndefined(variable) { return (variable === window[new Date().valueOf()]); } (function(stuff) { if(isUndefined(stuff)) { // stuff is undefined; } })(stuff);
Why would you make a function for build-in functionality, that doesn't actualy uses build-in functionality? If you had something like: return typeof variable === 'undefined' I'd said fair enough, but checking for a number in the window object just makes my eyebrows do funny things.
Even though I was not planning on using this trick, thank you for adding this information. It's good to know 'undefined' will be more reliable.
To me that seems too error-prone, when seeing code like that I'm seeing a check for null, not a check for undefined or null, How will I know that you meant that check to be for both null or undefined? Maybe you just made a typo and meant stuff === null? You'd have to add a comment above to tell other people you mean to check for both values, which, in my honest opinion, is doing too much effort for a simple check. Check for 'undefined', check if the typeof is undefined, make an undefined variable for checks, but don't use null if you mean undefined.
I didn't test it, really, so I can't tell you if it'd actually work, but the idea is that I'm checking against a variable that can't possibly exist. You could certainly use typeof, as you said, it's built in.
theres a special place in hell for people that define undefined.
When do you differentiate between null and undefined?
If you're really trying to be that safe what you should be doing is void 0 Being that the result of any voided operation is undefined, this is always safe, doesn't rely on local variable, coercing or anything else weird.
If you are working in an environment where 'undefined' is still able to be overwritten, the safest thing you can do is use void 0 No need for extra variables, arguments, coercion, etc. This is always safe, and void always yields undefined.
This article has some good content, I just think it bears repeating with a title like you've got that big apps are ideally just a lot of tiny separable components!
Yep, huge doesn't necessarily imply monolithic, but it's worth a reminder. I'll try to add something when I get the chance. Thanks, SubStack. :)
Backbone is focused more on binding server REST-&gt;client Models. It's Views are pretty simplistic - they basically give you a place to either build a new element or bind to an existing element in the page to provide the Model to. Backbone doesn't prescribe *how* you bind your HTML to the Model, so you can use whatever you choose to do this - manual binding, Underscore templates, JQuery templates, Handlebars, Mustache, Knockout, etc. Angular prescribes a way to do both REST-&gt;Model binding and Model -&gt; HTML binding.